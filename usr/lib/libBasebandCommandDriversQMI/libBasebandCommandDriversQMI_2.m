void sub_1B3D70F6C(_Unwind_Exception *a1)
{
  const void **v1;

  ctu::cf::CFSharedRef<void const>::~CFSharedRef(v1);
  _Unwind_Resume(a1);
}

CFTypeID ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_134(CFTypeID result, _WORD *a2)
{
  __int16 *v3;
  CFTypeID v4;
  const __CFNumber *v5;
  __int16 v6;

  v3 = *(__int16 **)(result + 32);
  v6 = 0;
  if (v3 && (v4 = CFGetTypeID(v3), result = CFNumberGetTypeID(), v4 == result))
  {
    result = ctu::cf::assign((ctu::cf *)&v6, v3, v5);
    *a2 = v6;
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

void ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_138(uint64_t a1, const void **a2)
{
  _QWORD *v2;
  const void *v3;
  const void **v4;
  const void **v5;
  const void **v6;
  _BYTE *v7;
  _WORD *v8;
  _WORD *v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  _QWORD *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  const void **v22;
  _OWORD *v23;
  const void **v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  _QWORD v28[2];
  CFTypeID (*v29)(CFTypeID, _BYTE *);
  void *v30;
  CFTypeRef cf;

  v2 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v28[0] = MEMORY[0x1E0C809B0];
  v28[1] = 1174405120;
  v29 = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_139;
  v30 = &__block_descriptor_tmp_141_1;
  v3 = *a2;
  cf = v3;
  if (v3)
    CFRetain(v3);
  v4 = (const void **)v2[6];
  v5 = (const void **)v2[7];
  v6 = v4;
  if (v4 != v5)
  {
    v6 = (const void **)v2[6];
    while (*((_BYTE *)*v6 + 8) != 30)
    {
      if (++v6 == v5)
        goto LABEL_11;
    }
  }
  if (v6 == v5)
  {
LABEL_11:
    v8 = operator new(0x10uLL);
    v9 = v8;
    v8[4] = 30;
    *(_QWORD *)v8 = off_1E66DF1F8;
    v10 = v2[8];
    if ((unint64_t)v5 < v10)
    {
      *v5 = v8;
      v11 = (uint64_t)(v5 + 1);
LABEL_24:
      v2[7] = v11;
      v29((CFTypeID)v28, (_BYTE *)v9 + 9);
      goto LABEL_25;
    }
    v12 = (char *)v5 - (char *)v4;
    v13 = v5 - v4;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v15 = v10 - (_QWORD)v4;
    if (v15 >> 2 > v14)
      v14 = v15 >> 2;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      if (v16 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v17 = operator new(8 * v16);
      v18 = &v17[8 * v13];
      v19 = &v17[8 * v16];
      *v18 = v9;
      v11 = (uint64_t)(v18 + 1);
      if (v4 == v5)
      {
LABEL_22:
        v2[6] = v18;
        v2[7] = v11;
        v2[8] = v19;
        if (!v4)
          goto LABEL_24;
LABEL_23:
        operator delete(v4);
        goto LABEL_24;
      }
    }
    else
    {
      v17 = 0;
      v18 = (_QWORD *)(8 * v13);
      v19 = 0;
      *(_QWORD *)(8 * v13) = v9;
      v11 = 8 * v13 + 8;
      if (v4 == v5)
        goto LABEL_22;
    }
    if ((unint64_t)(v12 - 8) < 0x58)
      goto LABEL_42;
    if ((unint64_t)((char *)v4 - v17) < 0x20)
      goto LABEL_42;
    v20 = ((unint64_t)(v12 - 8) >> 3) + 1;
    v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v5[v21 / 0xFFFFFFFFFFFFFFF8];
    v18 = (_QWORD *)((char *)v18 - v21);
    v23 = &v17[8 * v13 - 16];
    v24 = v5 - 2;
    v25 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      *v23 = v26;
      v23 -= 2;
      v24 -= 4;
      v25 -= 4;
    }
    while (v25);
    v5 = v22;
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_42:
      do
      {
        v27 = (uint64_t)*--v5;
        *--v18 = v27;
      }
      while (v5 != v4);
    }
    v4 = (const void **)v2[6];
    v2[6] = v18;
    v2[7] = v11;
    v2[8] = v19;
    if (!v4)
      goto LABEL_24;
    goto LABEL_23;
  }
  if (!v7)
    __cxa_bad_cast();
  ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_139((CFTypeID)v28, v7 + 9);
LABEL_25:
  if (cf)
    CFRelease(cf);
}

void sub_1B3D71294(_Unwind_Exception *a1)
{
  const void **v1;

  ctu::cf::CFSharedRef<void const>::~CFSharedRef(v1);
  _Unwind_Resume(a1);
}

CFTypeID ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_139(CFTypeID result, _BYTE *a2)
{
  unsigned __int8 *v3;
  CFTypeID v4;
  const __CFNumber *v5;
  char v6;

  v3 = *(unsigned __int8 **)(result + 32);
  v6 = 0;
  if (v3 && (v4 = CFGetTypeID(v3), result = CFNumberGetTypeID(), v4 == result))
  {
    result = ctu::cf::assign((ctu::cf *)&v6, v3, v5);
    *a2 = v6;
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

void ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_145(uint64_t a1, const void **a2)
{
  _QWORD *v2;
  const void *v3;
  const void **v4;
  const void **v5;
  _DWORD *v6;
  char *v7;
  _QWORD v8[2];
  CFTypeID (*v9)(CFTypeID, char *);
  void *v10;
  CFTypeRef cf;

  v2 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 1174405120;
  v9 = (CFTypeID (*)(CFTypeID, char *))___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_3;
  v10 = &__block_descriptor_tmp_147_0;
  v3 = *a2;
  cf = v3;
  if (v3)
    CFRetain(v3);
  v4 = (const void **)v2[6];
  v5 = (const void **)v2[7];
  if (v4 != v5)
  {
    while (*((_BYTE *)*v4 + 8) != 35)
    {
      if (++v4 == v5)
        goto LABEL_10;
    }
  }
  if (v4 == v5)
  {
LABEL_10:
    v7 = qmi::MutableMessageBase::createTLV<coex::tlv::abm::LTEInstance>(v2 + 5, 35);
    v9((CFTypeID)v8, v7);
  }
  else
  {
    if (!v6)
      __cxa_bad_cast();
    ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_3((CFTypeID)v8, v6 + 3);
  }
  if (cf)
    CFRelease(cf);
}

void sub_1B3D71434(_Unwind_Exception *a1)
{
  const void **v1;

  ctu::cf::CFSharedRef<void const>::~CFSharedRef(v1);
  _Unwind_Resume(a1);
}

void ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_149(uint64_t a1, const void **a2)
{
  _QWORD *v2;
  const void *v3;
  const void **v4;
  const void **v5;
  _DWORD *v6;
  char *v7;
  _QWORD v8[2];
  CFTypeID (*v9)(CFTypeID, char *);
  void *v10;
  CFTypeRef cf;

  v2 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 1174405120;
  v9 = (CFTypeID (*)(CFTypeID, char *))___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_150;
  v10 = &__block_descriptor_tmp_152;
  v3 = *a2;
  cf = v3;
  if (v3)
    CFRetain(v3);
  v4 = (const void **)v2[6];
  v5 = (const void **)v2[7];
  if (v4 != v5)
  {
    while (*((_BYTE *)*v4 + 8) != 36)
    {
      if (++v4 == v5)
        goto LABEL_10;
    }
  }
  if (v4 == v5)
  {
LABEL_10:
    v7 = qmi::MutableMessageBase::createTLV<coex::tlv::abm::CoexTech>(v2 + 5, 36);
    v9((CFTypeID)v8, v7);
  }
  else
  {
    if (!v6)
      __cxa_bad_cast();
    ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_150((CFTypeID)v8, v6 + 3);
  }
  if (cf)
    CFRelease(cf);
}

void sub_1B3D71550(_Unwind_Exception *a1)
{
  const void **v1;

  ctu::cf::CFSharedRef<void const>::~CFSharedRef(v1);
  _Unwind_Resume(a1);
}

CFTypeID ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_150(CFTypeID result, _DWORD *a2)
{
  unsigned int *v3;
  CFTypeID v4;
  const __CFNumber *v5;
  int v6;

  v3 = *(unsigned int **)(result + 32);
  v6 = 0;
  if (v3 && (v4 = CFGetTypeID(v3), result = CFNumberGetTypeID(), v4 == result))
  {
    result = ctu::cf::assign((ctu::cf *)&v6, v3, v5);
    *a2 = v6;
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

void ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_154(uint64_t a1, const void **a2)
{
  _QWORD *v2;
  const void *v3;
  const void **v4;
  const void **v5;
  _DWORD *v6;
  char *v7;
  _QWORD v8[2];
  CFTypeID (*v9)(CFTypeID, char *);
  void *v10;
  CFTypeRef cf;

  v2 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 1174405120;
  v9 = (CFTypeID (*)(CFTypeID, char *))___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_155;
  v10 = &__block_descriptor_tmp_157_0;
  v3 = *a2;
  cf = v3;
  if (v3)
    CFRetain(v3);
  v4 = (const void **)v2[6];
  v5 = (const void **)v2[7];
  if (v4 != v5)
  {
    while (*((_BYTE *)*v4 + 8) != 37)
    {
      if (++v4 == v5)
        goto LABEL_10;
    }
  }
  if (v4 == v5)
  {
LABEL_10:
    v7 = qmi::MutableMessageBase::createTLV<coex::tlv::abm::TechInstance>(v2 + 5, 37);
    v9((CFTypeID)v8, v7);
  }
  else
  {
    if (!v6)
      __cxa_bad_cast();
    ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_155((CFTypeID)v8, v6 + 3);
  }
  if (cf)
    CFRelease(cf);
}

void sub_1B3D716EC(_Unwind_Exception *a1)
{
  const void **v1;

  ctu::cf::CFSharedRef<void const>::~CFSharedRef(v1);
  _Unwind_Resume(a1);
}

CFTypeID ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_155(CFTypeID result, _DWORD *a2)
{
  unsigned int *v3;
  CFTypeID v4;
  const __CFNumber *v5;
  int v6;

  v3 = *(unsigned int **)(result + 32);
  v6 = 0;
  if (v3 && (v4 = CFGetTypeID(v3), result = CFNumberGetTypeID(), v4 == result))
  {
    result = ctu::cf::assign((ctu::cf *)&v6, v3, v5);
    *a2 = v6;
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

void ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_159(uint64_t a1, const void **a2)
{
  _QWORD *v2;
  const void *v3;
  const void **v4;
  const void **v5;
  const void **v6;
  _DWORD *v7;
  _BYTE *v8;
  _BYTE *v9;
  _DWORD *v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  _QWORD *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  const void **v23;
  _OWORD *v24;
  const void **v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  _QWORD v29[2];
  CFTypeID (*v30)(CFTypeID, _DWORD *);
  void *v31;
  CFTypeRef cf;

  v2 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 1174405120;
  v30 = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_160;
  v31 = &__block_descriptor_tmp_162;
  v3 = *a2;
  cf = v3;
  if (v3)
    CFRetain(v3);
  v4 = (const void **)v2[6];
  v5 = (const void **)v2[7];
  v6 = v4;
  if (v4 != v5)
  {
    v6 = (const void **)v2[6];
    while (*((_BYTE *)*v6 + 8) != 39)
    {
      if (++v6 == v5)
        goto LABEL_11;
    }
  }
  if (v6 == v5)
  {
LABEL_11:
    v8 = operator new(0x10uLL);
    v9 = v8;
    v8[8] = 39;
    *(_QWORD *)v8 = off_1E66DF338;
    *((_DWORD *)v8 + 3) = 0;
    v10 = v8 + 12;
    v11 = v2[8];
    if ((unint64_t)v5 < v11)
    {
      *v5 = v8;
      v12 = (uint64_t)(v5 + 1);
LABEL_24:
      v2[7] = v12;
      v30((CFTypeID)v29, v10);
      goto LABEL_25;
    }
    v13 = (char *)v5 - (char *)v4;
    v14 = v5 - v4;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v16 = v11 - (_QWORD)v4;
    if (v16 >> 2 > v15)
      v15 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v18 = operator new(8 * v17);
      v19 = &v18[8 * v14];
      v20 = &v18[8 * v17];
      *v19 = v9;
      v12 = (uint64_t)(v19 + 1);
      if (v4 == v5)
      {
LABEL_22:
        v2[6] = v19;
        v2[7] = v12;
        v2[8] = v20;
        if (!v4)
          goto LABEL_24;
LABEL_23:
        operator delete(v4);
        goto LABEL_24;
      }
    }
    else
    {
      v18 = 0;
      v19 = (_QWORD *)(8 * v14);
      v20 = 0;
      *(_QWORD *)(8 * v14) = v9;
      v12 = 8 * v14 + 8;
      if (v4 == v5)
        goto LABEL_22;
    }
    if ((unint64_t)(v13 - 8) < 0x58)
      goto LABEL_42;
    if ((unint64_t)((char *)v4 - v18) < 0x20)
      goto LABEL_42;
    v21 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    v23 = &v5[v22 / 0xFFFFFFFFFFFFFFF8];
    v19 = (_QWORD *)((char *)v19 - v22);
    v24 = &v18[8 * v14 - 16];
    v25 = v5 - 2;
    v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      *v24 = v27;
      v24 -= 2;
      v25 -= 4;
      v26 -= 4;
    }
    while (v26);
    v5 = v23;
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_42:
      do
      {
        v28 = (uint64_t)*--v5;
        *--v19 = v28;
      }
      while (v5 != v4);
    }
    v4 = (const void **)v2[6];
    v2[6] = v19;
    v2[7] = v12;
    v2[8] = v20;
    if (!v4)
      goto LABEL_24;
    goto LABEL_23;
  }
  if (!v7)
    __cxa_bad_cast();
  ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_160((CFTypeID)v29, v7 + 3);
LABEL_25:
  if (cf)
    CFRelease(cf);
}

void sub_1B3D71A1C(_Unwind_Exception *a1)
{
  const void **v1;

  ctu::cf::CFSharedRef<void const>::~CFSharedRef(v1);
  _Unwind_Resume(a1);
}

CFTypeID ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_160(CFTypeID result, _DWORD *a2)
{
  unsigned int *v3;
  CFTypeID v4;
  const __CFNumber *v5;
  int v6;

  v3 = *(unsigned int **)(result + 32);
  v6 = 0;
  if (v3 && (v4 = CFGetTypeID(v3), result = CFNumberGetTypeID(), v4 == result))
  {
    result = ctu::cf::assign((ctu::cf *)&v6, v3, v5);
    *a2 = v6;
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

void ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_164(uint64_t a1, const void **a2)
{
  _QWORD *v2;
  const void *v3;
  const void **v4;
  const void **v5;
  const void **v6;
  _DWORD *v7;
  _BYTE *v8;
  _BYTE *v9;
  _DWORD *v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  _QWORD *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  const void **v23;
  _OWORD *v24;
  const void **v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  _QWORD v29[2];
  void (*v30)(uint64_t, _DWORD *);
  void *v31;
  CFTypeRef cf;

  v2 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 1174405120;
  v30 = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_165;
  v31 = &__block_descriptor_tmp_167_0;
  v3 = *a2;
  cf = v3;
  if (v3)
    CFRetain(v3);
  v4 = (const void **)v2[6];
  v5 = (const void **)v2[7];
  v6 = v4;
  if (v4 != v5)
  {
    v6 = (const void **)v2[6];
    while (*((_BYTE *)*v6 + 8) != 40)
    {
      if (++v6 == v5)
        goto LABEL_11;
    }
  }
  if (v6 == v5)
  {
LABEL_11:
    v8 = operator new(0x18uLL);
    v9 = v8;
    v8[8] = 40;
    *(_QWORD *)v8 = off_1E66DF388;
    *((_DWORD *)v8 + 3) = 0;
    v10 = v8 + 12;
    *((_DWORD *)v8 + 4) = 0;
    v11 = v2[8];
    if ((unint64_t)v5 < v11)
    {
      *v5 = v8;
      v12 = (uint64_t)(v5 + 1);
LABEL_24:
      v2[7] = v12;
      v30((uint64_t)v29, v10);
      goto LABEL_25;
    }
    v13 = (char *)v5 - (char *)v4;
    v14 = v5 - v4;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v16 = v11 - (_QWORD)v4;
    if (v16 >> 2 > v15)
      v15 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v18 = operator new(8 * v17);
      v19 = &v18[8 * v14];
      v20 = &v18[8 * v17];
      *v19 = v9;
      v12 = (uint64_t)(v19 + 1);
      if (v4 == v5)
      {
LABEL_22:
        v2[6] = v19;
        v2[7] = v12;
        v2[8] = v20;
        if (!v4)
          goto LABEL_24;
LABEL_23:
        operator delete(v4);
        goto LABEL_24;
      }
    }
    else
    {
      v18 = 0;
      v19 = (_QWORD *)(8 * v14);
      v20 = 0;
      *(_QWORD *)(8 * v14) = v9;
      v12 = 8 * v14 + 8;
      if (v4 == v5)
        goto LABEL_22;
    }
    if ((unint64_t)(v13 - 8) < 0x58)
      goto LABEL_42;
    if ((unint64_t)((char *)v4 - v18) < 0x20)
      goto LABEL_42;
    v21 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    v23 = &v5[v22 / 0xFFFFFFFFFFFFFFF8];
    v19 = (_QWORD *)((char *)v19 - v22);
    v24 = &v18[8 * v14 - 16];
    v25 = v5 - 2;
    v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      *v24 = v27;
      v24 -= 2;
      v25 -= 4;
      v26 -= 4;
    }
    while (v26);
    v5 = v23;
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_42:
      do
      {
        v28 = (uint64_t)*--v5;
        *--v19 = v28;
      }
      while (v5 != v4);
    }
    v4 = (const void **)v2[6];
    v2[6] = v19;
    v2[7] = v12;
    v2[8] = v20;
    if (!v4)
      goto LABEL_24;
    goto LABEL_23;
  }
  if (!v7)
    __cxa_bad_cast();
  ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_165((uint64_t)v29, v7 + 3);
LABEL_25:
  if (cf)
    CFRelease(cf);
}

void sub_1B3D71D50(_Unwind_Exception *a1)
{
  const void **v1;

  ctu::cf::CFSharedRef<void const>::~CFSharedRef(v1);
  _Unwind_Resume(a1);
}

void ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_165(uint64_t a1, _DWORD *a2)
{
  const void *v3;
  CFTypeID v4;
  const __CFDictionary *v5;
  uint64_t (*v6)(uint64_t);
  _QWORD v7[3];
  const __CFDictionary *v8;
  uint64_t v9;

  v3 = *(const void **)(a1 + 32);
  v7[2] = v3;
  if (v3)
  {
    CFRetain(v3);
    v7[0] = v3;
    CFRetain(v3);
    v9 = 0;
    v4 = CFGetTypeID(v3);
    if (v4 == CFDictionaryGetTypeID())
    {
      CFRetain(v3);
      CFRetain(v3);
      CFRelease(v3);
      v5 = (const __CFDictionary *)v3;
    }
    else
    {
      v5 = 0;
    }
    v8 = v5;
    CFRelease(v3);
    CFRelease(v3);
  }
  else
  {
    v5 = 0;
    v8 = 0;
  }
  v6 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  if (!v5)
    v6 = 0;
  if (v6)
  {
    v7[0] = 0xAAAAAAAAAAAAAAAALL;
    v7[1] = 0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v7, v5);
    *a2 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v7, (const __CFString *)*MEMORY[0x1E0DDF2C0]);
    a2[1] = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v7, (const __CFString *)*MEMORY[0x1E0DDF220]);
    MEMORY[0x1B5E2EE44](v7);
  }
  if (v5)
    CFRelease(v5);
}

void sub_1B3D71E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN4coex16QMICommandDriver12setBLER_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke(uint64_t a1, _DWORD *a2)
{
  uint64_t result;

  result = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)(a1 + 32), (const __CFString *)*MEMORY[0x1E0DDF2A8]);
  *a2 = result;
  return result;
}

uint64_t ___ZN4coex16QMICommandDriver12setBLER_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_174(uint64_t a1, _DWORD *a2)
{
  uint64_t result;

  result = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)(a1 + 32), (const __CFString *)*MEMORY[0x1E0DDF590]);
  *a2 = result;
  return result;
}

void ___ZN4coex16QMICommandDriver12setBLER_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_177(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CFTypeRef v4;
  uint64_t (*v5)(uint64_t);
  uint64_t (*v6)(uint64_t);
  NSObject *v7;
  CFTypeRef v8;
  const void *v9;
  CFTypeRef v10;
  char __p[17];
  char v12;
  CFTypeRef cf;

  v3 = *(_QWORD *)(a1 + 32);
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  v12 = 16;
  strcpy(__p, "Start BLER stats");
  coex::QMICommandDriver::checkError(v3, a2, (uint64_t)__p, &cf);
  if ((v12 & 0x80000000) == 0)
  {
    v4 = cf;
    v5 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    if (!cf)
      v5 = 0;
    if (!v5)
      goto LABEL_9;
LABEL_10:
    v10 = v4;
    if (v4)
      goto LABEL_11;
LABEL_14:
    v9 = 0;
    coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
    v8 = cf;
    if (!cf)
      return;
    goto LABEL_15;
  }
  operator delete(*(void **)__p);
  v4 = cf;
  v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!cf)
    v6 = 0;
  if (v6)
    goto LABEL_10;
LABEL_9:
  v7 = *(NSObject **)(v3 + 40);
  if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    goto LABEL_10;
  *(_WORD *)__p = 0;
  _os_log_debug_impl(&dword_1B3CB3000, v7, OS_LOG_TYPE_DEBUG, "#D Start BLER completed", (uint8_t *)__p, 2u);
  v4 = cf;
  v10 = cf;
  if (!cf)
    goto LABEL_14;
LABEL_11:
  CFRetain(v4);
  v9 = 0;
  coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
  CFRelease(v4);
  v8 = cf;
  if (cf)
LABEL_15:
    CFRelease(v8);
}

void sub_1B3D720C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN4coex16QMICommandDriver12setBLER_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_181(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CFTypeRef v4;
  uint64_t (*v5)(uint64_t);
  uint64_t (*v6)(uint64_t);
  NSObject *v7;
  CFTypeRef v8;
  const void *v9;
  CFTypeRef v10;
  void *__p[2];
  char v12;
  CFTypeRef cf;

  v3 = *(_QWORD *)(a1 + 32);
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  v12 = 15;
  strcpy((char *)__p, "Stop BLER stats");
  coex::QMICommandDriver::checkError(v3, a2, (uint64_t)__p, &cf);
  if ((v12 & 0x80000000) == 0)
  {
    v4 = cf;
    v5 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    if (!cf)
      v5 = 0;
    if (!v5)
      goto LABEL_9;
LABEL_10:
    v10 = v4;
    if (v4)
      goto LABEL_11;
LABEL_14:
    v9 = 0;
    coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
    v8 = cf;
    if (!cf)
      return;
    goto LABEL_15;
  }
  operator delete(__p[0]);
  v4 = cf;
  v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!cf)
    v6 = 0;
  if (v6)
    goto LABEL_10;
LABEL_9:
  v7 = *(NSObject **)(v3 + 40);
  if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    goto LABEL_10;
  LOWORD(__p[0]) = 0;
  _os_log_debug_impl(&dword_1B3CB3000, v7, OS_LOG_TYPE_DEBUG, "#D Stop BLER completed", (uint8_t *)__p, 2u);
  v4 = cf;
  v10 = cf;
  if (!cf)
    goto LABEL_14;
LABEL_11:
  CFRetain(v4);
  v9 = 0;
  coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
  CFRelease(v4);
  v8 = cf;
  if (cf)
LABEL_15:
    CFRelease(v8);
}

void sub_1B3D72238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN4coex16QMICommandDriver12setSINR_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke(uint64_t a1, float *a2)
{
  uint64_t result;
  double v4;
  float v5;
  float v6;

  result = ctu::cf::map_adapter::getDouble((ctu::cf::map_adapter *)(a1 + 32), (const __CFString *)*MEMORY[0x1E0DDF700], 0.0);
  v5 = v4;
  v6 = 0.0;
  if (v5 >= 0.0)
  {
    v6 = v5;
    if (v5 > 1.0)
      v6 = 1.0;
  }
  *a2 = v6;
  return result;
}

void ___ZN4coex16QMICommandDriver12setSINR_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_186(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CFTypeRef v4;
  uint64_t (*v5)(uint64_t);
  uint64_t (*v6)(uint64_t);
  NSObject *v7;
  CFTypeRef v8;
  const void *v9;
  CFTypeRef v10;
  char __p[17];
  char v12;
  CFTypeRef cf;

  v3 = *(_QWORD *)(a1 + 32);
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  v12 = 16;
  strcpy(__p, "Start SINR stats");
  coex::QMICommandDriver::checkError(v3, a2, (uint64_t)__p, &cf);
  if ((v12 & 0x80000000) == 0)
  {
    v4 = cf;
    v5 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    if (!cf)
      v5 = 0;
    if (!v5)
      goto LABEL_9;
LABEL_10:
    v10 = v4;
    if (v4)
      goto LABEL_11;
LABEL_14:
    v9 = 0;
    coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
    v8 = cf;
    if (!cf)
      return;
    goto LABEL_15;
  }
  operator delete(*(void **)__p);
  v4 = cf;
  v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!cf)
    v6 = 0;
  if (v6)
    goto LABEL_10;
LABEL_9:
  v7 = *(NSObject **)(v3 + 40);
  if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    goto LABEL_10;
  *(_WORD *)__p = 0;
  _os_log_debug_impl(&dword_1B3CB3000, v7, OS_LOG_TYPE_DEBUG, "#D Start SINR completed", (uint8_t *)__p, 2u);
  v4 = cf;
  v10 = cf;
  if (!cf)
    goto LABEL_14;
LABEL_11:
  CFRetain(v4);
  v9 = 0;
  coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
  CFRelease(v4);
  v8 = cf;
  if (cf)
LABEL_15:
    CFRelease(v8);
}

void sub_1B3D72404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN4coex16QMICommandDriver12setSINR_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_190(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CFTypeRef v4;
  uint64_t (*v5)(uint64_t);
  uint64_t (*v6)(uint64_t);
  NSObject *v7;
  CFTypeRef v8;
  const void *v9;
  CFTypeRef v10;
  void *__p[2];
  char v12;
  CFTypeRef cf;

  v3 = *(_QWORD *)(a1 + 32);
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  v12 = 15;
  strcpy((char *)__p, "Stop SINR stats");
  coex::QMICommandDriver::checkError(v3, a2, (uint64_t)__p, &cf);
  if ((v12 & 0x80000000) == 0)
  {
    v4 = cf;
    v5 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    if (!cf)
      v5 = 0;
    if (!v5)
      goto LABEL_9;
LABEL_10:
    v10 = v4;
    if (v4)
      goto LABEL_11;
LABEL_14:
    v9 = 0;
    coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
    v8 = cf;
    if (!cf)
      return;
    goto LABEL_15;
  }
  operator delete(__p[0]);
  v4 = cf;
  v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!cf)
    v6 = 0;
  if (v6)
    goto LABEL_10;
LABEL_9:
  v7 = *(NSObject **)(v3 + 40);
  if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    goto LABEL_10;
  LOWORD(__p[0]) = 0;
  _os_log_debug_impl(&dword_1B3CB3000, v7, OS_LOG_TYPE_DEBUG, "#D Stop SINR completed", (uint8_t *)__p, 2u);
  v4 = cf;
  v10 = cf;
  if (!cf)
    goto LABEL_14;
LABEL_11:
  CFRetain(v4);
  v9 = 0;
  coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
  CFRelease(v4);
  v8 = cf;
  if (cf)
LABEL_15:
    CFRelease(v8);
}

void sub_1B3D7257C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN4coex16QMICommandDriver17setLAAConfig_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CFTypeRef v4;
  uint64_t (*v5)(uint64_t);
  uint64_t (*v6)(uint64_t);
  NSObject *v7;
  CFTypeRef v8;
  const void *v9;
  CFTypeRef v10;
  void *__p[2];
  char v12;
  CFTypeRef cf;

  v3 = *(_QWORD *)(a1 + 32);
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  v12 = 14;
  strcpy((char *)__p, "Set LAA config");
  coex::QMICommandDriver::checkError(v3, a2, (uint64_t)__p, &cf);
  if ((v12 & 0x80000000) == 0)
  {
    v4 = cf;
    v5 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    if (!cf)
      v5 = 0;
    if (!v5)
      goto LABEL_9;
LABEL_10:
    v10 = v4;
    if (v4)
      goto LABEL_11;
LABEL_14:
    v9 = 0;
    coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
    v8 = cf;
    if (!cf)
      return;
    goto LABEL_15;
  }
  operator delete(__p[0]);
  v4 = cf;
  v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!cf)
    v6 = 0;
  if (v6)
    goto LABEL_10;
LABEL_9:
  v7 = *(NSObject **)(v3 + 40);
  if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    goto LABEL_10;
  LOWORD(__p[0]) = 0;
  _os_log_debug_impl(&dword_1B3CB3000, v7, OS_LOG_TYPE_DEBUG, "#D Set LAA config completed", (uint8_t *)__p, 2u);
  v4 = cf;
  v10 = cf;
  if (!cf)
    goto LABEL_14;
LABEL_11:
  CFRetain(v4);
  v9 = 0;
  coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
  CFRelease(v4);
  v8 = cf;
  if (cf)
LABEL_15:
    CFRelease(v8);
}

void sub_1B3D726F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN4coex16QMICommandDriver22setBandFilterInfo_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke(uint64_t a1, void **a2)
{
  const void *v3;
  unint64_t Count;
  unint64_t v5;
  CFIndex v6;
  unint64_t *v7;
  const void *ValueAtIndex;
  const void *v9;
  CFTypeID v10;
  ctu::cf::map_adapter *v11;
  const __CFDictionary *v12;
  const __CFDictionary *v13;
  uint64_t (*v14)(uint64_t);
  ctu::cf::map_adapter *v15;
  unsigned int Int;
  uint64_t v17;
  unint64_t v18;
  const __CFDictionary *v19;
  const __CFDictionary *v20;
  uint64_t (*v21)(uint64_t);
  ctu::cf::map_adapter *v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  const void *v26;
  const void *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int8 v36;
  unsigned __int16 v37;
  int v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  void *v46;
  char *v47;
  char *v48;
  void **v49;
  unint64_t v50;
  const void *v51;
  __CFString *v52;
  __CFString *v53;
  __CFString *v54;
  __CFString *v55;
  __CFString *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  CFIndex v60;
  const void *v61;
  char *v62;
  _QWORD v63[3];
  char *v64;
  char *v65;
  uint64_t v66;

  v3 = *(const void **)(a1 + 32);
  if (v3)
    CFRetain(v3);
  Count = CFArrayGetCount((CFArrayRef)v3);
  v5 = Count;
  v49 = a2;
  if ((Count & 0x8000000000000000) != 0 || !Count)
  {
    v48 = 0;
    v45 = 0;
    v44 = 0;
    v46 = *a2;
    if (!*a2)
      goto LABEL_43;
    goto LABEL_42;
  }
  if (Count >= 0xAAAAAAAAAAAAAABLL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v62 = (char *)operator new(24 * Count);
  v48 = &v62[24 * v5];
  bzero(v62, 24 * ((24 * v5 - 24) / 0x18) + 24);
  v6 = 0;
  v47 = &v62[24 * ((24 * v5 - 24) / 0x18) + 24];
  v54 = (__CFString *)*MEMORY[0x1E0DDF218];
  v55 = (__CFString *)*MEMORY[0x1E0DDF268];
  v56 = (__CFString *)*MEMORY[0x1E0DDF388];
  v52 = (__CFString *)*MEMORY[0x1E0DDF240];
  v53 = (__CFString *)*MEMORY[0x1E0DDF258];
  v7 = (unint64_t *)(v62 + 16);
  v50 = v5;
  v51 = v3;
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v3, v6);
    v9 = ValueAtIndex;
    if (ValueAtIndex && (v10 = CFGetTypeID(ValueAtIndex), v10 == CFDictionaryGetTypeID()))
    {
      CFRetain(v9);
      CFRetain(v9);
    }
    else
    {
      v9 = 0;
    }
    v63[0] = 0xAAAAAAAAAAAAAAAALL;
    v63[1] = 0xAAAAAAAAAAAAAAAALL;
    v11 = (ctu::cf::map_adapter *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v63, (const __CFDictionary *)v9);
    v12 = (const __CFDictionary *)ctu::cf::map_adapter::copyCFDictionaryRef(v11, v54);
    v13 = v12;
    if (v12)
      v14 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    else
      v14 = 0;
    v61 = v9;
    if (!v14)
    {
      v18 = 0;
      if (!v12)
        goto LABEL_20;
LABEL_19:
      CFRelease(v13);
      goto LABEL_20;
    }
    v64 = (char *)0xAAAAAAAAAAAAAAAALL;
    v65 = (char *)0xAAAAAAAAAAAAAAAALL;
    v15 = (ctu::cf::map_adapter *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v64, v12);
    Int = ctu::cf::map_adapter::getInt(v15, v56);
    v17 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)&v64, v55);
    MEMORY[0x1B5E2EE44](&v64);
    v18 = Int | (unint64_t)(v17 << 32);
    if (v13)
      goto LABEL_19;
LABEL_20:
    v19 = (const __CFDictionary *)ctu::cf::map_adapter::copyCFDictionaryRef((ctu::cf::map_adapter *)v63, v53);
    v20 = v19;
    if (v19)
      v21 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    else
      v21 = 0;
    if (!v21)
    {
      v25 = 0;
      if (!v19)
        goto LABEL_28;
LABEL_27:
      CFRelease(v20);
      goto LABEL_28;
    }
    v64 = (char *)0xAAAAAAAAAAAAAAAALL;
    v65 = (char *)0xAAAAAAAAAAAAAAAALL;
    v22 = (ctu::cf::map_adapter *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v64, v19);
    v23 = ctu::cf::map_adapter::getInt(v22, v56);
    v24 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)&v64, v55);
    MEMORY[0x1B5E2EE44](&v64);
    v25 = v23 | (unint64_t)(v24 << 32);
    if (v20)
      goto LABEL_27;
LABEL_28:
    v26 = (const void *)ctu::cf::map_adapter::copyCFDataRef((ctu::cf::map_adapter *)v63, v52);
    v27 = v26;
    v63[2] = v26;
    if (v26)
      CFRetain(v26);
    v64 = 0;
    v65 = 0;
    v66 = 0;
    ctu::cf::assign();
    if (v27)
      CFRelease(v27);
    v57 = v25;
    v58 = v18;
    v59 = v7;
    v60 = v6;
    if ((unint64_t)(v65 - v64) >= 8)
    {
      v28 = *(_QWORD *)v64;
      v29 = *(_QWORD *)v64 & 0xFFFFFFFFFFFFFF00;
      v30 = *(_QWORD *)v64 & 0xFFFFFFFFFFFF0000;
      v31 = *(_QWORD *)v64 & 0xFFFFFFFFFF000000;
      v32 = *(_QWORD *)v64 & 0xFFFFFFFF00000000;
      v33 = *(_QWORD *)v64 & 0xFFFFFF0000000000;
      v34 = *(_QWORD *)v64 & 0xFFFF000000000000;
      v35 = *(_QWORD *)v64 & 0xFF00000000000000;
LABEL_37:
      v65 = v64;
      v37 = v29;
      v38 = v30;
      v39 = v31;
      v40 = v32;
      v41 = v33;
      v42 = v34;
      v43 = v35;
      operator delete(v64);
      v36 = v28;
      if (!v27)
        goto LABEL_39;
LABEL_38:
      CFRelease(v27);
      goto LABEL_39;
    }
    LOBYTE(v28) = 0;
    LOWORD(v29) = 0;
    LODWORD(v30) = 0;
    LODWORD(v31) = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v43 = 0;
    if (v64)
      goto LABEL_37;
    if (v27)
      goto LABEL_38;
LABEL_39:
    MEMORY[0x1B5E2EE44](v63);
    *(v59 - 2) = v58;
    *(v59 - 1) = v57;
    *v59 = v37 & 0xFF00 | (unint64_t)v36 | *(_QWORD *)&v38 & 0xFF0000 | v39 & 0xFF000000 | v40 & 0xFF00000000 | v41 & 0xFF0000000000 | v42 & 0xFF000000000000 | v43 & 0xFF00000000000000;
    v44 = v62;
    v3 = v51;
    if (v61)
    {
      CFRelease(v61);
      CFRelease(v61);
    }
    v6 = v60 + 1;
    v7 = v59 + 3;
  }
  while (v50 != v60 + 1);
  v45 = v47;
  a2 = v49;
  v46 = *v49;
  if (*v49)
  {
LABEL_42:
    a2[1] = v46;
    operator delete(v46);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
LABEL_43:
  *a2 = v44;
  a2[1] = v45;
  a2[2] = v48;
  if (v3)
    CFRelease(v3);
}

void sub_1B3D72BBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,const void *a25,void *__p,uint64_t a27,uint64_t a28,char a29,int a30,__int16 a31,char a32,char a33)
{
  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
    ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef(&a25);
    _Unwind_Resume(a1);
  }
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef(&a25);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_32c39_ZTSN3ctu2cf11CFSharedRefIK9__CFArrayEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_32c39_ZTSN3ctu2cf11CFSharedRefIK9__CFArrayEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    CFRelease(v1);
}

uint64_t ___ZN4coex16QMICommandDriver22setBandFilterInfo_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke_197(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void ___ZN4coex16QMICommandDriver22setBandFilterInfo_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CFTypeRef v4;
  uint64_t (*v5)(uint64_t);
  uint64_t (*v6)(uint64_t);
  NSObject *v7;
  CFTypeRef v8;
  const void *v9;
  CFTypeRef v10;
  char __p[20];
  char v12;
  CFTypeRef cf;

  v3 = *(_QWORD *)(a1 + 32);
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  v12 = 19;
  strcpy(__p, "Set BandFilter info");
  coex::QMICommandDriver::checkError(v3, a2, (uint64_t)__p, &cf);
  if ((v12 & 0x80000000) == 0)
  {
    v4 = cf;
    v5 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    if (!cf)
      v5 = 0;
    if (!v5)
      goto LABEL_9;
LABEL_10:
    v10 = v4;
    if (v4)
      goto LABEL_11;
LABEL_14:
    v9 = 0;
    coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
    v8 = cf;
    if (!cf)
      return;
    goto LABEL_15;
  }
  operator delete(*(void **)__p);
  v4 = cf;
  v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!cf)
    v6 = 0;
  if (v6)
    goto LABEL_10;
LABEL_9:
  v7 = *(NSObject **)(v3 + 40);
  if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    goto LABEL_10;
  *(_WORD *)__p = 0;
  _os_log_debug_impl(&dword_1B3CB3000, v7, OS_LOG_TYPE_DEBUG, "#D Set BandFilter info completed", (uint8_t *)__p, 2u);
  v4 = cf;
  v10 = cf;
  if (!cf)
    goto LABEL_14;
LABEL_11:
  CFRetain(v4);
  v9 = 0;
  coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
  CFRelease(v4);
  v8 = cf;
  if (cf)
LABEL_15:
    CFRelease(v8);
}

void sub_1B3D72E84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN4coex16QMICommandDriver26setScanFreqBandFilter_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke(uint64_t a1, uint64_t a2)
{
  const void *v3;
  unint64_t Count;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  CFIndex v8;
  const __CFString *v9;
  const __CFString *v10;
  const void *ValueAtIndex;
  const void *v12;
  CFTypeID v13;
  uint64_t (*v14)(uint64_t);
  unsigned int Int;
  uint64_t v16;
  char *v17;
  void *v18;
  char *v19;
  _QWORD v20[2];

  v3 = *(const void **)(a1 + 32);
  if (v3)
    CFRetain(v3);
  Count = CFArrayGetCount((CFArrayRef)v3);
  v5 = Count;
  if ((Count & 0x8000000000000000) != 0)
  {
    v5 = 0;
LABEL_21:
    v17 = 0;
    v7 = 0;
    v18 = *(void **)a2;
    if (!*(_QWORD *)a2)
      goto LABEL_23;
    goto LABEL_22;
  }
  if (!Count)
    goto LABEL_21;
  if (Count >> 61)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v6 = 8 * Count;
  v7 = (char *)operator new(8 * Count);
  bzero(v7, 8 * v5);
  v8 = 0;
  v19 = &v7[v6];
  v9 = (const __CFString *)*MEMORY[0x1E0DDF388];
  v10 = (const __CFString *)*MEMORY[0x1E0DDF268];
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v3, v8);
    v12 = ValueAtIndex;
    if (ValueAtIndex && (v13 = CFGetTypeID(ValueAtIndex), v13 == CFDictionaryGetTypeID()))
    {
      CFRetain(v12);
      CFRetain(v12);
      v14 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      if (!v12)
        v14 = 0;
      if (v14)
      {
        v20[0] = 0xAAAAAAAAAAAAAAAALL;
        v20[1] = 0xAAAAAAAAAAAAAAAALL;
        ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v20, (const __CFDictionary *)v12);
        Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v20, v9);
        v16 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v20, v10);
        MEMORY[0x1B5E2EE44](v20);
        *(_QWORD *)&v7[8 * v8] = Int | (unint64_t)(v16 << 32);
        if (!v12)
          goto LABEL_7;
LABEL_17:
        CFRelease(v12);
        CFRelease(v12);
        goto LABEL_7;
      }
    }
    else
    {
      v12 = 0;
      v14 = 0;
    }
    *(_QWORD *)&v7[8 * v8] = v14;
    if (v12)
      goto LABEL_17;
LABEL_7:
    ++v8;
  }
  while (v5 != v8);
  v17 = v19;
  v5 = (unint64_t)&v7[8 * v5];
  v18 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
LABEL_22:
    *(_QWORD *)(a2 + 8) = v18;
    operator delete(v18);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
LABEL_23:
  *(_QWORD *)a2 = v7;
  *(_QWORD *)(a2 + 8) = v17;
  *(_QWORD *)(a2 + 16) = v5;
  if (v3)
    CFRelease(v3);
}

void sub_1B3D730D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, const void *a13, void *__p, uint64_t a15, uint64_t a16, char a17, int a18, __int16 a19, char a20,char a21)
{
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
    ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef(&a13);
    _Unwind_Resume(a1);
  }
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef(&a13);
  _Unwind_Resume(a1);
}

uint64_t ___ZN4coex16QMICommandDriver26setScanFreqBandFilter_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke_202(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void ___ZN4coex16QMICommandDriver26setScanFreqBandFilter_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  CFTypeRef v5;
  uint64_t (*v6)(uint64_t);
  uint64_t (*v7)(uint64_t);
  NSObject *v8;
  CFTypeRef v9;
  const void *v10;
  CFTypeRef v11;
  void *__p;
  __int128 v13;
  CFTypeRef cf;

  v4 = *(_QWORD *)(a1 + 32);
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  __p = operator new(0x20uLL);
  v13 = xmmword_1B3DCE3F0;
  strcpy((char *)__p, "Set Scan Freq Band Filter info");
  coex::QMICommandDriver::checkError(v4, a2, (uint64_t)&__p, &cf);
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    v5 = cf;
    v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    if (!cf)
      v6 = 0;
    if (!v6)
      goto LABEL_9;
LABEL_10:
    v11 = v5;
    if (v5)
      goto LABEL_11;
LABEL_14:
    v10 = 0;
    coex::CommandDriver::Callback::operator()(a1 + 40, &v11, &v10);
    v9 = cf;
    if (!cf)
      return;
    goto LABEL_15;
  }
  operator delete(__p);
  v5 = cf;
  v7 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!cf)
    v7 = 0;
  if (v7)
    goto LABEL_10;
LABEL_9:
  v8 = *(NSObject **)(v4 + 40);
  if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    goto LABEL_10;
  LOWORD(__p) = 0;
  _os_log_debug_impl(&dword_1B3CB3000, v8, OS_LOG_TYPE_DEBUG, "#D Set Scan Freq Band Filter info completed", (uint8_t *)&__p, 2u);
  v5 = cf;
  v11 = cf;
  if (!cf)
    goto LABEL_14;
LABEL_11:
  CFRetain(v5);
  v10 = 0;
  coex::CommandDriver::Callback::operator()(a1 + 40, &v11, &v10);
  CFRelease(v5);
  v9 = cf;
  if (cf)
LABEL_15:
    CFRelease(v9);
}

void sub_1B3D732E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN4coex16QMICommandDriver26getScanFreqBandFilter_syncENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke_2(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v4;
  CFMutableDictionaryRef v5;
  uint64_t (*v6)(uint64_t);
  CFMutableDictionaryRef Mutable;
  tlv *TlvValue;
  int v9;
  tlv *v10;
  int v11;
  tlv *v12;
  NSObject *v13;
  CFTypeRef v14;
  CFTypeID v15;
  CFTypeRef v16;
  CFMutableDictionaryRef v17;
  CFTypeRef v18;
  CFMutableDictionaryRef v19;
  CFTypeRef v20;
  CFMutableDictionaryRef v21;
  void *__p;
  __int128 v23;
  void *v24;
  CFTypeRef cf;
  uint64_t v26;
  uint64_t v27;
  void *v28[3];
  tlv *v29;

  v4 = *(_QWORD *)(a1 + 32);
  v20 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  v21 = 0;
  __p = operator new(0x20uLL);
  v23 = xmmword_1B3DCE3F0;
  strcpy((char *)__p, "Get Scan Freq Band Filter info");
  coex::QMICommandDriver::checkError(v4, (uint64_t)a2, (uint64_t)&__p, &v20);
  if (SHIBYTE(v23) < 0)
    operator delete(__p);
  v5 = 0;
  if (v20)
    v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  else
    v6 = 0;
  if (!v6)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v5 = Mutable;
    if (Mutable)
    {
      v21 = Mutable;
      v19 = Mutable;
      CFRetain(Mutable);
    }
    else
    {
      v19 = 0;
    }
    v27 = 0;
    __p = (void *)MEMORY[0x1E0C809B0];
    *(_QWORD *)&v23 = 1174405120;
    *((_QWORD *)&v23 + 1) = ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm18ScanFreqBandFilterENS_3abm21GetScanFreqBandFilter8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
    v24 = &__block_descriptor_tmp_317;
    cf = v5;
    if (v5)
      CFRetain(v5);
    v26 = *MEMORY[0x1E0DDF408];
    TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
    v10 = TlvValue;
    if (TlvValue)
    {
      v11 = v9;
      v29 = TlvValue;
      memset(v28, 170, sizeof(v28));
      tlv::parseV<coex::tlv::abm::ScanFreqBandFilter>(&v29, v9, (uint64_t)v28);
      v12 = v29;
      if (v29)
        (*((void (**)(void **, void **))&v23 + 1))(&__p, v28);
      if (v28[0])
      {
        v28[1] = v28[0];
        operator delete(v28[0]);
      }
      if (!v12)
        ((void (*)(_QWORD, uint64_t, tlv *, _QWORD))*MEMORY[0x1E0DE2D28])(*(unsigned __int16 *)a2, 16, v10, v11);
    }
    if (cf)
      CFRelease(cf);
    if (v5)
      CFRelease(v5);
    v13 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(__p) = 0;
      _os_log_debug_impl(&dword_1B3CB3000, v13, OS_LOG_TYPE_DEBUG, "#D Get Scan Freq Band Filter info completed", (uint8_t *)&__p, 2u);
      v14 = v20;
      v18 = v20;
      if (!v20)
        goto LABEL_26;
      goto LABEL_25;
    }
  }
  v14 = v20;
  v18 = v20;
  if (v20)
LABEL_25:
    CFRetain(v14);
LABEL_26:
  if (!v5 || (v15 = CFGetTypeID(v5), v15 != CFDictionaryGetTypeID()))
  {
    v17 = 0;
    coex::CommandDriver::Callback::operator()(a1 + 40, &v18, (const void **)&v17);
    v16 = v18;
    if (!v18)
      goto LABEL_32;
    goto LABEL_31;
  }
  v17 = v5;
  CFRetain(v5);
  coex::CommandDriver::Callback::operator()(a1 + 40, &v18, (const void **)&v17);
  CFRelease(v5);
  v16 = v18;
  if (v18)
LABEL_31:
    CFRelease(v16);
LABEL_32:
  if (v20)
    CFRelease(v20);
  if (v5)
    CFRelease(v5);
}

void sub_1B3D735D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, const void *a13, const void *a14, const void *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,const void *a26)
{
  uint64_t v26;
  void *v28;

  v28 = *(void **)(v26 - 96);
  if (v28)
  {
    *(_QWORD *)(v26 - 88) = v28;
    operator delete(v28);
  }
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)&a23);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef(&a26);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a13);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a14);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a15);
  _Unwind_Resume(a1);
}

void ___ZN4coex16QMICommandDriver23setTimeShareConfig_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CFTypeRef v4;
  uint64_t (*v5)(uint64_t);
  uint64_t (*v6)(uint64_t);
  NSObject *v7;
  CFTypeRef v8;
  const void *v9;
  CFTypeRef v10;
  char __p[22];
  char v12;
  CFTypeRef cf;

  v3 = *(_QWORD *)(a1 + 32);
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  v12 = 21;
  strcpy(__p, "Set Time share config");
  coex::QMICommandDriver::checkError(v3, a2, (uint64_t)__p, &cf);
  if ((v12 & 0x80000000) == 0)
  {
    v4 = cf;
    v5 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    if (!cf)
      v5 = 0;
    if (!v5)
      goto LABEL_9;
LABEL_10:
    v10 = v4;
    if (v4)
      goto LABEL_11;
LABEL_14:
    v9 = 0;
    coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
    v8 = cf;
    if (!cf)
      return;
    goto LABEL_15;
  }
  operator delete(*(void **)__p);
  v4 = cf;
  v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!cf)
    v6 = 0;
  if (v6)
    goto LABEL_10;
LABEL_9:
  v7 = *(NSObject **)(v3 + 40);
  if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    goto LABEL_10;
  *(_WORD *)__p = 0;
  _os_log_debug_impl(&dword_1B3CB3000, v7, OS_LOG_TYPE_DEBUG, "#D Set Time share config completed", (uint8_t *)__p, 2u);
  v4 = cf;
  v10 = cf;
  if (!cf)
    goto LABEL_14;
LABEL_11:
  CFRetain(v4);
  v9 = 0;
  coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
  CFRelease(v4);
  v8 = cf;
  if (cf)
LABEL_15:
    CFRelease(v8);
}

void sub_1B3D737F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN4coex16QMICommandDriver20setWCI2TxAntMap_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CFTypeRef v4;
  uint64_t (*v5)(uint64_t);
  uint64_t (*v6)(uint64_t);
  NSObject *v7;
  CFTypeRef v8;
  const void *v9;
  CFTypeRef v10;
  char __p[19];
  char v12;
  CFTypeRef cf;

  v3 = *(_QWORD *)(a1 + 32);
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  v12 = 18;
  strcpy(__p, "Set Tx antenna map");
  coex::QMICommandDriver::checkError(v3, a2, (uint64_t)__p, &cf);
  if ((v12 & 0x80000000) == 0)
  {
    v4 = cf;
    v5 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    if (!cf)
      v5 = 0;
    if (!v5)
      goto LABEL_9;
LABEL_10:
    v10 = v4;
    if (v4)
      goto LABEL_11;
LABEL_14:
    v9 = 0;
    coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
    v8 = cf;
    if (!cf)
      return;
    goto LABEL_15;
  }
  operator delete(*(void **)__p);
  v4 = cf;
  v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!cf)
    v6 = 0;
  if (v6)
    goto LABEL_10;
LABEL_9:
  v7 = *(NSObject **)(v3 + 40);
  if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    goto LABEL_10;
  *(_WORD *)__p = 0;
  _os_log_debug_impl(&dword_1B3CB3000, v7, OS_LOG_TYPE_DEBUG, "#D Set Tx antenna map completed", (uint8_t *)__p, 2u);
  v4 = cf;
  v10 = cf;
  if (!cf)
    goto LABEL_14;
LABEL_11:
  CFRetain(v4);
  v9 = 0;
  coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
  CFRelease(v4);
  v8 = cf;
  if (cf)
LABEL_15:
    CFRelease(v8);
}

void sub_1B3D73970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN4coex16QMICommandDriver19setAntBlocking_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CFTypeRef v4;
  uint64_t (*v5)(uint64_t);
  uint64_t (*v6)(uint64_t);
  NSObject *v7;
  CFTypeRef v8;
  const void *v9;
  CFTypeRef v10;
  char __p[17];
  char v12;
  CFTypeRef cf;

  v3 = *(_QWORD *)(a1 + 32);
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  v12 = 16;
  strcpy(__p, "Set Ant blocking");
  coex::QMICommandDriver::checkError(v3, a2, (uint64_t)__p, &cf);
  if ((v12 & 0x80000000) == 0)
  {
    v4 = cf;
    v5 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    if (!cf)
      v5 = 0;
    if (!v5)
      goto LABEL_9;
LABEL_10:
    v10 = v4;
    if (v4)
      goto LABEL_11;
LABEL_14:
    v9 = 0;
    coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
    v8 = cf;
    if (!cf)
      return;
    goto LABEL_15;
  }
  operator delete(*(void **)__p);
  v4 = cf;
  v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!cf)
    v6 = 0;
  if (v6)
    goto LABEL_10;
LABEL_9:
  v7 = *(NSObject **)(v3 + 40);
  if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    goto LABEL_10;
  *(_WORD *)__p = 0;
  _os_log_debug_impl(&dword_1B3CB3000, v7, OS_LOG_TYPE_DEBUG, "#D Set Ant blocking completed", (uint8_t *)__p, 2u);
  v4 = cf;
  v10 = cf;
  if (!cf)
    goto LABEL_14;
LABEL_11:
  CFRetain(v4);
  v9 = 0;
  coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
  CFRelease(v4);
  v8 = cf;
  if (cf)
LABEL_15:
    CFRelease(v8);
}

void sub_1B3D73AE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN4coex16QMICommandDriver25setClientAntBlocking_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  CFTypeRef v5;
  uint64_t (*v6)(uint64_t);
  uint64_t (*v7)(uint64_t);
  NSObject *v8;
  CFTypeRef v9;
  const void *v10;
  CFTypeRef v11;
  void *__p;
  __int128 v13;
  CFTypeRef cf;

  v4 = *(_QWORD *)(a1 + 32);
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  __p = operator new(0x19uLL);
  v13 = xmmword_1B3DD0CB0;
  strcpy((char *)__p, "Set client Ant blocking");
  coex::QMICommandDriver::checkError(v4, a2, (uint64_t)&__p, &cf);
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    v5 = cf;
    v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    if (!cf)
      v6 = 0;
    if (!v6)
      goto LABEL_9;
LABEL_10:
    v11 = v5;
    if (v5)
      goto LABEL_11;
LABEL_14:
    v10 = 0;
    coex::CommandDriver::Callback::operator()(a1 + 40, &v11, &v10);
    v9 = cf;
    if (!cf)
      return;
    goto LABEL_15;
  }
  operator delete(__p);
  v5 = cf;
  v7 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!cf)
    v7 = 0;
  if (v7)
    goto LABEL_10;
LABEL_9:
  v8 = *(NSObject **)(v4 + 40);
  if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    goto LABEL_10;
  LOWORD(__p) = 0;
  _os_log_debug_impl(&dword_1B3CB3000, v8, OS_LOG_TYPE_DEBUG, "#D Set client Ant blocking completed", (uint8_t *)&__p, 2u);
  v5 = cf;
  v11 = cf;
  if (!cf)
    goto LABEL_14;
LABEL_11:
  CFRetain(v5);
  v10 = 0;
  coex::CommandDriver::Callback::operator()(a1 + 40, &v11, &v10);
  CFRelease(v5);
  v9 = cf;
  if (cf)
LABEL_15:
    CFRelease(v9);
}

void sub_1B3D73C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN4coex16QMICommandDriver33setClientAntBlockingExtended_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  CFTypeRef v5;
  uint64_t (*v6)(uint64_t);
  uint64_t (*v7)(uint64_t);
  NSObject *v8;
  CFTypeRef v9;
  const void *v10;
  CFTypeRef v11;
  void *__p;
  __int128 v13;
  CFTypeRef cf;

  v4 = *(_QWORD *)(a1 + 32);
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  __p = operator new(0x28uLL);
  v13 = xmmword_1B3DCB3B0;
  strcpy((char *)__p, "Set client Ant blocking extended");
  coex::QMICommandDriver::checkError(v4, a2, (uint64_t)&__p, &cf);
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    v5 = cf;
    v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    if (!cf)
      v6 = 0;
    if (!v6)
      goto LABEL_9;
LABEL_10:
    v11 = v5;
    if (v5)
      goto LABEL_11;
LABEL_14:
    v10 = 0;
    coex::CommandDriver::Callback::operator()(a1 + 40, &v11, &v10);
    v9 = cf;
    if (!cf)
      return;
    goto LABEL_15;
  }
  operator delete(__p);
  v5 = cf;
  v7 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!cf)
    v7 = 0;
  if (v7)
    goto LABEL_10;
LABEL_9:
  v8 = *(NSObject **)(v4 + 40);
  if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    goto LABEL_10;
  LOWORD(__p) = 0;
  _os_log_debug_impl(&dword_1B3CB3000, v8, OS_LOG_TYPE_DEBUG, "#D Set client Ant blocking extended completed", (uint8_t *)&__p, 2u);
  v5 = cf;
  v11 = cf;
  if (!cf)
    goto LABEL_14;
LABEL_11:
  CFRetain(v5);
  v10 = 0;
  coex::CommandDriver::Callback::operator()(a1 + 40, &v11, &v10);
  CFRelease(v5);
  v9 = cf;
  if (cf)
LABEL_15:
    CFRelease(v9);
}

void sub_1B3D73DF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN4coex16QMICommandDriver30setTriggerAntennaBlocking_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  CFTypeRef v5;
  uint64_t (*v6)(uint64_t);
  uint64_t (*v7)(uint64_t);
  NSObject *v8;
  CFTypeRef v9;
  const void *v10;
  CFTypeRef v11;
  void *__p;
  __int128 v13;
  CFTypeRef cf;

  v4 = *(_QWORD *)(a1 + 32);
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  __p = operator new(0x28uLL);
  v13 = xmmword_1B3DD0CC0;
  strcpy((char *)__p, "Set trigger antenna blocking params");
  coex::QMICommandDriver::checkError(v4, a2, (uint64_t)&__p, &cf);
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    v5 = cf;
    v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    if (!cf)
      v6 = 0;
    if (!v6)
      goto LABEL_9;
LABEL_10:
    v11 = v5;
    if (v5)
      goto LABEL_11;
LABEL_14:
    v10 = 0;
    coex::CommandDriver::Callback::operator()(a1 + 40, &v11, &v10);
    v9 = cf;
    if (!cf)
      return;
    goto LABEL_15;
  }
  operator delete(__p);
  v5 = cf;
  v7 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!cf)
    v7 = 0;
  if (v7)
    goto LABEL_10;
LABEL_9:
  v8 = *(NSObject **)(v4 + 40);
  if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    goto LABEL_10;
  LOWORD(__p) = 0;
  _os_log_debug_impl(&dword_1B3CB3000, v8, OS_LOG_TYPE_DEBUG, "#D Set triggering antenna blocking completed", (uint8_t *)&__p, 2u);
  v5 = cf;
  v11 = cf;
  if (!cf)
    goto LABEL_14;
LABEL_11:
  CFRetain(v5);
  v10 = 0;
  coex::CommandDriver::Callback::operator()(a1 + 40, &v11, &v10);
  CFRelease(v5);
  v9 = cf;
  if (cf)
LABEL_15:
    CFRelease(v9);
}

void sub_1B3D73F8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN4coex16QMICommandDriver11setCC1_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CFTypeRef v4;
  uint64_t (*v5)(uint64_t);
  uint64_t (*v6)(uint64_t);
  NSObject *v7;
  CFTypeRef v8;
  const void *v9;
  CFTypeRef v10;
  void *__p[2];
  char v12;
  CFTypeRef cf;

  v3 = *(_QWORD *)(a1 + 32);
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  v12 = 7;
  strcpy((char *)__p, "Set CC1");
  coex::QMICommandDriver::checkError(v3, a2, (uint64_t)__p, &cf);
  if ((v12 & 0x80000000) == 0)
  {
    v4 = cf;
    v5 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    if (!cf)
      v5 = 0;
    if (!v5)
      goto LABEL_9;
LABEL_10:
    v10 = v4;
    if (v4)
      goto LABEL_11;
LABEL_14:
    v9 = 0;
    coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
    v8 = cf;
    if (!cf)
      return;
    goto LABEL_15;
  }
  operator delete(__p[0]);
  v4 = cf;
  v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!cf)
    v6 = 0;
  if (v6)
    goto LABEL_10;
LABEL_9:
  v7 = *(NSObject **)(v3 + 40);
  if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    goto LABEL_10;
  LOWORD(__p[0]) = 0;
  _os_log_debug_impl(&dword_1B3CB3000, v7, OS_LOG_TYPE_DEBUG, "#D Set CC1 completed", (uint8_t *)__p, 2u);
  v4 = cf;
  v10 = cf;
  if (!cf)
    goto LABEL_14;
LABEL_11:
  CFRetain(v4);
  v9 = 0;
  coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
  CFRelease(v4);
  v8 = cf;
  if (cf)
LABEL_15:
    CFRelease(v8);
}

void sub_1B3D74104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN4coex16QMICommandDriver11setCC2_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CFTypeRef v4;
  uint64_t (*v5)(uint64_t);
  uint64_t (*v6)(uint64_t);
  NSObject *v7;
  CFTypeRef v8;
  const void *v9;
  CFTypeRef v10;
  void *__p[2];
  char v12;
  CFTypeRef cf;

  v3 = *(_QWORD *)(a1 + 32);
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  v12 = 7;
  strcpy((char *)__p, "Set CC2");
  coex::QMICommandDriver::checkError(v3, a2, (uint64_t)__p, &cf);
  if ((v12 & 0x80000000) == 0)
  {
    v4 = cf;
    v5 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    if (!cf)
      v5 = 0;
    if (!v5)
      goto LABEL_9;
LABEL_10:
    v10 = v4;
    if (v4)
      goto LABEL_11;
LABEL_14:
    v9 = 0;
    coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
    v8 = cf;
    if (!cf)
      return;
    goto LABEL_15;
  }
  operator delete(__p[0]);
  v4 = cf;
  v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!cf)
    v6 = 0;
  if (v6)
    goto LABEL_10;
LABEL_9:
  v7 = *(NSObject **)(v3 + 40);
  if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    goto LABEL_10;
  LOWORD(__p[0]) = 0;
  _os_log_debug_impl(&dword_1B3CB3000, v7, OS_LOG_TYPE_DEBUG, "#D Set CC2 completed", (uint8_t *)__p, 2u);
  v4 = cf;
  v10 = cf;
  if (!cf)
    goto LABEL_14;
LABEL_11:
  CFRetain(v4);
  v9 = 0;
  coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
  CFRelease(v4);
  v8 = cf;
  if (cf)
LABEL_15:
    CFRelease(v8);
}

void sub_1B3D7427C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN4coex16QMICommandDriver23setLaaGpioThrottle_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CFTypeRef v4;
  uint64_t (*v5)(uint64_t);
  uint64_t (*v6)(uint64_t);
  NSObject *v7;
  CFTypeRef v8;
  const void *v9;
  CFTypeRef v10;
  char __p[22];
  char v12;
  CFTypeRef cf;

  v3 = *(_QWORD *)(a1 + 32);
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  v12 = 21;
  strcpy(__p, "Set LAA GPIO throttle");
  coex::QMICommandDriver::checkError(v3, a2, (uint64_t)__p, &cf);
  if ((v12 & 0x80000000) == 0)
  {
    v4 = cf;
    v5 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    if (!cf)
      v5 = 0;
    if (!v5)
      goto LABEL_9;
LABEL_10:
    v10 = v4;
    if (v4)
      goto LABEL_11;
LABEL_14:
    v9 = 0;
    coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
    v8 = cf;
    if (!cf)
      return;
    goto LABEL_15;
  }
  operator delete(*(void **)__p);
  v4 = cf;
  v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!cf)
    v6 = 0;
  if (v6)
    goto LABEL_10;
LABEL_9:
  v7 = *(NSObject **)(v3 + 40);
  if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    goto LABEL_10;
  *(_WORD *)__p = 0;
  _os_log_debug_impl(&dword_1B3CB3000, v7, OS_LOG_TYPE_DEBUG, "#D Set LAA GPIO throttle completed", (uint8_t *)__p, 2u);
  v4 = cf;
  v10 = cf;
  if (!cf)
    goto LABEL_14;
LABEL_11:
  CFRetain(v4);
  v9 = 0;
  coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
  CFRelease(v4);
  v8 = cf;
  if (cf)
LABEL_15:
    CFRelease(v8);
}

void sub_1B3D743F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN4coex16QMICommandDriver18setGnssParams_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CFTypeRef v4;
  uint64_t (*v5)(uint64_t);
  uint64_t (*v6)(uint64_t);
  NSObject *v7;
  CFTypeRef v8;
  const void *v9;
  CFTypeRef v10;
  void *__p[2];
  char v12;
  CFTypeRef cf;

  v3 = *(_QWORD *)(a1 + 32);
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  v12 = 15;
  strcpy((char *)__p, "Set Gnss params");
  coex::QMICommandDriver::checkError(v3, a2, (uint64_t)__p, &cf);
  if ((v12 & 0x80000000) == 0)
  {
    v4 = cf;
    v5 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    if (!cf)
      v5 = 0;
    if (!v5)
      goto LABEL_9;
LABEL_10:
    v10 = v4;
    if (v4)
      goto LABEL_11;
LABEL_14:
    v9 = 0;
    coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
    v8 = cf;
    if (!cf)
      return;
    goto LABEL_15;
  }
  operator delete(__p[0]);
  v4 = cf;
  v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!cf)
    v6 = 0;
  if (v6)
    goto LABEL_10;
LABEL_9:
  v7 = *(NSObject **)(v3 + 40);
  if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    goto LABEL_10;
  LOWORD(__p[0]) = 0;
  _os_log_debug_impl(&dword_1B3CB3000, v7, OS_LOG_TYPE_DEBUG, "#D Set Gnss params completed", (uint8_t *)__p, 2u);
  v4 = cf;
  v10 = cf;
  if (!cf)
    goto LABEL_14;
LABEL_11:
  CFRetain(v4);
  v9 = 0;
  coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
  CFRelease(v4);
  v8 = cf;
  if (cf)
LABEL_15:
    CFRelease(v8);
}

void sub_1B3D7456C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::Loggable<coex::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<coex::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(coex::CommandDriver *a1@<X0>, _QWORD *a2@<X8>)
{
  const char *Name;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  Name = (const char *)coex::CommandDriver::getName(a1);
  result = strlen(Name);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, Name, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<coex::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *boost::signals2::signal<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::~signal(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *a1 = &off_1E66DDCC8;
  v2 = (unsigned int *)a1[2];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

_QWORD *boost::signals2::signal<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::~signal(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *a1 = &off_1E66DDD38;
  v2 = (unsigned int *)a1[2];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

void boost::signals2::signal<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::~signal(_QWORD *__p)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *__p = &off_1E66DDCC8;
  v2 = (unsigned int *)__p[2];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  operator delete(__p);
}

uint64_t boost::signals2::signal<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::lock_pimpl@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(result + 16);
  *a2 = *(_QWORD *)(result + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void boost::signals2::signal<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::~signal(_QWORD *__p)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *__p = &off_1E66DDD38;
  v2 = (unsigned int *)__p[2];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  operator delete(__p);
}

uint64_t boost::signals2::signal<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::lock_pimpl@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(result + 16);
  *a2 = *(_QWORD *)(result + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

_QWORD *ctu::Loggable<coex::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E66DDDA8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<coex::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E66DDDA8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

uint64_t ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

void ctu::Loggable<coex::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1B3D74A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1B3D74A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<coex::QMICommandDriver>::shared_ptr[abi:ne180100]<coex::QMICommandDriver,std::shared_ptr<coex::QMICommandDriver> ctu::SharedSynchronizable<coex::CommandDriver>::make_shared_ptr<coex::QMICommandDriver>(coex::QMICommandDriver*)::{lambda(coex::QMICommandDriver*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E66DDE18;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1B3D74B58(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<coex::QMICommandDriver> ctu::SharedSynchronizable<coex::CommandDriver>::make_shared_ptr<coex::QMICommandDriver>(coex::QMICommandDriver*)::{lambda(coex::QMICommandDriver*)#1}::operator() const(coex::QMICommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1B3D74B78(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<coex::QMICommandDriver *,std::shared_ptr<coex::QMICommandDriver> ctu::SharedSynchronizable<coex::CommandDriver>::make_shared_ptr<coex::QMICommandDriver>(coex::QMICommandDriver*)::{lambda(coex::QMICommandDriver *)#1},std::allocator<coex::QMICommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<coex::QMICommandDriver *,std::shared_ptr<coex::QMICommandDriver> ctu::SharedSynchronizable<coex::CommandDriver>::make_shared_ptr<coex::QMICommandDriver>(coex::QMICommandDriver*)::{lambda(coex::QMICommandDriver *)#1},std::allocator<coex::QMICommandDriver>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<coex::QMICommandDriver> ctu::SharedSynchronizable<coex::CommandDriver>::make_shared_ptr<coex::QMICommandDriver>(coex::QMICommandDriver*)::{lambda(coex::QMICommandDriver*)#1}::operator() const(coex::QMICommandDriver*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<coex::QMICommandDriver *,std::shared_ptr<coex::QMICommandDriver> ctu::SharedSynchronizable<coex::CommandDriver>::make_shared_ptr<coex::QMICommandDriver>(coex::QMICommandDriver*)::{lambda(coex::QMICommandDriver *)#1},std::allocator<coex::QMICommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN4coex13CommandDriverEE15make_shared_ptrINS1_16QMICommandDriverEEENSt3"
                     "__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN4coex13CommandDriverEE15make_shared_ptrINS1_16QMICommandDr"
                                "iverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN4coex13CommandDriverEE15make_shared_ptrINS1_16QMICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN4coex13CommandDriverEE15make_shared_ptrINS1_16QMICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<coex::QMICommandDriver> ctu::SharedSynchronizable<coex::CommandDriver>::make_shared_ptr<coex::QMICommandDriver>(coex::QMICommandDriver*)::{lambda(coex::QMICommandDriver*)#1}::operator() const(coex::QMICommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t *boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(uint64_t *a1)
{
  if (*(_DWORD *)(*a1 + 280) > *(_DWORD *)(*a1 + 276))
    boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::force_cleanup_connections(a1[1], a1[2]);
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

uint64_t boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>::erase(uint64_t *a1, int *a2, uint64_t **a3)
{
  uint64_t v6;
  uint64_t **v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t *v16;
  int v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t **v25;
  uint64_t **v26;
  int v27;
  uint64_t ***v28;
  BOOL v29;
  BOOL v30;
  uint64_t ***v31;
  uint64_t *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t *v37;
  uint64_t *v38;
  int v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;

  v7 = (uint64_t **)(a1 + 4);
  v6 = a1[4];
  if (!v6)
  {
    v23 = (uint64_t *)a1[10];
    if (v23 != *a3)
      goto LABEL_80;
    v24 = (uint64_t *)v23[1];
    v25 = (uint64_t **)(a1 + 4);
    v10 = a1 + 4;
    if (v24 != a1)
      goto LABEL_76;
    goto LABEL_55;
  }
  v8 = *a2;
  v9 = a2[2];
  v10 = a1 + 4;
  v11 = a1[4];
  if (*a2 == 1)
  {
    do
    {
      while (1)
      {
        v17 = *(_DWORD *)(v11 + 32);
        v18 = v17 < 1;
        if (v17 == 1)
          v18 = *(_DWORD *)(v11 + 40) < v9;
        if (!v18)
          break;
        v11 = *(_QWORD *)(v11 + 8);
        if (!v11)
          goto LABEL_19;
      }
      v10 = (uint64_t *)v11;
      v11 = *(_QWORD *)v11;
    }
    while (v11);
  }
  else
  {
    do
    {
      v12 = *(_DWORD *)(v11 + 32);
      v13 = v12 == v8;
      v14 = v12 < v8;
      if (v12 >= v8)
        v15 = (uint64_t *)v11;
      else
        v15 = (uint64_t *)(v11 + 8);
      if (v14)
        v16 = v10;
      else
        v16 = (uint64_t *)v11;
      if (v13)
      {
        v15 = (uint64_t *)v11;
        v10 = (uint64_t *)v11;
      }
      else
      {
        v10 = v16;
      }
      v11 = *v15;
    }
    while (*v15);
  }
LABEL_19:
  v19 = (uint64_t *)v10[6];
  if (v19 != *a3)
    goto LABEL_80;
  v20 = (uint64_t **)(a1 + 4);
  if (v8 == 1)
  {
    v21 = (uint64_t *)a1[4];
    while (1)
    {
      v22 = *((_DWORD *)v21 + 8);
      if (v22 == 1)
      {
        if (v9 < *((_DWORD *)v21 + 10))
          goto LABEL_27;
LABEL_22:
        v21 = (uint64_t *)v21[1];
        if (!v21)
          goto LABEL_42;
      }
      else
      {
        if (v22 <= 1)
          goto LABEL_22;
LABEL_27:
        v20 = (uint64_t **)v21;
        v21 = (uint64_t *)*v21;
        if (!v21)
          goto LABEL_42;
      }
    }
  }
  v26 = (uint64_t **)a1[4];
  do
  {
    v27 = *((_DWORD *)v26 + 8);
    v28 = (uint64_t ***)(v26 + 1);
    v29 = v8 == v27;
    v30 = v8 < v27;
    if (v8 >= v27)
      v31 = (uint64_t ***)(v26 + 1);
    else
      v31 = (uint64_t ***)v26;
    if (!v30)
      v26 = v20;
    if (v29)
      v31 = v28;
    else
      v20 = v26;
    v26 = *v31;
  }
  while (*v31);
LABEL_42:
  v24 = (uint64_t *)v19[1];
  v32 = a1;
  if (v20 != v7)
    v32 = v20[6];
  if (v24 == v32)
  {
LABEL_55:
    v37 = (uint64_t *)v10[1];
    if (v37)
    {
      do
      {
        v38 = v37;
        v37 = (uint64_t *)*v37;
      }
      while (v37);
    }
    else
    {
      v41 = v10;
      do
      {
        v38 = (uint64_t *)v41[2];
        v13 = *v38 == (_QWORD)v41;
        v41 = v38;
      }
      while (!v13);
    }
    if ((uint64_t *)a1[3] == v10)
      a1[3] = (uint64_t)v38;
    --a1[5];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v6, v10);
    operator delete(v10);
    goto LABEL_80;
  }
  v33 = *a2;
  if (*a2 == 1)
  {
    v34 = a2[2];
    while (1)
    {
      v25 = (uint64_t **)v6;
      v35 = *(_DWORD *)(v6 + 32);
      if (v35 == 1)
      {
        v36 = *(_DWORD *)(v6 + 40);
        if (v36 <= v34)
        {
          if (v36 >= v34)
          {
            *(_QWORD *)(v6 + 48) = v24;
            goto LABEL_80;
          }
          goto LABEL_53;
        }
LABEL_47:
        v6 = *(_QWORD *)v6;
        if (!*v25)
        {
          v7 = v25;
          goto LABEL_76;
        }
      }
      else
      {
        if (v35 > 1)
          goto LABEL_47;
LABEL_53:
        v6 = *(_QWORD *)(v6 + 8);
        if (!v6)
        {
          v7 = v25 + 1;
          goto LABEL_76;
        }
      }
    }
  }
  v39 = *(_DWORD *)(v6 + 32);
  if (v33 == v39)
    goto LABEL_79;
  while (v33 >= v39)
  {
    if (v39 >= v33)
      goto LABEL_79;
    v40 = *(_QWORD *)(v6 + 8);
    if (!v40)
    {
      v7 = (uint64_t **)(v6 + 8);
      goto LABEL_75;
    }
LABEL_61:
    v39 = *(_DWORD *)(v40 + 32);
    v6 = v40;
    if (v33 == v39)
    {
      *(_QWORD *)(v40 + 48) = v24;
      goto LABEL_80;
    }
  }
  v40 = *(_QWORD *)v6;
  if (*(_QWORD *)v6)
    goto LABEL_61;
  v7 = (uint64_t **)v6;
LABEL_75:
  v25 = (uint64_t **)v6;
LABEL_76:
  v6 = (uint64_t)operator new(0x38uLL);
  *(_QWORD *)(v6 + 32) = *(_QWORD *)a2;
  *(_DWORD *)(v6 + 40) = a2[2];
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = v25;
  *v7 = (uint64_t *)v6;
  v42 = *(_QWORD *)a1[3];
  v43 = (uint64_t *)v6;
  if (v42)
  {
    a1[3] = v42;
    v43 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[4], v43);
  ++a1[5];
LABEL_79:
  *(_QWORD *)(v6 + 48) = v24;
LABEL_80:
  v44 = *a3;
  v45 = **a3;
  v46 = (*a3)[1];
  *(_QWORD *)(v45 + 8) = v46;
  *(_QWORD *)v44[1] = v45;
  --a1[2];
  v47 = (unsigned int *)v44[3];
  if (v47)
  {
    v48 = v47 + 2;
    do
    {
      v49 = __ldaxr(v48);
      v50 = v49 - 1;
    }
    while (__stlxr(v50, v48));
    if (!v50)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v47 + 16))(v47);
      v51 = v47 + 3;
      do
      {
        v52 = __ldaxr(v51);
        v53 = v52 - 1;
      }
      while (__stlxr(v53, v51));
      if (!v53)
        (*(void (**)(unsigned int *))(*(_QWORD *)v47 + 24))(v47);
    }
  }
  operator delete(v44);
  return v46;
}

void boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>::lock_next_callable(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int i;
  unsigned int v30;
  uint64_t v31;
  char v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  int v43;
  uint64_t v44;
  _DWORD *v45;
  _DWORD *v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  unint64_t v62;
  unint64_t v63;
  unsigned int *v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  _QWORD v84[6];

  v84[3] = *MEMORY[0x1E0C80C00];
  v1 = *a1;
  if (*a1 == a1[3])
    return;
  if (v1 == a1[1])
    goto LABEL_94;
  while (1)
  {
    v3 = a1[2];
    v4 = *(_QWORD *)(v3 + 264);
    if (v4)
    {
      if (v4 - 1 < 0)
      {
        v17 = *(_QWORD *)(v3 + 264);
      }
      else
      {
        v5 = *(_QWORD *)(v3 + 256);
        v6 = v5 + 24 * v4;
        v7 = v6;
        do
        {
          v8 = *(_DWORD *)(v7 - 24);
          v7 -= 24;
          if (v8 == v8 >> 31)
          {
            v9 = *(unsigned int **)(v6 - 8);
            if (v9)
            {
              v10 = v9 + 2;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
                v13 = v9 + 3;
                do
                {
                  v14 = __ldaxr(v13);
                  v15 = v14 - 1;
                }
                while (__stlxr(v15, v13));
                if (!v15)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
              }
            }
          }
          else
          {
            v16 = *(_QWORD *)(v6 - 16);
            if (v16)
              (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
          }
          v6 = v7;
        }
        while (v7 > v5);
        v17 = *(_QWORD *)(v3 + 264);
        v1 = *a1;
      }
      *(_QWORD *)(v3 + 264) = v17 - v4;
    }
    *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v82 = v18;
    v83 = v18;
    v80 = v18;
    v81 = v18;
    v78 = v18;
    v79 = v18;
    v76 = v18;
    v77 = v18;
    v74 = v18;
    v75 = v18;
    v72 = v18;
    v73 = v18;
    v19 = *(_QWORD *)(v1 + 16);
    *(_QWORD *)&v82 = 10;
    *((_QWORD *)&v82 + 1) = &v72;
    *(_QWORD *)&v83 = 0;
    *((_QWORD *)&v83 + 1) = v19;
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
    v20 = *a1;
    v21 = *(_QWORD *)(*a1 + 16);
    v22 = a1[2];
    v23 = *(uint64_t **)(v21 + 32);
    if (v23)
    {
      v24 = *v23;
      if (*v23 != v23[1])
      {
        v25 = (_QWORD *)(v22 + 8);
        while (1)
        {
          memset(v84, 170, 24);
          v26 = *(_DWORD *)v24 ^ (*(int *)v24 >> 31);
          if (v26 == 2)
          {
            (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v24 + 8) + 16))(&v71);
            v84[1] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v71 + 16))(v71);
            LODWORD(v84[0]) = 1;
            if (v71)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
              if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) == 2)
                goto LABEL_47;
LABEL_40:
              v31 = *(_QWORD *)(v24 + 16);
              if (!v31)
                goto LABEL_48;
              if (!atomic_load((unsigned int *)(v31 + 8)))
                goto LABEL_48;
LABEL_42:
              boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::push_back(v25, (uint64_t)v84);
              v33 = 0;
              if (LODWORD(v84[0]) == SLODWORD(v84[0]) >> 31)
                goto LABEL_51;
              goto LABEL_43;
            }
LABEL_39:
            if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) == 2)
              goto LABEL_47;
            goto LABEL_40;
          }
          if (v26 != 1)
          {
            LODWORD(v84[0]) = 0;
            v84[1] = 0;
            v84[2] = 0;
            goto LABEL_39;
          }
          v27 = *(_QWORD *)(v24 + 16);
          if (!v27)
          {
LABEL_46:
            v84[1] = 0;
            v84[2] = v27;
            LODWORD(v84[0]) = 0;
            if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) == 2)
              goto LABEL_47;
            goto LABEL_40;
          }
          v28 = (unsigned int *)(v27 + 8);
          for (i = *(_DWORD *)(v27 + 8); ; i = v30)
          {
            if (!i)
            {
              v27 = 0;
              goto LABEL_46;
            }
            v30 = __ldxr(v28);
            if (v30 != i)
            {
              __clrex();
              continue;
            }
            if (!__stxr(i + 1, v28))
              break;
          }
          v84[1] = *(_QWORD *)(v24 + 8);
          v84[2] = v27;
          LODWORD(v84[0]) = 0;
          if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) != 2)
            goto LABEL_40;
LABEL_47:
          if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v24 + 8) + 24))(*(_QWORD *)(v24 + 8)))
            goto LABEL_42;
LABEL_48:
          if (*(_BYTE *)(v21 + 24))
          {
            *(_BYTE *)(v21 + 24) = 0;
            boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>((_DWORD *)v21, &v72);
          }
          v33 = 1;
          if (LODWORD(v84[0]) == SLODWORD(v84[0]) >> 31)
          {
LABEL_51:
            v34 = (unsigned int *)v84[2];
            if (v84[2])
            {
              v35 = (unsigned int *)(v84[2] + 8);
              do
              {
                v36 = __ldaxr(v35);
                v37 = v36 - 1;
              }
              while (__stlxr(v37, v35));
              if (!v37)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 16))(v34);
                v38 = v34 + 3;
                do
                {
                  v39 = __ldaxr(v38);
                  v40 = v39 - 1;
                }
                while (__stlxr(v40, v38));
                if (!v40)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 24))(v34);
              }
            }
            goto LABEL_59;
          }
LABEL_43:
          if (v84[1])
            (*(void (**)(_QWORD))(*(_QWORD *)v84[1] + 8))(v84[1]);
LABEL_59:
          if ((v33 & 1) == 0)
          {
            v24 += 24;
            if (v24 != *(_QWORD *)(*(_QWORD *)(v21 + 32) + 8))
              continue;
          }
          v20 = *a1;
          v21 = *(_QWORD *)(*a1 + 16);
          v22 = a1[2];
          break;
        }
      }
    }
    if (*(_BYTE *)(v21 + 24))
    {
      ++*(_DWORD *)(v22 + 276);
      v41 = *(_QWORD *)(v21 + 16);
      if (v41)
      {
        if (atomic_load((unsigned int *)(v41 + 8)))
        {
          v43 = 1;
          goto LABEL_76;
        }
        v22 = a1[2];
        v20 = *a1;
      }
      a1[3] = v20;
      if (a1[1] == v20)
      {
        v46 = *(_DWORD **)(v22 + 288);
        if (v46)
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v46, &v72);
        v43 = 0;
        *(_QWORD *)(v22 + 288) = 0;
      }
      else
      {
        v44 = *(_QWORD *)(v20 + 16);
        v45 = *(_DWORD **)(v22 + 288);
        if (v45)
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v45, &v72);
        *(_QWORD *)(v22 + 288) = v44;
        v43 = 0;
        if (v44)
          ++*(_DWORD *)(v44 + 28);
      }
    }
    else
    {
      ++*(_DWORD *)(v22 + 280);
      v43 = 1;
    }
LABEL_76:
    (*(void (**)(_QWORD))(**((_QWORD **)&v83 + 1) + 32))(*((_QWORD *)&v83 + 1));
    v47 = *((_QWORD *)&v82 + 1);
    if (*((_QWORD *)&v82 + 1))
    {
      if ((uint64_t)v83 - 1 >= 0)
      {
        v48 = *((_QWORD *)&v82 + 1) + 16 * v83;
        do
        {
          v49 = *(unsigned int **)(v48 - 8);
          if (v49)
          {
            v50 = v49 + 2;
            do
            {
              v51 = __ldaxr(v50);
              v52 = v51 - 1;
            }
            while (__stlxr(v52, v50));
            if (!v52)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 16))(v49);
              v53 = v49 + 3;
              do
              {
                v54 = __ldaxr(v53);
                v55 = v54 - 1;
              }
              while (__stlxr(v55, v53));
              if (!v55)
                (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 24))(v49);
            }
          }
          v48 -= 16;
        }
        while (v48 > v47);
      }
      if ((unint64_t)v82 >= 0xB)
        operator delete(*((void **)&v82 + 1));
    }
    v1 = *a1;
    v56 = a1[1];
    if (!v43)
      break;
    v1 = *(_QWORD *)(v1 + 8);
    *a1 = v1;
    if (v1 == v56)
    {
      v1 = v56;
LABEL_94:
      v57 = a1[3];
      if (v57 != v1)
      {
        *(_QWORD *)&v58 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v58 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v80 = v58;
        v81 = v58;
        v78 = v58;
        v79 = v58;
        v76 = v58;
        v77 = v58;
        v74 = v58;
        v75 = v58;
        v72 = v58;
        v73 = v58;
        v59 = *(_QWORD *)(v57 + 16);
        *(_QWORD *)&v82 = 10;
        *((_QWORD *)&v82 + 1) = &v72;
        *(_QWORD *)&v83 = 0;
        *((_QWORD *)&v83 + 1) = v59;
        (*(void (**)(uint64_t))(*(_QWORD *)v59 + 24))(v59);
        v60 = a1[2];
        a1[3] = a1[1];
        v61 = *(_DWORD **)(v60 + 288);
        if (v61)
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v61, &v72);
        *(_QWORD *)(v60 + 288) = 0;
        (*(void (**)(_QWORD))(**((_QWORD **)&v83 + 1) + 32))(*((_QWORD *)&v83 + 1));
        v62 = *((_QWORD *)&v82 + 1);
        if (*((_QWORD *)&v82 + 1))
        {
          if ((uint64_t)v83 - 1 >= 0)
          {
            v63 = *((_QWORD *)&v82 + 1) + 16 * v83;
            do
            {
              v64 = *(unsigned int **)(v63 - 8);
              if (v64)
              {
                v65 = v64 + 2;
                do
                {
                  v66 = __ldaxr(v65);
                  v67 = v66 - 1;
                }
                while (__stlxr(v67, v65));
                if (!v67)
                {
                  (*(void (**)(unsigned int *))(*(_QWORD *)v64 + 16))(v64);
                  v68 = v64 + 3;
                  do
                  {
                    v69 = __ldaxr(v68);
                    v70 = v69 - 1;
                  }
                  while (__stlxr(v70, v68));
                  if (!v70)
                    (*(void (**)(unsigned int *))(*(_QWORD *)v64 + 24))(v64);
                }
              }
              v63 -= 16;
            }
            while (v63 > v62);
          }
          if ((unint64_t)v82 >= 0xB)
            operator delete(*((void **)&v82 + 1));
        }
      }
      return;
    }
  }
  if (v1 == v56)
    goto LABEL_94;
}

void sub_1B3D756F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B3D75704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::force_cleanup_connections(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  __int128 v4;
  pthread_mutex_t *v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  _QWORD **v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  BOOL v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  int v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  int v41;
  int v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  int v46;
  int v47;
  int v48;
  _QWORD *v49;
  __int128 v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t *v59;
  unsigned int *v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t **v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  unsigned int *v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t *v80;
  uint64_t **v81;
  uint64_t *v82;
  uint64_t *v83;
  _OWORD v84[10];
  unint64_t v85;
  void *__p;
  uint64_t v87;
  pthread_mutex_t *v88;
  uint64_t v89;

  v3 = (uint64_t **)a1;
  v89 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v84[8] = v4;
  v84[9] = v4;
  v84[6] = v4;
  v84[7] = v4;
  v84[4] = v4;
  v84[5] = v4;
  v84[2] = v4;
  v84[3] = v4;
  v84[0] = v4;
  v84[1] = v4;
  v5 = *(pthread_mutex_t **)(a1 + 24);
  v85 = 10;
  __p = v84;
  v87 = 0;
  v88 = v5;
  pthread_mutex_lock(v5);
  if (**v3 != a2)
    goto LABEL_101;
  v6 = v3[1];
  if (!v6 || (v7 = atomic_load((unsigned int *)v6 + 2), v7 != 1))
  {
    v82 = (uint64_t *)operator new(0x20uLL);
    v8 = *v3;
    v9 = **v3;
    v10 = operator new(0x40uLL);
    v11 = v10;
    *v10 = v10;
    v10[1] = v10;
    v10[2] = 0;
    v12 = *(_QWORD **)(v9 + 8);
    if (v12 != (_QWORD *)v9)
    {
      v13 = 0;
      v14 = v10;
      do
      {
        v15 = operator new(0x20uLL);
        v15[2] = v12[2];
        v16 = v12[3];
        v15[3] = v16;
        if (v16)
        {
          v17 = (unsigned int *)(v16 + 8);
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
          v14 = (_QWORD *)*v11;
          v13 = v11[2];
        }
        *v15 = v14;
        v15[1] = v11;
        v14[1] = v15;
        *v11 = v15;
        v11[2] = ++v13;
        v12 = (_QWORD *)v12[1];
        v14 = v15;
      }
      while (v12 != (_QWORD *)v9);
    }
    v80 = v8;
    v81 = v3;
    v11[3] = 0;
    v19 = (_QWORD **)(v11 + 3);
    v11[4] = 0;
    v20 = v11 + 4;
    v11[5] = 0;
    *((_BYTE *)v11 + 48) = *(_BYTE *)(v9 + 48);
    v11[3] = v11 + 4;
    v21 = *(_QWORD **)(v9 + 24);
    v22 = (_QWORD *)(v9 + 32);
    if (v21 == (_QWORD *)(v9 + 32))
    {
LABEL_12:
      *((_BYTE *)v11 + 56) = *(_BYTE *)(v9 + 56);
      v23 = *(_QWORD **)(v9 + 24);
      if (v23 != v22)
      {
        v24 = (_QWORD *)v11[3];
        v25 = v11[1];
        do
        {
          v24[6] = v25;
          v26 = v9;
          if (v23 != v22)
            v26 = v23[6];
          v27 = (_QWORD *)v23[1];
          v28 = v27;
          v29 = v23;
          if (v27)
          {
            do
            {
              v30 = v28;
              v28 = (_QWORD *)*v28;
            }
            while (v28);
          }
          else
          {
            do
            {
              v30 = (_QWORD *)v29[2];
              v31 = *v30 == (_QWORD)v29;
              v29 = v30;
            }
            while (!v31);
          }
          v32 = v9;
          if (v30 != v22)
            v32 = v30[6];
          while (v26 != v32)
          {
            v26 = *(_QWORD *)(v26 + 8);
            v25 = *(_QWORD *)(v25 + 8);
          }
          if (v27)
          {
            do
            {
              v33 = v27;
              v27 = (_QWORD *)*v27;
            }
            while (v27);
          }
          else
          {
            do
            {
              v33 = (_QWORD *)v23[2];
              v31 = *v33 == (_QWORD)v23;
              v23 = v33;
            }
            while (!v31);
          }
          v34 = (_QWORD *)v24[1];
          if (v34)
          {
            do
            {
              v35 = v34;
              v34 = (_QWORD *)*v34;
            }
            while (v34);
          }
          else
          {
            do
            {
              v35 = (_QWORD *)v24[2];
              v31 = *v35 == (_QWORD)v24;
              v24 = v35;
            }
            while (!v31);
          }
          v23 = v33;
          v24 = v35;
        }
        while (v33 != v22);
      }
      *v82 = (uint64_t)v11;
      v82[1] = 0;
      v55 = operator new(0x18uLL);
      v55[1] = 0x100000001;
      *v55 = off_1E66DDEC8;
      v55[2] = v11;
      v82[1] = (uint64_t)v55;
      v3 = v81;
      v82[2] = v80[2];
      v56 = v80[3];
      v82[3] = v56;
      if (v56)
      {
        v57 = (unsigned int *)(v56 + 8);
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
      }
      v59 = (uint64_t *)operator new(0x18uLL);
      v59[1] = 0x100000001;
      *v59 = (uint64_t)off_1E66DDE68;
      v59[2] = (uint64_t)v82;
      v60 = (unsigned int *)v81[1];
      *v81 = v82;
      v81[1] = v59;
      if (v60)
      {
        v61 = v60 + 2;
        do
        {
          v62 = __ldaxr(v61);
          v63 = v62 - 1;
        }
        while (__stlxr(v63, v61));
        if (!v63)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v60 + 16))(v60);
          v64 = v60 + 3;
          do
          {
            v65 = __ldaxr(v64);
            v66 = v65 - 1;
          }
          while (__stlxr(v66, v64));
          if (!v66)
            (*(void (**)(unsigned int *))(*(_QWORD *)v60 + 24))(v60);
        }
      }
      goto LABEL_95;
    }
    while (1)
    {
      v36 = *((_DWORD *)v21 + 8);
      v37 = (_QWORD *)*v20;
      v38 = v11 + 4;
      if (*v19 != v20)
      {
        v39 = (_QWORD *)*v20;
        v40 = v11 + 4;
        if (v37)
        {
          do
          {
            v38 = v39;
            v39 = (_QWORD *)v39[1];
          }
          while (v39);
        }
        else
        {
          do
          {
            v38 = (_QWORD *)v40[2];
            v31 = *v38 == (_QWORD)v40;
            v40 = v38;
          }
          while (v31);
        }
        v41 = *((_DWORD *)v21 + 10);
        v42 = *((_DWORD *)v38 + 8);
        if (v42 == v36)
        {
          if (v36 != 1)
            goto LABEL_57;
          if (*((_DWORD *)v38 + 10) >= v41)
          {
            v43 = (_QWORD *)*v20;
            v44 = v11 + 4;
            v45 = v11 + 4;
            if (v37)
              goto LABEL_61;
LABEL_68:
            v49 = operator new(0x38uLL);
            v50 = *((_OWORD *)v21 + 2);
            v49[6] = v21[6];
            *((_OWORD *)v49 + 2) = v50;
            *v49 = 0;
            v49[1] = 0;
            v49[2] = v45;
            *v44 = v49;
            v51 = (_QWORD *)**v19;
            if (v51)
            {
              *v19 = v51;
              v49 = (_QWORD *)*v44;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v11[4], v49);
            ++v11[5];
            goto LABEL_71;
          }
        }
        else if (v42 >= v36)
        {
LABEL_57:
          v44 = v11 + 4;
          v45 = v11 + 4;
          if (!v37)
            goto LABEL_68;
          v43 = (_QWORD *)*v20;
          if (v36 != 1)
          {
            v46 = *((_DWORD *)v37 + 8);
            v45 = (_QWORD *)*v20;
            while (v36 != v46)
            {
              if (v36 < v46)
              {
                v54 = *v45;
                v44 = v45;
                if (!*v45)
                  goto LABEL_68;
              }
              else
              {
                if (v46 >= v36)
                  goto LABEL_71;
                v54 = v45[1];
                if (!v54)
                  goto LABEL_67;
              }
              v46 = *(_DWORD *)(v54 + 32);
              v45 = (_QWORD *)v54;
            }
            goto LABEL_71;
          }
          while (1)
          {
LABEL_61:
            v45 = v43;
            v47 = *((_DWORD *)v43 + 8);
            if (v47 == 1)
            {
              v48 = *((_DWORD *)v43 + 10);
              if (v48 > v41)
                goto LABEL_60;
              if (v48 >= v41)
                goto LABEL_71;
            }
            else if (v47 > 1)
            {
LABEL_60:
              v43 = (_QWORD *)*v43;
              v44 = v45;
              if (!*v45)
                goto LABEL_68;
              continue;
            }
            v43 = (_QWORD *)v43[1];
            if (!v43)
            {
LABEL_67:
              v44 = v45 + 1;
              goto LABEL_68;
            }
          }
        }
      }
      if (v37)
        v45 = v38;
      else
        v45 = v11 + 4;
      if (v37)
        v44 = v38 + 1;
      else
        v44 = v11 + 4;
      if (!*v44)
        goto LABEL_68;
LABEL_71:
      v52 = (_QWORD *)v21[1];
      if (v52)
      {
        do
        {
          v53 = v52;
          v52 = (_QWORD *)*v52;
        }
        while (v52);
      }
      else
      {
        do
        {
          v53 = (_QWORD *)v21[2];
          v31 = *v53 == (_QWORD)v21;
          v21 = v53;
        }
        while (!v31);
      }
      v21 = v53;
      if (v53 == v22)
        goto LABEL_12;
    }
  }
LABEL_95:
  v67 = (uint64_t **)*v3;
  v68 = (uint64_t *)**v3;
  v69 = (uint64_t *)v68[1];
  v83 = v69;
  if (v68 != v69)
  {
    do
    {
      while (1)
      {
        v70 = v69[2];
        if (!*(_BYTE *)(v70 + 24))
          break;
        v69 = (uint64_t *)v69[1];
        v83 = v69;
        v68 = *v67;
        if (v69 == *v67)
          goto LABEL_100;
      }
      v69 = (uint64_t *)boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>::erase(v68, (int *)(v70 + 64), &v83);
      v67 = (uint64_t **)*v3;
      v83 = v69;
      v68 = *v67;
    }
    while (v69 != *v67);
  }
LABEL_100:
  v3[2] = v69;
LABEL_101:
  pthread_mutex_unlock(v88);
  v71 = (char *)__p;
  if (__p)
  {
    if (v87 - 1 >= 0)
    {
      v72 = (char *)__p + 16 * v87;
      do
      {
        v73 = (unsigned int *)*((_QWORD *)v72 - 1);
        if (v73)
        {
          v74 = v73 + 2;
          do
          {
            v75 = __ldaxr(v74);
            v76 = v75 - 1;
          }
          while (__stlxr(v76, v74));
          if (!v76)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v73 + 16))(v73);
            v77 = v73 + 3;
            do
            {
              v78 = __ldaxr(v77);
              v79 = v78 - 1;
            }
            while (__stlxr(v79, v77));
            if (!v79)
              (*(void (**)(unsigned int *))(*(_QWORD *)v73 + 24))(v73);
          }
        }
        v72 -= 16;
      }
      while (v72 > v71);
    }
    if (v85 >= 0xB)
      operator delete(__p);
  }
}

void sub_1B3D75F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v1 = *(_QWORD **)(a1 + 16);
  if (v1)
  {
    v2 = (unsigned int *)v1[3];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    v9 = (unsigned int *)v1[1];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v7 = (unsigned int *)v3[3];
        if (v7)
        {
          v8 = v7 + 2;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
            v11 = v7 + 3;
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
          }
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>>>::destroy((_QWORD *)v1[4]);
    if (v1[2])
    {
      v2 = (_QWORD *)*v1;
      v3 = (uint64_t *)v1[1];
      v4 = *v3;
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(*v1 + 8);
      *(_QWORD *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          v5 = (uint64_t *)v3[1];
          v6 = (unsigned int *)v3[3];
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          operator delete(v3);
          v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

uint64_t boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type>>::~slot_call_iterator_cache(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  char *v4;
  char *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  _OWORD v14[10];
  unint64_t v15;
  void *__p;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 288);
  if (v2)
  {
    *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v14[8] = v3;
    v14[9] = v3;
    v14[6] = v3;
    v14[7] = v3;
    v14[4] = v3;
    v14[5] = v3;
    v14[2] = v3;
    v14[3] = v3;
    v14[0] = v3;
    v14[1] = v3;
    v15 = 10;
    __p = v14;
    v17 = 0;
    v18 = v2;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
    boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(*(_DWORD **)(a1 + 288), v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
    v4 = (char *)__p;
    if (__p)
    {
      if (v17 - 1 >= 0)
      {
        v5 = (char *)__p + 16 * v17;
        do
        {
          v6 = (unsigned int *)*((_QWORD *)v5 - 1);
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          v5 -= 16;
        }
        while (v5 > v4);
      }
      if (v15 >= 0xB)
        operator delete(__p);
    }
  }
  boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy((_QWORD *)(a1 + 8));
  if (*(_BYTE *)a1)
    *(_BYTE *)a1 = 0;
  return a1;
}

void sub_1B3D76738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm22LTETransportBlockCountENS_3abm9BLERStats10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int *a2)
{
  const __CFAllocator *v3;
  CFNumberRef v4;
  uint64_t valuePtr;

  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  valuePtr = *a2;
  v4 = CFNumberCreate(v3, kCFNumberLongLongType, &valuePtr);
  ctu::cf::insert<__CFString const*,__CFNumber const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v4)
    CFRelease(v4);
}

void sub_1B3D7686C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::CFSharedRef<__CFNumber const>::~CFSharedRef(&a9);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm32LTETransportBlockCountErrorCountENS_3abm9BLERStats10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int *a2)
{
  const __CFAllocator *v3;
  CFNumberRef v4;
  uint64_t valuePtr;

  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  valuePtr = *a2;
  v4 = CFNumberCreate(v3, kCFNumberLongLongType, &valuePtr);
  ctu::cf::insert<__CFString const*,__CFNumber const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v4)
    CFRelease(v4);
}

void sub_1B3D768E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::CFSharedRef<__CFNumber const>::~CFSharedRef(&a9);
  _Unwind_Resume(a1);
}

void ___ZNK3qmi6Client13setIndHandlerIRKN4coex3abm9BLERStats10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D769BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D769D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D769FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm17LTETDDInformationENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int *a2)
{
  CFTypeRef v3;
  CFTypeRef v4;

  coex::convert((__CFDictionary **)&v4, a2);
  v3 = v4;
  ctu::cf::insert<__CFString const*,__CFDictionary const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3)
    CFRelease(v3);
}

void sub_1B3D76A5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B3D76BBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B3D76BD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B3D76BE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm12LTEOffPeriodENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int *a2)
{
  const __CFAllocator *v3;
  CFNumberRef v4;
  uint64_t valuePtr;

  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  valuePtr = *a2;
  v4 = CFNumberCreate(v3, kCFNumberLongLongType, &valuePtr);
  ctu::cf::insert<__CFString const*,__CFNumber const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v4)
    CFRelease(v4);
}

void sub_1B3D76C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::CFSharedRef<__CFNumber const>::~CFSharedRef(&a9);
  _Unwind_Resume(a1);
}

const void **ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm25TDSCDMABandInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  CFTypeRef v3;
  CFTypeRef v4;

  coex::convert((__CFArray **)&v4, a2);
  v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3)
    CFRelease(v3);
}

void sub_1B3D76CF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm21GSMBandInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  CFTypeRef v3;
  CFTypeRef v4;

  coex::convert((__CFArray **)&v4, a2);
  v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3)
    CFRelease(v3);
}

void sub_1B3D76D50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm22ONEXBandInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  CFTypeRef v3;
  CFTypeRef v4;

  coex::convert((__CFArray **)&v4, a2);
  v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3)
    CFRelease(v3);
}

void sub_1B3D76DB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm21HDRBandInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  CFTypeRef v3;
  CFTypeRef v4;

  coex::convert((__CFArray **)&v4, a2);
  v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3)
    CFRelease(v3);
}

void sub_1B3D76E10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm23WCDMABandInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  CFTypeRef v3;
  CFTypeRef v4;

  coex::convert((__CFArray **)&v4, a2);
  v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3)
    CFRelease(v3);
}

void sub_1B3D76E70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm21NGCBandInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  CFTypeRef v3;
  CFTypeRef v4;

  coex::convert((__CFArray **)&v4, a2);
  v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3)
    CFRelease(v3);
}

void sub_1B3D76ED0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm24NGCCarrierInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  CFTypeRef v3;
  CFTypeRef v4;

  coex::convert((__CFArray **)&v4, a2);
  v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3)
    CFRelease(v3);
}

void sub_1B3D76F30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B3D7707C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B3D77094(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B3D770B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm22GSM2BandInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  CFTypeRef v3;
  CFTypeRef v4;

  coex::convert((__CFArray **)&v4, a2);
  v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3)
    CFRelease(v3);
}

void sub_1B3D77110(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm24WCDMA2BandInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  CFTypeRef v3;
  CFTypeRef v4;

  coex::convert((__CFArray **)&v4, a2);
  v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3)
    CFRelease(v3);
}

void sub_1B3D77170(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm19LTE2BandInformationENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int *a2)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v5;
  CFTypeRef v6;
  CFTypeRef v7;
  CFMutableDictionaryRef cf;
  CFTypeRef v9;

  cf = 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v5 = Mutable;
  if (Mutable)
    cf = Mutable;
  coex::convert((__CFDictionary **)&v9, a2);
  v6 = v9;
  ctu::cf::insert<__CFString const*,__CFDictionary const*>(v5, (CFTypeRef)*MEMORY[0x1E0DDF3F0], v9);
  if (v6)
    CFRelease(v6);
  coex::convert((__CFDictionary **)&v9, a2 + 2);
  v7 = v9;
  ctu::cf::insert<__CFString const*,__CFDictionary const*>(v5, (CFTypeRef)*MEMORY[0x1E0DDF3D8], v9);
  if (v7)
    CFRelease(v7);
  ctu::cf::insert<__CFString const*,__CFDictionary *>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), cf);
  if (cf)
    CFRelease(cf);
}

void sub_1B3D77274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D77288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D772BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D772D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a9);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm18LTE2TDDInformationENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int *a2)
{
  const __CFAllocator *v4;
  __CFDictionary *Mutable;
  CFTypeID v6;
  __CFDictionary *v7;
  __CFDictionary *cf;

  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  ctu::cf::insert<__CFString const*,unsigned int>(Mutable, (CFTypeRef)*MEMORY[0x1E0DDF2E0], *a2, v4);
  ctu::cf::insert<__CFString const*,unsigned int>(Mutable, (CFTypeRef)*MEMORY[0x1E0DDF2A0], a2[1], v4);
  ctu::cf::insert<__CFString const*,unsigned int>(Mutable, (CFTypeRef)*MEMORY[0x1E0DDF380], a2[2], v4);
  ctu::cf::insert<__CFString const*,unsigned int>(Mutable, (CFTypeRef)*MEMORY[0x1E0DDF260], a2[3], v4);
  ctu::cf::insert<__CFString const*,unsigned int>(Mutable, (CFTypeRef)*MEMORY[0x1E0DDF250], a2[4], v4);
  if (Mutable)
  {
    v6 = CFGetTypeID(Mutable);
    if (v6 == CFDictionaryGetTypeID())
    {
      cf = Mutable;
      CFRetain(Mutable);
      v7 = Mutable;
    }
    else
    {
      v7 = 0;
      cf = 0;
    }
    CFRelease(Mutable);
  }
  else
  {
    v7 = 0;
    cf = 0;
  }
  ctu::cf::insert<__CFString const*,__CFDictionary const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v7);
  if (cf)
    CFRelease(cf);
}

void sub_1B3D77448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D7745C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B3D77470(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B3D77484(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm13LTE2OffPeriodENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int *a2)
{
  const __CFAllocator *v3;
  CFNumberRef v4;
  uint64_t valuePtr;

  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  valuePtr = *a2;
  v4 = CFNumberCreate(v3, kCFNumberLongLongType, &valuePtr);
  ctu::cf::insert<__CFString const*,__CFNumber const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v4)
    CFRelease(v4);
}

void sub_1B3D77500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::CFSharedRef<__CFNumber const>::~CFSharedRef(&a9);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm22LTE2BandInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  CFTypeRef v3;
  CFTypeRef v4;

  coex::convert((__CFArray **)&v4, a2);
  v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3)
    CFRelease(v3);
}

void sub_1B3D77560(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm25LTE2CarrierInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  CFTypeRef v3;
  CFTypeRef v4;

  coex::convert((__CFArray **)&v4, a2);
  v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3)
    CFRelease(v3);
}

void sub_1B3D775C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm22NGC2BandInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  CFTypeRef v3;
  CFTypeRef v4;

  coex::convert((__CFArray **)&v4, a2);
  v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3)
    CFRelease(v3);
}

void sub_1B3D77620(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm25NGC2CarrierInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  CFTypeRef v3;
  CFTypeRef v4;

  coex::convert((__CFArray **)&v4, a2);
  v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3)
    CFRelease(v3);
}

void sub_1B3D77680(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm33ContinuousTxSubframeDenialsStatusENS_3abm13ConditionFail10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  UInt8 *v4;
  CFDataRef v5;

  v3 = *a2;
  v4 = (UInt8 *)operator new(8uLL);
  *(_QWORD *)v4 = v3;
  v5 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, 8);
  operator delete(v4);
  ctu::cf::insert<__CFString const*,__CFData const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v5);
  if (v5)
    CFRelease(v5);
}

void sub_1B3D77720(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B3D77734(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm30WCI2TxPowerLimitEnforceFailureENS_3abm13ConditionFail10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  UInt8 *v4;
  CFDataRef v5;

  v3 = *a2;
  v4 = (UInt8 *)operator new(8uLL);
  *(_QWORD *)v4 = v3;
  v5 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, 8);
  operator delete(v4);
  ctu::cf::insert<__CFString const*,__CFData const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v5);
  if (v5)
    CFRelease(v5);
}

void sub_1B3D777D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B3D777E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm26TxPowerLimitEnforceSuccessENS_3abm16ConditionSuccess10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  UInt8 *v4;
  CFDataRef v5;

  v3 = *a2;
  v4 = (UInt8 *)operator new(8uLL);
  *(_QWORD *)v4 = v3;
  v5 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, 8);
  operator delete(v4);
  ctu::cf::insert<__CFString const*,__CFData const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v5);
  if (v5)
    CFRelease(v5);
}

void sub_1B3D77888(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B3D7789C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZNK3qmi6Client13setIndHandlerIRKN4coex3abm16ConditionSuccess10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D77970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D77984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D779B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,__CFError *>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf)
    CFRetain(cf);
  if (a3)
  {
    CFRetain(a3);
    if (cf)
      CFDictionaryAddValue(a1, cf, a3);
    CFRelease(a3);
  }
  if (cf)
    CFRelease(cf);
}

void sub_1B3D77A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)&a9);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  _Unwind_Resume(a1);
}

void sub_1B3D77A74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm18LTEBandInformationENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int *a2)
{
  CFTypeRef cf;

  coex::convert((CFMutableDictionaryRef *)&cf, a2);
  ctu::cf::insert<__CFString const*,__CFDictionary *>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), cf);
  if (cf)
    CFRelease(cf);
}

void sub_1B3D77AD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm17LTETDDInformationENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int *a2)
{
  CFTypeRef v3;
  CFTypeRef v4;

  coex::convert((__CFDictionary **)&v4, a2);
  v3 = v4;
  ctu::cf::insert<__CFString const*,__CFDictionary const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3)
    CFRelease(v3);
}

void sub_1B3D77B30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm12LTEOffPeriodENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int *a2)
{
  const __CFAllocator *v3;
  CFNumberRef v4;
  uint64_t valuePtr;

  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  valuePtr = *a2;
  v4 = CFNumberCreate(v3, kCFNumberLongLongType, &valuePtr);
  ctu::cf::insert<__CFString const*,__CFNumber const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v4)
    CFRelease(v4);
}

void sub_1B3D77BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::CFSharedRef<__CFNumber const>::~CFSharedRef(&a9);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm21LTEBandInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  CFTypeRef v3;
  CFTypeRef v4;

  coex::convert((__CFArray **)&v4, a2);
  v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3)
    CFRelease(v3);
}

void sub_1B3D77C0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm25TDSCDMABandInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  CFTypeRef v3;
  CFTypeRef v4;

  coex::convert((__CFArray **)&v4, a2);
  v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3)
    CFRelease(v3);
}

void sub_1B3D77C6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm21GSMBandInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  CFTypeRef v3;
  CFTypeRef v4;

  coex::convert((__CFArray **)&v4, a2);
  v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3)
    CFRelease(v3);
}

void sub_1B3D77CCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm22ONEXBandInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  CFTypeRef v3;
  CFTypeRef v4;

  coex::convert((__CFArray **)&v4, a2);
  v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3)
    CFRelease(v3);
}

void sub_1B3D77D2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm21HDRBandInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  CFTypeRef v3;
  CFTypeRef v4;

  coex::convert((__CFArray **)&v4, a2);
  v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3)
    CFRelease(v3);
}

void sub_1B3D77D8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm23WCDMABandInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  CFTypeRef v3;
  CFTypeRef v4;

  coex::convert((__CFArray **)&v4, a2);
  v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3)
    CFRelease(v3);
}

void sub_1B3D77DEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm21NGCBandInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  CFTypeRef v3;
  CFTypeRef v4;

  coex::convert((__CFArray **)&v4, a2);
  v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3)
    CFRelease(v3);
}

void sub_1B3D77E4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm24LTECarrierInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  CFTypeRef v3;
  CFTypeRef v4;

  coex::convert((__CFArray **)&v4, a2);
  v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3)
    CFRelease(v3);
}

void sub_1B3D77EAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm24NGCCarrierInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  CFTypeRef v3;
  CFTypeRef v4;

  coex::convert((__CFArray **)&v4, a2);
  v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3)
    CFRelease(v3);
}

void sub_1B3D77F0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::update<__CFString const*,__CFDictionary *>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf)
    CFRetain(cf);
  if (a3)
  {
    CFRetain(a3);
    if (cf)
      CFDictionarySetValue(a1, cf, a3);
    CFRelease(a3);
  }
  if (cf)
    CFRelease(cf);
}

void sub_1B3D77F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)&a9);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  _Unwind_Resume(a1);
}

void sub_1B3D77FC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm22GSM2BandInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  CFTypeRef v3;
  CFTypeRef v4;

  coex::convert((__CFArray **)&v4, a2);
  v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3)
    CFRelease(v3);
}

void sub_1B3D78020(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm24WCDMA2BandInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  CFTypeRef v3;
  CFTypeRef v4;

  coex::convert((__CFArray **)&v4, a2);
  v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3)
    CFRelease(v3);
}

void sub_1B3D78080(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm22LTE2BandInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  CFTypeRef v3;
  CFTypeRef v4;

  coex::convert((__CFArray **)&v4, a2);
  v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3)
    CFRelease(v3);
}

void sub_1B3D780E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm25LTE2CarrierInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  CFTypeRef v3;
  CFTypeRef v4;

  coex::convert((__CFArray **)&v4, a2);
  v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3)
    CFRelease(v3);
}

void sub_1B3D78140(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm22NGC2BandInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  CFTypeRef v3;
  CFTypeRef v4;

  coex::convert((__CFArray **)&v4, a2);
  v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3)
    CFRelease(v3);
}

void sub_1B3D781A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm25NGC2CarrierInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  CFTypeRef v3;
  CFTypeRef v4;

  coex::convert((__CFArray **)&v4, a2);
  v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3)
    CFRelease(v3);
}

void sub_1B3D78200(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm12GetWWANState8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D782D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D782E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D78314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::WLANScanID>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::WLANScanID>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::WLANScanID>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DE8D0;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm12WLANScanInfoENS_3abm16GetWLANScanState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int *a2)
{
  const __CFAllocator *v4;
  __CFDictionary *Mutable;
  __CFDictionary *v6;
  CFTypeRef v7;
  CFTypeID v8;
  __CFDictionary *v9;
  __CFDictionary *cf;
  CFTypeRef v11;
  __CFDictionary *v12;

  v12 = 0;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v6 = Mutable;
  if (Mutable)
    v12 = Mutable;
  ctu::cf::insert<__CFString const*,unsigned int>(Mutable, (CFTypeRef)*MEMORY[0x1E0DDF2D0], *a2, v4);
  coex::convert((__CFDictionary **)&v11, a2 + 1);
  v7 = v11;
  ctu::cf::insert<__CFString const*,__CFDictionary const*>(v6, (CFTypeRef)*MEMORY[0x1E0DDF328], v11);
  if (v7)
    CFRelease(v7);
  ctu::cf::insert<__CFString const*,unsigned int>(v6, (CFTypeRef)*MEMORY[0x1E0DDF358], a2[3], v4);
  if (v6)
  {
    v8 = CFGetTypeID(v6);
    if (v8 == CFDictionaryGetTypeID())
    {
      cf = v6;
      CFRetain(v6);
      v9 = v6;
    }
    else
    {
      v9 = 0;
      cf = 0;
    }
    CFRelease(v6);
  }
  else
  {
    v9 = 0;
    cf = 0;
  }
  ctu::cf::insert<__CFString const*,__CFDictionary const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v9);
  if (cf)
    CFRelease(cf);
}

void sub_1B3D784F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B3D78504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B3D78518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  const void *v4;
  va_list va;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, const void *);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1B3D78534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B3D78548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm16GetWLANScanState8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D7861C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D78630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D7865C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::WLANConnectionHandle>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::WLANConnectionHandle>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::WLANConnectionHandle>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DE978;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm18WLANConnectionInfoENS_3abm16GetWLANConnState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, uint64_t a2)
{
  const __CFAllocator *v4;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v6;
  unsigned int **v7;
  unsigned int **v8;
  uint64_t v9;
  CFTypeID v10;
  CFMutableDictionaryRef v11;
  __CFArray *v12;
  unsigned int *v13;
  unsigned int *i;
  void *v15;
  void *v16;
  CFTypeID v17;
  CFMutableDictionaryRef cf;
  void *value;

  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v6 = Mutable;
  if (Mutable)
  {
    v7 = (unsigned int **)(a2 + 8);
    v8 = (unsigned int **)(a2 + 16);
    v9 = *(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8);
    if (v9 < 0)
    {
      v10 = CFGetTypeID(Mutable);
      if (v10 == CFDictionaryGetTypeID())
      {
        cf = v6;
        CFRetain(v6);
        v11 = v6;
LABEL_28:
        CFRelease(v6);
        goto LABEL_29;
      }
LABEL_27:
      v11 = 0;
      cf = 0;
      if (!v6)
        goto LABEL_29;
      goto LABEL_28;
    }
  }
  else
  {
    v7 = (unsigned int **)(a2 + 8);
    v8 = (unsigned int **)(a2 + 16);
    v9 = *(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8);
    if (v9 < 0)
      goto LABEL_27;
  }
  v12 = CFArrayCreateMutable(v4, (unint64_t)v9 >> 3, MEMORY[0x1E0C9B378]);
  v13 = *v7;
  for (i = *v8; v13 != i; v13 += 2)
  {
    value = (void *)0xAAAAAAAAAAAAAAAALL;
    coex::convert((__CFDictionary **)&value, v13);
    v15 = value;
    CFArrayAppendValue(v12, value);
    if (v15)
      CFRelease(v15);
  }
  ctu::cf::insert<__CFString const*,unsigned int>(v6, (CFTypeRef)*MEMORY[0x1E0DDF4A0], *(_DWORD *)a2, v4);
  v16 = (void *)*MEMORY[0x1E0DDF468];
  value = v16;
  if (v16)
    CFRetain(v16);
  if (v12)
  {
    CFRetain(v12);
    if (v16)
      CFDictionaryAddValue(v6, v16, v12);
    CFRelease(v12);
  }
  if (v16)
    CFRelease(v16);
  ctu::cf::insert<__CFString const*,unsigned int>(v6, (CFTypeRef)*MEMORY[0x1E0DDF470], *(_DWORD *)(a2 + 32), v4);
  ctu::cf::insert<__CFString const*,unsigned int>(v6, (CFTypeRef)*MEMORY[0x1E0DDF420], *(_DWORD *)(a2 + 36), v4);
  if (!v6 || (v17 = CFGetTypeID(v6), v17 != CFDictionaryGetTypeID()))
  {
    v11 = 0;
    cf = 0;
    if (!v12)
      goto LABEL_25;
    goto LABEL_24;
  }
  cf = v6;
  CFRetain(v6);
  v11 = v6;
  if (v12)
LABEL_24:
    CFRelease(v12);
LABEL_25:
  if (v6)
    goto LABEL_28;
LABEL_29:
  ctu::cf::insert<__CFString const*,__CFDictionary const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v11);
  if (cf)
    CFRelease(cf);
}

void sub_1B3D78968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  const void *v4;
  va_list va;
  const void *v6;
  va_list va1;
  const void *v8;
  va_list va2;
  va_list va3;

  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, const void *);
  va_copy(va2, va1);
  v6 = va_arg(va2, const void *);
  va_copy(va3, va2);
  v8 = va_arg(va3, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va3);
  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1B3D789A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  const void *v4;
  va_list va;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, const void *);
  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va1);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm16GetWLANConnState8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D78AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D78B04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D78B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm21LTESINRFilteredOutputENS_3abm8SINRRead8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, int *a2)
{
  const __CFAllocator *v3;
  CFNumberRef v4;
  int valuePtr;

  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  valuePtr = *a2;
  v4 = CFNumberCreate(v3, kCFNumberFloatType, &valuePtr);
  ctu::cf::insert<__CFString const*,__CFNumber const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v4)
    CFRelease(v4);
}

void sub_1B3D78BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::CFSharedRef<__CFNumber const>::~CFSharedRef(&a9);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm8SINRRead8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D78C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D78C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D78CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ReportWWANState>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ReportWWANState>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ReportWWANState>::clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = off_1E66DEA78;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ReportBLERStats>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ReportBLERStats>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ReportBLERStats>::clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = off_1E66DEAC8;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ReportFailCondition>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ReportFailCondition>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ReportFailCondition>::clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = off_1E66DEB18;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ReportSuccessCondition>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ReportSuccessCondition>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ReportSuccessCondition>::clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = off_1E66DEB68;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ReportTxAntennaState>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ReportTxAntennaState>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ReportTxAntennaState>::clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = off_1E66DEBB8;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ReportNRState>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ReportNRState>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ReportNRState>::clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = off_1E66DEC08;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ReportWCI2TxAntMap>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ReportWCI2TxAntMap>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ReportWCI2TxAntMap>::clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = off_1E66DEC58;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  cast_message_type<qmi::ResponseBase const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1B3D7902C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::WLANScanInfo>::getSize()
{
  return 19;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::WLANScanInfo>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *(_DWORD *)(v3 + 7) = *(_DWORD *)(result + 16);
  *(_DWORD *)(v3 + 11) = *(_DWORD *)(result + 20);
  *(_DWORD *)(v3 + 15) = *(_DWORD *)(result + 24);
  *a2 = v3 + 19;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 16;
  return result;
}

__n128 qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::WLANScanInfo>::clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  v2[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = off_1E66DECD0;
  result = *(__n128 *)(a1 + 12);
  *(__n128 *)(v2 + 12) = result;
  return result;
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::WLANConnectionInfo>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E66DED20;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::WLANConnectionInfo>::~TlvWrapper(_QWORD *__p)
{
  void *v2;

  *__p = &off_1E66DED20;
  v2 = (void *)__p[3];
  if (v2)
  {
    __p[4] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::WLANConnectionInfo>::getSize(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a1 + 24))
    return 10;
  else
    return ((*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) | 7) + 3;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::WLANConnectionInfo>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  unint64_t v4;
  char *v5;
  char *v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __int128 *v12;
  _OWORD *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *a2 += 3;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 16);
  v4 = v3 + 8;
  *(_BYTE *)(v3 + 7) = (*(_DWORD *)(result + 32) - *(_DWORD *)(result + 24)) >> 3;
  v6 = *(char **)(result + 24);
  v5 = *(char **)(result + 32);
  if (v6 != v5)
  {
    v7 = v5 - v6 - 8;
    if (v7 < 0x58)
      goto LABEL_15;
    if (v4 < (unint64_t)&v6[(v7 & 0xFFFFFFFFFFFFFFF8) + 8]
      && (unint64_t)v6 < (v7 & 0xFFFFFFFFFFFFFFF8) + v3 + 16)
    {
      goto LABEL_15;
    }
    v9 = (v7 >> 3) + 1;
    v10 = 8 * (v9 & 0x3FFFFFFFFFFFFFF8);
    v4 += v10;
    v11 = &v6[v10];
    v12 = (__int128 *)(v6 + 32);
    v13 = (_OWORD *)(v3 + 40);
    v14 = v9 & 0x3FFFFFFFFFFFFFF8;
    do
    {
      v16 = *(v12 - 2);
      v15 = *(v12 - 1);
      v18 = *v12;
      v17 = v12[1];
      v12 += 4;
      *(v13 - 2) = v16;
      *(v13 - 1) = v15;
      *v13 = v18;
      v13[1] = v17;
      v13 += 4;
      v14 -= 8;
    }
    while (v14);
    v6 = v11;
    if (v9 != (v9 & 0x3FFFFFFFFFFFFFF8))
    {
LABEL_15:
      do
      {
        *(_DWORD *)v4 = *(_DWORD *)v6;
        *(_DWORD *)(v4 + 4) = *((_DWORD *)v6 + 1);
        v4 += 8;
        v6 += 8;
      }
      while (v6 != v5);
    }
  }
  *(_BYTE *)v4 = *(_DWORD *)(result + 48);
  *(_BYTE *)(v4 + 1) = *(_DWORD *)(result + 52);
  *a2 = v4 + 2;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = v4 + 2 - (v3 + 3);
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::WLANConnectionInfo>::clone(uint64_t a1)
{
  _BYTE *v2;
  int v3;
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;

  v2 = operator new(0x38uLL);
  v2[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_1E66DED20;
  v3 = *(_DWORD *)(a1 + 16);
  *((_QWORD *)v2 + 3) = 0;
  *((_DWORD *)v2 + 4) = v3;
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 5) = 0;
  v5 = *(_BYTE **)(a1 + 24);
  v4 = *(_BYTE **)(a1 + 32);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v4 - v5);
    *((_QWORD *)v2 + 3) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *((_QWORD *)v2 + 5) = v8;
    memcpy(v7, v5, v6);
    *((_QWORD *)v2 + 4) = v8;
  }
  *((_QWORD *)v2 + 6) = *(_QWORD *)(a1 + 48);
  return v2;
}

void sub_1B3D79318(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[4] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm12SetWLANState8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D793FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D79410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D7943C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

char *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::Policy>::clone(uint64_t a1)
{
  char *result;

  result = (char *)operator new(0x18uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DED98;
  *(_QWORD *)(result + 9) = *(_QWORD *)(a1 + 9);
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::PowerThreshold>::clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = off_1E66DEDE8;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::RBThreshold>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DEE38;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ContinuousTxSubframeDenialsThreshold>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DEE88;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

char *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::TxFrameDenialsParameters>::clone(uint64_t a1)
{
  char *result;

  result = (char *)operator new(0x18uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DEED8;
  *(_QWORD *)(result + 12) = *(_QWORD *)(a1 + 12);
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::APTTable>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DEF28;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ControllerTxPowerLimit>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DEF78;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::WCI2TxPowerLimit>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DEFC8;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::LinkPathLossThreshold>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DF018;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::RBFilterAlpha>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DF068;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::FilteredRBThreshold>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DF0B8;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::WCI2TxPowerLimitTimeout>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DF108;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ControllerTxPowerLimitTimeout>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DF158;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::TxPowerThresholdForAdvTxNotice>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DF1A8;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::RbThresholdForAdvTxNotice>::clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = off_1E66DF1F8;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::LTEInstance>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DF248;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::CoexTech>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DF298;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::TechInstance>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DF2E8;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::NGCContinuousTxSubframeDenialsThreshold>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DF338;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

char *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::NGCTxFrameDenialsParameters>::clone(uint64_t a1)
{
  char *result;

  result = (char *)operator new(0x18uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DF388;
  *(_QWORD *)(result + 12) = *(_QWORD *)(a1 + 12);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::LTETransportBlockCount>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::LTETransportBlockCount>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::LTETransportBlockCount>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DF400;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::LTETransportBlockCountErrorThreshold>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::LTETransportBlockCountErrorThreshold>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::LTETransportBlockCountErrorThreshold>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DF450;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm9BLERStart8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D79B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D79B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D79B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm8BLERStop8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D79C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D79C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D79C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::LTESINRMetricParameters>::getSize()
{
  return 7;
}

float qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::LTESINRMetricParameters>::write(uint64_t a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  float result;

  v2 = *(_BYTE *)(a1 + 8);
  v3 = *a2;
  result = *(float *)(a1 + 12);
  *(float *)(v3 + 3) = result;
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::LTESINRMetricParameters>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DF4F0;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm9SINRStart8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D79DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D79DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D79E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm8SINRStop8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D79EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D79F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D79F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ThresholdInPercentage>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ThresholdInPercentage>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ThresholdInPercentage>::clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = off_1E66DF590;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ThresholdOutPercentage>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ThresholdOutPercentage>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ThresholdOutPercentage>::clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = off_1E66DF5E0;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::DeactivationTimerMs>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::DeactivationTimerMs>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::DeactivationTimerMs>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DF630;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::StopDeactivationTimerMs>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::StopDeactivationTimerMs>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::StopDeactivationTimerMs>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DF680;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm15SetLaaParamsReq8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D7A1D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D7A1EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D7A218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::BandFilters>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E66DF6F8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::BandFilters>::~TlvWrapper(_QWORD *__p)
{
  void *v2;

  *__p = &off_1E66DF6F8;
  v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::BandFilters>::getSize(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  if (v1 == v2)
    return 4;
  else
    return 24 * ((v2 - v1 - 24) / 0x18uLL) + 28;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::BandFilters>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 3;
  *a2 = v4;
  v5 = v3 + 4;
  *(_BYTE *)(v3 + 3) = -85 * ((*(_DWORD *)(result + 24) - *(_DWORD *)(result + 16)) >> 3);
  v6 = *(_QWORD *)(result + 16);
  for (i = *(_QWORD *)(result + 24); v6 != i; v6 += 24)
  {
    *(_DWORD *)v5 = *(_DWORD *)v6;
    *(_DWORD *)(v5 + 4) = *(_DWORD *)(v6 + 4);
    *(_DWORD *)(v5 + 8) = *(_DWORD *)(v6 + 8);
    *(_DWORD *)(v5 + 12) = *(_DWORD *)(v6 + 12);
    *(_QWORD *)(v5 + 16) = *(_QWORD *)(v6 + 16);
    v5 += 24;
  }
  *a2 = v5;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = v5 - v4;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::BandFilters>::clone(uint64_t a1)
{
  _BYTE *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = operator new(0x28uLL);
  v2[8] = *(_BYTE *)(a1 + 8);
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_1E66DF6F8;
  *((_QWORD *)v2 + 3) = 0;
  *((_QWORD *)v2 + 4) = 0;
  v4 = *(_BYTE **)(a1 + 16);
  v3 = *(_BYTE **)(a1 + 24);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v5 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v5);
    *((_QWORD *)v2 + 2) = v6;
    v7 = &v6[8 * (v5 >> 3)];
    *((_QWORD *)v2 + 4) = v7;
    memcpy(v6, v4, v5);
    *((_QWORD *)v2 + 3) = v7;
  }
  return v2;
}

void sub_1B3D7A434(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[3] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm17SetBandFilterInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D7A518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D7A52C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D7A558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ScanFreqBandFilter>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E66DF770;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ScanFreqBandFilter>::~TlvWrapper(_QWORD *__p)
{
  void *v2;

  *__p = &off_1E66DF770;
  v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ScanFreqBandFilter>::getSize(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24) == *(_QWORD *)(a1 + 16))
    return 4;
  else
    return (*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) & 0xFFFFFFFFFFFFFFF8 | 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ScanFreqBandFilter>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 *v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 3;
  *a2 = v4;
  v5 = (char *)(v3 + 4);
  *(_BYTE *)(v3 + 3) = (*(_DWORD *)(result + 24) - *(_DWORD *)(result + 16)) >> 3;
  v7 = *(char **)(result + 16);
  v6 = *(char **)(result + 24);
  if (v7 != v6)
  {
    v8 = v6 - v7 - 8;
    if (v8 < 0x58)
      goto LABEL_15;
    if (v5 < &v7[(v8 & 0xFFFFFFFFFFFFFFF8) + 8] && (unint64_t)v7 < (v8 & 0xFFFFFFFFFFFFFFF8) + v3 + 12)
      goto LABEL_15;
    v10 = (v8 >> 3) + 1;
    v11 = 8 * (v10 & 0x3FFFFFFFFFFFFFF8);
    v5 += v11;
    v12 = &v7[v11];
    v13 = (__int128 *)(v7 + 32);
    v14 = (_OWORD *)(v3 + 36);
    result = v10 & 0x3FFFFFFFFFFFFFF8;
    do
    {
      v16 = *(v13 - 2);
      v15 = *(v13 - 1);
      v18 = *v13;
      v17 = v13[1];
      v13 += 4;
      *(v14 - 2) = v16;
      *(v14 - 1) = v15;
      *v14 = v18;
      v14[1] = v17;
      v14 += 4;
      result -= 8;
    }
    while (result);
    v7 = v12;
    if (v10 != (v10 & 0x3FFFFFFFFFFFFFF8))
    {
LABEL_15:
      do
      {
        *(_DWORD *)v5 = *(_DWORD *)v7;
        *((_DWORD *)v5 + 1) = *((_DWORD *)v7 + 1);
        v5 += 8;
        v7 += 8;
      }
      while (v7 != v6);
    }
  }
  *a2 = (uint64_t)v5;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = (_WORD)v5 - v4;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ScanFreqBandFilter>::clone(uint64_t a1)
{
  _BYTE *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = operator new(0x28uLL);
  v2[8] = *(_BYTE *)(a1 + 8);
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_1E66DF770;
  *((_QWORD *)v2 + 3) = 0;
  *((_QWORD *)v2 + 4) = 0;
  v4 = *(_BYTE **)(a1 + 16);
  v3 = *(_BYTE **)(a1 + 24);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v3 - v4);
    *((_QWORD *)v2 + 2) = v6;
    v7 = &v6[8 * (v5 >> 3)];
    *((_QWORD *)v2 + 4) = v7;
    memcpy(v6, v4, v5);
    *((_QWORD *)v2 + 3) = v7;
  }
  return v2;
}

void sub_1B3D7A780(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[3] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm21SetScanFreqBandFilter8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D7A864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D7A878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D7A8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm18ScanFreqBandFilterENS_3abm21GetScanFreqBandFilter8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  uint64_t v3;
  __CFArray *Mutable;
  unsigned int *v6;
  unsigned int *v7;
  void *v8;
  CFTypeID v9;
  __CFArray *v10;
  __CFArray *cf;
  void *value;

  v3 = (char *)a2[1] - (char *)*a2;
  if (v3 < 0)
    goto LABEL_10;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (unint64_t)v3 >> 3, MEMORY[0x1E0C9B378]);
  v6 = *a2;
  v7 = a2[1];
  while (v6 != v7)
  {
    coex::convert((__CFDictionary **)&value, v6);
    v8 = value;
    CFArrayAppendValue(Mutable, value);
    if (v8)
      CFRelease(v8);
    v6 += 2;
  }
  if (Mutable)
  {
    v9 = CFGetTypeID(Mutable);
    if (v9 == CFArrayGetTypeID())
    {
      cf = Mutable;
      CFRetain(Mutable);
      v10 = Mutable;
    }
    else
    {
      v10 = 0;
      cf = 0;
    }
    CFRelease(Mutable);
  }
  else
  {
LABEL_10:
    v10 = 0;
    cf = 0;
  }
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v10);
  if (cf)
    CFRelease(cf);
}

void sub_1B3D7A9D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef(&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D7A9EC(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm21GetScanFreqBandFilter8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D7AAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D7AB04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D7AB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

char *qmi::MutableMessageBase::createTLV<coex::tlv::abm::Enabled>(_QWORD *a1, char a2)
{
  _BYTE *v4;
  _BYTE *v5;
  char *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  v4 = operator new(0x10uLL);
  v5 = v4;
  v4[8] = a2;
  *(_QWORD *)v4 = off_1E66DF840;
  v4[9] = 0;
  v6 = v4 + 9;
  v8 = (char *)a1[2];
  v7 = a1[3];
  v9 = v8;
  if ((unint64_t)v8 < v7)
  {
    *(_QWORD *)v8 = v4;
    v10 = (uint64_t)(v8 + 8);
    goto LABEL_23;
  }
  v11 = (char *)a1[1];
  v12 = (v8 - v11) >> 3;
  v13 = v12 + 1;
  if ((unint64_t)(v12 + 1) >> 61)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v14 = v7 - (_QWORD)v11;
  if (v14 >> 2 > v13)
    v13 = v14 >> 2;
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
    v15 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v15 = v13;
  if (v15)
  {
    if (v15 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v16 = (char *)operator new(8 * v15);
    v17 = &v16[8 * v12];
    v18 = &v16[8 * v15];
    *(_QWORD *)v17 = v5;
    v10 = (uint64_t)(v17 + 8);
    v19 = (char *)(v8 - v11);
    if (v8 == v11)
      goto LABEL_21;
    goto LABEL_14;
  }
  v16 = 0;
  v17 = (char *)(8 * v12);
  v18 = 0;
  *(_QWORD *)(8 * v12) = v5;
  v10 = 8 * v12 + 8;
  v19 = (char *)(v8 - v11);
  if (v8 != v11)
  {
LABEL_14:
    v20 = (unint64_t)(v19 - 8);
    if (v20 < 0x58)
      goto LABEL_28;
    if ((unint64_t)(v11 - v16) < 0x20)
      goto LABEL_28;
    v21 = (v20 >> 3) + 1;
    v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    v9 = &v8[-v22];
    v17 -= v22;
    v23 = &v16[8 * v12 - 16];
    v24 = (__int128 *)(v8 - 16);
    v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *v24;
      *((_OWORD *)v23 - 1) = *(v24 - 1);
      *(_OWORD *)v23 = v26;
      v23 -= 32;
      v24 -= 2;
      v25 -= 4;
    }
    while (v25);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        v27 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        *((_QWORD *)v17 - 1) = v27;
        v17 -= 8;
      }
      while (v9 != v11);
    }
    v9 = (char *)a1[1];
  }
LABEL_21:
  a1[1] = v17;
  a1[2] = v10;
  a1[3] = v18;
  if (v9)
    operator delete(v9);
LABEL_23:
  a1[2] = v10;
  return v6;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::Enabled>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::Enabled>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::Enabled>::clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = off_1E66DF840;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::CallType>::getSize()
{
  return 11;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::CallType>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_QWORD *)(v3 + 3) = *(_QWORD *)(result + 16);
  *a2 = v3 + 11;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 8;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::CallType>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x18uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DF890;
  *((_QWORD *)result + 2) = *(_QWORD *)(a1 + 16);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::LongDrxCycle>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::LongDrxCycle>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::LongDrxCycle>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DF8E0;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ShortDrxTimer>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ShortDrxTimer>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ShortDrxTimer>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DF930;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::SleepWakeDurScale>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::SleepWakeDurScale>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::SleepWakeDurScale>::clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = off_1E66DF980;
  return result;
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::TimeShareReqBandInformationSet>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E66DF9D0;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::TimeShareReqBandInformationSet>::~TlvWrapper(_QWORD *__p)
{
  void *v2;

  *__p = &off_1E66DF9D0;
  v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::TimeShareReqBandInformationSet>::getSize(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24) == *(_QWORD *)(a1 + 16))
    return 4;
  else
    return (*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) & 0xFFFFFFFFFFFFFFF8 | 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::TimeShareReqBandInformationSet>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 *v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 3;
  *a2 = v4;
  v5 = (char *)(v3 + 4);
  *(_BYTE *)(v3 + 3) = (*(_DWORD *)(result + 24) - *(_DWORD *)(result + 16)) >> 3;
  v7 = *(char **)(result + 16);
  v6 = *(char **)(result + 24);
  if (v7 != v6)
  {
    v8 = v6 - v7 - 8;
    if (v8 < 0x58)
      goto LABEL_15;
    if (v5 < &v7[(v8 & 0xFFFFFFFFFFFFFFF8) + 8] && (unint64_t)v7 < (v8 & 0xFFFFFFFFFFFFFFF8) + v3 + 12)
      goto LABEL_15;
    v10 = (v8 >> 3) + 1;
    v11 = 8 * (v10 & 0x3FFFFFFFFFFFFFF8);
    v5 += v11;
    v12 = &v7[v11];
    v13 = (__int128 *)(v7 + 32);
    v14 = (_OWORD *)(v3 + 36);
    result = v10 & 0x3FFFFFFFFFFFFFF8;
    do
    {
      v16 = *(v13 - 2);
      v15 = *(v13 - 1);
      v18 = *v13;
      v17 = v13[1];
      v13 += 4;
      *(v14 - 2) = v16;
      *(v14 - 1) = v15;
      *v14 = v18;
      v14[1] = v17;
      v14 += 4;
      result -= 8;
    }
    while (result);
    v7 = v12;
    if (v10 != (v10 & 0x3FFFFFFFFFFFFFF8))
    {
LABEL_15:
      do
      {
        *(_DWORD *)v5 = *(_DWORD *)v7;
        *((_DWORD *)v5 + 1) = *((_DWORD *)v7 + 1);
        v5 += 8;
        v7 += 8;
      }
      while (v7 != v6);
    }
  }
  *a2 = (uint64_t)v5;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = (_WORD)v5 - v4;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::TimeShareReqBandInformationSet>::clone(uint64_t a1)
{
  _BYTE *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = operator new(0x28uLL);
  v2[8] = *(_BYTE *)(a1 + 8);
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_1E66DF9D0;
  *((_QWORD *)v2 + 3) = 0;
  *((_QWORD *)v2 + 4) = 0;
  v4 = *(_BYTE **)(a1 + 16);
  v3 = *(_BYTE **)(a1 + 24);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v3 - v4);
    *((_QWORD *)v2 + 2) = v6;
    v7 = &v6[8 * (v5 >> 3)];
    *((_QWORD *)v2 + 4) = v7;
    memcpy(v6, v4, v5);
    *((_QWORD *)v2 + 3) = v7;
  }
  return v2;
}

void sub_1B3D7B148(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[3] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm18ConfigTimeShareReq8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D7B22C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D7B240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D7B26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::DefaultIdx>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::DefaultIdx>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::DefaultIdx>::clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = off_1E66DFA48;
  return result;
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::AntMapInformationSet>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E66DFA98;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::AntMapInformationSet>::~TlvWrapper(_QWORD *__p)
{
  void *v2;

  *__p = &off_1E66DFA98;
  v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::AntMapInformationSet>::getSize(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24) == *(_QWORD *)(a1 + 16))
    return 4;
  else
    return *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16) + 4;
}

unint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::AntMapInformationSet>::write(unint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  __int128 *v10;
  _OWORD *v11;
  __int128 v12;
  char v13;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 3;
  *a2 = v4;
  v5 = (_BYTE *)(v3 + 4);
  *(_BYTE *)(v3 + 3) = *(_DWORD *)(result + 24) - *(_DWORD *)(result + 16);
  v7 = *(char **)(result + 16);
  v6 = *(char **)(result + 24);
  if (v7 != v6)
  {
    v8 = v6 - v7;
    if ((unint64_t)(v6 - v7) < 0x20)
      goto LABEL_11;
    if ((unint64_t)(v3 - (_QWORD)v7 + 4) < 0x20)
      goto LABEL_11;
    v5 += v8 & 0xFFFFFFFFFFFFFFE0;
    v9 = &v7[v8 & 0xFFFFFFFFFFFFFFE0];
    v10 = (__int128 *)(v7 + 16);
    v11 = (_OWORD *)(v3 + 20);
    result = v8 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v12 = *v10;
      *(v11 - 1) = *(v10 - 1);
      *v11 = v12;
      v10 += 2;
      v11 += 2;
      result -= 32;
    }
    while (result);
    v7 = v9;
    if (v8 != (v8 & 0xFFFFFFFFFFFFFFE0))
    {
LABEL_11:
      do
      {
        v13 = *v7++;
        *v5++ = v13;
      }
      while (v7 != v6);
    }
  }
  *a2 = (uint64_t)v5;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = (_WORD)v5 - v4;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::AntMapInformationSet>::clone(uint64_t a1)
{
  _BYTE *v2;
  _BYTE *v3;
  _BYTE *v4;
  size_t v5;
  char *v6;
  char *v7;

  v2 = operator new(0x28uLL);
  v2[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_1E66DFA98;
  *((_QWORD *)v2 + 3) = 0;
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 2) = 0;
  v4 = *(_BYTE **)(a1 + 16);
  v3 = *(_BYTE **)(a1 + 24);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if ((v5 & 0x8000000000000000) != 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v3 - v4);
    *((_QWORD *)v2 + 2) = v6;
    v7 = &v6[v5];
    *((_QWORD *)v2 + 4) = &v6[v5];
    memcpy(v6, v4, v5);
    *((_QWORD *)v2 + 3) = v7;
  }
  return v2;
}

void sub_1B3D7B4C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::EnableMmwTxInfo>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::EnableMmwTxInfo>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::EnableMmwTxInfo>::clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = off_1E66DFAE8;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm15SetWCI2TxAntMap8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D7B604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D7B618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D7B644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::AntBlockBandInformationSet>::~TlvWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  *a1 = &off_1E66DFB60;
  v2 = a1[2];
  if (v2)
  {
    v3 = a1[3];
    v4 = (void *)a1[2];
    if (v3 != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 24);
        if (v5)
        {
          *(_QWORD *)(v3 - 16) = v5;
          operator delete(v5);
        }
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = (void *)a1[2];
    }
    a1[3] = v2;
    operator delete(v4);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::AntBlockBandInformationSet>::~TlvWrapper(_QWORD *__p)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  *__p = &off_1E66DFB60;
  v2 = __p[2];
  if (v2)
  {
    v3 = __p[3];
    v4 = (void *)__p[2];
    if (v3 != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 24);
        if (v5)
        {
          *(_QWORD *)(v3 - 16) = v5;
          operator delete(v5);
        }
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = (void *)__p[2];
    }
    __p[3] = v2;
    operator delete(v4);
  }
  operator delete(__p);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::AntBlockBandInformationSet>::getSize(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const double *v10;
  int64x2_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int64x2_t v14;
  const double *v15;
  unint64_t v16;
  float64x2x4_t v17;
  float64x2x4_t v18;

  v2 = *(_QWORD *)(a1 + 16);
  v1 = *(_QWORD *)(a1 + 24);
  if (v2 == v1)
    return 4;
  v3 = v1 - v2 - 32;
  if (v3 >= 0x80)
  {
    v7 = (v3 >> 5) + 1;
    v8 = v7 & 3;
    if ((v7 & 3) == 0)
      v8 = 4;
    v9 = v7 - v8;
    v5 = v2 + 32 * v9;
    v10 = (const double *)(v2 + 72);
    v11 = 0uLL;
    v12 = (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFFCLL);
    v13 = (int8x16_t)vdupq_n_s64(2uLL);
    v14 = 0uLL;
    do
    {
      v15 = v10 - 8;
      v17 = vld4q_f64(v15);
      v18 = vld4q_f64(v10);
      v11 = vaddq_s64((int64x2_t)vbslq_s8((int8x16_t)vceqq_s64((int64x2_t)v17.val[1], (int64x2_t)v17.val[0]), v13, vorrq_s8(vandq_s8((int8x16_t)vsubq_s64((int64x2_t)v17.val[1], (int64x2_t)v17.val[0]), v12), v13)), v11);
      v14 = vaddq_s64((int64x2_t)vbslq_s8((int8x16_t)vceqq_s64((int64x2_t)v18.val[1], (int64x2_t)v18.val[0]), v13, vorrq_s8(vandq_s8((int8x16_t)vsubq_s64((int64x2_t)v18.val[1], (int64x2_t)v18.val[0]), v12), v13)), v14);
      v10 += 16;
      v9 -= 4;
    }
    while (v9);
    v4 = vaddvq_s64(vaddq_s64(v14, v11));
  }
  else
  {
    v4 = 0;
    v5 = *(_QWORD *)(a1 + 16);
  }
  do
  {
    v16 = (*(_QWORD *)(v5 + 16) - *(_QWORD *)(v5 + 8)) & 0xFFFFFFFFFFFFFFFCLL | 2;
    if (*(_QWORD *)(v5 + 16) == *(_QWORD *)(v5 + 8))
      v16 = 2;
    v4 += v16;
    v5 += 32;
  }
  while (v5 != v1);
  return v4 + 4;
}

unint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::AntBlockBandInformationSet>::write(unint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  __int128 *v15;
  _OWORD *v16;
  uint64_t v17;
  __int128 v18;
  int v19;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 3;
  *a2 = v4;
  v5 = (_BYTE *)(v3 + 4);
  *(_BYTE *)(v3 + 3) = (*(_DWORD *)(result + 24) - *(_DWORD *)(result + 16)) >> 5;
  v6 = *(_QWORD *)(result + 16);
  v7 = *(_QWORD *)(result + 24);
  if (v6 == v7)
  {
    v8 = (_DWORD *)(v3 + 4);
  }
  else
  {
    do
    {
      *v5 = *(_BYTE *)v6;
      v8 = v5 + 2;
      v5[1] = (*(_DWORD *)(v6 + 16) - *(_DWORD *)(v6 + 8)) >> 2;
      v10 = *(char **)(v6 + 8);
      v9 = *(char **)(v6 + 16);
      if (v10 != v9)
      {
        v11 = v9 - v10 - 4;
        if (v11 < 0x1C)
          goto LABEL_15;
        result = v5 - v10 + 2;
        if (result < 0x20)
          goto LABEL_15;
        v12 = (v11 >> 2) + 1;
        result = v12 & 0x7FFFFFFFFFFFFFF8;
        v13 = 4 * (v12 & 0x7FFFFFFFFFFFFFF8);
        v8 = (_DWORD *)((char *)v8 + v13);
        v14 = &v10[v13];
        v15 = (__int128 *)(v10 + 16);
        v16 = v5 + 18;
        v17 = v12 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v18 = *v15;
          *(v16 - 1) = *(v15 - 1);
          *v16 = v18;
          v15 += 2;
          v16 += 2;
          v17 -= 8;
        }
        while (v17);
        v10 = v14;
        if (v12 != result)
        {
LABEL_15:
          do
          {
            v19 = *(_DWORD *)v10;
            v10 += 4;
            *v8++ = v19;
          }
          while (v10 != v9);
        }
      }
      v6 += 32;
      v5 = v8;
    }
    while (v6 != v7);
  }
  *a2 = (uint64_t)v8;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = (_WORD)v8 - v4;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::AntBlockBandInformationSet>::clone(uint64_t a1)
{
  _BYTE *v2;

  v2 = operator new(0x28uLL);
  v2[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_1E66DFB60;
  std::vector<coex::tlv::abm::AntBandInfoSet>::vector((_QWORD *)v2 + 2, (uint64_t *)(a1 + 16));
  return v2;
}

void sub_1B3D7B990(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<coex::tlv::abm::AntBandInfoSet>::vector(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;

  a1[2] = 0;
  *a1 = 0;
  a1[1] = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 != *a2)
  {
    if (v5 < 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v4 - *a2);
    v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[32 * (v5 >> 5)];
    do
    {
      v9 = v3 + v7;
      v10 = &v6[v7];
      v11 = *(_BYTE *)(v3 + v7);
      *(_QWORD *)&v6[v7 + 8] = 0;
      *v10 = v11;
      *((_QWORD *)v10 + 2) = 0;
      *((_QWORD *)v10 + 3) = 0;
      v13 = *(_BYTE **)(v3 + v7 + 8);
      v12 = *(_BYTE **)(v3 + v7 + 16);
      v14 = v12 - v13;
      if (v12 != v13)
      {
        if (v14 < 0)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v15 = (char *)operator new(v12 - v13);
        *(_QWORD *)&v6[v7 + 8] = v15;
        v8 = &v15[4 * (v14 >> 2)];
        *((_QWORD *)v10 + 2) = v15;
        *((_QWORD *)v10 + 3) = v8;
        memcpy(v15, v13, v14);
        *((_QWORD *)v10 + 2) = v8;
      }
      v7 += 32;
    }
    while (v9 + 32 != v4);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_1B3D7BADC(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  void *v6;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 3);
        if (v6)
        {
          *((_QWORD *)v4 - 2) = v6;
          operator delete(v6);
        }
        v4 -= 32;
      }
      while (v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<coex::tlv::abm::AntBandInfoSet>,coex::tlv::abm::AntBandInfoSet*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      v5 = *(void **)(v3 - 24);
      if (v5)
      {
        *(_QWORD *)(v3 - 16) = v5;
        operator delete(v5);
      }
      v3 -= 32;
    }
  }
  return a1;
}

char *std::vector<coex::tlv::abm::AntBandInfoSet>::__emplace_back_slow_path<coex::tlv::abm::AntBandInfoSet&>(_QWORD *a1, char *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char **v13;
  _BYTE *v14;
  _BYTE *v15;
  int64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  void *v24;
  __int128 v26;

  v4 = (char *)*a1;
  v3 = (char *)a1[1];
  v5 = (uint64_t)&v3[-*a1] >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v8 = a1[2] - (_QWORD)v4;
  if (v8 >> 4 > v6)
    v6 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v6;
  if (v9)
  {
    if (v9 >> 59)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v10 = (char *)operator new(32 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[32 * v5];
  v12 = &v10[32 * v9];
  *((_QWORD *)&v26 + 1) = v12;
  *v11 = *a2;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  v13 = (char **)(v11 + 16);
  *((_QWORD *)v11 + 3) = 0;
  v15 = (_BYTE *)*((_QWORD *)a2 + 1);
  v14 = (_BYTE *)*((_QWORD *)a2 + 2);
  v16 = v14 - v15;
  if (v14 != v15)
  {
    if (v16 < 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v17 = (char *)operator new(v14 - v15);
    *((_QWORD *)v11 + 1) = v17;
    *v13 = v17;
    v18 = &v17[4 * (v16 >> 2)];
    *((_QWORD *)v11 + 3) = v18;
    memcpy(v17, v15, v16);
    *v13 = v18;
  }
  v19 = v11 + 32;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v19;
    a1[2] = v12;
  }
  else
  {
    v20 = 0;
    do
    {
      v21 = &v11[v20];
      v22 = &v3[v20];
      *(v21 - 32) = v3[v20 - 32];
      *((_QWORD *)v21 - 2) = 0;
      *((_QWORD *)v21 - 1) = 0;
      *(_OWORD *)(v21 - 24) = *(_OWORD *)&v3[v20 - 24];
      *((_QWORD *)v21 - 1) = *(_QWORD *)&v3[v20 - 8];
      *((_QWORD *)v22 - 3) = 0;
      *((_QWORD *)v22 - 2) = 0;
      *((_QWORD *)v22 - 1) = 0;
      v20 -= 32;
    }
    while (&v3[v20] != v4);
    v3 = (char *)*a1;
    v23 = (char *)a1[1];
    *a1 = &v11[v20];
    *(_QWORD *)&v26 = v11 + 32;
    *(_OWORD *)(a1 + 1) = v26;
    v19 = v11 + 32;
    while (v23 != v3)
    {
      v24 = (void *)*((_QWORD *)v23 - 3);
      if (v24)
      {
        *((_QWORD *)v23 - 2) = v24;
        operator delete(v24);
      }
      v23 -= 32;
    }
  }
  if (v3)
    operator delete(v3);
  return v19;
}

void sub_1B3D7BD8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  _QWORD *v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v2;
  if (*v2)
  {
    *v3 = v5;
    operator delete(v5);
  }
  std::__split_buffer<coex::tlv::abm::AntBandInfoSet>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<coex::tlv::abm::AntBandInfoSet>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v4 = v2 - 32;
        *(_QWORD *)(a1 + 16) = v2 - 32;
        v5 = *(void **)(v2 - 24);
        if (!v5)
          break;
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 32;
    }
    while (v4 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm17SetAntBlockingReq8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D7BEDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D7BEF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D7BF1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::TransparentMessageInformationSet>::~TlvWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  *a1 = &off_1E66DFBD8;
  v2 = a1[2];
  if (v2)
  {
    v3 = a1[3];
    v4 = (void *)a1[2];
    if (v3 != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 24);
        if (v5)
        {
          *(_QWORD *)(v3 - 16) = v5;
          operator delete(v5);
        }
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = (void *)a1[2];
    }
    a1[3] = v2;
    operator delete(v4);
  }
  return a1;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::TransparentMessageInformationSet>::clone(uint64_t a1)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int v11;
  _BYTE *v12;
  _BYTE *v13;
  size_t v14;
  char *v15;

  v2 = operator new(0x28uLL);
  v2[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_1E66DFBD8;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 3) = 0;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = v4 - v3;
  if (v4 != v3)
  {
    if (v5 < 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v4 - v3);
    v7 = 0;
    *((_QWORD *)v2 + 2) = v6;
    *((_QWORD *)v2 + 3) = v6;
    *((_QWORD *)v2 + 4) = &v6[32 * (v5 >> 5)];
    do
    {
      v9 = v3 + v7;
      v10 = &v6[v7];
      v11 = *(_DWORD *)(v3 + v7);
      *(_QWORD *)&v6[v7 + 8] = 0;
      *(_DWORD *)v10 = v11;
      *((_QWORD *)v10 + 2) = 0;
      *((_QWORD *)v10 + 3) = 0;
      v13 = *(_BYTE **)(v3 + v7 + 8);
      v12 = *(_BYTE **)(v3 + v7 + 16);
      v14 = v12 - v13;
      if (v12 != v13)
      {
        if ((v14 & 0x8000000000000000) != 0)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v15 = (char *)operator new(v12 - v13);
        *(_QWORD *)&v6[v7 + 8] = v15;
        v8 = &v15[v14];
        *((_QWORD *)v10 + 2) = v15;
        *((_QWORD *)v10 + 3) = &v15[v14];
        memcpy(v15, v13, v14);
        *((_QWORD *)v10 + 2) = v8;
      }
      v7 += 32;
    }
    while (v9 + 32 != v4);
    *((_QWORD *)v2 + 3) = &v6[v7];
  }
  return v2;
}

void sub_1B3D7C104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, char a11)
{
  _QWORD *v11;
  char *v13;
  char *v14;
  void *v15;
  void *v16;

  v13 = (char *)*a10;
  if (*a10)
  {
    v14 = (char *)v11[3];
    v15 = *a10;
    if (v14 != v13)
    {
      do
      {
        v16 = (void *)*((_QWORD *)v14 - 3);
        if (v16)
        {
          *((_QWORD *)v14 - 2) = v16;
          operator delete(v16);
        }
        v14 -= 32;
      }
      while (v14 != v13);
      v15 = *a10;
    }
    v11[3] = v13;
    operator delete(v15);
  }
  operator delete(v11);
  _Unwind_Resume(a1);
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ClientAntBlockInformationSet>::~TlvWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  *a1 = &off_1E66DFC50;
  v2 = a1[2];
  if (v2)
  {
    v3 = a1[3];
    v4 = (void *)a1[2];
    if (v3 != v2)
    {
      do
      {
        v6 = *(_QWORD *)(v3 - 24);
        if (v6)
        {
          v7 = *(_QWORD *)(v3 - 16);
          v5 = *(void **)(v3 - 24);
          if (v7 != v6)
          {
            do
            {
              v8 = *(void **)(v7 - 24);
              if (v8)
              {
                *(_QWORD *)(v7 - 16) = v8;
                operator delete(v8);
              }
              v7 -= 32;
            }
            while (v7 != v6);
            v5 = *(void **)(v3 - 24);
          }
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v5);
        }
        v3 -= 40;
      }
      while (v3 != v2);
      v4 = (void *)a1[2];
    }
    a1[3] = v2;
    operator delete(v4);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ClientAntBlockInformationSet>::~TlvWrapper(_QWORD *__p)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  *__p = &off_1E66DFC50;
  v2 = __p[2];
  if (v2)
  {
    v3 = __p[3];
    v4 = (void *)__p[2];
    if (v3 != v2)
    {
      do
      {
        v6 = *(_QWORD *)(v3 - 24);
        if (v6)
        {
          v7 = *(_QWORD *)(v3 - 16);
          v5 = *(void **)(v3 - 24);
          if (v7 != v6)
          {
            do
            {
              v8 = *(void **)(v7 - 24);
              if (v8)
              {
                *(_QWORD *)(v7 - 16) = v8;
                operator delete(v8);
              }
              v7 -= 32;
            }
            while (v7 != v6);
            v5 = *(void **)(v3 - 24);
          }
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v5);
        }
        v3 -= 40;
      }
      while (v3 != v2);
      v4 = (void *)__p[2];
    }
    __p[3] = v2;
    operator delete(v4);
  }
  operator delete(__p);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ClientAntBlockInformationSet>::getSize(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int8x16_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const double *v13;
  int64x2_t v14;
  int64x2_t v15;
  const double *v16;
  unint64_t v17;
  float64x2x4_t v19;
  float64x2x4_t v20;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  if (v1 == v2)
    return 4;
  v3 = 0;
  v4 = (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFFCLL);
  do
  {
    while (1)
    {
      v6 = *(_QWORD *)(v1 + 16);
      v5 = *(_QWORD *)(v1 + 24);
      if (v6 != v5)
        break;
      v3 += 10;
      v1 += 40;
      if (v1 == v2)
        return v3 + 4;
    }
    v7 = v5 - v6 - 32;
    if (v7 >= 0x80)
    {
      v10 = (v7 >> 5) + 1;
      v11 = v10 & 3;
      if ((v10 & 3) == 0)
        v11 = 4;
      v12 = v10 - v11;
      v9 = v6 + 32 * v12;
      v13 = (const double *)(v6 + 72);
      v14 = 0uLL;
      v15 = 0uLL;
      do
      {
        v16 = v13 - 8;
        v19 = vld4q_f64(v16);
        v20 = vld4q_f64(v13);
        v19.val[2] = (float64x2_t)vdupq_n_s64(2uLL);
        v14 = vaddq_s64((int64x2_t)vbslq_s8((int8x16_t)vceqq_s64((int64x2_t)v19.val[1], (int64x2_t)v19.val[0]), (int8x16_t)v19.val[2], vorrq_s8(vandq_s8((int8x16_t)vsubq_s64((int64x2_t)v19.val[1], (int64x2_t)v19.val[0]), v4), (int8x16_t)v19.val[2])), v14);
        v15 = vaddq_s64((int64x2_t)vbslq_s8((int8x16_t)vceqq_s64((int64x2_t)v20.val[1], (int64x2_t)v20.val[0]), (int8x16_t)v19.val[2], vorrq_s8(vandq_s8((int8x16_t)vsubq_s64((int64x2_t)v20.val[1], (int64x2_t)v20.val[0]), v4), (int8x16_t)v19.val[2])), v15);
        v13 += 16;
        v12 -= 4;
      }
      while (v12);
      v8 = vaddvq_s64(vaddq_s64(v15, v14));
    }
    else
    {
      v8 = 0;
      v9 = *(_QWORD *)(v1 + 16);
    }
    do
    {
      v17 = (*(_QWORD *)(v9 + 16) - *(_QWORD *)(v9 + 8)) & 0xFFFFFFFFFFFFFFFCLL | 2;
      if (*(_QWORD *)(v9 + 16) == *(_QWORD *)(v9 + 8))
        v17 = 2;
      v8 += v17;
      v9 += 32;
    }
    while (v9 != v5);
    v3 += v8 + 10;
    v1 += 40;
  }
  while (v1 != v2);
  return v3 + 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ClientAntBlockInformationSet>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t i;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  _OWORD *v17;
  uint64_t v18;
  __int128 v19;
  int v20;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 3;
  *a2 = v4;
  v5 = (_BYTE *)(v3 + 4);
  *(_BYTE *)(v3 + 3) = -51 * ((*(_DWORD *)(result + 24) - *(_DWORD *)(result + 16)) >> 3);
  v6 = *(_QWORD *)(result + 16);
  for (i = *(_QWORD *)(result + 24); v6 != i; v6 += 40)
  {
    while (1)
    {
      *(_DWORD *)v5 = *(_DWORD *)v6;
      *((_DWORD *)v5 + 1) = *(_DWORD *)(v6 + 4);
      v5[8] = *(_BYTE *)(v6 + 8);
      v8 = v5 + 10;
      v5[9] = (*(_DWORD *)(v6 + 24) - *(_DWORD *)(v6 + 16)) >> 5;
      v9 = *(_QWORD *)(v6 + 16);
      v10 = *(_QWORD *)(v6 + 24);
      if (v9 != v10)
        break;
      v5 += 10;
      v6 += 40;
      if (v6 == i)
        goto LABEL_2;
    }
    do
    {
      *v8 = *(_BYTE *)v9;
      v5 = v8 + 2;
      v8[1] = (*(_DWORD *)(v9 + 16) - *(_DWORD *)(v9 + 8)) >> 2;
      result = *(_QWORD *)(v9 + 8);
      v11 = *(_QWORD *)(v9 + 16);
      if (result != v11)
      {
        v12 = v11 - result - 4;
        if (v12 < 0x1C)
          goto LABEL_18;
        if ((unint64_t)&v8[-result + 2] < 0x20)
          goto LABEL_18;
        v13 = (v12 >> 2) + 1;
        v14 = 4 * (v13 & 0x7FFFFFFFFFFFFFF8);
        v5 += v14;
        v15 = result + v14;
        v16 = (__int128 *)(result + 16);
        v17 = v8 + 18;
        v18 = v13 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v19 = *v16;
          *(v17 - 1) = *(v16 - 1);
          *v17 = v19;
          v16 += 2;
          v17 += 2;
          v18 -= 8;
        }
        while (v18);
        result = v15;
        if (v13 != (v13 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_18:
          do
          {
            v20 = *(_DWORD *)result;
            result += 4;
            *(_DWORD *)v5 = v20;
            v5 += 4;
          }
          while (result != v11);
        }
      }
      v9 += 32;
      v8 = v5;
    }
    while (v9 != v10);
  }
LABEL_2:
  *a2 = (uint64_t)v5;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = (_WORD)v5 - v4;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ClientAntBlockInformationSet>::clone(uint64_t a1)
{
  _BYTE *v2;

  v2 = operator new(0x28uLL);
  v2[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_1E66DFC50;
  *((_QWORD *)v2 + 3) = 0;
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 2) = 0;
  std::vector<coex::tlv::abm::AntBlockClientInfoSet>::__init_with_size[abi:ne180100]<coex::tlv::abm::AntBlockClientInfoSet*,coex::tlv::abm::AntBlockClientInfoSet*>((_QWORD *)v2 + 2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3));
  return v2;
}

void sub_1B3D7C5FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<coex::tlv::abm::AntBlockClientInfoSet>::__init_with_size[abi:ne180100]<coex::tlv::abm::AntBlockClientInfoSet*,coex::tlv::abm::AntBlockClientInfoSet*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0x666666666666667)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    result = operator new(40 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[5 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        v10 = &v8[v9 / 8];
        *v10 = *(_QWORD *)(a2 + v9);
        *((_BYTE *)v10 + 8) = *(_BYTE *)(a2 + v9 + 8);
        result = std::vector<coex::tlv::abm::AntBandInfoSet>::vector(&v8[v9 / 8 + 2], (uint64_t *)(a2 + v9 + 16));
        v9 += 40;
      }
      while (a2 + v9 != a3);
      v8 = (_QWORD *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_1B3D7C6E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::__exception_guard_exceptions<std::vector<coex::tlv::abm::AntBlockClientInfoSet>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D7C6FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;

  if (v12)
  {
    do
    {
      v15 = *(_QWORD *)(v11 - 24);
      if (v15)
      {
        v16 = *(_QWORD *)(v11 - 16);
        v14 = *(void **)(v11 - 24);
        if (v16 != v15)
        {
          do
          {
            v17 = *(void **)(v16 - 24);
            if (v17)
            {
              *(_QWORD *)(v16 - 16) = v17;
              operator delete(v17);
            }
            v16 -= 32;
          }
          while (v16 != v15);
          v14 = *(void **)(v11 - 24);
        }
        *(_QWORD *)(v11 - 16) = v15;
        operator delete(v14);
      }
      v11 -= 40;
    }
    while (v11 != v10);
  }
  *(_QWORD *)(v9 + 8) = v10;
  std::__exception_guard_exceptions<std::vector<coex::tlv::abm::AntBlockClientInfoSet>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ***std::__exception_guard_exceptions<std::vector<coex::tlv::abm::AntBlockClientInfoSet>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  void ***v1;
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (char *)**result;
    if (v3)
    {
      v4 = (char *)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          v7 = *((_QWORD *)v4 - 3);
          if (v7)
          {
            v8 = *((_QWORD *)v4 - 2);
            v6 = (void *)*((_QWORD *)v4 - 3);
            if (v8 != v7)
            {
              do
              {
                v9 = *(void **)(v8 - 24);
                if (v9)
                {
                  *(_QWORD *)(v8 - 16) = v9;
                  operator delete(v9);
                }
                v8 -= 32;
              }
              while (v8 != v7);
              v6 = (void *)*((_QWORD *)v4 - 3);
            }
            *((_QWORD *)v4 - 2) = v7;
            operator delete(v6);
          }
          v4 -= 40;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

char *std::vector<coex::tlv::abm::AntBlockClientInfoSet>::__emplace_back_slow_path<coex::tlv::abm::AntBlockClientInfoSet&>(char **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char v13;
  char *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  char *v20;
  char *v21;

  v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x666666666666666)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333)
    v6 = 0x666666666666666;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x666666666666666)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(40 * v6);
  }
  else
  {
    v7 = 0;
  }
  v20 = &v7[40 * v3];
  v21 = &v7[40 * v6];
  *(_QWORD *)v20 = *(_QWORD *)a2;
  v20[8] = *(_BYTE *)(a2 + 8);
  std::vector<coex::tlv::abm::AntBandInfoSet>::vector((_QWORD *)v20 + 2, (uint64_t *)(a2 + 16));
  v8 = v20;
  v9 = v20 + 40;
  v10 = *a1;
  v11 = a1[1];
  if (v11 == *a1)
  {
    *a1 = v20;
    a1[1] = v9;
    a1[2] = v21;
  }
  else
  {
    do
    {
      v12 = *((_QWORD *)v11 - 5);
      v11 -= 40;
      v13 = v11[8];
      *((_QWORD *)v8 - 5) = v12;
      v8 -= 40;
      v8[8] = v13;
      *((_QWORD *)v8 + 3) = 0;
      *((_QWORD *)v8 + 4) = 0;
      *((_QWORD *)v8 + 2) = 0;
      *((_OWORD *)v8 + 1) = *((_OWORD *)v11 + 1);
      *((_QWORD *)v8 + 4) = *((_QWORD *)v11 + 4);
      *((_QWORD *)v11 + 2) = 0;
      *((_QWORD *)v11 + 3) = 0;
      *((_QWORD *)v11 + 4) = 0;
    }
    while (v11 != v10);
    v11 = *a1;
    v14 = a1[1];
    *a1 = v8;
    a1[1] = v9;
    a1[2] = v21;
    while (v14 != v11)
    {
      v16 = *((_QWORD *)v14 - 3);
      if (v16)
      {
        v17 = *((_QWORD *)v14 - 2);
        v15 = (void *)*((_QWORD *)v14 - 3);
        if (v17 != v16)
        {
          do
          {
            v18 = *(void **)(v17 - 24);
            if (v18)
            {
              *(_QWORD *)(v17 - 16) = v18;
              operator delete(v18);
            }
            v17 -= 32;
          }
          while (v17 != v16);
          v15 = (void *)*((_QWORD *)v14 - 3);
        }
        *((_QWORD *)v14 - 2) = v16;
        operator delete(v15);
      }
      v14 -= 40;
    }
  }
  if (v11)
    operator delete(v11);
  return v20 + 40;
}

void sub_1B3D7CA04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<coex::tlv::abm::AntBlockClientInfoSet>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<coex::tlv::abm::AntBlockClientInfoSet>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    while (1)
    {
      while (1)
      {
        v4 = i - 40;
        *(_QWORD *)(a1 + 16) = i - 40;
        v5 = *(_QWORD *)(i - 24);
        if (v5)
          break;
        i -= 40;
        if (v4 == v2)
          goto LABEL_12;
      }
      v6 = *(_QWORD *)(i - 16);
      v7 = *(void **)(i - 24);
      if (v6 != v5)
        break;
      *(_QWORD *)(i - 16) = v5;
      operator delete(v7);
      i = *(_QWORD *)(a1 + 16);
      if (i == v2)
        goto LABEL_12;
    }
    do
    {
      v8 = *(void **)(v6 - 24);
      if (v8)
      {
        *(_QWORD *)(v6 - 16) = v8;
        operator delete(v8);
      }
      v6 -= 32;
    }
    while (v6 != v5);
    v9 = *(void **)(i - 24);
    *(_QWORD *)(i - 16) = v5;
    operator delete(v9);
  }
LABEL_12:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm23SetClientAntBlockingReq8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D7CBA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D7CBB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D7CBE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ClientAntBlockInformationSetExtended>::~TlvWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  *a1 = &off_1E66DFCC8;
  v2 = a1[2];
  if (v2)
  {
    v3 = a1[3];
    v4 = (void *)a1[2];
    if (v3 != v2)
    {
      do
      {
        v6 = *(_QWORD *)(v3 - 24);
        if (v6)
        {
          v7 = *(_QWORD *)(v3 - 16);
          v5 = *(void **)(v3 - 24);
          if (v7 != v6)
          {
            do
            {
              v8 = *(void **)(v7 - 24);
              if (v8)
              {
                *(_QWORD *)(v7 - 16) = v8;
                operator delete(v8);
              }
              v7 -= 32;
            }
            while (v7 != v6);
            v5 = *(void **)(v3 - 24);
          }
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v5);
        }
        v3 -= 40;
      }
      while (v3 != v2);
      v4 = (void *)a1[2];
    }
    a1[3] = v2;
    operator delete(v4);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ClientAntBlockInformationSetExtended>::~TlvWrapper(_QWORD *__p)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  *__p = &off_1E66DFCC8;
  v2 = __p[2];
  if (v2)
  {
    v3 = __p[3];
    v4 = (void *)__p[2];
    if (v3 != v2)
    {
      do
      {
        v6 = *(_QWORD *)(v3 - 24);
        if (v6)
        {
          v7 = *(_QWORD *)(v3 - 16);
          v5 = *(void **)(v3 - 24);
          if (v7 != v6)
          {
            do
            {
              v8 = *(void **)(v7 - 24);
              if (v8)
              {
                *(_QWORD *)(v7 - 16) = v8;
                operator delete(v8);
              }
              v7 -= 32;
            }
            while (v7 != v6);
            v5 = *(void **)(v3 - 24);
          }
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v5);
        }
        v3 -= 40;
      }
      while (v3 != v2);
      v4 = (void *)__p[2];
    }
    __p[3] = v2;
    operator delete(v4);
  }
  operator delete(__p);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ClientAntBlockInformationSetExtended>::getSize(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int8x16_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const double *v13;
  int64x2_t v14;
  int64x2_t v15;
  const double *v16;
  unint64_t v17;
  float64x2x4_t v19;
  float64x2x4_t v20;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  if (v1 == v2)
    return 4;
  v3 = 0;
  v4 = (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFFCLL);
  do
  {
    while (1)
    {
      v6 = *(_QWORD *)(v1 + 16);
      v5 = *(_QWORD *)(v1 + 24);
      if (v6 != v5)
        break;
      v3 += 10;
      v1 += 40;
      if (v1 == v2)
        return v3 + 4;
    }
    v7 = v5 - v6 - 32;
    if (v7 >= 0x80)
    {
      v10 = (v7 >> 5) + 1;
      v11 = v10 & 3;
      if ((v10 & 3) == 0)
        v11 = 4;
      v12 = v10 - v11;
      v9 = v6 + 32 * v12;
      v13 = (const double *)(v6 + 72);
      v14 = 0uLL;
      v15 = 0uLL;
      do
      {
        v16 = v13 - 8;
        v19 = vld4q_f64(v16);
        v20 = vld4q_f64(v13);
        v19.val[2] = (float64x2_t)vdupq_n_s64(2uLL);
        v14 = vaddq_s64((int64x2_t)vbslq_s8((int8x16_t)vceqq_s64((int64x2_t)v19.val[1], (int64x2_t)v19.val[0]), (int8x16_t)v19.val[2], vorrq_s8(vandq_s8((int8x16_t)vsubq_s64((int64x2_t)v19.val[1], (int64x2_t)v19.val[0]), v4), (int8x16_t)v19.val[2])), v14);
        v15 = vaddq_s64((int64x2_t)vbslq_s8((int8x16_t)vceqq_s64((int64x2_t)v20.val[1], (int64x2_t)v20.val[0]), (int8x16_t)v19.val[2], vorrq_s8(vandq_s8((int8x16_t)vsubq_s64((int64x2_t)v20.val[1], (int64x2_t)v20.val[0]), v4), (int8x16_t)v19.val[2])), v15);
        v13 += 16;
        v12 -= 4;
      }
      while (v12);
      v8 = vaddvq_s64(vaddq_s64(v15, v14));
    }
    else
    {
      v8 = 0;
      v9 = *(_QWORD *)(v1 + 16);
    }
    do
    {
      v17 = (*(_QWORD *)(v9 + 16) - *(_QWORD *)(v9 + 8)) & 0xFFFFFFFFFFFFFFFCLL | 2;
      if (*(_QWORD *)(v9 + 16) == *(_QWORD *)(v9 + 8))
        v17 = 2;
      v8 += v17;
      v9 += 32;
    }
    while (v9 != v5);
    v3 += v8 + 10;
    v1 += 40;
  }
  while (v1 != v2);
  return v3 + 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ClientAntBlockInformationSetExtended>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t i;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  _OWORD *v17;
  uint64_t v18;
  __int128 v19;
  int v20;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 3;
  *a2 = v4;
  v5 = (_BYTE *)(v3 + 4);
  *(_BYTE *)(v3 + 3) = -51 * ((*(_DWORD *)(result + 24) - *(_DWORD *)(result + 16)) >> 3);
  v6 = *(_QWORD *)(result + 16);
  for (i = *(_QWORD *)(result + 24); v6 != i; v6 += 40)
  {
    while (1)
    {
      *(_DWORD *)v5 = *(_DWORD *)v6;
      *((_DWORD *)v5 + 1) = *(_DWORD *)(v6 + 4);
      v5[8] = *(_BYTE *)(v6 + 8);
      v8 = v5 + 10;
      v5[9] = (*(_DWORD *)(v6 + 24) - *(_DWORD *)(v6 + 16)) >> 5;
      v9 = *(_QWORD *)(v6 + 16);
      v10 = *(_QWORD *)(v6 + 24);
      if (v9 != v10)
        break;
      v5 += 10;
      v6 += 40;
      if (v6 == i)
        goto LABEL_2;
    }
    do
    {
      *v8 = *(_BYTE *)v9;
      v5 = v8 + 2;
      v8[1] = (*(_DWORD *)(v9 + 16) - *(_DWORD *)(v9 + 8)) >> 2;
      result = *(_QWORD *)(v9 + 8);
      v11 = *(_QWORD *)(v9 + 16);
      if (result != v11)
      {
        v12 = v11 - result - 4;
        if (v12 < 0x1C)
          goto LABEL_18;
        if ((unint64_t)&v8[-result + 2] < 0x20)
          goto LABEL_18;
        v13 = (v12 >> 2) + 1;
        v14 = 4 * (v13 & 0x7FFFFFFFFFFFFFF8);
        v5 += v14;
        v15 = result + v14;
        v16 = (__int128 *)(result + 16);
        v17 = v8 + 18;
        v18 = v13 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v19 = *v16;
          *(v17 - 1) = *(v16 - 1);
          *v17 = v19;
          v16 += 2;
          v17 += 2;
          v18 -= 8;
        }
        while (v18);
        result = v15;
        if (v13 != (v13 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_18:
          do
          {
            v20 = *(_DWORD *)result;
            result += 4;
            *(_DWORD *)v5 = v20;
            v5 += 4;
          }
          while (result != v11);
        }
      }
      v9 += 32;
      v8 = v5;
    }
    while (v9 != v10);
  }
LABEL_2:
  *a2 = (uint64_t)v5;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = (_WORD)v5 - v4;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ClientAntBlockInformationSetExtended>::clone(uint64_t a1)
{
  _BYTE *v2;

  v2 = operator new(0x28uLL);
  v2[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_1E66DFCC8;
  *((_QWORD *)v2 + 3) = 0;
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 2) = 0;
  std::vector<coex::tlv::abm::AntBlockClientInfoSet>::__init_with_size[abi:ne180100]<coex::tlv::abm::AntBlockClientInfoSet*,coex::tlv::abm::AntBlockClientInfoSet*>((_QWORD *)v2 + 2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3));
  return v2;
}

void sub_1B3D7D05C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ClientId>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ClientId>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ClientId>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DFD18;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::Duration>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::Duration>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::Duration>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DFD68;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm27TriggerClientAntBlockingReq8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D7D220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D7D234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D7D260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

char *qmi::MutableMessageBase::createTLV<coex::tlv::abm::CriticalCarrierId>(_QWORD *a1)
{
  _BYTE *v2;
  _BYTE *v3;
  char *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v2 = operator new(0x10uLL);
  v3 = v2;
  v2[8] = 18;
  *(_QWORD *)v2 = off_1E66DFDE0;
  *((_DWORD *)v2 + 3) = 0;
  v4 = v2 + 12;
  v6 = (char *)a1[2];
  v5 = a1[3];
  v7 = v6;
  if ((unint64_t)v6 < v5)
  {
    *(_QWORD *)v6 = v2;
    v8 = (uint64_t)(v6 + 8);
    goto LABEL_23;
  }
  v9 = (char *)a1[1];
  v10 = (v6 - v9) >> 3;
  v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 61)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v12 = v5 - (_QWORD)v9;
  if (v12 >> 2 > v11)
    v11 = v12 >> 2;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
    v13 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13)
  {
    if (v13 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v14 = (char *)operator new(8 * v13);
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    *(_QWORD *)v15 = v3;
    v8 = (uint64_t)(v15 + 8);
    v17 = (char *)(v6 - v9);
    if (v6 == v9)
      goto LABEL_21;
    goto LABEL_14;
  }
  v14 = 0;
  v15 = (char *)(8 * v10);
  v16 = 0;
  *(_QWORD *)(8 * v10) = v3;
  v8 = 8 * v10 + 8;
  v17 = (char *)(v6 - v9);
  if (v6 != v9)
  {
LABEL_14:
    v18 = (unint64_t)(v17 - 8);
    if (v18 < 0x58)
      goto LABEL_28;
    if ((unint64_t)(v9 - v14) < 0x20)
      goto LABEL_28;
    v19 = (v18 >> 3) + 1;
    v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    v7 = &v6[-v20];
    v15 -= v20;
    v21 = &v14[8 * v10 - 16];
    v22 = (__int128 *)(v6 - 16);
    v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *v22;
      *((_OWORD *)v21 - 1) = *(v22 - 1);
      *(_OWORD *)v21 = v24;
      v21 -= 32;
      v22 -= 2;
      v23 -= 4;
    }
    while (v23);
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        v25 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *((_QWORD *)v15 - 1) = v25;
        v15 -= 8;
      }
      while (v7 != v9);
    }
    v7 = (char *)a1[1];
  }
LABEL_21:
  a1[1] = v15;
  a1[2] = v8;
  a1[3] = v16;
  if (v7)
    operator delete(v7);
LABEL_23:
  a1[2] = v8;
  return v4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::CriticalCarrierId>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::CriticalCarrierId>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::CriticalCarrierId>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DFDE0;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

char *qmi::MutableMessageBase::createTLV<coex::tlv::abm::BandInfo>(_QWORD *a1)
{
  _BYTE *v2;
  _BYTE *v3;
  char *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v2 = operator new(0x18uLL);
  v3 = v2;
  v2[8] = 19;
  *((_DWORD *)v2 + 3) = 0;
  v4 = v2 + 12;
  *(_QWORD *)v2 = off_1E66DFE30;
  *((_DWORD *)v2 + 4) = 0;
  v6 = (char *)a1[2];
  v5 = a1[3];
  v7 = v6;
  if ((unint64_t)v6 < v5)
  {
    *(_QWORD *)v6 = v2;
    v8 = (uint64_t)(v6 + 8);
    goto LABEL_23;
  }
  v9 = (char *)a1[1];
  v10 = (v6 - v9) >> 3;
  v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 61)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v12 = v5 - (_QWORD)v9;
  if (v12 >> 2 > v11)
    v11 = v12 >> 2;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
    v13 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13)
  {
    if (v13 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v14 = (char *)operator new(8 * v13);
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    *(_QWORD *)v15 = v3;
    v8 = (uint64_t)(v15 + 8);
    v17 = (char *)(v6 - v9);
    if (v6 == v9)
      goto LABEL_21;
    goto LABEL_14;
  }
  v14 = 0;
  v15 = (char *)(8 * v10);
  v16 = 0;
  *(_QWORD *)(8 * v10) = v3;
  v8 = 8 * v10 + 8;
  v17 = (char *)(v6 - v9);
  if (v6 != v9)
  {
LABEL_14:
    v18 = (unint64_t)(v17 - 8);
    if (v18 < 0x58)
      goto LABEL_28;
    if ((unint64_t)(v9 - v14) < 0x20)
      goto LABEL_28;
    v19 = (v18 >> 3) + 1;
    v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    v7 = &v6[-v20];
    v15 -= v20;
    v21 = &v14[8 * v10 - 16];
    v22 = (__int128 *)(v6 - 16);
    v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *v22;
      *((_OWORD *)v21 - 1) = *(v22 - 1);
      *(_OWORD *)v21 = v24;
      v21 -= 32;
      v22 -= 2;
      v23 -= 4;
    }
    while (v23);
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        v25 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *((_QWORD *)v15 - 1) = v25;
        v15 -= 8;
      }
      while (v7 != v9);
    }
    v7 = (char *)a1[1];
  }
LABEL_21:
  a1[1] = v15;
  a1[2] = v8;
  a1[3] = v16;
  if (v7)
    operator delete(v7);
LABEL_23:
  a1[2] = v8;
  return v4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::BandInfo>::getSize()
{
  return 11;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::BandInfo>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *(_DWORD *)(v3 + 7) = *(_DWORD *)(result + 16);
  *a2 = v3 + 11;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 8;
  return result;
}

char *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::BandInfo>::clone(uint64_t a1)
{
  char *result;

  result = (char *)operator new(0x18uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DFE30;
  *(_QWORD *)(result + 12) = *(_QWORD *)(a1 + 12);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm9SetCC1Req8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D7D780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D7D794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D7D7C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm9SetCC2Req8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D7D894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D7D8A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D7D8D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ThrottlePeriodicity>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ThrottlePeriodicity>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ThrottlePeriodicity>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DFED0;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm21SetLaaGpioThrottleReq8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D7DA20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D7DA34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D7DA60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::GnssBandId>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::GnssBandId>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::GnssBandId>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DFF48;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::GnssL5Level>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::GnssL5Level>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::GnssL5Level>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DFF98;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm13SetGnssBandId8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D7DC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D7DC38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D7DC64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t *boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(uint64_t *a1)
{
  if (*(_DWORD *)(*a1 + 292) > *(_DWORD *)(*a1 + 288))
    boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::force_cleanup_connections(a1[1], a1[2]);
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

uint64_t boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>::erase(uint64_t *a1, int *a2, uint64_t **a3)
{
  uint64_t v6;
  uint64_t **v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t *v16;
  int v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t **v25;
  uint64_t **v26;
  int v27;
  uint64_t ***v28;
  BOOL v29;
  BOOL v30;
  uint64_t ***v31;
  uint64_t *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t *v37;
  uint64_t *v38;
  int v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;

  v7 = (uint64_t **)(a1 + 4);
  v6 = a1[4];
  if (!v6)
  {
    v23 = (uint64_t *)a1[10];
    if (v23 != *a3)
      goto LABEL_80;
    v24 = (uint64_t *)v23[1];
    v25 = (uint64_t **)(a1 + 4);
    v10 = a1 + 4;
    if (v24 != a1)
      goto LABEL_76;
    goto LABEL_55;
  }
  v8 = *a2;
  v9 = a2[2];
  v10 = a1 + 4;
  v11 = a1[4];
  if (*a2 == 1)
  {
    do
    {
      while (1)
      {
        v17 = *(_DWORD *)(v11 + 32);
        v18 = v17 < 1;
        if (v17 == 1)
          v18 = *(_DWORD *)(v11 + 40) < v9;
        if (!v18)
          break;
        v11 = *(_QWORD *)(v11 + 8);
        if (!v11)
          goto LABEL_19;
      }
      v10 = (uint64_t *)v11;
      v11 = *(_QWORD *)v11;
    }
    while (v11);
  }
  else
  {
    do
    {
      v12 = *(_DWORD *)(v11 + 32);
      v13 = v12 == v8;
      v14 = v12 < v8;
      if (v12 >= v8)
        v15 = (uint64_t *)v11;
      else
        v15 = (uint64_t *)(v11 + 8);
      if (v14)
        v16 = v10;
      else
        v16 = (uint64_t *)v11;
      if (v13)
      {
        v15 = (uint64_t *)v11;
        v10 = (uint64_t *)v11;
      }
      else
      {
        v10 = v16;
      }
      v11 = *v15;
    }
    while (*v15);
  }
LABEL_19:
  v19 = (uint64_t *)v10[6];
  if (v19 != *a3)
    goto LABEL_80;
  v20 = (uint64_t **)(a1 + 4);
  if (v8 == 1)
  {
    v21 = (uint64_t *)a1[4];
    while (1)
    {
      v22 = *((_DWORD *)v21 + 8);
      if (v22 == 1)
      {
        if (v9 < *((_DWORD *)v21 + 10))
          goto LABEL_27;
LABEL_22:
        v21 = (uint64_t *)v21[1];
        if (!v21)
          goto LABEL_42;
      }
      else
      {
        if (v22 <= 1)
          goto LABEL_22;
LABEL_27:
        v20 = (uint64_t **)v21;
        v21 = (uint64_t *)*v21;
        if (!v21)
          goto LABEL_42;
      }
    }
  }
  v26 = (uint64_t **)a1[4];
  do
  {
    v27 = *((_DWORD *)v26 + 8);
    v28 = (uint64_t ***)(v26 + 1);
    v29 = v8 == v27;
    v30 = v8 < v27;
    if (v8 >= v27)
      v31 = (uint64_t ***)(v26 + 1);
    else
      v31 = (uint64_t ***)v26;
    if (!v30)
      v26 = v20;
    if (v29)
      v31 = v28;
    else
      v20 = v26;
    v26 = *v31;
  }
  while (*v31);
LABEL_42:
  v24 = (uint64_t *)v19[1];
  v32 = a1;
  if (v20 != v7)
    v32 = v20[6];
  if (v24 == v32)
  {
LABEL_55:
    v37 = (uint64_t *)v10[1];
    if (v37)
    {
      do
      {
        v38 = v37;
        v37 = (uint64_t *)*v37;
      }
      while (v37);
    }
    else
    {
      v41 = v10;
      do
      {
        v38 = (uint64_t *)v41[2];
        v13 = *v38 == (_QWORD)v41;
        v41 = v38;
      }
      while (!v13);
    }
    if ((uint64_t *)a1[3] == v10)
      a1[3] = (uint64_t)v38;
    --a1[5];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v6, v10);
    operator delete(v10);
    goto LABEL_80;
  }
  v33 = *a2;
  if (*a2 == 1)
  {
    v34 = a2[2];
    while (1)
    {
      v25 = (uint64_t **)v6;
      v35 = *(_DWORD *)(v6 + 32);
      if (v35 == 1)
      {
        v36 = *(_DWORD *)(v6 + 40);
        if (v36 <= v34)
        {
          if (v36 >= v34)
          {
            *(_QWORD *)(v6 + 48) = v24;
            goto LABEL_80;
          }
          goto LABEL_53;
        }
LABEL_47:
        v6 = *(_QWORD *)v6;
        if (!*v25)
        {
          v7 = v25;
          goto LABEL_76;
        }
      }
      else
      {
        if (v35 > 1)
          goto LABEL_47;
LABEL_53:
        v6 = *(_QWORD *)(v6 + 8);
        if (!v6)
        {
          v7 = v25 + 1;
          goto LABEL_76;
        }
      }
    }
  }
  v39 = *(_DWORD *)(v6 + 32);
  if (v33 == v39)
    goto LABEL_79;
  while (v33 >= v39)
  {
    if (v39 >= v33)
      goto LABEL_79;
    v40 = *(_QWORD *)(v6 + 8);
    if (!v40)
    {
      v7 = (uint64_t **)(v6 + 8);
      goto LABEL_75;
    }
LABEL_61:
    v39 = *(_DWORD *)(v40 + 32);
    v6 = v40;
    if (v33 == v39)
    {
      *(_QWORD *)(v40 + 48) = v24;
      goto LABEL_80;
    }
  }
  v40 = *(_QWORD *)v6;
  if (*(_QWORD *)v6)
    goto LABEL_61;
  v7 = (uint64_t **)v6;
LABEL_75:
  v25 = (uint64_t **)v6;
LABEL_76:
  v6 = (uint64_t)operator new(0x38uLL);
  *(_QWORD *)(v6 + 32) = *(_QWORD *)a2;
  *(_DWORD *)(v6 + 40) = a2[2];
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = v25;
  *v7 = (uint64_t *)v6;
  v42 = *(_QWORD *)a1[3];
  v43 = (uint64_t *)v6;
  if (v42)
  {
    a1[3] = v42;
    v43 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[4], v43);
  ++a1[5];
LABEL_79:
  *(_QWORD *)(v6 + 48) = v24;
LABEL_80:
  v44 = *a3;
  v45 = **a3;
  v46 = (*a3)[1];
  *(_QWORD *)(v45 + 8) = v46;
  *(_QWORD *)v44[1] = v45;
  --a1[2];
  v47 = (unsigned int *)v44[3];
  if (v47)
  {
    v48 = v47 + 2;
    do
    {
      v49 = __ldaxr(v48);
      v50 = v49 - 1;
    }
    while (__stlxr(v50, v48));
    if (!v50)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v47 + 16))(v47);
      v51 = v47 + 3;
      do
      {
        v52 = __ldaxr(v51);
        v53 = v52 - 1;
      }
      while (__stlxr(v53, v51));
      if (!v53)
        (*(void (**)(unsigned int *))(*(_QWORD *)v47 + 24))(v47);
    }
  }
  operator delete(v44);
  return v46;
}

void boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::force_cleanup_connections(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  __int128 v4;
  pthread_mutex_t *v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  _QWORD **v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  BOOL v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  int v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  int v41;
  int v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  int v46;
  int v47;
  int v48;
  _QWORD *v49;
  __int128 v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t *v59;
  unsigned int *v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t **v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  unsigned int *v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t *v80;
  uint64_t **v81;
  uint64_t *v82;
  uint64_t *v83;
  _OWORD v84[10];
  unint64_t v85;
  void *__p;
  uint64_t v87;
  pthread_mutex_t *v88;
  uint64_t v89;

  v3 = (uint64_t **)a1;
  v89 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v84[8] = v4;
  v84[9] = v4;
  v84[6] = v4;
  v84[7] = v4;
  v84[4] = v4;
  v84[5] = v4;
  v84[2] = v4;
  v84[3] = v4;
  v84[0] = v4;
  v84[1] = v4;
  v5 = *(pthread_mutex_t **)(a1 + 24);
  v85 = 10;
  __p = v84;
  v87 = 0;
  v88 = v5;
  pthread_mutex_lock(v5);
  if (**v3 != a2)
    goto LABEL_101;
  v6 = v3[1];
  if (!v6 || (v7 = atomic_load((unsigned int *)v6 + 2), v7 != 1))
  {
    v82 = (uint64_t *)operator new(0x20uLL);
    v8 = *v3;
    v9 = **v3;
    v10 = operator new(0x40uLL);
    v11 = v10;
    *v10 = v10;
    v10[1] = v10;
    v10[2] = 0;
    v12 = *(_QWORD **)(v9 + 8);
    if (v12 != (_QWORD *)v9)
    {
      v13 = 0;
      v14 = v10;
      do
      {
        v15 = operator new(0x20uLL);
        v15[2] = v12[2];
        v16 = v12[3];
        v15[3] = v16;
        if (v16)
        {
          v17 = (unsigned int *)(v16 + 8);
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
          v14 = (_QWORD *)*v11;
          v13 = v11[2];
        }
        *v15 = v14;
        v15[1] = v11;
        v14[1] = v15;
        *v11 = v15;
        v11[2] = ++v13;
        v12 = (_QWORD *)v12[1];
        v14 = v15;
      }
      while (v12 != (_QWORD *)v9);
    }
    v80 = v8;
    v81 = v3;
    v11[3] = 0;
    v19 = (_QWORD **)(v11 + 3);
    v11[4] = 0;
    v20 = v11 + 4;
    v11[5] = 0;
    *((_BYTE *)v11 + 48) = *(_BYTE *)(v9 + 48);
    v11[3] = v11 + 4;
    v21 = *(_QWORD **)(v9 + 24);
    v22 = (_QWORD *)(v9 + 32);
    if (v21 == (_QWORD *)(v9 + 32))
    {
LABEL_12:
      *((_BYTE *)v11 + 56) = *(_BYTE *)(v9 + 56);
      v23 = *(_QWORD **)(v9 + 24);
      if (v23 != v22)
      {
        v24 = (_QWORD *)v11[3];
        v25 = v11[1];
        do
        {
          v24[6] = v25;
          v26 = v9;
          if (v23 != v22)
            v26 = v23[6];
          v27 = (_QWORD *)v23[1];
          v28 = v27;
          v29 = v23;
          if (v27)
          {
            do
            {
              v30 = v28;
              v28 = (_QWORD *)*v28;
            }
            while (v28);
          }
          else
          {
            do
            {
              v30 = (_QWORD *)v29[2];
              v31 = *v30 == (_QWORD)v29;
              v29 = v30;
            }
            while (!v31);
          }
          v32 = v9;
          if (v30 != v22)
            v32 = v30[6];
          while (v26 != v32)
          {
            v26 = *(_QWORD *)(v26 + 8);
            v25 = *(_QWORD *)(v25 + 8);
          }
          if (v27)
          {
            do
            {
              v33 = v27;
              v27 = (_QWORD *)*v27;
            }
            while (v27);
          }
          else
          {
            do
            {
              v33 = (_QWORD *)v23[2];
              v31 = *v33 == (_QWORD)v23;
              v23 = v33;
            }
            while (!v31);
          }
          v34 = (_QWORD *)v24[1];
          if (v34)
          {
            do
            {
              v35 = v34;
              v34 = (_QWORD *)*v34;
            }
            while (v34);
          }
          else
          {
            do
            {
              v35 = (_QWORD *)v24[2];
              v31 = *v35 == (_QWORD)v24;
              v24 = v35;
            }
            while (!v31);
          }
          v23 = v33;
          v24 = v35;
        }
        while (v33 != v22);
      }
      *v82 = (uint64_t)v11;
      v82[1] = 0;
      v55 = operator new(0x18uLL);
      v55[1] = 0x100000001;
      *v55 = off_1E66E0058;
      v55[2] = v11;
      v82[1] = (uint64_t)v55;
      v3 = v81;
      v82[2] = v80[2];
      v56 = v80[3];
      v82[3] = v56;
      if (v56)
      {
        v57 = (unsigned int *)(v56 + 8);
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
      }
      v59 = (uint64_t *)operator new(0x18uLL);
      v59[1] = 0x100000001;
      *v59 = (uint64_t)off_1E66DFFF8;
      v59[2] = (uint64_t)v82;
      v60 = (unsigned int *)v81[1];
      *v81 = v82;
      v81[1] = v59;
      if (v60)
      {
        v61 = v60 + 2;
        do
        {
          v62 = __ldaxr(v61);
          v63 = v62 - 1;
        }
        while (__stlxr(v63, v61));
        if (!v63)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v60 + 16))(v60);
          v64 = v60 + 3;
          do
          {
            v65 = __ldaxr(v64);
            v66 = v65 - 1;
          }
          while (__stlxr(v66, v64));
          if (!v66)
            (*(void (**)(unsigned int *))(*(_QWORD *)v60 + 24))(v60);
        }
      }
      goto LABEL_95;
    }
    while (1)
    {
      v36 = *((_DWORD *)v21 + 8);
      v37 = (_QWORD *)*v20;
      v38 = v11 + 4;
      if (*v19 != v20)
      {
        v39 = (_QWORD *)*v20;
        v40 = v11 + 4;
        if (v37)
        {
          do
          {
            v38 = v39;
            v39 = (_QWORD *)v39[1];
          }
          while (v39);
        }
        else
        {
          do
          {
            v38 = (_QWORD *)v40[2];
            v31 = *v38 == (_QWORD)v40;
            v40 = v38;
          }
          while (v31);
        }
        v41 = *((_DWORD *)v21 + 10);
        v42 = *((_DWORD *)v38 + 8);
        if (v42 == v36)
        {
          if (v36 != 1)
            goto LABEL_57;
          if (*((_DWORD *)v38 + 10) >= v41)
          {
            v43 = (_QWORD *)*v20;
            v44 = v11 + 4;
            v45 = v11 + 4;
            if (v37)
              goto LABEL_61;
LABEL_68:
            v49 = operator new(0x38uLL);
            v50 = *((_OWORD *)v21 + 2);
            v49[6] = v21[6];
            *((_OWORD *)v49 + 2) = v50;
            *v49 = 0;
            v49[1] = 0;
            v49[2] = v45;
            *v44 = v49;
            v51 = (_QWORD *)**v19;
            if (v51)
            {
              *v19 = v51;
              v49 = (_QWORD *)*v44;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v11[4], v49);
            ++v11[5];
            goto LABEL_71;
          }
        }
        else if (v42 >= v36)
        {
LABEL_57:
          v44 = v11 + 4;
          v45 = v11 + 4;
          if (!v37)
            goto LABEL_68;
          v43 = (_QWORD *)*v20;
          if (v36 != 1)
          {
            v46 = *((_DWORD *)v37 + 8);
            v45 = (_QWORD *)*v20;
            while (v36 != v46)
            {
              if (v36 < v46)
              {
                v54 = *v45;
                v44 = v45;
                if (!*v45)
                  goto LABEL_68;
              }
              else
              {
                if (v46 >= v36)
                  goto LABEL_71;
                v54 = v45[1];
                if (!v54)
                  goto LABEL_67;
              }
              v46 = *(_DWORD *)(v54 + 32);
              v45 = (_QWORD *)v54;
            }
            goto LABEL_71;
          }
          while (1)
          {
LABEL_61:
            v45 = v43;
            v47 = *((_DWORD *)v43 + 8);
            if (v47 == 1)
            {
              v48 = *((_DWORD *)v43 + 10);
              if (v48 > v41)
                goto LABEL_60;
              if (v48 >= v41)
                goto LABEL_71;
            }
            else if (v47 > 1)
            {
LABEL_60:
              v43 = (_QWORD *)*v43;
              v44 = v45;
              if (!*v45)
                goto LABEL_68;
              continue;
            }
            v43 = (_QWORD *)v43[1];
            if (!v43)
            {
LABEL_67:
              v44 = v45 + 1;
              goto LABEL_68;
            }
          }
        }
      }
      if (v37)
        v45 = v38;
      else
        v45 = v11 + 4;
      if (v37)
        v44 = v38 + 1;
      else
        v44 = v11 + 4;
      if (!*v44)
        goto LABEL_68;
LABEL_71:
      v52 = (_QWORD *)v21[1];
      if (v52)
      {
        do
        {
          v53 = v52;
          v52 = (_QWORD *)*v52;
        }
        while (v52);
      }
      else
      {
        do
        {
          v53 = (_QWORD *)v21[2];
          v31 = *v53 == (_QWORD)v21;
          v21 = v53;
        }
        while (!v31);
      }
      v21 = v53;
      if (v53 == v22)
        goto LABEL_12;
    }
  }
LABEL_95:
  v67 = (uint64_t **)*v3;
  v68 = (uint64_t *)**v3;
  v69 = (uint64_t *)v68[1];
  v83 = v69;
  if (v68 != v69)
  {
    do
    {
      while (1)
      {
        v70 = v69[2];
        if (!*(_BYTE *)(v70 + 24))
          break;
        v69 = (uint64_t *)v69[1];
        v83 = v69;
        v68 = *v67;
        if (v69 == *v67)
          goto LABEL_100;
      }
      v69 = (uint64_t *)boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>::erase(v68, (int *)(v70 + 64), &v83);
      v67 = (uint64_t **)*v3;
      v83 = v69;
      v68 = *v67;
    }
    while (v69 != *v67);
  }
LABEL_100:
  v3[2] = v69;
LABEL_101:
  pthread_mutex_unlock(v88);
  v71 = (char *)__p;
  if (__p)
  {
    if (v87 - 1 >= 0)
    {
      v72 = (char *)__p + 16 * v87;
      do
      {
        v73 = (unsigned int *)*((_QWORD *)v72 - 1);
        if (v73)
        {
          v74 = v73 + 2;
          do
          {
            v75 = __ldaxr(v74);
            v76 = v75 - 1;
          }
          while (__stlxr(v76, v74));
          if (!v76)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v73 + 16))(v73);
            v77 = v73 + 3;
            do
            {
              v78 = __ldaxr(v77);
              v79 = v78 - 1;
            }
            while (__stlxr(v79, v77));
            if (!v79)
              (*(void (**)(unsigned int *))(*(_QWORD *)v73 + 24))(v73);
          }
        }
        v72 -= 16;
      }
      while (v72 > v71);
    }
    if (v85 >= 0xB)
      operator delete(__p);
  }
}

void sub_1B3D7E6FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v1 = *(_QWORD **)(a1 + 16);
  if (v1)
  {
    v2 = (unsigned int *)v1[3];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    v9 = (unsigned int *)v1[1];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v7 = (unsigned int *)v3[3];
        if (v7)
        {
          v8 = v7 + 2;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
            v11 = v7 + 3;
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
          }
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>>>::destroy((_QWORD *)v1[4]);
    if (v1[2])
    {
      v2 = (_QWORD *)*v1;
      v3 = (uint64_t *)v1[1];
      v4 = *v3;
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(*v1 + 8);
      *(_QWORD *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          v5 = (uint64_t *)v3[1];
          v6 = (unsigned int *)v3[3];
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          operator delete(v3);
          v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

void tlv::parseV<nas::tlv::abm::BBHoppingList>(tlv **a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  tlv *v5;
  const unsigned __int8 *v6;
  unint64_t v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  v9 = *(unsigned __int8 *)v5;
  v8 = (char *)v5 + 1;
  v7 = v9;
  if (v9)
  {
    std::vector<nas::tlv::abm::BBFreqItem>::__append((uint64_t)a3, v7);
    v10 = *a3;
    v11 = a3[1];
    if (*a3 != v11)
    {
      do
      {
        v12 = v8;
        tlv::throwIfNotEnoughBytes((tlv *)v8, v6, (const unsigned __int8 *)8);
        *(_QWORD *)v10 = *(_QWORD *)v8;
        tlv::throwIfNotEnoughBytes((tlv *)(v8 + 8), v6, (const unsigned __int8 *)4);
        *(_DWORD *)(v10 + 8) = *((_DWORD *)v8 + 2);
        v10 += 16;
        v8 += 12;
      }
      while (v10 != v11);
      v8 = v12 + 12;
    }
  }
  *a1 = (tlv *)v8;
}

void sub_1B3D7EE80(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3D7EE68);
}

void sub_1B3D7EE94(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void tlv::parseV<nas::tlv::abm::BBHRPLMNList>(tlv **a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  tlv *v5;
  const unsigned __int8 *v6;
  unint64_t v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  v9 = *(unsigned __int8 *)v5;
  v8 = (char *)v5 + 1;
  v7 = v9;
  if (v9)
  {
    std::vector<nas::tlv::abm::BBFreqItem>::__append((uint64_t)a3, v7);
    v10 = *a3;
    v11 = a3[1];
    if (*a3 != v11)
    {
      do
      {
        v12 = v8;
        tlv::throwIfNotEnoughBytes((tlv *)v8, v6, (const unsigned __int8 *)8);
        *(_QWORD *)v10 = *(_QWORD *)v8;
        tlv::throwIfNotEnoughBytes((tlv *)(v8 + 8), v6, (const unsigned __int8 *)4);
        *(_DWORD *)(v10 + 8) = *((_DWORD *)v8 + 2);
        v10 += 16;
        v8 += 12;
      }
      while (v10 != v11);
      v8 = v12 + 12;
    }
  }
  *a1 = (tlv *)v8;
}

void sub_1B3D7EF74(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3D7EF5CLL);
}

void sub_1B3D7EF88(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void tlv::parseV<nas::tlv::abm::BBNeighborSecondList>(tlv **a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  tlv *v5;
  const unsigned __int8 *v6;
  unint64_t v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  v9 = *(unsigned __int8 *)v5;
  v8 = (char *)v5 + 1;
  v7 = v9;
  if (v9)
  {
    std::vector<nas::tlv::abm::BBFreqItem>::__append((uint64_t)a3, v7);
    v10 = *a3;
    v11 = a3[1];
    if (*a3 != v11)
    {
      do
      {
        v12 = v8;
        tlv::throwIfNotEnoughBytes((tlv *)v8, v6, (const unsigned __int8 *)8);
        *(_QWORD *)v10 = *(_QWORD *)v8;
        tlv::throwIfNotEnoughBytes((tlv *)(v8 + 8), v6, (const unsigned __int8 *)4);
        *(_DWORD *)(v10 + 8) = *((_DWORD *)v8 + 2);
        v10 += 16;
        v8 += 12;
      }
      while (v10 != v11);
      v8 = v12 + 12;
    }
  }
  *a1 = (tlv *)v8;
}

void sub_1B3D7F068(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3D7F050);
}

void sub_1B3D7F07C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void tlv::parseV<nas::tlv::abm::DLSCellFrequencyList>(tlv **a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  tlv *v5;
  const unsigned __int8 *v6;
  unint64_t v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  v9 = *(unsigned __int8 *)v5;
  v8 = (char *)v5 + 1;
  v7 = v9;
  if (v9)
  {
    std::vector<nas::tlv::abm::BBFreqItem>::__append((uint64_t)a3, v7);
    v10 = *a3;
    v11 = a3[1];
    if (*a3 != v11)
    {
      do
      {
        v12 = v8;
        tlv::throwIfNotEnoughBytes((tlv *)v8, v6, (const unsigned __int8 *)8);
        *(_QWORD *)v10 = *(_QWORD *)v8;
        tlv::throwIfNotEnoughBytes((tlv *)(v8 + 8), v6, (const unsigned __int8 *)4);
        *(_DWORD *)(v10 + 8) = *((_DWORD *)v8 + 2);
        v10 += 16;
        v8 += 12;
      }
      while (v10 != v11);
      v8 = v12 + 12;
    }
  }
  *a1 = (tlv *)v8;
}

void sub_1B3D7F15C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3D7F144);
}

void sub_1B3D7F170(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void tlv::parseV<nas::tlv::abm::BBCampUplinkFreqList>(tlv **a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  tlv *v5;
  const unsigned __int8 *v6;
  unint64_t v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  v9 = *(unsigned __int8 *)v5;
  v8 = (char *)v5 + 1;
  v7 = v9;
  if (v9)
  {
    std::vector<nas::tlv::abm::BBFreqItem>::__append((uint64_t)a3, v7);
    v10 = *a3;
    v11 = a3[1];
    if (*a3 != v11)
    {
      do
      {
        v12 = v8;
        tlv::throwIfNotEnoughBytes((tlv *)v8, v6, (const unsigned __int8 *)8);
        *(_QWORD *)v10 = *(_QWORD *)v8;
        tlv::throwIfNotEnoughBytes((tlv *)(v8 + 8), v6, (const unsigned __int8 *)4);
        *(_DWORD *)(v10 + 8) = *((_DWORD *)v8 + 2);
        v10 += 16;
        v8 += 12;
      }
      while (v10 != v11);
      v8 = v12 + 12;
    }
  }
  *a1 = (tlv *)v8;
}

void sub_1B3D7F250(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3D7F238);
}

void sub_1B3D7F264(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t abm::asString@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  switch((int)result)
  {
    case 0:
      a2[23] = 2;
      strcpy(a2, "UI");
      break;
    case 1:
      a2[23] = 7;
      strcpy(a2, "ABMtool");
      break;
    case 2:
      a2[23] = 7;
      strcpy(a2, "Profile");
      break;
    case 3:
      a2[23] = 10;
      strcpy(a2, "24hr_Timer");
      break;
    default:
      a2[23] = 11;
      strcpy(a2, "UnSpecified");
      break;
  }
  return result;
}

void Timestamp::Timestamp(Timestamp *this)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  int *v10;
  char *v11;
  unsigned __int128 v12;
  uint8_t buf[4];
  char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  *((_QWORD *)this + 1) = 0;
  v2 = (_QWORD *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = (char *)this + 8;
  v12 = 0uLL;
  if ((gettimeofday((timeval *)&v12, 0) & 0x80000000) == 0
    || !os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v3 = *v2;
    v4 = v2;
    if (*v2)
      goto LABEL_4;
LABEL_10:
    v7 = (char *)operator new(0x38uLL);
    *((_DWORD *)v7 + 8) = 0;
    *((_QWORD *)v7 + 5) = 0;
    *((_QWORD *)v7 + 6) = 0;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v4;
    *v2 = v7;
    v8 = **(_QWORD **)this;
    v9 = (uint64_t *)v7;
    if (v8)
    {
      *(_QWORD *)this = v8;
      v9 = (uint64_t *)*v2;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 1), v9);
    ++*((_QWORD *)this + 2);
    goto LABEL_13;
  }
  v10 = __error();
  v11 = strerror(*v10);
  *(_DWORD *)buf = 136315138;
  v14 = v11;
  _os_log_error_impl(&dword_1B3CB3000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Failed to get current time. Error: %s\n", buf, 0xCu);
  v3 = *v2;
  v4 = v2;
  if (!*v2)
    goto LABEL_10;
LABEL_4:
  v5 = v3;
  while (1)
  {
    while (1)
    {
      v4 = (_QWORD *)v5;
      v6 = *(_DWORD *)(v5 + 32);
      if (v6 < 1)
        break;
      v5 = *v4;
      v2 = v4;
      if (!*v4)
        goto LABEL_10;
    }
    if ((v6 & 0x80000000) == 0)
      break;
    v5 = v4[1];
    if (!v5)
    {
      v2 = v4 + 1;
      goto LABEL_10;
    }
  }
  v7 = (char *)v4;
LABEL_13:
  *(_OWORD *)(v7 + 40) = v12;
}

void sub_1B3D7F4EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD **v2;

  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(v1, *v2);
  _Unwind_Resume(a1);
}

void sub_1B3D7F508(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(v1, v2);
  _Unwind_Resume(a1);
}

void Timestamp::Timestamp(Timestamp *this, const Timestamp *a2)
{
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  std::map<Timestamp::TimeDomain,timeval>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Timestamp::TimeDomain,timeval>,std::__tree_node<std::__value_type<Timestamp::TimeDomain,timeval>,void *> *,long>>>((uint64_t *)this, *(_QWORD **)a2, (_QWORD *)a2 + 1);
}

{
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  std::map<Timestamp::TimeDomain,timeval>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Timestamp::TimeDomain,timeval>,std::__tree_node<std::__value_type<Timestamp::TimeDomain,timeval>,void *> *,long>>>((uint64_t *)this, *(_QWORD **)a2, (_QWORD *)a2 + 1);
}

void sub_1B3D7F560(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1B3D7F5B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *Timestamp::Timestamp(_QWORD *a1, _OWORD *a2, int a3)
{
  _QWORD *v6;
  char *v7;

  a1[2] = 0;
  a1[1] = 0;
  v6 = a1 + 1;
  *a1 = a1 + 1;
  v7 = (char *)operator new(0x38uLL);
  *((_DWORD *)v7 + 8) = a3;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = v6;
  *v6 = v7;
  *a1 = v7;
  v7[24] = 1;
  a1[2] = 1;
  *(_OWORD *)(v7 + 40) = *a2;
  return a1;
}

{
  _QWORD *v6;
  char *v7;

  a1[2] = 0;
  a1[1] = 0;
  v6 = a1 + 1;
  *a1 = a1 + 1;
  v7 = (char *)operator new(0x38uLL);
  *((_DWORD *)v7 + 8) = a3;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = v6;
  *v6 = v7;
  *a1 = v7;
  v7[24] = 1;
  a1[2] = 1;
  *(_OWORD *)(v7 + 40) = *a2;
  return a1;
}

__n128 Timestamp::set(uint64_t **a1, __n128 *a2, int a3)
{
  char *v6;
  uint64_t **v7;
  char *v8;
  int v9;
  char *v10;
  uint64_t *v11;
  uint64_t *v12;
  __n128 result;

  v7 = a1 + 1;
  v6 = (char *)a1[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v8 = v6;
        v9 = *((_DWORD *)v6 + 8);
        if (v9 <= a3)
          break;
        v6 = *(char **)v8;
        v7 = (uint64_t **)v8;
        if (!*(_QWORD *)v8)
          goto LABEL_8;
      }
      if (v9 >= a3)
        break;
      v6 = (char *)*((_QWORD *)v8 + 1);
      if (!v6)
      {
        v7 = (uint64_t **)(v8 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    v8 = (char *)(a1 + 1);
LABEL_8:
    v10 = v8;
    v8 = (char *)operator new(0x38uLL);
    *((_DWORD *)v8 + 8) = a3;
    *((_QWORD *)v8 + 5) = 0;
    *((_QWORD *)v8 + 6) = 0;
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = v10;
    *v7 = (uint64_t *)v8;
    v11 = (uint64_t *)**a1;
    v12 = (uint64_t *)v8;
    if (v11)
    {
      *a1 = v11;
      v12 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  result = *a2;
  *(__n128 *)(v8 + 40) = *a2;
  return result;
}

_QWORD *Timestamp::Timestamp(_QWORD *a1, uint64_t a2, int a3)
{
  _QWORD *v6;
  _DWORD *v7;

  a1[2] = 0;
  a1[1] = 0;
  v6 = a1 + 1;
  *a1 = a1 + 1;
  v7 = operator new(0x38uLL);
  v7[8] = a3;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = v6;
  *v6 = v7;
  *a1 = v7;
  *((_BYTE *)v7 + 24) = 1;
  a1[2] = 1;
  *((_QWORD *)v7 + 5) = a2;
  *((_QWORD *)v7 + 6) = 0xAAAAAAAAAAAAAAAALL;
  return a1;
}

{
  _QWORD *v6;
  _DWORD *v7;

  a1[2] = 0;
  a1[1] = 0;
  v6 = a1 + 1;
  *a1 = a1 + 1;
  v7 = operator new(0x38uLL);
  v7[8] = a3;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = v6;
  *v6 = v7;
  *a1 = v7;
  *((_BYTE *)v7 + 24) = 1;
  a1[2] = 1;
  *((_QWORD *)v7 + 5) = a2;
  *((_QWORD *)v7 + 6) = 0xAAAAAAAAAAAAAAAALL;
  return a1;
}

uint64_t **Timestamp::Timestamp(uint64_t **a1, char *a2, char a3, int a4)
{
  const char *v5;
  uint64_t **v7;
  int *v8;
  char *v9;
  NSObject *v10;
  const char *v11;
  uint64_t *v12;
  uint64_t **v13;
  int v14;
  char *v15;
  uint64_t *v16;
  uint64_t *v17;
  int *v19;
  char *v20;
  int *v21;
  char *v22;
  unsigned __int128 v23;
  tm v24;
  void *__p[4];
  uint8_t buf[4];
  char *v27;
  uint64_t v28;

  v5 = a2;
  v28 = *MEMORY[0x1E0C80C00];
  a1[1] = 0;
  v7 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  __p[2] = (void *)0x11AAAAAAAAAA0053;
  *(_OWORD *)__p = *(_OWORD *)"%Y-%m-%d-%H-%M-%S";
  if ((a3 & 0x10) != 0)
  {
    HIBYTE(__p[2]) = 19;
    strcpy((char *)__p, "%Y.%m.%d_%H-%M-%S%z");
  }
  *((_QWORD *)&v23 + 1) = 0xAAAAAAAA00000000;
  memset(&v24, 0, sizeof(v24));
  if (a2[23] < 0)
    v5 = *(const char **)a2;
  if (strptime(v5, (const char *)__p, &v24))
  {
    v24.tm_isdst = -1;
    *(_QWORD *)&v23 = mktime(&v24);
    if ((_QWORD)v23 != -1)
      goto LABEL_15;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v19 = __error();
      v20 = strerror(*v19);
      *(_DWORD *)buf = 136315138;
      v27 = v20;
      _os_log_error_impl(&dword_1B3CB3000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Failed to convert to absolute time. Error: %s\n", buf, 0xCu);
      v23 = 0uLL;
      if ((gettimeofday((timeval *)&v23, 0) & 0x80000000) == 0)
        goto LABEL_15;
    }
    else
    {
      v23 = 0uLL;
      if ((gettimeofday((timeval *)&v23, 0) & 0x80000000) == 0)
        goto LABEL_15;
    }
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    v8 = __error();
    v9 = strerror(*v8);
    *(_DWORD *)buf = 136315138;
    v27 = v9;
    v10 = MEMORY[0x1E0C81028];
    v11 = "Failed to get current time after absolute time conversion failed. Error: %s\n";
    goto LABEL_32;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B3CB3000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Failed to convert time from string format\n", buf, 2u);
  }
  v23 = 0uLL;
  if (gettimeofday((timeval *)&v23, 0) < 0 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v21 = __error();
    v22 = strerror(*v21);
    *(_DWORD *)buf = 136315138;
    v27 = v22;
    v10 = MEMORY[0x1E0C81028];
    v11 = "Failed to get current time after conversion failure. Error: %s\n";
LABEL_32:
    _os_log_error_impl(&dword_1B3CB3000, v10, OS_LOG_TYPE_ERROR, v11, buf, 0xCu);
  }
LABEL_15:
  v12 = *v7;
  v13 = v7;
  if (*v7)
  {
    while (1)
    {
      while (1)
      {
        v13 = (uint64_t **)v12;
        v14 = *((_DWORD *)v12 + 8);
        if (v14 <= a4)
          break;
        v12 = *v13;
        v7 = v13;
        if (!*v13)
          goto LABEL_22;
      }
      if (v14 >= a4)
        break;
      v12 = v13[1];
      if (!v12)
      {
        v7 = v13 + 1;
        goto LABEL_22;
      }
    }
    *(_OWORD *)(v13 + 5) = v23;
    if (SHIBYTE(__p[2]) < 0)
      goto LABEL_25;
  }
  else
  {
LABEL_22:
    v15 = (char *)operator new(0x38uLL);
    *((_DWORD *)v15 + 8) = a4;
    *((_QWORD *)v15 + 5) = 0;
    *((_QWORD *)v15 + 6) = 0;
    *(_QWORD *)v15 = 0;
    *((_QWORD *)v15 + 1) = 0;
    *((_QWORD *)v15 + 2) = v13;
    *v7 = (uint64_t *)v15;
    v16 = (uint64_t *)**a1;
    v17 = (uint64_t *)v15;
    if (v16)
    {
      *a1 = v16;
      v17 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v17);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    *(_OWORD *)(v15 + 40) = v23;
    if (SHIBYTE(__p[2]) < 0)
LABEL_25:
      operator delete(__p[0]);
  }
  return a1;
}

void sub_1B3D7FBB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (a24 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(v24, *(_QWORD **)(v24 + 8));
  _Unwind_Resume(a1);
}

uint64_t Timestamp::get(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;

  *a2 = 0;
  a2[1] = 0;
  v5 = *(_QWORD *)(a1 + 8);
  v3 = a1 + 8;
  v4 = v5;
  if (!v5)
    return 0;
  v6 = v3;
  do
  {
    v7 = *(_DWORD *)(v4 + 32);
    v8 = v7 < a3;
    if (v7 >= a3)
      v9 = (uint64_t *)v4;
    else
      v9 = (uint64_t *)(v4 + 8);
    if (!v8)
      v6 = v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 == v3 || *(_DWORD *)(v6 + 32) > a3)
    return 0;
  *(_OWORD *)a2 = *(_OWORD *)(v6 + 40);
  return 1;
}

uint64_t Timestamp::now(timeval *this, timeval *a2)
{
  return gettimeofday(this, 0);
}

uint64_t Timestamp::asString@<X0>(uint64_t a1@<X0>, int a2@<W1>, char a3@<W2>, _BYTE *a4@<X8>)
{
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::ios_base *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t *v23;
  _BYTE *v24;
  time_t v25;
  __int128 v26;
  const char *v27;
  size_t v28;
  uint64_t v29;
  char *v30;
  const std::locale::facet *v31;
  size_t v32;
  uint64_t v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  tm v41;
  time_t v42;
  _QWORD v43[2];
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 __p;
  __int128 v50;
  unint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  std::locale v62;
  char __s[16];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v61 = v7;
  v51 = 0xAAAAAAAAAAAAAAAALL;
  v60 = v7;
  v59 = v7;
  v58 = v7;
  v57 = v7;
  v56 = v7;
  v55 = v7;
  v54 = v7;
  v53 = v7;
  v50 = v7;
  __p = v7;
  v48 = v7;
  v47 = v7;
  v46 = v7;
  v45 = v7;
  v8 = MEMORY[0x1E0DE4FD0];
  v9 = MEMORY[0x1E0DE4FD0] + 104;
  v52 = MEMORY[0x1E0DE4FD0] + 104;
  v10 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v11 = MEMORY[0x1E0DE4FD0] + 64;
  v12 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v13 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  v44 = MEMORY[0x1E0DE4FD0] + 64;
  v43[0] = v12;
  *(_QWORD *)((char *)v43 + *(_QWORD *)(v12 - 24)) = v13;
  v43[1] = 0;
  v14 = (std::ios_base *)((char *)v43 + *(_QWORD *)(v43[0] - 24));
  std::ios_base::init(v14, &v45);
  v14[1].__vftable = 0;
  v14[1].__fmtflags_ = -1;
  v15 = v10[5];
  v44 = v10[4];
  *(uint64_t *)((char *)&v44 + *(_QWORD *)(v44 - 24)) = v15;
  v43[0] = v10[1];
  *(_QWORD *)((char *)v43 + *(_QWORD *)(v43[0] - 24)) = v10[6];
  v52 = v9;
  v43[0] = v8 + 24;
  v44 = v11;
  std::streambuf::basic_streambuf();
  v16 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&v45 = MEMORY[0x1E0DE4FB8] + 16;
  __p = 0u;
  v50 = 0u;
  LODWORD(v51) = 24;
  v19 = *(_QWORD *)(a1 + 8);
  v18 = a1 + 8;
  v17 = v19;
  if (!v19)
    goto LABEL_13;
  v20 = v18;
  do
  {
    v21 = *(_DWORD *)(v17 + 32);
    v22 = v21 < a2;
    if (v21 >= a2)
      v23 = (uint64_t *)v17;
    else
      v23 = (uint64_t *)(v17 + 8);
    if (!v22)
      v20 = v17;
    v17 = *v23;
  }
  while (*v23);
  if (v20 == v18)
  {
LABEL_13:
    v25 = 0;
    v24 = a4;
    if ((a3 & 0x11) != 0)
      goto LABEL_14;
    goto LABEL_22;
  }
  v24 = a4;
  if (*(_DWORD *)(v20 + 32) <= a2)
  {
    v25 = *(_QWORD *)(v20 + 40);
    if ((a3 & 0x11) != 0)
      goto LABEL_14;
LABEL_22:
    std::ostream::operator<<();
    if ((a3 & 4) != 0 || (a3 & 8) != 0)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)".", 1);
      std::ostream::operator<<();
    }
    goto LABEL_25;
  }
  v25 = 0;
  if ((a3 & 0x11) == 0)
    goto LABEL_22;
LABEL_14:
  v41.tm_zone = (char *)0xAAAAAAAAAAAAAAAALL;
  v42 = v25;
  *(_QWORD *)&v26 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v26 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v41.tm_mon = v26;
  *(_OWORD *)&v41.tm_isdst = v26;
  *(_OWORD *)&v41.tm_sec = v26;
  localtime_r(&v42, &v41);
  v65 = 0u;
  v66 = 0u;
  *(_OWORD *)__s = 0u;
  v64 = 0u;
  if ((a3 & 0x10) != 0)
    v27 = "%Y.%m.%d_%H-%M-%S%z";
  else
    v27 = "%Y-%m-%d-%H-%M-%S";
  strftime(__s, 0x40uLL, v27, &v41);
  v28 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)__s, v28);
  if ((a3 & 8) != 0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"-", 1);
    v29 = v44;
    v30 = (char *)&v44 + *(_QWORD *)(v44 - 24);
    if (*((_DWORD *)v30 + 36) == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)&v44 + *(_QWORD *)(v44 - 24)));
      v31 = std::locale::use_facet(&v62, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 32);
      std::locale::~locale(&v62);
      v29 = v44;
    }
    *((_DWORD *)v30 + 36) = 48;
    *(_QWORD *)((char *)&v46 + *(_QWORD *)(v29 - 24)) = 3;
    std::ostream::operator<<();
  }
LABEL_25:
  if ((v51 & 0x10) != 0)
  {
    v33 = *((_QWORD *)&v50 + 1);
    if (*((_QWORD *)&v50 + 1) < (unint64_t)v48)
    {
      *((_QWORD *)&v50 + 1) = v48;
      v33 = v48;
    }
    v34 = (const void *)*((_QWORD *)&v47 + 1);
    v32 = v33 - *((_QWORD *)&v47 + 1);
    if ((unint64_t)(v33 - *((_QWORD *)&v47 + 1)) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_42;
  }
  else
  {
    if ((v51 & 8) == 0)
    {
      v32 = 0;
      v24[23] = 0;
      goto LABEL_38;
    }
    v34 = (const void *)v46;
    v32 = v47 - v46;
    if ((_QWORD)v47 - (_QWORD)v46 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_42:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v32 >= 0x17)
  {
    v35 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v32 | 7) != 0x17)
      v35 = v32 | 7;
    v36 = v35 + 1;
    v37 = operator new(v35 + 1);
    *((_QWORD *)v24 + 1) = v32;
    *((_QWORD *)v24 + 2) = v36 | 0x8000000000000000;
    *(_QWORD *)v24 = v37;
    v24 = v37;
    goto LABEL_37;
  }
  v24[23] = v32;
  if (v32)
LABEL_37:
    memmove(v24, v34, v32);
LABEL_38:
  v24[v32] = 0;
  v43[0] = *MEMORY[0x1E0DE4F50];
  v38 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v43 + *(_QWORD *)(v43[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v44 = v38;
  *(_QWORD *)&v45 = v16 + 16;
  if (SBYTE7(v50) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B5E2F6FC](&v52);
}

void sub_1B3D800F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B3D80104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  std::locale::~locale((std::locale *)(v11 - 184));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B3D80120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B3D80134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::iostream::~basic_iostream();
  MEMORY[0x1B5E2F6FC](a9);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x1E0DE4F50];
  v3 = *MEMORY[0x1E0DE4F50];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1B5E2F6FC](a1 + 128);
  return a1;
}

uint64_t *Timestamp::convert(uint64_t a1)
{
  uint64_t *v1;
  uint64_t **v2;
  uint64_t *v3;
  uint64_t **v4;
  uint64_t **v5;
  int v6;
  uint64_t **v7;
  uint64_t *v8;
  std::string __p;
  uint64_t *v11[3];

  memset(v11, 170, sizeof(v11));
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  Timestamp::Timestamp(v11, (char *)&__p, 9, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v1 = v11[1];
    if (!v11[1])
    {
LABEL_18:
      v8 = 0;
      goto LABEL_19;
    }
  }
  else
  {
    v1 = v11[1];
    if (!v11[1])
      goto LABEL_18;
  }
  v2 = &v11[1];
  v3 = v1;
  do
  {
    v4 = (uint64_t **)v3;
    v5 = v2;
    v6 = *((_DWORD *)v3 + 8);
    if (v6 >= 0)
      v2 = (uint64_t **)v3;
    else
      ++v3;
    v3 = (uint64_t *)*v3;
  }
  while (v3);
  if (v2 == &v11[1])
    goto LABEL_18;
  v7 = v6 >= 0 ? v4 : v5;
  if (*((int *)v7 + 8) > 0)
    goto LABEL_18;
  if (v6 < 0)
    v4 = v5;
  v8 = v4[5];
LABEL_19:
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)v11, v1);
  return v8;
}

void sub_1B3D8031C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<Timestamp::TimeDomain,timeval>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Timestamp::TimeDomain,timeval>,std::__tree_node<std::__value_type<Timestamp::TimeDomain,timeval>,void *> *,long>>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  BOOL v12;
  uint64_t **v13;
  uint64_t **v14;
  int v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = result;
    v6 = result + 1;
    do
    {
      v7 = *((_DWORD *)v4 + 8);
      v8 = (uint64_t *)v5[1];
      v9 = v6;
      if ((uint64_t *)*v5 == v6)
        goto LABEL_10;
      v10 = v5[1];
      v11 = v6;
      if (v8)
      {
        do
        {
          v9 = (uint64_t *)v10;
          v10 = *(_QWORD *)(v10 + 8);
        }
        while (v10);
      }
      else
      {
        do
        {
          v9 = (uint64_t *)v11[2];
          v12 = *v9 == (_QWORD)v11;
          v11 = v9;
        }
        while (v12);
      }
      if (*((_DWORD *)v9 + 8) < v7)
      {
LABEL_10:
        if (v8)
          v13 = (uint64_t **)v9;
        else
          v13 = (uint64_t **)v6;
        if (v8)
          v14 = (uint64_t **)(v9 + 1);
        else
          v14 = (uint64_t **)v6;
        if (*v14)
          goto LABEL_29;
      }
      else
      {
        v14 = (uint64_t **)v6;
        v13 = (uint64_t **)v6;
        if (v8)
        {
          while (1)
          {
            while (1)
            {
              v13 = (uint64_t **)v8;
              v15 = *((_DWORD *)v8 + 8);
              if (v15 <= v7)
                break;
              v8 = *v13;
              v14 = v13;
              if (!*v13)
                goto LABEL_25;
            }
            if (v15 >= v7)
              goto LABEL_29;
            v8 = v13[1];
            if (!v8)
            {
              v14 = v13 + 1;
              break;
            }
          }
        }
      }
LABEL_25:
      v16 = operator new(0x38uLL);
      v17 = v4[6];
      v16[2] = *((_OWORD *)v4 + 2);
      *((_QWORD *)v16 + 6) = v17;
      *(_QWORD *)v16 = 0;
      *((_QWORD *)v16 + 1) = 0;
      *((_QWORD *)v16 + 2) = v13;
      *v14 = (uint64_t *)v16;
      v18 = *(_QWORD *)*v5;
      if (v18)
      {
        *v5 = v18;
        v19 = *v14;
      }
      else
      {
        v19 = (uint64_t *)v16;
      }
      result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[1], v19);
      ++v5[2];
LABEL_29:
      v20 = (_QWORD *)v4[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (_QWORD *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (_QWORD *)v4[2];
          v12 = *v21 == (_QWORD)v4;
          v4 = v21;
        }
        while (!v12);
      }
      v4 = v21;
    }
    while (v21 != a3);
  }
  return result;
}

uint64_t diag::QMICommandDriver::create@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12;
  NSObject *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  std::__shared_weak_count *v20;
  unint64_t v21;
  unint64_t *p_shared_weak_owners;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD v45[2];
  void *aBlock;
  dispatch_object_t object;
  uint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;

  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  v8 = operator new(0xE0uLL);
  v9 = (std::__shared_weak_count *)a1[1];
  v48 = *a1;
  v49 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = *(void **)a2;
  if (*(_QWORD *)a2)
    v12 = _Block_copy(v12);
  v13 = *(NSObject **)(a2 + 8);
  aBlock = v12;
  object = v13;
  if (v13)
    dispatch_retain(v13);
  v14 = *a3;
  v15 = (std::__shared_weak_count *)a3[1];
  v45[0] = v14;
  v45[1] = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  diag::QMICommandDriver::QMICommandDriver((uint64_t)v8, (uint64_t)&v48, (uint64_t)&aBlock, (uint64_t)v45);
  *a4 = v8;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  v18 = (std::__shared_weak_count *)operator new(0x20uLL);
  v18->__shared_owners_ = 0;
  v19 = (unint64_t *)&v18->__shared_owners_;
  v18->__vftable = (std::__shared_weak_count_vtbl *)off_1E66E0E48;
  v18->__shared_weak_owners_ = 0;
  v18[1].__vftable = (std::__shared_weak_count_vtbl *)v8;
  a4[1] = v18;
  v20 = (std::__shared_weak_count *)*((_QWORD *)v8 + 10);
  if (v20)
  {
    if (v20->__shared_owners_ != -1)
      goto LABEL_23;
    do
      v21 = __ldxr(v19);
    while (__stxr(v21 + 1, v19));
    p_shared_weak_owners = (unint64_t *)&v18->__shared_weak_owners_;
    do
      v23 = __ldxr(p_shared_weak_owners);
    while (__stxr(v23 + 1, p_shared_weak_owners));
    *((_QWORD *)v8 + 9) = v8;
    *((_QWORD *)v8 + 10) = v18;
    std::__shared_weak_count::__release_weak(v20);
  }
  else
  {
    do
      v24 = __ldxr(v19);
    while (__stxr(v24 + 1, v19));
    v25 = (unint64_t *)&v18->__shared_weak_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
    *((_QWORD *)v8 + 9) = v8;
    *((_QWORD *)v8 + 10) = v18;
  }
  do
    v27 = __ldaxr(v19);
  while (__stlxr(v27 - 1, v19));
  if (v27)
  {
LABEL_23:
    v28 = (_QWORD *)*a4;
    if (!*(_QWORD *)(*a4 + 56))
      goto LABEL_37;
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  v28 = (_QWORD *)*a4;
  if (!*(_QWORD *)(*a4 + 56))
    goto LABEL_37;
LABEL_24:
  v29 = (std::__shared_weak_count *)v28[10];
  if (!v29 || (v30 = v28[9], (v31 = std::__shared_weak_count::lock(v29)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v32 = v31;
  v52 = v30;
  v53 = v31;
  ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v28 + 1));
  v50 = v30;
  v51 = v32;
  v52 = 0;
  v53 = 0;
  ctu::TrackedLogger::registerLoggerToServer();
  v33 = v51;
  if (v51)
  {
    v34 = (unint64_t *)&v51->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = v53;
  if (v53)
  {
    v37 = (unint64_t *)&v53->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
LABEL_37:
  if (v15)
  {
    v39 = (unint64_t *)&v15->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  v41 = v49;
  if (v49)
  {
    v42 = (unint64_t *)&v49->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a4 + 64))(*a4);
}

void sub_1B3D807C0()
{
  __break(1u);
}

void sub_1B3D80820()
{
  __cxa_end_catch();
  JUMPOUT(0x1B3D80848);
}

void sub_1B3D80830()
{
  JUMPOUT(0x1B3D8084CLL);
}

uint64_t diag::QMICommandDriver::QMICommandDriver(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  NSObject *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v20;
  void *aBlock;
  NSObject *object;
  std::__shared_weak_count *v23;

  v7 = *(std::__shared_weak_count **)(a2 + 8);
  v23 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = *(void **)a3;
  if (*(_QWORD *)a3)
    v10 = _Block_copy(v10);
  v11 = *(NSObject **)(a3 + 8);
  aBlock = v10;
  object = v11;
  if (v11)
    dispatch_retain(v11);
  v12 = *(std::__shared_weak_count **)(a4 + 8);
  v20 = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  diag::CommandDriver::CommandDriver();
  if (v20)
  {
    v15 = (unint64_t *)&v20->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (v23)
  {
    v17 = (unint64_t *)&v23->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  *(_QWORD *)a1 = off_1E66E0370;
  *(int32x2_t *)(a1 + 160) = vdup_n_s32(0x61A8u);
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = dispatch_group_create();
  *(_QWORD *)(a1 + 216) = 0;
  return a1;
}

void sub_1B3D809E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  dispatch::callback<void({block_pointer})(diag::CommandDriver::Event,dispatch::group_session)>::~callback((uint64_t)&a11);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void diag::QMICommandDriver::~QMICommandDriver(diag::QMICommandDriver *this)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  NSObject *v10;
  const void *v11;
  NSObject *v12;
  NSObject *v13;
  std::__shared_weak_count *v14;
  uint8_t v15[16];

  *(_QWORD *)this = off_1E66E0370;
  v2 = *((_QWORD *)this + 21);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 21));
    *((_QWORD *)this + 21) = 0;
  }
  v3 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_1B3CB3000, v3, OS_LOG_TYPE_DEFAULT, "#I Gone!", v15, 2u);
  }
  v4 = *((_QWORD *)this + 27);
  if (v4)
  {
    dispatch_group_leave(v4);
    v5 = *((_QWORD *)this + 27);
    if (v5)
      dispatch_release(v5);
  }
  v6 = *((_QWORD *)this + 26);
  if (v6)
    dispatch_release(v6);
  qmi::Client::~Client((diag::QMICommandDriver *)((char *)this + 176));
  *(_QWORD *)this = off_1E66E0DB0;
  if (*((char *)this + 159) < 0)
    operator delete(*((void **)this + 17));
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = *((_QWORD *)this + 14);
  if (v10)
    dispatch_release(v10);
  v11 = (const void *)*((_QWORD *)this + 13);
  if (v11)
    _Block_release(v11);
  *(_QWORD *)this = off_1E66E0E08;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v12 = *((_QWORD *)this + 12);
  if (v12)
    dispatch_release(v12);
  v13 = *((_QWORD *)this + 11);
  if (v13)
    dispatch_release(v13);
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
}

{
  void *v1;

  diag::QMICommandDriver::~QMICommandDriver(this);
  operator delete(v1);
}

void diag::QMICommandDriver::stopTimer_sync(diag::QMICommandDriver *this)
{
  NSObject *v2;

  v2 = *((_QWORD *)this + 21);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 21));
    *((_QWORD *)this + 21) = 0;
  }
}

void diag::QMICommandDriver::init(diag::QMICommandDriver *this)
{
  std::__shared_weak_count *v3;
  char *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  NSObject *v14;
  std::__shared_weak_count *v15;
  _QWORD v16[6];
  std::__shared_weak_count *v17;
  _QWORD *v18;
  _QWORD block[6];

  v5 = *((_QWORD *)this + 9);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  v4 = (char *)this + 72;
  if (!v3 || (v6 = std::__shared_weak_count::lock(v3)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v12 = MEMORY[0x1E0C809B0];
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 1174405120;
  v16[2] = ___ZN4diag16QMICommandDriver4initEv_block_invoke;
  v16[3] = &__block_descriptor_tmp_16_3;
  v16[4] = this;
  v16[5] = v5;
  v17 = v7;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  v18 = v16;
  block[0] = v12;
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN4diag13CommandDriverEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  block[3] = &__block_descriptor_tmp_91_3;
  block[4] = v4;
  block[5] = &v18;
  v14 = *((_QWORD *)this + 11);
  if (!*((_QWORD *)this + 12))
  {
    dispatch_sync(v14, block);
    v15 = v17;
    if (!v17)
      goto LABEL_14;
    goto LABEL_13;
  }
  dispatch_async_and_wait(v14, block);
  v15 = v17;
  if (v17)
LABEL_13:
    std::__shared_weak_count::__release_weak(v15);
LABEL_14:
  std::__shared_weak_count::__release_weak(v7);
}

void ___ZN4diag16QMICommandDriver4initEv_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  const char *Name;
  size_t v4;
  void *v5;
  void **v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  void *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  void *v47;
  unint64_t *v48;
  unint64_t v49;
  unsigned int v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  void *v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  NSObject *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD aBlock[6];
  std::__shared_weak_count *v77;
  void *v78[7];
  std::__shared_weak_count *v79;
  void *v80;
  uint64_t v81;
  void (*v82)(uint64_t);
  void *v83;
  uint64_t v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  void *v87;
  uint64_t v88;
  void (*v89)(_QWORD *, NSObject *);
  void *v90;
  uint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  void *v94;
  uint64_t v95;
  void (*v96)(_QWORD *);
  void *v97;
  uint64_t v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(_QWORD *);
  void *v104;
  uint64_t v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  void *v112[2];
  char v113;
  dispatch_object_t v114;
  void *__dst[2];
  unint64_t v116;
  uint8_t buf[8];
  std::__shared_weak_count *v118;
  __int128 v119;
  unint64_t v120;
  std::__shared_weak_count *v121;

  v2 = a1[4];
  v120 = 0xAAAAAAAAAAAAAAAALL;
  v121 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  Registry::getServerConnection(*(Registry **)(v2 + 120));
  Name = (const char *)diag::CommandDriver::getName((diag::CommandDriver *)v2);
  v4 = strlen(Name);
  if (v4 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = (void *)v4;
  if (v4 >= 0x17)
  {
    v74 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v74 = v4 | 7;
    v75 = v74 + 1;
    v6 = (void **)operator new(v74 + 1);
    __dst[1] = v5;
    v116 = v75 | 0x8000000000000000;
    __dst[0] = v6;
LABEL_108:
    memmove(v6, Name, (size_t)v5);
    *((_BYTE *)v5 + (_QWORD)v6) = 0;
    v7 = *(NSObject **)(v2 + 88);
    v114 = v7;
    if (!v7)
      goto LABEL_6;
    goto LABEL_5;
  }
  HIBYTE(v116) = v4;
  v6 = __dst;
  if (v4)
    goto LABEL_108;
  LOBYTE(__dst[0]) = 0;
  v7 = *(NSObject **)(v2 + 88);
  v114 = v7;
  if (v7)
LABEL_5:
    dispatch_retain(v7);
LABEL_6:
  v113 = 4;
  strcpy((char *)v112, "diag");
  v8 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v8 || (v9 = *(_QWORD *)(v2 + 72), (v10 = std::__shared_weak_count::lock(v8)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v11 = v10;
  p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (v15)
  {
    v110 = 0;
    v111 = 0;
    v16 = std::__shared_weak_count::lock(v10);
    if (v16)
      goto LABEL_14;
LABEL_111:
    v110 = 0;
    v111 = v16;
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v11);
  v110 = 0;
  v111 = 0;
  v16 = std::__shared_weak_count::lock(v11);
  if (!v16)
    goto LABEL_111;
LABEL_14:
  v17 = (unint64_t *)&v16->__shared_weak_owners_;
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
  v110 = v9;
  v111 = v16;
LABEL_17:
  std::__shared_weak_count::__release_weak(v11);
  if (v16)
  {
    v19 = (unint64_t *)&v16->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v108 = v120;
  v109 = v121;
  if (v121)
  {
    v21 = (unint64_t *)&v121->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  qmi::Client::createWithQueueLocal();
  v23 = v119;
  v119 = 0uLL;
  v24 = *(std::__shared_weak_count **)(v2 + 200);
  *(_OWORD *)(v2 + 192) = v23;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  qmi::Client::~Client((qmi::Client *)buf);
  if (v109)
  {
    v27 = &v109->__shared_owners_;
    do
      v28 = __ldaxr((unint64_t *)v27);
    while (__stlxr(v28 - 1, (unint64_t *)v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  if (v111)
    std::__shared_weak_count::__release_weak(v111);
  if (v113 < 0)
    operator delete(v112[0]);
  if (v114)
    dispatch_release(v114);
  if (SHIBYTE(v116) < 0)
    operator delete(__dst[0]);
  v103 = ___ZN4diag16QMICommandDriver4initEv_block_invoke_2;
  v104 = &__block_descriptor_tmp_14;
  v30 = a1[5];
  v29 = (std::__shared_weak_count *)a1[6];
  v105 = v2;
  v106 = v30;
  v31 = (void *)MEMORY[0x1E0C809B0];
  v101 = MEMORY[0x1E0C809B0];
  v102 = 1174405120;
  v107 = v29;
  if (v29)
  {
    v32 = (unint64_t *)&v29->__shared_weak_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  qmi::Client::setHandler();
  v94 = v31;
  v95 = 1174405120;
  v96 = ___ZN4diag16QMICommandDriver4initEv_block_invoke_3;
  v97 = &__block_descriptor_tmp_4_2;
  v35 = a1[5];
  v34 = (std::__shared_weak_count *)a1[6];
  v98 = v2;
  v99 = v35;
  v100 = v34;
  if (v34)
  {
    v36 = (unint64_t *)&v34->__shared_weak_owners_;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  qmi::Client::setHandler();
  v87 = v31;
  v88 = 1174405120;
  v89 = ___ZN4diag16QMICommandDriver4initEv_block_invoke_5;
  v90 = &__block_descriptor_tmp_7_5;
  v39 = a1[5];
  v38 = (std::__shared_weak_count *)a1[6];
  v91 = v2;
  v92 = v39;
  v93 = v38;
  if (v38)
  {
    v40 = (unint64_t *)&v38->__shared_weak_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  qmi::Client::setHandler();
  v80 = v31;
  v81 = 1174405120;
  v82 = ___ZN4diag16QMICommandDriver4initEv_block_invoke_8;
  v83 = &__block_descriptor_tmp_9_7;
  v43 = a1[5];
  v42 = (std::__shared_weak_count *)a1[6];
  v84 = v2;
  v85 = v43;
  v86 = v42;
  if (v42)
  {
    v44 = (unint64_t *)&v42->__shared_weak_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  qmi::Client::setHandler();
  v78[1] = v31;
  v78[2] = (void *)1174405120;
  v78[3] = ___ZN4diag16QMICommandDriver4initEv_block_invoke_10;
  v78[4] = &__block_descriptor_tmp_12_7;
  v47 = (void *)a1[5];
  v46 = (std::__shared_weak_count *)a1[6];
  v78[5] = (void *)v2;
  v78[6] = v47;
  v79 = v46;
  if (v46)
  {
    v48 = (unint64_t *)&v46->__shared_weak_owners_;
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
  }
  qmi::Client::setHandler();
  v50 = *(_DWORD *)(v2 + 160);
  aBlock[0] = v31;
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4diag16QMICommandDriver4initEv_block_invoke_13;
  aBlock[3] = &__block_descriptor_tmp_15_3;
  v52 = a1[5];
  v51 = (std::__shared_weak_count *)a1[6];
  aBlock[4] = v2;
  aBlock[5] = v52;
  v77 = v51;
  if (v51)
  {
    v53 = (unint64_t *)&v51->__shared_weak_owners_;
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
  }
  v55 = _Block_copy(aBlock);
  v78[0] = v55;
  diag::QMICommandDriver::startTimer_sync(v2, v50, v78);
  if (v55)
    _Block_release(v55);
  v56 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v56 || (v57 = *(_QWORD *)(v2 + 72), (v58 = std::__shared_weak_count::lock(v56)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v59 = v58;
  v60 = (unint64_t *)&v58->__shared_weak_owners_;
  do
    v61 = __ldxr(v60);
  while (__stxr(v61 + 1, v60));
  v62 = (unint64_t *)&v58->__shared_owners_;
  do
    v63 = __ldaxr(v62);
  while (__stlxr(v63 - 1, v62));
  if (!v63)
  {
    ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
    std::__shared_weak_count::__release_weak(v59);
    *(_QWORD *)buf = 0;
    v118 = 0;
    v64 = std::__shared_weak_count::lock(v59);
    if (v64)
      goto LABEL_71;
LABEL_103:
    v67 = v118;
    *(_QWORD *)buf = 0;
    v118 = v64;
    if (!v67)
      goto LABEL_75;
    goto LABEL_74;
  }
  *(_QWORD *)buf = 0;
  v118 = 0;
  v64 = std::__shared_weak_count::lock(v58);
  if (!v64)
    goto LABEL_103;
LABEL_71:
  v65 = (unint64_t *)&v64->__shared_weak_owners_;
  do
    v66 = __ldxr(v65);
  while (__stxr(v66 + 1, v65));
  v67 = v118;
  *(_QWORD *)buf = v57;
  v118 = v64;
  if (v67)
LABEL_74:
    std::__shared_weak_count::__release_weak(v67);
LABEL_75:
  std::__shared_weak_count::__release_weak(v59);
  if (v64)
  {
    v68 = (unint64_t *)&v64->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  qmi::Client::setClientHandle();
  if (v118)
    std::__shared_weak_count::__release_weak(v118);
  qmi::Client::start((qmi::Client *)(v2 + 176));
  v70 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B3CB3000, v70, OS_LOG_TYPE_DEFAULT, "#I Starting", buf, 2u);
  }
  if (v77)
    std::__shared_weak_count::__release_weak(v77);
  if (v79)
    std::__shared_weak_count::__release_weak(v79);
  if (v86)
    std::__shared_weak_count::__release_weak(v86);
  if (v93)
    std::__shared_weak_count::__release_weak(v93);
  if (v100)
    std::__shared_weak_count::__release_weak(v100);
  if (v107)
    std::__shared_weak_count::__release_weak(v107);
  v71 = v121;
  if (v121)
  {
    v72 = (unint64_t *)&v121->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
}

void sub_1B3D81668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,std::__shared_weak_count *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,std::__shared_weak_count *a52)
{
  uint64_t v52;
  std::__shared_weak_count *v54;
  NSObject *v55;

  v54 = *(std::__shared_weak_count **)(v52 - 232);
  if (v54)
  {
    std::__shared_weak_count::__release_weak(v54);
    if ((*(char *)(v52 - 161) & 0x80000000) == 0)
    {
LABEL_3:
      v55 = *(NSObject **)(v52 - 224);
      if (!v55)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v52 - 161) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v52 - 184));
  v55 = *(NSObject **)(v52 - 224);
  if (!v55)
  {
LABEL_8:
    if (*(char *)(v52 - 129) < 0)
    {
      operator delete(*(void **)(v52 - 152));
      std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v52 - 96);
      _Unwind_Resume(a1);
    }
    std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v52 - 96);
    _Unwind_Resume(a1);
  }
LABEL_7:
  dispatch_release(v55);
  goto LABEL_8;
}

void ___ZN4diag16QMICommandDriver4initEv_block_invoke_2(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        v6 = *(NSObject **)(v3 + 216);
        *(_QWORD *)(v3 + 216) = 0;
        if (v6)
        {
          dispatch_group_leave(v6);
          dispatch_release(v6);
        }
        v7 = *(NSObject **)(v3 + 168);
        if (v7)
        {
          dispatch_source_cancel(v7);
          dispatch_release(*(dispatch_object_t *)(v3 + 168));
          *(_QWORD *)(v3 + 168) = 0;
        }
        diag::CommandDriver::notifyOfEvent_sync();
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1B3D81960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_group_t group, char a11)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrIN4diag13CommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrIN4diag13CommandDriverEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN4diag16QMICommandDriver4initEv_block_invoke_3(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        v6 = *(NSObject **)(v3 + 168);
        if (v6)
        {
          dispatch_source_cancel(v6);
          dispatch_release(*(dispatch_object_t *)(v3 + 168));
          *(_QWORD *)(v3 + 168) = 0;
        }
        diag::CommandDriver::notifyOfEvent_sync();
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1B3D81A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_group_t group, char a11)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ___ZN4diag16QMICommandDriver4initEv_block_invoke_5(_QWORD *a1, NSObject *a2)
{
  std::__shared_weak_count *v3;
  diag::QMICommandDriver *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = (diag::QMICommandDriver *)a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        if (a2)
        {
          dispatch_retain(a2);
          dispatch_retain(a2);
          dispatch_group_enter(a2);
        }
        v8 = *((_QWORD *)v5 + 27);
        *((_QWORD *)v5 + 27) = a2;
        if (v8)
        {
          dispatch_group_leave(v8);
          dispatch_release(v8);
        }
        diag::QMICommandDriver::onLowPower_sync(v5);
        if (a2)
          dispatch_release(a2);
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1B3D81BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  NSObject *v9;

  if (v9)
    dispatch_release(v9);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void diag::QMICommandDriver::onLowPower_sync(diag::QMICommandDriver *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  unint64_t v17;
  _QWORD block[6];
  std::__shared_weak_count *v19;
  _QWORD aBlock[6];
  std::__shared_weak_count *v21;
  void *v22;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = *((_QWORD *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v10 = *((_DWORD *)this + 41);
  v11 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4diag16QMICommandDriver15onLowPower_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_18_8;
  aBlock[4] = this;
  aBlock[5] = v3;
  v21 = v5;
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  v13 = _Block_copy(aBlock);
  v22 = v13;
  diag::QMICommandDriver::startTimer_sync((uint64_t)this, v10, &v22);
  if (v13)
    _Block_release(v13);
  v14 = *((_QWORD *)this + 26);
  if (v14)
  {
    dispatch_retain(*((dispatch_object_t *)this + 26));
    dispatch_group_enter(v14);
    v15 = *((_QWORD *)this + 26);
  }
  else
  {
    v15 = 0;
  }
  v16 = *((_QWORD *)this + 11);
  block[0] = v11;
  block[1] = 1174405120;
  block[2] = ___ZN4diag16QMICommandDriver15onLowPower_syncEv_block_invoke_19;
  block[3] = &__block_descriptor_tmp_20_6;
  block[4] = this;
  block[5] = v3;
  v19 = v5;
  do
    v17 = __ldxr(p_shared_weak_owners);
  while (__stxr(v17 + 1, p_shared_weak_owners));
  dispatch_group_notify(v15, v16, block);
  if (v14)
  {
    dispatch_retain(v14);
    dispatch_group_enter(v14);
  }
  diag::CommandDriver::notifyOfEvent_sync();
  if (v14)
  {
    dispatch_group_leave(v14);
    dispatch_release(v14);
  }
  if (v19)
    std::__shared_weak_count::__release_weak(v19);
  if (v14)
  {
    dispatch_group_leave(v14);
    dispatch_release(v14);
  }
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1B3D81DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_group_t group, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23)
{
  std::__shared_weak_count *v23;
  NSObject *v24;

  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  if (v24)
  {
    dispatch_group_leave(v24);
    dispatch_release(v24);
  }
  if (a23)
    std::__shared_weak_count::__release_weak(a23);
  std::__shared_weak_count::__release_weak(v23);
  _Unwind_Resume(a1);
}

void ___ZN4diag16QMICommandDriver4initEv_block_invoke_8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (*(_QWORD *)(a1 + 40))
        diag::CommandDriver::notifyOfEvent_sync();
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1B3D81EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_group_t group, char a11)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ___ZN4diag16QMICommandDriver4initEv_block_invoke_10(_QWORD *a1, xpc_object_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;
  size_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  void *__p[4];
  std::__shared_weak_count *v20;
  uint8_t buf[4];
  void **v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v20 = v6;
    if (v6)
    {
      if (!a1[5])
      {
        v8 = v6;
LABEL_10:
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        return;
      }
      __p[3] = 0;
      diag::CommandDriver::notifyOfEvent_sync();
      if (a2)
      {
        xpc_retain(a2);
        v7 = *(NSObject **)(v5 + 40);
        if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
          goto LABEL_9;
      }
      else
      {
        a2 = xpc_null_create();
        v7 = *(NSObject **)(v5 + 40);
        if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
          goto LABEL_9;
      }
      v11 = (char *)MEMORY[0x1B5E2FB34](a2);
      memset(__p, 170, 24);
      v12 = strlen(v11);
      if (v12 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v13 = (void *)v12;
      if (v12 >= 0x17)
      {
        v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v15 = v12 | 7;
        v16 = v15 + 1;
        v14 = operator new(v15 + 1);
        __p[1] = v13;
        __p[2] = (void *)(v16 | 0x8000000000000000);
        __p[0] = v14;
      }
      else
      {
        HIBYTE(__p[2]) = v12;
        v14 = __p;
        if (!v12)
          goto LABEL_23;
      }
      memcpy(v14, v11, (size_t)v13);
LABEL_23:
      *((_BYTE *)v13 + (_QWORD)v14) = 0;
      free(v11);
      v17 = __p;
      if (SHIBYTE(__p[2]) < 0)
        v17 = (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      v22 = v17;
      _os_log_error_impl(&dword_1B3CB3000, v7, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
LABEL_9:
      xpc_release(a2);
      v8 = v20;
      if (!v20)
        return;
      goto LABEL_10;
    }
  }
}

void sub_1B3D82158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, dispatch_group_t group, char a13)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void diag::QMICommandDriver::startTimer_sync(uint64_t a1, unsigned int a2, void **a3)
{
  NSObject *v6;
  dispatch_source_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  NSObject *v16;
  unint64_t v17;
  void *v18;
  NSObject *v19;
  dispatch_time_t v20;
  NSObject *v21;
  void *v22;
  _QWORD handler[5];
  std::__shared_weak_count *v24;
  void *aBlock;
  uint8_t buf[4];
  unsigned int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v6 = *(NSObject **)(a1 + 168);
  if (v6)
  {
    dispatch_source_cancel(v6);
    dispatch_release(*(dispatch_object_t *)(a1 + 168));
    *(_QWORD *)(a1 + 168) = 0;
  }
  v7 = dispatch_source_create(MEMORY[0x1E0C80DD0], 1uLL, 0, *(dispatch_queue_t *)(a1 + 88));
  *(_QWORD *)(a1 + 168) = v7;
  if (v7)
  {
    v8 = *(std::__shared_weak_count **)(a1 + 80);
    if (!v8 || (v9 = *(_QWORD *)(a1 + 72), (v10 = std::__shared_weak_count::lock(v8)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v11 = v10;
    p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    v16 = *(NSObject **)(a1 + 168);
    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 1174405120;
    handler[2] = ___ZN4diag16QMICommandDriver15startTimer_syncEjN8dispatch5blockIU13block_pointerFvvEEE_block_invoke;
    handler[3] = &__block_descriptor_tmp_17_3;
    handler[4] = v9;
    v24 = v11;
    do
      v17 = __ldxr(p_shared_weak_owners);
    while (__stxr(v17 + 1, p_shared_weak_owners));
    v18 = *a3;
    if (*a3)
      v18 = _Block_copy(v18);
    aBlock = v18;
    dispatch_source_set_event_handler(v16, handler);
    v19 = *(NSObject **)(a1 + 168);
    v20 = dispatch_time(0, 1000000 * a2);
    dispatch_source_set_timer(v19, v20, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
    dispatch_activate(*(dispatch_object_t *)(a1 + 168));
    v21 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      v27 = a2;
      _os_log_debug_impl(&dword_1B3CB3000, v21, OS_LOG_TYPE_DEBUG, "#D Timeout set to %ums", buf, 8u);
      v22 = aBlock;
      if (!aBlock)
        goto LABEL_19;
    }
    else
    {
      v22 = aBlock;
      if (!aBlock)
      {
LABEL_19:
        if (v24)
          std::__shared_weak_count::__release_weak(v24);
        std::__shared_weak_count::__release_weak(v11);
        return;
      }
    }
    _Block_release(v22);
    goto LABEL_19;
  }
}

void sub_1B3D823CC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void ___ZN4diag16QMICommandDriver4initEv_block_invoke_13(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  NSObject **v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p[2];
  char v9;
  dispatch_group_t group;
  std::__shared_weak_count *v12;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (NSObject **)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    v12 = v4;
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        group = 0;
        diag::CommandDriver::notifyOfEvent_sync();
        v9 = 13;
        strcpy((char *)__p, "Start Timeout");
        diag::QMICommandDriver::onError_sync(v3, (uint64_t *)__p);
        if (v9 < 0)
          operator delete(__p[0]);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1B3D824E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, dispatch_group_t group, char a16)
{
  if (a14 < 0)
  {
    operator delete(__p);
    std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void diag::QMICommandDriver::onError_sync(NSObject **a1, uint64_t *a2)
{
  NSObject *v4;
  NSObject *v5;
  char v6;
  NSObject *v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = a1[27];
  a1[27] = 0;
  if (v4)
  {
    dispatch_group_leave(v4);
    dispatch_release(v4);
  }
  v5 = a1[21];
  if (v5)
  {
    dispatch_source_cancel(v5);
    dispatch_release(a1[21]);
    a1[21] = 0;
  }
  qmi::Client::stop((qmi::Client *)(a1 + 22));
  v6 = *((_BYTE *)a2 + 23);
  if (v6 < 0)
  {
    if (!a2[1])
      return;
  }
  else if (!*((_BYTE *)a2 + 23))
  {
    return;
  }
  v7 = a1[5];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    if (v6 < 0)
      a2 = (uint64_t *)*a2;
    v8 = 136315138;
    v9 = a2;
    _os_log_error_impl(&dword_1B3CB3000, v7, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v8, 0xCu);
  }
}

void ___ZN4diag16QMICommandDriver15startTimer_syncEjN8dispatch5blockIU13block_pointerFvvEEE_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[4])
        (*(void (**)(void))(a1[6] + 16))();
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1B3D826E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c45_ZTSNSt3__18weak_ptrIN4diag13CommandDriverEEE48c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void *result;

  v3 = a2[5];
  a1[4] = a2[4];
  a1[5] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = (void *)a2[6];
  if (result)
    result = _Block_copy(result);
  a1[6] = result;
  return result;
}

void __destroy_helper_block_e8_32c45_ZTSNSt3__18weak_ptrIN4diag13CommandDriverEEE48c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;

  v2 = *(const void **)(a1 + 48);
  if (v2)
    _Block_release(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void ___ZN4diag16QMICommandDriver15onLowPower_syncEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  NSObject **v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint8_t v11[8];
  dispatch_group_t group;
  std::__shared_weak_count *v14;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (NSObject **)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    v14 = v4;
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        v6 = v3[21];
        if (v6)
        {
          dispatch_source_cancel(v6);
          dispatch_release(v3[21]);
          v3[21] = 0;
        }
        v7 = v3[27];
        if (v7)
        {
          v3[27] = 0;
          dispatch_group_leave(v7);
          dispatch_release(v7);
          group = 0;
          diag::CommandDriver::notifyOfEvent_sync();
          v8 = v3[5];
          if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)v11 = 0;
            _os_log_error_impl(&dword_1B3CB3000, v8, OS_LOG_TYPE_ERROR, "LowPower Timeout", v11, 2u);
          }
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1B3D828BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_group_t group, char a11)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ___ZN4diag16QMICommandDriver15onLowPower_syncEv_block_invoke_19(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  NSObject **v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint8_t v11[16];

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (NSObject **)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        v6 = v3[21];
        if (v6)
        {
          dispatch_source_cancel(v6);
          dispatch_release(v3[21]);
          v3[21] = 0;
        }
        v7 = v3[27];
        if (v7)
        {
          v3[27] = 0;
          dispatch_group_leave(v7);
          dispatch_release(v7);
          v8 = v3[5];
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)v11 = 0;
            _os_log_impl(&dword_1B3CB3000, v8, OS_LOG_TYPE_DEFAULT, "#I LowPower Complete", v11, 2u);
          }
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void diag::QMICommandDriver::setInterface_sync(uint64_t a1, int a2, void **a3)
{
  int v5;
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  const void **v10;
  _DWORD *v11;
  _BYTE *v12;
  _BYTE *v13;
  _DWORD *v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  _QWORD *v22;
  char *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_weak_owners;
  unint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  void *v33;
  void *v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  _OWORD *v38;
  char *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  _QWORD v44[6];
  std::__shared_weak_count *v45;
  void *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  void *v52;
  _QWORD v53[2];
  uint64_t (*v54)(uint64_t, _DWORD *);
  void *v55;
  int v56;
  __int128 v57;
  __int128 v58;
  _QWORD aBlock[7];

  if ((a2 - 1) > 3)
    v5 = 3;
  else
    v5 = dword_1B3DD2B00[a2 - 1];
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v57 = v6;
  v58 = v6;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v57);
  v7 = MEMORY[0x1E0C809B0];
  v53[0] = MEMORY[0x1E0C809B0];
  v53[1] = 0x40000000;
  v54 = ___ZN4diag16QMICommandDriver17setInterface_syncEN12capabilities4diag10InterfacesEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
  v55 = &__block_descriptor_tmp_22_3;
  v56 = v5;
  v8 = (char *)*((_QWORD *)&v57 + 1);
  v9 = (char *)v58;
  v10 = (const void **)*((_QWORD *)&v57 + 1);
  if (*((_QWORD *)&v57 + 1) != (_QWORD)v58)
  {
    v10 = (const void **)*((_QWORD *)&v57 + 1);
    while (*((_BYTE *)*v10 + 8) != 1)
    {
      if (++v10 == (const void **)v58)
        goto LABEL_12;
    }
  }
  if (v10 == (const void **)v58)
  {
LABEL_12:
    v12 = operator new(0x10uLL);
    v13 = v12;
    v12[8] = 1;
    *(_QWORD *)v12 = off_1E66E0ED0;
    *((_DWORD *)v12 + 3) = 0;
    v14 = v12 + 12;
    if ((unint64_t)v9 < *((_QWORD *)&v58 + 1))
    {
      *(_QWORD *)v9 = v12;
      v15 = (uint64_t)(v9 + 8);
LABEL_25:
      *(_QWORD *)&v58 = v15;
      v54((uint64_t)v53, v14);
      goto LABEL_26;
    }
    v16 = v9 - v8;
    v17 = (v9 - v8) >> 3;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v19 = *((_QWORD *)&v58 + 1) - (_QWORD)v8;
    if ((uint64_t)(*((_QWORD *)&v58 + 1) - (_QWORD)v8) >> 2 > v18)
      v18 = v19 >> 2;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
      v20 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v21 = operator new(8 * v20);
      v22 = &v21[8 * v17];
      v23 = &v21[8 * v20];
      *v22 = v13;
      v15 = (uint64_t)(v22 + 1);
      if (v8 == v9)
      {
LABEL_23:
        *((_QWORD *)&v57 + 1) = v22;
        *(_QWORD *)&v58 = v15;
        *((_QWORD *)&v58 + 1) = v23;
        if (!v8)
          goto LABEL_25;
LABEL_24:
        operator delete(v8);
        goto LABEL_25;
      }
    }
    else
    {
      v21 = 0;
      v22 = (_QWORD *)(8 * v17);
      v23 = 0;
      *(_QWORD *)(8 * v17) = v13;
      v15 = 8 * v17 + 8;
      if (v8 == v9)
        goto LABEL_23;
    }
    if ((unint64_t)(v16 - 8) < 0x58)
      goto LABEL_62;
    if ((unint64_t)(v8 - v21) < 0x20)
      goto LABEL_62;
    v35 = ((unint64_t)(v16 - 8) >> 3) + 1;
    v36 = 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
    v37 = &v9[-v36];
    v22 = (_QWORD *)((char *)v22 - v36);
    v38 = &v21[8 * v17 - 16];
    v39 = v9 - 16;
    v40 = v35 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v41 = *(_OWORD *)v39;
      *(v38 - 1) = *((_OWORD *)v39 - 1);
      *v38 = v41;
      v38 -= 2;
      v39 -= 32;
      v40 -= 4;
    }
    while (v40);
    v9 = v37;
    if (v35 != (v35 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_62:
      do
      {
        v42 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        *--v22 = v42;
      }
      while (v9 != v8);
    }
    v8 = (char *)*((_QWORD *)&v57 + 1);
    *((_QWORD *)&v57 + 1) = v22;
    *(_QWORD *)&v58 = v15;
    *((_QWORD *)&v58 + 1) = v23;
    if (!v8)
      goto LABEL_25;
    goto LABEL_24;
  }
  if (!v11)
    __cxa_bad_cast();
  ___ZN4diag16QMICommandDriver17setInterface_syncEN12capabilities4diag10InterfacesEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke((uint64_t)v53, v11 + 3);
LABEL_26:
  v24 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v24 || (v25 = *(_QWORD *)(a1 + 72), (v26 = std::__shared_weak_count::lock(v24)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v27 = v26;
  p_shared_weak_owners = (unint64_t *)&v26->__shared_weak_owners_;
  do
    v29 = __ldxr(p_shared_weak_owners);
  while (__stxr(v29 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v26->__shared_owners_;
  do
    v31 = __ldaxr(p_shared_owners);
  while (__stlxr(v31 - 1, p_shared_owners));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v27);
  }
  v48 = a1 + 176;
  v49 = QMIServiceMsg::create();
  v50 = 25000;
  v51 = 0;
  v52 = 0;
  v44[0] = v7;
  v44[1] = 1174405120;
  v44[2] = ___ZN4diag16QMICommandDriver17setInterface_syncEN12capabilities4diag10InterfacesEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_2;
  v44[3] = &__block_descriptor_tmp_26_7;
  v44[4] = a1;
  v44[5] = v25;
  v45 = v27;
  do
    v32 = __ldxr(p_shared_weak_owners);
  while (__stxr(v32 + 1, p_shared_weak_owners));
  v47 = a2;
  v33 = *a3;
  if (*a3)
    v33 = _Block_copy(v33);
  v46 = v33;
  aBlock[0] = v7;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_3;
  aBlock[3] = &unk_1E66E0F38;
  aBlock[4] = v44;
  v34 = _Block_copy(aBlock);
  v52 = v34;
  if (v49)
  {
    qmi::Client::send();
    v34 = v52;
  }
  if (v34)
    _Block_release(v34);
  if (v46)
    _Block_release(v46);
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
  std::__shared_weak_count::__release_weak(v27);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v57);
}

void sub_1B3D82DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *aBlock, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  std::__shared_weak_count *v29;

  if (aBlock)
    _Block_release(aBlock);
  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a19);
  std::__shared_weak_count::__release_weak(v29);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a29);
  _Unwind_Resume(a1);
}

void sub_1B3D82E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a29);
  _Unwind_Resume(a1);
}

void sub_1B3D82E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a29);
  _Unwind_Resume(a1);
}

uint64_t ___ZN4diag16QMICommandDriver17setInterface_syncEN12capabilities4diag10InterfacesEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void ___ZN4diag16QMICommandDriver17setInterface_syncEN12capabilities4diag10InterfacesEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_2(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  NSObject *v11;
  uint8_t *v12;
  const void *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD v16[4];
  void *aBlock;
  BOOL v18;
  uint8_t buf[8];
  char v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint8_t v23[4];
  uint8_t *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v22 = v6;
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      v21 = v8;
      if (v8)
      {
        v9 = *(_DWORD *)(a2 + 4);
        v10 = v9 == 0;
        v11 = *(NSObject **)(v5 + 40);
        if (v9)
        {
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_1B3CB3000, v11, OS_LOG_TYPE_ERROR, "Error setting interface", buf, 2u);
          }
        }
        else if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          capabilities::diag::asString();
          v12 = v20 >= 0 ? buf : *(uint8_t **)buf;
          *(_DWORD *)v23 = 136315138;
          v24 = v12;
          _os_log_impl(&dword_1B3CB3000, v11, OS_LOG_TYPE_DEFAULT, "#I Interface set to: %s", v23, 0xCu);
          if (v20 < 0)
            operator delete(*(void **)buf);
        }
        v13 = (const void *)a1[7];
        if (v13)
        {
          v16[0] = MEMORY[0x1E0C809B0];
          v16[1] = 1174405120;
          v16[2] = ___ZN4diag16QMICommandDriver17setInterface_syncEN12capabilities4diag10InterfacesEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_23;
          v16[3] = &__block_descriptor_tmp_24_9;
          aBlock = _Block_copy(v13);
          v18 = v10;
          ctu::SharedSynchronizable<diag::CommandDriver>::execute_wrapped((uint64_t *)(v8 + 72), (uint64_t)v16);
          if (aBlock)
            _Block_release(aBlock);
        }
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1B3D8304C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B3D83060(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t ___ZN4diag16QMICommandDriver17setInterface_syncEN12capabilities4diag10InterfacesEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_23(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void *__copy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrIN4diag13CommandDriverEEE56c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void *result;

  v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = (void *)a2[7];
  if (result)
    result = _Block_copy(result);
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrIN4diag13CommandDriverEEE56c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;

  v2 = *(const void **)(a1 + 56);
  if (v2)
    _Block_release(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void diag::QMICommandDriver::setBufferingMode_sync(uint64_t a1, int a2, void **a3)
{
  int v5;
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  const void **v10;
  _DWORD *v11;
  _BYTE *v12;
  _BYTE *v13;
  _DWORD *v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  _QWORD *v22;
  char *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_weak_owners;
  unint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  void *v33;
  void *v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  _OWORD *v38;
  char *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  _QWORD v44[6];
  std::__shared_weak_count *v45;
  void *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  void *v52;
  _QWORD v53[2];
  uint64_t (*v54)(uint64_t, _DWORD *);
  void *v55;
  int v56;
  __int128 v57;
  __int128 v58;
  _QWORD aBlock[7];

  if ((a2 - 1) > 3)
    v5 = 3;
  else
    v5 = dword_1B3DD2B00[a2 - 1];
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v57 = v6;
  v58 = v6;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v57);
  v7 = MEMORY[0x1E0C809B0];
  v53[0] = MEMORY[0x1E0C809B0];
  v53[1] = 0x40000000;
  v54 = ___ZN4diag16QMICommandDriver21setBufferingMode_syncEN12capabilities4diag14BufferingModesEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
  v55 = &__block_descriptor_tmp_28_5;
  v56 = v5;
  v8 = (char *)*((_QWORD *)&v57 + 1);
  v9 = (char *)v58;
  v10 = (const void **)*((_QWORD *)&v57 + 1);
  if (*((_QWORD *)&v57 + 1) != (_QWORD)v58)
  {
    v10 = (const void **)*((_QWORD *)&v57 + 1);
    while (*((_BYTE *)*v10 + 8) != 1)
    {
      if (++v10 == (const void **)v58)
        goto LABEL_12;
    }
  }
  if (v10 == (const void **)v58)
  {
LABEL_12:
    v12 = operator new(0x10uLL);
    v13 = v12;
    v12[8] = 1;
    *(_QWORD *)v12 = off_1E66E0F80;
    *((_DWORD *)v12 + 3) = 0;
    v14 = v12 + 12;
    if ((unint64_t)v9 < *((_QWORD *)&v58 + 1))
    {
      *(_QWORD *)v9 = v12;
      v15 = (uint64_t)(v9 + 8);
LABEL_25:
      *(_QWORD *)&v58 = v15;
      v54((uint64_t)v53, v14);
      goto LABEL_26;
    }
    v16 = v9 - v8;
    v17 = (v9 - v8) >> 3;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v19 = *((_QWORD *)&v58 + 1) - (_QWORD)v8;
    if ((uint64_t)(*((_QWORD *)&v58 + 1) - (_QWORD)v8) >> 2 > v18)
      v18 = v19 >> 2;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
      v20 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v21 = operator new(8 * v20);
      v22 = &v21[8 * v17];
      v23 = &v21[8 * v20];
      *v22 = v13;
      v15 = (uint64_t)(v22 + 1);
      if (v8 == v9)
      {
LABEL_23:
        *((_QWORD *)&v57 + 1) = v22;
        *(_QWORD *)&v58 = v15;
        *((_QWORD *)&v58 + 1) = v23;
        if (!v8)
          goto LABEL_25;
LABEL_24:
        operator delete(v8);
        goto LABEL_25;
      }
    }
    else
    {
      v21 = 0;
      v22 = (_QWORD *)(8 * v17);
      v23 = 0;
      *(_QWORD *)(8 * v17) = v13;
      v15 = 8 * v17 + 8;
      if (v8 == v9)
        goto LABEL_23;
    }
    if ((unint64_t)(v16 - 8) < 0x58)
      goto LABEL_62;
    if ((unint64_t)(v8 - v21) < 0x20)
      goto LABEL_62;
    v35 = ((unint64_t)(v16 - 8) >> 3) + 1;
    v36 = 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
    v37 = &v9[-v36];
    v22 = (_QWORD *)((char *)v22 - v36);
    v38 = &v21[8 * v17 - 16];
    v39 = v9 - 16;
    v40 = v35 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v41 = *(_OWORD *)v39;
      *(v38 - 1) = *((_OWORD *)v39 - 1);
      *v38 = v41;
      v38 -= 2;
      v39 -= 32;
      v40 -= 4;
    }
    while (v40);
    v9 = v37;
    if (v35 != (v35 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_62:
      do
      {
        v42 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        *--v22 = v42;
      }
      while (v9 != v8);
    }
    v8 = (char *)*((_QWORD *)&v57 + 1);
    *((_QWORD *)&v57 + 1) = v22;
    *(_QWORD *)&v58 = v15;
    *((_QWORD *)&v58 + 1) = v23;
    if (!v8)
      goto LABEL_25;
    goto LABEL_24;
  }
  if (!v11)
    __cxa_bad_cast();
  ___ZN4diag16QMICommandDriver21setBufferingMode_syncEN12capabilities4diag14BufferingModesEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke((uint64_t)v53, v11 + 3);
LABEL_26:
  v24 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v24 || (v25 = *(_QWORD *)(a1 + 72), (v26 = std::__shared_weak_count::lock(v24)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v27 = v26;
  p_shared_weak_owners = (unint64_t *)&v26->__shared_weak_owners_;
  do
    v29 = __ldxr(p_shared_weak_owners);
  while (__stxr(v29 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v26->__shared_owners_;
  do
    v31 = __ldaxr(p_shared_owners);
  while (__stlxr(v31 - 1, p_shared_owners));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v27);
  }
  v48 = a1 + 176;
  v49 = QMIServiceMsg::create();
  v50 = 25000;
  v51 = 0;
  v52 = 0;
  v44[0] = v7;
  v44[1] = 1174405120;
  v44[2] = ___ZN4diag16QMICommandDriver21setBufferingMode_syncEN12capabilities4diag14BufferingModesEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_2;
  v44[3] = &__block_descriptor_tmp_31_5;
  v44[4] = a1;
  v44[5] = v25;
  v45 = v27;
  do
    v32 = __ldxr(p_shared_weak_owners);
  while (__stxr(v32 + 1, p_shared_weak_owners));
  v47 = a2;
  v33 = *a3;
  if (*a3)
    v33 = _Block_copy(v33);
  v46 = v33;
  aBlock[0] = v7;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_3;
  aBlock[3] = &unk_1E66E0F38;
  aBlock[4] = v44;
  v34 = _Block_copy(aBlock);
  v52 = v34;
  if (v49)
  {
    qmi::Client::send();
    v34 = v52;
  }
  if (v34)
    _Block_release(v34);
  if (v46)
    _Block_release(v46);
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
  std::__shared_weak_count::__release_weak(v27);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v57);
}

void sub_1B3D8352C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *aBlock, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  std::__shared_weak_count *v29;

  if (aBlock)
    _Block_release(aBlock);
  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a19);
  std::__shared_weak_count::__release_weak(v29);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a29);
  _Unwind_Resume(a1);
}

void sub_1B3D83578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a29);
  _Unwind_Resume(a1);
}

void sub_1B3D8358C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a29);
  _Unwind_Resume(a1);
}

uint64_t ___ZN4diag16QMICommandDriver21setBufferingMode_syncEN12capabilities4diag14BufferingModesEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void ___ZN4diag16QMICommandDriver21setBufferingMode_syncEN12capabilities4diag14BufferingModesEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_2(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  NSObject *v11;
  uint8_t *v12;
  const void *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD v16[4];
  void *aBlock;
  BOOL v18;
  uint8_t buf[8];
  char v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint8_t v23[4];
  uint8_t *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v22 = v6;
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      v21 = v8;
      if (v8)
      {
        v9 = *(_DWORD *)(a2 + 4);
        v10 = v9 == 0;
        v11 = *(NSObject **)(v5 + 40);
        if (v9)
        {
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_1B3CB3000, v11, OS_LOG_TYPE_ERROR, "Error setting buffering mode", buf, 2u);
          }
        }
        else if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          capabilities::diag::asString();
          v12 = v20 >= 0 ? buf : *(uint8_t **)buf;
          *(_DWORD *)v23 = 136315138;
          v24 = v12;
          _os_log_impl(&dword_1B3CB3000, v11, OS_LOG_TYPE_DEFAULT, "#I Buffering mode set to: %s", v23, 0xCu);
          if (v20 < 0)
            operator delete(*(void **)buf);
        }
        v13 = (const void *)a1[7];
        if (v13)
        {
          v16[0] = MEMORY[0x1E0C809B0];
          v16[1] = 1174405120;
          v16[2] = ___ZN4diag16QMICommandDriver21setBufferingMode_syncEN12capabilities4diag14BufferingModesEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_29;
          v16[3] = &__block_descriptor_tmp_30_4;
          aBlock = _Block_copy(v13);
          v18 = v10;
          ctu::SharedSynchronizable<diag::CommandDriver>::execute_wrapped((uint64_t *)(v8 + 72), (uint64_t)v16);
          if (aBlock)
            _Block_release(aBlock);
        }
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1B3D83784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B3D83798(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t ___ZN4diag16QMICommandDriver21setBufferingMode_syncEN12capabilities4diag14BufferingModesEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_29(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void diag::QMICommandDriver::setWaterMarks_sync(uint64_t a1, __int16 a2, __int16 a3, void **a4)
{
  __int128 v7;
  char *v8;
  char *v9;
  const void **v10;
  _WORD *v11;
  _BYTE *v12;
  _BYTE *v13;
  _WORD *v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  _QWORD *v22;
  char *v23;
  char *v24;
  char *v25;
  const void **v26;
  _WORD *v27;
  _BYTE *v28;
  _BYTE *v29;
  _WORD *v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  _QWORD *v38;
  char *v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_weak_owners;
  unint64_t v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  unint64_t v48;
  void *v49;
  void *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  _OWORD *v54;
  char *v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  _OWORD *v62;
  char *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  _QWORD v68[6];
  std::__shared_weak_count *v69;
  void *v70;
  __int16 v71;
  __int16 v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  void *v77;
  _QWORD v78[2];
  uint64_t (*v79)(uint64_t, _WORD *);
  void *v80;
  __int16 v81;
  _QWORD v82[2];
  uint64_t (*v83)(uint64_t, _WORD *);
  void *v84;
  __int16 v85;
  __int128 v86;
  __int128 v87;
  _QWORD aBlock[6];

  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v86 = v7;
  v87 = v7;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v86);
  v82[0] = MEMORY[0x1E0C809B0];
  v82[1] = 0x40000000;
  v83 = ___ZN4diag16QMICommandDriver18setWaterMarks_syncEttN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
  v84 = &__block_descriptor_tmp_33_4;
  v85 = a2;
  v8 = (char *)*((_QWORD *)&v86 + 1);
  v9 = (char *)v87;
  v10 = (const void **)*((_QWORD *)&v86 + 1);
  if (*((_QWORD *)&v86 + 1) != (_QWORD)v87)
  {
    v10 = (const void **)*((_QWORD *)&v86 + 1);
    while (*((_BYTE *)*v10 + 8) != 17)
    {
      if (++v10 == (const void **)v87)
        goto LABEL_9;
    }
  }
  if (v10 == (const void **)v87)
  {
LABEL_9:
    v12 = operator new(0x10uLL);
    v13 = v12;
    v12[8] = 17;
    *(_QWORD *)v12 = off_1E66E0FD0;
    *((_WORD *)v12 + 5) = 0;
    v14 = v12 + 10;
    if ((unint64_t)v9 < *((_QWORD *)&v87 + 1))
    {
      *(_QWORD *)v9 = v12;
      v15 = (uint64_t)(v9 + 8);
LABEL_22:
      *(_QWORD *)&v87 = v15;
      v83((uint64_t)v82, v14);
      goto LABEL_23;
    }
    v16 = v9 - v8;
    v17 = (v9 - v8) >> 3;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 61)
      goto LABEL_86;
    v19 = *((_QWORD *)&v87 + 1) - (_QWORD)v8;
    if ((uint64_t)(*((_QWORD *)&v87 + 1) - (_QWORD)v8) >> 2 > v18)
      v18 = v19 >> 2;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
      v20 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 >> 61)
        goto LABEL_87;
      v21 = operator new(8 * v20);
      v22 = &v21[8 * v17];
      v23 = &v21[8 * v20];
      *v22 = v13;
      v15 = (uint64_t)(v22 + 1);
      if (v8 == v9)
      {
LABEL_20:
        *((_QWORD *)&v86 + 1) = v22;
        *(_QWORD *)&v87 = v15;
        *((_QWORD *)&v87 + 1) = v23;
        if (!v8)
          goto LABEL_22;
LABEL_21:
        operator delete(v8);
        goto LABEL_22;
      }
    }
    else
    {
      v21 = 0;
      v22 = (_QWORD *)(8 * v17);
      v23 = 0;
      *(_QWORD *)(8 * v17) = v13;
      v15 = 8 * v17 + 8;
      if (v8 == v9)
        goto LABEL_20;
    }
    if ((unint64_t)(v16 - 8) < 0x58)
      goto LABEL_90;
    if ((unint64_t)(v8 - v21) < 0x20)
      goto LABEL_90;
    v51 = ((unint64_t)(v16 - 8) >> 3) + 1;
    v52 = 8 * (v51 & 0x3FFFFFFFFFFFFFFCLL);
    v53 = &v9[-v52];
    v22 = (_QWORD *)((char *)v22 - v52);
    v54 = &v21[8 * v17 - 16];
    v55 = v9 - 16;
    v56 = v51 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v57 = *(_OWORD *)v55;
      *(v54 - 1) = *((_OWORD *)v55 - 1);
      *v54 = v57;
      v54 -= 2;
      v55 -= 32;
      v56 -= 4;
    }
    while (v56);
    v9 = v53;
    if (v51 != (v51 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_90:
      do
      {
        v58 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        *--v22 = v58;
      }
      while (v9 != v8);
    }
    v8 = (char *)*((_QWORD *)&v86 + 1);
    *((_QWORD *)&v86 + 1) = v22;
    *(_QWORD *)&v87 = v15;
    *((_QWORD *)&v87 + 1) = v23;
    if (!v8)
      goto LABEL_22;
    goto LABEL_21;
  }
  if (!v11)
    goto LABEL_85;
  ___ZN4diag16QMICommandDriver18setWaterMarks_syncEttN8dispatch5blockIU13block_pointerFvbEEE_block_invoke((uint64_t)v82, v11 + 5);
LABEL_23:
  v78[0] = MEMORY[0x1E0C809B0];
  v78[1] = 0x40000000;
  v79 = ___ZN4diag16QMICommandDriver18setWaterMarks_syncEttN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_2;
  v80 = &__block_descriptor_tmp_35_5;
  v81 = a3;
  v24 = (char *)*((_QWORD *)&v86 + 1);
  v25 = (char *)v87;
  v26 = (const void **)*((_QWORD *)&v86 + 1);
  if (*((_QWORD *)&v86 + 1) != (_QWORD)v87)
  {
    v26 = (const void **)*((_QWORD *)&v86 + 1);
    while (*((_BYTE *)*v26 + 8) != 16)
    {
      if (++v26 == (const void **)v87)
        goto LABEL_31;
    }
  }
  if (v26 == (const void **)v87)
  {
LABEL_31:
    v28 = operator new(0x10uLL);
    v29 = v28;
    v28[8] = 16;
    *(_QWORD *)v28 = off_1E66E1020;
    *((_WORD *)v28 + 5) = 0;
    v30 = v28 + 10;
    if ((unint64_t)v25 < *((_QWORD *)&v87 + 1))
    {
      *(_QWORD *)v25 = v28;
      v31 = (uint64_t)(v25 + 8);
LABEL_44:
      *(_QWORD *)&v87 = v31;
      v79((uint64_t)v78, v30);
      goto LABEL_45;
    }
    v32 = v25 - v24;
    v33 = (v25 - v24) >> 3;
    v34 = v33 + 1;
    if (!((unint64_t)(v33 + 1) >> 61))
    {
      v35 = *((_QWORD *)&v87 + 1) - (_QWORD)v24;
      if ((uint64_t)(*((_QWORD *)&v87 + 1) - (_QWORD)v24) >> 2 > v34)
        v34 = v35 >> 2;
      if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
        v36 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v36 = v34;
      if (!v36)
      {
        v37 = 0;
        v38 = (_QWORD *)(8 * v33);
        v39 = 0;
        *(_QWORD *)(8 * v33) = v29;
        v31 = 8 * v33 + 8;
        if (v24 == v25)
        {
LABEL_42:
          *((_QWORD *)&v86 + 1) = v38;
          *(_QWORD *)&v87 = v31;
          *((_QWORD *)&v87 + 1) = v39;
          if (!v24)
            goto LABEL_44;
LABEL_43:
          operator delete(v24);
          goto LABEL_44;
        }
LABEL_76:
        if ((unint64_t)(v32 - 8) < 0x58)
          goto LABEL_91;
        if ((unint64_t)(v24 - v37) < 0x20)
          goto LABEL_91;
        v59 = ((unint64_t)(v32 - 8) >> 3) + 1;
        v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
        v61 = &v25[-v60];
        v38 = (_QWORD *)((char *)v38 - v60);
        v62 = &v37[8 * v33 - 16];
        v63 = v25 - 16;
        v64 = v59 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v65 = *(_OWORD *)v63;
          *(v62 - 1) = *((_OWORD *)v63 - 1);
          *v62 = v65;
          v62 -= 2;
          v63 -= 32;
          v64 -= 4;
        }
        while (v64);
        v25 = v61;
        if (v59 != (v59 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_91:
          do
          {
            v66 = *((_QWORD *)v25 - 1);
            v25 -= 8;
            *--v38 = v66;
          }
          while (v25 != v24);
        }
        v24 = (char *)*((_QWORD *)&v86 + 1);
        *((_QWORD *)&v86 + 1) = v38;
        *(_QWORD *)&v87 = v31;
        *((_QWORD *)&v87 + 1) = v39;
        if (!v24)
          goto LABEL_44;
        goto LABEL_43;
      }
      if (!(v36 >> 61))
      {
        v37 = operator new(8 * v36);
        v38 = &v37[8 * v33];
        v39 = &v37[8 * v36];
        *v38 = v29;
        v31 = (uint64_t)(v38 + 1);
        if (v24 == v25)
          goto LABEL_42;
        goto LABEL_76;
      }
LABEL_87:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_86:
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  if (!v27)
LABEL_85:
    __cxa_bad_cast();
  ___ZN4diag16QMICommandDriver18setWaterMarks_syncEttN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_2((uint64_t)v78, v27 + 5);
LABEL_45:
  v40 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v40 || (v41 = *(_QWORD *)(a1 + 72), (v42 = std::__shared_weak_count::lock(v40)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v43 = v42;
  p_shared_weak_owners = (unint64_t *)&v42->__shared_weak_owners_;
  do
    v45 = __ldxr(p_shared_weak_owners);
  while (__stxr(v45 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v42->__shared_owners_;
  do
    v47 = __ldaxr(p_shared_owners);
  while (__stlxr(v47 - 1, p_shared_owners));
  if (!v47)
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v43);
  }
  v73 = a1 + 176;
  v74 = QMIServiceMsg::create();
  v75 = 25000;
  v76 = 0;
  v77 = 0;
  v68[0] = MEMORY[0x1E0C809B0];
  v68[1] = 1174405120;
  v68[2] = ___ZN4diag16QMICommandDriver18setWaterMarks_syncEttN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_3;
  v68[3] = &__block_descriptor_tmp_38_4;
  v68[4] = a1;
  v68[5] = v41;
  v69 = v43;
  do
    v48 = __ldxr(p_shared_weak_owners);
  while (__stxr(v48 + 1, p_shared_weak_owners));
  v71 = a2;
  v72 = a3;
  v49 = *a4;
  if (*a4)
    v49 = _Block_copy(v49);
  v70 = v49;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_3;
  aBlock[3] = &unk_1E66E0F38;
  aBlock[4] = v68;
  v50 = _Block_copy(aBlock);
  v77 = v50;
  if (v74)
  {
    qmi::Client::send();
    v50 = v77;
  }
  if (v50)
    _Block_release(v50);
  if (v70)
    _Block_release(v70);
  if (v69)
    std::__shared_weak_count::__release_weak(v69);
  std::__shared_weak_count::__release_weak(v43);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v86);
}

void sub_1B3D83DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *aBlock, uint64_t a19, char a20)
{
  std::__shared_weak_count *v20;
  uint64_t v21;

  if (aBlock)
    _Block_release(aBlock);
  if (a17)
    std::__shared_weak_count::__release_weak(a17);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a20);
  std::__shared_weak_count::__release_weak(v20);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v21 - 176));
  _Unwind_Resume(a1);
}

void sub_1B3D83E1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v1 - 176));
  _Unwind_Resume(a1);
}

void sub_1B3D83E30(_Unwind_Exception *a1)
{
  uint64_t v1;

  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v1 - 176));
  _Unwind_Resume(a1);
}

uint64_t ___ZN4diag16QMICommandDriver18setWaterMarks_syncEttN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(uint64_t result, _WORD *a2)
{
  *a2 = *(_WORD *)(result + 32);
  return result;
}

uint64_t ___ZN4diag16QMICommandDriver18setWaterMarks_syncEttN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_2(uint64_t result, _WORD *a2)
{
  *a2 = *(_WORD *)(result + 32);
  return result;
}

void ___ZN4diag16QMICommandDriver18setWaterMarks_syncEttN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_3(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  NSObject *v11;
  int v12;
  int v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD v17[4];
  void *aBlock;
  BOOL v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)(a1 + 40);
      if (v8)
      {
        v9 = *(_DWORD *)(a2 + 4);
        v10 = v9 == 0;
        v11 = *(NSObject **)(v5 + 40);
        if (v9)
        {
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_1B3CB3000, v11, OS_LOG_TYPE_ERROR, "Error setting water marks", buf, 2u);
          }
        }
        else if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          v12 = *(unsigned __int16 *)(a1 + 64);
          v13 = *(unsigned __int16 *)(a1 + 66);
          *(_DWORD *)buf = 67109376;
          v21 = v12;
          v22 = 1024;
          v23 = v13;
          _os_log_impl(&dword_1B3CB3000, v11, OS_LOG_TYPE_DEFAULT, "#I Water marks set to: %u,%u", buf, 0xEu);
        }
        v14 = *(const void **)(a1 + 56);
        if (v14)
        {
          v17[0] = MEMORY[0x1E0C809B0];
          v17[1] = 1174405120;
          v17[2] = ___ZN4diag16QMICommandDriver18setWaterMarks_syncEttN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_36;
          v17[3] = &__block_descriptor_tmp_37_2;
          aBlock = _Block_copy(v14);
          v19 = v10;
          ctu::SharedSynchronizable<diag::CommandDriver>::execute_wrapped((uint64_t *)(v8 + 72), (uint64_t)v17);
          if (aBlock)
            _Block_release(aBlock);
        }
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1B3D84010(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN4diag16QMICommandDriver18setWaterMarks_syncEttN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_36(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void diag::QMICommandDriver::drainBuffer_sync(uint64_t a1, void **a2)
{
  __int128 v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  void *v16;
  _QWORD v17[6];
  std::__shared_weak_count *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  void *v24;
  _OWORD v25[2];
  _QWORD aBlock[5];

  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v25[0] = v4;
  v25[1] = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v25);
  v5 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v5 || (v6 = *(_QWORD *)(a1 + 72), (v7 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  v20 = a1 + 176;
  v21 = QMIServiceMsg::create();
  v22 = 25000;
  v23 = 0;
  v24 = 0;
  v13 = MEMORY[0x1E0C809B0];
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 1174405120;
  v17[2] = ___ZN4diag16QMICommandDriver16drainBuffer_syncEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
  v17[3] = &__block_descriptor_tmp_41_2;
  v17[4] = a1;
  v17[5] = v6;
  v18 = v8;
  do
    v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  v15 = *a2;
  if (*a2)
    v15 = _Block_copy(v15);
  v19 = v15;
  aBlock[0] = v13;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_3;
  aBlock[3] = &unk_1E66E0F38;
  aBlock[4] = v17;
  v16 = _Block_copy(aBlock);
  v24 = v16;
  if (v21)
  {
    qmi::Client::send();
    v16 = v24;
  }
  if (v16)
    _Block_release(v16);
  if (v19)
    _Block_release(v19);
  if (v18)
    std::__shared_weak_count::__release_weak(v18);
  std::__shared_weak_count::__release_weak(v8);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v25);
}

void sub_1B3D841E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *aBlock, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  std::__shared_weak_count *v23;

  if (aBlock)
    _Block_release(aBlock);
  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a18);
  std::__shared_weak_count::__release_weak(v23);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  _Unwind_Resume(a1);
}

void sub_1B3D84234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN4diag16QMICommandDriver16drainBuffer_syncEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  NSObject *v11;
  const void *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD v15[4];
  void *aBlock;
  BOOL v17;
  uint8_t buf[16];

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      if (v8)
      {
        v9 = *(_DWORD *)(a2 + 4);
        v10 = v9 == 0;
        v11 = *(NSObject **)(v5 + 40);
        if (v9)
        {
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_1B3CB3000, v11, OS_LOG_TYPE_ERROR, "Error requesting drain of DIAG buffer", buf, 2u);
          }
        }
        else if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1B3CB3000, v11, OS_LOG_TYPE_DEFAULT, "#I Requested to drain DIAG buffer", buf, 2u);
        }
        v12 = (const void *)a1[7];
        if (v12)
        {
          v15[0] = MEMORY[0x1E0C809B0];
          v15[1] = 1174405120;
          v15[2] = ___ZN4diag16QMICommandDriver16drainBuffer_syncEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_39;
          v15[3] = &__block_descriptor_tmp_40_9;
          aBlock = _Block_copy(v12);
          v17 = v10;
          ctu::SharedSynchronizable<diag::CommandDriver>::execute_wrapped((uint64_t *)(v8 + 72), (uint64_t)v15);
          if (aBlock)
            _Block_release(aBlock);
        }
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

uint64_t ___ZN4diag16QMICommandDriver16drainBuffer_syncEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_39(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void diag::QMICommandDriver::setPresetID_sync(uint64_t a1, char a2, void **a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  const void **v10;
  _BYTE *v11;
  _WORD *v12;
  _WORD *v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_weak_owners;
  unint64_t v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  void *v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  _OWORD *v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  _QWORD v42[6];
  std::__shared_weak_count *v43;
  void *v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  void *v50;
  _QWORD v51[2];
  uint64_t (*v52)(uint64_t, _BYTE *);
  void *v53;
  char v54;
  __int128 v55;
  __int128 v56;
  _QWORD aBlock[7];

  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v55 = v6;
  v56 = v6;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v55);
  v7 = MEMORY[0x1E0C809B0];
  v51[0] = MEMORY[0x1E0C809B0];
  v51[1] = 0x40000000;
  v52 = ___ZN4diag16QMICommandDriver16setPresetID_syncEhN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
  v53 = &__block_descriptor_tmp_43_3;
  v54 = a2;
  v8 = (char *)*((_QWORD *)&v55 + 1);
  v9 = (char *)v56;
  v10 = (const void **)*((_QWORD *)&v55 + 1);
  if (*((_QWORD *)&v55 + 1) != (_QWORD)v56)
  {
    v10 = (const void **)*((_QWORD *)&v55 + 1);
    while (*((_BYTE *)*v10 + 8) != 1)
    {
      if (++v10 == (const void **)v56)
        goto LABEL_9;
    }
  }
  if (v10 == (const void **)v56)
  {
LABEL_9:
    v12 = operator new(0x10uLL);
    v13 = v12;
    v12[4] = 1;
    *(_QWORD *)v12 = off_1E66E1070;
    if ((unint64_t)v9 < *((_QWORD *)&v56 + 1))
    {
      *(_QWORD *)v9 = v12;
      v14 = (uint64_t)(v9 + 8);
LABEL_22:
      *(_QWORD *)&v56 = v14;
      v52((uint64_t)v51, (_BYTE *)v13 + 9);
      goto LABEL_23;
    }
    v15 = v9 - v8;
    v16 = (v9 - v8) >> 3;
    v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v18 = *((_QWORD *)&v56 + 1) - (_QWORD)v8;
    if ((uint64_t)(*((_QWORD *)&v56 + 1) - (_QWORD)v8) >> 2 > v17)
      v17 = v18 >> 2;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
    {
      if (v19 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v20 = operator new(8 * v19);
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v13;
      v14 = (uint64_t)(v21 + 1);
      if (v8 == v9)
      {
LABEL_20:
        *((_QWORD *)&v55 + 1) = v21;
        *(_QWORD *)&v56 = v14;
        *((_QWORD *)&v56 + 1) = v22;
        if (!v8)
          goto LABEL_22;
LABEL_21:
        operator delete(v8);
        goto LABEL_22;
      }
    }
    else
    {
      v20 = 0;
      v21 = (_QWORD *)(8 * v16);
      v22 = 0;
      *(_QWORD *)(8 * v16) = v13;
      v14 = 8 * v16 + 8;
      if (v8 == v9)
        goto LABEL_20;
    }
    if ((unint64_t)(v15 - 8) < 0x58)
      goto LABEL_59;
    if ((unint64_t)(v8 - v20) < 0x20)
      goto LABEL_59;
    v34 = ((unint64_t)(v15 - 8) >> 3) + 1;
    v35 = 8 * (v34 & 0x3FFFFFFFFFFFFFFCLL);
    v36 = &v9[-v35];
    v21 = (_QWORD *)((char *)v21 - v35);
    v37 = &v20[8 * v16 - 16];
    v38 = v9 - 16;
    v39 = v34 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v40 = *(_OWORD *)v38;
      *(v37 - 1) = *((_OWORD *)v38 - 1);
      *v37 = v40;
      v37 -= 2;
      v38 -= 32;
      v39 -= 4;
    }
    while (v39);
    v9 = v36;
    if (v34 != (v34 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_59:
      do
      {
        v41 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        *--v21 = v41;
      }
      while (v9 != v8);
    }
    v8 = (char *)*((_QWORD *)&v55 + 1);
    *((_QWORD *)&v55 + 1) = v21;
    *(_QWORD *)&v56 = v14;
    *((_QWORD *)&v56 + 1) = v22;
    if (!v8)
      goto LABEL_22;
    goto LABEL_21;
  }
  if (!v11)
    __cxa_bad_cast();
  ___ZN4diag16QMICommandDriver16setPresetID_syncEhN8dispatch5blockIU13block_pointerFvbEEE_block_invoke((uint64_t)v51, v11 + 9);
LABEL_23:
  v23 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v23 || (v24 = *(_QWORD *)(a1 + 72), (v25 = std::__shared_weak_count::lock(v23)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v26 = v25;
  p_shared_weak_owners = (unint64_t *)&v25->__shared_weak_owners_;
  do
    v28 = __ldxr(p_shared_weak_owners);
  while (__stxr(v28 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v25->__shared_owners_;
  do
    v30 = __ldaxr(p_shared_owners);
  while (__stlxr(v30 - 1, p_shared_owners));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v26);
  }
  v46 = a1 + 176;
  v47 = QMIServiceMsg::create();
  v48 = 25000;
  v49 = 0;
  v50 = 0;
  v42[0] = v7;
  v42[1] = 1174405120;
  v42[2] = ___ZN4diag16QMICommandDriver16setPresetID_syncEhN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_2;
  v42[3] = &__block_descriptor_tmp_46_2;
  v42[4] = a1;
  v42[5] = v24;
  v43 = v26;
  do
    v31 = __ldxr(p_shared_weak_owners);
  while (__stxr(v31 + 1, p_shared_weak_owners));
  v45 = a2;
  v32 = *a3;
  if (*a3)
    v32 = _Block_copy(v32);
  v44 = v32;
  aBlock[0] = v7;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_3;
  aBlock[3] = &unk_1E66E0F38;
  aBlock[4] = v42;
  v33 = _Block_copy(aBlock);
  v50 = v33;
  if (v47)
  {
    qmi::Client::send();
    v33 = v50;
  }
  if (v33)
    _Block_release(v33);
  if (v44)
    _Block_release(v44);
  if (v43)
    std::__shared_weak_count::__release_weak(v43);
  std::__shared_weak_count::__release_weak(v26);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v55);
}

void sub_1B3D847C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *aBlock, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  std::__shared_weak_count *v29;

  if (aBlock)
    _Block_release(aBlock);
  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a19);
  std::__shared_weak_count::__release_weak(v29);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a29);
  _Unwind_Resume(a1);
}

void sub_1B3D84810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a29);
  _Unwind_Resume(a1);
}

void sub_1B3D84824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a29);
  _Unwind_Resume(a1);
}

uint64_t ___ZN4diag16QMICommandDriver16setPresetID_syncEhN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(uint64_t result, _BYTE *a2)
{
  *a2 = *(_BYTE *)(result + 32);
  return result;
}

void ___ZN4diag16QMICommandDriver16setPresetID_syncEhN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_2(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  NSObject *v11;
  int v12;
  const void *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD v16[4];
  void *aBlock;
  BOOL v18;
  uint8_t buf[4];
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)(a1 + 40);
      if (v8)
      {
        v9 = *(_DWORD *)(a2 + 4);
        v10 = v9 == 0;
        v11 = *(NSObject **)(v5 + 40);
        if (v9)
        {
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_1B3CB3000, v11, OS_LOG_TYPE_ERROR, "Error setting mask preset ID", buf, 2u);
          }
        }
        else if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          v12 = *(unsigned __int8 *)(a1 + 64);
          *(_DWORD *)buf = 67109120;
          v20 = v12;
          _os_log_impl(&dword_1B3CB3000, v11, OS_LOG_TYPE_DEFAULT, "#I Logging preset ID set to: %u", buf, 8u);
        }
        v13 = *(const void **)(a1 + 56);
        if (v13)
        {
          v16[0] = MEMORY[0x1E0C809B0];
          v16[1] = 1174405120;
          v16[2] = ___ZN4diag16QMICommandDriver16setPresetID_syncEhN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_44;
          v16[3] = &__block_descriptor_tmp_45;
          aBlock = _Block_copy(v13);
          v18 = v10;
          ctu::SharedSynchronizable<diag::CommandDriver>::execute_wrapped((uint64_t *)(v8 + 72), (uint64_t)v16);
          if (aBlock)
            _Block_release(aBlock);
        }
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1B3D849E8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN4diag16QMICommandDriver16setPresetID_syncEhN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_44(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void diag::QMICommandDriver::isCurrentPresetID_sync(uint64_t a1, char a2, void **a3)
{
  __int128 v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  void *v18;
  _QWORD v19[6];
  std::__shared_weak_count *v20;
  void *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  void *v27;
  _OWORD v28[2];
  _QWORD aBlock[5];

  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v28[0] = v6;
  v28[1] = v6;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v28);
  v7 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v7 || (v8 = *(_QWORD *)(a1 + 72), (v9 = std::__shared_weak_count::lock(v7)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v10 = v9;
  p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v10);
  }
  v23 = a1 + 176;
  v24 = QMIServiceMsg::create();
  v25 = 25000;
  v26 = 0;
  v27 = 0;
  v15 = MEMORY[0x1E0C809B0];
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 1174405120;
  v19[2] = ___ZN4diag16QMICommandDriver22isCurrentPresetID_syncEhN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
  v19[3] = &__block_descriptor_tmp_52_1;
  v19[4] = a1;
  v19[5] = v8;
  v20 = v10;
  do
    v16 = __ldxr(p_shared_weak_owners);
  while (__stxr(v16 + 1, p_shared_weak_owners));
  v22 = a2;
  v17 = *a3;
  if (*a3)
    v17 = _Block_copy(v17);
  v21 = v17;
  aBlock[0] = v15;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm15DIAGGetPresetID8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66E10A0;
  aBlock[4] = v19;
  v18 = _Block_copy(aBlock);
  v27 = v18;
  if (v24)
  {
    qmi::Client::send();
    v18 = v27;
  }
  if (v18)
    _Block_release(v18);
  if (v21)
    _Block_release(v21);
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
  std::__shared_weak_count::__release_weak(v10);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v28);
}

void sub_1B3D84BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  std::__shared_weak_count *v23;

  if (aBlock)
    _Block_release(aBlock);
  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a18);
  std::__shared_weak_count::__release_weak(v23);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  _Unwind_Resume(a1);
}

void sub_1B3D84C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN4diag16QMICommandDriver22isCurrentPresetID_syncEhN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  int v9;
  NSObject *v10;
  const void *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  tlv *TlvValue;
  int v16;
  uint8_t *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _QWORD v23[5];
  void *aBlock;
  uint8_t buf[16];
  _QWORD v26[2];
  void (*v27)(uint64_t, unsigned __int8 *);
  void *v28;
  _QWORD *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  char v34;
  _QWORD v35[3];
  BOOL v36;
  uint64_t v37;
  std::__shared_weak_count *v38;

  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = std::__shared_weak_count::lock(v3);
    v38 = v6;
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)(a1 + 40);
      v37 = v8;
      if (!v8)
      {
LABEL_23:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      v35[0] = 0;
      v35[1] = v35;
      v35[2] = 0x2000000000;
      v9 = *((_DWORD *)a2 + 1);
      v36 = v9 == 0;
      if (v9)
      {
        v10 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_1B3CB3000, v10, OS_LOG_TYPE_ERROR, "Error setting mask preset ID", buf, 2u);
          v11 = *(const void **)(a1 + 56);
          if (!v11)
            goto LABEL_22;
        }
        else
        {
          v11 = *(const void **)(a1 + 56);
          if (!v11)
            goto LABEL_22;
        }
        v23[0] = MEMORY[0x1E0C809B0];
        v23[1] = 1174405120;
        v23[2] = ___ZN4diag16QMICommandDriver22isCurrentPresetID_syncEhN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_50;
        v23[3] = &unk_1E66E0890;
        v23[4] = v35;
        aBlock = _Block_copy(v11);
        ctu::SharedSynchronizable<diag::CommandDriver>::execute_wrapped((uint64_t *)(v8 + 72), (uint64_t)v23);
        if (aBlock)
          _Block_release(aBlock);
      }
      else
      {
        v26[0] = MEMORY[0x1E0C809B0];
        v26[1] = 1174405120;
        v27 = ___ZN4diag16QMICommandDriver22isCurrentPresetID_syncEhN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_2;
        v28 = &unk_1E66E0858;
        v29 = v35;
        v30 = v5;
        v34 = *(_BYTE *)(a1 + 64);
        v12 = *(void **)(a1 + 56);
        if (v12)
          v12 = _Block_copy(v12);
        v31 = v12;
        v32 = v8;
        v33 = v7;
        v13 = (unint64_t *)&v7->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
        v17 = (uint8_t *)TlvValue;
        if (TlvValue)
        {
          tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v16, (const unsigned __int8 *)1);
          buf[0] = *v17;
          v27((uint64_t)v26, buf);
        }
        v18 = v33;
        if (v33)
        {
          v19 = (unint64_t *)&v33->__shared_owners_;
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        if (v31)
          _Block_release(v31);
      }
LABEL_22:
      _Block_object_dispose(v35, 8);
      v7 = v38;
      if (!v38)
        return;
      goto LABEL_23;
    }
  }
}

void sub_1B3D84EA4(void *a1)
{
  unsigned __int16 *v1;
  uint64_t v2;
  uint64_t v3;

  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E0DE2D28])(*v1, 1, v2, v3);
  JUMPOUT(0x1B3D84DB4);
}

void sub_1B3D84EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *aBlock)
{
  uint64_t v23;
  uint64_t v24;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v23);
  if (aBlock)
    _Block_release(aBlock);
  _Block_object_dispose((const void *)(v24 - 96), 8);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v24 - 64);
  _Unwind_Resume(a1);
}

void ___ZN4diag16QMICommandDriver22isCurrentPresetID_syncEhN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_2(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  uint64_t v4;
  NSObject *v5;
  const void *v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[5];
  void *aBlock;
  uint8_t buf[4];
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(unsigned __int8 *)(a1 + 72) == v3;
  v5 = *(NSObject **)(v4 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v12 = v3;
    _os_log_impl(&dword_1B3CB3000, v5, OS_LOG_TYPE_DEFAULT, "#I Current logging preset ID is: %u", buf, 8u);
  }
  v6 = *(const void **)(a1 + 48);
  if (v6)
  {
    v7 = *(_QWORD *)(a1 + 56);
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 1174405120;
    v9[2] = ___ZN4diag16QMICommandDriver22isCurrentPresetID_syncEhN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_47;
    v9[3] = &unk_1E66E0820;
    v8 = _Block_copy(v6);
    v9[4] = *(_QWORD *)(a1 + 32);
    aBlock = v8;
    ctu::SharedSynchronizable<diag::CommandDriver>::execute_wrapped((uint64_t *)(v7 + 72), (uint64_t)v9);
    if (aBlock)
      _Block_release(aBlock);
  }
}

void sub_1B3D85030(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN4diag16QMICommandDriver22isCurrentPresetID_syncEhN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_47(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void *__copy_helper_block_e8_40c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 40);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 40);
  if (v1)
    _Block_release(v1);
}

void *__copy_helper_block_e8_48c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE56c48_ZTSNSt3__110shared_ptrIN4diag13CommandDriverEEE(_QWORD *a1, _QWORD *a2)
{
  void *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (void *)a2[6];
  if (result)
    result = _Block_copy(result);
  v6 = a2[7];
  v5 = a2[8];
  a1[6] = result;
  a1[7] = v6;
  a1[8] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void __destroy_helper_block_e8_48c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE56c48_ZTSNSt3__110shared_ptrIN4diag13CommandDriverEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  const void *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(const void **)(a1 + 48);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = *(const void **)(a1 + 48);
    if (!v5)
      return;
  }
  _Block_release(v5);
}

uint64_t ___ZN4diag16QMICommandDriver22isCurrentPresetID_syncEhN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_50(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void diag::QMICommandDriver::isCurrentInterface_sync(uint64_t a1, int a2, void **a3)
{
  __int128 v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  void *v18;
  _QWORD v19[6];
  std::__shared_weak_count *v20;
  void *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  void *v27;
  _OWORD v28[2];
  _QWORD aBlock[5];

  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v28[0] = v6;
  v28[1] = v6;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v28);
  v7 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v7 || (v8 = *(_QWORD *)(a1 + 72), (v9 = std::__shared_weak_count::lock(v7)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v10 = v9;
  p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v10);
  }
  v23 = a1 + 176;
  v24 = QMIServiceMsg::create();
  v25 = 25000;
  v26 = 0;
  v27 = 0;
  v15 = MEMORY[0x1E0C809B0];
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 1174405120;
  v19[2] = ___ZN4diag16QMICommandDriver23isCurrentInterface_syncEN12capabilities4diag10InterfacesEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
  v19[3] = &__block_descriptor_tmp_59_3;
  v19[4] = a1;
  v19[5] = v8;
  v20 = v10;
  do
    v16 = __ldxr(p_shared_weak_owners);
  while (__stxr(v16 + 1, p_shared_weak_owners));
  v22 = a2;
  v17 = *a3;
  if (*a3)
    v17 = _Block_copy(v17);
  v21 = v17;
  aBlock[0] = v15;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm9DIAGProbe8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66E10C8;
  aBlock[4] = v19;
  v18 = _Block_copy(aBlock);
  v27 = v18;
  if (v24)
  {
    qmi::Client::send();
    v18 = v27;
  }
  if (v18)
    _Block_release(v18);
  if (v21)
    _Block_release(v21);
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
  std::__shared_weak_count::__release_weak(v10);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v28);
}

void sub_1B3D85338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  std::__shared_weak_count *v23;

  if (aBlock)
    _Block_release(aBlock);
  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a18);
  std::__shared_weak_count::__release_weak(v23);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  _Unwind_Resume(a1);
}

void sub_1B3D85384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN4diag16QMICommandDriver23isCurrentInterface_syncEN12capabilities4diag10InterfacesEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  int v9;
  NSObject *v10;
  const void *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  tlv *TlvValue;
  int v16;
  uint8_t *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _QWORD v23[5];
  void *aBlock;
  uint8_t buf[16];
  _QWORD v26[2];
  void (*v27)(uint64_t, char *);
  void *v28;
  _QWORD *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  int v34;
  _QWORD v35[3];
  BOOL v36;
  uint64_t v37;
  std::__shared_weak_count *v38;

  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = std::__shared_weak_count::lock(v3);
    v38 = v6;
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)(a1 + 40);
      v37 = v8;
      if (!v8)
      {
LABEL_23:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      v35[0] = 0;
      v35[1] = v35;
      v35[2] = 0x2000000000;
      v9 = *((_DWORD *)a2 + 1);
      v36 = v9 == 0;
      if (v9)
      {
        v10 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_1B3CB3000, v10, OS_LOG_TYPE_ERROR, "Error checking for active DIAG interface", buf, 2u);
          v11 = *(const void **)(a1 + 56);
          if (!v11)
            goto LABEL_22;
        }
        else
        {
          v11 = *(const void **)(a1 + 56);
          if (!v11)
            goto LABEL_22;
        }
        v23[0] = MEMORY[0x1E0C809B0];
        v23[1] = 1174405120;
        v23[2] = ___ZN4diag16QMICommandDriver23isCurrentInterface_syncEN12capabilities4diag10InterfacesEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_57;
        v23[3] = &unk_1E66E0968;
        v23[4] = v35;
        aBlock = _Block_copy(v11);
        ctu::SharedSynchronizable<diag::CommandDriver>::execute_wrapped((uint64_t *)(v8 + 72), (uint64_t)v23);
        if (aBlock)
          _Block_release(aBlock);
      }
      else
      {
        v26[0] = MEMORY[0x1E0C809B0];
        v26[1] = 1174405120;
        v27 = ___ZN4diag16QMICommandDriver23isCurrentInterface_syncEN12capabilities4diag10InterfacesEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_2;
        v28 = &unk_1E66E0930;
        v29 = v35;
        v30 = v5;
        v34 = *(_DWORD *)(a1 + 64);
        v12 = *(void **)(a1 + 56);
        if (v12)
          v12 = _Block_copy(v12);
        v31 = v12;
        v32 = v8;
        v33 = v7;
        v13 = (unint64_t *)&v7->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
        v17 = (uint8_t *)TlvValue;
        if (TlvValue)
        {
          tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v16, (const unsigned __int8 *)1);
          buf[0] = *v17;
          v27((uint64_t)v26, (char *)buf);
        }
        v18 = v33;
        if (v33)
        {
          v19 = (unint64_t *)&v33->__shared_owners_;
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        if (v31)
          _Block_release(v31);
      }
LABEL_22:
      _Block_object_dispose(v35, 8);
      v7 = v38;
      if (!v38)
        return;
      goto LABEL_23;
    }
  }
}

void sub_1B3D85614(void *a1)
{
  unsigned __int16 *v1;
  uint64_t v2;
  uint64_t v3;

  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E0DE2D28])(*v1, 1, v2, v3);
  JUMPOUT(0x1B3D85524);
}

void sub_1B3D8564C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *aBlock)
{
  uint64_t v23;
  uint64_t v24;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v23);
  if (aBlock)
    _Block_release(aBlock);
  _Block_object_dispose((const void *)(v24 - 96), 8);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v24 - 64);
  _Unwind_Resume(a1);
}

void ___ZN4diag16QMICommandDriver23isCurrentInterface_syncEN12capabilities4diag10InterfacesEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_2(uint64_t a1, char *a2)
{
  uint64_t v3;
  unint64_t v4;
  NSObject *v5;
  void *p_p;
  const void *v7;
  uint64_t v8;
  void *v9;
  _QWORD v10[5];
  void *aBlock;
  void *__p;
  char v13;
  uint8_t buf[4];
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *a2;
  if (v4 > 2)
  {
    v5 = *(NSObject **)(v3 + 40);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      goto LABEL_9;
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a1 + 72) == dword_1B3DD2AF0[v4];
    v5 = *(NSObject **)(v3 + 40);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      goto LABEL_9;
  }
  capabilities::diag::asString();
  if (v13 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  *(_DWORD *)buf = 136315138;
  v15 = p_p;
  _os_log_impl(&dword_1B3CB3000, v5, OS_LOG_TYPE_DEFAULT, "#I Current DIAG interface is: %s", buf, 0xCu);
  if ((v13 & 0x80000000) == 0)
  {
LABEL_9:
    v7 = *(const void **)(a1 + 48);
    if (!v7)
      return;
    goto LABEL_10;
  }
  operator delete(__p);
  v7 = *(const void **)(a1 + 48);
  if (!v7)
    return;
LABEL_10:
  v8 = *(_QWORD *)(a1 + 56);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 1174405120;
  v10[2] = ___ZN4diag16QMICommandDriver23isCurrentInterface_syncEN12capabilities4diag10InterfacesEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_53;
  v10[3] = &unk_1E66E08F8;
  v9 = _Block_copy(v7);
  v10[4] = *(_QWORD *)(a1 + 32);
  aBlock = v9;
  ctu::SharedSynchronizable<diag::CommandDriver>::execute_wrapped((uint64_t *)(v8 + 72), (uint64_t)v10);
  if (aBlock)
    _Block_release(aBlock);
}

void sub_1B3D85810(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t ___ZN4diag16QMICommandDriver23isCurrentInterface_syncEN12capabilities4diag10InterfacesEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_53(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t ___ZN4diag16QMICommandDriver23isCurrentInterface_syncEN12capabilities4diag10InterfacesEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_57(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t diag::QMICommandDriver::validateCommands_sync(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  _DWORD v12[2];
  uint64_t v13;

  v2 = a2;
  v3 = a1;
  v13 = *MEMORY[0x1E0C80C00];
  if ((a2 & 0x1ED) != 0)
  {
    if ((a2 & 1) != 0)
    {
      v2 = a2 & 0xFFFFFFFE;
      v4 = *(NSObject **)(a1 + 40);
      a1 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)a1)
      {
        LOWORD(v12[0]) = 0;
        _os_log_impl(&dword_1B3CB3000, v4, OS_LOG_TYPE_DEFAULT, "#I Set interface unsupported", (uint8_t *)v12, 2u);
      }
    }
    if ((v2 & 4) != 0)
    {
      a1 = capabilities::diag::supportsBuffering((capabilities::diag *)a1);
      if ((a1 & 1) == 0)
      {
        v2 = v2 & 0xFFFFFFFB;
        v5 = *(NSObject **)(v3 + 40);
        a1 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)a1)
        {
          LOWORD(v12[0]) = 0;
          _os_log_impl(&dword_1B3CB3000, v5, OS_LOG_TYPE_DEFAULT, "#I Set buffering mode unsupported", (uint8_t *)v12, 2u);
        }
      }
    }
    if ((v2 & 8) != 0)
    {
      a1 = capabilities::diag::supportsBuffering((capabilities::diag *)a1);
      if ((a1 & 1) == 0)
      {
        v2 = v2 & 0xFFFFFFF7;
        v6 = *(NSObject **)(v3 + 40);
        a1 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)a1)
        {
          LOWORD(v12[0]) = 0;
          _os_log_impl(&dword_1B3CB3000, v6, OS_LOG_TYPE_DEFAULT, "#I Set water marks unsupported", (uint8_t *)v12, 2u);
        }
      }
    }
    if ((v2 & 0x20) != 0)
    {
      a1 = capabilities::diag::supportsBuffering((capabilities::diag *)a1);
      if ((a1 & 1) == 0)
      {
        v2 = v2 & 0xFFFFFFDF;
        v7 = *(NSObject **)(v3 + 40);
        a1 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)a1)
        {
          LOWORD(v12[0]) = 0;
          _os_log_impl(&dword_1B3CB3000, v7, OS_LOG_TYPE_DEFAULT, "#I Draining DIAG buffer unsupported", (uint8_t *)v12, 2u);
        }
      }
    }
    if ((v2 & 0x40) != 0)
    {
      a1 = capabilities::diag::supportsMultipleMasks((capabilities::diag *)a1);
      if ((a1 & 1) == 0)
      {
        v2 = v2 & 0xFFFFFFBF;
        v8 = *(NSObject **)(v3 + 40);
        a1 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)a1)
        {
          LOWORD(v12[0]) = 0;
          _os_log_impl(&dword_1B3CB3000, v8, OS_LOG_TYPE_DEFAULT, "#I Setting logging preset ID unsupported", (uint8_t *)v12, 2u);
        }
      }
    }
    if ((v2 & 0x80) != 0 && (capabilities::diag::supportsMultipleMasks((capabilities::diag *)a1) & 1) == 0)
    {
      v2 = v2 & 0xFFFFFF7F;
      v9 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v12[0]) = 0;
        _os_log_impl(&dword_1B3CB3000, v9, OS_LOG_TYPE_DEFAULT, "#I Checking current logging preset ID unsupported", (uint8_t *)v12, 2u);
      }
    }
  }
  else
  {
    v10 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v12[0] = 67109120;
      v12[1] = v2;
      _os_log_error_impl(&dword_1B3CB3000, v10, OS_LOG_TYPE_ERROR, "Invalid QMI Command mask passed - 0x%x", (uint8_t *)v12, 8u);
    }
    return 0;
  }
  return v2;
}

void diag::QMICommandDriver::stop(diag::QMICommandDriver *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 0x40000000;
  v1[2] = ___ZN4diag16QMICommandDriver4stopEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_61_2;
  v1[4] = this;
  ctu::SharedSynchronizable<diag::CommandDriver>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

void ___ZN4diag16QMICommandDriver4stopEv_block_invoke(uint64_t a1)
{
  NSObject **v1;
  void *__p[2];
  char v3;

  v1 = *(NSObject ***)(a1 + 32);
  v3 = 11;
  strcpy((char *)__p, "Forced stop");
  diag::QMICommandDriver::onError_sync(v1, (uint64_t *)__p);
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_1B3D85BCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void diag::QMICommandDriver::perform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v9;
  int v10;
  void *v11;
  NSObject *v12;
  void *v13;
  NSObject *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  NSObject *v18;
  void *v19;
  NSObject *v20;
  void *v21;
  NSObject *v22;
  void *v23;
  uint64_t *v24;
  NSObject *v25;
  void *v26;
  NSObject *v27;
  void *v28;
  _QWORD v29[7];
  void *v30;
  dispatch_object_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  _QWORD v35[7];
  void *v36;
  dispatch_object_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _QWORD v41[7];
  void *v42;
  dispatch_object_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  _QWORD v47[7];
  void *v48;
  dispatch_object_t v49;
  int v50;
  _QWORD v51[7];
  void *v52;
  dispatch_object_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  _QWORD v57[7];
  void *aBlock;
  dispatch_object_t object;
  uint64_t v60;
  uint64_t v61;
  int v62;
  _QWORD v63[7];
  const void *v64;
  dispatch_object_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  char v72;
  uint64_t block;
  uint64_t p_block;
  uint64_t v75;
  void *v76;
  const void *v77;
  char v78;

  v9 = diag::QMICommandDriver::validateCommands_sync(a1, a2);
  if (v9)
  {
    v10 = v9;
    block = 0;
    p_block = (uint64_t)&block;
    v75 = 0x2000000000;
    LODWORD(v76) = 0;
    v69 = 0;
    v70 = &v69;
    v71 = 0x2000000000;
    v72 = 1;
    if ((v9 & 1) != 0)
    {
      v63[0] = MEMORY[0x1E0C809B0];
      v63[1] = 1174405120;
      v63[2] = ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke;
      v63[3] = &unk_1E66E0A28;
      v63[5] = &v69;
      v63[6] = a1;
      v66 = a3;
      v67 = a4;
      v63[4] = &block;
      v68 = v9;
      v11 = *(void **)a5;
      if (*(_QWORD *)a5)
        v11 = _Block_copy(v11);
      v12 = *(NSObject **)(a5 + 8);
      v64 = v11;
      v65 = v12;
      if (v12)
        dispatch_retain(v12);
      ctu::SharedSynchronizable<diag::CommandDriver>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v63);
      if (v65)
        dispatch_release(v65);
      if (v64)
        _Block_release(v64);
    }
    if ((v10 & 4) != 0 && *((_BYTE *)v70 + 24))
    {
      v57[0] = MEMORY[0x1E0C809B0];
      v57[1] = 1174405120;
      v57[2] = ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_66;
      v57[3] = &unk_1E66E0A98;
      v60 = a3;
      v61 = a4;
      v57[4] = &block;
      v57[5] = &v69;
      v57[6] = a1;
      v62 = v10;
      v13 = *(void **)a5;
      if (*(_QWORD *)a5)
        v13 = _Block_copy(v13);
      v14 = *(NSObject **)(a5 + 8);
      aBlock = v13;
      object = v14;
      if (v14)
        dispatch_retain(v14);
      ctu::SharedSynchronizable<diag::CommandDriver>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v57);
      if (object)
        dispatch_release(object);
      if (aBlock)
        _Block_release(aBlock);
    }
    if ((v10 & 8) != 0 && *((_BYTE *)v70 + 24))
    {
      v51[0] = MEMORY[0x1E0C809B0];
      v51[1] = 1174405120;
      v51[2] = ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_70;
      v51[3] = &unk_1E66E0B08;
      v54 = a3;
      v55 = a4;
      v51[4] = &block;
      v51[5] = &v69;
      v51[6] = a1;
      v56 = v10;
      v15 = *(void **)a5;
      if (*(_QWORD *)a5)
        v15 = _Block_copy(v15);
      v16 = *(NSObject **)(a5 + 8);
      v52 = v15;
      v53 = v16;
      if (v16)
        dispatch_retain(v16);
      ctu::SharedSynchronizable<diag::CommandDriver>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v51);
      if (v53)
        dispatch_release(v53);
      if (v52)
        _Block_release(v52);
    }
    if ((v10 & 0x20) != 0 && *((_BYTE *)v70 + 24))
    {
      v47[0] = MEMORY[0x1E0C809B0];
      v47[1] = 1174405120;
      v47[2] = ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_74;
      v47[3] = &unk_1E66E0B78;
      v47[4] = &block;
      v47[5] = &v69;
      v47[6] = a1;
      v50 = v10;
      v17 = *(void **)a5;
      if (*(_QWORD *)a5)
        v17 = _Block_copy(v17);
      v18 = *(NSObject **)(a5 + 8);
      v48 = v17;
      v49 = v18;
      if (v18)
        dispatch_retain(v18);
      ctu::SharedSynchronizable<diag::CommandDriver>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v47);
      if (v49)
        dispatch_release(v49);
      if (v48)
        _Block_release(v48);
    }
    if ((v10 & 0x40) != 0 && *((_BYTE *)v70 + 24))
    {
      v41[0] = MEMORY[0x1E0C809B0];
      v41[1] = 1174405120;
      v41[2] = ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_78;
      v41[3] = &unk_1E66E0BE8;
      v44 = a3;
      v45 = a4;
      v41[4] = &block;
      v41[5] = &v69;
      v41[6] = a1;
      v46 = v10;
      v19 = *(void **)a5;
      if (*(_QWORD *)a5)
        v19 = _Block_copy(v19);
      v20 = *(NSObject **)(a5 + 8);
      v42 = v19;
      v43 = v20;
      if (v20)
        dispatch_retain(v20);
      ctu::SharedSynchronizable<diag::CommandDriver>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v41);
      if (v43)
        dispatch_release(v43);
      if (v42)
        _Block_release(v42);
    }
    if ((v10 & 0x80) != 0 && *((_BYTE *)v70 + 24))
    {
      v35[0] = MEMORY[0x1E0C809B0];
      v35[1] = 1174405120;
      v35[2] = ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_82;
      v35[3] = &unk_1E66E0C58;
      v38 = a3;
      v39 = a4;
      v35[4] = &block;
      v35[5] = &v69;
      v35[6] = a1;
      v40 = v10;
      v21 = *(void **)a5;
      if (*(_QWORD *)a5)
        v21 = _Block_copy(v21);
      v22 = *(NSObject **)(a5 + 8);
      v36 = v21;
      v37 = v22;
      if (v22)
        dispatch_retain(v22);
      ctu::SharedSynchronizable<diag::CommandDriver>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v35);
      if (v37)
        dispatch_release(v37);
      if (v36)
        _Block_release(v36);
    }
    if ((v10 & 0x100) != 0 && *((_BYTE *)v70 + 24))
    {
      v29[0] = MEMORY[0x1E0C809B0];
      v29[1] = 1174405120;
      v29[2] = ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_86;
      v29[3] = &unk_1E66E0CC8;
      v32 = a3;
      v33 = a4;
      v29[4] = &block;
      v29[5] = &v69;
      v29[6] = a1;
      v34 = v10;
      v23 = *(void **)a5;
      if (*(_QWORD *)a5)
        v23 = _Block_copy(v23);
      v24 = (uint64_t *)(a1 + 72);
      v25 = *(NSObject **)(a5 + 8);
      v30 = v23;
      v31 = v25;
      if (v25)
        dispatch_retain(v25);
      ctu::SharedSynchronizable<diag::CommandDriver>::execute_wrapped(v24, (uint64_t)v29);
      if (v31)
        dispatch_release(v31);
      if (v30)
        _Block_release(v30);
    }
    _Block_object_dispose(&v69, 8);
    _Block_object_dispose(&block, 8);
  }
  else
  {
    if (*(_QWORD *)a5)
      v26 = _Block_copy(*(const void **)a5);
    else
      v26 = 0;
    v27 = *(NSObject **)(a5 + 8);
    block = MEMORY[0x1E0C809B0];
    p_block = 1174405120;
    v75 = (uint64_t)___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_0;
    v76 = &__block_descriptor_tmp_97_2;
    if (v26)
      v28 = _Block_copy(v26);
    else
      v28 = 0;
    v77 = v28;
    v78 = 1;
    dispatch_async(v27, &block);
    if (v77)
      _Block_release(v77);
    if (v26)
      _Block_release(v26);
  }
}

void ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void **v4;
  int v5;
  void *v6;
  NSObject *v7;
  void *v8;
  _QWORD aBlock[4];
  __int128 v10;
  void *v11;
  dispatch_object_t object;
  int v13;
  void *v14;
  void *__p;
  char v16;
  uint8_t buf[4];
  void **v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    capabilities::diag::asString();
    v4 = v16 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136315138;
    v18 = v4;
    _os_log_impl(&dword_1B3CB3000, v3, OS_LOG_TYPE_DEFAULT, "#I Setting interface to: %s", buf, 0xCu);
    if (v16 < 0)
      operator delete(__p);
  }
  v5 = *(_DWORD *)(a1 + 72);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_62;
  aBlock[3] = &unk_1E66E09F0;
  v10 = *(_OWORD *)(a1 + 32);
  v13 = *(_DWORD *)(a1 + 88);
  v6 = *(void **)(a1 + 56);
  if (v6)
    v6 = _Block_copy(v6);
  v7 = *(NSObject **)(a1 + 64);
  v11 = v6;
  object = v7;
  if (v7)
    dispatch_retain(v7);
  v8 = _Block_copy(aBlock);
  v14 = v8;
  diag::QMICommandDriver::setInterface_sync(v2, v5, &v14);
  if (v8)
    _Block_release(v8);
  if (object)
    dispatch_release(object);
  if (v11)
    _Block_release(v11);
}

void sub_1B3D86310(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_62(uint64_t a1, char a2)
{
  uint64_t v2;
  char v3;
  const void *v5;
  uint64_t v6;
  char v7;
  void *v8;
  NSObject *v9;
  void *v10;
  _QWORD v11[4];
  void *aBlock;
  char v13;

  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) |= 1u;
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (*(_BYTE *)(v2 + 24))
    v3 = a2;
  else
    v3 = 0;
  *(_BYTE *)(v2 + 24) = v3;
  if (*(_DWORD *)(a1 + 64) == *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    v6 = *(_QWORD *)(a1 + 40);
    v5 = *(const void **)(a1 + 48);
    v7 = *(_BYTE *)(*(_QWORD *)(v6 + 8) + 24);
    if (v5)
      v8 = _Block_copy(v5);
    else
      v8 = 0;
    v9 = *(NSObject **)(a1 + 56);
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 1174405120;
    v11[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_0;
    v11[3] = &__block_descriptor_tmp_97_2;
    if (v8)
      v10 = _Block_copy(v8);
    else
      v10 = 0;
    aBlock = v10;
    v13 = v7;
    dispatch_async(v9, v11);
    if (aBlock)
      _Block_release(aBlock);
    if (v8)
      _Block_release(v8);
  }
}

void __copy_helper_block_e8_48c46_ZTSN8dispatch8callbackIU13block_pointerFvbEEE(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;

  v4 = *(void **)(a2 + 48);
  if (v4)
    v4 = _Block_copy(v4);
  v5 = *(NSObject **)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 56) = v5;
  if (v5)
    dispatch_retain(v5);
}

void __destroy_helper_block_e8_48c46_ZTSN8dispatch8callbackIU13block_pointerFvbEEE(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 56);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 48);
  if (v3)
    _Block_release(v3);
}

void __copy_helper_block_e8_56c46_ZTSN8dispatch8callbackIU13block_pointerFvbEEE(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;

  v4 = *(void **)(a2 + 56);
  if (v4)
    v4 = _Block_copy(v4);
  v5 = *(NSObject **)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v4;
  *(_QWORD *)(a1 + 64) = v5;
  if (v5)
    dispatch_retain(v5);
}

void __destroy_helper_block_e8_56c46_ZTSN8dispatch8callbackIU13block_pointerFvbEEE(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 64);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 56);
  if (v3)
    _Block_release(v3);
}

void ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_66(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void **v4;
  int v5;
  void *v6;
  NSObject *v7;
  void *v8;
  _QWORD aBlock[4];
  __int128 v10;
  void *v11;
  dispatch_object_t object;
  int v13;
  void *v14;
  void *__p;
  char v16;
  uint8_t buf[4];
  void **v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    capabilities::diag::asString();
    v4 = v16 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136315138;
    v18 = v4;
    _os_log_impl(&dword_1B3CB3000, v3, OS_LOG_TYPE_DEFAULT, "#I Setting buffering mode to: %s", buf, 0xCu);
    if (v16 < 0)
      operator delete(__p);
  }
  v5 = *(_DWORD *)(a1 + 76);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_67;
  aBlock[3] = &unk_1E66E0A60;
  v10 = *(_OWORD *)(a1 + 32);
  v13 = *(_DWORD *)(a1 + 88);
  v6 = *(void **)(a1 + 56);
  if (v6)
    v6 = _Block_copy(v6);
  v7 = *(NSObject **)(a1 + 64);
  v11 = v6;
  object = v7;
  if (v7)
    dispatch_retain(v7);
  v8 = _Block_copy(aBlock);
  v14 = v8;
  diag::QMICommandDriver::setBufferingMode_sync(v2, v5, &v14);
  if (v8)
    _Block_release(v8);
  if (object)
    dispatch_release(object);
  if (v11)
    _Block_release(v11);
}

void sub_1B3D866F4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_67(uint64_t a1, char a2)
{
  uint64_t v2;
  char v3;
  const void *v5;
  uint64_t v6;
  char v7;
  void *v8;
  NSObject *v9;
  void *v10;
  _QWORD v11[4];
  void *aBlock;
  char v13;

  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) |= 4u;
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (*(_BYTE *)(v2 + 24))
    v3 = a2;
  else
    v3 = 0;
  *(_BYTE *)(v2 + 24) = v3;
  if (*(_DWORD *)(a1 + 64) == *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    v6 = *(_QWORD *)(a1 + 40);
    v5 = *(const void **)(a1 + 48);
    v7 = *(_BYTE *)(*(_QWORD *)(v6 + 8) + 24);
    if (v5)
      v8 = _Block_copy(v5);
    else
      v8 = 0;
    v9 = *(NSObject **)(a1 + 56);
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 1174405120;
    v11[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_0;
    v11[3] = &__block_descriptor_tmp_97_2;
    if (v8)
      v10 = _Block_copy(v8);
    else
      v10 = 0;
    aBlock = v10;
    v13 = v7;
    dispatch_async(v9, v11);
    if (aBlock)
      _Block_release(aBlock);
    if (v8)
      _Block_release(v8);
  }
}

void ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_70(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  int v4;
  int v5;
  __int16 v6;
  __int16 v7;
  void *v8;
  NSObject *v9;
  void *v10;
  _QWORD v11[4];
  __int128 v12;
  void *aBlock;
  dispatch_object_t object;
  int v15;
  void *v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(unsigned __int16 *)(a1 + 82);
    v5 = *(unsigned __int16 *)(a1 + 80);
    *(_DWORD *)buf = 67109376;
    v18 = v4;
    v19 = 1024;
    v20 = v5;
    _os_log_impl(&dword_1B3CB3000, v3, OS_LOG_TYPE_DEFAULT, "#I Setting water marks to: %u,%u", buf, 0xEu);
  }
  v6 = *(_WORD *)(a1 + 82);
  v7 = *(_WORD *)(a1 + 80);
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 1174405120;
  v11[2] = ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_71;
  v11[3] = &unk_1E66E0AD0;
  v12 = *(_OWORD *)(a1 + 32);
  v15 = *(_DWORD *)(a1 + 88);
  v8 = *(void **)(a1 + 56);
  if (v8)
    v8 = _Block_copy(v8);
  v9 = *(NSObject **)(a1 + 64);
  aBlock = v8;
  object = v9;
  if (v9)
    dispatch_retain(v9);
  v10 = _Block_copy(v11);
  v16 = v10;
  diag::QMICommandDriver::setWaterMarks_sync(v2, v6, v7, &v16);
  if (v10)
    _Block_release(v10);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void sub_1B3D869C0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_71(uint64_t a1, char a2)
{
  uint64_t v2;
  char v3;
  const void *v5;
  uint64_t v6;
  char v7;
  void *v8;
  NSObject *v9;
  void *v10;
  _QWORD v11[4];
  void *aBlock;
  char v13;

  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) |= 8u;
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (*(_BYTE *)(v2 + 24))
    v3 = a2;
  else
    v3 = 0;
  *(_BYTE *)(v2 + 24) = v3;
  if (*(_DWORD *)(a1 + 64) == *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    v6 = *(_QWORD *)(a1 + 40);
    v5 = *(const void **)(a1 + 48);
    v7 = *(_BYTE *)(*(_QWORD *)(v6 + 8) + 24);
    if (v5)
      v8 = _Block_copy(v5);
    else
      v8 = 0;
    v9 = *(NSObject **)(a1 + 56);
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 1174405120;
    v11[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_0;
    v11[3] = &__block_descriptor_tmp_97_2;
    if (v8)
      v10 = _Block_copy(v8);
    else
      v10 = 0;
    aBlock = v10;
    v13 = v7;
    dispatch_async(v9, v11);
    if (aBlock)
      _Block_release(aBlock);
    if (v8)
      _Block_release(v8);
  }
}

void ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_74(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void *v4;
  NSObject *v5;
  void *v6;
  _QWORD v7[4];
  __int128 v8;
  void *aBlock;
  dispatch_object_t object;
  int v11;
  void *v12;
  uint8_t buf[16];

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B3CB3000, v3, OS_LOG_TYPE_DEFAULT, "#I Draining Baseband DIAG buffer", buf, 2u);
  }
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1174405120;
  v7[2] = ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_75;
  v7[3] = &unk_1E66E0B40;
  v8 = *(_OWORD *)(a1 + 32);
  v11 = *(_DWORD *)(a1 + 72);
  v4 = *(void **)(a1 + 56);
  if (v4)
    v4 = _Block_copy(v4);
  v5 = *(NSObject **)(a1 + 64);
  aBlock = v4;
  object = v5;
  if (v5)
    dispatch_retain(v5);
  v6 = _Block_copy(v7);
  v12 = v6;
  diag::QMICommandDriver::drainBuffer_sync(v2, &v12);
  if (v6)
    _Block_release(v6);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void sub_1B3D86C34(_Unwind_Exception *a1)
{
  const void *v1;
  uint64_t v2;

  if (v1)
    _Block_release(v1);
  dispatch::callback<void({block_pointer})(BOOL)>::~callback(v2);
  _Unwind_Resume(a1);
}

void ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_75(uint64_t a1, char a2)
{
  uint64_t v2;
  char v3;
  const void *v5;
  uint64_t v6;
  char v7;
  void *v8;
  NSObject *v9;
  void *v10;
  _QWORD v11[4];
  void *aBlock;
  char v13;

  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) |= 0x20u;
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (*(_BYTE *)(v2 + 24))
    v3 = a2;
  else
    v3 = 0;
  *(_BYTE *)(v2 + 24) = v3;
  if (*(_DWORD *)(a1 + 64) == *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    v6 = *(_QWORD *)(a1 + 40);
    v5 = *(const void **)(a1 + 48);
    v7 = *(_BYTE *)(*(_QWORD *)(v6 + 8) + 24);
    if (v5)
      v8 = _Block_copy(v5);
    else
      v8 = 0;
    v9 = *(NSObject **)(a1 + 56);
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 1174405120;
    v11[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_0;
    v11[3] = &__block_descriptor_tmp_97_2;
    if (v8)
      v10 = _Block_copy(v8);
    else
      v10 = 0;
    aBlock = v10;
    v13 = v7;
    dispatch_async(v9, v11);
    if (aBlock)
      _Block_release(aBlock);
    if (v8)
      _Block_release(v8);
  }
}

void ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_78(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  int v4;
  char v5;
  void *v6;
  NSObject *v7;
  void *v8;
  _QWORD v9[4];
  __int128 v10;
  void *aBlock;
  dispatch_object_t object;
  int v13;
  void *v14;
  uint8_t buf[4];
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(unsigned __int8 *)(a1 + 84);
    *(_DWORD *)buf = 67109120;
    v16 = v4;
    _os_log_impl(&dword_1B3CB3000, v3, OS_LOG_TYPE_DEFAULT, "#I Setting logging preset ID to: %u", buf, 8u);
  }
  v5 = *(_BYTE *)(a1 + 84);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 1174405120;
  v9[2] = ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_79;
  v9[3] = &unk_1E66E0BB0;
  v10 = *(_OWORD *)(a1 + 32);
  v13 = *(_DWORD *)(a1 + 88);
  v6 = *(void **)(a1 + 56);
  if (v6)
    v6 = _Block_copy(v6);
  v7 = *(NSObject **)(a1 + 64);
  aBlock = v6;
  object = v7;
  if (v7)
    dispatch_retain(v7);
  v8 = _Block_copy(v9);
  v14 = v8;
  diag::QMICommandDriver::setPresetID_sync(v2, v5, &v14);
  if (v8)
    _Block_release(v8);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void sub_1B3D86EC0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_79(uint64_t a1, char a2)
{
  uint64_t v2;
  char v3;
  const void *v5;
  uint64_t v6;
  char v7;
  void *v8;
  NSObject *v9;
  void *v10;
  _QWORD v11[4];
  void *aBlock;
  char v13;

  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) |= 0x40u;
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (*(_BYTE *)(v2 + 24))
    v3 = a2;
  else
    v3 = 0;
  *(_BYTE *)(v2 + 24) = v3;
  if (*(_DWORD *)(a1 + 64) == *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    v6 = *(_QWORD *)(a1 + 40);
    v5 = *(const void **)(a1 + 48);
    v7 = *(_BYTE *)(*(_QWORD *)(v6 + 8) + 24);
    if (v5)
      v8 = _Block_copy(v5);
    else
      v8 = 0;
    v9 = *(NSObject **)(a1 + 56);
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 1174405120;
    v11[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_0;
    v11[3] = &__block_descriptor_tmp_97_2;
    if (v8)
      v10 = _Block_copy(v8);
    else
      v10 = 0;
    aBlock = v10;
    v13 = v7;
    dispatch_async(v9, v11);
    if (aBlock)
      _Block_release(aBlock);
    if (v8)
      _Block_release(v8);
  }
}

void ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_82(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  int v4;
  char v5;
  void *v6;
  NSObject *v7;
  void *v8;
  _QWORD v9[4];
  __int128 v10;
  void *aBlock;
  dispatch_object_t object;
  int v13;
  void *v14;
  uint8_t buf[4];
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(unsigned __int8 *)(a1 + 84);
    *(_DWORD *)buf = 67109120;
    v16 = v4;
    _os_log_impl(&dword_1B3CB3000, v3, OS_LOG_TYPE_DEFAULT, "#I Checking if DIAG preset ID is: %u", buf, 8u);
  }
  v5 = *(_BYTE *)(a1 + 84);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 1174405120;
  v9[2] = ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_83;
  v9[3] = &unk_1E66E0C20;
  v10 = *(_OWORD *)(a1 + 32);
  v13 = *(_DWORD *)(a1 + 88);
  v6 = *(void **)(a1 + 56);
  if (v6)
    v6 = _Block_copy(v6);
  v7 = *(NSObject **)(a1 + 64);
  aBlock = v6;
  object = v7;
  if (v7)
    dispatch_retain(v7);
  v8 = _Block_copy(v9);
  v14 = v8;
  diag::QMICommandDriver::isCurrentPresetID_sync(v2, v5, &v14);
  if (v8)
    _Block_release(v8);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void sub_1B3D8716C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_83(uint64_t a1, char a2)
{
  uint64_t v2;
  char v3;
  const void *v5;
  uint64_t v6;
  char v7;
  void *v8;
  NSObject *v9;
  void *v10;
  _QWORD v11[4];
  void *aBlock;
  char v13;

  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) |= 0x80u;
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (*(_BYTE *)(v2 + 24))
    v3 = a2;
  else
    v3 = 0;
  *(_BYTE *)(v2 + 24) = v3;
  if (*(_DWORD *)(a1 + 64) == *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    v6 = *(_QWORD *)(a1 + 40);
    v5 = *(const void **)(a1 + 48);
    v7 = *(_BYTE *)(*(_QWORD *)(v6 + 8) + 24);
    if (v5)
      v8 = _Block_copy(v5);
    else
      v8 = 0;
    v9 = *(NSObject **)(a1 + 56);
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 1174405120;
    v11[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_0;
    v11[3] = &__block_descriptor_tmp_97_2;
    if (v8)
      v10 = _Block_copy(v8);
    else
      v10 = 0;
    aBlock = v10;
    v13 = v7;
    dispatch_async(v9, v11);
    if (aBlock)
      _Block_release(aBlock);
    if (v8)
      _Block_release(v8);
  }
}

void ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_86(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void **v4;
  int v5;
  void *v6;
  NSObject *v7;
  void *v8;
  _QWORD aBlock[4];
  __int128 v10;
  void *v11;
  dispatch_object_t object;
  int v13;
  void *v14;
  void *__p;
  char v16;
  uint8_t buf[4];
  void **v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    capabilities::diag::asString();
    v4 = v16 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136315138;
    v18 = v4;
    _os_log_impl(&dword_1B3CB3000, v3, OS_LOG_TYPE_DEFAULT, "#I Checking if DIAG is active on: %s", buf, 0xCu);
    if (v16 < 0)
      operator delete(__p);
  }
  v5 = *(_DWORD *)(a1 + 72);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_87;
  aBlock[3] = &unk_1E66E0C90;
  v10 = *(_OWORD *)(a1 + 32);
  v13 = *(_DWORD *)(a1 + 88);
  v6 = *(void **)(a1 + 56);
  if (v6)
    v6 = _Block_copy(v6);
  v7 = *(NSObject **)(a1 + 64);
  v11 = v6;
  object = v7;
  if (v7)
    dispatch_retain(v7);
  v8 = _Block_copy(aBlock);
  v14 = v8;
  diag::QMICommandDriver::isCurrentInterface_sync(v2, v5, &v14);
  if (v8)
    _Block_release(v8);
  if (object)
    dispatch_release(object);
  if (v11)
    _Block_release(v11);
}

void sub_1B3D87448(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN4diag16QMICommandDriver7performENS_13CommandDriver7CommandENS1_7OptionsEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_87(uint64_t a1, char a2)
{
  uint64_t v2;
  char v3;
  const void *v5;
  uint64_t v6;
  char v7;
  void *v8;
  NSObject *v9;
  void *v10;
  _QWORD v11[4];
  void *aBlock;
  char v13;

  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) |= 0x100u;
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (*(_BYTE *)(v2 + 24))
    v3 = a2;
  else
    v3 = 0;
  *(_BYTE *)(v2 + 24) = v3;
  if (*(_DWORD *)(a1 + 64) == *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    v6 = *(_QWORD *)(a1 + 40);
    v5 = *(const void **)(a1 + 48);
    v7 = *(_BYTE *)(*(_QWORD *)(v6 + 8) + 24);
    if (v5)
      v8 = _Block_copy(v5);
    else
      v8 = 0;
    v9 = *(NSObject **)(a1 + 56);
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 1174405120;
    v11[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_0;
    v11[3] = &__block_descriptor_tmp_97_2;
    if (v8)
      v10 = _Block_copy(v8);
    else
      v10 = 0;
    aBlock = v10;
    v13 = v7;
    dispatch_async(v9, v11);
    if (aBlock)
      _Block_release(aBlock);
    if (v8)
      _Block_release(v8);
  }
}

uint64_t ctu::Loggable<diag::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<diag::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(diag::CommandDriver *a1@<X0>, _QWORD *a2@<X8>)
{
  const char *Name;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  Name = (const char *)diag::CommandDriver::getName(a1);
  result = strlen(Name);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, Name, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<diag::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<diag::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E66E0E08;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<diag::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E66E0E08;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void std::__shared_ptr_pointer<diag::QMICommandDriver *,std::shared_ptr<diag::QMICommandDriver> ctu::SharedSynchronizable<diag::CommandDriver>::make_shared_ptr<diag::QMICommandDriver>(diag::QMICommandDriver*)::{lambda(diag::QMICommandDriver *)#1},std::allocator<diag::QMICommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<diag::QMICommandDriver *,std::shared_ptr<diag::QMICommandDriver> ctu::SharedSynchronizable<diag::CommandDriver>::make_shared_ptr<diag::QMICommandDriver>(diag::QMICommandDriver*)::{lambda(diag::QMICommandDriver *)#1},std::allocator<diag::QMICommandDriver>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<diag::QMICommandDriver> ctu::SharedSynchronizable<diag::CommandDriver>::make_shared_ptr<diag::QMICommandDriver>(diag::QMICommandDriver*)::{lambda(diag::QMICommandDriver*)#1}::operator() const(diag::QMICommandDriver*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<diag::QMICommandDriver *,std::shared_ptr<diag::QMICommandDriver> ctu::SharedSynchronizable<diag::CommandDriver>::make_shared_ptr<diag::QMICommandDriver>(diag::QMICommandDriver*)::{lambda(diag::QMICommandDriver *)#1},std::allocator<diag::QMICommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN4diag13CommandDriverEE15make_shared_ptrINS1_16QMICommandDriverEEENSt3"
                     "__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN4diag13CommandDriverEE15make_shared_ptrINS1_16QMICommandDr"
                                "iverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN4diag13CommandDriverEE15make_shared_ptrINS1_16QMICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN4diag13CommandDriverEE15make_shared_ptrINS1_16QMICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<diag::QMICommandDriver> ctu::SharedSynchronizable<diag::CommandDriver>::make_shared_ptr<diag::QMICommandDriver>(diag::QMICommandDriver*)::{lambda(diag::QMICommandDriver*)#1}::operator() const(diag::QMICommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::DIAGConfig>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::DIAGConfig>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::DIAGConfig>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66E0ED0;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

void ctu::SharedSynchronizable<diag::CommandDriver>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN4diag13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E66E0F00;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN4diag13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrIKN4diag13CommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrIKN4diag13CommandDriverEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  cast_message_type<qmi::ResponseBase const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1B3D879F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::DIAGBuffering>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::DIAGBuffering>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::DIAGBuffering>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66E0F80;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::DIAGWMLow>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::DIAGWMLow>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::DIAGWMLow>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66E0FD0;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::DIAGWMHigh>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::DIAGWMHigh>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::DIAGWMHigh>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66E1020;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::DIAGPresetID>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::DIAGPresetID>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::DIAGPresetID>::clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = off_1E66E1070;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm15DIAGGetPresetID8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D87CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D87CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D87CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm9DIAGProbe8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D87DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D87DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D87DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void data::QMIDataCommandDriver::checkError(const qmi::ResponseBase *a1@<X1>, CFTypeRef *a2@<X8>)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  const char *v11;
  size_t v12;
  _QWORD *v13;
  _QWORD *v14;
  size_t v15;
  void **v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  CFTypeRef v21;
  void *__dst[2];
  unint64_t v23;
  CFTypeRef cf;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  void *__p[2];
  __int128 v31;
  unint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  *a2 = 0;
  if (!*((_DWORD *)a1 + 1))
    return;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v32 = 0xAAAAAAAAAAAAAAAALL;
  v42 = v4;
  v41 = v4;
  v40 = v4;
  v39 = v4;
  v38 = v4;
  v37 = v4;
  v36 = v4;
  v35 = v4;
  v34 = v4;
  *(_OWORD *)__p = v4;
  v31 = v4;
  v28 = v4;
  v29 = v4;
  v26 = v4;
  v27 = v4;
  v5 = MEMORY[0x1E0DE4FE0];
  v6 = MEMORY[0x1E0DE4FE0] + 64;
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v7 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v25 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  *(uint64_t *)((char *)&v25 + *(_QWORD *)(v25 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v25 + *(_QWORD *)(v25 - 24));
  std::ios_base::init(v9, &v26);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v25 = v5 + 24;
  v33 = v6;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&v26 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v31 = 0u;
  LODWORD(v32) = 16;
  v11 = (const char *)qmi::asString();
  v12 = strlen(v11);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v25, (uint64_t)v11, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"(", 3);
  v14 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)")", 2);
  if ((v32 & 0x10) != 0)
  {
    v17 = *((_QWORD *)&v31 + 1);
    if (*((_QWORD *)&v31 + 1) < (unint64_t)v29)
    {
      *((_QWORD *)&v31 + 1) = v29;
      v17 = v29;
    }
    v18 = (const void *)*((_QWORD *)&v28 + 1);
    v15 = v17 - *((_QWORD *)&v28 + 1);
    if ((unint64_t)(v17 - *((_QWORD *)&v28 + 1)) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_27;
  }
  else
  {
    if ((v32 & 8) == 0)
    {
      v15 = 0;
      HIBYTE(v23) = 0;
      v16 = __dst;
      goto LABEL_15;
    }
    v18 = (const void *)v27;
    v15 = v28 - v27;
    if ((_QWORD)v28 - (_QWORD)v27 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_27:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v15 >= 0x17)
  {
    v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v19 = v15 | 7;
    v20 = v19 + 1;
    v16 = (void **)operator new(v19 + 1);
    __dst[1] = (void *)v15;
    v23 = v20 | 0x8000000000000000;
    __dst[0] = v16;
    goto LABEL_14;
  }
  HIBYTE(v23) = v15;
  v16 = __dst;
  if (v15)
LABEL_14:
    memmove(v16, v18, v15);
LABEL_15:
  *((_BYTE *)v16 + v15) = 0;
  CreateError();
  if (&cf == a2)
    goto LABEL_18;
  v21 = *a2;
  *a2 = cf;
  cf = 0;
  if (v21)
  {
    CFRelease(v21);
LABEL_18:
    if (cf)
      CFRelease(cf);
  }
  if (SHIBYTE(v23) < 0)
    operator delete(__dst[0]);
  v25 = *v7;
  *(uint64_t *)((char *)&v25 + *(_QWORD *)(v25 - 24)) = v7[3];
  *(_QWORD *)&v26 = v10 + 16;
  if (SBYTE7(v31) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B5E2F6FC](&v33);
}

void sub_1B3D880F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  const void **v17;

  if (a15 < 0)
  {
    operator delete(__p);
    std::ostringstream::~ostringstream((uint64_t)&a17);
    ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(v17);
    _Unwind_Resume(a1);
  }
  std::ostringstream::~ostringstream((uint64_t)&a17);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(v17);
  _Unwind_Resume(a1);
}

uint64_t data::QMIDataCommandDriver::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  void *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v21[2];
  uint64_t v22;
  std::__shared_weak_count *v23;

  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  v6 = operator new(0xB0uLL);
  v7 = (uint64_t)v6;
  v8 = (std::__shared_weak_count *)a1[1];
  v22 = *a1;
  v23 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = *a2;
  v12 = (std::__shared_weak_count *)a2[1];
  v21[0] = v11;
  v21[1] = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  data::QMIDataCommandDriver::QMIDataCommandDriver((uint64_t)v6, (uint64_t)&v22, (uint64_t)v21);
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<data::QMIDataCommandDriver>::shared_ptr[abi:ne180100]<data::QMIDataCommandDriver,std::shared_ptr<data::QMIDataCommandDriver> ctu::SharedSynchronizable<data::CommandDriver>::make_shared_ptr<data::QMIDataCommandDriver>(data::QMIDataCommandDriver*)::{lambda(data::QMIDataCommandDriver*)#1},void>(a3, v7);
  ctu::Loggable<data::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a3);
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v17 = v23;
  if (v23)
  {
    v18 = (unint64_t *)&v23->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 112))(*a3);
}

void sub_1B3D882C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1B3D882D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v11);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t data::QMIDataCommandDriver::QMIDataCommandDriver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;

  v4 = *(std::__shared_weak_count **)(a2 + 8);
  v16 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *(std::__shared_weak_count **)(a3 + 8);
  v15 = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  data::CommandDriver::CommandDriver();
  if (v15)
  {
    v10 = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  *(_QWORD *)a1 = off_1E66E1128;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  return a1;
}

void sub_1B3D88410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void data::CommandDriver::~CommandDriver(void **this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  NSObject *v5;
  NSObject *v6;
  std::__shared_weak_count *v7;

  *this = off_1E66E1778;
  if (*((char *)this + 143) < 0)
  {
    operator delete(this[15]);
    v2 = (std::__shared_weak_count *)this[14];
    if (!v2)
      goto LABEL_9;
  }
  else
  {
    v2 = (std::__shared_weak_count *)this[14];
    if (!v2)
      goto LABEL_9;
  }
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
LABEL_9:
  *this = off_1E66E1800;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v5 = this[12];
  if (v5)
    dispatch_release(v5);
  v6 = this[11];
  if (v6)
    dispatch_release(v6);
  v7 = (std::__shared_weak_count *)this[10];
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
}

void data::QMIDataCommandDriver::~QMIDataCommandDriver(void **this)
{
  *this = off_1E66E1128;
  qmi::Client::~Client((qmi::Client *)(this + 18));
  data::CommandDriver::~CommandDriver(this);
}

{
  *this = off_1E66E1128;
  qmi::Client::~Client((qmi::Client *)(this + 18));
  data::CommandDriver::~CommandDriver(this);
}

{
  void *v2;

  *this = off_1E66E1128;
  qmi::Client::~Client((qmi::Client *)(this + 18));
  data::CommandDriver::~CommandDriver(this);
  operator delete(v2);
}

void data::QMIDataCommandDriver::init(data::QMIDataCommandDriver *this)
{
  std::__shared_weak_count *v3;
  uint64_t *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  _QWORD v13[6];
  std::__shared_weak_count *v14;

  v5 = *((_QWORD *)this + 9);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  v4 = (uint64_t *)((char *)this + 72);
  if (!v3 || (v6 = std::__shared_weak_count::lock(v3)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 1174405120;
  v13[2] = ___ZN4data20QMIDataCommandDriver4initEv_block_invoke;
  v13[3] = &__block_descriptor_tmp_11_3;
  v13[4] = this;
  v13[5] = v5;
  v14 = v7;
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  ctu::SharedSynchronizable<data::CommandDriver>::execute_wrapped(v4, (uint64_t)v13);
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
  std::__shared_weak_count::__release_weak(v7);
}

void ___ZN4data20QMIDataCommandDriver4initEv_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  const char *v4;
  size_t v5;
  size_t v6;
  void **v7;
  NSObject *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  NSObject *v29;
  qmi::Client *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  const char *Name;
  size_t v49;
  size_t v50;
  void **p_dst;
  NSObject *v52;
  std::__shared_weak_count *v53;
  std::__shared_weak_count *v54;
  std::__shared_weak_count *v55;
  unint64_t *p_shared_weak_owners;
  unint64_t v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  __int128 v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count *v79;
  NSObject *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  NSObject *v83;
  void **__dst;
  size_t v85;
  unint64_t v86;
  uint8_t buf[8];
  std::__shared_weak_count *v88;
  __int128 v89;
  unint64_t v90;
  unint64_t v91;

  v2 = a1[4];
  v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B3CB3000, v3, OS_LOG_TYPE_DEFAULT, "#I Initializing", buf, 2u);
  }
  v90 = 0xAAAAAAAAAAAAAAAALL;
  v91 = 0xAAAAAAAAAAAAAAAALL;
  Registry::getServerConnection(*(Registry **)(v2 + 104));
  if (!v90)
  {
    Name = (const char *)data::CommandDriver::getName((data::CommandDriver *)v2);
    v49 = strlen(Name);
    if (v49 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v50 = v49;
    if (v49 >= 0x17)
    {
      v74 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v49 | 7) != 0x17)
        v74 = v49 | 7;
      v75 = v74 + 1;
      p_dst = (void **)operator new(v74 + 1);
      v85 = v50;
      v86 = v75 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v86) = v49;
      p_dst = (void **)&__dst;
      if (!v49)
      {
        LOBYTE(__dst) = 0;
        v52 = *(NSObject **)(v2 + 88);
        v80 = v52;
        if (!v52)
        {
LABEL_66:
          v53 = *(std::__shared_weak_count **)(v2 + 80);
          if (!v53 || (v54 = std::__shared_weak_count::lock(v53)) == 0)
            std::__throw_bad_weak_ptr[abi:ne180100]();
          v55 = v54;
          p_shared_weak_owners = (unint64_t *)&v54->__shared_weak_owners_;
          do
            v57 = __ldxr(p_shared_weak_owners);
          while (__stxr(v57 + 1, p_shared_weak_owners));
          p_shared_owners = (unint64_t *)&v54->__shared_owners_;
          do
            v59 = __ldaxr(p_shared_owners);
          while (__stlxr(v59 - 1, p_shared_owners));
          if (v59)
          {
            v60 = std::__shared_weak_count::lock(v54);
            if (v60)
              goto LABEL_74;
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v55);
            v60 = std::__shared_weak_count::lock(v55);
            if (v60)
            {
LABEL_74:
              v61 = (unint64_t *)&v60->__shared_weak_owners_;
              do
                v62 = __ldxr(v61);
              while (__stxr(v62 + 1, v61));
              v79 = v60;
LABEL_77:
              std::__shared_weak_count::__release_weak(v55);
              if (v60)
              {
                v63 = (unint64_t *)&v60->__shared_owners_;
                do
                  v64 = __ldaxr(v63);
                while (__stlxr(v64 - 1, v63));
                if (!v64)
                {
                  ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                  std::__shared_weak_count::__release_weak(v60);
                }
              }
              qmi::Client::createWithQueue();
              v65 = v89;
              v89 = 0uLL;
              v66 = *(std::__shared_weak_count **)(v2 + 168);
              *(_OWORD *)(v2 + 160) = v65;
              if (v66)
              {
                v67 = (unint64_t *)&v66->__shared_owners_;
                do
                  v68 = __ldaxr(v67);
                while (__stlxr(v68 - 1, v67));
                if (!v68)
                {
                  ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                  std::__shared_weak_count::__release_weak(v66);
                }
              }
              qmi::Client::~Client((qmi::Client *)buf);
              if (v79)
                std::__shared_weak_count::__release_weak(v79);
              v29 = v80;
              if (v80)
                goto LABEL_41;
              goto LABEL_42;
            }
          }
          v79 = v60;
          goto LABEL_77;
        }
LABEL_65:
        dispatch_retain(v52);
        goto LABEL_66;
      }
    }
    memmove(p_dst, Name, v50);
    *((_BYTE *)p_dst + v50) = 0;
    v52 = *(NSObject **)(v2 + 88);
    v80 = v52;
    if (!v52)
      goto LABEL_66;
    goto LABEL_65;
  }
  v4 = (const char *)data::CommandDriver::getName((data::CommandDriver *)v2);
  v5 = strlen(v4);
  if (v5 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v69 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v69 = v5 | 7;
    v70 = v69 + 1;
    v7 = (void **)operator new(v69 + 1);
    v85 = v6;
    v86 = v70 | 0x8000000000000000;
    __dst = v7;
LABEL_94:
    memmove(v7, v4, v6);
    *((_BYTE *)v7 + v6) = 0;
    v8 = *(NSObject **)(v2 + 88);
    v83 = v8;
    if (!v8)
      goto LABEL_9;
    goto LABEL_8;
  }
  HIBYTE(v86) = v5;
  v7 = (void **)&__dst;
  if (v5)
    goto LABEL_94;
  LOBYTE(__dst) = 0;
  v8 = *(NSObject **)(v2 + 88);
  v83 = v8;
  if (v8)
LABEL_8:
    dispatch_retain(v8);
LABEL_9:
  v9 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v9 || (v10 = std::__shared_weak_count::lock(v9)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v11 = v10;
  v12 = (unint64_t *)&v10->__shared_weak_owners_;
  do
    v13 = __ldxr(v12);
  while (__stxr(v13 + 1, v12));
  v14 = (unint64_t *)&v10->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
  {
    v16 = std::__shared_weak_count::lock(v10);
    if (v16)
      goto LABEL_17;
LABEL_97:
    v82 = v16;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v11);
  v16 = std::__shared_weak_count::lock(v11);
  if (!v16)
    goto LABEL_97;
LABEL_17:
  v17 = (unint64_t *)&v16->__shared_weak_owners_;
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
  v82 = v16;
LABEL_20:
  std::__shared_weak_count::__release_weak(v11);
  if (v16)
  {
    v19 = (unint64_t *)&v16->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v81 = (std::__shared_weak_count *)v91;
  if (v91)
  {
    v21 = (unint64_t *)(v91 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  qmi::Client::createWithQueueLocal();
  v23 = v89;
  v89 = 0uLL;
  v24 = *(std::__shared_weak_count **)(v2 + 168);
  *(_OWORD *)(v2 + 160) = v23;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  qmi::Client::~Client((qmi::Client *)buf);
  if (v81)
  {
    v27 = (unint64_t *)&v81->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  if (v82)
    std::__shared_weak_count::__release_weak(v82);
  v29 = v83;
  if (v83)
LABEL_41:
    dispatch_release(v29);
LABEL_42:
  if (SHIBYTE(v86) < 0)
    operator delete(__dst);
  v30 = (qmi::Client *)(v2 + 144);
  v31 = (std::__shared_weak_count *)a1[6];
  v78 = v31;
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_weak_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  qmi::Client::setHandler();
  v34 = (std::__shared_weak_count *)a1[6];
  v77 = v34;
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_weak_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  qmi::Client::setHandler();
  v37 = (std::__shared_weak_count *)a1[6];
  v76 = v37;
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_weak_owners_;
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  qmi::Client::setHandler();
  *(_QWORD *)buf = 0;
  v88 = 0;
  v40 = (std::__shared_weak_count *)a1[6];
  if (v40)
  {
    v41 = std::__shared_weak_count::lock(v40);
    if (v41)
    {
      v42 = v41;
      v43 = a1[5];
      v44 = (unint64_t *)&v41->__shared_weak_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
      *(_QWORD *)buf = v43;
      v88 = v41;
      v46 = (unint64_t *)&v41->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    else
    {
      *(_QWORD *)buf = 0;
      v88 = 0;
    }
  }
  qmi::Client::setClientHandle();
  if (v88)
    std::__shared_weak_count::__release_weak(v88);
  qmi::Client::start(v30);
  if (v76)
    std::__shared_weak_count::__release_weak(v76);
  if (v77)
    std::__shared_weak_count::__release_weak(v77);
  if (v78)
    std::__shared_weak_count::__release_weak(v78);
  v71 = (std::__shared_weak_count *)v91;
  if (v91)
  {
    v72 = (unint64_t *)(v91 + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
}

void sub_1B3D88E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,std::__shared_weak_count *a32,dispatch_object_t object,char a34)
{
  uint64_t v34;
  NSObject *v36;

  if (a32)
  {
    std::__shared_weak_count::__release_weak(a32);
    if ((*(char *)(v34 - 161) & 0x80000000) == 0)
    {
LABEL_3:
      v36 = object;
      if (!object)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v34 - 161) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v34 - 184));
  v36 = object;
  if (!object)
  {
LABEL_8:
    if (*(char *)(v34 - 129) < 0)
    {
      operator delete(*(void **)(v34 - 152));
      std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v34 - 96);
      _Unwind_Resume(a1);
    }
    std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v34 - 96);
    _Unwind_Resume(a1);
  }
LABEL_7:
  dispatch_release(v36);
  goto LABEL_8;
}

void ___ZN4data20QMIDataCommandDriver4initEv_block_invoke_4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint8_t v9[16];

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v9 = 0;
          _os_log_impl(&dword_1B3CB3000, v6, OS_LOG_TYPE_DEFAULT, "#I Stopped", v9, 2u);
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

uint64_t __copy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrIN4data13CommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrIN4data13CommandDriverEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN4data20QMIDataCommandDriver4initEv_block_invoke_6(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint8_t v9[16];

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v9 = 0;
          _os_log_impl(&dword_1B3CB3000, v6, OS_LOG_TYPE_DEFAULT, "#I Started", v9, 2u);
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void ___ZN4data20QMIDataCommandDriver4initEv_block_invoke_8(_QWORD *a1, xpc_object_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  void *v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint8_t buf[4];
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        if (a2)
          xpc_retain(a2);
        else
          a2 = xpc_null_create();
        v8 = (void *)MEMORY[0x1B5E2FB34](a2);
        v9 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          v13 = v8;
          _os_log_impl(&dword_1B3CB3000, v9, OS_LOG_TYPE_DEFAULT, "#I Server error %s", buf, 0xCu);
        }
        free(v8);
        xpc_release(a2);
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1B3D89298(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void data::QMIDataCommandDriver::getDataAggregationMaxDatagrams(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  NSObject *v6;
  _QWORD v7[5];
  void *aBlock;
  dispatch_object_t object;

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1174405120;
  v7[2] = ___ZN4data20QMIDataCommandDriver30getDataAggregationMaxDatagramsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_18_9;
  v7[4] = a1;
  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = (uint64_t *)(a1 + 72);
  v6 = *(NSObject **)(a2 + 8);
  aBlock = v4;
  object = v6;
  if (v6)
    dispatch_retain(v6);
  ctu::SharedSynchronizable<data::CommandDriver>::execute_wrapped(v5, (uint64_t)v7);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void ___ZN4data20QMIDataCommandDriver30getDataAggregationMaxDatagramsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  __int128 v3;
  const void **v4;
  char *v5;
  char *v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  void *v10;
  _QWORD v11[5];
  void *v12;
  dispatch_object_t object;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  void *v18;
  __int128 v19;
  __int128 v20;
  _QWORD aBlock[5];

  v2 = a1[4];
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v19 = v3;
  v20 = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v19);
  v4 = (const void **)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1) != (_QWORD)v20)
  {
    while (*((_BYTE *)*v4 + 8) != 16)
    {
      if (++v4 == (const void **)v20)
        goto LABEL_8;
    }
  }
  if (v4 == (const void **)v20)
  {
LABEL_8:
    v6 = qmi::MutableMessageBase::createTLV<wda::tlv::abm::PeripheralEndPointID>(&v19, 16);
  }
  else
  {
    if (!v5)
      __cxa_bad_cast();
    v6 = v5 + 12;
  }
  *(_QWORD *)v6 = 0x400000003;
  v14 = v2 + 144;
  v15 = QMIServiceMsg::create();
  v16 = 25000;
  v17 = 0;
  v18 = 0;
  v7 = MEMORY[0x1E0C809B0];
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 1174405120;
  v11[2] = ___ZN4data20QMIDataCommandDriver30getDataAggregationMaxDatagramsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEE_block_invoke_3;
  v11[3] = &__block_descriptor_tmp_17_4;
  v11[4] = v2;
  v8 = (void *)a1[5];
  if (v8)
    v8 = _Block_copy(v8);
  v9 = a1[6];
  v12 = v8;
  object = v9;
  if (v9)
    dispatch_retain(v9);
  aBlock[0] = v7;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wda3abm13GetDataFormat8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66E1940;
  aBlock[4] = v11;
  v10 = _Block_copy(aBlock);
  v18 = v10;
  if (v15)
  {
    qmi::Client::send();
    v10 = v18;
  }
  if (v10)
    _Block_release(v10);
  if (object)
    dispatch_release(object);
  if (v12)
    _Block_release(v12);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v19);
}

void sub_1B3D89534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,xpc::object)>::~callback(v8);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1B3D89558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1B3D8956C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN4data20QMIDataCommandDriver30getDataAggregationMaxDatagramsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEE_block_invoke_3(uint64_t a1, const qmi::ResponseBase *a2)
{
  CFTypeRef v4;
  uint64_t (*v5)(uint64_t);
  xpc_object_t v6;
  const void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  tlv *TlvValue;
  int v12;
  tlv *v13;
  NSObject *v14;
  _QWORD v15[2];
  void (*v16)(_QWORD *, int *);
  void *v17;
  void *aBlock;
  dispatch_object_t object;
  CFTypeRef v20;
  CFTypeRef cf;
  _QWORD block[4];
  void *v23;
  CFTypeRef v24;
  xpc_object_t v25;

  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  data::QMIDataCommandDriver::checkError(a2, &cf);
  v4 = cf;
  v5 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!cf)
    v5 = 0;
  if (v5)
  {
    if (!*(_QWORD *)(a1 + 40) || !*(_QWORD *)(a1 + 48))
      goto LABEL_41;
    if (cf)
      CFRetain(cf);
    v6 = xpc_null_create();
    v7 = *(const void **)(a1 + 40);
    if (v7)
      v8 = _Block_copy(v7);
    else
      v8 = 0;
    v14 = *(NSObject **)(a1 + 48);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 1174405120;
    block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEclIJS5_NS6_4dictEEEEvDpT__block_invoke;
    block[3] = &__block_descriptor_tmp_94_1;
    if (v8)
    {
      v23 = _Block_copy(v8);
      v24 = v4;
      if (!v4)
        goto LABEL_30;
    }
    else
    {
      v23 = 0;
      v24 = v4;
      if (!v4)
      {
LABEL_30:
        v25 = v6;
        if (v6)
          xpc_retain(v6);
        else
          v25 = xpc_null_create();
        dispatch_async(v14, block);
        xpc_release(v25);
        v25 = 0;
        if (v24)
          CFRelease(v24);
        if (v23)
          _Block_release(v23);
        if (v8)
          _Block_release(v8);
        xpc_release(v6);
        if (v4)
          CFRelease(v4);
        goto LABEL_41;
      }
    }
    CFRetain(v4);
    goto LABEL_30;
  }
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 1174405120;
  v16 = ___ZN4data20QMIDataCommandDriver30getDataAggregationMaxDatagramsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEE_block_invoke_4;
  v17 = &__block_descriptor_tmp_15_4;
  v9 = *(void **)(a1 + 40);
  if (v9)
    v9 = _Block_copy(v9);
  v10 = *(NSObject **)(a1 + 48);
  aBlock = v9;
  object = v10;
  if (v10)
    dispatch_retain(v10);
  v20 = cf;
  if (cf)
    CFRetain(cf);
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
  v13 = TlvValue;
  if (TlvValue)
  {
    tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v12, (const unsigned __int8 *)4);
    LODWORD(block[0]) = *(_DWORD *)v13;
    v16(v15, (int *)block);
  }
  if (v20)
    CFRelease(v20);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
LABEL_41:
  if (cf)
    CFRelease(cf);
}

void sub_1B3D897FC(void *a1)
{
  unsigned __int16 *v1;
  uint64_t v2;
  uint64_t v3;

  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E0DE2D28])(*v1, 21, v2, v3);
  JUMPOUT(0x1B3D896B0);
}

void sub_1B3D89834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  const void **v10;
  va_list va;

  va_start(va, a9);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(v10);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,xpc::object)>::~callback(v9);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4data20QMIDataCommandDriver30getDataAggregationMaxDatagramsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEE_block_invoke_4(_QWORD *a1, int *a2)
{
  int v2;
  void *v4;
  const void *v5;
  void *v6;
  NSObject *v7;
  xpc_object_t object[2];
  uint64_t (**v9)(abm::data::DataAggregationMaxDatagrams *__hidden);
  int v10;
  int v11;
  _QWORD block[4];
  void *aBlock;
  CFTypeRef cf;
  xpc_object_t v15;

  v2 = *a2;
  v9 = &off_1E66D7DE0;
  v10 = -1431655935;
  v11 = v2;
  if (!a1[4] || !a1[5])
    return;
  v4 = (void *)a1[6];
  object[1] = v4;
  if (v4)
    CFRetain(v4);
  abm::data::DataAggregationMaxDatagrams::toDict((abm::data::DataAggregationMaxDatagrams *)&v9, object);
  v5 = (const void *)a1[4];
  if (v5)
    v6 = _Block_copy(v5);
  else
    v6 = 0;
  v7 = a1[5];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEclIJS5_NS6_4dictEEEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_94_1;
  if (v6)
  {
    aBlock = _Block_copy(v6);
    cf = v4;
    if (!v4)
      goto LABEL_13;
    goto LABEL_12;
  }
  aBlock = 0;
  cf = v4;
  if (v4)
LABEL_12:
    CFRetain(v4);
LABEL_13:
  v15 = object[0];
  if (object[0])
    xpc_retain(object[0]);
  else
    v15 = xpc_null_create();
  dispatch_async(v7, block);
  xpc_release(v15);
  v15 = 0;
  if (cf)
    CFRelease(cf);
  if (aBlock)
    _Block_release(aBlock);
  if (v6)
    _Block_release(v6);
  xpc_release(object[0]);
  object[0] = 0;
  if (v4)
    CFRelease(v4);
}

void sub_1B3D899E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_32c92_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEE48c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  NSObject *v5;
  CFTypeRef result;

  v4 = (void *)a2[4];
  if (v4)
    v4 = _Block_copy(v4);
  v5 = a2[5];
  a1[4] = v4;
  a1[5] = v5;
  if (v5)
    dispatch_retain(v5);
  result = (CFTypeRef)a2[6];
  a1[6] = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_32c92_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEE48c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE(_QWORD *a1)
{
  const void *v2;
  NSObject *v3;
  const void *v4;

  v2 = (const void *)a1[6];
  if (v2)
    CFRelease(v2);
  v3 = a1[5];
  if (v3)
    dispatch_release(v3);
  v4 = (const void *)a1[4];
  if (v4)
    _Block_release(v4);
}

uint64_t dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,xpc::object)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void __copy_helper_block_e8_40c92_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEE(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;

  v4 = *(void **)(a2 + 40);
  if (v4)
    v4 = _Block_copy(v4);
  v5 = *(NSObject **)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
    dispatch_retain(v5);
}

void __destroy_helper_block_e8_40c92_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEE(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    _Block_release(v3);
}

void data::QMIDataCommandDriver::getDataAggregationMaxSize(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  NSObject *v6;
  _QWORD v7[5];
  void *aBlock;
  dispatch_object_t object;

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1174405120;
  v7[2] = ___ZN4data20QMIDataCommandDriver25getDataAggregationMaxSizeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_26_8;
  v7[4] = a1;
  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = (uint64_t *)(a1 + 72);
  v6 = *(NSObject **)(a2 + 8);
  aBlock = v4;
  object = v6;
  if (v6)
    dispatch_retain(v6);
  ctu::SharedSynchronizable<data::CommandDriver>::execute_wrapped(v5, (uint64_t)v7);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void ___ZN4data20QMIDataCommandDriver25getDataAggregationMaxSizeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  __int128 v3;
  const void **v4;
  char *v5;
  char *v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  void *v10;
  _QWORD v11[5];
  void *v12;
  dispatch_object_t object;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  void *v18;
  __int128 v19;
  __int128 v20;
  _QWORD aBlock[5];

  v2 = a1[4];
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v19 = v3;
  v20 = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v19);
  v4 = (const void **)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1) != (_QWORD)v20)
  {
    while (*((_BYTE *)*v4 + 8) != 16)
    {
      if (++v4 == (const void **)v20)
        goto LABEL_8;
    }
  }
  if (v4 == (const void **)v20)
  {
LABEL_8:
    v6 = qmi::MutableMessageBase::createTLV<wda::tlv::abm::PeripheralEndPointID>(&v19, 16);
  }
  else
  {
    if (!v5)
      __cxa_bad_cast();
    v6 = v5 + 12;
  }
  *(_QWORD *)v6 = 0x400000003;
  v14 = v2 + 144;
  v15 = QMIServiceMsg::create();
  v16 = 25000;
  v17 = 0;
  v18 = 0;
  v7 = MEMORY[0x1E0C809B0];
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 1174405120;
  v11[2] = ___ZN4data20QMIDataCommandDriver25getDataAggregationMaxSizeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEE_block_invoke_3;
  v11[3] = &__block_descriptor_tmp_25_4;
  v11[4] = v2;
  v8 = (void *)a1[5];
  if (v8)
    v8 = _Block_copy(v8);
  v9 = a1[6];
  v12 = v8;
  object = v9;
  if (v9)
    dispatch_retain(v9);
  aBlock[0] = v7;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wda3abm13GetDataFormat8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66E1940;
  aBlock[4] = v11;
  v10 = _Block_copy(aBlock);
  v18 = v10;
  if (v15)
  {
    qmi::Client::send();
    v10 = v18;
  }
  if (v10)
    _Block_release(v10);
  if (object)
    dispatch_release(object);
  if (v12)
    _Block_release(v12);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v19);
}

void sub_1B3D89DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,xpc::object)>::~callback(v8);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1B3D89DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1B3D89DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN4data20QMIDataCommandDriver25getDataAggregationMaxSizeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEE_block_invoke_3(uint64_t a1, const qmi::ResponseBase *a2)
{
  xpc_object_t v4;
  CFTypeRef v5;
  uint64_t (*v6)(uint64_t);
  xpc_object_t v7;
  const void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  tlv *TlvValue;
  int v13;
  tlv *v14;
  NSObject *v15;
  _QWORD v16[2];
  void (*v17)(_QWORD *, int *);
  void *v18;
  void *aBlock;
  dispatch_object_t object;
  CFTypeRef v21;
  CFTypeRef cf;
  _QWORD block[4];
  void *v24;
  CFTypeRef v25;
  xpc_object_t v26;

  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  data::QMIDataCommandDriver::checkError(a2, &cf);
  v4 = xpc_null_create();
  v5 = cf;
  v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!cf)
    v6 = 0;
  if (v6)
  {
    if (!*(_QWORD *)(a1 + 40) || !*(_QWORD *)(a1 + 48))
      goto LABEL_41;
    if (cf)
      CFRetain(cf);
    v7 = xpc_null_create();
    v8 = *(const void **)(a1 + 40);
    if (v8)
      v9 = _Block_copy(v8);
    else
      v9 = 0;
    v15 = *(NSObject **)(a1 + 48);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 1174405120;
    block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEclIJS5_NS6_4dictEEEEvDpT__block_invoke;
    block[3] = &__block_descriptor_tmp_94_1;
    if (v9)
    {
      v24 = _Block_copy(v9);
      v25 = v5;
      if (!v5)
        goto LABEL_30;
    }
    else
    {
      v24 = 0;
      v25 = v5;
      if (!v5)
      {
LABEL_30:
        v26 = v7;
        if (v7)
          xpc_retain(v7);
        else
          v26 = xpc_null_create();
        dispatch_async(v15, block);
        xpc_release(v26);
        v26 = 0;
        if (v25)
          CFRelease(v25);
        if (v24)
          _Block_release(v24);
        if (v9)
          _Block_release(v9);
        xpc_release(v7);
        if (v5)
          CFRelease(v5);
        goto LABEL_41;
      }
    }
    CFRetain(v5);
    goto LABEL_30;
  }
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 1174405120;
  v17 = ___ZN4data20QMIDataCommandDriver25getDataAggregationMaxSizeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEE_block_invoke_4;
  v18 = &__block_descriptor_tmp_24_10;
  v10 = *(void **)(a1 + 40);
  if (v10)
    v10 = _Block_copy(v10);
  v11 = *(NSObject **)(a1 + 48);
  aBlock = v10;
  object = v11;
  if (v11)
    dispatch_retain(v11);
  v21 = cf;
  if (cf)
    CFRetain(cf);
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
  v14 = TlvValue;
  if (TlvValue)
  {
    tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v13, (const unsigned __int8 *)4);
    LODWORD(block[0]) = *(_DWORD *)v14;
    v17(v16, (int *)block);
  }
  if (v21)
    CFRelease(v21);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
LABEL_41:
  xpc_release(v4);
  if (cf)
    CFRelease(cf);
}

void sub_1B3D8A094(void *a1)
{
  unsigned __int16 *v1;
  uint64_t v2;
  uint64_t v3;

  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E0DE2D28])(*v1, 22, v2, v3);
  JUMPOUT(0x1B3D89F40);
}

void sub_1B3D8A0CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  uint64_t v10;
  const void **v11;
  va_list va;

  va_start(va, a9);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(v11);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,xpc::object)>::~callback(v10);
  xpc_release(v9);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4data20QMIDataCommandDriver25getDataAggregationMaxSizeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEE_block_invoke_4(_QWORD *a1, int *a2)
{
  int v2;
  void *v4;
  const void *v5;
  void *v6;
  NSObject *v7;
  xpc_object_t object[2];
  uint64_t (**v9)(abm::data::DataAggregationMaxSize *__hidden);
  int v10;
  int v11;
  _QWORD block[4];
  void *aBlock;
  CFTypeRef cf;
  xpc_object_t v15;

  v2 = *a2;
  v9 = &off_1E66D7E28;
  v10 = -1431655935;
  v11 = v2;
  if (!a1[4] || !a1[5])
    return;
  v4 = (void *)a1[6];
  object[1] = v4;
  if (v4)
    CFRetain(v4);
  abm::data::DataAggregationMaxSize::toDict((abm::data::DataAggregationMaxSize *)&v9, object);
  v5 = (const void *)a1[4];
  if (v5)
    v6 = _Block_copy(v5);
  else
    v6 = 0;
  v7 = a1[5];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEclIJS5_NS6_4dictEEEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_94_1;
  if (v6)
  {
    aBlock = _Block_copy(v6);
    cf = v4;
    if (!v4)
      goto LABEL_13;
    goto LABEL_12;
  }
  aBlock = 0;
  cf = v4;
  if (v4)
LABEL_12:
    CFRetain(v4);
LABEL_13:
  v15 = object[0];
  if (object[0])
    xpc_retain(object[0]);
  else
    v15 = xpc_null_create();
  dispatch_async(v7, block);
  xpc_release(v15);
  v15 = 0;
  if (cf)
    CFRelease(cf);
  if (aBlock)
    _Block_release(aBlock);
  if (v6)
    _Block_release(v6);
  xpc_release(object[0]);
  object[0] = 0;
  if (v4)
    CFRelease(v4);
}

void sub_1B3D8A294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void data::QMIDataCommandDriver::getDataFlowControl(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  NSObject *v6;
  _QWORD v7[5];
  void *aBlock;
  dispatch_object_t object;

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1174405120;
  v7[2] = ___ZN4data20QMIDataCommandDriver18getDataFlowControlEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_33_5;
  v7[4] = a1;
  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = (uint64_t *)(a1 + 72);
  v6 = *(NSObject **)(a2 + 8);
  aBlock = v4;
  object = v6;
  if (v6)
    dispatch_retain(v6);
  ctu::SharedSynchronizable<data::CommandDriver>::execute_wrapped(v5, (uint64_t)v7);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void ___ZN4data20QMIDataCommandDriver18getDataFlowControlEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  __int128 v3;
  const void **v4;
  char *v5;
  char *v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  void *v10;
  _QWORD v11[5];
  void *v12;
  dispatch_object_t object;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  void *v18;
  __int128 v19;
  __int128 v20;
  _QWORD aBlock[5];

  v2 = a1[4];
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v19 = v3;
  v20 = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v19);
  v4 = (const void **)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1) != (_QWORD)v20)
  {
    while (*((_BYTE *)*v4 + 8) != 16)
    {
      if (++v4 == (const void **)v20)
        goto LABEL_8;
    }
  }
  if (v4 == (const void **)v20)
  {
LABEL_8:
    v6 = qmi::MutableMessageBase::createTLV<wda::tlv::abm::PeripheralEndPointID>(&v19, 16);
  }
  else
  {
    if (!v5)
      __cxa_bad_cast();
    v6 = v5 + 12;
  }
  *(_QWORD *)v6 = 0x400000003;
  v14 = v2 + 144;
  v15 = QMIServiceMsg::create();
  v16 = 25000;
  v17 = 0;
  v18 = 0;
  v7 = MEMORY[0x1E0C809B0];
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 1174405120;
  v11[2] = ___ZN4data20QMIDataCommandDriver18getDataFlowControlEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEE_block_invoke_3;
  v11[3] = &__block_descriptor_tmp_32_4;
  v11[4] = v2;
  v8 = (void *)a1[5];
  if (v8)
    v8 = _Block_copy(v8);
  v9 = a1[6];
  v12 = v8;
  object = v9;
  if (v9)
    dispatch_retain(v9);
  aBlock[0] = v7;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wda3abm15GetQMAPSettings8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66E1968;
  aBlock[4] = v11;
  v10 = _Block_copy(aBlock);
  v18 = v10;
  if (v15)
  {
    qmi::Client::send();
    v10 = v18;
  }
  if (v10)
    _Block_release(v10);
  if (object)
    dispatch_release(object);
  if (v12)
    _Block_release(v12);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v19);
}

void sub_1B3D8A508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,xpc::object)>::~callback(v8);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1B3D8A52C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1B3D8A540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN4data20QMIDataCommandDriver18getDataFlowControlEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEE_block_invoke_3(uint64_t a1, const qmi::ResponseBase *a2)
{
  CFTypeRef v4;
  uint64_t (*v5)(uint64_t);
  xpc_object_t v6;
  const void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  tlv *TlvValue;
  int v12;
  tlv *v13;
  NSObject *v14;
  _QWORD v15[2];
  void (*v16)(_QWORD *, char *);
  void *v17;
  void *aBlock;
  dispatch_object_t object;
  CFTypeRef v20;
  CFTypeRef cf;
  _QWORD block[4];
  void *v23;
  CFTypeRef v24;
  xpc_object_t v25;

  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  data::QMIDataCommandDriver::checkError(a2, &cf);
  v4 = cf;
  v5 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!cf)
    v5 = 0;
  if (v5)
  {
    if (!*(_QWORD *)(a1 + 40) || !*(_QWORD *)(a1 + 48))
      goto LABEL_41;
    if (cf)
      CFRetain(cf);
    v6 = xpc_null_create();
    v7 = *(const void **)(a1 + 40);
    if (v7)
      v8 = _Block_copy(v7);
    else
      v8 = 0;
    v14 = *(NSObject **)(a1 + 48);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 1174405120;
    block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEclIJS5_NS6_4dictEEEEvDpT__block_invoke;
    block[3] = &__block_descriptor_tmp_94_1;
    if (v8)
    {
      v23 = _Block_copy(v8);
      v24 = v4;
      if (!v4)
        goto LABEL_30;
    }
    else
    {
      v23 = 0;
      v24 = v4;
      if (!v4)
      {
LABEL_30:
        v25 = v6;
        if (v6)
          xpc_retain(v6);
        else
          v25 = xpc_null_create();
        dispatch_async(v14, block);
        xpc_release(v25);
        v25 = 0;
        if (v24)
          CFRelease(v24);
        if (v23)
          _Block_release(v23);
        if (v8)
          _Block_release(v8);
        xpc_release(v6);
        if (v4)
          CFRelease(v4);
        goto LABEL_41;
      }
    }
    CFRetain(v4);
    goto LABEL_30;
  }
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 1174405120;
  v16 = ___ZN4data20QMIDataCommandDriver18getDataFlowControlEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEE_block_invoke_4;
  v17 = &__block_descriptor_tmp_31_6;
  v9 = *(void **)(a1 + 40);
  if (v9)
    v9 = _Block_copy(v9);
  v10 = *(NSObject **)(a1 + 48);
  aBlock = v9;
  object = v10;
  if (v10)
    dispatch_retain(v10);
  v20 = cf;
  if (cf)
    CFRetain(cf);
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
  v13 = TlvValue;
  if (TlvValue)
  {
    tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v12, (const unsigned __int8 *)1);
    LOBYTE(block[0]) = *(_BYTE *)v13 != 0;
    v16(v15, (char *)block);
  }
  if (v20)
    CFRelease(v20);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
LABEL_41:
  if (cf)
    CFRelease(cf);
}

void sub_1B3D8A7D8(void *a1)
{
  unsigned __int16 *v1;
  uint64_t v2;
  uint64_t v3;

  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E0DE2D28])(*v1, 17, v2, v3);
  JUMPOUT(0x1B3D8A68CLL);
}

void sub_1B3D8A810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  const void **v10;
  va_list va;

  va_start(va, a9);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(v10);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,xpc::object)>::~callback(v9);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4data20QMIDataCommandDriver18getDataFlowControlEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEE_block_invoke_4(_QWORD *a1, char *a2)
{
  char v2;
  void *v4;
  const void *v5;
  void *v6;
  NSObject *v7;
  xpc_object_t object[2];
  uint64_t (**v9)(abm::data::DataFlowControl *__hidden);
  unint64_t v10;
  _QWORD block[4];
  void *aBlock;
  CFTypeRef cf;
  xpc_object_t v14;

  v2 = *a2;
  v9 = &off_1E66D7E70;
  v10 = 0xAAAAAAAAAAAAAA01;
  BYTE1(v10) = v2;
  if (!a1[4] || !a1[5])
    return;
  v4 = (void *)a1[6];
  object[1] = v4;
  if (v4)
    CFRetain(v4);
  abm::data::DataFlowControl::toDict((abm::data::DataFlowControl *)&v9, object);
  v5 = (const void *)a1[4];
  if (v5)
    v6 = _Block_copy(v5);
  else
    v6 = 0;
  v7 = a1[5];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEclIJS5_NS6_4dictEEEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_94_1;
  if (v6)
  {
    aBlock = _Block_copy(v6);
    cf = v4;
    if (!v4)
      goto LABEL_13;
    goto LABEL_12;
  }
  aBlock = 0;
  cf = v4;
  if (v4)
LABEL_12:
    CFRetain(v4);
LABEL_13:
  v14 = object[0];
  if (object[0])
    xpc_retain(object[0]);
  else
    v14 = xpc_null_create();
  dispatch_async(v7, block);
  xpc_release(v14);
  v14 = 0;
  if (cf)
    CFRelease(cf);
  if (aBlock)
    _Block_release(aBlock);
  if (v6)
    _Block_release(v6);
  xpc_release(object[0]);
  object[0] = 0;
  if (v4)
    CFRelease(v4);
}

void sub_1B3D8A9C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void data::QMIDataCommandDriver::setQMAPSettings(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  uint64_t *v6;
  NSObject *v7;
  _QWORD v8[6];
  __int16 v9;
  void *aBlock;
  dispatch_object_t object;

  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 1174405120;
  v8[2] = ___ZN4data20QMIDataCommandDriver15setQMAPSettingsEN3abm4data12QMAPSettingsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
  v8[3] = &__block_descriptor_tmp_43_4;
  v9 = *(_WORD *)(a2 + 8);
  v8[4] = a1;
  v8[5] = &off_1E66D7E70;
  v5 = *(void **)a3;
  if (*(_QWORD *)a3)
    v5 = _Block_copy(v5);
  v6 = (uint64_t *)(a1 + 72);
  v7 = *(NSObject **)(a3 + 8);
  aBlock = v5;
  object = v7;
  if (v7)
    dispatch_retain(v7);
  ctu::SharedSynchronizable<data::CommandDriver>::execute_wrapped(v6, (uint64_t)v8);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void ___ZN4data20QMIDataCommandDriver15setQMAPSettingsEN3abm4data12QMAPSettingsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  char *v5;
  char *v6;
  const void **v7;
  _BYTE *v8;
  _WORD *v9;
  _WORD *v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  _QWORD *v18;
  char *v19;
  char *v20;
  char *v21;
  const void **v22;
  _BYTE *v23;
  _WORD *v24;
  _WORD *v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  _QWORD *v33;
  char *v34;
  char *v35;
  void *v36;
  NSObject *v37;
  void *v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  _OWORD *v43;
  char *v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  _OWORD *v51;
  char *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  _QWORD v56[5];
  void *v57;
  dispatch_object_t object;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  void *v63;
  _QWORD v64[2];
  uint64_t (*v65)(uint64_t, _BYTE *);
  void *v66;
  uint64_t (**v67)(abm::data::DataFlowControl *__hidden);
  __int16 v68;
  __int128 v69;
  __int128 v70;
  _QWORD aBlock[6];

  v2 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v69 = v3;
  v70 = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v69);
  v4 = MEMORY[0x1E0C809B0];
  v64[0] = MEMORY[0x1E0C809B0];
  v64[1] = 1174405120;
  v65 = ___ZN4data20QMIDataCommandDriver15setQMAPSettingsEN3abm4data12QMAPSettingsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2;
  v66 = &__block_descriptor_tmp_34_5;
  v68 = *(_WORD *)(a1 + 48);
  v67 = &off_1E66D7E70;
  v5 = (char *)*((_QWORD *)&v69 + 1);
  v6 = (char *)v70;
  v7 = (const void **)*((_QWORD *)&v69 + 1);
  if (*((_QWORD *)&v69 + 1) != (_QWORD)v70)
  {
    v7 = (const void **)*((_QWORD *)&v69 + 1);
    while (*((_BYTE *)*v7 + 8) != 18)
    {
      if (++v7 == (const void **)v70)
        goto LABEL_9;
    }
  }
  if (v7 == (const void **)v70)
  {
LABEL_9:
    v9 = operator new(0x10uLL);
    v10 = v9;
    v9[4] = 18;
    *(_QWORD *)v9 = off_1E66E19B0;
    if ((unint64_t)v6 < *((_QWORD *)&v70 + 1))
    {
      *(_QWORD *)v6 = v9;
      v11 = (uint64_t)(v6 + 8);
LABEL_22:
      *(_QWORD *)&v70 = v11;
      v65((uint64_t)v64, (_BYTE *)v10 + 9);
      goto LABEL_23;
    }
    v12 = v6 - v5;
    v13 = (v6 - v5) >> 3;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61)
      goto LABEL_84;
    v15 = *((_QWORD *)&v70 + 1) - (_QWORD)v5;
    if ((uint64_t)(*((_QWORD *)&v70 + 1) - (_QWORD)v5) >> 2 > v14)
      v14 = v15 >> 2;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      if (v16 >> 61)
        goto LABEL_85;
      v17 = operator new(8 * v16);
      v18 = &v17[8 * v13];
      v19 = &v17[8 * v16];
      *v18 = v10;
      v11 = (uint64_t)(v18 + 1);
      if (v5 == v6)
      {
LABEL_20:
        *((_QWORD *)&v69 + 1) = v18;
        *(_QWORD *)&v70 = v11;
        *((_QWORD *)&v70 + 1) = v19;
        if (!v5)
          goto LABEL_22;
LABEL_21:
        operator delete(v5);
        goto LABEL_22;
      }
    }
    else
    {
      v17 = 0;
      v18 = (_QWORD *)(8 * v13);
      v19 = 0;
      *(_QWORD *)(8 * v13) = v10;
      v11 = 8 * v13 + 8;
      if (v5 == v6)
        goto LABEL_20;
    }
    if ((unint64_t)(v12 - 8) < 0x58)
      goto LABEL_88;
    if ((unint64_t)(v5 - v17) < 0x20)
      goto LABEL_88;
    v40 = ((unint64_t)(v12 - 8) >> 3) + 1;
    v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    v42 = &v6[-v41];
    v18 = (_QWORD *)((char *)v18 - v41);
    v43 = &v17[8 * v13 - 16];
    v44 = v6 - 16;
    v45 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v46 = *(_OWORD *)v44;
      *(v43 - 1) = *((_OWORD *)v44 - 1);
      *v43 = v46;
      v43 -= 2;
      v44 -= 32;
      v45 -= 4;
    }
    while (v45);
    v6 = v42;
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_88:
      do
      {
        v47 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *--v18 = v47;
      }
      while (v6 != v5);
    }
    v5 = (char *)*((_QWORD *)&v69 + 1);
    *((_QWORD *)&v69 + 1) = v18;
    *(_QWORD *)&v70 = v11;
    *((_QWORD *)&v70 + 1) = v19;
    if (!v5)
      goto LABEL_22;
    goto LABEL_21;
  }
  if (!v8)
    goto LABEL_83;
  ___ZN4data20QMIDataCommandDriver15setQMAPSettingsEN3abm4data12QMAPSettingsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2((uint64_t)v64, v8 + 9);
LABEL_23:
  v20 = (char *)*((_QWORD *)&v69 + 1);
  v21 = (char *)v70;
  v22 = (const void **)*((_QWORD *)&v69 + 1);
  if (*((_QWORD *)&v69 + 1) != (_QWORD)v70)
  {
    v22 = (const void **)*((_QWORD *)&v69 + 1);
    while (*((_BYTE *)*v22 + 8) != 16)
    {
      if (++v22 == (const void **)v70)
        goto LABEL_32;
    }
  }
  if (v22 != (const void **)v70)
  {
    if (v23)
    {
      v23[9] = 0;
      if (v20 != v21)
        goto LABEL_46;
      goto LABEL_48;
    }
    goto LABEL_83;
  }
LABEL_32:
  v24 = operator new(0x10uLL);
  v25 = v24;
  v24[4] = 16;
  *(_QWORD *)v24 = off_1E66E1A00;
  if ((unint64_t)v21 < *((_QWORD *)&v70 + 1))
  {
    *(_QWORD *)v21 = v24;
    v26 = (uint64_t)(v21 + 8);
    goto LABEL_45;
  }
  v27 = v21 - v20;
  v28 = (v21 - v20) >> 3;
  v29 = v28 + 1;
  if ((unint64_t)(v28 + 1) >> 61)
LABEL_84:
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v30 = *((_QWORD *)&v70 + 1) - (_QWORD)v20;
  if ((uint64_t)(*((_QWORD *)&v70 + 1) - (_QWORD)v20) >> 2 > v29)
    v29 = v30 >> 2;
  if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
    v31 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v31 = v29;
  if (v31)
  {
    if (!(v31 >> 61))
    {
      v32 = operator new(8 * v31);
      v33 = &v32[8 * v28];
      v34 = &v32[8 * v31];
      *v33 = v25;
      v26 = (uint64_t)(v33 + 1);
      if (v20 == v21)
        goto LABEL_43;
      goto LABEL_75;
    }
LABEL_85:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  v32 = 0;
  v33 = (_QWORD *)(8 * v28);
  v34 = 0;
  *(_QWORD *)(8 * v28) = v25;
  v26 = 8 * v28 + 8;
  if (v20 == v21)
  {
LABEL_43:
    *((_QWORD *)&v69 + 1) = v33;
    *(_QWORD *)&v70 = v26;
    *((_QWORD *)&v70 + 1) = v34;
    if (!v20)
      goto LABEL_45;
    goto LABEL_44;
  }
LABEL_75:
  if ((unint64_t)(v27 - 8) < 0x58)
    goto LABEL_89;
  if ((unint64_t)(v20 - v32) < 0x20)
    goto LABEL_89;
  v48 = ((unint64_t)(v27 - 8) >> 3) + 1;
  v49 = 8 * (v48 & 0x3FFFFFFFFFFFFFFCLL);
  v50 = &v21[-v49];
  v33 = (_QWORD *)((char *)v33 - v49);
  v51 = &v32[8 * v28 - 16];
  v52 = v21 - 16;
  v53 = v48 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v54 = *(_OWORD *)v52;
    *(v51 - 1) = *((_OWORD *)v52 - 1);
    *v51 = v54;
    v51 -= 2;
    v52 -= 32;
    v53 -= 4;
  }
  while (v53);
  v21 = v50;
  if (v48 != (v48 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_89:
    do
    {
      v55 = *((_QWORD *)v21 - 1);
      v21 -= 8;
      *--v33 = v55;
    }
    while (v21 != v20);
  }
  v20 = (char *)*((_QWORD *)&v69 + 1);
  *((_QWORD *)&v69 + 1) = v33;
  *(_QWORD *)&v70 = v26;
  *((_QWORD *)&v70 + 1) = v34;
  if (v20)
LABEL_44:
    operator delete(v20);
LABEL_45:
  *(_QWORD *)&v70 = v26;
  v20 = (char *)*((_QWORD *)&v69 + 1);
  v21 = (char *)v26;
  *((_BYTE *)v25 + 9) = 0;
  if (v20 == (char *)v26)
  {
LABEL_48:
    v35 = qmi::MutableMessageBase::createTLV<wda::tlv::abm::PeripheralEndPointID>(&v69, 17);
    goto LABEL_49;
  }
LABEL_46:
  while (*(_BYTE *)(*(_QWORD *)v20 + 8) != 17)
  {
    v20 += 8;
    if (v20 == v21)
      goto LABEL_48;
  }
  if (v20 == v21)
    goto LABEL_48;
  if (!v39)
LABEL_83:
    __cxa_bad_cast();
  v35 = v39 + 12;
LABEL_49:
  *(_QWORD *)v35 = 0x400000003;
  v59 = v2 + 144;
  v60 = QMIServiceMsg::create();
  v61 = 25000;
  v62 = 0;
  v63 = 0;
  v56[0] = v4;
  v56[1] = 1174405120;
  v56[2] = ___ZN4data20QMIDataCommandDriver15setQMAPSettingsEN3abm4data12QMAPSettingsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_3;
  v56[3] = &__block_descriptor_tmp_42_3;
  v56[4] = v2;
  v36 = *(void **)(a1 + 56);
  if (v36)
    v36 = _Block_copy(v36);
  v37 = *(NSObject **)(a1 + 64);
  v57 = v36;
  object = v37;
  if (v37)
    dispatch_retain(v37);
  aBlock[0] = v4;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wda3abm15SetQMAPSettings8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66E1A60;
  aBlock[4] = v56;
  v38 = _Block_copy(aBlock);
  v63 = v38;
  if (v60)
  {
    qmi::Client::send();
    v38 = v63;
  }
  if (v38)
    _Block_release(v38);
  if (object)
    dispatch_release(object);
  if (v57)
    _Block_release(v57);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v69);
}

void sub_1B3D8B058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v27);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a16);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a27);
  _Unwind_Resume(a1);
}

void sub_1B3D8B07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a27);
  _Unwind_Resume(a1);
}

void sub_1B3D8B094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a27);
  _Unwind_Resume(a1);
}

uint64_t ___ZN4data20QMIDataCommandDriver15setQMAPSettingsEN3abm4data12QMAPSettingsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2(uint64_t result, _BYTE *a2)
{
  *a2 = *(_BYTE *)(result + 41);
  return result;
}

uint64_t __copy_helper_block_e8_32c29_ZTSN3abm4data12QMAPSettingsE(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 40) = *(_WORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = &off_1E66D7E70;
  return result;
}

void ___ZN4data20QMIDataCommandDriver15setQMAPSettingsEN3abm4data12QMAPSettingsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_3(uint64_t a1, const qmi::ResponseBase *a2)
{
  const void *v3;
  CFTypeRef v4;
  void *v5;
  NSObject *v6;
  CFTypeRef cf;
  _QWORD block[4];
  void *aBlock;
  CFTypeRef v10;

  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  data::QMIDataCommandDriver::checkError(a2, &cf);
  v3 = *(const void **)(a1 + 40);
  if (!v3 || !*(_QWORD *)(a1 + 48))
    goto LABEL_20;
  v4 = cf;
  if (cf && (CFRetain(cf), (v3 = *(const void **)(a1 + 40)) == 0))
    v5 = 0;
  else
    v5 = _Block_copy(v3);
  v6 = *(NSObject **)(a1 + 48);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_4;
  block[3] = &__block_descriptor_tmp_97_3;
  if (v5)
  {
    aBlock = _Block_copy(v5);
    v10 = v4;
    if (!v4)
      goto LABEL_12;
    goto LABEL_11;
  }
  aBlock = 0;
  v10 = v4;
  if (v4)
LABEL_11:
    CFRetain(v4);
LABEL_12:
  dispatch_async(v6, block);
  if (v10)
    CFRelease(v10);
  if (aBlock)
    _Block_release(aBlock);
  if (v5)
    _Block_release(v5);
  if (v4)
    CFRelease(v4);
LABEL_20:
  if (cf)
    CFRelease(cf);
}

void __copy_helper_block_e8_40c29_ZTSN3abm4data12QMAPSettingsE56c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;

  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = &off_1E66D7E70;
  v4 = *(void **)(a2 + 56);
  if (v4)
    v4 = _Block_copy(v4);
  v5 = *(NSObject **)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v4;
  *(_QWORD *)(a1 + 64) = v5;
  if (v5)
    dispatch_retain(v5);
}

void __destroy_helper_block_e8_4056c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 64);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 56);
  if (v3)
    _Block_release(v3);
}

void data::QMIDataCommandDriver::setDataFormat(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  void *v7;
  uint64_t *v8;
  NSObject *v9;
  _QWORD v10[6];
  char v11;
  int v12;
  uint64_t (**v13)(abm::data::DataAggregationMaxDatagrams *__hidden);
  char v14;
  int v15;
  uint64_t (**v16)(abm::data::DataAggregationMaxSize *__hidden);
  char v17;
  int v18;
  void *aBlock;
  dispatch_object_t object;
  int v21;

  v10[0] = MEMORY[0x1E0C809B0];
  v10[2] = ___ZN4data20QMIDataCommandDriver13setDataFormatEN3abm4data10DataFormatEjN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
  v10[3] = &__block_descriptor_tmp_66_1;
  v11 = *(_BYTE *)(a2 + 8);
  v10[4] = a1;
  v10[5] = &off_1E66D7D98;
  v12 = *(_DWORD *)(a2 + 12);
  v14 = *(_BYTE *)(a2 + 24);
  v13 = &off_1E66D7DE0;
  v15 = *(_DWORD *)(a2 + 28);
  v17 = *(_BYTE *)(a2 + 40);
  v10[1] = 1174405120;
  v16 = &off_1E66D7E28;
  v18 = *(_DWORD *)(a2 + 44);
  v7 = *(void **)a4;
  if (*(_QWORD *)a4)
    v7 = _Block_copy(v7);
  v8 = (uint64_t *)(a1 + 72);
  v9 = *(NSObject **)(a4 + 8);
  aBlock = v7;
  object = v9;
  if (v9)
    dispatch_retain(v9);
  v21 = a3;
  ctu::SharedSynchronizable<data::CommandDriver>::execute_wrapped(v8, (uint64_t)v10);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void ___ZN4data20QMIDataCommandDriver13setDataFormatEN3abm4data10DataFormatEjN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke(uint64_t a1)
{
  __int128 v2;
  int v3;
  int v4;
  int v5;
  int v6;
  const void *v7;
  void *v8;
  NSObject *v9;
  _QWORD *v10;
  CFTypeRef v11;
  char *v12;
  char *v13;
  const void **v14;
  _DWORD *v15;
  _BYTE *v16;
  _BYTE *v17;
  _DWORD *v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  _QWORD *v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  _OWORD *v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  char *v36;
  char *v37;
  const void **v38;
  _DWORD *v39;
  _BYTE *v40;
  _BYTE *v41;
  _DWORD *v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  _QWORD *v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  _OWORD *v55;
  char *v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  char *v60;
  char *v61;
  const void **v62;
  _DWORD *v63;
  _BYTE *v64;
  _BYTE *v65;
  _DWORD *v66;
  uint64_t v67;
  int64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  _BYTE *v73;
  _QWORD *v74;
  char *v75;
  unint64_t v76;
  uint64_t v77;
  char *v78;
  _OWORD *v79;
  char *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  char *v84;
  char *v85;
  const void **v86;
  _DWORD *v87;
  _BYTE *v88;
  _BYTE *v89;
  _DWORD *v90;
  uint64_t v91;
  int64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  _BYTE *v97;
  _QWORD *v98;
  char *v99;
  unint64_t v100;
  uint64_t v101;
  char *v102;
  _OWORD *v103;
  char *v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;
  const void **v108;
  const void **v109;
  const void **v110;
  _DWORD *v111;
  char *v112;
  char *v113;
  _DWORD *v114;
  uint64_t v115;
  int64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  _BYTE *v121;
  _QWORD *v122;
  char *v123;
  unint64_t v124;
  uint64_t v125;
  const void **v126;
  _OWORD *v127;
  const void **v128;
  uint64_t v129;
  __int128 v130;
  uint64_t v131;
  const void **v132;
  _DWORD *v133;
  char *v134;
  char *v135;
  _DWORD *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  char *v143;
  char *v144;
  char *v145;
  char *v146;
  unint64_t v147;
  const void **v148;
  const void **v149;
  char *v150;
  _DWORD *v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  char *v161;
  char *v162;
  char *v163;
  char *v164;
  unint64_t v165;
  const void **v166;
  uint64_t v167;
  char *v168;
  capabilities::ipc *v169;
  uint64_t v170;
  char *v171;
  char *v172;
  const void **v173;
  char *v174;
  _WORD *v175;
  _DWORD *v176;
  _WORD *v177;
  _WORD *v178;
  uint64_t v179;
  int64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  _BYTE *v185;
  _QWORD *v186;
  char *v187;
  unint64_t v188;
  uint64_t v189;
  char *v190;
  _OWORD *v191;
  char *v192;
  uint64_t v193;
  __int128 v194;
  uint64_t v195;
  void *v196;
  NSObject *v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  const void **v202;
  uint64_t v203;
  __int128 v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  const void **v209;
  uint64_t v210;
  __int128 v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD v214[5];
  void *v215;
  dispatch_object_t object;
  uint64_t v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  void *aBlock;
  _QWORD v222[2];
  uint64_t (*v223)(uint64_t, char *);
  void *v224;
  int v225;
  _QWORD v226[2];
  uint64_t (*v227)(uint64_t, _DWORD *);
  void *v228;
  int v229;
  _QWORD v230[2];
  uint64_t (*v231)(uint64_t, _DWORD *);
  void *v232;
  int v233;
  _QWORD v234[2];
  uint64_t (*v235)(uint64_t, _DWORD *);
  void *v236;
  int v237;
  _QWORD v238[2];
  uint64_t (*v239)(uint64_t, _DWORD *);
  void *v240;
  int v241;
  char *v242;
  __int128 v243;
  CFTypeRef v244;
  __int128 v245;
  __int128 v246;
  uint64_t block;
  uint64_t v248;
  void *v249;
  void *v250;
  _QWORD *v251;
  CFTypeRef v252;

  v212 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v245 = v2;
  v246 = v2;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v245);
  v3 = *(_DWORD *)(a1 + 52);
  v213 = a1;
  if (!v3)
  {
LABEL_24:
    v5 = 2048;
    v4 = 1;
    goto LABEL_25;
  }
  if (v3 == 2)
  {
    v4 = *(_DWORD *)(a1 + 68);
    v5 = *(_DWORD *)(a1 + 84);
    v6 = 9;
    goto LABEL_26;
  }
  if (v3 != 1)
  {
    v242 = (char *)operator new(0x20uLL);
    v243 = xmmword_1B3DD2B20;
    strcpy(v242, "Invalid DataAggregationProtocol");
    CreateError();
    v7 = *(const void **)(a1 + 88);
    if (v7)
      v8 = _Block_copy(v7);
    else
      v8 = 0;
    v9 = *(NSObject **)(v213 + 96);
    block = MEMORY[0x1E0C809B0];
    v248 = 1174405120;
    v249 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_4;
    v250 = &__block_descriptor_tmp_97_3;
    if (v8)
    {
      v10 = _Block_copy(v8);
      v11 = v244;
      v251 = v10;
      v252 = v244;
      if (!v244)
        goto LABEL_14;
    }
    else
    {
      v11 = v244;
      v251 = 0;
      v252 = v244;
      if (!v244)
      {
LABEL_14:
        dispatch_async(v9, &block);
        if (v252)
          CFRelease(v252);
        if (v251)
          _Block_release(v251);
        if (v8)
          _Block_release(v8);
        if (v244)
          CFRelease(v244);
        if (SHIBYTE(v243) < 0)
          operator delete(v242);
        goto LABEL_24;
      }
    }
    CFRetain(v11);
    goto LABEL_14;
  }
  v4 = *(_DWORD *)(a1 + 68);
  v5 = *(_DWORD *)(a1 + 84);
LABEL_25:
  v6 = 5;
LABEL_26:
  v238[0] = MEMORY[0x1E0C809B0];
  v238[1] = 0x40000000;
  v239 = ___ZN4data20QMIDataCommandDriver13setDataFormatEN3abm4data10DataFormatEjN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2;
  v240 = &__block_descriptor_tmp_47_3;
  v241 = v6;
  v12 = (char *)*((_QWORD *)&v245 + 1);
  v13 = (char *)v246;
  v14 = (const void **)*((_QWORD *)&v245 + 1);
  if (*((_QWORD *)&v245 + 1) != (_QWORD)v246)
  {
    v14 = (const void **)*((_QWORD *)&v245 + 1);
    while (*((_BYTE *)*v14 + 8) != 19)
    {
      if (++v14 == (const void **)v246)
        goto LABEL_34;
    }
  }
  if (v14 == (const void **)v246)
  {
LABEL_34:
    v16 = operator new(0x10uLL);
    v17 = v16;
    v16[8] = 19;
    *(_QWORD *)v16 = off_1E66E1AA8;
    *((_DWORD *)v16 + 3) = 0;
    v18 = v16 + 12;
    if ((unint64_t)v13 < *((_QWORD *)&v246 + 1))
    {
      *(_QWORD *)v13 = v16;
      v19 = (uint64_t)(v13 + 8);
LABEL_56:
      *(_QWORD *)&v246 = v19;
      v239((uint64_t)v238, v18);
      goto LABEL_57;
    }
    v20 = v13 - v12;
    v21 = (v13 - v12) >> 3;
    v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 61)
      goto LABEL_301;
    v23 = *((_QWORD *)&v246 + 1) - (_QWORD)v12;
    if ((uint64_t)(*((_QWORD *)&v246 + 1) - (_QWORD)v12) >> 2 > v22)
      v22 = v23 >> 2;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
      v24 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    if (v24)
    {
      if (v24 >> 61)
        goto LABEL_302;
      v25 = operator new(8 * v24);
      v26 = &v25[8 * v21];
      v27 = &v25[8 * v24];
      *v26 = v17;
      v19 = (uint64_t)(v26 + 1);
      if (v12 != v13)
      {
LABEL_45:
        if ((unint64_t)(v20 - 8) < 0x58)
          goto LABEL_305;
        if ((unint64_t)(v12 - v25) < 0x20)
          goto LABEL_305;
        v28 = ((unint64_t)(v20 - 8) >> 3) + 1;
        v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
        v30 = &v13[-v29];
        v26 = (_QWORD *)((char *)v26 - v29);
        v31 = &v25[8 * v21 - 16];
        v32 = v13 - 16;
        v33 = v28 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v34 = *(_OWORD *)v32;
          *(v31 - 1) = *((_OWORD *)v32 - 1);
          *v31 = v34;
          v31 -= 2;
          v32 -= 32;
          v33 -= 4;
        }
        while (v33);
        v13 = v30;
        if (v28 != (v28 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_305:
          do
          {
            v35 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v26 = v35;
          }
          while (v13 != v12);
        }
        v12 = (char *)*((_QWORD *)&v245 + 1);
        *((_QWORD *)&v245 + 1) = v26;
        *(_QWORD *)&v246 = v19;
        *((_QWORD *)&v246 + 1) = v27;
        if (!v12)
          goto LABEL_56;
        goto LABEL_55;
      }
    }
    else
    {
      v25 = 0;
      v26 = (_QWORD *)(8 * v21);
      v27 = 0;
      *(_QWORD *)(8 * v21) = v17;
      v19 = 8 * v21 + 8;
      if (v12 != v13)
        goto LABEL_45;
    }
    *((_QWORD *)&v245 + 1) = v26;
    *(_QWORD *)&v246 = v19;
    *((_QWORD *)&v246 + 1) = v27;
    if (!v12)
      goto LABEL_56;
LABEL_55:
    operator delete(v12);
    goto LABEL_56;
  }
  if (!v15)
    goto LABEL_300;
  ___ZN4data20QMIDataCommandDriver13setDataFormatEN3abm4data10DataFormatEjN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2((uint64_t)v238, v15 + 3);
LABEL_57:
  v234[0] = MEMORY[0x1E0C809B0];
  v234[1] = 0x40000000;
  v235 = ___ZN4data20QMIDataCommandDriver13setDataFormatEN3abm4data10DataFormatEjN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_3;
  v236 = &__block_descriptor_tmp_48_4;
  v237 = v4;
  v36 = (char *)*((_QWORD *)&v245 + 1);
  v37 = (char *)v246;
  v38 = (const void **)*((_QWORD *)&v245 + 1);
  if (*((_QWORD *)&v245 + 1) != (_QWORD)v246)
  {
    v38 = (const void **)*((_QWORD *)&v245 + 1);
    while (*((_BYTE *)*v38 + 8) != 21)
    {
      if (++v38 == (const void **)v246)
        goto LABEL_65;
    }
  }
  if (v38 == (const void **)v246)
  {
LABEL_65:
    v40 = operator new(0x10uLL);
    v41 = v40;
    v40[8] = 21;
    *(_QWORD *)v40 = off_1E66E1AF8;
    *((_DWORD *)v40 + 3) = 0;
    v42 = v40 + 12;
    if ((unint64_t)v37 < *((_QWORD *)&v246 + 1))
    {
      *(_QWORD *)v37 = v40;
      v43 = (uint64_t)(v37 + 8);
LABEL_87:
      *(_QWORD *)&v246 = v43;
      v235((uint64_t)v234, v42);
      goto LABEL_88;
    }
    v44 = v37 - v36;
    v45 = (v37 - v36) >> 3;
    v46 = v45 + 1;
    if ((unint64_t)(v45 + 1) >> 61)
      goto LABEL_301;
    v47 = *((_QWORD *)&v246 + 1) - (_QWORD)v36;
    if ((uint64_t)(*((_QWORD *)&v246 + 1) - (_QWORD)v36) >> 2 > v46)
      v46 = v47 >> 2;
    if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
      v48 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v48 = v46;
    if (v48)
    {
      if (v48 >> 61)
        goto LABEL_302;
      v49 = operator new(8 * v48);
      v50 = &v49[8 * v45];
      v51 = &v49[8 * v48];
      *v50 = v41;
      v43 = (uint64_t)(v50 + 1);
      if (v36 != v37)
      {
LABEL_76:
        if ((unint64_t)(v44 - 8) < 0x58)
          goto LABEL_306;
        if ((unint64_t)(v36 - v49) < 0x20)
          goto LABEL_306;
        v52 = ((unint64_t)(v44 - 8) >> 3) + 1;
        v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
        v54 = &v37[-v53];
        v50 = (_QWORD *)((char *)v50 - v53);
        v55 = &v49[8 * v45 - 16];
        v56 = v37 - 16;
        v57 = v52 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v58 = *(_OWORD *)v56;
          *(v55 - 1) = *((_OWORD *)v56 - 1);
          *v55 = v58;
          v55 -= 2;
          v56 -= 32;
          v57 -= 4;
        }
        while (v57);
        v37 = v54;
        if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_306:
          do
          {
            v59 = *((_QWORD *)v37 - 1);
            v37 -= 8;
            *--v50 = v59;
          }
          while (v37 != v36);
        }
        v36 = (char *)*((_QWORD *)&v245 + 1);
        *((_QWORD *)&v245 + 1) = v50;
        *(_QWORD *)&v246 = v43;
        *((_QWORD *)&v246 + 1) = v51;
        if (!v36)
          goto LABEL_87;
        goto LABEL_86;
      }
    }
    else
    {
      v49 = 0;
      v50 = (_QWORD *)(8 * v45);
      v51 = 0;
      *(_QWORD *)(8 * v45) = v41;
      v43 = 8 * v45 + 8;
      if (v36 != v37)
        goto LABEL_76;
    }
    *((_QWORD *)&v245 + 1) = v50;
    *(_QWORD *)&v246 = v43;
    *((_QWORD *)&v246 + 1) = v51;
    if (!v36)
      goto LABEL_87;
LABEL_86:
    operator delete(v36);
    goto LABEL_87;
  }
  if (!v39)
    goto LABEL_300;
  ___ZN4data20QMIDataCommandDriver13setDataFormatEN3abm4data10DataFormatEjN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_3((uint64_t)v234, v39 + 3);
LABEL_88:
  v230[0] = MEMORY[0x1E0C809B0];
  v230[1] = 0x40000000;
  v231 = ___ZN4data20QMIDataCommandDriver13setDataFormatEN3abm4data10DataFormatEjN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_4;
  v232 = &__block_descriptor_tmp_49_4;
  v233 = v5;
  v60 = (char *)*((_QWORD *)&v245 + 1);
  v61 = (char *)v246;
  v62 = (const void **)*((_QWORD *)&v245 + 1);
  if (*((_QWORD *)&v245 + 1) != (_QWORD)v246)
  {
    v62 = (const void **)*((_QWORD *)&v245 + 1);
    while (*((_BYTE *)*v62 + 8) != 22)
    {
      if (++v62 == (const void **)v246)
        goto LABEL_96;
    }
  }
  if (v62 == (const void **)v246)
  {
LABEL_96:
    v64 = operator new(0x10uLL);
    v65 = v64;
    v64[8] = 22;
    *(_QWORD *)v64 = off_1E66E1B48;
    *((_DWORD *)v64 + 3) = 0;
    v66 = v64 + 12;
    if ((unint64_t)v61 < *((_QWORD *)&v246 + 1))
    {
      *(_QWORD *)v61 = v64;
      v67 = (uint64_t)(v61 + 8);
LABEL_118:
      *(_QWORD *)&v246 = v67;
      v231((uint64_t)v230, v66);
      goto LABEL_119;
    }
    v68 = v61 - v60;
    v69 = (v61 - v60) >> 3;
    v70 = v69 + 1;
    if ((unint64_t)(v69 + 1) >> 61)
      goto LABEL_301;
    v71 = *((_QWORD *)&v246 + 1) - (_QWORD)v60;
    if ((uint64_t)(*((_QWORD *)&v246 + 1) - (_QWORD)v60) >> 2 > v70)
      v70 = v71 >> 2;
    if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8)
      v72 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v72 = v70;
    if (v72)
    {
      if (v72 >> 61)
        goto LABEL_302;
      v73 = operator new(8 * v72);
      v74 = &v73[8 * v69];
      v75 = &v73[8 * v72];
      *v74 = v65;
      v67 = (uint64_t)(v74 + 1);
      if (v60 != v61)
      {
LABEL_107:
        if ((unint64_t)(v68 - 8) < 0x58)
          goto LABEL_307;
        if ((unint64_t)(v60 - v73) < 0x20)
          goto LABEL_307;
        v76 = ((unint64_t)(v68 - 8) >> 3) + 1;
        v77 = 8 * (v76 & 0x3FFFFFFFFFFFFFFCLL);
        v78 = &v61[-v77];
        v74 = (_QWORD *)((char *)v74 - v77);
        v79 = &v73[8 * v69 - 16];
        v80 = v61 - 16;
        v81 = v76 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v82 = *(_OWORD *)v80;
          *(v79 - 1) = *((_OWORD *)v80 - 1);
          *v79 = v82;
          v79 -= 2;
          v80 -= 32;
          v81 -= 4;
        }
        while (v81);
        v61 = v78;
        if (v76 != (v76 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_307:
          do
          {
            v83 = *((_QWORD *)v61 - 1);
            v61 -= 8;
            *--v74 = v83;
          }
          while (v61 != v60);
        }
        v60 = (char *)*((_QWORD *)&v245 + 1);
        *((_QWORD *)&v245 + 1) = v74;
        *(_QWORD *)&v246 = v67;
        *((_QWORD *)&v246 + 1) = v75;
        if (!v60)
          goto LABEL_118;
        goto LABEL_117;
      }
    }
    else
    {
      v73 = 0;
      v74 = (_QWORD *)(8 * v69);
      v75 = 0;
      *(_QWORD *)(8 * v69) = v65;
      v67 = 8 * v69 + 8;
      if (v60 != v61)
        goto LABEL_107;
    }
    *((_QWORD *)&v245 + 1) = v74;
    *(_QWORD *)&v246 = v67;
    *((_QWORD *)&v246 + 1) = v75;
    if (!v60)
      goto LABEL_118;
LABEL_117:
    operator delete(v60);
    goto LABEL_118;
  }
  if (!v63)
    goto LABEL_300;
  ___ZN4data20QMIDataCommandDriver13setDataFormatEN3abm4data10DataFormatEjN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_4((uint64_t)v230, v63 + 3);
LABEL_119:
  v226[0] = MEMORY[0x1E0C809B0];
  v226[1] = 0x40000000;
  v227 = ___ZN4data20QMIDataCommandDriver13setDataFormatEN3abm4data10DataFormatEjN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_5;
  v228 = &__block_descriptor_tmp_51_4;
  v229 = v6;
  v84 = (char *)*((_QWORD *)&v245 + 1);
  v85 = (char *)v246;
  v86 = (const void **)*((_QWORD *)&v245 + 1);
  if (*((_QWORD *)&v245 + 1) != (_QWORD)v246)
  {
    v86 = (const void **)*((_QWORD *)&v245 + 1);
    while (*((_BYTE *)*v86 + 8) != 18)
    {
      if (++v86 == (const void **)v246)
        goto LABEL_127;
    }
  }
  if (v86 == (const void **)v246)
  {
LABEL_127:
    v88 = operator new(0x10uLL);
    v89 = v88;
    v88[8] = 18;
    *(_QWORD *)v88 = off_1E66E1B98;
    *((_DWORD *)v88 + 3) = 0;
    v90 = v88 + 12;
    if ((unint64_t)v85 < *((_QWORD *)&v246 + 1))
    {
      *(_QWORD *)v85 = v88;
      v91 = (uint64_t)(v85 + 8);
LABEL_149:
      *(_QWORD *)&v246 = v91;
      v227((uint64_t)v226, v90);
      goto LABEL_150;
    }
    v92 = v85 - v84;
    v93 = (v85 - v84) >> 3;
    v94 = v93 + 1;
    if ((unint64_t)(v93 + 1) >> 61)
      goto LABEL_301;
    v95 = *((_QWORD *)&v246 + 1) - (_QWORD)v84;
    if ((uint64_t)(*((_QWORD *)&v246 + 1) - (_QWORD)v84) >> 2 > v94)
      v94 = v95 >> 2;
    if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFF8)
      v96 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v96 = v94;
    if (v96)
    {
      if (v96 >> 61)
        goto LABEL_302;
      v97 = operator new(8 * v96);
      v98 = &v97[8 * v93];
      v99 = &v97[8 * v96];
      *v98 = v89;
      v91 = (uint64_t)(v98 + 1);
      if (v84 != v85)
      {
LABEL_138:
        if ((unint64_t)(v92 - 8) < 0x58)
          goto LABEL_308;
        if ((unint64_t)(v84 - v97) < 0x20)
          goto LABEL_308;
        v100 = ((unint64_t)(v92 - 8) >> 3) + 1;
        v101 = 8 * (v100 & 0x3FFFFFFFFFFFFFFCLL);
        v102 = &v85[-v101];
        v98 = (_QWORD *)((char *)v98 - v101);
        v103 = &v97[8 * v93 - 16];
        v104 = v85 - 16;
        v105 = v100 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v106 = *(_OWORD *)v104;
          *(v103 - 1) = *((_OWORD *)v104 - 1);
          *v103 = v106;
          v103 -= 2;
          v104 -= 32;
          v105 -= 4;
        }
        while (v105);
        v85 = v102;
        if (v100 != (v100 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_308:
          do
          {
            v107 = *((_QWORD *)v85 - 1);
            v85 -= 8;
            *--v98 = v107;
          }
          while (v85 != v84);
        }
        v84 = (char *)*((_QWORD *)&v245 + 1);
        *((_QWORD *)&v245 + 1) = v98;
        *(_QWORD *)&v246 = v91;
        *((_QWORD *)&v246 + 1) = v99;
        if (!v84)
          goto LABEL_149;
        goto LABEL_148;
      }
    }
    else
    {
      v97 = 0;
      v98 = (_QWORD *)(8 * v93);
      v99 = 0;
      *(_QWORD *)(8 * v93) = v89;
      v91 = 8 * v93 + 8;
      if (v84 != v85)
        goto LABEL_138;
    }
    *((_QWORD *)&v245 + 1) = v98;
    *(_QWORD *)&v246 = v91;
    *((_QWORD *)&v246 + 1) = v99;
    if (!v84)
      goto LABEL_149;
LABEL_148:
    operator delete(v84);
    goto LABEL_149;
  }
  if (!v87)
    goto LABEL_300;
  ___ZN4data20QMIDataCommandDriver13setDataFormatEN3abm4data10DataFormatEjN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_5((uint64_t)v226, v87 + 3);
LABEL_150:
  v109 = (const void **)*((_QWORD *)&v245 + 1);
  v108 = (const void **)v246;
  v110 = (const void **)*((_QWORD *)&v245 + 1);
  if (*((_QWORD *)&v245 + 1) != (_QWORD)v246)
  {
    v110 = (const void **)*((_QWORD *)&v245 + 1);
    while (*((_BYTE *)*v110 + 8) != 27)
    {
      if (++v110 == (const void **)v246)
        goto LABEL_159;
    }
  }
  if (v110 == (const void **)v246)
  {
LABEL_159:
    v112 = (char *)operator new(0x10uLL);
    v113 = v112;
    v112[8] = 27;
    *(_QWORD *)v112 = off_1E66E1BE8;
    *((_DWORD *)v112 + 3) = 0;
    v114 = v112 + 12;
    if ((unint64_t)v108 < *((_QWORD *)&v246 + 1))
    {
      *v108 = v112;
      v115 = (uint64_t)(v108 + 1);
      goto LABEL_181;
    }
    v116 = (char *)v108 - (char *)v109;
    v117 = v108 - v109;
    v118 = v117 + 1;
    if ((unint64_t)(v117 + 1) >> 61)
      goto LABEL_301;
    v119 = *((_QWORD *)&v246 + 1) - (_QWORD)v109;
    if ((uint64_t)(*((_QWORD *)&v246 + 1) - (_QWORD)v109) >> 2 > v118)
      v118 = v119 >> 2;
    if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFF8)
      v120 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v120 = v118;
    if (v120)
    {
      if (v120 >> 61)
        goto LABEL_302;
      v121 = operator new(8 * v120);
      v122 = &v121[8 * v117];
      v123 = &v121[8 * v120];
      *v122 = v113;
      v115 = (uint64_t)(v122 + 1);
      if (v109 != v108)
      {
LABEL_170:
        if ((unint64_t)(v116 - 8) < 0x58)
          goto LABEL_309;
        if ((unint64_t)((char *)v109 - v121) < 0x20)
          goto LABEL_309;
        v124 = ((unint64_t)(v116 - 8) >> 3) + 1;
        v125 = 8 * (v124 & 0x3FFFFFFFFFFFFFFCLL);
        v126 = &v108[v125 / 0xFFFFFFFFFFFFFFF8];
        v122 = (_QWORD *)((char *)v122 - v125);
        v127 = &v121[8 * v117 - 16];
        v128 = v108 - 2;
        v129 = v124 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v130 = *(_OWORD *)v128;
          *(v127 - 1) = *((_OWORD *)v128 - 1);
          *v127 = v130;
          v127 -= 2;
          v128 -= 4;
          v129 -= 4;
        }
        while (v129);
        v108 = v126;
        if (v124 != (v124 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_309:
          do
          {
            v131 = (uint64_t)*--v108;
            *--v122 = v131;
          }
          while (v108 != v109);
        }
        v109 = (const void **)*((_QWORD *)&v245 + 1);
        *((_QWORD *)&v245 + 1) = v122;
        *(_QWORD *)&v246 = v115;
        *((_QWORD *)&v246 + 1) = v123;
        if (!v109)
        {
LABEL_181:
          *(_QWORD *)&v246 = v115;
          v109 = (const void **)*((_QWORD *)&v245 + 1);
          v108 = (const void **)v115;
          *v114 = 1;
          if (v109 == (const void **)v115)
            goto LABEL_190;
          goto LABEL_182;
        }
LABEL_180:
        operator delete(v109);
        goto LABEL_181;
      }
    }
    else
    {
      v121 = 0;
      v122 = (_QWORD *)(8 * v117);
      v123 = 0;
      *(_QWORD *)(8 * v117) = v113;
      v115 = 8 * v117 + 8;
      if (v109 != v108)
        goto LABEL_170;
    }
    *((_QWORD *)&v245 + 1) = v122;
    *(_QWORD *)&v246 = v115;
    *((_QWORD *)&v246 + 1) = v123;
    if (!v109)
      goto LABEL_181;
    goto LABEL_180;
  }
  if (!v111)
    goto LABEL_300;
  v111[3] = 1;
  if (v109 == v108)
  {
LABEL_190:
    v134 = (char *)operator new(0x10uLL);
    v135 = v134;
    v134[8] = 28;
    *(_QWORD *)v134 = off_1E66E1C38;
    *((_DWORD *)v134 + 3) = 0;
    v136 = v134 + 12;
    if ((unint64_t)v108 < *((_QWORD *)&v246 + 1))
    {
      *v108 = v134;
      v137 = (uint64_t)(v108 + 1);
      goto LABEL_206;
    }
    v138 = (char *)*((_QWORD *)&v245 + 1);
    v139 = ((uint64_t)v108 - *((_QWORD *)&v245 + 1)) >> 3;
    v140 = v139 + 1;
    if ((unint64_t)(v139 + 1) >> 61)
      goto LABEL_301;
    v141 = *((_QWORD *)&v246 + 1) - *((_QWORD *)&v245 + 1);
    if ((uint64_t)(*((_QWORD *)&v246 + 1) - *((_QWORD *)&v245 + 1)) >> 2 > v140)
      v140 = v141 >> 2;
    if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFF8)
      v142 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v142 = v140;
    if (v142)
    {
      if (v142 >> 61)
        goto LABEL_302;
      v143 = (char *)operator new(8 * v142);
      v144 = &v143[8 * v139];
      v145 = &v143[8 * v142];
      *(_QWORD *)v144 = v135;
      v137 = (uint64_t)(v144 + 8);
      v146 = (char *)((char *)v108 - v138);
      if (v108 != (const void **)v138)
      {
LABEL_201:
        v147 = (unint64_t)(v146 - 8);
        if (v147 >= 0x58)
        {
          if ((unint64_t)(v138 - v143) >= 0x20)
          {
            v199 = (v147 >> 3) + 1;
            v200 = 8 * (v199 & 0x3FFFFFFFFFFFFFFCLL);
            v148 = &v108[v200 / 0xFFFFFFFFFFFFFFF8];
            v144 -= v200;
            v201 = &v143[8 * v139 - 16];
            v202 = v108 - 2;
            v203 = v199 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v204 = *(_OWORD *)v202;
              *((_OWORD *)v201 - 1) = *((_OWORD *)v202 - 1);
              *(_OWORD *)v201 = v204;
              v201 -= 32;
              v202 -= 4;
              v203 -= 4;
            }
            while (v203);
            if (v199 == (v199 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_291:
              v108 = (const void **)*((_QWORD *)&v245 + 1);
              *((_QWORD *)&v245 + 1) = v144;
              *(_QWORD *)&v246 = v137;
              *((_QWORD *)&v246 + 1) = v145;
              if (!v108)
              {
LABEL_206:
                *(_QWORD *)&v246 = v137;
                v109 = (const void **)*((_QWORD *)&v245 + 1);
                v108 = (const void **)v137;
                *v136 = 2048;
                if (v109 == (const void **)v137)
                  goto LABEL_214;
                goto LABEL_207;
              }
LABEL_205:
              operator delete(v108);
              goto LABEL_206;
            }
          }
          else
          {
            v148 = v108;
          }
        }
        else
        {
          v148 = v108;
        }
        do
        {
          v205 = (uint64_t)*--v148;
          *((_QWORD *)v144 - 1) = v205;
          v144 -= 8;
        }
        while (v148 != (const void **)v138);
        goto LABEL_291;
      }
    }
    else
    {
      v143 = 0;
      v144 = (char *)(8 * v139);
      v145 = 0;
      *(_QWORD *)(8 * v139) = v135;
      v137 = 8 * v139 + 8;
      v146 = (char *)((char *)v108 - v138);
      if (v108 != (const void **)v138)
        goto LABEL_201;
    }
    *((_QWORD *)&v245 + 1) = v144;
    *(_QWORD *)&v246 = v137;
    *((_QWORD *)&v246 + 1) = v145;
    if (!v108)
      goto LABEL_206;
    goto LABEL_205;
  }
LABEL_182:
  v132 = v109;
  while (*((_BYTE *)*v132 + 8) != 28)
  {
    if (++v132 == v108)
      goto LABEL_190;
  }
  if (v132 == v108)
    goto LABEL_190;
  if (!v133)
    goto LABEL_300;
  v133[3] = 2048;
  if (v109 == v108)
  {
LABEL_214:
    v153 = (char *)operator new(0x10uLL);
    v154 = v153;
    v153[8] = 17;
    *(_QWORD *)v153 = off_1E66E1C88;
    *((_DWORD *)v153 + 3) = 0;
    v151 = v153 + 12;
    if ((unint64_t)v108 < *((_QWORD *)&v246 + 1))
    {
      *v108 = v153;
      v155 = (uint64_t)(v108 + 1);
      v152 = v213;
LABEL_231:
      *(_QWORD *)&v246 = v155;
      v109 = (const void **)*((_QWORD *)&v245 + 1);
      v108 = (const void **)v155;
      goto LABEL_232;
    }
    v156 = (char *)*((_QWORD *)&v245 + 1);
    v157 = ((uint64_t)v108 - *((_QWORD *)&v245 + 1)) >> 3;
    v158 = v157 + 1;
    if ((unint64_t)(v157 + 1) >> 61)
      goto LABEL_301;
    v159 = *((_QWORD *)&v246 + 1) - *((_QWORD *)&v245 + 1);
    if ((uint64_t)(*((_QWORD *)&v246 + 1) - *((_QWORD *)&v245 + 1)) >> 2 > v158)
      v158 = v159 >> 2;
    if ((unint64_t)v159 >= 0x7FFFFFFFFFFFFFF8)
      v160 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v160 = v158;
    if (v160)
    {
      if (v160 >> 61)
        goto LABEL_302;
      v161 = (char *)operator new(8 * v160);
      v162 = &v161[8 * v157];
      v163 = &v161[8 * v160];
      *(_QWORD *)v162 = v154;
      v155 = (uint64_t)(v162 + 8);
      v164 = (char *)((char *)v108 - v156);
      if (v108 != (const void **)v156)
      {
LABEL_225:
        v165 = (unint64_t)(v164 - 8);
        if (v165 >= 0x58 && (unint64_t)(v156 - v161) >= 0x20)
        {
          v206 = (v165 >> 3) + 1;
          v207 = 8 * (v206 & 0x3FFFFFFFFFFFFFFCLL);
          v166 = &v108[v207 / 0xFFFFFFFFFFFFFFF8];
          v162 -= v207;
          v208 = &v161[8 * v157 - 16];
          v209 = v108 - 2;
          v210 = v206 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v211 = *(_OWORD *)v209;
            *((_OWORD *)v208 - 1) = *((_OWORD *)v209 - 1);
            *(_OWORD *)v208 = v211;
            v208 -= 32;
            v209 -= 4;
            v210 -= 4;
          }
          while (v210);
          v152 = v213;
          if (v206 == (v206 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_229:
            v108 = (const void **)*((_QWORD *)&v245 + 1);
            *((_QWORD *)&v245 + 1) = v162;
            *(_QWORD *)&v246 = v155;
            *((_QWORD *)&v246 + 1) = v163;
            if (!v108)
              goto LABEL_231;
LABEL_230:
            operator delete(v108);
            goto LABEL_231;
          }
        }
        else
        {
          v166 = v108;
          v152 = v213;
        }
        do
        {
          v167 = (uint64_t)*--v166;
          *((_QWORD *)v162 - 1) = v167;
          v162 -= 8;
        }
        while (v166 != (const void **)v156);
        goto LABEL_229;
      }
    }
    else
    {
      v161 = 0;
      v162 = (char *)(8 * v157);
      v163 = 0;
      *(_QWORD *)(8 * v157) = v154;
      v155 = 8 * v157 + 8;
      v164 = (char *)((char *)v108 - v156);
      if (v108 != (const void **)v156)
        goto LABEL_225;
    }
    v152 = v213;
    *((_QWORD *)&v245 + 1) = v162;
    *(_QWORD *)&v246 = v155;
    *((_QWORD *)&v246 + 1) = v163;
    if (!v108)
      goto LABEL_231;
    goto LABEL_230;
  }
LABEL_207:
  v149 = v109;
  while (*((_BYTE *)*v149 + 8) != 17)
  {
    if (++v149 == v108)
      goto LABEL_214;
  }
  if (v149 == v108)
    goto LABEL_214;
  if (!v150)
    goto LABEL_300;
  v151 = v150 + 12;
  v152 = v213;
LABEL_232:
  *v151 = 2;
  v222[0] = MEMORY[0x1E0C809B0];
  v222[1] = 0x40000000;
  v223 = (uint64_t (*)(uint64_t, char *))___ZN4data20QMIDataCommandDriver13setDataFormatEN3abm4data10DataFormatEjN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_9;
  v224 = &__block_descriptor_tmp_61_3;
  v225 = *(_DWORD *)(v152 + 104);
  if (v109 == v108)
    goto LABEL_235;
  while (*((_BYTE *)*v109 + 8) != 23)
  {
    if (++v109 == v108)
      goto LABEL_235;
  }
  if (v109 == v108)
  {
LABEL_235:
    v168 = qmi::MutableMessageBase::createTLV<wda::tlv::abm::PeripheralEndPointID>(&v245, 23);
    v169 = (capabilities::ipc *)v223((uint64_t)v222, v168);
  }
  else
  {
    if (!v176)
LABEL_300:
      __cxa_bad_cast();
    v169 = (capabilities::ipc *)___ZN4data20QMIDataCommandDriver13setDataFormatEN3abm4data10DataFormatEjN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_9((uint64_t)v222, v176 + 3);
  }
  v170 = v212;
  if (!capabilities::ipc::supportsCoalescing(v169))
    goto LABEL_272;
  v171 = (char *)*((_QWORD *)&v245 + 1);
  v172 = (char *)v246;
  v173 = (const void **)*((_QWORD *)&v245 + 1);
  if (*((_QWORD *)&v245 + 1) != (_QWORD)v246)
  {
    v173 = (const void **)*((_QWORD *)&v245 + 1);
    while (*((_BYTE *)*v173 + 8) != 29)
    {
      if (++v173 == (const void **)v246)
        goto LABEL_248;
    }
  }
  if (v173 == (const void **)v246)
  {
LABEL_248:
    v177 = operator new(0x10uLL);
    v178 = v177;
    v177[4] = 29;
    *(_QWORD *)v177 = off_1E66E1CD8;
    *((_BYTE *)v177 + 10) = 0;
    if ((unint64_t)v172 < *((_QWORD *)&v246 + 1))
    {
      *(_QWORD *)v172 = v177;
      v179 = (uint64_t)(v172 + 8);
      v170 = v212;
LABEL_270:
      v175 = (_WORD *)((char *)v178 + 9);
      *(_QWORD *)&v246 = v179;
      goto LABEL_271;
    }
    v180 = v172 - v171;
    v181 = (v172 - v171) >> 3;
    v182 = v181 + 1;
    if (!((unint64_t)(v181 + 1) >> 61))
    {
      v183 = *((_QWORD *)&v246 + 1) - (_QWORD)v171;
      if ((uint64_t)(*((_QWORD *)&v246 + 1) - (_QWORD)v171) >> 2 > v182)
        v182 = v183 >> 2;
      if ((unint64_t)v183 >= 0x7FFFFFFFFFFFFFF8)
        v184 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v184 = v182;
      if (!v184)
      {
        v185 = 0;
        v186 = (_QWORD *)(8 * v181);
        v187 = 0;
        *(_QWORD *)(8 * v181) = v178;
        v179 = 8 * v181 + 8;
        if (v171 != v172)
          goto LABEL_262;
        goto LABEL_298;
      }
      if (!(v184 >> 61))
      {
        v185 = operator new(8 * v184);
        v186 = &v185[8 * v181];
        v187 = &v185[8 * v184];
        *v186 = v178;
        v179 = (uint64_t)(v186 + 1);
        if (v171 != v172)
        {
LABEL_262:
          v170 = v212;
          if ((unint64_t)(v180 - 8) < 0x58)
            goto LABEL_310;
          if ((unint64_t)(v171 - v185) < 0x20)
            goto LABEL_310;
          v188 = ((unint64_t)(v180 - 8) >> 3) + 1;
          v189 = 8 * (v188 & 0x3FFFFFFFFFFFFFFCLL);
          v190 = &v172[-v189];
          v186 = (_QWORD *)((char *)v186 - v189);
          v191 = &v185[8 * v181 - 16];
          v192 = v172 - 16;
          v193 = v188 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v194 = *(_OWORD *)v192;
            *(v191 - 1) = *((_OWORD *)v192 - 1);
            *v191 = v194;
            v191 -= 2;
            v192 -= 32;
            v193 -= 4;
          }
          while (v193);
          v172 = v190;
          if (v188 != (v188 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_310:
            do
            {
              v195 = *((_QWORD *)v172 - 1);
              v172 -= 8;
              *--v186 = v195;
            }
            while (v172 != v171);
          }
          v171 = (char *)*((_QWORD *)&v245 + 1);
          *((_QWORD *)&v245 + 1) = v186;
          *(_QWORD *)&v246 = v179;
          *((_QWORD *)&v246 + 1) = v187;
          if (!v171)
            goto LABEL_270;
LABEL_269:
          operator delete(v171);
          goto LABEL_270;
        }
LABEL_298:
        v170 = v212;
        *((_QWORD *)&v245 + 1) = v186;
        *(_QWORD *)&v246 = v179;
        *((_QWORD *)&v246 + 1) = v187;
        if (!v171)
          goto LABEL_270;
        goto LABEL_269;
      }
LABEL_302:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_301:
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  if (!v174)
    goto LABEL_300;
  v175 = v174 + 9;
  v170 = v212;
LABEL_271:
  *v175 = 257;
LABEL_272:
  v217 = v170 + 144;
  v218 = QMIServiceMsg::create();
  v219 = 25000;
  v220 = 0;
  aBlock = 0;
  v214[0] = MEMORY[0x1E0C809B0];
  v214[1] = 1174405120;
  v214[2] = ___ZN4data20QMIDataCommandDriver13setDataFormatEN3abm4data10DataFormatEjN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_11;
  v214[3] = &__block_descriptor_tmp_65_1;
  v214[4] = v170;
  v196 = *(void **)(v213 + 88);
  if (v196)
    v196 = _Block_copy(v196);
  v197 = *(NSObject **)(v213 + 96);
  v215 = v196;
  object = v197;
  if (v197)
    dispatch_retain(v197);
  block = MEMORY[0x1E0C809B0];
  v248 = 0x40000000;
  v249 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wda3abm13SetDataFormat8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v250 = &unk_1E66E1D08;
  v251 = v214;
  v198 = _Block_copy(&block);
  aBlock = v198;
  if (v218)
  {
    qmi::Client::send();
    v198 = aBlock;
  }
  if (v198)
    _Block_release(v198);
  if (object)
    dispatch_release(object);
  if (v215)
    _Block_release(v215);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v245);
}

void sub_1B3D8C700(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 201) < 0)
  {
    operator delete(*(void **)(v1 - 224));
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v1 - 192));
    _Unwind_Resume(a1);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v1 - 192));
  _Unwind_Resume(a1);
}

uint64_t ___ZN4data20QMIDataCommandDriver13setDataFormatEN3abm4data10DataFormatEjN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

uint64_t ___ZN4data20QMIDataCommandDriver13setDataFormatEN3abm4data10DataFormatEjN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_3(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

uint64_t ___ZN4data20QMIDataCommandDriver13setDataFormatEN3abm4data10DataFormatEjN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_4(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

uint64_t ___ZN4data20QMIDataCommandDriver13setDataFormatEN3abm4data10DataFormatEjN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_5(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

uint64_t ___ZN4data20QMIDataCommandDriver13setDataFormatEN3abm4data10DataFormatEjN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_9(uint64_t result, _DWORD *a2)
{
  int v2;

  v2 = *(_DWORD *)(result + 32);
  *a2 = 3;
  a2[1] = v2;
  return result;
}

void ___ZN4data20QMIDataCommandDriver13setDataFormatEN3abm4data10DataFormatEjN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_11(uint64_t a1, const qmi::ResponseBase *a2)
{
  const void *v3;
  CFTypeRef v4;
  void *v5;
  NSObject *v6;
  CFTypeRef cf;
  _QWORD block[4];
  void *aBlock;
  CFTypeRef v10;

  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  data::QMIDataCommandDriver::checkError(a2, &cf);
  v3 = *(const void **)(a1 + 40);
  if (!v3 || !*(_QWORD *)(a1 + 48))
    goto LABEL_20;
  v4 = cf;
  if (cf && (CFRetain(cf), (v3 = *(const void **)(a1 + 40)) == 0))
    v5 = 0;
  else
    v5 = _Block_copy(v3);
  v6 = *(NSObject **)(a1 + 48);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_4;
  block[3] = &__block_descriptor_tmp_97_3;
  if (v5)
  {
    aBlock = _Block_copy(v5);
    v10 = v4;
    if (!v4)
      goto LABEL_12;
    goto LABEL_11;
  }
  aBlock = 0;
  v10 = v4;
  if (v4)
LABEL_11:
    CFRetain(v4);
LABEL_12:
  dispatch_async(v6, block);
  if (v10)
    CFRelease(v10);
  if (aBlock)
    _Block_release(aBlock);
  if (v5)
    _Block_release(v5);
  if (v4)
    CFRelease(v4);
LABEL_20:
  if (cf)
    CFRelease(cf);
}

void __copy_helper_block_e8_40c27_ZTSN3abm4data10DataFormatE88c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;

  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = &off_1E66D7D98;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = &off_1E66D7DE0;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = &off_1E66D7E28;
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  v4 = *(void **)(a2 + 88);
  if (v4)
    v4 = _Block_copy(v4);
  v5 = *(NSObject **)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v4;
  *(_QWORD *)(a1 + 96) = v5;
  if (v5)
    dispatch_retain(v5);
}

void __destroy_helper_block_e8_4088c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 96);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 88);
  if (v3)
    _Block_release(v3);
}

void data::QMIDataCommandDriver::setDataPowerSaveConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  uint64_t *v6;
  NSObject *v7;
  _QWORD v8[6];
  __int16 v9;
  void *aBlock;
  dispatch_object_t object;

  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 1174405120;
  v8[2] = ___ZN4data20QMIDataCommandDriver22setDataPowerSaveConfigEN3abm4data13DataPowerSaveEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
  v8[3] = &__block_descriptor_tmp_74_2;
  v9 = *(_WORD *)(a2 + 8);
  v8[4] = a1;
  v8[5] = &off_1E66D7EB8;
  v5 = *(void **)a3;
  if (*(_QWORD *)a3)
    v5 = _Block_copy(v5);
  v6 = (uint64_t *)(a1 + 72);
  v7 = *(NSObject **)(a3 + 8);
  aBlock = v5;
  object = v7;
  if (v7)
    dispatch_retain(v7);
  ctu::SharedSynchronizable<data::CommandDriver>::execute_wrapped(v6, (uint64_t)v8);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void ___ZN4data20QMIDataCommandDriver22setDataPowerSaveConfigEN3abm4data13DataPowerSaveEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  const void **v4;
  const void **v5;
  const void **v6;
  _DWORD *v7;
  const void *v8;
  void *v9;
  const void *v10;
  NSObject *v11;
  CFTypeRef v12;
  char *v13;
  char *v14;
  _DWORD *v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void *v27;
  NSObject *v28;
  void *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  const void **v33;
  _OWORD *v34;
  const void **v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  _QWORD v39[5];
  void *v40;
  dispatch_object_t object;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  void *aBlock;
  __int128 v47;
  __int128 v48;
  uint64_t block;
  uint64_t v50;
  void *v51;
  void *v52;
  void *v53;
  CFTypeRef cf;

  if (*(_BYTE *)(a1 + 49))
  {
    v2 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v47 = v3;
    v48 = v3;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v47);
    v4 = (const void **)*((_QWORD *)&v47 + 1);
    v5 = (const void **)v48;
    v6 = (const void **)*((_QWORD *)&v47 + 1);
    if (*((_QWORD *)&v47 + 1) != (_QWORD)v48)
    {
      v6 = (const void **)*((_QWORD *)&v47 + 1);
      while (*((_BYTE *)*v6 + 8) != 16)
      {
        if (++v6 == (const void **)v48)
          goto LABEL_16;
      }
    }
    if (v6 != (const void **)v48)
    {
      if (v7)
      {
        v7[3] = 2;
        if (v4 != v5)
          goto LABEL_30;
        goto LABEL_32;
      }
      goto LABEL_65;
    }
LABEL_16:
    v13 = (char *)operator new(0x10uLL);
    v14 = v13;
    v13[8] = 16;
    *(_QWORD *)v13 = off_1E66E1D50;
    *((_DWORD *)v13 + 3) = 0;
    v15 = v13 + 12;
    if ((unint64_t)v5 < *((_QWORD *)&v48 + 1))
    {
      *v5 = v13;
      v16 = (uint64_t)(v5 + 1);
LABEL_29:
      *(_QWORD *)&v48 = v16;
      v4 = (const void **)*((_QWORD *)&v47 + 1);
      v5 = (const void **)v16;
      *v15 = 2;
      if (v4 == (const void **)v16)
      {
LABEL_32:
        v25 = qmi::MutableMessageBase::createTLV<wda::tlv::abm::PeripheralEndPointID>(&v47, 1);
LABEL_33:
        *(_QWORD *)v25 = 0x400000003;
        v42 = v2 + 144;
        v43 = QMIServiceMsg::create();
        v44 = 25000;
        v45 = 0;
        aBlock = 0;
        v26 = MEMORY[0x1E0C809B0];
        v39[0] = MEMORY[0x1E0C809B0];
        v39[1] = 1174405120;
        v39[2] = ___ZN4data20QMIDataCommandDriver22setDataPowerSaveConfigEN3abm4data13DataPowerSaveEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_4;
        v39[3] = &__block_descriptor_tmp_73_2;
        v39[4] = v2;
        v27 = *(void **)(a1 + 56);
        if (v27)
          v27 = _Block_copy(v27);
        v28 = *(NSObject **)(a1 + 64);
        v40 = v27;
        object = v28;
        if (v28)
          dispatch_retain(v28);
        block = v26;
        v50 = 0x40000000;
        v51 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wda3abm18SetPowerSaveConfig8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
        v52 = &unk_1E66E1D80;
        v53 = v39;
        v29 = _Block_copy(&block);
        aBlock = v29;
        if (v43)
        {
          qmi::Client::send();
          v29 = aBlock;
        }
        if (v29)
          _Block_release(v29);
        if (object)
          dispatch_release(object);
        if (v40)
          _Block_release(v40);
        qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v47);
        return;
      }
LABEL_30:
      while (*((_BYTE *)*v4 + 8) != 1)
      {
        if (++v4 == v5)
          goto LABEL_32;
      }
      if (v4 == v5)
        goto LABEL_32;
      if (v30)
      {
        v25 = v30 + 12;
        goto LABEL_33;
      }
LABEL_65:
      __cxa_bad_cast();
    }
    v17 = (char *)v5 - (char *)v4;
    v18 = v5 - v4;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v20 = *((_QWORD *)&v48 + 1) - (_QWORD)v4;
    if ((uint64_t)(*((_QWORD *)&v48 + 1) - (_QWORD)v4) >> 2 > v19)
      v19 = v20 >> 2;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    if (v21)
    {
      if (v21 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v22 = operator new(8 * v21);
      v23 = &v22[8 * v18];
      v24 = &v22[8 * v21];
      *v23 = v14;
      v16 = (uint64_t)(v23 + 1);
      if (v4 == v5)
      {
LABEL_27:
        *((_QWORD *)&v47 + 1) = v23;
        *(_QWORD *)&v48 = v16;
        *((_QWORD *)&v48 + 1) = v24;
        if (!v4)
          goto LABEL_29;
LABEL_28:
        operator delete(v4);
        goto LABEL_29;
      }
    }
    else
    {
      v22 = 0;
      v23 = (_QWORD *)(8 * v18);
      v24 = 0;
      *(_QWORD *)(8 * v18) = v14;
      v16 = 8 * v18 + 8;
      if (v4 == v5)
        goto LABEL_27;
    }
    if ((unint64_t)(v17 - 8) < 0x58)
      goto LABEL_70;
    if ((unint64_t)((char *)v4 - v22) < 0x20)
      goto LABEL_70;
    v31 = ((unint64_t)(v17 - 8) >> 3) + 1;
    v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
    v33 = &v5[v32 / 0xFFFFFFFFFFFFFFF8];
    v23 = (_QWORD *)((char *)v23 - v32);
    v34 = &v22[8 * v18 - 16];
    v35 = v5 - 2;
    v36 = v31 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v37 = *(_OWORD *)v35;
      *(v34 - 1) = *((_OWORD *)v35 - 1);
      *v34 = v37;
      v34 -= 2;
      v35 -= 4;
      v36 -= 4;
    }
    while (v36);
    v5 = v33;
    if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_70:
      do
      {
        v38 = (uint64_t)*--v5;
        *--v23 = v38;
      }
      while (v5 != v4);
    }
    v4 = (const void **)*((_QWORD *)&v47 + 1);
    *((_QWORD *)&v47 + 1) = v23;
    *(_QWORD *)&v48 = v16;
    *((_QWORD *)&v48 + 1) = v24;
    if (!v4)
      goto LABEL_29;
    goto LABEL_28;
  }
  v8 = *(const void **)(a1 + 56);
  if (!v8 || !*(_QWORD *)(a1 + 64))
    return;
  v9 = _Block_copy(v8);
  v10 = v9;
  v11 = *(NSObject **)(a1 + 64);
  block = MEMORY[0x1E0C809B0];
  v50 = 1174405120;
  v51 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_4;
  v52 = &__block_descriptor_tmp_97_3;
  if (v9)
  {
    v53 = _Block_copy(v9);
    cf = 0;
    dispatch_async(v11, &block);
    v12 = cf;
    if (!cf)
      goto LABEL_61;
    goto LABEL_60;
  }
  v53 = 0;
  cf = 0;
  dispatch_async(v11, &block);
  v12 = cf;
  if (cf)
LABEL_60:
    CFRelease(v12);
LABEL_61:
  if (v53)
    _Block_release(v53);
  if (v10)
    _Block_release(v10);
}

void sub_1B3D8CF20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v8);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1B3D8CF44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1B3D8CF5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN4data20QMIDataCommandDriver22setDataPowerSaveConfigEN3abm4data13DataPowerSaveEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_4(uint64_t a1, const qmi::ResponseBase *a2)
{
  const void *v3;
  CFTypeRef v4;
  void *v5;
  NSObject *v6;
  CFTypeRef cf;
  _QWORD block[4];
  void *aBlock;
  CFTypeRef v10;

  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  data::QMIDataCommandDriver::checkError(a2, &cf);
  v3 = *(const void **)(a1 + 40);
  if (!v3 || !*(_QWORD *)(a1 + 48))
    goto LABEL_20;
  v4 = cf;
  if (cf && (CFRetain(cf), (v3 = *(const void **)(a1 + 40)) == 0))
    v5 = 0;
  else
    v5 = _Block_copy(v3);
  v6 = *(NSObject **)(a1 + 48);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_4;
  block[3] = &__block_descriptor_tmp_97_3;
  if (v5)
  {
    aBlock = _Block_copy(v5);
    v10 = v4;
    if (!v4)
      goto LABEL_12;
    goto LABEL_11;
  }
  aBlock = 0;
  v10 = v4;
  if (v4)
LABEL_11:
    CFRetain(v4);
LABEL_12:
  dispatch_async(v6, block);
  if (v10)
    CFRelease(v10);
  if (aBlock)
    _Block_release(aBlock);
  if (v5)
    _Block_release(v5);
  if (v4)
    CFRelease(v4);
LABEL_20:
  if (cf)
    CFRelease(cf);
}

void __copy_helper_block_e8_40c30_ZTSN3abm4data13DataPowerSaveE56c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;

  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = &off_1E66D7EB8;
  v4 = *(void **)(a2 + 56);
  if (v4)
    v4 = _Block_copy(v4);
  v5 = *(NSObject **)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v4;
  *(_QWORD *)(a1 + 64) = v5;
  if (v5)
    dispatch_retain(v5);
}

void data::QMIDataCommandDriver::setDefaultCapabilities(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  NSObject *v6;
  _QWORD v7[5];
  void *aBlock;
  dispatch_object_t object;

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1174405120;
  v7[2] = ___ZN4data20QMIDataCommandDriver22setDefaultCapabilitiesEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_82_2;
  v7[4] = a1;
  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = (uint64_t *)(a1 + 72);
  v6 = *(NSObject **)(a2 + 8);
  aBlock = v4;
  object = v6;
  if (v6)
    dispatch_retain(v6);
  ctu::SharedSynchronizable<data::CommandDriver>::execute_wrapped(v5, (uint64_t)v7);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void ___ZN4data20QMIDataCommandDriver22setDefaultCapabilitiesEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  __int128 v3;
  const void **v4;
  const void **v5;
  const void **v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  _DWORD *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void *v25;
  NSObject *v26;
  void *v27;
  unint64_t v28;
  const void **v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  const void **v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  _QWORD v37[5];
  void *v38;
  dispatch_object_t object;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  void *v44;
  __int128 v45;
  __int128 v46;
  _QWORD aBlock[5];

  v2 = a1[4];
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v45 = v3;
  v46 = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v45);
  v5 = (const void **)*((_QWORD *)&v45 + 1);
  v4 = (const void **)v46;
  v6 = (const void **)*((_QWORD *)&v45 + 1);
  if (*((_QWORD *)&v45 + 1) != (_QWORD)v46)
  {
    v6 = (const void **)*((_QWORD *)&v45 + 1);
    while (*((_BYTE *)*v6 + 8) != 1)
    {
      if (++v6 == (const void **)v46)
        goto LABEL_10;
    }
  }
  if (v6 != (const void **)v46)
  {
    if (v7)
    {
      *(_QWORD *)(v7 + 12) = 0x400000003;
      if (v5 != v4)
        goto LABEL_11;
      goto LABEL_13;
    }
    goto LABEL_54;
  }
LABEL_10:
  v8 = qmi::MutableMessageBase::createTLV<wda::tlv::abm::PeripheralEndPointID>(&v45, 1);
  v5 = (const void **)*((_QWORD *)&v45 + 1);
  v4 = (const void **)v46;
  *(_QWORD *)v8 = 0x400000003;
  if (v5 == v4)
    goto LABEL_13;
LABEL_11:
  while (*((_BYTE *)*v5 + 8) != 16)
  {
    if (++v5 == v4)
      goto LABEL_13;
  }
  if (v5 == v4)
  {
LABEL_13:
    v9 = (char *)operator new(0x10uLL);
    v10 = v9;
    v9[8] = 16;
    *(_QWORD *)v9 = off_1E66E1DC8;
    *((_DWORD *)v9 + 3) = 0;
    v11 = v9 + 12;
    if ((unint64_t)v4 < *((_QWORD *)&v46 + 1))
    {
      *v4 = v9;
      *(_QWORD *)&v46 = v4 + 1;
      goto LABEL_30;
    }
    v12 = (char *)*((_QWORD *)&v45 + 1);
    v13 = (char *)v4 - *((_QWORD *)&v45 + 1);
    v14 = ((uint64_t)v4 - *((_QWORD *)&v45 + 1)) >> 3;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v16 = *((_QWORD *)&v46 + 1) - *((_QWORD *)&v45 + 1);
    if ((uint64_t)(*((_QWORD *)&v46 + 1) - *((_QWORD *)&v45 + 1)) >> 2 > v15)
      v15 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v18 = operator new(8 * v17);
      v19 = &v18[8 * v14];
      v20 = &v18[8 * v17];
      *v19 = v10;
      v21 = (uint64_t)(v19 + 1);
      v22 = (char *)((char *)v4 - v12);
      if (v4 == (const void **)v12)
      {
LABEL_24:
        *((_QWORD *)&v45 + 1) = v19;
        *(_QWORD *)&v46 = v21;
        *((_QWORD *)&v46 + 1) = v20;
        if (!v4)
        {
LABEL_26:
          *(_QWORD *)&v46 = v21;
          goto LABEL_30;
        }
LABEL_25:
        operator delete(v4);
        goto LABEL_26;
      }
    }
    else
    {
      v18 = 0;
      v19 = (_QWORD *)(8 * v14);
      v20 = 0;
      *(_QWORD *)(8 * v14) = v10;
      v21 = 8 * v14 + 8;
      v22 = (char *)((char *)v4 - v12);
      if (v4 == (const void **)v12)
        goto LABEL_24;
    }
    v28 = (unint64_t)(v22 - 8);
    if (v28 >= 0x58)
    {
      if ((unint64_t)((char *)v4 - v18 - (_QWORD)v13) >= 0x20)
      {
        v30 = (v28 >> 3) + 1;
        v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
        v29 = &v4[v31 / 0xFFFFFFFFFFFFFFF8];
        v19 = (_QWORD *)((char *)v19 - v31);
        v32 = &v18[8 * v14 - 16];
        v33 = v4 - 2;
        v34 = v30 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v35 = *(_OWORD *)v33;
          *(v32 - 1) = *((_OWORD *)v33 - 1);
          *v32 = v35;
          v32 -= 2;
          v33 -= 4;
          v34 -= 4;
        }
        while (v34);
        if (v30 == (v30 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_52:
          v4 = (const void **)*((_QWORD *)&v45 + 1);
          *((_QWORD *)&v45 + 1) = v19;
          *(_QWORD *)&v46 = v21;
          *((_QWORD *)&v46 + 1) = v20;
          if (!v4)
            goto LABEL_26;
          goto LABEL_25;
        }
      }
      else
      {
        v29 = v4;
      }
    }
    else
    {
      v29 = v4;
    }
    do
    {
      v36 = (uint64_t)*--v29;
      *--v19 = v36;
    }
    while (v29 != (const void **)v12);
    goto LABEL_52;
  }
  if (!v23)
LABEL_54:
    __cxa_bad_cast();
  v11 = v23 + 12;
LABEL_30:
  *v11 = 1;
  v40 = v2 + 144;
  v41 = QMIServiceMsg::create();
  v42 = 25000;
  v43 = 0;
  v44 = 0;
  v24 = MEMORY[0x1E0C809B0];
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 1174405120;
  v37[2] = ___ZN4data20QMIDataCommandDriver22setDefaultCapabilitiesEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_4;
  v37[3] = &__block_descriptor_tmp_81_2;
  v37[4] = v2;
  v25 = (void *)a1[5];
  if (v25)
    v25 = _Block_copy(v25);
  v26 = a1[6];
  v38 = v25;
  object = v26;
  if (v26)
    dispatch_retain(v26);
  aBlock[0] = v24;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wda3abm13SetCapability8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66E1DF8;
  aBlock[4] = v37;
  v27 = _Block_copy(aBlock);
  v44 = v27;
  if (v41)
  {
    qmi::Client::send();
    v27 = v44;
  }
  if (v27)
    _Block_release(v27);
  if (object)
    dispatch_release(object);
  if (v38)
    _Block_release(v38);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v45);
}

void sub_1B3D8D588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v8);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1B3D8D5AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1B3D8D5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN4data20QMIDataCommandDriver22setDefaultCapabilitiesEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_4(uint64_t a1, const qmi::ResponseBase *a2)
{
  const void *v3;
  CFTypeRef v4;
  void *v5;
  NSObject *v6;
  CFTypeRef cf;
  _QWORD block[4];
  void *aBlock;
  CFTypeRef v10;

  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  data::QMIDataCommandDriver::checkError(a2, &cf);
  v3 = *(const void **)(a1 + 40);
  if (!v3 || !*(_QWORD *)(a1 + 48))
    goto LABEL_20;
  v4 = cf;
  if (cf && (CFRetain(cf), (v3 = *(const void **)(a1 + 40)) == 0))
    v5 = 0;
  else
    v5 = _Block_copy(v3);
  v6 = *(NSObject **)(a1 + 48);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_4;
  block[3] = &__block_descriptor_tmp_97_3;
  if (v5)
  {
    aBlock = _Block_copy(v5);
    v10 = v4;
    if (!v4)
      goto LABEL_12;
    goto LABEL_11;
  }
  aBlock = 0;
  v10 = v4;
  if (v4)
LABEL_11:
    CFRetain(v4);
LABEL_12:
  dispatch_async(v6, block);
  if (v10)
    CFRelease(v10);
  if (aBlock)
    _Block_release(aBlock);
  if (v5)
    _Block_release(v5);
  if (v4)
    CFRelease(v4);
LABEL_20:
  if (cf)
    CFRelease(cf);
}

void data::QMIDataCommandDriver::setLowLatencyCapability(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  NSObject *v6;
  _QWORD v7[5];
  void *aBlock;
  dispatch_object_t object;

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1174405120;
  v7[2] = ___ZN4data20QMIDataCommandDriver23setLowLatencyCapabilityEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_90;
  v7[4] = a1;
  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = (uint64_t *)(a1 + 72);
  v6 = *(NSObject **)(a2 + 8);
  aBlock = v4;
  object = v6;
  if (v6)
    dispatch_retain(v6);
  ctu::SharedSynchronizable<data::CommandDriver>::execute_wrapped(v5, (uint64_t)v7);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void ___ZN4data20QMIDataCommandDriver23setLowLatencyCapabilityEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  __int128 v3;
  const void **v4;
  const void **v5;
  const void **v6;
  char *v7;
  char *v8;
  _WORD *v9;
  _WORD *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  _QWORD *v19;
  char *v20;
  char *v21;
  _BYTE *v22;
  uint64_t v23;
  void *v24;
  NSObject *v25;
  void *v26;
  char *v27;
  unint64_t v28;
  const void **v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  const void **v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  _QWORD v37[5];
  void *v38;
  dispatch_object_t object;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  void *v44;
  __int128 v45;
  __int128 v46;
  _QWORD aBlock[5];

  v2 = a1[4];
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v45 = v3;
  v46 = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v45);
  v5 = (const void **)*((_QWORD *)&v45 + 1);
  v4 = (const void **)v46;
  v6 = (const void **)*((_QWORD *)&v45 + 1);
  if (*((_QWORD *)&v45 + 1) != (_QWORD)v46)
  {
    v6 = (const void **)*((_QWORD *)&v45 + 1);
    while (*((_BYTE *)*v6 + 8) != 1)
    {
      if (++v6 == (const void **)v46)
        goto LABEL_10;
    }
  }
  if (v6 != (const void **)v46)
  {
    if (v7)
    {
      *(_QWORD *)(v7 + 12) = 0x700000003;
      if (v5 != v4)
        goto LABEL_11;
      goto LABEL_13;
    }
    goto LABEL_54;
  }
LABEL_10:
  v8 = qmi::MutableMessageBase::createTLV<wda::tlv::abm::PeripheralEndPointID>(&v45, 1);
  v5 = (const void **)*((_QWORD *)&v45 + 1);
  v4 = (const void **)v46;
  *(_QWORD *)v8 = 0x700000003;
  if (v5 == v4)
    goto LABEL_13;
LABEL_11:
  while (*((_BYTE *)*v5 + 8) != 17)
  {
    if (++v5 == v4)
      goto LABEL_13;
  }
  if (v5 == v4)
  {
LABEL_13:
    v9 = operator new(0x10uLL);
    v10 = v9;
    v9[4] = 17;
    *(_QWORD *)v9 = off_1E66E1E40;
    if ((unint64_t)v4 < *((_QWORD *)&v46 + 1))
    {
      *v4 = v9;
      v11 = (uint64_t)(v4 + 1);
LABEL_26:
      v22 = (char *)v10 + 9;
      *(_QWORD *)&v46 = v11;
      goto LABEL_27;
    }
    v12 = (char *)*((_QWORD *)&v45 + 1);
    v13 = (char *)v4 - *((_QWORD *)&v45 + 1);
    v14 = ((uint64_t)v4 - *((_QWORD *)&v45 + 1)) >> 3;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v16 = *((_QWORD *)&v46 + 1) - *((_QWORD *)&v45 + 1);
    if ((uint64_t)(*((_QWORD *)&v46 + 1) - *((_QWORD *)&v45 + 1)) >> 2 > v15)
      v15 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v18 = operator new(8 * v17);
      v19 = &v18[8 * v14];
      v20 = &v18[8 * v17];
      *v19 = v10;
      v11 = (uint64_t)(v19 + 1);
      v21 = (char *)((char *)v4 - v12);
      if (v4 == (const void **)v12)
      {
LABEL_24:
        *((_QWORD *)&v45 + 1) = v19;
        *(_QWORD *)&v46 = v11;
        *((_QWORD *)&v46 + 1) = v20;
        if (!v4)
          goto LABEL_26;
LABEL_25:
        operator delete(v4);
        goto LABEL_26;
      }
    }
    else
    {
      v18 = 0;
      v19 = (_QWORD *)(8 * v14);
      v20 = 0;
      *(_QWORD *)(8 * v14) = v10;
      v11 = 8 * v14 + 8;
      v21 = (char *)((char *)v4 - v12);
      if (v4 == (const void **)v12)
        goto LABEL_24;
    }
    v28 = (unint64_t)(v21 - 8);
    if (v28 >= 0x58)
    {
      if ((unint64_t)((char *)v4 - v18 - (_QWORD)v13) >= 0x20)
      {
        v30 = (v28 >> 3) + 1;
        v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
        v29 = &v4[v31 / 0xFFFFFFFFFFFFFFF8];
        v19 = (_QWORD *)((char *)v19 - v31);
        v32 = &v18[8 * v14 - 16];
        v33 = v4 - 2;
        v34 = v30 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v35 = *(_OWORD *)v33;
          *(v32 - 1) = *((_OWORD *)v33 - 1);
          *v32 = v35;
          v32 -= 2;
          v33 -= 4;
          v34 -= 4;
        }
        while (v34);
        if (v30 == (v30 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_52:
          v4 = (const void **)*((_QWORD *)&v45 + 1);
          *((_QWORD *)&v45 + 1) = v19;
          *(_QWORD *)&v46 = v11;
          *((_QWORD *)&v46 + 1) = v20;
          if (!v4)
            goto LABEL_26;
          goto LABEL_25;
        }
      }
      else
      {
        v29 = v4;
      }
    }
    else
    {
      v29 = v4;
    }
    do
    {
      v36 = (uint64_t)*--v29;
      *--v19 = v36;
    }
    while (v29 != (const void **)v12);
    goto LABEL_52;
  }
  if (!v27)
LABEL_54:
    __cxa_bad_cast();
  v22 = v27 + 9;
LABEL_27:
  *v22 = 1;
  v40 = v2 + 144;
  v41 = QMIServiceMsg::create();
  v42 = 25000;
  v43 = 0;
  v44 = 0;
  v23 = MEMORY[0x1E0C809B0];
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 1174405120;
  v37[2] = ___ZN4data20QMIDataCommandDriver23setLowLatencyCapabilityEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_4;
  v37[3] = &__block_descriptor_tmp_89_1;
  v37[4] = v2;
  v24 = (void *)a1[5];
  if (v24)
    v24 = _Block_copy(v24);
  v25 = a1[6];
  v38 = v24;
  object = v25;
  if (v25)
    dispatch_retain(v25);
  aBlock[0] = v23;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wda3abm13SetCapability8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66E1DF8;
  aBlock[4] = v37;
  v26 = _Block_copy(aBlock);
  v44 = v26;
  if (v41)
  {
    qmi::Client::send();
    v26 = v44;
  }
  if (v26)
    _Block_release(v26);
  if (object)
    dispatch_release(object);
  if (v38)
    _Block_release(v38);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v45);
}

void sub_1B3D8DB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v8);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1B3D8DBA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1B3D8DBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN4data20QMIDataCommandDriver23setLowLatencyCapabilityEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_4(uint64_t a1, const qmi::ResponseBase *a2)
{
  const void *v3;
  CFTypeRef v4;
  void *v5;
  NSObject *v6;
  CFTypeRef cf;
  _QWORD block[4];
  void *aBlock;
  CFTypeRef v10;

  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  data::QMIDataCommandDriver::checkError(a2, &cf);
  v3 = *(const void **)(a1 + 40);
  if (!v3 || !*(_QWORD *)(a1 + 48))
    goto LABEL_20;
  v4 = cf;
  if (cf && (CFRetain(cf), (v3 = *(const void **)(a1 + 40)) == 0))
    v5 = 0;
  else
    v5 = _Block_copy(v3);
  v6 = *(NSObject **)(a1 + 48);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_4;
  block[3] = &__block_descriptor_tmp_97_3;
  if (v5)
  {
    aBlock = _Block_copy(v5);
    v10 = v4;
    if (!v4)
      goto LABEL_12;
    goto LABEL_11;
  }
  aBlock = 0;
  v10 = v4;
  if (v4)
LABEL_11:
    CFRetain(v4);
LABEL_12:
  dispatch_async(v6, block);
  if (v10)
    CFRelease(v10);
  if (aBlock)
    _Block_release(aBlock);
  if (v5)
    _Block_release(v5);
  if (v4)
    CFRelease(v4);
LABEL_20:
  if (cf)
    CFRelease(cf);
}

uint64_t ctu::Loggable<data::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<data::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(data::CommandDriver *a1@<X0>, _QWORD *a2@<X8>)
{
  const char *Name;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  Name = (const char *)data::CommandDriver::getName(a1);
  result = strlen(Name);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, Name, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<data::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<data::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E66E1800;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<data::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E66E1800;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void ctu::Loggable<data::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1B3D8DF38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1B3D8DF54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<data::QMIDataCommandDriver>::shared_ptr[abi:ne180100]<data::QMIDataCommandDriver,std::shared_ptr<data::QMIDataCommandDriver> ctu::SharedSynchronizable<data::CommandDriver>::make_shared_ptr<data::QMIDataCommandDriver>(data::QMIDataCommandDriver*)::{lambda(data::QMIDataCommandDriver*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E66E1840;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1B3D8E070(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<data::QMIDataCommandDriver> ctu::SharedSynchronizable<data::CommandDriver>::make_shared_ptr<data::QMIDataCommandDriver>(data::QMIDataCommandDriver*)::{lambda(data::QMIDataCommandDriver*)#1}::operator() const(data::QMIDataCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1B3D8E090(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<data::QMIDataCommandDriver *,std::shared_ptr<data::QMIDataCommandDriver> ctu::SharedSynchronizable<data::CommandDriver>::make_shared_ptr<data::QMIDataCommandDriver>(data::QMIDataCommandDriver*)::{lambda(data::QMIDataCommandDriver *)#1},std::allocator<data::QMIDataCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<data::QMIDataCommandDriver *,std::shared_ptr<data::QMIDataCommandDriver> ctu::SharedSynchronizable<data::CommandDriver>::make_shared_ptr<data::QMIDataCommandDriver>(data::QMIDataCommandDriver*)::{lambda(data::QMIDataCommandDriver *)#1},std::allocator<data::QMIDataCommandDriver>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<data::QMIDataCommandDriver> ctu::SharedSynchronizable<data::CommandDriver>::make_shared_ptr<data::QMIDataCommandDriver>(data::QMIDataCommandDriver*)::{lambda(data::QMIDataCommandDriver*)#1}::operator() const(data::QMIDataCommandDriver*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<data::QMIDataCommandDriver *,std::shared_ptr<data::QMIDataCommandDriver> ctu::SharedSynchronizable<data::CommandDriver>::make_shared_ptr<data::QMIDataCommandDriver>(data::QMIDataCommandDriver*)::{lambda(data::QMIDataCommandDriver *)#1},std::allocator<data::QMIDataCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN4data13CommandDriverEE15make_shared_ptrINS1_20QMIDataCommandDriverEEE"
                     "NSt3__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN4data13CommandDriverEE15make_shared_ptrINS1_20QMIDataComma"
                                "ndDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN4data13CommandDriverEE15make_shared_ptrINS1_20QMIDataCommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN4data13CommandDriverEE15make_shared_ptrINS1_20QMIDataCommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<data::QMIDataCommandDriver> ctu::SharedSynchronizable<data::CommandDriver>::make_shared_ptr<data::QMIDataCommandDriver>(data::QMIDataCommandDriver*)::{lambda(data::QMIDataCommandDriver*)#1}::operator() const(data::QMIDataCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ctu::SharedSynchronizable<data::CommandDriver>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN4data13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E66E1888;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN4data13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrIKN4data13CommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrIKN4data13CommandDriverEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

char *qmi::MutableMessageBase::createTLV<wda::tlv::abm::PeripheralEndPointID>(_QWORD *a1, char a2)
{
  _BYTE *v4;
  _BYTE *v5;
  char *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  v4 = operator new(0x18uLL);
  v5 = v4;
  v4[8] = a2;
  *((_DWORD *)v4 + 3) = 0;
  v6 = v4 + 12;
  *(_QWORD *)v4 = off_1E66E18E0;
  *((_DWORD *)v4 + 4) = 0;
  v8 = (char *)a1[2];
  v7 = a1[3];
  v9 = v8;
  if ((unint64_t)v8 < v7)
  {
    *(_QWORD *)v8 = v4;
    v10 = (uint64_t)(v8 + 8);
    goto LABEL_23;
  }
  v11 = (char *)a1[1];
  v12 = (v8 - v11) >> 3;
  v13 = v12 + 1;
  if ((unint64_t)(v12 + 1) >> 61)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v14 = v7 - (_QWORD)v11;
  if (v14 >> 2 > v13)
    v13 = v14 >> 2;
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
    v15 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v15 = v13;
  if (v15)
  {
    if (v15 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v16 = (char *)operator new(8 * v15);
    v17 = &v16[8 * v12];
    v18 = &v16[8 * v15];
    *(_QWORD *)v17 = v5;
    v10 = (uint64_t)(v17 + 8);
    v19 = (char *)(v8 - v11);
    if (v8 == v11)
      goto LABEL_21;
    goto LABEL_14;
  }
  v16 = 0;
  v17 = (char *)(8 * v12);
  v18 = 0;
  *(_QWORD *)(8 * v12) = v5;
  v10 = 8 * v12 + 8;
  v19 = (char *)(v8 - v11);
  if (v8 != v11)
  {
LABEL_14:
    v20 = (unint64_t)(v19 - 8);
    if (v20 < 0x58)
      goto LABEL_28;
    if ((unint64_t)(v11 - v16) < 0x20)
      goto LABEL_28;
    v21 = (v20 >> 3) + 1;
    v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    v9 = &v8[-v22];
    v17 -= v22;
    v23 = &v16[8 * v12 - 16];
    v24 = (__int128 *)(v8 - 16);
    v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *v24;
      *((_OWORD *)v23 - 1) = *(v24 - 1);
      *(_OWORD *)v23 = v26;
      v23 -= 32;
      v24 -= 2;
      v25 -= 4;
    }
    while (v25);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        v27 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        *((_QWORD *)v17 - 1) = v27;
        v17 -= 8;
      }
      while (v9 != v11);
    }
    v9 = (char *)a1[1];
  }
LABEL_21:
  a1[1] = v17;
  a1[2] = v10;
  a1[3] = v18;
  if (v9)
    operator delete(v9);
LABEL_23:
  a1[2] = v10;
  return v6;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::PeripheralEndPointID>::getSize()
{
  return 11;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::PeripheralEndPointID>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *(_DWORD *)(v3 + 7) = *(_DWORD *)(result + 16);
  *a2 = v3 + 11;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 8;
  return result;
}

char *qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::PeripheralEndPointID>::clone(uint64_t a1)
{
  char *result;

  result = (char *)operator new(0x18uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66E18E0;
  *(_QWORD *)(result + 12) = *(_QWORD *)(a1 + 12);
  return result;
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEclIJS5_NS6_4dictEEEEvDpT__block_invoke(_QWORD *a1)
{
  const void *v2;
  uint64_t v3;
  void *v4;
  xpc_object_t object;
  CFTypeRef cf;

  v3 = a1[4];
  v2 = (const void *)a1[5];
  cf = v2;
  if (v2)
    CFRetain(v2);
  v4 = (void *)a1[6];
  object = v4;
  if (v4)
    xpc_retain(v4);
  else
    object = xpc_null_create();
  (*(void (**)(uint64_t, CFTypeRef *, xpc_object_t *))(v3 + 16))(v3, &cf, &object);
  xpc_release(object);
  object = 0;
  if (cf)
    CFRelease(cf);
}

void sub_1B3D8E5B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, CFTypeRef cf)
{
  xpc_release(object);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_32c89_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEE40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE48c15_ZTSN3xpc4dictE(_QWORD *a1, _QWORD *a2)
{
  const void *v4;
  void *v5;
  const void *v6;
  void *v7;
  xpc_object_t result;

  v4 = (const void *)a2[4];
  if (!v4)
  {
    v6 = (const void *)a2[5];
    a1[4] = 0;
    a1[5] = v6;
    if (!v6)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = _Block_copy(v4);
  v6 = (const void *)a2[5];
  a1[4] = v5;
  a1[5] = v6;
  if (v6)
LABEL_5:
    CFRetain(v6);
LABEL_6:
  v7 = (void *)a2[6];
  a1[6] = v7;
  if (v7)
    return xpc_retain(v7);
  result = xpc_null_create();
  a1[6] = result;
  return result;
}

void __destroy_helper_block_e8_32c89_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc6objectEEEE40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE48c15_ZTSN3xpc4dictE(uint64_t a1)
{
  const void *v2;
  const void *v3;

  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(_QWORD *)(a1 + 48) = 0;
  v2 = *(const void **)(a1 + 40);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 32);
  if (v3)
    _Block_release(v3);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wda3abm13GetDataFormat8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D8E770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D8E784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D8E7B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wda3abm15GetQMAPSettings8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D8E884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D8E898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D8E8C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::DataFlowControl>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::DataFlowControl>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::DataFlowControl>::clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = off_1E66E19B0;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::InBandFlowControl>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::InBandFlowControl>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::InBandFlowControl>::clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = off_1E66E1A00;
  return result;
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_4(uint64_t a1)
{
  const void *v1;
  uint64_t v2;
  CFTypeRef cf;

  v2 = *(_QWORD *)(a1 + 32);
  v1 = *(const void **)(a1 + 40);
  cf = v1;
  if (v1)
    CFRetain(v1);
  (*(void (**)(uint64_t, CFTypeRef *))(v2 + 16))(v2, &cf);
  if (cf)
    CFRelease(cf);
}

void sub_1B3D8EA0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wda3abm15SetQMAPSettings8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D8EAE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D8EAFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D8EB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::DownLinkDataAggregationProtocol>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::DownLinkDataAggregationProtocol>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::DownLinkDataAggregationProtocol>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66E1AA8;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::DownLinkDataAggregationMaxDatagrams>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::DownLinkDataAggregationMaxDatagrams>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::DownLinkDataAggregationMaxDatagrams>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66E1AF8;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::DownLinkDataAggregationMaxSize>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::DownLinkDataAggregationMaxSize>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::DownLinkDataAggregationMaxSize>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66E1B48;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::UpLinkDataAggregationProtocol>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::UpLinkDataAggregationProtocol>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::UpLinkDataAggregationProtocol>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66E1B98;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::UpLinkDataAggregationMaxDatagrams>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::UpLinkDataAggregationMaxDatagrams>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::UpLinkDataAggregationMaxDatagrams>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66E1BE8;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::UpLinkDataAggregationMaxSize>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::UpLinkDataAggregationMaxSize>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::UpLinkDataAggregationMaxSize>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66E1C38;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::LinkLayerProtocol>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::LinkLayerProtocol>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::LinkLayerProtocol>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66E1C88;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::CoalescingInformation>::getSize()
{
  return 5;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::CoalescingInformation>::write(_BYTE *result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = result[8];
  v3 = *a2;
  *(_BYTE *)(v3 + 3) = result[9];
  *(_BYTE *)(v3 + 4) = result[10];
  *a2 = v3 + 5;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

char *qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::CoalescingInformation>::clone(uint64_t a1)
{
  char *result;

  result = (char *)operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66E1CD8;
  *(_WORD *)(result + 9) = *(_WORD *)(a1 + 9);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wda3abm13SetDataFormat8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D8EFC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D8EFD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D8F004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::DataPowerSaveConfig>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::DataPowerSaveConfig>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::DataPowerSaveConfig>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66E1D50;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wda3abm18SetPowerSaveConfig8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D8F150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D8F164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D8F190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::DefaultFlowRebindVersion>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::DefaultFlowRebindVersion>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::DefaultFlowRebindVersion>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66E1DC8;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wda3abm13SetCapability8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D8F2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D8F2F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D8F31C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::LowLatencyConfig>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::LowLatencyConfig>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<wda::tlv::abm::LowLatencyConfig>::clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = off_1E66E1E40;
  return result;
}

uint64_t *GetOsLogContext(void)
{
  unsigned __int8 v0;

  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1EDBEAA20 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1B3CB3000);
  }
  if (GetOsLogContext(void)::onceToken != -1)
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
  return &GetOsLogContext(void)::sOsLogContext;
}

void ___Z15GetOsLogContextv_block_invoke()
{
  _BYTE v0[16];

  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v0, "com.apple.telephony.abm", "global");
  ctu::OsLogContext::operator=();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v0);
}

void *GetGlobalLogger(uint64_t *a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v10[5];
  std::__shared_weak_count *v11;

  v2 = atomic_load((unsigned __int8 *)&qword_1EDBEAAF0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1EDBEAAF0))
  {
    MEMORY[0x1B5E2ED60](&unk_1EDBEAAF8);
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3788], &unk_1EDBEAAF8, &dword_1B3CB3000);
    __cxa_guard_release(&qword_1EDBEAAF0);
  }
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 1174405120;
  v10[2] = ___Z15GetGlobalLoggerNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v10[3] = &__block_descriptor_tmp_3;
  v3 = *a1;
  v4 = (std::__shared_weak_count *)a1[1];
  v10[4] = v3;
  v11 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  if (_MergedGlobals_3 != -1)
  {
    dispatch_once(&_MergedGlobals_3, v10);
    v4 = v11;
    if (v11)
      goto LABEL_7;
    return &unk_1EDBEAAF8;
  }
  if (!v4)
    return &unk_1EDBEAAF8;
LABEL_7:
  v7 = (unint64_t *)&v4->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    return &unk_1EDBEAAF8;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return &unk_1EDBEAAF8;
}

void sub_1B3D8F5C8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EDBEAAF0);
  _Unwind_Resume(a1);
}

void ___Z15GetGlobalLoggerNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _BYTE v10[16];
  _BYTE v11[48];
  uint64_t v12;
  uint64_t v13;

  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1EDBEAA20 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1B3CB3000);
  }
  if (GetOsLogContext(void)::onceToken != -1)
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v10, (const ctu::OsLogContext *)&GetOsLogContext(void)::sOsLogContext);
  MEMORY[0x1B5E2ED54](v11, v10, a1 + 32);
  ctu::LoggerCommonBase::operator=();
  v4 = v12;
  v3 = v13;
  if (v13)
  {
    v5 = (unint64_t *)(v13 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)qword_1EDBEAB30;
  qword_1EDBEAB28 = v4;
  qword_1EDBEAB30 = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  ctu::StaticLogger::~StaticLogger((ctu::StaticLogger *)v11);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v10);
}

void sub_1B3D8F71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c42_ZTSNSt3__110shared_ptrIN3ctu9LogServerEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c42_ZTSNSt3__110shared_ptrIN3ctu9LogServerEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t coredump::QMICommandDriver::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v21[2];
  uint64_t v22;
  std::__shared_weak_count *v23;

  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  v6 = operator new(0xE0uLL);
  v7 = (uint64_t)v6;
  v8 = a1[1];
  v22 = *a1;
  v23 = (std::__shared_weak_count *)v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *a2;
  v12 = (std::__shared_weak_count *)a2[1];
  v21[0] = v11;
  v21[1] = (uint64_t)v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  coredump::QMICommandDriver::QMICommandDriver((uint64_t)v6, &v22, v21);
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<coredump::QMICommandDriver>::shared_ptr[abi:ne180100]<coredump::QMICommandDriver,std::shared_ptr<coredump::QMICommandDriver> ctu::SharedSynchronizable<coredump::CommandDriver>::make_shared_ptr<coredump::QMICommandDriver>(coredump::QMICommandDriver*)::{lambda(coredump::QMICommandDriver*)#1},void>(a3, v7);
  ctu::Loggable<coredump::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a3);
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v17 = v23;
  if (v23)
  {
    v18 = (unint64_t *)&v23->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 48))(*a3);
}

void sub_1B3D8F8E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1B3D8F8F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v11);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t coredump::QMICommandDriver::QMICommandDriver(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v4 = (std::__shared_weak_count *)a2[1];
  v19 = *a2;
  v20 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = a3[1];
  v17 = *a3;
  v18 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  coredump::CommandDriver::CommandDriver((uint64_t *)a1, &v19, &v17);
  v10 = v18;
  if (v18)
  {
    v11 = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v20;
  if (v20)
  {
    v14 = (unint64_t *)&v20->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  *(_QWORD *)a1 = off_1E66E1EE8;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  return a1;
}

void sub_1B3D8FA34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void coredump::QMICommandDriver::~QMICommandDriver(coredump::QMICommandDriver *this)
{
  NSObject *v2;
  uint8_t v3[16];

  *(_QWORD *)this = off_1E66E1EE8;
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1B3CB3000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v3, 2u);
  }
  qmi::Client::~Client((coredump::QMICommandDriver *)((char *)this + 192));
  coredump::CommandDriver::~CommandDriver(this);
}

{
  NSObject *v2;
  uint8_t v3[16];

  *(_QWORD *)this = off_1E66E1EE8;
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1B3CB3000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v3, 2u);
  }
  qmi::Client::~Client((coredump::QMICommandDriver *)((char *)this + 192));
  coredump::CommandDriver::~CommandDriver(this);
}

{
  NSObject *v2;
  void *v3;
  uint8_t v4[16];

  *(_QWORD *)this = off_1E66E1EE8;
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1B3CB3000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v4, 2u);
  }
  qmi::Client::~Client((coredump::QMICommandDriver *)((char *)this + 192));
  coredump::CommandDriver::~CommandDriver(this);
  operator delete(v3);
}

void coredump::QMICommandDriver::init(coredump::QMICommandDriver *this)
{
  NSObject *v1;
  char *v2;
  _QWORD v3[5];
  _QWORD *v4;
  _QWORD block[6];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN8coredump16QMICommandDriver4initEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_9_8;
  v3[4] = this;
  v4 = v3;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN8coredump13CommandDriverEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke_0;
  block[3] = &__block_descriptor_tmp_40_10;
  block[4] = (char *)this + 72;
  block[5] = &v4;
  v2 = (char *)this + 88;
  v1 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

void ___ZN8coredump16QMICommandDriver4initEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  NSObject *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  qmi::Client *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  std::__shared_weak_count *v53;
  void *v54[2];
  char v55;
  dispatch_object_t v56;
  void *v57[2];
  char v58;
  uint8_t buf[8];
  std::__shared_weak_count *v60;
  __int128 v61;
  unint64_t v62;
  unint64_t v63;

  v1 = *(_QWORD *)(a1 + 32);
  v62 = 0xAAAAAAAAAAAAAAAALL;
  v63 = 0xAAAAAAAAAAAAAAAALL;
  Registry::getServerConnection(*(Registry **)(v1 + 176));
  v58 = 12;
  v2 = *(NSObject **)(v1 + 88);
  v56 = v2;
  strcpy((char *)v57, "coredump.drv");
  if (v2)
    dispatch_retain(v2);
  v55 = 10;
  strcpy((char *)v54, "coredump_1");
  v3 = *(std::__shared_weak_count **)(v1 + 80);
  if (!v3 || (v4 = std::__shared_weak_count::lock(v3)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v4);
    if (v10)
      goto LABEL_11;
LABEL_81:
    v53 = v10;
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v5);
  v10 = std::__shared_weak_count::lock(v5);
  if (!v10)
    goto LABEL_81;
LABEL_11:
  v11 = (unint64_t *)&v10->__shared_weak_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  v53 = v10;
LABEL_14:
  std::__shared_weak_count::__release_weak(v5);
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v52 = (std::__shared_weak_count *)v63;
  v15 = (unint64_t *)(v63 + 8);
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  qmi::Client::createWithQueueLocal();
  v17 = v61;
  v61 = 0uLL;
  v18 = *(std::__shared_weak_count **)(v1 + 216);
  *(_OWORD *)(v1 + 208) = v17;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  qmi::Client::~Client((qmi::Client *)buf);
  v21 = (unint64_t *)&v52->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
    std::__shared_weak_count::__release_weak(v52);
  }
  if (v53)
    std::__shared_weak_count::__release_weak(v53);
  if (v55 < 0)
    operator delete(v54[0]);
  if (v56)
    dispatch_release(v56);
  if (v58 < 0)
  {
    operator delete(v57[0]);
    v23 = *(NSObject **)(v1 + 40);
    if (!os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
LABEL_38:
      v24 = *(std::__shared_weak_count **)(v1 + 80);
      if (!v24)
        goto LABEL_68;
      goto LABEL_39;
    }
  }
  else
  {
    v23 = *(NSObject **)(v1 + 40);
    if (!os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
      goto LABEL_38;
  }
  *(_WORD *)buf = 0;
  _os_log_debug_impl(&dword_1B3CB3000, v23, OS_LOG_TYPE_DEBUG, "#D initializing", buf, 2u);
  v24 = *(std::__shared_weak_count **)(v1 + 80);
  if (!v24)
LABEL_68:
    std::__throw_bad_weak_ptr[abi:ne180100]();
LABEL_39:
  v25 = std::__shared_weak_count::lock(v24);
  if (!v25)
    goto LABEL_68;
  v26 = v25;
  v27 = (unint64_t *)&v25->__shared_weak_owners_;
  do
    v28 = __ldxr(v27);
  while (__stxr(v28 + 1, v27));
  v29 = (unint64_t *)&v25->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v26);
  }
  v31 = (qmi::Client *)(v1 + 192);
  do
    v32 = __ldxr(v27);
  while (__stxr(v32 + 1, v27));
  qmi::Client::setHandler();
  do
    v33 = __ldxr(v27);
  while (__stxr(v33 + 1, v27));
  qmi::Client::setHandler();
  do
    v34 = __ldxr(v27);
  while (__stxr(v34 + 1, v27));
  qmi::Client::setHandler();
  v35 = *(std::__shared_weak_count **)(v1 + 80);
  if (!v35 || (v36 = *(_QWORD *)(v1 + 72), (v37 = std::__shared_weak_count::lock(v35)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v38 = v37;
  v39 = (unint64_t *)&v37->__shared_weak_owners_;
  do
    v40 = __ldxr(v39);
  while (__stxr(v40 + 1, v39));
  v41 = (unint64_t *)&v37->__shared_owners_;
  do
    v42 = __ldaxr(v41);
  while (__stlxr(v42 - 1, v41));
  if (!v42)
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v38);
    v43 = std::__shared_weak_count::lock(v38);
    if (v43)
      goto LABEL_60;
LABEL_70:
    *(_QWORD *)buf = 0;
    v60 = 0;
    goto LABEL_71;
  }
  v43 = std::__shared_weak_count::lock(v37);
  if (!v43)
    goto LABEL_70;
LABEL_60:
  v44 = v43;
  v45 = (unint64_t *)&v43->__shared_weak_owners_;
  do
    v46 = __ldxr(v45);
  while (__stxr(v46 + 1, v45));
  *(_QWORD *)buf = v36;
  v60 = v43;
  std::__shared_weak_count::__release_weak(v38);
  v47 = (unint64_t *)&v44->__shared_owners_;
  do
    v48 = __ldaxr(v47);
  while (__stlxr(v48 - 1, v47));
  if (!v48)
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    v38 = v44;
LABEL_71:
    std::__shared_weak_count::__release_weak(v38);
  }
  qmi::Client::setClientHandle();
  if (v60)
    std::__shared_weak_count::__release_weak(v60);
  qmi::Client::start(v31);
  std::__shared_weak_count::__release_weak(v26);
  std::__shared_weak_count::__release_weak(v26);
  std::__shared_weak_count::__release_weak(v26);
  std::__shared_weak_count::__release_weak(v26);
  v49 = (std::__shared_weak_count *)v63;
  if (v63)
  {
    v50 = (unint64_t *)(v63 + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
}

void sub_1B3D903F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,std::__shared_weak_count *a32,dispatch_object_t object,char a34)
{
  uint64_t v34;
  NSObject *v36;

  if (a32)
  {
    std::__shared_weak_count::__release_weak(a32);
    if ((*(char *)(v34 - 161) & 0x80000000) == 0)
    {
LABEL_3:
      v36 = object;
      if (!object)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v34 - 161) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v34 - 184));
  v36 = object;
  if (!object)
  {
LABEL_8:
    if (*(char *)(v34 - 129) < 0)
    {
      operator delete(*(void **)(v34 - 152));
      std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v34 - 96);
      _Unwind_Resume(a1);
    }
    std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v34 - 96);
    _Unwind_Resume(a1);
  }
LABEL_7:
  dispatch_release(v36);
  goto LABEL_8;
}

void ___ZN8coredump16QMICommandDriver4initEv_block_invoke_2(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint8_t v9[16];
  std::__shared_weak_count *v11;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    v11 = v4;
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)v9 = 0;
          _os_log_debug_impl(&dword_1B3CB3000, v6, OS_LOG_TYPE_DEBUG, "#D stopped", v9, 2u);
        }
        boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::operator()(*(uint64_t ****)(v3 + 112), 1);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1B3D90658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN8coredump16QMICommandDriver4initEv_block_invoke_4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint8_t v9[16];
  std::__shared_weak_count *v11;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    v11 = v4;
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)v9 = 0;
          _os_log_debug_impl(&dword_1B3CB3000, v6, OS_LOG_TYPE_DEBUG, "#D started", v9, 2u);
        }
        boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::operator()(*(uint64_t ****)(v3 + 112), 0);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1B3D90750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN8coredump16QMICommandDriver4initEv_block_invoke_6(_QWORD *a1, xpc_object_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *p_p;
  void *__p;
  char v13;
  xpc_object_t v14;
  std::__shared_weak_count *v16;
  uint8_t buf[4];
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v16 = v6;
    if (v6)
    {
      if (!a1[5])
      {
        v8 = v6;
LABEL_10:
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        return;
      }
      v14 = a2;
      if (a2)
      {
        xpc_retain(a2);
        v7 = *(NSObject **)(v5 + 40);
        if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
          goto LABEL_9;
      }
      else
      {
        a2 = xpc_null_create();
        v14 = a2;
        v7 = *(NSObject **)(v5 + 40);
        if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
          goto LABEL_9;
      }
      xpc::object::to_string((xpc::object *)&v14);
      if (v13 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      *(_DWORD *)buf = 136315138;
      v18 = p_p;
      _os_log_debug_impl(&dword_1B3CB3000, v7, OS_LOG_TYPE_DEBUG, "#D server error %s", buf, 0xCu);
      if (v13 < 0)
        operator delete(__p);
      a2 = v14;
LABEL_9:
      xpc_release(a2);
      v8 = v16;
      if (!v16)
        return;
      goto LABEL_10;
    }
  }
}

void sub_1B3D908E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, char a13)
{
  xpc_release(object);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_1B3D908FC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void coredump::QMICommandDriver::crashBaseband(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  std::string::size_type v4;
  char *v5;
  char *v6;
  const void **v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  _OWORD *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  size_t (*v31)(uint64_t, char *);
  void *v32;
  std::string __p;
  __int128 v34;
  __int128 v35;

  if (!*(_QWORD *)(a1 + 208))
    return;
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v34 = v3;
  v35 = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v34);
  if (*(char *)(a2 + 23) < 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (v4)
    {
      v29 = MEMORY[0x1E0C809B0];
      v30 = 1174405120;
      v31 = ___ZN8coredump16QMICommandDriver13crashBasebandENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke;
      v32 = &__block_descriptor_tmp_10_7;
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, v4);
LABEL_7:
      v5 = (char *)*((_QWORD *)&v34 + 1);
      v6 = (char *)v35;
      v7 = (const void **)*((_QWORD *)&v34 + 1);
      if (*((_QWORD *)&v34 + 1) != (_QWORD)v35)
      {
        v7 = (const void **)*((_QWORD *)&v34 + 1);
        while (*((_BYTE *)*v7 + 8) != 16)
        {
          if (++v7 == (const void **)v35)
            goto LABEL_15;
        }
      }
      if (v7 != (const void **)v35)
      {
        if (!v8)
          __cxa_bad_cast();
        v9 = v8 + 9;
        goto LABEL_38;
      }
LABEL_15:
      v10 = (char *)operator new(0x60uLL);
      v11 = v10;
      v10[8] = 16;
      *(_QWORD *)v10 = off_1E66E2240;
      *(_OWORD *)(v10 + 9) = 0u;
      v9 = v10 + 9;
      *(_OWORD *)(v10 + 25) = 0u;
      *(_OWORD *)(v10 + 41) = 0u;
      *(_OWORD *)(v10 + 57) = 0u;
      *(_OWORD *)(v10 + 73) = 0u;
      if ((unint64_t)v6 < *((_QWORD *)&v35 + 1))
      {
        *(_QWORD *)v6 = v10;
        *(_QWORD *)&v35 = v6 + 8;
LABEL_38:
        v31((uint64_t)&v29, v9);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_40;
      }
      v12 = v6 - v5;
      v13 = (v6 - v5) >> 3;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 61)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v15 = *((_QWORD *)&v35 + 1) - (_QWORD)v5;
      if ((uint64_t)(*((_QWORD *)&v35 + 1) - (_QWORD)v5) >> 2 > v14)
        v14 = v15 >> 2;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
      {
        if (v16 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v17 = operator new(8 * v16);
        v18 = &v17[8 * v13];
        v19 = &v17[8 * v16];
        *v18 = v11;
        v20 = (uint64_t)(v18 + 1);
        if (v5 == v6)
          goto LABEL_35;
      }
      else
      {
        v17 = 0;
        v18 = (_QWORD *)(8 * v13);
        v19 = 0;
        *(_QWORD *)(8 * v13) = v11;
        v20 = 8 * v13 + 8;
        if (v5 == v6)
        {
LABEL_35:
          *((_QWORD *)&v34 + 1) = v18;
          *(_QWORD *)&v35 = v20;
          *((_QWORD *)&v35 + 1) = v19;
          if (v5)
            operator delete(v5);
          *(_QWORD *)&v35 = v20;
          goto LABEL_38;
        }
      }
      if ((unint64_t)(v12 - 8) < 0x58)
        goto LABEL_49;
      if ((unint64_t)(v5 - v17) < 0x20)
        goto LABEL_49;
      v21 = ((unint64_t)(v12 - 8) >> 3) + 1;
      v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
      v23 = &v6[-v22];
      v18 = (_QWORD *)((char *)v18 - v22);
      v24 = &v17[8 * v13 - 16];
      v25 = v6 - 16;
      v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v27 = *(_OWORD *)v25;
        *(v24 - 1) = *((_OWORD *)v25 - 1);
        *v24 = v27;
        v24 -= 2;
        v25 -= 32;
        v26 -= 4;
      }
      while (v26);
      v6 = v23;
      if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_49:
        do
        {
          v28 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *--v18 = v28;
        }
        while (v6 != v5);
      }
      v5 = (char *)*((_QWORD *)&v34 + 1);
      goto LABEL_35;
    }
  }
  else if (*(_BYTE *)(a2 + 23))
  {
    v29 = MEMORY[0x1E0C809B0];
    v30 = 1174405120;
    v31 = ___ZN8coredump16QMICommandDriver13crashBasebandENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke;
    v32 = &__block_descriptor_tmp_10_7;
    __p = *(std::string *)a2;
    goto LABEL_7;
  }
LABEL_40:
  if (QMIServiceMsg::create())
    qmi::Client::send();
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v34);
}

void sub_1B3D90C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1B3D90C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a23 < 0)
    operator delete(__p);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a24);
  _Unwind_Resume(a1);
}

size_t ___ZN8coredump16QMICommandDriver13crashBasebandENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke(uint64_t a1, char *__dst)
{
  const char *v3;

  v3 = (const char *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    v3 = *(const char **)v3;
  return strlcpy(__dst, v3, 0x50uLL);
}

void coredump::QMICommandDriver::fetchPostBootCrashReason(coredump::QMICommandDriver *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 0x40000000;
  v1[2] = ___ZN8coredump16QMICommandDriver24fetchPostBootCrashReasonEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_22_4;
  v1[4] = this;
  ctu::SharedSynchronizable<coredump::CommandDriver>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

void ___ZN8coredump16QMICommandDriver24fetchPostBootCrashReasonEv_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  NSObject *v14;
  _QWORD v15[6];
  std::__shared_weak_count *v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  void *v21;
  _OWORD v22[2];
  __int128 aBlock;
  void (*v24)(uint64_t, QMIServiceMsg *);
  void *v25;
  _QWORD *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD **)(a1 + 32);
  if (v1[26])
  {
    v2 = (std::__shared_weak_count *)v1[10];
    if (!v2 || (v3 = v1[9], (v4 = std::__shared_weak_count::lock(v2)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v5 = v4;
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v5);
    }
    *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v22[0] = v10;
    v22[1] = v10;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v22);
    v17 = v1 + 24;
    v18 = QMIServiceMsg::create();
    v19 = 25000;
    v20 = 0;
    v21 = 0;
    v11 = MEMORY[0x1E0C809B0];
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 1174405120;
    v15[2] = ___ZN8coredump16QMICommandDriver24fetchPostBootCrashReasonEv_block_invoke_11;
    v15[3] = &__block_descriptor_tmp_21_2;
    v15[4] = v1;
    v15[5] = v3;
    v16 = v5;
    do
      v12 = __ldxr(p_shared_weak_owners);
    while (__stxr(v12 + 1, p_shared_weak_owners));
    *(_QWORD *)&aBlock = v11;
    *((_QWORD *)&aBlock + 1) = 0x40000000;
    v24 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm22CoreDumpGetCrashReason8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    v25 = &unk_1E66E2270;
    v26 = v15;
    v13 = _Block_copy(&aBlock);
    v21 = v13;
    if (v18)
    {
      qmi::Client::send();
      v13 = v21;
    }
    if (v13)
      _Block_release(v13);
    if (v16)
      std::__shared_weak_count::__release_weak(v16);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v22);
    std::__shared_weak_count::__release_weak(v5);
  }
  else
  {
    v14 = v1[5];
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      LODWORD(aBlock) = 136315138;
      *(_QWORD *)((char *)&aBlock + 4) = "fetchPostBootCrashReason_block_invoke";
      _os_log_error_impl(&dword_1B3CB3000, v14, OS_LOG_TYPE_ERROR, "%s: No client, bail", (uint8_t *)&aBlock, 0xCu);
    }
  }
}

void sub_1B3D90F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  std::__shared_weak_count *v21;

  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a16);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a21);
  std::__shared_weak_count::__release_weak(v21);
  _Unwind_Resume(a1);
}

void sub_1B3D90F94(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1B3D90F8CLL);
}

void ___ZN8coredump16QMICommandDriver24fetchPostBootCrashReasonEv_block_invoke_11(_QWORD *a1, qmi::MessageBase *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  uint64_t v9;
  tlv *TlvValue;
  int v11;
  tlv *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  tlv *v19;
  int v20;
  tlv *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  char **v29;
  char *v30;
  char **v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  char *v38;
  char **v39;
  uint64_t v40;
  _QWORD v41[6];
  _QWORD v42[2];
  void (*v43)(uint64_t, const std::string::value_type *);
  void *v44;
  uint64_t *v45;
  qmi::MessageBase *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  _QWORD *(*v50)(_QWORD *, _QWORD *);
  void (*v51)(_QWORD *);
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  std::__shared_weak_count *v56;
  __int128 buf;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _BYTE v64[19];
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v56 = v6;
    if (v6)
    {
      v7 = v6;
      if (!a1[5])
      {
LABEL_27:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v37 = __ldaxr(p_shared_owners);
        while (__stlxr(v37 - 1, p_shared_owners));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      v47 = 0;
      v48 = &v47;
      v49 = 0x4002000000;
      v50 = __Block_byref_object_copy__10;
      v51 = __Block_byref_object_dispose__10;
      v52 = (uint64_t)&v52;
      v53 = &v52;
      v54 = 0;
      if (*((_DWORD *)a2 + 1))
      {
        v8 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf) = 0;
          _os_log_error_impl(&dword_1B3CB3000, v8, OS_LOG_TYPE_ERROR, "Failed: Getting PostBootCrashReason response", (uint8_t *)&buf, 2u);
        }
      }
      else
      {
        v9 = MEMORY[0x1E0C809B0];
        v42[0] = MEMORY[0x1E0C809B0];
        v42[1] = 0x40000000;
        v43 = ___ZN8coredump16QMICommandDriver24fetchPostBootCrashReasonEv_block_invoke_12;
        v44 = &unk_1E66E2028;
        v45 = &v47;
        v46 = a2;
        TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
        v12 = TlvValue;
        if (TlvValue)
        {
          v63 = 0u;
          memset(v64, 0, sizeof(v64));
          v61 = 0u;
          v62 = 0u;
          v59 = 0u;
          v60 = 0u;
          buf = 0u;
          v58 = 0u;
          tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v11, (const unsigned __int8 *)0x83);
          buf = *(_OWORD *)v12;
          v13 = *((_OWORD *)v12 + 1);
          v14 = *((_OWORD *)v12 + 2);
          v15 = *((_OWORD *)v12 + 4);
          v60 = *((_OWORD *)v12 + 3);
          v61 = v15;
          v58 = v13;
          v59 = v14;
          v16 = *((_OWORD *)v12 + 5);
          v17 = *((_OWORD *)v12 + 6);
          v18 = *((_OWORD *)v12 + 7);
          *(_DWORD *)&v64[15] = *(_DWORD *)((char *)v12 + 127);
          v63 = v17;
          *(_OWORD *)v64 = v18;
          v62 = v16;
          v43((uint64_t)v42, (const std::string::value_type *)&buf);
        }
        v41[0] = v9;
        v41[1] = 0x40000000;
        v41[2] = ___ZN8coredump16QMICommandDriver24fetchPostBootCrashReasonEv_block_invoke_3;
        v41[3] = &unk_1E66E2050;
        v41[4] = &v47;
        v41[5] = a2;
        v19 = (tlv *)qmi::MessageBase::findTlvValue(a2);
        v21 = v19;
        if (v19)
        {
          v63 = 0u;
          memset(v64, 0, sizeof(v64));
          v61 = 0u;
          v62 = 0u;
          v59 = 0u;
          v60 = 0u;
          buf = 0u;
          v58 = 0u;
          tlv::throwIfNotEnoughBytes(v19, (const unsigned __int8 *)v19 + v20, (const unsigned __int8 *)0x83);
          buf = *(_OWORD *)v21;
          v22 = *((_OWORD *)v21 + 1);
          v23 = *((_OWORD *)v21 + 2);
          v24 = *((_OWORD *)v21 + 4);
          v60 = *((_OWORD *)v21 + 3);
          v61 = v24;
          v58 = v22;
          v59 = v23;
          v25 = *((_OWORD *)v21 + 5);
          v26 = *((_OWORD *)v21 + 6);
          v27 = *((_OWORD *)v21 + 7);
          *(_DWORD *)&v64[15] = *(_DWORD *)((char *)v21 + 127);
          v63 = v26;
          *(_OWORD *)v64 = v27;
          v62 = v25;
          ___ZN8coredump16QMICommandDriver24fetchPostBootCrashReasonEv_block_invoke_3((uint64_t)v41, (const std::string::value_type *)&buf);
        }
      }
      std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::list(&v38, (uint64_t)(v48 + 5));
      boost::signals2::signal<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::operator()(v5 + 128, (uint64_t)&v38);
      if (!v40
        || (v28 = v38,
            v29 = v39,
            v30 = *v39,
            *((_QWORD *)v30 + 1) = *((_QWORD *)v38 + 1),
            **((_QWORD **)v28 + 1) = v30,
            v40 = 0,
            v29 == &v38))
      {
LABEL_19:
        _Block_object_dispose(&v47, 8);
        if (!v54)
          goto LABEL_27;
        v32 = v52;
        v33 = v53;
        v34 = *v53;
        *(_QWORD *)(v34 + 8) = *(_QWORD *)(v52 + 8);
        **(_QWORD **)(v32 + 8) = v34;
        v54 = 0;
        if (v33 == &v52)
          goto LABEL_27;
        while (1)
        {
          v35 = (uint64_t *)v33[1];
          if (*((char *)v33 + 63) < 0)
          {
            operator delete((void *)v33[5]);
            if ((*((char *)v33 + 39) & 0x80000000) == 0)
              goto LABEL_23;
LABEL_26:
            operator delete((void *)v33[2]);
            operator delete(v33);
            v33 = v35;
            if (v35 == &v52)
              goto LABEL_27;
          }
          else
          {
            if (*((char *)v33 + 39) < 0)
              goto LABEL_26;
LABEL_23:
            operator delete(v33);
            v33 = v35;
            if (v35 == &v52)
              goto LABEL_27;
          }
        }
      }
      while (1)
      {
        v31 = (char **)v29[1];
        if (*((char *)v29 + 63) < 0)
        {
          operator delete(v29[5]);
          if ((*((char *)v29 + 39) & 0x80000000) == 0)
            goto LABEL_15;
LABEL_18:
          operator delete(v29[2]);
          operator delete(v29);
          v29 = v31;
          if (v31 == &v38)
            goto LABEL_19;
        }
        else
        {
          if (*((char *)v29 + 39) < 0)
            goto LABEL_18;
LABEL_15:
          operator delete(v29);
          v29 = v31;
          if (v31 == &v38)
            goto LABEL_19;
        }
      }
    }
  }
}

void sub_1B3D9137C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  unsigned __int16 *v33;
  uint64_t v34;
  uint64_t v35;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E0DE2D28])(*v33, 18, v34, v35);
    JUMPOUT(0x1B3D911D8);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN8coredump16QMICommandDriver24fetchPostBootCrashReasonEv_block_invoke_12(uint64_t a1, const std::string::value_type *a2)
{
  std::string::size_type size;
  tlv *TlvValue;
  int v6;
  tlv *v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  std::string *v11;
  uint64_t v12;
  std::string *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  std::string v18[2];
  unint64_t v19;

  v19 = 0xAAAAAAAAAAAAAAAALL;
  memset(v18, 0, sizeof(v18));
  std::string::__assign_external(&v18[1], a2);
  if ((SHIBYTE(v18[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    size = HIBYTE(v18[1].__r_.__value_.__r.__words[2]);
LABEL_4:
    std::string::__assign_external(v18, &a2[size + 1]);
    goto LABEL_5;
  }
  size = v18[1].__r_.__value_.__l.__size_;
  if (v18[1].__r_.__value_.__l.__size_ + 1 < 0x83)
    goto LABEL_4;
  if (SHIBYTE(v18[0].__r_.__value_.__r.__words[2]) < 0)
  {
    v18[0].__r_.__value_.__l.__size_ = 12;
    v13 = (std::string *)v18[0].__r_.__value_.__r.__words[0];
  }
  else
  {
    *((_BYTE *)&v18[0].__r_.__value_.__s + 23) = 12;
    v13 = v18;
  }
  strcpy((char *)v13, "tlv overflow");
LABEL_5:
  v14 = 0;
  v15 = &v14;
  v16 = 0x2000000000;
  v17 = 0;
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(*(qmi::MessageBase **)(a1 + 40));
  v7 = TlvValue;
  if (TlvValue)
  {
    tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v6, (const unsigned __int8 *)2);
    *((_DWORD *)v15 + 6) = *(unsigned __int16 *)v7;
  }
  LODWORD(v19) = *((_DWORD *)v15 + 6);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v9 = (char *)operator new(0x48uLL);
  v10 = v9;
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  if (SHIBYTE(v18[0].__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v9 + 16), v18[0].__r_.__value_.__l.__data_, v18[0].__r_.__value_.__l.__size_);
  else
    *(std::string *)(v9 + 16) = v18[0];
  v11 = (std::string *)(v10 + 5);
  if (SHIBYTE(v18[1].__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v11, v18[1].__r_.__value_.__l.__data_, v18[1].__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)&v18[1].__r_.__value_.__l.__data_;
    v10[7] = *((_QWORD *)&v18[1].__r_.__value_.__l + 2);
  }
  v10[8] = v19;
  v10[1] = v8 + 40;
  v12 = *(_QWORD *)(v8 + 40);
  *v10 = v12;
  *(_QWORD *)(v12 + 8) = v10;
  *(_QWORD *)(v8 + 40) = v10;
  ++*(_QWORD *)(v8 + 56);
  _Block_object_dispose(&v14, 8);
  if ((SHIBYTE(v18[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v18[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_17:
    operator delete(v18[0].__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v18[1].__r_.__value_.__l.__data_);
  if (SHIBYTE(v18[0].__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_17;
}

void sub_1B3D91640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  char *v13;
  void **v14;

  if (v13[39] < 0)
    operator delete(*v14);
  operator delete(v13);
  _Block_object_dispose(&a9, 8);
  std::pair<std::string,std::string>::~pair((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_1B3D916B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::pair<std::string,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN8coredump16QMICommandDriver24fetchPostBootCrashReasonEv_block_invoke_3(uint64_t a1, const std::string::value_type *a2)
{
  std::string::size_type size;
  tlv *TlvValue;
  int v6;
  tlv *v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  std::string *v11;
  uint64_t v12;
  std::string *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  std::string v18[2];
  unint64_t v19;

  v19 = 0xAAAAAAAAAAAAAAAALL;
  memset(v18, 0, sizeof(v18));
  std::string::__assign_external(&v18[1], a2);
  if ((SHIBYTE(v18[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    size = HIBYTE(v18[1].__r_.__value_.__r.__words[2]);
LABEL_4:
    std::string::__assign_external(v18, &a2[size + 1]);
    goto LABEL_5;
  }
  size = v18[1].__r_.__value_.__l.__size_;
  if (v18[1].__r_.__value_.__l.__size_ + 1 < 0x83)
    goto LABEL_4;
  if (SHIBYTE(v18[0].__r_.__value_.__r.__words[2]) < 0)
  {
    v18[0].__r_.__value_.__l.__size_ = 12;
    v13 = (std::string *)v18[0].__r_.__value_.__r.__words[0];
  }
  else
  {
    *((_BYTE *)&v18[0].__r_.__value_.__s + 23) = 12;
    v13 = v18;
  }
  strcpy((char *)v13, "tlv overflow");
LABEL_5:
  v14 = 0;
  v15 = &v14;
  v16 = 0x2000000000;
  v17 = 0;
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(*(qmi::MessageBase **)(a1 + 40));
  v7 = TlvValue;
  if (TlvValue)
  {
    tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v6, (const unsigned __int8 *)2);
    *((_DWORD *)v15 + 6) = *(unsigned __int16 *)v7;
  }
  LODWORD(v19) = *((_DWORD *)v15 + 6);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v9 = (char *)operator new(0x48uLL);
  v10 = v9;
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  if (SHIBYTE(v18[0].__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v9 + 16), v18[0].__r_.__value_.__l.__data_, v18[0].__r_.__value_.__l.__size_);
  else
    *(std::string *)(v9 + 16) = v18[0];
  v11 = (std::string *)(v10 + 5);
  if (SHIBYTE(v18[1].__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v11, v18[1].__r_.__value_.__l.__data_, v18[1].__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)&v18[1].__r_.__value_.__l.__data_;
    v10[7] = *((_QWORD *)&v18[1].__r_.__value_.__l + 2);
  }
  v10[8] = v19;
  v10[1] = v8 + 40;
  v12 = *(_QWORD *)(v8 + 40);
  *v10 = v12;
  *(_QWORD *)(v12 + 8) = v10;
  *(_QWORD *)(v8 + 40) = v10;
  ++*(_QWORD *)(v8 + 56);
  _Block_object_dispose(&v14, 8);
  if ((SHIBYTE(v18[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v18[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_17:
    operator delete(v18[0].__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v18[1].__r_.__value_.__l.__data_);
  if (SHIBYTE(v18[0].__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_17;
}

void sub_1B3D918E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  char *v13;
  void **v14;

  if (v13[39] < 0)
    operator delete(*v14);
  operator delete(v13);
  _Block_object_dispose(&a9, 8);
  std::pair<std::string,std::string>::~pair((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_1B3D91958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::pair<std::string,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void coredump::QMICommandDriver::getCoreDumpEnabledStatus(coredump::QMICommandDriver *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 0x40000000;
  v1[2] = ___ZN8coredump16QMICommandDriver24getCoreDumpEnabledStatusEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_29_4;
  v1[4] = this;
  ctu::SharedSynchronizable<coredump::CommandDriver>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

void ___ZN8coredump16QMICommandDriver24getCoreDumpEnabledStatusEv_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  NSObject *v14;
  _QWORD v15[6];
  std::__shared_weak_count *v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  void *v21;
  _OWORD v22[2];
  __int128 aBlock;
  void (*v24)(uint64_t, QMIServiceMsg *);
  void *v25;
  _QWORD *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD **)(a1 + 32);
  if (v1[26])
  {
    v2 = (std::__shared_weak_count *)v1[10];
    if (!v2 || (v3 = v1[9], (v4 = std::__shared_weak_count::lock(v2)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v5 = v4;
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v5);
    }
    *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v22[0] = v10;
    v22[1] = v10;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v22);
    v17 = v1 + 24;
    v18 = QMIServiceMsg::create();
    v19 = 25000;
    v20 = 0;
    v21 = 0;
    v11 = MEMORY[0x1E0C809B0];
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 1174405120;
    v15[2] = ___ZN8coredump16QMICommandDriver24getCoreDumpEnabledStatusEv_block_invoke_24;
    v15[3] = &__block_descriptor_tmp_28_6;
    v15[4] = v1;
    v15[5] = v3;
    v16 = v5;
    do
      v12 = __ldxr(p_shared_weak_owners);
    while (__stxr(v12 + 1, p_shared_weak_owners));
    *(_QWORD *)&aBlock = v11;
    *((_QWORD *)&aBlock + 1) = 0x40000000;
    v24 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm18CoreDumpGetEnabled8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    v25 = &unk_1E66E2298;
    v26 = v15;
    v13 = _Block_copy(&aBlock);
    v21 = v13;
    if (v18)
    {
      qmi::Client::send();
      v13 = v21;
    }
    if (v13)
      _Block_release(v13);
    if (v16)
      std::__shared_weak_count::__release_weak(v16);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v22);
    std::__shared_weak_count::__release_weak(v5);
  }
  else
  {
    v14 = v1[5];
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      LODWORD(aBlock) = 136315138;
      *(_QWORD *)((char *)&aBlock + 4) = "getCoreDumpEnabledStatus_block_invoke";
      _os_log_error_impl(&dword_1B3CB3000, v14, OS_LOG_TYPE_ERROR, "%s: No client, bail", (uint8_t *)&aBlock, 0xCu);
    }
  }
}

void sub_1B3D91BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  std::__shared_weak_count *v21;

  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a16);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a21);
  std::__shared_weak_count::__release_weak(v21);
  _Unwind_Resume(a1);
}

void sub_1B3D91C3C(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1B3D91C34);
}

void ___ZN8coredump16QMICommandDriver24getCoreDumpEnabledStatusEv_block_invoke_24(_QWORD *a1, qmi::MessageBase *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  tlv *TlvValue;
  int v10;
  tlv *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint8_t v14[16];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v16 = v6;
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        if (*((_DWORD *)a2 + 1))
        {
          v8 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)v14 = 0;
            _os_log_error_impl(&dword_1B3CB3000, v8, OS_LOG_TYPE_ERROR, "WARNING: Failed to get core dump setting. BB is probably old", v14, 2u);
          }
        }
        else
        {
          TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
          v11 = TlvValue;
          if (TlvValue)
          {
            tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v10, (const unsigned __int8 *)4);
            boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::operator()(*(uint64_t ****)(v5 + 160), *(_DWORD *)v11 != 0);
          }
        }
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1B3D91D78(void *a1)
{
  unsigned __int16 *v1;
  uint64_t v2;
  uint64_t v3;

  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E0DE2D28])(*v1, 32, v2, v3);
  JUMPOUT(0x1B3D91D18);
}

void sub_1B3D91DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void coredump::QMICommandDriver::setCoreDumpEnabledStatus(uint64_t a1, char a2, void **a3)
{
  void *v4;
  _QWORD v5[5];
  void *aBlock;
  char v7;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 1174405120;
  v5[2] = ___ZN8coredump16QMICommandDriver24setCoreDumpEnabledStatusEbN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
  v5[3] = &__block_descriptor_tmp_35_6;
  v5[4] = a1;
  v7 = a2;
  v4 = *a3;
  if (*a3)
    v4 = _Block_copy(v4);
  aBlock = v4;
  ctu::SharedSynchronizable<coredump::CommandDriver>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v5);
  if (aBlock)
    _Block_release(aBlock);
}

void ___ZN8coredump16QMICommandDriver24setCoreDumpEnabledStatusEbN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  __int128 v3;
  uint64_t v4;
  char *v5;
  char *v6;
  const void **v7;
  _DWORD *v8;
  NSObject *v9;
  _BYTE *v10;
  _BYTE *v11;
  _DWORD *v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  _QWORD *v20;
  char *v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  _QWORD *v26;
  unint64_t *p_shared_weak_owners;
  unint64_t v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  void *v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  _OWORD *v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  _QWORD v42[5];
  std::__shared_weak_count *v43;
  void *v44;
  _QWORD *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  void *aBlock;
  _QWORD v50[2];
  uint64_t (*v51)(uint64_t, _DWORD *);
  void *v52;
  char v53;
  __int128 v54;
  __int128 v55;
  __int128 buf;
  void (*v57)(uint64_t, QMIServiceMsg *);
  void *v58;
  _QWORD *v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD **)(a1 + 32);
  if (v1[26])
  {
    *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v54 = v3;
    v55 = v3;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v54);
    v4 = MEMORY[0x1E0C809B0];
    v50[0] = MEMORY[0x1E0C809B0];
    v50[1] = 0x40000000;
    v51 = ___ZN8coredump16QMICommandDriver24setCoreDumpEnabledStatusEbN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_31;
    v52 = &__block_descriptor_tmp_33_6;
    v53 = *(_BYTE *)(a1 + 48);
    v5 = (char *)*((_QWORD *)&v54 + 1);
    v6 = (char *)v55;
    v7 = (const void **)*((_QWORD *)&v54 + 1);
    if (*((_QWORD *)&v54 + 1) != (_QWORD)v55)
    {
      v7 = (const void **)*((_QWORD *)&v54 + 1);
      while (*((_BYTE *)*v7 + 8) != 32)
      {
        if (++v7 == (const void **)v55)
          goto LABEL_12;
      }
    }
    if (v7 != (const void **)v55)
    {
      if (!v8)
        __cxa_bad_cast();
      ___ZN8coredump16QMICommandDriver24setCoreDumpEnabledStatusEbN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_31((uint64_t)v50, v8 + 3);
      goto LABEL_26;
    }
LABEL_12:
    v10 = operator new(0x10uLL);
    v11 = v10;
    v10[8] = 32;
    *(_QWORD *)v10 = off_1E66E22E0;
    *((_DWORD *)v10 + 3) = 0;
    v12 = v10 + 12;
    if ((unint64_t)v6 < *((_QWORD *)&v55 + 1))
    {
      *(_QWORD *)v6 = v10;
      v13 = (uint64_t)(v6 + 8);
LABEL_25:
      *(_QWORD *)&v55 = v13;
      v51((uint64_t)v50, v12);
LABEL_26:
      v22 = (std::__shared_weak_count *)v1[10];
      if (!v22 || (v23 = v1[9], (v24 = std::__shared_weak_count::lock(v22)) == 0))
        std::__throw_bad_weak_ptr[abi:ne180100]();
      v25 = v24;
      v26 = v1 + 24;
      p_shared_weak_owners = (unint64_t *)&v24->__shared_weak_owners_;
      do
        v28 = __ldxr(p_shared_weak_owners);
      while (__stxr(v28 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v30 = __ldaxr(p_shared_owners);
      while (__stlxr(v30 - 1, p_shared_owners));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v25);
      }
      v45 = v26;
      v46 = QMIServiceMsg::create();
      v47 = 25000;
      v48 = 0;
      aBlock = 0;
      v42[0] = v4;
      v42[1] = 1174405120;
      v42[2] = ___ZN8coredump16QMICommandDriver24setCoreDumpEnabledStatusEbN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_2;
      v42[3] = &__block_descriptor_tmp_34_6;
      v42[4] = v23;
      v43 = v25;
      do
        v31 = __ldxr(p_shared_weak_owners);
      while (__stxr(v31 + 1, p_shared_weak_owners));
      v32 = *(void **)(a1 + 40);
      if (v32)
        v32 = _Block_copy(v32);
      v44 = v32;
      *(_QWORD *)&buf = v4;
      *((_QWORD *)&buf + 1) = 0x40000000;
      v57 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm18CoreDumpSetEnabled8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
      v58 = &unk_1E66E2310;
      v59 = v42;
      v33 = _Block_copy(&buf);
      aBlock = v33;
      if (v46)
      {
        qmi::Client::send();
        v33 = aBlock;
      }
      if (v33)
        _Block_release(v33);
      if (v44)
        _Block_release(v44);
      if (v43)
        std::__shared_weak_count::__release_weak(v43);
      std::__shared_weak_count::__release_weak(v25);
      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v54);
      return;
    }
    v14 = v6 - v5;
    v15 = (v6 - v5) >> 3;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v17 = *((_QWORD *)&v55 + 1) - (_QWORD)v5;
    if ((uint64_t)(*((_QWORD *)&v55 + 1) - (_QWORD)v5) >> 2 > v16)
      v16 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v19 = operator new(8 * v18);
      v20 = &v19[8 * v15];
      v21 = &v19[8 * v18];
      *v20 = v11;
      v13 = (uint64_t)(v20 + 1);
      if (v5 == v6)
      {
LABEL_23:
        *((_QWORD *)&v54 + 1) = v20;
        *(_QWORD *)&v55 = v13;
        *((_QWORD *)&v55 + 1) = v21;
        if (!v5)
          goto LABEL_25;
LABEL_24:
        operator delete(v5);
        goto LABEL_25;
      }
    }
    else
    {
      v19 = 0;
      v20 = (_QWORD *)(8 * v15);
      v21 = 0;
      *(_QWORD *)(8 * v15) = v11;
      v13 = 8 * v15 + 8;
      if (v5 == v6)
        goto LABEL_23;
    }
    if ((unint64_t)(v14 - 8) < 0x58)
      goto LABEL_63;
    if ((unint64_t)(v5 - v19) < 0x20)
      goto LABEL_63;
    v34 = ((unint64_t)(v14 - 8) >> 3) + 1;
    v35 = 8 * (v34 & 0x3FFFFFFFFFFFFFFCLL);
    v36 = &v6[-v35];
    v20 = (_QWORD *)((char *)v20 - v35);
    v37 = &v19[8 * v15 - 16];
    v38 = v6 - 16;
    v39 = v34 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v40 = *(_OWORD *)v38;
      *(v37 - 1) = *((_OWORD *)v38 - 1);
      *v37 = v40;
      v37 -= 2;
      v38 -= 32;
      v39 -= 4;
    }
    while (v39);
    v6 = v36;
    if (v34 != (v34 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_63:
      do
      {
        v41 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *--v20 = v41;
      }
      while (v6 != v5);
    }
    v5 = (char *)*((_QWORD *)&v54 + 1);
    *((_QWORD *)&v54 + 1) = v20;
    *(_QWORD *)&v55 = v13;
    *((_QWORD *)&v55 + 1) = v21;
    if (!v5)
      goto LABEL_25;
    goto LABEL_24;
  }
  v9 = v1[5];
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = "setCoreDumpEnabledStatus_block_invoke";
    _os_log_error_impl(&dword_1B3CB3000, v9, OS_LOG_TYPE_ERROR, "%s: No client, bail", (uint8_t *)&buf, 0xCu);
  }
}

void sub_1B3D922A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B3D92314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a27);
  _Unwind_Resume(a1);
}

void sub_1B3D92328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a27);
  _Unwind_Resume(a1);
}

uint64_t ___ZN8coredump16QMICommandDriver24setCoreDumpEnabledStatusEbN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_31(uint64_t result, _DWORD *a2)
{
  *a2 = *(unsigned __int8 *)(result + 32);
  return result;
}

void ___ZN8coredump16QMICommandDriver24setCoreDumpEnabledStatusEbN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_2(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[4])
        (*(void (**)(void))(a1[6] + 16))();
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1B3D923F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c49_ZTSNSt3__18weak_ptrIN8coredump13CommandDriverEEE48c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void *result;

  v3 = a2[5];
  a1[4] = a2[4];
  a1[5] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = (void *)a2[6];
  if (result)
    result = _Block_copy(result);
  a1[6] = result;
  return result;
}

void __destroy_helper_block_e8_32c49_ZTSNSt3__18weak_ptrIN8coredump13CommandDriverEEE48c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;

  v2 = *(const void **)(a1 + 48);
  if (v2)
    _Block_release(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

_QWORD *std::shared_ptr<coredump::QMICommandDriver>::shared_ptr[abi:ne180100]<coredump::QMICommandDriver,std::shared_ptr<coredump::QMICommandDriver> ctu::SharedSynchronizable<coredump::CommandDriver>::make_shared_ptr<coredump::QMICommandDriver>(coredump::QMICommandDriver*)::{lambda(coredump::QMICommandDriver*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E66E21B8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1B3D925A0(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<coredump::QMICommandDriver> ctu::SharedSynchronizable<coredump::CommandDriver>::make_shared_ptr<coredump::QMICommandDriver>(coredump::QMICommandDriver*)::{lambda(coredump::QMICommandDriver*)#1}::operator() const(coredump::QMICommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1B3D925C0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<coredump::QMICommandDriver *,std::shared_ptr<coredump::QMICommandDriver> ctu::SharedSynchronizable<coredump::CommandDriver>::make_shared_ptr<coredump::QMICommandDriver>(coredump::QMICommandDriver*)::{lambda(coredump::QMICommandDriver *)#1},std::allocator<coredump::QMICommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<coredump::QMICommandDriver *,std::shared_ptr<coredump::QMICommandDriver> ctu::SharedSynchronizable<coredump::CommandDriver>::make_shared_ptr<coredump::QMICommandDriver>(coredump::QMICommandDriver*)::{lambda(coredump::QMICommandDriver *)#1},std::allocator<coredump::QMICommandDriver>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<coredump::QMICommandDriver> ctu::SharedSynchronizable<coredump::CommandDriver>::make_shared_ptr<coredump::QMICommandDriver>(coredump::QMICommandDriver*)::{lambda(coredump::QMICommandDriver*)#1}::operator() const(coredump::QMICommandDriver*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<coredump::QMICommandDriver *,std::shared_ptr<coredump::QMICommandDriver> ctu::SharedSynchronizable<coredump::CommandDriver>::make_shared_ptr<coredump::QMICommandDriver>(coredump::QMICommandDriver*)::{lambda(coredump::QMICommandDriver *)#1},std::allocator<coredump::QMICommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN8coredump13CommandDriverEE15make_shared_ptrINS1_16QMICommandDriverEEE"
                     "NSt3__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN8coredump13CommandDriverEE15make_shared_ptrINS1_16QMIComma"
                                "ndDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN8coredump13CommandDriverEE15make_shared_ptrINS1_16QMICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN8coredump13CommandDriverEE15make_shared_ptrINS1_16QMICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<coredump::QMICommandDriver> ctu::SharedSynchronizable<coredump::CommandDriver>::make_shared_ptr<coredump::QMICommandDriver>(coredump::QMICommandDriver*)::{lambda(coredump::QMICommandDriver*)#1}::operator() const(coredump::QMICommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::CrashReason>::getSize()
{
  return 83;
}

__n128 qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::CrashReason>::write(uint64_t a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *(_BYTE *)(a1 + 8);
  v3 = *a2;
  *a2 += 3;
  *(_OWORD *)(v3 + 3) = *(_OWORD *)(a1 + 9);
  result = *(__n128 *)(a1 + 25);
  v5 = *(_OWORD *)(a1 + 41);
  v6 = *(_OWORD *)(a1 + 57);
  *(_OWORD *)(v3 + 67) = *(_OWORD *)(a1 + 73);
  *(_OWORD *)(v3 + 51) = v6;
  *(_OWORD *)(v3 + 35) = v5;
  *(__n128 *)(v3 + 19) = result;
  *a2 = v3 + 83;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 80;
  return result;
}

__n128 qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::CrashReason>::clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x60uLL);
  v2[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = off_1E66E2240;
  *(_OWORD *)(v2 + 25) = *(_OWORD *)(a1 + 25);
  *(_OWORD *)(v2 + 41) = *(_OWORD *)(a1 + 41);
  *(_OWORD *)(v2 + 57) = *(_OWORD *)(a1 + 57);
  *(_OWORD *)(v2 + 73) = *(_OWORD *)(a1 + 73);
  result = *(__n128 *)(a1 + 9);
  *(__n128 *)(v2 + 9) = result;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm22CoreDumpGetCrashReason8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D92814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D92828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D92854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm18CoreDumpGetEnabled8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D92928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D9293C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D92968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::CoreDumpEnabledType>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::CoreDumpEnabledType>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::CoreDumpEnabledType>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66E22E0;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm18CoreDumpSetEnabled8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D92AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D92AC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D92AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void radio::QMICommandDriver::create(uint64_t *a1@<X0>, NSObject **a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  NSObject *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  std::__shared_weak_count *v19;
  unint64_t v20;
  unint64_t *p_shared_weak_owners;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34[2];
  dispatch_object_t object;
  uint64_t v36;
  std::__shared_weak_count *v37;
  _QWORD v38[5];

  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  v8 = (std::__shared_weak_count_vtbl *)operator new(0x160uLL);
  v9 = a1[1];
  v36 = *a1;
  v37 = (std::__shared_weak_count *)v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = *a2;
  object = v12;
  if (v12)
    dispatch_retain(v12);
  v13 = *a3;
  v14 = (std::__shared_weak_count *)a3[1];
  v34[0] = v13;
  v34[1] = (uint64_t)v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  radio::QMICommandDriver::QMICommandDriver(v8, &v36, &object, v34);
  *a4 = (uint64_t)v8;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  v17 = (std::__shared_weak_count *)operator new(0x20uLL);
  v17->__shared_owners_ = 0;
  v18 = (unint64_t *)&v17->__shared_owners_;
  v17->__vftable = (std::__shared_weak_count_vtbl *)off_1E66E27F8;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = v8;
  a4[1] = (uint64_t)v17;
  v19 = (std::__shared_weak_count *)v8[2].~__shared_weak_count;
  if (v19)
  {
    if (v19->__shared_owners_ != -1)
      goto LABEL_22;
    do
      v20 = __ldxr(v18);
    while (__stxr(v20 + 1, v18));
    p_shared_weak_owners = (unint64_t *)&v17->__shared_weak_owners_;
    do
      v22 = __ldxr(p_shared_weak_owners);
    while (__stxr(v22 + 1, p_shared_weak_owners));
    v8[1].__on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
    v8[2].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v17;
    std::__shared_weak_count::__release_weak(v19);
  }
  else
  {
    do
      v23 = __ldxr(v18);
    while (__stxr(v23 + 1, v18));
    v24 = (unint64_t *)&v17->__shared_weak_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    v8[1].__on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
    v8[2].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v17;
  }
  do
    v26 = __ldaxr(v18);
  while (__stlxr(v26 - 1, v18));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_22:
  ctu::Loggable<radio::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a4);
  if (v14)
  {
    v27 = (unint64_t *)&v14->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (object)
    dispatch_release(object);
  v29 = v37;
  if (v37)
  {
    v30 = (unint64_t *)&v37->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = *a4;
  v33 = (uint64_t *)(*a4 + 72);
  v38[0] = MEMORY[0x1E0C809B0];
  v38[1] = 0x40000000;
  v38[2] = ___ZN5radio16QMICommandDriver4initEv_block_invoke;
  v38[3] = &__block_descriptor_tmp_18;
  v38[4] = v32;
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v33, (uint64_t)v38);
}

void sub_1B3D92D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v12;
  NSObject *v13;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v12);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (v13)
    dispatch_release(v13);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void radio::QMICommandDriver::init(radio::QMICommandDriver *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 0x40000000;
  v1[2] = ___ZN5radio16QMICommandDriver4initEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_18;
  v1[4] = this;
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

_QWORD *radio::QMICommandDriver::QMICommandDriver(_QWORD *a1, uint64_t *a2, NSObject **a3, uint64_t *a4)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD v20[2];
  dispatch_object_t object;
  uint64_t v22;
  std::__shared_weak_count *v23;

  v6 = (std::__shared_weak_count *)a2[1];
  v22 = *a2;
  v23 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = *a3;
  object = v9;
  if (v9)
    dispatch_retain(v9);
  v10 = *a4;
  v11 = (std::__shared_weak_count *)a4[1];
  v20[0] = v10;
  v20[1] = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  radio::QMICommandDriverBase::QMICommandDriverBase((uint64_t)a1, (uint64_t)&v22, &object, (uint64_t)v20);
  if (v11)
  {
    v14 = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (object)
    dispatch_release(object);
  v16 = v23;
  if (v23)
  {
    v17 = (unint64_t *)&v23->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  *a1 = off_1E66E2340;
  return a1;
}

void sub_1B3D92F5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  NSObject *v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  if (v2)
    dispatch_release(v2);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void radio::QMICommandDriver::~QMICommandDriver(radio::QMICommandDriver *this)
{
  NSObject *v2;
  uint8_t v3[16];

  *(_QWORD *)this = off_1E66E2340;
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1B3CB3000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v3, 2u);
  }
  radio::QMICommandDriverBase::~QMICommandDriverBase(this);
}

{
  NSObject *v2;
  uint8_t v3[16];

  *(_QWORD *)this = off_1E66E2340;
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1B3CB3000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v3, 2u);
  }
  radio::QMICommandDriverBase::~QMICommandDriverBase(this);
}

{
  NSObject *v2;
  void *v3;
  uint8_t v4[16];

  *(_QWORD *)this = off_1E66E2340;
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1B3CB3000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v4, 2u);
  }
  radio::QMICommandDriverBase::~QMICommandDriverBase(this);
  operator delete(v3);
}

void ___ZN5radio16QMICommandDriver4initEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  Registry *v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v11) = 0;
    _os_log_impl(&dword_1B3CB3000, v2, OS_LOG_TYPE_DEFAULT, "#I initializing", (uint8_t *)&v11, 2u);
  }
  v3 = *(Registry **)(v1 + 232);
  if (v3)
  {
    Registry::getServerConnection(v3);
    v4 = v11;
    v11 = 0uLL;
    v5 = *(std::__shared_weak_count **)(v1 + 256);
    *(_OWORD *)(v1 + 248) = v4;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
    if (*((_QWORD *)&v11 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  radio::QMICommandDriverBase::startDMSClient_sync((radio::QMICommandDriverBase *)v1);
  radio::QMICommandDriverBase::startBSPClient_sync((radio::QMICommandDriverBase *)v1);
  radio::QMICommandDriverBase::setupOperatingModeReporting_sync((radio::QMICommandDriverBase *)v1);
}

void radio::QMICommandDriver::reset(capabilities::radio *a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  NSObject *v7;
  void *aBlock;
  dispatch_object_t object;

  if ((capabilities::radio::mav20Plus(a1) & 1) == 0)
  {
    v6 = *(void **)a3;
    if (*(_QWORD *)a3)
      v6 = _Block_copy(v6);
    v7 = *(NSObject **)(a3 + 8);
    aBlock = v6;
    object = v7;
    if (v7)
      dispatch_retain(v7);
    (*(void (**)(capabilities::radio *, uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 152))(a1, a2, 4, &aBlock);
    if (object)
      dispatch_release(object);
    if (aBlock)
      _Block_release(aBlock);
  }
}

void sub_1B3D93280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void radio::QMICommandDriver::getWakeReason(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  NSObject *v15;
  _QWORD v16[6];
  std::__shared_weak_count *v17;
  void *aBlock;
  dispatch_object_t object;
  uint8_t buf[16];

  v4 = a1[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B3CB3000, v4, OS_LOG_TYPE_DEFAULT, "#I Getting Baseband wake reason", buf, 2u);
  }
  v6 = a1[9];
  v5 = (std::__shared_weak_count *)a1[10];
  if (!v5 || (v7 = std::__shared_weak_count::lock(v5)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 1174405120;
  v16[2] = ___ZN5radio16QMICommandDriver13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke;
  v16[3] = &__block_descriptor_tmp_10_8;
  v16[4] = a1;
  v16[5] = v6;
  v17 = v8;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  v14 = *(void **)a2;
  if (*(_QWORD *)a2)
    v14 = _Block_copy(v14);
  v15 = *(NSObject **)(a2 + 8);
  aBlock = v14;
  object = v15;
  if (v15)
    dispatch_retain(v15);
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(a1 + 9, (uint64_t)v16);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (v17)
    std::__shared_weak_count::__release_weak(v17);
  std::__shared_weak_count::__release_weak(v8);
}

void ___ZN5radio16QMICommandDriver13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  void *v9;
  NSObject *v10;
  void *v11;
  _QWORD v12[6];
  std::__shared_weak_count *v13;
  void *v14;
  dispatch_object_t object;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  void *v20;
  _OWORD v21[2];
  _QWORD aBlock[5];

  v2 = a1[4];
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v21[0] = v3;
  v21[1] = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v21);
  v16 = v2 + 320;
  v17 = QMIServiceMsg::create();
  v18 = 25000;
  v19 = 0;
  v20 = 0;
  v4 = MEMORY[0x1E0C809B0];
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 1174405120;
  v12[2] = ___ZN5radio16QMICommandDriver13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2;
  v12[3] = &__block_descriptor_tmp_9_9;
  v6 = a1[5];
  v5 = (std::__shared_weak_count *)a1[6];
  v12[4] = v2;
  v12[5] = v6;
  v13 = v5;
  if (v5)
  {
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
  }
  v9 = (void *)a1[7];
  if (v9)
    v9 = _Block_copy(v9);
  v10 = a1[8];
  v14 = v9;
  object = v10;
  if (v10)
    dispatch_retain(v10);
  aBlock[0] = v4;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm13GetWakeReason8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke_0;
  aBlock[3] = &unk_1E66E2870;
  aBlock[4] = v12;
  v11 = _Block_copy(aBlock);
  v20 = v11;
  if (v17)
  {
    qmi::Client::send();
    v11 = v20;
  }
  if (v11)
    _Block_release(v11);
  if (object)
    dispatch_release(object);
  if (v14)
    _Block_release(v14);
  if (v13)
    std::__shared_weak_count::__release_weak(v13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v21);
}

void sub_1B3D93574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v23;

  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v23);
  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a18);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  _Unwind_Resume(a1);
}

void sub_1B3D935A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio16QMICommandDriver13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2(_QWORD *a1, const qmi::ResponseBase *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  tlv *TlvValue;
  int v13;
  tlv *v14;
  CFTypeRef v15;
  CFTypeRef v16;
  const void *v17;
  void *v18;
  NSObject *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  char *__p;
  _QWORD v23[7];
  CFTypeRef v24;
  _QWORD v25[2];
  uint64_t (*v26)(uint64_t, _DWORD *, uint64_t, uint64_t, const __CFAllocator *);
  void *v27;
  _QWORD *v28;
  CFTypeRef v29;
  _QWORD v30[3];
  int v31;
  CFMutableDictionaryRef v32;
  CFTypeRef cf;
  std::__shared_weak_count *v35;
  uint64_t block;
  uint64_t p_block;
  uint64_t v38;
  void *v39;
  void *v40;
  CFTypeRef v41;
  CFMutableDictionaryRef v42;
  _QWORD *v43;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v35 = v6;
    if (v6)
    {
      v7 = v6;
      if (!a1[5])
      {
LABEL_59:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      radio::QMICommandDriverBase::checkError(v5, a2, "getting wake reason", &cf);
      v32 = 0;
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v9 = Mutable;
      if (Mutable)
        v32 = Mutable;
      if (cf)
        v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      else
        v10 = 0;
      if (v10)
      {
        if (!a1[7])
          goto LABEL_55;
      }
      else
      {
        block = 0;
        p_block = (uint64_t)&block;
        v38 = 0x2000000000;
        LOBYTE(v39) = 0;
        v30[0] = 0;
        v30[1] = v30;
        v30[2] = 0x2000000000;
        v31 = 0;
        v11 = MEMORY[0x1E0C809B0];
        v25[0] = MEMORY[0x1E0C809B0];
        v25[1] = 1174405120;
        v26 = ___ZN5radio16QMICommandDriver13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_3;
        v27 = &unk_1E66E24F8;
        v28 = v30;
        v29 = Mutable;
        if (Mutable)
          CFRetain(Mutable);
        TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
        v14 = TlvValue;
        if (TlvValue)
        {
          tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v13, (const unsigned __int8 *)4);
          LODWORD(v43) = *(_DWORD *)v14;
          ((void (*)(_QWORD *, _QWORD **))v26)(v25, &v43);
        }
        v23[0] = v11;
        v23[1] = 1174405120;
        v23[2] = ___ZN5radio16QMICommandDriver13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_5;
        v23[3] = &unk_1E66E2530;
        v23[6] = v5;
        v24 = v9;
        if (v9)
          CFRetain(v9);
        v23[4] = v30;
        v23[5] = &block;
        v43 = v23;
        qmi::MessageBase::applyTlv<bsp::tlv::abm::WakeBuffer,void({block_pointer}&)(bsp::tlv::abm::WakeBuffer const&)>(a2, 19, (uint64_t)&v43);
        if (*(_BYTE *)(p_block + 24))
        {
          __p = (char *)operator new(0x20uLL);
          strcpy(__p, "Null wake data from baseband");
          CreateError();
          v15 = cf;
          cf = v43;
          v43 = 0;
          if (v15)
          {
            CFRelease(v15);
            if (v43)
              CFRelease(v43);
          }
          operator delete(__p);
        }
        if (v24)
          CFRelease(v24);
        if (v29)
          CFRelease(v29);
        _Block_object_dispose(v30, 8);
        _Block_object_dispose(&block, 8);
        if (!a1[7])
          goto LABEL_55;
      }
      if (!a1[8])
      {
LABEL_55:
        if (v9)
          CFRelease(v9);
        if (cf)
          CFRelease(cf);
        goto LABEL_59;
      }
      v16 = cf;
      if (cf)
        CFRetain(cf);
      if (v9)
        CFRetain(v9);
      v17 = (const void *)a1[7];
      if (v17)
        v18 = _Block_copy(v17);
      else
        v18 = 0;
      v19 = a1[8];
      block = MEMORY[0x1E0C809B0];
      p_block = 1174405120;
      v38 = (uint64_t)___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke_3;
      v39 = &__block_descriptor_tmp_51_5;
      if (v18)
      {
        v40 = _Block_copy(v18);
        v41 = v16;
        if (!v16)
          goto LABEL_41;
      }
      else
      {
        v40 = 0;
        v41 = v16;
        if (!v16)
        {
LABEL_41:
          v42 = v9;
          if (v9)
            CFRetain(v9);
          dispatch_async(v19, &block);
          if (v42)
            CFRelease(v42);
          if (v41)
            CFRelease(v41);
          if (v40)
            _Block_release(v40);
          if (v18)
            _Block_release(v18);
          if (v9)
            CFRelease(v9);
          if (v16)
            CFRelease(v16);
          goto LABEL_55;
        }
      }
      CFRetain(v16);
      goto LABEL_41;
    }
  }
}

void sub_1B3D939B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,const void *a34,const void *a35)
{
  uint64_t v35;
  uint64_t v36;

  if (a15 < 0)
    operator delete(__p);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v35 + 56));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)&a29);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v36 - 160), 8);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a34);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a35);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v36 - 176);
  _Unwind_Resume(a1);
}

void sub_1B3D93A98(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1 - 176);
  _Unwind_Resume(a1);
}

uint64_t ___ZN5radio16QMICommandDriver13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_3(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, const __CFAllocator *a5)
{
  __CFDictionary *v5;

  v5 = *(__CFDictionary **)(a1 + 40);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *a2;
  return ctu::cf::insert<char const*,unsigned int>(v5, (const __CFString **)"kKeyBasebandWakeChannel", *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), (const __CFAllocator *)*MEMORY[0x1E0C9AE00], a5);
}

void ___ZN5radio16QMICommandDriver13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_5(uint64_t a1)
{
  const __CFAllocator *v2;
  unsigned int v3;
  BOOL v4;
  int v5;

  ctu::cf::convert_copy();
  ctu::cf::insert<char const*,__CFData const*>(*(__CFDictionary **)(a1 + 56), (const __CFString **)"kKeyBasebandWakeData", 0, *MEMORY[0x1E0C9AE00], v2);
  v3 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  v4 = v3 > 0xD;
  v5 = (1 << v3) & 0x2410;
  if (!v4 && v5 != 0)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
}

void sub_1B3D93C40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1B3D93C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B3D93C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void radio::QMICommandDriver::getFieldTestConfig(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  NSObject *v15;
  _QWORD v16[6];
  std::__shared_weak_count *v17;
  void *aBlock;
  dispatch_object_t object;
  uint8_t buf[16];

  v4 = a1[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B3CB3000, v4, OS_LOG_TYPE_DEFAULT, "#I Getting field test config", buf, 2u);
  }
  v6 = a1[9];
  v5 = (std::__shared_weak_count *)a1[10];
  if (!v5 || (v7 = std::__shared_weak_count::lock(v5)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 1174405120;
  v16[2] = ___ZN5radio16QMICommandDriver18getFieldTestConfigEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke;
  v16[3] = &__block_descriptor_tmp_17_6;
  v16[4] = a1;
  v16[5] = v6;
  v17 = v8;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  v14 = *(void **)a2;
  if (*(_QWORD *)a2)
    v14 = _Block_copy(v14);
  v15 = *(NSObject **)(a2 + 8);
  aBlock = v14;
  object = v15;
  if (v15)
    dispatch_retain(v15);
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(a1 + 9, (uint64_t)v16);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (v17)
    std::__shared_weak_count::__release_weak(v17);
  std::__shared_weak_count::__release_weak(v8);
}

void ___ZN5radio16QMICommandDriver18getFieldTestConfigEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  void *v9;
  NSObject *v10;
  void *v11;
  _QWORD v12[6];
  std::__shared_weak_count *v13;
  void *v14;
  dispatch_object_t object;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  void *v20;
  _OWORD v21[2];
  _QWORD aBlock[5];

  v2 = a1[4];
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v21[0] = v3;
  v21[1] = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v21);
  v16 = v2 + 320;
  v17 = QMIServiceMsg::create();
  v18 = 25000;
  v19 = 0;
  v20 = 0;
  v4 = MEMORY[0x1E0C809B0];
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 1174405120;
  v12[2] = ___ZN5radio16QMICommandDriver18getFieldTestConfigEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2;
  v12[3] = &__block_descriptor_tmp_16_4;
  v6 = a1[5];
  v5 = (std::__shared_weak_count *)a1[6];
  v12[4] = v2;
  v12[5] = v6;
  v13 = v5;
  if (v5)
  {
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
  }
  v9 = (void *)a1[7];
  if (v9)
    v9 = _Block_copy(v9);
  v10 = a1[8];
  v14 = v9;
  object = v10;
  if (v10)
    dispatch_retain(v10);
  aBlock[0] = v4;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm18GetFieldTestConfig8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66E2898;
  aBlock[4] = v12;
  v11 = _Block_copy(aBlock);
  v20 = v11;
  if (v17)
  {
    qmi::Client::send();
    v11 = v20;
  }
  if (v11)
    _Block_release(v11);
  if (object)
    dispatch_release(object);
  if (v14)
    _Block_release(v14);
  if (v13)
    std::__shared_weak_count::__release_weak(v13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v21);
}

void sub_1B3D93F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v23;

  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v23);
  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a18);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  _Unwind_Resume(a1);
}

void sub_1B3D93F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio16QMICommandDriver18getFieldTestConfigEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2(_QWORD *a1, const qmi::ResponseBase *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v9;
  uint64_t (*v10)(uint64_t);
  NSObject *v11;
  CFTypeRef v12;
  const void *v13;
  void *v14;
  uint64_t (*v15)(uint64_t);
  uint64_t TlvValue;
  int v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD v21[2];
  uint64_t (*v22)(uint64_t, unsigned __int16 *);
  void *v23;
  CFTypeRef v24;
  CFMutableDictionaryRef v25;
  CFTypeRef cf;
  std::__shared_weak_count *v28;
  __int128 block;
  void (*v30)(uint64_t);
  void *v31;
  void *aBlock;
  CFTypeRef v33;
  CFTypeRef v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v28 = v6;
    if (v6)
    {
      v7 = v6;
      if (!a1[5])
      {
LABEL_53:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      radio::QMICommandDriverBase::checkError(v5, a2, "getting field test config", &cf);
      v25 = 0;
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v9 = Mutable;
      if (Mutable)
        v25 = Mutable;
      if (cf)
        v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      else
        v10 = 0;
      if (v10)
      {
        v11 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          LODWORD(block) = 136315138;
          *(_QWORD *)((char *)&block + 4) = "getting field test config";
          _os_log_error_impl(&dword_1B3CB3000, v11, OS_LOG_TYPE_ERROR, "Failed %s", (uint8_t *)&block, 0xCu);
        }
      }
      else
      {
        v15 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
        if (!Mutable)
          v15 = 0;
        if (v15)
        {
          v21[0] = MEMORY[0x1E0C809B0];
          v21[1] = 1174405120;
          v22 = ___ZN5radio16QMICommandDriver18getFieldTestConfigEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_13;
          v23 = &__block_descriptor_tmp_15_5;
          v24 = Mutable;
          if (Mutable)
            CFRetain(Mutable);
          TlvValue = qmi::MessageBase::findTlvValue(a2);
          if (TlvValue)
          {
            block = 0uLL;
            LODWORD(v31) = 0;
            v30 = 0;
            bsp::tlv::abm::parseField(TlvValue, (const unsigned __int8 *)(TlvValue + v17), &block);
            v22((uint64_t)v21, (unsigned __int16 *)&block);
          }
          if (v24)
            CFRelease(v24);
        }
      }
      if (!a1[7] || !a1[8])
      {
LABEL_49:
        if (v9)
          CFRelease(v9);
        if (cf)
          CFRelease(cf);
        goto LABEL_53;
      }
      v12 = cf;
      if (cf)
        CFRetain(cf);
      if (v9)
        CFRetain(v9);
      v13 = (const void *)a1[7];
      if (v13)
        v14 = _Block_copy(v13);
      else
        v14 = 0;
      v18 = a1[8];
      *(_QWORD *)&block = MEMORY[0x1E0C809B0];
      *((_QWORD *)&block + 1) = 1174405120;
      v30 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke_3;
      v31 = &__block_descriptor_tmp_51_5;
      if (v14)
      {
        aBlock = _Block_copy(v14);
        v33 = v12;
        if (!v12)
          goto LABEL_35;
      }
      else
      {
        aBlock = 0;
        v33 = v12;
        if (!v12)
        {
LABEL_35:
          v34 = v9;
          if (v9)
            CFRetain(v9);
          dispatch_async(v18, &block);
          if (v34)
            CFRelease(v34);
          if (v33)
            CFRelease(v33);
          if (aBlock)
            _Block_release(aBlock);
          if (v14)
            _Block_release(v14);
          if (v9)
            CFRelease(v9);
          if (v12)
            CFRelease(v12);
          goto LABEL_49;
        }
      }
      CFRetain(v12);
      goto LABEL_35;
    }
  }
}

void sub_1B3D942F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, int a16, __int16 a17, char a18, char a19, int a20,__int16 a21,char a22,char a23)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN5radio16QMICommandDriver18getFieldTestConfigEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_13(uint64_t a1, unsigned __int16 *a2)
{
  const __CFAllocator *v4;

  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(a1 + 32), (CFTypeRef)*MEMORY[0x1E0DDF988], *a2, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(a1 + 32), (CFTypeRef)*MEMORY[0x1E0DDF998], a2[1], v4);
  ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(a1 + 32), (CFTypeRef)*MEMORY[0x1E0DDF9A8], a2[2], v4);
  ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(a1 + 32), (CFTypeRef)*MEMORY[0x1E0DDF798], a2[3], v4);
  ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(a1 + 32), (CFTypeRef)*MEMORY[0x1E0DDF8A0], a2[4], v4);
  ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(a1 + 32), (CFTypeRef)*MEMORY[0x1E0DDF900], a2[5], v4);
  ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(a1 + 32), (CFTypeRef)*MEMORY[0x1E0DDF780], a2[6], v4);
  ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(a1 + 32), (CFTypeRef)*MEMORY[0x1E0DDF770], a2[7], v4);
  ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(a1 + 32), (CFTypeRef)*MEMORY[0x1E0DDF8C8], a2[8], v4);
  ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(a1 + 32), (CFTypeRef)*MEMORY[0x1E0DDF8E0], a2[9], v4);
  ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(a1 + 32), (CFTypeRef)*MEMORY[0x1E0DDF8D8], a2[10], v4);
  ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(a1 + 32), (CFTypeRef)*MEMORY[0x1E0DDF8A8], a2[11], v4);
  ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(a1 + 32), (CFTypeRef)*MEMORY[0x1E0DDF8B8], a2[12], v4);
  return ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(a1 + 32), (CFTypeRef)*MEMORY[0x1E0DDF8C0], a2[13], v4);
}

void radio::QMICommandDriver::setFieldTestConfig(_QWORD *a1, const void **a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  uint64_t *v6;
  uint64_t v7;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  const void *v16;
  uint64_t (*v17)(uint64_t);
  NSObject *v18;
  unint64_t v19;
  void *v20;
  NSObject *v21;
  uint64_t (*v22)(uint64_t);
  void *v23;
  NSObject *v24;
  _QWORD v25[5];
  CFTypeRef cf;
  uint64_t v27;
  std::__shared_weak_count *v28;
  void *aBlock;
  dispatch_object_t object;
  void *__p[2];
  char v32;
  CFTypeRef v33;
  uint8_t buf[8];
  uint64_t v35;
  void (*v36)(uint64_t);
  void *v37;
  void *v38;
  CFTypeRef v39;

  v7 = a1[9];
  v5 = (std::__shared_weak_count *)a1[10];
  v6 = a1 + 9;
  if (!v5 || (v10 = std::__shared_weak_count::lock(v5)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v11 = v10;
  p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (v15)
  {
    v16 = *a2;
    v17 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    if (!*a2)
      v17 = 0;
    if (v17)
    {
LABEL_11:
      v18 = a1[5];
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1B3CB3000, v18, OS_LOG_TYPE_DEFAULT, "#I Setting field test config", buf, 2u);
        v16 = *a2;
      }
      v25[0] = MEMORY[0x1E0C809B0];
      v25[1] = 1174405120;
      v25[2] = ___ZN5radio16QMICommandDriver18setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke;
      v25[3] = &__block_descriptor_tmp_40_11;
      v25[4] = a1;
      cf = v16;
      if (v16)
        CFRetain(v16);
      v27 = v7;
      v28 = v11;
      do
        v19 = __ldxr(p_shared_weak_owners);
      while (__stxr(v19 + 1, p_shared_weak_owners));
      v20 = *(void **)a3;
      if (*(_QWORD *)a3)
        v20 = _Block_copy(v20);
      v21 = *(NSObject **)(a3 + 8);
      aBlock = v20;
      object = v21;
      if (v21)
        dispatch_retain(v21);
      ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v6, (uint64_t)v25);
      if (object)
        dispatch_release(object);
      if (aBlock)
        _Block_release(aBlock);
      if (v28)
        std::__shared_weak_count::__release_weak(v28);
      if (cf)
        CFRelease(cf);
      goto LABEL_47;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v11);
    v16 = *a2;
    v22 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    if (!*a2)
      v22 = 0;
    if (v22)
      goto LABEL_11;
  }
  if (*(_QWORD *)a3 && *(_QWORD *)(a3 + 8))
  {
    v33 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
    v32 = 13;
    strcpy((char *)__p, "Invalid input");
    CreateError();
    CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
    if (*(_QWORD *)a3)
      v23 = _Block_copy(*(const void **)a3);
    else
      v23 = 0;
    v24 = *(NSObject **)(a3 + 8);
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    v35 = 1174405120;
    v36 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_5;
    v37 = &__block_descriptor_tmp_54_3;
    if (v23)
    {
      v38 = _Block_copy(v23);
      v39 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
    }
    else
    {
      v38 = 0;
      v39 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
    }
    CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
    dispatch_async(v24, buf);
    if (v39)
      CFRelease(v39);
    if (v38)
      _Block_release(v38);
    if (v23)
      _Block_release(v23);
    CFRelease((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
    CFRelease(v33);
  }
LABEL_47:
  std::__shared_weak_count::__release_weak(v11);
}

void sub_1B3D94898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::__shared_weak_count *v24;

  if (a24 < 0)
    operator delete(__p);
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void ___ZN5radio16QMICommandDriver18setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  char *v5;
  char *v6;
  const void **v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  _OWORD *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  const void **v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  int64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _BYTE *v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  _OWORD *v49;
  char *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  const void **v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  const void **v60;
  char *v61;
  char *v62;
  _BYTE *v63;
  _BYTE *v64;
  int64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _BYTE *v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  _OWORD *v77;
  char *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  char *v83;
  const void **v84;
  char *v85;
  char *v86;
  _BYTE *v87;
  _BYTE *v88;
  int64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  _BYTE *v94;
  _QWORD *v95;
  char *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  char *v100;
  _OWORD *v101;
  char *v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  char *v106;
  char *v107;
  const void **v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  int64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  _BYTE *v118;
  _QWORD *v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  char *v124;
  _OWORD *v125;
  char *v126;
  uint64_t v127;
  __int128 v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  uint64_t v131;
  unint64_t *p_shared_weak_owners;
  unint64_t v133;
  void *v134;
  NSObject *v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD v141[6];
  std::__shared_weak_count *v142;
  void *v143;
  dispatch_object_t object;
  uint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  void *v149;
  _QWORD v150[2];
  uint64_t (*v151)(uint64_t, char *);
  void *v152;
  _BYTE v153[16];
  _QWORD v154[2];
  uint64_t (*v155)(uint64_t, char *);
  void *v156;
  _BYTE v157[16];
  _QWORD v158[2];
  uint64_t (*v159)(uint64_t, char *);
  void *v160;
  uint64_t v161;
  _QWORD v162[2];
  uint64_t (*v163)(uint64_t, char *);
  void *v164;
  _BYTE v165[16];
  _QWORD v166[2];
  uint64_t (*v167)(uint64_t, char *);
  void *v168;
  uint64_t v169;
  _QWORD v170[2];
  uint64_t (*v171)(uint64_t, char *);
  void *v172;
  uint64_t v173;
  _QWORD v174[2];
  __int128 v175;
  __int128 v176;
  _QWORD aBlock[6];

  v2 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v175 = v3;
  v176 = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v175);
  v174[0] = 0xAAAAAAAAAAAAAAAALL;
  v174[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v174, *(const __CFDictionary **)(a1 + 40));
  v170[0] = MEMORY[0x1E0C809B0];
  v170[1] = 1174405120;
  v171 = (uint64_t (*)(uint64_t, char *))___ZN5radio16QMICommandDriver18setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_2;
  v172 = &__block_descriptor_tmp_21_3;
  v4 = ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v173, (const ctu::cf::dict_adapter *)v174);
  v5 = (char *)*((_QWORD *)&v175 + 1);
  v6 = (char *)v176;
  v7 = (const void **)*((_QWORD *)&v175 + 1);
  v140 = v4;
  v138 = v2;
  if (*((_QWORD *)&v175 + 1) != (_QWORD)v176)
  {
    v7 = (const void **)*((_QWORD *)&v175 + 1);
    while (*((_BYTE *)*v7 + 8) != 16)
    {
      if (++v7 == (const void **)v176)
        goto LABEL_9;
    }
  }
  if (v7 == (const void **)v176)
  {
LABEL_9:
    v10 = (char *)operator new(0x10uLL);
    v11 = v10;
    v10[8] = 16;
    *(_QWORD *)v10 = off_1E66E2910;
    *(_DWORD *)(v10 + 10) = 0;
    v9 = v10 + 10;
    *((_WORD *)v10 + 7) = 0;
    if ((unint64_t)v6 < *((_QWORD *)&v176 + 1))
    {
      *(_QWORD *)v6 = v10;
      *(_QWORD *)&v176 = v6 + 8;
      goto LABEL_32;
    }
    v12 = v6 - v5;
    v13 = (v6 - v5) >> 3;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v15 = *((_QWORD *)&v176 + 1) - (_QWORD)v5;
    if ((uint64_t)(*((_QWORD *)&v176 + 1) - (_QWORD)v5) >> 2 > v14)
      v14 = v15 >> 2;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      if (v16 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v17 = operator new(8 * v16);
      v18 = &v17[8 * v13];
      v19 = &v17[8 * v16];
      *v18 = v11;
      v20 = (uint64_t)(v18 + 1);
      if (v5 != v6)
      {
LABEL_20:
        if ((unint64_t)(v12 - 8) < 0x58)
          goto LABEL_200;
        if ((unint64_t)(v5 - v17) < 0x20)
          goto LABEL_200;
        v21 = ((unint64_t)(v12 - 8) >> 3) + 1;
        v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
        v23 = &v6[-v22];
        v18 = (_QWORD *)((char *)v18 - v22);
        v24 = &v17[8 * v13 - 16];
        v25 = v6 - 16;
        v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v27 = *(_OWORD *)v25;
          *(v24 - 1) = *((_OWORD *)v25 - 1);
          *v24 = v27;
          v24 -= 2;
          v25 -= 32;
          v26 -= 4;
        }
        while (v26);
        v6 = v23;
        if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_200:
          do
          {
            v28 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *--v18 = v28;
          }
          while (v6 != v5);
        }
        v5 = (char *)*((_QWORD *)&v175 + 1);
        *((_QWORD *)&v175 + 1) = v18;
        *(_QWORD *)&v176 = v20;
        *((_QWORD *)&v176 + 1) = v19;
        if (!v5)
          goto LABEL_31;
        goto LABEL_30;
      }
    }
    else
    {
      v17 = 0;
      v18 = (_QWORD *)(8 * v13);
      v19 = 0;
      *(_QWORD *)(8 * v13) = v11;
      v20 = 8 * v13 + 8;
      if (v5 != v6)
        goto LABEL_20;
    }
    *((_QWORD *)&v175 + 1) = v18;
    *(_QWORD *)&v176 = v20;
    *((_QWORD *)&v176 + 1) = v19;
    if (!v5)
    {
LABEL_31:
      *(_QWORD *)&v176 = v20;
      goto LABEL_32;
    }
LABEL_30:
    operator delete(v5);
    goto LABEL_31;
  }
  if (!v8)
    __cxa_bad_cast();
  v9 = v8 + 10;
LABEL_32:
  v171((uint64_t)v170, v9);
  v166[0] = MEMORY[0x1E0C809B0];
  v166[1] = 1174405120;
  v167 = (uint64_t (*)(uint64_t, char *))___ZN5radio16QMICommandDriver18setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_22;
  v168 = &__block_descriptor_tmp_24_11;
  v29 = ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v169, (const ctu::cf::dict_adapter *)v174);
  v31 = (char *)*((_QWORD *)&v175 + 1);
  v30 = (char *)v176;
  v32 = (const void **)*((_QWORD *)&v175 + 1);
  v139 = v29;
  if (*((_QWORD *)&v175 + 1) != (_QWORD)v176)
  {
    v32 = (const void **)*((_QWORD *)&v175 + 1);
    while (*((_BYTE *)*v32 + 8) != 17)
    {
      if (++v32 == (const void **)v176)
        goto LABEL_40;
    }
  }
  if (v32 == (const void **)v176)
  {
LABEL_40:
    v35 = (char *)operator new(0x18uLL);
    v36 = v35;
    v35[8] = 17;
    *(_QWORD *)v35 = off_1E66E2960;
    *(_QWORD *)(v35 + 10) = 0;
    v34 = v35 + 10;
    *((_WORD *)v35 + 9) = 0;
    if ((unint64_t)v30 < *((_QWORD *)&v176 + 1))
    {
      *(_QWORD *)v30 = v35;
      *(_QWORD *)&v176 = v30 + 8;
      goto LABEL_63;
    }
    v37 = v30 - v31;
    v38 = (v30 - v31) >> 3;
    v39 = v38 + 1;
    if ((unint64_t)(v38 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v40 = *((_QWORD *)&v176 + 1) - (_QWORD)v31;
    if ((uint64_t)(*((_QWORD *)&v176 + 1) - (_QWORD)v31) >> 2 > v39)
      v39 = v40 >> 2;
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
      v41 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v41 = v39;
    if (v41)
    {
      if (v41 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v42 = operator new(8 * v41);
      v43 = &v42[8 * v38];
      v44 = &v42[8 * v41];
      *v43 = v36;
      v45 = (uint64_t)(v43 + 1);
      if (v31 != v30)
      {
LABEL_51:
        if ((unint64_t)(v37 - 8) < 0x58)
          goto LABEL_201;
        if ((unint64_t)(v31 - v42) < 0x20)
          goto LABEL_201;
        v46 = ((unint64_t)(v37 - 8) >> 3) + 1;
        v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
        v48 = &v30[-v47];
        v43 = (_QWORD *)((char *)v43 - v47);
        v49 = &v42[8 * v38 - 16];
        v50 = v30 - 16;
        v51 = v46 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v52 = *(_OWORD *)v50;
          *(v49 - 1) = *((_OWORD *)v50 - 1);
          *v49 = v52;
          v49 -= 2;
          v50 -= 32;
          v51 -= 4;
        }
        while (v51);
        v30 = v48;
        if (v46 != (v46 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_201:
          do
          {
            v53 = *((_QWORD *)v30 - 1);
            v30 -= 8;
            *--v43 = v53;
          }
          while (v30 != v31);
        }
        v31 = (char *)*((_QWORD *)&v175 + 1);
        *((_QWORD *)&v175 + 1) = v43;
        *(_QWORD *)&v176 = v45;
        *((_QWORD *)&v176 + 1) = v44;
        if (!v31)
          goto LABEL_62;
        goto LABEL_61;
      }
    }
    else
    {
      v42 = 0;
      v43 = (_QWORD *)(8 * v38);
      v44 = 0;
      *(_QWORD *)(8 * v38) = v36;
      v45 = 8 * v38 + 8;
      if (v31 != v30)
        goto LABEL_51;
    }
    *((_QWORD *)&v175 + 1) = v43;
    *(_QWORD *)&v176 = v45;
    *((_QWORD *)&v176 + 1) = v44;
    if (!v31)
    {
LABEL_62:
      *(_QWORD *)&v176 = v45;
      goto LABEL_63;
    }
LABEL_61:
    operator delete(v31);
    goto LABEL_62;
  }
  if (!v33)
    __cxa_bad_cast();
  v34 = v33 + 10;
LABEL_63:
  v167((uint64_t)v166, v34);
  v162[0] = MEMORY[0x1E0C809B0];
  v162[1] = 1174405120;
  v163 = (uint64_t (*)(uint64_t, char *))___ZN5radio16QMICommandDriver18setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_25;
  v164 = &__block_descriptor_tmp_27_1;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v165, (const ctu::cf::dict_adapter *)v174);
  v54 = (const void **)*((_QWORD *)&v175 + 1);
  if (*((_QWORD *)&v175 + 1) != (_QWORD)v176)
  {
    while (*((_BYTE *)*v54 + 8) != 18)
    {
      if (++v54 == (const void **)v176)
        goto LABEL_70;
    }
  }
  if (v54 == (const void **)v176)
  {
LABEL_70:
    v56 = qmi::MutableMessageBase::createTLV<bsp::tlv::abm::TxAntennaConfig>(&v175, 18);
  }
  else
  {
    if (!v55)
      __cxa_bad_cast();
    v56 = v55 + 10;
  }
  v163((uint64_t)v162, v56);
  v158[0] = MEMORY[0x1E0C809B0];
  v158[1] = 1174405120;
  v159 = (uint64_t (*)(uint64_t, char *))___ZN5radio16QMICommandDriver18setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_28;
  v160 = &__block_descriptor_tmp_30_5;
  v57 = ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v161, (const ctu::cf::dict_adapter *)v174);
  v59 = (char *)*((_QWORD *)&v175 + 1);
  v58 = (char *)v176;
  v60 = (const void **)*((_QWORD *)&v175 + 1);
  v137 = v57;
  if (*((_QWORD *)&v175 + 1) != (_QWORD)v176)
  {
    v60 = (const void **)*((_QWORD *)&v175 + 1);
    while (*((_BYTE *)*v60 + 8) != 19)
    {
      if (++v60 == (const void **)v176)
        goto LABEL_79;
    }
  }
  if (v60 == (const void **)v176)
  {
LABEL_79:
    v63 = operator new(0x10uLL);
    v64 = v63;
    v63[8] = 19;
    *(_QWORD *)v63 = off_1E66E29B0;
    *((_WORD *)v63 + 5) = 0;
    v62 = v63 + 10;
    if ((unint64_t)v58 < *((_QWORD *)&v176 + 1))
    {
      *(_QWORD *)v58 = v63;
      *(_QWORD *)&v176 = v58 + 8;
      goto LABEL_102;
    }
    v65 = v58 - v59;
    v66 = (v58 - v59) >> 3;
    v67 = v66 + 1;
    if ((unint64_t)(v66 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v68 = *((_QWORD *)&v176 + 1) - (_QWORD)v59;
    if ((uint64_t)(*((_QWORD *)&v176 + 1) - (_QWORD)v59) >> 2 > v67)
      v67 = v68 >> 2;
    if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8)
      v69 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v69 = v67;
    if (v69)
    {
      if (v69 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v70 = operator new(8 * v69);
      v71 = &v70[8 * v66];
      v72 = &v70[8 * v69];
      *v71 = v64;
      v73 = (uint64_t)(v71 + 1);
      if (v59 != v58)
      {
LABEL_90:
        if ((unint64_t)(v65 - 8) < 0x58)
          goto LABEL_202;
        if ((unint64_t)(v59 - v70) < 0x20)
          goto LABEL_202;
        v74 = ((unint64_t)(v65 - 8) >> 3) + 1;
        v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
        v76 = &v58[-v75];
        v71 = (_QWORD *)((char *)v71 - v75);
        v77 = &v70[8 * v66 - 16];
        v78 = v58 - 16;
        v79 = v74 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v80 = *(_OWORD *)v78;
          *(v77 - 1) = *((_OWORD *)v78 - 1);
          *v77 = v80;
          v77 -= 2;
          v78 -= 32;
          v79 -= 4;
        }
        while (v79);
        v58 = v76;
        if (v74 != (v74 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_202:
          do
          {
            v81 = *((_QWORD *)v58 - 1);
            v58 -= 8;
            *--v71 = v81;
          }
          while (v58 != v59);
        }
        v59 = (char *)*((_QWORD *)&v175 + 1);
        *((_QWORD *)&v175 + 1) = v71;
        *(_QWORD *)&v176 = v73;
        *((_QWORD *)&v176 + 1) = v72;
        if (!v59)
          goto LABEL_101;
        goto LABEL_100;
      }
    }
    else
    {
      v70 = 0;
      v71 = (_QWORD *)(8 * v66);
      v72 = 0;
      *(_QWORD *)(8 * v66) = v64;
      v73 = 8 * v66 + 8;
      if (v59 != v58)
        goto LABEL_90;
    }
    *((_QWORD *)&v175 + 1) = v71;
    *(_QWORD *)&v176 = v73;
    *((_QWORD *)&v176 + 1) = v72;
    if (!v59)
    {
LABEL_101:
      *(_QWORD *)&v176 = v73;
      goto LABEL_102;
    }
LABEL_100:
    operator delete(v59);
    goto LABEL_101;
  }
  if (!v61)
    __cxa_bad_cast();
  v62 = v61 + 10;
LABEL_102:
  v159((uint64_t)v158, v62);
  v154[0] = MEMORY[0x1E0C809B0];
  v154[1] = 1174405120;
  v155 = (uint64_t (*)(uint64_t, char *))___ZN5radio16QMICommandDriver18setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_31;
  v156 = &__block_descriptor_tmp_33_7;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v157, (const ctu::cf::dict_adapter *)v174);
  v83 = (char *)*((_QWORD *)&v175 + 1);
  v82 = (char *)v176;
  v84 = (const void **)*((_QWORD *)&v175 + 1);
  if (*((_QWORD *)&v175 + 1) != (_QWORD)v176)
  {
    v84 = (const void **)*((_QWORD *)&v175 + 1);
    while (*((_BYTE *)*v84 + 8) != 20)
    {
      if (++v84 == (const void **)v176)
        goto LABEL_110;
    }
  }
  if (v84 == (const void **)v176)
  {
LABEL_110:
    v87 = operator new(0x10uLL);
    v88 = v87;
    v87[8] = 20;
    *(_QWORD *)v87 = off_1E66E2A00;
    *((_WORD *)v87 + 5) = 0;
    v86 = v87 + 10;
    if ((unint64_t)v82 < *((_QWORD *)&v176 + 1))
    {
      *(_QWORD *)v82 = v87;
      *(_QWORD *)&v176 = v82 + 8;
      goto LABEL_133;
    }
    v89 = v82 - v83;
    v90 = (v82 - v83) >> 3;
    v91 = v90 + 1;
    if ((unint64_t)(v90 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v92 = *((_QWORD *)&v176 + 1) - (_QWORD)v83;
    if ((uint64_t)(*((_QWORD *)&v176 + 1) - (_QWORD)v83) >> 2 > v91)
      v91 = v92 >> 2;
    if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8)
      v93 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v93 = v91;
    if (v93)
    {
      if (v93 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v94 = operator new(8 * v93);
      v95 = &v94[8 * v90];
      v96 = &v94[8 * v93];
      *v95 = v88;
      v97 = (uint64_t)(v95 + 1);
      if (v83 != v82)
      {
LABEL_121:
        if ((unint64_t)(v89 - 8) < 0x58)
          goto LABEL_203;
        if ((unint64_t)(v83 - v94) < 0x20)
          goto LABEL_203;
        v98 = ((unint64_t)(v89 - 8) >> 3) + 1;
        v99 = 8 * (v98 & 0x3FFFFFFFFFFFFFFCLL);
        v100 = &v82[-v99];
        v95 = (_QWORD *)((char *)v95 - v99);
        v101 = &v94[8 * v90 - 16];
        v102 = v82 - 16;
        v103 = v98 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v104 = *(_OWORD *)v102;
          *(v101 - 1) = *((_OWORD *)v102 - 1);
          *v101 = v104;
          v101 -= 2;
          v102 -= 32;
          v103 -= 4;
        }
        while (v103);
        v82 = v100;
        if (v98 != (v98 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_203:
          do
          {
            v105 = *((_QWORD *)v82 - 1);
            v82 -= 8;
            *--v95 = v105;
          }
          while (v82 != v83);
        }
        v83 = (char *)*((_QWORD *)&v175 + 1);
        *((_QWORD *)&v175 + 1) = v95;
        *(_QWORD *)&v176 = v97;
        *((_QWORD *)&v176 + 1) = v96;
        if (!v83)
          goto LABEL_132;
        goto LABEL_131;
      }
    }
    else
    {
      v94 = 0;
      v95 = (_QWORD *)(8 * v90);
      v96 = 0;
      *(_QWORD *)(8 * v90) = v88;
      v97 = 8 * v90 + 8;
      if (v83 != v82)
        goto LABEL_121;
    }
    *((_QWORD *)&v175 + 1) = v95;
    *(_QWORD *)&v176 = v97;
    *((_QWORD *)&v176 + 1) = v96;
    if (!v83)
    {
LABEL_132:
      *(_QWORD *)&v176 = v97;
      goto LABEL_133;
    }
LABEL_131:
    operator delete(v83);
    goto LABEL_132;
  }
  if (!v85)
    __cxa_bad_cast();
  v86 = v85 + 10;
LABEL_133:
  v155((uint64_t)v154, v86);
  v150[0] = MEMORY[0x1E0C809B0];
  v150[1] = 1174405120;
  v151 = (uint64_t (*)(uint64_t, char *))___ZN5radio16QMICommandDriver18setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_34;
  v152 = &__block_descriptor_tmp_36_4;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v153, (const ctu::cf::dict_adapter *)v174);
  v107 = (char *)*((_QWORD *)&v175 + 1);
  v106 = (char *)v176;
  v108 = (const void **)*((_QWORD *)&v175 + 1);
  if (*((_QWORD *)&v175 + 1) != (_QWORD)v176)
  {
    v108 = (const void **)*((_QWORD *)&v175 + 1);
    while (*((_BYTE *)*v108 + 8) != 21)
    {
      if (++v108 == (const void **)v176)
        goto LABEL_141;
    }
  }
  if (v108 == (const void **)v176)
  {
LABEL_141:
    v111 = (char *)operator new(0x10uLL);
    v112 = v111;
    v111[8] = 21;
    *(_QWORD *)v111 = off_1E66E2A50;
    *(_DWORD *)(v111 + 10) = 0;
    v110 = v111 + 10;
    *((_WORD *)v111 + 7) = 0;
    if ((unint64_t)v106 < *((_QWORD *)&v176 + 1))
    {
      *(_QWORD *)v106 = v111;
      *(_QWORD *)&v176 = v106 + 8;
      goto LABEL_164;
    }
    v113 = v106 - v107;
    v114 = (v106 - v107) >> 3;
    v115 = v114 + 1;
    if ((unint64_t)(v114 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v116 = *((_QWORD *)&v176 + 1) - (_QWORD)v107;
    if ((uint64_t)(*((_QWORD *)&v176 + 1) - (_QWORD)v107) >> 2 > v115)
      v115 = v116 >> 2;
    if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFF8)
      v117 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v117 = v115;
    if (v117)
    {
      if (v117 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v118 = operator new(8 * v117);
      v119 = &v118[8 * v114];
      v120 = &v118[8 * v117];
      *v119 = v112;
      v121 = (uint64_t)(v119 + 1);
      if (v107 != v106)
      {
LABEL_152:
        if ((unint64_t)(v113 - 8) < 0x58)
          goto LABEL_204;
        if ((unint64_t)(v107 - v118) < 0x20)
          goto LABEL_204;
        v122 = ((unint64_t)(v113 - 8) >> 3) + 1;
        v123 = 8 * (v122 & 0x3FFFFFFFFFFFFFFCLL);
        v124 = &v106[-v123];
        v119 = (_QWORD *)((char *)v119 - v123);
        v125 = &v118[8 * v114 - 16];
        v126 = v106 - 16;
        v127 = v122 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v128 = *(_OWORD *)v126;
          *(v125 - 1) = *((_OWORD *)v126 - 1);
          *v125 = v128;
          v125 -= 2;
          v126 -= 32;
          v127 -= 4;
        }
        while (v127);
        v106 = v124;
        if (v122 != (v122 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_204:
          do
          {
            v129 = *((_QWORD *)v106 - 1);
            v106 -= 8;
            *--v119 = v129;
          }
          while (v106 != v107);
        }
        v107 = (char *)*((_QWORD *)&v175 + 1);
        *((_QWORD *)&v175 + 1) = v119;
        *(_QWORD *)&v176 = v121;
        *((_QWORD *)&v176 + 1) = v120;
        if (!v107)
          goto LABEL_163;
        goto LABEL_162;
      }
    }
    else
    {
      v118 = 0;
      v119 = (_QWORD *)(8 * v114);
      v120 = 0;
      *(_QWORD *)(8 * v114) = v112;
      v121 = 8 * v114 + 8;
      if (v107 != v106)
        goto LABEL_152;
    }
    *((_QWORD *)&v175 + 1) = v119;
    *(_QWORD *)&v176 = v121;
    *((_QWORD *)&v176 + 1) = v120;
    if (!v107)
    {
LABEL_163:
      *(_QWORD *)&v176 = v121;
      goto LABEL_164;
    }
LABEL_162:
    operator delete(v107);
    goto LABEL_163;
  }
  if (!v109)
    __cxa_bad_cast();
  v110 = v109 + 10;
LABEL_164:
  v151((uint64_t)v150, v110);
  v145 = v138 + 320;
  v146 = QMIServiceMsg::create();
  v147 = 25000;
  v148 = 0;
  v149 = 0;
  v141[0] = MEMORY[0x1E0C809B0];
  v141[1] = 1174405120;
  v141[2] = ___ZN5radio16QMICommandDriver18setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_37;
  v141[3] = &__block_descriptor_tmp_39_2;
  v131 = *(_QWORD *)(a1 + 48);
  v130 = *(std::__shared_weak_count **)(a1 + 56);
  v141[4] = v138;
  v141[5] = v131;
  v142 = v130;
  if (v130)
  {
    p_shared_weak_owners = (unint64_t *)&v130->__shared_weak_owners_;
    do
      v133 = __ldxr(p_shared_weak_owners);
    while (__stxr(v133 + 1, p_shared_weak_owners));
  }
  v134 = *(void **)(a1 + 64);
  if (v134)
    v134 = _Block_copy(v134);
  v135 = *(NSObject **)(a1 + 72);
  v143 = v134;
  object = v135;
  if (v135)
    dispatch_retain(v135);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm18SetFieldTestConfig8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66E2A80;
  aBlock[4] = v141;
  v136 = _Block_copy(aBlock);
  v149 = v136;
  if (v146)
  {
    qmi::Client::send();
    v136 = v149;
  }
  if (v136)
    _Block_release(v136);
  if (object)
    dispatch_release(object);
  if (v143)
    _Block_release(v143);
  if (v142)
    std::__shared_weak_count::__release_weak(v142);
  MEMORY[0x1B5E2EE44](v153);
  MEMORY[0x1B5E2EE44](v157);
  MEMORY[0x1B5E2EE44](v137);
  MEMORY[0x1B5E2EE44](v165);
  MEMORY[0x1B5E2EE44](v139);
  MEMORY[0x1B5E2EE44](v140);
  MEMORY[0x1B5E2EE44](v174);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v175);
}

void sub_1B3D95664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v24);
  if (a21)
    std::__shared_weak_count::__release_weak(a21);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a24);
  MEMORY[0x1B5E2EE44](v26);
  MEMORY[0x1B5E2EE44](v25);
  MEMORY[0x1B5E2EE44](a10);
  MEMORY[0x1B5E2EE44](a11);
  MEMORY[0x1B5E2EE44](a13);
  MEMORY[0x1B5E2EE44](a14);
  MEMORY[0x1B5E2EE44](v27 - 192);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v27 - 176));
  _Unwind_Resume(a1);
}

void sub_1B3D95748()
{
  JUMPOUT(0x1B3D95720);
}

void sub_1B3D95750()
{
  JUMPOUT(0x1B3D95728);
}

uint64_t ___ZN5radio16QMICommandDriver18setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_2(uint64_t a1, _WORD *a2)
{
  ctu::cf::map_adapter *v3;
  uint64_t result;

  v3 = (ctu::cf::map_adapter *)(a1 + 32);
  *a2 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)(a1 + 32), (const __CFString *)*MEMORY[0x1E0DDF988]);
  a2[1] = ctu::cf::map_adapter::getInt(v3, (const __CFString *)*MEMORY[0x1E0DDF998]);
  result = ctu::cf::map_adapter::getInt(v3, (const __CFString *)*MEMORY[0x1E0DDF9A8]);
  a2[2] = result;
  return result;
}

uint64_t ___ZN5radio16QMICommandDriver18setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_22(uint64_t a1, _WORD *a2)
{
  ctu::cf::map_adapter *v3;
  uint64_t result;

  v3 = (ctu::cf::map_adapter *)(a1 + 32);
  *a2 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)(a1 + 32), (const __CFString *)*MEMORY[0x1E0DDF798]);
  a2[1] = ctu::cf::map_adapter::getInt(v3, (const __CFString *)*MEMORY[0x1E0DDF8A0]);
  a2[2] = ctu::cf::map_adapter::getInt(v3, (const __CFString *)*MEMORY[0x1E0DDF900]);
  a2[3] = ctu::cf::map_adapter::getInt(v3, (const __CFString *)*MEMORY[0x1E0DDF780]);
  result = ctu::cf::map_adapter::getInt(v3, (const __CFString *)*MEMORY[0x1E0DDF770]);
  a2[4] = result;
  return result;
}

uint64_t ___ZN5radio16QMICommandDriver18setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_25(uint64_t a1, _WORD *a2)
{
  uint64_t result;

  result = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)(a1 + 32), (const __CFString *)*MEMORY[0x1E0DDF8C8]);
  *a2 = result;
  return result;
}

uint64_t ___ZN5radio16QMICommandDriver18setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_28(uint64_t a1, _WORD *a2)
{
  uint64_t result;

  result = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)(a1 + 32), (const __CFString *)*MEMORY[0x1E0DDF8E0]);
  *a2 = result;
  return result;
}

uint64_t ___ZN5radio16QMICommandDriver18setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_31(uint64_t a1, _WORD *a2)
{
  uint64_t result;

  result = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)(a1 + 32), (const __CFString *)*MEMORY[0x1E0DDF8D8]);
  *a2 = result;
  return result;
}

uint64_t ___ZN5radio16QMICommandDriver18setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_34(uint64_t a1, _WORD *a2)
{
  ctu::cf::map_adapter *v3;
  uint64_t result;

  v3 = (ctu::cf::map_adapter *)(a1 + 32);
  *a2 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)(a1 + 32), (const __CFString *)*MEMORY[0x1E0DDF8A8]);
  a2[1] = ctu::cf::map_adapter::getInt(v3, (const __CFString *)*MEMORY[0x1E0DDF8B8]);
  result = ctu::cf::map_adapter::getInt(v3, (const __CFString *)*MEMORY[0x1E0DDF8C0]);
  a2[2] = result;
  return result;
}

void ___ZN5radio16QMICommandDriver18setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_37(_QWORD *a1, const qmi::ResponseBase *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t (*v8)(uint64_t);
  NSObject *v9;
  const void *v10;
  CFTypeRef v11;
  void *v12;
  NSObject *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  CFTypeRef cf;
  std::__shared_weak_count *v18;
  __int128 block;
  void (*v20)(uint64_t);
  void *v21;
  void *aBlock;
  CFTypeRef v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v18 = v6;
    if (v6)
    {
      v7 = v6;
      if (!a1[5])
      {
LABEL_30:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      radio::QMICommandDriverBase::checkError(v5, a2, "setting field test config", &cf);
      if (cf)
        v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      else
        v8 = 0;
      if (v8 && (v9 = *(NSObject **)(v5 + 40), os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)))
      {
        LODWORD(block) = 136315138;
        *(_QWORD *)((char *)&block + 4) = "setting field test config";
        _os_log_error_impl(&dword_1B3CB3000, v9, OS_LOG_TYPE_ERROR, "Failed %s", (uint8_t *)&block, 0xCu);
        v10 = (const void *)a1[7];
        if (!v10)
          goto LABEL_28;
      }
      else
      {
        v10 = (const void *)a1[7];
        if (!v10)
          goto LABEL_28;
      }
      if (a1[8])
      {
        v11 = cf;
        if (cf && (CFRetain(cf), (v10 = (const void *)a1[7]) == 0))
          v12 = 0;
        else
          v12 = _Block_copy(v10);
        v13 = a1[8];
        *(_QWORD *)&block = MEMORY[0x1E0C809B0];
        *((_QWORD *)&block + 1) = 1174405120;
        v20 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_5;
        v21 = &__block_descriptor_tmp_54_3;
        if (v12)
        {
          aBlock = _Block_copy(v12);
          v23 = v11;
          if (!v11)
            goto LABEL_20;
        }
        else
        {
          aBlock = 0;
          v23 = v11;
          if (!v11)
          {
LABEL_20:
            dispatch_async(v13, &block);
            if (v23)
              CFRelease(v23);
            if (aBlock)
              _Block_release(aBlock);
            if (v12)
              _Block_release(v12);
            if (v11)
              CFRelease(v11);
            goto LABEL_28;
          }
        }
        CFRetain(v11);
        goto LABEL_20;
      }
LABEL_28:
      if (cf)
        CFRelease(cf);
      goto LABEL_30;
    }
  }
}

void sub_1B3D95BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE48c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE64c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(_QWORD *a1, _QWORD *a2)
{
  const void *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  void *v8;
  NSObject *v9;

  v4 = (const void *)a2[5];
  a1[5] = v4;
  if (v4)
    CFRetain(v4);
  v5 = a2[7];
  a1[6] = a2[6];
  a1[7] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = (void *)a2[8];
  if (v8)
    v8 = _Block_copy(v8);
  v9 = a2[9];
  a1[8] = v8;
  a1[9] = v9;
  if (v9)
    dispatch_retain(v9);
}

void __destroy_helper_block_e8_40c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE48c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE64c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;
  const void *v5;

  v2 = a1[9];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[8];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[7];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  v5 = (const void *)a1[5];
  if (v5)
    CFRelease(v5);
}

void radio::QMICommandDriver::sendRFSelfTestReq(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  NSObject *v6;
  const void *v7;
  CFTypeRef v8;
  void *v9;
  void *p_p;
  NSObject *v11;
  std::string v12;
  CFTypeRef cf;
  void *__p;
  __int128 v15;
  __int128 buf;
  void (*v17)(uint64_t);
  void *v18;
  void *aBlock;
  CFTypeRef v20;
  CFTypeRef v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = (char *)operator new(0x28uLL);
  v15 = xmmword_1B3DD0C60;
  strcpy(v5, "Request RF Self Test: not supported!");
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  __p = v5;
  std::string::__init_copy_ctor_external(&v12, v5, 0x24uLL);
  CreateError();
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v12.__r_.__value_.__l.__data_);
    v6 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
LABEL_3:
      v7 = *(const void **)a3;
      if (!*(_QWORD *)a3)
        goto LABEL_29;
LABEL_4:
      if (!*(_QWORD *)(a3 + 8))
        goto LABEL_29;
      v8 = cf;
      if (cf && (CFRetain(cf), (v7 = *(const void **)a3) == 0))
        v9 = 0;
      else
        v9 = _Block_copy(v7);
      v11 = *(NSObject **)(a3 + 8);
      *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
      *((_QWORD *)&buf + 1) = 1174405120;
      v17 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_3;
      v18 = &__block_descriptor_tmp_57_0;
      if (v9)
      {
        aBlock = _Block_copy(v9);
        v20 = v8;
        if (!v8)
          goto LABEL_19;
      }
      else
      {
        aBlock = 0;
        v20 = v8;
        if (!v8)
        {
LABEL_19:
          v21 = 0;
          dispatch_async(v11, &buf);
          if (v21)
            CFRelease(v21);
          if (v20)
            CFRelease(v20);
          if (aBlock)
            _Block_release(aBlock);
          if (v9)
            _Block_release(v9);
          if (v8)
            CFRelease(v8);
          goto LABEL_29;
        }
      }
      CFRetain(v8);
      goto LABEL_19;
    }
  }
  else
  {
    v6 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_3;
  }
  p_p = &__p;
  if (v15 < 0)
    p_p = __p;
  LODWORD(buf) = 136315138;
  *(_QWORD *)((char *)&buf + 4) = p_p;
  _os_log_error_impl(&dword_1B3CB3000, v6, OS_LOG_TYPE_ERROR, "%s: \n", (uint8_t *)&buf, 0xCu);
  v7 = *(const void **)a3;
  if (*(_QWORD *)a3)
    goto LABEL_4;
LABEL_29:
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(v15) < 0)
    operator delete(__p);
}

void sub_1B3D95F14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void radio::QMICommandDriver::getAntennaTxPort(uint64_t a1, uint64_t a2)
{
  char *v4;
  NSObject *v5;
  CFTypeRef v6;
  void *v7;
  void *p_p;
  NSObject *v9;
  std::string v10;
  CFTypeRef cf;
  void *__p;
  __int128 v13;
  __int128 buf;
  void (*v15)(uint64_t);
  void *v16;
  void *aBlock;
  CFTypeRef v18;
  CFTypeRef v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = (char *)operator new(0x28uLL);
  v13 = xmmword_1B3DD0CC0;
  strcpy(v4, "Get antenna tx port: not supported!");
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  __p = v4;
  std::string::__init_copy_ctor_external(&v10, v4, 0x23uLL);
  CreateError();
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v10.__r_.__value_.__l.__data_);
    v5 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
LABEL_3:
      v6 = cf;
      if (!cf)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v5 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      goto LABEL_3;
  }
  p_p = &__p;
  if (v13 < 0)
    p_p = __p;
  LODWORD(buf) = 136315138;
  *(_QWORD *)((char *)&buf + 4) = p_p;
  _os_log_error_impl(&dword_1B3CB3000, v5, OS_LOG_TYPE_ERROR, "%s: \n", (uint8_t *)&buf, 0xCu);
  v6 = cf;
  if (cf)
LABEL_4:
    CFRetain(v6);
LABEL_5:
  if (*(_QWORD *)a2)
    v7 = _Block_copy(*(const void **)a2);
  else
    v7 = 0;
  v9 = *(NSObject **)(a2 + 8);
  *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
  *((_QWORD *)&buf + 1) = 1174405120;
  v15 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_3;
  v16 = &__block_descriptor_tmp_57_0;
  if (!v7)
  {
    aBlock = 0;
    v18 = v6;
    if (!v6)
      goto LABEL_18;
    goto LABEL_17;
  }
  aBlock = _Block_copy(v7);
  v18 = v6;
  if (v6)
LABEL_17:
    CFRetain(v6);
LABEL_18:
  v19 = 0;
  dispatch_async(v9, &buf);
  if (v19)
    CFRelease(v19);
  if (v18)
    CFRelease(v18);
  if (aBlock)
    _Block_release(aBlock);
  if (v7)
    _Block_release(v7);
  if (v6)
    CFRelease(v6);
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(v13) < 0)
    operator delete(__p);
}

void sub_1B3D961AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void radio::QMICommandDriver::setAntennaTxPort(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  NSObject *v6;
  CFTypeRef v7;
  void *v8;
  NSObject *v9;
  std::string __p;
  CFTypeRef cf;
  __int128 buf;
  void (*v13)(uint64_t);
  void *v14;
  void *aBlock;
  CFTypeRef v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = (char *)operator new(0x28uLL);
  strcpy(v5, "Set antenna tx port: not supported!");
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  std::string::__init_copy_ctor_external(&__p, v5, 0x23uLL);
  CreateError();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v6 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
LABEL_3:
      v7 = cf;
      if (!cf)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v6 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_3;
  }
  LODWORD(buf) = 136315138;
  *(_QWORD *)((char *)&buf + 4) = v5;
  _os_log_error_impl(&dword_1B3CB3000, v6, OS_LOG_TYPE_ERROR, "%s: \n", (uint8_t *)&buf, 0xCu);
  v7 = cf;
  if (cf)
LABEL_4:
    CFRetain(v7);
LABEL_5:
  if (*(_QWORD *)a3)
    v8 = _Block_copy(*(const void **)a3);
  else
    v8 = 0;
  v9 = *(NSObject **)(a3 + 8);
  *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
  *((_QWORD *)&buf + 1) = 1174405120;
  v13 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_5;
  v14 = &__block_descriptor_tmp_54_3;
  if (!v8)
  {
    aBlock = 0;
    v16 = v7;
    if (!v7)
      goto LABEL_16;
    goto LABEL_15;
  }
  aBlock = _Block_copy(v8);
  v16 = v7;
  if (v7)
LABEL_15:
    CFRetain(v7);
LABEL_16:
  dispatch_async(v9, &buf);
  if (v16)
    CFRelease(v16);
  if (aBlock)
    _Block_release(aBlock);
  if (v8)
    _Block_release(v8);
  if (v7)
    CFRelease(v7);
  if (cf)
    CFRelease(cf);
  operator delete(v5);
}

void sub_1B3D96410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void radio::QMICommandDriver::setMCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  NSObject *v6;
  CFTypeRef v7;
  void *v8;
  NSObject *v9;
  std::string __p;
  CFTypeRef cf;
  __int128 buf;
  void (*v13)(uint64_t);
  void *v14;
  void *aBlock;
  CFTypeRef v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = (char *)operator new(0x19uLL);
  strcpy(v5, "Set mcc: not supported!");
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  std::string::__init_copy_ctor_external(&__p, v5, 0x17uLL);
  CreateError();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v6 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
LABEL_3:
      v7 = cf;
      if (!cf)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v6 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_3;
  }
  LODWORD(buf) = 136315138;
  *(_QWORD *)((char *)&buf + 4) = v5;
  _os_log_error_impl(&dword_1B3CB3000, v6, OS_LOG_TYPE_ERROR, "%s: \n", (uint8_t *)&buf, 0xCu);
  v7 = cf;
  if (cf)
LABEL_4:
    CFRetain(v7);
LABEL_5:
  if (*(_QWORD *)a3)
    v8 = _Block_copy(*(const void **)a3);
  else
    v8 = 0;
  v9 = *(NSObject **)(a3 + 8);
  *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
  *((_QWORD *)&buf + 1) = 1174405120;
  v13 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_5;
  v14 = &__block_descriptor_tmp_54_3;
  if (!v8)
  {
    aBlock = 0;
    v16 = v7;
    if (!v7)
      goto LABEL_16;
    goto LABEL_15;
  }
  aBlock = _Block_copy(v8);
  v16 = v7;
  if (v7)
LABEL_15:
    CFRetain(v7);
LABEL_16:
  dispatch_async(v9, &buf);
  if (v16)
    CFRelease(v16);
  if (aBlock)
    _Block_release(aBlock);
  if (v8)
    _Block_release(v8);
  if (v7)
    CFRelease(v7);
  if (cf)
    CFRelease(cf);
  operator delete(v5);
}

void sub_1B3D96664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void radio::QMICommandDriver::sendAccessoryInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  NSObject *v6;
  const void *v7;
  CFTypeRef v8;
  void *v9;
  void *p_p;
  NSObject *v11;
  std::string v12;
  CFTypeRef cf;
  void *__p;
  __int128 v15;
  __int128 buf;
  void (*v17)(uint64_t);
  void *v18;
  void *aBlock;
  CFTypeRef v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = (char *)operator new(0x28uLL);
  v15 = xmmword_1B3DD0CC0;
  strcpy(v5, "Send accessory info: not supported!");
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  __p = v5;
  std::string::__init_copy_ctor_external(&v12, v5, 0x23uLL);
  CreateError();
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v12.__r_.__value_.__l.__data_);
    v6 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
LABEL_3:
      v7 = *(const void **)a3;
      if (!*(_QWORD *)a3)
        goto LABEL_27;
LABEL_4:
      if (!*(_QWORD *)(a3 + 8))
        goto LABEL_27;
      v8 = cf;
      if (cf && (CFRetain(cf), (v7 = *(const void **)a3) == 0))
        v9 = 0;
      else
        v9 = _Block_copy(v7);
      v11 = *(NSObject **)(a3 + 8);
      *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
      *((_QWORD *)&buf + 1) = 1174405120;
      v17 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_5;
      v18 = &__block_descriptor_tmp_54_3;
      if (v9)
      {
        aBlock = _Block_copy(v9);
        v20 = v8;
        if (!v8)
          goto LABEL_19;
      }
      else
      {
        aBlock = 0;
        v20 = v8;
        if (!v8)
        {
LABEL_19:
          dispatch_async(v11, &buf);
          if (v20)
            CFRelease(v20);
          if (aBlock)
            _Block_release(aBlock);
          if (v9)
            _Block_release(v9);
          if (v8)
            CFRelease(v8);
          goto LABEL_27;
        }
      }
      CFRetain(v8);
      goto LABEL_19;
    }
  }
  else
  {
    v6 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_3;
  }
  p_p = &__p;
  if (v15 < 0)
    p_p = __p;
  LODWORD(buf) = 136315138;
  *(_QWORD *)((char *)&buf + 4) = p_p;
  _os_log_error_impl(&dword_1B3CB3000, v6, OS_LOG_TYPE_ERROR, "%s: \n", (uint8_t *)&buf, 0xCu);
  v7 = *(const void **)a3;
  if (*(_QWORD *)a3)
    goto LABEL_4;
LABEL_27:
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(v15) < 0)
    operator delete(__p);
}

void sub_1B3D968F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void radio::QMICommandDriver::getRFFEScanData(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;
  const char *p_p;
  xpc_object_t v7;
  xpc_object_t v8;
  void *v9;
  NSObject *v10;
  void *__p;
  __int128 v12;
  __int128 block;
  void (*v14)(uint64_t);
  void *v15;
  void *aBlock;
  xpc_object_t v17;
  xpc_object_t object;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = operator new(0x28uLL);
  __p = v4;
  v12 = xmmword_1B3DCFE50;
  strcpy((char *)v4, "Get RFFE Scan Data: not supported!");
  v5 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(block) = 136315138;
    *(_QWORD *)((char *)&block + 4) = v4;
    _os_log_debug_impl(&dword_1B3CB3000, v5, OS_LOG_TYPE_DEBUG, "#D %s: \n", (uint8_t *)&block, 0xCu);
    if (!*(_QWORD *)a2)
      goto LABEL_24;
  }
  else if (!*(_QWORD *)a2)
  {
    goto LABEL_24;
  }
  if (!*(_QWORD *)(a2 + 8))
    goto LABEL_24;
  if (v12 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  v7 = xpc_string_create(p_p);
  if (!v7)
    v7 = xpc_null_create();
  v8 = xpc_null_create();
  if (*(_QWORD *)a2)
    v9 = _Block_copy(*(const void **)a2);
  else
    v9 = 0;
  v10 = *(NSObject **)(a2 + 8);
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  v14 = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke_1;
  v15 = &__block_descriptor_tmp_58_2;
  if (v9)
  {
    aBlock = _Block_copy(v9);
    v17 = v7;
    if (v7)
      goto LABEL_14;
LABEL_17:
    v17 = xpc_null_create();
    object = v8;
    if (v8)
      goto LABEL_15;
LABEL_18:
    object = xpc_null_create();
    goto LABEL_19;
  }
  aBlock = 0;
  v17 = v7;
  if (!v7)
    goto LABEL_17;
LABEL_14:
  xpc_retain(v7);
  object = v8;
  if (!v8)
    goto LABEL_18;
LABEL_15:
  xpc_retain(v8);
LABEL_19:
  dispatch_async(v10, &block);
  xpc_release(object);
  object = 0;
  xpc_release(v17);
  v17 = 0;
  if (aBlock)
    _Block_release(aBlock);
  if (v9)
    _Block_release(v9);
  xpc_release(v8);
  xpc_release(v7);
LABEL_24:
  if (SHIBYTE(v12) < 0)
    operator delete(__p);
}

void sub_1B3D96B70(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void radio::QMICommandDriver::getResetProperties(uint64_t a1, uint64_t a2)
{
  char *v4;
  NSObject *v5;
  const void *v6;
  CFTypeRef v7;
  void *v8;
  void *p_p;
  NSObject *v10;
  std::string v11;
  CFTypeRef cf;
  void *__p;
  __int128 v14;
  __int128 buf;
  void (*v16)(uint64_t);
  void *v17;
  void *aBlock;
  CFTypeRef v19;
  CFTypeRef v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = (char *)operator new(0x28uLL);
  v14 = xmmword_1B3DD0C60;
  strcpy(v4, "Get reset properties: not supported!");
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  __p = v4;
  std::string::__init_copy_ctor_external(&v11, v4, 0x24uLL);
  CreateError();
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v11.__r_.__value_.__l.__data_);
    v5 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
LABEL_3:
      v6 = *(const void **)a2;
      if (!*(_QWORD *)a2)
        goto LABEL_29;
LABEL_4:
      if (!*(_QWORD *)(a2 + 8))
        goto LABEL_29;
      v7 = cf;
      if (cf && (CFRetain(cf), (v6 = *(const void **)a2) == 0))
        v8 = 0;
      else
        v8 = _Block_copy(v6);
      v10 = *(NSObject **)(a2 + 8);
      *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
      *((_QWORD *)&buf + 1) = 1174405120;
      v16 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_3;
      v17 = &__block_descriptor_tmp_57_0;
      if (v8)
      {
        aBlock = _Block_copy(v8);
        v19 = v7;
        if (!v7)
          goto LABEL_19;
      }
      else
      {
        aBlock = 0;
        v19 = v7;
        if (!v7)
        {
LABEL_19:
          v20 = 0;
          dispatch_async(v10, &buf);
          if (v20)
            CFRelease(v20);
          if (v19)
            CFRelease(v19);
          if (aBlock)
            _Block_release(aBlock);
          if (v8)
            _Block_release(v8);
          if (v7)
            CFRelease(v7);
          goto LABEL_29;
        }
      }
      CFRetain(v7);
      goto LABEL_19;
    }
  }
  else
  {
    v5 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      goto LABEL_3;
  }
  p_p = &__p;
  if (v14 < 0)
    p_p = __p;
  LODWORD(buf) = 136315138;
  *(_QWORD *)((char *)&buf + 4) = p_p;
  _os_log_error_impl(&dword_1B3CB3000, v5, OS_LOG_TYPE_ERROR, "%s: \n", (uint8_t *)&buf, 0xCu);
  v6 = *(const void **)a2;
  if (*(_QWORD *)a2)
    goto LABEL_4;
LABEL_29:
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(v14) < 0)
    operator delete(__p);
}

void sub_1B3D96E18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void radio::QMICommandDriver::sendBatteryInfoUpdate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v6;
  NSObject *v7;
  const void *v8;
  CFTypeRef v9;
  void *v10;
  void *p_p;
  NSObject *v12;
  std::string v13;
  CFTypeRef cf;
  void *__p;
  __int128 v16;
  __int128 buf;
  void (*v18)(uint64_t);
  void *v19;
  void *aBlock;
  CFTypeRef v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v6 = (char *)operator new(0x30uLL);
  v16 = xmmword_1B3DD3440;
  strcpy(v6, "Send battery info update: not supported!");
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  __p = v6;
  std::string::__init_copy_ctor_external(&v13, v6, 0x28uLL);
  CreateError();
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v13.__r_.__value_.__l.__data_);
    v7 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
LABEL_3:
      v8 = *(const void **)a4;
      if (!*(_QWORD *)a4)
        goto LABEL_27;
LABEL_4:
      if (!*(_QWORD *)(a4 + 8))
        goto LABEL_27;
      v9 = cf;
      if (cf && (CFRetain(cf), (v8 = *(const void **)a4) == 0))
        v10 = 0;
      else
        v10 = _Block_copy(v8);
      v12 = *(NSObject **)(a4 + 8);
      *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
      *((_QWORD *)&buf + 1) = 1174405120;
      v18 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_5;
      v19 = &__block_descriptor_tmp_54_3;
      if (v10)
      {
        aBlock = _Block_copy(v10);
        v21 = v9;
        if (!v9)
          goto LABEL_19;
      }
      else
      {
        aBlock = 0;
        v21 = v9;
        if (!v9)
        {
LABEL_19:
          dispatch_async(v12, &buf);
          if (v21)
            CFRelease(v21);
          if (aBlock)
            _Block_release(aBlock);
          if (v10)
            _Block_release(v10);
          if (v9)
            CFRelease(v9);
          goto LABEL_27;
        }
      }
      CFRetain(v9);
      goto LABEL_19;
    }
  }
  else
  {
    v7 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      goto LABEL_3;
  }
  p_p = &__p;
  if (v16 < 0)
    p_p = __p;
  LODWORD(buf) = 136315138;
  *(_QWORD *)((char *)&buf + 4) = p_p;
  _os_log_error_impl(&dword_1B3CB3000, v7, OS_LOG_TYPE_ERROR, "%s: \n", (uint8_t *)&buf, 0xCu);
  v8 = *(const void **)a4;
  if (*(_QWORD *)a4)
    goto LABEL_4;
LABEL_27:
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(v16) < 0)
    operator delete(__p);
}

void sub_1B3D970AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void radio::QMICommandDriver::enableResetSPMIEvent(radio::QMICommandDriver *this)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v2 = 0;
    _os_log_error_impl(&dword_1B3CB3000, v1, OS_LOG_TYPE_ERROR, "Enable resetting SPMI: not supported!", v2, 2u);
  }
}

void std::__shared_ptr_pointer<radio::QMICommandDriver *,std::shared_ptr<radio::QMICommandDriver> ctu::SharedSynchronizable<radio::CommandDriver>::make_shared_ptr<radio::QMICommandDriver>(radio::QMICommandDriver*)::{lambda(radio::QMICommandDriver *)#1},std::allocator<radio::QMICommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<radio::QMICommandDriver *,std::shared_ptr<radio::QMICommandDriver> ctu::SharedSynchronizable<radio::CommandDriver>::make_shared_ptr<radio::QMICommandDriver>(radio::QMICommandDriver*)::{lambda(radio::QMICommandDriver *)#1},std::allocator<radio::QMICommandDriver>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<radio::QMICommandDriver> ctu::SharedSynchronizable<radio::CommandDriver>::make_shared_ptr<radio::QMICommandDriver>(radio::QMICommandDriver*)::{lambda(radio::QMICommandDriver*)#1}::operator() const(radio::QMICommandDriver*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<radio::QMICommandDriver *,std::shared_ptr<radio::QMICommandDriver> ctu::SharedSynchronizable<radio::CommandDriver>::make_shared_ptr<radio::QMICommandDriver>(radio::QMICommandDriver*)::{lambda(radio::QMICommandDriver *)#1},std::allocator<radio::QMICommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN5radio13CommandDriverEE15make_shared_ptrINS1_16QMICommandDriverEEENSt"
                     "3__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN5radio13CommandDriverEE15make_shared_ptrINS1_16QMICommandD"
                                "riverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN5radio13CommandDriverEE15make_shared_ptrINS1_16QMICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN5radio13CommandDriverEE15make_shared_ptrINS1_16QMICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<radio::QMICommandDriver> ctu::SharedSynchronizable<radio::CommandDriver>::make_shared_ptr<radio::QMICommandDriver>(radio::QMICommandDriver*)::{lambda(radio::QMICommandDriver*)#1}::operator() const(radio::QMICommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm13GetWakeReason8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  cast_message_type<bsp::abm::GetWakeReason::Response const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1B3D97274(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm18GetFieldTestConfig8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D97348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D9735C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D97388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_5(uint64_t a1)
{
  const void *v1;
  uint64_t v2;
  CFTypeRef cf;

  v2 = *(_QWORD *)(a1 + 32);
  v1 = *(const void **)(a1 + 40);
  cf = v1;
  if (v1)
    CFRetain(v1);
  (*(void (**)(uint64_t, CFTypeRef *))(v2 + 16))(v2, &cf);
  if (cf)
    CFRelease(cf);
}

void sub_1B3D973F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::RxDiversityConfig>::getSize()
{
  return 9;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::RxDiversityConfig>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *(_WORD *)(v3 + 5) = *(_WORD *)(result + 12);
  *(_WORD *)(v3 + 7) = *(_WORD *)(result + 14);
  *a2 = v3 + 9;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 6;
  return result;
}

char *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::RxDiversityConfig>::clone(uint64_t a1)
{
  char *result;

  result = (char *)operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66E2910;
  *(_DWORD *)(result + 10) = *(_DWORD *)(a1 + 10);
  *((_WORD *)result + 7) = *(_WORD *)(a1 + 14);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ARTDConfig>::getSize()
{
  return 13;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ARTDConfig>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *(_WORD *)(v3 + 5) = *(_WORD *)(result + 12);
  *(_WORD *)(v3 + 7) = *(_WORD *)(result + 14);
  *(_WORD *)(v3 + 9) = *(_WORD *)(result + 16);
  *(_WORD *)(v3 + 11) = *(_WORD *)(result + 18);
  *a2 = v3 + 13;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 10;
  return result;
}

char *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ARTDConfig>::clone(uint64_t a1)
{
  char *result;

  result = (char *)operator new(0x18uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66E2960;
  *(_QWORD *)(result + 10) = *(_QWORD *)(a1 + 10);
  *((_WORD *)result + 9) = *(_WORD *)(a1 + 18);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::UARFCNLockConfig>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::UARFCNLockConfig>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::UARFCNLockConfig>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66E29B0;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::EARFCNLockConfig>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::EARFCNLockConfig>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::EARFCNLockConfig>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66E2A00;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::CarrierAgreggationConfig>::getSize()
{
  return 9;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::CarrierAgreggationConfig>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *(_WORD *)(v3 + 5) = *(_WORD *)(result + 12);
  *(_WORD *)(v3 + 7) = *(_WORD *)(result + 14);
  *a2 = v3 + 9;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 6;
  return result;
}

char *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::CarrierAgreggationConfig>::clone(uint64_t a1)
{
  char *result;

  result = (char *)operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66E2A50;
  *(_DWORD *)(result + 10) = *(_DWORD *)(a1 + 10);
  *((_WORD *)result + 7) = *(_WORD *)(a1 + 14);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm18SetFieldTestConfig8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D9777C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D97790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D977BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_3(uint64_t a1)
{
  dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::operator()<ctu::cf::CFSharedRef<__CFError> const&,ctu::cf::CFSharedRef<__CFDictionary const> const&>((uint64_t *)(a1 + 32), (const void **)(a1 + 40), (const void **)(a1 + 48));
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke_1(uint64_t a1)
{
  dispatch::block<void({block_pointer})(xpc::object,xpc::object)>::operator()<xpc::object const&,xpc::object const&>((uint64_t *)(a1 + 32), (void **)(a1 + 40), (void **)(a1 + 48));
}

char *apps::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, _DWORD *a3)
{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned __int8 *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned __int8 *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

_BYTE *apps::tlv::abm::writeField(_BYTE *a1, _DWORD *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

uint64_t apps::tlv::abm::getFieldSize()
{
  return 1;
}

{
  return 1;
}

{
  return 4;
}

{
  return 1;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

uint64_t tlv::parseV<apps::tlv::abm::WakeReason>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3D97878(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<apps::tlv::abm::WakeReason>()
{
  return 4;
}

_BYTE **tlv::writeV<apps::tlv::abm::WakeReason>(_BYTE **result, _DWORD *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<apps::tlv::abm::ChannelID>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3D97930(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<apps::tlv::abm::ChannelID>()
{
  return 4;
}

_BYTE **tlv::writeV<apps::tlv::abm::ChannelID>(_BYTE **result, _DWORD *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

_DWORD *apps::tlv::abm::writeField(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

uint64_t tlv::parseV<apps::tlv::abm::WakeBufferLength>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3D979E8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<apps::tlv::abm::WakeBufferLength>()
{
  return 7;
}

_DWORD **tlv::writeV<apps::tlv::abm::WakeBufferLength>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

char *apps::tlv::abm::parseField(char *__src, char *a2, _QWORD *a3)
{
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, __src, a2, a2 - __src);
  return a2;
}

{
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, __src, a2, a2 - __src);
  return a2;
}

char *apps::tlv::abm::writeField(char *a1, uint64_t a2)
{
  memcpy(a1, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  return &a1[*(_QWORD *)(a2 + 8) - *(_QWORD *)a2];
}

{
  memcpy(a1, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  return &a1[*(_QWORD *)(a2 + 8) - *(_QWORD *)a2];
}

uint64_t apps::tlv::abm::getFieldSize(_QWORD *a1)
{
  return a1[1] - *a1;
}

{
  return a1[1] - *a1;
}

_QWORD *tlv::parseV<apps::tlv::abm::WakeBuffer>@<X0>(char **a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  char *v4;
  _QWORD *result;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = &(*a1)[a2];
  result = std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, *a1, v4, a2);
  *a1 = v4;
  return result;
}

void sub_1B3D97AEC(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3D97ADCLL);
}

void sub_1B3D97AFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<apps::tlv::abm::WakeBuffer>(_QWORD *a1)
{
  return a1[1] - *a1 + 3;
}

void *tlv::writeV<apps::tlv::abm::WakeBuffer>(void **a1, uint64_t a2)
{
  char *v4;
  void *result;

  v4 = (char *)*a1;
  result = memcpy(*a1, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  *a1 = &v4[*(_QWORD *)(a2 + 8) - *(_QWORD *)a2];
  return result;
}

char *apps::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, _BYTE *a3)
{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  return (char *)a1 + 1;
}

_BYTE *apps::tlv::abm::writeField(_BYTE *a1, _BYTE *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

uint64_t tlv::parseV<apps::tlv::abm::Level>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3D97BF8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<apps::tlv::abm::Level>()
{
  return 4;
}

_BYTE **tlv::writeV<apps::tlv::abm::Level>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t apps::tlv::abm::parseField(apps::tlv::abm *this, const unsigned __int8 *a2, unsigned __int8 *a3, Size *a4)
{
  tlv::throwIfNotEnoughBytes(this, a2, (const unsigned __int8 *)2);
  *(_WORD *)a3 = *(_WORD *)this;
  return (uint64_t)this + 2;
}

uint64_t apps::tlv::abm::writeField(apps::tlv::abm *this, unsigned __int8 *a2, const Size *a3)
{
  *(_WORD *)this = *(_WORD *)a2;
  return (uint64_t)this + 2;
}

uint64_t apps::tlv::abm::getFieldSize(apps::tlv::abm *this, const Size *a2)
{
  return 2;
}

uint64_t tlv::parseV<apps::tlv::abm::Size>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B3D97CB0(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<apps::tlv::abm::Size>()
{
  return 5;
}

_WORD **tlv::writeV<apps::tlv::abm::Size>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

_QWORD *tlv::parseV<apps::tlv::abm::LogData>@<X0>(char **a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  char *v4;
  _QWORD *result;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = &(*a1)[a2];
  result = std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, *a1, v4, a2);
  *a1 = v4;
  return result;
}

void sub_1B3D97DB4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3D97DA4);
}

void sub_1B3D97DC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<apps::tlv::abm::LogData>(_QWORD *a1)
{
  return a1[1] - *a1 + 3;
}

void *tlv::writeV<apps::tlv::abm::LogData>(void **a1, uint64_t a2)
{
  char *v4;
  void *result;

  v4 = (char *)*a1;
  result = memcpy(*a1, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  *a1 = &v4[*(_QWORD *)(a2 + 8) - *(_QWORD *)a2];
  return result;
}

uint64_t tlv::parseV<apps::tlv::abm::length>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3D97EC0(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<apps::tlv::abm::length>()
{
  return 7;
}

_DWORD **tlv::writeV<apps::tlv::abm::length>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<apps::tlv::abm::blockSize>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3D97F78(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<apps::tlv::abm::blockSize>()
{
  return 7;
}

_DWORD **tlv::writeV<apps::tlv::abm::blockSize>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<apps::tlv::abm::MHIBufferSize>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3D98030(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<apps::tlv::abm::MHIBufferSize>()
{
  return 7;
}

_DWORD **tlv::writeV<apps::tlv::abm::MHIBufferSize>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<apps::tlv::abm::PCIeBufferSize>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3D980E8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<apps::tlv::abm::PCIeBufferSize>()
{
  return 7;
}

_DWORD **tlv::writeV<apps::tlv::abm::PCIeBufferSize>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<apps::tlv::abm::IPABufferSize>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3D981A0(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<apps::tlv::abm::IPABufferSize>()
{
  return 7;
}

_DWORD **tlv::writeV<apps::tlv::abm::IPABufferSize>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

char *mfse::parseField(tlv *a1, const unsigned __int8 *a2, _DWORD *a3)
{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

_DWORD *mfse::writeField(_DWORD *a1, int a2)
{
  *a1 = a2;
  return a1 + 1;
}

{
  *a1 = a2;
  return a1 + 1;
}

uint64_t mfse::getFieldSize()
{
  return 4;
}

{
  return 4;
}

char *mfse::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, _DWORD *a3)
{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

_DWORD *mfse::tlv::abm::writeField(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

uint64_t mfse::tlv::abm::getFieldSize()
{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 1;
}

uint64_t tlv::parseV<mfse::tlv::abm::FileSystem>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3D982E0(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<mfse::tlv::abm::FileSystem>()
{
  return 7;
}

_DWORD **tlv::writeV<mfse::tlv::abm::FileSystem>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<mfse::tlv::abm::Token>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3D98398(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<mfse::tlv::abm::Token>()
{
  return 7;
}

_DWORD **tlv::writeV<mfse::tlv::abm::Token>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<mfse::tlv::abm::ErrorNumber>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3D98450(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<mfse::tlv::abm::ErrorNumber>()
{
  return 7;
}

_DWORD **tlv::writeV<mfse::tlv::abm::ErrorNumber>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

char *mfse::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, BOOL *a3)
{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1 != 0;
  return (char *)a1 + 1;
}

_BYTE *mfse::tlv::abm::writeField(_BYTE *a1, _BYTE *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

BOOL tlv::parseV<mfse::tlv::abm::ResetAfterSync>(tlv **a1, int a2)
{
  tlv *v3;
  _BOOL8 result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3D98518(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<mfse::tlv::abm::ResetAfterSync>()
{
  return 4;
}

_BYTE **tlv::writeV<mfse::tlv::abm::ResetAfterSync>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

char *bsp::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, _BYTE *a3)
{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  return (char *)a1 + 1;
}

_BYTE *bsp::tlv::abm::writeField(_BYTE *a1, _BYTE *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  a1[11] = a2[11];
  return a1 + 12;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

uint64_t bsp::tlv::abm::getFieldSize()
{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 4;
}

{
  return 80;
}

{
  return 131;
}

{
  return 2;
}

{
  return 131;
}

{
  return 2;
}

{
  return 13;
}

{
  return 4;
}

{
  return 8;
}

{
  return 16;
}

{
  return 2;
}

{
  return 12;
}

{
  return 4;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 4;
}

{
  return 8;
}

{
  return 8;
}

{
  return 8;
}

{
  return 16;
}

{
  return 1;
}

{
  return 13;
}

{
  return 1;
}

{
  return 1;
}

{
  return 8;
}

{
  return 2;
}

{
  return 2;
}

{
  return 8;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 4;
}

{
  return 4;
}

{
  return 1;
}

{
  return 2;
}

{
  return 4;
}

{
  return 1;
}

{
  return 1;
}

{
  return 4;
}

{
  return 20;
}

{
  return 2;
}

{
  return 10;
}

{
  return 14;
}

{
  return 22;
}

{
  return 6;
}

{
  return 1;
}

{
  return 1;
}

{
  return 4;
}

{
  return 1;
}

{
  return 1;
}

{
  return 6;
}

{
  return 10;
}

{
  return 2;
}

{
  return 2;
}

{
  return 6;
}

{
  return 6;
}

{
  return 14;
}

{
  return 22;
}

{
  return 2;
}

{
  return 28;
}

{
  return 46;
}

{
  return 12;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 2;
}

{
  return 2;
}

{
  return 4;
}

{
  return 1;
}

{
  return 1;
}

{
  return 4;
}

{
  return 1;
}

{
  return 2;
}

{
  return 2;
}

{
  return 2;
}

{
  return 2;
}

{
  return 4;
}

{
  return 2;
}

{
  return 4;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 2;
}

{
  return 2;
}

{
  return 2;
}

{
  return 2;
}

{
  return 2;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 4;
}

{
  return 1;
}

{
  return 4;
}

{
  return 1;
}

{
  return 1;
}

{
  return 2;
}

{
  return 2;
}

{
  return 2;
}

{
  return 2;
}

{
  return 2;
}

{
  return 2;
}

{
  return 2;
}

{
  return 2;
}

{
  return 4;
}

{
  return 4;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 2;
}

{
  return 2;
}

{
  return 5;
}

{
  return 5;
}

{
  return 5;
}

{
  return 2;
}

{
  return 1;
}

{
  return 4;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

uint64_t tlv::parseV<bsp::tlv::abm::LogCollectionType>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3D985D0(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::LogCollectionType>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::LogCollectionType>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

char *bsp::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, BOOL *a3)
{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1 != 0;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1 != 0;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1 != 0;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1 != 0;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1 != 0;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1 != 0;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1 != 0;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1 != 0;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1 != 0;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1 != 0;
  return (char *)a1 + 1;
}

BOOL tlv::parseV<bsp::tlv::abm::LogCollectionState>(tlv **a1, int a2)
{
  tlv *v3;
  _BOOL8 result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3D98698(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::LogCollectionState>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::LogCollectionState>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

char *bsp::tlv::abm::parseField(char *__src, char *a2, _QWORD *a3)
{
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, __src, a2, a2 - __src);
  return a2;
}

{
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, __src, a2, a2 - __src);
  return a2;
}

{
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, __src, a2, a2 - __src);
  return a2;
}

{
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, __src, a2, a2 - __src);
  return a2;
}

{
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, __src, a2, a2 - __src);
  return a2;
}

{
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, __src, a2, a2 - __src);
  return a2;
}

{
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, __src, a2, a2 - __src);
  return a2;
}

{
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, __src, a2, a2 - __src);
  return a2;
}

{
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, __src, a2, a2 - __src);
  return a2;
}

{
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, __src, a2, a2 - __src);
  return a2;
}

{
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, __src, a2, a2 - __src);
  return a2;
}

{
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, __src, a2, a2 - __src);
  return a2;
}

{
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, __src, a2, a2 - __src);
  return a2;
}

char *bsp::tlv::abm::writeField(char *a1, uint64_t a2)
{
  memcpy(a1, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  return &a1[*(_QWORD *)(a2 + 8) - *(_QWORD *)a2];
}

{
  memcpy(a1, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  return &a1[*(_QWORD *)(a2 + 8) - *(_QWORD *)a2];
}

{
  memcpy(a1, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  return &a1[*(_QWORD *)(a2 + 8) - *(_QWORD *)a2];
}

{
  memcpy(a1, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  return &a1[*(_QWORD *)(a2 + 8) - *(_QWORD *)a2];
}

{
  memcpy(a1, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  return &a1[*(_QWORD *)(a2 + 8) - *(_QWORD *)a2];
}

{
  memcpy(a1, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  return &a1[*(_QWORD *)(a2 + 8) - *(_QWORD *)a2];
}

{
  memcpy(a1, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  return &a1[*(_QWORD *)(a2 + 8) - *(_QWORD *)a2];
}

{
  memcpy(a1, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  return &a1[*(_QWORD *)(a2 + 8) - *(_QWORD *)a2];
}

{
  memcpy(a1, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  return &a1[*(_QWORD *)(a2 + 8) - *(_QWORD *)a2];
}

{
  memcpy(a1, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  return &a1[*(_QWORD *)(a2 + 8) - *(_QWORD *)a2];
}

{
  memcpy(a1, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  return &a1[*(_QWORD *)(a2 + 8) - *(_QWORD *)a2];
}

{
  memcpy(a1, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  return &a1[*(_QWORD *)(a2 + 8) - *(_QWORD *)a2];
}

{
  memcpy(a1, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  return &a1[*(_QWORD *)(a2 + 8) - *(_QWORD *)a2];
}

uint64_t bsp::tlv::abm::getFieldSize(_QWORD *a1)
{
  return a1[1] - *a1;
}

{
  return a1[1] - *a1;
}

{
  return a1[1] - *a1;
}

{
  return a1[1] - *a1;
}

{
  return a1[1] - *a1;
}

{
  return a1[1] - *a1;
}

{
  return a1[1] - *a1 + 2;
}

{
  return a1[1] - *a1 + 2;
}

{
  return a1[1] - *a1;
}

{
  return a1[1] - *a1;
}

{
  return a1[1] - *a1;
}

{
  return a1[1] - *a1;
}

{
  return a1[1] - *a1;
}

{
  return a1[1] - *a1;
}

{
  return a1[1] - *a1;
}

{
  uint64_t v1;

  v1 = a1[1];
  if (v1 == *a1)
    return 1;
  else
    return (v1 - *a1) | 1;
}

_QWORD *tlv::parseV<bsp::tlv::abm::LogDataBuff>@<X0>(char **a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  char *v4;
  _QWORD *result;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = &(*a1)[a2];
  result = std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, *a1, v4, a2);
  *a1 = v4;
  return result;
}

void sub_1B3D9879C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3D9878CLL);
}

void sub_1B3D987AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<bsp::tlv::abm::LogDataBuff>(_QWORD *a1)
{
  return a1[1] - *a1 + 3;
}

void *tlv::writeV<bsp::tlv::abm::LogDataBuff>(void **a1, uint64_t a2)
{
  char *v4;
  void *result;

  v4 = (char *)*a1;
  result = memcpy(*a1, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  *a1 = &v4[*(_QWORD *)(a2 + 8) - *(_QWORD *)a2];
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::EndOfLog>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3D988A8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::EndOfLog>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::EndOfLog>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

char *ssctl::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, void **a3)
{
  tlv *v5;
  unsigned int v6;

  v5 = a1;
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  v6 = *(unsigned __int8 *)v5;
  v5 = (tlv *)((char *)v5 + 1);
  tlv::throwIfNotEnoughBytes(v5, a2, (const unsigned __int8 *)v6);
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, (uint64_t)v5, (char *)v5 + v6, v6);
  return (char *)v5 + v6;
}

{
  tlv *v5;
  unsigned int v6;

  v5 = a1;
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  v6 = *(unsigned __int16 *)v5;
  v5 = (tlv *)((char *)v5 + 2);
  tlv::throwIfNotEnoughBytes(v5, a2, (const unsigned __int8 *)v6);
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, (uint64_t)v5, (char *)v5 + v6, v6);
  return (char *)v5 + v6;
}

_BYTE *ssctl::tlv::abm::writeField(_BYTE *a1, _BYTE *a2)
{
  _BYTE *v2;
  uint64_t v3;
  _BYTE *v4;
  size_t v5;
  size_t v6;
  uint64_t v7;

  v2 = a2;
  LOBYTE(v3) = a2[23];
  if ((v3 & 0x80u) != 0)
    v3 = *((_QWORD *)a2 + 1);
  *a1 = v3;
  v4 = a1 + 1;
  v5 = *((_QWORD *)a2 + 1);
  if ((char)a2[23] >= 0)
  {
    v6 = a2[23];
  }
  else
  {
    a2 = *(_BYTE **)a2;
    v6 = v5;
  }
  memcpy(a1 + 1, a2, v6);
  v7 = v2[23];
  if ((v7 & 0x80u) != 0)
    v7 = *((_QWORD *)v2 + 1);
  return &v4[v7];
}

uint64_t ssctl::tlv::abm::getFieldSize(uint64_t a1)
{
  uint64_t v1;

  v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0)
    v1 = *(_QWORD *)(a1 + 8);
  return v1 + 1;
}

{
  uint64_t v1;

  v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0)
    v1 = *(_QWORD *)(a1 + 8);
  return v1 + 2;
}

void tlv::parseV<ssctl::tlv::abm::ErrorMessage>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  tlv *v5;
  const unsigned __int8 *v6;
  unsigned int v7;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  v7 = *(unsigned __int8 *)v5;
  v5 = (tlv *)((char *)v5 + 1);
  tlv::throwIfNotEnoughBytes(v5, v6, (const unsigned __int8 *)v7);
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>((void **)a3, (uint64_t)v5, (char *)v5 + v7, v7);
  *a1 = (tlv *)((char *)v5 + v7);
}

void sub_1B3D98A50(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3D98A3CLL);
}

void sub_1B3D98A60(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<ssctl::tlv::abm::ErrorMessage>(uint64_t a1)
{
  uint64_t v1;

  v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0)
    v1 = *(_QWORD *)(a1 + 8);
  return v1 + 4;
}

void *tlv::writeV<ssctl::tlv::abm::ErrorMessage>(_BYTE **a1, _BYTE *a2)
{
  _BYTE *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  size_t v7;
  size_t v8;
  void *result;
  uint64_t v10;

  v2 = a2;
  v4 = *a1;
  LOBYTE(v5) = a2[23];
  if ((v5 & 0x80u) != 0)
    v5 = *((_QWORD *)a2 + 1);
  *v4 = v5;
  v6 = v4 + 1;
  v7 = *((_QWORD *)a2 + 1);
  if ((char)a2[23] >= 0)
  {
    v8 = a2[23];
  }
  else
  {
    a2 = *(_BYTE **)a2;
    v8 = v7;
  }
  result = memcpy(v6, a2, v8);
  v10 = v2[23];
  if ((v10 & 0x80u) != 0)
    v10 = *((_QWORD *)v2 + 1);
  *a1 = &v6[v10];
  return result;
}

char *ssctl::tlv::abm::writeField(_WORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _WORD *v4;
  size_t v5;
  size_t v6;
  uint64_t v7;

  v2 = a2;
  LOWORD(v3) = *((unsigned __int8 *)a2 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = a2[1];
  *a1 = v3;
  v4 = a1 + 1;
  v5 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    v6 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (_QWORD *)*a2;
    v6 = v5;
  }
  memcpy(a1 + 1, a2, v6);
  v7 = *((unsigned __int8 *)v2 + 23);
  if ((v7 & 0x80u) != 0)
    v7 = v2[1];
  return (char *)v4 + v7;
}

void tlv::parseV<ssctl::tlv::abm::ExtendedErrorMessage>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  tlv *v5;
  const unsigned __int8 *v6;
  unsigned int v7;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)2);
  v7 = *(unsigned __int16 *)v5;
  v5 = (tlv *)((char *)v5 + 2);
  tlv::throwIfNotEnoughBytes(v5, v6, (const unsigned __int8 *)v7);
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>((void **)a3, (uint64_t)v5, (char *)v5 + v7, v7);
  *a1 = (tlv *)((char *)v5 + v7);
}

void sub_1B3D98C88(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3D98C74);
}

void sub_1B3D98C98(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<ssctl::tlv::abm::ExtendedErrorMessage>(uint64_t a1)
{
  uint64_t v1;

  v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0)
    v1 = *(_QWORD *)(a1 + 8);
  return v1 + 5;
}

void *tlv::writeV<ssctl::tlv::abm::ExtendedErrorMessage>(_WORD **a1, _QWORD *a2)
{
  _QWORD *v2;
  _WORD *v4;
  uint64_t v5;
  char *v6;
  size_t v7;
  size_t v8;
  void *result;
  uint64_t v10;

  v2 = a2;
  v4 = *a1;
  LOWORD(v5) = *((unsigned __int8 *)a2 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = a2[1];
  *v4 = v5;
  v6 = (char *)(v4 + 1);
  v7 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    v8 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (_QWORD *)*a2;
    v8 = v7;
  }
  result = memcpy(v6, a2, v8);
  v10 = *((unsigned __int8 *)v2 + 23);
  if ((v10 & 0x80u) != 0)
    v10 = v2[1];
  *a1 = &v6[v10];
  return result;
}

tlv *ssctl::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, uint64_t a3)
{
  tlv *v3;
  _QWORD *v6;
  void **v7;
  tlv *v8;
  unsigned int v9;
  tlv *v10;
  _QWORD *v11;

  v3 = a1;
  if (a1 >= (tlv *)a2)
    return a1;
  do
  {
    v11 = *(_QWORD **)(a3 + 8);
    if ((unint64_t)v11 >= *(_QWORD *)(a3 + 16))
    {
      v6 = std::vector<ssctl::tlv::abm::ErrorMessage>::__emplace_back_slow_path<>((void **)a3);
    }
    else
    {
      *v11 = 0;
      v11[1] = 0;
      v6 = v11 + 3;
      v11[2] = 0;
    }
    *(_QWORD *)(a3 + 8) = v6;
    v7 = (void **)(v6 - 3);
    tlv::throwIfNotEnoughBytes(v3, a2, (const unsigned __int8 *)1);
    v9 = *(unsigned __int8 *)v3;
    v8 = (tlv *)((char *)v3 + 1);
    tlv::throwIfNotEnoughBytes(v8, a2, (const unsigned __int8 *)v9);
    std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(v7, (uint64_t)v8, (char *)v8 + v9, v9);
    v3 = (tlv *)((char *)v8 + v9);
    v10 = v3;
  }
  while (v3 < (tlv *)a2);
  return v10;
}

{
  tlv *v3;
  _QWORD *v6;
  void **v7;
  tlv *v8;
  unsigned int v9;
  tlv *v10;
  _QWORD *v11;

  v3 = a1;
  if (a1 >= (tlv *)a2)
    return a1;
  do
  {
    v11 = *(_QWORD **)(a3 + 8);
    if ((unint64_t)v11 >= *(_QWORD *)(a3 + 16))
    {
      v6 = std::vector<ssctl::tlv::abm::ErrorMessage>::__emplace_back_slow_path<>((void **)a3);
    }
    else
    {
      *v11 = 0;
      v11[1] = 0;
      v6 = v11 + 3;
      v11[2] = 0;
    }
    *(_QWORD *)(a3 + 8) = v6;
    v7 = (void **)(v6 - 3);
    tlv::throwIfNotEnoughBytes(v3, a2, (const unsigned __int8 *)2);
    v9 = *(unsigned __int16 *)v3;
    v8 = (tlv *)((char *)v3 + 2);
    tlv::throwIfNotEnoughBytes(v8, a2, (const unsigned __int8 *)v9);
    std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(v7, (uint64_t)v8, (char *)v8 + v9, v9);
    v3 = (tlv *)((char *)v8 + v9);
    v10 = v3;
  }
  while (v3 < (tlv *)a2);
  return v10;
}

char *ssctl::tlv::abm::writeField(char *a1, const void ***a2)
{
  const void **v3;
  const void **v4;
  const void *v5;
  char *v6;
  int v7;
  const void *v8;
  size_t v9;
  char *v10;

  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      LOBYTE(v5) = *((_BYTE *)v3 + 23);
      if ((char)v5 < 0)
        v5 = v3[1];
      *a1 = (char)v5;
      v6 = a1 + 1;
      v7 = *((char *)v3 + 23);
      if (v7 >= 0)
        v8 = v3;
      else
        v8 = *v3;
      if (v7 >= 0)
        v9 = *((unsigned __int8 *)v3 + 23);
      else
        v9 = (size_t)v3[1];
      memcpy(v6, v8, v9);
      v10 = (char *)*((unsigned __int8 *)v3 + 23);
      if ((char)v10 < 0)
        v10 = (char *)v3[1];
      a1 = &v10[(_QWORD)v6];
      v3 += 3;
    }
    while (v3 != v4);
  }
  return a1;
}

{
  const void **v3;
  const void **v4;
  const void *v5;
  char *v6;
  int v7;
  const void *v8;
  size_t v9;
  char *v10;

  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      LOWORD(v5) = *((unsigned __int8 *)v3 + 23);
      if ((char)v5 < 0)
        v5 = v3[1];
      *(_WORD *)a1 = (_WORD)v5;
      v6 = a1 + 2;
      v7 = *((char *)v3 + 23);
      if (v7 >= 0)
        v8 = v3;
      else
        v8 = *v3;
      if (v7 >= 0)
        v9 = *((unsigned __int8 *)v3 + 23);
      else
        v9 = (size_t)v3[1];
      memcpy(v6, v8, v9);
      v10 = (char *)*((unsigned __int8 *)v3 + 23);
      if ((char)v10 < 0)
        v10 = (char *)v3[1];
      a1 = &v10[(_QWORD)v6];
      v3 += 3;
    }
    while (v3 != v4);
  }
  return a1;
}

uint64_t ssctl::tlv::abm::getFieldSize(uint64_t *a1, double a2, double a3, double a4, int64x2_t a5, double a6, int8x16_t a7)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  int64x2_t v16;
  int8x16_t v17;
  int64x2_t v18;
  int32x2_t v19;
  int8x16_t v20;
  int8x16_t v21;
  const double *v22;
  const double *v23;
  unsigned __int128 v24;
  unsigned __int128 v25;
  int32x2_t v26;
  int8x16_t v27;
  int8x16_t v28;
  uint64_t v29;

  v8 = *a1;
  v7 = a1[1];
  if (*a1 == v7)
    return 0;
  v9 = v7 - v8 - 24;
  if (v9 >= 0x60)
  {
    v12 = v9 / 0x18 + 1;
    v13 = v12 & 3;
    if ((v12 & 3) == 0)
      v13 = 4;
    v14 = v12 - v13;
    v11 = v8 + 24 * v14;
    v15 = (unsigned __int8 *)(v8 + 47);
    v16 = 0uLL;
    v17.i64[0] = 255;
    v17.i64[1] = 255;
    v18 = 0uLL;
    do
    {
      a5.i8[0] = *(v15 - 24);
      a5.i8[4] = *v15;
      a7.i8[0] = v15[24];
      a7.i8[4] = v15[48];
      v19 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a5.i8, 0x18uLL), 0x18uLL));
      v20.i64[0] = v19.i32[0];
      v20.i64[1] = v19.i32[1];
      v21 = v20;
      v22 = (const double *)(v15 - 39);
      v23 = (const double *)(v15 + 9);
      v24 = (unsigned __int128)vld3q_f64(v22);
      v25 = (unsigned __int128)vld3q_f64(v23);
      v26 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a7.i8, 0x18uLL), 0x18uLL));
      v20.i64[0] = v26.i32[0];
      v20.i64[1] = v26.i32[1];
      v27 = v20;
      v20.i64[0] = a5.u32[0];
      v20.i64[1] = a5.u32[1];
      v28 = vbicq_s8(v20, v21);
      v20.i64[0] = a7.u32[0];
      v20.i64[1] = a7.u32[1];
      a5 = (int64x2_t)vorrq_s8(vandq_s8((int8x16_t)v24, v21), vandq_s8(v28, v17));
      a7 = vandq_s8((int8x16_t)v25, v27);
      v16 = vsubq_s64(a5, (int64x2_t)vmvnq_s8((int8x16_t)v16));
      v18 = vsubq_s64((int64x2_t)vorrq_s8(a7, vandq_s8(vbicq_s8(v20, v27), v17)), (int64x2_t)vmvnq_s8((int8x16_t)v18));
      v15 += 96;
      v14 -= 4;
    }
    while (v14);
    result = vaddvq_s64(vaddq_s64(v18, v16));
  }
  else
  {
    result = 0;
    v11 = v8;
  }
  do
  {
    v29 = *(unsigned __int8 *)(v11 + 23);
    if ((v29 & 0x80u) != 0)
      v29 = *(_QWORD *)(v11 + 8);
    result += v29 + 1;
    v11 += 24;
  }
  while (v11 != v7);
  return result;
}

void tlv::parseV<ssctl::tlv::abm::ErrorMessages>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  tlv *v4;
  const unsigned __int8 *v6;
  _QWORD *v7;
  void **v8;
  tlv *v9;
  unsigned int v10;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v4 = *a1;
  if (a2 < 1)
  {
    *a1 = v4;
  }
  else
  {
    v6 = (const unsigned __int8 *)v4 + a2;
    do
    {
      v7 = *(_QWORD **)(a3 + 8);
      if ((unint64_t)v7 >= *(_QWORD *)(a3 + 16))
      {
        v8 = (void **)std::vector<ssctl::tlv::abm::ErrorMessage>::__emplace_back_slow_path<>((void **)a3);
      }
      else
      {
        *v7 = 0;
        v7[1] = 0;
        v8 = (void **)(v7 + 3);
        v7[2] = 0;
      }
      *(_QWORD *)(a3 + 8) = v8;
      tlv::throwIfNotEnoughBytes(v4, v6, (const unsigned __int8 *)1);
      v10 = *(unsigned __int8 *)v4;
      v9 = (tlv *)((char *)v4 + 1);
      tlv::throwIfNotEnoughBytes(v9, v6, (const unsigned __int8 *)v10);
      std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(v8 - 3, (uint64_t)v9, (char *)v9 + v10, v10);
      v4 = (tlv *)((char *)v9 + v10);
    }
    while (v4 < (tlv *)v6);
    *a1 = v4;
  }
}

void sub_1B3D990A8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3D9907CLL);
}

void sub_1B3D990B8(_Unwind_Exception *a1)
{
  void **v1;

  std::vector<std::string>::~vector[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t tlv::size<ssctl::tlv::abm::ErrorMessages>(uint64_t *a1, double a2, double a3, double a4, int64x2_t a5, double a6, int8x16_t a7)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  int64x2_t v17;
  int8x16_t v18;
  int64x2_t v19;
  int32x2_t v20;
  int8x16_t v21;
  int8x16_t v22;
  const double *v23;
  const double *v24;
  unsigned __int128 v25;
  unsigned __int128 v26;
  int32x2_t v27;
  int8x16_t v28;
  int8x16_t v29;
  uint64_t v30;

  v8 = *a1;
  v7 = a1[1];
  if (*a1 == v7)
    return 3;
  v9 = v7 - v8 - 24;
  if (v9 >= 0x60)
  {
    v13 = v9 / 0x18 + 1;
    v14 = v13 & 3;
    if ((v13 & 3) == 0)
      v14 = 4;
    v15 = v13 - v14;
    v11 = v8 + 24 * v15;
    v16 = (unsigned __int8 *)(v8 + 47);
    v17 = 0uLL;
    v18.i64[0] = 255;
    v18.i64[1] = 255;
    v19 = 0uLL;
    do
    {
      a5.i8[0] = *(v16 - 24);
      a5.i8[4] = *v16;
      a7.i8[0] = v16[24];
      a7.i8[4] = v16[48];
      v20 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a5.i8, 0x18uLL), 0x18uLL));
      v21.i64[0] = v20.i32[0];
      v21.i64[1] = v20.i32[1];
      v22 = v21;
      v23 = (const double *)(v16 - 39);
      v24 = (const double *)(v16 + 9);
      v25 = (unsigned __int128)vld3q_f64(v23);
      v26 = (unsigned __int128)vld3q_f64(v24);
      v27 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a7.i8, 0x18uLL), 0x18uLL));
      v21.i64[0] = v27.i32[0];
      v21.i64[1] = v27.i32[1];
      v28 = v21;
      v21.i64[0] = a5.u32[0];
      v21.i64[1] = a5.u32[1];
      v29 = vbicq_s8(v21, v22);
      v21.i64[0] = a7.u32[0];
      v21.i64[1] = a7.u32[1];
      a5 = (int64x2_t)vorrq_s8(vandq_s8((int8x16_t)v25, v22), vandq_s8(v29, v18));
      a7 = vandq_s8((int8x16_t)v26, v28);
      v17 = vsubq_s64(a5, (int64x2_t)vmvnq_s8((int8x16_t)v17));
      v19 = vsubq_s64((int64x2_t)vorrq_s8(a7, vandq_s8(vbicq_s8(v21, v28), v18)), (int64x2_t)vmvnq_s8((int8x16_t)v19));
      v16 += 96;
      v15 -= 4;
    }
    while (v15);
    v10 = vaddvq_s64(vaddq_s64(v19, v17));
  }
  else
  {
    v10 = 0;
    v11 = *a1;
  }
  do
  {
    v30 = *(unsigned __int8 *)(v11 + 23);
    if ((v30 & 0x80u) != 0)
      v30 = *(_QWORD *)(v11 + 8);
    v10 += v30 + 1;
    v11 += 24;
  }
  while (v11 != v7);
  return v10 + 3;
}

char **tlv::writeV<ssctl::tlv::abm::ErrorMessages>(char **result, const void ***a2)
{
  char **v2;
  char *v3;
  const void **v4;
  const void **v5;
  const void *v6;
  char *v7;
  int v8;
  const void *v9;
  size_t v10;
  char *v11;

  v2 = result;
  v3 = *result;
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      LOBYTE(v6) = *((_BYTE *)v4 + 23);
      if ((char)v6 < 0)
        v6 = v4[1];
      *v3 = (char)v6;
      v7 = v3 + 1;
      v8 = *((char *)v4 + 23);
      if (v8 >= 0)
        v9 = v4;
      else
        v9 = *v4;
      if (v8 >= 0)
        v10 = *((unsigned __int8 *)v4 + 23);
      else
        v10 = (size_t)v4[1];
      result = (char **)memcpy(v7, v9, v10);
      v11 = (char *)*((unsigned __int8 *)v4 + 23);
      if ((char)v11 < 0)
        v11 = (char *)v4[1];
      v3 = &v11[(_QWORD)v7];
      v4 += 3;
    }
    while (v4 != v5);
  }
  *v2 = v3;
  return result;
}

uint64_t ssctl::tlv::abm::getFieldSize(uint64_t *a1, double a2, double a3, double a4, double a5, int64x2_t a6, double a7, int8x16_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  int64x2_t v17;
  int8x16_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int32x2_t v21;
  int8x16_t v22;
  int8x16_t v23;
  const double *v24;
  const double *v25;
  unsigned __int128 v26;
  unsigned __int128 v27;
  int32x2_t v28;
  int8x16_t v29;
  int8x16_t v30;
  uint64_t v31;

  v9 = *a1;
  v8 = a1[1];
  if (*a1 == v8)
    return 0;
  v10 = v8 - v9 - 24;
  if (v10 >= 0x60)
  {
    v13 = v10 / 0x18 + 1;
    v14 = v13 & 3;
    if ((v13 & 3) == 0)
      v14 = 4;
    v15 = v13 - v14;
    v12 = v9 + 24 * v15;
    v16 = (unsigned __int8 *)(v9 + 47);
    v17 = 0uLL;
    v18.i64[0] = 255;
    v18.i64[1] = 255;
    v19 = vdupq_n_s64(2uLL);
    v20 = 0uLL;
    do
    {
      a6.i8[0] = *(v16 - 24);
      a6.i8[4] = *v16;
      a8.i8[0] = v16[24];
      a8.i8[4] = v16[48];
      v21 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a6.i8, 0x18uLL), 0x18uLL));
      v22.i64[0] = v21.i32[0];
      v22.i64[1] = v21.i32[1];
      v23 = v22;
      v24 = (const double *)(v16 - 39);
      v25 = (const double *)(v16 + 9);
      v26 = (unsigned __int128)vld3q_f64(v24);
      v27 = (unsigned __int128)vld3q_f64(v25);
      v28 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a8.i8, 0x18uLL), 0x18uLL));
      v22.i64[0] = v28.i32[0];
      v22.i64[1] = v28.i32[1];
      v29 = v22;
      v22.i64[0] = a6.u32[0];
      v22.i64[1] = a6.u32[1];
      v30 = vbicq_s8(v22, v23);
      v22.i64[0] = a8.u32[0];
      v22.i64[1] = a8.u32[1];
      a6 = (int64x2_t)vorrq_s8(vandq_s8((int8x16_t)v26, v23), vandq_s8(v30, v18));
      a8 = vandq_s8((int8x16_t)v27, v29);
      v17 = vaddq_s64(vaddq_s64(v17, v19), a6);
      v20 = vaddq_s64(vaddq_s64(v20, v19), (int64x2_t)vorrq_s8(a8, vandq_s8(vbicq_s8(v22, v29), v18)));
      v16 += 96;
      v15 -= 4;
    }
    while (v15);
    result = vaddvq_s64(vaddq_s64(v20, v17));
  }
  else
  {
    result = 0;
    v12 = v9;
  }
  do
  {
    v31 = *(unsigned __int8 *)(v12 + 23);
    if ((v31 & 0x80u) != 0)
      v31 = *(_QWORD *)(v12 + 8);
    result += v31 + 2;
    v12 += 24;
  }
  while (v12 != v8);
  return result;
}

void tlv::parseV<ssctl::tlv::abm::ExtendedErrorMessages>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  tlv *v4;
  const unsigned __int8 *v6;
  _QWORD *v7;
  void **v8;
  tlv *v9;
  unsigned int v10;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v4 = *a1;
  if (a2 < 1)
  {
    *a1 = v4;
  }
  else
  {
    v6 = (const unsigned __int8 *)v4 + a2;
    do
    {
      v7 = *(_QWORD **)(a3 + 8);
      if ((unint64_t)v7 >= *(_QWORD *)(a3 + 16))
      {
        v8 = (void **)std::vector<ssctl::tlv::abm::ErrorMessage>::__emplace_back_slow_path<>((void **)a3);
      }
      else
      {
        *v7 = 0;
        v7[1] = 0;
        v8 = (void **)(v7 + 3);
        v7[2] = 0;
      }
      *(_QWORD *)(a3 + 8) = v8;
      tlv::throwIfNotEnoughBytes(v4, v6, (const unsigned __int8 *)2);
      v10 = *(unsigned __int16 *)v4;
      v9 = (tlv *)((char *)v4 + 2);
      tlv::throwIfNotEnoughBytes(v9, v6, (const unsigned __int8 *)v10);
      std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(v8 - 3, (uint64_t)v9, (char *)v9 + v10, v10);
      v4 = (tlv *)((char *)v9 + v10);
    }
    while (v4 < (tlv *)v6);
    *a1 = v4;
  }
}

void sub_1B3D995F8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3D995CCLL);
}

void sub_1B3D99608(_Unwind_Exception *a1)
{
  void **v1;

  std::vector<std::string>::~vector[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t tlv::size<ssctl::tlv::abm::ExtendedErrorMessages>(uint64_t *a1, double a2, double a3, double a4, double a5, int64x2_t a6, double a7, int8x16_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  int64x2_t v18;
  int8x16_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int32x2_t v22;
  int8x16_t v23;
  int8x16_t v24;
  const double *v25;
  const double *v26;
  unsigned __int128 v27;
  unsigned __int128 v28;
  int32x2_t v29;
  int8x16_t v30;
  int8x16_t v31;
  uint64_t v32;

  v9 = *a1;
  v8 = a1[1];
  if (*a1 == v8)
    return 3;
  v10 = v8 - v9 - 24;
  if (v10 >= 0x60)
  {
    v14 = v10 / 0x18 + 1;
    v15 = v14 & 3;
    if ((v14 & 3) == 0)
      v15 = 4;
    v16 = v14 - v15;
    v12 = v9 + 24 * v16;
    v17 = (unsigned __int8 *)(v9 + 47);
    v18 = 0uLL;
    v19.i64[0] = 255;
    v19.i64[1] = 255;
    v20 = vdupq_n_s64(2uLL);
    v21 = 0uLL;
    do
    {
      a6.i8[0] = *(v17 - 24);
      a6.i8[4] = *v17;
      a8.i8[0] = v17[24];
      a8.i8[4] = v17[48];
      v22 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a6.i8, 0x18uLL), 0x18uLL));
      v23.i64[0] = v22.i32[0];
      v23.i64[1] = v22.i32[1];
      v24 = v23;
      v25 = (const double *)(v17 - 39);
      v26 = (const double *)(v17 + 9);
      v27 = (unsigned __int128)vld3q_f64(v25);
      v28 = (unsigned __int128)vld3q_f64(v26);
      v29 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a8.i8, 0x18uLL), 0x18uLL));
      v23.i64[0] = v29.i32[0];
      v23.i64[1] = v29.i32[1];
      v30 = v23;
      v23.i64[0] = a6.u32[0];
      v23.i64[1] = a6.u32[1];
      v31 = vbicq_s8(v23, v24);
      v23.i64[0] = a8.u32[0];
      v23.i64[1] = a8.u32[1];
      a6 = (int64x2_t)vorrq_s8(vandq_s8((int8x16_t)v27, v24), vandq_s8(v31, v19));
      a8 = vandq_s8((int8x16_t)v28, v30);
      v18 = vaddq_s64(vaddq_s64(v18, v20), a6);
      v21 = vaddq_s64(vaddq_s64(v21, v20), (int64x2_t)vorrq_s8(a8, vandq_s8(vbicq_s8(v23, v30), v19)));
      v17 += 96;
      v16 -= 4;
    }
    while (v16);
    v11 = vaddvq_s64(vaddq_s64(v21, v18));
  }
  else
  {
    v11 = 0;
    v12 = *a1;
  }
  do
  {
    v32 = *(unsigned __int8 *)(v12 + 23);
    if ((v32 & 0x80u) != 0)
      v32 = *(_QWORD *)(v12 + 8);
    v11 += v32 + 2;
    v12 += 24;
  }
  while (v12 != v8);
  return v11 + 3;
}

char **tlv::writeV<ssctl::tlv::abm::ExtendedErrorMessages>(char **result, const void ***a2)
{
  char **v2;
  char *v3;
  const void **v4;
  const void **v5;
  const void *v6;
  char *v7;
  int v8;
  const void *v9;
  size_t v10;
  char *v11;

  v2 = result;
  v3 = *result;
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      LOWORD(v6) = *((unsigned __int8 *)v4 + 23);
      if ((char)v6 < 0)
        v6 = v4[1];
      *(_WORD *)v3 = (_WORD)v6;
      v7 = v3 + 2;
      v8 = *((char *)v4 + 23);
      if (v8 >= 0)
        v9 = v4;
      else
        v9 = *v4;
      if (v8 >= 0)
        v10 = *((unsigned __int8 *)v4 + 23);
      else
        v10 = (size_t)v4[1];
      result = (char **)memcpy(v7, v9, v10);
      v11 = (char *)*((unsigned __int8 *)v4 + 23);
      if ((char)v11 < 0)
        v11 = (char *)v4[1];
      v3 = &v11[(_QWORD)v7];
      v4 += 3;
    }
    while (v4 != v5);
  }
  *v2 = v3;
  return result;
}

void std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(void **a1, uint64_t a2, char *a3, unint64_t a4)
{
  char *v8;
  unint64_t v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  __int128 *v18;
  _OWORD *v19;
  unint64_t v20;
  __int128 v21;
  char v22;

  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    v8 = (char *)a1;
    if (a4 < 0x17)
      goto LABEL_22;
    if (a4 - 0x7FFFFFFFFFFFFFF8 >= 0x800000000000001ELL)
    {
      v9 = 22;
      v10 = a1;
      goto LABEL_8;
    }
    goto LABEL_35;
  }
  v11 = (unint64_t)a1[2];
  v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (a4 > v9)
  {
    if (0x7FFFFFFFFFFFFFF8 - (v11 & 0x7FFFFFFFFFFFFFFFLL) >= a4 - v9)
    {
      v10 = *a1;
      if (v9 >= 0x3FFFFFFFFFFFFFF3)
      {
        v14 = 0x7FFFFFFFFFFFFFF7;
        v8 = (char *)operator new(0x7FFFFFFFFFFFFFF7uLL);
LABEL_20:
        operator delete(v10);
LABEL_21:
        a1[1] = 0;
        a1[2] = (void *)(v14 | 0x8000000000000000);
        *a1 = v8;
        goto LABEL_22;
      }
LABEL_8:
      v12 = 2 * v9;
      if (a4 > 2 * v9)
        v12 = a4;
      v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17)
        v13 = v12 | 7;
      if (v12 >= 0x17)
        v14 = v13 + 1;
      else
        v14 = 23;
      v8 = (char *)operator new(v14);
      if (v9 == 22)
        goto LABEL_21;
      goto LABEL_20;
    }
LABEL_35:
    std::string::__throw_length_error[abi:ne180100]();
  }
  v8 = (char *)a1;
  if ((v11 & 0x8000000000000000) != 0)
    v8 = (char *)*a1;
LABEL_22:
  if ((char *)a2 == a3)
  {
    v16 = v8;
  }
  else
  {
    v15 = (unint64_t)&a3[-a2];
    if ((unint64_t)&a3[-a2] < 0x20 || (unint64_t)&v8[-a2] < 0x20)
    {
      v16 = v8;
      v17 = (char *)a2;
    }
    else
    {
      v16 = &v8[v15 & 0xFFFFFFFFFFFFFFE0];
      v17 = (char *)(a2 + (v15 & 0xFFFFFFFFFFFFFFE0));
      v18 = (__int128 *)(a2 + 16);
      v19 = v8 + 16;
      v20 = v15 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v21 = *v18;
        *(v19 - 1) = *(v18 - 1);
        *v19 = v21;
        v18 += 2;
        v19 += 2;
        v20 -= 32;
      }
      while (v20);
      if (v15 == (v15 & 0xFFFFFFFFFFFFFFE0))
        goto LABEL_32;
    }
    do
    {
      v22 = *v17++;
      *v16++ = v22;
    }
    while (v17 != a3);
  }
LABEL_32:
  *v16 = 0;
  if (*((char *)a1 + 23) < 0)
    a1[1] = (void *)a4;
  else
    *((_BYTE *)a1 + 23) = a4 & 0x7F;
}

_QWORD *std::vector<ssctl::tlv::abm::ErrorMessage>::__emplace_back_slow_path<>(void **a1)
{
  void **v1;
  void **v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  __int128 v11;
  void **v12;

  v2 = (void **)*a1;
  v1 = (void **)a1[1];
  v3 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1 - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)v2) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)v2) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)v2) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v9 = &v7[24 * v6];
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  v10 = v8 + 24;
  if (v1 == v2)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      v11 = *(_OWORD *)(v1 - 3);
      *((_QWORD *)v8 - 1) = *(v1 - 1);
      *(_OWORD *)(v8 - 24) = v11;
      v8 -= 24;
      *(v1 - 2) = 0;
      *(v1 - 1) = 0;
      *(v1 - 3) = 0;
      v1 -= 3;
    }
    while (v1 != v2);
    v1 = (void **)*a1;
    v12 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    while (v12 != v1)
    {
      if (*((char *)v12 - 1) < 0)
        operator delete(*(v12 - 3));
      v12 -= 3;
    }
  }
  if (v1)
    operator delete(v1);
  return v10;
}

char *dms::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, _BYTE *a3)
{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  return (char *)a1 + 1;
}

_BYTE *dms::tlv::abm::writeField(_BYTE *a1, _BYTE *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

uint64_t dms::tlv::abm::getFieldSize()
{
  return 1;
}

{
  return 1;
}

{
  return 2;
}

{
  return 1;
}

{
  return 8;
}

uint64_t tlv::parseV<dms::tlv::abm::OperatingMode>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3D99B98(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<dms::tlv::abm::OperatingMode>()
{
  return 4;
}

_BYTE **tlv::writeV<dms::tlv::abm::OperatingMode>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<dms::tlv::abm::OperatingModeLegacy>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3D99C50(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<dms::tlv::abm::OperatingModeLegacy>()
{
  return 4;
}

_BYTE **tlv::writeV<dms::tlv::abm::OperatingModeLegacy>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

char *dms::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, _WORD *a3)
{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

_WORD *dms::tlv::abm::writeField(_WORD *a1, _WORD *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

uint64_t tlv::parseV<dms::tlv::abm::ProtocolNVConfig>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B3D99D08(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<dms::tlv::abm::ProtocolNVConfig>()
{
  return 5;
}

_WORD **tlv::writeV<dms::tlv::abm::ProtocolNVConfig>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<dms::tlv::abm::OperatingModeReporting>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3D99DC0(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<dms::tlv::abm::OperatingModeReporting>()
{
  return 4;
}

_BYTE **tlv::writeV<dms::tlv::abm::OperatingModeReporting>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

char *dms::tlv::abm::parseField(uint64_t a1, char *a2, void **a3)
{
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, a1, a2, (unint64_t)&a2[-a1]);
  return a2;
}

char *dms::tlv::abm::writeField(char *a1, _QWORD *a2)
{
  _QWORD *v2;
  size_t v4;
  size_t v5;
  uint64_t v6;

  v2 = a2;
  v4 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    v5 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (_QWORD *)*a2;
    v5 = v4;
  }
  memcpy(a1, a2, v5);
  v6 = *((unsigned __int8 *)v2 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = v2[1];
  return &a1[v6];
}

uint64_t dms::tlv::abm::getFieldSize(uint64_t a1)
{
  if (*(char *)(a1 + 23) >= 0)
    return *(unsigned __int8 *)(a1 + 23);
  else
    return *(_QWORD *)(a1 + 8);
}

void tlv::parseV<dms::tlv::abm::BasebandFWVersion>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  char *v4;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v4 = (char *)(*a1 + a2);
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>((void **)a3, *a1, v4, a2);
  *a1 = (uint64_t)v4;
}

void sub_1B3D99EE8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3D99ED8);
}

void sub_1B3D99EF8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<dms::tlv::abm::BasebandFWVersion>(uint64_t a1)
{
  uint64_t v1;

  v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0)
    v1 = *(_QWORD *)(a1 + 8);
  return v1 + 3;
}

void *tlv::writeV<dms::tlv::abm::BasebandFWVersion>(void **a1, _QWORD *a2)
{
  _QWORD *v2;
  char *v4;
  size_t v5;
  size_t v6;
  void *result;
  uint64_t v8;

  v2 = a2;
  v4 = (char *)*a1;
  v5 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    v6 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (_QWORD *)*a2;
    v6 = v5;
  }
  result = memcpy(*a1, a2, v6);
  v8 = *((unsigned __int8 *)v2 + 23);
  if ((v8 & 0x80u) != 0)
    v8 = v2[1];
  *a1 = &v4[v8];
  return result;
}

char *dms::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, _QWORD *a3)
{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)8);
  *a3 = *(_QWORD *)a1;
  return (char *)a1 + 8;
}

_QWORD *dms::tlv::abm::writeField(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

uint64_t tlv::parseV<dms::tlv::abm::BasebandTime>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)8);
  result = *(_QWORD *)v3;
  *a1 = (tlv *)((char *)v3 + 8);
  return result;
}

uint64_t sub_1B3D9A018(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<dms::tlv::abm::BasebandTime>()
{
  return 11;
}

_QWORD **tlv::writeV<dms::tlv::abm::BasebandTime>(_QWORD **result, _QWORD *a2)
{
  _QWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

char *coex::parseField(tlv *a1, const unsigned __int8 *a2, _DWORD *a3)
{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

_DWORD *coex::writeField(_DWORD *a1, int a2)
{
  *a1 = a2;
  return a1 + 1;
}

{
  *a1 = a2;
  return a1 + 1;
}

uint64_t coex::getFieldSize()
{
  return 4;
}

{
  return 4;
}

{
  return 8;
}

uint64_t coex::tlv::abm::parseField(uint64_t a1, const unsigned __int8 *a2, _DWORD *a3)
{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  return a1 + 8;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)4);
  a3[2] = *(_DWORD *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 12), a2, (const unsigned __int8 *)4);
  a3[3] = *(_DWORD *)(a1 + 12);
  return a1 + 16;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)4);
  a3[2] = *(_DWORD *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 12), a2, (const unsigned __int8 *)4);
  a3[3] = *(_DWORD *)(a1 + 12);
  return a1 + 16;
}

{
  uint64_t result;

  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)4);
  a3[2] = *(_DWORD *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 12), a2, (const unsigned __int8 *)4);
  a3[3] = *(_DWORD *)(a1 + 12);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 16), a2, (const unsigned __int8 *)4);
  result = a1 + 20;
  a3[4] = *(_DWORD *)(a1 + 16);
  return result;
}

{
  uint64_t result;

  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)4);
  a3[2] = *(_DWORD *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 12), a2, (const unsigned __int8 *)4);
  a3[3] = *(_DWORD *)(a1 + 12);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 16), a2, (const unsigned __int8 *)4);
  result = a1 + 20;
  a3[4] = *(_DWORD *)(a1 + 16);
  return result;
}

{
  uint64_t result;

  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)4);
  a3[2] = *(_DWORD *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 12), a2, (const unsigned __int8 *)4);
  result = a1 + 16;
  a3[3] = *(_DWORD *)(a1 + 12);
  return result;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  return a1 + 8;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  return a1 + 8;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  return a1 + 8;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  return a1 + 8;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  return a1 + 8;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  return a1 + 8;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  return a1 + 8;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  return a1 + 8;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  return a1 + 8;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  return a1 + 8;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  return a1 + 8;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  return a1 + 8;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  return a1 + 8;
}

_DWORD *coex::tlv::abm::writeField(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1 + 4;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1 + 4;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1 + 5;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1 + 5;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1 + 4;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

uint64_t coex::tlv::abm::getFieldSize()
{
  return 8;
}

{
  return 16;
}

{
  return 16;
}

{
  return 20;
}

{
  return 20;
}

{
  return 33;
}

{
  return 26;
}

{
  return 4;
}

{
  return 4;
}

{
  return 16;
}

{
  return 16;
}

{
  return 8;
}

{
  return 1;
}

{
  return 4;
}

{
  return 4;
}

{
  return 8;
}

{
  return 4;
}

{
  return 8;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 2;
}

{
  return 2;
}

{
  return 2;
}

{
  return 1;
}

{
  return 4;
}

{
  return 24;
}

{
  return 8;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 8;
}

{
  return 8;
}

{
  return 8;
}

{
  return 8;
}

{
  return 8;
}

{
  return 8;
}

{
  return 8;
}

{
  return 8;
}

{
  return 8;
}

{
  return 8;
}

{
  return 8;
}

{
  return 8;
}

{
  return 8;
}

{
  return 8;
}

{
  return 8;
}

{
  return 2;
}

{
  return 2;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 1;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

uint64_t tlv::parseV<coex::tlv::abm::BandInfo>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  v6 = *((unsigned int *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 8);
  return (v6 << 32) | v5;
}

uint64_t sub_1B3D9A1BC(void *a1)
{
  _QWORD *v1;
  unsigned int v2;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<coex::tlv::abm::BandInfo>()
{
  return 11;
}

_DWORD **tlv::writeV<coex::tlv::abm::BandInfo>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  *result = v2 + 2;
  return result;
}

uint64_t tlv::size<coex::tlv::abm::LTEBandInformation>()
{
  return 19;
}

_DWORD **tlv::writeV<coex::tlv::abm::LTEBandInformation>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  v2[3] = a2[3];
  *result = v2 + 4;
  return result;
}

unint64_t tlv::parseV<coex::tlv::abm::LTE2BandInformation>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  v6 = *((unsigned int *)v3 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 8), v4, (const unsigned __int8 *)4);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 12), v4, (const unsigned __int8 *)4);
  *a1 = (tlv *)((char *)v3 + 16);
  return v5 | (unint64_t)(v6 << 32);
}

void sub_1B3D9A468(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3D9A448);
}

uint64_t tlv::size<coex::tlv::abm::LTE2BandInformation>()
{
  return 19;
}

_DWORD **tlv::writeV<coex::tlv::abm::LTE2BandInformation>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  v2[3] = a2[3];
  *result = v2 + 4;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::LTETDDInformation>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  tlv *v5;
  const unsigned __int8 *v6;
  uint64_t result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 4), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *((_DWORD *)v5 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 8), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *((_DWORD *)v5 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 12), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *((_DWORD *)v5 + 3);
  result = tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 16), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 16) = *((_DWORD *)v5 + 4);
  *a1 = (tlv *)((char *)v5 + 20);
  return result;
}

void sub_1B3D9A640(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<coex::tlv::abm::LTETDDInformation>()
{
  return 23;
}

_DWORD **tlv::writeV<coex::tlv::abm::LTETDDInformation>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  v2[3] = a2[3];
  v2[4] = a2[4];
  *result = v2 + 5;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::LTE2TDDInformation>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  tlv *v5;
  const unsigned __int8 *v6;
  uint64_t result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 4), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *((_DWORD *)v5 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 8), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *((_DWORD *)v5 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 12), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *((_DWORD *)v5 + 3);
  result = tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 16), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 16) = *((_DWORD *)v5 + 4);
  *a1 = (tlv *)((char *)v5 + 20);
  return result;
}

void sub_1B3D9A828(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<coex::tlv::abm::LTE2TDDInformation>()
{
  return 23;
}

_DWORD **tlv::writeV<coex::tlv::abm::LTE2TDDInformation>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  v2[3] = a2[3];
  v2[4] = a2[4];
  *result = v2 + 5;
  return result;
}

uint64_t coex::tlv::abm::writeField(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 4) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 36);
  return a1 + 33;
}

{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  *(_WORD *)(a1 + 22) = *(_WORD *)(a2 + 22);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  return a1 + 26;
}

{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  return a1 + 16;
}

{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1 + 24;
}

{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = a1 + 5;
  *(_BYTE *)(a1 + 4) = *(_DWORD *)(a2 + 16) - *(_DWORD *)(a2 + 8);
  memcpy((void *)(a1 + 5), *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8));
  return v3 + *(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8);
}

uint64_t tlv::parseV<coex::tlv::abm::LTECarrierInformation>@<X0>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  __int128 v4;
  uint64_t result;

  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)a3 = v4;
  *(_OWORD *)(a3 + 16) = v4;
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 29) = 0;
  result = coex::tlv::abm::parseField(*a1, (const unsigned __int8 *)(*a1 + a2), a3);
  *a1 = result;
  return result;
}

void sub_1B3D9A920(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<coex::tlv::abm::LTECarrierInformation>()
{
  return 36;
}

uint64_t *tlv::writeV<coex::tlv::abm::LTECarrierInformation>(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *(_DWORD *)v2 = *(_DWORD *)a2;
  *(_QWORD *)(v2 + 4) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(v2 + 12) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(v2 + 16) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(v2 + 20) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(v2 + 24) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(v2 + 28) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(v2 + 32) = *(_BYTE *)(a2 + 36);
  *result = v2 + 33;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::NGCCarrierInformation>@<X0>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t result;

  *(_DWORD *)(a3 + 24) = -1431655766;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  *(_WORD *)(a3 + 24) = 0;
  result = coex::tlv::abm::parseField(*a1, (const unsigned __int8 *)(*a1 + a2), a3);
  *a1 = result;
  return result;
}

void sub_1B3D9AB08(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<coex::tlv::abm::NGCCarrierInformation>()
{
  return 29;
}

uint64_t *tlv::writeV<coex::tlv::abm::NGCCarrierInformation>(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *(_DWORD *)v2 = *(_DWORD *)a2;
  *(_DWORD *)(v2 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(v2 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v2 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(v2 + 16) = *(_DWORD *)(a2 + 16);
  *(_WORD *)(v2 + 20) = *(_WORD *)(a2 + 20);
  *(_WORD *)(v2 + 22) = *(_WORD *)(a2 + 22);
  *(_WORD *)(v2 + 24) = *(_WORD *)(a2 + 24);
  *result = v2 + 26;
  return result;
}

uint64_t coex::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, char **a3)
{
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  char *v9;
  char *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t result;

  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  v8 = *(unsigned __int8 *)a1;
  v7 = (uint64_t)a1 + 1;
  v6 = v8;
  v9 = *a3;
  v10 = a3[1];
  v11 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - *a3) >> 3);
  v12 = v8 >= v11;
  v13 = v8 - v11;
  if (v8 <= v11)
  {
    if (!v12)
    {
      v10 = &v9[40 * v6];
      a3[1] = v10;
    }
  }
  else
  {
    std::vector<coex::tlv::abm::LTECarrierInformation>::__append(a3, v13);
    v9 = *a3;
    v10 = a3[1];
  }
  while (1)
  {
    result = v7;
    if (v9 == v10)
      break;
    v7 = coex::tlv::abm::parseField(v7, a2, (uint64_t)v9);
    v9 += 40;
  }
  return result;
}

{
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  char *v9;
  char *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t result;

  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  v8 = *(unsigned __int8 *)a1;
  v7 = (uint64_t)a1 + 1;
  v6 = v8;
  v9 = *a3;
  v10 = a3[1];
  v11 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - *a3) >> 3);
  v12 = v8 >= v11;
  v13 = v8 - v11;
  if (v8 <= v11)
  {
    if (!v12)
    {
      v10 = &v9[40 * v6];
      a3[1] = v10;
    }
  }
  else
  {
    std::vector<coex::tlv::abm::LTECarrierInformation>::__append(a3, v13);
    v9 = *a3;
    v10 = a3[1];
  }
  while (1)
  {
    result = v7;
    if (v9 == v10)
      break;
    v7 = coex::tlv::abm::parseField(v7, a2, (uint64_t)v9);
    v9 += 40;
  }
  return result;
}

{
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  char *v9;
  char *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t result;

  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  v8 = *(unsigned __int8 *)a1;
  v7 = (uint64_t)a1 + 1;
  v6 = v8;
  v9 = *a3;
  v10 = a3[1];
  v11 = 0x6DB6DB6DB6DB6DB7 * ((v10 - *a3) >> 2);
  v12 = v8 >= v11;
  v13 = v8 - v11;
  if (v8 <= v11)
  {
    if (!v12)
    {
      v10 = &v9[28 * v6];
      a3[1] = v10;
    }
  }
  else
  {
    std::vector<coex::tlv::abm::NGCCarrierInformation>::__append(a3, v13);
    v9 = *a3;
    v10 = a3[1];
  }
  while (1)
  {
    result = v7;
    if (v9 == v10)
      break;
    v7 = coex::tlv::abm::parseField(v7, a2, (uint64_t)v9);
    v9 += 28;
  }
  return result;
}

{
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  char *v9;
  char *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t result;

  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  v8 = *(unsigned __int8 *)a1;
  v7 = (uint64_t)a1 + 1;
  v6 = v8;
  v9 = *a3;
  v10 = a3[1];
  v11 = 0x6DB6DB6DB6DB6DB7 * ((v10 - *a3) >> 2);
  v12 = v8 >= v11;
  v13 = v8 - v11;
  if (v8 <= v11)
  {
    if (!v12)
    {
      v10 = &v9[28 * v6];
      a3[1] = v10;
    }
  }
  else
  {
    std::vector<coex::tlv::abm::NGCCarrierInformation>::__append(a3, v13);
    v9 = *a3;
    v10 = a3[1];
  }
  while (1)
  {
    result = v7;
    if (v9 == v10)
      break;
    v7 = coex::tlv::abm::parseField(v7, a2, (uint64_t)v9);
    v9 += 28;
  }
  return result;
}

_BYTE *coex::tlv::abm::writeField(_BYTE *a1, _DWORD *a2)
{
  _BYTE *result;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  *a1 = -51 * ((a2[2] - *a2) >> 3);
  result = a1 + 1;
  v3 = *(_QWORD *)a2;
  v4 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 != v4)
  {
    do
    {
      *(_DWORD *)result = *(_DWORD *)v3;
      *(_QWORD *)(result + 4) = *(_QWORD *)(v3 + 8);
      *((_DWORD *)result + 3) = *(_DWORD *)(v3 + 16);
      *((_DWORD *)result + 4) = *(_DWORD *)(v3 + 20);
      *((_DWORD *)result + 5) = *(_DWORD *)(v3 + 24);
      *((_DWORD *)result + 6) = *(_DWORD *)(v3 + 28);
      *((_DWORD *)result + 7) = *(_DWORD *)(v3 + 32);
      v5 = result + 33;
      result[32] = *(_BYTE *)(v3 + 36);
      v3 += 40;
      result += 33;
    }
    while (v3 != v4);
    return v5;
  }
  return result;
}

{
  _BYTE *result;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  *a1 = -51 * ((a2[2] - *a2) >> 3);
  result = a1 + 1;
  v3 = *(_QWORD *)a2;
  v4 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 != v4)
  {
    do
    {
      *(_DWORD *)result = *(_DWORD *)v3;
      *(_QWORD *)(result + 4) = *(_QWORD *)(v3 + 8);
      *((_DWORD *)result + 3) = *(_DWORD *)(v3 + 16);
      *((_DWORD *)result + 4) = *(_DWORD *)(v3 + 20);
      *((_DWORD *)result + 5) = *(_DWORD *)(v3 + 24);
      *((_DWORD *)result + 6) = *(_DWORD *)(v3 + 28);
      *((_DWORD *)result + 7) = *(_DWORD *)(v3 + 32);
      v5 = result + 33;
      result[32] = *(_BYTE *)(v3 + 36);
      v3 += 40;
      result += 33;
    }
    while (v3 != v4);
    return v5;
  }
  return result;
}

{
  _BYTE *result;
  uint64_t v3;
  uint64_t v4;

  *a1 = -73 * ((a2[2] - *a2) >> 2);
  result = a1 + 1;
  v3 = *(_QWORD *)a2;
  v4 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 != v4)
  {
    do
    {
      *(_DWORD *)result = *(_DWORD *)v3;
      *((_DWORD *)result + 1) = *(_DWORD *)(v3 + 4);
      *((_DWORD *)result + 2) = *(_DWORD *)(v3 + 8);
      *((_DWORD *)result + 3) = *(_DWORD *)(v3 + 12);
      *((_DWORD *)result + 4) = *(_DWORD *)(v3 + 16);
      *((_WORD *)result + 10) = *(_WORD *)(v3 + 20);
      *((_WORD *)result + 11) = *(_WORD *)(v3 + 22);
      *((_WORD *)result + 12) = *(_WORD *)(v3 + 24);
      result += 26;
      v3 += 28;
    }
    while (v3 != v4);
  }
  return result;
}

{
  _BYTE *result;
  uint64_t v3;
  uint64_t v4;

  *a1 = -73 * ((a2[2] - *a2) >> 2);
  result = a1 + 1;
  v3 = *(_QWORD *)a2;
  v4 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 != v4)
  {
    do
    {
      *(_DWORD *)result = *(_DWORD *)v3;
      *((_DWORD *)result + 1) = *(_DWORD *)(v3 + 4);
      *((_DWORD *)result + 2) = *(_DWORD *)(v3 + 8);
      *((_DWORD *)result + 3) = *(_DWORD *)(v3 + 12);
      *((_DWORD *)result + 4) = *(_DWORD *)(v3 + 16);
      *((_WORD *)result + 10) = *(_WORD *)(v3 + 20);
      *((_WORD *)result + 11) = *(_WORD *)(v3 + 22);
      *((_WORD *)result + 12) = *(_WORD *)(v3 + 24);
      result += 26;
      v3 += 28;
    }
    while (v3 != v4);
  }
  return result;
}

{
  _BYTE *result;
  uint64_t v3;
  uint64_t v4;

  *a1 = (a2[2] - *a2) >> 4;
  result = a1 + 1;
  v3 = *(_QWORD *)a2;
  v4 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 != v4)
  {
    do
    {
      *(_DWORD *)result = *(_DWORD *)v3;
      *((_DWORD *)result + 1) = *(_DWORD *)(v3 + 4);
      *((_QWORD *)result + 1) = *(_QWORD *)(v3 + 8);
      result += 16;
      v3 += 16;
    }
    while (v3 != v4);
  }
  return result;
}

{
  _BYTE *result;
  uint64_t v3;
  uint64_t v4;

  *a1 = (a2[2] - *a2) >> 4;
  result = a1 + 1;
  v3 = *(_QWORD *)a2;
  v4 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 != v4)
  {
    do
    {
      *(_DWORD *)result = *(_DWORD *)v3;
      *((_DWORD *)result + 1) = *(_DWORD *)(v3 + 4);
      *((_QWORD *)result + 1) = *(_QWORD *)(v3 + 8);
      result += 16;
      v3 += 16;
    }
    while (v3 != v4);
  }
  return result;
}

{
  _BYTE *result;
  uint64_t v3;
  uint64_t v4;

  *a1 = (a2[2] - *a2) >> 4;
  result = a1 + 1;
  v3 = *(_QWORD *)a2;
  v4 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 != v4)
  {
    do
    {
      *(_DWORD *)result = *(_DWORD *)v3;
      *((_DWORD *)result + 1) = *(_DWORD *)(v3 + 4);
      *((_QWORD *)result + 1) = *(_QWORD *)(v3 + 8);
      result += 16;
      v3 += 16;
    }
    while (v3 != v4);
  }
  return result;
}

{
  _BYTE *result;
  uint64_t v3;
  uint64_t v4;

  *a1 = (a2[2] - *a2) >> 4;
  result = a1 + 1;
  v3 = *(_QWORD *)a2;
  v4 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 != v4)
  {
    do
    {
      *(_DWORD *)result = *(_DWORD *)v3;
      *((_DWORD *)result + 1) = *(_DWORD *)(v3 + 4);
      *((_QWORD *)result + 1) = *(_QWORD *)(v3 + 8);
      result += 16;
      v3 += 16;
    }
    while (v3 != v4);
  }
  return result;
}

{
  _BYTE *result;
  uint64_t v3;
  uint64_t v4;

  *a1 = (a2[2] - *a2) >> 4;
  result = a1 + 1;
  v3 = *(_QWORD *)a2;
  v4 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 != v4)
  {
    do
    {
      *(_DWORD *)result = *(_DWORD *)v3;
      *((_DWORD *)result + 1) = *(_DWORD *)(v3 + 4);
      *((_QWORD *)result + 1) = *(_QWORD *)(v3 + 8);
      result += 16;
      v3 += 16;
    }
    while (v3 != v4);
  }
  return result;
}

{
  _BYTE *result;
  uint64_t v3;
  uint64_t v4;

  *a1 = (a2[2] - *a2) >> 4;
  result = a1 + 1;
  v3 = *(_QWORD *)a2;
  v4 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 != v4)
  {
    do
    {
      *(_DWORD *)result = *(_DWORD *)v3;
      *((_DWORD *)result + 1) = *(_DWORD *)(v3 + 4);
      *((_QWORD *)result + 1) = *(_QWORD *)(v3 + 8);
      result += 16;
      v3 += 16;
    }
    while (v3 != v4);
  }
  return result;
}

{
  _BYTE *result;
  uint64_t v3;
  uint64_t v4;

  *a1 = (a2[2] - *a2) >> 4;
  result = a1 + 1;
  v3 = *(_QWORD *)a2;
  v4 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 != v4)
  {
    do
    {
      *(_DWORD *)result = *(_DWORD *)v3;
      *((_DWORD *)result + 1) = *(_DWORD *)(v3 + 4);
      *((_QWORD *)result + 1) = *(_QWORD *)(v3 + 8);
      result += 16;
      v3 += 16;
    }
    while (v3 != v4);
  }
  return result;
}

{
  _BYTE *result;
  uint64_t v3;
  uint64_t v4;

  *a1 = (a2[2] - *a2) >> 4;
  result = a1 + 1;
  v3 = *(_QWORD *)a2;
  v4 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 != v4)
  {
    do
    {
      *(_DWORD *)result = *(_DWORD *)v3;
      *((_DWORD *)result + 1) = *(_DWORD *)(v3 + 4);
      *((_QWORD *)result + 1) = *(_QWORD *)(v3 + 8);
      result += 16;
      v3 += 16;
    }
    while (v3 != v4);
  }
  return result;
}

{
  _BYTE *result;
  uint64_t v3;
  uint64_t v4;

  *a1 = (a2[2] - *a2) >> 4;
  result = a1 + 1;
  v3 = *(_QWORD *)a2;
  v4 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 != v4)
  {
    do
    {
      *(_DWORD *)result = *(_DWORD *)v3;
      *((_DWORD *)result + 1) = *(_DWORD *)(v3 + 4);
      *((_QWORD *)result + 1) = *(_QWORD *)(v3 + 8);
      result += 16;
      v3 += 16;
    }
    while (v3 != v4);
  }
  return result;
}

{
  _BYTE *result;
  uint64_t v3;
  uint64_t v4;

  *a1 = (a2[2] - *a2) >> 4;
  result = a1 + 1;
  v3 = *(_QWORD *)a2;
  v4 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 != v4)
  {
    do
    {
      *(_DWORD *)result = *(_DWORD *)v3;
      *((_DWORD *)result + 1) = *(_DWORD *)(v3 + 4);
      *((_QWORD *)result + 1) = *(_QWORD *)(v3 + 8);
      result += 16;
      v3 += 16;
    }
    while (v3 != v4);
  }
  return result;
}

{
  _BYTE *result;
  uint64_t v3;
  uint64_t v4;

  *a1 = (a2[2] - *a2) >> 4;
  result = a1 + 1;
  v3 = *(_QWORD *)a2;
  v4 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 != v4)
  {
    do
    {
      *(_DWORD *)result = *(_DWORD *)v3;
      *((_DWORD *)result + 1) = *(_DWORD *)(v3 + 4);
      *((_QWORD *)result + 1) = *(_QWORD *)(v3 + 8);
      result += 16;
      v3 += 16;
    }
    while (v3 != v4);
  }
  return result;
}

{
  _BYTE *result;
  uint64_t v3;
  uint64_t v4;

  *a1 = -85 * ((a2[2] - *a2) >> 3);
  result = a1 + 1;
  v3 = *(_QWORD *)a2;
  v4 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 != v4)
  {
    do
    {
      *(_DWORD *)result = *(_DWORD *)v3;
      *((_DWORD *)result + 1) = *(_DWORD *)(v3 + 4);
      *((_DWORD *)result + 2) = *(_DWORD *)(v3 + 8);
      *((_DWORD *)result + 3) = *(_DWORD *)(v3 + 12);
      *((_QWORD *)result + 2) = *(_QWORD *)(v3 + 16);
      result += 24;
      v3 += 24;
    }
    while (v3 != v4);
  }
  return result;
}

{
  _BYTE *result;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;
  _OWORD *v9;
  unint64_t v10;
  __int128 v11;
  char v12;

  *a1 = a2[2] - *a2;
  result = a1 + 1;
  v5 = *(char **)a2;
  v4 = (char *)*((_QWORD *)a2 + 1);
  if (*(char **)a2 != v4)
  {
    v6 = v4 - v5;
    if ((unint64_t)(v4 - v5) < 0x20)
      goto LABEL_10;
    if ((unint64_t)(a1 - v5 + 1) < 0x20)
      goto LABEL_10;
    result += v6 & 0xFFFFFFFFFFFFFFE0;
    v7 = &v5[v6 & 0xFFFFFFFFFFFFFFE0];
    v8 = (__int128 *)(v5 + 16);
    v9 = a1 + 17;
    v10 = v6 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v11 = *v8;
      *(v9 - 1) = *(v8 - 1);
      *v9 = v11;
      v8 += 2;
      v9 += 2;
      v10 -= 32;
    }
    while (v10);
    v5 = v7;
    if (v6 != (v6 & 0xFFFFFFFFFFFFFFE0))
    {
LABEL_10:
      do
      {
        v12 = *v5++;
        *result++ = v12;
      }
      while (v5 != v4);
    }
  }
  return result;
}

{
  _BYTE *result;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __int128 *v14;
  _OWORD *v15;
  uint64_t v16;
  __int128 v17;
  int v18;

  *a1 = -51 * ((a2[2] - *a2) >> 3);
  result = a1 + 1;
  v3 = *(_QWORD *)a2;
  v4 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 != v4)
  {
    do
    {
      while (1)
      {
        *(_DWORD *)result = *(_DWORD *)v3;
        *((_DWORD *)result + 1) = *(_DWORD *)(v3 + 4);
        result[8] = *(_BYTE *)(v3 + 8);
        v5 = result + 10;
        result[9] = (*(_DWORD *)(v3 + 24) - *(_DWORD *)(v3 + 16)) >> 5;
        v6 = *(_QWORD *)(v3 + 16);
        v7 = *(_QWORD *)(v3 + 24);
        if (v6 != v7)
          break;
        result += 10;
        v3 += 40;
        if (v3 == v4)
          return result;
      }
      do
      {
        *v5 = *(_BYTE *)v6;
        result = v5 + 2;
        v5[1] = (*(_DWORD *)(v6 + 16) - *(_DWORD *)(v6 + 8)) >> 2;
        v9 = *(char **)(v6 + 8);
        v8 = *(char **)(v6 + 16);
        if (v9 != v8)
        {
          v10 = v8 - v9 - 4;
          if (v10 < 0x1C)
            goto LABEL_18;
          if ((unint64_t)(v5 - v9 + 2) < 0x20)
            goto LABEL_18;
          v11 = (v10 >> 2) + 1;
          v12 = 4 * (v11 & 0x7FFFFFFFFFFFFFF8);
          result += v12;
          v13 = &v9[v12];
          v14 = (__int128 *)(v9 + 16);
          v15 = v5 + 18;
          v16 = v11 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v17 = *v14;
            *(v15 - 1) = *(v14 - 1);
            *v15 = v17;
            v14 += 2;
            v15 += 2;
            v16 -= 8;
          }
          while (v16);
          v9 = v13;
          if (v11 != (v11 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_18:
            do
            {
              v18 = *(_DWORD *)v9;
              v9 += 4;
              *(_DWORD *)result = v18;
              result += 4;
            }
            while (v9 != v8);
          }
        }
        v6 += 32;
        v5 = result;
      }
      while (v6 != v7);
      v3 += 40;
    }
    while (v3 != v4);
  }
  return result;
}

{
  _BYTE *result;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __int128 *v14;
  _OWORD *v15;
  uint64_t v16;
  __int128 v17;
  int v18;

  *a1 = -51 * ((a2[2] - *a2) >> 3);
  result = a1 + 1;
  v3 = *(_QWORD *)a2;
  v4 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 != v4)
  {
    do
    {
      while (1)
      {
        *(_DWORD *)result = *(_DWORD *)v3;
        *((_DWORD *)result + 1) = *(_DWORD *)(v3 + 4);
        result[8] = *(_BYTE *)(v3 + 8);
        v5 = result + 10;
        result[9] = (*(_DWORD *)(v3 + 24) - *(_DWORD *)(v3 + 16)) >> 5;
        v6 = *(_QWORD *)(v3 + 16);
        v7 = *(_QWORD *)(v3 + 24);
        if (v6 != v7)
          break;
        result += 10;
        v3 += 40;
        if (v3 == v4)
          return result;
      }
      do
      {
        *v5 = *(_BYTE *)v6;
        result = v5 + 2;
        v5[1] = (*(_DWORD *)(v6 + 16) - *(_DWORD *)(v6 + 8)) >> 2;
        v9 = *(char **)(v6 + 8);
        v8 = *(char **)(v6 + 16);
        if (v9 != v8)
        {
          v10 = v8 - v9 - 4;
          if (v10 < 0x1C)
            goto LABEL_18;
          if ((unint64_t)(v5 - v9 + 2) < 0x20)
            goto LABEL_18;
          v11 = (v10 >> 2) + 1;
          v12 = 4 * (v11 & 0x7FFFFFFFFFFFFFF8);
          result += v12;
          v13 = &v9[v12];
          v14 = (__int128 *)(v9 + 16);
          v15 = v5 + 18;
          v16 = v11 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v17 = *v14;
            *(v15 - 1) = *(v14 - 1);
            *v15 = v17;
            v14 += 2;
            v15 += 2;
            v16 -= 8;
          }
          while (v16);
          v9 = v13;
          if (v11 != (v11 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_18:
            do
            {
              v18 = *(_DWORD *)v9;
              v9 += 4;
              *(_DWORD *)result = v18;
              result += 4;
            }
            while (v9 != v8);
          }
        }
        v6 += 32;
        v5 = result;
      }
      while (v6 != v7);
      v3 += 40;
    }
    while (v3 != v4);
  }
  return result;
}

{
  _BYTE *result;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  *a1 = (a2[2] - *a2) >> 5;
  result = a1 + 1;
  v3 = *(_QWORD *)a2;
  v4 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 != v4)
  {
    do
    {
      *(_DWORD *)result = *(_DWORD *)v3;
      v5 = result + 5;
      result[4] = *(_DWORD *)(v3 + 16) - *(_DWORD *)(v3 + 8);
      memcpy(result + 5, *(const void **)(v3 + 8), *(_QWORD *)(v3 + 16) - *(_QWORD *)(v3 + 8));
      result = &v5[*(_QWORD *)(v3 + 16) - *(_QWORD *)(v3 + 8)];
      v3 += 32;
    }
    while (v3 != v4);
  }
  return result;
}

unint64_t coex::tlv::abm::getFieldSize(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[1];
  if (*a1 == v1)
    return 1;
  else
    return 33 * ((v1 - *a1 - 40) / 0x28uLL) + 34;
}

{
  uint64_t v1;

  v1 = a1[1];
  if (*a1 == v1)
    return 1;
  else
    return 33 * ((v1 - *a1 - 40) / 0x28uLL) + 34;
}

{
  uint64_t v1;

  v1 = a1[1];
  if (*a1 == v1)
    return 1;
  else
    return 26 * ((v1 - *a1 - 28) / 0x1CuLL) + 27;
}

{
  uint64_t v1;

  v1 = a1[1];
  if (*a1 == v1)
    return 1;
  else
    return 26 * ((v1 - *a1 - 28) / 0x1CuLL) + 27;
}

{
  uint64_t v1;

  v1 = a1[1];
  if (*a1 == v1)
    return 1;
  else
    return ((v1 - *a1 - 16) & 0xFFFFFFFFFFFFFFF0) + 17;
}

{
  uint64_t v1;

  v1 = a1[1];
  if (*a1 == v1)
    return 1;
  else
    return ((v1 - *a1 - 16) & 0xFFFFFFFFFFFFFFF0) + 17;
}

{
  uint64_t v1;

  v1 = a1[1];
  if (*a1 == v1)
    return 1;
  else
    return ((v1 - *a1 - 16) & 0xFFFFFFFFFFFFFFF0) + 17;
}

{
  uint64_t v1;

  v1 = a1[1];
  if (*a1 == v1)
    return 1;
  else
    return ((v1 - *a1 - 16) & 0xFFFFFFFFFFFFFFF0) + 17;
}

{
  uint64_t v1;

  v1 = a1[1];
  if (*a1 == v1)
    return 1;
  else
    return ((v1 - *a1 - 16) & 0xFFFFFFFFFFFFFFF0) + 17;
}

{
  uint64_t v1;

  v1 = a1[1];
  if (*a1 == v1)
    return 1;
  else
    return ((v1 - *a1 - 16) & 0xFFFFFFFFFFFFFFF0) + 17;
}

{
  uint64_t v1;

  v1 = a1[1];
  if (*a1 == v1)
    return 1;
  else
    return ((v1 - *a1 - 16) & 0xFFFFFFFFFFFFFFF0) + 17;
}

{
  uint64_t v1;

  v1 = a1[1];
  if (*a1 == v1)
    return 1;
  else
    return ((v1 - *a1 - 16) & 0xFFFFFFFFFFFFFFF0) + 17;
}

{
  uint64_t v1;

  v1 = a1[1];
  if (*a1 == v1)
    return 1;
  else
    return ((v1 - *a1 - 16) & 0xFFFFFFFFFFFFFFF0) + 17;
}

{
  uint64_t v1;

  v1 = a1[1];
  if (*a1 == v1)
    return 1;
  else
    return ((v1 - *a1 - 16) & 0xFFFFFFFFFFFFFFF0) + 17;
}

{
  uint64_t v1;

  v1 = a1[1];
  if (*a1 == v1)
    return 1;
  else
    return ((v1 - *a1 - 16) & 0xFFFFFFFFFFFFFFF0) + 17;
}

{
  uint64_t v1;

  v1 = a1[1];
  if (v1 == *a1)
    return 1;
  else
    return (v1 - *a1) & 0xFFFFFFFFFFFFFFF8 | 1;
}

{
  uint64_t v1;

  v1 = a1[1];
  if (*a1 == v1)
    return 1;
  else
    return 24 * ((v1 - *a1 - 24) / 0x18uLL) + 25;
}

{
  uint64_t v1;

  v1 = a1[1];
  if (v1 == *a1)
    return 1;
  else
    return (v1 - *a1) & 0xFFFFFFFFFFFFFFF8 | 1;
}

unint64_t tlv::size<coex::tlv::abm::LTECarrierInformationSet>(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[1];
  if (*a1 == v1)
    return 4;
  else
    return 33 * ((v1 - *a1 - 40) / 0x28uLL) + 37;
}

_BYTE **tlv::writeV<coex::tlv::abm::LTECarrierInformationSet>(_BYTE **result, _DWORD *a2)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;

  v2 = *result;
  *v2 = -51 * ((a2[2] - *a2) >> 3);
  v3 = v2 + 1;
  v4 = *(_QWORD *)a2;
  v5 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 == v5)
  {
    *result = v3;
  }
  else
  {
    do
    {
      *(_DWORD *)v3 = *(_DWORD *)v4;
      *(_QWORD *)(v3 + 4) = *(_QWORD *)(v4 + 8);
      *((_DWORD *)v3 + 3) = *(_DWORD *)(v4 + 16);
      *((_DWORD *)v3 + 4) = *(_DWORD *)(v4 + 20);
      *((_DWORD *)v3 + 5) = *(_DWORD *)(v4 + 24);
      *((_DWORD *)v3 + 6) = *(_DWORD *)(v4 + 28);
      *((_DWORD *)v3 + 7) = *(_DWORD *)(v4 + 32);
      v6 = v3 + 33;
      v3[32] = *(_BYTE *)(v4 + 36);
      v4 += 40;
      v3 += 33;
    }
    while (v4 != v5);
    *result = v6;
  }
  return result;
}

void tlv::parseV<coex::tlv::abm::LTE2CarrierInformationSet>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  tlv *v5;
  const unsigned __int8 *v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  char *v10;
  char *v11;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  v9 = *(unsigned __int8 *)v5;
  v8 = (uint64_t)v5 + 1;
  v7 = v9;
  if (v9)
  {
    std::vector<coex::tlv::abm::LTECarrierInformation>::__append((char **)a3, v7);
    v10 = *(char **)a3;
    v11 = *(char **)(a3 + 8);
    if (*(char **)a3 != v11)
    {
      do
      {
        v8 = coex::tlv::abm::parseField(v8, v6, (uint64_t)v10);
        v10 += 40;
      }
      while (v10 != v11);
    }
  }
  *a1 = (tlv *)v8;
}

void sub_1B3D9AF98(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3D9AF84);
}

void sub_1B3D9AFAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<coex::tlv::abm::LTE2CarrierInformationSet>(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[1];
  if (*a1 == v1)
    return 4;
  else
    return 33 * ((v1 - *a1 - 40) / 0x28uLL) + 37;
}

_BYTE **tlv::writeV<coex::tlv::abm::LTE2CarrierInformationSet>(_BYTE **result, _DWORD *a2)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;

  v2 = *result;
  *v2 = -51 * ((a2[2] - *a2) >> 3);
  v3 = v2 + 1;
  v4 = *(_QWORD *)a2;
  v5 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 == v5)
  {
    *result = v3;
  }
  else
  {
    do
    {
      *(_DWORD *)v3 = *(_DWORD *)v4;
      *(_QWORD *)(v3 + 4) = *(_QWORD *)(v4 + 8);
      *((_DWORD *)v3 + 3) = *(_DWORD *)(v4 + 16);
      *((_DWORD *)v3 + 4) = *(_DWORD *)(v4 + 20);
      *((_DWORD *)v3 + 5) = *(_DWORD *)(v4 + 24);
      *((_DWORD *)v3 + 6) = *(_DWORD *)(v4 + 28);
      *((_DWORD *)v3 + 7) = *(_DWORD *)(v4 + 32);
      v6 = v3 + 33;
      v3[32] = *(_BYTE *)(v4 + 36);
      v4 += 40;
      v3 += 33;
    }
    while (v4 != v5);
    *result = v6;
  }
  return result;
}

void tlv::parseV<coex::tlv::abm::NGCCarrierInformationSet>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  tlv *v5;
  const unsigned __int8 *v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  char *v10;
  char *v11;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  v9 = *(unsigned __int8 *)v5;
  v8 = (uint64_t)v5 + 1;
  v7 = v9;
  if (v9)
  {
    std::vector<coex::tlv::abm::NGCCarrierInformation>::__append((char **)a3, v7);
    v10 = *(char **)a3;
    v11 = *(char **)(a3 + 8);
    if (*(char **)a3 != v11)
    {
      do
      {
        v8 = coex::tlv::abm::parseField(v8, v6, (uint64_t)v10);
        v10 += 28;
      }
      while (v10 != v11);
    }
  }
  *a1 = (tlv *)v8;
}

void sub_1B3D9B298(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3D9B284);
}

void sub_1B3D9B2AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<coex::tlv::abm::NGCCarrierInformationSet>(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[1];
  if (*a1 == v1)
    return 4;
  else
    return 26 * ((v1 - *a1 - 28) / 0x1CuLL) + 30;
}

_BYTE **tlv::writeV<coex::tlv::abm::NGCCarrierInformationSet>(_BYTE **result, _DWORD *a2)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *result;
  *v2 = -73 * ((a2[2] - *a2) >> 2);
  v3 = v2 + 1;
  v4 = *(_QWORD *)a2;
  v5 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 != v5)
  {
    do
    {
      *(_DWORD *)v3 = *(_DWORD *)v4;
      *((_DWORD *)v3 + 1) = *(_DWORD *)(v4 + 4);
      *((_DWORD *)v3 + 2) = *(_DWORD *)(v4 + 8);
      *((_DWORD *)v3 + 3) = *(_DWORD *)(v4 + 12);
      *((_DWORD *)v3 + 4) = *(_DWORD *)(v4 + 16);
      *((_WORD *)v3 + 10) = *(_WORD *)(v4 + 20);
      *((_WORD *)v3 + 11) = *(_WORD *)(v4 + 22);
      *((_WORD *)v3 + 12) = *(_WORD *)(v4 + 24);
      v3 += 26;
      v4 += 28;
    }
    while (v4 != v5);
  }
  *result = v3;
  return result;
}

void tlv::parseV<coex::tlv::abm::NGC2CarrierInformationSet>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  tlv *v5;
  const unsigned __int8 *v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  char *v10;
  char *v11;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  v9 = *(unsigned __int8 *)v5;
  v8 = (uint64_t)v5 + 1;
  v7 = v9;
  if (v9)
  {
    std::vector<coex::tlv::abm::NGCCarrierInformation>::__append((char **)a3, v7);
    v10 = *(char **)a3;
    v11 = *(char **)(a3 + 8);
    if (*(char **)a3 != v11)
    {
      do
      {
        v8 = coex::tlv::abm::parseField(v8, v6, (uint64_t)v10);
        v10 += 28;
      }
      while (v10 != v11);
    }
  }
  *a1 = (tlv *)v8;
}

void sub_1B3D9B59C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3D9B588);
}

void sub_1B3D9B5B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<coex::tlv::abm::NGC2CarrierInformationSet>(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[1];
  if (*a1 == v1)
    return 4;
  else
    return 26 * ((v1 - *a1 - 28) / 0x1CuLL) + 30;
}

_BYTE **tlv::writeV<coex::tlv::abm::NGC2CarrierInformationSet>(_BYTE **result, _DWORD *a2)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *result;
  *v2 = -73 * ((a2[2] - *a2) >> 2);
  v3 = v2 + 1;
  v4 = *(_QWORD *)a2;
  v5 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 != v5)
  {
    do
    {
      *(_DWORD *)v3 = *(_DWORD *)v4;
      *((_DWORD *)v3 + 1) = *(_DWORD *)(v4 + 4);
      *((_DWORD *)v3 + 2) = *(_DWORD *)(v4 + 8);
      *((_DWORD *)v3 + 3) = *(_DWORD *)(v4 + 12);
      *((_DWORD *)v3 + 4) = *(_DWORD *)(v4 + 16);
      *((_WORD *)v3 + 10) = *(_WORD *)(v4 + 20);
      *((_WORD *)v3 + 11) = *(_WORD *)(v4 + 22);
      *((_WORD *)v3 + 12) = *(_WORD *)(v4 + 24);
      v3 += 26;
      v4 += 28;
    }
    while (v4 != v5);
  }
  *result = v3;
  return result;
}

char *coex::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, _DWORD *a3)
{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

uint64_t tlv::parseV<coex::tlv::abm::LTEOffPeriod>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3D9B71C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::LTEOffPeriod>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::LTEOffPeriod>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::LTE2OffPeriod>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3D9B7D4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::LTE2OffPeriod>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::LTE2OffPeriod>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

unint64_t tlv::parseV<coex::tlv::abm::BandInfoSet>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t v4;
  const unsigned __int8 *v5;
  unsigned int v6;
  uint64_t v7;
  tlv *v8;

  v3 = *a1;
  v4 = a2;
  v5 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v5, (const unsigned __int8 *)4);
  v6 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v5, (const unsigned __int8 *)4);
  v7 = *((unsigned int *)v3 + 1);
  v8 = (tlv *)((char *)v3 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 8), v5, (const unsigned __int8 *)8);
  if ((v4 & 0xFFFFFFFFFFFFFFF8) != 8)
    v8 = (tlv *)((char *)v3 + 16);
  *a1 = v8;
  return v6 | (unint64_t)(v7 << 32);
}

void sub_1B3D9B968(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3D9B948);
}

uint64_t tlv::size<coex::tlv::abm::BandInfoSet>()
{
  return 19;
}

uint64_t *tlv::writeV<coex::tlv::abm::BandInfoSet>(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *(_DWORD *)v2 = *(_DWORD *)a2;
  *(_DWORD *)(v2 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(a2 + 8);
  *result = v2 + 16;
  return result;
}

char *tlv::parseV<coex::tlv::abm::LTEBandInformationSet>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  char *result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  result = coex::tlv::abm::parseField(*a1, (const unsigned __int8 *)*a1 + a2, (char **)a3);
  *a1 = (tlv *)result;
  return result;
}

void sub_1B3D9BA54(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3D9BA48);
}

void sub_1B3D9BA64(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<coex::tlv::abm::LTEBandInformationSet>(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[1];
  if (*a1 == v1)
    return 4;
  else
    return ((v1 - *a1 - 16) & 0xFFFFFFFFFFFFFFF0) + 20;
}

_BYTE **tlv::writeV<coex::tlv::abm::LTEBandInformationSet>(_BYTE **result, _DWORD *a2)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *result;
  *v2 = (a2[2] - *a2) >> 4;
  v3 = v2 + 1;
  v4 = *(_QWORD *)a2;
  v5 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 != v5)
  {
    do
    {
      *(_DWORD *)v3 = *(_DWORD *)v4;
      *((_DWORD *)v3 + 1) = *(_DWORD *)(v4 + 4);
      *((_QWORD *)v3 + 1) = *(_QWORD *)(v4 + 8);
      v3 += 16;
      v4 += 16;
    }
    while (v4 != v5);
  }
  *result = v3;
  return result;
}

char *tlv::parseV<coex::tlv::abm::TDSCDMABandInformationSet>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  char *result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  result = coex::tlv::abm::parseField(*a1, (const unsigned __int8 *)*a1 + a2, (char **)a3);
  *a1 = (tlv *)result;
  return result;
}

void sub_1B3D9BCA0(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3D9BC94);
}

void sub_1B3D9BCB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<coex::tlv::abm::TDSCDMABandInformationSet>(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[1];
  if (*a1 == v1)
    return 4;
  else
    return ((v1 - *a1 - 16) & 0xFFFFFFFFFFFFFFF0) + 20;
}

_BYTE **tlv::writeV<coex::tlv::abm::TDSCDMABandInformationSet>(_BYTE **result, _DWORD *a2)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *result;
  *v2 = (a2[2] - *a2) >> 4;
  v3 = v2 + 1;
  v4 = *(_QWORD *)a2;
  v5 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 != v5)
  {
    do
    {
      *(_DWORD *)v3 = *(_DWORD *)v4;
      *((_DWORD *)v3 + 1) = *(_DWORD *)(v4 + 4);
      *((_QWORD *)v3 + 1) = *(_QWORD *)(v4 + 8);
      v3 += 16;
      v4 += 16;
    }
    while (v4 != v5);
  }
  *result = v3;
  return result;
}

char *tlv::parseV<coex::tlv::abm::GSMBandInformationSet>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  char *result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  result = coex::tlv::abm::parseField(*a1, (const unsigned __int8 *)*a1 + a2, (char **)a3);
  *a1 = (tlv *)result;
  return result;
}

void sub_1B3D9BEEC(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3D9BEE0);
}

void sub_1B3D9BEFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<coex::tlv::abm::GSMBandInformationSet>(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[1];
  if (*a1 == v1)
    return 4;
  else
    return ((v1 - *a1 - 16) & 0xFFFFFFFFFFFFFFF0) + 20;
}

_BYTE **tlv::writeV<coex::tlv::abm::GSMBandInformationSet>(_BYTE **result, _DWORD *a2)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *result;
  *v2 = (a2[2] - *a2) >> 4;
  v3 = v2 + 1;
  v4 = *(_QWORD *)a2;
  v5 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 != v5)
  {
    do
    {
      *(_DWORD *)v3 = *(_DWORD *)v4;
      *((_DWORD *)v3 + 1) = *(_DWORD *)(v4 + 4);
      *((_QWORD *)v3 + 1) = *(_QWORD *)(v4 + 8);
      v3 += 16;
      v4 += 16;
    }
    while (v4 != v5);
  }
  *result = v3;
  return result;
}

char *tlv::parseV<coex::tlv::abm::ONEXBandInformationSet>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  char *result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  result = coex::tlv::abm::parseField(*a1, (const unsigned __int8 *)*a1 + a2, (char **)a3);
  *a1 = (tlv *)result;
  return result;
}

void sub_1B3D9C138(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3D9C12CLL);
}

void sub_1B3D9C148(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<coex::tlv::abm::ONEXBandInformationSet>(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[1];
  if (*a1 == v1)
    return 4;
  else
    return ((v1 - *a1 - 16) & 0xFFFFFFFFFFFFFFF0) + 20;
}

_BYTE **tlv::writeV<coex::tlv::abm::ONEXBandInformationSet>(_BYTE **result, _DWORD *a2)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *result;
  *v2 = (a2[2] - *a2) >> 4;
  v3 = v2 + 1;
  v4 = *(_QWORD *)a2;
  v5 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 != v5)
  {
    do
    {
      *(_DWORD *)v3 = *(_DWORD *)v4;
      *((_DWORD *)v3 + 1) = *(_DWORD *)(v4 + 4);
      *((_QWORD *)v3 + 1) = *(_QWORD *)(v4 + 8);
      v3 += 16;
      v4 += 16;
    }
    while (v4 != v5);
  }
  *result = v3;
  return result;
}

char *tlv::parseV<coex::tlv::abm::HDRBandInformationSet>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  char *result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  result = coex::tlv::abm::parseField(*a1, (const unsigned __int8 *)*a1 + a2, (char **)a3);
  *a1 = (tlv *)result;
  return result;
}

void sub_1B3D9C384(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3D9C378);
}

void sub_1B3D9C394(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<coex::tlv::abm::HDRBandInformationSet>(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[1];
  if (*a1 == v1)
    return 4;
  else
    return ((v1 - *a1 - 16) & 0xFFFFFFFFFFFFFFF0) + 20;
}

_BYTE **tlv::writeV<coex::tlv::abm::HDRBandInformationSet>(_BYTE **result, _DWORD *a2)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *result;
  *v2 = (a2[2] - *a2) >> 4;
  v3 = v2 + 1;
  v4 = *(_QWORD *)a2;
  v5 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 != v5)
  {
    do
    {
      *(_DWORD *)v3 = *(_DWORD *)v4;
      *((_DWORD *)v3 + 1) = *(_DWORD *)(v4 + 4);
      *((_QWORD *)v3 + 1) = *(_QWORD *)(v4 + 8);
      v3 += 16;
      v4 += 16;
    }
    while (v4 != v5);
  }
  *result = v3;
  return result;
}

char *tlv::parseV<coex::tlv::abm::WCDMABandInformationSet>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  char *result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  result = coex::tlv::abm::parseField(*a1, (const unsigned __int8 *)*a1 + a2, (char **)a3);
  *a1 = (tlv *)result;
  return result;
}

void sub_1B3D9C5D0(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3D9C5C4);
}

void sub_1B3D9C5E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<coex::tlv::abm::WCDMABandInformationSet>(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[1];
  if (*a1 == v1)
    return 4;
  else
    return ((v1 - *a1 - 16) & 0xFFFFFFFFFFFFFFF0) + 20;
}

_BYTE **tlv::writeV<coex::tlv::abm::WCDMABandInformationSet>(_BYTE **result, _DWORD *a2)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *result;
  *v2 = (a2[2] - *a2) >> 4;
  v3 = v2 + 1;
  v4 = *(_QWORD *)a2;
  v5 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 != v5)
  {
    do
    {
      *(_DWORD *)v3 = *(_DWORD *)v4;
      *((_DWORD *)v3 + 1) = *(_DWORD *)(v4 + 4);
      *((_QWORD *)v3 + 1) = *(_QWORD *)(v4 + 8);
      v3 += 16;
      v4 += 16;
    }
    while (v4 != v5);
  }
  *result = v3;
  return result;
}

char *tlv::parseV<coex::tlv::abm::GSM2BandInformationSet>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  char *result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  result = coex::tlv::abm::parseField(*a1, (const unsigned __int8 *)*a1 + a2, (char **)a3);
  *a1 = (tlv *)result;
  return result;
}

void sub_1B3D9C81C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3D9C810);
}

void sub_1B3D9C82C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<coex::tlv::abm::GSM2BandInformationSet>(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[1];
  if (*a1 == v1)
    return 4;
  else
    return ((v1 - *a1 - 16) & 0xFFFFFFFFFFFFFFF0) + 20;
}

_BYTE **tlv::writeV<coex::tlv::abm::GSM2BandInformationSet>(_BYTE **result, _DWORD *a2)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *result;
  *v2 = (a2[2] - *a2) >> 4;
  v3 = v2 + 1;
  v4 = *(_QWORD *)a2;
  v5 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 != v5)
  {
    do
    {
      *(_DWORD *)v3 = *(_DWORD *)v4;
      *((_DWORD *)v3 + 1) = *(_DWORD *)(v4 + 4);
      *((_QWORD *)v3 + 1) = *(_QWORD *)(v4 + 8);
      v3 += 16;
      v4 += 16;
    }
    while (v4 != v5);
  }
  *result = v3;
  return result;
}

char *tlv::parseV<coex::tlv::abm::WCDMA2BandInformationSet>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  char *result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  result = coex::tlv::abm::parseField(*a1, (const unsigned __int8 *)*a1 + a2, (char **)a3);
  *a1 = (tlv *)result;
  return result;
}

void sub_1B3D9CA68(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3D9CA5CLL);
}

void sub_1B3D9CA78(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<coex::tlv::abm::WCDMA2BandInformationSet>(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[1];
  if (*a1 == v1)
    return 4;
  else
    return ((v1 - *a1 - 16) & 0xFFFFFFFFFFFFFFF0) + 20;
}

_BYTE **tlv::writeV<coex::tlv::abm::WCDMA2BandInformationSet>(_BYTE **result, _DWORD *a2)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *result;
  *v2 = (a2[2] - *a2) >> 4;
  v3 = v2 + 1;
  v4 = *(_QWORD *)a2;
  v5 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 != v5)
  {
    do
    {
      *(_DWORD *)v3 = *(_DWORD *)v4;
      *((_DWORD *)v3 + 1) = *(_DWORD *)(v4 + 4);
      *((_QWORD *)v3 + 1) = *(_QWORD *)(v4 + 8);
      v3 += 16;
      v4 += 16;
    }
    while (v4 != v5);
  }
  *result = v3;
  return result;
}

char *tlv::parseV<coex::tlv::abm::LTE2BandInformationSet>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  char *result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  result = coex::tlv::abm::parseField(*a1, (const unsigned __int8 *)*a1 + a2, (char **)a3);
  *a1 = (tlv *)result;
  return result;
}

void sub_1B3D9CCB4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3D9CCA8);
}

void sub_1B3D9CCC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<coex::tlv::abm::LTE2BandInformationSet>(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[1];
  if (*a1 == v1)
    return 4;
  else
    return ((v1 - *a1 - 16) & 0xFFFFFFFFFFFFFFF0) + 20;
}

_BYTE **tlv::writeV<coex::tlv::abm::LTE2BandInformationSet>(_BYTE **result, _DWORD *a2)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *result;
  *v2 = (a2[2] - *a2) >> 4;
  v3 = v2 + 1;
  v4 = *(_QWORD *)a2;
  v5 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 != v5)
  {
    do
    {
      *(_DWORD *)v3 = *(_DWORD *)v4;
      *((_DWORD *)v3 + 1) = *(_DWORD *)(v4 + 4);
      *((_QWORD *)v3 + 1) = *(_QWORD *)(v4 + 8);
      v3 += 16;
      v4 += 16;
    }
    while (v4 != v5);
  }
  *result = v3;
  return result;
}

char *tlv::parseV<coex::tlv::abm::NGCBandInformationSet>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  char *result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  result = coex::tlv::abm::parseField(*a1, (const unsigned __int8 *)*a1 + a2, (char **)a3);
  *a1 = (tlv *)result;
  return result;
}

void sub_1B3D9CF00(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3D9CEF4);
}

void sub_1B3D9CF10(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<coex::tlv::abm::NGCBandInformationSet>(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[1];
  if (*a1 == v1)
    return 4;
  else
    return ((v1 - *a1 - 16) & 0xFFFFFFFFFFFFFFF0) + 20;
}

_BYTE **tlv::writeV<coex::tlv::abm::NGCBandInformationSet>(_BYTE **result, _DWORD *a2)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *result;
  *v2 = (a2[2] - *a2) >> 4;
  v3 = v2 + 1;
  v4 = *(_QWORD *)a2;
  v5 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 != v5)
  {
    do
    {
      *(_DWORD *)v3 = *(_DWORD *)v4;
      *((_DWORD *)v3 + 1) = *(_DWORD *)(v4 + 4);
      *((_QWORD *)v3 + 1) = *(_QWORD *)(v4 + 8);
      v3 += 16;
      v4 += 16;
    }
    while (v4 != v5);
  }
  *result = v3;
  return result;
}

char *tlv::parseV<coex::tlv::abm::NGC2BandInformationSet>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  char *result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  result = coex::tlv::abm::parseField(*a1, (const unsigned __int8 *)*a1 + a2, (char **)a3);
  *a1 = (tlv *)result;
  return result;
}

void sub_1B3D9D14C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3D9D140);
}

void sub_1B3D9D15C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<coex::tlv::abm::NGC2BandInformationSet>(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[1];
  if (*a1 == v1)
    return 4;
  else
    return ((v1 - *a1 - 16) & 0xFFFFFFFFFFFFFFF0) + 20;
}

_BYTE **tlv::writeV<coex::tlv::abm::NGC2BandInformationSet>(_BYTE **result, _DWORD *a2)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *result;
  *v2 = (a2[2] - *a2) >> 4;
  v3 = v2 + 1;
  v4 = *(_QWORD *)a2;
  v5 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 != v5)
  {
    do
    {
      *(_DWORD *)v3 = *(_DWORD *)v4;
      *((_DWORD *)v3 + 1) = *(_DWORD *)(v4 + 4);
      *((_QWORD *)v3 + 1) = *(_QWORD *)(v4 + 8);
      v3 += 16;
      v4 += 16;
    }
    while (v4 != v5);
  }
  *result = v3;
  return result;
}

unint64_t tlv::parseV<coex::tlv::abm::WLANScanInfo>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  v6 = *((unsigned int *)v3 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 8), v4, (const unsigned __int8 *)4);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 12), v4, (const unsigned __int8 *)4);
  *a1 = (tlv *)((char *)v3 + 16);
  return v5 | (unint64_t)(v6 << 32);
}

void sub_1B3D9D35C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3D9D33CLL);
}

uint64_t tlv::size<coex::tlv::abm::WLANScanInfo>()
{
  return 19;
}

_DWORD **tlv::writeV<coex::tlv::abm::WLANScanInfo>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  v2[3] = a2[3];
  *result = v2 + 4;
  return result;
}

unsigned __int8 *coex::tlv::abm::parseField(unsigned __int8 *a1, const unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v6;
  unsigned __int8 *v7;
  char *v8;
  char *v9;
  unint64_t v10;
  unsigned __int8 *result;

  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)1);
  v6 = a1[4];
  v7 = a1 + 5;
  v8 = *(char **)(a3 + 8);
  v9 = *(char **)(a3 + 16);
  v10 = (v9 - v8) >> 3;
  if (v6 <= v10)
  {
    if (v6 < v10)
    {
      v9 = &v8[8 * v6];
      *(_QWORD *)(a3 + 16) = v9;
    }
  }
  else
  {
    std::vector<coex::tlv::abm::BandInfo>::__append((void **)(a3 + 8), v6 - v10);
    v8 = *(char **)(a3 + 8);
    v9 = *(char **)(a3 + 16);
  }
  while (v8 != v9)
  {
    tlv::throwIfNotEnoughBytes((tlv *)v7, a2, (const unsigned __int8 *)4);
    *(_DWORD *)v8 = *(_DWORD *)v7;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 4), a2, (const unsigned __int8 *)4);
    *((_DWORD *)v8 + 1) = *((_DWORD *)v7 + 1);
    v7 += 8;
    v8 += 8;
  }
  tlv::throwIfNotEnoughBytes((tlv *)v7, a2, (const unsigned __int8 *)1);
  *(_DWORD *)(a3 + 32) = *v7;
  tlv::throwIfNotEnoughBytes((tlv *)(v7 + 1), a2, (const unsigned __int8 *)1);
  result = v7 + 2;
  *(_DWORD *)(a3 + 36) = v7[1];
  return result;
}

unint64_t coex::tlv::abm::writeField(uint64_t a1, _DWORD *a2)
{
  unint64_t v2;
  char *v3;
  char *v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 *v10;
  _OWORD *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  unint64_t result;

  *(_DWORD *)a1 = *a2;
  v2 = a1 + 5;
  *(_BYTE *)(a1 + 4) = (a2[4] - a2[2]) >> 3;
  v4 = (char *)*((_QWORD *)a2 + 1);
  v3 = (char *)*((_QWORD *)a2 + 2);
  if (v4 != v3)
  {
    v5 = v3 - v4 - 8;
    if (v5 < 0x58)
      goto LABEL_15;
    if (v2 < (unint64_t)&v4[(v5 & 0xFFFFFFFFFFFFFFF8) + 8]
      && (unint64_t)v4 < (v5 & 0xFFFFFFFFFFFFFFF8) + a1 + 13)
    {
      goto LABEL_15;
    }
    v7 = (v5 >> 3) + 1;
    v8 = 8 * (v7 & 0x3FFFFFFFFFFFFFF8);
    v2 += v8;
    v9 = &v4[v8];
    v10 = (__int128 *)(v4 + 32);
    v11 = (_OWORD *)(a1 + 37);
    v12 = v7 & 0x3FFFFFFFFFFFFFF8;
    do
    {
      v14 = *(v10 - 2);
      v13 = *(v10 - 1);
      v16 = *v10;
      v15 = v10[1];
      v10 += 4;
      *(v11 - 2) = v14;
      *(v11 - 1) = v13;
      *v11 = v16;
      v11[1] = v15;
      v11 += 4;
      v12 -= 8;
    }
    while (v12);
    v4 = v9;
    if (v7 != (v7 & 0x3FFFFFFFFFFFFFF8))
    {
LABEL_15:
      do
      {
        *(_DWORD *)v2 = *(_DWORD *)v4;
        *(_DWORD *)(v2 + 4) = *((_DWORD *)v4 + 1);
        v2 += 8;
        v4 += 8;
      }
      while (v4 != v3);
    }
  }
  *(_BYTE *)v2 = a2[8];
  result = v2 + 2;
  *(_BYTE *)(v2 + 1) = a2[9];
  return result;
}

uint64_t coex::tlv::abm::getFieldSize(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a1 + 8))
    return 7;
  else
    return (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) | 7;
}

{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const double *v10;
  int64x2_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int64x2_t v14;
  const double *v15;
  unint64_t v16;
  float64x2x4_t v17;
  float64x2x4_t v18;

  v2 = *(_QWORD *)(a1 + 16);
  v1 = *(_QWORD *)(a1 + 24);
  if (v2 == v1)
    return 10;
  v3 = v1 - v2 - 32;
  if (v3 >= 0x80)
  {
    v7 = (v3 >> 5) + 1;
    v8 = v7 & 3;
    if ((v7 & 3) == 0)
      v8 = 4;
    v9 = v7 - v8;
    v5 = v2 + 32 * v9;
    v10 = (const double *)(v2 + 72);
    v11 = 0uLL;
    v12 = (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFFCLL);
    v13 = (int8x16_t)vdupq_n_s64(2uLL);
    v14 = 0uLL;
    do
    {
      v15 = v10 - 8;
      v17 = vld4q_f64(v15);
      v18 = vld4q_f64(v10);
      v11 = vaddq_s64((int64x2_t)vbslq_s8((int8x16_t)vceqq_s64((int64x2_t)v17.val[1], (int64x2_t)v17.val[0]), v13, vorrq_s8(vandq_s8((int8x16_t)vsubq_s64((int64x2_t)v17.val[1], (int64x2_t)v17.val[0]), v12), v13)), v11);
      v14 = vaddq_s64((int64x2_t)vbslq_s8((int8x16_t)vceqq_s64((int64x2_t)v18.val[1], (int64x2_t)v18.val[0]), v13, vorrq_s8(vandq_s8((int8x16_t)vsubq_s64((int64x2_t)v18.val[1], (int64x2_t)v18.val[0]), v12), v13)), v14);
      v10 += 16;
      v9 -= 4;
    }
    while (v9);
    v4 = vaddvq_s64(vaddq_s64(v14, v11));
  }
  else
  {
    v4 = 0;
    v5 = *(_QWORD *)(a1 + 16);
  }
  do
  {
    v16 = (*(_QWORD *)(v5 + 16) - *(_QWORD *)(v5 + 8)) & 0xFFFFFFFFFFFFFFFCLL | 2;
    if (*(_QWORD *)(v5 + 16) == *(_QWORD *)(v5 + 8))
      v16 = 2;
    v4 += v16;
    v5 += 32;
  }
  while (v5 != v1);
  return v4 + 10;
}

{
  return *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) + 5;
}

unsigned __int8 *tlv::parseV<coex::tlv::abm::WLANConnectionInfo>@<X0>(unsigned __int8 **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int8 *result;

  *(_QWORD *)a3 = 0xAAAAAAAA00000000;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  result = coex::tlv::abm::parseField(*a1, &(*a1)[a2], a3);
  *a1 = result;
  return result;
}

void sub_1B3D9D5EC(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3D9D5DCLL);
}

void sub_1B3D9D5FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<coex::tlv::abm::WLANConnectionInfo>(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a1 + 8))
    return 10;
  else
    return ((*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) | 7) + 3;
}

uint64_t *tlv::writeV<coex::tlv::abm::WLANConnectionInfo>(uint64_t *result, _DWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  char *v4;
  char *v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int128 *v11;
  _OWORD *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v2 = *result;
  *(_DWORD *)v2 = *a2;
  v3 = v2 + 5;
  *(_BYTE *)(v2 + 4) = (a2[4] - a2[2]) >> 3;
  v5 = (char *)*((_QWORD *)a2 + 1);
  v4 = (char *)*((_QWORD *)a2 + 2);
  if (v5 != v4)
  {
    v6 = v4 - v5 - 8;
    if (v6 < 0x58)
      goto LABEL_15;
    if (v3 < (unint64_t)&v5[(v6 & 0xFFFFFFFFFFFFFFF8) + 8]
      && (unint64_t)v5 < (v6 & 0xFFFFFFFFFFFFFFF8) + v2 + 13)
    {
      goto LABEL_15;
    }
    v8 = (v6 >> 3) + 1;
    v9 = 8 * (v8 & 0x3FFFFFFFFFFFFFF8);
    v3 += v9;
    v10 = &v5[v9];
    v11 = (__int128 *)(v5 + 32);
    v12 = (_OWORD *)(v2 + 37);
    v13 = v8 & 0x3FFFFFFFFFFFFFF8;
    do
    {
      v15 = *(v11 - 2);
      v14 = *(v11 - 1);
      v17 = *v11;
      v16 = v11[1];
      v11 += 4;
      *(v12 - 2) = v15;
      *(v12 - 1) = v14;
      *v12 = v17;
      v12[1] = v16;
      v12 += 4;
      v13 -= 8;
    }
    while (v13);
    v5 = v10;
    if (v8 != (v8 & 0x3FFFFFFFFFFFFFF8))
    {
LABEL_15:
      do
      {
        *(_DWORD *)v3 = *(_DWORD *)v5;
        *(_DWORD *)(v3 + 4) = *((_DWORD *)v5 + 1);
        v3 += 8;
        v5 += 8;
      }
      while (v5 != v4);
    }
  }
  *(_BYTE *)v3 = a2[8];
  *(_BYTE *)(v3 + 1) = a2[9];
  *result = v3 + 2;
  return result;
}

tlv *coex::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, _QWORD *a3)
{
  tlv *v5;
  uint64_t v6;

  v5 = a1;
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)8);
  if ((unint64_t)(a2 - (const unsigned __int8 *)v5) >= 8)
  {
    v6 = *(_QWORD *)v5;
    v5 = (tlv *)((char *)v5 + 8);
    *a3 = v6;
  }
  return v5;
}

{
  tlv *v5;
  uint64_t v6;

  v5 = a1;
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)8);
  if ((unint64_t)(a2 - (const unsigned __int8 *)v5) >= 8)
  {
    v6 = *(_QWORD *)v5;
    v5 = (tlv *)((char *)v5 + 8);
    *a3 = v6;
  }
  return v5;
}

{
  tlv *v5;
  uint64_t v6;

  v5 = a1;
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)8);
  if ((unint64_t)(a2 - (const unsigned __int8 *)v5) >= 8)
  {
    v6 = *(_QWORD *)v5;
    v5 = (tlv *)((char *)v5 + 8);
    *a3 = v6;
  }
  return v5;
}

{
  tlv *v5;
  uint64_t v6;

  v5 = a1;
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)8);
  if ((unint64_t)(a2 - (const unsigned __int8 *)v5) >= 8)
  {
    v6 = *(_QWORD *)v5;
    v5 = (tlv *)((char *)v5 + 8);
    *a3 = v6;
  }
  return v5;
}

{
  tlv *v5;
  uint64_t v6;

  v5 = a1;
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)8);
  if ((unint64_t)(a2 - (const unsigned __int8 *)v5) >= 8)
  {
    v6 = *(_QWORD *)v5;
    v5 = (tlv *)((char *)v5 + 8);
    *a3 = v6;
  }
  return v5;
}

_QWORD *coex::tlv::abm::writeField(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

uint64_t tlv::parseV<coex::tlv::abm::Policy>(tlv **a1, unsigned int a2)
{
  tlv *v4;
  uint64_t result;

  v4 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + (int)a2, (const unsigned __int8 *)8);
  if (a2 >= 8)
  {
    result = *(_QWORD *)v4;
    *a1 = (tlv *)((char *)v4 + 8);
  }
  else
  {
    result = 0;
    *a1 = v4;
  }
  return result;
}

uint64_t sub_1B3D9D7DC(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::Policy>()
{
  return 11;
}

_QWORD **tlv::writeV<coex::tlv::abm::Policy>(_QWORD **result, _QWORD *a2)
{
  _QWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

char *coex::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, _BYTE *a3)
{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  return (char *)a1 + 1;
}

_BYTE *coex::tlv::abm::writeField(_BYTE *a1, _BYTE *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

uint64_t tlv::parseV<coex::tlv::abm::PowerThreshold>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3D9D898(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::PowerThreshold>()
{
  return 4;
}

_BYTE **tlv::writeV<coex::tlv::abm::PowerThreshold>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::RBThreshold>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3D9D950(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::RBThreshold>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::RBThreshold>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::ContinuousTxSubframeDenialsThreshold>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3D9DA08(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::ContinuousTxSubframeDenialsThreshold>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::ContinuousTxSubframeDenialsThreshold>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::TxFrameDenialsParameters>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  v6 = *((unsigned int *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 8);
  return (v6 << 32) | v5;
}

uint64_t sub_1B3D9DB24(void *a1)
{
  _QWORD *v1;
  unsigned int v2;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<coex::tlv::abm::TxFrameDenialsParameters>()
{
  return 11;
}

_DWORD **tlv::writeV<coex::tlv::abm::TxFrameDenialsParameters>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  *result = v2 + 2;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::NGCContinuousTxSubframeDenialsThreshold>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3D9DBF4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::NGCContinuousTxSubframeDenialsThreshold>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::NGCContinuousTxSubframeDenialsThreshold>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::NGCTxFrameDenialsParameters>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  v6 = *((unsigned int *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 8);
  return (v6 << 32) | v5;
}

uint64_t sub_1B3D9DD10(void *a1)
{
  _QWORD *v1;
  unsigned int v2;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<coex::tlv::abm::NGCTxFrameDenialsParameters>()
{
  return 11;
}

_DWORD **tlv::writeV<coex::tlv::abm::NGCTxFrameDenialsParameters>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  *result = v2 + 2;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::APTTable>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3D9DDE0(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::APTTable>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::APTTable>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

float tlv::parseV<coex::tlv::abm::ControllerTxPowerLimit>(tlv **a1, int a2)
{
  tlv *v3;
  float result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(float *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

float sub_1B3D9DE98(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0.0;
}

uint64_t tlv::size<coex::tlv::abm::ControllerTxPowerLimit>()
{
  return 7;
}

float tlv::writeV<coex::tlv::abm::ControllerTxPowerLimit>(_DWORD **a1, float *a2)
{
  _DWORD *v2;
  float result;

  v2 = *a1;
  result = *a2;
  *v2 = *(_DWORD *)a2;
  *a1 = v2 + 1;
  return result;
}

float tlv::parseV<coex::tlv::abm::WCI2TxPowerLimit>(tlv **a1, int a2)
{
  tlv *v3;
  float result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(float *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

float sub_1B3D9DF50(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0.0;
}

uint64_t tlv::size<coex::tlv::abm::WCI2TxPowerLimit>()
{
  return 7;
}

float tlv::writeV<coex::tlv::abm::WCI2TxPowerLimit>(_DWORD **a1, float *a2)
{
  _DWORD *v2;
  float result;

  v2 = *a1;
  result = *a2;
  *v2 = *(_DWORD *)a2;
  *a1 = v2 + 1;
  return result;
}

float tlv::parseV<coex::tlv::abm::LinkPathLossThreshold>(tlv **a1, int a2)
{
  tlv *v3;
  float result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(float *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

float sub_1B3D9E008(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0.0;
}

uint64_t tlv::size<coex::tlv::abm::LinkPathLossThreshold>()
{
  return 7;
}

float tlv::writeV<coex::tlv::abm::LinkPathLossThreshold>(_DWORD **a1, float *a2)
{
  _DWORD *v2;
  float result;

  v2 = *a1;
  result = *a2;
  *v2 = *(_DWORD *)a2;
  *a1 = v2 + 1;
  return result;
}

float tlv::parseV<coex::tlv::abm::RBFilterAlpha>(tlv **a1, int a2)
{
  tlv *v3;
  float result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(float *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

float sub_1B3D9E0C0(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0.0;
}

uint64_t tlv::size<coex::tlv::abm::RBFilterAlpha>()
{
  return 7;
}

float tlv::writeV<coex::tlv::abm::RBFilterAlpha>(_DWORD **a1, float *a2)
{
  _DWORD *v2;
  float result;

  v2 = *a1;
  result = *a2;
  *v2 = *(_DWORD *)a2;
  *a1 = v2 + 1;
  return result;
}

float tlv::parseV<coex::tlv::abm::FilteredRBThreshold>(tlv **a1, int a2)
{
  tlv *v3;
  float result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(float *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

float sub_1B3D9E178(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0.0;
}

uint64_t tlv::size<coex::tlv::abm::FilteredRBThreshold>()
{
  return 7;
}

float tlv::writeV<coex::tlv::abm::FilteredRBThreshold>(_DWORD **a1, float *a2)
{
  _DWORD *v2;
  float result;

  v2 = *a1;
  result = *a2;
  *v2 = *(_DWORD *)a2;
  *a1 = v2 + 1;
  return result;
}

char *coex::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, _WORD *a3)
{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

_WORD *coex::tlv::abm::writeField(_WORD *a1, _WORD *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

uint64_t tlv::parseV<coex::tlv::abm::WCI2TxPowerLimitTimeout>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B3D9E230(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::WCI2TxPowerLimitTimeout>()
{
  return 5;
}

_WORD **tlv::writeV<coex::tlv::abm::WCI2TxPowerLimitTimeout>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::ControllerTxPowerLimitTimeout>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B3D9E2E8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::ControllerTxPowerLimitTimeout>()
{
  return 5;
}

_WORD **tlv::writeV<coex::tlv::abm::ControllerTxPowerLimitTimeout>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::TxPowerThresholdForAdvTxNotice>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B3D9E3A0(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::TxPowerThresholdForAdvTxNotice>()
{
  return 5;
}

_WORD **tlv::writeV<coex::tlv::abm::TxPowerThresholdForAdvTxNotice>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::RbThresholdForAdvTxNotice>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3D9E458(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::RbThresholdForAdvTxNotice>()
{
  return 4;
}

_BYTE **tlv::writeV<coex::tlv::abm::RbThresholdForAdvTxNotice>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

char *coex::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  unsigned int v8;
  _DWORD *v9;
  _DWORD *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;

  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  v8 = *(unsigned __int8 *)a1;
  v7 = (char *)a1 + 1;
  v6 = v8;
  v9 = *(_DWORD **)a3;
  v10 = *(_DWORD **)(a3 + 8);
  v11 = ((uint64_t)v10 - *(_QWORD *)a3) >> 3;
  v12 = v8 >= v11;
  v13 = v8 - v11;
  if (v8 <= v11)
  {
    if (!v12)
    {
      v10 = &v9[2 * v6];
      *(_QWORD *)(a3 + 8) = v10;
    }
  }
  else
  {
    std::vector<coex::tlv::abm::BandInfo>::__append((void **)a3, v13);
    v9 = *(_DWORD **)a3;
    v10 = *(_DWORD **)(a3 + 8);
  }
  while (v9 != v10)
  {
    tlv::throwIfNotEnoughBytes((tlv *)v7, a2, (const unsigned __int8 *)4);
    *v9 = *(_DWORD *)v7;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 4), a2, (const unsigned __int8 *)4);
    v9[1] = *((_DWORD *)v7 + 1);
    v7 += 8;
    v9 += 2;
  }
  return v7;
}

{
  uint64_t v6;
  char *v7;
  unsigned int v8;
  _DWORD *v9;
  _DWORD *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;

  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  v8 = *(unsigned __int8 *)a1;
  v7 = (char *)a1 + 1;
  v6 = v8;
  v9 = *(_DWORD **)a3;
  v10 = *(_DWORD **)(a3 + 8);
  v11 = ((uint64_t)v10 - *(_QWORD *)a3) >> 3;
  v12 = v8 >= v11;
  v13 = v8 - v11;
  if (v8 <= v11)
  {
    if (!v12)
    {
      v10 = &v9[2 * v6];
      *(_QWORD *)(a3 + 8) = v10;
    }
  }
  else
  {
    std::vector<coex::tlv::abm::BandInfo>::__append((void **)a3, v13);
    v9 = *(_DWORD **)a3;
    v10 = *(_DWORD **)(a3 + 8);
  }
  while (v9 != v10)
  {
    tlv::throwIfNotEnoughBytes((tlv *)v7, a2, (const unsigned __int8 *)4);
    *v9 = *(_DWORD *)v7;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 4), a2, (const unsigned __int8 *)4);
    v9[1] = *((_DWORD *)v7 + 1);
    v7 += 8;
    v9 += 2;
  }
  return v7;
}

{
  tlv *v5;
  unint64_t v6;

  v5 = a1;
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 4), a2, (const unsigned __int8 *)1);
  v6 = *((unsigned __int8 *)v5 + 4);
  v5 = (tlv *)((char *)v5 + 5);
  tlv::throwIfNotEnoughBytes(v5, a2, (const unsigned __int8 *)v6);
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((_QWORD *)(a3 + 8), (char *)v5, (char *)v5 + v6, v6);
  return (char *)v5 + v6;
}

char *coex::tlv::abm::writeField(_BYTE *a1, _DWORD *a2)
{
  char *result;
  char *v4;
  char *v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int128 *v11;
  _OWORD *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  *a1 = (a2[2] - *a2) >> 3;
  result = a1 + 1;
  v5 = *(char **)a2;
  v4 = (char *)*((_QWORD *)a2 + 1);
  if (*(char **)a2 != v4)
  {
    v6 = v4 - v5 - 8;
    if (v6 < 0x58)
      goto LABEL_14;
    if (result < &v5[(v6 & 0xFFFFFFFFFFFFFFF8) + 8] && v5 < &a1[(v6 & 0xFFFFFFFFFFFFFFF8) + 9])
      goto LABEL_14;
    v8 = (v6 >> 3) + 1;
    v9 = 8 * (v8 & 0x3FFFFFFFFFFFFFF8);
    result += v9;
    v10 = &v5[v9];
    v11 = (__int128 *)(v5 + 32);
    v12 = a1 + 33;
    v13 = v8 & 0x3FFFFFFFFFFFFFF8;
    do
    {
      v15 = *(v11 - 2);
      v14 = *(v11 - 1);
      v17 = *v11;
      v16 = v11[1];
      v11 += 4;
      *(v12 - 2) = v15;
      *(v12 - 1) = v14;
      *v12 = v17;
      v12[1] = v16;
      v12 += 4;
      v13 -= 8;
    }
    while (v13);
    v5 = v10;
    if (v8 != (v8 & 0x3FFFFFFFFFFFFFF8))
    {
LABEL_14:
      do
      {
        *(_DWORD *)result = *(_DWORD *)v5;
        *((_DWORD *)result + 1) = *((_DWORD *)v5 + 1);
        result += 8;
        v5 += 8;
      }
      while (v5 != v4);
    }
  }
  return result;
}

{
  char *result;
  char *v4;
  char *v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int128 *v11;
  _OWORD *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  *a1 = (a2[2] - *a2) >> 3;
  result = a1 + 1;
  v5 = *(char **)a2;
  v4 = (char *)*((_QWORD *)a2 + 1);
  if (*(char **)a2 != v4)
  {
    v6 = v4 - v5 - 8;
    if (v6 < 0x58)
      goto LABEL_14;
    if (result < &v5[(v6 & 0xFFFFFFFFFFFFFFF8) + 8] && v5 < &a1[(v6 & 0xFFFFFFFFFFFFFFF8) + 9])
      goto LABEL_14;
    v8 = (v6 >> 3) + 1;
    v9 = 8 * (v8 & 0x3FFFFFFFFFFFFFF8);
    result += v9;
    v10 = &v5[v9];
    v11 = (__int128 *)(v5 + 32);
    v12 = a1 + 33;
    v13 = v8 & 0x3FFFFFFFFFFFFFF8;
    do
    {
      v15 = *(v11 - 2);
      v14 = *(v11 - 1);
      v17 = *v11;
      v16 = v11[1];
      v11 += 4;
      *(v12 - 2) = v15;
      *(v12 - 1) = v14;
      *v12 = v17;
      v12[1] = v16;
      v12 += 4;
      v13 -= 8;
    }
    while (v13);
    v5 = v10;
    if (v8 != (v8 & 0x3FFFFFFFFFFFFFF8))
    {
LABEL_14:
      do
      {
        *(_DWORD *)result = *(_DWORD *)v5;
        *((_DWORD *)result + 1) = *((_DWORD *)v5 + 1);
        result += 8;
        v5 += 8;
      }
      while (v5 != v4);
    }
  }
  return result;
}

void tlv::parseV<coex::tlv::abm::ScanFreqBandFilter>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  tlv *v5;
  const unsigned __int8 *v6;
  unint64_t v7;
  char *v8;
  unsigned int v9;
  _DWORD *v10;
  _DWORD *v11;
  char *v12;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  v9 = *(unsigned __int8 *)v5;
  v8 = (char *)v5 + 1;
  v7 = v9;
  if (v9)
  {
    std::vector<coex::tlv::abm::BandInfo>::__append((void **)a3, v7);
    v10 = *(_DWORD **)a3;
    v11 = *(_DWORD **)(a3 + 8);
    if (*(_DWORD **)a3 != v11)
    {
      do
      {
        v12 = v8;
        tlv::throwIfNotEnoughBytes((tlv *)v8, v6, (const unsigned __int8 *)4);
        *v10 = *(_DWORD *)v8;
        tlv::throwIfNotEnoughBytes((tlv *)(v8 + 4), v6, (const unsigned __int8 *)4);
        v10[1] = *((_DWORD *)v8 + 1);
        v10 += 2;
        v8 += 8;
      }
      while (v10 != v11);
      v8 = v12 + 8;
    }
  }
  *a1 = (tlv *)v8;
}

void sub_1B3D9E6E4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3D9E6CCLL);
}

void sub_1B3D9E6F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<coex::tlv::abm::ScanFreqBandFilter>(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[1];
  if (v1 == *a1)
    return 4;
  else
    return (v1 - *a1) & 0xFFFFFFFFFFFFFFF8 | 4;
}

char **tlv::writeV<coex::tlv::abm::ScanFreqBandFilter>(char **result, _DWORD *a2)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __int128 *v12;
  _OWORD *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v2 = *result;
  v3 = *result;
  *v3 = (a2[2] - *a2) >> 3;
  v4 = v3 + 1;
  v6 = *(char **)a2;
  v5 = (char *)*((_QWORD *)a2 + 1);
  if (*(char **)a2 != v5)
  {
    v7 = v5 - v6 - 8;
    if (v7 < 0x58)
      goto LABEL_15;
    if (v4 < &v6[(v7 & 0xFFFFFFFFFFFFFFF8) + 8] && v6 < &v2[(v7 & 0xFFFFFFFFFFFFFFF8) + 9])
      goto LABEL_15;
    v9 = (v7 >> 3) + 1;
    v10 = 8 * (v9 & 0x3FFFFFFFFFFFFFF8);
    v4 += v10;
    v11 = &v6[v10];
    v12 = (__int128 *)(v6 + 32);
    v13 = v2 + 33;
    v14 = v9 & 0x3FFFFFFFFFFFFFF8;
    do
    {
      v16 = *(v12 - 2);
      v15 = *(v12 - 1);
      v18 = *v12;
      v17 = v12[1];
      v12 += 4;
      *(v13 - 2) = v16;
      *(v13 - 1) = v15;
      *v13 = v18;
      v13[1] = v17;
      v13 += 4;
      v14 -= 8;
    }
    while (v14);
    v6 = v11;
    if (v9 != (v9 & 0x3FFFFFFFFFFFFFF8))
    {
LABEL_15:
      do
      {
        *(_DWORD *)v4 = *(_DWORD *)v6;
        *((_DWORD *)v4 + 1) = *((_DWORD *)v6 + 1);
        v4 += 8;
        v6 += 8;
      }
      while (v6 != v5);
    }
  }
  *result = v4;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::LTETransportBlockCount>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3D9E878(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::LTETransportBlockCount>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::LTETransportBlockCount>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::BandSet>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  tlv *v5;
  uint64_t v6;
  const unsigned __int8 *v7;
  tlv *v8;
  uint64_t result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v5 = *a1;
  v6 = a2;
  v7 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v7, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 4), v7, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *((_DWORD *)v5 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 8), v7, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *((_DWORD *)v5 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 12), v7, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *((_DWORD *)v5 + 3);
  v8 = (tlv *)((char *)v5 + 16);
  result = tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 16), v7, (const unsigned __int8 *)8);
  if ((v6 & 0xFFFFFFFFFFFFFFF8) != 0x10)
  {
    *(_QWORD *)(a3 + 16) = *((_QWORD *)v5 + 2);
    v8 = (tlv *)((char *)v5 + 24);
  }
  *a1 = v8;
  return result;
}

void sub_1B3D9EA70(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<coex::tlv::abm::BandSet>()
{
  return 27;
}

uint64_t *tlv::writeV<coex::tlv::abm::BandSet>(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *(_DWORD *)v2 = *(_DWORD *)a2;
  *(_DWORD *)(v2 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(v2 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v2 + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(v2 + 16) = *(_QWORD *)(a2 + 16);
  *result = v2 + 24;
  return result;
}

tlv *coex::tlv::abm::parseField(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)1);
  return tlv::parseSequence<coex::tlv::abm::BandSet>((tlv *)(a1 + 1), a2, a3, *a1);
}

tlv *tlv::parseSequence<coex::tlv::abm::BandSet>(tlv *this, unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  _QWORD *v21;
  _QWORD *v22;
  tlv *v23;

  v8 = *(char **)a3;
  v7 = *(char **)(a3 + 8);
  v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v7[-*(_QWORD *)a3] >> 3);
  v10 = a4 - v9;
  if (a4 <= v9)
  {
    if (a4 < v9)
    {
      v7 = &v8[24 * a4];
      *(_QWORD *)(a3 + 8) = v7;
    }
    if (v8 == v7)
      return this;
  }
  else
  {
    v11 = *(_QWORD *)(a3 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v7) >> 3) >= v10)
    {
      bzero(*(void **)(a3 + 8), 24 * ((24 * v10 - 24) / 0x18) + 24);
      v19 = &v7[24 * ((24 * v10 - 24) / 0x18) + 24];
      *(_QWORD *)(a3 + 8) = v19;
    }
    else
    {
      if (a4 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v12 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v8) >> 3);
      v13 = 2 * v12;
      if (2 * v12 <= a4)
        v13 = a4;
      if (v12 >= 0x555555555555555)
        v14 = 0xAAAAAAAAAAAAAAALL;
      else
        v14 = v13;
      if (v14 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v15 = 24 * v14;
      v16 = (char *)operator new(24 * v14);
      v17 = &v16[24 * v9];
      v18 = &v16[v15];
      bzero(v17, 24 * ((24 * v10 - 24) / 0x18) + 24);
      v19 = &v17[24 * ((24 * v10 - 24) / 0x18) + 24];
      if (v7 != v8)
      {
        do
        {
          v20 = *(_OWORD *)(v7 - 24);
          *((_QWORD *)v17 - 1) = *((_QWORD *)v7 - 1);
          *(_OWORD *)(v17 - 24) = v20;
          v17 -= 24;
          v7 -= 24;
        }
        while (v7 != v8);
        v7 = v8;
      }
      *(_QWORD *)a3 = v17;
      *(_QWORD *)(a3 + 8) = v19;
      *(_QWORD *)(a3 + 16) = v18;
      if (v7)
      {
        operator delete(v7);
        v19 = *(char **)(a3 + 8);
      }
    }
    v8 = *(char **)a3;
    v7 = v19;
    if (*(char **)a3 == v19)
      return this;
  }
  v21 = v8 + 16;
  do
  {
    tlv::throwIfNotEnoughBytes(this, a2, (const unsigned __int8 *)4);
    *((_DWORD *)v21 - 4) = *(_DWORD *)this;
    v22 = v21 - 2;
    tlv::throwIfNotEnoughBytes((tlv *)((char *)this + 4), a2, (const unsigned __int8 *)4);
    *((_DWORD *)v21 - 3) = *((_DWORD *)this + 1);
    tlv::throwIfNotEnoughBytes((tlv *)((char *)this + 8), a2, (const unsigned __int8 *)4);
    *((_DWORD *)v21 - 2) = *((_DWORD *)this + 2);
    tlv::throwIfNotEnoughBytes((tlv *)((char *)this + 12), a2, (const unsigned __int8 *)4);
    *((_DWORD *)v21 - 1) = *((_DWORD *)this + 3);
    v23 = (tlv *)((char *)this + 16);
    tlv::throwIfNotEnoughBytes((tlv *)((char *)this + 16), a2, (const unsigned __int8 *)8);
    if ((unint64_t)(a2 - ((unsigned __int8 *)this + 16)) >= 8)
    {
      *v21 = *((_QWORD *)this + 2);
      v23 = (tlv *)((char *)this + 24);
    }
    v21 += 3;
    this = v23;
  }
  while (v22 + 3 != (_QWORD *)v7);
  return v23;
}

tlv *tlv::parseV<coex::tlv::abm::BandFilters>@<X0>(tlv **a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  tlv *v5;
  unsigned __int8 *v6;
  tlv *result;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v5 = *a1;
  v6 = (unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  result = tlv::parseSequence<coex::tlv::abm::BandSet>((tlv *)((char *)v5 + 1), v6, (uint64_t)a3, *(unsigned __int8 *)v5);
  *a1 = result;
  return result;
}

void sub_1B3D9EE8C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3D9EE7CLL);
}

void sub_1B3D9EE9C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<coex::tlv::abm::BandFilters>(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[1];
  if (*a1 == v1)
    return 4;
  else
    return 24 * ((v1 - *a1 - 24) / 0x18uLL) + 28;
}

_BYTE **tlv::writeV<coex::tlv::abm::BandFilters>(_BYTE **result, _DWORD *a2)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *result;
  *v2 = -85 * ((a2[2] - *a2) >> 3);
  v3 = v2 + 1;
  v4 = *(_QWORD *)a2;
  v5 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 != v5)
  {
    do
    {
      *(_DWORD *)v3 = *(_DWORD *)v4;
      *((_DWORD *)v3 + 1) = *(_DWORD *)(v4 + 4);
      *((_DWORD *)v3 + 2) = *(_DWORD *)(v4 + 8);
      *((_DWORD *)v3 + 3) = *(_DWORD *)(v4 + 12);
      *((_QWORD *)v3 + 2) = *(_QWORD *)(v4 + 16);
      v3 += 24;
      v4 += 24;
    }
    while (v4 != v5);
  }
  *result = v3;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::MinMax>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  v6 = *((unsigned int *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 8);
  return (v6 << 32) | v5;
}

uint64_t sub_1B3D9F048(void *a1)
{
  _QWORD *v1;
  unsigned int v2;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<coex::tlv::abm::MinMax>()
{
  return 11;
}

_DWORD **tlv::writeV<coex::tlv::abm::MinMax>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  *result = v2 + 2;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::LTEInstance>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3D9F118(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::LTEInstance>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::LTEInstance>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::TechInstance>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3D9F1D0(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::TechInstance>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::TechInstance>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::CoexTech>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3D9F288(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::CoexTech>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::CoexTech>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::SecondaryLTEInstance>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3D9F340(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::SecondaryLTEInstance>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::SecondaryLTEInstance>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::SecondaryTechInstance>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3D9F3F8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::SecondaryTechInstance>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::SecondaryTechInstance>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::SecondaryCoexTech>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3D9F4B0(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::SecondaryCoexTech>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::SecondaryCoexTech>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

void tlv::parseV<coex::tlv::abm::TimeShareReqBandInformationSet>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  tlv *v5;
  const unsigned __int8 *v6;
  unint64_t v7;
  char *v8;
  unsigned int v9;
  _DWORD *v10;
  _DWORD *v11;
  char *v12;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  v9 = *(unsigned __int8 *)v5;
  v8 = (char *)v5 + 1;
  v7 = v9;
  if (v9)
  {
    std::vector<coex::tlv::abm::BandInfo>::__append((void **)a3, v7);
    v10 = *(_DWORD **)a3;
    v11 = *(_DWORD **)(a3 + 8);
    if (*(_DWORD **)a3 != v11)
    {
      do
      {
        v12 = v8;
        tlv::throwIfNotEnoughBytes((tlv *)v8, v6, (const unsigned __int8 *)4);
        *v10 = *(_DWORD *)v8;
        tlv::throwIfNotEnoughBytes((tlv *)(v8 + 4), v6, (const unsigned __int8 *)4);
        v10[1] = *((_DWORD *)v8 + 1);
        v10 += 2;
        v8 += 8;
      }
      while (v10 != v11);
      v8 = v12 + 8;
    }
  }
  *a1 = (tlv *)v8;
}

void sub_1B3D9F73C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3D9F724);
}

void sub_1B3D9F750(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<coex::tlv::abm::TimeShareReqBandInformationSet>(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[1];
  if (v1 == *a1)
    return 4;
  else
    return (v1 - *a1) & 0xFFFFFFFFFFFFFFF8 | 4;
}

char **tlv::writeV<coex::tlv::abm::TimeShareReqBandInformationSet>(char **result, _DWORD *a2)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __int128 *v12;
  _OWORD *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v2 = *result;
  v3 = *result;
  *v3 = (a2[2] - *a2) >> 3;
  v4 = v3 + 1;
  v6 = *(char **)a2;
  v5 = (char *)*((_QWORD *)a2 + 1);
  if (*(char **)a2 != v5)
  {
    v7 = v5 - v6 - 8;
    if (v7 < 0x58)
      goto LABEL_15;
    if (v4 < &v6[(v7 & 0xFFFFFFFFFFFFFFF8) + 8] && v6 < &v2[(v7 & 0xFFFFFFFFFFFFFFF8) + 9])
      goto LABEL_15;
    v9 = (v7 >> 3) + 1;
    v10 = 8 * (v9 & 0x3FFFFFFFFFFFFFF8);
    v4 += v10;
    v11 = &v6[v10];
    v12 = (__int128 *)(v6 + 32);
    v13 = v2 + 33;
    v14 = v9 & 0x3FFFFFFFFFFFFFF8;
    do
    {
      v16 = *(v12 - 2);
      v15 = *(v12 - 1);
      v18 = *v12;
      v17 = v12[1];
      v12 += 4;
      *(v13 - 2) = v16;
      *(v13 - 1) = v15;
      *v13 = v18;
      v13[1] = v17;
      v13 += 4;
      v14 -= 8;
    }
    while (v14);
    v6 = v11;
    if (v9 != (v9 & 0x3FFFFFFFFFFFFFF8))
    {
LABEL_15:
      do
      {
        *(_DWORD *)v4 = *(_DWORD *)v6;
        *((_DWORD *)v4 + 1) = *((_DWORD *)v6 + 1);
        v4 += 8;
        v6 += 8;
      }
      while (v6 != v5);
    }
  }
  *result = v4;
  return result;
}

tlv *coex::tlv::abm::parseField(uint64_t a1, const unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v6;
  tlv *v7;
  _DWORD *v8;
  _DWORD *v9;
  unint64_t v10;
  int v11;

  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)1);
  *(_BYTE *)a3 = *(_BYTE *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 1), a2, (const unsigned __int8 *)1);
  v6 = *(unsigned __int8 *)(a1 + 1);
  v7 = (tlv *)(a1 + 2);
  v8 = *(_DWORD **)(a3 + 8);
  v9 = *(_DWORD **)(a3 + 16);
  v10 = v9 - v8;
  if (v6 <= v10)
  {
    if (v6 < v10)
    {
      v9 = &v8[v6];
      *(_QWORD *)(a3 + 16) = v9;
    }
  }
  else
  {
    std::vector<int>::__append((std::vector<unsigned int> *)(a3 + 8), v6 - v10);
    v8 = *(_DWORD **)(a3 + 8);
    v9 = *(_DWORD **)(a3 + 16);
  }
  while (v8 != v9)
  {
    tlv::throwIfNotEnoughBytes(v7, a2, (const unsigned __int8 *)4);
    v11 = *(_DWORD *)v7;
    v7 = (tlv *)((char *)v7 + 4);
    *v8++ = v11;
  }
  return v7;
}

_DWORD *coex::tlv::abm::writeField(_BYTE *a1, uint64_t a2)
{
  _DWORD *result;
  char *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 *v10;
  _OWORD *v11;
  uint64_t v12;
  __int128 v13;
  int v14;

  *a1 = *(_BYTE *)a2;
  result = a1 + 2;
  a1[1] = (*(_DWORD *)(a2 + 16) - *(_DWORD *)(a2 + 8)) >> 2;
  v5 = *(char **)(a2 + 8);
  v4 = *(char **)(a2 + 16);
  if (v5 != v4)
  {
    v6 = v4 - v5 - 4;
    if (v6 < 0x1C)
      goto LABEL_10;
    if ((unint64_t)(a1 - v5 + 2) < 0x20)
      goto LABEL_10;
    v7 = (v6 >> 2) + 1;
    v8 = 4 * (v7 & 0x7FFFFFFFFFFFFFF8);
    result = (_DWORD *)((char *)result + v8);
    v9 = &v5[v8];
    v10 = (__int128 *)(v5 + 16);
    v11 = a1 + 18;
    v12 = v7 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v13 = *v10;
      *(v11 - 1) = *(v10 - 1);
      *v11 = v13;
      v10 += 2;
      v11 += 2;
      v12 -= 8;
    }
    while (v12);
    v5 = v9;
    if (v7 != (v7 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_10:
      do
      {
        v14 = *(_DWORD *)v5;
        v5 += 4;
        *result++ = v14;
      }
      while (v5 != v4);
    }
  }
  return result;
}

unint64_t coex::tlv::abm::getFieldSize(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a1 + 8))
    return 2;
  else
    return (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) & 0xFFFFFFFFFFFFFFFCLL | 2;
}

void tlv::parseV<coex::tlv::abm::AntBandInfoSet>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  tlv *v5;
  const unsigned __int8 *v6;
  std::vector<unsigned int>::size_type v7;
  tlv *v8;
  _DWORD *v9;
  _DWORD *i;
  int v11;

  *(_QWORD *)a3 = 0xAAAAAAAAAAAAAA00;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  *(_BYTE *)a3 = *(_BYTE *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 1), v6, (const unsigned __int8 *)1);
  v7 = *((unsigned __int8 *)v5 + 1);
  v8 = (tlv *)((char *)v5 + 2);
  if (v7)
  {
    std::vector<int>::__append((std::vector<unsigned int> *)(a3 + 8), v7);
    v9 = *(_DWORD **)(a3 + 8);
    for (i = *(_DWORD **)(a3 + 16); v9 != i; ++v9)
    {
      tlv::throwIfNotEnoughBytes(v8, v6, (const unsigned __int8 *)4);
      v11 = *(_DWORD *)v8;
      v8 = (tlv *)((char *)v8 + 4);
      *v9 = v11;
    }
  }
  *a1 = v8;
}

void sub_1B3D9FA8C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3D9FA74);
}

void sub_1B3D9FAA0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<coex::tlv::abm::AntBandInfoSet>(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a1 + 8))
    return 5;
  else
    return ((*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) & 0xFFFFFFFFFFFFFFFCLL) + 5;
}

_BYTE **tlv::writeV<coex::tlv::abm::AntBandInfoSet>(_BYTE **result, uint64_t a2)
{
  _BYTE *v2;
  _DWORD *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 *v10;
  _OWORD *v11;
  uint64_t v12;
  __int128 v13;
  int v14;

  v2 = *result;
  *v2 = *(_BYTE *)a2;
  v3 = v2 + 2;
  v2[1] = (*(_DWORD *)(a2 + 16) - *(_DWORD *)(a2 + 8)) >> 2;
  v5 = *(char **)(a2 + 8);
  v4 = *(char **)(a2 + 16);
  if (v5 != v4)
  {
    v6 = v4 - v5 - 4;
    if (v6 < 0x1C)
      goto LABEL_11;
    if ((unint64_t)(v2 - v5 + 2) < 0x20)
      goto LABEL_11;
    v7 = (v6 >> 2) + 1;
    v8 = 4 * (v7 & 0x7FFFFFFFFFFFFFF8);
    v3 = (_DWORD *)((char *)v3 + v8);
    v9 = &v5[v8];
    v10 = (__int128 *)(v5 + 16);
    v11 = v2 + 18;
    v12 = v7 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v13 = *v10;
      *(v11 - 1) = *(v10 - 1);
      *v11 = v13;
      v10 += 2;
      v11 += 2;
      v12 -= 8;
    }
    while (v12);
    v5 = v9;
    if (v7 != (v7 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_11:
      do
      {
        v14 = *(_DWORD *)v5;
        v5 += 4;
        *v3++ = v14;
      }
      while (v5 != v4);
    }
  }
  *result = v3;
  return result;
}

int *coex::tlv::abm::parseField(coex::tlv::abm *this, const unsigned __int8 *a2, char **a3, coex::tlv::abm::AntBlockBandInformationSet *a4)
{
  tlv::throwIfNotEnoughBytes(this, a2, (const unsigned __int8 *)1);
  return tlv::parseSequence<coex::tlv::abm::AntBandInfoSet>((int *)((char *)this + 1), a2, a3, *(unsigned __int8 *)this);
}

int *tlv::parseSequence<coex::tlv::abm::AntBandInfoSet>(int *a1, const unsigned __int8 *a2, char **a3, unint64_t a4)
{
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  void *v26;
  char *v27;
  void *v28;
  char *i;
  char **v30;
  unint64_t v31;
  _DWORD *v32;
  _DWORD *v33;
  unint64_t v34;
  int v35;

  v8 = *a3;
  v7 = a3[1];
  v9 = v7 - *a3;
  v10 = v9 >> 5;
  v11 = a4 - (v9 >> 5);
  if (a4 <= v9 >> 5)
  {
    if (a4 >= v9 >> 5)
    {
      v27 = a3[1];
      i = *a3;
      if (*a3 == v7)
        return a1;
      goto LABEL_33;
    }
    v27 = &v8[32 * a4];
    while (v7 != v27)
    {
      v28 = (void *)*((_QWORD *)v7 - 3);
      if (v28)
      {
        *((_QWORD *)v7 - 2) = v28;
        operator delete(v28);
      }
      v7 -= 32;
    }
    a3[1] = v27;
    for (i = *a3; i != v27; i += 32)
    {
LABEL_33:
      tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)1);
      *i = *(_BYTE *)a1;
      tlv::throwIfNotEnoughBytes((tlv *)((char *)a1 + 1), a2, (const unsigned __int8 *)1);
      v31 = *((unsigned __int8 *)a1 + 1);
      v32 = (_DWORD *)*((_QWORD *)i + 1);
      v33 = (_DWORD *)*((_QWORD *)i + 2);
      v34 = v33 - v32;
      if (v31 <= v34)
      {
        if (v31 < v34)
        {
          v33 = &v32[v31];
          *((_QWORD *)i + 2) = v33;
        }
        a1 = (int *)((char *)a1 + 2);
      }
      else
      {
        std::vector<int>::__append((std::vector<unsigned int> *)(i + 8), v31 - v34);
        v32 = (_DWORD *)*((_QWORD *)i + 1);
        v33 = (_DWORD *)*((_QWORD *)i + 2);
        a1 = (int *)((char *)a1 + 2);
      }
      while (v32 != v33)
      {
        tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
        v35 = *a1++;
        *v32++ = v35;
      }
    }
  }
  else
  {
    v12 = a3[2];
    if (v11 <= (v12 - v7) >> 5)
    {
      bzero(a3[1], 32 * v11);
      a3[1] = &v7[32 * v11];
      v27 = &v7[32 * v11];
      i = *a3;
      if (i == v27)
        return a1;
      goto LABEL_33;
    }
    if (a4 >> 59)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v13 = v12 - v8;
    v14 = v13 >> 4;
    if (v13 >> 4 <= a4)
      v14 = a4;
    v15 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0;
    v16 = 0x7FFFFFFFFFFFFFFLL;
    if (!v15)
      v16 = v14;
    if (v16 >> 59)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v17 = 32 * v16;
    v18 = (char *)operator new(32 * v16);
    v19 = &v18[32 * v10];
    v20 = &v18[v17];
    bzero(v19, 32 * v11);
    v21 = &v19[32 * v11];
    if (v7 == v8)
    {
      *a3 = v19;
      a3[1] = v21;
      a3[2] = v20;
    }
    else
    {
      v22 = 0;
      do
      {
        v23 = &v19[v22];
        v24 = &v7[v22];
        *(v23 - 32) = v7[v22 - 32];
        *(_OWORD *)(v23 - 24) = *(_OWORD *)&v7[v22 - 24];
        *((_QWORD *)v23 - 1) = *(_QWORD *)&v7[v22 - 8];
        *((_QWORD *)v24 - 3) = 0;
        *((_QWORD *)v24 - 2) = 0;
        *((_QWORD *)v24 - 1) = 0;
        v22 -= 32;
      }
      while (&v7[v22] != v8);
      v7 = *a3;
      v25 = a3[1];
      *a3 = &v19[v22];
      a3[1] = v21;
      a3[2] = v20;
      while (v25 != v7)
      {
        v26 = (void *)*((_QWORD *)v25 - 3);
        if (v26)
        {
          *((_QWORD *)v25 - 2) = v26;
          operator delete(v26);
        }
        v25 -= 32;
      }
    }
    if (v7)
      operator delete(v7);
    v30 = a3;
    i = *a3;
    v27 = v30[1];
    if (i != v27)
      goto LABEL_33;
  }
  return a1;
}

_DWORD *coex::tlv::abm::writeField(_BYTE *a1, _DWORD *a2)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *result;
  char *v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __int128 *v12;
  _OWORD *v13;
  uint64_t v14;
  __int128 v15;
  int v16;

  *a1 = (a2[2] - *a2) >> 5;
  v2 = a1 + 1;
  v3 = *(_QWORD *)a2;
  v4 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 == v4)
    return a1 + 1;
  do
  {
    *v2 = *(_BYTE *)v3;
    result = v2 + 2;
    v2[1] = (*(_DWORD *)(v3 + 16) - *(_DWORD *)(v3 + 8)) >> 2;
    v7 = *(char **)(v3 + 8);
    v6 = *(char **)(v3 + 16);
    if (v7 != v6)
    {
      v8 = v6 - v7 - 4;
      if (v8 < 0x1C)
        goto LABEL_14;
      if ((unint64_t)(v2 - v7 + 2) < 0x20)
        goto LABEL_14;
      v9 = (v8 >> 2) + 1;
      v10 = 4 * (v9 & 0x7FFFFFFFFFFFFFF8);
      result = (_DWORD *)((char *)result + v10);
      v11 = &v7[v10];
      v12 = (__int128 *)(v7 + 16);
      v13 = v2 + 18;
      v14 = v9 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v15 = *v12;
        *(v13 - 1) = *(v12 - 1);
        *v13 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 8;
      }
      while (v14);
      v7 = v11;
      if (v9 != (v9 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_14:
        do
        {
          v16 = *(_DWORD *)v7;
          v7 += 4;
          *result++ = v16;
        }
        while (v7 != v6);
      }
    }
    v3 += 32;
    v2 = result;
  }
  while (v3 != v4);
  return result;
}

uint64_t coex::tlv::abm::getFieldSize(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const double *v10;
  int64x2_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int64x2_t v14;
  const double *v15;
  unint64_t v16;
  float64x2x4_t v17;
  float64x2x4_t v18;

  v2 = *a1;
  v1 = a1[1];
  if (*a1 == v1)
    return 1;
  v3 = v1 - v2 - 32;
  if (v3 >= 0x80)
  {
    v7 = (v3 >> 5) + 1;
    v8 = v7 & 3;
    if ((v7 & 3) == 0)
      v8 = 4;
    v9 = v7 - v8;
    v5 = v2 + 32 * v9;
    v10 = (const double *)(v2 + 72);
    v11 = 0uLL;
    v12 = (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFFCLL);
    v13 = (int8x16_t)vdupq_n_s64(2uLL);
    v14 = 0uLL;
    do
    {
      v15 = v10 - 8;
      v17 = vld4q_f64(v15);
      v18 = vld4q_f64(v10);
      v11 = vaddq_s64((int64x2_t)vbslq_s8((int8x16_t)vceqq_s64((int64x2_t)v17.val[1], (int64x2_t)v17.val[0]), v13, vorrq_s8(vandq_s8((int8x16_t)vsubq_s64((int64x2_t)v17.val[1], (int64x2_t)v17.val[0]), v12), v13)), v11);
      v14 = vaddq_s64((int64x2_t)vbslq_s8((int8x16_t)vceqq_s64((int64x2_t)v18.val[1], (int64x2_t)v18.val[0]), v13, vorrq_s8(vandq_s8((int8x16_t)vsubq_s64((int64x2_t)v18.val[1], (int64x2_t)v18.val[0]), v12), v13)), v14);
      v10 += 16;
      v9 -= 4;
    }
    while (v9);
    v4 = vaddvq_s64(vaddq_s64(v14, v11));
  }
  else
  {
    v4 = 0;
    v5 = *a1;
  }
  do
  {
    v16 = (*(_QWORD *)(v5 + 16) - *(_QWORD *)(v5 + 8)) & 0xFFFFFFFFFFFFFFFCLL | 2;
    if (*(_QWORD *)(v5 + 16) == *(_QWORD *)(v5 + 8))
      v16 = 2;
    v4 += v16;
    v5 += 32;
  }
  while (v5 != v1);
  return v4 | 1;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int8x16_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const double *v13;
  int64x2_t v14;
  int64x2_t v15;
  const double *v16;
  unint64_t v17;
  float64x2x4_t v19;
  float64x2x4_t v20;

  v1 = *a1;
  v2 = a1[1];
  if (*a1 == v2)
    return 1;
  v3 = 0;
  v4 = (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFFCLL);
  do
  {
    while (1)
    {
      v6 = *(_QWORD *)(v1 + 16);
      v5 = *(_QWORD *)(v1 + 24);
      if (v6 != v5)
        break;
      v3 += 10;
      v1 += 40;
      if (v1 == v2)
        return v3 + 1;
    }
    v7 = v5 - v6 - 32;
    if (v7 >= 0x80)
    {
      v10 = (v7 >> 5) + 1;
      v11 = v10 & 3;
      if ((v10 & 3) == 0)
        v11 = 4;
      v12 = v10 - v11;
      v9 = v6 + 32 * v12;
      v13 = (const double *)(v6 + 72);
      v14 = 0uLL;
      v15 = 0uLL;
      do
      {
        v16 = v13 - 8;
        v19 = vld4q_f64(v16);
        v20 = vld4q_f64(v13);
        v19.val[2] = (float64x2_t)vdupq_n_s64(2uLL);
        v14 = vaddq_s64((int64x2_t)vbslq_s8((int8x16_t)vceqq_s64((int64x2_t)v19.val[1], (int64x2_t)v19.val[0]), (int8x16_t)v19.val[2], vorrq_s8(vandq_s8((int8x16_t)vsubq_s64((int64x2_t)v19.val[1], (int64x2_t)v19.val[0]), v4), (int8x16_t)v19.val[2])), v14);
        v15 = vaddq_s64((int64x2_t)vbslq_s8((int8x16_t)vceqq_s64((int64x2_t)v20.val[1], (int64x2_t)v20.val[0]), (int8x16_t)v19.val[2], vorrq_s8(vandq_s8((int8x16_t)vsubq_s64((int64x2_t)v20.val[1], (int64x2_t)v20.val[0]), v4), (int8x16_t)v19.val[2])), v15);
        v13 += 16;
        v12 -= 4;
      }
      while (v12);
      v8 = vaddvq_s64(vaddq_s64(v15, v14));
    }
    else
    {
      v8 = 0;
      v9 = *(_QWORD *)(v1 + 16);
    }
    do
    {
      v17 = (*(_QWORD *)(v9 + 16) - *(_QWORD *)(v9 + 8)) & 0xFFFFFFFFFFFFFFFCLL | 2;
      if (*(_QWORD *)(v9 + 16) == *(_QWORD *)(v9 + 8))
        v17 = 2;
      v8 += v17;
      v9 += 32;
    }
    while (v9 != v5);
    v3 += v8 + 10;
    v1 += 40;
  }
  while (v1 != v2);
  return v3 + 1;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int8x16_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const double *v13;
  int64x2_t v14;
  int64x2_t v15;
  const double *v16;
  unint64_t v17;
  float64x2x4_t v19;
  float64x2x4_t v20;

  v1 = *a1;
  v2 = a1[1];
  if (*a1 == v2)
    return 1;
  v3 = 0;
  v4 = (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFFCLL);
  do
  {
    while (1)
    {
      v6 = *(_QWORD *)(v1 + 16);
      v5 = *(_QWORD *)(v1 + 24);
      if (v6 != v5)
        break;
      v3 += 10;
      v1 += 40;
      if (v1 == v2)
        return v3 + 1;
    }
    v7 = v5 - v6 - 32;
    if (v7 >= 0x80)
    {
      v10 = (v7 >> 5) + 1;
      v11 = v10 & 3;
      if ((v10 & 3) == 0)
        v11 = 4;
      v12 = v10 - v11;
      v9 = v6 + 32 * v12;
      v13 = (const double *)(v6 + 72);
      v14 = 0uLL;
      v15 = 0uLL;
      do
      {
        v16 = v13 - 8;
        v19 = vld4q_f64(v16);
        v20 = vld4q_f64(v13);
        v19.val[2] = (float64x2_t)vdupq_n_s64(2uLL);
        v14 = vaddq_s64((int64x2_t)vbslq_s8((int8x16_t)vceqq_s64((int64x2_t)v19.val[1], (int64x2_t)v19.val[0]), (int8x16_t)v19.val[2], vorrq_s8(vandq_s8((int8x16_t)vsubq_s64((int64x2_t)v19.val[1], (int64x2_t)v19.val[0]), v4), (int8x16_t)v19.val[2])), v14);
        v15 = vaddq_s64((int64x2_t)vbslq_s8((int8x16_t)vceqq_s64((int64x2_t)v20.val[1], (int64x2_t)v20.val[0]), (int8x16_t)v19.val[2], vorrq_s8(vandq_s8((int8x16_t)vsubq_s64((int64x2_t)v20.val[1], (int64x2_t)v20.val[0]), v4), (int8x16_t)v19.val[2])), v15);
        v13 += 16;
        v12 -= 4;
      }
      while (v12);
      v8 = vaddvq_s64(vaddq_s64(v15, v14));
    }
    else
    {
      v8 = 0;
      v9 = *(_QWORD *)(v1 + 16);
    }
    do
    {
      v17 = (*(_QWORD *)(v9 + 16) - *(_QWORD *)(v9 + 8)) & 0xFFFFFFFFFFFFFFFCLL | 2;
      if (*(_QWORD *)(v9 + 16) == *(_QWORD *)(v9 + 8))
        v17 = 2;
      v8 += v17;
      v9 += 32;
    }
    while (v9 != v5);
    v3 += v8 + 10;
    v1 += 40;
  }
  while (v1 != v2);
  return v3 + 1;
}

{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const double *v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  const double *v14;
  float64x2x4_t v15;
  float64x2x4_t v16;

  v2 = *a1;
  v1 = a1[1];
  if (*a1 == v1)
    return 1;
  v3 = v1 - v2 - 32;
  if (v3 >= 0x80)
  {
    v7 = (v3 >> 5) + 1;
    v8 = v7 & 3;
    if ((v7 & 3) == 0)
      v8 = 4;
    v9 = v7 - v8;
    v5 = v2 + 32 * v9;
    v10 = (const double *)(v2 + 72);
    v11 = 0uLL;
    v12 = vdupq_n_s64(5uLL);
    v13 = 0uLL;
    do
    {
      v14 = v10 - 8;
      v15 = vld4q_f64(v14);
      v16 = vld4q_f64(v10);
      v11 = vaddq_s64(vsubq_s64(vaddq_s64(v11, (int64x2_t)v15.val[1]), (int64x2_t)v15.val[0]), v12);
      v13 = vaddq_s64(vsubq_s64(vaddq_s64(v13, (int64x2_t)v16.val[1]), (int64x2_t)v16.val[0]), v12);
      v10 += 16;
      v9 -= 4;
    }
    while (v9);
    v4 = vaddvq_s64(vaddq_s64(v13, v11));
  }
  else
  {
    v4 = 0;
    v5 = *a1;
  }
  do
  {
    v4 = v4 + *(_QWORD *)(v5 + 16) - *(_QWORD *)(v5 + 8) + 5;
    v5 += 32;
  }
  while (v5 != v1);
  return v4 + 1;
}

int *tlv::parseV<coex::tlv::abm::AntBlockBandInformationSet>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  tlv *v5;
  const unsigned __int8 *v6;
  int *result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  result = tlv::parseSequence<coex::tlv::abm::AntBandInfoSet>((int *)((char *)v5 + 1), v6, (char **)a3, *(unsigned __int8 *)v5);
  *a1 = (tlv *)result;
  return result;
}

void sub_1B3DA007C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DA006CLL);
}

void sub_1B3DA008C(_Unwind_Exception *a1)
{
  coex::tlv::abm::AntBlockBandInformationSet *v1;

  coex::tlv::abm::AntBlockBandInformationSet::~AntBlockBandInformationSet(v1);
  _Unwind_Resume(a1);
}

void coex::tlv::abm::AntBlockBandInformationSet::~AntBlockBandInformationSet(coex::tlv::abm::AntBlockBandInformationSet *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v2 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v3 = *((_QWORD *)this + 1);
    v4 = *(void **)this;
    if (v3 != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 24);
        if (v5)
        {
          *(_QWORD *)(v3 - 16) = v5;
          operator delete(v5);
        }
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = *(void **)this;
    }
    *((_QWORD *)this + 1) = v2;
    operator delete(v4);
  }
}

uint64_t tlv::size<coex::tlv::abm::AntBlockBandInformationSet>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const double *v10;
  int64x2_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int64x2_t v14;
  const double *v15;
  unint64_t v16;
  float64x2x4_t v17;
  float64x2x4_t v18;

  v2 = *a1;
  v1 = a1[1];
  if (*a1 == v1)
    return 4;
  v3 = v1 - v2 - 32;
  if (v3 >= 0x80)
  {
    v7 = (v3 >> 5) + 1;
    v8 = v7 & 3;
    if ((v7 & 3) == 0)
      v8 = 4;
    v9 = v7 - v8;
    v5 = v2 + 32 * v9;
    v10 = (const double *)(v2 + 72);
    v11 = 0uLL;
    v12 = (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFFCLL);
    v13 = (int8x16_t)vdupq_n_s64(2uLL);
    v14 = 0uLL;
    do
    {
      v15 = v10 - 8;
      v17 = vld4q_f64(v15);
      v18 = vld4q_f64(v10);
      v11 = vaddq_s64((int64x2_t)vbslq_s8((int8x16_t)vceqq_s64((int64x2_t)v17.val[1], (int64x2_t)v17.val[0]), v13, vorrq_s8(vandq_s8((int8x16_t)vsubq_s64((int64x2_t)v17.val[1], (int64x2_t)v17.val[0]), v12), v13)), v11);
      v14 = vaddq_s64((int64x2_t)vbslq_s8((int8x16_t)vceqq_s64((int64x2_t)v18.val[1], (int64x2_t)v18.val[0]), v13, vorrq_s8(vandq_s8((int8x16_t)vsubq_s64((int64x2_t)v18.val[1], (int64x2_t)v18.val[0]), v12), v13)), v14);
      v10 += 16;
      v9 -= 4;
    }
    while (v9);
    v4 = vaddvq_s64(vaddq_s64(v14, v11));
  }
  else
  {
    v4 = 0;
    v5 = *a1;
  }
  do
  {
    v16 = (*(_QWORD *)(v5 + 16) - *(_QWORD *)(v5 + 8)) & 0xFFFFFFFFFFFFFFFCLL | 2;
    if (*(_QWORD *)(v5 + 16) == *(_QWORD *)(v5 + 8))
      v16 = 2;
    v4 += v16;
    v5 += 32;
  }
  while (v5 != v1);
  return v4 + 4;
}

_BYTE **tlv::writeV<coex::tlv::abm::AntBlockBandInformationSet>(_BYTE **result, _DWORD *a2)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  char *v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 *v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  int v17;

  v2 = *result;
  *v2 = (a2[2] - *a2) >> 5;
  v3 = v2 + 1;
  v4 = *(_QWORD *)a2;
  v5 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 == v5)
  {
    *result = v3;
  }
  else
  {
    do
    {
      *v3 = *(_BYTE *)v4;
      v6 = v3 + 2;
      v3[1] = (*(_DWORD *)(v4 + 16) - *(_DWORD *)(v4 + 8)) >> 2;
      v8 = *(char **)(v4 + 8);
      v7 = *(char **)(v4 + 16);
      if (v8 != v7)
      {
        v9 = v7 - v8 - 4;
        if (v9 < 0x1C)
          goto LABEL_15;
        if ((unint64_t)(v3 - v8 + 2) < 0x20)
          goto LABEL_15;
        v10 = (v9 >> 2) + 1;
        v11 = 4 * (v10 & 0x7FFFFFFFFFFFFFF8);
        v6 = (_DWORD *)((char *)v6 + v11);
        v12 = &v8[v11];
        v13 = (__int128 *)(v8 + 16);
        v14 = v3 + 18;
        v15 = v10 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v16 = *v13;
          *(v14 - 1) = *(v13 - 1);
          *v14 = v16;
          v13 += 2;
          v14 += 2;
          v15 -= 8;
        }
        while (v15);
        v8 = v12;
        if (v10 != (v10 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_15:
          do
          {
            v17 = *(_DWORD *)v8;
            v8 += 4;
            *v6++ = v17;
          }
          while (v8 != v7);
        }
      }
      v4 += 32;
      v3 = v6;
    }
    while (v4 != v5);
    *result = v6;
  }
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::AntMapInfoSet>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DA0368(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::AntMapInfoSet>()
{
  return 4;
}

_BYTE **tlv::writeV<coex::tlv::abm::AntMapInfoSet>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

tlv *coex::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, uint64_t a3)
{
  tlv *v6;
  unint64_t v7;
  unsigned int v8;
  char *v9;
  char *v10;
  char *v11;
  unint64_t v12;
  BOOL v13;
  size_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  size_t v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  __int128 v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char v32;
  char v33;
  char *v35;
  char *v36;

  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  v8 = *(unsigned __int8 *)a1;
  v6 = (tlv *)((char *)a1 + 1);
  v7 = v8;
  v10 = *(char **)a3;
  v9 = *(char **)(a3 + 8);
  v11 = v9;
  v12 = (unint64_t)&v9[-*(_QWORD *)a3];
  v13 = v8 >= v12;
  v14 = v8 - v12;
  if (v8 <= v12)
  {
    if (v13)
    {
      v20 = *(char **)(a3 + 8);
    }
    else
    {
      v20 = &v10[v7];
      *(_QWORD *)(a3 + 8) = &v10[v7];
    }
    goto LABEL_33;
  }
  v15 = *(_QWORD *)(a3 + 16);
  if (v15 - (uint64_t)v9 >= v14)
  {
    v20 = &v9[v14];
    bzero(*(void **)(a3 + 8), v14);
    *(_QWORD *)(a3 + 8) = &v9[v14];
    goto LABEL_33;
  }
  v16 = v15 - (_QWORD)v10;
  v17 = 2 * v16;
  if (2 * v16 <= v7)
    v17 = v7;
  if (v16 >= 0x3FFFFFFFFFFFFFFFLL)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = v17;
  v19 = (char *)operator new(v18);
  v35 = &v19[v18];
  v36 = v19;
  v20 = &v19[v7];
  v21 = &v19[v12];
  bzero(&v19[v12], v14);
  if (v9 != v10)
  {
    if (v12 < 8 || (unint64_t)(v10 - v36) < 0x20)
      goto LABEL_28;
    if (v12 >= 0x20)
    {
      v22 = v12 & 0xFFFFFFFFFFFFFFE0;
      v23 = v9 - 16;
      v24 = &v36[v9 - 16 - v10];
      v25 = v12 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v26 = *(_OWORD *)v23;
        *((_OWORD *)v24 - 1) = *((_OWORD *)v23 - 1);
        *(_OWORD *)v24 = v26;
        v24 -= 32;
        v23 -= 32;
        v25 -= 32;
      }
      while (v25);
      if (v12 == v22)
      {
LABEL_30:
        v11 = v10;
        v10 = v36;
        *(_QWORD *)a3 = v36;
        *(_QWORD *)(a3 + 8) = v20;
        *(_QWORD *)(a3 + 16) = v35;
        if (!v11)
          goto LABEL_33;
        goto LABEL_31;
      }
      if ((v12 & 0x18) == 0)
      {
        v21 -= v22;
        v11 = &v9[-v22];
        goto LABEL_28;
      }
    }
    else
    {
      v22 = 0;
    }
    v11 = &v9[-(v12 & 0xFFFFFFFFFFFFFFF8)];
    v21 -= v12 & 0xFFFFFFFFFFFFFFF8;
    v27 = &v9[-v22 - 8];
    v28 = v27 - v10;
    v29 = v22 - (v12 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v30 = *(_QWORD *)v27;
      v27 -= 8;
      *(_QWORD *)&v36[v28] = v30;
      v28 -= 8;
      v29 += 8;
    }
    while (v29);
    if (v12 == (v12 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_30;
LABEL_28:
    v31 = v21 - 1;
    do
    {
      v32 = *--v11;
      *v31-- = v32;
    }
    while (v11 != v10);
    goto LABEL_30;
  }
  v10 = v21;
  *(_QWORD *)a3 = v21;
  *(_QWORD *)(a3 + 8) = v20;
  *(_QWORD *)(a3 + 16) = v35;
  if (v9)
  {
LABEL_31:
    operator delete(v11);
    v10 = *(char **)a3;
    v20 = *(char **)(a3 + 8);
  }
LABEL_33:
  while (v10 != v20)
  {
    tlv::throwIfNotEnoughBytes(v6, a2, (const unsigned __int8 *)1);
    v33 = *(_BYTE *)v6;
    v6 = (tlv *)((char *)v6 + 1);
    *v10++ = v33;
  }
  return v6;
}

uint64_t coex::tlv::abm::getFieldSize(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[1];
  if (v1 == *a1)
    return 1;
  else
    return v1 - *a1 + 1;
}

tlv *tlv::parseV<coex::tlv::abm::AntMapInformationSet>@<X0>(tlv **a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  tlv *result;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  result = coex::tlv::abm::parseField(*a1, (const unsigned __int8 *)*a1 + a2, (uint64_t)a3);
  *a1 = result;
  return result;
}

void sub_1B3DA06A4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DA0698);
}

void sub_1B3DA06B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<coex::tlv::abm::AntMapInformationSet>(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[1];
  if (v1 == *a1)
    return 4;
  else
    return v1 - *a1 + 4;
}

_QWORD *tlv::writeV<coex::tlv::abm::AntMapInformationSet>(_QWORD *result, _DWORD *a2)
{
  _BYTE *v2;
  _BYTE *v3;
  _BYTE *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  __int128 *v9;
  _OWORD *v10;
  unint64_t v11;
  __int128 v12;
  char v13;

  v2 = (_BYTE *)*result;
  v3 = (_BYTE *)*result;
  *v3 = a2[2] - *a2;
  v4 = v3 + 1;
  v6 = *(char **)a2;
  v5 = (char *)*((_QWORD *)a2 + 1);
  if (*(char **)a2 != v5)
  {
    v7 = v5 - v6;
    if ((unint64_t)(v5 - v6) < 0x20)
      goto LABEL_11;
    if ((unint64_t)(v2 - v6 + 1) < 0x20)
      goto LABEL_11;
    v4 += v7 & 0xFFFFFFFFFFFFFFE0;
    v8 = &v6[v7 & 0xFFFFFFFFFFFFFFE0];
    v9 = (__int128 *)(v6 + 16);
    v10 = v2 + 17;
    v11 = v7 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v12 = *v9;
      *(v10 - 1) = *(v9 - 1);
      *v10 = v12;
      v9 += 2;
      v10 += 2;
      v11 -= 32;
    }
    while (v11);
    v6 = v8;
    if (v7 != (v7 & 0xFFFFFFFFFFFFFFE0))
    {
LABEL_11:
      do
      {
        v13 = *v6++;
        *v4++ = v13;
      }
      while (v6 != v5);
    }
  }
  *result = v4;
  return result;
}

char *coex::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, BOOL *a3)
{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1 != 0;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1 != 0;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1 != 0;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1 != 0;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1 != 0;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1 != 0;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1 != 0;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1 != 0;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1 != 0;
  return (char *)a1 + 1;
}

BOOL tlv::parseV<coex::tlv::abm::Enabled>(tlv **a1, int a2)
{
  tlv *v3;
  _BOOL8 result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DA080C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::Enabled>()
{
  return 4;
}

_BYTE **tlv::writeV<coex::tlv::abm::Enabled>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

BOOL tlv::parseV<coex::tlv::abm::EnableMmwTxInfo>(tlv **a1, int a2)
{
  tlv *v3;
  _BOOL8 result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DA08D4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::EnableMmwTxInfo>()
{
  return 4;
}

_BYTE **tlv::writeV<coex::tlv::abm::EnableMmwTxInfo>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::CriticalCarrierId>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3DA098C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::CriticalCarrierId>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::CriticalCarrierId>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::SecondaryCriticalCarrierId>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3DA0A44(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::SecondaryCriticalCarrierId>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::SecondaryCriticalCarrierId>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::GnssBandId>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3DA0AFC(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::GnssBandId>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::GnssBandId>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::GnssL5Level>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3DA0BB4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::GnssL5Level>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::GnssL5Level>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

int *coex::tlv::abm::parseField(coex::tlv::abm *this, const unsigned __int8 *a2, unsigned __int8 *a3, coex::tlv::abm::AntBlockClientInfoSet *a4)
{
  tlv::throwIfNotEnoughBytes(this, a2, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)this;
  tlv::throwIfNotEnoughBytes((coex::tlv::abm *)((char *)this + 4), a2, (const unsigned __int8 *)4);
  *((_DWORD *)a3 + 1) = *((_DWORD *)this + 1);
  tlv::throwIfNotEnoughBytes((coex::tlv::abm *)((char *)this + 8), a2, (const unsigned __int8 *)1);
  a3[8] = *((_BYTE *)this + 8) != 0;
  tlv::throwIfNotEnoughBytes((coex::tlv::abm *)((char *)this + 9), a2, (const unsigned __int8 *)1);
  return tlv::parseSequence<coex::tlv::abm::AntBandInfoSet>((int *)((char *)this + 10), a2, (char **)a3 + 2, *((unsigned __int8 *)this + 9));
}

_DWORD *coex::tlv::abm::writeField(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *result;
  char *v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __int128 *v12;
  _OWORD *v13;
  uint64_t v14;
  __int128 v15;
  int v16;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v2 = (_BYTE *)(a1 + 10);
  *(_BYTE *)(a1 + 9) = (*(_DWORD *)(a2 + 24) - *(_DWORD *)(a2 + 16)) >> 5;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  if (v3 == v4)
    return (_DWORD *)(a1 + 10);
  do
  {
    *v2 = *(_BYTE *)v3;
    result = v2 + 2;
    v2[1] = (*(_DWORD *)(v3 + 16) - *(_DWORD *)(v3 + 8)) >> 2;
    v7 = *(char **)(v3 + 8);
    v6 = *(char **)(v3 + 16);
    if (v7 != v6)
    {
      v8 = v6 - v7 - 4;
      if (v8 < 0x1C)
        goto LABEL_14;
      if ((unint64_t)(v2 - v7 + 2) < 0x20)
        goto LABEL_14;
      v9 = (v8 >> 2) + 1;
      v10 = 4 * (v9 & 0x7FFFFFFFFFFFFFF8);
      result = (_DWORD *)((char *)result + v10);
      v11 = &v7[v10];
      v12 = (__int128 *)(v7 + 16);
      v13 = v2 + 18;
      v14 = v9 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v15 = *v12;
        *(v13 - 1) = *(v12 - 1);
        *v13 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 8;
      }
      while (v14);
      v7 = v11;
      if (v9 != (v9 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_14:
        do
        {
          v16 = *(_DWORD *)v7;
          v7 += 4;
          *result++ = v16;
        }
        while (v7 != v6);
      }
    }
    v3 += 32;
    v2 = result;
  }
  while (v3 != v4);
  return result;
}

int *tlv::parseV<coex::tlv::abm::AntBlockClientInfoSet>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  tlv *v5;
  const unsigned __int8 *v6;
  int *result;

  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0xAAAAAAAAAAAAAAAALL;
  *(_BYTE *)(a3 + 8) = 0;
  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 4), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *((_DWORD *)v5 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 8), v6, (const unsigned __int8 *)1);
  *(_BYTE *)(a3 + 8) = *((_BYTE *)v5 + 8) != 0;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 9), v6, (const unsigned __int8 *)1);
  result = tlv::parseSequence<coex::tlv::abm::AntBandInfoSet>((int *)((char *)v5 + 10), v6, (char **)(a3 + 16), *((unsigned __int8 *)v5 + 9));
  *a1 = (tlv *)result;
  return result;
}

void sub_1B3DA0F34(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DA0F20);
}

void sub_1B3DA0F44(_Unwind_Exception *a1)
{
  coex::tlv::abm::AntBlockClientInfoSet *v1;

  coex::tlv::abm::AntBlockClientInfoSet::~AntBlockClientInfoSet(v1);
  _Unwind_Resume(a1);
}

void coex::tlv::abm::AntBlockClientInfoSet::~AntBlockClientInfoSet(coex::tlv::abm::AntBlockClientInfoSet *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *((_QWORD *)this + 3);
    v4 = (void *)*((_QWORD *)this + 2);
    if (v3 != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 24);
        if (v5)
        {
          *(_QWORD *)(v3 - 16) = v5;
          operator delete(v5);
        }
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 2);
    }
    *((_QWORD *)this + 3) = v2;
    operator delete(v4);
  }
}

uint64_t tlv::size<coex::tlv::abm::AntBlockClientInfoSet>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const double *v10;
  int64x2_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int64x2_t v14;
  const double *v15;
  unint64_t v16;
  float64x2x4_t v17;
  float64x2x4_t v18;

  v2 = *(_QWORD *)(a1 + 16);
  v1 = *(_QWORD *)(a1 + 24);
  if (v2 == v1)
    return 13;
  v3 = v1 - v2 - 32;
  if (v3 >= 0x80)
  {
    v7 = (v3 >> 5) + 1;
    v8 = v7 & 3;
    if ((v7 & 3) == 0)
      v8 = 4;
    v9 = v7 - v8;
    v5 = v2 + 32 * v9;
    v10 = (const double *)(v2 + 72);
    v11 = 0uLL;
    v12 = (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFFCLL);
    v13 = (int8x16_t)vdupq_n_s64(2uLL);
    v14 = 0uLL;
    do
    {
      v15 = v10 - 8;
      v17 = vld4q_f64(v15);
      v18 = vld4q_f64(v10);
      v11 = vaddq_s64((int64x2_t)vbslq_s8((int8x16_t)vceqq_s64((int64x2_t)v17.val[1], (int64x2_t)v17.val[0]), v13, vorrq_s8(vandq_s8((int8x16_t)vsubq_s64((int64x2_t)v17.val[1], (int64x2_t)v17.val[0]), v12), v13)), v11);
      v14 = vaddq_s64((int64x2_t)vbslq_s8((int8x16_t)vceqq_s64((int64x2_t)v18.val[1], (int64x2_t)v18.val[0]), v13, vorrq_s8(vandq_s8((int8x16_t)vsubq_s64((int64x2_t)v18.val[1], (int64x2_t)v18.val[0]), v12), v13)), v14);
      v10 += 16;
      v9 -= 4;
    }
    while (v9);
    v4 = vaddvq_s64(vaddq_s64(v14, v11));
  }
  else
  {
    v4 = 0;
    v5 = *(_QWORD *)(a1 + 16);
  }
  do
  {
    v16 = (*(_QWORD *)(v5 + 16) - *(_QWORD *)(v5 + 8)) & 0xFFFFFFFFFFFFFFFCLL | 2;
    if (*(_QWORD *)(v5 + 16) == *(_QWORD *)(v5 + 8))
      v16 = 2;
    v4 += v16;
    v5 += 32;
  }
  while (v5 != v1);
  return v4 + 13;
}

uint64_t *tlv::writeV<coex::tlv::abm::AntBlockClientInfoSet>(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  char *v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 *v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  int v17;

  v2 = *result;
  *(_DWORD *)v2 = *(_DWORD *)a2;
  *(_DWORD *)(v2 + 4) = *(_DWORD *)(a2 + 4);
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a2 + 8);
  v3 = (_BYTE *)(v2 + 10);
  *(_BYTE *)(v2 + 9) = (*(_DWORD *)(a2 + 24) - *(_DWORD *)(a2 + 16)) >> 5;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  if (v4 == v5)
  {
    *result = (uint64_t)v3;
  }
  else
  {
    do
    {
      *v3 = *(_BYTE *)v4;
      v6 = v3 + 2;
      v3[1] = (*(_DWORD *)(v4 + 16) - *(_DWORD *)(v4 + 8)) >> 2;
      v8 = *(char **)(v4 + 8);
      v7 = *(char **)(v4 + 16);
      if (v8 != v7)
      {
        v9 = v7 - v8 - 4;
        if (v9 < 0x1C)
          goto LABEL_15;
        if ((unint64_t)(v3 - v8 + 2) < 0x20)
          goto LABEL_15;
        v10 = (v9 >> 2) + 1;
        v11 = 4 * (v10 & 0x7FFFFFFFFFFFFFF8);
        v6 = (_DWORD *)((char *)v6 + v11);
        v12 = &v8[v11];
        v13 = (__int128 *)(v8 + 16);
        v14 = v3 + 18;
        v15 = v10 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v16 = *v13;
          *(v14 - 1) = *(v13 - 1);
          *v14 = v16;
          v13 += 2;
          v14 += 2;
          v15 -= 8;
        }
        while (v15);
        v8 = v12;
        if (v10 != (v10 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_15:
          do
          {
            v17 = *(_DWORD *)v8;
            v8 += 4;
            *v6++ = v17;
          }
          while (v8 != v7);
        }
      }
      v4 += 32;
      v3 = v6;
    }
    while (v4 != v5);
    *result = (uint64_t)v6;
  }
  return result;
}

int *coex::tlv::abm::parseField(coex::tlv::abm *this, const unsigned __int8 *a2, char **a3, coex::tlv::abm::ClientAntBlockInformationSet *a4)
{
  tlv::throwIfNotEnoughBytes(this, a2, (const unsigned __int8 *)1);
  return tlv::parseSequence<coex::tlv::abm::AntBlockClientInfoSet>((int *)((char *)this + 1), a2, a3, *(unsigned __int8 *)this);
}

int *tlv::parseSequence<coex::tlv::abm::AntBlockClientInfoSet>(int *a1, const unsigned __int8 *a2, char **a3, unint64_t a4)
{
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  char *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  size_t v34;
  char *v35;
  char **v36;

  v8 = *a3;
  v7 = a3[1];
  v9 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a3) >> 3);
  v10 = a4 - v9;
  if (a4 <= v9)
  {
    if (a4 >= v9)
    {
      v29 = a3[1];
      v35 = *a3;
    }
    else
    {
      v29 = &v8[40 * a4];
      while (v7 != v29)
      {
        v31 = *((_QWORD *)v7 - 3);
        if (v31)
        {
          v32 = *((_QWORD *)v7 - 2);
          v30 = (void *)*((_QWORD *)v7 - 3);
          if (v32 != v31)
          {
            do
            {
              v33 = *(void **)(v32 - 24);
              if (v33)
              {
                *(_QWORD *)(v32 - 16) = v33;
                operator delete(v33);
              }
              v32 -= 32;
            }
            while (v32 != v31);
            v30 = (void *)*((_QWORD *)v7 - 3);
          }
          *((_QWORD *)v7 - 2) = v31;
          operator delete(v30);
        }
        v7 -= 40;
      }
      a3[1] = v29;
      v35 = *a3;
    }
  }
  else
  {
    v11 = a3[2];
    if (0xCCCCCCCCCCCCCCCDLL * ((v11 - v7) >> 3) >= v10)
    {
      v34 = 40 * ((40 * v10 - 40) / 0x28) + 40;
      bzero(a3[1], v34);
      a3[1] = &v7[v34];
      v29 = &v7[v34];
      v35 = *a3;
    }
    else
    {
      if (a4 > 0x666666666666666)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v12 = 0xCCCCCCCCCCCCCCCDLL * ((v11 - v8) >> 3);
      v13 = 2 * v12;
      if (2 * v12 <= a4)
        v13 = a4;
      if (v12 >= 0x333333333333333)
        v14 = 0x666666666666666;
      else
        v14 = v13;
      if (v14 > 0x666666666666666)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v15 = 40 * v14;
      v16 = (char *)operator new(40 * v14);
      v17 = &v16[40 * v9];
      v18 = &v16[v15];
      bzero(v17, 40 * ((40 * v10 - 40) / 0x28) + 40);
      v19 = &v17[40 * ((40 * v10 - 40) / 0x28) + 40];
      if (v7 == v8)
      {
        *a3 = v17;
        a3[1] = v19;
        a3[2] = v18;
      }
      else
      {
        v20 = 0;
        do
        {
          v21 = &v17[v20];
          v22 = &v7[v20];
          v23 = *(_QWORD *)&v7[v20 - 40];
          *(v21 - 32) = v7[v20 - 32];
          *((_QWORD *)v21 - 5) = v23;
          *(_OWORD *)(v21 - 24) = *(_OWORD *)&v7[v20 - 24];
          *((_QWORD *)v21 - 1) = *(_QWORD *)&v7[v20 - 8];
          *((_QWORD *)v22 - 3) = 0;
          *((_QWORD *)v22 - 2) = 0;
          *((_QWORD *)v22 - 1) = 0;
          v20 -= 40;
        }
        while (&v7[v20] != v8);
        v7 = *a3;
        v24 = a3[1];
        *a3 = &v17[v20];
        a3[1] = v19;
        a3[2] = v18;
        while (v24 != v7)
        {
          v26 = *((_QWORD *)v24 - 3);
          if (v26)
          {
            v27 = *((_QWORD *)v24 - 2);
            v25 = (void *)*((_QWORD *)v24 - 3);
            if (v27 != v26)
            {
              do
              {
                v28 = *(void **)(v27 - 24);
                if (v28)
                {
                  *(_QWORD *)(v27 - 16) = v28;
                  operator delete(v28);
                }
                v27 -= 32;
              }
              while (v27 != v26);
              v25 = (void *)*((_QWORD *)v24 - 3);
            }
            *((_QWORD *)v24 - 2) = v26;
            operator delete(v25);
          }
          v24 -= 40;
        }
      }
      if (v7)
        operator delete(v7);
      v36 = a3;
      v35 = *a3;
      v29 = v36[1];
    }
  }
  while (v35 != v29)
  {
    tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
    *(_DWORD *)v35 = *a1;
    tlv::throwIfNotEnoughBytes((tlv *)(a1 + 1), a2, (const unsigned __int8 *)4);
    *((_DWORD *)v35 + 1) = a1[1];
    tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)1);
    v35[8] = *((_BYTE *)a1 + 8) != 0;
    tlv::throwIfNotEnoughBytes((tlv *)((char *)a1 + 9), a2, (const unsigned __int8 *)1);
    a1 = tlv::parseSequence<coex::tlv::abm::AntBandInfoSet>((int *)((char *)a1 + 10), a2, (char **)v35 + 2, *((unsigned __int8 *)a1 + 9));
    v35 += 40;
  }
  return a1;
}

int *tlv::parseV<coex::tlv::abm::ClientAntBlockInformationSet>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  tlv *v5;
  const unsigned __int8 *v6;
  int *result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  result = tlv::parseSequence<coex::tlv::abm::AntBlockClientInfoSet>((int *)((char *)v5 + 1), v6, (char **)a3, *(unsigned __int8 *)v5);
  *a1 = (tlv *)result;
  return result;
}

void sub_1B3DA17F4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DA17E4);
}

void sub_1B3DA1804(_Unwind_Exception *a1)
{
  coex::tlv::abm::ClientAntBlockInformationSet *v1;

  coex::tlv::abm::ClientAntBlockInformationSet::~ClientAntBlockInformationSet(v1);
  _Unwind_Resume(a1);
}

void coex::tlv::abm::ClientAntBlockInformationSet::~ClientAntBlockInformationSet(coex::tlv::abm::ClientAntBlockInformationSet *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v2 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v3 = *((_QWORD *)this + 1);
    v4 = *(void **)this;
    if (v3 != v2)
    {
      do
      {
        v6 = *(_QWORD *)(v3 - 24);
        if (v6)
        {
          v7 = *(_QWORD *)(v3 - 16);
          v5 = *(void **)(v3 - 24);
          if (v7 != v6)
          {
            do
            {
              v8 = *(void **)(v7 - 24);
              if (v8)
              {
                *(_QWORD *)(v7 - 16) = v8;
                operator delete(v8);
              }
              v7 -= 32;
            }
            while (v7 != v6);
            v5 = *(void **)(v3 - 24);
          }
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v5);
        }
        v3 -= 40;
      }
      while (v3 != v2);
      v4 = *(void **)this;
    }
    *((_QWORD *)this + 1) = v2;
    operator delete(v4);
  }
}

uint64_t tlv::size<coex::tlv::abm::ClientAntBlockInformationSet>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int8x16_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const double *v13;
  int64x2_t v14;
  int64x2_t v15;
  const double *v16;
  unint64_t v17;
  float64x2x4_t v19;
  float64x2x4_t v20;

  v1 = *a1;
  v2 = a1[1];
  if (*a1 == v2)
    return 4;
  v3 = 0;
  v4 = (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFFCLL);
  do
  {
    while (1)
    {
      v6 = *(_QWORD *)(v1 + 16);
      v5 = *(_QWORD *)(v1 + 24);
      if (v6 != v5)
        break;
      v3 += 10;
      v1 += 40;
      if (v1 == v2)
        return v3 + 4;
    }
    v7 = v5 - v6 - 32;
    if (v7 >= 0x80)
    {
      v10 = (v7 >> 5) + 1;
      v11 = v10 & 3;
      if ((v10 & 3) == 0)
        v11 = 4;
      v12 = v10 - v11;
      v9 = v6 + 32 * v12;
      v13 = (const double *)(v6 + 72);
      v14 = 0uLL;
      v15 = 0uLL;
      do
      {
        v16 = v13 - 8;
        v19 = vld4q_f64(v16);
        v20 = vld4q_f64(v13);
        v19.val[2] = (float64x2_t)vdupq_n_s64(2uLL);
        v14 = vaddq_s64((int64x2_t)vbslq_s8((int8x16_t)vceqq_s64((int64x2_t)v19.val[1], (int64x2_t)v19.val[0]), (int8x16_t)v19.val[2], vorrq_s8(vandq_s8((int8x16_t)vsubq_s64((int64x2_t)v19.val[1], (int64x2_t)v19.val[0]), v4), (int8x16_t)v19.val[2])), v14);
        v15 = vaddq_s64((int64x2_t)vbslq_s8((int8x16_t)vceqq_s64((int64x2_t)v20.val[1], (int64x2_t)v20.val[0]), (int8x16_t)v19.val[2], vorrq_s8(vandq_s8((int8x16_t)vsubq_s64((int64x2_t)v20.val[1], (int64x2_t)v20.val[0]), v4), (int8x16_t)v19.val[2])), v15);
        v13 += 16;
        v12 -= 4;
      }
      while (v12);
      v8 = vaddvq_s64(vaddq_s64(v15, v14));
    }
    else
    {
      v8 = 0;
      v9 = *(_QWORD *)(v1 + 16);
    }
    do
    {
      v17 = (*(_QWORD *)(v9 + 16) - *(_QWORD *)(v9 + 8)) & 0xFFFFFFFFFFFFFFFCLL | 2;
      if (*(_QWORD *)(v9 + 16) == *(_QWORD *)(v9 + 8))
        v17 = 2;
      v8 += v17;
      v9 += 32;
    }
    while (v9 != v5);
    v3 += v8 + 10;
    v1 += 40;
  }
  while (v1 != v2);
  return v3 + 4;
}

_BYTE **tlv::writeV<coex::tlv::abm::ClientAntBlockInformationSet>(_BYTE **result, _DWORD *a2)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  __int128 *v15;
  _OWORD *v16;
  uint64_t v17;
  __int128 v18;
  int v19;

  v2 = *result;
  *v2 = -51 * ((a2[2] - *a2) >> 3);
  v3 = v2 + 1;
  v4 = *(_QWORD *)a2;
  v5 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 != v5)
  {
    do
    {
      while (1)
      {
        *(_DWORD *)v3 = *(_DWORD *)v4;
        *((_DWORD *)v3 + 1) = *(_DWORD *)(v4 + 4);
        v3[8] = *(_BYTE *)(v4 + 8);
        v6 = v3 + 10;
        v3[9] = (*(_DWORD *)(v4 + 24) - *(_DWORD *)(v4 + 16)) >> 5;
        v7 = *(_QWORD *)(v4 + 16);
        v8 = *(_QWORD *)(v4 + 24);
        if (v7 != v8)
          break;
        v3 += 10;
        v4 += 40;
        if (v4 == v5)
          goto LABEL_2;
      }
      do
      {
        *v6 = *(_BYTE *)v7;
        v3 = v6 + 2;
        v6[1] = (*(_DWORD *)(v7 + 16) - *(_DWORD *)(v7 + 8)) >> 2;
        v10 = *(char **)(v7 + 8);
        v9 = *(char **)(v7 + 16);
        if (v10 != v9)
        {
          v11 = v9 - v10 - 4;
          if (v11 < 0x1C)
            goto LABEL_18;
          if ((unint64_t)(v6 - v10 + 2) < 0x20)
            goto LABEL_18;
          v12 = (v11 >> 2) + 1;
          v13 = 4 * (v12 & 0x7FFFFFFFFFFFFFF8);
          v3 += v13;
          v14 = &v10[v13];
          v15 = (__int128 *)(v10 + 16);
          v16 = v6 + 18;
          v17 = v12 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v18 = *v15;
            *(v16 - 1) = *(v15 - 1);
            *v16 = v18;
            v15 += 2;
            v16 += 2;
            v17 -= 8;
          }
          while (v17);
          v10 = v14;
          if (v12 != (v12 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_18:
            do
            {
              v19 = *(_DWORD *)v10;
              v10 += 4;
              *(_DWORD *)v3 = v19;
              v3 += 4;
            }
            while (v10 != v9);
          }
        }
        v7 += 32;
        v6 = v3;
      }
      while (v7 != v8);
      v4 += 40;
    }
    while (v4 != v5);
  }
LABEL_2:
  *result = v3;
  return result;
}

int *coex::tlv::abm::parseField(unsigned __int8 *a1, const unsigned __int8 *a2, char **a3)
{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)1);
  return tlv::parseSequence<coex::tlv::abm::AntBlockClientInfoSet>((int *)(a1 + 1), a2, a3, *a1);
}

int *tlv::parseV<coex::tlv::abm::ClientAntBlockInformationSetExtended>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  tlv *v5;
  const unsigned __int8 *v6;
  int *result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  result = tlv::parseSequence<coex::tlv::abm::AntBlockClientInfoSet>((int *)((char *)v5 + 1), v6, (char **)a3, *(unsigned __int8 *)v5);
  *a1 = (tlv *)result;
  return result;
}

void sub_1B3DA1E40(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DA1E30);
}

void sub_1B3DA1E50(_Unwind_Exception *a1)
{
  coex::tlv::abm::ClientAntBlockInformationSet *v1;

  coex::tlv::abm::ClientAntBlockInformationSet::~ClientAntBlockInformationSet(v1);
  _Unwind_Resume(a1);
}

uint64_t tlv::size<coex::tlv::abm::ClientAntBlockInformationSetExtended>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int8x16_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const double *v13;
  int64x2_t v14;
  int64x2_t v15;
  const double *v16;
  unint64_t v17;
  float64x2x4_t v19;
  float64x2x4_t v20;

  v1 = *a1;
  v2 = a1[1];
  if (*a1 == v2)
    return 4;
  v3 = 0;
  v4 = (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFFCLL);
  do
  {
    while (1)
    {
      v6 = *(_QWORD *)(v1 + 16);
      v5 = *(_QWORD *)(v1 + 24);
      if (v6 != v5)
        break;
      v3 += 10;
      v1 += 40;
      if (v1 == v2)
        return v3 + 4;
    }
    v7 = v5 - v6 - 32;
    if (v7 >= 0x80)
    {
      v10 = (v7 >> 5) + 1;
      v11 = v10 & 3;
      if ((v10 & 3) == 0)
        v11 = 4;
      v12 = v10 - v11;
      v9 = v6 + 32 * v12;
      v13 = (const double *)(v6 + 72);
      v14 = 0uLL;
      v15 = 0uLL;
      do
      {
        v16 = v13 - 8;
        v19 = vld4q_f64(v16);
        v20 = vld4q_f64(v13);
        v19.val[2] = (float64x2_t)vdupq_n_s64(2uLL);
        v14 = vaddq_s64((int64x2_t)vbslq_s8((int8x16_t)vceqq_s64((int64x2_t)v19.val[1], (int64x2_t)v19.val[0]), (int8x16_t)v19.val[2], vorrq_s8(vandq_s8((int8x16_t)vsubq_s64((int64x2_t)v19.val[1], (int64x2_t)v19.val[0]), v4), (int8x16_t)v19.val[2])), v14);
        v15 = vaddq_s64((int64x2_t)vbslq_s8((int8x16_t)vceqq_s64((int64x2_t)v20.val[1], (int64x2_t)v20.val[0]), (int8x16_t)v19.val[2], vorrq_s8(vandq_s8((int8x16_t)vsubq_s64((int64x2_t)v20.val[1], (int64x2_t)v20.val[0]), v4), (int8x16_t)v19.val[2])), v15);
        v13 += 16;
        v12 -= 4;
      }
      while (v12);
      v8 = vaddvq_s64(vaddq_s64(v15, v14));
    }
    else
    {
      v8 = 0;
      v9 = *(_QWORD *)(v1 + 16);
    }
    do
    {
      v17 = (*(_QWORD *)(v9 + 16) - *(_QWORD *)(v9 + 8)) & 0xFFFFFFFFFFFFFFFCLL | 2;
      if (*(_QWORD *)(v9 + 16) == *(_QWORD *)(v9 + 8))
        v17 = 2;
      v8 += v17;
      v9 += 32;
    }
    while (v9 != v5);
    v3 += v8 + 10;
    v1 += 40;
  }
  while (v1 != v2);
  return v3 + 4;
}

_BYTE **tlv::writeV<coex::tlv::abm::ClientAntBlockInformationSetExtended>(_BYTE **result, _DWORD *a2)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  __int128 *v15;
  _OWORD *v16;
  uint64_t v17;
  __int128 v18;
  int v19;

  v2 = *result;
  *v2 = -51 * ((a2[2] - *a2) >> 3);
  v3 = v2 + 1;
  v4 = *(_QWORD *)a2;
  v5 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 != v5)
  {
    do
    {
      while (1)
      {
        *(_DWORD *)v3 = *(_DWORD *)v4;
        *((_DWORD *)v3 + 1) = *(_DWORD *)(v4 + 4);
        v3[8] = *(_BYTE *)(v4 + 8);
        v6 = v3 + 10;
        v3[9] = (*(_DWORD *)(v4 + 24) - *(_DWORD *)(v4 + 16)) >> 5;
        v7 = *(_QWORD *)(v4 + 16);
        v8 = *(_QWORD *)(v4 + 24);
        if (v7 != v8)
          break;
        v3 += 10;
        v4 += 40;
        if (v4 == v5)
          goto LABEL_2;
      }
      do
      {
        *v6 = *(_BYTE *)v7;
        v3 = v6 + 2;
        v6[1] = (*(_DWORD *)(v7 + 16) - *(_DWORD *)(v7 + 8)) >> 2;
        v10 = *(char **)(v7 + 8);
        v9 = *(char **)(v7 + 16);
        if (v10 != v9)
        {
          v11 = v9 - v10 - 4;
          if (v11 < 0x1C)
            goto LABEL_18;
          if ((unint64_t)(v6 - v10 + 2) < 0x20)
            goto LABEL_18;
          v12 = (v11 >> 2) + 1;
          v13 = 4 * (v12 & 0x7FFFFFFFFFFFFFF8);
          v3 += v13;
          v14 = &v10[v13];
          v15 = (__int128 *)(v10 + 16);
          v16 = v6 + 18;
          v17 = v12 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v18 = *v15;
            *(v16 - 1) = *(v15 - 1);
            *v16 = v18;
            v15 += 2;
            v16 += 2;
            v17 -= 8;
          }
          while (v17);
          v10 = v14;
          if (v12 != (v12 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_18:
            do
            {
              v19 = *(_DWORD *)v10;
              v10 += 4;
              *(_DWORD *)v3 = v19;
              v3 += 4;
            }
            while (v10 != v9);
          }
        }
        v7 += 32;
        v6 = v3;
      }
      while (v7 != v8);
      v4 += 40;
    }
    while (v4 != v5);
  }
LABEL_2:
  *result = v3;
  return result;
}

_QWORD *tlv::parseV<coex::tlv::abm::TransparentMessageInfoSet>@<X0>(tlv **a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  tlv *v5;
  const unsigned __int8 *v6;
  unint64_t v7;
  _QWORD *result;

  *a3 = 0xAAAAAAAA00000000;
  a3[1] = 0;
  a3[2] = 0;
  a3[3] = 0;
  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 4), v6, (const unsigned __int8 *)1);
  v7 = *((unsigned __int8 *)v5 + 4);
  v5 = (tlv *)((char *)v5 + 5);
  tlv::throwIfNotEnoughBytes(v5, v6, (const unsigned __int8 *)v7);
  result = std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3 + 1, (char *)v5, (char *)v5 + v7, v7);
  *a1 = (tlv *)((char *)v5 + v7);
  return result;
}

void sub_1B3DA2268(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DA2254);
}

void sub_1B3DA2278(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<coex::tlv::abm::TransparentMessageInfoSet>(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) + 8;
}

void *tlv::writeV<coex::tlv::abm::TransparentMessageInfoSet>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *result;

  v4 = *a1;
  *(_DWORD *)v4 = *(_DWORD *)a2;
  v5 = v4 + 5;
  *(_BYTE *)(v4 + 4) = *(_BYTE *)(a2 + 16) - *(_DWORD *)(a2 + 8);
  result = memcpy((void *)(v4 + 5), *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8));
  *a1 = v5 + *(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8);
  return result;
}

char *coex::tlv::abm::parseField(char *a1, const unsigned __int8 *a2, char **a3)
{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)1);
  return tlv::parseSequence<coex::tlv::abm::TransparentMessageInfoSet>(a1 + 1, a2, a3, *a1);
}

char *tlv::parseSequence<coex::tlv::abm::TransparentMessageInfoSet>(char *a1, const unsigned __int8 *a2, char **a3, unint64_t a4)
{
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  void *v26;
  char *v27;
  void *v28;
  char *v29;
  char *v30;
  unint64_t v31;
  char *v32;

  v8 = *a3;
  v7 = a3[1];
  v9 = v7 - *a3;
  v10 = v9 >> 5;
  v11 = a4 - (v9 >> 5);
  if (a4 <= v9 >> 5)
  {
    if (a4 >= v9 >> 5)
    {
      v27 = a3[1];
      v29 = *a3;
      if (*a3 == v7)
        return a1;
      goto LABEL_33;
    }
    v27 = &v8[32 * a4];
    while (v7 != v27)
    {
      v28 = (void *)*((_QWORD *)v7 - 3);
      if (v28)
      {
        *((_QWORD *)v7 - 2) = v28;
        operator delete(v28);
      }
      v7 -= 32;
    }
    a3[1] = v27;
    v29 = *a3;
    if (*a3 != v27)
    {
LABEL_33:
      v30 = v29;
      do
      {
        tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
        *(_DWORD *)v30 = *(_DWORD *)a1;
        v30 += 32;
        tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)1);
        v31 = a1[4];
        v32 = a1 + 5;
        tlv::throwIfNotEnoughBytes((tlv *)(a1 + 5), a2, (const unsigned __int8 *)v31);
        a1 += v31 + 5;
        std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((_QWORD *)v29 + 1, v32, &v32[v31], v31);
        v29 = v30;
      }
      while (v30 != v27);
    }
  }
  else
  {
    v12 = a3[2];
    if (v11 <= (v12 - v7) >> 5)
    {
      bzero(a3[1], 32 * v11);
      a3[1] = &v7[32 * v11];
      v27 = &v7[32 * v11];
      v29 = *a3;
      if (*a3 == v27)
        return a1;
      goto LABEL_33;
    }
    if (a4 >> 59)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v13 = v12 - v8;
    v14 = v13 >> 4;
    if (v13 >> 4 <= a4)
      v14 = a4;
    v15 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0;
    v16 = 0x7FFFFFFFFFFFFFFLL;
    if (!v15)
      v16 = v14;
    if (v16 >> 59)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v17 = 32 * v16;
    v18 = (char *)operator new(32 * v16);
    v19 = &v18[32 * v10];
    v20 = &v18[v17];
    bzero(v19, 32 * v11);
    v21 = &v19[32 * v11];
    if (v7 == v8)
    {
      *a3 = v19;
      a3[1] = v21;
      a3[2] = v20;
    }
    else
    {
      v22 = 0;
      do
      {
        v23 = &v19[v22];
        v24 = &v7[v22];
        *((_DWORD *)v23 - 8) = *(_DWORD *)&v7[v22 - 32];
        *(_OWORD *)(v23 - 24) = *(_OWORD *)&v7[v22 - 24];
        *((_QWORD *)v23 - 1) = *(_QWORD *)&v7[v22 - 8];
        *((_QWORD *)v24 - 3) = 0;
        *((_QWORD *)v24 - 2) = 0;
        *((_QWORD *)v24 - 1) = 0;
        v22 -= 32;
      }
      while (&v7[v22] != v8);
      v7 = *a3;
      v25 = a3[1];
      *a3 = &v19[v22];
      a3[1] = v21;
      a3[2] = v20;
      while (v25 != v7)
      {
        v26 = (void *)*((_QWORD *)v25 - 3);
        if (v26)
        {
          *((_QWORD *)v25 - 2) = v26;
          operator delete(v26);
        }
        v25 -= 32;
      }
    }
    if (v7)
      operator delete(v7);
    v29 = *a3;
    v27 = a3[1];
    if (*a3 != v27)
      goto LABEL_33;
  }
  return a1;
}

char *tlv::parseV<coex::tlv::abm::TransparentMessageInformationSet>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  tlv *v5;
  const unsigned __int8 *v6;
  char *result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  result = tlv::parseSequence<coex::tlv::abm::TransparentMessageInfoSet>((char *)v5 + 1, v6, (char **)a3, *(unsigned __int8 *)v5);
  *a1 = (tlv *)result;
  return result;
}

void sub_1B3DA2748(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DA2738);
}

void sub_1B3DA2758(_Unwind_Exception *a1)
{
  coex::tlv::abm::AntBlockBandInformationSet *v1;

  coex::tlv::abm::AntBlockBandInformationSet::~AntBlockBandInformationSet(v1);
  _Unwind_Resume(a1);
}

uint64_t tlv::size<coex::tlv::abm::TransparentMessageInformationSet>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const double *v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  const double *v14;
  float64x2x4_t v15;
  float64x2x4_t v16;

  v2 = *a1;
  v1 = a1[1];
  if (*a1 == v1)
    return 4;
  v3 = v1 - v2 - 32;
  if (v3 >= 0x80)
  {
    v7 = (v3 >> 5) + 1;
    v8 = v7 & 3;
    if ((v7 & 3) == 0)
      v8 = 4;
    v9 = v7 - v8;
    v5 = v2 + 32 * v9;
    v10 = (const double *)(v2 + 72);
    v11 = 0uLL;
    v12 = vdupq_n_s64(5uLL);
    v13 = 0uLL;
    do
    {
      v14 = v10 - 8;
      v15 = vld4q_f64(v14);
      v16 = vld4q_f64(v10);
      v11 = vaddq_s64(vsubq_s64(vaddq_s64(v11, (int64x2_t)v15.val[1]), (int64x2_t)v15.val[0]), v12);
      v13 = vaddq_s64(vsubq_s64(vaddq_s64(v13, (int64x2_t)v16.val[1]), (int64x2_t)v16.val[0]), v12);
      v10 += 16;
      v9 -= 4;
    }
    while (v9);
    v4 = vaddvq_s64(vaddq_s64(v13, v11));
  }
  else
  {
    v4 = 0;
    v5 = *a1;
  }
  do
  {
    v4 = v4 + *(_QWORD *)(v5 + 16) - *(_QWORD *)(v5 + 8) + 5;
    v5 += 32;
  }
  while (v5 != v1);
  return v4 + 4;
}

_BYTE **tlv::writeV<coex::tlv::abm::TransparentMessageInformationSet>(_BYTE **result, _DWORD *a2)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;

  v2 = result;
  v3 = *result;
  *v3 = (a2[2] - *a2) >> 5;
  v4 = v3 + 1;
  v5 = *(_QWORD *)a2;
  v6 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 != v6)
  {
    do
    {
      *(_DWORD *)v4 = *(_DWORD *)v5;
      v7 = v4 + 5;
      v4[4] = *(_BYTE *)(v5 + 16) - *(_DWORD *)(v5 + 8);
      result = (_BYTE **)memcpy(v4 + 5, *(const void **)(v5 + 8), *(_QWORD *)(v5 + 16) - *(_QWORD *)(v5 + 8));
      v4 = &v7[*(_QWORD *)(v5 + 16) - *(_QWORD *)(v5 + 8)];
      v5 += 32;
    }
    while (v5 != v6);
  }
  *v2 = v4;
  return result;
}

BOOL tlv::parseV<coex::tlv::abm::ReportWWANState>(tlv **a1, int a2)
{
  tlv *v3;
  _BOOL8 result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DA294C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::ReportWWANState>()
{
  return 4;
}

_BYTE **tlv::writeV<coex::tlv::abm::ReportWWANState>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

BOOL tlv::parseV<coex::tlv::abm::ReportBLERStats>(tlv **a1, int a2)
{
  tlv *v3;
  _BOOL8 result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DA2A14(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::ReportBLERStats>()
{
  return 4;
}

_BYTE **tlv::writeV<coex::tlv::abm::ReportBLERStats>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

BOOL tlv::parseV<coex::tlv::abm::ReportFailCondition>(tlv **a1, int a2)
{
  tlv *v3;
  _BOOL8 result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DA2ADC(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::ReportFailCondition>()
{
  return 4;
}

_BYTE **tlv::writeV<coex::tlv::abm::ReportFailCondition>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

BOOL tlv::parseV<coex::tlv::abm::ReportSuccessCondition>(tlv **a1, int a2)
{
  tlv *v3;
  _BOOL8 result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DA2BA4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::ReportSuccessCondition>()
{
  return 4;
}

_BYTE **tlv::writeV<coex::tlv::abm::ReportSuccessCondition>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

BOOL tlv::parseV<coex::tlv::abm::ReportTxAntennaState>(tlv **a1, int a2)
{
  tlv *v3;
  _BOOL8 result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DA2C6C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::ReportTxAntennaState>()
{
  return 4;
}

_BYTE **tlv::writeV<coex::tlv::abm::ReportTxAntennaState>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

BOOL tlv::parseV<coex::tlv::abm::ReportNRState>(tlv **a1, int a2)
{
  tlv *v3;
  _BOOL8 result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DA2D34(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::ReportNRState>()
{
  return 4;
}

_BYTE **tlv::writeV<coex::tlv::abm::ReportNRState>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

BOOL tlv::parseV<coex::tlv::abm::ReportWCI2TxAntMap>(tlv **a1, int a2)
{
  tlv *v3;
  _BOOL8 result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DA2DFC(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::ReportWCI2TxAntMap>()
{
  return 4;
}

_BYTE **tlv::writeV<coex::tlv::abm::ReportWCI2TxAntMap>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::WLANScanID>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3DA2EB4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::WLANScanID>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::WLANScanID>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::WLANConnectionHandle>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3DA2F6C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::WLANConnectionHandle>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::WLANConnectionHandle>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::LTETransportBlockCountErrorThreshold>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3DA3024(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::LTETransportBlockCountErrorThreshold>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::LTETransportBlockCountErrorThreshold>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::LTETransportBlockCountErrorCount>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3DA30DC(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::LTETransportBlockCountErrorCount>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::LTETransportBlockCountErrorCount>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

float tlv::parseV<coex::tlv::abm::LTESINRMetricParameters>(tlv **a1, int a2)
{
  tlv *v3;
  float result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(float *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

float sub_1B3DA3194(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0.0;
}

uint64_t tlv::size<coex::tlv::abm::LTESINRMetricParameters>()
{
  return 7;
}

float tlv::writeV<coex::tlv::abm::LTESINRMetricParameters>(_DWORD **a1, float *a2)
{
  _DWORD *v2;
  float result;

  v2 = *a1;
  result = *a2;
  *v2 = *(_DWORD *)a2;
  *a1 = v2 + 1;
  return result;
}

float tlv::parseV<coex::tlv::abm::LTESINRFilteredOutput>(tlv **a1, int a2)
{
  tlv *v3;
  float result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(float *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

float sub_1B3DA324C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0.0;
}

uint64_t tlv::size<coex::tlv::abm::LTESINRFilteredOutput>()
{
  return 7;
}

float tlv::writeV<coex::tlv::abm::LTESINRFilteredOutput>(_DWORD **a1, float *a2)
{
  _DWORD *v2;
  float result;

  v2 = *a1;
  result = *a2;
  *v2 = *(_DWORD *)a2;
  *a1 = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::ContinuousTxSubframeDenialsStatus>(tlv **a1, unsigned int a2)
{
  tlv *v4;
  uint64_t result;

  v4 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + (int)a2, (const unsigned __int8 *)8);
  if (a2 >= 8)
  {
    result = *(_QWORD *)v4;
    *a1 = (tlv *)((char *)v4 + 8);
  }
  else
  {
    result = 0;
    *a1 = v4;
  }
  return result;
}

uint64_t sub_1B3DA3348(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::ContinuousTxSubframeDenialsStatus>()
{
  return 11;
}

_QWORD **tlv::writeV<coex::tlv::abm::ContinuousTxSubframeDenialsStatus>(_QWORD **result, _QWORD *a2)
{
  _QWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::QMITxPowerLimitEnforceFailure>(tlv **a1, unsigned int a2)
{
  tlv *v4;
  uint64_t result;

  v4 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + (int)a2, (const unsigned __int8 *)8);
  if (a2 >= 8)
  {
    result = *(_QWORD *)v4;
    *a1 = (tlv *)((char *)v4 + 8);
  }
  else
  {
    result = 0;
    *a1 = v4;
  }
  return result;
}

uint64_t sub_1B3DA3448(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::QMITxPowerLimitEnforceFailure>()
{
  return 11;
}

_QWORD **tlv::writeV<coex::tlv::abm::QMITxPowerLimitEnforceFailure>(_QWORD **result, _QWORD *a2)
{
  _QWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::WCI2TxPowerLimitEnforceFailure>(tlv **a1, unsigned int a2)
{
  tlv *v4;
  uint64_t result;

  v4 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + (int)a2, (const unsigned __int8 *)8);
  if (a2 >= 8)
  {
    result = *(_QWORD *)v4;
    *a1 = (tlv *)((char *)v4 + 8);
  }
  else
  {
    result = 0;
    *a1 = v4;
  }
  return result;
}

uint64_t sub_1B3DA3548(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::WCI2TxPowerLimitEnforceFailure>()
{
  return 11;
}

_QWORD **tlv::writeV<coex::tlv::abm::WCI2TxPowerLimitEnforceFailure>(_QWORD **result, _QWORD *a2)
{
  _QWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::WCI2MWSFrameSyncAssertOFFSET>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  v6 = *((unsigned int *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 8);
  return (v6 << 32) | v5;
}

uint64_t sub_1B3DA3668(void *a1)
{
  _QWORD *v1;
  unsigned int v2;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<coex::tlv::abm::WCI2MWSFrameSyncAssertOFFSET>()
{
  return 11;
}

_DWORD **tlv::writeV<coex::tlv::abm::WCI2MWSFrameSyncAssertOFFSET>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  *result = v2 + 2;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::WCI2MWSFrameSyncAssertJITTER>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  v6 = *((unsigned int *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 8);
  return (v6 << 32) | v5;
}

uint64_t sub_1B3DA379C(void *a1)
{
  _QWORD *v1;
  unsigned int v2;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<coex::tlv::abm::WCI2MWSFrameSyncAssertJITTER>()
{
  return 11;
}

_DWORD **tlv::writeV<coex::tlv::abm::WCI2MWSFrameSyncAssertJITTER>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  *result = v2 + 2;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::WCI2MWSRxAssertOFFSET>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  v6 = *((unsigned int *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 8);
  return (v6 << 32) | v5;
}

uint64_t sub_1B3DA38D0(void *a1)
{
  _QWORD *v1;
  unsigned int v2;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<coex::tlv::abm::WCI2MWSRxAssertOFFSET>()
{
  return 11;
}

_DWORD **tlv::writeV<coex::tlv::abm::WCI2MWSRxAssertOFFSET>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  *result = v2 + 2;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::WCI2MWSRxAssertJITTER>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  v6 = *((unsigned int *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 8);
  return (v6 << 32) | v5;
}

uint64_t sub_1B3DA3A04(void *a1)
{
  _QWORD *v1;
  unsigned int v2;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<coex::tlv::abm::WCI2MWSRxAssertJITTER>()
{
  return 11;
}

_DWORD **tlv::writeV<coex::tlv::abm::WCI2MWSRxAssertJITTER>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  *result = v2 + 2;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::WCI2MWSRxDeassertOFFSET>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  v6 = *((unsigned int *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 8);
  return (v6 << 32) | v5;
}

uint64_t sub_1B3DA3B38(void *a1)
{
  _QWORD *v1;
  unsigned int v2;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<coex::tlv::abm::WCI2MWSRxDeassertOFFSET>()
{
  return 11;
}

_DWORD **tlv::writeV<coex::tlv::abm::WCI2MWSRxDeassertOFFSET>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  *result = v2 + 2;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::WCI2MWSRxDeassertJITTER>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  v6 = *((unsigned int *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 8);
  return (v6 << 32) | v5;
}

uint64_t sub_1B3DA3C6C(void *a1)
{
  _QWORD *v1;
  unsigned int v2;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<coex::tlv::abm::WCI2MWSRxDeassertJITTER>()
{
  return 11;
}

_DWORD **tlv::writeV<coex::tlv::abm::WCI2MWSRxDeassertJITTER>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  *result = v2 + 2;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::WCI2MWSTxAssertOFFSET>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  v6 = *((unsigned int *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 8);
  return (v6 << 32) | v5;
}

uint64_t sub_1B3DA3DA0(void *a1)
{
  _QWORD *v1;
  unsigned int v2;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<coex::tlv::abm::WCI2MWSTxAssertOFFSET>()
{
  return 11;
}

_DWORD **tlv::writeV<coex::tlv::abm::WCI2MWSTxAssertOFFSET>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  *result = v2 + 2;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::WCI2MWSTxAssertJITTER>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  v6 = *((unsigned int *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 8);
  return (v6 << 32) | v5;
}

uint64_t sub_1B3DA3ED4(void *a1)
{
  _QWORD *v1;
  unsigned int v2;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<coex::tlv::abm::WCI2MWSTxAssertJITTER>()
{
  return 11;
}

_DWORD **tlv::writeV<coex::tlv::abm::WCI2MWSTxAssertJITTER>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  *result = v2 + 2;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::WCI2MWSTxDeassertOFFSET>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  v6 = *((unsigned int *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 8);
  return (v6 << 32) | v5;
}

uint64_t sub_1B3DA4008(void *a1)
{
  _QWORD *v1;
  unsigned int v2;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<coex::tlv::abm::WCI2MWSTxDeassertOFFSET>()
{
  return 11;
}

_DWORD **tlv::writeV<coex::tlv::abm::WCI2MWSTxDeassertOFFSET>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  *result = v2 + 2;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::WCI2MWSTxDeassertJITTER>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  v6 = *((unsigned int *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 8);
  return (v6 << 32) | v5;
}

uint64_t sub_1B3DA413C(void *a1)
{
  _QWORD *v1;
  unsigned int v2;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<coex::tlv::abm::WCI2MWSTxDeassertJITTER>()
{
  return 11;
}

_DWORD **tlv::writeV<coex::tlv::abm::WCI2MWSTxDeassertJITTER>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  *result = v2 + 2;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::TxPowerLimitEnforceSuccess>(tlv **a1, unsigned int a2)
{
  tlv *v4;
  uint64_t result;

  v4 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + (int)a2, (const unsigned __int8 *)8);
  if (a2 >= 8)
  {
    result = *(_QWORD *)v4;
    *a1 = (tlv *)((char *)v4 + 8);
  }
  else
  {
    result = 0;
    *a1 = v4;
  }
  return result;
}

uint64_t sub_1B3DA4250(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::TxPowerLimitEnforceSuccess>()
{
  return 11;
}

_QWORD **tlv::writeV<coex::tlv::abm::TxPowerLimitEnforceSuccess>(_QWORD **result, _QWORD *a2)
{
  _QWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

char *coex::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, _QWORD *a3)
{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)8);
  *a3 = *(_QWORD *)a1;
  return (char *)a1 + 8;
}

uint64_t tlv::parseV<coex::tlv::abm::CallType>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)8);
  result = *(_QWORD *)v3;
  *a1 = (tlv *)((char *)v3 + 8);
  return result;
}

uint64_t sub_1B3DA430C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::CallType>()
{
  return 11;
}

_QWORD **tlv::writeV<coex::tlv::abm::CallType>(_QWORD **result, _QWORD *a2)
{
  _QWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::LongDrxCycle>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B3DA43C4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::LongDrxCycle>()
{
  return 5;
}

_WORD **tlv::writeV<coex::tlv::abm::LongDrxCycle>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::ShortDrxTimer>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B3DA447C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::ShortDrxTimer>()
{
  return 5;
}

_WORD **tlv::writeV<coex::tlv::abm::ShortDrxTimer>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::SleepWakeDurScale>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DA4534(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::SleepWakeDurScale>()
{
  return 4;
}

_BYTE **tlv::writeV<coex::tlv::abm::SleepWakeDurScale>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::DefaultIdx>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DA45EC(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::DefaultIdx>()
{
  return 4;
}

_BYTE **tlv::writeV<coex::tlv::abm::DefaultIdx>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::ThresholdInPercentage>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DA46A4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::ThresholdInPercentage>()
{
  return 4;
}

_BYTE **tlv::writeV<coex::tlv::abm::ThresholdInPercentage>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::ThresholdOutPercentage>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DA475C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::ThresholdOutPercentage>()
{
  return 4;
}

_BYTE **tlv::writeV<coex::tlv::abm::ThresholdOutPercentage>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::DeactivationTimerMs>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3DA4814(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::DeactivationTimerMs>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::DeactivationTimerMs>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::StopDeactivationTimerMs>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3DA48CC(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::StopDeactivationTimerMs>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::StopDeactivationTimerMs>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::ThrottlePeriodicity>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3DA4984(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::ThrottlePeriodicity>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::ThrottlePeriodicity>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<coex::tlv::abm::ClientId>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3DA4A3C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::ClientId>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::ClientId>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t coex::tlv::abm::parseField(coex::tlv::abm *this, const unsigned __int8 *a2, unsigned __int8 *a3, Duration *a4)
{
  tlv::throwIfNotEnoughBytes(this, a2, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)this;
  return (uint64_t)this + 4;
}

uint64_t coex::tlv::abm::writeField(coex::tlv::abm *this, unsigned __int8 *a2, const Duration *a3)
{
  *(_DWORD *)this = *(_DWORD *)a2;
  return (uint64_t)this + 4;
}

uint64_t coex::tlv::abm::getFieldSize(coex::tlv::abm *this, const Duration *a2)
{
  return 4;
}

uint64_t tlv::parseV<coex::tlv::abm::Duration>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3DA4AF4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<coex::tlv::abm::Duration>()
{
  return 7;
}

_DWORD **tlv::writeV<coex::tlv::abm::Duration>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

void std::vector<coex::tlv::abm::NGCCarrierInformation>::__append(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  __int128 v17;

  v5 = a1[1];
  v4 = a1[2];
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - v5) >> 2) >= a2)
  {
    if (a2)
    {
      v12 = 28 * ((28 * a2 - 28) / 0x1C) + 28;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0x6DB6DB6DB6DB6DB7 * ((v5 - *a1) >> 2);
    v8 = v7 + a2;
    if (v7 + a2 > 0x924924924924924)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v9 = 0x6DB6DB6DB6DB6DB7 * ((v4 - v6) >> 2);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x492492492492492)
      v10 = 0x924924924924924;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x924924924924924)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = (char *)operator new(28 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[28 * v7];
    v14 = &v11[28 * v10];
    v15 = 28 * ((28 * a2 - 28) / 0x1C) + 28;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        v17 = *(_OWORD *)(v5 - 28);
        *(_OWORD *)(v13 - 18) = *(_OWORD *)(v5 - 18);
        *(_OWORD *)(v13 - 28) = v17;
        v13 -= 28;
        v5 -= 28;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
      operator delete(v5);
  }
}

void std::vector<coex::tlv::abm::BandInfo>::__append(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = (char *)*a1;
    v8 = v5 - (_BYTE *)*a1;
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v11 = v4 - v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x58)
        goto LABEL_30;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_30;
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[8 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_30:
        do
        {
          v25 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
      v6 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v16;
    if (v6)
      operator delete(v6);
  }
}

void std::vector<int>::__append(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  unsigned int *value;
  std::vector<unsigned int>::pointer end;
  unsigned int *v6;
  std::vector<unsigned int>::pointer begin;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  unsigned int *v16;
  unsigned int *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  int v25;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  v6 = end;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(end, 4 * __n);
      v6 = &end[__n];
    }
    this->__end_ = v6;
  }
  else
  {
    begin = this->__begin_;
    v8 = (char *)end - (char *)this->__begin_;
    v9 = v8 >> 2;
    v10 = (v8 >> 2) + __n;
    if (v10 >> 62)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v11 = (char *)value - (char *)begin;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = operator new(4 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = 4 * __n;
    v16 = (unsigned int *)&v13[4 * v12];
    bzero(v14, v15);
    v17 = (unsigned int *)&v14[v15];
    if (end != begin)
    {
      v18 = (char *)end - (char *)begin - 4;
      if (v18 < 0x2C)
        goto LABEL_29;
      if ((unint64_t)((char *)end - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 2) + 1;
      v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      v6 = &end[v20 / 0xFFFFFFFFFFFFFFFCLL];
      v14 -= v20;
      v21 = &v13[4 * v9 - 16];
      v22 = (__int128 *)(end - 4);
      v23 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v24 = *v22;
        *(v21 - 1) = *(v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 2;
        v23 -= 8;
      }
      while (v23);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_29:
        do
        {
          v25 = *--v6;
          *((_DWORD *)v14 - 1) = v25;
          v14 -= 4;
        }
        while (v6 != begin);
      }
    }
    this->__begin_ = (std::vector<unsigned int>::pointer)v14;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
      operator delete(begin);
  }
}

char *wda::parseField(tlv *a1, const unsigned __int8 *a2, _DWORD *a3)
{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

_DWORD *wda::writeField(_DWORD *a1, int a2)
{
  *a1 = a2;
  return a1 + 1;
}

{
  *a1 = a2;
  return a1 + 1;
}

{
  *a1 = a2;
  return a1 + 1;
}

{
  *a1 = a2;
  return a1 + 1;
}

{
  *a1 = a2;
  return a1 + 1;
}

{
  *a1 = a2;
  return a1 + 1;
}

uint64_t wda::getFieldSize()
{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 1;
}

char *wda::parseField(tlv *a1, const unsigned __int8 *a2, _BYTE *a3)
{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  return (char *)a1 + 1;
}

_BYTE *wda::writeField(_BYTE *a1, char a2)
{
  *a1 = a2;
  return a1 + 1;
}

char *wda::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, _DWORD *a3)
{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

_DWORD *wda::tlv::abm::writeField(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

uint64_t wda::tlv::abm::getFieldSize()
{
  return 4;
}

{
  return 8;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 4;
}

{
  return 1;
}

{
  return 1;
}

{
  return 2;
}

{
  return 4;
}

{
  return 4;
}

{
  return 1;
}

{
  return 1;
}

uint64_t tlv::parseV<wda::tlv::abm::LinkLayerProtocol>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3DA5298(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<wda::tlv::abm::LinkLayerProtocol>()
{
  return 7;
}

_DWORD **tlv::writeV<wda::tlv::abm::LinkLayerProtocol>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t wda::tlv::abm::parseField(uint64_t a1, const unsigned __int8 *a2, _DWORD *a3)
{
  uint64_t result;

  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  result = a1 + 8;
  a3[1] = *(_DWORD *)(a1 + 4);
  return result;
}

uint64_t tlv::parseV<wda::tlv::abm::PeripheralEndPointID>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  v6 = *((unsigned int *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 8);
  return (v6 << 32) | v5;
}

uint64_t sub_1B3DA53B4(void *a1)
{
  _QWORD *v1;
  unsigned int v2;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<wda::tlv::abm::PeripheralEndPointID>()
{
  return 11;
}

_DWORD **tlv::writeV<wda::tlv::abm::PeripheralEndPointID>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  *result = v2 + 2;
  return result;
}

uint64_t tlv::parseV<wda::tlv::abm::DownLinkDataAggregationProtocol>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3DA5484(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<wda::tlv::abm::DownLinkDataAggregationProtocol>()
{
  return 7;
}

_DWORD **tlv::writeV<wda::tlv::abm::DownLinkDataAggregationProtocol>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<wda::tlv::abm::DownLinkDataAggregationMaxDatagrams>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3DA553C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<wda::tlv::abm::DownLinkDataAggregationMaxDatagrams>()
{
  return 7;
}

_DWORD **tlv::writeV<wda::tlv::abm::DownLinkDataAggregationMaxDatagrams>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<wda::tlv::abm::DownLinkDataAggregationMaxSize>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3DA55F4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<wda::tlv::abm::DownLinkDataAggregationMaxSize>()
{
  return 7;
}

_DWORD **tlv::writeV<wda::tlv::abm::DownLinkDataAggregationMaxSize>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<wda::tlv::abm::UpLinkDataAggregationProtocol>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3DA56AC(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<wda::tlv::abm::UpLinkDataAggregationProtocol>()
{
  return 7;
}

_DWORD **tlv::writeV<wda::tlv::abm::UpLinkDataAggregationProtocol>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<wda::tlv::abm::UpLinkDataAggregationMaxDatagrams>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3DA5764(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<wda::tlv::abm::UpLinkDataAggregationMaxDatagrams>()
{
  return 7;
}

_DWORD **tlv::writeV<wda::tlv::abm::UpLinkDataAggregationMaxDatagrams>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<wda::tlv::abm::UpLinkDataAggregationMaxSize>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3DA581C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<wda::tlv::abm::UpLinkDataAggregationMaxSize>()
{
  return 7;
}

_DWORD **tlv::writeV<wda::tlv::abm::UpLinkDataAggregationMaxSize>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

char *wda::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, BOOL *a3)
{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1 != 0;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1 != 0;
  return (char *)a1 + 1;
}

_BYTE *wda::tlv::abm::writeField(_BYTE *a1, _BYTE *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

BOOL tlv::parseV<wda::tlv::abm::InBandFlowControl>(tlv **a1, int a2)
{
  tlv *v3;
  _BOOL8 result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DA58E4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<wda::tlv::abm::InBandFlowControl>()
{
  return 4;
}

_BYTE **tlv::writeV<wda::tlv::abm::InBandFlowControl>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

BOOL tlv::parseV<wda::tlv::abm::DataFlowControl>(tlv **a1, int a2)
{
  tlv *v3;
  _BOOL8 result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DA59AC(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<wda::tlv::abm::DataFlowControl>()
{
  return 4;
}

_BYTE **tlv::writeV<wda::tlv::abm::DataFlowControl>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t wda::tlv::abm::parseField(uint64_t a1, const unsigned __int8 *a2, BOOL *a3)
{
  uint64_t result;

  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1 != 0;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 1), a2, (const unsigned __int8 *)1);
  result = a1 + 2;
  a3[1] = *(_BYTE *)(a1 + 1) != 0;
  return result;
}

uint64_t tlv::parseV<wda::tlv::abm::CoalescingInformation>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  _BOOL4 v5;
  int v6;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)1);
  v5 = *(_BYTE *)v3 != 0;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 1), v4, (const unsigned __int8 *)1);
  v6 = *((_BYTE *)v3 + 1) != 0;
  *a1 = (tlv *)((char *)v3 + 2);
  return v5 | (v6 << 8);
}

uint64_t sub_1B3DA5AE4(void *a1)
{
  _QWORD *v1;
  unsigned int v2;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<wda::tlv::abm::CoalescingInformation>()
{
  return 5;
}

_BYTE **tlv::writeV<wda::tlv::abm::CoalescingInformation>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  *result = v2 + 2;
  return result;
}

uint64_t tlv::parseV<wda::tlv::abm::DataPowerSaveConfig>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3DA5BB0(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<wda::tlv::abm::DataPowerSaveConfig>()
{
  return 7;
}

_DWORD **tlv::writeV<wda::tlv::abm::DataPowerSaveConfig>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<wda::tlv::abm::DefaultFlowRebindVersion>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3DA5C68(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<wda::tlv::abm::DefaultFlowRebindVersion>()
{
  return 7;
}

_DWORD **tlv::writeV<wda::tlv::abm::DefaultFlowRebindVersion>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

char *wda::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, _BYTE *a3)
{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  return (char *)a1 + 1;
}

uint64_t tlv::parseV<wda::tlv::abm::LowLatencyConfig>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DA5D20(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<wda::tlv::abm::LowLatencyConfig>()
{
  return 4;
}

_BYTE **tlv::writeV<wda::tlv::abm::LowLatencyConfig>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<wda::tlv::abm::IMSLowLatencyConfig>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DA5DD8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<wda::tlv::abm::IMSLowLatencyConfig>()
{
  return 4;
}

_BYTE **tlv::writeV<wda::tlv::abm::IMSLowLatencyConfig>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

char *bsp::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, _DWORD *a3)
{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned __int8 *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned __int8 *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned __int8 *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned __int8 *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(unsigned __int8 *)a1;
  return (char *)a1 + 1;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

_DWORD *bsp::tlv::abm::writeField(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

uint64_t tlv::parseV<bsp::tlv::abm::CoreDumpEnabledType>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3DA5E90(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::CoreDumpEnabledType>()
{
  return 7;
}

_DWORD **tlv::writeV<bsp::tlv::abm::CoreDumpEnabledType>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

_OWORD *bsp::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, _OWORD *a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;

  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)0x50);
  *a3 = *(_OWORD *)a1;
  v5 = *((_OWORD *)a1 + 1);
  v6 = *((_OWORD *)a1 + 2);
  v7 = *((_OWORD *)a1 + 4);
  a3[3] = *((_OWORD *)a1 + 3);
  a3[4] = v7;
  a3[1] = v5;
  a3[2] = v6;
  return (_OWORD *)((char *)a1 + 80);
}

_OWORD *bsp::tlv::abm::writeField(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  *a1 = *a2;
  v2 = a2[1];
  v3 = a2[2];
  v4 = a2[4];
  a1[3] = a2[3];
  a1[4] = v4;
  a1[1] = v2;
  a1[2] = v3;
  return a1 + 5;
}

__n128 tlv::parseV<bsp::tlv::abm::CrashReason>@<Q0>(tlv **a1@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  tlv *v5;
  __int128 v6;
  __n128 result;

  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)0x50);
  v6 = *((_OWORD *)v5 + 3);
  a3[2] = *((_OWORD *)v5 + 2);
  a3[3] = v6;
  a3[4] = *((_OWORD *)v5 + 4);
  result = *((__n128 *)v5 + 1);
  *a3 = *(_OWORD *)v5;
  a3[1] = result;
  *a1 = (tlv *)((char *)v5 + 80);
  return result;
}

void sub_1B3DA5FA0(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<bsp::tlv::abm::CrashReason>()
{
  return 83;
}

__n128 tlv::writeV<bsp::tlv::abm::CrashReason>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *a1;
  *(_OWORD *)v2 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v2 + 64) = v5;
  *(__n128 *)(v2 + 16) = result;
  *(_OWORD *)(v2 + 32) = v4;
  *a1 = v2 + 80;
  return result;
}

uint64_t bsp::tlv::abm::parseField(uint64_t a1, const unsigned __int8 *a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)0x83);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  v5 = *(_OWORD *)(a1 + 16);
  v6 = *(_OWORD *)(a1 + 32);
  v7 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a3 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a3 + 64) = v7;
  *(_OWORD *)(a3 + 16) = v5;
  *(_OWORD *)(a3 + 32) = v6;
  v8 = *(_OWORD *)(a1 + 80);
  v9 = *(_OWORD *)(a1 + 96);
  v10 = *(_OWORD *)(a1 + 112);
  *(_DWORD *)(a3 + 127) = *(_DWORD *)(a1 + 127);
  *(_OWORD *)(a3 + 96) = v9;
  *(_OWORD *)(a3 + 112) = v10;
  *(_OWORD *)(a3 + 80) = v8;
  return a1 + 131;
}

{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)0x83);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  v5 = *(_OWORD *)(a1 + 16);
  v6 = *(_OWORD *)(a1 + 32);
  v7 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a3 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a3 + 64) = v7;
  *(_OWORD *)(a3 + 16) = v5;
  *(_OWORD *)(a3 + 32) = v6;
  v8 = *(_OWORD *)(a1 + 80);
  v9 = *(_OWORD *)(a1 + 96);
  v10 = *(_OWORD *)(a1 + 112);
  *(_DWORD *)(a3 + 127) = *(_DWORD *)(a1 + 127);
  *(_OWORD *)(a3 + 96) = v9;
  *(_OWORD *)(a3 + 112) = v10;
  *(_OWORD *)(a3 + 80) = v8;
  return a1 + 131;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)1);
  *(_BYTE *)a3 = *(_BYTE *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 1), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 5), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 5);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 9), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a1 + 9);
  return a1 + 13;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)1);
  *(_BYTE *)a3 = *(_BYTE *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 1), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 5), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 5);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 9), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a1 + 9);
  return a1 + 13;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)0x10);
  *(_OWORD *)(a3 + 4) = *(_OWORD *)(a1 + 4);
  return a1 + 20;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)1);
  *(_BYTE *)a3 = *(_BYTE *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 1), a2, (const unsigned __int8 *)1);
  *(_BYTE *)(a3 + 1) = *(_BYTE *)(a1 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)1);
  *(_BYTE *)(a3 + 2) = *(_BYTE *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 3), a2, (const unsigned __int8 *)1);
  *(_BYTE *)(a3 + 3) = *(_BYTE *)(a1 + 3);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)1);
  *(_BYTE *)(a3 + 4) = *(_BYTE *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 5), a2, (const unsigned __int8 *)1);
  *(_BYTE *)(a3 + 5) = *(_BYTE *)(a1 + 5);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 6), a2, (const unsigned __int8 *)1);
  *(_BYTE *)(a3 + 6) = *(_BYTE *)(a1 + 6);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 7), a2, (const unsigned __int8 *)1);
  *(_BYTE *)(a3 + 7) = *(_BYTE *)(a1 + 7);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)1);
  *(_BYTE *)(a3 + 8) = *(_BYTE *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 9), a2, (const unsigned __int8 *)1);
  *(_BYTE *)(a3 + 9) = *(_BYTE *)(a1 + 9);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 10), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a1 + 10);
  return a1 + 14;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)2);
  *(_WORD *)a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 6), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 6);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 10), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a1 + 10);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 14), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 16) = *(_DWORD *)(a1 + 14);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 18), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 20) = *(_DWORD *)(a1 + 18);
  return a1 + 22;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)2);
  *(_WORD *)a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 6), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 6);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 10), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a1 + 10);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 14), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 16) = *(_DWORD *)(a1 + 14);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 18), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 20) = *(_DWORD *)(a1 + 18);
  return a1 + 22;
}

{
  uint64_t v6;

  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)2);
  *(_WORD *)a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)2);
  *(_WORD *)(a3 + 2) = *(_WORD *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)2);
  *(_WORD *)(a3 + 4) = *(_WORD *)(a1 + 4);
  v6 = bsp::tlv::abm::parseField(a1 + 6, a2, a3 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)v6, a2, (const unsigned __int8 *)2);
  *(_WORD *)(a3 + 24) = *(_WORD *)v6;
  tlv::throwIfNotEnoughBytes((tlv *)(v6 + 2), a2, (const unsigned __int8 *)2);
  *(_WORD *)(a3 + 28) = *(_WORD *)(v6 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(v6 + 4), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 32) = *(_DWORD *)(v6 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(v6 + 8), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 36) = *(_DWORD *)(v6 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(v6 + 12), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 40) = *(_DWORD *)(v6 + 12);
  tlv::throwIfNotEnoughBytes((tlv *)(v6 + 16), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 44) = *(_DWORD *)(v6 + 16);
  tlv::throwIfNotEnoughBytes((tlv *)(v6 + 20), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 48) = *(_DWORD *)(v6 + 20);
  tlv::throwIfNotEnoughBytes((tlv *)(v6 + 24), a2, (const unsigned __int8 *)2);
  *(_WORD *)(a3 + 52) = *(_WORD *)(v6 + 24);
  return v6 + 26;
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)1);
  v6 = *(unsigned __int8 *)(a1 + 4);
  v7 = a1 + 5;
  v8 = *(_QWORD *)(a3 + 8);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = 0xCCCCCCCCCCCCCCCDLL * ((v9 - v8) >> 2);
  if (v6 <= v10)
  {
    if (v6 < v10)
    {
      v9 = v8 + 20 * v6;
      *(_QWORD *)(a3 + 16) = v9;
    }
  }
  else
  {
    std::vector<bsp::tlv::abm::CapabilitiesItem>::__append((char **)(a3 + 8), v6 - v10);
    v8 = *(_QWORD *)(a3 + 8);
    v9 = *(_QWORD *)(a3 + 16);
  }
  while (v8 != v9)
  {
    tlv::throwIfNotEnoughBytes((tlv *)v7, a2, (const unsigned __int8 *)4);
    *(_DWORD *)v8 = *(_DWORD *)v7;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 4), a2, (const unsigned __int8 *)0x10);
    *(_OWORD *)(v8 + 4) = *(_OWORD *)(v7 + 4);
    v7 += 20;
    v8 += 20;
  }
  return v7;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)1);
  *(_BYTE *)a3 = *(_BYTE *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 1), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 1);
  return a1 + 5;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)1);
  *(_BYTE *)a3 = *(_BYTE *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 1), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 1);
  return a1 + 5;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)1);
  *(_BYTE *)a3 = *(_BYTE *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 1), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 1);
  return a1 + 5;
}

uint64_t bsp::tlv::abm::writeField(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 127) = *(_DWORD *)(a2 + 127);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  return a1 + 131;
}

{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 127) = *(_DWORD *)(a2 + 127);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  return a1 + 131;
}

{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 1) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 5) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 9) = *(_DWORD *)(a2 + 12);
  return a1 + 13;
}

{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 1) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 5) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 9) = *(_DWORD *)(a2 + 12);
  return a1 + 13;
}

{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 4) = *(_OWORD *)(a2 + 4);
  return a1 + 20;
}

{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a2 + 6);
  *(_BYTE *)(a1 + 7) = *(_BYTE *)(a2 + 7);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_DWORD *)(a1 + 10) = *(_DWORD *)(a2 + 12);
  return a1 + 14;
}

{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_DWORD *)(a1 + 2) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 6) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 10) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 14) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 18) = *(_DWORD *)(a2 + 20);
  return a1 + 22;
}

{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a2 + 6);
  *(_BYTE *)(a1 + 7) = *(_BYTE *)(a2 + 7);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_DWORD *)(a1 + 10) = *(_DWORD *)(a2 + 12);
  return a1 + 14;
}

{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_DWORD *)(a1 + 2) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 6) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 10) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 14) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 18) = *(_DWORD *)(a2 + 20);
  return a1 + 22;
}

{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 7) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 10);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 11);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(a1 + 11) = *(_BYTE *)(a2 + 13);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 14);
  *(_BYTE *)(a1 + 13) = *(_BYTE *)(a2 + 15);
  *(_BYTE *)(a1 + 14) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 15) = *(_BYTE *)(a2 + 17);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 20);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 24);
  *(_WORD *)(a1 + 22) = *(_WORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 48);
  *(_WORD *)(a1 + 44) = *(_WORD *)(a2 + 52);
  return a1 + 46;
}

{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 1) = *(_DWORD *)(a2 + 4);
  return a1 + 5;
}

{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 1) = *(_DWORD *)(a2 + 4);
  return a1 + 5;
}

{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 1) = *(_DWORD *)(a2 + 4);
  return a1 + 5;
}

__n128 tlv::parseV<bsp::tlv::abm::CoreDumpCrashReasonA5String>@<Q0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  tlv *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;

  *(_DWORD *)(a3 + 127) = 0;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)0x83);
  v6 = *((_OWORD *)v5 + 7);
  *(_OWORD *)(a3 + 96) = *((_OWORD *)v5 + 6);
  *(_OWORD *)(a3 + 112) = v6;
  *(_DWORD *)(a3 + 127) = *(_DWORD *)((char *)v5 + 127);
  v7 = *((_OWORD *)v5 + 3);
  *(_OWORD *)(a3 + 32) = *((_OWORD *)v5 + 2);
  *(_OWORD *)(a3 + 48) = v7;
  v8 = *((_OWORD *)v5 + 5);
  *(_OWORD *)(a3 + 64) = *((_OWORD *)v5 + 4);
  *(_OWORD *)(a3 + 80) = v8;
  result = *((__n128 *)v5 + 1);
  *(_OWORD *)a3 = *(_OWORD *)v5;
  *(__n128 *)(a3 + 16) = result;
  *a1 = (tlv *)((char *)v5 + 131);
  return result;
}

void sub_1B3DA6108(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<bsp::tlv::abm::CoreDumpCrashReasonA5String>()
{
  return 134;
}

__n128 tlv::writeV<bsp::tlv::abm::CoreDumpCrashReasonA5String>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *a1;
  *(_OWORD *)v2 = *(_OWORD *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v2 + 64) = v5;
  *(_OWORD *)(v2 + 16) = v3;
  *(_OWORD *)(v2 + 32) = v4;
  result = *(__n128 *)(a2 + 80);
  v7 = *(_OWORD *)(a2 + 96);
  v8 = *(_OWORD *)(a2 + 112);
  *(_DWORD *)(v2 + 127) = *(_DWORD *)(a2 + 127);
  *(_OWORD *)(v2 + 96) = v7;
  *(_OWORD *)(v2 + 112) = v8;
  *(__n128 *)(v2 + 80) = result;
  *a1 = v2 + 131;
  return result;
}

char *bsp::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, _WORD *a3)
{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

_WORD *bsp::tlv::abm::writeField(_WORD *a1, _WORD *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  return a1 + 6;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1 + 4;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1 + 5;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1 + 3;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1 + 3;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1 + 5;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1 + 3;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1 + 3;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  a1[11] = a2[11];
  a1[12] = a2[12];
  a1[13] = a2[13];
  return a1 + 14;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

uint64_t tlv::parseV<bsp::tlv::abm::CoreDumpCrashReasonA5Line>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B3DA61E8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::CoreDumpCrashReasonA5Line>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::CoreDumpCrashReasonA5Line>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

__n128 tlv::parseV<bsp::tlv::abm::CoreDumpCrashReasonQ6String>@<Q0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  tlv *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;

  *(_DWORD *)(a3 + 127) = 0;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  v5 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)0x83);
  v6 = *((_OWORD *)v5 + 7);
  *(_OWORD *)(a3 + 96) = *((_OWORD *)v5 + 6);
  *(_OWORD *)(a3 + 112) = v6;
  *(_DWORD *)(a3 + 127) = *(_DWORD *)((char *)v5 + 127);
  v7 = *((_OWORD *)v5 + 3);
  *(_OWORD *)(a3 + 32) = *((_OWORD *)v5 + 2);
  *(_OWORD *)(a3 + 48) = v7;
  v8 = *((_OWORD *)v5 + 5);
  *(_OWORD *)(a3 + 64) = *((_OWORD *)v5 + 4);
  *(_OWORD *)(a3 + 80) = v8;
  result = *((__n128 *)v5 + 1);
  *(_OWORD *)a3 = *(_OWORD *)v5;
  *(__n128 *)(a3 + 16) = result;
  *a1 = (tlv *)((char *)v5 + 131);
  return result;
}

void sub_1B3DA6340(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<bsp::tlv::abm::CoreDumpCrashReasonQ6String>()
{
  return 134;
}

__n128 tlv::writeV<bsp::tlv::abm::CoreDumpCrashReasonQ6String>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *a1;
  *(_OWORD *)v2 = *(_OWORD *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v2 + 64) = v5;
  *(_OWORD *)(v2 + 16) = v3;
  *(_OWORD *)(v2 + 32) = v4;
  result = *(__n128 *)(a2 + 80);
  v7 = *(_OWORD *)(a2 + 96);
  v8 = *(_OWORD *)(a2 + 112);
  *(_DWORD *)(v2 + 127) = *(_DWORD *)(a2 + 127);
  *(_OWORD *)(v2 + 96) = v7;
  *(_OWORD *)(v2 + 112) = v8;
  *(__n128 *)(v2 + 80) = result;
  *a1 = v2 + 131;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::CoreDumpCrashReasonQ6Line>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B3DA6420(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::CoreDumpCrashReasonQ6Line>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::CoreDumpCrashReasonQ6Line>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::LTESleepManagerStats>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)1);
  v5 = *(unsigned __int8 *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 1), v4, (const unsigned __int8 *)4);
  v6 = *(unsigned int *)((char *)v3 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 5), v4, (const unsigned __int8 *)4);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 9), v4, (const unsigned __int8 *)4);
  *a1 = (tlv *)((char *)v3 + 13);
  return v5 | (unint64_t)(v6 << 32) | 0xAAAAAA00;
}

void sub_1B3DA65D0(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DA65A4);
}

uint64_t tlv::size<bsp::tlv::abm::LTESleepManagerStats>()
{
  return 16;
}

uint64_t *tlv::writeV<bsp::tlv::abm::LTESleepManagerStats>(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *(_BYTE *)v2 = *(_BYTE *)a2;
  *(_DWORD *)(v2 + 1) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(v2 + 5) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v2 + 9) = *(_DWORD *)(a2 + 12);
  *result = v2 + 13;
  return result;
}

uint64_t bsp::tlv::abm::parseField(uint64_t a1, const unsigned __int8 *a2, _WORD *a3)
{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)2);
  a3[1] = *(_WORD *)(a1 + 2);
  return a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)2);
  a3[1] = *(_WORD *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)2);
  a3[2] = *(_WORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 6), a2, (const unsigned __int8 *)2);
  a3[3] = *(_WORD *)(a1 + 6);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)2);
  a3[4] = *(_WORD *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 10), a2, (const unsigned __int8 *)2);
  a3[5] = *(_WORD *)(a1 + 10);
  return a1 + 12;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)2);
  a3[1] = *(_WORD *)(a1 + 2);
  return a1 + 4;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)2);
  a3[1] = *(_WORD *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)2);
  a3[2] = *(_WORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 6), a2, (const unsigned __int8 *)2);
  a3[3] = *(_WORD *)(a1 + 6);
  return a1 + 8;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)2);
  a3[1] = *(_WORD *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)2);
  a3[2] = *(_WORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 6), a2, (const unsigned __int8 *)2);
  a3[3] = *(_WORD *)(a1 + 6);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)2);
  a3[4] = *(_WORD *)(a1 + 8);
  return a1 + 10;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)2);
  a3[1] = *(_WORD *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)2);
  a3[2] = *(_WORD *)(a1 + 4);
  return a1 + 6;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)2);
  a3[1] = *(_WORD *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)2);
  a3[2] = *(_WORD *)(a1 + 4);
  return a1 + 6;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)2);
  a3[1] = *(_WORD *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)2);
  a3[2] = *(_WORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 6), a2, (const unsigned __int8 *)2);
  a3[3] = *(_WORD *)(a1 + 6);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)2);
  a3[4] = *(_WORD *)(a1 + 8);
  return a1 + 10;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)2);
  a3[1] = *(_WORD *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)2);
  a3[2] = *(_WORD *)(a1 + 4);
  return a1 + 6;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)2);
  a3[1] = *(_WORD *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)2);
  a3[2] = *(_WORD *)(a1 + 4);
  return a1 + 6;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)2);
  a3[1] = *(_WORD *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)2);
  a3[2] = *(_WORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 6), a2, (const unsigned __int8 *)2);
  a3[3] = *(_WORD *)(a1 + 6);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)2);
  a3[4] = *(_WORD *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 10), a2, (const unsigned __int8 *)2);
  a3[5] = *(_WORD *)(a1 + 10);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 12), a2, (const unsigned __int8 *)2);
  a3[6] = *(_WORD *)(a1 + 12);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 14), a2, (const unsigned __int8 *)2);
  a3[7] = *(_WORD *)(a1 + 14);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 16), a2, (const unsigned __int8 *)2);
  a3[8] = *(_WORD *)(a1 + 16);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 18), a2, (const unsigned __int8 *)2);
  a3[9] = *(_WORD *)(a1 + 18);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 20), a2, (const unsigned __int8 *)2);
  a3[10] = *(_WORD *)(a1 + 20);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 22), a2, (const unsigned __int8 *)2);
  a3[11] = *(_WORD *)(a1 + 22);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 24), a2, (const unsigned __int8 *)2);
  a3[12] = *(_WORD *)(a1 + 24);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 26), a2, (const unsigned __int8 *)2);
  a3[13] = *(_WORD *)(a1 + 26);
  return a1 + 28;
}

uint64_t tlv::parseV<bsp::tlv::abm::GSMCalibrationStatusItem>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  int v6;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)2);
  v5 = *(unsigned __int16 *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 2), v4, (const unsigned __int8 *)2);
  v6 = *((unsigned __int16 *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 4);
  return (v6 << 16) | v5;
}

uint64_t sub_1B3DA66F8(void *a1)
{
  _QWORD *v1;
  unsigned int v2;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<bsp::tlv::abm::GSMCalibrationStatusItem>()
{
  return 7;
}

_WORD **tlv::writeV<bsp::tlv::abm::GSMCalibrationStatusItem>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  *result = v2 + 2;
  return result;
}

uint64_t bsp::tlv::abm::parseField(uint64_t a1, const unsigned __int8 *a2, _DWORD *a3)
{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  return a1 + 8;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  return a1 + 8;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  return a1 + 8;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  return a1 + 8;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  return a1 + 8;
}

uint64_t tlv::parseV<bsp::tlv::abm::CDMACalibrationStatusItem>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  v6 = *((unsigned int *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 8);
  return (v6 << 32) | v5;
}

uint64_t sub_1B3DA6828(void *a1)
{
  _QWORD *v1;
  unsigned int v2;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<bsp::tlv::abm::CDMACalibrationStatusItem>()
{
  return 11;
}

_DWORD **tlv::writeV<bsp::tlv::abm::CDMACalibrationStatusItem>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  *result = v2 + 2;
  return result;
}

uint64_t bsp::tlv::abm::parseField(uint64_t a1, const unsigned __int8 *a2, _QWORD *a3)
{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)8);
  *a3 = *(_QWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)8);
  a3[1] = *(_QWORD *)(a1 + 8);
  return a1 + 16;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)8);
  *a3 = *(_QWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)8);
  a3[1] = *(_QWORD *)(a1 + 8);
  return a1 + 16;
}

_QWORD *bsp::tlv::abm::writeField(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

uint64_t tlv::parseV<bsp::tlv::abm::LTECalibrationStatusItem>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  uint64_t v5;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)8);
  v5 = *(_QWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 8), v4, (const unsigned __int8 *)8);
  *a1 = (tlv *)((char *)v3 + 16);
  return v5;
}

uint64_t sub_1B3DA6954(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<bsp::tlv::abm::LTECalibrationStatusItem>()
{
  return 19;
}

_QWORD **tlv::writeV<bsp::tlv::abm::LTECalibrationStatusItem>(_QWORD **result, _QWORD *a2)
{
  _QWORD *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  *result = v2 + 2;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::BBSecurityStatus>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B3DA6A20(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::BBSecurityStatus>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::BBSecurityStatus>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

unint64_t tlv::parseV<bsp::tlv::abm::Accessory>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)2);
  v5 = *(unsigned __int16 *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 2), v4, (const unsigned __int8 *)2);
  v6 = *((unsigned __int16 *)v3 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)2);
  v7 = *((unsigned __int16 *)v3 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 6), v4, (const unsigned __int8 *)2);
  v8 = *((unsigned __int16 *)v3 + 3);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 8), v4, (const unsigned __int8 *)2);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 10), v4, (const unsigned __int8 *)2);
  *a1 = (tlv *)((char *)v3 + 12);
  return (v7 << 32) | (v8 << 48) | ((unint64_t)v6 << 16) | v5;
}

void sub_1B3DA6C68(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DA6C34);
}

uint64_t tlv::size<bsp::tlv::abm::Accessory>()
{
  return 15;
}

_WORD **tlv::writeV<bsp::tlv::abm::Accessory>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  v2[3] = a2[3];
  v2[4] = a2[4];
  v2[5] = a2[5];
  *result = v2 + 6;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::EraseMask>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3DA6D40(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::EraseMask>()
{
  return 7;
}

_DWORD **tlv::writeV<bsp::tlv::abm::EraseMask>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

char *bsp::tlv::abm::parseField(uint64_t a1, char *a2, void **a3)
{
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, a1, a2, (unint64_t)&a2[-a1]);
  return a2;
}

char *bsp::tlv::abm::writeField(char *a1, _QWORD *a2)
{
  _QWORD *v2;
  size_t v4;
  size_t v5;
  uint64_t v6;

  v2 = a2;
  v4 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    v5 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (_QWORD *)*a2;
    v5 = v4;
  }
  memcpy(a1, a2, v5);
  v6 = *((unsigned __int8 *)v2 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = v2[1];
  return &a1[v6];
}

uint64_t bsp::tlv::abm::getFieldSize(uint64_t a1)
{
  if (*(char *)(a1 + 23) >= 0)
    return *(unsigned __int8 *)(a1 + 23);
  else
    return *(_QWORD *)(a1 + 8);
}

{
  return *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) + 6;
}

void tlv::parseV<bsp::tlv::abm::DumpLogsReason>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  char *v4;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v4 = (char *)(*a1 + a2);
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>((void **)a3, *a1, v4, a2);
  *a1 = (uint64_t)v4;
}

void sub_1B3DA6E68(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DA6E58);
}

void sub_1B3DA6E78(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<bsp::tlv::abm::DumpLogsReason>(uint64_t a1)
{
  uint64_t v1;

  v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0)
    v1 = *(_QWORD *)(a1 + 8);
  return v1 + 3;
}

void *tlv::writeV<bsp::tlv::abm::DumpLogsReason>(void **a1, _QWORD *a2)
{
  _QWORD *v2;
  char *v4;
  size_t v5;
  size_t v6;
  void *result;
  uint64_t v8;

  v2 = a2;
  v4 = (char *)*a1;
  v5 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    v6 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (_QWORD *)*a2;
    v6 = v5;
  }
  result = memcpy(*a1, a2, v6);
  v8 = *((unsigned __int8 *)v2 + 23);
  if ((v8 & 0x80u) != 0)
    v8 = v2[1];
  *a1 = &v4[v8];
  return result;
}

BOOL tlv::parseV<bsp::tlv::abm::DumpLogsUserNotification>(tlv **a1, int a2)
{
  tlv *v3;
  _BOOL8 result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DA6FA8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::DumpLogsUserNotification>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::DumpLogsUserNotification>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::DumpLogsIssueCategory>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DA7060(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::DumpLogsIssueCategory>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::DumpLogsIssueCategory>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

BOOL tlv::parseV<bsp::tlv::abm::DumpLogsState>(tlv **a1, int a2)
{
  tlv *v3;
  _BOOL8 result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DA7128(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::DumpLogsState>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::DumpLogsState>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::RFCalibrationStatus>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DA71E0(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::RFCalibrationStatus>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::RFCalibrationStatus>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::GSMCalibrationStatus>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  int v6;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)2);
  v5 = *(unsigned __int16 *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 2), v4, (const unsigned __int8 *)2);
  v6 = *((unsigned __int16 *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 4);
  return (v6 << 16) | v5;
}

uint64_t sub_1B3DA72F8(void *a1)
{
  _QWORD *v1;
  unsigned int v2;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<bsp::tlv::abm::GSMCalibrationStatus>()
{
  return 7;
}

_WORD **tlv::writeV<bsp::tlv::abm::GSMCalibrationStatus>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  *result = v2 + 2;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::CDMACalibrationStatus>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  v6 = *((unsigned int *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 8);
  return (v6 << 32) | v5;
}

uint64_t sub_1B3DA7428(void *a1)
{
  _QWORD *v1;
  unsigned int v2;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<bsp::tlv::abm::CDMACalibrationStatus>()
{
  return 11;
}

_DWORD **tlv::writeV<bsp::tlv::abm::CDMACalibrationStatus>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  *result = v2 + 2;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::WCDMACalibrationStatus>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  v6 = *((unsigned int *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 8);
  return (v6 << 32) | v5;
}

uint64_t sub_1B3DA755C(void *a1)
{
  _QWORD *v1;
  unsigned int v2;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<bsp::tlv::abm::WCDMACalibrationStatus>()
{
  return 11;
}

_DWORD **tlv::writeV<bsp::tlv::abm::WCDMACalibrationStatus>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  *result = v2 + 2;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::TDSCDMACalibrationStatus>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  v6 = *((unsigned int *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 8);
  return (v6 << 32) | v5;
}

uint64_t sub_1B3DA7690(void *a1)
{
  _QWORD *v1;
  unsigned int v2;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<bsp::tlv::abm::TDSCDMACalibrationStatus>()
{
  return 11;
}

_DWORD **tlv::writeV<bsp::tlv::abm::TDSCDMACalibrationStatus>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  *result = v2 + 2;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::LTECalibrationStatus>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  uint64_t v5;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)8);
  v5 = *(_QWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 8), v4, (const unsigned __int8 *)8);
  *a1 = (tlv *)((char *)v3 + 16);
  return v5;
}

uint64_t sub_1B3DA77BC(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<bsp::tlv::abm::LTECalibrationStatus>()
{
  return 19;
}

_QWORD **tlv::writeV<bsp::tlv::abm::LTECalibrationStatus>(_QWORD **result, _QWORD *a2)
{
  _QWORD *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  *result = v2 + 2;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::C_DRXStatus>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DA7888(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::C_DRXStatus>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::C_DRXStatus>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::SleepManagerStats>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)1);
  v5 = *(unsigned __int8 *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 1), v4, (const unsigned __int8 *)4);
  v6 = *(unsigned int *)((char *)v3 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 5), v4, (const unsigned __int8 *)4);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 9), v4, (const unsigned __int8 *)4);
  *a1 = (tlv *)((char *)v3 + 13);
  return v5 | (unint64_t)(v6 << 32) | 0xAAAAAA00;
}

void sub_1B3DA7A38(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DA7A0CLL);
}

uint64_t tlv::size<bsp::tlv::abm::SleepManagerStats>()
{
  return 16;
}

uint64_t *tlv::writeV<bsp::tlv::abm::SleepManagerStats>(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *(_BYTE *)v2 = *(_BYTE *)a2;
  *(_DWORD *)(v2 + 1) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(v2 + 5) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v2 + 9) = *(_DWORD *)(a2 + 12);
  *result = v2 + 13;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::FactoryCalibrationStatus>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DA7B00(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::FactoryCalibrationStatus>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::FactoryCalibrationStatus>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

_QWORD *tlv::parseV<bsp::tlv::abm::Payload>@<X0>(char **a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  char *v4;
  _QWORD *result;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = &(*a1)[a2];
  result = std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, *a1, v4, a2);
  *a1 = v4;
  return result;
}

void sub_1B3DA7C04(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DA7BF4);
}

void sub_1B3DA7C14(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<bsp::tlv::abm::Payload>(_QWORD *a1)
{
  return a1[1] - *a1 + 3;
}

void *tlv::writeV<bsp::tlv::abm::Payload>(void **a1, uint64_t a2)
{
  char *v4;
  void *result;

  v4 = (char *)*a1;
  result = memcpy(*a1, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  *a1 = &v4[*(_QWORD *)(a2 + 8) - *(_QWORD *)a2];
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::PayloadAdditionalError>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DA7D10(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::PayloadAdditionalError>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::PayloadAdditionalError>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

_QWORD *tlv::parseV<bsp::tlv::abm::PayloadResponse>@<X0>(char **a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  char *v4;
  _QWORD *result;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = &(*a1)[a2];
  result = std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, *a1, v4, a2);
  *a1 = v4;
  return result;
}

void sub_1B3DA7E14(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DA7E04);
}

void sub_1B3DA7E24(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<bsp::tlv::abm::PayloadResponse>(_QWORD *a1)
{
  return a1[1] - *a1 + 3;
}

void *tlv::writeV<bsp::tlv::abm::PayloadResponse>(void **a1, uint64_t a2)
{
  char *v4;
  void *result;

  v4 = (char *)*a1;
  result = memcpy(*a1, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  *a1 = &v4[*(_QWORD *)(a2 + 8) - *(_QWORD *)a2];
  return result;
}

_QWORD *tlv::parseV<bsp::tlv::abm::Nonce>@<X0>(char **a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  char *v4;
  _QWORD *result;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = &(*a1)[a2];
  result = std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, *a1, v4, a2);
  *a1 = v4;
  return result;
}

void sub_1B3DA7F6C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DA7F5CLL);
}

void sub_1B3DA7F7C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<bsp::tlv::abm::Nonce>(_QWORD *a1)
{
  return a1[1] - *a1 + 3;
}

void *tlv::writeV<bsp::tlv::abm::Nonce>(void **a1, uint64_t a2)
{
  char *v4;
  void *result;

  v4 = (char *)*a1;
  result = memcpy(*a1, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  *a1 = &v4[*(_QWORD *)(a2 + 8) - *(_QWORD *)a2];
  return result;
}

_QWORD *tlv::parseV<bsp::tlv::abm::PKHash>@<X0>(char **a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  char *v4;
  _QWORD *result;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = &(*a1)[a2];
  result = std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, *a1, v4, a2);
  *a1 = v4;
  return result;
}

void sub_1B3DA80C4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DA80B4);
}

void sub_1B3DA80D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<bsp::tlv::abm::PKHash>(_QWORD *a1)
{
  return a1[1] - *a1 + 3;
}

void *tlv::writeV<bsp::tlv::abm::PKHash>(void **a1, uint64_t a2)
{
  char *v4;
  void *result;

  v4 = (char *)*a1;
  result = memcpy(*a1, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  *a1 = &v4[*(_QWORD *)(a2 + 8) - *(_QWORD *)a2];
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::ChipInformation>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  v6 = *((unsigned int *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 8);
  return (v6 << 32) | v5;
}

uint64_t sub_1B3DA8234(void *a1)
{
  _QWORD *v1;
  unsigned int v2;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<bsp::tlv::abm::ChipInformation>()
{
  return 11;
}

_DWORD **tlv::writeV<bsp::tlv::abm::ChipInformation>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  *result = v2 + 2;
  return result;
}

unsigned __int8 *bsp::tlv::abm::parseField(char *a1, unsigned __int8 *a2, uint64_t a3)
{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)2);
  *(_WORD *)a3 = *(_WORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)2);
  *(_WORD *)(a3 + 2) = *((_WORD *)a1 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)2);
  *(_WORD *)(a3 + 4) = *((_WORD *)a1 + 2);
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((_QWORD *)(a3 + 8), a1 + 6, (char *)a2, a2 - (unsigned __int8 *)(a1 + 6));
  return a2;
}

char *bsp::tlv::abm::writeField(_WORD *a1, uint64_t a2)
{
  _WORD *v3;

  *a1 = *(_WORD *)a2;
  a1[1] = *(_WORD *)(a2 + 2);
  a1[2] = *(_WORD *)(a2 + 4);
  v3 = a1 + 3;
  memcpy(a1 + 3, *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8));
  return (char *)v3 + *(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8);
}

{
  _WORD *v3;

  *a1 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
  v3 = a1 + 1;
  memcpy(a1 + 1, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  return (char *)v3 + *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
}

{
  _WORD *v3;

  *a1 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
  v3 = a1 + 1;
  memcpy(a1 + 1, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  return (char *)v3 + *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
}

_QWORD *tlv::parseV<bsp::tlv::abm::ManifestStruct>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  tlv *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  _QWORD *result;

  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)a3 = 0xAAAA000000000000;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  v5 = *a1;
  v6 = a2;
  v7 = (unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v7, (const unsigned __int8 *)2);
  *(_WORD *)a3 = *(_WORD *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 2), v7, (const unsigned __int8 *)2);
  *(_WORD *)(a3 + 2) = *((_WORD *)v5 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 4), v7, (const unsigned __int8 *)2);
  *(_WORD *)(a3 + 4) = *((_WORD *)v5 + 2);
  result = std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((_QWORD *)(a3 + 8), (char *)v5 + 6, (char *)v7, v6 - 6);
  *a1 = (tlv *)v7;
  return result;
}

void sub_1B3DA8420(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DA840CLL);
}

void sub_1B3DA8430(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<bsp::tlv::abm::ManifestStruct>(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) + 9;
}

void *tlv::writeV<bsp::tlv::abm::ManifestStruct>(_WORD **a1, uint64_t a2)
{
  _WORD *v4;
  _WORD *v5;
  void *result;

  v4 = *a1;
  *v4 = *(_WORD *)a2;
  v4[1] = *(_WORD *)(a2 + 2);
  v4[2] = *(_WORD *)(a2 + 4);
  v5 = v4 + 3;
  result = memcpy(v4 + 3, *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8));
  *a1 = (_WORD *)((char *)v5 + *(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8));
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::SKeyStatus>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B3DA8548(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::SKeyStatus>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::SKeyStatus>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::AKeyStatus>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B3DA8600(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::AKeyStatus>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::AKeyStatus>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

_QWORD *tlv::parseV<bsp::tlv::abm::SKeyHash>@<X0>(char **a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  char *v4;
  _QWORD *result;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = &(*a1)[a2];
  result = std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, *a1, v4, a2);
  *a1 = v4;
  return result;
}

void sub_1B3DA8704(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DA86F4);
}

void sub_1B3DA8714(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<bsp::tlv::abm::SKeyHash>(_QWORD *a1)
{
  return a1[1] - *a1 + 3;
}

void *tlv::writeV<bsp::tlv::abm::SKeyHash>(void **a1, uint64_t a2)
{
  char *v4;
  void *result;

  v4 = (char *)*a1;
  result = memcpy(*a1, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  *a1 = &v4[*(_QWORD *)(a2 + 8) - *(_QWORD *)a2];
  return result;
}

unint64_t tlv::parseV<bsp::tlv::abm::ManifestStatus>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)2);
  v5 = *(unsigned __int16 *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 2), v4, (const unsigned __int8 *)2);
  v6 = *((unsigned __int16 *)v3 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)2);
  v7 = *((unsigned __int16 *)v3 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 6), v4, (const unsigned __int8 *)2);
  v8 = *((unsigned __int16 *)v3 + 3);
  *a1 = (tlv *)((char *)v3 + 8);
  return (v8 << 48) | (v7 << 32) | ((unint64_t)v6 << 16) | v5;
}

void sub_1B3DA8904(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DA88DCLL);
}

uint64_t tlv::size<bsp::tlv::abm::ManifestStatus>()
{
  return 11;
}

_WORD **tlv::writeV<bsp::tlv::abm::ManifestStatus>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  v2[3] = a2[3];
  *result = v2 + 4;
  return result;
}

char *bsp::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, _QWORD *a3)
{
  tlv *v5;
  unsigned int v6;

  v5 = a1;
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  v6 = *(unsigned __int16 *)v5;
  v5 = (tlv *)((char *)v5 + 2);
  tlv::throwIfNotEnoughBytes(v5, a2, (const unsigned __int8 *)v6);
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, (char *)v5, (char *)v5 + v6, v6);
  return (char *)v5 + v6;
}

{
  tlv *v5;
  unsigned int v6;

  v5 = a1;
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  v6 = *(unsigned __int16 *)v5;
  v5 = (tlv *)((char *)v5 + 2);
  tlv::throwIfNotEnoughBytes(v5, a2, (const unsigned __int8 *)v6);
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, (char *)v5, (char *)v5 + v6, v6);
  return (char *)v5 + v6;
}

_QWORD *tlv::parseV<bsp::tlv::abm::RootManifestData>@<X0>(tlv **a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  tlv *v5;
  const unsigned __int8 *v6;
  unsigned int v7;
  _QWORD *result;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)2);
  v7 = *(unsigned __int16 *)v5;
  v5 = (tlv *)((char *)v5 + 2);
  tlv::throwIfNotEnoughBytes(v5, v6, (const unsigned __int8 *)v7);
  result = std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, (char *)v5, (char *)v5 + v7, v7);
  *a1 = (tlv *)((char *)v5 + v7);
  return result;
}

void sub_1B3DA8A94(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DA8A80);
}

void sub_1B3DA8AA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<bsp::tlv::abm::RootManifestData>(_QWORD *a1)
{
  return a1[1] - *a1 + 5;
}

void *tlv::writeV<bsp::tlv::abm::RootManifestData>(_WORD **a1, uint64_t a2)
{
  _WORD *v4;
  void *result;

  v4 = *a1;
  *v4++ = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
  result = memcpy(v4, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  *a1 = (_WORD *)((char *)v4 + *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  return result;
}

_QWORD *tlv::parseV<bsp::tlv::abm::ProvisioningManifestData>@<X0>(tlv **a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  tlv *v5;
  const unsigned __int8 *v6;
  unsigned int v7;
  _QWORD *result;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)2);
  v7 = *(unsigned __int16 *)v5;
  v5 = (tlv *)((char *)v5 + 2);
  tlv::throwIfNotEnoughBytes(v5, v6, (const unsigned __int8 *)v7);
  result = std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, (char *)v5, (char *)v5 + v7, v7);
  *a1 = (tlv *)((char *)v5 + v7);
  return result;
}

void sub_1B3DA8C74(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DA8C60);
}

void sub_1B3DA8C84(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<bsp::tlv::abm::ProvisioningManifestData>(_QWORD *a1)
{
  return a1[1] - *a1 + 5;
}

void *tlv::writeV<bsp::tlv::abm::ProvisioningManifestData>(_WORD **a1, uint64_t a2)
{
  _WORD *v4;
  void *result;

  v4 = *a1;
  *v4++ = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
  result = memcpy(v4, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  *a1 = (_WORD *)((char *)v4 + *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  return result;
}

_QWORD *tlv::parseV<bsp::tlv::abm::ActivationManifestData>@<X0>(char **a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  char *v4;
  _QWORD *result;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = &(*a1)[a2];
  result = std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, *a1, v4, a2);
  *a1 = v4;
  return result;
}

void sub_1B3DA8DDC(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DA8DCCLL);
}

void sub_1B3DA8DEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<bsp::tlv::abm::ActivationManifestData>(_QWORD *a1)
{
  return a1[1] - *a1 + 3;
}

void *tlv::writeV<bsp::tlv::abm::ActivationManifestData>(void **a1, uint64_t a2)
{
  char *v4;
  void *result;

  v4 = (char *)*a1;
  result = memcpy(*a1, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  *a1 = &v4[*(_QWORD *)(a2 + 8) - *(_QWORD *)a2];
  return result;
}

BOOL tlv::parseV<bsp::tlv::abm::ScreenStatus>(tlv **a1, int a2)
{
  tlv *v3;
  _BOOL8 result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DA8EF8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::ScreenStatus>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::ScreenStatus>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

BOOL tlv::parseV<bsp::tlv::abm::SleepStatus>(tlv **a1, int a2)
{
  tlv *v3;
  _BOOL8 result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DA8FC0(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::SleepStatus>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::SleepStatus>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

BOOL tlv::parseV<bsp::tlv::abm::TetheringStatus>(tlv **a1, int a2)
{
  tlv *v3;
  _BOOL8 result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DA9088(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::TetheringStatus>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::TetheringStatus>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::BreadModeType>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DA9140(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::BreadModeType>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::BreadModeType>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::ButterModeType>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DA91F8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::ButterModeType>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::ButterModeType>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::ArrivalTime>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3DA92B0(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::ArrivalTime>()
{
  return 7;
}

_DWORD **tlv::writeV<bsp::tlv::abm::ArrivalTime>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::DepartureTime>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3DA9368(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::DepartureTime>()
{
  return 7;
}

_DWORD **tlv::writeV<bsp::tlv::abm::DepartureTime>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

BOOL tlv::parseV<bsp::tlv::abm::Coredump>(tlv **a1, int a2)
{
  tlv *v3;
  _BOOL8 result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DA9430(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::Coredump>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::Coredump>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::PowerSequenceIndex>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B3DA94E8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::PowerSequenceIndex>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::PowerSequenceIndex>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::BasebandVersion>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3DA95A0(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::BasebandVersion>()
{
  return 7;
}

_DWORD **tlv::writeV<bsp::tlv::abm::BasebandVersion>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

tlv *bsp::tlv::abm::parseField(unsigned __int16 *a1, unsigned __int8 *a2, uint64_t a3)
{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)2);
  return tlv::parseSequence<bsp::tlv::abm::Accessory>((tlv *)(a1 + 1), a2, a3, *a1);
}

tlv *tlv::parseSequence<bsp::tlv::abm::Accessory>(tlv *this, unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  int v21;

  v8 = *(char **)a3;
  v7 = *(char **)(a3 + 8);
  v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v7[-*(_QWORD *)a3] >> 2);
  v10 = a4 - v9;
  if (a4 <= v9)
  {
    if (a4 < v9)
    {
      v7 = &v8[12 * a4];
      *(_QWORD *)(a3 + 8) = v7;
    }
  }
  else
  {
    v11 = *(_QWORD *)(a3 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v7) >> 2) >= v10)
    {
      bzero(*(void **)(a3 + 8), 12 * ((12 * v10 - 12) / 0xC) + 12);
      v19 = &v7[12 * ((12 * v10 - 12) / 0xC) + 12];
      *(_QWORD *)(a3 + 8) = v19;
    }
    else
    {
      if (a4 > 0x1555555555555555)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v12 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v8) >> 2);
      v13 = 2 * v12;
      if (2 * v12 <= a4)
        v13 = a4;
      if (v12 >= 0xAAAAAAAAAAAAAAALL)
        v14 = 0x1555555555555555;
      else
        v14 = v13;
      if (v14 > 0x1555555555555555)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v15 = 12 * v14;
      v16 = (char *)operator new(12 * v14);
      v17 = &v16[12 * v9];
      v18 = &v16[v15];
      bzero(v17, 12 * ((12 * v10 - 12) / 0xC) + 12);
      v19 = &v17[12 * ((12 * v10 - 12) / 0xC) + 12];
      if (v7 != v8)
      {
        do
        {
          v20 = *(_QWORD *)(v7 - 12);
          v7 -= 12;
          v21 = *((_DWORD *)v7 + 2);
          *(_QWORD *)(v17 - 12) = v20;
          v17 -= 12;
          *((_DWORD *)v17 + 2) = v21;
        }
        while (v7 != v8);
        v7 = v8;
      }
      *(_QWORD *)a3 = v17;
      *(_QWORD *)(a3 + 8) = v19;
      *(_QWORD *)(a3 + 16) = v18;
      if (v7)
      {
        operator delete(v7);
        v19 = *(char **)(a3 + 8);
      }
    }
    v8 = *(char **)a3;
    v7 = v19;
  }
  while (v8 != v7)
  {
    tlv::throwIfNotEnoughBytes(this, a2, (const unsigned __int8 *)2);
    *(_WORD *)v8 = *(_WORD *)this;
    tlv::throwIfNotEnoughBytes((tlv *)((char *)this + 2), a2, (const unsigned __int8 *)2);
    *((_WORD *)v8 + 1) = *((_WORD *)this + 1);
    tlv::throwIfNotEnoughBytes((tlv *)((char *)this + 4), a2, (const unsigned __int8 *)2);
    *((_WORD *)v8 + 2) = *((_WORD *)this + 2);
    tlv::throwIfNotEnoughBytes((tlv *)((char *)this + 6), a2, (const unsigned __int8 *)2);
    *((_WORD *)v8 + 3) = *((_WORD *)this + 3);
    tlv::throwIfNotEnoughBytes((tlv *)((char *)this + 8), a2, (const unsigned __int8 *)2);
    *((_WORD *)v8 + 4) = *((_WORD *)this + 4);
    tlv::throwIfNotEnoughBytes((tlv *)((char *)this + 10), a2, (const unsigned __int8 *)2);
    *((_WORD *)v8 + 5) = *((_WORD *)this + 5);
    this = (tlv *)((char *)this + 12);
    v8 += 12;
  }
  return this;
}

_WORD *bsp::tlv::abm::writeField(_WORD *a1, _DWORD *a2)
{
  _WORD *result;
  _WORD *v3;
  _WORD *v4;

  *a1 = -21845 * ((a2[2] - *a2) >> 2);
  result = a1 + 1;
  v3 = *(_WORD **)a2;
  v4 = (_WORD *)*((_QWORD *)a2 + 1);
  if (*(_WORD **)a2 != v4)
  {
    do
    {
      *result = *v3;
      result[1] = v3[1];
      result[2] = v3[2];
      result[3] = v3[3];
      result[4] = v3[4];
      result[5] = v3[5];
      result += 6;
      v3 += 6;
    }
    while (v3 != v4);
  }
  return result;
}

unint64_t bsp::tlv::abm::getFieldSize(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[1];
  if (*a1 == v1)
    return 2;
  else
    return 12 * ((v1 - *a1 - 12) / 0xCuLL) + 14;
}

{
  uint64_t v1;

  v1 = a1[1];
  if (v1 == *a1)
    return 0;
  else
    return (v1 - *a1) & 0xFFFFFFFFFFFFFFFCLL;
}

{
  uint64_t v1;

  v1 = a1[1];
  if (*a1 == v1)
    return 1;
  else
    return 5 * ((unint64_t)(v1 - *a1 - 8) >> 3) + 6;
}

{
  uint64_t v1;

  v1 = a1[1];
  if (*a1 == v1)
    return 1;
  else
    return 5 * ((unint64_t)(v1 - *a1 - 8) >> 3) + 6;
}

{
  uint64_t v1;

  v1 = a1[1];
  if (*a1 == v1)
    return 1;
  else
    return 5 * ((unint64_t)(v1 - *a1 - 8) >> 3) + 6;
}

{
  uint64_t v1;

  v1 = a1[1];
  if (*a1 == v1)
    return 1;
  else
    return 5 * ((unint64_t)(v1 - *a1 - 8) >> 3) + 6;
}

tlv *tlv::parseV<bsp::tlv::abm::AccessoryInfoList>@<X0>(tlv **a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  tlv *v5;
  unsigned __int8 *v6;
  tlv *result;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v5 = *a1;
  v6 = (unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)2);
  result = tlv::parseSequence<bsp::tlv::abm::Accessory>((tlv *)((char *)v5 + 2), v6, (uint64_t)a3, *(unsigned __int16 *)v5);
  *a1 = result;
  return result;
}

void sub_1B3DA9978(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DA9968);
}

void sub_1B3DA9988(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<bsp::tlv::abm::AccessoryInfoList>(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[1];
  if (*a1 == v1)
    return 5;
  else
    return 12 * ((v1 - *a1 - 12) / 0xCuLL) + 17;
}

_WORD **tlv::writeV<bsp::tlv::abm::AccessoryInfoList>(_WORD **result, _DWORD *a2)
{
  _WORD *v2;
  _WORD *v3;
  _WORD *v4;
  _WORD *v5;

  v2 = *result;
  *v2 = -21845 * ((a2[2] - *a2) >> 2);
  v3 = v2 + 1;
  v4 = *(_WORD **)a2;
  v5 = (_WORD *)*((_QWORD *)a2 + 1);
  if (*(_WORD **)a2 != v5)
  {
    do
    {
      *v3 = *v4;
      v3[1] = v4[1];
      v3[2] = v4[2];
      v3[3] = v4[3];
      v3[4] = v4[4];
      v3[5] = v4[5];
      v3 += 6;
      v4 += 6;
    }
    while (v4 != v5);
  }
  *result = v3;
  return result;
}

BOOL tlv::parseV<bsp::tlv::abm::IsCharging>(tlv **a1, int a2)
{
  tlv *v3;
  _BOOL8 result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DA9AE8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::IsCharging>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::IsCharging>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::ChargeLevelPercentage>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DA9BA0(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::ChargeLevelPercentage>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::ChargeLevelPercentage>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::SPMIBusMask>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3DA9C58(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::SPMIBusMask>()
{
  return 7;
}

_DWORD **tlv::writeV<bsp::tlv::abm::SPMIBusMask>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

char *bsp::parseField(tlv *a1, const unsigned __int8 *a2, _DWORD *a3)
{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

_DWORD *bsp::writeField(_DWORD *a1, int a2)
{
  *a1 = a2;
  return a1 + 1;
}

uint64_t bsp::getFieldSize()
{
  return 4;
}

__n128 tlv::parseV<bsp::tlv::abm::CapabilitiesItem>@<Q0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  tlv *v5;
  const unsigned __int8 *v6;
  __n128 result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 4), v6, (const unsigned __int8 *)0x10);
  result = *(__n128 *)((char *)v5 + 4);
  *(__n128 *)(a3 + 4) = result;
  *a1 = (tlv *)((char *)v5 + 20);
  return result;
}

void sub_1B3DA9DCC(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<bsp::tlv::abm::CapabilitiesItem>()
{
  return 23;
}

__n128 tlv::writeV<bsp::tlv::abm::CapabilitiesItem>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  __n128 result;

  v2 = *a1;
  *(_DWORD *)v2 = *(_DWORD *)a2;
  result = *(__n128 *)(a2 + 4);
  *(__n128 *)(v2 + 4) = result;
  *a1 = v2 + 20;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::TxAntennaConfig>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B3DA9E90(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::TxAntennaConfig>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::TxAntennaConfig>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

unint64_t tlv::parseV<bsp::tlv::abm::ARTD>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)2);
  v5 = *(unsigned __int16 *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 2), v4, (const unsigned __int8 *)2);
  v6 = *((unsigned __int16 *)v3 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)2);
  v7 = *((unsigned __int16 *)v3 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 6), v4, (const unsigned __int8 *)2);
  v8 = *((unsigned __int16 *)v3 + 3);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 8), v4, (const unsigned __int8 *)2);
  *a1 = (tlv *)((char *)v3 + 10);
  return (v7 << 32) | (v8 << 48) | ((unint64_t)v6 << 16) | v5;
}

void sub_1B3DAA088(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DAA058);
}

uint64_t tlv::size<bsp::tlv::abm::ARTD>()
{
  return 13;
}

_WORD **tlv::writeV<bsp::tlv::abm::ARTD>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  v2[3] = a2[3];
  v2[4] = a2[4];
  *result = v2 + 5;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::ARTDV2>(uint64_t *a1, int a2)
{
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = 2863267840;
  *a1 = bsp::tlv::abm::parseField(*a1, (const unsigned __int8 *)(*a1 + a2), (uint64_t)v3);
  return v3[0];
}

uint64_t sub_1B3DAA2BC(void *a1)
{
  _QWORD *v1;
  uint64_t v3;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return v3;
}

uint64_t tlv::size<bsp::tlv::abm::ARTDV2>()
{
  return 17;
}

uint64_t *tlv::writeV<bsp::tlv::abm::ARTDV2>(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *(_BYTE *)v2 = *(_BYTE *)a2;
  *(_BYTE *)(v2 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(v2 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(v2 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(v2 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(v2 + 5) = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(v2 + 6) = *(_BYTE *)(a2 + 6);
  *(_BYTE *)(v2 + 7) = *(_BYTE *)(a2 + 7);
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(v2 + 9) = *(_BYTE *)(a2 + 9);
  *(_DWORD *)(v2 + 10) = *(_DWORD *)(a2 + 12);
  *result = v2 + 14;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::ARFCNLock>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  tlv *v5;
  const unsigned __int8 *v6;
  uint64_t result;

  *(_DWORD *)a3 = -1431699456;
  *(_QWORD *)(a3 + 4) = 0;
  *(_QWORD *)(a3 + 12) = 0;
  *(_DWORD *)(a3 + 20) = 0;
  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)2);
  *(_WORD *)a3 = *(_WORD *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 2), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)((char *)v5 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 6), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)((char *)v5 + 6);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 10), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)((char *)v5 + 10);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 14), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 16) = *(_DWORD *)((char *)v5 + 14);
  result = tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 18), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 20) = *(_DWORD *)((char *)v5 + 18);
  *a1 = (tlv *)((char *)v5 + 22);
  return result;
}

void sub_1B3DAA52C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<bsp::tlv::abm::ARFCNLock>()
{
  return 25;
}

uint64_t *tlv::writeV<bsp::tlv::abm::ARFCNLock>(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *(_WORD *)v2 = *(_WORD *)a2;
  *(_DWORD *)(v2 + 2) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(v2 + 6) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v2 + 10) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(v2 + 14) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(v2 + 18) = *(_DWORD *)(a2 + 20);
  *result = v2 + 22;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::CarrierAgreggation>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)2);
  v5 = *(unsigned __int16 *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 2), v4, (const unsigned __int8 *)2);
  v6 = *((unsigned __int16 *)v3 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)2);
  v7 = *((unsigned __int16 *)v3 + 2);
  *a1 = (tlv *)((char *)v3 + 6);
  return (v6 << 16) | (v7 << 32) | v5;
}

void sub_1B3DAA6BC(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DAA698);
}

uint64_t tlv::size<bsp::tlv::abm::CarrierAgreggation>()
{
  return 9;
}

_WORD **tlv::writeV<bsp::tlv::abm::CarrierAgreggation>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  *result = v2 + 3;
  return result;
}

_BYTE *bsp::tlv::abm::writeField(_BYTE *a1, _DWORD *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  *a1 = *a2;
  return a1 + 1;
}

{
  _BYTE *result;
  uint64_t v3;
  uint64_t v4;

  *a1 = (a2[2] - *a2) >> 3;
  result = a1 + 1;
  v3 = *(_QWORD *)a2;
  v4 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 != v4)
  {
    do
    {
      *result = *(_BYTE *)v3;
      *(_DWORD *)(result + 1) = *(_DWORD *)(v3 + 4);
      result += 5;
      v3 += 8;
    }
    while (v3 != v4);
  }
  return result;
}

{
  _BYTE *result;
  uint64_t v3;
  uint64_t v4;

  *a1 = (a2[2] - *a2) >> 3;
  result = a1 + 1;
  v3 = *(_QWORD *)a2;
  v4 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 != v4)
  {
    do
    {
      *result = *(_BYTE *)v3;
      *(_DWORD *)(result + 1) = *(_DWORD *)(v3 + 4);
      result += 5;
      v3 += 8;
    }
    while (v3 != v4);
  }
  return result;
}

{
  _BYTE *result;
  uint64_t v3;
  uint64_t v4;

  *a1 = (a2[2] - *a2) >> 3;
  result = a1 + 1;
  v3 = *(_QWORD *)a2;
  v4 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 != v4)
  {
    do
    {
      *result = *(_BYTE *)v3;
      *(_DWORD *)(result + 1) = *(_DWORD *)(v3 + 4);
      result += 5;
      v3 += 8;
    }
    while (v3 != v4);
  }
  return result;
}

{
  _BYTE *result;
  uint64_t v3;
  uint64_t v4;

  *a1 = (a2[2] - *a2) >> 3;
  result = a1 + 1;
  v3 = *(_QWORD *)a2;
  v4 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 != v4)
  {
    do
    {
      *result = *(_BYTE *)v3;
      *(_DWORD *)(result + 1) = *(_DWORD *)(v3 + 4);
      result += 5;
      v3 += 8;
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::WakeReason>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DAA780(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::WakeReason>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::WakeReason>(_BYTE **result, _DWORD *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::ChannelID>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DAA838(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::ChannelID>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::ChannelID>(_BYTE **result, _DWORD *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::WakeBufferLength>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3DAA8F0(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::WakeBufferLength>()
{
  return 7;
}

_DWORD **tlv::writeV<bsp::tlv::abm::WakeBufferLength>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

_QWORD *tlv::parseV<bsp::tlv::abm::WakeBuffer>@<X0>(char **a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  char *v4;
  _QWORD *result;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = &(*a1)[a2];
  result = std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, *a1, v4, a2);
  *a1 = v4;
  return result;
}

void sub_1B3DAA9F4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DAA9E4);
}

void sub_1B3DAAA04(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<bsp::tlv::abm::WakeBuffer>(_QWORD *a1)
{
  return a1[1] - *a1 + 3;
}

void *tlv::writeV<bsp::tlv::abm::WakeBuffer>(void **a1, uint64_t a2)
{
  char *v4;
  void *result;

  v4 = (char *)*a1;
  result = memcpy(*a1, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  *a1 = &v4[*(_QWORD *)(a2 + 8) - *(_QWORD *)a2];
  return result;
}

uint64_t bsp::tlv::abm::parseField(bsp::tlv::abm *this, const unsigned __int8 *a2, unsigned __int8 *a3, Size *a4)
{
  tlv::throwIfNotEnoughBytes(this, a2, (const unsigned __int8 *)2);
  *(_WORD *)a3 = *(_WORD *)this;
  return (uint64_t)this + 2;
}

uint64_t bsp::tlv::abm::writeField(bsp::tlv::abm *this, unsigned __int8 *a2, const Size *a3)
{
  *(_WORD *)this = *(_WORD *)a2;
  return (uint64_t)this + 2;
}

uint64_t bsp::tlv::abm::getFieldSize(bsp::tlv::abm *this, const Size *a2)
{
  return 2;
}

uint64_t tlv::parseV<bsp::tlv::abm::Size>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B3DAAB00(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::Size>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::Size>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

_QWORD *tlv::parseV<bsp::tlv::abm::LogData>@<X0>(char **a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  char *v4;
  _QWORD *result;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = &(*a1)[a2];
  result = std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, *a1, v4, a2);
  *a1 = v4;
  return result;
}

void sub_1B3DAAC04(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DAABF4);
}

void sub_1B3DAAC14(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<bsp::tlv::abm::LogData>(_QWORD *a1)
{
  return a1[1] - *a1 + 3;
}

void *tlv::writeV<bsp::tlv::abm::LogData>(void **a1, uint64_t a2)
{
  char *v4;
  void *result;

  v4 = (char *)*a1;
  result = memcpy(*a1, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  *a1 = &v4[*(_QWORD *)(a2 + 8) - *(_QWORD *)a2];
  return result;
}

BOOL tlv::parseV<bsp::tlv::abm::Enable>(tlv **a1, int a2)
{
  tlv *v3;
  _BOOL8 result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DAAD20(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::Enable>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::Enable>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::Port>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DAADD8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::Port>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::Port>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

_QWORD *tlv::parseV<bsp::tlv::abm::PayloadRFFE>@<X0>(char **a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  char *v4;
  _QWORD *result;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = &(*a1)[a2];
  result = std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, *a1, v4, a2);
  *a1 = v4;
  return result;
}

void sub_1B3DAAEDC(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DAAECCLL);
}

void sub_1B3DAAEEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<bsp::tlv::abm::PayloadRFFE>(_QWORD *a1)
{
  return a1[1] - *a1 + 3;
}

void *tlv::writeV<bsp::tlv::abm::PayloadRFFE>(void **a1, uint64_t a2)
{
  char *v4;
  void *result;

  v4 = (char *)*a1;
  result = memcpy(*a1, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  *a1 = &v4[*(_QWORD *)(a2 + 8) - *(_QWORD *)a2];
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::RxDiversityConfig>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)2);
  v5 = *(unsigned __int16 *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 2), v4, (const unsigned __int8 *)2);
  v6 = *((unsigned __int16 *)v3 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)2);
  v7 = *((unsigned __int16 *)v3 + 2);
  *a1 = (tlv *)((char *)v3 + 6);
  return (v6 << 16) | (v7 << 32) | v5;
}

void sub_1B3DAB094(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DAB070);
}

uint64_t tlv::size<bsp::tlv::abm::RxDiversityConfig>()
{
  return 9;
}

_WORD **tlv::writeV<bsp::tlv::abm::RxDiversityConfig>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  *result = v2 + 3;
  return result;
}

unint64_t tlv::parseV<bsp::tlv::abm::ARTDConfig>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)2);
  v5 = *(unsigned __int16 *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 2), v4, (const unsigned __int8 *)2);
  v6 = *((unsigned __int16 *)v3 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)2);
  v7 = *((unsigned __int16 *)v3 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 6), v4, (const unsigned __int8 *)2);
  v8 = *((unsigned __int16 *)v3 + 3);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 8), v4, (const unsigned __int8 *)2);
  *a1 = (tlv *)((char *)v3 + 10);
  return (v7 << 32) | (v8 << 48) | ((unint64_t)v6 << 16) | v5;
}

void sub_1B3DAB298(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DAB268);
}

uint64_t tlv::size<bsp::tlv::abm::ARTDConfig>()
{
  return 13;
}

_WORD **tlv::writeV<bsp::tlv::abm::ARTDConfig>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  v2[3] = a2[3];
  v2[4] = a2[4];
  *result = v2 + 5;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::UARFCNLockConfig>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B3DAB36C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::UARFCNLockConfig>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::UARFCNLockConfig>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::EARFCNLockConfig>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B3DAB424(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::EARFCNLockConfig>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::EARFCNLockConfig>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::CarrierAgreggationConfig>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)2);
  v5 = *(unsigned __int16 *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 2), v4, (const unsigned __int8 *)2);
  v6 = *((unsigned __int16 *)v3 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)2);
  v7 = *((unsigned __int16 *)v3 + 2);
  *a1 = (tlv *)((char *)v3 + 6);
  return (v6 << 16) | (v7 << 32) | v5;
}

void sub_1B3DAB588(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DAB564);
}

uint64_t tlv::size<bsp::tlv::abm::CarrierAgreggationConfig>()
{
  return 9;
}

_WORD **tlv::writeV<bsp::tlv::abm::CarrierAgreggationConfig>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  *result = v2 + 3;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::RxDiversityConfigV2>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)2);
  v5 = *(unsigned __int16 *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 2), v4, (const unsigned __int8 *)2);
  v6 = *((unsigned __int16 *)v3 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)2);
  v7 = *((unsigned __int16 *)v3 + 2);
  *a1 = (tlv *)((char *)v3 + 6);
  return (v6 << 16) | (v7 << 32) | v5;
}

void sub_1B3DAB6F8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DAB6D4);
}

uint64_t tlv::size<bsp::tlv::abm::RxDiversityConfigV2>()
{
  return 9;
}

_WORD **tlv::writeV<bsp::tlv::abm::RxDiversityConfigV2>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  *result = v2 + 3;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::ARTDConfigV2>(uint64_t *a1, int a2)
{
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = 2863267840;
  *a1 = bsp::tlv::abm::parseField(*a1, (const unsigned __int8 *)(*a1 + a2), (uint64_t)v3);
  return v3[0];
}

uint64_t sub_1B3DAB7F0(void *a1)
{
  _QWORD *v1;
  uint64_t v3;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return v3;
}

uint64_t tlv::size<bsp::tlv::abm::ARTDConfigV2>()
{
  return 17;
}

uint64_t *tlv::writeV<bsp::tlv::abm::ARTDConfigV2>(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *(_BYTE *)v2 = *(_BYTE *)a2;
  *(_BYTE *)(v2 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(v2 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(v2 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(v2 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(v2 + 5) = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(v2 + 6) = *(_BYTE *)(a2 + 6);
  *(_BYTE *)(v2 + 7) = *(_BYTE *)(a2 + 7);
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(v2 + 9) = *(_BYTE *)(a2 + 9);
  *(_DWORD *)(v2 + 10) = *(_DWORD *)(a2 + 12);
  *result = v2 + 14;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::ARFCNLockConfig>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  tlv *v5;
  const unsigned __int8 *v6;
  uint64_t result;

  *(_DWORD *)a3 = -1431699456;
  *(_QWORD *)(a3 + 4) = 0;
  *(_QWORD *)(a3 + 12) = 0;
  *(_DWORD *)(a3 + 20) = 0;
  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)2);
  *(_WORD *)a3 = *(_WORD *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 2), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)((char *)v5 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 6), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)((char *)v5 + 6);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 10), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)((char *)v5 + 10);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 14), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 16) = *(_DWORD *)((char *)v5 + 14);
  result = tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 18), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 20) = *(_DWORD *)((char *)v5 + 18);
  *a1 = (tlv *)((char *)v5 + 22);
  return result;
}

void sub_1B3DABA60(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<bsp::tlv::abm::ARFCNLockConfig>()
{
  return 25;
}

uint64_t *tlv::writeV<bsp::tlv::abm::ARFCNLockConfig>(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *(_WORD *)v2 = *(_WORD *)a2;
  *(_DWORD *)(v2 + 2) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(v2 + 6) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v2 + 10) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(v2 + 14) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(v2 + 18) = *(_DWORD *)(a2 + 20);
  *result = v2 + 22;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::SleepConfig>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B3DABB44(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::SleepConfig>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::SleepConfig>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::FieldTestConfig>@<X0>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  result = bsp::tlv::abm::parseField(*a1, (const unsigned __int8 *)(*a1 + a2), (_WORD *)a3);
  *a1 = result;
  return result;
}

void sub_1B3DABDB0(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<bsp::tlv::abm::FieldTestConfig>()
{
  return 31;
}

_WORD **tlv::writeV<bsp::tlv::abm::FieldTestConfig>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  v2[3] = a2[3];
  v2[4] = a2[4];
  v2[5] = a2[5];
  v2[6] = a2[6];
  v2[7] = a2[7];
  v2[8] = a2[8];
  v2[9] = a2[9];
  v2[10] = a2[10];
  v2[11] = a2[11];
  v2[12] = a2[12];
  v2[13] = a2[13];
  *result = v2 + 14;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::FieldTestConfigV2>@<X0>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  __int128 v4;
  uint64_t v5;
  uint64_t result;

  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)(a3 + 4) = v4;
  *(_OWORD *)(a3 + 20) = v4;
  *(_OWORD *)(a3 + 36) = v4;
  *(_DWORD *)(a3 + 52) = -1431655766;
  *(_DWORD *)a3 = 0;
  *(_WORD *)(a3 + 4) = 0;
  *(_DWORD *)(a3 + 20) = 0;
  *(_WORD *)(a3 + 24) = 0;
  *(_WORD *)(a3 + 28) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_WORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  v5 = *a1;
  *(_QWORD *)(a3 + 46) = 0;
  result = bsp::tlv::abm::parseField(v5, (const unsigned __int8 *)(v5 + a2), a3);
  *a1 = result;
  return result;
}

void sub_1B3DAC0B8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<bsp::tlv::abm::FieldTestConfigV2>()
{
  return 49;
}

uint64_t *tlv::writeV<bsp::tlv::abm::FieldTestConfigV2>(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *(_WORD *)v2 = *(_WORD *)a2;
  *(_WORD *)(v2 + 2) = *(_WORD *)(a2 + 2);
  *(_WORD *)(v2 + 4) = *(_WORD *)(a2 + 4);
  *(_BYTE *)(v2 + 6) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(v2 + 7) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a2 + 10);
  *(_BYTE *)(v2 + 9) = *(_BYTE *)(a2 + 11);
  *(_BYTE *)(v2 + 10) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(v2 + 11) = *(_BYTE *)(a2 + 13);
  *(_BYTE *)(v2 + 12) = *(_BYTE *)(a2 + 14);
  *(_BYTE *)(v2 + 13) = *(_BYTE *)(a2 + 15);
  *(_BYTE *)(v2 + 14) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(v2 + 15) = *(_BYTE *)(a2 + 17);
  *(_DWORD *)(v2 + 16) = *(_DWORD *)(a2 + 20);
  *(_WORD *)(v2 + 20) = *(_WORD *)(a2 + 24);
  *(_WORD *)(v2 + 22) = *(_WORD *)(a2 + 28);
  *(_DWORD *)(v2 + 24) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(v2 + 28) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(v2 + 32) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(v2 + 36) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(v2 + 40) = *(_DWORD *)(a2 + 48);
  *(_WORD *)(v2 + 44) = *(_WORD *)(a2 + 52);
  *result = v2 + 46;
  return result;
}

uint64_t bsp::tlv::abm::parseField(uint64_t a1, const unsigned __int8 *a2, _BYTE *a3)
{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 1), a2, (const unsigned __int8 *)1);
  a3[1] = *(_BYTE *)(a1 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 2), a2, (const unsigned __int8 *)1);
  a3[2] = *(_BYTE *)(a1 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 3), a2, (const unsigned __int8 *)1);
  a3[3] = *(_BYTE *)(a1 + 3);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)1);
  a3[4] = *(_BYTE *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 5), a2, (const unsigned __int8 *)1);
  a3[5] = *(_BYTE *)(a1 + 5);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 6), a2, (const unsigned __int8 *)1);
  a3[6] = *(_BYTE *)(a1 + 6);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 7), a2, (const unsigned __int8 *)1);
  a3[7] = *(_BYTE *)(a1 + 7);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)1);
  a3[8] = *(_BYTE *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 9), a2, (const unsigned __int8 *)1);
  a3[9] = *(_BYTE *)(a1 + 9);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 10), a2, (const unsigned __int8 *)1);
  a3[10] = *(_BYTE *)(a1 + 10);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 11), a2, (const unsigned __int8 *)1);
  a3[11] = *(_BYTE *)(a1 + 11);
  return a1 + 12;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 1), a2, (const unsigned __int8 *)1);
  a3[1] = *(_BYTE *)(a1 + 1);
  return a1 + 2;
}

uint64_t tlv::parseV<bsp::tlv::abm::ReadStatus>(uint64_t *a1, int a2)
{
  uint64_t v3;
  int v4;

  v4 = 0;
  v3 = 0;
  *a1 = bsp::tlv::abm::parseField(*a1, (const unsigned __int8 *)(*a1 + a2), &v3);
  return v3;
}

uint64_t sub_1B3DAC398(void *a1)
{
  _QWORD *v1;
  uint64_t v3;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return v3;
}

uint64_t tlv::size<bsp::tlv::abm::ReadStatus>()
{
  return 15;
}

_BYTE **tlv::writeV<bsp::tlv::abm::ReadStatus>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  v2[3] = a2[3];
  v2[4] = a2[4];
  v2[5] = a2[5];
  v2[6] = a2[6];
  v2[7] = a2[7];
  v2[8] = a2[8];
  v2[9] = a2[9];
  v2[10] = a2[10];
  v2[11] = a2[11];
  *result = v2 + 12;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::MeasureType>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DAC4B4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::MeasureType>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::MeasureType>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::TestType>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DAC56C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::TestType>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::TestType>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::TriggerError>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DAC624(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::TriggerError>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::TriggerError>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::TestTimeout>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B3DAC6DC(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::TestTimeout>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::TestTimeout>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

_QWORD *tlv::parseV<bsp::tlv::abm::RFSelfTestNonce>@<X0>(char **a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  char *v4;
  _QWORD *result;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = &(*a1)[a2];
  result = std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, *a1, v4, a2);
  *a1 = v4;
  return result;
}

void sub_1B3DAC7E0(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DAC7D0);
}

void sub_1B3DAC7F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<bsp::tlv::abm::RFSelfTestNonce>(_QWORD *a1)
{
  return a1[1] - *a1 + 3;
}

void *tlv::writeV<bsp::tlv::abm::RFSelfTestNonce>(void **a1, uint64_t a2)
{
  char *v4;
  void *result;

  v4 = (char *)*a1;
  result = memcpy(*a1, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  *a1 = &v4[*(_QWORD *)(a2 + 8) - *(_QWORD *)a2];
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::SecurityStatus>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B3DAC8EC(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::SecurityStatus>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::SecurityStatus>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

_QWORD *tlv::parseV<bsp::tlv::abm::RFSelfTestTicket>@<X0>(char **a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  char *v4;
  _QWORD *result;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = &(*a1)[a2];
  result = std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, *a1, v4, a2);
  *a1 = v4;
  return result;
}

void sub_1B3DAC9F0(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DAC9E0);
}

void sub_1B3DACA00(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<bsp::tlv::abm::RFSelfTestTicket>(_QWORD *a1)
{
  return a1[1] - *a1 + 3;
}

void *tlv::writeV<bsp::tlv::abm::RFSelfTestTicket>(void **a1, uint64_t a2)
{
  char *v4;
  void *result;

  v4 = (char *)*a1;
  result = memcpy(*a1, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  *a1 = &v4[*(_QWORD *)(a2 + 8) - *(_QWORD *)a2];
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::WakeChannel>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3DACAFC(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::WakeChannel>()
{
  return 7;
}

_DWORD **tlv::writeV<bsp::tlv::abm::WakeChannel>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::CommandCode>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DACBB4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::CommandCode>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::CommandCode>(_BYTE **result, _DWORD *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::RegionIndex>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DACC6C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::RegionIndex>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::RegionIndex>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::BlockIndex>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3DACD24(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::BlockIndex>()
{
  return 7;
}

_DWORD **tlv::writeV<bsp::tlv::abm::BlockIndex>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t bsp::tlv::abm::writeField(uint64_t a1, _DWORD *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t i;

  *(_DWORD *)a1 = *a2;
  result = a1 + 5;
  *(_BYTE *)(a1 + 4) = -51 * ((a2[4] - a2[2]) >> 2);
  v4 = *((_QWORD *)a2 + 1);
  for (i = *((_QWORD *)a2 + 2); v4 != i; v4 += 20)
  {
    *(_DWORD *)result = *(_DWORD *)v4;
    *(_OWORD *)(result + 4) = *(_OWORD *)(v4 + 4);
    result += 20;
  }
  return result;
}

unint64_t bsp::tlv::abm::getFieldSize(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v1 == v2)
    return 5;
  else
    return 20 * ((v2 - v1 - 20) / 0x14uLL) + 25;
}

{
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a1 + 8))
    return 4;
  else
    return ((*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) & 0xFFFFFFFFFFFFFFFCLL) + 4;
}

uint64_t tlv::parseV<bsp::tlv::abm::Capabilities>@<X0>(uint64_t *a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t result;

  *a3 = 0xAAAAAAAA00000000;
  a3[1] = 0;
  a3[2] = 0;
  a3[3] = 0;
  result = bsp::tlv::abm::parseField(*a1, (const unsigned __int8 *)(*a1 + a2), (uint64_t)a3);
  *a1 = result;
  return result;
}

void sub_1B3DACF2C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DACF1CLL);
}

void sub_1B3DACF3C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<bsp::tlv::abm::Capabilities>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v1 == v2)
    return 8;
  else
    return 20 * ((v2 - v1 - 20) / 0x14uLL) + 28;
}

uint64_t *tlv::writeV<bsp::tlv::abm::Capabilities>(uint64_t *result, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;

  v2 = *result;
  *(_DWORD *)v2 = *a2;
  v3 = v2 + 5;
  *(_BYTE *)(v2 + 4) = -51 * ((a2[4] - a2[2]) >> 2);
  v4 = *((_QWORD *)a2 + 1);
  for (i = *((_QWORD *)a2 + 2); v4 != i; v4 += 20)
  {
    *(_DWORD *)v3 = *(_DWORD *)v4;
    *(_OWORD *)(v3 + 4) = *(_OWORD *)(v4 + 4);
    v3 += 20;
  }
  *result = v3;
  return result;
}

void std::vector<bsp::tlv::abm::CapabilitiesItem>::__append(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  __int128 v17;

  v5 = a1[1];
  v4 = a1[2];
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 2) >= a2)
  {
    if (a2)
    {
      v12 = 20 * ((20 * a2 - 20) / 0x14) + 20;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 2);
    v8 = v7 + a2;
    if (v7 + a2 > 0xCCCCCCCCCCCCCCCLL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - v6) >> 2);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x666666666666666)
      v10 = 0xCCCCCCCCCCCCCCCLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xCCCCCCCCCCCCCCCLL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = (char *)operator new(20 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[20 * v7];
    v14 = &v11[20 * v10];
    v15 = 20 * ((20 * a2 - 20) / 0x14) + 20;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        v17 = *(_OWORD *)(v5 - 20);
        *((_DWORD *)v13 - 1) = *((_DWORD *)v5 - 1);
        *(_OWORD *)(v13 - 20) = v17;
        v13 -= 20;
        v5 -= 20;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
      operator delete(v5);
  }
}

char *wds::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, _WORD *a3)
{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)2);
  *a3 = *(_WORD *)a1;
  return (char *)a1 + 2;
}

_WORD *wds::tlv::abm::writeField(_WORD *a1, _WORD *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

uint64_t wds::tlv::abm::getFieldSize()
{
  return 2;
}

{
  return 1;
}

{
  return 9;
}

{
  return 9;
}

uint64_t tlv::parseV<wds::tlv::abm::Port>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B3DAD210(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<wds::tlv::abm::Port>()
{
  return 5;
}

_WORD **tlv::writeV<wds::tlv::abm::Port>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

char *wds::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, _BYTE *a3)
{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1;
  return (char *)a1 + 1;
}

_BYTE *wds::tlv::abm::writeField(_BYTE *a1, _BYTE *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

uint64_t tlv::parseV<wds::tlv::abm::MuxId>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DAD2C8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<wds::tlv::abm::MuxId>()
{
  return 4;
}

_BYTE **tlv::writeV<wds::tlv::abm::MuxId>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t wds::tlv::abm::parseField(uint64_t a1, const unsigned __int8 *a2, _DWORD *a3)
{
  uint64_t result;

  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)1);
  result = a1 + 9;
  a3[2] = *(unsigned __int8 *)(a1 + 8);
  return result;
}

{
  uint64_t result;

  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)1);
  result = a1 + 9;
  a3[2] = *(unsigned __int8 *)(a1 + 8);
  return result;
}

uint64_t wds::tlv::abm::writeField(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 4) = a2[1];
  *(_BYTE *)(a1 + 8) = a2[2];
  return a1 + 9;
}

{
  *(_DWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 4) = a2[1];
  *(_BYTE *)(a1 + 8) = a2[2];
  return a1 + 9;
}

unint64_t tlv::parseV<wds::tlv::abm::LinkStat>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  v6 = *((unsigned int *)v3 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 8), v4, (const unsigned __int8 *)1);
  *a1 = (tlv *)((char *)v3 + 9);
  return v5 | (unint64_t)(v6 << 32);
}

void sub_1B3DAD428(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DAD40CLL);
}

uint64_t tlv::size<wds::tlv::abm::LinkStat>()
{
  return 12;
}

uint64_t *tlv::writeV<wds::tlv::abm::LinkStat>(uint64_t *result, _DWORD *a2)
{
  uint64_t v2;

  v2 = *result;
  *(_DWORD *)v2 = *a2;
  *(_DWORD *)(v2 + 4) = a2[1];
  *(_BYTE *)(v2 + 8) = a2[2];
  *result = v2 + 9;
  return result;
}

unint64_t tlv::parseV<wds::tlv::abm::LinkStatCumulative>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  v6 = *((unsigned int *)v3 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 8), v4, (const unsigned __int8 *)1);
  *a1 = (tlv *)((char *)v3 + 9);
  return v5 | (unint64_t)(v6 << 32);
}

void sub_1B3DAD594(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DAD578);
}

uint64_t tlv::size<wds::tlv::abm::LinkStatCumulative>()
{
  return 12;
}

uint64_t *tlv::writeV<wds::tlv::abm::LinkStatCumulative>(uint64_t *result, _DWORD *a2)
{
  uint64_t v2;

  v2 = *result;
  *(_DWORD *)v2 = *a2;
  *(_DWORD *)(v2 + 4) = a2[1];
  *(_BYTE *)(v2 + 8) = a2[2];
  *result = v2 + 9;
  return result;
}

tlv *coex::parseField(tlv *a1, const unsigned __int8 *a2, _QWORD *a3)
{
  tlv *v5;
  uint64_t v6;

  v5 = a1;
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)8);
  if ((unint64_t)(a2 - (const unsigned __int8 *)v5) >= 8)
  {
    v6 = *(_QWORD *)v5;
    v5 = (tlv *)((char *)v5 + 8);
    *a3 = v6;
  }
  return v5;
}

_QWORD *coex::writeField(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  return a1 + 1;
}

char *awd::parseField(tlv *a1, const unsigned __int8 *a2, _DWORD *a3)
{
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  return (char *)a1 + 4;
}

_DWORD *awd::writeField(_DWORD *a1, int a2)
{
  *a1 = a2;
  return a1 + 1;
}

uint64_t awd::getFieldSize()
{
  return 4;
}

uint64_t awd::tlv::abm::writeField(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(a1 + 13) = *(_BYTE *)(a2 + 13);
  *(_WORD *)(a1 + 14) = *(_DWORD *)(a2 + 24) - *(_DWORD *)(a2 + 16);
  v3 = a1 + 16;
  memcpy((void *)(a1 + 16), *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16));
  return v3 + *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16);
}

{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_WORD *)(a1 + 2) = *(_DWORD *)(a2 + 16) - *(_DWORD *)(a2 + 8);
  v3 = a1 + 4;
  memcpy((void *)(a1 + 4), *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8));
  return v3 + *(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8);
}

{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_QWORD *)(a1 + 5) = *(_QWORD *)(a2 + 8);
  return a1 + 13;
}

{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  return a1 + 6;
}

{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 1) = *(_QWORD *)(a2 + 8);
  return a1 + 9;
}

{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_WORD *)(a1 + 26) = *(_DWORD *)(a2 + 40) - *(_DWORD *)(a2 + 32);
  v3 = a1 + 28;
  memcpy((void *)(a1 + 28), *(const void **)(a2 + 32), *(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32));
  return v3 + *(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32);
}

{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_WORD *)(a1 + 18) = *(_DWORD *)(a2 + 32) - *(_DWORD *)(a2 + 24);
  v3 = a1 + 20;
  memcpy((void *)(a1 + 20), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24));
  return v3 + *(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24);
}

{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  return a1 + 22;
}

{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  return a1 + 18;
}

{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 20) = *(_QWORD *)(a2 + 24);
  return a1 + 28;
}

{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1 + 24;
}

{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_BYTE *)(a1 + 21) = *(_BYTE *)(a2 + 21);
  *(_BYTE *)(a1 + 22) = *(_BYTE *)(a2 + 22);
  *(_BYTE *)(a1 + 23) = *(_BYTE *)(a2 + 23);
  return a1 + 24;
}

{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
  return a1 + 20;
}

{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1 + 9;
}

{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1 + 9;
}

{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  return a1 + 5;
}

uint64_t awd::tlv::abm::getFieldSize(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16) + 16;
}

{
  return *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) + 4;
}

{
  return *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32) + 28;
}

{
  return *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24) + 20;
}

char *tlv::parseV<awd::tlv::abm::AddConfig>@<X0>(tlv **a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  char *result;

  a3[2] = 0;
  a3[3] = 0;
  a3[4] = 0;
  *a3 = 0;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)((char *)a3 + 6) = 0;
  result = awd::tlv::abm::parseField(*a1, (const unsigned __int8 *)*a1 + a2, (uint64_t)a3);
  *a1 = (tlv *)result;
  return result;
}

void sub_1B3DAD83C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DAD82CLL);
}

void sub_1B3DAD84C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<awd::tlv::abm::AddConfig>(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16) + 19;
}

void *tlv::writeV<awd::tlv::abm::AddConfig>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *result;

  v4 = *a1;
  *(_DWORD *)v4 = *(_DWORD *)a2;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(v4 + 12) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(v4 + 13) = *(_BYTE *)(a2 + 13);
  *(_WORD *)(v4 + 14) = *(_WORD *)(a2 + 24) - *(_DWORD *)(a2 + 16);
  v5 = v4 + 16;
  result = memcpy((void *)(v4 + 16), *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16));
  *a1 = v5 + *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16);
  return result;
}

uint64_t awd::tlv::abm::parseField(uint64_t a1, const unsigned __int8 *a2, _DWORD *a3)
{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  return a1 + 8;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)4);
  a3[2] = *(_DWORD *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 12), a2, (const unsigned __int8 *)4);
  a3[3] = *(_DWORD *)(a1 + 12);
  return a1 + 16;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)4);
  a3[2] = *(_DWORD *)(a1 + 8);
  return a1 + 12;
}

_DWORD *awd::tlv::abm::writeField(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1 + 4;
}

{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1 + 3;
}

uint64_t awd::tlv::abm::getFieldSize()
{
  return 8;
}

{
  return 16;
}

{
  return 12;
}

{
  return 13;
}

{
  return 6;
}

{
  return 9;
}

{
  return 2;
}

{
  return 22;
}

{
  return 18;
}

{
  return 28;
}

{
  return 24;
}

{
  return 24;
}

{
  return 20;
}

{
  return 9;
}

{
  return 9;
}

{
  return 5;
}

uint64_t tlv::parseV<awd::tlv::abm::DeleteConfig>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  v6 = *((unsigned int *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 8);
  return (v6 << 32) | v5;
}

uint64_t sub_1B3DAD9E8(void *a1)
{
  _QWORD *v1;
  unsigned int v2;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<awd::tlv::abm::DeleteConfig>()
{
  return 11;
}

_DWORD **tlv::writeV<awd::tlv::abm::DeleteConfig>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  *result = v2 + 2;
  return result;
}

_QWORD *tlv::parseV<awd::tlv::abm::RequestParams>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  tlv *v5;
  const unsigned __int8 *v6;
  unint64_t v7;
  _QWORD *result;

  *(_QWORD *)a3 = 0xAAAAAAAAAAAA0000;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  *(_BYTE *)a3 = *(_BYTE *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 1), v6, (const unsigned __int8 *)1);
  *(_BYTE *)(a3 + 1) = *((_BYTE *)v5 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 2), v6, (const unsigned __int8 *)2);
  v7 = *((unsigned __int16 *)v5 + 1);
  v5 = (tlv *)((char *)v5 + 4);
  tlv::throwIfNotEnoughBytes(v5, v6, (const unsigned __int8 *)v7);
  result = std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((_QWORD *)(a3 + 8), (char *)v5, (char *)v5 + v7, v7);
  *a1 = (tlv *)((char *)v5 + v7);
  return result;
}

void sub_1B3DADC08(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DADBF4);
}

void sub_1B3DADC18(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<awd::tlv::abm::RequestParams>(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) + 7;
}

void *tlv::writeV<awd::tlv::abm::RequestParams>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *result;

  v4 = *a1;
  *(_BYTE *)v4 = *(_BYTE *)a2;
  *(_BYTE *)(v4 + 1) = *(_BYTE *)(a2 + 1);
  *(_WORD *)(v4 + 2) = *(_WORD *)(a2 + 16) - *(_DWORD *)(a2 + 8);
  v5 = v4 + 4;
  result = memcpy((void *)(v4 + 4), *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8));
  *a1 = v5 + *(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8);
  return result;
}

unint64_t tlv::parseV<awd::tlv::abm::MetricsExt>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  v6 = *((unsigned int *)v3 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 8), v4, (const unsigned __int8 *)4);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 12), v4, (const unsigned __int8 *)4);
  *a1 = (tlv *)((char *)v3 + 16);
  return v5 | (unint64_t)(v6 << 32);
}

void sub_1B3DADE24(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DADE04);
}

uint64_t tlv::size<awd::tlv::abm::MetricsExt>()
{
  return 19;
}

_DWORD **tlv::writeV<awd::tlv::abm::MetricsExt>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  v2[3] = a2[3];
  *result = v2 + 4;
  return result;
}

unint64_t tlv::parseV<awd::tlv::abm::Metrics>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  v6 = *((unsigned int *)v3 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 8), v4, (const unsigned __int8 *)4);
  *a1 = (tlv *)((char *)v3 + 12);
  return v5 | (unint64_t)(v6 << 32);
}

void sub_1B3DADF90(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DADF74);
}

uint64_t tlv::size<awd::tlv::abm::Metrics>()
{
  return 15;
}

_DWORD **tlv::writeV<awd::tlv::abm::Metrics>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  *result = v2 + 3;
  return result;
}

uint64_t awd::tlv::abm::parseField(uint64_t a1, const unsigned __int8 *a2, uint64_t a3)
{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)1);
  *(_BYTE *)(a3 + 4) = *(_BYTE *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 5), a2, (const unsigned __int8 *)8);
  *(_QWORD *)(a3 + 8) = *(_QWORD *)(a1 + 5);
  return a1 + 13;
}

{
  uint64_t result;

  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)1);
  *(_BYTE *)(a3 + 4) = *(_BYTE *)(a1 + 4) != 0;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 5), a2, (const unsigned __int8 *)1);
  result = a1 + 6;
  *(_BYTE *)(a3 + 5) = *(_BYTE *)(a1 + 5) != 0;
  return result;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)1);
  *(_BYTE *)a3 = *(_BYTE *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 1), a2, (const unsigned __int8 *)8);
  *(_QWORD *)(a3 + 8) = *(_QWORD *)(a1 + 1);
  return a1 + 9;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 12), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a1 + 12);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 16), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 16) = *(_DWORD *)(a1 + 16);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 20), a2, (const unsigned __int8 *)2);
  *(_WORD *)(a3 + 20) = *(_WORD *)(a1 + 20);
  return a1 + 22;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 12), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a1 + 12);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 16), a2, (const unsigned __int8 *)2);
  *(_WORD *)(a3 + 16) = *(_WORD *)(a1 + 16);
  return a1 + 18;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 12), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a1 + 12);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 16), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 16) = *(_DWORD *)(a1 + 16);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 20), a2, (const unsigned __int8 *)8);
  *(_QWORD *)(a3 + 24) = *(_QWORD *)(a1 + 20);
  return a1 + 28;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 12), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a1 + 12);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 16), a2, (const unsigned __int8 *)8);
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(a1 + 16);
  return a1 + 24;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 12), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a1 + 12);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 16), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 16) = *(_DWORD *)(a1 + 16);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 20), a2, (const unsigned __int8 *)1);
  *(_BYTE *)(a3 + 20) = *(_BYTE *)(a1 + 20);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 21), a2, (const unsigned __int8 *)1);
  *(_BYTE *)(a3 + 21) = *(_BYTE *)(a1 + 21);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 22), a2, (const unsigned __int8 *)1);
  *(_BYTE *)(a3 + 22) = *(_BYTE *)(a1 + 22);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 23), a2, (const unsigned __int8 *)1);
  *(_BYTE *)(a3 + 23) = *(_BYTE *)(a1 + 23);
  return a1 + 24;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 12), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a1 + 12);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 16), a2, (const unsigned __int8 *)1);
  *(_BYTE *)(a3 + 16) = *(_BYTE *)(a1 + 16);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 17), a2, (const unsigned __int8 *)1);
  *(_BYTE *)(a3 + 17) = *(_BYTE *)(a1 + 17);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 18), a2, (const unsigned __int8 *)1);
  *(_BYTE *)(a3 + 18) = *(_BYTE *)(a1 + 18);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 19), a2, (const unsigned __int8 *)1);
  *(_BYTE *)(a3 + 19) = *(_BYTE *)(a1 + 19);
  return a1 + 20;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)1);
  *(_BYTE *)(a3 + 8) = *(_BYTE *)(a1 + 8);
  return a1 + 9;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)1);
  *(_BYTE *)(a3 + 8) = *(_BYTE *)(a1 + 8);
  return a1 + 9;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)1);
  *(_BYTE *)(a3 + 4) = *(_BYTE *)(a1 + 4);
  return a1 + 5;
}

unint64_t tlv::parseV<awd::tlv::abm::MetricIndicationExt>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)1);
  v6 = *((unsigned __int8 *)v3 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 5), v4, (const unsigned __int8 *)8);
  *a1 = (tlv *)((char *)v3 + 13);
  return v5 | (unint64_t)(v6 << 32) | 0xAAAAAA0000000000;
}

void sub_1B3DAE104(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DAE0DCLL);
}

uint64_t tlv::size<awd::tlv::abm::MetricIndicationExt>()
{
  return 16;
}

uint64_t *tlv::writeV<awd::tlv::abm::MetricIndicationExt>(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *(_DWORD *)v2 = *(_DWORD *)a2;
  *(_BYTE *)(v2 + 4) = *(_BYTE *)(a2 + 4);
  *(_QWORD *)(v2 + 5) = *(_QWORD *)(a2 + 8);
  *result = v2 + 13;
  return result;
}

unint64_t tlv::parseV<awd::tlv::abm::PIILocationExt>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  unint64_t v9;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)1);
  v6 = *((_BYTE *)v3 + 4) != 0;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 5), v4, (const unsigned __int8 *)1);
  v7 = *((unsigned __int8 *)v3 + 5);
  *a1 = (tlv *)((char *)v3 + 6);
  v8 = v7 == 0;
  v9 = 0xAAAA010000000000;
  if (v8)
    v9 = 0xAAAA000000000000;
  return v9 | (v6 << 32) | v5;
}

void sub_1B3DAE2A0(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DAE280);
}

uint64_t tlv::size<awd::tlv::abm::PIILocationExt>()
{
  return 9;
}

uint64_t *tlv::writeV<awd::tlv::abm::PIILocationExt>(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *(_DWORD *)v2 = *(_DWORD *)a2;
  *(_BYTE *)(v2 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(v2 + 5) = *(_BYTE *)(a2 + 5);
  *result = v2 + 6;
  return result;
}

unint64_t tlv::parseV<awd::tlv::abm::MetricIndication>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)1);
  v5 = *(unsigned __int8 *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 1), v4, (const unsigned __int8 *)8);
  *a1 = (tlv *)((char *)v3 + 9);
  return v5 | 0xAAAAAAAAAAAAAA00;
}

void sub_1B3DAE3CC(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DAE3ACLL);
}

uint64_t tlv::size<awd::tlv::abm::MetricIndication>()
{
  return 12;
}

uint64_t *tlv::writeV<awd::tlv::abm::MetricIndication>(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *(_BYTE *)v2 = *(_BYTE *)a2;
  *(_QWORD *)(v2 + 1) = *(_QWORD *)(a2 + 8);
  *result = v2 + 9;
  return result;
}

uint64_t awd::tlv::abm::parseField(uint64_t a1, const unsigned __int8 *a2, BOOL *a3)
{
  uint64_t result;

  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)1);
  *a3 = *(_BYTE *)a1 != 0;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 1), a2, (const unsigned __int8 *)1);
  result = a1 + 2;
  a3[1] = *(_BYTE *)(a1 + 1) != 0;
  return result;
}

_BYTE *awd::tlv::abm::writeField(_BYTE *a1, _BYTE *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  return a1 + 2;
}

uint64_t tlv::parseV<awd::tlv::abm::PIILocation>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  _BOOL4 v5;
  int v6;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)1);
  v5 = *(_BYTE *)v3 != 0;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 1), v4, (const unsigned __int8 *)1);
  v6 = *((_BYTE *)v3 + 1) != 0;
  *a1 = (tlv *)((char *)v3 + 2);
  return v5 | (v6 << 8);
}

uint64_t sub_1B3DAE508(void *a1)
{
  _QWORD *v1;
  unsigned int v2;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<awd::tlv::abm::PIILocation>()
{
  return 5;
}

_BYTE **tlv::writeV<awd::tlv::abm::PIILocation>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  *result = v2 + 2;
  return result;
}

char *tlv::parseV<awd::tlv::abm::MetricDataExt>@<X0>(tlv **a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  char *result;

  a3[4] = 0;
  a3[5] = 0;
  a3[6] = 0;
  a3[2] = 0;
  a3[3] = 0xAAAAAAAAAAAAAAAALL;
  *a3 = 0;
  a3[1] = 0;
  *((_WORD *)a3 + 12) = 0;
  result = awd::tlv::abm::parseField(*a1, (const unsigned __int8 *)*a1 + a2, (uint64_t)a3);
  *a1 = (tlv *)result;
  return result;
}

void sub_1B3DAE644(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DAE634);
}

void sub_1B3DAE654(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<awd::tlv::abm::MetricDataExt>(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32) + 31;
}

void *tlv::writeV<awd::tlv::abm::MetricDataExt>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *result;

  v4 = *a1;
  *(_DWORD *)v4 = *(_DWORD *)a2;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v4 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(v4 + 20) = *(_DWORD *)(a2 + 20);
  *(_WORD *)(v4 + 24) = *(_WORD *)(a2 + 24);
  *(_WORD *)(v4 + 26) = *(_WORD *)(a2 + 40) - *(_DWORD *)(a2 + 32);
  v5 = v4 + 28;
  result = memcpy((void *)(v4 + 28), *(const void **)(a2 + 32), *(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32));
  *a1 = v5 + *(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32);
  return result;
}

char *tlv::parseV<awd::tlv::abm::MetricData>@<X0>(tlv **a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  char *result;

  a3[1] = 0;
  a3[2] = 0xAAAAAAAAAAAAAAAALL;
  a3[3] = 0;
  a3[4] = 0;
  a3[5] = 0;
  *a3 = 0;
  *((_WORD *)a3 + 8) = 0;
  result = awd::tlv::abm::parseField(*a1, (const unsigned __int8 *)*a1 + a2, (uint64_t)a3);
  *a1 = (tlv *)result;
  return result;
}

void sub_1B3DAE8E0(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DAE8D0);
}

void sub_1B3DAE8F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<awd::tlv::abm::MetricData>(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24) + 23;
}

void *tlv::writeV<awd::tlv::abm::MetricData>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *result;

  v4 = *a1;
  *(_DWORD *)v4 = *(_DWORD *)a2;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v4 + 12) = *(_DWORD *)(a2 + 12);
  *(_WORD *)(v4 + 16) = *(_WORD *)(a2 + 16);
  *(_WORD *)(v4 + 18) = *(_WORD *)(a2 + 32) - *(_DWORD *)(a2 + 24);
  v5 = v4 + 20;
  result = memcpy((void *)(v4 + 20), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24));
  *a1 = v5 + *(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24);
  return result;
}

uint64_t tlv::parseV<awd::tlv::abm::MetricDataEndExt>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  tlv *v5;
  const unsigned __int8 *v6;
  uint64_t result;

  *(_DWORD *)(a3 + 20) = -1431655766;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 14) = 0;
  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 4), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *((_DWORD *)v5 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 8), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *((_DWORD *)v5 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 12), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *((_DWORD *)v5 + 3);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 16), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 16) = *((_DWORD *)v5 + 4);
  result = tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 20), v6, (const unsigned __int8 *)2);
  *(_WORD *)(a3 + 20) = *((_WORD *)v5 + 10);
  *a1 = (tlv *)((char *)v5 + 22);
  return result;
}

void sub_1B3DAEB78(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<awd::tlv::abm::MetricDataEndExt>()
{
  return 25;
}

uint64_t *tlv::writeV<awd::tlv::abm::MetricDataEndExt>(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *(_DWORD *)v2 = *(_DWORD *)a2;
  *(_DWORD *)(v2 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(v2 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v2 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(v2 + 16) = *(_DWORD *)(a2 + 16);
  *(_WORD *)(v2 + 20) = *(_WORD *)(a2 + 20);
  *result = v2 + 22;
  return result;
}

uint64_t tlv::parseV<awd::tlv::abm::MetricDataEnd>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  tlv *v5;
  const unsigned __int8 *v6;
  uint64_t result;

  *(_DWORD *)(a3 + 16) = -1431655766;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_WORD *)(a3 + 16) = 0;
  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 4), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *((_DWORD *)v5 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 8), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *((_DWORD *)v5 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 12), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *((_DWORD *)v5 + 3);
  result = tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 16), v6, (const unsigned __int8 *)2);
  *(_WORD *)(a3 + 16) = *((_WORD *)v5 + 8);
  *a1 = (tlv *)((char *)v5 + 18);
  return result;
}

void sub_1B3DAED70(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<awd::tlv::abm::MetricDataEnd>()
{
  return 21;
}

uint64_t *tlv::writeV<awd::tlv::abm::MetricDataEnd>(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *(_DWORD *)v2 = *(_DWORD *)a2;
  *(_DWORD *)(v2 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(v2 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v2 + 12) = *(_DWORD *)(a2 + 12);
  *(_WORD *)(v2 + 16) = *(_WORD *)(a2 + 16);
  *result = v2 + 18;
  return result;
}

uint64_t tlv::size<awd::tlv::abm::SubmitTriggerExt>()
{
  return 31;
}

uint64_t *tlv::writeV<awd::tlv::abm::SubmitTriggerExt>(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *(_DWORD *)v2 = *(_DWORD *)a2;
  *(_DWORD *)(v2 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(v2 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v2 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(v2 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(v2 + 20) = *(_QWORD *)(a2 + 24);
  *result = v2 + 28;
  return result;
}

uint64_t tlv::parseV<awd::tlv::abm::SubmitTrigger>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  tlv *v5;
  const unsigned __int8 *v6;
  uint64_t result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 4), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *((_DWORD *)v5 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 8), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *((_DWORD *)v5 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 12), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *((_DWORD *)v5 + 3);
  result = tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 16), v6, (const unsigned __int8 *)8);
  *(_QWORD *)(a3 + 16) = *((_QWORD *)v5 + 2);
  *a1 = (tlv *)((char *)v5 + 24);
  return result;
}

void sub_1B3DAF098(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<awd::tlv::abm::SubmitTrigger>()
{
  return 27;
}

uint64_t *tlv::writeV<awd::tlv::abm::SubmitTrigger>(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *(_DWORD *)v2 = *(_DWORD *)a2;
  *(_DWORD *)(v2 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(v2 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v2 + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(v2 + 16) = *(_QWORD *)(a2 + 16);
  *result = v2 + 24;
  return result;
}

uint64_t tlv::parseV<awd::tlv::abm::PIILocationUsedExt>@<X0>(uint64_t *a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t result;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  result = awd::tlv::abm::parseField(*a1, (const unsigned __int8 *)(*a1 + a2), (uint64_t)a3);
  *a1 = result;
  return result;
}

void sub_1B3DAF284(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<awd::tlv::abm::PIILocationUsedExt>()
{
  return 27;
}

uint64_t *tlv::writeV<awd::tlv::abm::PIILocationUsedExt>(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *(_DWORD *)v2 = *(_DWORD *)a2;
  *(_DWORD *)(v2 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(v2 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v2 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(v2 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(v2 + 20) = *(_BYTE *)(a2 + 20);
  *(_BYTE *)(v2 + 21) = *(_BYTE *)(a2 + 21);
  *(_BYTE *)(v2 + 22) = *(_BYTE *)(a2 + 22);
  *(_BYTE *)(v2 + 23) = *(_BYTE *)(a2 + 23);
  *result = v2 + 24;
  return result;
}

uint64_t tlv::parseV<awd::tlv::abm::PIILocationUsed>@<X0>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  result = awd::tlv::abm::parseField(*a1, (const unsigned __int8 *)(*a1 + a2), a3);
  *a1 = result;
  return result;
}

void sub_1B3DAF46C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
}

uint64_t tlv::size<awd::tlv::abm::PIILocationUsed>()
{
  return 23;
}

uint64_t *tlv::writeV<awd::tlv::abm::PIILocationUsed>(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *(_DWORD *)v2 = *(_DWORD *)a2;
  *(_DWORD *)(v2 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(v2 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v2 + 12) = *(_DWORD *)(a2 + 12);
  *(_BYTE *)(v2 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(v2 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(v2 + 18) = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(v2 + 19) = *(_BYTE *)(a2 + 19);
  *result = v2 + 20;
  return result;
}

unint64_t tlv::parseV<awd::tlv::abm::AddConfigResult>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  v6 = *((unsigned int *)v3 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 8), v4, (const unsigned __int8 *)1);
  *a1 = (tlv *)((char *)v3 + 9);
  return v5 | (unint64_t)(v6 << 32);
}

void sub_1B3DAF610(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DAF5F0);
}

uint64_t tlv::size<awd::tlv::abm::AddConfigResult>()
{
  return 12;
}

uint64_t *tlv::writeV<awd::tlv::abm::AddConfigResult>(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *(_DWORD *)v2 = *(_DWORD *)a2;
  *(_DWORD *)(v2 + 4) = *(_DWORD *)(a2 + 4);
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a2 + 8);
  *result = v2 + 9;
  return result;
}

unint64_t tlv::parseV<awd::tlv::abm::DeleteConfigResult>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  v6 = *((unsigned int *)v3 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 8), v4, (const unsigned __int8 *)1);
  *a1 = (tlv *)((char *)v3 + 9);
  return v5 | (unint64_t)(v6 << 32);
}

void sub_1B3DAF788(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DAF768);
}

uint64_t tlv::size<awd::tlv::abm::DeleteConfigResult>()
{
  return 12;
}

uint64_t *tlv::writeV<awd::tlv::abm::DeleteConfigResult>(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *(_DWORD *)v2 = *(_DWORD *)a2;
  *(_DWORD *)(v2 + 4) = *(_DWORD *)(a2 + 4);
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a2 + 8);
  *result = v2 + 9;
  return result;
}

unint64_t tlv::parseV<awd::tlv::abm::ConfigurationSuccess>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)1);
  v6 = *((unsigned __int8 *)v3 + 4);
  *a1 = (tlv *)((char *)v3 + 5);
  return (v6 << 32) | 0xAAAAAA0000000000 | v5;
}

void sub_1B3DAF8C0(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DAF8A4);
}

uint64_t tlv::size<awd::tlv::abm::ConfigurationSuccess>()
{
  return 8;
}

uint64_t *tlv::writeV<awd::tlv::abm::ConfigurationSuccess>(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *(_DWORD *)v2 = *(_DWORD *)a2;
  *(_BYTE *)(v2 + 4) = *(_BYTE *)(a2 + 4);
  *result = v2 + 5;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::SvcType>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DAF978(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::SvcType>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::SvcType>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::LimitTimeout>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B3DAFA30(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::LimitTimeout>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::LimitTimeout>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

const unsigned __int8 *bsp::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, uint64_t a3)
{
  tlv *v6;
  int v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;

  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  v7 = *(_DWORD *)a1;
  v6 = (tlv *)((char *)a1 + 4);
  *(_DWORD *)a3 = v7;
  tlv::throwIfNotAligned(v6, a2, (const unsigned __int8 *)4);
  v8 = *(char **)(a3 + 8);
  v9 = (unint64_t)(a2 - (const unsigned __int8 *)v6) >> 2;
  v10 = (uint64_t)(*(_QWORD *)(a3 + 16) - (_QWORD)v8) >> 2;
  if (v9 <= v10)
  {
    if (v9 < v10)
      *(_QWORD *)(a3 + 16) = &v8[4 * v9];
  }
  else
  {
    std::vector<int>::__append((std::vector<unsigned int> *)(a3 + 8), v9 - v10);
    v8 = *(char **)(a3 + 8);
  }
  memcpy(v8, v6, a2 - (const unsigned __int8 *)v6);
  return a2;
}

_DWORD *bsp::tlv::abm::writeField(_DWORD *a1, uint64_t a2)
{
  _DWORD *result;
  char *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 *v10;
  _OWORD *v11;
  uint64_t v12;
  __int128 v13;
  int v14;

  *a1 = *(_DWORD *)a2;
  result = a1 + 1;
  v5 = *(char **)(a2 + 8);
  v4 = *(char **)(a2 + 16);
  if (v5 != v4)
  {
    v6 = v4 - v5 - 4;
    if (v6 < 0x1C)
      goto LABEL_10;
    if ((unint64_t)((char *)a1 - v5 + 4) < 0x20)
      goto LABEL_10;
    v7 = (v6 >> 2) + 1;
    v8 = 4 * (v7 & 0x7FFFFFFFFFFFFFF8);
    result = (_DWORD *)((char *)result + v8);
    v9 = &v5[v8];
    v10 = (__int128 *)(v5 + 16);
    v11 = a1 + 5;
    v12 = v7 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v13 = *v10;
      *(v11 - 1) = *(v10 - 1);
      *v11 = v13;
      v10 += 2;
      v11 += 2;
      v12 -= 8;
    }
    while (v12);
    v5 = v9;
    if (v7 != (v7 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_10:
      do
      {
        v14 = *(_DWORD *)v5;
        v5 += 4;
        *result++ = v14;
      }
      while (v5 != v4);
    }
  }
  return result;
}

void *tlv::parseV<bsp::tlv::abm::TxPwrConfigTlv>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  void **v5;
  tlv *v6;
  uint64_t v7;
  const unsigned __int8 *v8;
  tlv *v9;
  int v10;
  size_t v11;
  void *v12;
  void *result;

  *(_QWORD *)(a3 + 8) = 0;
  v5 = (void **)(a3 + 8);
  *(_QWORD *)a3 = 0xAAAAAAAA00000000;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  v6 = *a1;
  v7 = a2;
  v8 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v8, (const unsigned __int8 *)4);
  v10 = *(_DWORD *)v6;
  v9 = (tlv *)((char *)v6 + 4);
  *(_DWORD *)a3 = v10;
  tlv::throwIfNotAligned(v9, v8, (const unsigned __int8 *)4);
  v11 = v7 - 4;
  if (v11 >= 4)
  {
    std::vector<int>::__append((std::vector<unsigned int> *)(a3 + 8), v11 >> 2);
    v12 = *v5;
  }
  else
  {
    v12 = 0;
  }
  result = memcpy(v12, v9, v11);
  *a1 = (tlv *)v8;
  return result;
}

void sub_1B3DAFC68(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DAFC54);
}

void sub_1B3DAFC78(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<bsp::tlv::abm::TxPwrConfigTlv>(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a1 + 8))
    return 7;
  else
    return ((*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) & 0xFFFFFFFFFFFFFFFCLL) + 7;
}

_QWORD *tlv::writeV<bsp::tlv::abm::TxPwrConfigTlv>(_QWORD *result, uint64_t a2)
{
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int128 *v11;
  _OWORD *v12;
  uint64_t v13;
  __int128 v14;
  int v15;

  v2 = (_DWORD *)*result;
  v3 = (_DWORD *)*result;
  *v3 = *(_DWORD *)a2;
  v4 = v3 + 1;
  v6 = *(char **)(a2 + 8);
  v5 = *(char **)(a2 + 16);
  if (v6 != v5)
  {
    v7 = v5 - v6 - 4;
    if (v7 < 0x1C)
      goto LABEL_11;
    if ((unint64_t)((char *)v2 - v6 + 4) < 0x20)
      goto LABEL_11;
    v8 = (v7 >> 2) + 1;
    v9 = 4 * (v8 & 0x7FFFFFFFFFFFFFF8);
    v4 = (_DWORD *)((char *)v4 + v9);
    v10 = &v6[v9];
    v11 = (__int128 *)(v6 + 16);
    v12 = v2 + 5;
    v13 = v8 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v14 = *v11;
      *(v12 - 1) = *(v11 - 1);
      *v12 = v14;
      v11 += 2;
      v12 += 2;
      v13 -= 8;
    }
    while (v13);
    v6 = v10;
    if (v8 != (v8 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_11:
      do
      {
        v15 = *(_DWORD *)v6;
        v6 += 4;
        *v4++ = v15;
      }
      while (v6 != v5);
    }
  }
  *result = v4;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::TxAntennaConfigInfo>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B3DAFDCC(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::TxAntennaConfigInfo>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::TxAntennaConfigInfo>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::ARTDConfigInfo>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B3DAFE84(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::ARTDConfigInfo>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::ARTDConfigInfo>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::AccessoryStatus>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B3DAFF3C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::AccessoryStatus>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::AccessoryStatus>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::AccessoryType>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3DAFFF4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::AccessoryType>()
{
  return 7;
}

_DWORD **tlv::writeV<bsp::tlv::abm::AccessoryType>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::AccessoryStatusARTD>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B3DB00AC(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::AccessoryStatusARTD>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::AccessoryStatusARTD>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::AccessoryTypeARTD>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3DB0164(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::AccessoryTypeARTD>()
{
  return 7;
}

_DWORD **tlv::writeV<bsp::tlv::abm::AccessoryTypeARTD>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

BOOL tlv::parseV<bsp::tlv::abm::WiredPortStatus>(tlv **a1, int a2)
{
  tlv *v3;
  _BOOL8 result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DB022C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::WiredPortStatus>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::WiredPortStatus>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::LimitEnable>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DB02E4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::LimitEnable>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::LimitEnable>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::NotificationEnable>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DB039C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::NotificationEnable>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::NotificationEnable>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::ProxBackoffLevel>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DB0454(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::ProxBackoffLevel>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::ProxBackoffLevel>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::PhoneBackoffLevel>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DB050C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::PhoneBackoffLevel>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::PhoneBackoffLevel>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::AntennaFreeSpaceConfigLevel>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DB05C4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::AntennaFreeSpaceConfigLevel>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::AntennaFreeSpaceConfigLevel>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::TxPwrStatus>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DB067C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::TxPwrStatus>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::TxPwrStatus>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::TechType>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B3DB0734(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::TechType>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::TechType>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::CLTMPercentile>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B3DB07EC(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::CLTMPercentile>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::CLTMPercentile>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::CLTMDutyCycle>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B3DB08A4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::CLTMDutyCycle>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::CLTMDutyCycle>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::LimitTimeoutPhone>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B3DB095C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::LimitTimeoutPhone>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::LimitTimeoutPhone>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::SpeakerState>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B3DB0A14(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::SpeakerState>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::SpeakerState>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::HandState>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DB0ACC(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::HandState>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::HandState>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::ConnectionState>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DB0B84(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::ConnectionState>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::ConnectionState>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::ConnectionTrigger>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DB0C3C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::ConnectionTrigger>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::ConnectionTrigger>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::TransmitEnable>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DB0CF4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::TransmitEnable>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::TransmitEnable>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::PowerSourceState>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3DB0DAC(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::PowerSourceState>()
{
  return 7;
}

_DWORD **tlv::writeV<bsp::tlv::abm::PowerSourceState>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::PPMEnable>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DB0E64(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::PPMEnable>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::PPMEnable>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t bsp::tlv::abm::parseField(bsp::tlv::abm *this, const unsigned __int8 *a2, unsigned __int8 *a3, Duration *a4)
{
  tlv::throwIfNotEnoughBytes(this, a2, (const unsigned __int8 *)2);
  *(_WORD *)a3 = *(_WORD *)this;
  return (uint64_t)this + 2;
}

uint64_t bsp::tlv::abm::writeField(bsp::tlv::abm *this, unsigned __int8 *a2, const Duration *a3)
{
  *(_WORD *)this = *(_WORD *)a2;
  return (uint64_t)this + 2;
}

uint64_t bsp::tlv::abm::getFieldSize(bsp::tlv::abm *this, const Duration *a2)
{
  return 2;
}

uint64_t tlv::parseV<bsp::tlv::abm::Duration>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B3DB0F1C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::Duration>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::Duration>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::TxHistogramDuration>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3DB0FD4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::TxHistogramDuration>()
{
  return 7;
}

_DWORD **tlv::writeV<bsp::tlv::abm::TxHistogramDuration>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::VoiceType>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DB108C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::VoiceType>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::VoiceType>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::TxPowerMode>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DB1144(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::TxPowerMode>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::TxPowerMode>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

tlv *tlv::parseUnboundedSequence<int>(tlv *this, unsigned __int8 *a2, uint64_t a3)
{
  tlv *v3;
  uint64_t v6;
  int v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  _DWORD *v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  int v27;

  v3 = this;
  if (this < (tlv *)a2)
  {
    while (1)
    {
      v9 = *(char **)(a3 + 8);
      v8 = *(_QWORD *)(a3 + 16);
      if ((unint64_t)v9 >= v8)
        break;
      *(_DWORD *)v9 = 0;
      v6 = (uint64_t)(v9 + 4);
LABEL_4:
      *(_QWORD *)(a3 + 8) = v6;
      tlv::throwIfNotEnoughBytes(v3, a2, (const unsigned __int8 *)4);
      v7 = *(_DWORD *)v3;
      v3 = (tlv *)((char *)v3 + 4);
      *(_DWORD *)(v6 - 4) = v7;
      if (v3 >= (tlv *)a2)
        return v3;
    }
    v10 = *(char **)a3;
    v11 = (uint64_t)&v9[-*(_QWORD *)a3];
    v12 = v11 >> 2;
    v13 = (v11 >> 2) + 1;
    if (v13 >> 62)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v14 = v8 - (_QWORD)v10;
    if (v14 >> 1 > v13)
      v13 = v14 >> 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
      v15 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v16 = operator new(4 * v15);
      v17 = &v16[4 * v12];
      *v17 = 0;
      v6 = (uint64_t)(v17 + 1);
      v18 = v9 - v10;
      if (v9 == v10)
        goto LABEL_23;
    }
    else
    {
      v16 = 0;
      v17 = (_DWORD *)(4 * v12);
      *(_DWORD *)(4 * v12) = 0;
      v6 = 4 * v12 + 4;
      v18 = v9 - v10;
      if (v9 == v10)
      {
LABEL_23:
        *(_QWORD *)a3 = v17;
        *(_QWORD *)(a3 + 8) = v6;
        *(_QWORD *)(a3 + 16) = &v16[4 * v15];
        if (v10)
          operator delete(v10);
        goto LABEL_4;
      }
    }
    v19 = v18 - 4;
    if (v19 < 0x2C)
      goto LABEL_30;
    if ((unint64_t)(v9 - v16 - v11) < 0x20)
      goto LABEL_30;
    v20 = (v19 >> 2) + 1;
    v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
    v22 = &v9[-v21];
    v17 = (_DWORD *)((char *)v17 - v21);
    v23 = &v16[4 * v12 - 16];
    v24 = v9 - 16;
    v25 = v20 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      *v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 8;
    }
    while (v25);
    v9 = v22;
    if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_30:
      do
      {
        v27 = *((_DWORD *)v9 - 1);
        v9 -= 4;
        *--v17 = v27;
      }
      while (v9 != v10);
    }
    goto LABEL_23;
  }
  return v3;
}

_DWORD *bsp::tlv::abm::writeField(_DWORD *result, char **a2)
{
  _DWORD *v2;
  char *v3;
  char *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 *v9;
  _OWORD *v10;
  uint64_t v11;
  __int128 v12;
  int v13;

  v2 = result;
  v4 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v5 = v3 - v4 - 4;
    if (v5 < 0x1C || (unint64_t)((char *)result - v4) < 0x20)
    {
      v8 = *a2;
    }
    else
    {
      v6 = (v5 >> 2) + 1;
      v7 = 4 * (v6 & 0x7FFFFFFFFFFFFFF8);
      result = (_DWORD *)((char *)result + v7);
      v8 = &v4[v7];
      v9 = (__int128 *)(v4 + 16);
      v10 = v2 + 4;
      v11 = v6 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v12 = *v9;
        *(v10 - 1) = *(v9 - 1);
        *v10 = v12;
        v9 += 2;
        v10 += 2;
        v11 -= 8;
      }
      while (v11);
      if (v6 == (v6 & 0x7FFFFFFFFFFFFFF8))
        return result;
    }
    do
    {
      v13 = *(_DWORD *)v8;
      v8 += 4;
      *result++ = v13;
    }
    while (v8 != v3);
  }
  return result;
}

tlv *tlv::parseV<bsp::tlv::abm::TxHistogram>@<X0>(tlv **a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  tlv *result;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  result = tlv::parseUnboundedSequence<int>(*a1, (unsigned __int8 *)*a1 + a2, (uint64_t)a3);
  *a1 = result;
  return result;
}

void sub_1B3DB1410(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DB1404);
}

void sub_1B3DB1420(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<bsp::tlv::abm::TxHistogram>(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[1];
  if (v1 == *a1)
    return 3;
  else
    return (v1 - *a1) | 3;
}

_QWORD *tlv::writeV<bsp::tlv::abm::TxHistogram>(_QWORD *result, char **a2)
{
  _DWORD *v2;
  _DWORD *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 *v10;
  _OWORD *v11;
  uint64_t v12;
  __int128 v13;
  int v14;

  v2 = (_DWORD *)*result;
  v3 = (_DWORD *)*result;
  v5 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    v6 = v4 - v5 - 4;
    if (v6 < 0x1C)
      goto LABEL_11;
    if ((unint64_t)((char *)v2 - v5) < 0x20)
      goto LABEL_11;
    v7 = (v6 >> 2) + 1;
    v8 = v7 & 0x7FFFFFFFFFFFFFF8;
    v3 = &v2[v8];
    v9 = &v5[v8 * 4];
    v10 = (__int128 *)(v5 + 16);
    v11 = v2 + 4;
    v12 = v7 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v13 = *v10;
      *(v11 - 1) = *(v10 - 1);
      *v11 = v13;
      v10 += 2;
      v11 += 2;
      v12 -= 8;
    }
    while (v12);
    v5 = v9;
    if (v7 != (v7 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_11:
      do
      {
        v14 = *(_DWORD *)v5;
        v5 += 4;
        *v3++ = v14;
      }
      while (v5 != v4);
    }
  }
  *result = v3;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::BottomEnclosure>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B3DB1564(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::BottomEnclosure>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::BottomEnclosure>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::TopEnclosure>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B3DB161C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::TopEnclosure>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::TopEnclosure>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::FCMType>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B3DB16D4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::FCMType>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::FCMType>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::BCMType>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B3DB178C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::BCMType>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::BCMType>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::WorkoutType>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B3DB1844(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::WorkoutType>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::WorkoutType>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::WorkoutState>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B3DB18FC(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::WorkoutState>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::WorkoutState>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::WorkoutLocation>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B3DB19B4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::WorkoutLocation>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::WorkoutLocation>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::SwimLocation>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B3DB1A6C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::SwimLocation>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::SwimLocation>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::SensorID>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3DB1B24(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::SensorID>()
{
  return 7;
}

_DWORD **tlv::writeV<bsp::tlv::abm::SensorID>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::BBSensorID>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3DB1BDC(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::BBSensorID>()
{
  return 7;
}

_DWORD **tlv::writeV<bsp::tlv::abm::BBSensorID>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::DIAGPresetID>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DB1C94(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::DIAGPresetID>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::DIAGPresetID>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::DIAGActiveIface>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DB1D4C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::DIAGActiveIface>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::DIAGActiveIface>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::DIAGConfig>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DB1E04(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::DIAGConfig>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::DIAGConfig>(_BYTE **result, _DWORD *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::DIAGBuffering>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DB1EBC(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::DIAGBuffering>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::DIAGBuffering>(_BYTE **result, _DWORD *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::DIAGWMHigh>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B3DB1F74(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::DIAGWMHigh>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::DIAGWMHigh>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::DIAGWMLow>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)2);
  result = *(unsigned __int16 *)v3;
  *a1 = (tlv *)((char *)v3 + 2);
  return result;
}

uint64_t sub_1B3DB202C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::DIAGWMLow>()
{
  return 5;
}

_WORD **tlv::writeV<bsp::tlv::abm::DIAGWMLow>(_WORD **result, _WORD *a2)
{
  _WORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::ThermalSensorData>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)1);
  v5 = *(unsigned __int8 *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 1), v4, (const unsigned __int8 *)4);
  v6 = *(unsigned int *)((char *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 5);
  return (v6 << 32) | 0xAAAAAA00 | v5;
}

void sub_1B3DB2158(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DB213CLL);
}

uint64_t tlv::size<bsp::tlv::abm::ThermalSensorData>()
{
  return 8;
}

uint64_t *tlv::writeV<bsp::tlv::abm::ThermalSensorData>(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *(_BYTE *)v2 = *(_BYTE *)a2;
  *(_DWORD *)(v2 + 1) = *(_DWORD *)(a2 + 4);
  *result = v2 + 5;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::ThermalSensorDataFloatType>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)1);
  v5 = *(unsigned __int8 *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 1), v4, (const unsigned __int8 *)4);
  v6 = *(unsigned int *)((char *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 5);
  return (v6 << 32) | 0xAAAAAA00 | v5;
}

void sub_1B3DB2284(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DB2268);
}

uint64_t tlv::size<bsp::tlv::abm::ThermalSensorDataFloatType>()
{
  return 8;
}

float tlv::writeV<bsp::tlv::abm::ThermalSensorDataFloatType>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  float result;

  v2 = *a1;
  *(_BYTE *)v2 = *(_BYTE *)a2;
  result = *(float *)(a2 + 4);
  *(float *)(v2 + 1) = result;
  *a1 = v2 + 5;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::PowerBudget>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)1);
  v5 = *(unsigned __int8 *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 1), v4, (const unsigned __int8 *)4);
  v6 = *(unsigned int *)((char *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 5);
  return (v6 << 32) | 0xAAAAAA00 | v5;
}

void sub_1B3DB23B0(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DB2394);
}

uint64_t tlv::size<bsp::tlv::abm::PowerBudget>()
{
  return 8;
}

uint64_t *tlv::writeV<bsp::tlv::abm::PowerBudget>(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *(_BYTE *)v2 = *(_BYTE *)a2;
  *(_DWORD *)(v2 + 1) = *(_DWORD *)(a2 + 4);
  *result = v2 + 5;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::Mitigation>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  int v5;
  int v6;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)1);
  v5 = *(unsigned __int8 *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 1), v4, (const unsigned __int8 *)1);
  v6 = *((unsigned __int8 *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 2);
  return v5 | (v6 << 8);
}

uint64_t sub_1B3DB24C8(void *a1)
{
  _QWORD *v1;
  unsigned int v2;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return v2;
}

uint64_t tlv::size<bsp::tlv::abm::Mitigation>()
{
  return 5;
}

_BYTE **tlv::writeV<bsp::tlv::abm::Mitigation>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  v2[1] = a2[1];
  *result = v2 + 2;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::NumberOfSensors>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DB2594(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::NumberOfSensors>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::NumberOfSensors>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

_QWORD *tlv::parseV<bsp::tlv::abm::SensorIDs>@<X0>(char **a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  char *v4;
  _QWORD *result;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = &(*a1)[a2];
  result = std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, *a1, v4, a2);
  *a1 = v4;
  return result;
}

void sub_1B3DB2698(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DB2688);
}

void sub_1B3DB26A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<bsp::tlv::abm::SensorIDs>(_QWORD *a1)
{
  return a1[1] - *a1 + 3;
}

void *tlv::writeV<bsp::tlv::abm::SensorIDs>(void **a1, uint64_t a2)
{
  char *v4;
  void *result;

  v4 = (char *)*a1;
  result = memcpy(*a1, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  *a1 = &v4[*(_QWORD *)(a2 + 8) - *(_QWORD *)a2];
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::ReportFrequency>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

uint64_t sub_1B3DB27A4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::ReportFrequency>()
{
  return 7;
}

_DWORD **tlv::writeV<bsp::tlv::abm::ReportFrequency>(_DWORD **result, _DWORD *a2)
{
  _DWORD *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

char *bsp::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  unsigned int v8;
  char *v9;
  char *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;

  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  v8 = *(unsigned __int8 *)a1;
  v7 = (char *)a1 + 1;
  v6 = v8;
  v9 = *(char **)a3;
  v10 = *(char **)(a3 + 8);
  v11 = (uint64_t)&v10[-*(_QWORD *)a3] >> 3;
  v12 = v8 >= v11;
  v13 = v8 - v11;
  if (v8 <= v11)
  {
    if (!v12)
    {
      v10 = &v9[8 * v6];
      *(_QWORD *)(a3 + 8) = v10;
    }
  }
  else
  {
    std::vector<bsp::tlv::abm::ThermalSensorData>::__append((void **)a3, v13);
    v9 = *(char **)a3;
    v10 = *(char **)(a3 + 8);
  }
  while (v9 != v10)
  {
    tlv::throwIfNotEnoughBytes((tlv *)v7, a2, (const unsigned __int8 *)1);
    *v9 = *v7;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 1), a2, (const unsigned __int8 *)4);
    *((_DWORD *)v9 + 1) = *(_DWORD *)(v7 + 1);
    v7 += 5;
    v9 += 8;
  }
  return v7;
}

{
  uint64_t v6;
  char *v7;
  unsigned int v8;
  char *v9;
  char *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;

  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  v8 = *(unsigned __int8 *)a1;
  v7 = (char *)a1 + 1;
  v6 = v8;
  v9 = *(char **)a3;
  v10 = *(char **)(a3 + 8);
  v11 = (uint64_t)&v10[-*(_QWORD *)a3] >> 3;
  v12 = v8 >= v11;
  v13 = v8 - v11;
  if (v8 <= v11)
  {
    if (!v12)
    {
      v10 = &v9[8 * v6];
      *(_QWORD *)(a3 + 8) = v10;
    }
  }
  else
  {
    std::vector<bsp::tlv::abm::ThermalSensorData>::__append((void **)a3, v13);
    v9 = *(char **)a3;
    v10 = *(char **)(a3 + 8);
  }
  while (v9 != v10)
  {
    tlv::throwIfNotEnoughBytes((tlv *)v7, a2, (const unsigned __int8 *)1);
    *v9 = *v7;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 1), a2, (const unsigned __int8 *)4);
    *((_DWORD *)v9 + 1) = *(_DWORD *)(v7 + 1);
    v7 += 5;
    v9 += 8;
  }
  return v7;
}

{
  uint64_t v6;
  char *v7;
  unsigned int v8;
  char *v9;
  char *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;

  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  v8 = *(unsigned __int8 *)a1;
  v7 = (char *)a1 + 1;
  v6 = v8;
  v9 = *(char **)a3;
  v10 = *(char **)(a3 + 8);
  v11 = (uint64_t)&v10[-*(_QWORD *)a3] >> 3;
  v12 = v8 >= v11;
  v13 = v8 - v11;
  if (v8 <= v11)
  {
    if (!v12)
    {
      v10 = &v9[8 * v6];
      *(_QWORD *)(a3 + 8) = v10;
    }
  }
  else
  {
    std::vector<coex::tlv::abm::BandInfo>::__append((void **)a3, v13);
    v9 = *(char **)a3;
    v10 = *(char **)(a3 + 8);
  }
  while (v9 != v10)
  {
    tlv::throwIfNotEnoughBytes((tlv *)v7, a2, (const unsigned __int8 *)1);
    *v9 = *v7;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 1), a2, (const unsigned __int8 *)4);
    *((_DWORD *)v9 + 1) = *(_DWORD *)(v7 + 1);
    v7 += 5;
    v9 += 8;
  }
  return v7;
}

{
  uint64_t v6;
  char *v7;
  unsigned int v8;
  char *v9;
  char *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;

  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  v8 = *(unsigned __int8 *)a1;
  v7 = (char *)a1 + 1;
  v6 = v8;
  v9 = *(char **)a3;
  v10 = *(char **)(a3 + 8);
  v11 = (uint64_t)&v10[-*(_QWORD *)a3] >> 3;
  v12 = v8 >= v11;
  v13 = v8 - v11;
  if (v8 <= v11)
  {
    if (!v12)
    {
      v10 = &v9[8 * v6];
      *(_QWORD *)(a3 + 8) = v10;
    }
  }
  else
  {
    std::vector<coex::tlv::abm::BandInfo>::__append((void **)a3, v13);
    v9 = *(char **)a3;
    v10 = *(char **)(a3 + 8);
  }
  while (v9 != v10)
  {
    tlv::throwIfNotEnoughBytes((tlv *)v7, a2, (const unsigned __int8 *)1);
    *v9 = *v7;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 1), a2, (const unsigned __int8 *)4);
    *((_DWORD *)v9 + 1) = *(_DWORD *)(v7 + 1);
    v7 += 5;
    v9 += 8;
  }
  return v7;
}

{
  uint64_t v6;
  char *v7;
  unsigned int v8;
  _BYTE *v9;
  _BYTE *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;

  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  v8 = *(unsigned __int8 *)a1;
  v7 = (char *)a1 + 1;
  v6 = v8;
  v9 = *(_BYTE **)a3;
  v10 = *(_BYTE **)(a3 + 8);
  v11 = (uint64_t)&v10[-*(_QWORD *)a3] >> 1;
  v12 = v8 >= v11;
  v13 = v8 - v11;
  if (v8 <= v11)
  {
    if (!v12)
    {
      v10 = &v9[2 * v6];
      *(_QWORD *)(a3 + 8) = v10;
    }
  }
  else
  {
    std::vector<bsp::tlv::abm::Mitigation>::__append((void **)a3, v13);
    v9 = *(_BYTE **)a3;
    v10 = *(_BYTE **)(a3 + 8);
  }
  while (v9 != v10)
  {
    tlv::throwIfNotEnoughBytes((tlv *)v7, a2, (const unsigned __int8 *)1);
    *v9 = *v7;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 1), a2, (const unsigned __int8 *)1);
    v9[1] = v7[1];
    v7 += 2;
    v9 += 2;
  }
  return v7;
}

void tlv::parseV<bsp::tlv::abm::ThermalSensors>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  tlv *v5;
  const unsigned __int8 *v6;
  unint64_t v7;
  char *v8;
  unsigned int v9;
  _DWORD *v10;
  _DWORD *v11;
  char *v12;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  v9 = *(unsigned __int8 *)v5;
  v8 = (char *)v5 + 1;
  v7 = v9;
  if (v9)
  {
    std::vector<bsp::tlv::abm::ThermalSensorData>::__append((void **)a3, v7);
    v10 = *(_DWORD **)a3;
    v11 = *(_DWORD **)(a3 + 8);
    if (*(_DWORD **)a3 != v11)
    {
      do
      {
        v12 = v8;
        tlv::throwIfNotEnoughBytes((tlv *)v8, v6, (const unsigned __int8 *)1);
        *(_BYTE *)v10 = *v8;
        tlv::throwIfNotEnoughBytes((tlv *)(v8 + 1), v6, (const unsigned __int8 *)4);
        v10[1] = *(_DWORD *)(v8 + 1);
        v10 += 2;
        v8 += 5;
      }
      while (v10 != v11);
      v8 = v12 + 5;
    }
  }
  *a1 = (tlv *)v8;
}

void sub_1B3DB29C8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DB29B0);
}

void sub_1B3DB29DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<bsp::tlv::abm::ThermalSensors>(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[1];
  if (*a1 == v1)
    return 4;
  else
    return 5 * ((unint64_t)(v1 - *a1 - 8) >> 3) + 9;
}

_BYTE **tlv::writeV<bsp::tlv::abm::ThermalSensors>(_BYTE **result, _DWORD *a2)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *result;
  *v2 = (a2[2] - *a2) >> 3;
  v3 = v2 + 1;
  v4 = *(_QWORD *)a2;
  v5 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 != v5)
  {
    do
    {
      *v3 = *(_BYTE *)v4;
      *(_DWORD *)(v3 + 1) = *(_DWORD *)(v4 + 4);
      v3 += 5;
      v4 += 8;
    }
    while (v4 != v5);
  }
  *result = v3;
  return result;
}

void tlv::parseV<bsp::tlv::abm::ThermalSensorsFloatType>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  tlv *v5;
  const unsigned __int8 *v6;
  unint64_t v7;
  char *v8;
  unsigned int v9;
  _DWORD *v10;
  _DWORD *v11;
  char *v12;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  v9 = *(unsigned __int8 *)v5;
  v8 = (char *)v5 + 1;
  v7 = v9;
  if (v9)
  {
    std::vector<bsp::tlv::abm::ThermalSensorData>::__append((void **)a3, v7);
    v10 = *(_DWORD **)a3;
    v11 = *(_DWORD **)(a3 + 8);
    if (*(_DWORD **)a3 != v11)
    {
      do
      {
        v12 = v8;
        tlv::throwIfNotEnoughBytes((tlv *)v8, v6, (const unsigned __int8 *)1);
        *(_BYTE *)v10 = *v8;
        tlv::throwIfNotEnoughBytes((tlv *)(v8 + 1), v6, (const unsigned __int8 *)4);
        v10[1] = *(_DWORD *)(v8 + 1);
        v10 += 2;
        v8 += 5;
      }
      while (v10 != v11);
      v8 = v12 + 5;
    }
  }
  *a1 = (tlv *)v8;
}

void sub_1B3DB2C5C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DB2C44);
}

void sub_1B3DB2C70(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<bsp::tlv::abm::ThermalSensorsFloatType>(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[1];
  if (*a1 == v1)
    return 4;
  else
    return 5 * ((unint64_t)(v1 - *a1 - 8) >> 3) + 9;
}

_BYTE **tlv::writeV<bsp::tlv::abm::ThermalSensorsFloatType>(_BYTE **result, _DWORD *a2)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *result;
  *v2 = (a2[2] - *a2) >> 3;
  v3 = v2 + 1;
  v4 = *(_QWORD *)a2;
  v5 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 != v5)
  {
    do
    {
      *v3 = *(_BYTE *)v4;
      *(_DWORD *)(v3 + 1) = *(_DWORD *)(v4 + 4);
      v3 += 5;
      v4 += 8;
    }
    while (v4 != v5);
  }
  *result = v3;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::NumberOfBudgets>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DB2D84(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::NumberOfBudgets>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::NumberOfBudgets>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

void tlv::parseV<bsp::tlv::abm::PowerBudgets>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  tlv *v5;
  const unsigned __int8 *v6;
  unint64_t v7;
  char *v8;
  unsigned int v9;
  _DWORD *v10;
  _DWORD *v11;
  char *v12;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  v9 = *(unsigned __int8 *)v5;
  v8 = (char *)v5 + 1;
  v7 = v9;
  if (v9)
  {
    std::vector<coex::tlv::abm::BandInfo>::__append((void **)a3, v7);
    v10 = *(_DWORD **)a3;
    v11 = *(_DWORD **)(a3 + 8);
    if (*(_DWORD **)a3 != v11)
    {
      do
      {
        v12 = v8;
        tlv::throwIfNotEnoughBytes((tlv *)v8, v6, (const unsigned __int8 *)1);
        *(_BYTE *)v10 = *v8;
        tlv::throwIfNotEnoughBytes((tlv *)(v8 + 1), v6, (const unsigned __int8 *)4);
        v10[1] = *(_DWORD *)(v8 + 1);
        v10 += 2;
        v8 += 5;
      }
      while (v10 != v11);
      v8 = v12 + 5;
    }
  }
  *a1 = (tlv *)v8;
}

void sub_1B3DB2FA8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DB2F90);
}

void sub_1B3DB2FBC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<bsp::tlv::abm::PowerBudgets>(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[1];
  if (*a1 == v1)
    return 4;
  else
    return 5 * ((unint64_t)(v1 - *a1 - 8) >> 3) + 9;
}

_BYTE **tlv::writeV<bsp::tlv::abm::PowerBudgets>(_BYTE **result, _DWORD *a2)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *result;
  *v2 = (a2[2] - *a2) >> 3;
  v3 = v2 + 1;
  v4 = *(_QWORD *)a2;
  v5 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 != v5)
  {
    do
    {
      *v3 = *(_BYTE *)v4;
      *(_DWORD *)(v3 + 1) = *(_DWORD *)(v4 + 4);
      v3 += 5;
      v4 += 8;
    }
    while (v4 != v5);
  }
  *result = v3;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::NumberOfCurrentBudgets>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DB30D0(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::NumberOfCurrentBudgets>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::NumberOfCurrentBudgets>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

void tlv::parseV<bsp::tlv::abm::CurrentPowerBudgets>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  tlv *v5;
  const unsigned __int8 *v6;
  unint64_t v7;
  char *v8;
  unsigned int v9;
  _DWORD *v10;
  _DWORD *v11;
  char *v12;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  v9 = *(unsigned __int8 *)v5;
  v8 = (char *)v5 + 1;
  v7 = v9;
  if (v9)
  {
    std::vector<coex::tlv::abm::BandInfo>::__append((void **)a3, v7);
    v10 = *(_DWORD **)a3;
    v11 = *(_DWORD **)(a3 + 8);
    if (*(_DWORD **)a3 != v11)
    {
      do
      {
        v12 = v8;
        tlv::throwIfNotEnoughBytes((tlv *)v8, v6, (const unsigned __int8 *)1);
        *(_BYTE *)v10 = *v8;
        tlv::throwIfNotEnoughBytes((tlv *)(v8 + 1), v6, (const unsigned __int8 *)4);
        v10[1] = *(_DWORD *)(v8 + 1);
        v10 += 2;
        v8 += 5;
      }
      while (v10 != v11);
      v8 = v12 + 5;
    }
  }
  *a1 = (tlv *)v8;
}

void sub_1B3DB32F4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DB32DCLL);
}

void sub_1B3DB3308(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::size<bsp::tlv::abm::CurrentPowerBudgets>(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[1];
  if (*a1 == v1)
    return 4;
  else
    return 5 * ((unint64_t)(v1 - *a1 - 8) >> 3) + 9;
}

_BYTE **tlv::writeV<bsp::tlv::abm::CurrentPowerBudgets>(_BYTE **result, _DWORD *a2)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *result;
  *v2 = (a2[2] - *a2) >> 3;
  v3 = v2 + 1;
  v4 = *(_QWORD *)a2;
  v5 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 != v5)
  {
    do
    {
      *v3 = *(_BYTE *)v4;
      *(_DWORD *)(v3 + 1) = *(_DWORD *)(v4 + 4);
      v3 += 5;
      v4 += 8;
    }
    while (v4 != v5);
  }
  *result = v3;
  return result;
}

uint64_t tlv::parseV<bsp::tlv::abm::NumberOfMitigation>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

uint64_t sub_1B3DB341C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  return 0;
}

uint64_t tlv::size<bsp::tlv::abm::NumberOfMitigation>()
{
  return 4;
}

_BYTE **tlv::writeV<bsp::tlv::abm::NumberOfMitigation>(_BYTE **result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *result;
  *v2 = *a2;
  *result = v2 + 1;
  return result;
}

unint64_t bsp::tlv::abm::writeField(_BYTE *a1, _DWORD *a2)
{
  unint64_t result;
  _BYTE *v4;
  _BYTE *v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  __int128 *v11;
  _OWORD *v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE *v18;

  *a1 = (a2[2] - *a2) >> 1;
  result = (unint64_t)(a1 + 1);
  v5 = *(_BYTE **)a2;
  v4 = (_BYTE *)*((_QWORD *)a2 + 1);
  if (*(_BYTE **)a2 != v4)
  {
    v6 = v4 - v5 - 2;
    if (v6 < 0x3E)
      goto LABEL_11;
    if (result < (unint64_t)&v5[(v6 & 0xFFFFFFFFFFFFFFFELL) + 2] && v5 < &a1[(v6 & 0xFFFFFFFFFFFFFFFELL) + 3])
      goto LABEL_11;
    v8 = (v6 >> 1) + 1;
    v9 = 2 * (v8 & 0xFFFFFFFFFFFFFFE0);
    result += v9;
    v10 = &v5[v9];
    v11 = (__int128 *)(v5 + 32);
    v12 = a1 + 33;
    v13 = v8 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v15 = *(v11 - 2);
      v14 = *(v11 - 1);
      v17 = *v11;
      v16 = v11[1];
      v11 += 4;
      *(v12 - 2) = v15;
      *(v12 - 1) = v14;
      *v12 = v17;
      v12[1] = v16;
      v12 += 4;
      v13 -= 32;
    }
    while (v13);
    v5 = v10;
    if (v8 != (v8 & 0xFFFFFFFFFFFFFFE0))
    {
LABEL_11:
      v18 = (_BYTE *)result;
      do
      {
        *v18 = *v5;
        result = (unint64_t)(v18 + 2);
        v18[1] = v5[1];
        v5 += 2;
        v18 += 2;
      }
      while (v5 != v4);
    }
  }
  return result;
}

void tlv::parseV<bsp::tlv::abm::MitigationData>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  tlv *v5;
  const unsigned __int8 *v6;
  unint64_t v7;
  char *v8;
  unsigned int v9;
  _BYTE *v10;
  _BYTE *v11;
  char *v12;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  v9 = *(unsigned __int8 *)v5;
  v8 = (char *)v5 + 1;
  v7 = v9;
  if (v9)
  {
    std::vector<bsp::tlv::abm::Mitigation>::__append((void **)a3, v7);
    v10 = *(_BYTE **)a3;
    v11 = *(_BYTE **)(a3 + 8);
    if (*(_BYTE **)a3 != v11)
    {
      do
      {
        v12 = v8;
        tlv::throwIfNotEnoughBytes((tlv *)v8, v6, (const unsigned __int8 *)1);
        *v10 = *v8;
        tlv::throwIfNotEnoughBytes((tlv *)(v8 + 1), v6, (const unsigned __int8 *)1);
        v10[1] = v8[1];
        v10 += 2;
        v8 += 2;
      }
      while (v10 != v11);
      v8 = v12 + 2;
    }
  }
  *a1 = (tlv *)v8;
}

void sub_1B3DB36AC(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3DB3694);
}

void sub_1B3DB36C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::size<bsp::tlv::abm::MitigationData>(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[1];
  if (v1 == *a1)
    return 4;
  else
    return ((v1 - *a1) | 1) + 3;
}

unint64_t *tlv::writeV<bsp::tlv::abm::MitigationData>(unint64_t *result, _DWORD *a2)
{
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE *v19;

  v2 = (_BYTE *)*result;
  v3 = (_BYTE *)*result;
  *v3 = (a2[2] - *a2) >> 1;
  v4 = (unint64_t)(v3 + 1);
  v6 = *(_BYTE **)a2;
  v5 = (_BYTE *)*((_QWORD *)a2 + 1);
  if (*(_BYTE **)a2 != v5)
  {
    v7 = v5 - v6 - 2;
    if (v7 < 0x3E)
      goto LABEL_11;
    if (v4 < (unint64_t)&v6[(v7 & 0xFFFFFFFFFFFFFFFELL) + 2] && v6 < &v2[(v7 & 0xFFFFFFFFFFFFFFFELL) + 3])
      goto LABEL_11;
    v9 = (v7 >> 1) + 1;
    v10 = 2 * (v9 & 0xFFFFFFFFFFFFFFE0);
    v4 += v10;
    v11 = &v6[v10];
    v12 = (__int128 *)(v6 + 32);
    v13 = v2 + 33;
    v14 = v9 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v16 = *(v12 - 2);
      v15 = *(v12 - 1);
      v18 = *v12;
      v17 = v12[1];
      v12 += 4;
      *(v13 - 2) = v16;
      *(v13 - 1) = v15;
      *v13 = v18;
      v13[1] = v17;
      v13 += 4;
      v14 -= 32;
    }
    while (v14);
    v6 = v11;
    if (v9 != (v9 & 0xFFFFFFFFFFFFFFE0))
    {
LABEL_11:
      v19 = (_BYTE *)v4;
      do
      {
        *v19 = *v6;
        v4 = (unint64_t)(v19 + 2);
        v19[1] = v6[1];
        v6 += 2;
        v19 += 2;
      }
      while (v6 != v5);
    }
  }
  *result = v4;
  return result;
}

void std::vector<bsp::tlv::abm::ThermalSensorData>::__append(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = (char *)*a1;
    v8 = v5 - (_BYTE *)*a1;
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      std::vector<bsp::tlv::abm::ThermalSensorData>::__throw_length_error[abi:ne180100]();
    v11 = v4 - v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x58)
        goto LABEL_30;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_30;
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[8 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_30:
        do
        {
          v25 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
      v6 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v16;
    if (v6)
      operator delete(v6);
  }
}

void std::vector<bsp::tlv::abm::ThermalSensorData>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void std::vector<bsp::tlv::abm::Mitigation>::__append(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _OWORD *v21;
  char *v22;
  unint64_t v23;
  __int128 v24;
  __int16 v25;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - v5) >> 1)
  {
    if (a2)
    {
      bzero(v5, 2 * a2);
      v6 = &v5[2 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = (char *)*a1;
    v8 = v5 - (_BYTE *)*a1;
    v9 = v8 >> 1;
    v10 = (v8 >> 1) + a2;
    if (v10 < 0)
      std::vector<bsp::tlv::abm::ThermalSensorData>::__throw_length_error[abi:ne180100]();
    v11 = v4 - v7;
    if (v11 > v10)
      v10 = v11;
    if (v11 >= 0x7FFFFFFFFFFFFFFELL)
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 < 0)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = operator new(2 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[2 * v9];
    v15 = 2 * a2;
    v16 = &v13[2 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 2;
      if (v18 < 0x1E)
        goto LABEL_30;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_30;
      v19 = (v18 >> 1) + 1;
      v20 = 2 * (v19 & 0xFFFFFFFFFFFFFFF0);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[2 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 16;
      }
      while (v23);
      if (v19 != (v19 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_30:
        do
        {
          v25 = *((_WORD *)v6 - 1);
          v6 -= 2;
          *((_WORD *)v14 - 1) = v25;
          v14 -= 2;
        }
        while (v6 != v7);
      }
      v6 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v16;
    if (v6)
      operator delete(v6);
  }
}

uint64_t BBUpdaterRegisterGlobalLogSink()
{
  return MEMORY[0x1E0DDF180]();
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return MEMORY[0x1E0C80370](md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return MEMORY[0x1E0C80378](c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1E0C80380](c, data, *(_QWORD *)&len);
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
  MEMORY[0x1E0C97CF8](theArray, value);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D38](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1E0C97D60](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1E0C97D90]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1E0C97D98](theArray, idx);
}

void CFDataAppendBytes(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length)
{
  MEMORY[0x1E0C98390](theData, bytes, length);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1E0C983A0](allocator, bytes, length);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x1E0C983B8](allocator, capacity);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1E0C983E0](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1E0C983F8](theData);
}

UInt8 *__cdecl CFDataGetMutableBytePtr(CFMutableDataRef theData)
{
  return (UInt8 *)MEMORY[0x1E0C98408](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1E0C98418]();
}

void CFDataSetLength(CFMutableDataRef theData, CFIndex length)
{
  MEMORY[0x1E0C98430](theData, length);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98500](theDict, key, value);
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1E0C98518](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98530](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98550](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1E0C98570](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
  MEMORY[0x1E0C985A0](theDict, keys, values);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1E0C985A8]();
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98610](theDict, key, value);
}

CFIndex CFErrorGetCode(CFErrorRef err)
{
  return MEMORY[0x1E0C98660](err);
}

CFErrorDomain CFErrorGetDomain(CFErrorRef err)
{
  return (CFErrorDomain)MEMORY[0x1E0C98670](err);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1E0C98928](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1E0C989B8]();
}

void CFPreferencesSetValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  MEMORY[0x1E0C98A90](key, value, applicationID, userName, hostName);
}

Boolean CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return MEMORY[0x1E0C98A98](applicationID, userName, hostName);
}

CFPropertyListRef CFPropertyListCreateWithStream(CFAllocatorRef allocator, CFReadStreamRef stream, CFIndex streamLength, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98AE0](allocator, stream, streamLength, options, format, error);
}

void CFReadStreamClose(CFReadStreamRef stream)
{
  MEMORY[0x1E0C98B10](stream);
}

CFReadStreamRef CFReadStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL)
{
  return (CFReadStreamRef)MEMORY[0x1E0C98B48](alloc, fileURL);
}

Boolean CFReadStreamOpen(CFReadStreamRef stream)
{
  return MEMORY[0x1E0C98B80](stream);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1E0C98F10](theString1, theString2, compareOptions);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C98FD0](alloc, cStr, *(_QWORD *)&encoding);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1E0C99420](allocator, filePath, pathStyle, isDirectory);
}

uint64_t ETLDebugRegisterDelegate()
{
  return MEMORY[0x1E0DE0018]();
}

uint64_t ETLEFCopyCrashLocationDetailsM20()
{
  return MEMORY[0x1E0DE0078]();
}

uint64_t TelephonyUtilDebugRegisterDelegate()
{
  return MEMORY[0x1E0DE3688]();
}

uint64_t TelephonyUtilDebugSetFlags()
{
  return MEMORY[0x1E0DE3690]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1E0C80928](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x1E0C80958](aBlock);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

uint64_t CreateError()
{
  return MEMORY[0x1E0DDF1A0]();
}

uint64_t capabilities::abs::TUDebugFlags(capabilities::abs *this)
{
  return MEMORY[0x1E0DE2FF0](this);
}

uint64_t capabilities::abs::logScratchPath(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3008](this);
}

uint64_t capabilities::abs::logSnapshotPath(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3010](this);
}

uint64_t capabilities::abs::supportsProtocolNVConfig(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3148](this);
}

uint64_t capabilities::ipc::supportsCoalescing(capabilities::ipc *this)
{
  return MEMORY[0x1E0DE3260](this);
}

uint64_t capabilities::ipc::supportsUnifiedQMuxV2(capabilities::ipc *this)
{
  return MEMORY[0x1E0DE3268](this);
}

uint64_t capabilities::diag::supportsBuffering(capabilities::diag *this)
{
  return MEMORY[0x1E0DE32B0](this);
}

uint64_t capabilities::diag::supportsMultipleMasks(capabilities::diag *this)
{
  return MEMORY[0x1E0DE32D0](this);
}

uint64_t capabilities::diag::asString()
{
  return MEMORY[0x1E0DE32E0]();
}

{
  return MEMORY[0x1E0DE32E8]();
}

uint64_t capabilities::radio::ice(capabilities::radio *this)
{
  return MEMORY[0x1E0DE3398](this);
}

uint64_t capabilities::radio::vendor(capabilities::radio *this)
{
  return MEMORY[0x1E0DE33A0](this);
}

uint64_t capabilities::radio::maverick(capabilities::radio *this)
{
  return MEMORY[0x1E0DE33B0](this);
}

uint64_t capabilities::radio::mav20Plus(capabilities::radio *this)
{
  return MEMORY[0x1E0DE33C0](this);
}

uint64_t capabilities::trace::supportsBasebandIPCTrace(capabilities::trace *this)
{
  return MEMORY[0x1E0DE3410](this);
}

uint64_t capabilities::trace::allowed(capabilities::trace *this)
{
  return MEMORY[0x1E0DE3450](this);
}

uint64_t QMIServiceMsg::create()
{
  return MEMORY[0x1E0DDCED0]();
}

void CommandDriverFactory::CommandDriverFactory(CommandDriverFactory *this)
{
  MEMORY[0x1E0DDF1B8](this);
}

uint64_t awd::AwdCommandDriver::AwdCommandDriver()
{
  return MEMORY[0x1E0DDF1E8]();
}

void awd::AwdCommandDriver::~AwdCommandDriver(awd::AwdCommandDriver *this)
{
  MEMORY[0x1E0DDF1F0](this);
}

uint64_t awd::asString()
{
  return MEMORY[0x1E0DDF200]();
}

uint64_t ctu::LogMessage::LogMessage()
{
  return MEMORY[0x1E0DE3718]();
}

uint64_t ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase()
{
  return MEMORY[0x1E0DE3720]();
}

void ctu::OsLogLogger::~OsLogLogger(ctu::OsLogLogger *this)
{
  MEMORY[0x1E0DE3748](this);
}

uint64_t ctu::OsLogContext::OsLogContext()
{
  return MEMORY[0x1E0DE3750]();
}

uint64_t ctu::OsLogContext::OsLogContext(ctu::OsLogContext *this, const char *a2, const char *a3)
{
  return MEMORY[0x1E0DE3758](this, a2, a3);
}

uint64_t ctu::OsLogContext::OsLogContext(ctu::OsLogContext *this, const ctu::OsLogContext *a2)
{
  return MEMORY[0x1E0DE3760](this, a2);
}

void ctu::OsLogContext::~OsLogContext(ctu::OsLogContext *this)
{
  MEMORY[0x1E0DE3768](this);
}

uint64_t ctu::OsLogContext::operator=()
{
  return MEMORY[0x1E0DE3770]();
}

uint64_t ctu::StaticLogger::StaticLogger()
{
  return MEMORY[0x1E0DE3778]();
}

uint64_t ctu::StaticLogger::StaticLogger(ctu::StaticLogger *this)
{
  return MEMORY[0x1E0DE3780](this);
}

void ctu::StaticLogger::~StaticLogger(ctu::StaticLogger *this)
{
  MEMORY[0x1E0DE3788](this);
}

uint64_t ctu::TrackedLogger::registerLoggerToServer()
{
  return MEMORY[0x1E0DE3790]();
}

uint64_t ctu::LogMessageBuffer::takeString(ctu::LogMessageBuffer *this)
{
  return MEMORY[0x1E0DE37D8](this);
}

uint64_t ctu::LogMessageBuffer::takeMetadata(ctu::LogMessageBuffer *this)
{
  return MEMORY[0x1E0DE37E0](this);
}

uint64_t ctu::LogMessageBuffer::vprintf(ctu::LogMessageBuffer *this, const char *a2, char *a3)
{
  return MEMORY[0x1E0DE37F0](this, a2, a3);
}

uint64_t ctu::LogMessageBuffer::LogMessageBuffer(ctu::LogMessageBuffer *this)
{
  return MEMORY[0x1E0DE37F8](this);
}

void ctu::LogMessageBuffer::~LogMessageBuffer(ctu::LogMessageBuffer *this)
{
  MEMORY[0x1E0DE3800](this);
}

uint64_t ctu::LoggerCommonBase::setLogLevel()
{
  return MEMORY[0x1E0DE3810]();
}

uint64_t ctu::LoggerCommonBase::setInheritedLogLevel()
{
  return MEMORY[0x1E0DE3818]();
}

uint64_t ctu::LoggerCommonBase::LoggerCommonBase()
{
  return MEMORY[0x1E0DE3820]();
}

uint64_t ctu::LoggerCommonBase::operator=()
{
  return MEMORY[0x1E0DE3830]();
}

uint64_t ctu::cf::MakeCFString::MakeCFString(ctu::cf::MakeCFString *this, const char *a2)
{
  return MEMORY[0x1E0DE3858](this, a2);
}

void ctu::cf::MakeCFString::~MakeCFString(ctu::cf::MakeCFString *this)
{
  MEMORY[0x1E0DE3860](this);
}

uint64_t ctu::cf::convert_copy(ctu::cf *this, const __CFString **a2, const char *a3, uint64_t a4, const __CFAllocator *a5)
{
  return MEMORY[0x1E0DE3868](this, a2, a3, a4, a5);
}

uint64_t ctu::cf::convert_copy()
{
  return MEMORY[0x1E0DE3870]();
}

{
  return MEMORY[0x1E0DE3878]();
}

uint64_t ctu::cf::dict_adapter::dict_adapter(ctu::cf::dict_adapter *this, const __CFDictionary *a2)
{
  return MEMORY[0x1E0DE3880](this, a2);
}

uint64_t ctu::cf::dict_adapter::dict_adapter(ctu::cf::dict_adapter *this, const ctu::cf::dict_adapter *a2)
{
  return MEMORY[0x1E0DE3888](this, a2);
}

void ctu::cf::dict_adapter::~dict_adapter(ctu::cf::dict_adapter *this)
{
  MEMORY[0x1E0DE3890](this);
}

uint64_t ctu::cf::plist_adapter::plist_adapter(ctu::cf::plist_adapter *this, const __CFString *a2, const __CFString *a3)
{
  return MEMORY[0x1E0DE3898](this, a2, a3);
}

void ctu::cf::plist_adapter::~plist_adapter(ctu::cf::plist_adapter *this)
{
  MEMORY[0x1E0DE38A0](this);
}

uint64_t ctu::cf::assign()
{
  return MEMORY[0x1E0DE38B8]();
}

{
  return MEMORY[0x1E0DE38C8]();
}

uint64_t ctu::cf::assign(ctu::cf *this, signed __int8 *a2, const __CFNumber *a3)
{
  return MEMORY[0x1E0DE38D0](this, a2, a3);
}

uint64_t ctu::cf::assign(ctu::cf *this, double *a2, const __CFNumber *a3)
{
  return MEMORY[0x1E0DE38E0](this, a2, a3);
}

uint64_t ctu::cf::assign(ctu::cf *this, unsigned __int8 *a2, const __CFNumber *a3)
{
  return MEMORY[0x1E0DE38E8](this, a2, a3);
}

uint64_t ctu::cf::assign(ctu::cf *this, int *a2, const __CFNumber *a3)
{
  return MEMORY[0x1E0DE38F0](this, a2, a3);
}

uint64_t ctu::cf::assign(ctu::cf *this, unsigned int *a2, const __CFNumber *a3)
{
  return MEMORY[0x1E0DE38F8](this, a2, a3);
}

uint64_t ctu::cf::assign(ctu::cf *this, __int16 *a2, const __CFNumber *a3)
{
  return MEMORY[0x1E0DE3908](this, a2, a3);
}

uint64_t ctu::cf::assign(ctu::cf *this, unsigned __int16 *a2, const __CFNumber *a3)
{
  return MEMORY[0x1E0DE3910](this, a2, a3);
}

uint64_t ctu::fs::remove_dir()
{
  return MEMORY[0x1E0DE3920]();
}

uint64_t ctu::fs::is_directory()
{
  return MEMORY[0x1E0DE3938]();
}

uint64_t ctu::fs::get_file_size()
{
  return MEMORY[0x1E0DE3940]();
}

uint64_t ctu::fs::get_filtered_files()
{
  return MEMORY[0x1E0DE3950]();
}

uint64_t ctu::fs::get_unique_filename()
{
  return MEMORY[0x1E0DE3958]();
}

uint64_t ctu::fs::rename()
{
  return MEMORY[0x1E0DE3970]();
}

uint64_t ctu::hex(ctu *this)
{
  return MEMORY[0x1E0DE3998](this);
}

uint64_t ctu::Clock::now_in_nanoseconds(ctu::Clock *this)
{
  return MEMORY[0x1E0DE39A8](this);
}

uint64_t ctu::assign()
{
  return MEMORY[0x1E0DE39B8]();
}

uint64_t ctu::tokenize()
{
  return MEMORY[0x1E0DE39C8]();
}

uint64_t ctu::LogServer::setEnabled(ctu::LogServer *this)
{
  return MEMORY[0x1E0DE39D0](this);
}

uint64_t ctu::LogServer::updateConfig()
{
  return MEMORY[0x1E0DE39D8]();
}

uint64_t ctu::LogServer::log()
{
  return MEMORY[0x1E0DE39E0]();
}

uint64_t ctu::LogServer::start(ctu::LogServer *this)
{
  return MEMORY[0x1E0DE39E8](this);
}

uint64_t ctu::LogServer::create()
{
  return MEMORY[0x1E0DE39F0]();
}

uint64_t ctu::operator<<()
{
  return MEMORY[0x1E0DE3A50]();
}

{
  return MEMORY[0x1E0DE3A58]();
}

{
  return MEMORY[0x1E0DE3A60]();
}

{
  return MEMORY[0x1E0DE3A68]();
}

uint64_t qmi::MessageBase::validateMsgId(qmi::MessageBase *this)
{
  return MEMORY[0x1E0DE2D20](this);
}

uint64_t qmi::MessageBase::MessageBase(qmi::MessageBase *this, const void *a2)
{
  return MEMORY[0x1E0DE2D40](this, a2);
}

uint64_t qmi::MessageBase::MessageBase()
{
  return MEMORY[0x1E0DE2D48]();
}

void qmi::MessageBase::~MessageBase(qmi::MessageBase *this)
{
  MEMORY[0x1E0DE2D50](this);
}

uint64_t qmi::ClientRouter::addClient()
{
  return MEMORY[0x1E0DDCF08]();
}

uint64_t qmi::ClientRouter::ClientRouter(qmi::ClientRouter *this, os_log_s *a2)
{
  return MEMORY[0x1E0DDCF10](this, a2);
}

uint64_t qmi::ResponseBase::ResponseBase(qmi::ResponseBase *this, const void *a2)
{
  return MEMORY[0x1E0DE2D60](this, a2);
}

{
  return MEMORY[0x1E0DE2D68](this, a2);
}

uint64_t qmi::MutableMessageBase::MutableMessageBase()
{
  return MEMORY[0x1E0DE2D90]();
}

{
  return MEMORY[0x1E0DE2D98]();
}

uint64_t qmi::MutableMessageBase::MutableMessageBase(qmi::MutableMessageBase *this)
{
  return MEMORY[0x1E0DE2DA0](this);
}

void qmi::MutableMessageBase::~MutableMessageBase(qmi::MutableMessageBase *this)
{
  MEMORY[0x1E0DE2DA8](this);
}

uint64_t qmi::parse()
{
  return MEMORY[0x1E0DE2DC0]();
}

uint64_t qmi::Client::createWithQueue()
{
  return MEMORY[0x1E0DDCF38]();
}

uint64_t qmi::Client::setClientHandle()
{
  return MEMORY[0x1E0DDCF40]();
}

uint64_t qmi::Client::createWithQueueLocal()
{
  return MEMORY[0x1E0DDCF48]();
}

uint64_t qmi::Client::set(qmi::Client *this, const char *a2)
{
  return MEMORY[0x1E0DDCF50](this, a2);
}

uint64_t qmi::Client::Client()
{
  return MEMORY[0x1E0DDCF60]();
}

void qmi::Client::~Client(qmi::Client *this)
{
  MEMORY[0x1E0DDCF68](this);
}

uint64_t qmi::asString()
{
  return MEMORY[0x1E0DE2DD0]();
}

uint64_t tlv::throwIfNotAligned(tlv *this, const unsigned __int8 *a2, const unsigned __int8 *a3)
{
  return MEMORY[0x1E0DE2DD8](this, a2, a3);
}

uint64_t tlv::throwIfNotEnoughBytes(tlv *this, const unsigned __int8 *a2, const unsigned __int8 *a3)
{
  return MEMORY[0x1E0DE2DE0](this, a2, a3);
}

uint64_t xpc::dyn_cast_or_default()
{
  return MEMORY[0x1E0DE3A78]();
}

{
  return MEMORY[0x1E0DE3A90]();
}

{
  return MEMORY[0x1E0DE3AA0]();
}

{
  return MEMORY[0x1E0DE3AA8]();
}

{
  return MEMORY[0x1E0DE3AB8]();
}

uint64_t coex::CommandDriver::CommandDriver()
{
  return MEMORY[0x1E0DDF708]();
}

uint64_t cpms::CommandDriver::CommandDriver()
{
  return MEMORY[0x1E0DDF710]();
}

uint64_t data::CommandDriver::CommandDriver()
{
  return MEMORY[0x1E0DDF718]();
}

uint64_t diag::CommandDriver::CommandDriver()
{
  return MEMORY[0x1E0DDF720]();
}

uint64_t logs::CommandDriver::sendLogData_sync()
{
  return MEMORY[0x1E0DDF728]();
}

uint64_t logs::CommandDriver::CommandDriver()
{
  return MEMORY[0x1E0DDF730]();
}

uint64_t radio::CommandDriver::handleClientStateChanged_sync(radio::CommandDriver *this)
{
  return MEMORY[0x1E0DDF840](this);
}

uint64_t radio::CommandDriver::handleOperatingModeChanged_sync()
{
  return MEMORY[0x1E0DDF858]();
}

uint64_t radio::CommandDriver::CommandDriver()
{
  return MEMORY[0x1E0DDF888]();
}

uint64_t radio::RFSCommandDriver::RFSCommandDriver()
{
  return MEMORY[0x1E0DDF920]();
}

void radio::RFSCommandDriver::~RFSCommandDriver(radio::RFSCommandDriver *this)
{
  MEMORY[0x1E0DDF928](this);
}

uint64_t radio::BasebandProperties::toDict(radio::BasebandProperties *this)
{
  return MEMORY[0x1E0DDF950](this);
}

uint64_t radio::DebugCommandDriver::DebugCommandDriver()
{
  return MEMORY[0x1E0DDF958]();
}

uint64_t radio::HealthCommandDriver::LinkStats::LinkStats(radio::HealthCommandDriver::LinkStats *this)
{
  return MEMORY[0x1E0DDF970](this);
}

uint64_t radio::HealthCommandDriver::HealthCommandDriver()
{
  return MEMORY[0x1E0DDF978]();
}

uint64_t radio::OpMode::setMode(radio::OpMode *this)
{
  return MEMORY[0x1E0DDFA48](this);
}

uint64_t radio::OpMode::setConfig(radio::OpMode *this)
{
  return MEMORY[0x1E0DDFA50](this);
}

uint64_t radio::asString()
{
  return MEMORY[0x1E0DDFA58]();
}

uint64_t antenna::CommandDriver::convertModeToState()
{
  return MEMORY[0x1E0DDFA80]();
}

uint64_t antenna::CommandDriver::CommandDriver()
{
  return MEMORY[0x1E0DDFA88]();
}

uint64_t desense::CommandDriver::CommandDriver()
{
  return MEMORY[0x1E0DDFC20]();
}

uint64_t desense::asString()
{
  return MEMORY[0x1E0DDFC58]();
}

uint64_t Registry::getServerConnection(Registry *this)
{
  return MEMORY[0x1E0DDFD58](this);
}

uint64_t QMIServiceMsg::getNewError(QMIServiceMsg *this)
{
  return MEMORY[0x1E0DDCFC0](this);
}

uint64_t QMIServiceMsg::serialize(QMIServiceMsg *this)
{
  return MEMORY[0x1E0DDCFC8](this);
}

uint64_t awd::AppContext::getProperties(awd::AppContext *this)
{
  return MEMORY[0x1E0DDFC60](this);
}

uint64_t awd::AppContext::getAppID(awd::AppContext *this)
{
  return MEMORY[0x1E0DDFC68](this);
}

uint64_t awd::AppContext::operator()()
{
  return MEMORY[0x1E0DDFC70]();
}

{
  return MEMORY[0x1E0DDFC78]();
}

{
  return MEMORY[0x1E0DDFC80]();
}

uint64_t awd::AwdCommandDriver::broadcastState_sync()
{
  return MEMORY[0x1E0DDFC88]();
}

uint64_t awd::AwdCommandDriver::getName(awd::AwdCommandDriver *this)
{
  return MEMORY[0x1E0DDFC90](this);
}

uint64_t ctu::LoggerCommonBase::getLogDomain(ctu::LoggerCommonBase *this)
{
  return MEMORY[0x1E0DE3AD8](this);
}

uint64_t ctu::LoggerCommonBase::getLocalLogLevel(ctu::LoggerCommonBase *this)
{
  return MEMORY[0x1E0DE3AE0](this);
}

uint64_t ctu::cf::map_adapter::copyCFDataRef(ctu::cf::map_adapter *this, const __CFString *a2)
{
  return MEMORY[0x1E0DE3AE8](this, a2);
}

uint64_t ctu::cf::map_adapter::copyCFArrayRef(ctu::cf::map_adapter *this, const __CFString *a2)
{
  return MEMORY[0x1E0DE3AF0](this, a2);
}

uint64_t ctu::cf::map_adapter::copyCFDictionaryRef(ctu::cf::map_adapter *this, const __CFString *a2)
{
  return MEMORY[0x1E0DE3B00](this, a2);
}

uint64_t ctu::cf::map_adapter::getInt(ctu::cf::map_adapter *this, const __CFString *a2)
{
  return MEMORY[0x1E0DE3B08](this, a2);
}

uint64_t ctu::cf::map_adapter::getBool(ctu::cf::map_adapter *this, const __CFString *a2)
{
  return MEMORY[0x1E0DE3B10](this, a2);
}

uint64_t ctu::cf::map_adapter::getDouble(ctu::cf::map_adapter *this, const __CFString *a2, double a3)
{
  return MEMORY[0x1E0DE3B18](this, a2, a3);
}

uint64_t ctu::cf::map_adapter::getString()
{
  return MEMORY[0x1E0DE3B20]();
}

uint64_t ctu::LogServer::getConfig(ctu::LogServer *this)
{
  return MEMORY[0x1E0DE3B38](this);
}

uint64_t qmi::MessageBase::findTlvValue(qmi::MessageBase *this)
{
  return MEMORY[0x1E0DE2E70](this);
}

uint64_t qmi::ClientRouter::setHandler()
{
  return MEMORY[0x1E0DDCFD0]();
}

uint64_t qmi::ClientRouter::setIndHandlerInternal()
{
  return MEMORY[0x1E0DDCFE0]();
}

uint64_t qmi::ClientRouter::get()
{
  return MEMORY[0x1E0DDCFE8]();
}

uint64_t qmi::ClientRouter::start()
{
  return MEMORY[0x1E0DDCFF8]();
}

uint64_t qmi::Client::setHandler()
{
  return MEMORY[0x1E0DDD000]();
}

{
  return MEMORY[0x1E0DDD008]();
}

{
  return MEMORY[0x1E0DDD010]();
}

uint64_t qmi::Client::setIndHandler()
{
  return MEMORY[0x1E0DDD018]();
}

uint64_t qmi::Client::setIndShouldWake(qmi::Client *this)
{
  return MEMORY[0x1E0DDD020](this);
}

uint64_t qmi::Client::send()
{
  return MEMORY[0x1E0DDD028]();
}

uint64_t qmi::Client::stop(qmi::Client *this)
{
  return MEMORY[0x1E0DDD030](this);
}

uint64_t qmi::Client::start(qmi::Client *this)
{
  return MEMORY[0x1E0DDD038](this);
}

uint64_t qmi::Client::getName(qmi::Client *this)
{
  return MEMORY[0x1E0DDD040](this);
}

uint64_t qmi::Client::operator std::weak_ptr<qmi::Client::State>()
{
  return MEMORY[0x1E0DDD048]();
}

uint64_t xpc::object::to_string(xpc::object *this)
{
  return MEMORY[0x1E0DE3B48](this);
}

uint64_t coex::CommandDriver::getName(coex::CommandDriver *this)
{
  return MEMORY[0x1E0DDFC98](this);
}

uint64_t cpms::CommandDriver::getName(cpms::CommandDriver *this)
{
  return MEMORY[0x1E0DDFCA0](this);
}

uint64_t data::CommandDriver::getName(data::CommandDriver *this)
{
  return MEMORY[0x1E0DDFCA8](this);
}

uint64_t diag::CommandDriver::notifyOfEvent_sync()
{
  return MEMORY[0x1E0DDFCB0]();
}

uint64_t diag::CommandDriver::getName(diag::CommandDriver *this)
{
  return MEMORY[0x1E0DDFCB8](this);
}

uint64_t logs::CommandDriver::notifyState_sync()
{
  return MEMORY[0x1E0DDFCC0]();
}

uint64_t logs::CommandDriver::getName(logs::CommandDriver *this)
{
  return MEMORY[0x1E0DDFCC8](this);
}

uint64_t radio::CommandDriver::getName(radio::CommandDriver *this)
{
  return MEMORY[0x1E0DDFCD0](this);
}

uint64_t radio::RFSCommandDriver::getName(radio::RFSCommandDriver *this)
{
  return MEMORY[0x1E0DDFCD8](this);
}

uint64_t radio::DebugCommandDriver::getName(radio::DebugCommandDriver *this)
{
  return MEMORY[0x1E0DDFCE0](this);
}

uint64_t radio::HealthCommandDriver::getName(radio::HealthCommandDriver *this)
{
  return MEMORY[0x1E0DDFCE8](this);
}

uint64_t radio::OpMode::convertMode()
{
  return MEMORY[0x1E0DDFCF0]();
}

uint64_t radio::OpMode::convertMode(radio::OpMode *this)
{
  return MEMORY[0x1E0DDFCF8](this);
}

uint64_t radio::OpMode::modeToString()
{
  return MEMORY[0x1E0DDFD00]();
}

uint64_t radio::OpMode::getModeString(radio::OpMode *this)
{
  return MEMORY[0x1E0DDFD08](this);
}

uint64_t radio::OpMode::allowModeChange(radio::OpMode *this)
{
  return MEMORY[0x1E0DDFD10](this);
}

uint64_t radio::OpMode::getConfigString(radio::OpMode *this)
{
  return MEMORY[0x1E0DDFD18](this);
}

uint64_t radio::OpMode::getMode(radio::OpMode *this)
{
  return MEMORY[0x1E0DDFD20](this);
}

uint64_t radio::OpMode::getConfig(radio::OpMode *this)
{
  return MEMORY[0x1E0DDFD28](this);
}

uint64_t antenna::CommandDriver::getName(antenna::CommandDriver *this)
{
  return MEMORY[0x1E0DDFD30](this);
}

uint64_t desense::CommandDriver::getName(desense::CommandDriver *this)
{
  return MEMORY[0x1E0DDFD38](this);
}

std::string *__cdecl std::locale::name(std::string *__return_ptr retstr, const std::locale *this)
{
  return (std::string *)MEMORY[0x1E0DE4240](retstr, this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1E0DE4248](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1E0DE4258](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4288](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x1E0DE4320](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::runtime_error *a2)
{
  return (std::runtime_error *)MEMORY[0x1E0DE4330](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
  MEMORY[0x1E0DE4340](this);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1E0DE4388](this);
}

std::regex_error *__cdecl std::regex_error::regex_error(std::regex_error *this, std::regex_constants::error_type __ecode)
{
  return (std::regex_error *)MEMORY[0x1E0DE43B0](this, *(_QWORD *)&__ecode);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1E0DE43E8](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4428](this, __s, __n);
}

std::string *__cdecl std::string::append(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x1E0DE4438](this, __n, __c);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4470](this, __pos, __s, __n);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x1E0DE44B8](this, __c);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x1E0DE4590]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x1E0DE45A8]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x1E0DE45B0]();
}

uint64_t std::istream::peek()
{
  return MEMORY[0x1E0DE45C8]();
}

uint64_t std::istream::seekg()
{
  return MEMORY[0x1E0DE45E8]();
}

uint64_t std::istream::tellg()
{
  return MEMORY[0x1E0DE45F0]();
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x1E0DE4608]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x1E0DE4628]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1E0DE46B0]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1E0DE46B8]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x1E0DE46C8]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1E0DE46E0]();
}

{
  return MEMORY[0x1E0DE4700]();
}

{
  return MEMORY[0x1E0DE4708]();
}

{
  return MEMORY[0x1E0DE4710]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x1E0DE47A8]();
}

std::regex_traits<char>::char_class_type std::__get_classname(const char *__s, BOOL __icase)
{
  return MEMORY[0x1E0DE47C8](__s, __icase);
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1E0DE47E0]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1E0DE47E8]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE48F0](this);
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x1E0DE48F8](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE4900](this);
}

std::string *__cdecl std::__get_collation_name(std::string *__return_ptr retstr, const char *__s)
{
  return (std::string *)MEMORY[0x1E0DE4910](retstr, __s);
}

uint64_t std::stol(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x1E0DE4A80](__str, __idx, *(_QWORD *)&__base);
}

void std::mutex::lock(std::mutex *this)
{
  MEMORY[0x1E0DE4AA0](this);
}

void std::mutex::unlock(std::mutex *this)
{
  MEMORY[0x1E0DE4AA8](this);
}

void std::mutex::~mutex(std::mutex *this)
{
  MEMORY[0x1E0DE4AB8](this);
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return (std::locale *)MEMORY[0x1E0DE4B88](this, a2);
}

std::locale *__cdecl std::locale::locale(std::locale *this)
{
  return (std::locale *)MEMORY[0x1E0DE4B90](this);
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x1E0DE4B98](this);
}

const std::locale *__cdecl std::locale::operator=(std::locale *this, const std::locale *a2)
{
  return (const std::locale *)MEMORY[0x1E0DE4BA0](this, a2);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x1E0DE4C50](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x1E0DE4C68](this, __sb);
}

void std::ios_base::move(std::ios_base *this, std::ios_base *a2)
{
  MEMORY[0x1E0DE4C70](this, a2);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x1E0DE4C80](this, *(_QWORD *)&__state);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1E0DE4D28]();
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x1E0DE4DD8](this);
}

void std::terminate(void)
{
  MEMORY[0x1E0DE4E18]();
}

void operator delete(void *__p)
{
  off_1E66D2D78(__p);
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1E66D2D80(__sz);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1E0DE5068](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1E0C80A98](lpfunc, obj, lpdso_handle);
}

void __cxa_bad_cast(void)
{
  MEMORY[0x1E0DE5070]();
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1E0DE5080](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x1E0DE5098]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x1E0DE50A0](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x1E0DE50B0](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1E0DE50B8](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x1E0DE50C0](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x1E0DE50D0]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x1E0DE50D8](a1, lptinfo, a3);
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x1E0DE50E0](lpsrc, lpstype, lpdtype, s2d);
}

int *__error(void)
{
  return (int *)MEMORY[0x1E0C80AC0]();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1E0C80B50](*(_QWORD *)&a1, a2);
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1E0C80C78](*(_QWORD *)&a1);
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81020](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

int close(int a1)
{
  return MEMORY[0x1E0C82688](*(_QWORD *)&a1);
}

int closedir(DIR *a1)
{
  return MEMORY[0x1E0C82698](a1);
}

double difftime(time_t a1, time_t a2)
{
  double result;

  MEMORY[0x1E0C82B98](a1, a2);
  return result;
}

void dispatch_activate(dispatch_object_t object)
{
  MEMORY[0x1E0C82BC0](object);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

void dispatch_async_and_wait(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C08](queue, block);
}

void dispatch_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x1E0C82C18](queue, context, work);
}

void dispatch_barrier_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x1E0C82C40](queue, context, work);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1E0C82D20]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x1E0C82D28](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x1E0C82D30](group);
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82D38](group, queue, block);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
  MEMORY[0x1E0C82E98](object);
}

void dispatch_retain(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA8](object);
}

void dispatch_source_cancel(dispatch_source_t source)
{
  MEMORY[0x1E0C82F10](source);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1E0C82F20](type, handle, mask, queue);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F48](source, handler);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F58](source, handler);
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
  MEMORY[0x1E0C82F78](source, start, interval, leeway);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

dispatch_workloop_t dispatch_workloop_create(const char *label)
{
  return (dispatch_workloop_t)MEMORY[0x1E0C82FD8](label);
}

int ffsctl(int a1, unint64_t a2, void *a3, unsigned int a4)
{
  return MEMORY[0x1E0C83378](*(_QWORD *)&a1, a2, a3, *(_QWORD *)&a4);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x1E0C83820](a1, a2);
}

tm *__cdecl localtime(const time_t *a1)
{
  return (tm *)MEMORY[0x1E0C83BA8](a1);
}

tm *__cdecl localtime_r(const time_t *a1, tm *a2)
{
  return (tm *)MEMORY[0x1E0C83BB0](a1, a2);
}

int lstat(const char *a1, stat *a2)
{
  return MEMORY[0x1E0C83C40](a1, a2);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1E0C84070](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

int mkdir(const char *a1, mode_t a2)
{
  return MEMORY[0x1E0C84160](a1, a2);
}

time_t mktime(tm *a1)
{
  return MEMORY[0x1E0C841C8](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1E0C84480](a1, *(_QWORD *)&a2);
}

DIR *__cdecl opendir(const char *a1)
{
  return (DIR *)MEMORY[0x1E0C844C0](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C84998](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C849B0](lock);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E18](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1E0C84E20](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E28](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E38](a1);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1E0C85000](*(_QWORD *)&a1, a2, a3);
}

dirent *__cdecl readdir(DIR *a1)
{
  return (dirent *)MEMORY[0x1E0C85008](a1);
}

BOOL remove(const std::__fs::filesystem::path *__p, std::error_code *__ec)
{
  return MEMORY[0x1E0C850B8](__p, __ec);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1E0C85440](__str, __size, __format);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1E0C854D8](a1, a2);
}

int strcasecmp(const char *a1, const char *a2)
{
  return MEMORY[0x1E0C85500](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1E0C85548](*(_QWORD *)&__errnum);
}

size_t strftime(char *a1, size_t a2, const char *a3, const tm *a4)
{
  return MEMORY[0x1E0C85558](a1, a2, a3, a4);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1E0C85570](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

char *__cdecl strptime(const char *a1, const char *a2, tm *a3)
{
  return (char *)MEMORY[0x1E0C855D8](a1, a2, a3);
}

time_t time(time_t *a1)
{
  return MEMORY[0x1E0C85950](a1);
}

int unlink(const char *a1)
{
  return MEMORY[0x1E0C859B8](a1);
}

void xpc_array_append_value(xpc_object_t xarray, xpc_object_t value)
{
  MEMORY[0x1E0C85DE0](xarray, value);
}

xpc_object_t xpc_array_create(xpc_object_t *objects, size_t count)
{
  return (xpc_object_t)MEMORY[0x1E0C85E00](objects, count);
}

xpc_object_t xpc_BOOL_create(BOOL value)
{
  return (xpc_object_t)MEMORY[0x1E0C85EF0](value);
}

char *__cdecl xpc_copy_description(xpc_object_t object)
{
  return (char *)MEMORY[0x1E0C86108](object);
}

xpc_object_t xpc_data_create(const void *bytes, size_t length)
{
  return (xpc_object_t)MEMORY[0x1E0C86178](bytes, length);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1E0C86208](keys, values, count);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1E0C862E0](xdict, key);
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
  MEMORY[0x1E0C863B8](xdict, key, value);
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1E0C86520](object);
}

xpc_object_t xpc_int64_create(int64_t value)
{
  return (xpc_object_t)MEMORY[0x1E0C86568](value);
}

xpc_object_t xpc_null_create(void)
{
  return (xpc_object_t)MEMORY[0x1E0C86628]();
}

void xpc_release(xpc_object_t object)
{
  MEMORY[0x1E0C86658](object);
}

xpc_object_t xpc_retain(xpc_object_t object)
{
  return (xpc_object_t)MEMORY[0x1E0C86660](object);
}

