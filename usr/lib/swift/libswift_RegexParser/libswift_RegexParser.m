uint64_t AST.root.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_retain();
}

uint64_t AST.root.setter(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_release();
  *v1 = v2;
  return result;
}

uint64_t (*AST.root.modify())()
{
  return AST.root.modify;
}

uint64_t AST.globalOptions.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 8);
  return swift_bridgeObjectRetain();
}

uint64_t AST.globalOptions.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = v2;
  return result;
}

uint64_t (*AST.globalOptions.modify())()
{
  return AST.root.modify;
}

uint64_t AST.diags.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t AST.diags.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = v2;
  return result;
}

uint64_t (*AST.diags.modify())()
{
  return AST.root.modify;
}

_QWORD *AST.init(_:globalOptions:diags:)@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  v5 = *a3;
  *a4 = *result;
  a4[1] = v4;
  a4[2] = v5;
  return result;
}

void AST.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  AST.Node.hash(into:)();
  if (v3)
  {
    Hasher._combine(_:)(1u);
    specialized Array<A>.hash(into:)(a1, v3);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  specialized Array<A>.hash(into:)(a1, v4);
}

void static Diagnostics.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

Swift::Int AST.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  Hasher.init(_seed:)();
  AST.Node.hash(into:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    specialized Array<A>.hash(into:)((uint64_t)v4, v1);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  specialized Array<A>.hash(into:)((uint64_t)v4, v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  Hasher.init(_seed:)();
  AST.Node.hash(into:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    specialized Array<A>.hash(into:)((uint64_t)v4, v1);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  specialized Array<A>.hash(into:)((uint64_t)v4, v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  AST.Node.hash(into:)();
  if (v3)
  {
    Hasher._combine(_:)(1u);
    specialized Array<A>.hash(into:)(a1, v3);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  specialized Array<A>.hash(into:)(a1, v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  Hasher.init(_seed:)();
  AST.Node.hash(into:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    specialized Array<A>.hash(into:)((uint64_t)v4, v1);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  specialized Array<A>.hash(into:)((uint64_t)v4, v2);
  return Hasher._finalize()();
}

uint64_t AST.hasCapture.getter()
{
  return AST.Node.hasCapture.getter() & 1;
}

uint64_t AST.Node.hasCapture.getter()
{
  _QWORD *v0;
  unsigned int v1;
  int8x16_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  if (*v0 >> 60 == 2)
  {
    v1 = *(unsigned __int8 *)((*v0 & 0xFFFFFFFFFFFFFFFLL) + 0x60);
    if (v1 < 2)
      return 1;
    if (v1 == 3)
    {
      v2 = vorrq_s8(vorrq_s8(*(int8x16_t *)((*v0 & 0xFFFFFFFFFFFFFFFLL) + 0x20), *(int8x16_t *)((*v0 & 0xFFFFFFFFFFFFFFFLL) + 0x40)), vorrq_s8(*(int8x16_t *)((*v0 & 0xFFFFFFFFFFFFFFFLL) + 0x30), *(int8x16_t *)((*v0 & 0xFFFFFFFFFFFFFFFLL) + 0x50)));
      if (!(*(_QWORD *)&vorr_s8(*(int8x8_t *)v2.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL)) | *(_QWORD *)((*v0 & 0xFFFFFFFFFFFFFFFLL) + 0x18) | *(_QWORD *)((*v0 & 0xFFFFFFFFFFFFFFFLL) + 0x10)))
        return 1;
    }
  }
  AST.Node._associatedValue.getter();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ASTNode);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ASTParent);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v3 = *((_QWORD *)&v11 + 1);
    v4 = v12;
    __swift_project_boxed_opaque_existential_1Tm(&v10, *((uint64_t *)&v11 + 1));
    v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(v3, v4);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v10);
    result = swift_release();
    v7 = 0;
    v8 = *(_QWORD *)(v5 + 16);
    while (1)
    {
      if (v8 == v7)
      {
        swift_bridgeObjectRelease();
        return 0;
      }
      if (v7 >= *(_QWORD *)(v5 + 16))
        break;
      v9 = v7 + 1;
      *(_QWORD *)&v10 = *(_QWORD *)(v5 + 8 * v7 + 32);
      result = AST.Node.hasCapture.getter(result);
      v7 = v9;
      if ((result & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 1;
      }
    }
    __break(1u);
  }
  else
  {
    v12 = 0;
    v10 = 0u;
    v11 = 0u;
    outlined destroy of _ASTParent?((uint64_t)&v10, &demangling cache variable for type metadata for _ASTParent?);
    swift_release();
    return 0;
  }
  return result;
}

BOOL AST.isInvalid.getter()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v3;
  unsigned int v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = (unsigned __int8 *)(v1 + 32);
  v3 = *(_QWORD *)(v1 + 16) + 1;
  do
  {
    if (!--v3)
      break;
    v4 = *v2;
    v2 += 80;
  }
  while (v4 > 1);
  return v3 != 0;
}

BOOL Diagnostics.hasAnyError.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;
  uint64_t v2;
  unsigned int v3;

  v1 = (unsigned __int8 *)(*(_QWORD *)v0 + 32);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 16) + 1;
  do
  {
    if (!--v2)
      break;
    v3 = *v1;
    v1 += 80;
  }
  while (v3 > 1);
  return v2 != 0;
}

uint64_t AST.ensureValid()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = v1[1];
  v3 = v1[2];
  v4 = *(_QWORD *)(v3 + 16) + 1;
  v5 = v3;
  while (--v4)
  {
    v6 = v5 + 80;
    v7 = *(unsigned __int8 *)(v5 + 32);
    v5 += 80;
    if (v7 <= 1)
    {
      v8 = *(_QWORD *)(v6 - 32);
      v18 = *(_QWORD *)(v6 - 40);
      v9 = *(_QWORD *)(v6 - 24);
      v10 = *(_QWORD *)(v6 - 16);
      v11 = *(_QWORD *)(v6 + 8);
      v16 = *(_QWORD *)v6;
      v17 = *(_QWORD *)(v6 - 8);
      v12 = *(_QWORD *)(v6 + 16);
      v13 = *(_BYTE *)(v6 + 24);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()>);
      lazy protocol witness table accessor for type Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()> and conformance Source.LocatedError<A>(&lazy protocol witness table cache variable for type Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()> and conformance Source.LocatedError<A>, &demangling cache variable for type metadata for Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()>, (uint64_t)&protocol conformance descriptor for Source.LocatedError<A>);
      swift_allocError();
      *(_BYTE *)v14 = v7;
      *(_QWORD *)(v14 + 8) = v18;
      *(_QWORD *)(v14 + 16) = v8;
      *(_QWORD *)(v14 + 24) = v9;
      *(_QWORD *)(v14 + 32) = v10;
      *(_QWORD *)(v14 + 40) = v17;
      *(_QWORD *)(v14 + 48) = v16;
      *(_QWORD *)(v14 + 56) = v11;
      *(_QWORD *)(v14 + 64) = v12;
      *(_BYTE *)(v14 + 72) = v13;
      *(_QWORD *)(v14 + 80) = v9;
      *(_QWORD *)(v14 + 88) = v10;
      swift_bridgeObjectRetain();
      outlined copy of ParseError?(v17, v16, v11, v12, v13);
      return swift_willThrow();
    }
  }
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

void AST.Node.hash(into:)()
{
  uint64_t v1;
  uint64_t v2;

  v1 = type metadata accessor for AST.Atom(0);
  MEMORY[0x1E0C80A78](v1, v2);
  __asm { BR              X11 }
}

void sub_1DEF7DEAC(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  Hasher._combine(_:)(0);
  specialized Array<A>.hash(into:)(v1, v2);
  specialized Array<A>.hash(into:)(v1, v3);
}

void sub_1DEF7DEF0(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  Hasher._combine(_:)(1uLL);
  specialized Array<A>.hash(into:)(v1, v2);
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v4 >> 14);
}

BOOL static AST.Alternation.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v3 = a2[1];
  return (specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) != 0
      && specialized static Array<A>.== infix(_:_:)(v2, v3);
}

BOOL static AST.Concatenation.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a2[1];
  v5 = a2[2];
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) == 0)
    return 0;
  return (v4 ^ (unint64_t)v2) < 0x4000 && (v5 ^ (unint64_t)v3) < 0x4000;
}

BOOL static AST.Quote.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  _BOOL8 result;

  v2 = a1[2];
  v3 = a1[3];
  v5 = a2[2];
  v4 = a2[3];
  if (*a1 == *a2 && a1[1] == a2[1])
    return (v5 ^ v2) < 0x4000 && (v4 ^ v3) < 0x4000;
  v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  result = 0;
  if ((v7 & 1) != 0)
    return (v5 ^ v2) < 0x4000 && (v4 ^ v3) < 0x4000;
  return result;
}

BOOL static AST.Atom.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _BOOL8 result;

  specialized static AST.Atom.Kind.== infix(_:_:)(a1, a2);
  result = 0;
  if ((v4 & 1) != 0)
  {
    v5 = *(int *)(type metadata accessor for AST.Atom(0) + 20);
    v6 = a1 + v5;
    v7 = *(_QWORD *)(a1 + v5);
    v8 = (_QWORD *)(a2 + v5);
    if (!((*v8 ^ v7) >> 14) && (*(_QWORD *)(v6 + 8) ^ v8[1]) < 0x4000)
      return 1;
  }
  return result;
}

Swift::Int AST.Node.hashValue.getter()
{
  Hasher.init(_seed:)();
  AST.Node.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Node()
{
  Hasher.init(_seed:)();
  AST.Node.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Node()
{
  Hasher.init(_seed:)();
  AST.Node.hash(into:)();
  return Hasher._finalize()();
}

uint64_t AST.Node.children.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  *(_QWORD *)&v5 = *v0;
  AST.Node._associatedValue.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ASTNode);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ASTParent);
  if (swift_dynamicCast())
  {
    v1 = *((_QWORD *)&v6 + 1);
    v2 = v7;
    __swift_project_boxed_opaque_existential_1Tm(&v5, *((uint64_t *)&v6 + 1));
    v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v5);
  }
  else
  {
    v7 = 0;
    v5 = 0u;
    v6 = 0u;
    outlined destroy of _ASTParent?((uint64_t)&v5, &demangling cache variable for type metadata for _ASTParent?);
    return 0;
  }
  return v3;
}

void AST.Node._associatedValue.getter()
{
  __asm { BR              X11 }
}

uint64_t sub_1DEF7E660@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v1[3] = &type metadata for AST.Alternation;
  v1[4] = lazy protocol witness table accessor for type AST.Alternation and conformance AST.Alternation();
  *v1 = v2;
  v1[1] = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1DEF7E9A4@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[6];
  v7 = a1[7];
  v8 = a1[8];
  v9 = a1[9];
  v1[3] = &type metadata for AST.AbsentFunction;
  v1[4] = lazy protocol witness table accessor for type AST.AbsentFunction and conformance AST.AbsentFunction();
  v10 = (_QWORD *)swift_allocObject();
  *v1 = v10;
  v10[2] = v2;
  v10[3] = v3;
  v10[4] = v4;
  v10[5] = v5;
  v10[6] = v6;
  v10[7] = v7;
  v10[8] = v8;
  v10[9] = v9;
  return outlined copy of AST.AbsentFunction.Kind(v4, v5, v6, v7);
}

void sub_1DEF7EA20(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v1[3] = &type metadata for AST.Empty;
  v1[4] = lazy protocol witness table accessor for type AST.Empty and conformance AST.Empty();
  *v1 = v2;
  v1[1] = v3;
  JUMPOUT(0x1DEF7EA3CLL);
}

uint64_t AST.Node.as<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v4;

  AST.Node._associatedValue.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ASTNode);
  v4 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, v4 ^ 1u, 1, a1);
}

uint64_t AST.Node.location.getter()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[3];
  uint64_t v4;
  uint64_t v5;

  AST.Node._associatedValue.getter();
  v0 = v4;
  v1 = v5;
  __swift_project_boxed_opaque_existential_1Tm(v3, v4);
  (*(void (**)(uint64_t, uint64_t))(v1 + 16))(v0, v1);
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v3);
}

BOOL AST.Node.isTrivia.getter()
{
  _QWORD *v0;

  return *v0 >> 60 == 6;
}

BOOL AST.Group.Kind.isCapturing.getter()
{
  int8x16_t *v0;
  unsigned int v1;
  _BOOL8 result;
  int8x16_t v3;

  v1 = v0[5].u8[0];
  result = 1;
  if (v1 >= 2)
  {
    if (v1 != 3)
      return 0;
    v3 = vorrq_s8(vorrq_s8(v0[1], v0[3]), vorrq_s8(v0[2], v0[4]));
    if (*(_QWORD *)&vorr_s8(*(int8x8_t *)v3.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL)) | v0->i64[1] | v0->i64[0])
      return 0;
  }
  return result;
}

void AST.Node.isQuantifiable.getter()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = type metadata accessor for AST.Atom.Kind(0);
  MEMORY[0x1E0C80A78](v1, v2);
  v3 = type metadata accessor for AST.Atom(0);
  MEMORY[0x1E0C80A78](v3, v4);
  __asm { BR              X11 }
}

uint64_t sub_1DEF7EC58()
{
  return 0;
}

uint64_t AST.Atom.isQuantifiable.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t (*v5)(_QWORD);
  int v6;
  uint64_t result;
  unsigned int v8;
  int v9;
  uint64_t v10;

  v1 = type metadata accessor for AST.Atom.Kind(0);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (unsigned __int8 *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AST.Atom(v0, (uint64_t)v4, v5);
  v6 = swift_getEnumCaseMultiPayload() - 4;
  result = 0;
  switch(v6)
  {
    case 0:
      v8 = *v4;
      if (v8 >= 0x1D)
        goto LABEL_7;
      result = (0x101FFFFFu >> v8) & 1;
      break;
    case 8:
      v9 = *v4;
      swift_bridgeObjectRelease();
      result = v9 == 0;
      break;
    case 9:
      outlined destroy of AST.Atom((uint64_t)v4, type metadata accessor for AST.Atom.Kind);
LABEL_7:
      result = 0;
      break;
    case 11:
    case 12:
      return result;
    default:
      outlined destroy of AST.Atom((uint64_t)v4, type metadata accessor for AST.Atom.Kind);
      result = 1;
      break;
  }
  return result;
}

uint64_t AST.Alternation.children.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AST.Alternation.pipes.getter()
{
  return swift_bridgeObjectRetain();
}

_RegexParser::AST::Alternation __swiftcall AST.Alternation.init(_:pipes:)(Swift::OpaquePointer _, Swift::OpaquePointer pipes)
{
  Swift::OpaquePointer *v2;
  unint64_t v3;
  _RegexParser::AST::Alternation result;

  v3 = *((_QWORD *)_._rawValue + 2);
  if (v3 < 2)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (*((_QWORD *)pipes._rawValue + 2) != v3 - 1)
  {
LABEL_5:
    __break(1u);
    goto LABEL_6;
  }
  v2->_rawValue = _._rawValue;
  v2[1]._rawValue = pipes._rawValue;
LABEL_6:
  result.pipes = pipes;
  result.children = _;
  return result;
}

uint64_t AST.Alternation.location.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 16);
  if (!v3)
  {
    __break(1u);
    goto LABEL_6;
  }
  v6 = *(_QWORD *)(v2 + 32);
  v5 = v2 + 32;
  v19 = v6;
  AST.Node._associatedValue.getter();
  v7 = v17;
  v8 = v18;
  __swift_project_boxed_opaque_existential_1Tm(v16, v17);
  (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t))(v8 + 16))(&v19, v7, v8);
  result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v16);
  if (v3 > *(_QWORD *)(v5 - 16))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v10 = v19;
  v14 = *(_QWORD *)(v5 + 8 * v3 - 8);
  AST.Node._associatedValue.getter();
  v11 = v17;
  v12 = v18;
  __swift_project_boxed_opaque_existential_1Tm(v16, v17);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v12 + 16))(&v14, v11, v12);
  result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v16);
  v13 = v15;
  if (v15 >> 14 >= v10 >> 14)
  {
    *a1 = v10;
    a1[1] = v13;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

unint64_t specialized Collection.first.getter(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unsigned int v5;

  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    _StringGuts.validateScalarIndex(_:)(0xFuLL, a1, a2);
    if ((a2 & 0x1000000000000000) != 0)
    {
      v5 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0)
        _StringObject.sharedUTF8.getter();
      v5 = _decodeScalar(_:startingAt:)();
    }
  }
  else
  {
    v5 = 0;
  }
  return v5 | ((unint64_t)(v2 == 0) << 32);
}

uint64_t Source.Location.start.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t Source.Location.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t AST.Alternation.hash(into:)(uint64_t a1)
{
  return AST.Alternation.hash(into:)(a1, specialized Array<A>.hash(into:), (uint64_t (*)(uint64_t, uint64_t))specialized Array<A>.hash(into:));
}

BOOL specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = (_QWORD *)(a2 + 48);
  v4 = (_QWORD *)(a1 + 48);
  v5 = v2 + 1;
  do
  {
    result = --v5 == 0;
    if (!v5)
      break;
    if (*((_DWORD *)v4 - 4) != *((_DWORD *)v3 - 4))
      break;
    if ((*(v3 - 1) ^ *(v4 - 1)) >> 14)
      break;
    v8 = *v3;
    v3 += 3;
    v7 = v8;
    v9 = *v4;
    v4 += 3;
  }
  while ((v7 ^ v9) < 0x4000);
  return result;
}

{
  uint64_t v2;
  uint64_t *v3;
  unint64_t *v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = (uint64_t *)(a2 + 48);
  v4 = (unint64_t *)(a1 + 48);
  v5 = v2 + 1;
  do
  {
    result = --v5 == 0;
    if (!v5)
      break;
    if (*((unsigned __int8 *)v4 - 16) != *((unsigned __int8 *)v3 - 16))
      break;
    if ((*(v3 - 1) ^ *(v4 - 1)) >> 14)
      break;
    v8 = *v3;
    v3 += 3;
    v7 = v8;
    v9 = *v4;
    v4 += 3;
  }
  while ((v7 ^ v9) < 0x4000);
  return result;
}

{
  uint64_t v2;
  unint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  _BOOL8 result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = (unint64_t *)(a1 + 40);
  v4 = (uint64_t *)(a2 + 40);
  v5 = v2 + 1;
  do
  {
    result = --v5 == 0;
    if (!v5)
      break;
    if ((*(v4 - 1) ^ *(v3 - 1)) >> 14)
      break;
    v8 = *v3;
    v3 += 2;
    v7 = v8;
    v9 = *v4;
    v4 += 2;
  }
  while ((v9 ^ v7) < 0x4000);
  return result;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  unint64_t *v5;
  _BOOL8 v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  _OWORD v13[2];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = v2 + 1;
  v4 = (uint64_t *)(a2 + 72);
  v5 = (unint64_t *)(a1 + 72);
  do
  {
    v6 = --v3 == 0;
    if (!v3)
      break;
    v8 = *(v5 - 1);
    v7 = *v5;
    v10 = *(v4 - 1);
    v9 = *v4;
    v11 = *(_OWORD *)(v5 - 3);
    v13[0] = *(_OWORD *)(v5 - 5);
    v13[1] = v11;
    if ((specialized static AST.GlobalMatchingOption.Kind.== infix(_:_:)((uint64_t)v13) & 1) == 0)
      break;
    if ((v10 ^ v8) >> 14)
      break;
    v4 += 6;
    v5 += 6;
  }
  while ((v9 ^ v7) < 0x4000);
  return v6;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v23;

  v4 = type metadata accessor for AST.CustomCharacterClass.Member(0);
  v5 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x1E0C80A78](v4, v6);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v10);
  v12 = (char *)&v23 - v11;
  v13 = *(_QWORD *)(a1 + 16);
  if (v13 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v13 || a1 == a2)
    return 1;
  v14 = 0;
  v15 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v16 = a1 + v15;
  v17 = a2 + v15;
  do
  {
    v18 = v13 == v14;
    if (v13 == v14)
      break;
    v19 = v14 + 1;
    v20 = *(_QWORD *)(v5 + 72) * v14;
    outlined init with copy of AST.Atom(v16 + v20, (uint64_t)v12, type metadata accessor for AST.CustomCharacterClass.Member);
    outlined init with copy of AST.Atom(v17 + v20, (uint64_t)v9, type metadata accessor for AST.CustomCharacterClass.Member);
    specialized static AST.CustomCharacterClass.Member.== infix(_:_:)((uint64_t)v12, (uint64_t)v9);
    LOBYTE(v20) = v21;
    outlined destroy of AST.Atom((uint64_t)v9, type metadata accessor for AST.CustomCharacterClass.Member);
    outlined destroy of AST.Atom((uint64_t)v12, type metadata accessor for AST.CustomCharacterClass.Member);
    v14 = v19;
  }
  while ((v20 & 1) != 0);
  return v18;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  unint64_t *v5;
  _BOOL8 v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = v2 + 1;
  v4 = (uint64_t *)(a2 + 56);
  v5 = (unint64_t *)(a1 + 56);
  do
  {
    v6 = --v3 == 0;
    if (!v3)
      break;
    v8 = *(v5 - 1);
    v7 = *v5;
    v10 = *(v4 - 1);
    v9 = *v4;
    if (*(v5 - 3) == *(v4 - 3) && *(v5 - 2) == *(v4 - 2))
    {
      if ((v10 ^ v8) >> 14)
        return v6;
    }
    else if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0 || (v10 ^ v8) >= 0x4000)
    {
      return v6;
    }
    v4 += 4;
    v5 += 4;
  }
  while ((v9 ^ v7) < 0x4000);
  return v6;
}

{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _BOOL8 v5;
  uint64_t v6;
  char v7;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = (uint64_t *)(a1 + 32);
  v4 = a2 + 32;
  do
  {
    v5 = v2 == 0;
    if (!v2)
      break;
    v6 = *v3++;
    v4 += 8;
    v9 = v6;
    specialized static AST.Node.== infix(_:_:)((uint64_t)&v9);
    --v2;
  }
  while ((v7 & 1) != 0);
  return v5;
}

{
  uint64_t v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  _BOOL8 v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  char v10;
  uint64_t v11;
  char v12;
  __int128 v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;
  char v19;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = (_BYTE *)(a1 + 56);
  v4 = (_BYTE *)(a2 + 56);
  v5 = v2 + 1;
  do
  {
    v6 = --v5 == 0;
    if (!v5)
      break;
    v7 = v3 + 32;
    v8 = *((_QWORD *)v3 - 1);
    v9 = v4 + 32;
    v10 = *v3;
    v17 = *(_OWORD *)(v3 - 24);
    v18 = v8;
    v19 = v10;
    v11 = *((_QWORD *)v4 - 1);
    LOBYTE(v8) = *v4;
    v14 = *(_OWORD *)(v4 - 24);
    v15 = v11;
    v16 = v8;
    v12 = static CaptureStructure.== infix(_:_:)((uint64_t)&v17, (uint64_t)&v14);
    v4 = v9;
    v3 = v7;
  }
  while ((v12 & 1) != 0);
  return v6;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t *v5;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = v2 + 1;
    v4 = (unint64_t *)(a1 + 72);
    v5 = (uint64_t *)(a2 + 40);
    while (1)
    {
      v6 = --v3 == 0;
      if (!v3)
        return v6;
      v7 = *(v4 - 4);
      v8 = *(v4 - 3);
      v9 = *(v4 - 2);
      v10 = *(v4 - 1);
      v11 = *v4;
      v13 = *v5;
      v12 = v5[1];
      v14 = v5[2];
      v15 = v5[3];
      v16 = v5[4];
      if (v7)
      {
        if (!v13)
          return v6;
        if (*(v4 - 5) != *(v5 - 1) || v7 != v13)
        {
          v17 = *(v4 - 2);
          v21 = *(v4 - 3);
          v23 = v5[1];
          v25 = v5[4];
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            return v6;
          if (v17 != v14)
            return v6;
          v16 = v25;
          if (v21 != v23)
            return v6;
          goto LABEL_17;
        }
      }
      else
      {
        v24 = v5[1];
        v26 = v5[4];
        v22 = *v4;
        v18 = *(v4 - 3);
        v19 = *(v4 - 2);
        swift_bridgeObjectRelease();
        v9 = v19;
        v11 = v22;
        v12 = v24;
        v8 = v18;
        v16 = v26;
        if (v13)
          return v6;
      }
      if (v9 != v14 || v8 != v12)
        return v6;
LABEL_17:
      if (!((v15 ^ v10) >> 14))
      {
        v4 += 7;
        v5 += 7;
        if ((v16 ^ v11) < 0x4000)
          continue;
      }
      return v6;
    }
  }
  return 1;
}

void specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t *i;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16) && v2 && a1 != a2)
  {
    v3 = (uint64_t *)(a2 + 56);
    for (i = (unint64_t *)(a1 + 56); *((unsigned __int8 *)i - 24) == *((unsigned __int8 *)v3 - 24); i += 10)
    {
      v6 = *i;
      v5 = i[1];
      v8 = i[2];
      v7 = i[3];
      v10 = i[4];
      v9 = i[5];
      v11 = *((unsigned __int8 *)i + 48);
      v13 = *v3;
      v12 = v3[1];
      v15 = v3[2];
      v14 = v3[3];
      v17 = v3[4];
      v16 = v3[5];
      v18 = *((unsigned __int8 *)v3 + 48);
      if (*(i - 2) == *(v3 - 2) && *(i - 1) == *(v3 - 1))
      {
        if ((v13 ^ v6) >> 14)
          return;
      }
      else
      {
        v31 = v3[1];
        v32 = i[5];
        v33 = i[1];
        v34 = i[2];
        v35 = i[3];
        v36 = i[4];
        v30 = v3[2];
        v19 = *((unsigned __int8 *)i + 48);
        v20 = v3[3];
        v21 = *((unsigned __int8 *)v3 + 48);
        v22 = v3[4];
        v23 = v3[5];
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          return;
        v16 = v23;
        v17 = v22;
        v18 = v21;
        v14 = v20;
        v11 = v19;
        v15 = v30;
        v12 = v31;
        v9 = v32;
        v5 = v33;
        v7 = v35;
        v10 = v36;
        v8 = v34;
        if ((v13 ^ v6) >= 0x4000)
          return;
      }
      if ((v12 ^ v5) >> 14)
        return;
      if (v11 == 255)
      {
        if (v18 != 255)
          goto LABEL_20;
      }
      else
      {
        if (v18 == 255)
        {
LABEL_20:
          v25 = v10;
          v26 = v9;
          v27 = v16;
          v28 = v7;
          v29 = v8;
          outlined copy of ParseError?(v8, v7, v10, v9, v11);
          outlined copy of ParseError?(v15, v14, v17, v27, v18);
          outlined consume of ParseError?(v29, v28, v25, v26, v11);
          outlined consume of ParseError?(v15, v14, v17, v27, v18);
          return;
        }
        *(_QWORD *)&v37 = v8;
        *((_QWORD *)&v37 + 1) = v7;
        v38 = v10;
        v39 = v9;
        v40 = v11;
        v41 = v15;
        v42 = v14;
        v43 = v17;
        v44 = v16;
        v45 = v18;
        specialized static ParseError.== infix(_:_:)(&v37);
        if ((v24 & 1) == 0)
          return;
      }
      v3 += 10;
      if (!--v2)
        return;
    }
  }
}

Swift::Int AST.Alternation.hashValue.getter()
{
  return AST.Alternation.hashValue.getter((void (*)(_BYTE *, uint64_t))specialized Array<A>.hash(into:), (void (*)(_BYTE *, uint64_t))specialized Array<A>.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Alternation(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AST.Alternation(a1, a2, (void (*)(_BYTE *, uint64_t))specialized Array<A>.hash(into:), (void (*)(_BYTE *, uint64_t))specialized Array<A>.hash(into:));
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AST.Alternation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance AST.Alternation(a1, a2, a3, specialized Array<A>.hash(into:), (uint64_t (*)(uint64_t, uint64_t))specialized Array<A>.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Alternation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Alternation(a1, a2, a3, (void (*)(_BYTE *, uint64_t))specialized Array<A>.hash(into:), (void (*)(_BYTE *, uint64_t))specialized Array<A>.hash(into:));
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AST.Alternation(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v3 = a2[1];
  return (specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) != 0
      && specialized static Array<A>.== infix(_:_:)(v2, v3);
}

uint64_t protocol witness for _ASTPrintable._dumpBase.getter in conformance AST.Alternation()
{
  Swift::String v0;
  Swift::String v1;
  _QWORD v3[2];

  strcpy((char *)v3, "alternation<");
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 62;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return v3[0];
}

uint64_t AST.Alternation._dumpBase.getter()
{
  Swift::String v0;
  Swift::String v1;
  _QWORD v3[2];

  strcpy((char *)v3, "alternation<");
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 62;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return v3[0];
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Alternation()
{
  uint64_t *v0;

  return specialized _ASTPrintable._dump()(*v0);
}

uint64_t AST.Concatenation.children.getter()
{
  return swift_bridgeObjectRetain();
}

__n128 AST.Concatenation.location.getter@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  __n128 result;

  result = *(__n128 *)(v1 + 8);
  *a1 = result;
  return result;
}

__n128 AST.Concatenation.init(_:_:)@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  __n128 result;

  *(_QWORD *)a3 = a1;
  result = *a2;
  *(__n128 *)(a3 + 8) = *a2;
  return result;
}

void AST.Concatenation.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  unint64_t v2;
  unint64_t v3;

  v2 = v1[1];
  v3 = v1[2];
  specialized Array<A>.hash(into:)(a1, *v1);
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
}

BOOL static AST.Empty.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return !((*a2 ^ *a1) >> 14) && (a1[1] ^ a2[1]) < 0x4000;
}

Swift::Int AST.Concatenation.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  _BYTE v5[72];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  Hasher.init(_seed:)();
  specialized Array<A>.hash(into:)((uint64_t)v5, v1);
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Concatenation()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  _BYTE v5[72];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  Hasher.init(_seed:)();
  specialized Array<A>.hash(into:)((uint64_t)v5, v1);
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.Concatenation(uint64_t a1)
{
  uint64_t *v1;
  unint64_t v2;
  unint64_t v3;

  v2 = v1[1];
  v3 = v1[2];
  specialized Array<A>.hash(into:)(a1, *v1);
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Concatenation()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  _BYTE v5[72];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  Hasher.init(_seed:)();
  specialized Array<A>.hash(into:)((uint64_t)v5, v1);
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  return Hasher._finalize()();
}

__n128 protocol witness for _ASTNode.location.getter in conformance AST.Concatenation@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  __n128 result;

  result = *(__n128 *)(v1 + 8);
  *a1 = result;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AST.Concatenation(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a2[1];
  v5 = a2[2];
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) == 0)
    return 0;
  return (v4 ^ (unint64_t)v2) < 0x4000 && (v5 ^ (unint64_t)v3) < 0x4000;
}

uint64_t protocol witness for _ASTPrintable._dumpBase.getter in conformance AST.Concatenation()
{
  return 0;
}

uint64_t AST.Concatenation._dumpBase.getter()
{
  return 0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Concatenation()
{
  uint64_t *v0;

  return specialized _ASTPrintable._dump()(*v0);
}

uint64_t protocol witness for _ASTPrintable._dumpBase.getter in conformance AST.Quote()
{
  Swift::String *v0;
  Swift::String v1;

  String.append(_:)(*v0);
  v1._countAndFlagsBits = 34;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0x222065746F7571;
}

uint64_t AST.Quote._dumpBase.getter()
{
  Swift::String *v0;
  Swift::String v1;

  String.append(_:)(*v0);
  v1._countAndFlagsBits = 34;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0x222065746F7571;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Quote(uint64_t a1, uint64_t a2)
{
  return protocol witness for CustomStringConvertible.description.getter in conformance AST.Quote(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized _ASTPrintable._dump());
}

uint64_t AST.Trivia._dumpBase.getter()
{
  return 0;
}

uint64_t AST.Interpolation.contents.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

__n128 AST.Interpolation.location.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = v1[1];
  *a1 = result;
  return result;
}

__n128 AST.Interpolation.init(_:_:)@<Q0>(unint64_t a1@<X0>, unint64_t a2@<X1>, __n128 *a3@<X2>, __n128 *a4@<X8>)
{
  __n128 result;

  a4->n128_u64[0] = a1;
  a4->n128_u64[1] = a2;
  result = *a3;
  a4[1] = *a3;
  return result;
}

void AST.Quote.hash(into:)()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  String.hash(into:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
}

Swift::Int AST.Quote.hashValue.getter()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  Hasher.init(_seed:)();
  String.hash(into:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Quote()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  Hasher.init(_seed:)();
  String.hash(into:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  return Hasher._finalize()();
}

__n128 protocol witness for _ASTNode.location.getter in conformance AST.Interpolation@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = v1[1];
  *a1 = result;
  return result;
}

uint64_t protocol witness for _ASTPrintable._dumpBase.getter in conformance AST.Interpolation()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  Swift::String v4;

  v1 = *v0;
  v2 = (void *)v0[1];
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  v4._countAndFlagsBits = 62;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 0x6C6F707265746E69;
}

uint64_t AST.Interpolation._dumpBase.getter()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  Swift::String v4;

  v1 = *v0;
  v2 = (void *)v0[1];
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  v4._countAndFlagsBits = 62;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 0x6C6F707265746E69;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Interpolation(uint64_t a1, uint64_t a2)
{
  return protocol witness for CustomStringConvertible.description.getter in conformance AST.Quote(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized _ASTPrintable._dump());
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Quote(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v3;

  return a3(*v3, v3[1], v3[2], v3[3]);
}

__n128 AST.Empty.location.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  return result;
}

__n128 AST.Empty.init(_:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void AST.Empty.hash(into:)()
{
  _QWORD *v0;
  unint64_t v1;

  v1 = v0[1];
  Hasher._combine(_:)(*v0 >> 14);
  Hasher._combine(_:)(v1 >> 14);
}

Swift::Int AST.Empty.hashValue.getter()
{
  unint64_t *v0;
  unint64_t v1;
  unint64_t v2;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Empty()
{
  unint64_t *v0;
  unint64_t v1;
  unint64_t v2;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.Empty()
{
  _QWORD *v0;
  unint64_t v1;

  v1 = v0[1];
  Hasher._combine(_:)(*v0 >> 14);
  Hasher._combine(_:)(v1 >> 14);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Empty()
{
  unint64_t *v0;
  unint64_t v1;
  unint64_t v2;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  return Hasher._finalize()();
}

__n128 protocol witness for _ASTNode.location.getter in conformance AST.Empty@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AST.Empty(_QWORD *a1, _QWORD *a2)
{
  return !((*a2 ^ *a1) >> 14) && !((a1[1] ^ a2[1]) >> 14);
}

uint64_t AST.Empty._dumpBase.getter()
{
  return 0;
}

void AST.AbsentFunction.Kind.hash(into:)()
{
  __asm { BR              X11 }
}

void sub_1DEF80448()
{
  Hasher._combine(_:)(0);
  AST.Node.hash(into:)();
}

Swift::Int AST.AbsentFunction.Kind.hashValue.getter()
{
  return AST.AbsentFunction.Kind.hashValue.getter((void (*)(_BYTE *))AST.AbsentFunction.Kind.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.AbsentFunction.Kind(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AST.AbsentFunction.Kind(a1, a2, (void (*)(_BYTE *))AST.AbsentFunction.Kind.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.AbsentFunction.Kind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AST.AbsentFunction.Kind(a1, a2, a3, (void (*)(_BYTE *))AST.AbsentFunction.Kind.hash(into:));
}

__n128 AST.AbsentFunction.start.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  return result;
}

__n128 AST.AbsentFunction.start.setter(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  result = *a1;
  *v1 = *a1;
  return result;
}

uint64_t (*AST.AbsentFunction.start.modify())()
{
  return AST.root.modify;
}

uint64_t AST.AbsentFunction.kind.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v1[2];
  v3 = v1[3];
  v4 = v1[4];
  v5 = v1[5];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of AST.AbsentFunction.Kind(v2, v3, v4, v5);
}

__n128 AST.AbsentFunction.kind.setter(__n128 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  __n128 v5;

  v5 = *a1;
  v2 = a1[1].n128_i64[0];
  v3 = a1[1].n128_i64[1];
  outlined consume of AST.AbsentFunction.Kind(v1[2], v1[3], v1[4], v1[5]);
  result = v5;
  *((__n128 *)v1 + 1) = v5;
  v1[4] = v2;
  v1[5] = v3;
  return result;
}

uint64_t (*AST.AbsentFunction.kind.modify())()
{
  return AST.root.modify;
}

__n128 AST.AbsentFunction.location.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = v1[3];
  *a1 = result;
  return result;
}

__n128 AST.AbsentFunction.location.setter(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  result = *a1;
  v1[3] = *a1;
  return result;
}

uint64_t (*AST.AbsentFunction.location.modify())()
{
  return AST.root.modify;
}

__n128 AST.AbsentFunction.init(_:start:location:)@<Q0>(__int128 *a1@<X0>, _OWORD *a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v4;
  __int128 v5;
  __n128 result;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a4 = *a2;
  *(_OWORD *)(a4 + 16) = v4;
  result = *a3;
  *(_OWORD *)(a4 + 32) = v5;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

void AST.AbsentFunction.hash(into:)()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = v0[1];
  v2 = v0[6];
  v3 = v0[7];
  Hasher._combine(_:)(*v0 >> 14);
  Hasher._combine(_:)(v1 >> 14);
  AST.AbsentFunction.Kind.hash(into:)();
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
}

Swift::Int AST.AbsentFunction.hashValue.getter()
{
  unint64_t *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[6];
  v4 = v0[7];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  AST.AbsentFunction.Kind.hash(into:)();
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v4 >> 14);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.AbsentFunction()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = v0[1];
  v2 = v0[6];
  v3 = v0[7];
  Hasher._combine(_:)(*v0 >> 14);
  Hasher._combine(_:)(v1 >> 14);
  AST.AbsentFunction.Kind.hash(into:)();
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.AbsentFunction()
{
  unint64_t *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[6];
  v4 = v0[7];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  AST.AbsentFunction.Kind.hash(into:)();
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v4 >> 14);
  return Hasher._finalize()();
}

__n128 protocol witness for _ASTNode.location.getter in conformance AST.AbsentFunction@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = v1[3];
  *a1 = result;
  return result;
}

unint64_t AST.AbsentFunction._dumpBase.getter()
{
  uint64_t v0;
  unsigned int v1;
  uint64_t v2;
  Swift::String v3;

  v1 = *(unsigned __int8 *)(v0 + 40);
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  v2 = 8 * ((v1 >> 1) & 3);
  v3._countAndFlagsBits = *(_QWORD *)&aRepeaterexpres[v2];
  v3._object = *(void **)((char *)&unk_1DF003BC8 + v2);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  return 0xD000000000000010;
}

void protocol witness for CustomStringConvertible.description.getter in conformance AST.AbsentFunction()
{
  specialized _ASTPrintable._dump()();
}

__n128 AST.Atom.Number.init(_:at:)@<Q0>(unint64_t a1@<X0>, char a2@<W1>, __n128 *a3@<X2>, __n128 *a4@<X8>)
{
  __n128 result;

  a4->n128_u64[0] = a1;
  a4->n128_u8[8] = a2 & 1;
  result = *a3;
  a4[1] = *a3;
  return result;
}

BOOL AST.Reference.Kind.recursesWholePattern.getter()
{
  uint64_t v0;

  return !*(_BYTE *)(v0 + 32) && (*(_QWORD *)(v0 + 8) & 1 | *(_QWORD *)v0) == 0;
}

void AST.Reference.Kind.hash(into:)()
{
  uint64_t v0;
  Swift::UInt v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v4 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  if (!*(_BYTE *)(v0 + 32))
  {
    Hasher._combine(_:)(0);
    if ((v2 & 1) != 0)
      goto LABEL_4;
    goto LABEL_6;
  }
  if (*(_BYTE *)(v0 + 32) == 1)
  {
    Hasher._combine(_:)(1uLL);
    if ((v2 & 1) != 0)
    {
LABEL_4:
      Hasher._combine(_:)(0);
LABEL_7:
      Hasher._combine(_:)(v4 >> 14);
      Hasher._combine(_:)(v3 >> 14);
      return;
    }
LABEL_6:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
    goto LABEL_7;
  }
  Hasher._combine(_:)(2uLL);
  String.hash(into:)();
}

Swift::Int AST.Reference.Kind.hashValue.getter()
{
  Hasher.init(_seed:)();
  AST.Reference.Kind.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Reference.Kind()
{
  Hasher.init(_seed:)();
  AST.Reference.Kind.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Reference.Kind()
{
  Hasher.init(_seed:)();
  AST.Reference.Kind.hash(into:)();
  return Hasher._finalize()();
}

uint64_t AST.Reference.kind.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_BYTE *)(v1 + 32);
  *(_BYTE *)(a1 + 32) = v6;
  return outlined copy of AST.Reference.Kind(v2, v3, v4, v5, v6);
}

__n128 AST.Reference.kind.setter(__n128 *a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unsigned __int8 v4;
  __n128 result;
  __n128 v6;

  v6 = *a1;
  v2 = a1[1].n128_u64[0];
  v3 = a1[1].n128_u64[1];
  v4 = a1[2].n128_u8[0];
  outlined consume of AST.Reference.Kind(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32));
  result = v6;
  *(__n128 *)v1 = v6;
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)(v1 + 24) = v3;
  *(_BYTE *)(v1 + 32) = v4;
  return result;
}

uint64_t (*AST.Reference.kind.modify())()
{
  return AST.root.modify;
}

__n128 AST.Reference.recursionLevel.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  __n128 result;
  __int128 v4;

  v2 = *(_BYTE *)(v1 + 72);
  result = *(__n128 *)(v1 + 40);
  v4 = *(_OWORD *)(v1 + 56);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v2;
  return result;
}

__n128 AST.Reference.recursionLevel.setter(uint64_t a1)
{
  uint64_t v1;
  char v2;
  __n128 result;
  __int128 v4;

  v2 = *(_BYTE *)(a1 + 32);
  result = *(__n128 *)a1;
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 40) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 56) = v4;
  *(_BYTE *)(v1 + 72) = v2;
  return result;
}

uint64_t (*AST.Reference.recursionLevel.modify())()
{
  return AST.root.modify;
}

__n128 AST.Reference.innerLoc.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = v1[5];
  *a1 = result;
  return result;
}

__n128 AST.Reference.innerLoc.setter(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  result = *a1;
  v1[5] = *a1;
  return result;
}

uint64_t (*AST.Reference.innerLoc.modify())()
{
  return AST.root.modify;
}

__n128 AST.Reference.init(_:recursionLevel:innerLoc:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v4;
  __int128 v5;
  char v6;
  __n128 result;

  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(_OWORD *)(a4 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a4 + 40) = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a4 + 32) = *(_BYTE *)(a1 + 32);
  *(_OWORD *)(a4 + 56) = v5;
  *(_BYTE *)(a4 + 72) = v6;
  result = *a3;
  *(__n128 *)(a4 + 80) = *a3;
  return result;
}

BOOL AST.Reference.recursesWholePattern.getter()
{
  uint64_t v0;

  return !*(_BYTE *)(v0 + 32) && (*(_QWORD *)(v0 + 8) & 1 | *(_QWORD *)v0) == 0;
}

void AST.Reference.hash(into:)()
{
  uint64_t v0;
  Swift::UInt v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  char v5;
  unint64_t v6;
  unint64_t v7;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v5 = *(_BYTE *)(v0 + 72);
  v7 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 88);
  AST.Reference.Kind.hash(into:)();
  if ((v5 & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    if ((v2 & 1) != 0)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v1);
    }
    Hasher._combine(_:)(v4 >> 14);
    Hasher._combine(_:)(v3 >> 14);
  }
  Hasher._combine(_:)(v7 >> 14);
  Hasher._combine(_:)(v6 >> 14);
}

Swift::Int AST.Reference.hashValue.getter()
{
  Hasher.init(_seed:)();
  AST.Reference.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Reference()
{
  Hasher.init(_seed:)();
  AST.Reference.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Reference()
{
  Hasher.init(_seed:)();
  AST.Reference.hash(into:)();
  return Hasher._finalize()();
}

uint64_t (*AST.GlobalMatchingOptionSequence.options.modify())()
{
  return AST.root.modify;
}

_RegexParser::AST::GlobalMatchingOptionSequence_optional __swiftcall AST.GlobalMatchingOptionSequence.init(_:)(Swift::OpaquePointer a1)
{
  Swift::OpaquePointer *v1;
  Swift::OpaquePointer *v2;
  Swift::Bool v3;
  _RegexParser::AST::GlobalMatchingOptionSequence_optional result;

  v2 = v1;
  if (!*((_QWORD *)a1._rawValue + 2))
  {
    swift_bridgeObjectRelease();
    a1._rawValue = 0;
  }
  v2->_rawValue = a1._rawValue;
  result.value.options = a1;
  result.is_nil = v3;
  return result;
}

void AST.GlobalMatchingOptionSequence.location.getter(uint64x2_t *a1@<X8>)
{
  int8x16_t **v1;
  int8x16_t *v2;
  uint64_t v3;
  uint64x2_t *v4;
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  uint64x2_t v8;
  int64x2_t v9;

  v2 = *v1;
  v3 = (*v1)[1].i64[0];
  if (v3)
  {
    v4 = (uint64x2_t *)&v2[3 * v3];
    v5 = v2[4];
    v6 = (int8x16_t)vcgtq_u64(vshrq_n_u64((uint64x2_t)v5, 0xEuLL), vshrq_n_u64(v4[1], 0xEuLL));
    v7.i64[0] = v4[1].i64[0];
    v7.i64[1] = v2[4].i64[1];
    v5.i64[1] = v4[1].i64[1];
    v8 = (uint64x2_t)vbslq_s8(v6, v7, v5);
    v9 = (int64x2_t)vshrq_n_u64(v8, 0xEuLL);
    if ((vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)v9, (uint64x2_t)vdupq_laneq_s64(v9, 1))).u8[0] & 1) == 0)
    {
      *a1 = v8;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64x2_t *Source.Location.union(with:)@<X0>(uint64x2_t *result@<X0>, uint64x2_t *a2@<X8>)
{
  uint64x2_t *v2;
  int8x16_t v3;
  int8x16_t v4;
  uint64x2_t v5;
  int64x2_t v6;

  v3 = *(int8x16_t *)v2;
  v4.i64[0] = result->i64[0];
  v4.i64[1] = v2->i64[1];
  v3.i64[1] = result->i64[1];
  v5 = (uint64x2_t)vbslq_s8((int8x16_t)vcgtq_u64(vshrq_n_u64(*v2, 0xEuLL), vshrq_n_u64(*result, 0xEuLL)), v4, v3);
  v6 = (int64x2_t)vshrq_n_u64(v5, 0xEuLL);
  if ((vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)v6, (uint64x2_t)vdupq_laneq_s64(v6, 1))).u8[0] & 1) != 0)
    __break(1u);
  else
    *a2 = v5;
  return result;
}

void AST.GlobalMatchingOptionSequence.hash(into:)(uint64_t a1)
{
  uint64_t *v1;

  specialized Array<A>.hash(into:)(a1, *v1);
}

uint64_t static AST.GlobalMatchingOptionSequence.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

Swift::Int AST.GlobalMatchingOptionSequence.hashValue.getter()
{
  return AST.GlobalMatchingOptionSequence.hashValue.getter((void (*)(_BYTE *, uint64_t))specialized Array<A>.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.GlobalMatchingOptionSequence(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AST.GlobalMatchingOptionSequence(a1, a2, (void (*)(_BYTE *, uint64_t))specialized Array<A>.hash(into:));
}

void protocol witness for Hashable.hash(into:) in conformance AST.GlobalMatchingOptionSequence(uint64_t a1)
{
  uint64_t *v1;

  specialized Array<A>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.GlobalMatchingOptionSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AST.GlobalMatchingOptionSequence(a1, a2, a3, (void (*)(_BYTE *, uint64_t))specialized Array<A>.hash(into:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AST.GlobalMatchingOptionSequence(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for _ASTParent.children.getter in conformance AST.Concatenation()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for _ASTParent.children.getter in conformance AST.Group()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 104);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Node>);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1DF003EB0;
  *(_QWORD *)(v2 + 32) = v1;
  swift_retain();
  return v2;
}

__n128 protocol witness for _ASTNode.location.getter in conformance AST.Group@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = v1[7];
  *a1 = result;
  return result;
}

__n128 AST.Group.location.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = v1[7];
  *a1 = result;
  return result;
}

__n128 AST.Quantification.location.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = v1[7];
  *a1 = result;
  return result;
}

void AST.AbsentFunction.children.getter()
{
  __asm { BR              X10 }
}

uint64_t sub_1DEF81098()
{
  unsigned int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = v1 + 24;
  v5 = *(_QWORD *)(v1 + 24);
  v3 = *(_QWORD *)(v4 + 8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Node>);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1DF003EB0;
  *(_QWORD *)(v6 + 32) = v2;
  outlined copy of AST.AbsentFunction.Kind(v2, v5, v3, v0);
  return v6;
}

void protocol witness for _ASTParent.children.getter in conformance AST.AbsentFunction()
{
  __asm { BR              X10 }
}

uint64_t sub_1DEF81180()
{
  unsigned int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = v1 + 24;
  v5 = *(_QWORD *)(v1 + 24);
  v3 = *(_QWORD *)(v4 + 8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Node>);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1DF003EB0;
  *(_QWORD *)(v6 + 32) = v2;
  outlined copy of AST.AbsentFunction.Kind(v2, v5, v3, v0);
  return v6;
}

uint64_t AST.Atom.kind.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of AST.Atom(v1, a1, type metadata accessor for AST.Atom.Kind);
}

__n128 AST.Atom.location.getter@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  __n128 result;

  result = *(__n128 *)(v1 + *(int *)(type metadata accessor for AST.Atom(0) + 20));
  *a1 = result;
  return result;
}

uint64_t AST.Atom.init(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD *v7;

  v4 = *a2;
  v5 = a2[1];
  outlined init with take of AST.Atom.Kind(a1, a3, type metadata accessor for AST.Atom.Kind);
  result = type metadata accessor for AST.Atom(0);
  v7 = (_QWORD *)(a3 + *(int *)(result + 20));
  *v7 = v4;
  v7[1] = v5;
  return result;
}

void AST.Atom.Kind.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  char *v7;
  uint64_t v8;

  v1 = type metadata accessor for AST.Atom.CharacterProperty(0);
  MEMORY[0x1E0C80A78](v1, v2);
  v3 = type metadata accessor for AST.Atom.Kind(0);
  MEMORY[0x1E0C80A78](v3, v4);
  outlined init with copy of AST.Atom(v0, (uint64_t)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  v7 = (char *)sub_1DEF813A4 + 4 * byte_1DEFFD9EA[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1DEF813A4()
{
  Hasher._combine(_:)(0);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

BOOL static AST.Atom.Scalar.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2)
    return 0;
  return (*(_QWORD *)(a1 + 8) ^ *(_QWORD *)(a2 + 8)) < 0x4000
      && (*(_QWORD *)(a1 + 16) ^ *(_QWORD *)(a2 + 16)) < 0x4000uLL;
}

uint64_t static AST.Atom.ScalarSequence.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = a1[1];
  v3 = a2[1];
  if (specialized static Array<A>.== infix(_:_:)(*a1, *a2))
    v4 = specialized static Array<A>.== infix(_:_:)(v2, v3);
  else
    v4 = 0;
  return v4 & 1;
}

uint64_t static AST.Atom.CharacterProperty.== infix(_:_:)(uint64_t a1, char *a2)
{
  char v4;
  uint64_t v5;
  char v6;

  specialized static AST.Atom.CharacterProperty.Kind.== infix(_:_:)(a1, a2);
  if ((v4 & 1) != 0
    && (v5 = type metadata accessor for AST.Atom.CharacterProperty(0),
        *(unsigned __int8 *)(a1 + *(int *)(v5 + 20)) == a2[*(int *)(v5 + 20)]))
  {
    v6 = *(_BYTE *)(a1 + *(int *)(v5 + 24)) ^ a2[*(int *)(v5 + 24)] ^ 1;
  }
  else
  {
    v6 = 0;
  }
  return v6 & 1;
}

Swift::Int AST.Atom.Kind.hashValue.getter()
{
  return AST.Atom.Kind.hashValue.getter((void (*)(_BYTE *))AST.Atom.Kind.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Atom.Kind(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AST.Atom.Kind(a1, a2, (void (*)(_BYTE *))AST.Atom.Kind.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.Kind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.Kind(a1, a2, a3, (void (*)(_BYTE *))AST.Atom.Kind.hash(into:));
}

void AST.Atom.hash(into:)()
{
  uint64_t v0;
  _QWORD *v1;
  unint64_t v2;

  AST.Atom.Kind.hash(into:)();
  v1 = (_QWORD *)(v0 + *(int *)(type metadata accessor for AST.Atom(0) + 20));
  v2 = v1[1];
  Hasher._combine(_:)(*v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
}

Swift::Int AST.Atom.hashValue.getter()
{
  uint64_t v0;
  _QWORD *v1;
  unint64_t v2;

  Hasher.init(_seed:)();
  AST.Atom.Kind.hash(into:)();
  v1 = (_QWORD *)(v0 + *(int *)(type metadata accessor for AST.Atom(0) + 20));
  v2 = v1[1];
  Hasher._combine(_:)(*v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Atom(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  unint64_t v4;

  Hasher.init(_seed:)();
  AST.Atom.Kind.hash(into:)();
  v3 = (_QWORD *)(v1 + *(int *)(a1 + 20));
  v4 = v3[1];
  Hasher._combine(_:)(*v3 >> 14);
  Hasher._combine(_:)(v4 >> 14);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.Atom(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  AST.Atom.Kind.hash(into:)();
  v4 = (_QWORD *)(v2 + *(int *)(a2 + 20));
  v5 = v4[1];
  Hasher._combine(_:)(*v4 >> 14);
  Hasher._combine(_:)(v5 >> 14);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  Hasher.init(_seed:)();
  AST.Atom.Kind.hash(into:)();
  v4 = (_QWORD *)(v2 + *(int *)(a2 + 20));
  v5 = v4[1];
  Hasher._combine(_:)(*v4 >> 14);
  Hasher._combine(_:)(v5 >> 14);
  return Hasher._finalize()();
}

__n128 protocol witness for _ASTNode.location.getter in conformance AST.Atom@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v2;
  __n128 result;

  result = *(__n128 *)(v2 + *(int *)(a1 + 20));
  *a2 = result;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AST.Atom(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _BOOL8 result;

  specialized static AST.Atom.Kind.== infix(_:_:)(a1, a2);
  result = 0;
  if ((v6 & 1) != 0)
  {
    v7 = *(int *)(a3 + 20);
    v8 = a1 + v7;
    v9 = *(_QWORD *)(a1 + v7);
    v10 = (_QWORD *)(a2 + v7);
    if (!((*v10 ^ v9) >> 14) && (*(_QWORD *)(v8 + 8) ^ v10[1]) < 0x4000)
      return 1;
  }
  return result;
}

uint64_t AST.Atom._dumpBase.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v1 = type metadata accessor for AST.Atom.CharacterProperty(0);
  MEMORY[0x1E0C80A78](v1, v2);
  v3 = type metadata accessor for AST.Atom.Kind(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  AST.Atom.literalStringValue.getter();
  if (!v8)
  {
    outlined init with copy of AST.Atom(v0, (uint64_t)v6, type metadata accessor for AST.Atom.Kind);
    v11 = (char *)&loc_1DEF81CD4 + *((int *)qword_1DEF82428 + swift_getEnumCaseMultiPayload());
    __asm { BR              X10 }
  }
  v13 = 10665455;
  v14 = 0xA300000000000000;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 10730991;
  v9._object = (void *)0xA300000000000000;
  String.append(_:)(v9);
  return v13;
}

void sub_1DEF81CE4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  Swift::String v15;

  *(_DWORD *)(v0 + 16) = *(unsigned __int8 *)(v3 + 72);
  v5 = *(_QWORD *)(v3 + 48);
  *(_QWORD *)v0 = *(_QWORD *)(v3 + 40);
  *(_QWORD *)(v0 + 8) = v5;
  v6 = *(_BYTE *)(v3 + 32);
  v8 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v11 = v3;
  v9 = *(_QWORD *)v3;
  v10 = *(_QWORD *)(v11 + 8);
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = 0xE000000000000000;
  *(_QWORD *)(v4 - 248) = v9;
  *(_QWORD *)(v4 - 240) = v10;
  *(_QWORD *)(v4 - 232) = v8;
  *(_QWORD *)(v4 - 224) = v7;
  *(_BYTE *)(v4 - 216) = v6;
  _print_unlocked<A, B>(_:_:)();
  v12 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 184) = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 192) = v12;
  if ((*(_DWORD *)(v0 + 16) & 1) != 0)
  {
    outlined consume of AST.Reference.Kind(v9, v10, v8, v7, v6);
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 8) & 1;
    *(_BYTE *)(v4 - 248) = v13;
    if ((v13 & 1) == 0)
    {
      *(_QWORD *)(v4 - 248) = *(_QWORD *)v0;
      v1 = dispatch thunk of CustomStringConvertible.description.getter();
      v2 = v14;
    }
    v15._countAndFlagsBits = v1;
    v15._object = v2;
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    outlined consume of AST.Reference.Kind(v9, v10, v8, v7, v6);
  }
  JUMPOUT(0x1DEF81C68);
}

void sub_1DEF82214()
{
  JUMPOUT(0x1DEF81C68);
}

void sub_1DEF82378()
{
  uint64_t v0;

  outlined destroy of AST.Atom(v0, type metadata accessor for AST.Atom.Kind);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x1DEF82428);
}

uint64_t AST.Atom.Number.value.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t AST.Atom.Number.value.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)v2 = result;
  *(_BYTE *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*AST.Atom.Number.value.modify())()
{
  return AST.root.modify;
}

__n128 AST.Atom.Number.location.setter(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  result = *a1;
  v1[1] = *a1;
  return result;
}

uint64_t (*AST.Atom.Number.location.modify())()
{
  return AST.root.modify;
}

void AST.Atom.Number.hash(into:)()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  Swift::UInt v3;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  if (*(_BYTE *)(v0 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v3 = *(_QWORD *)v0;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
  }
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v1 >> 14);
}

Swift::Int AST.Atom.Number.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt v1;
  int v2;
  unint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 8);
  v4 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  Hasher.init(_seed:)();
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v4 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Atom.Number()
{
  uint64_t v0;
  Swift::UInt v1;
  int v2;
  unint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 8);
  v4 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  Hasher.init(_seed:)();
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v4 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.Atom.Number()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  Swift::UInt v3;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  if (*(_BYTE *)(v0 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v3 = *(_QWORD *)v0;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
  }
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v1 >> 14);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.Number()
{
  uint64_t v0;
  Swift::UInt v1;
  int v2;
  unint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 8);
  v4 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  Hasher.init(_seed:)();
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v4 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  return Hasher._finalize()();
}

uint64_t AST.Atom.Scalar.value.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t AST.Atom.Scalar.value.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*AST.Atom.Scalar.value.modify())()
{
  return AST.root.modify;
}

uint64_t (*AST.Atom.Scalar.location.modify())()
{
  return AST.root.modify;
}

__n128 AST.Atom.Scalar.init(_:_:)@<Q0>(int a1@<W0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  __n128 result;

  *(_DWORD *)a3 = a1;
  result = *a2;
  *(__n128 *)(a3 + 8) = *a2;
  return result;
}

void AST.Atom.Scalar.hash(into:)()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  Hasher._combine(_:)(*(_DWORD *)v0);
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
}

Swift::Int AST.Atom.Scalar.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt32 v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_DWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Atom.Scalar()
{
  uint64_t v0;
  Swift::UInt32 v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_DWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.Atom.Scalar()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  Hasher._combine(_:)(*(_DWORD *)v0);
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.Scalar()
{
  uint64_t v0;
  Swift::UInt32 v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_DWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AST.Atom.Scalar(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2)
    return 0;
  return (*(_QWORD *)(a1 + 8) ^ *(_QWORD *)(a2 + 8)) < 0x4000
      && (*(_QWORD *)(a1 + 16) ^ *(_QWORD *)(a2 + 16)) < 0x4000uLL;
}

uint64_t AST.Atom.ScalarSequence.scalars.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*AST.Atom.ScalarSequence.scalars.modify())()
{
  return AST.root.modify;
}

uint64_t AST.Atom.ScalarSequence.trivia.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*AST.Atom.ScalarSequence.trivia.modify())()
{
  return AST.root.modify;
}

_RegexParser::AST::Atom::ScalarSequence __swiftcall AST.Atom.ScalarSequence.init(_:trivia:)(Swift::OpaquePointer _, Swift::OpaquePointer trivia)
{
  Swift::OpaquePointer *v2;
  _RegexParser::AST::Atom::ScalarSequence result;

  if (*((_QWORD *)_._rawValue + 2) < 2uLL)
  {
    __break(1u);
  }
  else
  {
    v2->_rawValue = _._rawValue;
    v2[1]._rawValue = trivia._rawValue;
  }
  result.trivia = trivia;
  result.scalars = _;
  return result;
}

uint64_t AST.Atom.ScalarSequence.scalarValues.getter()
{
  uint64_t *v0;
  uint64_t v1;
  int64_t v2;
  uint64_t result;
  unint64_t v4;
  int *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    v4 = 0;
    result = v9;
    v5 = (int *)(v1 + 32);
    while (v4 < *(_QWORD *)(v1 + 16))
    {
      v6 = *v5;
      v10 = result;
      v8 = *(_QWORD *)(result + 16);
      v7 = *(_QWORD *)(result + 24);
      if (v8 >= v7 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1);
        result = v10;
      }
      ++v4;
      *(_QWORD *)(result + 16) = v8 + 1;
      *(_DWORD *)(result + 4 * v8 + 32) = v6;
      v5 += 6;
      if (v2 == v4)
        return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t result;
  char *v24;
  void (*v25)(char *, _QWORD);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, char *);
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char v41[32];
  uint64_t v42;

  v30 = a5;
  v31 = a8;
  v36 = a1;
  v37 = a2;
  v29 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v38 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v13 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v12);
  v34 = (char *)&v27 - v14;
  v39 = a4;
  MEMORY[0x1E0C80A78](v13, v15);
  v33 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = swift_getAssociatedTypeWitness();
  v32 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v27 - v19;
  v21 = dispatch thunk of Collection.count.getter();
  if (!v21)
    return static Array._allocateUninitialized(_:)();
  v22 = v21;
  v28 = v17;
  v42 = MEMORY[0x1DF0F3A08](v39);
  v35 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v22);
  v39 = v20;
  result = dispatch thunk of Collection.startIndex.getter();
  if (v22 < 0)
  {
    __break(1u);
  }
  else
  {
    v24 = v34;
    while (1)
    {
      v25 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
      (*(void (**)(char *))(v11 + 16))(v24);
      v25(v41, 0);
      v26 = v40;
      v36(v24, v38);
      if (v26)
        break;
      v40 = 0;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v24, AssociatedTypeWitness);
      ContiguousArray.append(_:)();
      dispatch thunk of Collection.formIndex(after:)();
      if (!--v22)
      {
        (*(void (**)(char *, uint64_t))(v32 + 8))(v39, v28);
        return v42;
      }
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v24, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v39, v28);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v29 + 32))(v31, v38, v30);
  }
  return result;
}

uint64_t AST.Atom.ScalarSequence.hash(into:)(uint64_t a1)
{
  return AST.Alternation.hash(into:)(a1, specialized Array<A>.hash(into:), (uint64_t (*)(uint64_t, uint64_t))specialized Array<A>.hash(into:));
}

uint64_t AST.Alternation.hash(into:)(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;

  v6 = *v3;
  v7 = v3[1];
  a2(a1, v6);
  return a3(a1, v7);
}

Swift::Int AST.Atom.ScalarSequence.hashValue.getter()
{
  return AST.Alternation.hashValue.getter((void (*)(_BYTE *, uint64_t))specialized Array<A>.hash(into:), (void (*)(_BYTE *, uint64_t))specialized Array<A>.hash(into:));
}

Swift::Int AST.Alternation.hashValue.getter(void (*a1)(_BYTE *, uint64_t), void (*a2)(_BYTE *, uint64_t))
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[72];

  v6 = *v2;
  v5 = v2[1];
  Hasher.init(_seed:)();
  a1(v8, v6);
  a2(v8, v5);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Atom.ScalarSequence(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AST.Alternation(a1, a2, (void (*)(_BYTE *, uint64_t))specialized Array<A>.hash(into:), (void (*)(_BYTE *, uint64_t))specialized Array<A>.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Alternation(uint64_t a1, uint64_t a2, void (*a3)(_BYTE *, uint64_t), void (*a4)(_BYTE *, uint64_t))
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[72];

  v8 = *v4;
  v7 = v4[1];
  Hasher.init(_seed:)();
  a3(v10, v8);
  a4(v10, v7);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AST.Atom.ScalarSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance AST.Alternation(a1, a2, a3, specialized Array<A>.hash(into:), (uint64_t (*)(uint64_t, uint64_t))specialized Array<A>.hash(into:));
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AST.Alternation(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;

  v7 = *v5;
  v8 = v5[1];
  a4(a1, v7);
  return a5(a1, v8);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.ScalarSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Alternation(a1, a2, a3, (void (*)(_BYTE *, uint64_t))specialized Array<A>.hash(into:), (void (*)(_BYTE *, uint64_t))specialized Array<A>.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Alternation(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *, uint64_t), void (*a5)(_BYTE *, uint64_t))
{
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[72];

  v9 = *v5;
  v8 = v5[1];
  Hasher.init(_seed:)();
  a4(v11, v9);
  a5(v11, v8);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AST.Atom.ScalarSequence(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = a1[1];
  v3 = a2[1];
  if (specialized static Array<A>.== infix(_:_:)(*a1, *a2))
    v4 = specialized static Array<A>.== infix(_:_:)(v2, v3);
  else
    v4 = 0;
  return v4 & 1;
}

uint64_t AST.Atom.EscapedBuiltin.character.getter()
{
  char *v0;

  return qword_1DF003A10[*v0];
}

uint64_t static AST.Atom.EscapedBuiltin.fromCharacter(_:inCustomCharacterClass:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, char *a4@<X8>)
{
  uint64_t v6;
  char v8;

  v6 = result;
  if (result == 97 && a2 == 0xE100000000000000)
  {
    v8 = 0;
  }
  else
  {
    result = _stringCompareWithSmolCheck(_:_:expecting:)();
    v8 = 0;
    if ((result & 1) == 0)
    {
      if (v6 == 101 && a2 == 0xE100000000000000
        || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        v8 = 1;
      }
      else if (v6 == 102 && a2 == 0xE100000000000000
             || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        v8 = 2;
      }
      else if (v6 == 110 && a2 == 0xE100000000000000
             || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        v8 = 3;
      }
      else if (v6 == 114 && a2 == 0xE100000000000000
             || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        v8 = 4;
      }
      else if (v6 == 116 && a2 == 0xE100000000000000
             || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        v8 = 5;
      }
      else if (v6 == 100 && a2 == 0xE100000000000000
             || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        v8 = 7;
      }
      else if (v6 == 68 && a2 == 0xE100000000000000
             || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        v8 = 8;
      }
      else if (v6 == 104 && a2 == 0xE100000000000000
             || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        v8 = 9;
      }
      else if (v6 == 72 && a2 == 0xE100000000000000
             || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        v8 = 10;
      }
      else if (v6 == 115 && a2 == 0xE100000000000000
             || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        v8 = 13;
      }
      else if (v6 == 83 && a2 == 0xE100000000000000
             || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        v8 = 14;
      }
      else if (v6 == 118 && a2 == 0xE100000000000000
             || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        v8 = 15;
      }
      else if (v6 == 86 && a2 == 0xE100000000000000
             || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        v8 = 16;
      }
      else if (v6 == 119 && a2 == 0xE100000000000000
             || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        v8 = 17;
      }
      else if (v6 == 87 && a2 == 0xE100000000000000
             || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        v8 = 18;
      }
      else if (v6 == 98 && a2 == 0xE100000000000000
             || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        if ((a3 & 1) != 0)
          v8 = 19;
        else
          v8 = 21;
      }
      else if ((a3 & 1) != 0)
      {
        v8 = 31;
      }
      else if (v6 == 67 && a2 == 0xE100000000000000
             || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        v8 = 6;
      }
      else if (v6 == 78 && a2 == 0xE100000000000000
             || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        v8 = 11;
      }
      else if (v6 == 82 && a2 == 0xE100000000000000
             || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        v8 = 12;
      }
      else if (v6 == 88 && a2 == 0xE100000000000000
             || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        v8 = 20;
      }
      else if (v6 == 66 && a2 == 0xE100000000000000
             || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        v8 = 22;
      }
      else if (v6 == 65 && a2 == 0xE100000000000000
             || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        v8 = 23;
      }
      else if (v6 == 90 && a2 == 0xE100000000000000
             || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        v8 = 24;
      }
      else if (v6 == 122 && a2 == 0xE100000000000000
             || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        v8 = 25;
      }
      else if (v6 == 71 && a2 == 0xE100000000000000
             || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        v8 = 26;
      }
      else if (v6 == 75 && a2 == 0xE100000000000000
             || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        v8 = 27;
      }
      else if (v6 == 79 && a2 == 0xE100000000000000
             || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        v8 = 28;
      }
      else if (v6 == 121 && a2 == 0xE100000000000000
             || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        v8 = 29;
      }
      else
      {
        v8 = 30;
        if (v6 != 89 || a2 != 0xE100000000000000)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) != 0)
            v8 = 30;
          else
            v8 = 31;
        }
      }
    }
  }
  *a4 = v8;
  return result;
}

_RegexParser::AST::Atom::EscapedBuiltin_optional __swiftcall AST.Atom.EscapedBuiltin.init(_:inCustomCharacterClass:)(Swift::String _, Swift::Bool inCustomCharacterClass)
{
  _BYTE *v2;
  _BYTE *v3;
  _RegexParser::AST::Atom::EscapedBuiltin_optional result;
  char v5;

  v3 = v2;
  static AST.Atom.EscapedBuiltin.fromCharacter(_:inCustomCharacterClass:)(_._countAndFlagsBits, (uint64_t)_._object, inCustomCharacterClass, &v5);
  result.value = swift_bridgeObjectRelease();
  *v3 = v5;
  return result;
}

uint64_t AST.Atom.CharacterProperty.kind.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of AST.Atom(v1, a1, type metadata accessor for AST.Atom.CharacterProperty.Kind);
}

uint64_t AST.Atom.CharacterProperty.kind.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of AST.Atom.CharacterProperty.Kind(a1, v1, type metadata accessor for AST.Atom.CharacterProperty.Kind);
}

uint64_t (*AST.Atom.CharacterProperty.kind.modify())()
{
  return AST.root.modify;
}

uint64_t AST.Atom.CharacterProperty.isInverted.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AST.Atom.CharacterProperty(0) + 20));
}

uint64_t AST.Atom.CharacterProperty.isInverted.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AST.Atom.CharacterProperty(0);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*AST.Atom.CharacterProperty.isInverted.modify())(_QWORD)
{
  type metadata accessor for AST.Atom.CharacterProperty(0);
  return AST.root.modify;
}

uint64_t AST.Atom.CharacterProperty.isPOSIX.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AST.Atom.CharacterProperty(0) + 24));
}

uint64_t AST.Atom.CharacterProperty.isPOSIX.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AST.Atom.CharacterProperty(0);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*AST.Atom.CharacterProperty.isPOSIX.modify())(_QWORD)
{
  type metadata accessor for AST.Atom.CharacterProperty(0);
  return AST.root.modify;
}

uint64_t AST.Atom.CharacterProperty.init(_:isInverted:isPOSIX:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result;

  outlined init with take of AST.Atom.Kind(a1, a4, type metadata accessor for AST.Atom.CharacterProperty.Kind);
  result = type metadata accessor for AST.Atom.CharacterProperty(0);
  *(_BYTE *)(a4 + *(int *)(result + 20)) = a2;
  *(_BYTE *)(a4 + *(int *)(result + 24)) = a3;
  return result;
}

uint64_t AST.Atom.CharacterProperty._dumpBase.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
  _print_unlocked<A, B>(_:_:)();
  v1 = type metadata accessor for AST.Atom.CharacterProperty(0);
  if (*(_BYTE *)(v0 + *(int *)(v1 + 20)))
    v2 = 1702195828;
  else
    v2 = 0x65736C6166;
  if (*(_BYTE *)(v0 + *(int *)(v1 + 20)))
    v3 = 0xE400000000000000;
  else
    v3 = 0xE500000000000000;
  v4 = v3;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease();
  if (*(_BYTE *)(v0 + *(int *)(v1 + 24)))
    v5 = 1702195828;
  else
    v5 = 0x65736C6166;
  if (*(_BYTE *)(v0 + *(int *)(v1 + 24)))
    v6 = 0xE400000000000000;
  else
    v6 = 0xE500000000000000;
  v7 = v6;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease();
  return 0;
}

void AST.Atom.CharacterProperty.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;

  AST.Atom.CharacterProperty.Kind.hash(into:)();
  v1 = type metadata accessor for AST.Atom.CharacterProperty(0);
  Hasher._combine(_:)(*(_BYTE *)(v0 + *(int *)(v1 + 20)));
  Hasher._combine(_:)(*(_BYTE *)(v0 + *(int *)(v1 + 24)));
}

Swift::Int AST.Atom.CharacterProperty.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  Hasher.init(_seed:)();
  AST.Atom.CharacterProperty.Kind.hash(into:)();
  v1 = type metadata accessor for AST.Atom.CharacterProperty(0);
  Hasher._combine(_:)(*(_BYTE *)(v0 + *(int *)(v1 + 20)));
  Hasher._combine(_:)(*(_BYTE *)(v0 + *(int *)(v1 + 24)));
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Atom.CharacterProperty(uint64_t a1)
{
  uint64_t v1;

  Hasher.init(_seed:)();
  AST.Atom.CharacterProperty.Kind.hash(into:)();
  Hasher._combine(_:)(*(_BYTE *)(v1 + *(int *)(a1 + 20)));
  Hasher._combine(_:)(*(_BYTE *)(v1 + *(int *)(a1 + 24)));
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.Atom.CharacterProperty(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  AST.Atom.CharacterProperty.Kind.hash(into:)();
  Hasher._combine(_:)(*(_BYTE *)(v2 + *(int *)(a2 + 20)));
  Hasher._combine(_:)(*(_BYTE *)(v2 + *(int *)(a2 + 24)));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.CharacterProperty(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  Hasher.init(_seed:)();
  AST.Atom.CharacterProperty.Kind.hash(into:)();
  Hasher._combine(_:)(*(_BYTE *)(v2 + *(int *)(a2 + 20)));
  Hasher._combine(_:)(*(_BYTE *)(v2 + *(int *)(a2 + 24)));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AST.Atom.CharacterProperty(uint64_t a1, char *a2, uint64_t a3)
{
  char v6;
  char v7;

  specialized static AST.Atom.CharacterProperty.Kind.== infix(_:_:)(a1, a2);
  if ((v6 & 1) != 0 && *(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) == a2[*(int *)(a3 + 20)])
    v7 = *(_BYTE *)(a1 + *(int *)(a3 + 24)) ^ a2[*(int *)(a3 + 24)] ^ 1;
  else
    v7 = 0;
  return v7 & 1;
}

void AST.Atom.CharacterProperty.Kind.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD);
  char *v9;
  uint64_t v10;

  v1 = type metadata accessor for Unicode.CanonicalCombiningClass();
  MEMORY[0x1E0C80A78](v1, v2);
  v3 = type metadata accessor for Unicode.NumericType();
  MEMORY[0x1E0C80A78](v3, v4);
  v5 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
  MEMORY[0x1E0C80A78](v5, v6);
  outlined init with copy of AST.Atom(v0, (uint64_t)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  v9 = (char *)sub_1DEF83D1C + 4 * byte_1DEFFD9FC[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1DEF83D1C()
{
  char *v0;
  uint64_t v1;
  char v2;

  v2 = *v0;
  Hasher._combine(_:)(3uLL);
  *(_BYTE *)(v1 - 88) = v2;
  Unicode.ExtendedGeneralCategory.rawValue.getter();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t specialized == infix<A>(_:_:)(char a1, char a2)
{
  char v3;

  if (*(_QWORD *)&aAlnum_1[8 * a1] == *(_QWORD *)&aAlnum_1[8 * a2] && qword_1DF003C18[a1] == qword_1DF003C18[a2])
    v3 = 1;
  else
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

{
  char v2;

  if (qword_1DF003B08[a1] == qword_1DF003B08[a2])
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease_n();
  return v2 & 1;
}

Swift::Int AST.Atom.CharacterProperty.Kind.hashValue.getter()
{
  return AST.Atom.Kind.hashValue.getter((void (*)(_BYTE *))AST.Atom.CharacterProperty.Kind.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Atom.CharacterProperty.Kind(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AST.Atom.Kind(a1, a2, (void (*)(_BYTE *))AST.Atom.CharacterProperty.Kind.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.CharacterProperty.Kind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.Kind(a1, a2, a3, (void (*)(_BYTE *))AST.Atom.CharacterProperty.Kind.hash(into:));
}

_RegexParser::AST::Atom::CharacterProperty::PCRESpecialCategory_optional __swiftcall AST.Atom.CharacterProperty.PCRESpecialCategory.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  _RegexParser::AST::Atom::CharacterProperty::PCRESpecialCategory_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of AST.Atom.CharacterProperty.PCRESpecialCategory.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  v7 = 5;
  if (v5 < 5)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t AST.Atom.CharacterProperty.PCRESpecialCategory.rawValue.getter()
{
  char *v0;

  return qword_1DF003B08[*v0];
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AST.Atom.CharacterProperty.PCRESpecialCategory(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

_RegexParser::AST::Atom::CharacterProperty::PCRESpecialCategory_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AST.Atom.CharacterProperty.PCRESpecialCategory(Swift::String *a1)
{
  return AST.Atom.CharacterProperty.PCRESpecialCategory.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AST.Atom.CharacterProperty.PCRESpecialCategory(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_1DF003B08[*v1];
  a1[1] = 0xE300000000000000;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Atom.CharacterProperty.PCRESpecialCategory()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int specialized RawRepresentable<>.hashValue.getter()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AST.Atom.CharacterProperty.PCRESpecialCategory()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.CharacterProperty.PCRESpecialCategory()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

_RegexParser::AST::Atom::CharacterProperty::JavaSpecial_optional __swiftcall AST.Atom.CharacterProperty.JavaSpecial.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  _RegexParser::AST::Atom::CharacterProperty::JavaSpecial_optional result;
  char v5;

  v2 = v1;
  v3 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  result.value = swift_bridgeObjectRelease();
  v5 = 18;
  if (v3 < 0x12)
    v5 = v3;
  *v2 = v5;
  return result;
}

void *static AST.Atom.CharacterProperty.JavaSpecial.allCases.getter()
{
  return &outlined read-only object #0 of static AST.Atom.CharacterProperty.JavaSpecial.allCases.getter;
}

uint64_t AST.Atom.CharacterProperty.JavaSpecial.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1DEF8445C + 4 * byte_1DEFFDA0E[*v0]))(0xD000000000000017, 0x80000001DF0040D0);
}

uint64_t sub_1DEF8445C()
{
  return 0x68706C416176616ALL;
}

uint64_t sub_1DEF84480()
{
  return 0x696665446176616ALL;
}

uint64_t sub_1DEF844A0()
{
  return 0x696769446176616ALL;
}

uint64_t sub_1DEF844BC()
{
  return 0x6F6564496176616ALL;
}

uint64_t sub_1DEF844E0()
{
  return 0x434F53496176616ALL;
}

uint64_t sub_1DEF84504(uint64_t a1)
{
  return a1 - 1;
}

uint64_t sub_1DEF84618()
{
  return 0x746968576176616ALL;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AST.Atom.CharacterProperty.JavaSpecial(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance AST.Atom.CharacterProperty.JavaSpecial(a1, a2, a3, a4, AST.Atom.CharacterProperty.JavaSpecial.rawValue.getter);
}

_RegexParser::AST::Atom::CharacterProperty::JavaSpecial_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AST.Atom.CharacterProperty.JavaSpecial(Swift::String *a1)
{
  return AST.Atom.CharacterProperty.JavaSpecial.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AST.Atom.CharacterProperty.JavaSpecial@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = AST.Atom.CharacterProperty.JavaSpecial.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Atom.CharacterProperty.JavaSpecial(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AST.Atom.CharacterProperty.JavaSpecial(a1, a2, (void (*)(uint64_t))AST.Atom.CharacterProperty.JavaSpecial.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AST.Atom.CharacterProperty.JavaSpecial(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance AST.Atom.CharacterProperty.JavaSpecial(a1, a2, a3, (void (*)(void))AST.Atom.CharacterProperty.JavaSpecial.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.CharacterProperty.JavaSpecial(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.CharacterProperty.JavaSpecial(a1, a2, a3, (void (*)(uint64_t))AST.Atom.CharacterProperty.JavaSpecial.rawValue.getter);
}

void protocol witness for static CaseIterable.allCases.getter in conformance AST.Atom.CharacterProperty.JavaSpecial(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static AST.Atom.CharacterProperty.JavaSpecial.allCases.getter;
}

void AST.Atom.Callout.PCRE.Argument.hash(into:)()
{
  uint64_t v0;
  Swift::UInt v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  if ((*(_BYTE *)(v0 + 32) & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 16);
    v3 = *(_QWORD *)(v0 + 24);
    Hasher._combine(_:)(0);
    if ((v2 & 1) != 0)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v1);
    }
    Hasher._combine(_:)(v4 >> 14);
    Hasher._combine(_:)(v3 >> 14);
  }
}

Swift::Int AST.Atom.Callout.PCRE.Argument.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  char v5;

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v4 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v5 = *(_BYTE *)(v0 + 32);
  Hasher.init(_seed:)();
  if ((v5 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    if ((v2 & 1) != 0)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v1);
    }
    Hasher._combine(_:)(v4 >> 14);
    Hasher._combine(_:)(v3 >> 14);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.Atom.Callout.PCRE.Argument()
{
  uint64_t v0;
  Swift::UInt v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  if ((*(_BYTE *)(v0 + 32) & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 16);
    v3 = *(_QWORD *)(v0 + 24);
    Hasher._combine(_:)(0);
    if ((v2 & 1) != 0)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v1);
    }
    Hasher._combine(_:)(v4 >> 14);
    Hasher._combine(_:)(v3 >> 14);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.Callout.PCRE.Argument()
{
  uint64_t v0;
  Swift::UInt v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  char v5;

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v4 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v5 = *(_BYTE *)(v0 + 32);
  Hasher.init(_seed:)();
  if ((v5 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    if ((v2 & 1) != 0)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v1);
    }
    Hasher._combine(_:)(v4 >> 14);
    Hasher._combine(_:)(v3 >> 14);
  }
  return Hasher._finalize()();
}

uint64_t AST.Atom.Callout.PCRE.arg.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_BYTE *)(v1 + 32);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(v1 + 40);
  return outlined copy of AST.Atom.Callout.PCRE.Argument(v2, v3, v4, v5, v6);
}

__n128 AST.Atom.Callout.PCRE.arg.setter(__n128 *a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unsigned __int8 v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  __n128 v8;

  v8 = *a1;
  v2 = a1[1].n128_u64[0];
  v3 = a1[1].n128_u64[1];
  v4 = a1[2].n128_u8[0];
  v5 = a1[2].n128_u64[1];
  v6 = a1[3].n128_u64[0];
  outlined consume of AST.Atom.Callout.PCRE.Argument(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32));
  result = v8;
  *(__n128 *)v1 = v8;
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)(v1 + 24) = v3;
  *(_BYTE *)(v1 + 32) = v4;
  *(_QWORD *)(v1 + 40) = v5;
  *(_QWORD *)(v1 + 48) = v6;
  return result;
}

uint64_t (*AST.Atom.Callout.PCRE.arg.modify())()
{
  return AST.root.modify;
}

__n128 AST.Atom.Callout.PCRE.init(_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2;
  __int128 v3;
  __n128 result;

  v2 = *(_BYTE *)(a1 + 32);
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v3;
  *(_BYTE *)(a2 + 32) = v2;
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(a2 + 40) = result;
  return result;
}

BOOL AST.Atom.Callout.PCRE.isImplicit.getter()
{
  uint64_t v0;

  return (*(_QWORD *)(v0 + 48) ^ *(_QWORD *)(v0 + 40)) < 0x4000uLL;
}

BOOL Source.Location.isEmpty.getter()
{
  _QWORD *v0;

  return (v0[1] ^ *v0) < 0x4000uLL;
}

void AST.Atom.Callout.PCRE.hash(into:)()
{
  specialized Source.Located<A>.hash(into:)();
}

BOOL static AST.Atom.Callout.PCRE.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[3];
  uint64_t v6;
  _OWORD v7[3];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 48);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  return specialized static Source.Located<A>.== infix(_:_:)((uint64_t)v5, (uint64_t)v7);
}

BOOL specialized static Source.Located<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  v11 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a2 + 24);
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) != 0)
    {
      if (v4 == v9 && v5 == v8)
      {
        outlined retain of Source.Located<AST.Atom.Callout.PCRE.Argument>(a2);
        outlined retain of Source.Located<AST.Atom.Callout.PCRE.Argument>(a1);
        outlined consume of AST.Atom.Callout.PCRE.Argument(v4, v5, v7, v6, 1);
        outlined consume of AST.Atom.Callout.PCRE.Argument(v4, v5, v11, v10, 1);
      }
      else
      {
        v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
        outlined retain of Source.Located<AST.Atom.Callout.PCRE.Argument>(a2);
        outlined retain of Source.Located<AST.Atom.Callout.PCRE.Argument>(a1);
        outlined consume of AST.Atom.Callout.PCRE.Argument(v4, v5, v7, v6, 1);
        outlined consume of AST.Atom.Callout.PCRE.Argument(v9, v8, v11, v10, 1);
        result = 0;
        if ((v19 & 1) == 0)
          return result;
      }
      return !((*(_QWORD *)(a2 + 40) ^ *(_QWORD *)(a1 + 40)) >> 14)
          && (*(_QWORD *)(a1 + 48) ^ *(_QWORD *)(a2 + 48)) < 0x4000;
    }
    outlined retain of Source.Located<AST.Atom.Callout.PCRE.Argument>(a2);
    outlined retain of Source.Located<AST.Atom.Callout.PCRE.Argument>(a1);
    outlined consume of AST.Atom.Callout.PCRE.Argument(v4, v5, v7, v6, 1);
    v14 = v9;
    v15 = v8;
    v16 = v11;
    v17 = v10;
    v18 = 0;
    goto LABEL_12;
  }
  if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    outlined retain of Source.Located<AST.Atom.Callout.PCRE.Argument>(a2);
    outlined consume of AST.Atom.Callout.PCRE.Argument(v4, v5, v7, v6, 0);
    v14 = v9;
    v15 = v8;
    v16 = v11;
    v17 = v10;
    v18 = 1;
LABEL_12:
    outlined consume of AST.Atom.Callout.PCRE.Argument(v14, v15, v16, v17, v18);
    return 0;
  }
  outlined retain of Source.Located<AST.Atom.Callout.PCRE.Argument>(a2);
  outlined consume of AST.Atom.Callout.PCRE.Argument(v4, v5, v7, v6, 0);
  outlined consume of AST.Atom.Callout.PCRE.Argument(v9, v8, v11, v10, 0);
  if ((v5 & 1) != 0)
  {
    if ((v8 & 1) == 0)
      return 0;
  }
  else
  {
    result = 0;
    if ((v8 & 1) != 0 || v4 != v9)
      return result;
  }
  result = 0;
  if (!((v11 ^ (unint64_t)v7) >> 14) && (v10 ^ (unint64_t)v6) < 0x4000)
    return !((*(_QWORD *)(a2 + 40) ^ *(_QWORD *)(a1 + 40)) >> 14)
        && (*(_QWORD *)(a1 + 48) ^ *(_QWORD *)(a2 + 48)) < 0x4000;
  return result;
}

BOOL specialized static Source.Located<A>.== infix(_:_:)(char a1, unint64_t a2, unint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  BOOL v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  _BOOL8 result;

  v10 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v11 = 24155;
  else
    v11 = 91;
  if (v10)
    v12 = 0xE100000000000000;
  else
    v12 = 0xE200000000000000;
  if ((a4 & 1) != 0)
    v13 = 24155;
  else
    v13 = 91;
  if ((a4 & 1) != 0)
    v14 = 0xE200000000000000;
  else
    v14 = 0xE100000000000000;
  if (v11 == v13 && v12 == v14)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = 0;
    if ((v15 & 1) == 0)
      return result;
  }
  return (a5 ^ a2) < 0x4000 && (a6 ^ a3) < 0x4000;
}

{
  char v10;
  _BOOL8 result;

  if (qword_1DF003B30[a1] == qword_1DF003B30[a4])
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease_n();
    result = 0;
    if ((v10 & 1) == 0)
      return result;
  }
  return (a5 ^ a2) < 0x4000 && (a6 ^ a3) < 0x4000;
}

BOOL specialized static Source.Located<A>.== infix(_:_:)(uint64_t a1, unint64_t a2, unint64_t a3, unsigned __int8 a4, uint64_t a5, uint64_t a6)
{
  unint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  _BOOL8 result;

  if (!(_BYTE)a1)
  {
    a1 = a1;
    v10 = 0xE000000000000000;
    v11 = a4;
    if (a4)
      goto LABEL_6;
LABEL_12:
    v13 = 0xE000000000000000;
    if (a1 != a4)
      goto LABEL_15;
    goto LABEL_13;
  }
  if (a1 == 1)
    a1 = 63;
  else
    a1 = 43;
  v10 = 0xE100000000000000;
  v11 = a4;
  if (!a4)
    goto LABEL_12;
LABEL_6:
  if (v11 == 1)
    v12 = 63;
  else
    v12 = 43;
  v13 = 0xE100000000000000;
  if (a1 != v12)
  {
LABEL_15:
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = 0;
    if ((v14 & 1) == 0)
      return result;
    return (a5 ^ a2) < 0x4000 && (a6 ^ a3) < 0x4000;
  }
LABEL_13:
  if (v10 != v13)
    goto LABEL_15;
  swift_bridgeObjectRelease_n();
  return (a5 ^ a2) < 0x4000 && (a6 ^ a3) < 0x4000;
}

BOOL static Source.Located<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _BOOL8 result;

  result = 0;
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
  {
    v4 = *(int *)(type metadata accessor for Source.Located() + 28);
    v5 = a1 + v4;
    v6 = *(_QWORD *)(a1 + v4);
    v7 = (_QWORD *)(a2 + v4);
    if (!((*v7 ^ v6) >> 14) && (*(_QWORD *)(v5 + 8) ^ v7[1]) < 0x4000)
      return 1;
  }
  return result;
}

Swift::Int AST.Atom.Callout.PCRE.hashValue.getter()
{
  Hasher.init(_seed:)();
  specialized Source.Located<A>.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Atom.Callout.PCRE()
{
  Hasher.init(_seed:)();
  specialized Source.Located<A>.hash(into:)();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.Atom.Callout.PCRE()
{
  specialized Source.Located<A>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.Callout.PCRE()
{
  Hasher.init(_seed:)();
  specialized Source.Located<A>.hash(into:)();
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AST.Atom.Callout.PCRE(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[3];
  uint64_t v6;
  _OWORD v7[3];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 48);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  return specialized static Source.Located<A>.== infix(_:_:)((uint64_t)v5, (uint64_t)v7);
}

__n128 AST.Atom.Callout.OnigurumaNamed.ArgList.leftBrace.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  return result;
}

__n128 AST.Atom.Callout.OnigurumaNamed.ArgList.leftBrace.setter(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  result = *a1;
  *v1 = *a1;
  return result;
}

uint64_t (*AST.Atom.Callout.OnigurumaNamed.ArgList.leftBrace.modify())()
{
  return AST.root.modify;
}

uint64_t AST.Atom.Callout.OnigurumaNamed.ArgList.args.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AST.Atom.Callout.OnigurumaNamed.ArgList.args.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*AST.Atom.Callout.OnigurumaNamed.ArgList.args.modify())()
{
  return AST.root.modify;
}

__n128 AST.Atom.Callout.OnigurumaNamed.ArgList.rightBrace.getter@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  __n128 result;

  result = *(__n128 *)(v1 + 24);
  *a1 = result;
  return result;
}

__n128 AST.Atom.Callout.OnigurumaNamed.ArgList.rightBrace.setter(__n128 *a1)
{
  uint64_t v1;
  __n128 result;

  result = *a1;
  *(__n128 *)(v1 + 24) = *a1;
  return result;
}

uint64_t (*AST.Atom.Callout.OnigurumaNamed.ArgList.rightBrace.modify())()
{
  return AST.root.modify;
}

__n128 AST.Atom.Callout.OnigurumaNamed.ArgList.init(_:_:_:)@<Q0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X8>)
{
  __n128 result;

  *(_OWORD *)a4 = *a1;
  *(_QWORD *)(a4 + 16) = a2;
  result = *a3;
  *(__n128 *)(a4 + 24) = *a3;
  return result;
}

void AST.Atom.Callout.OnigurumaNamed.ArgList.hash(into:)(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  Hasher._combine(_:)(*v1 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  specialized Array<A>.hash(into:)(a1, v4);
  Hasher._combine(_:)(v5 >> 14);
  Hasher._combine(_:)(v6 >> 14);
}

Swift::Int AST.Atom.Callout.OnigurumaNamed.ArgList.hashValue.getter()
{
  unint64_t *v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _BYTE v7[72];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v5 = v0[4];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  specialized Array<A>.hash(into:)((uint64_t)v7, v3);
  Hasher._combine(_:)(v4 >> 14);
  Hasher._combine(_:)(v5 >> 14);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.Atom.Callout.OnigurumaNamed.ArgList(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  Hasher._combine(_:)(*v1 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  specialized Array<A>.hash(into:)(a1, v4);
  Hasher._combine(_:)(v5 >> 14);
  Hasher._combine(_:)(v6 >> 14);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.Callout.OnigurumaNamed.ArgList()
{
  unint64_t *v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _BYTE v7[72];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v5 = v0[4];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  specialized Array<A>.hash(into:)((uint64_t)v7, v3);
  Hasher._combine(_:)(v4 >> 14);
  Hasher._combine(_:)(v5 >> 14);
  return Hasher._finalize()();
}

uint64_t AST.Atom.Callout.OnigurumaNamed.name.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 16);
  return swift_bridgeObjectRetain();
}

__n128 AST.Atom.Callout.OnigurumaNamed.name.setter(__n128 *a1)
{
  __n128 *v1;
  unint64_t v2;
  unint64_t v3;
  __n128 result;
  __n128 v5;

  v5 = *a1;
  v2 = a1[1].n128_u64[0];
  v3 = a1[1].n128_u64[1];
  swift_bridgeObjectRelease();
  result = v5;
  *v1 = v5;
  v1[1].n128_u64[0] = v2;
  v1[1].n128_u64[1] = v3;
  return result;
}

uint64_t (*AST.Atom.Callout.OnigurumaNamed.name.modify())()
{
  return AST.root.modify;
}

uint64_t AST.Atom.Callout.OnigurumaNamed.tag.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1 + 48);
  v3 = *(_QWORD *)(v1 + 88);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 32);
  *(_QWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(v1 + 72);
  *(_QWORD *)(a1 + 56) = v3;
  return swift_bridgeObjectRetain();
}

__n128 AST.Atom.Callout.OnigurumaNamed.tag.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  __n128 v5;
  __int128 v6;
  __int128 v7;

  v6 = a1[1];
  v7 = *a1;
  v5 = (__n128)a1[2];
  v2 = *((_QWORD *)a1 + 6);
  v3 = *((_QWORD *)a1 + 7);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v1 + 32) = v7;
  *(_OWORD *)(v1 + 48) = v6;
  result = v5;
  *(__n128 *)(v1 + 64) = v5;
  *(_QWORD *)(v1 + 80) = v2;
  *(_QWORD *)(v1 + 88) = v3;
  return result;
}

uint64_t (*AST.Atom.Callout.OnigurumaNamed.tag.modify())()
{
  return AST.root.modify;
}

uint64_t AST.Atom.Callout.OnigurumaNamed.args.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = *(_QWORD *)(v1 + 128);
  v3 = *(_OWORD *)(v1 + 112);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 96);
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 32) = v2;
  return swift_bridgeObjectRetain();
}

__n128 AST.Atom.Callout.OnigurumaNamed.args.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  __n128 result;
  __n128 v4;
  __int128 v5;

  v4 = (__n128)a1[1];
  v5 = *a1;
  v2 = *((_QWORD *)a1 + 4);
  swift_bridgeObjectRelease();
  result = v4;
  *(_OWORD *)(v1 + 96) = v5;
  *(__n128 *)(v1 + 112) = v4;
  *(_QWORD *)(v1 + 128) = v2;
  return result;
}

uint64_t (*AST.Atom.Callout.OnigurumaNamed.args.modify())()
{
  return AST.root.modify;
}

__n128 AST.Atom.Callout.OnigurumaNamed.init(_:tag:args:)@<Q0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a2;
  v5 = a2[1];
  *(_OWORD *)(a4 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a4 + 32) = v4;
  v6 = a2[2];
  v7 = a2[3];
  *(_OWORD *)(a4 + 48) = v5;
  *(_OWORD *)(a4 + 64) = v6;
  result = *(__n128 *)a3;
  v9 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a4 + 80) = v7;
  *(__n128 *)(a4 + 96) = result;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a3 + 32);
  *(_QWORD *)a4 = *(_QWORD *)a1;
  *(_QWORD *)(a4 + 8) = v10;
  *(_OWORD *)(a4 + 112) = v9;
  *(_QWORD *)(a4 + 128) = v11;
  return result;
}

void AST.Atom.Callout.OnigurumaNamed.hash(into:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v2 = v1;
  v4 = v2[2];
  v5 = v2[3];
  v7 = v2[4];
  v6 = v2[5];
  v8 = v2[7];
  v10 = v2[8];
  v9 = v2[9];
  v12 = v2[10];
  v13 = v2[11];
  v11 = v2[14];
  v14 = v2[12];
  v15 = v2[13];
  v16 = v2[15];
  v17 = v2[16];
  String.hash(into:)();
  Hasher._combine(_:)(v4 >> 14);
  Hasher._combine(_:)(v5 >> 14);
  if (v8)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v7 >> 14);
    Hasher._combine(_:)(v6 >> 14);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Hasher._combine(_:)(v10 >> 14);
    Hasher._combine(_:)(v9 >> 14);
    Hasher._combine(_:)(v12 >> 14);
    Hasher._combine(_:)(v13 >> 14);
    swift_bridgeObjectRelease();
    if (v11)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v14 >> 14);
      Hasher._combine(_:)(v15 >> 14);
      swift_bridgeObjectRetain();
      specialized Array<A>.hash(into:)(a1, v11);
      Hasher._combine(_:)(v16 >> 14);
      Hasher._combine(_:)(v17 >> 14);
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v11)
      goto LABEL_3;
  }
  Hasher._combine(_:)(0);
}

Swift::Int AST.Atom.Callout.OnigurumaNamed.hashValue.getter()
{
  return AST.Atom.Kind.hashValue.getter((void (*)(_BYTE *))AST.Atom.Callout.OnigurumaNamed.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Atom.Callout.OnigurumaNamed(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AST.Atom.Kind(a1, a2, (void (*)(_BYTE *))AST.Atom.Callout.OnigurumaNamed.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.Callout.OnigurumaNamed(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.Kind(a1, a2, a3, (void (*)(_BYTE *))AST.Atom.Callout.OnigurumaNamed.hash(into:));
}

__n128 AST.Atom.Callout.OnigurumaOfContents.openBraces.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  return result;
}

__n128 AST.Atom.Callout.OnigurumaOfContents.openBraces.setter(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  result = *a1;
  *v1 = *a1;
  return result;
}

uint64_t (*AST.Atom.Callout.OnigurumaOfContents.openBraces.modify())()
{
  return AST.root.modify;
}

uint64_t AST.Atom.Callout.OnigurumaOfContents.contents.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 32);
  return swift_bridgeObjectRetain();
}

__n128 AST.Atom.Callout.OnigurumaOfContents.contents.setter(__n128 *a1)
{
  __n128 *v1;
  unint64_t v2;
  unint64_t v3;
  __n128 result;
  __n128 v5;

  v5 = *a1;
  v2 = a1[1].n128_u64[0];
  v3 = a1[1].n128_u64[1];
  swift_bridgeObjectRelease();
  result = v5;
  v1[1] = v5;
  v1[2].n128_u64[0] = v2;
  v1[2].n128_u64[1] = v3;
  return result;
}

uint64_t (*AST.Atom.Callout.OnigurumaOfContents.contents.modify())()
{
  return AST.root.modify;
}

__n128 AST.Atom.Callout.OnigurumaOfContents.closeBraces.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = v1[3];
  *a1 = result;
  return result;
}

__n128 AST.Atom.Callout.OnigurumaOfContents.closeBraces.setter(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  result = *a1;
  v1[3] = *a1;
  return result;
}

uint64_t (*AST.Atom.Callout.OnigurumaOfContents.closeBraces.modify())()
{
  return AST.root.modify;
}

uint64_t AST.Atom.Callout.OnigurumaOfContents.tag.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 120);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 64);
  *(_QWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 88);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(v1 + 104);
  *(_QWORD *)(a1 + 56) = v3;
  return swift_bridgeObjectRetain();
}

__n128 AST.Atom.Callout.OnigurumaOfContents.tag.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  __n128 v5;
  __int128 v6;
  __int128 v7;

  v6 = a1[1];
  v7 = *a1;
  v5 = (__n128)a1[2];
  v2 = *((_QWORD *)a1 + 6);
  v3 = *((_QWORD *)a1 + 7);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v1 + 64) = v7;
  *(_OWORD *)(v1 + 80) = v6;
  result = v5;
  *(__n128 *)(v1 + 96) = v5;
  *(_QWORD *)(v1 + 112) = v2;
  *(_QWORD *)(v1 + 120) = v3;
  return result;
}

uint64_t (*AST.Atom.Callout.OnigurumaOfContents.tag.modify())()
{
  return AST.root.modify;
}

__n128 AST.Atom.Callout.OnigurumaOfContents.direction.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;

  *(_BYTE *)a1 = *(_BYTE *)(v1 + 128);
  result = *(__n128 *)(v1 + 136);
  *(__n128 *)(a1 + 8) = result;
  return result;
}

__n128 AST.Atom.Callout.OnigurumaOfContents.direction.setter(uint64_t a1)
{
  uint64_t v1;
  __n128 result;

  *(_BYTE *)(v1 + 128) = *(_BYTE *)a1;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v1 + 136) = result;
  return result;
}

uint64_t (*AST.Atom.Callout.OnigurumaOfContents.direction.modify())()
{
  return AST.root.modify;
}

__n128 AST.Atom.Callout.OnigurumaOfContents.init(_:_:_:tag:direction:)@<Q0>(_OWORD *a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, _OWORD *a4@<X3>, char *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 result;

  v6 = *a2;
  v7 = a2[1];
  v8 = *a5;
  *(_OWORD *)a6 = *a1;
  *(_QWORD *)(a6 + 16) = v6;
  *(_QWORD *)(a6 + 24) = v7;
  v9 = *a3;
  *(_OWORD *)(a6 + 32) = *((_OWORD *)a2 + 1);
  *(_OWORD *)(a6 + 48) = v9;
  v10 = a4[1];
  *(_OWORD *)(a6 + 64) = *a4;
  *(_OWORD *)(a6 + 80) = v10;
  v11 = a4[3];
  *(_OWORD *)(a6 + 96) = a4[2];
  *(_OWORD *)(a6 + 112) = v11;
  *(_BYTE *)(a6 + 128) = v8;
  result = *(__n128 *)(a5 + 8);
  *(__n128 *)(a6 + 136) = result;
  return result;
}

BOOL AST.Atom.Callout.OnigurumaOfContents.isDirectionImplicit.getter()
{
  uint64_t v0;

  return (*(_QWORD *)(v0 + 144) ^ *(_QWORD *)(v0 + 136)) < 0x4000uLL;
}

void AST.Atom.Callout.OnigurumaOfContents.hash(into:)()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  Swift::UInt v14;
  unint64_t v15;

  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 88);
  v8 = *(_QWORD *)(v0 + 72);
  v9 = *(_QWORD *)(v0 + 96);
  v10 = *(_QWORD *)(v0 + 104);
  v11 = *(_QWORD *)(v0 + 112);
  v12 = *(_QWORD *)(v0 + 120);
  v13 = *(_QWORD *)(v0 + 136);
  v14 = *(unsigned __int8 *)(v0 + 128);
  v15 = *(_QWORD *)(v0 + 144);
  Hasher._combine(_:)(*(_QWORD *)v0 >> 14);
  Hasher._combine(_:)(v1 >> 14);
  String.hash(into:)();
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v4 >> 14);
  Hasher._combine(_:)(v5 >> 14);
  if (v7)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6 >> 14);
    Hasher._combine(_:)(v8 >> 14);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Hasher._combine(_:)(v9 >> 14);
    Hasher._combine(_:)(v10 >> 14);
    Hasher._combine(_:)(v11 >> 14);
    Hasher._combine(_:)(v12 >> 14);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v13 >> 14);
  Hasher._combine(_:)(v15 >> 14);
}

Swift::Int AST.Atom.Callout.OnigurumaOfContents.hashValue.getter()
{
  Hasher.init(_seed:)();
  AST.Atom.Callout.OnigurumaOfContents.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Atom.Callout.OnigurumaOfContents()
{
  Hasher.init(_seed:)();
  AST.Atom.Callout.OnigurumaOfContents.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.Callout.OnigurumaOfContents()
{
  Hasher.init(_seed:)();
  AST.Atom.Callout.OnigurumaOfContents.hash(into:)();
  return Hasher._finalize()();
}

void AST.Atom.Callout.hash(into:)(uint64_t a1)
{
  _OWORD *v1;
  int v3;
  _OWORD v4[10];
  _OWORD v5[10];

  outlined init with take of AST.Atom.Callout(v1, v4);
  outlined init with take of AST.Atom.Callout(v4, v5);
  v3 = _s12_RegexParser3ASTV4AtomV7CalloutOWOg((uint64_t)v5);
  if (v3)
  {
    if (v3 == 1)
    {
      AST.root.modify(v5);
      Hasher._combine(_:)(1uLL);
      AST.Atom.Callout.OnigurumaNamed.hash(into:)(a1);
    }
    else
    {
      AST.root.modify(v5);
      Hasher._combine(_:)(2uLL);
      AST.Atom.Callout.OnigurumaOfContents.hash(into:)();
    }
  }
  else
  {
    AST.root.modify(v5);
    Hasher._combine(_:)(0);
    specialized Source.Located<A>.hash(into:)();
  }
}

Swift::Int AST.Atom.Callout.hashValue.getter()
{
  _OWORD *v0;
  int v1;
  _BYTE v3[72];
  _OWORD v4[10];
  _OWORD v5[10];

  outlined init with take of AST.Atom.Callout(v0, v4);
  Hasher.init(_seed:)();
  outlined init with take of AST.Atom.Callout(v4, v5);
  v1 = _s12_RegexParser3ASTV4AtomV7CalloutOWOg((uint64_t)v5);
  if (v1)
  {
    if (v1 == 1)
    {
      AST.root.modify(v5);
      Hasher._combine(_:)(1uLL);
      AST.Atom.Callout.OnigurumaNamed.hash(into:)((uint64_t)v3);
    }
    else
    {
      AST.root.modify(v5);
      Hasher._combine(_:)(2uLL);
      AST.Atom.Callout.OnigurumaOfContents.hash(into:)();
    }
  }
  else
  {
    AST.root.modify(v5);
    Hasher._combine(_:)(0);
    specialized Source.Located<A>.hash(into:)();
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Atom.Callout()
{
  _OWORD *v0;
  int v1;
  _BYTE v3[72];
  _OWORD v4[10];
  _OWORD v5[10];

  outlined init with take of AST.Atom.Callout(v0, v4);
  Hasher.init(_seed:)();
  outlined init with take of AST.Atom.Callout(v4, v5);
  v1 = _s12_RegexParser3ASTV4AtomV7CalloutOWOg((uint64_t)v5);
  if (v1)
  {
    if (v1 == 1)
    {
      AST.root.modify(v5);
      Hasher._combine(_:)(1uLL);
      AST.Atom.Callout.OnigurumaNamed.hash(into:)((uint64_t)v3);
    }
    else
    {
      AST.root.modify(v5);
      Hasher._combine(_:)(2uLL);
      AST.Atom.Callout.OnigurumaOfContents.hash(into:)();
    }
  }
  else
  {
    AST.root.modify(v5);
    Hasher._combine(_:)(0);
    specialized Source.Located<A>.hash(into:)();
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.Atom.Callout(uint64_t a1)
{
  _OWORD *v1;
  int v3;
  _OWORD v4[10];
  _OWORD v5[10];

  outlined init with take of AST.Atom.Callout(v1, v4);
  outlined init with take of AST.Atom.Callout(v4, v5);
  v3 = _s12_RegexParser3ASTV4AtomV7CalloutOWOg((uint64_t)v5);
  if (v3)
  {
    if (v3 == 1)
    {
      AST.root.modify(v5);
      Hasher._combine(_:)(1uLL);
      AST.Atom.Callout.OnigurumaNamed.hash(into:)(a1);
    }
    else
    {
      AST.root.modify(v5);
      Hasher._combine(_:)(2uLL);
      AST.Atom.Callout.OnigurumaOfContents.hash(into:)();
    }
  }
  else
  {
    AST.root.modify(v5);
    Hasher._combine(_:)(0);
    specialized Source.Located<A>.hash(into:)();
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.Callout()
{
  _OWORD *v0;
  int v1;
  _BYTE v3[72];
  _OWORD v4[10];
  _OWORD v5[10];

  outlined init with take of AST.Atom.Callout(v0, v4);
  Hasher.init(_seed:)();
  outlined init with take of AST.Atom.Callout(v4, v5);
  v1 = _s12_RegexParser3ASTV4AtomV7CalloutOWOg((uint64_t)v5);
  if (v1)
  {
    if (v1 == 1)
    {
      AST.root.modify(v5);
      Hasher._combine(_:)(1uLL);
      AST.Atom.Callout.OnigurumaNamed.hash(into:)((uint64_t)v3);
    }
    else
    {
      AST.root.modify(v5);
      Hasher._combine(_:)(2uLL);
      AST.Atom.Callout.OnigurumaOfContents.hash(into:)();
    }
  }
  else
  {
    AST.root.modify(v5);
    Hasher._combine(_:)(0);
    specialized Source.Located<A>.hash(into:)();
  }
  return Hasher._finalize()();
}

uint64_t (*AST.Atom.Callout.OnigurumaTag.leftBracket.modify())()
{
  return AST.root.modify;
}

uint64_t AST.Atom.Callout.OnigurumaTag.name.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 32);
  return swift_bridgeObjectRetain();
}

__n128 AST.Atom.Callout.OnigurumaTag.name.setter(__n128 *a1)
{
  __n128 *v1;
  unint64_t v2;
  unint64_t v3;
  __n128 result;
  __n128 v5;

  v5 = *a1;
  v2 = a1[1].n128_u64[0];
  v3 = a1[1].n128_u64[1];
  swift_bridgeObjectRelease();
  result = v5;
  v1[1] = v5;
  v1[2].n128_u64[0] = v2;
  v1[2].n128_u64[1] = v3;
  return result;
}

uint64_t (*AST.Atom.Callout.OnigurumaTag.name.modify())()
{
  return AST.root.modify;
}

uint64_t (*AST.Atom.Callout.OnigurumaTag.rightBracket.modify())()
{
  return AST.root.modify;
}

__n128 AST.Atom.Callout.OnigurumaTag.init(_:_:_:)@<Q0>(_OWORD *a1@<X0>, __n128 *a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  __n128 result;
  __int128 v7;

  v4 = a2->n128_u64[0];
  v5 = a2->n128_u64[1];
  *(_OWORD *)a4 = *a1;
  *(_QWORD *)(a4 + 16) = v4;
  *(_QWORD *)(a4 + 24) = v5;
  result = a2[1];
  v7 = *a3;
  *(__n128 *)(a4 + 32) = result;
  *(_OWORD *)(a4 + 48) = v7;
  return result;
}

void AST.Atom.Callout.OnigurumaTag.hash(into:)()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v1 = v0[1];
  v2 = v0[4];
  v3 = v0[5];
  v4 = v0[6];
  v5 = v0[7];
  Hasher._combine(_:)(*v0 >> 14);
  Hasher._combine(_:)(v1 >> 14);
  String.hash(into:)();
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v4 >> 14);
  Hasher._combine(_:)(v5 >> 14);
}

Swift::Int AST.Atom.Callout.OnigurumaTag.hashValue.getter()
{
  unint64_t *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[4];
  v4 = v0[5];
  v5 = v0[6];
  v6 = v0[7];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  String.hash(into:)();
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v4 >> 14);
  Hasher._combine(_:)(v5 >> 14);
  Hasher._combine(_:)(v6 >> 14);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.Atom.Callout.OnigurumaTag()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v1 = v0[1];
  v2 = v0[4];
  v3 = v0[5];
  v4 = v0[6];
  v5 = v0[7];
  Hasher._combine(_:)(*v0 >> 14);
  Hasher._combine(_:)(v1 >> 14);
  String.hash(into:)();
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v4 >> 14);
  Hasher._combine(_:)(v5 >> 14);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.Callout.OnigurumaTag()
{
  unint64_t *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[4];
  v4 = v0[5];
  v5 = v0[6];
  v6 = v0[7];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  String.hash(into:)();
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v4 >> 14);
  Hasher._combine(_:)(v5 >> 14);
  Hasher._combine(_:)(v6 >> 14);
  return Hasher._finalize()();
}

__n128 AST.Atom.BacktrackingDirective.kind.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;

  *(_BYTE *)a1 = *(_BYTE *)v1;
  result = *(__n128 *)(v1 + 8);
  *(__n128 *)(a1 + 8) = result;
  return result;
}

__n128 AST.Atom.BacktrackingDirective.kind.setter(uint64_t a1)
{
  uint64_t v1;
  __n128 result;

  *(_BYTE *)v1 = *(_BYTE *)a1;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v1 + 8) = result;
  return result;
}

uint64_t (*AST.Atom.BacktrackingDirective.kind.modify())()
{
  return AST.root.modify;
}

uint64_t AST.Atom.BacktrackingDirective.name.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 32);
  *(_QWORD *)(a1 + 24) = v2;
  return swift_bridgeObjectRetain();
}

__n128 AST.Atom.BacktrackingDirective.name.setter(__n128 *a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  __n128 result;
  __n128 v5;

  v5 = *a1;
  v2 = a1[1].n128_u64[0];
  v3 = a1[1].n128_u64[1];
  swift_bridgeObjectRelease();
  result = v5;
  *(__n128 *)(v1 + 24) = v5;
  *(_QWORD *)(v1 + 40) = v2;
  *(_QWORD *)(v1 + 48) = v3;
  return result;
}

uint64_t (*AST.Atom.BacktrackingDirective.name.modify())()
{
  return AST.root.modify;
}

__n128 AST.Atom.BacktrackingDirective.init(_:name:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __n128 result;
  __int128 v4;

  *(_BYTE *)a3 = *(_BYTE *)a1;
  *(_OWORD *)(a3 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a3 + 24) = *(_OWORD *)a2;
  *(_OWORD *)(a3 + 40) = v4;
  return result;
}

BOOL AST.Atom.BacktrackingDirective.isQuantifiable.getter()
{
  _BYTE *v0;

  return *v0 == 0;
}

void AST.Atom.BacktrackingDirective.hash(into:)()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v1 = v0[1];
  v2 = v0[2];
  v3 = v0[4];
  v5 = v0[5];
  v4 = v0[6];
  Hasher._combine(_:)(*(unsigned __int8 *)v0);
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  if (v3)
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    Hasher._combine(_:)(v5 >> 14);
    Hasher._combine(_:)(v4 >> 14);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int AST.Atom.BacktrackingDirective.hashValue.getter()
{
  _QWORD *v0;
  Swift::UInt v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v1 = *(unsigned __int8 *)v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[4];
  v6 = v0[5];
  v5 = v0[6];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  if (v4)
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    Hasher._combine(_:)(v6 >> 14);
    Hasher._combine(_:)(v5 >> 14);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.Atom.BacktrackingDirective()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v1 = v0[1];
  v2 = v0[2];
  v3 = v0[4];
  v5 = v0[5];
  v4 = v0[6];
  Hasher._combine(_:)(*(unsigned __int8 *)v0);
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  if (v3)
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    Hasher._combine(_:)(v5 >> 14);
    Hasher._combine(_:)(v4 >> 14);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.BacktrackingDirective()
{
  _QWORD *v0;
  Swift::UInt v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v1 = *(unsigned __int8 *)v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[4];
  v6 = v0[5];
  v5 = v0[6];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  if (v4)
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    Hasher._combine(_:)(v6 >> 14);
    Hasher._combine(_:)(v5 >> 14);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void AST.Atom.EscapedBuiltin.scalarValue.getter()
{
  __asm { BR              X12 }
}

uint64_t sub_1DEF869D4()
{
  return 0x100000000;
}

void sub_1DEF869F0()
{
  JUMPOUT(0x1DEF869DCLL);
}

void sub_1DEF869FC()
{
  JUMPOUT(0x1DEF869DCLL);
}

void sub_1DEF86A08()
{
  JUMPOUT(0x1DEF869DCLL);
}

void sub_1DEF86A14()
{
  JUMPOUT(0x1DEF869DCLL);
}

void sub_1DEF86A20()
{
  JUMPOUT(0x1DEF869DCLL);
}

void sub_1DEF86A2C()
{
  JUMPOUT(0x1DEF869DCLL);
}

uint64_t AST.Atom.EscapedBuiltin.isQuantifiable.getter()
{
  _BYTE *v0;

  return (*v0 < 0x1DuLL) & (0x101FFFFFu >> *v0);
}

void AST.Atom.literalCharacterValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD);
  char *v5;
  uint64_t v6;

  v1 = type metadata accessor for AST.Atom.Kind(0);
  MEMORY[0x1E0C80A78](v1, v2);
  outlined init with copy of AST.Atom(v0, (uint64_t)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  v5 = (char *)sub_1DEF86AE8 + 4 * byte_1DEFFDA3F[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1DEF86AE8()
{
  uint64_t v0;

  outlined destroy of AST.Atom(v0, type metadata accessor for AST.Atom.Kind);
  return 0;
}

void sub_1DEF86B14()
{
  JUMPOUT(0x1DEF86B00);
}

uint64_t AST.Atom.isValidCharacterClassRangeBound.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v1 = type metadata accessor for AST.Atom.Kind(0);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AST.Atom.literalCharacterValue.getter();
  if (!v6)
  {
    outlined init with copy of AST.Atom(v0, (uint64_t)v4, type metadata accessor for AST.Atom.Kind);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if ((EnumCaseMultiPayload - 5) < 4 || EnumCaseMultiPayload == 2)
    {
      outlined destroy of AST.Atom((uint64_t)v4, type metadata accessor for AST.Atom.Kind);
      return 1;
    }
    outlined destroy of AST.Atom((uint64_t)v4, type metadata accessor for AST.Atom.Kind);
    return 0;
  }
  v7 = v5;
  v8 = v6;
  if (!Character.hasExactlyOneScalar.getter(v5, v6))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if ((Character.asciiValue.getter() & 0x100) != 0)
  {
    v11 = String._nfcCodeUnits.getter();
    v12 = specialized Sequence<>.elementsEqual<A>(_:)(v7, v8, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v12 & 1;
  }
  else
  {
    swift_bridgeObjectRelease();
    return 1;
  }
}

BOOL Character.hasExactlyOneScalar.getter(unint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD v13[2];

  v4 = _StringGuts.validateScalarIndex(_:)(0xFuLL, a1, a2);
  if ((a2 & 0x1000000000000000) != 0)
  {
    v10 = String.UnicodeScalarView._foreignIndex(after:)();
  }
  else
  {
    v5 = v4 >> 16;
    if ((a2 & 0x2000000000000000) != 0)
    {
      v13[0] = a1;
      v13[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      v7 = *((unsigned __int8 *)v13 + v5);
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
        v6 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      else
        v6 = _StringObject.sharedUTF8.getter();
      v7 = *(unsigned __int8 *)(v6 + v5);
    }
    v8 = (char)v7;
    v9 = __clz(v7 ^ 0xFF) - 24;
    if (v8 >= 0)
      LOBYTE(v9) = 1;
    v10 = ((v5 + v9) << 16) | 5;
  }
  v11 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v11 = a1 & 0xFFFFFFFFFFFFLL;
  return v10 >> 14 == 4 * v11;
}

void AST.Atom.literalStringValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD);
  char *v5;
  uint64_t v6;

  v1 = type metadata accessor for AST.Atom.Kind(0);
  MEMORY[0x1E0C80A78](v1, v2);
  outlined init with copy of AST.Atom(v0, (uint64_t)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  v5 = (char *)sub_1DEF86EE0 + 4 * byte_1DEFFDA70[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1DEF86EE0()
{
  uint64_t v0;

  outlined destroy of AST.Atom(v0, type metadata accessor for AST.Atom.Kind);
  return 0;
}

uint64_t scalarLiteral #1 (_:) in AST.Atom.literalStringValue.getter(uint64_t a1)
{
  int64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v16;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v16 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v3 = a1 + 32;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    do
    {
      v3 += 4;
      v4 = String.init<A>(_:radix:uppercase:)();
      v6 = v5;
      v8 = *(_QWORD *)(v16 + 16);
      v7 = *(_QWORD *)(v16 + 24);
      if (v8 >= v7 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1);
      *(_QWORD *)(v16 + 16) = v8 + 1;
      v9 = v16 + 16 * v8;
      *(_QWORD *)(v9 + 32) = v4;
      *(_QWORD *)(v9 + 40) = v6;
      --v1;
    }
    while (v1);
  }
  swift_getCanonicalSpecializedMetadata();
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t)&unk_1EA9768C0, (uint64_t)&cache variable for noncanonical specialized generic type metadata for [String], MEMORY[0x1E0DEAF20]);
  v10 = BidirectionalCollection<>.joined(separator:)();
  v12 = v11;
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = v10;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 125;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  return 8090972;
}

uint64_t AST.Node.literalStringValue.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = type metadata accessor for AST.Atom(0);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = 0;
  if (*v0 >> 60 == 8)
  {
    v6 = swift_projectBox();
    outlined init with copy of AST.Atom(v6, (uint64_t)v4, type metadata accessor for AST.Atom);
    AST.Atom.literalStringValue.getter();
    v5 = v7;
    outlined destroy of AST.Atom((uint64_t)v4, type metadata accessor for AST.Atom);
  }
  return v5;
}

__n128 AST.Conditional.location.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  return result;
}

__n128 AST.Conditional.location.setter(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  result = *a1;
  *v1 = *a1;
  return result;
}

uint64_t (*AST.Conditional.location.modify())()
{
  return AST.root.modify;
}

_QWORD *AST.Conditional.condition.getter@<X0>(_OWORD *a1@<X8>)
{
  _OWORD *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v14[2];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v2 = v1[6];
  v3 = v1[8];
  v19 = v1[7];
  v20 = v3;
  v4 = v1[8];
  v21 = v1[9];
  v5 = v1[2];
  v6 = v1[4];
  v15 = v1[3];
  v7 = v15;
  v16 = v6;
  v8 = v1[4];
  v9 = v1[6];
  v17 = v1[5];
  v10 = v17;
  v18 = v9;
  v11 = v1[2];
  v14[0] = v1[1];
  v12 = v14[0];
  v14[1] = v11;
  a1[6] = v19;
  a1[7] = v4;
  a1[8] = v1[9];
  a1[2] = v7;
  a1[3] = v8;
  a1[4] = v10;
  a1[5] = v2;
  *a1 = v12;
  a1[1] = v5;
  return outlined retain of AST.Conditional.Condition(v14, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of AST.Conditional.Condition.Kind);
}

__n128 AST.Conditional.condition.setter(uint64_t a1)
{
  _OWORD *v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  _OWORD v11[9];

  v3 = v1[8];
  v11[6] = v1[7];
  v11[7] = v3;
  v11[8] = v1[9];
  v4 = v1[4];
  v11[2] = v1[3];
  v11[3] = v4;
  v5 = v1[6];
  v11[4] = v1[5];
  v11[5] = v5;
  v6 = v1[2];
  v11[0] = v1[1];
  v11[1] = v6;
  outlined retain of AST.Conditional.Condition(v11, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of AST.Conditional.Condition.Kind);
  v7 = *(_OWORD *)(a1 + 112);
  v1[7] = *(_OWORD *)(a1 + 96);
  v1[8] = v7;
  v1[9] = *(_OWORD *)(a1 + 128);
  v8 = *(_OWORD *)(a1 + 48);
  v1[3] = *(_OWORD *)(a1 + 32);
  v1[4] = v8;
  v9 = *(_OWORD *)(a1 + 80);
  v1[5] = *(_OWORD *)(a1 + 64);
  v1[6] = v9;
  result = *(__n128 *)(a1 + 16);
  v1[1] = *(_OWORD *)a1;
  v1[2] = result;
  return result;
}

uint64_t (*AST.Conditional.condition.modify())()
{
  return AST.root.modify;
}

uint64_t AST.Conditional.trueBranch.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 160);
  return swift_retain();
}

uint64_t AST.Conditional.trueBranch.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_release();
  *(_QWORD *)(v1 + 160) = v2;
  return result;
}

uint64_t (*AST.Conditional.trueBranch.modify())()
{
  return AST.root.modify;
}

__n128 AST.Conditional.pipe.getter@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  unsigned __int8 v2;
  __n128 result;

  v2 = *(_BYTE *)(v1 + 184);
  result = *(__n128 *)(v1 + 168);
  *a1 = result;
  a1[1].n128_u8[0] = v2;
  return result;
}

__n128 AST.Conditional.pipe.setter(__n128 *a1)
{
  uint64_t v1;
  unsigned __int8 v2;
  __n128 result;

  v2 = a1[1].n128_u8[0];
  result = *a1;
  *(__n128 *)(v1 + 168) = *a1;
  *(_BYTE *)(v1 + 184) = v2;
  return result;
}

uint64_t (*AST.Conditional.pipe.modify())()
{
  return AST.root.modify;
}

uint64_t AST.Conditional.falseBranch.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 192);
  return swift_retain();
}

uint64_t AST.Conditional.falseBranch.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_release();
  *(_QWORD *)(v1 + 192) = v2;
  return result;
}

uint64_t (*AST.Conditional.falseBranch.modify())()
{
  return AST.root.modify;
}

__n128 AST.Conditional.init(_:trueBranch:pipe:falseBranch:_:)@<Q0>(__int128 *a1@<X0>, uint64_t *a2@<X1>, __n128 *a3@<X2>, uint64_t *a4@<X3>, _OWORD *a5@<X4>, uint64_t a6@<X8>)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  __n128 result;

  v6 = a1[6];
  v7 = a1[7];
  v8 = a1[4];
  *(_OWORD *)(a6 + 96) = a1[5];
  *(_OWORD *)(a6 + 112) = v6;
  v9 = a1[8];
  *(_OWORD *)(a6 + 128) = v7;
  *(_OWORD *)(a6 + 144) = v9;
  v10 = a1[2];
  v11 = a1[3];
  v12 = *a1;
  *(_OWORD *)(a6 + 32) = a1[1];
  *(_OWORD *)(a6 + 48) = v10;
  *(_OWORD *)(a6 + 64) = v11;
  *(_OWORD *)(a6 + 80) = v8;
  v13 = *a2;
  v15 = *a4;
  v14 = a3[1].n128_u8[0];
  *(_OWORD *)a6 = *a5;
  *(_OWORD *)(a6 + 16) = v12;
  *(_QWORD *)(a6 + 160) = v13;
  result = *a3;
  *(__n128 *)(a6 + 168) = *a3;
  *(_BYTE *)(a6 + 184) = v14;
  *(_QWORD *)(a6 + 192) = v15;
  return result;
}

void AST.Conditional.hash(into:)()
{
  uint64_t *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  Swift::UInt64 v9;
  uint64_t v10;
  _OWORD v11[8];
  __int128 v12[8];

  v1 = *v0;
  v2 = v0[1];
  outlined init with take of AST.Conditional.Condition.Kind((__int128 *)v0 + 1, v12);
  v3 = v0[18];
  v4 = v0[19];
  v6 = v0[20];
  v5 = v0[21];
  v7 = v0[22];
  v8 = *((unsigned __int8 *)v0 + 184);
  v9 = v1 >> 14;
  v10 = v0[24];
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v2 >> 14);
  outlined init with take of AST.Conditional.Condition.Kind(v12, v11);
  AST.Conditional.Condition.Kind.hash(into:)();
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v4 >> 14);
  *(_QWORD *)&v11[0] = v6;
  AST.Node.hash(into:)();
  if (v8 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5 >> 14);
    Hasher._combine(_:)(v7 >> 14);
  }
  *(_QWORD *)&v11[0] = v10;
  AST.Node.hash(into:)();
}

Swift::Int AST.Conditional.hashValue.getter()
{
  Hasher.init(_seed:)();
  AST.Conditional.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Conditional()
{
  Hasher.init(_seed:)();
  AST.Conditional.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Conditional()
{
  Hasher.init(_seed:)();
  AST.Conditional.hash(into:)();
  return Hasher._finalize()();
}

uint64_t AST.Conditional._dumpBase.getter()
{
  unint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;

  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  v0 = lazy protocol witness table accessor for type AST.Conditional.Condition and conformance AST.Conditional.Condition();
  v1._countAndFlagsBits = (*(uint64_t (**)(ValueMetadata *, unint64_t))(v0 + 24))(&type metadata for AST.Conditional.Condition, v0);
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0x206E65687420;
  v2._object = (void *)0xE600000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = specialized _ASTPrintable._dump()();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x2065736C6520;
  v4._object = (void *)0xE600000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = specialized _ASTPrintable._dump()();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  return 2123369;
}

void AST.Conditional.Condition.Kind.hash(into:)()
{
  __int128 *v0;
  char *v1;
  __int128 v2[8];
  _OWORD v3[8];

  outlined init with take of AST.Conditional.Condition.Kind(v0, v2);
  outlined init with take of AST.Conditional.Condition.Kind(v2, v3);
  v1 = (char *)sub_1DEF878DC
     + 4 * byte_1DEFFDA82[_s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOg(v3)];
  __asm { BR              X10 }
}

void sub_1DEF878DC()
{
  uint64_t v0;

  _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOj0_(v0 - 216);
  Hasher._combine(_:)(0);
  AST.Reference.hash(into:)();
}

Swift::Int AST.Conditional.Condition.Kind.hashValue.getter()
{
  __int128 *v0;
  _OWORD v2[8];
  __int128 v3[8];

  outlined init with take of AST.Conditional.Condition.Kind(v0, v3);
  outlined init with take of AST.Conditional.Condition.Kind(v3, v2);
  Hasher.init(_seed:)();
  AST.Conditional.Condition.Kind.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Conditional.Condition.Kind()
{
  __int128 *v0;
  _OWORD v2[8];
  __int128 v3[8];

  outlined init with take of AST.Conditional.Condition.Kind(v0, v3);
  outlined init with take of AST.Conditional.Condition.Kind(v3, v2);
  Hasher.init(_seed:)();
  AST.Conditional.Condition.Kind.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Conditional.Condition.Kind()
{
  __int128 *v0;
  _OWORD v2[8];
  __int128 v3[8];

  outlined init with take of AST.Conditional.Condition.Kind(v0, v3);
  outlined init with take of AST.Conditional.Condition.Kind(v3, v2);
  Hasher.init(_seed:)();
  AST.Conditional.Condition.Kind.hash(into:)();
  return Hasher._finalize()();
}

_QWORD *AST.Conditional.Condition.kind.getter@<X0>(_OWORD *a1@<X8>)
{
  __int128 *v1;
  __int128 v4[8];

  outlined init with take of AST.Conditional.Condition.Kind(v1, v4);
  outlined init with take of AST.Conditional.Condition.Kind(v4, a1);
  return outlined retain of AST.Conditional.Condition(v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of AST.Conditional.Condition.Kind);
}

_OWORD *AST.Conditional.Condition.kind.setter(__int128 *a1)
{
  __int128 *v1;
  __int128 v3[8];
  _OWORD v4[8];

  outlined init with take of AST.Conditional.Condition.Kind(a1, v3);
  outlined init with take of AST.Conditional.Condition.Kind(v1, v4);
  outlined retain of AST.Conditional.Condition(v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of AST.Conditional.Condition.Kind);
  return outlined init with take of AST.Conditional.Condition.Kind(v3, v1);
}

uint64_t (*AST.Conditional.Condition.kind.modify())()
{
  return AST.root.modify;
}

__n128 AST.Conditional.Condition.location.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = v1[8];
  *a1 = result;
  return result;
}

__n128 AST.Conditional.Condition.location.setter(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  result = *a1;
  v1[8] = *a1;
  return result;
}

uint64_t (*AST.Conditional.Condition.location.modify())()
{
  return AST.root.modify;
}

double AST.Conditional.Condition.init(_:_:)@<D0>(__int128 *a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  double result;
  __int128 v12[8];
  _OWORD v13[8];
  __int128 v14;

  outlined init with take of AST.Conditional.Condition.Kind(a1, v12);
  v6 = *a2;
  v5 = a2[1];
  outlined init with take of AST.Conditional.Condition.Kind(v12, v13);
  *(_QWORD *)&v14 = v6;
  *((_QWORD *)&v14 + 1) = v5;
  v7 = v13[7];
  a3[6] = v13[6];
  a3[7] = v7;
  v8 = v13[3];
  a3[2] = v13[2];
  a3[3] = v8;
  v9 = v13[5];
  a3[4] = v13[4];
  a3[5] = v9;
  v10 = v13[1];
  *a3 = v13[0];
  a3[1] = v10;
  result = *(double *)&v14;
  a3[8] = v14;
  return result;
}

void AST.Conditional.Condition.hash(into:)()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  _OWORD v3[8];
  __int128 v4[8];

  outlined init with take of AST.Conditional.Condition.Kind((__int128 *)v0, v4);
  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  outlined init with take of AST.Conditional.Condition.Kind(v4, v3);
  AST.Conditional.Condition.Kind.hash(into:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
}

Swift::Int AST.Conditional.Condition.hashValue.getter()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  _OWORD v4[8];
  __int128 v5[8];

  outlined init with take of AST.Conditional.Condition.Kind((__int128 *)v0, v5);
  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  Hasher.init(_seed:)();
  outlined init with take of AST.Conditional.Condition.Kind(v5, v4);
  AST.Conditional.Condition.Kind.hash(into:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Conditional.Condition()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  _OWORD v4[8];
  __int128 v5[8];

  outlined init with take of AST.Conditional.Condition.Kind((__int128 *)v0, v5);
  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  Hasher.init(_seed:)();
  outlined init with take of AST.Conditional.Condition.Kind(v5, v4);
  AST.Conditional.Condition.Kind.hash(into:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.Conditional.Condition()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  _OWORD v3[8];
  __int128 v4[8];

  outlined init with take of AST.Conditional.Condition.Kind((__int128 *)v0, v4);
  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  outlined init with take of AST.Conditional.Condition.Kind(v4, v3);
  AST.Conditional.Condition.Kind.hash(into:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Conditional.Condition()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  _OWORD v4[8];
  __int128 v5[8];

  outlined init with take of AST.Conditional.Condition.Kind((__int128 *)v0, v5);
  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  Hasher.init(_seed:)();
  outlined init with take of AST.Conditional.Condition.Kind(v5, v4);
  AST.Conditional.Condition.Kind.hash(into:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  return Hasher._finalize()();
}

__n128 AST.Conditional.Condition.PCREVersionNumber.major.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unsigned __int8 v2;
  __n128 result;

  v2 = v1->n128_u8[8];
  a1->n128_u64[0] = v1->n128_u64[0];
  a1->n128_u8[8] = v2;
  result = v1[1];
  a1[1] = result;
  return result;
}

__n128 AST.Conditional.Condition.PCREVersionNumber.major.setter(__n128 *a1)
{
  __n128 *v1;
  unsigned __int8 v2;
  __n128 result;

  v2 = a1->n128_u8[8];
  v1->n128_u64[0] = a1->n128_u64[0];
  v1->n128_u8[8] = v2;
  result = a1[1];
  v1[1] = result;
  return result;
}

uint64_t (*AST.Conditional.Condition.PCREVersionNumber.major.modify())()
{
  return AST.root.modify;
}

__n128 AST.Conditional.Condition.PCREVersionNumber.minor.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unsigned __int8 v2;
  __n128 result;

  v2 = v1[2].n128_u8[8];
  a1->n128_u64[0] = v1[2].n128_u64[0];
  a1->n128_u8[8] = v2;
  result = v1[3];
  a1[1] = result;
  return result;
}

__n128 AST.Conditional.Condition.PCREVersionNumber.minor.setter(__n128 *a1)
{
  __n128 *v1;
  unsigned __int8 v2;
  __n128 result;

  v2 = a1->n128_u8[8];
  v1[2].n128_u64[0] = a1->n128_u64[0];
  v1[2].n128_u8[8] = v2;
  result = a1[1];
  v1[3] = result;
  return result;
}

uint64_t (*AST.Conditional.Condition.PCREVersionNumber.minor.modify())()
{
  return AST.root.modify;
}

__n128 AST.Conditional.Condition.PCREVersionNumber.location.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = v1[4];
  *a1 = result;
  return result;
}

__n128 AST.Conditional.Condition.PCREVersionNumber.location.setter(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  result = *a1;
  v1[4] = *a1;
  return result;
}

uint64_t (*AST.Conditional.Condition.PCREVersionNumber.location.modify())()
{
  return AST.root.modify;
}

__n128 AST.Conditional.Condition.PCREVersionNumber.init(major:minor:_:)@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  char v4;
  unint64_t v5;
  unsigned __int8 v6;
  __n128 result;
  __int128 v8;

  v4 = *(_BYTE *)(a1 + 8);
  v5 = a2->n128_u64[0];
  v6 = a2->n128_u8[8];
  *(_QWORD *)a4 = *(_QWORD *)a1;
  *(_BYTE *)(a4 + 8) = v4;
  *(_OWORD *)(a4 + 16) = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(a4 + 32) = v5;
  *(_BYTE *)(a4 + 40) = v6;
  result = a2[1];
  v8 = *a3;
  *(__n128 *)(a4 + 48) = result;
  *(_OWORD *)(a4 + 64) = v8;
  return result;
}

void AST.Conditional.Condition.PCREVersionNumber.hash(into:)()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  Swift::UInt v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  Swift::UInt v9;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(unsigned __int8 *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 56);
  v8 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 72);
  if (*(_BYTE *)(v0 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v9 = *(_QWORD *)v0;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v9);
  }
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v1 >> 14);
  if (v4)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
  }
  Hasher._combine(_:)(v6 >> 14);
  Hasher._combine(_:)(v5 >> 14);
  Hasher._combine(_:)(v8 >> 14);
  Hasher._combine(_:)(v7 >> 14);
}

Swift::Int AST.Conditional.Condition.PCREVersionNumber.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  Swift::UInt v11;

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 8);
  v4 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v11 = *(_QWORD *)(v0 + 32);
  v5 = *(unsigned __int8 *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 48);
  v6 = *(_QWORD *)(v0 + 56);
  v9 = *(_QWORD *)(v0 + 64);
  v8 = *(_QWORD *)(v0 + 72);
  Hasher.init(_seed:)();
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v4 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  if (v5)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v11);
  }
  Hasher._combine(_:)(v7 >> 14);
  Hasher._combine(_:)(v6 >> 14);
  Hasher._combine(_:)(v9 >> 14);
  Hasher._combine(_:)(v8 >> 14);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.Conditional.Condition.PCREVersionNumber()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  Swift::UInt v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  Swift::UInt v9;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(unsigned __int8 *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 56);
  v8 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 72);
  if (*(_BYTE *)(v0 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v9 = *(_QWORD *)v0;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v9);
  }
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v1 >> 14);
  if (v4)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
  }
  Hasher._combine(_:)(v6 >> 14);
  Hasher._combine(_:)(v5 >> 14);
  Hasher._combine(_:)(v8 >> 14);
  Hasher._combine(_:)(v7 >> 14);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Conditional.Condition.PCREVersionNumber()
{
  uint64_t v0;
  Swift::UInt v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  Swift::UInt v11;

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 8);
  v4 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v11 = *(_QWORD *)(v0 + 32);
  v5 = *(unsigned __int8 *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 48);
  v6 = *(_QWORD *)(v0 + 56);
  v9 = *(_QWORD *)(v0 + 64);
  v8 = *(_QWORD *)(v0 + 72);
  Hasher.init(_seed:)();
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v4 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  if (v5)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v11);
  }
  Hasher._combine(_:)(v7 >> 14);
  Hasher._combine(_:)(v6 >> 14);
  Hasher._combine(_:)(v9 >> 14);
  Hasher._combine(_:)(v8 >> 14);
  return Hasher._finalize()();
}

BOOL static AST.Conditional.Condition.PCREVersionCheck.Kind.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void AST.Conditional.Condition.PCREVersionCheck.Kind.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AST.Conditional.Condition.PCREVersionCheck.Kind(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void protocol witness for Hashable.hash(into:) in conformance AST.Conditional.Condition.PCREVersionCheck.Kind()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

__n128 AST.Conditional.Condition.PCREVersionCheck.kind.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;

  *(_BYTE *)a1 = *(_BYTE *)v1;
  result = *(__n128 *)(v1 + 8);
  *(__n128 *)(a1 + 8) = result;
  return result;
}

__n128 AST.Conditional.Condition.PCREVersionCheck.kind.setter(uint64_t a1)
{
  uint64_t v1;
  __n128 result;

  *(_BYTE *)v1 = *(_BYTE *)a1;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v1 + 8) = result;
  return result;
}

uint64_t (*AST.Conditional.Condition.PCREVersionCheck.kind.modify())()
{
  return AST.root.modify;
}

__n128 AST.Conditional.Condition.PCREVersionCheck.num.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  __n128 result;
  __int128 v6;

  v2 = *(_BYTE *)(v1 + 32);
  v3 = *(_QWORD *)(v1 + 56);
  v4 = *(_BYTE *)(v1 + 64);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 24);
  *(_BYTE *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 40);
  *(_QWORD *)(a1 + 32) = v3;
  *(_BYTE *)(a1 + 40) = v4;
  result = *(__n128 *)(v1 + 72);
  v6 = *(_OWORD *)(v1 + 88);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v6;
  return result;
}

__n128 AST.Conditional.Condition.PCREVersionCheck.num.setter(uint64_t a1)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;
  char v4;
  uint64_t v5;
  char v6;

  *(_OWORD *)(v1 + 40) = *(_OWORD *)(a1 + 16);
  result = *(__n128 *)(a1 + 48);
  v3 = *(_OWORD *)(a1 + 64);
  *(__n128 *)(v1 + 72) = result;
  v4 = *(_BYTE *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(v1 + 24) = *(_QWORD *)a1;
  *(_BYTE *)(v1 + 32) = v4;
  *(_QWORD *)(v1 + 56) = v5;
  *(_BYTE *)(v1 + 64) = v6;
  *(_OWORD *)(v1 + 88) = v3;
  return result;
}

uint64_t (*AST.Conditional.Condition.PCREVersionCheck.num.modify())()
{
  return AST.root.modify;
}

__n128 AST.Conditional.Condition.PCREVersionCheck.init(_:_:)@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  __n128 result;
  __int128 v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;

  *(_OWORD *)(a3 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a3 + 40) = *((_OWORD *)a2 + 1);
  result = *((__n128 *)a2 + 3);
  v4 = *((_OWORD *)a2 + 4);
  *(__n128 *)(a3 + 72) = result;
  v5 = *a2;
  v6 = *((_BYTE *)a2 + 8);
  v7 = a2[4];
  v8 = *((_BYTE *)a2 + 40);
  *(_BYTE *)a3 = *(_BYTE *)a1;
  *(_QWORD *)(a3 + 24) = v5;
  *(_BYTE *)(a3 + 32) = v6;
  *(_QWORD *)(a3 + 56) = v7;
  *(_BYTE *)(a3 + 64) = v8;
  *(_OWORD *)(a3 + 88) = v4;
  return result;
}

void AST.Conditional.Condition.PCREVersionCheck.hash(into:)()
{
  unsigned __int8 *v0;
  unint64_t v1;
  unint64_t v2;
  Swift::UInt v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  Swift::UInt v10;
  unint64_t v11;
  unint64_t v12;

  v1 = *((_QWORD *)v0 + 1);
  v2 = *((_QWORD *)v0 + 2);
  v3 = *((_QWORD *)v0 + 3);
  v4 = v0[32];
  v6 = *((_QWORD *)v0 + 5);
  v5 = *((_QWORD *)v0 + 6);
  v7 = v0[64];
  v9 = *((_QWORD *)v0 + 9);
  v8 = *((_QWORD *)v0 + 10);
  v10 = *((_QWORD *)v0 + 7);
  v11 = *((_QWORD *)v0 + 11);
  v12 = *((_QWORD *)v0 + 12);
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  if (v4 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
  }
  Hasher._combine(_:)(v6 >> 14);
  Hasher._combine(_:)(v5 >> 14);
  if (v7)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v10);
  }
  Hasher._combine(_:)(v9 >> 14);
  Hasher._combine(_:)(v8 >> 14);
  Hasher._combine(_:)(v11 >> 14);
  Hasher._combine(_:)(v12 >> 14);
}

Swift::Int AST.Conditional.Condition.PCREVersionCheck.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  unint64_t v2;
  unint64_t v3;
  Swift::UInt v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  Swift::UInt v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v1 = *v0;
  v2 = *((_QWORD *)v0 + 1);
  v3 = *((_QWORD *)v0 + 2);
  v4 = *((_QWORD *)v0 + 3);
  v5 = v0[32];
  v6 = *((_QWORD *)v0 + 5);
  v7 = *((_QWORD *)v0 + 6);
  v8 = v0[64];
  v9 = *((_QWORD *)v0 + 9);
  v11 = *((_QWORD *)v0 + 7);
  v12 = *((_QWORD *)v0 + 10);
  v13 = *((_QWORD *)v0 + 11);
  v14 = *((_QWORD *)v0 + 12);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  if (v5 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4);
  }
  Hasher._combine(_:)(v6 >> 14);
  Hasher._combine(_:)(v7 >> 14);
  if (v8)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v11);
  }
  Hasher._combine(_:)(v9 >> 14);
  Hasher._combine(_:)(v12 >> 14);
  Hasher._combine(_:)(v13 >> 14);
  Hasher._combine(_:)(v14 >> 14);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.Conditional.Condition.PCREVersionCheck()
{
  unsigned __int8 *v0;
  unint64_t v1;
  unint64_t v2;
  Swift::UInt v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  Swift::UInt v10;
  unint64_t v11;
  unint64_t v12;

  v1 = *((_QWORD *)v0 + 1);
  v2 = *((_QWORD *)v0 + 2);
  v3 = *((_QWORD *)v0 + 3);
  v4 = v0[32];
  v6 = *((_QWORD *)v0 + 5);
  v5 = *((_QWORD *)v0 + 6);
  v7 = v0[64];
  v9 = *((_QWORD *)v0 + 9);
  v8 = *((_QWORD *)v0 + 10);
  v10 = *((_QWORD *)v0 + 7);
  v11 = *((_QWORD *)v0 + 11);
  v12 = *((_QWORD *)v0 + 12);
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  if (v4 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
  }
  Hasher._combine(_:)(v6 >> 14);
  Hasher._combine(_:)(v5 >> 14);
  if (v7)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v10);
  }
  Hasher._combine(_:)(v9 >> 14);
  Hasher._combine(_:)(v8 >> 14);
  Hasher._combine(_:)(v11 >> 14);
  Hasher._combine(_:)(v12 >> 14);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Conditional.Condition.PCREVersionCheck()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  unint64_t v2;
  unint64_t v3;
  Swift::UInt v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  Swift::UInt v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v1 = *v0;
  v2 = *((_QWORD *)v0 + 1);
  v3 = *((_QWORD *)v0 + 2);
  v4 = *((_QWORD *)v0 + 3);
  v5 = v0[32];
  v6 = *((_QWORD *)v0 + 5);
  v7 = *((_QWORD *)v0 + 6);
  v8 = v0[64];
  v9 = *((_QWORD *)v0 + 9);
  v11 = *((_QWORD *)v0 + 7);
  v12 = *((_QWORD *)v0 + 10);
  v13 = *((_QWORD *)v0 + 11);
  v14 = *((_QWORD *)v0 + 12);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  if (v5 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4);
  }
  Hasher._combine(_:)(v6 >> 14);
  Hasher._combine(_:)(v7 >> 14);
  if (v8)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v11);
  }
  Hasher._combine(_:)(v9 >> 14);
  Hasher._combine(_:)(v12 >> 14);
  Hasher._combine(_:)(v13 >> 14);
  Hasher._combine(_:)(v14 >> 14);
  return Hasher._finalize()();
}

__n128 AST.CustomCharacterClass.start.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;

  *(_BYTE *)a1 = *(_BYTE *)v1;
  result = *(__n128 *)(v1 + 8);
  *(__n128 *)(a1 + 8) = result;
  return result;
}

__n128 AST.CustomCharacterClass.start.setter(uint64_t a1)
{
  uint64_t v1;
  __n128 result;

  *(_BYTE *)v1 = *(_BYTE *)a1;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v1 + 8) = result;
  return result;
}

uint64_t (*AST.CustomCharacterClass.start.modify())()
{
  return AST.root.modify;
}

uint64_t AST.CustomCharacterClass.members.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AST.CustomCharacterClass.members.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

uint64_t (*AST.CustomCharacterClass.members.modify())()
{
  return AST.root.modify;
}

__n128 AST.CustomCharacterClass.location.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = v1[2];
  *a1 = result;
  return result;
}

__n128 AST.CustomCharacterClass.init(_:_:_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X8>)
{
  __n128 result;

  *(_BYTE *)a4 = *(_BYTE *)a1;
  *(_OWORD *)(a4 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a4 + 24) = a2;
  result = *a3;
  *(__n128 *)(a4 + 32) = *a3;
  return result;
}

void AST.CustomCharacterClass.Member.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD);
  char *v9;
  uint64_t v10;

  v1 = type metadata accessor for AST.Atom(0);
  MEMORY[0x1E0C80A78](v1, v2);
  v3 = type metadata accessor for AST.CustomCharacterClass.Range(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v5 = type metadata accessor for AST.CustomCharacterClass.Member(0);
  MEMORY[0x1E0C80A78](v5, v6);
  outlined init with copy of AST.Atom(v0, (uint64_t)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  v9 = (char *)sub_1DEF88C98 + 4 * byte_1DEFFDA88[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1DEF88C98()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  Swift::UInt v8;
  uint64_t v9;
  uint64_t v10;

  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  Hasher._combine(_:)(0);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v4 >> 14);
  v8 = *(_QWORD *)(v5 + 16);
  Hasher._combine(_:)(v8);
  if (v8)
  {
    v9 = v5 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    v10 = *(_QWORD *)(v2 + 72);
    do
    {
      ((void (*)(uint64_t))AST.CustomCharacterClass.Member.hash(into:))(v0);
      v9 += v10;
      --v8;
    }
    while (v8);
  }
  Hasher._combine(_:)(v6 >> 14);
  Hasher._combine(_:)(v7 >> 14);
  return swift_bridgeObjectRelease();
}

Swift::Int AST.CustomCharacterClass.Member.hashValue.getter()
{
  return AST.Atom.Kind.hashValue.getter((void (*)(_BYTE *))AST.CustomCharacterClass.Member.hash(into:));
}

Swift::Int AST.Atom.Kind.hashValue.getter(void (*a1)(_BYTE *))
{
  _BYTE v3[72];

  Hasher.init(_seed:)();
  a1(v3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.CustomCharacterClass.Member(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AST.Atom.Kind(a1, a2, (void (*)(_BYTE *))AST.CustomCharacterClass.Member.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Atom.Kind(uint64_t a1, uint64_t a2, void (*a3)(_BYTE *))
{
  _BYTE v5[72];

  Hasher.init(_seed:)();
  a3(v5);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.CustomCharacterClass.Member(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.Kind(a1, a2, a3, (void (*)(_BYTE *))AST.CustomCharacterClass.Member.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.Kind(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *))
{
  _BYTE v6[72];

  Hasher.init(_seed:)();
  a4(v6);
  return Hasher._finalize()();
}

uint64_t AST.CustomCharacterClass.Range.lhs.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of AST.Atom(v1, a1, type metadata accessor for AST.Atom);
}

uint64_t AST.CustomCharacterClass.Range.lhs.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of AST.Atom.CharacterProperty.Kind(a1, v1, type metadata accessor for AST.Atom);
}

uint64_t (*AST.CustomCharacterClass.Range.lhs.modify())()
{
  return AST.root.modify;
}

__n128 AST.CustomCharacterClass.Range.dashLoc.getter@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  __n128 result;

  result = *(__n128 *)(v1 + *(int *)(type metadata accessor for AST.CustomCharacterClass.Range(0) + 20));
  *a1 = result;
  return result;
}

uint64_t AST.CustomCharacterClass.Range.dashLoc.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;

  v2 = *a1;
  v3 = a1[1];
  result = type metadata accessor for AST.CustomCharacterClass.Range(0);
  v5 = (_QWORD *)(v1 + *(int *)(result + 20));
  *v5 = v2;
  v5[1] = v3;
  return result;
}

uint64_t (*AST.CustomCharacterClass.Range.dashLoc.modify())(_QWORD)
{
  type metadata accessor for AST.CustomCharacterClass.Range(0);
  return AST.root.modify;
}

uint64_t AST.CustomCharacterClass.Range.rhs.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for AST.CustomCharacterClass.Range(0);
  return outlined init with copy of AST.Atom(v1 + *(int *)(v3 + 24), a1, type metadata accessor for AST.Atom);
}

uint64_t AST.CustomCharacterClass.Range.rhs.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for AST.CustomCharacterClass.Range(0);
  return outlined assign with take of AST.Atom.CharacterProperty.Kind(a1, v1 + *(int *)(v3 + 24), type metadata accessor for AST.Atom);
}

uint64_t (*AST.CustomCharacterClass.Range.rhs.modify())(_QWORD)
{
  type metadata accessor for AST.CustomCharacterClass.Range(0);
  return AST.root.modify;
}

uint64_t AST.CustomCharacterClass.Range.trivia.getter()
{
  type metadata accessor for AST.CustomCharacterClass.Range(0);
  return swift_bridgeObjectRetain();
}

uint64_t AST.CustomCharacterClass.Range.trivia.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for AST.CustomCharacterClass.Range(0) + 28);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*AST.CustomCharacterClass.Range.trivia.modify())(_QWORD)
{
  type metadata accessor for AST.CustomCharacterClass.Range(0);
  return AST.root.modify;
}

uint64_t AST.CustomCharacterClass.Range.init(_:_:_:trivia:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  int *v10;
  _QWORD *v11;
  uint64_t result;

  v8 = *a2;
  v9 = a2[1];
  outlined init with take of AST.Atom.Kind(a1, a5, type metadata accessor for AST.Atom);
  v10 = (int *)type metadata accessor for AST.CustomCharacterClass.Range(0);
  v11 = (_QWORD *)(a5 + v10[5]);
  *v11 = v8;
  v11[1] = v9;
  result = outlined init with take of AST.Atom.Kind(a3, a5 + v10[6], type metadata accessor for AST.Atom);
  *(_QWORD *)(a5 + v10[7]) = a4;
  return result;
}

uint64_t AST.CustomCharacterClass.Range.location.getter@<X0>(uint64x2_t *a1@<X8>)
{
  uint64_t v1;
  uint64x2_t *v3;
  uint64_t result;
  int8x16_t v5;
  int8x16_t v6;
  uint64x2_t v7;
  int64x2_t v8;

  v3 = (uint64x2_t *)(v1 + *(int *)(type metadata accessor for AST.Atom(0) + 20));
  result = type metadata accessor for AST.CustomCharacterClass.Range(0);
  v5 = *(int8x16_t *)v3;
  v6.i64[0] = *(uint64_t *)((char *)v3->i64 + *(int *)(result + 24));
  v6.i64[1] = v3->i64[1];
  v5.i64[1] = *(uint64_t *)((char *)&v3->i64[1] + *(int *)(result + 24));
  v7 = (uint64x2_t)vbslq_s8((int8x16_t)vcgtq_u64(vshrq_n_u64(*v3, 0xEuLL), vshrq_n_u64(*(uint64x2_t *)((char *)v3 + *(int *)(result + 24)), 0xEuLL)), v6, v5);
  v8 = (int64x2_t)vshrq_n_u64(v7, 0xEuLL);
  if ((vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)v8, (uint64x2_t)vdupq_laneq_s64(v8, 1))).u8[0] & 1) != 0)
    __break(1u);
  else
    *a1 = v7;
  return result;
}

void AST.CustomCharacterClass.Range.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  int *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;

  v2 = v1;
  AST.Atom.Kind.hash(into:)();
  v4 = type metadata accessor for AST.Atom(0);
  v5 = (_QWORD *)(v1 + *(int *)(v4 + 20));
  v6 = v5[1];
  Hasher._combine(_:)(*v5 >> 14);
  Hasher._combine(_:)(v6 >> 14);
  v7 = (int *)type metadata accessor for AST.CustomCharacterClass.Range(0);
  v8 = (_QWORD *)(v1 + v7[5]);
  v9 = v8[1];
  Hasher._combine(_:)(*v8 >> 14);
  Hasher._combine(_:)(v9 >> 14);
  v10 = v1 + v7[6];
  AST.Atom.Kind.hash(into:)();
  v11 = (_QWORD *)(v10 + *(int *)(v4 + 20));
  v12 = v11[1];
  Hasher._combine(_:)(*v11 >> 14);
  Hasher._combine(_:)(v12 >> 14);
  specialized Array<A>.hash(into:)(a1, *(_QWORD *)(v2 + v7[7]));
}

Swift::Int AST.CustomCharacterClass.Range.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  int *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  _BYTE v12[72];

  v1 = v0;
  Hasher.init(_seed:)();
  AST.Atom.Kind.hash(into:)();
  v2 = type metadata accessor for AST.Atom(0);
  v3 = (_QWORD *)(v0 + *(int *)(v2 + 20));
  v4 = v3[1];
  Hasher._combine(_:)(*v3 >> 14);
  Hasher._combine(_:)(v4 >> 14);
  v5 = (int *)type metadata accessor for AST.CustomCharacterClass.Range(0);
  v6 = (_QWORD *)(v0 + v5[5]);
  v7 = v6[1];
  Hasher._combine(_:)(*v6 >> 14);
  Hasher._combine(_:)(v7 >> 14);
  v8 = v0 + v5[6];
  AST.Atom.Kind.hash(into:)();
  v9 = (_QWORD *)(v8 + *(int *)(v2 + 20));
  v10 = v9[1];
  Hasher._combine(_:)(*v9 >> 14);
  Hasher._combine(_:)(v10 >> 14);
  specialized Array<A>.hash(into:)((uint64_t)v12, *(_QWORD *)(v1 + v5[7]));
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.CustomCharacterClass.Range(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v4 = v2;
  AST.Atom.Kind.hash(into:)();
  v6 = type metadata accessor for AST.Atom(0);
  v7 = (_QWORD *)(v2 + *(int *)(v6 + 20));
  v8 = v7[1];
  Hasher._combine(_:)(*v7 >> 14);
  Hasher._combine(_:)(v8 >> 14);
  v9 = (_QWORD *)(v2 + a2[5]);
  v10 = v9[1];
  Hasher._combine(_:)(*v9 >> 14);
  Hasher._combine(_:)(v10 >> 14);
  v11 = v2 + a2[6];
  AST.Atom.Kind.hash(into:)();
  v12 = (_QWORD *)(v11 + *(int *)(v6 + 20));
  v13 = v12[1];
  Hasher._combine(_:)(*v12 >> 14);
  Hasher._combine(_:)(v13 >> 14);
  specialized Array<A>.hash(into:)(a1, *(_QWORD *)(v4 + a2[7]));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.CustomCharacterClass.Range(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _BYTE v14[72];

  v4 = v2;
  Hasher.init(_seed:)();
  AST.Atom.Kind.hash(into:)();
  v5 = type metadata accessor for AST.Atom(0);
  v6 = (_QWORD *)(v2 + *(int *)(v5 + 20));
  v7 = v6[1];
  Hasher._combine(_:)(*v6 >> 14);
  Hasher._combine(_:)(v7 >> 14);
  v8 = (_QWORD *)(v2 + a2[5]);
  v9 = v8[1];
  Hasher._combine(_:)(*v8 >> 14);
  Hasher._combine(_:)(v9 >> 14);
  v10 = v2 + a2[6];
  AST.Atom.Kind.hash(into:)();
  v11 = (_QWORD *)(v10 + *(int *)(v5 + 20));
  v12 = v11[1];
  Hasher._combine(_:)(*v11 >> 14);
  Hasher._combine(_:)(v12 >> 14);
  specialized Array<A>.hash(into:)((uint64_t)v14, *(_QWORD *)(v4 + a2[7]));
  return Hasher._finalize()();
}

_RegexParser::AST::CustomCharacterClass::SetOp_optional __swiftcall AST.CustomCharacterClass.SetOp.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of AST.CustomCharacterClass.SetOp.init(rawValue:);
  return (_RegexParser::AST::CustomCharacterClass::SetOp_optional)AST.CustomCharacterClass.SetOp.init(rawValue:)(rawValue, v2, v1);
}

uint64_t AST.CustomCharacterClass.SetOp.rawValue.getter()
{
  char *v0;

  return qword_1DF003B30[*v0];
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AST.CustomCharacterClass.SetOp(char *a1, char *a2)
{
  char v2;

  if (qword_1DF003B30[*a1] == qword_1DF003B30[*a2])
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease_n();
  return v2 & 1;
}

_RegexParser::AST::CustomCharacterClass::SetOp_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AST.CustomCharacterClass.SetOp(Swift::String *a1)
{
  return AST.CustomCharacterClass.SetOp.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AST.CustomCharacterClass.SetOp(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_1DF003B30[*v1];
  a1[1] = 0xE200000000000000;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.CustomCharacterClass.SetOp()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AST.CustomCharacterClass.SetOp()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.CustomCharacterClass.SetOp()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

_RegexParser::AST::CustomCharacterClass::Start_optional __swiftcall AST.CustomCharacterClass.Start.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  Swift::Int v5;
  _RegexParser::AST::CustomCharacterClass::Start_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of AST.CustomCharacterClass.Start.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *v4 = v7;
  return result;
}

uint64_t AST.CustomCharacterClass.Start.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 24155;
  else
    return 91;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AST.CustomCharacterClass.Start(_BYTE *a1, _BYTE *a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v8;

  v2 = *a1 == 0;
  if (*a1)
    v3 = 24155;
  else
    v3 = 91;
  if (v2)
    v4 = 0xE100000000000000;
  else
    v4 = 0xE200000000000000;
  if (*a2)
    v5 = 24155;
  else
    v5 = 91;
  if (*a2)
    v6 = 0xE200000000000000;
  else
    v6 = 0xE100000000000000;
  if (v3 == v5 && v4 == v6)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

_RegexParser::AST::CustomCharacterClass::Start_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AST.CustomCharacterClass.Start(Swift::String *a1)
{
  return AST.CustomCharacterClass.Start.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AST.CustomCharacterClass.Start(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 91;
  if (*v1)
    v2 = 24155;
  v3 = 0xE100000000000000;
  if (*v1)
    v3 = 0xE200000000000000;
  *a1 = v2;
  a1[1] = v3;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.CustomCharacterClass.Start()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AST.CustomCharacterClass.Start()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.CustomCharacterClass.Start()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void AST.CustomCharacterClass.hash(into:)()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  Swift::UInt v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = v0[1];
  v2 = v0[2];
  v4 = v0[3];
  v3 = v0[4];
  v5 = v0[5];
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  v6 = *(_QWORD *)(v4 + 16);
  Hasher._combine(_:)(v6);
  if (v6)
  {
    v7 = *(_QWORD *)(type metadata accessor for AST.CustomCharacterClass.Member(0) - 8);
    v8 = v4 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v9 = *(_QWORD *)(v7 + 72);
    do
    {
      AST.CustomCharacterClass.Member.hash(into:)();
      v8 += v9;
      --v6;
    }
    while (v6);
  }
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v5 >> 14);
}

Swift::Int AST.CustomCharacterClass.hashValue.getter()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  Swift::UInt v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = v0[1];
  v2 = v0[2];
  v4 = v0[3];
  v3 = v0[4];
  v5 = v0[5];
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  v6 = *(_QWORD *)(v4 + 16);
  Hasher._combine(_:)(v6);
  if (v6)
  {
    v7 = *(_QWORD *)(type metadata accessor for AST.CustomCharacterClass.Member(0) - 8);
    v8 = v4 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v9 = *(_QWORD *)(v7 + 72);
    do
    {
      AST.CustomCharacterClass.Member.hash(into:)();
      v8 += v9;
      --v6;
    }
    while (v6);
  }
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v5 >> 14);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.CustomCharacterClass(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v4 >> 14);
  specialized Array<A>.hash(into:)(a1, v5);
  Hasher._combine(_:)(v6 >> 14);
  Hasher._combine(_:)(v7 >> 14);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.CustomCharacterClass()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _BYTE v7[72];

  v1 = v0[1];
  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = v0[5];
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  specialized Array<A>.hash(into:)((uint64_t)v7, v3);
  Hasher._combine(_:)(v4 >> 14);
  Hasher._combine(_:)(v5 >> 14);
  return Hasher._finalize()();
}

uint64_t AST.CustomCharacterClass.isInverted.getter()
{
  _BYTE *v0;
  char v1;

  if (*v0 == 1)
    v1 = 1;
  else
    v1 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  return v1 & 1;
}

BOOL AST.CustomCharacterClass.Member.isTrivia.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _BOOL8 v5;
  uint64_t v7;

  v1 = type metadata accessor for AST.CustomCharacterClass.Member(0);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AST.Atom(v0, (uint64_t)v4, type metadata accessor for AST.CustomCharacterClass.Member);
  v5 = swift_getEnumCaseMultiPayload() == 4;
  outlined destroy of AST.Atom((uint64_t)v4, type metadata accessor for AST.CustomCharacterClass.Member);
  return v5;
}

uint64_t AST.CustomCharacterClass.Member.asTrivia.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(_QWORD);
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  v2 = v1;
  v4 = type metadata accessor for AST.CustomCharacterClass.Member(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AST.Atom(v2, (uint64_t)v7, v8);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 4)
  {
    v10 = *(_QWORD *)v7;
    v11 = *((_QWORD *)v7 + 1);
    v12 = *((_OWORD *)v7 + 1);
  }
  else
  {
    result = outlined destroy of AST.Atom((uint64_t)v7, type metadata accessor for AST.CustomCharacterClass.Member);
    v10 = 0;
    v11 = 0;
    v12 = 0uLL;
  }
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v11;
  *(_OWORD *)(a1 + 16) = v12;
  return result;
}

BOOL AST.CustomCharacterClass.Member.isSemantic.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _BOOL8 v5;
  uint64_t v7;

  v1 = type metadata accessor for AST.CustomCharacterClass.Member(0);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AST.Atom(v0, (uint64_t)v4, type metadata accessor for AST.CustomCharacterClass.Member);
  v5 = swift_getEnumCaseMultiPayload() != 4;
  outlined destroy of AST.Atom((uint64_t)v4, type metadata accessor for AST.CustomCharacterClass.Member);
  return v5;
}

void AST.CustomCharacterClass.Member.location.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(_QWORD);
  char *v20;
  _QWORD v21[6];

  v21[3] = a1;
  v2 = type metadata accessor for AST.Atom(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v4 = type metadata accessor for AST.CustomCharacterClass.Range(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v6 = type metadata accessor for AST.CustomCharacterClass.Member(0);
  v8 = MEMORY[0x1E0C80A78](v6, v7);
  v21[1] = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8, v10);
  v21[2] = (char *)v21 - v12;
  v14 = MEMORY[0x1E0C80A78](v11, v13);
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  MEMORY[0x1E0C80A78](v16, v17);
  outlined init with copy of AST.Atom(v1, (uint64_t)v21 - v18, v19);
  v20 = (char *)&loc_1DEF8A1E4 + *((int *)qword_1DEF8A410 + swift_getEnumCaseMultiPayload());
  __asm { BR              X10 }
}

uint64_t sub_1DEF8A1F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  result = swift_bridgeObjectRelease();
  v5 = *(_QWORD **)(v1 - 104);
  *v5 = v2;
  v5[1] = v3;
  return result;
}

uint64_t AST.CustomCharacterClass.strippingTriviaShallow.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int EnumCaseMultiPayload;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v3 = type metadata accessor for AST.CustomCharacterClass.Member(0);
  v41 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3, v4);
  v40 = (uint64_t)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v5, v7);
  v10 = (char *)&v31 - v9;
  MEMORY[0x1E0C80A78](v8, v11);
  v13 = (char *)&v31 - v12;
  v14 = *(unsigned __int8 *)v1;
  v16 = v1[1];
  v15 = v1[2];
  v17 = v1[3];
  v35 = v1[4];
  v36 = v15;
  v18 = v1[5];
  v19 = MEMORY[0x1E0DEE9D8];
  v42 = MEMORY[0x1E0DEE9D8];
  v20 = *(_QWORD *)(v17 + 16);
  result = swift_bridgeObjectRetain();
  v39 = v20;
  v37 = v18;
  if (v20)
  {
    v32 = v16;
    v33 = v14;
    v34 = a1;
    v22 = 0;
    v23 = MEMORY[0x1E0DEE9D8];
    v38 = v3;
    while (v22 < *(_QWORD *)(v17 + 16))
    {
      v24 = (*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
      v25 = *(_QWORD *)(v41 + 72);
      outlined init with copy of AST.Atom(v17 + v24 + v25 * v22, (uint64_t)v13, type metadata accessor for AST.CustomCharacterClass.Member);
      outlined init with copy of AST.Atom((uint64_t)v13, (uint64_t)v10, type metadata accessor for AST.CustomCharacterClass.Member);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      outlined destroy of AST.Atom((uint64_t)v10, type metadata accessor for AST.CustomCharacterClass.Member);
      if (EnumCaseMultiPayload == 4)
      {
        result = outlined destroy of AST.Atom((uint64_t)v13, type metadata accessor for AST.CustomCharacterClass.Member);
      }
      else
      {
        outlined init with take of AST.Atom.Kind((uint64_t)v13, v40, type metadata accessor for AST.CustomCharacterClass.Member);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v23 + 16) + 1, 1);
        v23 = v42;
        v28 = *(_QWORD *)(v42 + 16);
        v27 = *(_QWORD *)(v42 + 24);
        if (v28 >= v27 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
          v23 = v42;
        }
        *(_QWORD *)(v23 + 16) = v28 + 1;
        result = outlined init with take of AST.Atom.Kind(v40, v23 + v24 + v28 * v25, type metadata accessor for AST.CustomCharacterClass.Member);
      }
      if (v39 == ++v22)
      {
        v19 = v42;
        a1 = v34;
        LOBYTE(v14) = v33;
        v16 = v32;
        goto LABEL_13;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    v30 = v35;
    v29 = v36;
    result = swift_bridgeObjectRelease();
    *(_BYTE *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v16;
    *(_QWORD *)(a1 + 16) = v29;
    *(_QWORD *)(a1 + 24) = v19;
    *(_QWORD *)(a1 + 32) = v30;
    *(_QWORD *)(a1 + 40) = v37;
  }
  return result;
}

uint64_t AST.Group.kind.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 48);
  v9 = *(_QWORD *)(v1 + 56);
  v10 = *(_QWORD *)(v1 + 64);
  v11 = *(_QWORD *)(v1 + 72);
  v12 = *(_BYTE *)(v1 + 80);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 72) = v11;
  *(_BYTE *)(a1 + 80) = v12;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(v1 + 88);
  return outlined copy of AST.Group.Kind(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t AST.Group.child.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 104);
  return swift_retain();
}

__n128 AST.Group.init(_:_:_:)@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X8>)
{
  char v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __n128 result;

  v4 = *(_BYTE *)(a1 + 80);
  v5 = *a2;
  v6 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(_OWORD *)(a4 + 16) = v6;
  v7 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a4 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a4 + 48) = v7;
  *(_OWORD *)(a4 + 64) = *(_OWORD *)(a1 + 64);
  *(_BYTE *)(a4 + 80) = v4;
  *(_OWORD *)(a4 + 88) = *(_OWORD *)(a1 + 88);
  *(_QWORD *)(a4 + 104) = v5;
  result = *a3;
  *(__n128 *)(a4 + 112) = *a3;
  return result;
}

void AST.Group.Kind.hash(into:)()
{
  __asm { BR              X10 }
}

void sub_1DEF8A77C()
{
  unint64_t v0;
  unint64_t v1;

  Hasher._combine(_:)(1uLL);
  String.hash(into:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v0 >> 14);
}

Swift::Int AST.Group.Kind.hashValue.getter()
{
  Hasher.init(_seed:)();
  AST.Group.Kind.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Group.Kind()
{
  Hasher.init(_seed:)();
  AST.Group.Kind.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Group.Kind()
{
  Hasher.init(_seed:)();
  AST.Group.Kind.hash(into:)();
  return Hasher._finalize()();
}

void AST.Group.hash(into:)()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = v0[11];
  v2 = v0[12];
  v3 = v0[14];
  v4 = v0[15];
  AST.Group.Kind.hash(into:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  AST.Node.hash(into:)();
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v4 >> 14);
}

Swift::Int AST.Group.hashValue.getter()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = v0[11];
  v2 = v0[12];
  v3 = v0[14];
  v4 = v0[15];
  Hasher.init(_seed:)();
  AST.Group.Kind.hash(into:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  AST.Node.hash(into:)();
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v4 >> 14);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Group()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = v0[11];
  v2 = v0[12];
  v3 = v0[14];
  v4 = v0[15];
  Hasher.init(_seed:)();
  AST.Group.Kind.hash(into:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  AST.Node.hash(into:)();
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v4 >> 14);
  return Hasher._finalize()();
}

uint64_t AST.Group.Kind.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  if (*((_BYTE *)v0 + 80) == 1)
  {
    if (!v0[1])
      return 0;
    goto LABEL_5;
  }
  if (!*((_BYTE *)v0 + 80))
  {
LABEL_5:
    swift_bridgeObjectRetain();
    return v1;
  }
  return 0;
}

uint64_t AST.Group.Kind.lookaroundKind.getter()
{
  int8x16_t *v0;
  uint64_t v1;
  int8x16_t v2;
  uint64_t v3;

  if (v0[5].i8[0] != 3)
    return 2;
  v1 = v0->i64[0];
  v2 = vorrq_s8(vorrq_s8(v0[1], v0[3]), vorrq_s8(v0[2], v0[4]));
  v3 = *(_QWORD *)&vorr_s8(*(int8x8_t *)v2.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL)) | v0->i64[1];
  if (v0->i64[0] == 4 && v3 == 0)
    return 257;
  if (v1 == 5 && v3 == 0)
    return 1;
  if (v1 != 7 || v3 != 0)
  {
    if (v1 == 8 && !v3)
      return 0;
    return 2;
  }
  return 256;
}

uint64_t AST.Group.BalancedCapture.name.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
  *(_QWORD *)(a1 + 24) = v2;
  return swift_bridgeObjectRetain();
}

__n128 AST.Group.BalancedCapture.name.setter(__n128 *a1)
{
  __n128 *v1;
  unint64_t v2;
  unint64_t v3;
  __n128 result;
  __n128 v5;

  v5 = *a1;
  v2 = a1[1].n128_u64[0];
  v3 = a1[1].n128_u64[1];
  swift_bridgeObjectRelease();
  result = v5;
  *v1 = v5;
  v1[1].n128_u64[0] = v2;
  v1[1].n128_u64[1] = v3;
  return result;
}

uint64_t (*AST.Group.BalancedCapture.name.modify())()
{
  return AST.root.modify;
}

__n128 AST.Group.BalancedCapture.dash.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = v1[2];
  *a1 = result;
  return result;
}

__n128 AST.Group.BalancedCapture.dash.setter(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  result = *a1;
  v1[2] = *a1;
  return result;
}

uint64_t (*AST.Group.BalancedCapture.dash.modify())()
{
  return AST.root.modify;
}

uint64_t AST.Group.BalancedCapture.priorName.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 64);
  return swift_bridgeObjectRetain();
}

__n128 AST.Group.BalancedCapture.priorName.setter(__n128 *a1)
{
  __n128 *v1;
  unint64_t v2;
  unint64_t v3;
  __n128 result;
  __n128 v5;

  v5 = *a1;
  v2 = a1[1].n128_u64[0];
  v3 = a1[1].n128_u64[1];
  swift_bridgeObjectRelease();
  result = v5;
  v1[3] = v5;
  v1[4].n128_u64[0] = v2;
  v1[4].n128_u64[1] = v3;
  return result;
}

uint64_t (*AST.Group.BalancedCapture.priorName.modify())()
{
  return AST.root.modify;
}

__n128 AST.Group.BalancedCapture.init(name:dash:priorName:)@<Q0>(_OWORD *a1@<X0>, _OWORD *a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  __n128 result;

  v4 = a3->n128_u64[0];
  v5 = a3->n128_u64[1];
  v6 = a1[1];
  *(_OWORD *)a4 = *a1;
  *(_OWORD *)(a4 + 16) = v6;
  *(_OWORD *)(a4 + 32) = *a2;
  *(_QWORD *)(a4 + 48) = v4;
  *(_QWORD *)(a4 + 56) = v5;
  result = a3[1];
  *(__n128 *)(a4 + 64) = result;
  return result;
}

void AST.Group.BalancedCapture.hash(into:)()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  Swift::UInt64 v7;
  unint64_t v8;

  v2 = v0[4];
  v1 = v0[5];
  v3 = v0[8];
  v4 = v0[9];
  if (v0[1])
  {
    v8 = v0[3];
    v5 = v0[8];
    v6 = v0[2];
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    v7 = v6 >> 14;
    v3 = v5;
    Hasher._combine(_:)(v7);
    Hasher._combine(_:)(v8 >> 14);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v1 >> 14);
  String.hash(into:)();
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v4 >> 14);
}

Swift::Int AST.Group.BalancedCapture.hashValue.getter()
{
  Hasher.init(_seed:)();
  AST.Group.BalancedCapture.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Group.BalancedCapture()
{
  Hasher.init(_seed:)();
  AST.Group.BalancedCapture.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Group.BalancedCapture()
{
  Hasher.init(_seed:)();
  AST.Group.BalancedCapture.hash(into:)();
  return Hasher._finalize()();
}

void AST.MatchingOption.kind.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *AST.MatchingOption.kind.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*AST.MatchingOption.kind.modify())()
{
  return AST.root.modify;
}

__n128 AST.MatchingOption.location.setter(__n128 *a1)
{
  uint64_t v1;
  __n128 result;

  result = *a1;
  *(__n128 *)(v1 + 8) = *a1;
  return result;
}

uint64_t (*AST.MatchingOption.location.modify())()
{
  return AST.root.modify;
}

__n128 AST.MatchingOption.init(_:location:)@<Q0>(_BYTE *a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  __n128 result;

  *(_BYTE *)a3 = *a1;
  result = *a2;
  *(__n128 *)(a3 + 8) = *a2;
  return result;
}

BOOL AST.MatchingOption.isAnyExtended.getter()
{
  _BYTE *v0;

  return (*v0 & 0xFE) == 6;
}

BOOL AST.MatchingOption.isTextSegmentMode.getter()
{
  unsigned __int8 *v0;

  return *v0 - 13 < 2;
}

BOOL AST.MatchingOption.isSemanticMatchingLevel.getter()
{
  unsigned __int8 *v0;

  return *v0 - 15 < 3;
}

void AST.MatchingOption.hash(into:)()
{
  unsigned __int8 *v0;
  unint64_t v1;
  unint64_t v2;

  v1 = *((_QWORD *)v0 + 1);
  v2 = *((_QWORD *)v0 + 2);
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
}

Swift::Int AST.MatchingOption.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *v0;
  v2 = *((_QWORD *)v0 + 1);
  v3 = *((_QWORD *)v0 + 2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.MatchingOption()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *v0;
  v2 = *((_QWORD *)v0 + 1);
  v3 = *((_QWORD *)v0 + 2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.MatchingOption()
{
  unsigned __int8 *v0;
  unint64_t v1;
  unint64_t v2;

  v1 = *((_QWORD *)v0 + 1);
  v2 = *((_QWORD *)v0 + 2);
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.MatchingOption()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *v0;
  v2 = *((_QWORD *)v0 + 1);
  v3 = *((_QWORD *)v0 + 2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v3 >> 14);
  return Hasher._finalize()();
}

__n128 AST.MatchingOptionSequence.caretLoc.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unsigned __int8 v2;
  __n128 result;

  v2 = v1[1].n128_u8[0];
  result = *v1;
  *a1 = *v1;
  a1[1].n128_u8[0] = v2;
  return result;
}

__n128 AST.MatchingOptionSequence.caretLoc.setter(__n128 *a1)
{
  __n128 *v1;
  unsigned __int8 v2;
  __n128 result;

  v2 = a1[1].n128_u8[0];
  result = *a1;
  *v1 = *a1;
  v1[1].n128_u8[0] = v2;
  return result;
}

uint64_t (*AST.MatchingOptionSequence.caretLoc.modify())()
{
  return AST.root.modify;
}

uint64_t AST.MatchingOptionSequence.adding.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AST.MatchingOptionSequence.adding.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

uint64_t (*AST.MatchingOptionSequence.adding.modify())()
{
  return AST.root.modify;
}

__n128 AST.MatchingOptionSequence.minusLoc.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unsigned __int8 v2;
  __n128 result;

  v2 = v1[3].n128_u8[0];
  result = v1[2];
  *a1 = result;
  a1[1].n128_u8[0] = v2;
  return result;
}

__n128 AST.MatchingOptionSequence.minusLoc.setter(__n128 *a1)
{
  __n128 *v1;
  unsigned __int8 v2;
  __n128 result;

  v2 = a1[1].n128_u8[0];
  result = *a1;
  v1[2] = *a1;
  v1[3].n128_u8[0] = v2;
  return result;
}

uint64_t (*AST.MatchingOptionSequence.minusLoc.modify())()
{
  return AST.root.modify;
}

uint64_t AST.MatchingOptionSequence.removing.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AST.MatchingOptionSequence.removing.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 56) = a1;
  return result;
}

uint64_t (*AST.MatchingOptionSequence.removing.modify())()
{
  return AST.root.modify;
}

__n128 AST.MatchingOptionSequence.init(caretLoc:adding:minusLoc:removing:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v5;
  unsigned __int8 v6;
  __n128 result;

  v5 = *(_BYTE *)(a1 + 16);
  v6 = a3[1].n128_u8[0];
  *(_OWORD *)a5 = *(_OWORD *)a1;
  *(_BYTE *)(a5 + 16) = v5;
  *(_QWORD *)(a5 + 24) = a2;
  result = *a3;
  *(__n128 *)(a5 + 32) = *a3;
  *(_BYTE *)(a5 + 48) = v6;
  *(_QWORD *)(a5 + 56) = a4;
  return result;
}

BOOL AST.MatchingOptionSequence.resetsCurrentOptions.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + 16) & 1) == 0;
}

void AST.MatchingOptionSequence.hash(into:)(uint64_t a1)
{
  unint64_t *v1;
  unint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v2 = v1;
  v4 = v2[3];
  v5 = v2[4];
  v6 = v2[5];
  v7 = *((unsigned __int8 *)v2 + 48);
  v8 = v2[7];
  if (*((_BYTE *)v2 + 16) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v10 = *v2;
    v9 = v2[1];
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v10 >> 14);
    Hasher._combine(_:)(v9 >> 14);
  }
  specialized Array<A>.hash(into:)(a1, v4);
  if (v7)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5 >> 14);
    Hasher._combine(_:)(v6 >> 14);
  }
  specialized Array<A>.hash(into:)(a1, v8);
}

Swift::Int AST.MatchingOptionSequence.hashValue.getter()
{
  __int128 *v0;
  char v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  _BYTE v6[72];
  __int128 v7;
  char v8;
  uint64_t v9;
  __int128 v10;
  char v11;
  uint64_t v12;

  v1 = *((_BYTE *)v0 + 16);
  v2 = *((_QWORD *)v0 + 3);
  v3 = *((_BYTE *)v0 + 48);
  v4 = *((_QWORD *)v0 + 7);
  v7 = *v0;
  v8 = v1;
  v9 = v2;
  v10 = v0[2];
  v11 = v3;
  v12 = v4;
  Hasher.init(_seed:)();
  AST.MatchingOptionSequence.hash(into:)((uint64_t)v6);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.MatchingOptionSequence()
{
  __int128 *v0;
  char v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  _BYTE v6[72];
  __int128 v7;
  char v8;
  uint64_t v9;
  __int128 v10;
  char v11;
  uint64_t v12;

  v1 = *((_BYTE *)v0 + 16);
  v2 = *((_QWORD *)v0 + 3);
  v3 = *((_BYTE *)v0 + 48);
  v4 = *((_QWORD *)v0 + 7);
  v7 = *v0;
  v8 = v1;
  v9 = v2;
  v10 = v0[2];
  v11 = v3;
  v12 = v4;
  Hasher.init(_seed:)();
  AST.MatchingOptionSequence.hash(into:)((uint64_t)v6);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.MatchingOptionSequence()
{
  __int128 *v0;
  char v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  _BYTE v6[72];
  __int128 v7;
  char v8;
  uint64_t v9;
  __int128 v10;
  char v11;
  uint64_t v12;

  v1 = *((_BYTE *)v0 + 16);
  v2 = *((_QWORD *)v0 + 3);
  v3 = *((_BYTE *)v0 + 48);
  v4 = *((_QWORD *)v0 + 7);
  v7 = *v0;
  v8 = v1;
  v9 = v2;
  v10 = v0[2];
  v11 = v3;
  v12 = v4;
  Hasher.init(_seed:)();
  AST.MatchingOptionSequence.hash(into:)((uint64_t)v6);
  return Hasher._finalize()();
}

uint64_t AST.MatchingOptionSequence.init(adding:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 24) = result;
  *(_BYTE *)(a2 + 48) = 1;
  *(_QWORD *)(a2 + 56) = MEMORY[0x1E0DEE9D8];
  return result;
}

uint64_t AST.MatchingOptionSequence.init(removing:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v2 = MEMORY[0x1E0DEE9D8];
  *(_BYTE *)(a2 + 16) = 1;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 24) = v2;
  *(_BYTE *)(a2 + 48) = 1;
  *(_QWORD *)(a2 + 56) = result;
  return result;
}

uint64_t AST.MatchingOption._dumpBase.getter()
{
  unsigned __int8 *v0;
  __int128 v2;

  BYTE8(v2) = 0;
  *(_QWORD *)&v2 = *v0;
  _print_unlocked<A, B>(_:_:)();
  return *(_QWORD *)((char *)&v2 + 1);
}

uint64_t protocol witness for _ASTPrintable._dumpBase.getter in conformance AST.MatchingOption()
{
  unsigned __int8 *v0;
  __int128 v2;

  BYTE8(v2) = 0;
  *(_QWORD *)&v2 = *v0;
  _print_unlocked<A, B>(_:_:)();
  return *(_QWORD *)((char *)&v2 + 1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.MatchingOption(uint64_t a1)
{
  unint64_t v2;

  v2 = lazy protocol witness table accessor for type AST.MatchingOption and conformance AST.MatchingOption();
  return (*(uint64_t (**)(uint64_t, unint64_t))(v2 + 24))(a1, v2);
}

uint64_t AST.MatchingOptionSequence._dumpBase.getter()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v1 = *(unsigned __int8 *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 56);
  _StringGuts.grow(_:)(50);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = MEMORY[0x1DF0F3828](v2, &type metadata for AST.MatchingOption);
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x69766F6D6572202CLL;
  v5._object = (void *)0xEC000000203A676ELL;
  String.append(_:)(v5);
  v6._countAndFlagsBits = MEMORY[0x1DF0F3828](v3, &type metadata for AST.MatchingOption);
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._object = (void *)0x80000001DF004EF0;
  v7._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v7);
  if (v1)
    v8 = 0x65736C6166;
  else
    v8 = 1702195828;
  if (v1)
    v9 = 0xE500000000000000;
  else
    v9 = 0xE400000000000000;
  v10 = v9;
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRelease();
  return 0x203A676E69646461;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.MatchingOptionSequence()
{
  return AST.MatchingOptionSequence._dumpBase.getter();
}

Swift::Int AST.AbsentFunction.Start.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void AST.GlobalMatchingOption.Kind.hash(into:)()
{
  __asm { BR              X10 }
}

void sub_1DEF8BA64()
{
  Swift::UInt v0;
  unint64_t v1;
  unint64_t v2;
  char v3;

  Hasher._combine(_:)(0);
  if ((v3 & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v0);
  }
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v1 >> 14);
}

Swift::Int AST.GlobalMatchingOption.Kind.hashValue.getter()
{
  return AST.AbsentFunction.Kind.hashValue.getter((void (*)(_BYTE *))AST.GlobalMatchingOption.Kind.hash(into:));
}

Swift::Int AST.AbsentFunction.Kind.hashValue.getter(void (*a1)(_BYTE *))
{
  __int128 *v1;
  __int128 v3;
  _BYTE v5[72];
  __int128 v6;
  __int128 v7;

  v3 = v1[1];
  v6 = *v1;
  v7 = v3;
  Hasher.init(_seed:)();
  a1(v5);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.GlobalMatchingOption.Kind(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AST.AbsentFunction.Kind(a1, a2, (void (*)(_BYTE *))AST.GlobalMatchingOption.Kind.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.AbsentFunction.Kind(uint64_t a1, uint64_t a2, void (*a3)(_BYTE *))
{
  __int128 *v3;
  __int128 v5;
  _BYTE v7[72];
  __int128 v8;
  __int128 v9;

  v5 = v3[1];
  v8 = *v3;
  v9 = v5;
  Hasher.init(_seed:)();
  a3(v7);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.GlobalMatchingOption.Kind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AST.AbsentFunction.Kind(a1, a2, a3, (void (*)(_BYTE *))AST.GlobalMatchingOption.Kind.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.AbsentFunction.Kind(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *))
{
  __int128 *v4;
  __int128 v6;
  _BYTE v8[72];
  __int128 v9;
  __int128 v10;

  v6 = v4[1];
  v9 = *v4;
  v10 = v6;
  Hasher.init(_seed:)();
  a4(v8);
  return Hasher._finalize()();
}

__n128 AST.GlobalMatchingOption.kind.getter@<Q0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)v1;
  v3 = *(_OWORD *)(v1 + 16);
  *a1 = *(_OWORD *)v1;
  a1[1] = v3;
  return result;
}

__n128 AST.GlobalMatchingOption.kind.setter(uint64_t a1)
{
  _OWORD *v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *v1 = *(_OWORD *)a1;
  v1[1] = v3;
  return result;
}

uint64_t (*AST.GlobalMatchingOption.kind.modify())()
{
  return AST.root.modify;
}

__n128 AST.GlobalMatchingOption.location.setter(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  result = *a1;
  v1[2] = *a1;
  return result;
}

uint64_t (*AST.GlobalMatchingOption.location.modify())()
{
  return AST.root.modify;
}

__n128 AST.GlobalMatchingOption.init(_:_:)@<Q0>(_OWORD *a1@<X0>, __n128 *a2@<X1>, _OWORD *a3@<X8>)
{
  __int128 v3;
  __n128 result;

  v3 = a1[1];
  *a3 = *a1;
  a3[1] = v3;
  result = *a2;
  a3[2] = *a2;
  return result;
}

void AST.GlobalMatchingOption.hash(into:)()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  AST.GlobalMatchingOption.Kind.hash(into:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
}

Swift::Int AST.GlobalMatchingOption.hashValue.getter()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  Hasher.init(_seed:)();
  AST.GlobalMatchingOption.Kind.hash(into:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.GlobalMatchingOption()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  Hasher.init(_seed:)();
  AST.GlobalMatchingOption.Kind.hash(into:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AST.GlobalMatchingOption()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  AST.GlobalMatchingOption.Kind.hash(into:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.GlobalMatchingOption()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  Hasher.init(_seed:)();
  AST.GlobalMatchingOption.Kind.hash(into:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  return Hasher._finalize()();
}

__n128 AST.Quantification.amount.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __n128 result;

  v2 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 48) = v3;
  result = *(__n128 *)(v1 + 64);
  *(__n128 *)(a1 + 64) = result;
  return result;
}

__n128 AST.Quantification.kind.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;

  *(_BYTE *)a1 = *(_BYTE *)(v1 + 80);
  result = *(__n128 *)(v1 + 88);
  *(__n128 *)(a1 + 8) = result;
  return result;
}

uint64_t AST.Quantification.child.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 104);
  return swift_retain();
}

uint64_t AST.Quantification.trivia.getter()
{
  return swift_bridgeObjectRetain();
}

__n128 AST.Quantification.init(_:_:_:_:trivia:)@<Q0>(_OWORD *a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __n128 result;

  v6 = *a2;
  v7 = *a3;
  v8 = a1[1];
  *(_OWORD *)a6 = *a1;
  *(_OWORD *)(a6 + 16) = v8;
  v9 = a1[3];
  *(_OWORD *)(a6 + 32) = a1[2];
  *(_OWORD *)(a6 + 48) = v9;
  *(_OWORD *)(a6 + 64) = a1[4];
  *(_BYTE *)(a6 + 80) = v6;
  *(_OWORD *)(a6 + 88) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a6 + 104) = v7;
  result = *a4;
  *(__n128 *)(a6 + 112) = *a4;
  *(_QWORD *)(a6 + 128) = a5;
  return result;
}

void AST.Quantification.Amount.hash(into:)()
{
  __asm { BR              X10 }
}

void sub_1DEF8C038()
{
  Swift::UInt v0;
  unint64_t v1;
  unint64_t v2;
  char v3;

  Hasher._combine(_:)(3uLL);
  if ((v3 & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v0);
  }
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v1 >> 14);
}

Swift::Int AST.Quantification.Amount.hashValue.getter()
{
  Hasher.init(_seed:)();
  AST.Quantification.Amount.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Quantification.Amount()
{
  Hasher.init(_seed:)();
  AST.Quantification.Amount.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Quantification.Amount()
{
  Hasher.init(_seed:)();
  AST.Quantification.Amount.hash(into:)();
  return Hasher._finalize()();
}

_RegexParser::AST::Quantification::Kind_optional __swiftcall AST.Quantification.Kind.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of AST.Quantification.Kind.init(rawValue:);
  return (_RegexParser::AST::Quantification::Kind_optional)AST.CustomCharacterClass.SetOp.init(rawValue:)(rawValue, v2, v1);
}

uint64_t AST.CustomCharacterClass.SetOp.init(rawValue:)@<X0>(Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X2>, char *a3@<X8>)
{
  void *object;
  Swift::String v4;
  unint64_t v7;
  uint64_t result;
  char v9;

  object = string._object;
  v4._countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  v7 = _findStringSwitchCase(cases:string:)(cases, v4);
  result = swift_bridgeObjectRelease();
  v9 = 3;
  if (v7 < 3)
    v9 = v7;
  *a3 = v9;
  return result;
}

uint64_t AST.Quantification.Kind.rawValue.getter()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = 63;
  if (*v0 != 1)
    v1 = 43;
  if (*v0)
    return v1;
  else
    return *v0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AST.Quantification.Kind(_BYTE *a1, _BYTE *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v10;

  v2 = *a1;
  v3 = 63;
  if (v2 != 1)
    v3 = 43;
  if (*a1)
    v4 = v3;
  else
    v4 = *a1;
  if (v2)
    v5 = 0xE100000000000000;
  else
    v5 = 0xE000000000000000;
  v6 = 63;
  if (*a2 != 1)
    v6 = 43;
  if (*a2)
    v7 = v6;
  else
    v7 = *a2;
  if (*a2)
    v8 = 0xE100000000000000;
  else
    v8 = 0xE000000000000000;
  if (v4 == v7 && v5 == v8)
    v10 = 1;
  else
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10 & 1;
}

_RegexParser::AST::Quantification::Kind_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AST.Quantification.Kind(Swift::String *a1)
{
  return AST.Quantification.Kind.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AST.Quantification.Kind(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = *v1;
  v3 = 0xE000000000000000;
  v4 = 63;
  if ((_DWORD)v2 != 1)
    v4 = 43;
  if (*v1)
  {
    v2 = v4;
    v3 = 0xE100000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Quantification.Kind()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AST.Quantification.Kind()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Quantification.Kind()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void AST.Quantification.hash(into:)(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v3 = v1[8];
  v4 = v1[9];
  v6 = v1[11];
  v5 = v1[12];
  v7 = v1[14];
  v8 = v1[15];
  v9 = v1[16];
  AST.Quantification.Amount.hash(into:)();
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v4 >> 14);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v6 >> 14);
  Hasher._combine(_:)(v5 >> 14);
  AST.Node.hash(into:)();
  Hasher._combine(_:)(v7 >> 14);
  Hasher._combine(_:)(v8 >> 14);
  specialized Array<A>.hash(into:)(a1, v9);
}

Swift::Int AST.Quantification.hashValue.getter()
{
  return AST.Atom.Kind.hashValue.getter((void (*)(_BYTE *))AST.Quantification.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Quantification(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AST.Atom.Kind(a1, a2, (void (*)(_BYTE *))AST.Quantification.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Quantification(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.Kind(a1, a2, a3, (void (*)(_BYTE *))AST.Quantification.hash(into:));
}

void AST.Quantification.Amount.bounds.getter()
{
  __asm { BR              X11 }
}

uint64_t sub_1DEF8C6A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t CaptureList.captures.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CaptureList.captures.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*CaptureList.captures.modify())()
{
  return AST.root.modify;
}

uint64_t CaptureList.init<A>(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Array.init<A>(_:)();
  *a1 = result;
  return result;
}

uint64_t CaptureList.append(_:)(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v2 = a1[1];
  v13 = *a1;
  v3 = a1[2];
  v4 = a1[3];
  v5 = a1[4];
  v6 = a1[5];
  v7 = *((_BYTE *)a1 + 48);
  v8 = *v1;
  swift_bridgeObjectRetain();
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v8 + 16) + 1, 1, (char *)v8);
    v8 = result;
  }
  v11 = *(_QWORD *)(v8 + 16);
  v10 = *(_QWORD *)(v8 + 24);
  if (v11 >= v10 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v11 + 1, 1, (char *)v8);
    v8 = result;
  }
  *(_QWORD *)(v8 + 16) = v11 + 1;
  v12 = v8 + 56 * v11;
  *(_QWORD *)(v12 + 32) = v13;
  *(_QWORD *)(v12 + 40) = v2;
  *(_QWORD *)(v12 + 48) = v3;
  *(_QWORD *)(v12 + 56) = v4;
  *(_QWORD *)(v12 + 64) = v5;
  *(_QWORD *)(v12 + 72) = v6;
  *(_BYTE *)(v12 + 80) = v7;
  *v1 = v8;
  return result;
}

uint64_t CaptureList.Capture.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CaptureList.Capture.name.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*CaptureList.Capture.name.modify())()
{
  return AST.root.modify;
}

uint64_t CaptureList.Capture.type.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t CaptureList.Capture.type.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*CaptureList.Capture.type.modify())()
{
  return AST.root.modify;
}

uint64_t CaptureList.Capture.optionalDepth.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t CaptureList.Capture.optionalDepth.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*CaptureList.Capture.optionalDepth.modify())()
{
  return AST.root.modify;
}

__n128 CaptureList.Capture.location.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = v1[2];
  *a1 = result;
  return result;
}

__n128 CaptureList.Capture.location.setter(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  result = *a1;
  v1[2] = *a1;
  return result;
}

uint64_t (*CaptureList.Capture.location.modify())()
{
  return AST.root.modify;
}

uint64_t CaptureList.Capture.visibleInTypedOutput.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t CaptureList.Capture.visibleInTypedOutput.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 48) = result;
  return result;
}

uint64_t (*CaptureList.Capture.visibleInTypedOutput.modify())()
{
  return AST.root.modify;
}

__n128 CaptureList.Capture.init(name:type:optionalDepth:visibleInTypedOutput:_:)@<Q0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, unsigned __int8 a5@<W4>, __n128 *a6@<X5>, __n128 *a7@<X8>)
{
  __n128 result;

  a7->n128_u64[0] = a1;
  a7->n128_u64[1] = a2;
  a7[1].n128_u64[0] = a3;
  a7[1].n128_u64[1] = a4;
  result = *a6;
  a7[2] = *a6;
  a7[3].n128_u8[0] = a5;
  return result;
}

Swift::Int_optional __swiftcall CaptureList.indexOfCapture(named:)(Swift::String named)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *object;
  uint64_t countAndFlagsBits;
  Swift::Int v6;
  _QWORD *v7;
  BOOL v8;
  Swift::Bool v9;
  Swift::Int v10;
  Swift::Int_optional result;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 16);
  if (v3)
  {
    object = named._object;
    countAndFlagsBits = named._countAndFlagsBits;
    v6 = 0;
    v7 = (_QWORD *)(v2 + 40);
    while (1)
    {
      if (*v7)
      {
        v8 = *(v7 - 1) == countAndFlagsBits && *v7 == (_QWORD)object;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          break;
      }
      ++v6;
      v7 += 7;
      if (v3 == v6)
        goto LABEL_11;
    }
    v9 = 0;
  }
  else
  {
LABEL_11:
    v6 = 0;
    v9 = 1;
  }
  v10 = v6;
  result.value = v10;
  result.is_nil = v9;
  return result;
}

Swift::Bool __swiftcall CaptureList.hasCapture(named:)(Swift::String named)
{
  Swift::Int_optional v2;

  v2 = CaptureList.indexOfCapture(named:)(named);
  return !v2.is_nil;
}

uint64_t CaptureList.init(arrayLiteral:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t CaptureList.Builder.captures.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_bridgeObjectRetain();
}

uint64_t CaptureList.Builder.captures.setter(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_bridgeObjectRelease();
  *v1 = v2;
  return result;
}

uint64_t (*CaptureList.Builder.captures.modify())()
{
  return AST.root.modify;
}

_RegexParser::CaptureList::Builder __swiftcall CaptureList.Builder.init()()
{
  _QWORD *v0;
  _RegexParser::CaptureList::Builder result;

  *v0 = MEMORY[0x1E0DEE9D8];
  return result;
}

uint64_t CaptureList.Builder.OptionalNesting.outerDepth.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t CaptureList.Builder.OptionalNesting.outerDepth.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*CaptureList.Builder.OptionalNesting.outerDepth.modify())()
{
  return AST.root.modify;
}

uint64_t CaptureList.Builder.OptionalNesting.canNest.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t CaptureList.Builder.OptionalNesting.canNest.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = result;
  return result;
}

uint64_t (*CaptureList.Builder.OptionalNesting.canNest.modify())()
{
  return AST.root.modify;
}

uint64_t CaptureList.Builder.OptionalNesting.innerDepth.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t CaptureList.Builder.OptionalNesting.innerDepth.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*CaptureList.Builder.OptionalNesting.innerDepth.modify())()
{
  return AST.root.modify;
}

_RegexParser::CaptureList::Builder::OptionalNesting __swiftcall CaptureList.Builder.OptionalNesting.init(canNest:)(_RegexParser::CaptureList::Builder::OptionalNesting canNest)
{
  uint64_t v1;

  *(_QWORD *)v1 = 0;
  *(_BYTE *)(v1 + 8) = canNest.outerDepth;
  *(_QWORD *)(v1 + 16) = 0;
  return canNest;
}

uint64_t CaptureList.Builder.OptionalNesting.depth.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  v1 = v0[2];
  result = *v0 + v1;
  if (__OFADD__(*v0, v1))
    __break(1u);
  return result;
}

void CaptureList.Builder.OptionalNesting.disablingNesting.getter(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  v2 = *v1;
  v3 = v1[2];
  if (*((_BYTE *)v1 + 8) != 1)
    goto LABEL_4;
  v4 = __OFADD__(v2, v3);
  v2 += v3;
  if (!v4)
  {
    v3 = 0;
LABEL_4:
    *(_QWORD *)a1 = v2;
    *(_BYTE *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = v3;
    return;
  }
  __break(1u);
}

void CaptureList.Builder.OptionalNesting.addingOptional.getter(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v2 = *v1;
  v3 = *((unsigned __int8 *)v1 + 8);
  if (v3 == 1)
  {
    v4 = v1[2];
    v5 = __OFADD__(v4, 1);
    v6 = v4 + 1;
    if (!v5)
      goto LABEL_6;
    __break(1u);
  }
  v6 = 1;
LABEL_6:
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v6;
}

void CaptureList.Builder.addCaptures(of:optionalNesting:visibleInTypedOutput:)(uint64_t a1)
{
  __asm { BR              X10 }
}

void sub_1DEF8CC68()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(v0 + 16);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = 0;
    v8 = v3 + 1;
    if (__OFADD__(v3, 1))
      v9 = v1;
    else
      v9 = 0;
    if (v1)
      v10 = v8;
    else
      v10 = 1;
    do
    {
      if (v7 >= *(_QWORD *)(v5 + 16))
      {
        __break(1u);
LABEL_13:
        __break(1u);
        JUMPOUT(0x1DEF8D0F0);
      }
      v11 = *(_QWORD *)(v5 + 32 + 8 * v7);
      if ((v9 & 1) != 0)
        goto LABEL_13;
      ++v7;
      *(_QWORD *)(v4 - 216) = v2;
      *(_BYTE *)(v4 - 208) = v1;
      *(_QWORD *)(v4 - 200) = v10;
      CaptureList.Builder.addCaptures(of:optionalNesting:visibleInTypedOutput:)((uint64_t)&v11);
    }
    while (v6 != v7);
  }
}

void static CaptureList.Builder.build(_:)(uint64_t *a1@<X0>, char **a2@<X8>)
{
  uint64_t v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;

  v3 = *a1;
  v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v6 = *((_QWORD *)v4 + 2);
  v5 = *((_QWORD *)v4 + 3);
  if (v6 >= v5 >> 1)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v5 > 1), v6 + 1, 1, v4);
  *((_QWORD *)v4 + 2) = v6 + 1;
  v7 = &v4[56 * v6];
  *((_QWORD *)v7 + 4) = 0;
  *((_QWORD *)v7 + 5) = 0;
  *((_QWORD *)v7 + 6) = MEMORY[0x1E0DEBAF0];
  *(_OWORD *)(v7 + 56) = xmmword_1DF003ED0;
  *((_QWORD *)v7 + 9) = 15;
  v7[80] = 1;
  v8 = v3;
  v9 = v4;
  CaptureList.Builder.addCaptures(of:optionalNesting:visibleInTypedOutput:)((uint64_t)&v8);
  *a2 = v9;
}

int64x2_t static Source.Location.fake.getter@<Q0>(int64x2_t *a1@<X8>)
{
  int64x2_t result;

  result = vdupq_n_s64(0xFuLL);
  *a1 = result;
  return result;
}

void AST.captureList.getter(char **a1@<X8>)
{
  __int128 *v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;

  v2 = *((_QWORD *)v1 + 2);
  v3 = *v1;
  v4 = v2;
  static CaptureList.Builder.build(_:)((uint64_t *)&v3, a1);
}

uint64_t static CaptureList.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CaptureList(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t CaptureList.Capture.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;

  v1 = *(_QWORD *)(v0 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any.Type);
  v2 = String.init<A>(describing:)();
  v3 = MEMORY[0x1DF0F378C](63, 0xE100000000000000, v1);
  v5 = v4;
  swift_bridgeObjectRetain();
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CaptureList.Capture()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;

  v1 = *(_QWORD *)(v0 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any.Type);
  v2 = String.init<A>(describing:)();
  v3 = MEMORY[0x1DF0F378C](63, 0xE100000000000000, v1);
  v5 = v4;
  swift_bridgeObjectRetain();
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t CaptureList.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  int64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  Swift::String v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 16);
  if (v2)
  {
    v22 = MEMORY[0x1E0DEE9D8];
    result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    v4 = 0;
    v5 = (uint64_t *)(v1 + 56);
    while (v4 < *(_QWORD *)(v1 + 16))
    {
      v6 = *v5;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any.Type);
      v7 = String.init<A>(describing:)();
      v9 = v8;
      v10 = MEMORY[0x1DF0F378C](63, 0xE100000000000000, v6);
      v12 = v11;
      swift_bridgeObjectRetain();
      v13._countAndFlagsBits = v10;
      v13._object = v12;
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v15 = *(_QWORD *)(v22 + 16);
      v14 = *(_QWORD *)(v22 + 24);
      if (v15 >= v14 >> 1)
        result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v14 > 1), v15 + 1, 1);
      ++v4;
      *(_QWORD *)(v22 + 16) = v15 + 1;
      v16 = v22 + 16 * v15;
      *(_QWORD *)(v16 + 32) = v7;
      *(_QWORD *)(v16 + 40) = v9;
      v5 += 7;
      if (v2 == v4)
        goto LABEL_7;
    }
    __break(1u);
  }
  else
  {
LABEL_7:
    swift_getCanonicalSpecializedMetadata();
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t)&unk_1EA9768C0, (uint64_t)&cache variable for noncanonical specialized generic type metadata for [String], MEMORY[0x1E0DEAF20]);
    v17 = BidirectionalCollection<>.joined(separator:)();
    v19 = v18;
    swift_bridgeObjectRelease();
    v20._countAndFlagsBits = v17;
    v20._object = v19;
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v21._countAndFlagsBits = 41;
    v21._object = (void *)0xE100000000000000;
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    return 40;
  }
  return result;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance CaptureList@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t static CaptureStructure.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v24;
  char v25;
  __int128 v26;
  uint64_t v27;
  char v28;
  __int128 v29;
  uint64_t v30;
  char v31;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(unsigned __int8 *)(a1 + 24);
  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(unsigned __int8 *)(a2 + 24);
  if (!*(_BYTE *)(a1 + 24))
  {
    if (*(_BYTE *)(a2 + 24))
      goto LABEL_13;
    if (v3)
    {
      if (v7)
      {
        if (v2 != v6 || v3 != v7)
        {
          v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
          outlined copy of CaptureStructure(v6, v7, v8, 0);
          outlined copy of CaptureStructure(v2, v3, v4, 0);
          outlined consume of CaptureStructure(v2, v3, v4, 0);
          outlined consume of CaptureStructure(v6, v7, v8, 0);
          v14 = 0;
          if ((v25 & 1) == 0)
            return v14 & 1;
LABEL_25:
          if (v4)
          {
            if (!v8 || v4 != v8)
              goto LABEL_15;
          }
          else if (v8)
          {
            goto LABEL_15;
          }
          v14 = 1;
          return v14 & 1;
        }
        outlined copy of CaptureStructure(*(_QWORD *)a1, v3, v8, 0);
        outlined copy of CaptureStructure(v2, v3, v4, 0);
        outlined consume of CaptureStructure(v2, v3, v4, 0);
        v15 = v2;
        v16 = v3;
LABEL_24:
        outlined consume of CaptureStructure(v15, v16, v8, 0);
        goto LABEL_25;
      }
      outlined copy of CaptureStructure(*(_QWORD *)a2, 0, v8, 0);
      outlined copy of CaptureStructure(v2, v3, v4, 0);
      outlined consume of CaptureStructure(v2, v3, v4, 0);
      v19 = v6;
      v20 = 0;
    }
    else
    {
      v24 = *(_QWORD *)a2;
      if (!v7)
      {
        outlined copy of CaptureStructure(v24, 0, v8, 0);
        outlined copy of CaptureStructure(v2, 0, v4, 0);
        outlined consume of CaptureStructure(v2, 0, v4, 0);
        v15 = v6;
        v16 = 0;
        goto LABEL_24;
      }
      outlined copy of CaptureStructure(v24, *(_QWORD *)(a2 + 8), v8, 0);
      outlined copy of CaptureStructure(v2, 0, v4, 0);
      outlined consume of CaptureStructure(v2, 0, v4, 0);
      v19 = v6;
      v20 = v7;
    }
    v21 = v8;
    v22 = 0;
    goto LABEL_14;
  }
  if (v5 != 1)
  {
    if (v9 == 2)
    {
      v17 = *(_QWORD *)(v2 + 16);
      v18 = *(_QWORD *)(v6 + 16);
      outlined copy of CaptureStructure(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), v8, 2);
      outlined copy of CaptureStructure(v2, v3, v4, 2);
      v14 = specialized static Array<A>.== infix(_:_:)(v17, v18);
      outlined consume of CaptureStructure(v2, v3, v4, 2);
      outlined consume of CaptureStructure(v6, v7, v8, 2);
      return v14 & 1;
    }
    goto LABEL_13;
  }
  if (v9 != 1)
  {
LABEL_13:
    outlined copy of CaptureStructure(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), v8, v9);
    outlined copy of CaptureStructure(v2, v3, v4, v5);
    outlined consume of CaptureStructure(v2, v3, v4, v5);
    v19 = v6;
    v20 = v7;
    v21 = v8;
    v22 = v9;
LABEL_14:
    outlined consume of CaptureStructure(v19, v20, v21, v22);
LABEL_15:
    v14 = 0;
    return v14 & 1;
  }
  v10 = *(_BYTE *)(v2 + 40);
  v11 = *(_QWORD *)(v2 + 32);
  v12 = *(_QWORD *)(v6 + 32);
  v13 = *(_BYTE *)(v6 + 40);
  v29 = *(_OWORD *)(v2 + 16);
  v30 = v11;
  v31 = v10;
  v26 = *(_OWORD *)(v6 + 16);
  v27 = v12;
  v28 = v13;
  outlined copy of CaptureStructure(v6, v7, v8, 1);
  outlined copy of CaptureStructure(v2, v3, v4, 1);
  v14 = static CaptureStructure.== infix(_:_:)(&v29, &v26);
  outlined consume of CaptureStructure(v2, v3, v4, 1);
  outlined consume of CaptureStructure(v6, v7, v8, 1);
  return v14 & 1;
}

uint64_t CaptureStructure.encode(to:)(_WORD *a1)
{
  __int128 *v1;
  int v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  char v13;

  v3 = *((unsigned __int8 *)v1 + 24);
  if (a1)
    *a1 = 1;
  v10 = *v1;
  v4 = *((_QWORD *)v1 + 2);
  result = swift_allocObject();
  v6 = result;
  *(_QWORD *)(result + 16) = 2;
  if (v3 == 2 && !*(_QWORD *)(*(_QWORD *)(v10 + 16) + 16))
  {
    v7 = 2;
  }
  else
  {
    v11 = v10;
    v12 = v4;
    v13 = v3;
    result = encode #1 (_:isTopLevel:) in CaptureStructure.encode(to:)((uint64_t *)&v11, 1, (uint64_t)a1, result);
    v7 = *(_QWORD *)(v6 + 16);
  }
  *((_BYTE *)a1 + v7) = 0;
  v8 = __OFADD__(v7, 1);
  v9 = v7 + 1;
  if (v8)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v6 + 16) = v9;
    return swift_release();
  }
  return result;
}

uint64_t encode #1 (_:isTopLevel:) in CaptureStructure.encode(to:)(uint64_t *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t result;
  uint64_t v8;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  char v33;

  v6 = a1;
  result = *a1;
  if (*((_BYTE *)v6 + 24))
  {
    if (*((_BYTE *)v6 + 24) != 1)
      goto LABEL_16;
    v8 = *(_QWORD *)(result + 32);
    v9 = *(_BYTE *)(result + 40);
    v31 = *(_OWORD *)(result + 16);
    v32 = v8;
    v33 = v9;
    result = encode #1 (_:isTopLevel:) in CaptureStructure.encode(to:)(&v31, 0, a3, a4);
    *(_BYTE *)(a3 + *(_QWORD *)(a4 + 16)) = 4;
    v10 = *(_QWORD *)(a4 + 16);
    v11 = __OFADD__(v10, 1);
    v6 = (uint64_t *)(v10 + 1);
    if (!v11)
      goto LABEL_28;
    __break(1u);
  }
  if (v6[2])
  {
LABEL_36:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v12 = v6[1];
  v6 = *(uint64_t **)(a4 + 16);
  if (!v12)
  {
LABEL_27:
    *((_BYTE *)v6 + a3) = 1;
    v29 = *(_QWORD *)(a4 + 16);
    v11 = __OFADD__(v29, 1);
    v6 = (uint64_t *)(v29 + 1);
    if (v11)
    {
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    goto LABEL_28;
  }
  *((_BYTE *)v6 + a3) = 2;
  v13 = *(_QWORD *)(a4 + 16);
  v14 = v13 + 1;
  if (__OFADD__(v13, 1))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  *(_QWORD *)(a4 + 16) = v14;
  v15 = String.utf8CString.getter();
  v16 = *(_QWORD *)(v15 + 16);
  if (__OFADD__(v14, v16))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if ((uint64_t)(v14 + v16) < v14)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (a3)
    memmove((void *)(a3 + v14), (const void *)(v15 + 32), v16);
  result = swift_release();
  v17 = *(_QWORD *)(a4 + 16);
  v11 = __OFADD__(v17, v16);
  v6 = (uint64_t *)(v17 + v16);
  if (!v11)
    goto LABEL_28;
  __break(1u);
LABEL_16:
  v18 = *(_QWORD *)(result + 16);
  if ((a2 & 1) == 0)
  {
    *(_BYTE *)(a3 + *(_QWORD *)(a4 + 16)) = 5;
    v19 = *(_QWORD *)(a4 + 16);
    v11 = __OFADD__(v19, 1);
    v20 = v19 + 1;
    if (v11)
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    *(_QWORD *)(a4 + 16) = v20;
  }
  v30 = a2;
  v21 = *(_QWORD *)(v18 + 16);
  if (v21)
  {
    v22 = 0;
    v23 = (char *)(v18 + 56);
    while (v22 < *(_QWORD *)(v18 + 16))
    {
      ++v22;
      v25 = *((_QWORD *)v23 - 2);
      v24 = *((_QWORD *)v23 - 1);
      v26 = *((_QWORD *)v23 - 3);
      v27 = *v23;
      v23 += 32;
      *(_QWORD *)&v31 = v26;
      *((_QWORD *)&v31 + 1) = v25;
      v32 = v24;
      v33 = v27;
      outlined copy of CaptureStructure(v26, v25, v24, v27);
      encode #1 (_:isTopLevel:) in CaptureStructure.encode(to:)(&v31, 0, a3, a4);
      result = outlined consume of CaptureStructure(v26, v25, v24, v27);
      if (v21 == v22)
        goto LABEL_23;
    }
    __break(1u);
    goto LABEL_31;
  }
LABEL_23:
  if ((v30 & 1) != 0)
    return result;
  *(_BYTE *)(a3 + *(_QWORD *)(a4 + 16)) = 6;
  v28 = *(_QWORD *)(a4 + 16);
  v11 = __OFADD__(v28, 1);
  v6 = (uint64_t *)(v28 + 1);
  if (v11)
  {
    __break(1u);
    goto LABEL_27;
  }
LABEL_28:
  *(_QWORD *)(a4 + 16) = v6;
  return result;
}

uint64_t CaptureStructure.description.getter()
{
  uint64_t countAndFlagsBits;
  _RegexParser::PrettyPrinter v2;

  v2.maxTopDownLevels.value = 0;
  v2.maxTopDownLevels.is_nil = 1;
  v2.minBottomUpLevels.value = 0;
  v2.minBottomUpLevels.is_nil = 1;
  *(_OWORD *)&v2.indentWidth = xmmword_1DF003EE0;
  v2.result._object = (void *)0xE000000000000000;
  v2.startOfLine = 1;
  v2.indentLevel = 0;
  v2.quantificationBehavior = _RegexParser_AST_Quantification_Kind_eager;
  v2.inlineMatchingOptions._rawValue = (void *)MEMORY[0x1E0DEE9D8];
  CaptureStructure._print(_:)(&v2);
  countAndFlagsBits = v2.result._countAndFlagsBits;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return countAndFlagsBits;
}

Swift::Void __swiftcall CaptureStructure._print(_:)(_RegexParser::PrettyPrinter *a1)
{
  Swift::String *v1;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  Swift::String v7;
  Swift::Int v8;
  BOOL v9;
  Swift::Int v10;
  Swift::Int v11;
  Swift::Int v12;
  uint64_t v13;
  void *object;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  Swift::String v19;
  Swift::Int indentLevel;
  Swift::Int v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t v33;
  char v34;

  countAndFlagsBits = v1->_countAndFlagsBits;
  if (!LOBYTE(v1[1]._object))
    goto LABEL_7;
  if (LOBYTE(v1[1]._object) != 1)
  {
    v18 = *(_QWORD *)(countAndFlagsBits + 16);
    v19._countAndFlagsBits = 0x7B20656C707554;
    v19._object = (void *)0xE700000000000000;
    PrettyPrinter.print(_:)(v19);
    indentLevel = a1->indentLevel;
    v9 = __OFADD__(indentLevel, 1);
    v21 = indentLevel + 1;
    if (v9)
    {
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
      return;
    }
    a1->indentLevel = v21;
    v22 = *(_QWORD *)(v18 + 16);
    if (!v22)
    {
LABEL_16:
      v9 = __OFSUB__(v21, 1);
      v12 = v21 - 1;
      if (!v9)
      {
LABEL_17:
        a1->indentLevel = v12;
        v27._countAndFlagsBits = 125;
        v27._object = (void *)0xE100000000000000;
        PrettyPrinter.print(_:)(v27);
        return;
      }
      goto LABEL_25;
    }
    v23 = 0;
    v24 = (_BYTE *)(v18 + 56);
    while (v23 < *(_QWORD *)(v18 + 16))
    {
      ++v23;
      v25 = *v24;
      v26 = *((_QWORD *)v24 - 1);
      v32 = *(Swift::String *)(v24 - 24);
      v33 = v26;
      v34 = v25;
      CaptureStructure._print(_:)(a1);
      v24 += 32;
      if (v22 == v23)
      {
        v21 = a1->indentLevel;
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v4 = *(_QWORD *)(countAndFlagsBits + 16);
  v5 = *(void **)(countAndFlagsBits + 24);
  v6 = *(_QWORD *)(countAndFlagsBits + 32);
  countAndFlagsBits = *(unsigned __int8 *)(countAndFlagsBits + 40);
  v7._countAndFlagsBits = 0x6C616E6F6974704FLL;
  v7._object = (void *)0xEA00000000007B20;
  PrettyPrinter.print(_:)(v7);
  v8 = a1->indentLevel;
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    goto LABEL_23;
  a1->indentLevel = v10;
  v32._countAndFlagsBits = v4;
  v32._object = v5;
  v33 = v6;
  v34 = countAndFlagsBits;
  v1 = &v32;
  CaptureStructure._print(_:)(a1);
  v11 = a1->indentLevel;
  v9 = __OFSUB__(v11, 1);
  v12 = v11 - 1;
  if (!v9)
    goto LABEL_17;
  __break(1u);
LABEL_7:
  object = v1->_object;
  v13 = v1[1]._countAndFlagsBits;
  v15 = (void *)0xE90000000000003ELL;
  if (!object)
  {
    countAndFlagsBits = 0x64656D616E6E753CLL;
    object = (void *)0xE90000000000003ELL;
    if (v13)
      goto LABEL_9;
LABEL_19:
    v16 = 0x64657079746E753CLL;
    goto LABEL_20;
  }
  swift_bridgeObjectRetain();
  if (!v13)
    goto LABEL_19;
LABEL_9:
  v32._countAndFlagsBits = v13;
  swift_getCanonicalSpecializedMetadata();
  v16 = String.init<A>(describing:)();
  v15 = v17;
LABEL_20:
  v32._countAndFlagsBits = 0x286D6F7441;
  v32._object = (void *)0xE500000000000000;
  v28._countAndFlagsBits = countAndFlagsBits;
  v28._object = object;
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  v29._countAndFlagsBits = 8250;
  v29._object = (void *)0xE200000000000000;
  String.append(_:)(v29);
  v30._countAndFlagsBits = v16;
  v30._object = v15;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v31._countAndFlagsBits = 41;
  v31._object = (void *)0xE100000000000000;
  String.append(_:)(v31);
  PrettyPrinter.print(_:)(v32);
  swift_bridgeObjectRelease();
}

Swift::String __swiftcall PrettyPrinter.finish()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  Swift::String result;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(void **)(v0 + 48);
  *(_QWORD *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 48) = 0xE000000000000000;
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

Swift::Void __swiftcall PrettyPrinter.print(_:)(Swift::String a1)
{
  uint64_t v1;
  void *object;
  uint64_t countAndFlagsBits;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;

  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  if (*(_BYTE *)(v1 + 56) != 1)
    goto LABEL_4;
  if ((unsigned __int128)(*(uint64_t *)(v1 + 64) * (__int128)*(uint64_t *)(v1 + 32)) >> 64 == (uint64_t)(*(_QWORD *)(v1 + 64) * *(_QWORD *)(v1 + 32)) >> 63)
  {
    v4._countAndFlagsBits = MEMORY[0x1DF0F378C](32, 0xE100000000000000);
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    *(_BYTE *)(v1 + 56) = 0;
LABEL_4:
    swift_bridgeObjectRetain();
    v5._countAndFlagsBits = countAndFlagsBits;
    v5._object = object;
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    v6._countAndFlagsBits = 10;
    v6._object = (void *)0xE100000000000000;
    String.append(_:)(v6);
    *(_BYTE *)(v1 + 56) = 1;
    return;
  }
  __break(1u);
}

void PrettyPrinter.printBlock(_:startDelimiter:endDelimiter:_:)(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, void *a6, void (*a7)(uint64_t))
{
  uint64_t v7;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  Swift::String v21;

  v21._countAndFlagsBits = a1;
  v21._object = a2;
  swift_bridgeObjectRetain();
  v13._countAndFlagsBits = 32;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  v14._countAndFlagsBits = a3;
  v14._object = a4;
  String.append(_:)(v14);
  PrettyPrinter.print(_:)(v21);
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(v7 + 64);
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v7 + 64) = v17;
    a7(v7);
    v18 = *(_QWORD *)(v7 + 64);
    v16 = __OFSUB__(v18, 1);
    v19 = v18 - 1;
    if (!v16)
    {
      *(_QWORD *)(v7 + 64) = v19;
      v20._countAndFlagsBits = a5;
      v20._object = a6;
      PrettyPrinter.print(_:)(v20);
      return;
    }
  }
  __break(1u);
}

void CaptureList._captureStructure.getter(uint64_t a1@<X8>)
{
  uint64_t *v1;
  int64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v20 = *v1;
  v3 = *(_QWORD *)(*v1 + 16);
  if (v3 == 1)
  {
    CaptureList.Capture._captureStructure.getter(a1);
  }
  else if (v3)
  {
    v22 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    v5 = 0;
    v19 = v3;
    while (v5 < *(_QWORD *)(v20 + 16))
    {
      v6 = (uint64_t *)(v20 + 32 + 56 * v5);
      v7 = v6[3];
      if (v7 < 0)
        goto LABEL_23;
      v8 = v6[1];
      if (v6[2] == MEMORY[0x1E0DEBAF0])
        v9 = 0;
      else
        v9 = v6[2];
      v10 = *v6;
      if (v7)
      {
        v11 = swift_allocObject();
        *(_QWORD *)(v11 + 16) = v10;
        *(_QWORD *)(v11 + 24) = v8;
        *(_QWORD *)(v11 + 32) = v9;
        *(_BYTE *)(v11 + 40) = 0;
        v9 = v7 - 1;
        if (v7 == 1)
        {
          v21 = 0;
          v12 = 1;
          v10 = v11;
        }
        else
        {
          v10 = v11;
          do
          {
            v13 = swift_allocObject();
            *(_QWORD *)(v13 + 24) = 0;
            *(_QWORD *)(v13 + 32) = 0;
            *(_QWORD *)(v13 + 16) = v10;
            v12 = 1;
            *(_BYTE *)(v13 + 40) = 1;
            v10 = v13;
            --v9;
          }
          while (v9);
          v21 = 0;
        }
      }
      else
      {
        v12 = 0;
        v21 = v6[1];
      }
      v15 = *(_QWORD *)(v22 + 16);
      v14 = *(_QWORD *)(v22 + 24);
      swift_bridgeObjectRetain();
      if (v15 >= v14 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v14 > 1), v15 + 1, 1);
      ++v5;
      *(_QWORD *)(v22 + 16) = v15 + 1;
      v16 = v22 + 32 * v15;
      *(_QWORD *)(v16 + 32) = v10;
      *(_QWORD *)(v16 + 40) = v21;
      *(_QWORD *)(v16 + 48) = v9;
      *(_BYTE *)(v16 + 56) = v12;
      if (v5 == v19)
      {
        v17 = swift_allocObject();
        *(_QWORD *)(v17 + 16) = v22;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = v17;
        *(_BYTE *)(a1 + 24) = 2;
        return;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
  }
  else
  {
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = v4;
    *(_BYTE *)(a1 + 24) = 2;
  }
}

void CaptureList.Capture._captureStructure.getter(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  v2 = v1[3];
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    v4 = v1[1];
    if (v1[2] == MEMORY[0x1E0DEBAF0])
      v5 = 0;
    else
      v5 = v1[2];
    v6 = *v1;
    if (v2)
    {
      v7 = swift_allocObject();
      *(_QWORD *)(v7 + 16) = v6;
      *(_QWORD *)(v7 + 24) = v4;
      *(_QWORD *)(v7 + 32) = v5;
      *(_BYTE *)(v7 + 40) = 0;
      v8 = v2 - 1;
      if (v8)
      {
        v6 = v7;
        do
        {
          v11 = swift_allocObject();
          *(_QWORD *)(v11 + 24) = 0;
          *(_QWORD *)(v11 + 32) = 0;
          *(_QWORD *)(v11 + 16) = v6;
          v10 = 1;
          *(_BYTE *)(v11 + 40) = 1;
          v6 = v11;
          --v8;
        }
        while (v8);
        v9 = 0;
        v5 = 0;
      }
      else
      {
        v9 = 0;
        v5 = 0;
        v10 = 1;
        v6 = v7;
      }
    }
    else
    {
      v10 = 0;
      v9 = v4;
    }
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v5;
    *(_BYTE *)(a1 + 24) = v10;
    swift_bridgeObjectRetain();
  }
}

uint64_t AnyType.init(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  Swift::String_optional v13;
  uint64_t countAndFlagsBits;
  unint64_t object;
  Swift::String_optional v16;
  char v18;
  char v19;
  BOOL v21;
  Swift::String v22;
  char v23;
  Swift::String v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[2];
  _QWORD v36[6];

  v6 = type metadata accessor for Unicode.Scalar.Properties();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36[4] = 0;
  v36[5] = 0xE000000000000000;
  v11 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v11 = a1 & 0xFFFFFFFFFFFFLL;
  v36[0] = a1;
  v36[1] = a2;
  v36[2] = 0;
  v36[3] = v11;
  swift_bridgeObjectRetain();
  v13 = String.Iterator.next()();
  result = v13.value._countAndFlagsBits;
  if (!v13.value._object)
  {
LABEL_31:
    swift_bridgeObjectRelease();
    v22 = String.lowercased()();
    swift_bridgeObjectRelease();
    closure #1 in static Parser.classifyGeneralCategory(_:)(v22._countAndFlagsBits, (uint64_t)v22._object, (char *)v36);
    v23 = v36[0];
    if (LOBYTE(v36[0]) == 38)
    {
      v24._countAndFlagsBits = 29545;
      v24._object = (void *)0xE200000000000000;
      if (String.hasPrefix(_:)(v24))
      {
        v25 = specialized Collection.dropFirst(_:)(2uLL, v22._countAndFlagsBits, (unint64_t)v22._object);
        v27 = v26;
        v29 = v28;
        v31 = v30;
        swift_bridgeObjectRelease();
        v32 = MEMORY[0x1DF0F366C](v25, v27, v29, v31);
        v34 = v33;
        swift_bridgeObjectRelease();
        closure #1 in static Parser.classifyGeneralCategory(_:)(v32, v34, (char *)v36);
        result = swift_bridgeObjectRelease();
        v23 = v36[0];
        if (LOBYTE(v36[0]) != 38)
          goto LABEL_38;
      }
      else
      {
        result = swift_bridgeObjectRelease();
      }
      v23 = 38;
    }
    else
    {
      result = swift_bridgeObjectRelease();
    }
LABEL_38:
    *a3 = v23;
    return result;
  }
  countAndFlagsBits = v13.value._countAndFlagsBits;
  object = (unint64_t)v13.value._object;
  while ((object & 0x2000000000000000) != 0 ? HIBYTE(object) & 0xF : countAndFlagsBits & 0xFFFFFFFFFFFFLL)
  {
    if ((object & 0x1000000000000000) != 0)
    {
      _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((object & 0x2000000000000000) != 0)
      {
        v35[0] = countAndFlagsBits;
        v35[1] = object & 0xFFFFFFFFFFFFFFLL;
      }
      else if ((countAndFlagsBits & 0x1000000000000000) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }
      _decodeScalar(_:startingAt:)();
    }
    Unicode.Scalar.properties.getter();
    v18 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    if ((v18 & 1) == 0 && (countAndFlagsBits != 95 || object != 0xE100000000000000))
    {
      v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v21 = countAndFlagsBits == 45 && object == 0xE100000000000000;
      if ((v19 & 1) == 0 && !v21 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        MEMORY[0x1DF0F36FC](countAndFlagsBits, object);
    }
    swift_bridgeObjectRelease();
    v16 = String.Iterator.next()();
    result = v16.value._countAndFlagsBits;
    countAndFlagsBits = v16.value._countAndFlagsBits;
    object = (unint64_t)v16.value._object;
    if (!v16.value._object)
      goto LABEL_31;
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t result;
  Swift::String_optional v26;
  uint64_t countAndFlagsBits;
  unint64_t object;
  Swift::String_optional v29;
  char v31;
  char v32;
  BOOL v34;
  Swift::String v35;
  unsigned int (*v36)(uint64_t, uint64_t, uint64_t);
  Swift::String v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t);
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;

  v59 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Unicode.NumericType?);
  v7 = MEMORY[0x1E0C80A78](v5, v6);
  v57 = (uint64_t)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v56 - v10;
  v12 = type metadata accessor for Unicode.NumericType();
  v13 = *(_QWORD *)(v12 - 8);
  v15 = MEMORY[0x1E0C80A78](v12, v14);
  v56 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v17);
  v58 = (char *)&v56 - v18;
  v19 = type metadata accessor for Unicode.Scalar.Properties();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v21);
  v23 = (char *)&v56 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = 0;
  v67 = 0xE000000000000000;
  v24 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v24 = a1 & 0xFFFFFFFFFFFFLL;
  v62 = a1;
  v63 = a2;
  v64 = 0;
  v65 = v24;
  swift_bridgeObjectRetain();
  v26 = String.Iterator.next()();
  result = v26.value._countAndFlagsBits;
  if (!v26.value._object)
  {
LABEL_31:
    swift_bridgeObjectRelease();
    v35 = String.lowercased()();
    swift_bridgeObjectRelease();
    closure #1 in static Parser.classifyNumericType(_:)(v35._countAndFlagsBits, (uint64_t)v35._object, (uint64_t)v11);
    v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
    if (v36((uint64_t)v11, 1, v12) == 1)
    {
      outlined destroy of _ASTParent?((uint64_t)v11, &demangling cache variable for type metadata for Unicode.NumericType?);
      v37._countAndFlagsBits = 29545;
      v37._object = (void *)0xE200000000000000;
      if (!String.hasPrefix(_:)(v37))
      {
        swift_bridgeObjectRelease();
        goto LABEL_38;
      }
      v38 = specialized Collection.dropFirst(_:)(2uLL, v35._countAndFlagsBits, (unint64_t)v35._object);
      v40 = v39;
      v42 = v41;
      v44 = v43;
      swift_bridgeObjectRelease();
      v45 = MEMORY[0x1DF0F366C](v38, v40, v42, v44);
      v47 = v46;
      swift_bridgeObjectRelease();
      v48 = v57;
      closure #1 in static Parser.classifyNumericType(_:)(v45, v47, v57);
      swift_bridgeObjectRelease();
      if (v36(v48, 1, v12) == 1)
      {
        outlined destroy of _ASTParent?(v48, &demangling cache variable for type metadata for Unicode.NumericType?);
LABEL_38:
        v54 = 1;
        v51 = v59;
        return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v51, v54, 1, v12);
      }
      v49 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 32);
      v55 = v56;
      v49(v56, v48, v12);
      v51 = v59;
      v52 = v59;
      v53 = v55;
    }
    else
    {
      swift_bridgeObjectRelease();
      v49 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 32);
      v50 = v58;
      v49(v58, (uint64_t)v11, v12);
      v51 = v59;
      v52 = v59;
      v53 = v50;
    }
    v49(v52, (uint64_t)v53, v12);
    v54 = 0;
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v51, v54, 1, v12);
  }
  countAndFlagsBits = v26.value._countAndFlagsBits;
  object = (unint64_t)v26.value._object;
  while ((object & 0x2000000000000000) != 0 ? HIBYTE(object) & 0xF : countAndFlagsBits & 0xFFFFFFFFFFFFLL)
  {
    if ((object & 0x1000000000000000) != 0)
    {
      _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((object & 0x2000000000000000) != 0)
      {
        v60 = countAndFlagsBits;
        v61 = object & 0xFFFFFFFFFFFFFFLL;
      }
      else if ((countAndFlagsBits & 0x1000000000000000) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }
      _decodeScalar(_:startingAt:)();
    }
    Unicode.Scalar.properties.getter();
    v31 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
    if ((v31 & 1) == 0 && (countAndFlagsBits != 95 || object != 0xE100000000000000))
    {
      v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v34 = countAndFlagsBits == 45 && object == 0xE100000000000000;
      if ((v32 & 1) == 0 && !v34 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        MEMORY[0x1DF0F36FC](countAndFlagsBits, object);
    }
    swift_bridgeObjectRelease();
    v29 = String.Iterator.next()();
    result = v29.value._countAndFlagsBits;
    countAndFlagsBits = v29.value._countAndFlagsBits;
    object = (unint64_t)v29.value._object;
    if (!v29.value._object)
      goto LABEL_31;
  }
  __break(1u);
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  Swift::String_optional v13;
  uint64_t countAndFlagsBits;
  unint64_t object;
  Swift::String_optional v16;
  char v18;
  char v19;
  BOOL v21;
  Swift::String v22;
  char v23;
  Swift::String v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[2];
  _QWORD v36[6];

  v6 = type metadata accessor for Unicode.Scalar.Properties();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36[4] = 0;
  v36[5] = 0xE000000000000000;
  v11 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v11 = a1 & 0xFFFFFFFFFFFFLL;
  v36[0] = a1;
  v36[1] = a2;
  v36[2] = 0;
  v36[3] = v11;
  swift_bridgeObjectRetain();
  v13 = String.Iterator.next()();
  result = v13.value._countAndFlagsBits;
  if (!v13.value._object)
  {
LABEL_31:
    swift_bridgeObjectRelease();
    v22 = String.lowercased()();
    swift_bridgeObjectRelease();
    closure #1 in static Parser.classifyBoolProperty(_:)(v22._countAndFlagsBits, (uint64_t)v22._object, (char *)v36);
    v23 = v36[0];
    if (LOBYTE(v36[0]) == 67)
    {
      v24._countAndFlagsBits = 29545;
      v24._object = (void *)0xE200000000000000;
      if (String.hasPrefix(_:)(v24))
      {
        v25 = specialized Collection.dropFirst(_:)(2uLL, v22._countAndFlagsBits, (unint64_t)v22._object);
        v27 = v26;
        v29 = v28;
        v31 = v30;
        swift_bridgeObjectRelease();
        v32 = MEMORY[0x1DF0F366C](v25, v27, v29, v31);
        v34 = v33;
        swift_bridgeObjectRelease();
        closure #1 in static Parser.classifyBoolProperty(_:)(v32, v34, (char *)v36);
        result = swift_bridgeObjectRelease();
        v23 = v36[0];
        if (LOBYTE(v36[0]) != 67)
          goto LABEL_38;
      }
      else
      {
        result = swift_bridgeObjectRelease();
      }
      v23 = 67;
    }
    else
    {
      result = swift_bridgeObjectRelease();
    }
LABEL_38:
    *a3 = v23;
    return result;
  }
  countAndFlagsBits = v13.value._countAndFlagsBits;
  object = (unint64_t)v13.value._object;
  while ((object & 0x2000000000000000) != 0 ? HIBYTE(object) & 0xF : countAndFlagsBits & 0xFFFFFFFFFFFFLL)
  {
    if ((object & 0x1000000000000000) != 0)
    {
      _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((object & 0x2000000000000000) != 0)
      {
        v35[0] = countAndFlagsBits;
        v35[1] = object & 0xFFFFFFFFFFFFFFLL;
      }
      else if ((countAndFlagsBits & 0x1000000000000000) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }
      _decodeScalar(_:startingAt:)();
    }
    Unicode.Scalar.properties.getter();
    v18 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    if ((v18 & 1) == 0 && (countAndFlagsBits != 95 || object != 0xE100000000000000))
    {
      v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v21 = countAndFlagsBits == 45 && object == 0xE100000000000000;
      if ((v19 & 1) == 0 && !v21 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        MEMORY[0x1DF0F36FC](countAndFlagsBits, object);
    }
    swift_bridgeObjectRelease();
    v16 = String.Iterator.next()();
    result = v16.value._countAndFlagsBits;
    countAndFlagsBits = v16.value._countAndFlagsBits;
    object = (unint64_t)v16.value._object;
    if (!v16.value._object)
      goto LABEL_31;
  }
  __break(1u);
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  Swift::String_optional v13;
  uint64_t countAndFlagsBits;
  unint64_t object;
  Swift::String_optional v16;
  char v18;
  char v19;
  BOOL v21;
  Swift::String v22;
  char v23;
  Swift::String v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  _QWORD v35[2];
  _QWORD v36[6];
  Swift::String v37;

  v6 = type metadata accessor for Unicode.Scalar.Properties();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36[4] = 0;
  v36[5] = 0xE000000000000000;
  v11 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v11 = a1 & 0xFFFFFFFFFFFFLL;
  v36[0] = a1;
  v36[1] = a2;
  v36[2] = 0;
  v36[3] = v11;
  swift_bridgeObjectRetain();
  v13 = String.Iterator.next()();
  result = v13.value._countAndFlagsBits;
  if (!v13.value._object)
  {
LABEL_31:
    swift_bridgeObjectRelease();
    v22 = String.lowercased()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    Unicode.POSIXProperty.init(rawValue:)(v22, (char *)v36);
    v23 = v36[0];
    if (LOBYTE(v36[0]) == 6)
    {
      v24._countAndFlagsBits = 29545;
      v24._object = (void *)0xE200000000000000;
      if (String.hasPrefix(_:)(v24))
      {
        v25 = specialized Collection.dropFirst(_:)(2uLL, v22._countAndFlagsBits, (unint64_t)v22._object);
        v27 = v26;
        v29 = v28;
        v31 = v30;
        swift_bridgeObjectRelease();
        v32 = MEMORY[0x1DF0F366C](v25, v27, v29, v31);
        v34 = v33;
        swift_bridgeObjectRelease();
        v37._countAndFlagsBits = v32;
        v37._object = v34;
        result = Unicode.POSIXProperty.init(rawValue:)(v37, (char *)v36);
        v23 = v36[0];
        if (LOBYTE(v36[0]) != 6)
          goto LABEL_38;
      }
      else
      {
        result = swift_bridgeObjectRelease();
      }
      v23 = 6;
    }
    else
    {
      result = swift_bridgeObjectRelease();
    }
LABEL_38:
    *a3 = v23;
    return result;
  }
  countAndFlagsBits = v13.value._countAndFlagsBits;
  object = (unint64_t)v13.value._object;
  while ((object & 0x2000000000000000) != 0 ? HIBYTE(object) & 0xF : countAndFlagsBits & 0xFFFFFFFFFFFFLL)
  {
    if ((object & 0x1000000000000000) != 0)
    {
      _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((object & 0x2000000000000000) != 0)
      {
        v35[0] = countAndFlagsBits;
        v35[1] = object & 0xFFFFFFFFFFFFFFLL;
      }
      else if ((countAndFlagsBits & 0x1000000000000000) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }
      _decodeScalar(_:startingAt:)();
    }
    Unicode.Scalar.properties.getter();
    v18 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    if ((v18 & 1) == 0 && (countAndFlagsBits != 95 || object != 0xE100000000000000))
    {
      v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v21 = countAndFlagsBits == 45 && object == 0xE100000000000000;
      if ((v19 & 1) == 0 && !v21 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        MEMORY[0x1DF0F36FC](countAndFlagsBits, object);
    }
    swift_bridgeObjectRelease();
    v16 = String.Iterator.next()();
    result = v16.value._countAndFlagsBits;
    countAndFlagsBits = v16.value._countAndFlagsBits;
    object = (unint64_t)v16.value._object;
    if (!v16.value._object)
      goto LABEL_31;
  }
  __break(1u);
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  Swift::String_optional v13;
  uint64_t countAndFlagsBits;
  unint64_t object;
  Swift::String_optional v16;
  char v18;
  char v19;
  BOOL v21;
  Swift::String v22;
  char v23;
  Swift::String v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[2];
  _QWORD v36[6];

  v6 = type metadata accessor for Unicode.Scalar.Properties();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36[4] = 0;
  v36[5] = 0xE000000000000000;
  v11 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v11 = a1 & 0xFFFFFFFFFFFFLL;
  v36[0] = a1;
  v36[1] = a2;
  v36[2] = 0;
  v36[3] = v11;
  swift_bridgeObjectRetain();
  v13 = String.Iterator.next()();
  result = v13.value._countAndFlagsBits;
  if (!v13.value._object)
  {
LABEL_31:
    swift_bridgeObjectRelease();
    v22 = String.lowercased()();
    swift_bridgeObjectRelease();
    closure #1 in static Parser.classifyScriptProperty(_:)(v22._countAndFlagsBits, (uint64_t)v22._object, (char *)v36);
    v23 = v36[0];
    if (LOBYTE(v36[0]) == 163)
    {
      v24._countAndFlagsBits = 29545;
      v24._object = (void *)0xE200000000000000;
      if (String.hasPrefix(_:)(v24))
      {
        v25 = specialized Collection.dropFirst(_:)(2uLL, v22._countAndFlagsBits, (unint64_t)v22._object);
        v27 = v26;
        v29 = v28;
        v31 = v30;
        swift_bridgeObjectRelease();
        v32 = MEMORY[0x1DF0F366C](v25, v27, v29, v31);
        v34 = v33;
        swift_bridgeObjectRelease();
        closure #1 in static Parser.classifyScriptProperty(_:)(v32, v34, (char *)v36);
        result = swift_bridgeObjectRelease();
        v23 = v36[0];
        if (LOBYTE(v36[0]) != 163)
          goto LABEL_38;
      }
      else
      {
        result = swift_bridgeObjectRelease();
      }
      v23 = -93;
    }
    else
    {
      result = swift_bridgeObjectRelease();
    }
LABEL_38:
    *a3 = v23;
    return result;
  }
  countAndFlagsBits = v13.value._countAndFlagsBits;
  object = (unint64_t)v13.value._object;
  while ((object & 0x2000000000000000) != 0 ? HIBYTE(object) & 0xF : countAndFlagsBits & 0xFFFFFFFFFFFFLL)
  {
    if ((object & 0x1000000000000000) != 0)
    {
      _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((object & 0x2000000000000000) != 0)
      {
        v35[0] = countAndFlagsBits;
        v35[1] = object & 0xFFFFFFFFFFFFFFLL;
      }
      else if ((countAndFlagsBits & 0x1000000000000000) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }
      _decodeScalar(_:startingAt:)();
    }
    Unicode.Scalar.properties.getter();
    v18 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    if ((v18 & 1) == 0 && (countAndFlagsBits != 95 || object != 0xE100000000000000))
    {
      v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v21 = countAndFlagsBits == 45 && object == 0xE100000000000000;
      if ((v19 & 1) == 0 && !v21 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        MEMORY[0x1DF0F36FC](countAndFlagsBits, object);
    }
    swift_bridgeObjectRelease();
    v16 = String.Iterator.next()();
    result = v16.value._countAndFlagsBits;
    countAndFlagsBits = v16.value._countAndFlagsBits;
    object = (unint64_t)v16.value._object;
    if (!v16.value._object)
      goto LABEL_31;
  }
  __break(1u);
  return result;
}

uint64_t specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  Swift::String_optional v11;
  uint64_t countAndFlagsBits;
  unint64_t object;
  Swift::String_optional v14;
  char v16;
  char v17;
  BOOL v18;
  BOOL v19;
  Swift::String v20;
  uint64_t v21;
  Swift::String v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];
  _QWORD v34[6];

  v4 = type metadata accessor for Unicode.Scalar.Properties();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34[4] = 0;
  v34[5] = 0xE000000000000000;
  v9 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v9 = a1 & 0xFFFFFFFFFFFFLL;
  v34[0] = a1;
  v34[1] = a2;
  v34[2] = 0;
  v34[3] = v9;
  swift_bridgeObjectRetain();
  v11 = String.Iterator.next()();
  result = v11.value._countAndFlagsBits;
  if (v11.value._object)
  {
    countAndFlagsBits = v11.value._countAndFlagsBits;
    object = (unint64_t)v11.value._object;
    while ((object & 0x2000000000000000) != 0 ? HIBYTE(object) & 0xF : countAndFlagsBits & 0xFFFFFFFFFFFFLL)
    {
      if ((object & 0x1000000000000000) != 0)
      {
        _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((object & 0x2000000000000000) != 0)
        {
          v33[0] = countAndFlagsBits;
          v33[1] = object & 0xFFFFFFFFFFFFFFLL;
        }
        else if ((countAndFlagsBits & 0x1000000000000000) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }
        _decodeScalar(_:startingAt:)();
      }
      Unicode.Scalar.properties.getter();
      v16 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      if ((v16 & 1) == 0 && (countAndFlagsBits != 95 || object != 0xE100000000000000))
      {
        v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v18 = countAndFlagsBits == 45 && object == 0xE100000000000000;
        v19 = v18;
        if ((v17 & 1) == 0 && !v19 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          MEMORY[0x1DF0F36FC](countAndFlagsBits, object);
      }
      swift_bridgeObjectRelease();
      v14 = String.Iterator.next()();
      result = v14.value._countAndFlagsBits;
      countAndFlagsBits = v14.value._countAndFlagsBits;
      object = (unint64_t)v14.value._object;
      if (!v14.value._object)
        goto LABEL_31;
    }
    __break(1u);
  }
  else
  {
LABEL_31:
    swift_bridgeObjectRelease();
    v20 = String.lowercased()();
    swift_bridgeObjectRelease();
    closure #1 in static Parser.classifyCharacterPropertyBoolValue(_:)(v20._countAndFlagsBits, (uint64_t)v20._object, (char *)v34);
    v21 = LOBYTE(v34[0]);
    if (LOBYTE(v34[0]) == 2)
    {
      v22._countAndFlagsBits = 29545;
      v22._object = (void *)0xE200000000000000;
      if (String.hasPrefix(_:)(v22))
      {
        v23 = specialized Collection.dropFirst(_:)(2uLL, v20._countAndFlagsBits, (unint64_t)v20._object);
        v25 = v24;
        v27 = v26;
        v29 = v28;
        swift_bridgeObjectRelease();
        v30 = MEMORY[0x1DF0F366C](v23, v25, v27, v29);
        v32 = v31;
        swift_bridgeObjectRelease();
        closure #1 in static Parser.classifyCharacterPropertyBoolValue(_:)(v30, v32, (char *)v34);
        swift_bridgeObjectRelease();
        return LOBYTE(v34[0]);
      }
      else
      {
        swift_bridgeObjectRelease();
        return 2;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    return v21;
  }
  return result;
}

uint64_t specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, __int16 *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  Swift::String_optional v13;
  uint64_t countAndFlagsBits;
  unint64_t object;
  Swift::String_optional v16;
  char v18;
  char v19;
  BOOL v21;
  Swift::String v22;
  __int16 v23;
  Swift::String v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[2];
  _QWORD v36[6];

  v6 = type metadata accessor for Unicode.Scalar.Properties();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36[4] = 0;
  v36[5] = 0xE000000000000000;
  v11 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v11 = a1 & 0xFFFFFFFFFFFFLL;
  v36[0] = a1;
  v36[1] = a2;
  v36[2] = 0;
  v36[3] = v11;
  swift_bridgeObjectRetain();
  v13 = String.Iterator.next()();
  result = v13.value._countAndFlagsBits;
  if (!v13.value._object)
  {
LABEL_31:
    swift_bridgeObjectRelease();
    v22 = String.lowercased()();
    swift_bridgeObjectRelease();
    closure #1 in static Parser.classifyBlockProperty(_:valueOnly:)(v22._countAndFlagsBits, (uint64_t)v22._object, (__int16 *)v36);
    v23 = v36[0];
    if (LOWORD(v36[0]) == 321)
    {
      v24._countAndFlagsBits = 29545;
      v24._object = (void *)0xE200000000000000;
      if (String.hasPrefix(_:)(v24))
      {
        v25 = specialized Collection.dropFirst(_:)(2uLL, v22._countAndFlagsBits, (unint64_t)v22._object);
        v27 = v26;
        v29 = v28;
        v31 = v30;
        swift_bridgeObjectRelease();
        v32 = MEMORY[0x1DF0F366C](v25, v27, v29, v31);
        v34 = v33;
        swift_bridgeObjectRelease();
        closure #1 in static Parser.classifyBlockProperty(_:valueOnly:)(v32, v34, (__int16 *)v36);
        result = swift_bridgeObjectRelease();
        v23 = v36[0];
        if (LOWORD(v36[0]) != 321)
          goto LABEL_38;
      }
      else
      {
        result = swift_bridgeObjectRelease();
      }
      v23 = 321;
    }
    else
    {
      result = swift_bridgeObjectRelease();
    }
LABEL_38:
    *a3 = v23;
    return result;
  }
  countAndFlagsBits = v13.value._countAndFlagsBits;
  object = (unint64_t)v13.value._object;
  while ((object & 0x2000000000000000) != 0 ? HIBYTE(object) & 0xF : countAndFlagsBits & 0xFFFFFFFFFFFFLL)
  {
    if ((object & 0x1000000000000000) != 0)
    {
      _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((object & 0x2000000000000000) != 0)
      {
        v35[0] = countAndFlagsBits;
        v35[1] = object & 0xFFFFFFFFFFFFFFLL;
      }
      else if ((countAndFlagsBits & 0x1000000000000000) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }
      _decodeScalar(_:startingAt:)();
    }
    Unicode.Scalar.properties.getter();
    v18 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    if ((v18 & 1) == 0 && (countAndFlagsBits != 95 || object != 0xE100000000000000))
    {
      v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v21 = countAndFlagsBits == 45 && object == 0xE100000000000000;
      if ((v19 & 1) == 0 && !v21 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        MEMORY[0x1DF0F36FC](countAndFlagsBits, object);
    }
    swift_bridgeObjectRelease();
    v16 = String.Iterator.next()();
    result = v16.value._countAndFlagsBits;
    countAndFlagsBits = v16.value._countAndFlagsBits;
    object = (unint64_t)v16.value._object;
    if (!v16.value._object)
      goto LABEL_31;
  }
  __break(1u);
  return result;
}

uint64_t specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t result;
  Swift::String_optional v26;
  uint64_t countAndFlagsBits;
  unint64_t object;
  Swift::String_optional v29;
  char v31;
  char v32;
  BOOL v34;
  Swift::String v35;
  uint64_t v36;
  unsigned int (*v37)(uint64_t, uint64_t, uint64_t);
  Swift::String v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;

  v56 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Atom.CharacterProperty.Kind?);
  v7 = MEMORY[0x1E0C80A78](v5, v6);
  v55 = (uint64_t)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v54 - v10;
  v12 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
  v57 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v54 = (uint64_t)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v54 - v17;
  v19 = type metadata accessor for Unicode.Scalar.Properties();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v21);
  v23 = (char *)&v54 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = 0;
  v65 = 0xE000000000000000;
  v24 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v24 = a1 & 0xFFFFFFFFFFFFLL;
  v60 = a1;
  v61 = a2;
  v62 = 0;
  v63 = v24;
  swift_bridgeObjectRetain();
  v26 = String.Iterator.next()();
  result = v26.value._countAndFlagsBits;
  if (!v26.value._object)
  {
LABEL_31:
    swift_bridgeObjectRelease();
    v35 = String.lowercased()();
    swift_bridgeObjectRelease();
    closure #1 in static Parser.classifySpecialPropValue(_:)(v35._countAndFlagsBits, (uint64_t)v35._object, (uint64_t)v11);
    v36 = v57;
    v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v57 + 48);
    if (v37((uint64_t)v11, 1, v12) == 1)
    {
      outlined destroy of _ASTParent?((uint64_t)v11, &demangling cache variable for type metadata for AST.Atom.CharacterProperty.Kind?);
      v38._countAndFlagsBits = 29545;
      v38._object = (void *)0xE200000000000000;
      if (!String.hasPrefix(_:)(v38))
      {
        swift_bridgeObjectRelease();
        goto LABEL_38;
      }
      v39 = specialized Collection.dropFirst(_:)(2uLL, v35._countAndFlagsBits, (unint64_t)v35._object);
      v41 = v40;
      v43 = v42;
      v45 = v44;
      swift_bridgeObjectRelease();
      v46 = MEMORY[0x1DF0F366C](v39, v41, v43, v45);
      v48 = v47;
      swift_bridgeObjectRelease();
      v49 = v55;
      closure #1 in static Parser.classifySpecialPropValue(_:)(v46, v48, v55);
      swift_bridgeObjectRelease();
      if (v37(v49, 1, v12) == 1)
      {
        outlined destroy of _ASTParent?(v49, &demangling cache variable for type metadata for AST.Atom.CharacterProperty.Kind?);
LABEL_38:
        v52 = 1;
        v51 = v56;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 56))(v51, v52, 1, v12);
      }
      v53 = v54;
      outlined init with take of AST.Atom.Kind(v49, v54, type metadata accessor for AST.Atom.CharacterProperty.Kind);
      v50 = v53;
    }
    else
    {
      swift_bridgeObjectRelease();
      outlined init with take of AST.Atom.Kind((uint64_t)v11, (uint64_t)v18, type metadata accessor for AST.Atom.CharacterProperty.Kind);
      v50 = (uint64_t)v18;
    }
    v51 = v56;
    outlined init with take of AST.Atom.Kind(v50, v56, type metadata accessor for AST.Atom.CharacterProperty.Kind);
    v52 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 56))(v51, v52, 1, v12);
  }
  countAndFlagsBits = v26.value._countAndFlagsBits;
  object = (unint64_t)v26.value._object;
  while ((object & 0x2000000000000000) != 0 ? HIBYTE(object) & 0xF : countAndFlagsBits & 0xFFFFFFFFFFFFLL)
  {
    if ((object & 0x1000000000000000) != 0)
    {
      _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((object & 0x2000000000000000) != 0)
      {
        v58 = countAndFlagsBits;
        v59 = object & 0xFFFFFFFFFFFFFFLL;
      }
      else if ((countAndFlagsBits & 0x1000000000000000) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }
      _decodeScalar(_:startingAt:)();
    }
    Unicode.Scalar.properties.getter();
    v31 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
    if ((v31 & 1) == 0 && (countAndFlagsBits != 95 || object != 0xE100000000000000))
    {
      v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v34 = countAndFlagsBits == 45 && object == 0xE100000000000000;
      if ((v32 & 1) == 0 && !v34 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        MEMORY[0x1DF0F36FC](countAndFlagsBits, object);
    }
    swift_bridgeObjectRelease();
    v29 = String.Iterator.next()();
    result = v29.value._countAndFlagsBits;
    countAndFlagsBits = v29.value._countAndFlagsBits;
    object = (unint64_t)v29.value._object;
    if (!v29.value._object)
      goto LABEL_31;
  }
  __break(1u);
  return result;
}

uint64_t specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t result;
  Swift::String_optional v34;
  uint64_t countAndFlagsBits;
  unint64_t object;
  Swift::String_optional v37;
  char v39;
  char v40;
  BOOL v42;
  Swift::String v43;
  unint64_t v44;
  unsigned int (*v45)(_QWORD *, uint64_t, uint64_t);
  Swift::String v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;

  v69 = a7;
  v70 = a8;
  v65 = a6;
  v66 = a4;
  v67 = a3;
  v68 = a5;
  v64 = a9;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Atom.CharacterProperty.Kind?);
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v63 = (uint64_t *)((char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (uint64_t *)((char *)&v62 - v18);
  v20 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
  v71 = *(_QWORD *)(v20 - 8);
  v22 = MEMORY[0x1E0C80A78](v20, v21);
  v62 = (uint64_t)&v62 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v24);
  v26 = (char *)&v62 - v25;
  v27 = type metadata accessor for Unicode.Scalar.Properties();
  v28 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27, v29);
  v31 = (char *)&v62 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = 0;
  v79 = 0xE000000000000000;
  v32 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v32 = a1 & 0xFFFFFFFFFFFFLL;
  v74 = a1;
  v75 = a2;
  v76 = 0;
  v77 = v32;
  swift_bridgeObjectRetain();
  v34 = String.Iterator.next()();
  result = v34.value._countAndFlagsBits;
  if (!v34.value._object)
  {
LABEL_31:
    swift_bridgeObjectRelease();
    v43 = String.lowercased()();
    swift_bridgeObjectRelease();
    v44 = v66;
    closure #1 in Parser.classifyCharacterProperty(key:value:)(v43._countAndFlagsBits, (uint64_t)v43._object, v67, v66, v68, v69, v70, a10, v19, a11);
    v45 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v71 + 48);
    if (v45(v19, 1, v20) == 1)
    {
      outlined destroy of _ASTParent?((uint64_t)v19, &demangling cache variable for type metadata for AST.Atom.CharacterProperty.Kind?);
      v46._countAndFlagsBits = 29545;
      v46._object = (void *)0xE200000000000000;
      if (!String.hasPrefix(_:)(v46))
      {
        swift_bridgeObjectRelease();
        goto LABEL_38;
      }
      v47 = specialized Collection.dropFirst(_:)(2uLL, v43._countAndFlagsBits, (unint64_t)v43._object);
      v49 = v48;
      v51 = v50;
      v53 = v52;
      swift_bridgeObjectRelease();
      v54 = MEMORY[0x1DF0F366C](v47, v49, v51, v53);
      v56 = v55;
      swift_bridgeObjectRelease();
      v57 = v63;
      closure #1 in Parser.classifyCharacterProperty(key:value:)(v54, v56, v67, v44, v68, v69, v70, a10, v63, a11);
      swift_bridgeObjectRelease();
      if (v45(v57, 1, v20) == 1)
      {
        outlined destroy of _ASTParent?((uint64_t)v57, &demangling cache variable for type metadata for AST.Atom.CharacterProperty.Kind?);
LABEL_38:
        v60 = 1;
        v59 = v64;
        goto LABEL_39;
      }
      v61 = v62;
      outlined init with take of AST.Atom.Kind((uint64_t)v57, v62, type metadata accessor for AST.Atom.CharacterProperty.Kind);
      v58 = v61;
    }
    else
    {
      swift_bridgeObjectRelease();
      outlined init with take of AST.Atom.Kind((uint64_t)v19, (uint64_t)v26, type metadata accessor for AST.Atom.CharacterProperty.Kind);
      v58 = (uint64_t)v26;
    }
    v59 = v64;
    outlined init with take of AST.Atom.Kind(v58, v64, type metadata accessor for AST.Atom.CharacterProperty.Kind);
    v60 = 0;
LABEL_39:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v71 + 56))(v59, v60, 1, v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  countAndFlagsBits = v34.value._countAndFlagsBits;
  object = (unint64_t)v34.value._object;
  while ((object & 0x2000000000000000) != 0 ? HIBYTE(object) & 0xF : countAndFlagsBits & 0xFFFFFFFFFFFFLL)
  {
    if ((object & 0x1000000000000000) != 0)
    {
      _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((object & 0x2000000000000000) != 0)
      {
        v72 = countAndFlagsBits;
        v73 = object & 0xFFFFFFFFFFFFFFLL;
      }
      else if ((countAndFlagsBits & 0x1000000000000000) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }
      _decodeScalar(_:startingAt:)();
    }
    Unicode.Scalar.properties.getter();
    v39 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v31, v27);
    if ((v39 & 1) == 0 && (countAndFlagsBits != 95 || object != 0xE100000000000000))
    {
      v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v42 = countAndFlagsBits == 45 && object == 0xE100000000000000;
      if ((v40 & 1) == 0 && !v42 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        MEMORY[0x1DF0F36FC](countAndFlagsBits, object);
    }
    swift_bridgeObjectRelease();
    v37 = String.Iterator.next()();
    result = v37.value._countAndFlagsBits;
    countAndFlagsBits = v37.value._countAndFlagsBits;
    object = (unint64_t)v37.value._object;
    if (!v37.value._object)
      goto LABEL_31;
  }
  __break(1u);
  return result;
}

unint64_t Character.isPatternWhitespace.getter(unint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t result;
  char v10;
  uint64_t v11;

  v4 = type metadata accessor for Unicode.Scalar.Properties();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = specialized Collection.first.getter(a1, a2);
  if ((result & 0x100000000) != 0)
  {
    __break(1u);
  }
  else
  {
    Unicode.Scalar.properties.getter();
    v10 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    return v10 & 1;
  }
  return result;
}

uint64_t specialized Collection.dropFirst(_:)(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = *(_QWORD *)(a2 + 16);
    if ((uint64_t)v2 >= result)
      v3 = result;
    else
      v3 = *(_QWORD *)(a2 + 16);
    if (result)
      v4 = v3;
    else
      v4 = 0;
    if (v2 >= v4)
      return a2;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in static Parser.classifyGeneralCategory(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v4;
  char v6;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  BOOL v38;

  v4 = result;
  if (result == 99 && a2 == 0xE100000000000000)
    goto LABEL_3;
  result = _stringCompareWithSmolCheck(_:_:expecting:)();
  v6 = 0;
  if ((result & 1) != 0)
    goto LABEL_5;
  if (v4 == 0x726568746FLL && a2 == 0xE500000000000000)
  {
LABEL_3:
    v6 = 0;
  }
  else
  {
    result = _stringCompareWithSmolCheck(_:_:expecting:)();
    v6 = 0;
    if ((result & 1) != 0)
      goto LABEL_5;
    if (v4 == 25443 && a2 == 0xE200000000000000
      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
      || v4 == 0x6C6F72746E6F63 && a2 == 0xE700000000000000)
    {
LABEL_14:
      v6 = 1;
      goto LABEL_5;
    }
    result = _stringCompareWithSmolCheck(_:_:expecting:)();
    v8 = v4 == 0x6C72746E63 && a2 == 0xE500000000000000;
    v6 = 1;
    if ((result & 1) == 0 && !v8)
    {
      result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) != 0)
        goto LABEL_14;
      if (v4 == 26211 && a2 == 0xE200000000000000
        || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
        || v4 == 0x74616D726F66 && a2 == 0xE600000000000000
        || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        v6 = 2;
        goto LABEL_5;
      }
      if (v4 == 28259 && a2 == 0xE200000000000000
        || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
        || v4 == 0x6E67697373616E75 && a2 == 0xEA00000000006465
        || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        v6 = 3;
        goto LABEL_5;
      }
      if (v4 == 28515 && a2 == 0xE200000000000000
        || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
        || v4 == 0x7565746176697270 && a2 == 0xEA00000000006573
        || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        v6 = 4;
        goto LABEL_5;
      }
      if (v4 == 29539 && a2 == 0xE200000000000000
        || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
        || v4 == 0x7461676F72727573 && a2 == 0xE900000000000065
        || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        v6 = 5;
        goto LABEL_5;
      }
      if (v4 == 108 && a2 == 0xE100000000000000)
      {
LABEL_54:
        v6 = 6;
        goto LABEL_5;
      }
      result = _stringCompareWithSmolCheck(_:_:expecting:)();
      v9 = v4 == 0x72657474656CLL && a2 == 0xE600000000000000;
      v10 = v9;
      v6 = 6;
      if ((result & 1) == 0 && !v10)
      {
        result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) != 0)
          goto LABEL_54;
        if (v4 == 25452 && a2 == 0xE200000000000000)
        {
LABEL_66:
          v6 = 7;
          goto LABEL_5;
        }
        result = _stringCompareWithSmolCheck(_:_:expecting:)();
        v11 = v4 == 9836 && a2 == 0xE200000000000000;
        v12 = v11;
        v6 = 7;
        if ((result & 1) == 0 && !v12)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) != 0 || v4 == 0x74656C6465736163 && a2 == 0xEB00000000726574)
            goto LABEL_66;
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) != 0)
            goto LABEL_66;
          if (v4 == 27756 && a2 == 0xE200000000000000
            || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
            || v4 == 0x7361637265776F6CLL && a2 == 0xEF72657474656C65
            || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
            v6 = 8;
            goto LABEL_5;
          }
          if (v4 == 28012 && a2 == 0xE200000000000000
            || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
            || v4 == 0x7265696669646F6DLL && a2 == 0xEE0072657474656CLL
            || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
            v6 = 9;
            goto LABEL_5;
          }
          if (v4 == 28524 && a2 == 0xE200000000000000)
          {
LABEL_104:
            v6 = 10;
            goto LABEL_5;
          }
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          v13 = v4 == 0x74656C726568746FLL && a2 == 0xEB00000000726574;
          v14 = v13;
          v6 = 10;
          if ((result & 1) == 0 && !v14)
          {
            result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) != 0)
              goto LABEL_104;
            if (v4 == 29804 && a2 == 0xE200000000000000)
            {
LABEL_116:
              v6 = 11;
              goto LABEL_5;
            }
            result = _stringCompareWithSmolCheck(_:_:expecting:)();
            v15 = v4 == 0x736163656C746974 && a2 == 0xEF72657474656C65;
            v16 = v15;
            v6 = 11;
            if ((result & 1) == 0 && !v16)
            {
              result = _stringCompareWithSmolCheck(_:_:expecting:)();
              if ((result & 1) != 0)
                goto LABEL_116;
              if (v4 == 30060 && a2 == 0xE200000000000000)
              {
LABEL_128:
                v6 = 12;
                goto LABEL_5;
              }
              result = _stringCompareWithSmolCheck(_:_:expecting:)();
              v17 = v4 == 0x7361637265707075 && a2 == 0xEF72657474656C65;
              v18 = v17;
              v6 = 12;
              if ((result & 1) == 0 && !v18)
              {
                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                if ((result & 1) != 0)
                  goto LABEL_128;
                if (v4 == 109 && a2 == 0xE100000000000000
                  || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                  || v4 == 1802658157 && a2 == 0xE400000000000000
                  || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                  || v4 == 0x6E696E69626D6F63 && a2 == 0xED00006B72616D67
                  || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                {
                  v6 = 13;
                  goto LABEL_5;
                }
                if (v4 == 25453 && a2 == 0xE200000000000000
                  || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                  || v4 == 0x6D676E6963617073 && a2 == 0xEB000000006B7261
                  || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                {
                  v6 = 14;
                  goto LABEL_5;
                }
                if (v4 == 25965 && a2 == 0xE200000000000000)
                {
LABEL_157:
                  v6 = 15;
                  goto LABEL_5;
                }
                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                v19 = v4 == 0x6E69736F6C636E65 && a2 == 0xED00006B72616D67;
                v20 = v19;
                v6 = 15;
                if ((result & 1) == 0 && !v20)
                {
                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                  if ((result & 1) != 0)
                    goto LABEL_157;
                  if (v4 == 28269 && a2 == 0xE200000000000000
                    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                    || v4 == 0x69636170736E6F6ELL && a2 == 0xEE006B72616D676ELL
                    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                  {
                    v6 = 16;
                    goto LABEL_5;
                  }
                  if (v4 == 110 && a2 == 0xE100000000000000)
                  {
LABEL_176:
                    v6 = 17;
                    goto LABEL_5;
                  }
                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                  v21 = v4 == 0x7265626D756ELL && a2 == 0xE600000000000000;
                  v22 = v21;
                  v6 = 17;
                  if ((result & 1) == 0 && !v22)
                  {
                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                    if ((result & 1) != 0)
                      goto LABEL_176;
                    if (v4 == 25710 && a2 == 0xE200000000000000
                      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                      || v4 == 0x6E6C616D69636564 && a2 == 0xED00007265626D75)
                    {
LABEL_191:
                      v6 = 18;
                      goto LABEL_5;
                    }
                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                    v23 = v4 == 0x7469676964 && a2 == 0xE500000000000000;
                    v24 = v23;
                    v6 = 18;
                    if ((result & 1) == 0 && !v24)
                    {
                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                      if ((result & 1) != 0)
                        goto LABEL_191;
                      if (v4 == 27758 && a2 == 0xE200000000000000
                        || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                        || v4 == 0x756E72657474656CLL && a2 == 0xEC0000007265626DLL
                        || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                      {
                        v6 = 19;
                        goto LABEL_5;
                      }
                      if (v4 == 28526 && a2 == 0xE200000000000000
                        || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                        || v4 == 0x6D756E726568746FLL && a2 == 0xEB00000000726562
                        || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                      {
                        v6 = 20;
                        goto LABEL_5;
                      }
                      if (v4 == 112 && a2 == 0xE100000000000000
                        || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                        || v4 == 0x74617574636E7570 && a2 == 0xEB000000006E6F69)
                      {
LABEL_220:
                        v6 = 21;
                        goto LABEL_5;
                      }
                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                      v25 = v4 == 0x74636E7570 && a2 == 0xE500000000000000;
                      v26 = v25;
                      v6 = 21;
                      if ((result & 1) == 0 && !v26)
                      {
                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                        if ((result & 1) != 0)
                          goto LABEL_220;
                        if (v4 == 25456 && a2 == 0xE200000000000000
                          || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                          || v4 == 0xD000000000000014 && a2 == 0x80000001DF007730
                          || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                        {
                          v6 = 22;
                          goto LABEL_5;
                        }
                        if (v4 == 25712 && a2 == 0xE200000000000000
                          || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                          || v4 == 0x636E757068736164 && a2 == 0xEF6E6F6974617574
                          || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                        {
                          v6 = 23;
                          goto LABEL_5;
                        }
                        if (v4 == 25968 && a2 == 0xE200000000000000
                          || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                          || v4 == 0xD000000000000010 && a2 == 0x80000001DF007750
                          || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                        {
                          v6 = 24;
                          goto LABEL_5;
                        }
                        if (v4 == 26224 && a2 == 0xE200000000000000)
                        {
LABEL_253:
                          v6 = 25;
                          goto LABEL_5;
                        }
                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                        v27 = v4 == 0xD000000000000010 && a2 == 0x80000001DF007770;
                        v28 = v27;
                        v6 = 25;
                        if ((result & 1) == 0 && !v28)
                        {
                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                          if ((result & 1) != 0)
                            goto LABEL_253;
                          if (v4 == 26992 && a2 == 0xE200000000000000
                            || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                            || v4 == 0xD000000000000012 && a2 == 0x80000001DF007790
                            || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                          {
                            v6 = 26;
                            goto LABEL_5;
                          }
                          if (v4 == 28528 && a2 == 0xE200000000000000)
                          {
LABEL_272:
                            v6 = 27;
                            goto LABEL_5;
                          }
                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                          v29 = v4 == 0xD000000000000010 && a2 == 0x80000001DF0077B0;
                          v30 = v29;
                          v6 = 27;
                          if ((result & 1) == 0 && !v30)
                          {
                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                            if ((result & 1) != 0)
                              goto LABEL_272;
                            if (v4 == 29552 && a2 == 0xE200000000000000)
                            {
LABEL_284:
                              v6 = 28;
                              goto LABEL_5;
                            }
                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                            v31 = v4 == 0x636E75706E65706FLL && a2 == 0xEF6E6F6974617574;
                            v32 = v31;
                            v6 = 28;
                            if ((result & 1) == 0 && !v32)
                            {
                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                              if ((result & 1) != 0)
                                goto LABEL_284;
                              if (v4 == 115 && a2 == 0xE100000000000000)
                              {
LABEL_296:
                                v6 = 29;
                                goto LABEL_5;
                              }
                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                              v33 = v4 == 0x6C6F626D7973 && a2 == 0xE600000000000000;
                              v34 = v33;
                              v6 = 29;
                              if ((result & 1) == 0 && !v34)
                              {
                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                if ((result & 1) != 0)
                                  goto LABEL_296;
                                if (v4 == 25459 && a2 == 0xE200000000000000
                                  || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                  || v4 == 0x79636E6572727563 && a2 == 0xEE006C6F626D7973
                                  || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                {
                                  v6 = 30;
                                  goto LABEL_5;
                                }
                                if (v4 == 27507 && a2 == 0xE200000000000000)
                                {
LABEL_315:
                                  v6 = 31;
                                  goto LABEL_5;
                                }
                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                v35 = v4 == 0x7265696669646F6DLL && a2 == 0xEE006C6F626D7973;
                                v36 = v35;
                                v6 = 31;
                                if ((result & 1) == 0 && !v36)
                                {
                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                  if ((result & 1) != 0)
                                    goto LABEL_315;
                                  if (v4 == 28019 && a2 == 0xE200000000000000
                                    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                    || v4 == 0x626D79736874616DLL && a2 == 0xEA00000000006C6FLL
                                    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                  {
                                    v6 = 32;
                                    goto LABEL_5;
                                  }
                                  if (v4 == 28531 && a2 == 0xE200000000000000
                                    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                    || v4 == 0x6D7973726568746FLL && a2 == 0xEB000000006C6F62
                                    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                  {
                                    v6 = 33;
                                    goto LABEL_5;
                                  }
                                  if (v4 == 122 && a2 == 0xE100000000000000
                                    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                    || v4 == 0x6F74617261706573 && a2 == 0xE900000000000072
                                    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                  {
                                    v6 = 34;
                                    goto LABEL_5;
                                  }
                                  if (v4 == 27770 && a2 == 0xE200000000000000
                                    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                    || v4 == 0x61706573656E696CLL && a2 == 0xED0000726F746172
                                    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                  {
                                    v6 = 35;
                                    goto LABEL_5;
                                  }
                                  if (v4 == 28794 && a2 == 0xE200000000000000)
                                  {
LABEL_355:
                                    v6 = 36;
                                    goto LABEL_5;
                                  }
                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                  v38 = v4 == 0xD000000000000012 && a2 == 0x80000001DF0077D0;
                                  v6 = 36;
                                  if ((result & 1) == 0 && !v38)
                                  {
                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                    if ((result & 1) != 0)
                                      goto LABEL_355;
                                    if (v4 == 29562 && a2 == 0xE200000000000000
                                      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                    {
                                      v6 = 37;
                                    }
                                    else
                                    {
                                      v6 = 37;
                                      if (v4 != 0x7065736563617073 || a2 != 0xEE00726F74617261)
                                      {
                                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                        if ((result & 1) != 0)
                                          v6 = 37;
                                        else
                                          v6 = 38;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_5:
  *a3 = v6;
  return result;
}

uint64_t closure #1 in static Parser.classifyNumericType(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v4;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = a1 == 0x6C616D69636564 && a2 == 0xE700000000000000;
  if (v4 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v7 = (unsigned int *)MEMORY[0x1E0DEE2D8];
  }
  else if (a1 == 0x7469676964 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v7 = (unsigned int *)MEMORY[0x1E0DEE2D0];
  }
  else
  {
    if ((a1 != 0x636972656D756ELL || a2 != 0xE700000000000000)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v14 = type metadata accessor for Unicode.NumericType();
      v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
      v12 = a3;
      v13 = 1;
      return v11(v12, v13, 1, v14);
    }
    v7 = (unsigned int *)MEMORY[0x1E0DEE2E0];
  }
  v8 = *v7;
  v9 = type metadata accessor for Unicode.NumericType();
  v10 = *(_QWORD *)(v9 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 104))(a3, v8, v9);
  v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
  v12 = a3;
  v13 = 0;
  v14 = v9;
  return v11(v12, v13, 1, v14);
}

uint64_t closure #1 in static Parser.classifyBoolProperty(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6;
  char v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  BOOL v37;
  BOOL v38;
  BOOL v39;
  BOOL v40;
  BOOL v41;
  BOOL v42;
  BOOL v43;
  BOOL v44;
  BOOL v45;
  BOOL v46;
  BOOL v47;
  BOOL v48;
  BOOL v49;
  BOOL v50;
  BOOL v51;
  BOOL v52;
  BOOL v53;
  BOOL v54;
  BOOL v55;
  BOOL v56;
  BOOL v57;
  BOOL v58;
  BOOL v59;
  BOOL v61;
  BOOL v63;

  if (result == 2019911777 && a2 == 0xE400000000000000)
    goto LABEL_8;
  v6 = result;
  result = _stringCompareWithSmolCheck(_:_:expecting:)();
  v7 = 0;
  if ((result & 1) == 0)
  {
    if (v6 == 0x7865686969637361 && a2 == 0xED00007469676964)
    {
LABEL_8:
      v7 = 0;
      goto LABEL_9;
    }
    result = _stringCompareWithSmolCheck(_:_:expecting:)();
    v7 = 0;
    if ((result & 1) != 0)
      goto LABEL_9;
    if (v6 == 0x6168706C61 && a2 == 0xE500000000000000
      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
      || v6 == 0x7465626168706C61 && a2 == 0xEA00000000006369
      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      v7 = 1;
      goto LABEL_9;
    }
    if (v6 == 0x6369646962 && a2 == 0xE500000000000000
      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
      || v6 == 0x746E6F6369646962 && a2 == 0xEB000000006C6F72
      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      v7 = 2;
      goto LABEL_9;
    }
    if (v6 == 0x6D69646962 && a2 == 0xE500000000000000
      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
      || v6 == 0x7272696D69646962 && a2 == 0xEC0000006465726FLL
      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      v7 = 3;
      goto LABEL_9;
    }
    if (v6 == 0x6465736163 && a2 == 0xE500000000000000
      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      v7 = 4;
      goto LABEL_9;
    }
    if (v6 == 25955 && a2 == 0xE200000000000000
      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
      || v6 == 0xD000000000000014 && a2 == 0x80000001DF008A70
      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      v7 = 5;
      goto LABEL_9;
    }
    if (v6 == 26979 && a2 == 0xE200000000000000
      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
      || v6 == 0x6F6E676965736163 && a2 == 0xED0000656C626172
      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      v7 = 6;
      goto LABEL_9;
    }
    if (v6 == 0x7865706D6F63 && a2 == 0xE600000000000000
      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
      || (result = 0xD000000000000018, v6 == 0xD000000000000018) && a2 == 0x80000001DF008A90
      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      v7 = 24;
      goto LABEL_9;
    }
    if (v6 == 1717794659 && a2 == 0xE400000000000000
      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
      || v6 == 0xD000000000000015 && a2 == 0x80000001DF008AB0
      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      v7 = 7;
      goto LABEL_9;
    }
    if (v6 == 1835235171 && a2 == 0xE400000000000000)
    {
LABEL_75:
      v7 = 8;
      goto LABEL_9;
    }
    result = _stringCompareWithSmolCheck(_:_:expecting:)();
    v8 = v6 == 0xD000000000000015 && a2 == 0x80000001DF008AD0;
    v9 = v8;
    v7 = 8;
    if ((result & 1) == 0 && !v9)
    {
      result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) != 0)
        goto LABEL_75;
      if (v6 == 0x66636B7763 && a2 == 0xE500000000000000
        || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
        || v6 == 0xD000000000000019 && a2 == 0x80000001DF008AF0
        || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        v7 = 9;
        goto LABEL_9;
      }
      if (v6 == 7108451 && a2 == 0xE300000000000000)
      {
LABEL_94:
        v7 = 10;
        goto LABEL_9;
      }
      result = _stringCompareWithSmolCheck(_:_:expecting:)();
      v10 = v6 == 0xD000000000000015 && a2 == 0x80000001DF008B10;
      v11 = v10;
      v7 = 10;
      if ((result & 1) == 0 && !v11)
      {
        result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) != 0)
          goto LABEL_94;
        if (v6 == 7632739 && a2 == 0xE300000000000000)
        {
LABEL_106:
          v7 = 11;
          goto LABEL_9;
        }
        result = _stringCompareWithSmolCheck(_:_:expecting:)();
        v12 = v6 == 0xD000000000000015 && a2 == 0x80000001DF008B30;
        v13 = v12;
        v7 = 11;
        if ((result & 1) == 0 && !v13)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) != 0)
            goto LABEL_106;
          result = 7698275;
          if (v6 == 7698275 && a2 == 0xE300000000000000)
          {
LABEL_118:
            v7 = 12;
            goto LABEL_9;
          }
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          v14 = v6 == 0xD000000000000015 && a2 == 0x80000001DF008B50;
          v15 = v14;
          v7 = 12;
          if ((result & 1) == 0 && !v15)
          {
            result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) != 0)
              goto LABEL_118;
            if (v6 == 1752392036 && a2 == 0xE400000000000000
              || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              v7 = 13;
              goto LABEL_9;
            }
            if (v6 == 7365988 && a2 == 0xE300000000000000
              || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
              || v6 == 0x7461636572706564 && a2 == 0xEA00000000006465
              || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              v7 = 14;
              goto LABEL_9;
            }
            if (v6 == 26980 && a2 == 0xE200000000000000)
            {
LABEL_141:
              v7 = 15;
              goto LABEL_9;
            }
            result = _stringCompareWithSmolCheck(_:_:expecting:)();
            v16 = v6 == 0xD000000000000019 && a2 == 0x80000001DF008B70;
            v17 = v16;
            v7 = 15;
            if ((result & 1) == 0 && !v17)
            {
              result = _stringCompareWithSmolCheck(_:_:expecting:)();
              if ((result & 1) != 0)
                goto LABEL_141;
              if (v6 == 6383972 && a2 == 0xE300000000000000
                || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                || v6 == 0x6974697263616964 && a2 == 0xE900000000000063
                || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
              {
                v7 = 16;
                goto LABEL_9;
              }
              if (v6 == 0x6573616265 && a2 == 0xE500000000000000
                || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                || v6 == 0xD000000000000011 && a2 == 0x80000001DF008B90
                || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
              {
                v7 = 17;
                goto LABEL_9;
              }
              if (v6 == 0x706D6F6365 && a2 == 0xE500000000000000
                || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                || v6 == 0x6D6F63696A6F6D65 && a2 == 0xEE00746E656E6F70
                || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
              {
                v7 = 18;
                goto LABEL_9;
              }
              if (v6 == 1685024101 && a2 == 0xE400000000000000
                || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                || v6 == 0x646F6D696A6F6D65 && a2 == 0xED00007265696669
                || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
              {
                v7 = 19;
                goto LABEL_9;
              }
              if (v6 == 0x696A6F6D65 && a2 == 0xE500000000000000
                || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
              {
                v7 = 20;
                goto LABEL_9;
              }
              if (v6 == 0x7365727065 && a2 == 0xE500000000000000)
              {
LABEL_185:
                v7 = 21;
                goto LABEL_9;
              }
              result = _stringCompareWithSmolCheck(_:_:expecting:)();
              v18 = v6 == 0xD000000000000011 && a2 == 0x80000001DF008BB0;
              v19 = v18;
              v7 = 21;
              if ((result & 1) == 0 && !v19)
              {
                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                if ((result & 1) != 0)
                  goto LABEL_185;
                result = 7632997;
                if (v6 == 7632997 && a2 == 0xE300000000000000
                  || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                  || v6 == 0x7265646E65747865 && a2 == 0xE800000000000000
                  || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                {
                  v7 = 22;
                  goto LABEL_9;
                }
                if (v6 == 0x74636970747865 && a2 == 0xE700000000000000)
                {
LABEL_204:
                  v7 = 23;
                  goto LABEL_9;
                }
                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                v20 = v6 == 0xD000000000000014 && a2 == 0x80000001DF008BD0;
                v21 = v20;
                v7 = 23;
                if ((result & 1) == 0 && !v21)
                {
                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                  if ((result & 1) != 0)
                    goto LABEL_204;
                  if (v6 == 0x657361627267 && a2 == 0xE600000000000000
                    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                    || v6 == 0x656D656870617267 && a2 == 0xEC00000065736162
                    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                  {
                    v7 = 25;
                    goto LABEL_9;
                  }
                  if (v6 == 0x7478657267 && a2 == 0xE500000000000000)
                  {
LABEL_223:
                    v7 = 26;
                    goto LABEL_9;
                  }
                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                  v22 = v6 == 0x656D656870617267 && a2 == 0xEE00646E65747865;
                  v23 = v22;
                  v7 = 26;
                  if ((result & 1) == 0 && !v23)
                  {
                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                    if ((result & 1) != 0)
                      goto LABEL_223;
                    if (v6 == 0x6B6E696C7267 && a2 == 0xE600000000000000)
                    {
LABEL_235:
                      v7 = 27;
                      goto LABEL_9;
                    }
                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                    v24 = v6 == 0x656D656870617267 && a2 == 0xEC0000006B6E696CLL;
                    v25 = v24;
                    v7 = 27;
                    if ((result & 1) == 0 && !v25)
                    {
                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                      if ((result & 1) != 0)
                        goto LABEL_235;
                      if (v6 == 7890280 && a2 == 0xE300000000000000)
                      {
LABEL_247:
                        v7 = 28;
                        goto LABEL_9;
                      }
                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                      v26 = v6 == 0x7469676964786568 && a2 == 0xE800000000000000;
                      v27 = v26;
                      v7 = 28;
                      if ((result & 1) == 0 && !v27)
                      {
                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                        if ((result & 1) != 0)
                          goto LABEL_247;
                        if (v6 == 0x6E6568707968 && a2 == 0xE600000000000000
                          || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                        {
                          v7 = 29;
                          goto LABEL_9;
                        }
                        if (v6 == 6513769 && a2 == 0xE300000000000000
                          || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                          || v6 == 0x6E69746E6F636469 && a2 == 0xEA00000000006575
                          || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                        {
                          v7 = 30;
                          goto LABEL_9;
                        }
                        if (v6 == 1868915817 && a2 == 0xE400000000000000
                          || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                          || v6 == 0x706172676F656469 && a2 == 0xEB00000000636968
                          || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                        {
                          v7 = 31;
                          goto LABEL_9;
                        }
                        if (v6 == 7562345 && a2 == 0xE300000000000000)
                        {
LABEL_277:
                          v7 = 32;
                          goto LABEL_9;
                        }
                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                        v28 = v6 == 0x74726174736469 && a2 == 0xE700000000000000;
                        v29 = v28;
                        v7 = 32;
                        if ((result & 1) == 0 && !v29)
                        {
                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                          if ((result & 1) != 0)
                            goto LABEL_277;
                          if (v6 == 1651729513 && a2 == 0xE400000000000000)
                          {
LABEL_289:
                            v7 = 33;
                            goto LABEL_9;
                          }
                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                          v30 = v6 == 0xD000000000000011 && a2 == 0x80000001DF008BF0;
                          v31 = v30;
                          v7 = 33;
                          if ((result & 1) == 0 && !v31)
                          {
                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                            if ((result & 1) != 0)
                              goto LABEL_289;
                            if (v6 == 1953719401 && a2 == 0xE400000000000000
                              || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                              || (result = 0xD000000000000012, v6 == 0xD000000000000012)
                              && a2 == 0x80000001DF008C10
                              || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                            {
                              v7 = 34;
                              goto LABEL_9;
                            }
                            if (v6 == 0x636E696F6ALL && a2 == 0xE500000000000000)
                            {
LABEL_308:
                              v7 = 35;
                              goto LABEL_9;
                            }
                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                            v32 = v6 == 0x746E6F636E696F6ALL && a2 == 0xEB000000006C6F72;
                            v33 = v32;
                            v7 = 35;
                            if ((result & 1) == 0 && !v33)
                            {
                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                              if ((result & 1) != 0)
                                goto LABEL_308;
                              if (v6 == 6647660 && a2 == 0xE300000000000000)
                              {
LABEL_320:
                                v7 = 36;
                                goto LABEL_9;
                              }
                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                              v34 = v6 == 0xD000000000000015 && a2 == 0x80000001DF008C30;
                              v35 = v34;
                              v7 = 36;
                              if ((result & 1) == 0 && !v35)
                              {
                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                if ((result & 1) != 0)
                                  goto LABEL_320;
                                if (v6 == 0x7265776F6CLL && a2 == 0xE500000000000000
                                  || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                  || v6 == 0x7361637265776F6CLL && a2 == 0xE900000000000065
                                  || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                {
                                  v7 = 37;
                                  goto LABEL_9;
                                }
                                if (v6 == 1752457581 && a2 == 0xE400000000000000
                                  || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                {
                                  v7 = 38;
                                  goto LABEL_9;
                                }
                                if (v6 == 0x726168636ELL && a2 == 0xE500000000000000)
                                {
LABEL_343:
                                  v7 = 39;
                                  goto LABEL_9;
                                }
                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                v36 = v6 == 0xD000000000000015 && a2 == 0x80000001DF008C50;
                                v37 = v36;
                                v7 = 39;
                                if ((result & 1) == 0 && !v37)
                                {
                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                  if ((result & 1) != 0)
                                    goto LABEL_343;
                                  if (v6 == 0x6168706C616FLL && a2 == 0xE600000000000000)
                                  {
                                    v7 = 40;
                                    goto LABEL_9;
                                  }
                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                  if ((result & 1) != 0
                                    || v6 == 0x706C61726568746FLL && a2 == 0xEF63697465626168
                                    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                  {
                                    v7 = 40;
                                    goto LABEL_9;
                                  }
                                  if (v6 == 6906991 && a2 == 0xE300000000000000
                                    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                    || (result = 0xD00000000000001ELL, v6 == 0xD00000000000001ELL)
                                    && a2 == 0x80000001DF008C70
                                    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                  {
                                    v7 = 41;
                                    goto LABEL_9;
                                  }
                                  if (v6 == 0x74786572676FLL && a2 == 0xE600000000000000
                                    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                    || v6 == 0xD000000000000013 && a2 == 0x80000001DF008C90
                                    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                  {
                                    v7 = 42;
                                    goto LABEL_9;
                                  }
                                  if (v6 == 1667524975 && a2 == 0xE400000000000000
                                    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                    || v6 == 0x636469726568746FLL && a2 == 0xEF65756E69746E6FLL
                                    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                  {
                                    v7 = 43;
                                    goto LABEL_9;
                                  }
                                  if (v6 == 1935960431 && a2 == 0xE400000000000000
                                    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                    || v6 == 0x736469726568746FLL && a2 == 0xEC00000074726174
                                    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                  {
                                    v7 = 44;
                                    goto LABEL_9;
                                  }
                                  if (v6 == 0x7265776F6C6FLL && a2 == 0xE600000000000000
                                    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                    || v6 == 0x776F6C726568746FLL && a2 == 0xEE00657361637265
                                    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                  {
                                    v7 = 45;
                                    goto LABEL_9;
                                  }
                                  if (v6 == 0x6874616D6FLL && a2 == 0xE500000000000000
                                    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                    || v6 == 0x74616D726568746FLL && a2 == 0xE900000000000068
                                    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                  {
                                    v7 = 46;
                                    goto LABEL_9;
                                  }
                                  if (v6 == 0x72657070756FLL && a2 == 0xE600000000000000)
                                  {
LABEL_405:
                                    v7 = 47;
                                    goto LABEL_9;
                                  }
                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                  v38 = v6 == 0x707075726568746FLL && a2 == 0xEE00657361637265;
                                  v39 = v38;
                                  v7 = 47;
                                  if ((result & 1) == 0 && !v39)
                                  {
                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                    if ((result & 1) != 0)
                                      goto LABEL_405;
                                    if (v6 == 0x6E7973746170 && a2 == 0xE600000000000000
                                      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                      || v6 == 0x736E726574746170 && a2 == 0xED00007861746E79
                                      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                    {
                                      v7 = 48;
                                      goto LABEL_9;
                                    }
                                    if (v6 == 0x7377746170 && a2 == 0xE500000000000000)
                                    {
LABEL_424:
                                      v7 = 49;
                                      goto LABEL_9;
                                    }
                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                    v40 = v6 == 0xD000000000000011 && a2 == 0x80000001DF008CB0;
                                    v41 = v40;
                                    v7 = 49;
                                    if ((result & 1) == 0 && !v41)
                                    {
                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                      if ((result & 1) != 0)
                                        goto LABEL_424;
                                      if (v6 == 7168880 && a2 == 0xE300000000000000
                                        || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                        || (result = 0xD00000000000001ALL, v6 == 0xD00000000000001ALL)
                                        && a2 == 0x80000001DF008CD0
                                        || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                      {
                                        v7 = 50;
                                        goto LABEL_9;
                                      }
                                      if (v6 == 0x6B72616D71 && a2 == 0xE500000000000000
                                        || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                        || v6 == 0x6F697461746F7571 && a2 == 0xED00006B72616D6ELL
                                        || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                      {
                                        v7 = 51;
                                        goto LABEL_9;
                                      }
                                      if (v6 == 0x6C616369646172 && a2 == 0xE700000000000000
                                        || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                      {
                                        v7 = 52;
                                        goto LABEL_9;
                                      }
                                      if (v6 == 26994 && a2 == 0xE200000000000000)
                                      {
LABEL_454:
                                        v7 = 53;
                                        goto LABEL_9;
                                      }
                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                      v42 = v6 == 0xD000000000000011 && a2 == 0x80000001DF008CF0;
                                      v43 = v42;
                                      v7 = 53;
                                      if ((result & 1) == 0 && !v43)
                                      {
                                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                        if ((result & 1) != 0)
                                          goto LABEL_454;
                                        if (v6 == 25715 && a2 == 0xE200000000000000)
                                        {
LABEL_466:
                                          v7 = 54;
                                          goto LABEL_9;
                                        }
                                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                        v44 = v6 == 0x74746F6474666F73 && a2 == 0xEA00000000006465;
                                        v45 = v44;
                                        v7 = 54;
                                        if ((result & 1) == 0 && !v45)
                                        {
                                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                          if ((result & 1) != 0)
                                            goto LABEL_466;
                                          if (v6 == 0x6D72657473 && a2 == 0xE500000000000000
                                            || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                            || v6 == 0xD000000000000010 && a2 == 0x80000001DF008D10
                                            || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                          {
                                            v7 = 55;
                                            goto LABEL_9;
                                          }
                                          if (v6 == 1836213620 && a2 == 0xE400000000000000)
                                          {
LABEL_485:
                                            v7 = 56;
                                            goto LABEL_9;
                                          }
                                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                          v46 = v6 == 0xD000000000000013 && a2 == 0x80000001DF008D30;
                                          v47 = v46;
                                          v7 = 56;
                                          if ((result & 1) == 0 && !v47)
                                          {
                                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                            if ((result & 1) != 0)
                                              goto LABEL_485;
                                            if (v6 == 0x6F65646975 && a2 == 0xE500000000000000)
                                            {
LABEL_497:
                                              v7 = 57;
                                              goto LABEL_9;
                                            }
                                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                            v48 = v6 == 0xD000000000000010 && a2 == 0x80000001DF008D50;
                                            v49 = v48;
                                            v7 = 57;
                                            if ((result & 1) == 0 && !v49)
                                            {
                                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                              if ((result & 1) != 0)
                                                goto LABEL_497;
                                              if (v6 == 0x7265707075 && a2 == 0xE500000000000000)
                                              {
LABEL_509:
                                                v7 = 58;
                                                goto LABEL_9;
                                              }
                                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                              v50 = v6 == 0x7361637265707075 && a2 == 0xE900000000000065;
                                              v51 = v50;
                                              v7 = 58;
                                              if ((result & 1) == 0 && !v51)
                                              {
                                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                if ((result & 1) != 0)
                                                  goto LABEL_509;
                                                if (v6 == 29558 && a2 == 0xE200000000000000)
                                                {
LABEL_521:
                                                  v7 = 59;
                                                  goto LABEL_9;
                                                }
                                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                v52 = v6 == 0xD000000000000011 && a2 == 0x80000001DF008D70;
                                                v53 = v52;
                                                v7 = 59;
                                                if ((result & 1) == 0 && !v53)
                                                {
                                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                  if ((result & 1) != 0)
                                                    goto LABEL_521;
                                                  if (v6 == 0x656361707377 && a2 == 0xE600000000000000
                                                    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                        (result & 1) != 0)
                                                    || v6 == 0x6170736574696877 && a2 == 0xEA00000000006563)
                                                  {
LABEL_536:
                                                    v7 = 60;
                                                    goto LABEL_9;
                                                  }
                                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                  v54 = v6 == 0x6563617073 && a2 == 0xE500000000000000;
                                                  v55 = v54;
                                                  v7 = 60;
                                                  if ((result & 1) == 0 && !v55)
                                                  {
                                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                    if ((result & 1) != 0)
                                                      goto LABEL_536;
                                                    result = 1667524984;
                                                    if (v6 == 1667524984 && a2 == 0xE400000000000000
                                                      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                          (result & 1) != 0)
                                                      || v6 == 0x69746E6F63646978 && a2 == 0xEB0000000065756ELL
                                                      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                          (result & 1) != 0))
                                                    {
                                                      v7 = 61;
                                                      goto LABEL_9;
                                                    }
                                                    result = 1935960440;
                                                    if (v6 == 1935960440 && a2 == 0xE400000000000000)
                                                    {
LABEL_555:
                                                      v7 = 62;
                                                      goto LABEL_9;
                                                    }
                                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                    v56 = v6 == 0x7472617473646978 && a2 == 0xE800000000000000;
                                                    v57 = v56;
                                                    v7 = 62;
                                                    if ((result & 1) == 0 && !v57)
                                                    {
                                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                      if ((result & 1) != 0)
                                                        goto LABEL_555;
                                                      if (v6 == 0x63666E6F78 && a2 == 0xE500000000000000
                                                        || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                            (result & 1) != 0)
                                                        || v6 == 0x6F73646E61707865 && a2 == 0xEC00000063666E6ELL
                                                        || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                            (result & 1) != 0))
                                                      {
                                                        v7 = 63;
                                                        goto LABEL_9;
                                                      }
                                                      if (v6 == 0x64666E6F78 && a2 == 0xE500000000000000)
                                                      {
LABEL_574:
                                                        v7 = 64;
                                                        goto LABEL_9;
                                                      }
                                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                      v58 = v6 == 0x6F73646E61707865 && a2 == 0xEC00000064666E6ELL;
                                                      v59 = v58;
                                                      v7 = 64;
                                                      if ((result & 1) == 0 && !v59)
                                                      {
                                                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                        if ((result & 1) != 0)
                                                          goto LABEL_574;
                                                        if (v6 == 0x636B666E6F78 && a2 == 0xE600000000000000)
                                                        {
LABEL_586:
                                                          v7 = 65;
                                                          goto LABEL_9;
                                                        }
                                                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                        v61 = v6 == 0x6F73646E61707865 && a2 == 0xED0000636B666E6ELL;
                                                        v7 = 65;
                                                        if ((result & 1) == 0 && !v61)
                                                        {
                                                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                          if ((result & 1) != 0)
                                                            goto LABEL_586;
                                                          if (v6 == 0x646B666E6F78 && a2 == 0xE600000000000000)
                                                          {
                                                            v7 = 66;
                                                          }
                                                          else
                                                          {
                                                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                            v63 = v6 == 0x6F73646E61707865
                                                               && a2 == 0xED0000646B666E6ELL;
                                                            v7 = 66;
                                                            if ((result & 1) == 0 && !v63)
                                                            {
                                                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                              if ((result & 1) != 0)
                                                                v7 = 66;
                                                              else
                                                                v7 = 67;
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_9:
  *a3 = v7;
  return result;
}

uint64_t closure #1 in static Parser.classifyCharacterPropertyBoolValue(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v4;
  char v6;
  BOOL v8;
  BOOL v10;

  v4 = result;
  if (result == 116 && a2 == 0xE100000000000000)
    goto LABEL_6;
  result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if ((result & 1) != 0 || v4 == 1702195828 && a2 == 0xE400000000000000)
    goto LABEL_6;
  result = _stringCompareWithSmolCheck(_:_:expecting:)();
  v8 = v4 == 121 && a2 == 0xE100000000000000;
  v6 = 1;
  if ((result & 1) == 0 && !v8)
  {
    result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if ((result & 1) != 0
      || v4 == 7562617 && a2 == 0xE300000000000000
      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_6:
      v6 = 1;
      goto LABEL_7;
    }
    if (v4 == 102 && a2 == 0xE100000000000000)
      goto LABEL_22;
    result = _stringCompareWithSmolCheck(_:_:expecting:)();
    v6 = 0;
    if ((result & 1) != 0)
      goto LABEL_7;
    if (v4 == 0x65736C6166 && a2 == 0xE500000000000000)
      goto LABEL_22;
    result = _stringCompareWithSmolCheck(_:_:expecting:)();
    v6 = 0;
    v10 = v4 == 110 && a2 == 0xE100000000000000;
    if ((result & 1) == 0 && !v10)
    {
      result = _stringCompareWithSmolCheck(_:_:expecting:)();
      v6 = 0;
      if ((result & 1) == 0)
      {
        if (v4 != 28526 || a2 != 0xE200000000000000)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) != 0)
            v6 = 0;
          else
            v6 = 2;
          goto LABEL_7;
        }
LABEL_22:
        v6 = 0;
      }
    }
  }
LABEL_7:
  *a3 = v6;
  return result;
}

uint64_t Unicode.POSIXProperty.init(rawValue:)@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  unint64_t v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Unicode.POSIXProperty.init(rawValue:), v3);
  result = swift_bridgeObjectRelease();
  v7 = 6;
  if (v5 < 6)
    v7 = v5;
  *a2 = v7;
  return result;
}

uint64_t closure #1 in static Parser.classifyScriptProperty(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t result;
  char v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  BOOL v37;
  BOOL v38;
  BOOL v39;
  BOOL v40;
  BOOL v41;
  BOOL v42;
  BOOL v43;
  BOOL v44;
  BOOL v45;
  BOOL v46;
  BOOL v47;
  BOOL v48;
  BOOL v49;
  BOOL v50;
  BOOL v51;
  BOOL v52;
  BOOL v53;
  BOOL v54;
  BOOL v55;
  BOOL v56;
  BOOL v57;
  BOOL v58;
  BOOL v59;
  BOOL v60;
  BOOL v61;
  BOOL v62;
  BOOL v63;
  BOOL v64;
  BOOL v65;
  BOOL v66;
  BOOL v67;
  BOOL v68;
  BOOL v69;
  BOOL v70;
  BOOL v71;
  BOOL v72;
  BOOL v73;
  BOOL v74;
  BOOL v75;
  BOOL v76;
  BOOL v77;
  BOOL v78;
  BOOL v79;
  BOOL v80;
  BOOL v81;
  BOOL v82;
  BOOL v83;
  BOOL v84;
  BOOL v85;
  BOOL v86;
  BOOL v87;
  BOOL v88;
  BOOL v89;
  BOOL v90;
  BOOL v91;
  BOOL v92;
  BOOL v93;
  BOOL v94;
  BOOL v95;
  BOOL v96;
  BOOL v97;
  BOOL v98;
  BOOL v99;
  BOOL v100;
  BOOL v101;
  BOOL v102;
  BOOL v103;
  BOOL v104;
  BOOL v105;
  BOOL v106;
  BOOL v107;
  BOOL v108;
  BOOL v109;
  BOOL v110;
  BOOL v111;
  BOOL v112;
  BOOL v113;
  BOOL v114;
  BOOL v115;
  BOOL v116;
  BOOL v117;
  BOOL v118;
  BOOL v119;
  BOOL v120;
  BOOL v121;
  BOOL v122;
  BOOL v123;
  BOOL v124;
  BOOL v125;
  BOOL v126;
  BOOL v127;
  BOOL v128;
  BOOL v129;
  BOOL v130;
  BOOL v131;
  BOOL v132;
  BOOL v133;
  BOOL v134;
  BOOL v135;
  BOOL v136;
  BOOL v137;
  BOOL v138;
  BOOL v139;
  BOOL v140;
  BOOL v141;
  BOOL v142;
  BOOL v143;
  BOOL v144;
  BOOL v145;
  BOOL v146;
  BOOL v147;
  BOOL v148;
  BOOL v149;
  BOOL v150;
  BOOL v151;
  BOOL v152;
  BOOL v153;
  BOOL v154;
  BOOL v155;
  BOOL v156;
  BOOL v157;
  BOOL v158;
  BOOL v159;
  BOOL v160;
  BOOL v161;
  BOOL v162;
  BOOL v163;
  BOOL v164;
  BOOL v165;
  BOOL v166;
  BOOL v167;
  BOOL v168;
  BOOL v169;
  BOOL v170;
  BOOL v171;
  BOOL v172;
  BOOL v173;
  BOOL v174;
  BOOL v175;
  BOOL v176;
  BOOL v177;
  BOOL v178;
  BOOL v179;
  BOOL v180;
  BOOL v181;
  BOOL v182;
  BOOL v183;
  BOOL v184;
  BOOL v185;
  BOOL v186;
  BOOL v187;
  BOOL v188;
  BOOL v189;
  BOOL v190;
  BOOL v191;
  BOOL v192;
  BOOL v193;
  BOOL v194;
  BOOL v195;
  BOOL v196;
  BOOL v197;
  BOOL v198;
  BOOL v199;
  BOOL v200;
  BOOL v201;
  BOOL v202;
  BOOL v203;
  BOOL v204;
  BOOL v205;
  BOOL v206;
  BOOL v207;
  BOOL v208;
  BOOL v209;
  BOOL v210;
  BOOL v211;
  BOOL v212;
  BOOL v213;
  BOOL v214;
  BOOL v215;
  BOOL v216;
  BOOL v217;
  BOOL v218;
  BOOL v219;
  BOOL v220;
  BOOL v221;
  BOOL v222;
  BOOL v223;
  BOOL v224;
  BOOL v225;
  BOOL v226;
  BOOL v227;
  BOOL v228;
  BOOL v229;
  BOOL v230;
  BOOL v231;
  BOOL v232;
  BOOL v233;
  BOOL v234;
  BOOL v236;
  BOOL v238;

  result = 1835820129;
  if (a1 == 1835820129 && a2 == 0xE400000000000000)
    goto LABEL_8;
  result = _stringCompareWithSmolCheck(_:_:expecting:)();
  v8 = 0;
  if ((result & 1) == 0)
  {
    if (a1 == 0x6D616C6461 && a2 == 0xE500000000000000)
    {
LABEL_8:
      v8 = 0;
      goto LABEL_9;
    }
    result = _stringCompareWithSmolCheck(_:_:expecting:)();
    v8 = 0;
    if ((result & 1) != 0)
      goto LABEL_9;
    if (a1 == 1651009377 && a2 == 0xE400000000000000
      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
      || a1 == 0xD000000000000011 && a2 == 0x80000001DF0075F0
      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      v8 = 19;
      goto LABEL_9;
    }
    if (a1 == 1836017761 && a2 == 0xE400000000000000
      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      v8 = 1;
      goto LABEL_9;
    }
    if (a1 == 1650553441 && a2 == 0xE400000000000000
      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
      || a1 == 0x636962617261 && a2 == 0xE600000000000000
      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      v8 = 3;
      goto LABEL_9;
    }
    if (a1 == 1768780385 && a2 == 0xE400000000000000
      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
      || a1 == 0x6C61697265706D69 && a2 == 0xEF6369616D617261
      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      v8 = 54;
      goto LABEL_9;
    }
    result = 1852666465;
    if (a1 == 1852666465 && a2 == 0xE400000000000000
      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
      || a1 == 0x6E61696E656D7261 && a2 == 0xE800000000000000
      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      v8 = 4;
      goto LABEL_9;
    }
    if (a1 == 1953724001 && a2 == 0xE400000000000000
      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
      || a1 == 0x6E617473657661 && a2 == 0xE700000000000000
      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      v8 = 5;
      goto LABEL_9;
    }
    if (a1 == 1768710498 && a2 == 0xE400000000000000)
    {
LABEL_52:
      v8 = 6;
      goto LABEL_9;
    }
    result = _stringCompareWithSmolCheck(_:_:expecting:)();
    v9 = a1 == 0x6573656E696C6162 && a2 == 0xE800000000000000;
    v10 = v9;
    v8 = 6;
    if ((result & 1) == 0 && !v10)
    {
      result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) != 0)
        goto LABEL_52;
      if (a1 == 1970102626 && a2 == 0xE400000000000000)
      {
LABEL_64:
        v8 = 7;
        goto LABEL_9;
      }
      result = _stringCompareWithSmolCheck(_:_:expecting:)();
      v11 = a1 == 0x6D756D6162 && a2 == 0xE500000000000000;
      v12 = v11;
      v8 = 7;
      if ((result & 1) == 0 && !v12)
      {
        result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) != 0)
          goto LABEL_64;
        if (a1 == 1936941410 && a2 == 0xE400000000000000)
        {
LABEL_76:
          v8 = 8;
          goto LABEL_9;
        }
        result = _stringCompareWithSmolCheck(_:_:expecting:)();
        v13 = a1 == 0x6861766173736162 && a2 == 0xE800000000000000;
        v14 = v13;
        v8 = 8;
        if ((result & 1) == 0 && !v14)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) != 0)
            goto LABEL_76;
          if (a1 == 1802789218 && a2 == 0xE400000000000000)
          {
LABEL_97:
            v8 = 9;
            goto LABEL_9;
          }
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          v15 = a1 == 0x6B61746162 && a2 == 0xE500000000000000;
          v16 = v15;
          v8 = 9;
          if ((result & 1) == 0 && !v16)
          {
            result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) != 0)
              goto LABEL_97;
            result = 1735288162;
            if (a1 == 1735288162 && a2 == 0xE400000000000000)
            {
LABEL_109:
              v8 = 10;
              goto LABEL_9;
            }
            result = _stringCompareWithSmolCheck(_:_:expecting:)();
            v17 = a1 == 0x696C61676E6562 && a2 == 0xE700000000000000;
            v18 = v17;
            v8 = 10;
            if ((result & 1) == 0 && !v18)
            {
              result = _stringCompareWithSmolCheck(_:_:expecting:)();
              if ((result & 1) != 0)
                goto LABEL_109;
              if (a1 == 1936418914 && a2 == 0xE400000000000000
                || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                || a1 == 0x6B75736B69616862 && a2 == 0xE900000000000069
                || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
              {
                v8 = 11;
                goto LABEL_9;
              }
              if (a1 == 1869639522 && a2 == 0xE400000000000000)
              {
LABEL_128:
                v8 = 12;
                goto LABEL_9;
              }
              result = _stringCompareWithSmolCheck(_:_:expecting:)();
              v19 = a1 == 0x6F666F6D6F706F62 && a2 == 0xE800000000000000;
              v20 = v19;
              v8 = 12;
              if ((result & 1) == 0 && !v20)
              {
                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                if ((result & 1) != 0)
                  goto LABEL_128;
                if (a1 == 1751216738 && a2 == 0xE400000000000000)
                {
LABEL_140:
                  v8 = 13;
                  goto LABEL_9;
                }
                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                v21 = a1 == 0x696D68617262 && a2 == 0xE600000000000000;
                v22 = v21;
                v8 = 13;
                if ((result & 1) == 0 && !v22)
                {
                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                  if ((result & 1) != 0)
                    goto LABEL_140;
                  if (a1 == 1767993954 && a2 == 0xE400000000000000)
                  {
LABEL_152:
                    v8 = 14;
                    goto LABEL_9;
                  }
                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                  v23 = a1 == 0x656C6C69617262 && a2 == 0xE700000000000000;
                  v24 = v23;
                  v8 = 14;
                  if ((result & 1) == 0 && !v24)
                  {
                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                    if ((result & 1) != 0)
                      goto LABEL_152;
                    if (a1 == 1768387938 && a2 == 0xE400000000000000)
                    {
LABEL_164:
                      v8 = 15;
                      goto LABEL_9;
                    }
                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                    v25 = a1 == 0x6573656E69677562 && a2 == 0xE800000000000000;
                    v26 = v25;
                    v8 = 15;
                    if ((result & 1) == 0 && !v26)
                    {
                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                      if ((result & 1) != 0)
                        goto LABEL_164;
                      if (a1 == 1684567394 && a2 == 0xE400000000000000)
                      {
LABEL_176:
                        v8 = 16;
                        goto LABEL_9;
                      }
                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                      v27 = a1 == 0x6469687562 && a2 == 0xE500000000000000;
                      v28 = v27;
                      v8 = 16;
                      if ((result & 1) == 0 && !v28)
                      {
                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                        if ((result & 1) != 0)
                          goto LABEL_176;
                        if (a1 == 1835753827 && a2 == 0xE400000000000000)
                        {
LABEL_188:
                          v8 = 20;
                          goto LABEL_9;
                        }
                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                        v29 = a1 == 0x616D6B616863 && a2 == 0xE600000000000000;
                        v30 = v29;
                        v8 = 20;
                        if ((result & 1) == 0 && !v30)
                        {
                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                          if ((result & 1) != 0)
                            goto LABEL_188;
                          if (a1 == 1936613731 && a2 == 0xE400000000000000
                            || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                            || a1 == 0xD000000000000012 && a2 == 0x80000001DF007610
                            || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                          {
                            v8 = 17;
                            goto LABEL_9;
                          }
                          if (a1 == 1769103715 && a2 == 0xE400000000000000)
                          {
LABEL_207:
                            v8 = 18;
                            goto LABEL_9;
                          }
                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                          v31 = a1 == 0x6E6169726163 && a2 == 0xE600000000000000;
                          v32 = v31;
                          v8 = 18;
                          if ((result & 1) == 0 && !v32)
                          {
                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                            if ((result & 1) != 0)
                              goto LABEL_207;
                            result = 1835100259;
                            if (a1 == 1835100259 && a2 == 0xE400000000000000
                              || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                            {
                              v8 = 21;
                              goto LABEL_9;
                            }
                            if (a1 == 1919248483 && a2 == 0xE400000000000000)
                            {
LABEL_223:
                              v8 = 22;
                              goto LABEL_9;
                            }
                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                            v33 = a1 == 0x65656B6F72656863 && a2 == 0xE800000000000000;
                            v34 = v33;
                            v8 = 22;
                            if ((result & 1) == 0 && !v34)
                            {
                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                              if ((result & 1) != 0)
                                goto LABEL_223;
                              if (a1 == 1936877667 && a2 == 0xE400000000000000
                                || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                || a1 == 0x696D7361726F6863 && a2 == 0xEA00000000006E61
                                || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                              {
                                v8 = 23;
                                goto LABEL_9;
                              }
                              if (a1 == 1953525603 && a2 == 0xE400000000000000)
                              {
LABEL_250:
                                v8 = 25;
                                goto LABEL_9;
                              }
                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                              v35 = a1 == 0x636974706F63 && a2 == 0xE600000000000000;
                              v36 = v35;
                              v8 = 25;
                              if ((result & 1) == 0 && !v36)
                              {
                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                v37 = a1 == 1667326321 && a2 == 0xE400000000000000;
                                v38 = v37;
                                v8 = 25;
                                if ((result & 1) == 0 && !v38)
                                {
                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                  if ((result & 1) != 0)
                                    goto LABEL_250;
                                  if (a1 == 1852665955 && a2 == 0xE400000000000000
                                    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                    || a1 == 0x6E696D6F72707963 && a2 == 0xEB000000006E616FLL
                                    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                  {
                                    v8 = 29;
                                    goto LABEL_9;
                                  }
                                  if (a1 == 1953656931 && a2 == 0xE400000000000000)
                                  {
LABEL_269:
                                    v8 = 27;
                                    goto LABEL_9;
                                  }
                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                  v39 = a1 == 0x746F6972707963 && a2 == 0xE700000000000000;
                                  v40 = v39;
                                  v8 = 27;
                                  if ((result & 1) == 0 && !v40)
                                  {
                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                    if ((result & 1) != 0)
                                      goto LABEL_269;
                                    if (a1 == 1819441507 && a2 == 0xE400000000000000)
                                    {
LABEL_281:
                                      v8 = 28;
                                      goto LABEL_9;
                                    }
                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                    v41 = a1 == 0x63696C6C69727963 && a2 == 0xE800000000000000;
                                    v42 = v41;
                                    v8 = 28;
                                    if ((result & 1) == 0 && !v42)
                                    {
                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                      if ((result & 1) != 0)
                                        goto LABEL_281;
                                      result = 1635149156;
                                      if (a1 == 1635149156 && a2 == 0xE400000000000000
                                        || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                        || a1 == 0x6167616E61766564 && a2 == 0xEA00000000006972
                                        || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                      {
                                        v8 = 31;
                                        goto LABEL_9;
                                      }
                                      if (a1 == 1801546084 && a2 == 0xE400000000000000
                                        || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                                        || a1 == 0x756B617365766964 && a2 == 0xEA00000000007572
                                        || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                      {
                                        v8 = 32;
                                        goto LABEL_9;
                                      }
                                      if (a1 == 1919381348 && a2 == 0xE400000000000000)
                                      {
LABEL_307:
                                        v8 = 33;
                                        goto LABEL_9;
                                      }
                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                      v43 = a1 == 0x6172676F64 && a2 == 0xE500000000000000;
                                      v44 = v43;
                                      v8 = 33;
                                      if ((result & 1) == 0 && !v44)
                                      {
                                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                        if ((result & 1) != 0)
                                          goto LABEL_307;
                                        result = 1953657700;
                                        if (a1 == 1953657700 && a2 == 0xE400000000000000)
                                        {
LABEL_319:
                                          v8 = 30;
                                          goto LABEL_9;
                                        }
                                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                        v45 = a1 == 0x74657265736564 && a2 == 0xE700000000000000;
                                        v46 = v45;
                                        v8 = 30;
                                        if ((result & 1) == 0 && !v46)
                                        {
                                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                          if ((result & 1) != 0)
                                            goto LABEL_319;
                                          if (a1 == 1819309412 && a2 == 0xE400000000000000)
                                          {
LABEL_331:
                                            v8 = 34;
                                            goto LABEL_9;
                                          }
                                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                          v47 = a1 == 0x6E61796F6C707564 && a2 == 0xE800000000000000;
                                          v48 = v47;
                                          v8 = 34;
                                          if ((result & 1) == 0 && !v48)
                                          {
                                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                            if ((result & 1) != 0)
                                              goto LABEL_331;
                                            if (a1 == 1887004517 && a2 == 0xE400000000000000
                                              || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                  (result & 1) != 0)
                                              || a1 == 0xD000000000000013 && a2 == 0x80000001DF007630
                                              || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                  (result & 1) != 0))
                                            {
                                              v8 = 35;
                                              goto LABEL_9;
                                            }
                                            if (a1 == 1633840229 && a2 == 0xE400000000000000)
                                            {
LABEL_350:
                                              v8 = 36;
                                              goto LABEL_9;
                                            }
                                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                            v49 = a1 == 0x6E617361626C65 && a2 == 0xE700000000000000;
                                            v50 = v49;
                                            v8 = 36;
                                            if ((result & 1) == 0 && !v50)
                                            {
                                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                              if ((result & 1) != 0)
                                                goto LABEL_350;
                                              if (a1 == 1836674149 && a2 == 0xE400000000000000)
                                              {
LABEL_362:
                                                v8 = 37;
                                                goto LABEL_9;
                                              }
                                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                              v51 = a1 == 0x6369616D796C65 && a2 == 0xE700000000000000;
                                              v52 = v51;
                                              v8 = 37;
                                              if ((result & 1) == 0 && !v52)
                                              {
                                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                if ((result & 1) != 0)
                                                  goto LABEL_362;
                                                if (a1 == 1768453221 && a2 == 0xE400000000000000)
                                                {
LABEL_374:
                                                  v8 = 38;
                                                  goto LABEL_9;
                                                }
                                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                v53 = a1 == 0x6369706F69687465 && a2 == 0xE800000000000000;
                                                v54 = v53;
                                                v8 = 38;
                                                if ((result & 1) == 0 && !v54)
                                                {
                                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                  if ((result & 1) != 0)
                                                    goto LABEL_374;
                                                  if (a1 == 1919903079 && a2 == 0xE400000000000000)
                                                  {
LABEL_386:
                                                    v8 = 39;
                                                    goto LABEL_9;
                                                  }
                                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                  v55 = a1 == 0x6E616967726F6567 && a2 == 0xE800000000000000;
                                                  v56 = v55;
                                                  v8 = 39;
                                                  if ((result & 1) == 0 && !v56)
                                                  {
                                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                    if ((result & 1) != 0)
                                                      goto LABEL_386;
                                                    result = 1734437991;
                                                    if (a1 == 1734437991 && a2 == 0xE400000000000000
                                                      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                          (result & 1) != 0)
                                                      || a1 == 0x74696C6F67616C67 && a2 == 0xEA00000000006369
                                                      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                          (result & 1) != 0))
                                                    {
                                                      v8 = 40;
                                                      goto LABEL_9;
                                                    }
                                                    result = 1735290727;
                                                    if (a1 == 1735290727 && a2 == 0xE400000000000000
                                                      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                          (result & 1) != 0)
                                                      || a1 == 0x67616C616A6E7567 && a2 == 0xEC00000069646E6FLL
                                                      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                          (result & 1) != 0))
                                                    {
                                                      v8 = 45;
                                                      goto LABEL_9;
                                                    }
                                                    if (a1 == 1835954023 && a2 == 0xE400000000000000)
                                                    {
LABEL_412:
                                                      v8 = 84;
                                                      goto LABEL_9;
                                                    }
                                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                    v57 = a1 == 0x676D61726173616DLL && a2 == 0xEC00000069646E6FLL;
                                                    v58 = v57;
                                                    v8 = 84;
                                                    if ((result & 1) == 0 && !v58)
                                                    {
                                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                      if ((result & 1) != 0)
                                                        goto LABEL_412;
                                                      result = 1752461159;
                                                      if (a1 == 1752461159 && a2 == 0xE400000000000000)
                                                      {
LABEL_424:
                                                        v8 = 41;
                                                        goto LABEL_9;
                                                      }
                                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                      v59 = a1 == 0x636968746F67 && a2 == 0xE600000000000000;
                                                      v60 = v59;
                                                      v8 = 41;
                                                      if ((result & 1) == 0 && !v60)
                                                      {
                                                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                        if ((result & 1) != 0)
                                                          goto LABEL_424;
                                                        if (a1 == 1851880039 && a2 == 0xE400000000000000)
                                                        {
LABEL_436:
                                                          v8 = 42;
                                                          goto LABEL_9;
                                                        }
                                                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                        v61 = a1 == 0x6168746E617267 && a2 == 0xE700000000000000;
                                                        v62 = v61;
                                                        v8 = 42;
                                                        if ((result & 1) == 0 && !v62)
                                                        {
                                                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                          if ((result & 1) != 0)
                                                            goto LABEL_436;
                                                          if (a1 == 1801810535 && a2 == 0xE400000000000000)
                                                          {
LABEL_448:
                                                            v8 = 43;
                                                            goto LABEL_9;
                                                          }
                                                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                          v63 = a1 == 0x6B65657267 && a2 == 0xE500000000000000;
                                                          v64 = v63;
                                                          v8 = 43;
                                                          if ((result & 1) == 0 && !v64)
                                                          {
                                                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                            if ((result & 1) != 0)
                                                              goto LABEL_448;
                                                            if (a1 == 1919579495 && a2 == 0xE400000000000000)
                                                            {
LABEL_460:
                                                              v8 = 44;
                                                              goto LABEL_9;
                                                            }
                                                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                            v65 = a1 == 0x69746172616A7567
                                                               && a2 == 0xE800000000000000;
                                                            v66 = v65;
                                                            v8 = 44;
                                                            if ((result & 1) == 0 && !v66)
                                                            {
                                                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                              if ((result & 1) != 0)
                                                                goto LABEL_460;
                                                              if (a1 == 1970435431 && a2 == 0xE400000000000000)
                                                              {
LABEL_472:
                                                                v8 = 46;
                                                                goto LABEL_9;
                                                              }
                                                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                              v67 = a1 == 0x69686B756D727567
                                                                 && a2 == 0xE800000000000000;
                                                              v68 = v67;
                                                              v8 = 46;
                                                              if ((result & 1) == 0 && !v68)
                                                              {
                                                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                if ((result & 1) != 0)
                                                                  goto LABEL_472;
                                                                if (a1 == 1735287144 && a2 == 0xE400000000000000)
                                                                {
LABEL_484:
                                                                  v8 = 48;
                                                                  goto LABEL_9;
                                                                }
                                                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                v69 = a1 == 0x6C75676E6168
                                                                   && a2 == 0xE600000000000000;
                                                                v70 = v69;
                                                                v8 = 48;
                                                                if ((result & 1) == 0 && !v70)
                                                                {
                                                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                  if ((result & 1) != 0)
                                                                    goto LABEL_484;
                                                                  if (a1 == 1768841576 && a2 == 0xE400000000000000
                                                                    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                        (result & 1) != 0)
                                                                    || a1 == 7233896 && a2 == 0xE300000000000000
                                                                    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                        (result & 1) != 0))
                                                                  {
                                                                    v8 = 47;
                                                                    goto LABEL_9;
                                                                  }
                                                                  if (a1 == 1869504872 && a2 == 0xE400000000000000)
                                                                  {
LABEL_503:
                                                                    v8 = 50;
                                                                    goto LABEL_9;
                                                                  }
                                                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                  v71 = a1 == 0x6F6F6E756E6168
                                                                     && a2 == 0xE700000000000000;
                                                                  v72 = v71;
                                                                  v8 = 50;
                                                                  if ((result & 1) == 0 && !v72)
                                                                  {
                                                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                    if ((result & 1) != 0)
                                                                      goto LABEL_503;
                                                                    if (a1 == 1920229736 && a2 == 0xE400000000000000)
                                                                    {
LABEL_515:
                                                                      v8 = 51;
                                                                      goto LABEL_9;
                                                                    }
                                                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                    v73 = a1 == 0x6E6172746168
                                                                       && a2 == 0xE600000000000000;
                                                                    v74 = v73;
                                                                    v8 = 51;
                                                                    if ((result & 1) == 0 && !v74)
                                                                    {
                                                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                      if ((result & 1) != 0)
                                                                        goto LABEL_515;
                                                                      if (a1 == 1919051112
                                                                        && a2 == 0xE400000000000000)
                                                                      {
LABEL_527:
                                                                        v8 = 52;
                                                                        goto LABEL_9;
                                                                      }
                                                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                      v75 = a1 == 0x776572626568
                                                                         && a2 == 0xE600000000000000;
                                                                      v76 = v75;
                                                                      v8 = 52;
                                                                      if ((result & 1) == 0 && !v76)
                                                                      {
                                                                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                        if ((result & 1) != 0)
                                                                          goto LABEL_527;
                                                                        result = 1634888040;
                                                                        if (a1 == 1634888040
                                                                          && a2 == 0xE400000000000000)
                                                                        {
LABEL_539:
                                                                          v8 = 53;
                                                                          goto LABEL_9;
                                                                        }
                                                                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                        v77 = a1 == 0x616E616761726968
                                                                           && a2 == 0xE800000000000000;
                                                                        v78 = v77;
                                                                        v8 = 53;
                                                                        if ((result & 1) == 0 && !v78)
                                                                        {
                                                                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                          if ((result & 1) != 0)
                                                                            goto LABEL_539;
                                                                          if (a1 == 2004184168
                                                                            && a2 == 0xE400000000000000
                                                                            || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                (result & 1) != 0)
                                                                            || a1 == 0xD000000000000014
                                                                            && a2 == 0x80000001DF007650
                                                                            || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                (result & 1) != 0))
                                                                          {
                                                                            v8 = 2;
                                                                            goto LABEL_9;
                                                                          }
                                                                          result = 1735290216;
                                                                          if (a1 == 1735290216
                                                                            && a2 == 0xE400000000000000
                                                                            || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                (result & 1) != 0)
                                                                            || a1 == 0x6D68687761686170
                                                                            && a2 == 0xEB00000000676E6FLL
                                                                            || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                (result & 1) != 0))
                                                                          {
                                                                            v8 = 117;
                                                                            goto LABEL_9;
                                                                          }
                                                                          if (a1 == 1886285160
                                                                            && a2 == 0xE400000000000000)
                                                                          {
LABEL_565:
                                                                            v8 = 102;
                                                                            goto LABEL_9;
                                                                          }
                                                                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                          v79 = a1 == 0xD000000000000014
                                                                             && a2 == 0x80000001DF007670;
                                                                          v80 = v79;
                                                                          v8 = 102;
                                                                          if ((result & 1) == 0 && !v80)
                                                                          {
                                                                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                            if ((result & 1) != 0)
                                                                              goto LABEL_565;
                                                                            if (a1 == 1953198696
                                                                              && a2 == 0xE400000000000000)
                                                                            {
LABEL_577:
                                                                              v8 = 62;
                                                                              goto LABEL_9;
                                                                            }
                                                                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                            v81 = a1 == 0xD000000000000012
                                                                               && a2 == 0x80000001DF007690;
                                                                            v82 = v81;
                                                                            v8 = 62;
                                                                            if ((result & 1) == 0 && !v82)
                                                                            {
                                                                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                              if ((result & 1) != 0)
                                                                                goto LABEL_577;
                                                                              if (a1 == 1735292264
                                                                                && a2 == 0xE400000000000000
                                                                                || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                    (result & 1) != 0)
                                                                                || a1 == 0x61676E7568646C6FLL
                                                                                && a2 == 0xEC0000006E616972
                                                                                || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                    (result & 1) != 0))
                                                                              {
                                                                                v8 = 105;
                                                                                goto LABEL_9;
                                                                              }
                                                                              if (a1 == 1818326121
                                                                                && a2 == 0xE400000000000000
                                                                                || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                    (result & 1) != 0)
                                                                                || a1 == 0x696C617469646C6FLL
                                                                                && a2 == 0xE900000000000063
                                                                                || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                    (result & 1) != 0))
                                                                              {
                                                                                v8 = 106;
                                                                                goto LABEL_9;
                                                                              }
                                                                              if (a1 == 1635148138
                                                                                && a2 == 0xE400000000000000)
                                                                              {
LABEL_603:
                                                                                v8 = 58;
                                                                                goto LABEL_9;
                                                                              }
                                                                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                              v83 = a1 == 0x6573656E6176616ALL
                                                                                 && a2 == 0xE800000000000000;
                                                                              v84 = v83;
                                                                              v8 = 58;
                                                                              if ((result & 1) == 0 && !v84)
                                                                              {
                                                                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                if ((result & 1) != 0)
                                                                                  goto LABEL_603;
                                                                                result = 1768710507;
                                                                                if (a1 == 1768710507
                                                                                  && a2 == 0xE400000000000000)
                                                                                {
LABEL_615:
                                                                                  v8 = 63;
                                                                                  goto LABEL_9;
                                                                                }
                                                                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                v85 = a1 == 0x696C686179616BLL
                                                                                   && a2 == 0xE700000000000000;
                                                                                v86 = v85;
                                                                                v8 = 63;
                                                                                if ((result & 1) == 0 && !v86)
                                                                                {
                                                                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                  if ((result & 1) != 0)
                                                                                    goto LABEL_615;
                                                                                  if (a1 == 1634623851
                                                                                    && a2 == 0xE400000000000000)
                                                                                  {
LABEL_627:
                                                                                    v8 = 61;
                                                                                    goto LABEL_9;
                                                                                  }
                                                                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                  v87 = a1 == 0x616E616B6174616BLL
                                                                                     && a2 == 0xE800000000000000;
                                                                                  v88 = v87;
                                                                                  v8 = 61;
                                                                                  if ((result & 1) == 0 && !v88)
                                                                                  {
                                                                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                    if ((result & 1) != 0)
                                                                                      goto LABEL_627;
                                                                                    result = 1918986347;
                                                                                    if (a1 == 1918986347
                                                                                      && a2 == 0xE400000000000000
                                                                                      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                          (result & 1) != 0)
                                                                                      || a1 == 0x7468736F7261686BLL
                                                                                      && a2 == 0xEA00000000006968
                                                                                      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                          (result & 1) != 0))
                                                                                    {
                                                                                      v8 = 64;
                                                                                      goto LABEL_9;
                                                                                    }
                                                                                    result = 1919772779;
                                                                                    if (a1 == 1919772779
                                                                                      && a2 == 0xE400000000000000)
                                                                                    {
LABEL_646:
                                                                                      v8 = 66;
                                                                                      goto LABEL_9;
                                                                                    }
                                                                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                    v89 = a1 == 0x72656D686BLL
                                                                                       && a2 == 0xE500000000000000;
                                                                                    v90 = v89;
                                                                                    v8 = 66;
                                                                                    if ((result & 1) == 0 && !v90)
                                                                                    {
                                                                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                      if ((result & 1) != 0)
                                                                                        goto LABEL_646;
                                                                                      if (a1 == 1785686123
                                                                                        && a2 == 0xE400000000000000)
                                                                                      {
LABEL_658:
                                                                                        v8 = 67;
                                                                                        goto LABEL_9;
                                                                                      }
                                                                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                      v91 = a1 == 0x696B6A6F686BLL
                                                                                         && a2 == 0xE600000000000000;
                                                                                      v92 = v91;
                                                                                      v8 = 67;
                                                                                      if ((result & 1) == 0 && !v92)
                                                                                      {
                                                                                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                        if ((result & 1) != 0)
                                                                                          goto LABEL_658;
                                                                                        if (a1 == 1937009003
                                                                                          && a2 == 0xE400000000000000)
                                                                                        {
LABEL_670:
                                                                                          v8 = 65;
                                                                                          goto LABEL_9;
                                                                                        }
                                                                                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                        v93 = a1 == 0xD000000000000011
                                                                                           && a2 == 0x80000001DF0076B0;
                                                                                        v94 = v93;
                                                                                        v8 = 65;
                                                                                        if ((result & 1) == 0 && !v94)
                                                                                        {
                                                                                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                          if ((result & 1) != 0)
                                                                                            goto LABEL_670;
                                                                                          if (a1 == 1633971819
                                                                                            && a2 == 0xE400000000000000)
                                                                                          {
LABEL_682:
                                                                                            v8 = 60;
                                                                                            goto LABEL_9;
                                                                                          }
                                                                                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                          v95 = a1 == 0x6164616E6E616BLL
                                                                                             && a2 == 0xE700000000000000;
                                                                                          v96 = v95;
                                                                                          v8 = 60;
                                                                                          if ((result & 1) == 0 && !v96)
                                                                                          {
                                                                                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                            if ((result & 1) != 0)
                                                                                              goto LABEL_682;
                                                                                            result = 1768453227;
                                                                                            if (a1 == 1768453227
                                                                                              && a2 == 0xE400000000000000)
                                                                                            {
LABEL_694:
                                                                                              v8 = 59;
                                                                                              goto LABEL_9;
                                                                                            }
                                                                                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                            v97 = a1 == 0x69687469616BLL
                                                                                               && a2 == 0xE600000000000000;
                                                                                            v98 = v97;
                                                                                            v8 = 59;
                                                                                            if ((result & 1) == 0
                                                                                              && !v98)
                                                                                            {
                                                                                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                              if ((result & 1) != 0)
                                                                                                goto LABEL_694;
                                                                                              result = 1634623852;
                                                                                              if (a1 == 1634623852
                                                                                                && a2 == 0xE400000000000000)
                                                                                              {
LABEL_706:
                                                                                                v8 = -115;
                                                                                                goto LABEL_9;
                                                                                              }
                                                                                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                              v99 = a1 == 0x6D616874696174 && a2 == 0xE700000000000000;
                                                                                              v100 = v99;
                                                                                              v8 = -115;
                                                                                              if ((result & 1) == 0
                                                                                                && !v100)
                                                                                              {
                                                                                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                if ((result & 1) != 0)
                                                                                                  goto LABEL_706;
                                                                                                if (a1 == 1869570412 && a2 == 0xE400000000000000)
                                                                                                {
LABEL_718:
                                                                                                  v8 = 69;
                                                                                                  goto LABEL_9;
                                                                                                }
                                                                                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                v101 = a1 == 7299436 && a2 == 0xE300000000000000;
                                                                                                v102 = v101;
                                                                                                v8 = 69;
                                                                                                if ((result & 1) == 0 && !v102)
                                                                                                {
                                                                                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                  if ((result & 1) != 0)
                                                                                                    goto LABEL_718;
                                                                                                  if (a1 == 1853120876 && a2 == 0xE400000000000000)
                                                                                                  {
LABEL_730:
                                                                                                    v8 = 70;
                                                                                                    goto LABEL_9;
                                                                                                  }
                                                                                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                  v103 = a1 == 0x6E6974616CLL && a2 == 0xE500000000000000;
                                                                                                  v104 = v103;
                                                                                                  v8 = 70;
                                                                                                  if ((result & 1) == 0 && !v104)
                                                                                                  {
                                                                                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                    if ((result & 1) != 0)
                                                                                                      goto LABEL_730;
                                                                                                    if (a1 == 1668310380 && a2 == 0xE400000000000000)
                                                                                                    {
LABEL_742:
                                                                                                      v8 = 71;
                                                                                                      goto LABEL_9;
                                                                                                    }
                                                                                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                    v105 = a1 == 0x61686370656CLL && a2 == 0xE600000000000000;
                                                                                                    v106 = v105;
                                                                                                    v8 = 71;
                                                                                                    if ((result & 1) == 0 && !v106)
                                                                                                    {
                                                                                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                      if ((result & 1) != 0)
                                                                                                        goto LABEL_742;
                                                                                                      if (a1 == 1651337580 && a2 == 0xE400000000000000)
                                                                                                      {
LABEL_754:
                                                                                                        v8 = 72;
                                                                                                        goto LABEL_9;
                                                                                                      }
                                                                                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                      v107 = a1 == 0x75626D696CLL && a2 == 0xE500000000000000;
                                                                                                      v108 = v107;
                                                                                                      v8 = 72;
                                                                                                      if ((result & 1) == 0 && !v108)
                                                                                                      {
                                                                                                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                        if ((result & 1) != 0)
                                                                                                          goto LABEL_754;
                                                                                                        result = 1634625900;
                                                                                                        if (a1 == 1634625900 && a2 == 0xE400000000000000)
                                                                                                        {
LABEL_766:
                                                                                                          v8 = 73;
                                                                                                          goto LABEL_9;
                                                                                                        }
                                                                                                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                        v109 = a1 == 0x617261656E696CLL && a2 == 0xE700000000000000;
                                                                                                        v110 = v109;
                                                                                                        v8 = 73;
                                                                                                        if ((result & 1) == 0 && !v110)
                                                                                                        {
                                                                                                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                          if ((result & 1) != 0)
                                                                                                            goto LABEL_766;
                                                                                                          result = 1651403116;
                                                                                                          if (a1 == 1651403116 && a2 == 0xE400000000000000)
                                                                                                          {
LABEL_778:
                                                                                                            v8 = 74;
                                                                                                            goto LABEL_9;
                                                                                                          }
                                                                                                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                          v111 = a1 == 0x627261656E696CLL && a2 == 0xE700000000000000;
                                                                                                          v112 = v111;
                                                                                                          v8 = 74;
                                                                                                          if ((result & 1) == 0 && !v112)
                                                                                                          {
                                                                                                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                            if ((result & 1) != 0)
                                                                                                              goto LABEL_778;
                                                                                                            if (a1 == 1970497900 && a2 == 0xE400000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                            {
                                                                                                              v8 = 75;
                                                                                                              goto LABEL_9;
                                                                                                            }
                                                                                                            if (a1 == 1768126828 && a2 == 0xE400000000000000)
                                                                                                            {
LABEL_794:
                                                                                                              v8 = 76;
                                                                                                              goto LABEL_9;
                                                                                                            }
                                                                                                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                            v113 = a1 == 0x6E616963796CLL && a2 == 0xE600000000000000;
                                                                                                            v114 = v113;
                                                                                                            v8 = 76;
                                                                                                            if ((result & 1) == 0 && !v114)
                                                                                                            {
                                                                                                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                              if ((result & 1) != 0)
                                                                                                                goto LABEL_794;
                                                                                                              result = 1768192364;
                                                                                                              if (a1 == 1768192364 && a2 == 0xE400000000000000)
                                                                                                              {
LABEL_806:
                                                                                                                v8 = 77;
                                                                                                                goto LABEL_9;
                                                                                                              }
                                                                                                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                              v115 = a1 == 0x6E616964796CLL && a2 == 0xE600000000000000;
                                                                                                              v116 = v115;
                                                                                                              v8 = 77;
                                                                                                              if ((result & 1) == 0 && !v116)
                                                                                                              {
                                                                                                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                if ((result & 1) != 0)
                                                                                                                  goto LABEL_806;
                                                                                                                if (a1 == 1785225581 && a2 == 0xE400000000000000)
                                                                                                                {
LABEL_818:
                                                                                                                  v8 = 78;
                                                                                                                  goto LABEL_9;
                                                                                                                }
                                                                                                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                v117 = a1 == 0x696E616A6168616DLL && a2 == 0xE800000000000000;
                                                                                                                v118 = v117;
                                                                                                                v8 = 78;
                                                                                                                if ((result & 1) == 0 && !v118)
                                                                                                                {
                                                                                                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                  if ((result & 1) != 0)
                                                                                                                    goto LABEL_818;
                                                                                                                  if (a1 == 1634427245 && a2 == 0xE400000000000000)
                                                                                                                  {
LABEL_830:
                                                                                                                    v8 = 79;
                                                                                                                    goto LABEL_9;
                                                                                                                  }
                                                                                                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                  v119 = a1 == 0x726173616B616DLL && a2 == 0xE700000000000000;
                                                                                                                  v120 = v119;
                                                                                                                  v8 = 79;
                                                                                                                  if ((result & 1) == 0 && !v120)
                                                                                                                  {
                                                                                                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                    if ((result & 1) != 0)
                                                                                                                      goto LABEL_830;
                                                                                                                    if (a1 == 1684955501 && a2 == 0xE400000000000000)
                                                                                                                    {
LABEL_842:
                                                                                                                      v8 = 81;
                                                                                                                      goto LABEL_9;
                                                                                                                    }
                                                                                                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                    v121 = a1 == 0x636961646E616DLL && a2 == 0xE700000000000000;
                                                                                                                    v122 = v121;
                                                                                                                    v8 = 81;
                                                                                                                    if ((result & 1) == 0 && !v122)
                                                                                                                    {
                                                                                                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                      if ((result & 1) != 0)
                                                                                                                        goto LABEL_842;
                                                                                                                      result = 1768841581;
                                                                                                                      if (a1 == 1768841581 && a2 == 0xE400000000000000)
                                                                                                                      {
LABEL_854:
                                                                                                                        v8 = 82;
                                                                                                                        goto LABEL_9;
                                                                                                                      }
                                                                                                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                      v123 = a1 == 0x65616863696E616DLL && a2 == 0xEA00000000006E61;
                                                                                                                      v124 = v123;
                                                                                                                      v8 = 82;
                                                                                                                      if ((result & 1) == 0 && !v124)
                                                                                                                      {
                                                                                                                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                        if ((result & 1) != 0)
                                                                                                                          goto LABEL_854;
                                                                                                                        if (a1 == 1668440429 && a2 == 0xE400000000000000)
                                                                                                                        {
LABEL_866:
                                                                                                                          v8 = 83;
                                                                                                                          goto LABEL_9;
                                                                                                                        }
                                                                                                                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                        v125 = a1 == 0x6E65686372616DLL && a2 == 0xE700000000000000;
                                                                                                                        v126 = v125;
                                                                                                                        v8 = 83;
                                                                                                                        if ((result & 1) == 0 && !v126)
                                                                                                                        {
                                                                                                                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                          if ((result & 1) != 0)
                                                                                                                            goto LABEL_866;
                                                                                                                          if (a1 == 1717855597 && a2 == 0xE400000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x646961666564656DLL && a2 == 0xEB000000006E6972 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                          {
                                                                                                                            v8 = 85;
                                                                                                                            goto LABEL_9;
                                                                                                                          }
                                                                                                                          result = 1684956525;
                                                                                                                          if (a1 == 1684956525 && a2 == 0xE400000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x6B696B65646E656DLL && a2 == 0xEC00000069756B61 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                          {
                                                                                                                            v8 = 87;
                                                                                                                            goto LABEL_9;
                                                                                                                          }
                                                                                                                          result = 1668441453;
                                                                                                                          if (a1 == 1668441453 && a2 == 0xE400000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x636974696F72656DLL && a2 == 0xEF65766973727563 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                          {
                                                                                                                            v8 = 88;
                                                                                                                            goto LABEL_9;
                                                                                                                          }
                                                                                                                          if (a1 == 1869768045 && a2 == 0xE400000000000000)
                                                                                                                          {
LABEL_899:
                                                                                                                            v8 = 89;
                                                                                                                            goto LABEL_9;
                                                                                                                          }
                                                                                                                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                          v127 = a1 == 0xD000000000000013 && a2 == 0x80000001DF0076D0;
                                                                                                                          v128 = v127;
                                                                                                                          v8 = 89;
                                                                                                                          if ((result & 1) == 0 && !v128)
                                                                                                                          {
                                                                                                                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                            if ((result & 1) != 0)
                                                                                                                              goto LABEL_899;
                                                                                                                            result = 1836674157;
                                                                                                                            if (a1 == 1836674157 && a2 == 0xE400000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x616C6179616C616DLL && a2 == 0xE90000000000006DLL || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                            {
                                                                                                                              v8 = 80;
                                                                                                                              goto LABEL_9;
                                                                                                                            }
                                                                                                                            if (a1 == 1768189805 && a2 == 0xE400000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                            {
                                                                                                                              v8 = 91;
                                                                                                                              goto LABEL_9;
                                                                                                                            }
                                                                                                                            result = 1735290733;
                                                                                                                            if (a1 == 1735290733 && a2 == 0xE400000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x61696C6F676E6F6DLL && a2 == 0xE90000000000006ELL || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                            {
                                                                                                                              v8 = 92;
                                                                                                                              goto LABEL_9;
                                                                                                                            }
                                                                                                                            if (a1 == 1869574765 && a2 == 0xE400000000000000)
                                                                                                                            {
LABEL_929:
                                                                                                                              v8 = 93;
                                                                                                                              goto LABEL_9;
                                                                                                                            }
                                                                                                                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                            v129 = a1 == 7303789 && a2 == 0xE300000000000000;
                                                                                                                            v130 = v129;
                                                                                                                            v8 = 93;
                                                                                                                            if ((result & 1) == 0 && !v130)
                                                                                                                            {
                                                                                                                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                              if ((result & 1) != 0)
                                                                                                                                goto LABEL_929;
                                                                                                                              if (a1 == 1768256621 && a2 == 0xE400000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x616D69657465656DLL && a2 == 0xEB000000006B6579 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                              {
                                                                                                                                v8 = 86;
                                                                                                                                goto LABEL_9;
                                                                                                                              }
                                                                                                                              if (a1 == 1953265005 && a2 == 0xE400000000000000)
                                                                                                                              {
LABEL_948:
                                                                                                                                v8 = 94;
                                                                                                                                goto LABEL_9;
                                                                                                                              }
                                                                                                                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                              v131 = a1 == 0x696E61746C756DLL && a2 == 0xE700000000000000;
                                                                                                                              v132 = v131;
                                                                                                                              v8 = 94;
                                                                                                                              if ((result & 1) == 0 && !v132)
                                                                                                                              {
                                                                                                                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                if ((result & 1) != 0)
                                                                                                                                  goto LABEL_948;
                                                                                                                                if (a1 == 1919777133 && a2 == 0xE400000000000000)
                                                                                                                                {
LABEL_960:
                                                                                                                                  v8 = 95;
                                                                                                                                  goto LABEL_9;
                                                                                                                                }
                                                                                                                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                v133 = a1 == 0x72616D6E61796DLL && a2 == 0xE700000000000000;
                                                                                                                                v134 = v133;
                                                                                                                                v8 = 95;
                                                                                                                                if ((result & 1) == 0 && !v134)
                                                                                                                                {
                                                                                                                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                  if ((result & 1) != 0)
                                                                                                                                    goto LABEL_960;
                                                                                                                                  result = 1684955502;
                                                                                                                                  if (a1 == 1684955502 && a2 == 0xE400000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x67616E69646E616ELL && a2 == 0xEB00000000697261 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                  {
                                                                                                                                    v8 = 97;
                                                                                                                                    goto LABEL_9;
                                                                                                                                  }
                                                                                                                                  if (a1 == 1651663214 && a2 == 0xE400000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x6874726F6E646C6FLL && a2 == 0xEF6E616962617261 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                  {
                                                                                                                                    v8 = 107;
                                                                                                                                    goto LABEL_9;
                                                                                                                                  }
                                                                                                                                  if (a1 == 1952539246 && a2 == 0xE400000000000000)
                                                                                                                                  {
LABEL_986:
                                                                                                                                    v8 = 96;
                                                                                                                                    goto LABEL_9;
                                                                                                                                  }
                                                                                                                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                  v135 = a1 == 0x616561746162616ELL && a2 == 0xE90000000000006ELL;
                                                                                                                                  v136 = v135;
                                                                                                                                  v8 = 96;
                                                                                                                                  if ((result & 1) == 0 && !v136)
                                                                                                                                  {
                                                                                                                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                    if ((result & 1) != 0)
                                                                                                                                      goto LABEL_986;
                                                                                                                                    if (a1 == 1635214702 && a2 == 0xE400000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                    {
                                                                                                                                      v8 = 98;
                                                                                                                                      goto LABEL_9;
                                                                                                                                    }
                                                                                                                                    result = 1869572974;
                                                                                                                                    if (a1 == 1869572974 && a2 == 0xE400000000000000)
                                                                                                                                    {
LABEL_1002:
                                                                                                                                      v8 = 100;
                                                                                                                                      goto LABEL_9;
                                                                                                                                    }
                                                                                                                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                    v137 = a1 == 7301998 && a2 == 0xE300000000000000;
                                                                                                                                    v138 = v137;
                                                                                                                                    v8 = 100;
                                                                                                                                    if ((result & 1) == 0 && !v138)
                                                                                                                                    {
                                                                                                                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                      if ((result & 1) != 0)
                                                                                                                                        goto LABEL_1002;
                                                                                                                                      if (a1 == 1969779566 && a2 == 0xE400000000000000)
                                                                                                                                      {
LABEL_1014:
                                                                                                                                        v8 = 101;
                                                                                                                                        goto LABEL_9;
                                                                                                                                      }
                                                                                                                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                      v139 = a1 == 0x756873756ELL && a2 == 0xE500000000000000;
                                                                                                                                      v140 = v139;
                                                                                                                                      v8 = 101;
                                                                                                                                      if ((result & 1) == 0 && !v140)
                                                                                                                                      {
                                                                                                                                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                        if ((result & 1) != 0)
                                                                                                                                          goto LABEL_1014;
                                                                                                                                        if (a1 == 1835100015 && a2 == 0xE400000000000000)
                                                                                                                                        {
LABEL_1026:
                                                                                                                                          v8 = 103;
                                                                                                                                          goto LABEL_9;
                                                                                                                                        }
                                                                                                                                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                        v141 = a1 == 0x6D6168676FLL && a2 == 0xE500000000000000;
                                                                                                                                        v142 = v141;
                                                                                                                                        v8 = 103;
                                                                                                                                        if ((result & 1) == 0 && !v142)
                                                                                                                                        {
                                                                                                                                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                          if ((result & 1) != 0)
                                                                                                                                            goto LABEL_1026;
                                                                                                                                          if (a1 == 1801677935 && a2 == 0xE400000000000000)
                                                                                                                                          {
LABEL_1038:
                                                                                                                                            v8 = 104;
                                                                                                                                            goto LABEL_9;
                                                                                                                                          }
                                                                                                                                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                          v143 = a1 == 0x696B6968636C6FLL && a2 == 0xE700000000000000;
                                                                                                                                          v144 = v143;
                                                                                                                                          v8 = 104;
                                                                                                                                          if ((result & 1) == 0 && !v144)
                                                                                                                                          {
                                                                                                                                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                            if ((result & 1) != 0)
                                                                                                                                              goto LABEL_1038;
                                                                                                                                            if (a1 == 1751872111 && a2 == 0xE400000000000000)
                                                                                                                                            {
LABEL_1050:
                                                                                                                                              v8 = 112;
                                                                                                                                              goto LABEL_9;
                                                                                                                                            }
                                                                                                                                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                            v145 = a1 == 0x696B727574646C6FLL && a2 == 0xE900000000000063;
                                                                                                                                            v146 = v145;
                                                                                                                                            v8 = 112;
                                                                                                                                            if ((result & 1) == 0 && !v146)
                                                                                                                                            {
                                                                                                                                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                              if ((result & 1) != 0)
                                                                                                                                                goto LABEL_1050;
                                                                                                                                              if (a1 == 1635349103 && a2 == 0xE400000000000000)
                                                                                                                                              {
LABEL_1062:
                                                                                                                                                v8 = 114;
                                                                                                                                                goto LABEL_9;
                                                                                                                                              }
                                                                                                                                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                              v147 = a1 == 0x617969726FLL && a2 == 0xE500000000000000;
                                                                                                                                              v148 = v147;
                                                                                                                                              v8 = 114;
                                                                                                                                              if ((result & 1) == 0 && !v148)
                                                                                                                                              {
                                                                                                                                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                if ((result & 1) != 0)
                                                                                                                                                  goto LABEL_1062;
                                                                                                                                                if (a1 == 1701278575 && a2 == 0xE400000000000000)
                                                                                                                                                {
LABEL_1074:
                                                                                                                                                  v8 = 115;
                                                                                                                                                  goto LABEL_9;
                                                                                                                                                }
                                                                                                                                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                v149 = a1 == 0x656761736FLL && a2 == 0xE500000000000000;
                                                                                                                                                v150 = v149;
                                                                                                                                                v8 = 115;
                                                                                                                                                if ((result & 1) == 0 && !v150)
                                                                                                                                                {
                                                                                                                                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                  if ((result & 1) != 0)
                                                                                                                                                    goto LABEL_1074;
                                                                                                                                                  if (a1 == 1634562927 && a2 == 0xE400000000000000)
                                                                                                                                                  {
LABEL_1086:
                                                                                                                                                    v8 = 116;
                                                                                                                                                    goto LABEL_9;
                                                                                                                                                  }
                                                                                                                                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                  v151 = a1 == 0x61796E616D736FLL && a2 == 0xE700000000000000;
                                                                                                                                                  v152 = v151;
                                                                                                                                                  v8 = 116;
                                                                                                                                                  if ((result & 1) == 0 && !v152)
                                                                                                                                                  {
                                                                                                                                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                    if ((result & 1) != 0)
                                                                                                                                                      goto LABEL_1086;
                                                                                                                                                    result = 1919382895;
                                                                                                                                                    if (a1 == 1919382895 && a2 == 0xE400000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x7568677975646C6FLL && a2 == 0xE900000000000072 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                    {
                                                                                                                                                      v8 = 113;
                                                                                                                                                      goto LABEL_9;
                                                                                                                                                    }
                                                                                                                                                    if (a1 == 1835819376 && a2 == 0xE400000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x6E6572796D6C6170 && a2 == 0xE900000000000065 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                    {
                                                                                                                                                      v8 = 118;
                                                                                                                                                      goto LABEL_9;
                                                                                                                                                    }
                                                                                                                                                    if (a1 == 1668637040 && a2 == 0xE400000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x61686E6963756170 && a2 == 0xE900000000000075 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                    {
                                                                                                                                                      v8 = 119;
                                                                                                                                                      goto LABEL_9;
                                                                                                                                                    }
                                                                                                                                                    if (a1 == 1836213616 && a2 == 0xE400000000000000)
                                                                                                                                                    {
LABEL_1119:
                                                                                                                                                      v8 = 108;
                                                                                                                                                      goto LABEL_9;
                                                                                                                                                    }
                                                                                                                                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                    v153 = a1 == 0x696D726570646C6FLL && a2 == 0xE900000000000063;
                                                                                                                                                    v154 = v153;
                                                                                                                                                    v8 = 108;
                                                                                                                                                    if ((result & 1) == 0 && !v154)
                                                                                                                                                    {
                                                                                                                                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                      if ((result & 1) != 0)
                                                                                                                                                        goto LABEL_1119;
                                                                                                                                                      if (a1 == 1734436976 && a2 == 0xE400000000000000)
                                                                                                                                                      {
LABEL_1131:
                                                                                                                                                        v8 = 120;
                                                                                                                                                        goto LABEL_9;
                                                                                                                                                      }
                                                                                                                                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                      v155 = a1 == 0x61707367616870 && a2 == 0xE700000000000000;
                                                                                                                                                      v156 = v155;
                                                                                                                                                      v8 = 120;
                                                                                                                                                      if ((result & 1) == 0 && !v156)
                                                                                                                                                      {
                                                                                                                                                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                        if ((result & 1) != 0)
                                                                                                                                                          goto LABEL_1131;
                                                                                                                                                        result = 1768712304;
                                                                                                                                                        if (a1 == 1768712304 && a2 == 0xE400000000000000)
                                                                                                                                                        {
LABEL_1143:
                                                                                                                                                          v8 = 56;
                                                                                                                                                          goto LABEL_9;
                                                                                                                                                        }
                                                                                                                                                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                        v157 = a1 == 0xD000000000000014 && a2 == 0x80000001DF0076F0;
                                                                                                                                                        v158 = v157;
                                                                                                                                                        v8 = 56;
                                                                                                                                                        if ((result & 1) == 0 && !v158)
                                                                                                                                                        {
                                                                                                                                                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                          if ((result & 1) != 0)
                                                                                                                                                            goto LABEL_1143;
                                                                                                                                                          if (a1 == 1886152816 && a2 == 0xE400000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x707265746C617370 && a2 == 0xEE006976616C6861 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                          {
                                                                                                                                                            v8 = 122;
                                                                                                                                                            goto LABEL_9;
                                                                                                                                                          }
                                                                                                                                                          if (a1 == 2020501616 && a2 == 0xE400000000000000)
                                                                                                                                                          {
LABEL_1162:
                                                                                                                                                            v8 = 121;
                                                                                                                                                            goto LABEL_9;
                                                                                                                                                          }
                                                                                                                                                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                          v159 = a1 == 0x6963696E656F6870 && a2 == 0xEA00000000006E61;
                                                                                                                                                          v160 = v159;
                                                                                                                                                          v8 = 121;
                                                                                                                                                          if ((result & 1) == 0 && !v160)
                                                                                                                                                          {
                                                                                                                                                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                            if ((result & 1) != 0)
                                                                                                                                                              goto LABEL_1162;
                                                                                                                                                            result = 1685220464;
                                                                                                                                                            if (a1 == 1685220464 && a2 == 0xE400000000000000)
                                                                                                                                                            {
LABEL_1174:
                                                                                                                                                              v8 = 90;
                                                                                                                                                              goto LABEL_9;
                                                                                                                                                            }
                                                                                                                                                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                            v161 = a1 == 1868654957 && a2 == 0xE400000000000000;
                                                                                                                                                            v162 = v161;
                                                                                                                                                            v8 = 90;
                                                                                                                                                            if ((result & 1) == 0 && !v162)
                                                                                                                                                            {
                                                                                                                                                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                              if ((result & 1) != 0)
                                                                                                                                                                goto LABEL_1174;
                                                                                                                                                              if (a1 == 1769239152 && a2 == 0xE400000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || (result = 0xD000000000000015, a1 == 0xD000000000000015) && a2 == 0x80000001DF007710 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                              {
                                                                                                                                                                v8 = 57;
                                                                                                                                                                goto LABEL_9;
                                                                                                                                                              }
                                                                                                                                                              result = 1735289458;
                                                                                                                                                              if (a1 == 1735289458 && a2 == 0xE400000000000000)
                                                                                                                                                              {
LABEL_1193:
                                                                                                                                                                v8 = 123;
                                                                                                                                                                goto LABEL_9;
                                                                                                                                                              }
                                                                                                                                                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                              v163 = a1 == 0x676E616A6572 && a2 == 0xE600000000000000;
                                                                                                                                                              v164 = v163;
                                                                                                                                                              v8 = 123;
                                                                                                                                                              if ((result & 1) == 0 && !v164)
                                                                                                                                                              {
                                                                                                                                                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                if ((result & 1) != 0)
                                                                                                                                                                  goto LABEL_1193;
                                                                                                                                                                if (a1 == 1734897522 && a2 == 0xE400000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x6F726966696E6168 && a2 == 0xEE006179676E6968 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                {
                                                                                                                                                                  v8 = 49;
                                                                                                                                                                  goto LABEL_9;
                                                                                                                                                                }
                                                                                                                                                                if (a1 == 1919841650 && a2 == 0xE400000000000000)
                                                                                                                                                                {
LABEL_1212:
                                                                                                                                                                  v8 = 124;
                                                                                                                                                                  goto LABEL_9;
                                                                                                                                                                }
                                                                                                                                                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                v165 = a1 == 0x63696E7572 && a2 == 0xE500000000000000;
                                                                                                                                                                v166 = v165;
                                                                                                                                                                v8 = 124;
                                                                                                                                                                if ((result & 1) == 0 && !v166)
                                                                                                                                                                {
                                                                                                                                                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                  if ((result & 1) != 0)
                                                                                                                                                                    goto LABEL_1212;
                                                                                                                                                                  if (a1 == 1919770995 && a2 == 0xE400000000000000)
                                                                                                                                                                  {
LABEL_1224:
                                                                                                                                                                    v8 = 125;
                                                                                                                                                                    goto LABEL_9;
                                                                                                                                                                  }
                                                                                                                                                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                  v167 = a1 == 0x61746972616D6173 && a2 == 0xE90000000000006ELL;
                                                                                                                                                                  v168 = v167;
                                                                                                                                                                  v8 = 125;
                                                                                                                                                                  if ((result & 1) == 0 && !v168)
                                                                                                                                                                  {
                                                                                                                                                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                    if ((result & 1) != 0)
                                                                                                                                                                      goto LABEL_1224;
                                                                                                                                                                    result = 1651663219;
                                                                                                                                                                    if (a1 == 1651663219 && a2 == 0xE400000000000000)
                                                                                                                                                                    {
LABEL_1236:
                                                                                                                                                                      v8 = 111;
                                                                                                                                                                      goto LABEL_9;
                                                                                                                                                                    }
                                                                                                                                                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                    v169 = a1 == 0x6874756F73646C6FLL && a2 == 0xEF6E616962617261;
                                                                                                                                                                    v170 = v169;
                                                                                                                                                                    v8 = 111;
                                                                                                                                                                    if ((result & 1) == 0 && !v170)
                                                                                                                                                                    {
                                                                                                                                                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                      if ((result & 1) != 0)
                                                                                                                                                                        goto LABEL_1236;
                                                                                                                                                                      if (a1 == 1920295283 && a2 == 0xE400000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x7468736172756173 && a2 == 0xEA00000000006172 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                      {
                                                                                                                                                                        v8 = 126;
                                                                                                                                                                        goto LABEL_9;
                                                                                                                                                                      }
                                                                                                                                                                      if (a1 == 2003724147 && a2 == 0xE400000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x746972776E676973 && a2 == 0xEB00000000676E69 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                      {
                                                                                                                                                                        v8 = -126;
                                                                                                                                                                        goto LABEL_9;
                                                                                                                                                                      }
                                                                                                                                                                      if (a1 == 2002872435 && a2 == 0xE400000000000000)
                                                                                                                                                                      {
LABEL_1262:
                                                                                                                                                                        v8 = 0x80;
                                                                                                                                                                        goto LABEL_9;
                                                                                                                                                                      }
                                                                                                                                                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                      v171 = a1 == 0x6E616976616873 && a2 == 0xE700000000000000;
                                                                                                                                                                      v172 = v171;
                                                                                                                                                                      v8 = 0x80;
                                                                                                                                                                      if ((result & 1) == 0 && !v172)
                                                                                                                                                                      {
                                                                                                                                                                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                        if ((result & 1) != 0)
                                                                                                                                                                          goto LABEL_1262;
                                                                                                                                                                        if (a1 == 1685219443 && a2 == 0xE400000000000000)
                                                                                                                                                                        {
LABEL_1274:
                                                                                                                                                                          v8 = 127;
                                                                                                                                                                          goto LABEL_9;
                                                                                                                                                                        }
                                                                                                                                                                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                        v173 = a1 == 0x61646172616873 && a2 == 0xE700000000000000;
                                                                                                                                                                        v174 = v173;
                                                                                                                                                                        v8 = 127;
                                                                                                                                                                        if ((result & 1) == 0 && !v174)
                                                                                                                                                                        {
                                                                                                                                                                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                          if ((result & 1) != 0)
                                                                                                                                                                            goto LABEL_1274;
                                                                                                                                                                          if (a1 == 1684302195 && a2 == 0xE400000000000000)
                                                                                                                                                                          {
LABEL_1286:
                                                                                                                                                                            v8 = -127;
                                                                                                                                                                            goto LABEL_9;
                                                                                                                                                                          }
                                                                                                                                                                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                          v175 = a1 == 0x6D616864646973 && a2 == 0xE700000000000000;
                                                                                                                                                                          v176 = v175;
                                                                                                                                                                          v8 = -127;
                                                                                                                                                                          if ((result & 1) == 0 && !v176)
                                                                                                                                                                          {
                                                                                                                                                                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                            if ((result & 1) != 0)
                                                                                                                                                                              goto LABEL_1286;
                                                                                                                                                                            result = 1684957555;
                                                                                                                                                                            if (a1 == 1684957555 && a2 == 0xE400000000000000)
                                                                                                                                                                            {
LABEL_1298:
                                                                                                                                                                              v8 = 68;
                                                                                                                                                                              goto LABEL_9;
                                                                                                                                                                            }
                                                                                                                                                                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                            v177 = a1 == 0x646177616475686BLL && a2 == 0xE900000000000069;
                                                                                                                                                                            v178 = v177;
                                                                                                                                                                            v8 = 68;
                                                                                                                                                                            if ((result & 1) == 0 && !v178)
                                                                                                                                                                            {
                                                                                                                                                                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                              if ((result & 1) != 0)
                                                                                                                                                                                goto LABEL_1298;
                                                                                                                                                                              if (a1 == 1752066419 && a2 == 0xE400000000000000)
                                                                                                                                                                              {
LABEL_1310:
                                                                                                                                                                                v8 = -125;
                                                                                                                                                                                goto LABEL_9;
                                                                                                                                                                              }
                                                                                                                                                                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                              v179 = a1 == 0x616C61686E6973 && a2 == 0xE700000000000000;
                                                                                                                                                                              v180 = v179;
                                                                                                                                                                              v8 = -125;
                                                                                                                                                                              if ((result & 1) == 0 && !v180)
                                                                                                                                                                              {
                                                                                                                                                                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                if ((result & 1) != 0)
                                                                                                                                                                                  goto LABEL_1310;
                                                                                                                                                                                if (a1 == 1684500339 && a2 == 0xE400000000000000)
                                                                                                                                                                                {
LABEL_1322:
                                                                                                                                                                                  v8 = -124;
                                                                                                                                                                                  goto LABEL_9;
                                                                                                                                                                                }
                                                                                                                                                                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                v181 = a1 == 0x6E616964676F73 && a2 == 0xE700000000000000;
                                                                                                                                                                                v182 = v181;
                                                                                                                                                                                v8 = -124;
                                                                                                                                                                                if ((result & 1) == 0 && !v182)
                                                                                                                                                                                {
                                                                                                                                                                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                  if ((result & 1) != 0)
                                                                                                                                                                                    goto LABEL_1322;
                                                                                                                                                                                  if (a1 == 1869049715 && a2 == 0xE400000000000000)
                                                                                                                                                                                  {
LABEL_1334:
                                                                                                                                                                                    v8 = 110;
                                                                                                                                                                                    goto LABEL_9;
                                                                                                                                                                                  }
                                                                                                                                                                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                  v183 = a1 == 0x6964676F73646C6FLL && a2 == 0xEA00000000006E61;
                                                                                                                                                                                  v184 = v183;
                                                                                                                                                                                  v8 = 110;
                                                                                                                                                                                  if ((result & 1) == 0 && !v184)
                                                                                                                                                                                  {
                                                                                                                                                                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                    if ((result & 1) != 0)
                                                                                                                                                                                      goto LABEL_1334;
                                                                                                                                                                                    result = 1634889587;
                                                                                                                                                                                    if (a1 == 1634889587 && a2 == 0xE400000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                    {
                                                                                                                                                                                      v8 = -123;
                                                                                                                                                                                      goto LABEL_9;
                                                                                                                                                                                    }
                                                                                                                                                                                    if (a1 == 0x706D6F7361726F73 && a2 == 0xEB00000000676E65 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                    {
                                                                                                                                                                                      v8 = -123;
                                                                                                                                                                                      goto LABEL_9;
                                                                                                                                                                                    }
                                                                                                                                                                                    if (a1 == 1870229363 && a2 == 0xE400000000000000)
                                                                                                                                                                                    {
LABEL_1354:
                                                                                                                                                                                      v8 = -122;
                                                                                                                                                                                      goto LABEL_9;
                                                                                                                                                                                    }
                                                                                                                                                                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                    v185 = a1 == 0x6F626D6F796F73 && a2 == 0xE700000000000000;
                                                                                                                                                                                    v186 = v185;
                                                                                                                                                                                    v8 = -122;
                                                                                                                                                                                    if ((result & 1) == 0 && !v186)
                                                                                                                                                                                    {
                                                                                                                                                                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                      if ((result & 1) != 0)
                                                                                                                                                                                        goto LABEL_1354;
                                                                                                                                                                                      if (a1 == 1684960627 && a2 == 0xE400000000000000)
                                                                                                                                                                                      {
LABEL_1366:
                                                                                                                                                                                        v8 = -121;
                                                                                                                                                                                        goto LABEL_9;
                                                                                                                                                                                      }
                                                                                                                                                                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                      v187 = a1 == 0x73656E61646E7573 && a2 == 0xE900000000000065;
                                                                                                                                                                                      v188 = v187;
                                                                                                                                                                                      v8 = -121;
                                                                                                                                                                                      if ((result & 1) == 0 && !v188)
                                                                                                                                                                                      {
                                                                                                                                                                                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                        if ((result & 1) != 0)
                                                                                                                                                                                          goto LABEL_1366;
                                                                                                                                                                                        if (a1 == 1869379955 && a2 == 0xE400000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x616E69746F6C7973 && a2 == 0xEB00000000697267 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                        {
                                                                                                                                                                                          v8 = -120;
                                                                                                                                                                                          goto LABEL_9;
                                                                                                                                                                                        }
                                                                                                                                                                                        if (a1 == 1668446579 && a2 == 0xE400000000000000)
                                                                                                                                                                                        {
LABEL_1385:
                                                                                                                                                                                          v8 = -119;
                                                                                                                                                                                          goto LABEL_9;
                                                                                                                                                                                        }
                                                                                                                                                                                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                        v189 = a1 == 0x636169727973 && a2 == 0xE600000000000000;
                                                                                                                                                                                        v190 = v189;
                                                                                                                                                                                        v8 = -119;
                                                                                                                                                                                        if ((result & 1) == 0 && !v190)
                                                                                                                                                                                        {
                                                                                                                                                                                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                          if ((result & 1) != 0)
                                                                                                                                                                                            goto LABEL_1385;
                                                                                                                                                                                          if (a1 == 1650942324 && a2 == 0xE400000000000000)
                                                                                                                                                                                          {
LABEL_1397:
                                                                                                                                                                                            v8 = -117;
                                                                                                                                                                                            goto LABEL_9;
                                                                                                                                                                                          }
                                                                                                                                                                                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                          v191 = a1 == 0x61776E6162676174 && a2 == 0xE800000000000000;
                                                                                                                                                                                          v192 = v191;
                                                                                                                                                                                          v8 = -117;
                                                                                                                                                                                          if ((result & 1) == 0 && !v192)
                                                                                                                                                                                          {
                                                                                                                                                                                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                            if ((result & 1) != 0)
                                                                                                                                                                                              goto LABEL_1397;
                                                                                                                                                                                            if (a1 == 1919639924 && a2 == 0xE400000000000000)
                                                                                                                                                                                            {
LABEL_1409:
                                                                                                                                                                                              v8 = -113;
                                                                                                                                                                                              goto LABEL_9;
                                                                                                                                                                                            }
                                                                                                                                                                                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                            v193 = a1 == 0x69726B6174 && a2 == 0xE500000000000000;
                                                                                                                                                                                            v194 = v193;
                                                                                                                                                                                            v8 = -113;
                                                                                                                                                                                            if ((result & 1) == 0 && !v194)
                                                                                                                                                                                            {
                                                                                                                                                                                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                              if ((result & 1) != 0)
                                                                                                                                                                                                goto LABEL_1409;
                                                                                                                                                                                              if (a1 == 1701601652 && a2 == 0xE400000000000000)
                                                                                                                                                                                              {
LABEL_1421:
                                                                                                                                                                                                v8 = -116;
                                                                                                                                                                                                goto LABEL_9;
                                                                                                                                                                                              }
                                                                                                                                                                                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                              v195 = a1 == 0x656C696174 && a2 == 0xE500000000000000;
                                                                                                                                                                                              v196 = v195;
                                                                                                                                                                                              v8 = -116;
                                                                                                                                                                                              if ((result & 1) == 0 && !v196)
                                                                                                                                                                                              {
                                                                                                                                                                                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                if ((result & 1) != 0)
                                                                                                                                                                                                  goto LABEL_1421;
                                                                                                                                                                                                if (a1 == 1970037108 && a2 == 0xE400000000000000)
                                                                                                                                                                                                {
LABEL_1433:
                                                                                                                                                                                                  v8 = 99;
                                                                                                                                                                                                  goto LABEL_9;
                                                                                                                                                                                                }
                                                                                                                                                                                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                v197 = a1 == 0x756C69617477656ELL && a2 == 0xE900000000000065;
                                                                                                                                                                                                v198 = v197;
                                                                                                                                                                                                v8 = 99;
                                                                                                                                                                                                if ((result & 1) == 0 && !v198)
                                                                                                                                                                                                {
                                                                                                                                                                                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                  if ((result & 1) != 0)
                                                                                                                                                                                                    goto LABEL_1433;
                                                                                                                                                                                                  if (a1 == 1819107700 && a2 == 0xE400000000000000)
                                                                                                                                                                                                  {
LABEL_1445:
                                                                                                                                                                                                    v8 = -112;
                                                                                                                                                                                                    goto LABEL_9;
                                                                                                                                                                                                  }
                                                                                                                                                                                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                  v199 = a1 == 0x6C696D6174 && a2 == 0xE500000000000000;
                                                                                                                                                                                                  v200 = v199;
                                                                                                                                                                                                  v8 = -112;
                                                                                                                                                                                                  if ((result & 1) == 0 && !v200)
                                                                                                                                                                                                  {
                                                                                                                                                                                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                    if ((result & 1) != 0)
                                                                                                                                                                                                      goto LABEL_1445;
                                                                                                                                                                                                    result = 1735287156;
                                                                                                                                                                                                    if (a1 == 1735287156 && a2 == 0xE400000000000000)
                                                                                                                                                                                                    {
LABEL_1457:
                                                                                                                                                                                                      v8 = -110;
                                                                                                                                                                                                      goto LABEL_9;
                                                                                                                                                                                                    }
                                                                                                                                                                                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                    v201 = a1 == 0x7475676E6174 && a2 == 0xE600000000000000;
                                                                                                                                                                                                    v202 = v201;
                                                                                                                                                                                                    v8 = -110;
                                                                                                                                                                                                    if ((result & 1) == 0 && !v202)
                                                                                                                                                                                                    {
                                                                                                                                                                                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                      if ((result & 1) != 0)
                                                                                                                                                                                                        goto LABEL_1457;
                                                                                                                                                                                                      if (a1 == 1953915252 && a2 == 0xE400000000000000)
                                                                                                                                                                                                      {
LABEL_1469:
                                                                                                                                                                                                        v8 = -114;
                                                                                                                                                                                                        goto LABEL_9;
                                                                                                                                                                                                      }
                                                                                                                                                                                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                      v203 = a1 == 0x74656976696174 && a2 == 0xE700000000000000;
                                                                                                                                                                                                      v204 = v203;
                                                                                                                                                                                                      v8 = -114;
                                                                                                                                                                                                      if ((result & 1) == 0 && !v204)
                                                                                                                                                                                                      {
                                                                                                                                                                                                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                        if ((result & 1) != 0)
                                                                                                                                                                                                          goto LABEL_1469;
                                                                                                                                                                                                        result = 1970038132;
                                                                                                                                                                                                        if (a1 == 1970038132 && a2 == 0xE400000000000000)
                                                                                                                                                                                                        {
LABEL_1481:
                                                                                                                                                                                                          v8 = -109;
                                                                                                                                                                                                          goto LABEL_9;
                                                                                                                                                                                                        }
                                                                                                                                                                                                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                        v205 = a1 == 0x7567756C6574 && a2 == 0xE600000000000000;
                                                                                                                                                                                                        v206 = v205;
                                                                                                                                                                                                        v8 = -109;
                                                                                                                                                                                                        if ((result & 1) == 0 && !v206)
                                                                                                                                                                                                        {
                                                                                                                                                                                                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                          if ((result & 1) != 0)
                                                                                                                                                                                                            goto LABEL_1481;
                                                                                                                                                                                                          result = 1735288436;
                                                                                                                                                                                                          if (a1 == 1735288436 && a2 == 0xE400000000000000)
                                                                                                                                                                                                          {
LABEL_1493:
                                                                                                                                                                                                            v8 = -105;
                                                                                                                                                                                                            goto LABEL_9;
                                                                                                                                                                                                          }
                                                                                                                                                                                                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                          v207 = a1 == 0x6867616E69666974 && a2 == 0xE800000000000000;
                                                                                                                                                                                                          v208 = v207;
                                                                                                                                                                                                          v8 = -105;
                                                                                                                                                                                                          if ((result & 1) == 0 && !v208)
                                                                                                                                                                                                          {
                                                                                                                                                                                                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                            if ((result & 1) != 0)
                                                                                                                                                                                                              goto LABEL_1493;
                                                                                                                                                                                                            if (a1 == 1735157620 && a2 == 0xE400000000000000)
                                                                                                                                                                                                            {
LABEL_1505:
                                                                                                                                                                                                              v8 = -118;
                                                                                                                                                                                                              goto LABEL_9;
                                                                                                                                                                                                            }
                                                                                                                                                                                                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                            v209 = a1 == 0x676F6C61676174 && a2 == 0xE700000000000000;
                                                                                                                                                                                                            v210 = v209;
                                                                                                                                                                                                            v8 = -118;
                                                                                                                                                                                                            if ((result & 1) == 0 && !v210)
                                                                                                                                                                                                            {
                                                                                                                                                                                                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                              if ((result & 1) != 0)
                                                                                                                                                                                                                goto LABEL_1505;
                                                                                                                                                                                                              if (a1 == 1633773684 && a2 == 0xE400000000000000)
                                                                                                                                                                                                              {
LABEL_1517:
                                                                                                                                                                                                                v8 = -108;
                                                                                                                                                                                                                goto LABEL_9;
                                                                                                                                                                                                              }
                                                                                                                                                                                                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                              v211 = a1 == 0x616E61616874 && a2 == 0xE600000000000000;
                                                                                                                                                                                                              v212 = v211;
                                                                                                                                                                                                              v8 = -108;
                                                                                                                                                                                                              if ((result & 1) == 0 && !v212)
                                                                                                                                                                                                              {
                                                                                                                                                                                                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                if ((result & 1) != 0)
                                                                                                                                                                                                                  goto LABEL_1517;
                                                                                                                                                                                                                result = 1767991412;
                                                                                                                                                                                                                if (a1 == 1767991412 && a2 == 0xE400000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                                {
                                                                                                                                                                                                                  v8 = -107;
                                                                                                                                                                                                                  goto LABEL_9;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                if (a1 == 1952606580 && a2 == 0xE400000000000000)
                                                                                                                                                                                                                {
LABEL_1533:
                                                                                                                                                                                                                  v8 = -106;
                                                                                                                                                                                                                  goto LABEL_9;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                v213 = a1 == 0x6E617465626974 && a2 == 0xE700000000000000;
                                                                                                                                                                                                                v214 = v213;
                                                                                                                                                                                                                v8 = -106;
                                                                                                                                                                                                                if ((result & 1) == 0 && !v214)
                                                                                                                                                                                                                {
                                                                                                                                                                                                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                  if ((result & 1) != 0)
                                                                                                                                                                                                                    goto LABEL_1533;
                                                                                                                                                                                                                  if (a1 == 1752328564 && a2 == 0xE400000000000000)
                                                                                                                                                                                                                  {
LABEL_1545:
                                                                                                                                                                                                                    v8 = -104;
                                                                                                                                                                                                                    goto LABEL_9;
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                  v215 = a1 == 0x61747568726974 && a2 == 0xE700000000000000;
                                                                                                                                                                                                                  v216 = v215;
                                                                                                                                                                                                                  v8 = -104;
                                                                                                                                                                                                                  if ((result & 1) == 0 && !v216)
                                                                                                                                                                                                                  {
                                                                                                                                                                                                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                    if ((result & 1) != 0)
                                                                                                                                                                                                                      goto LABEL_1545;
                                                                                                                                                                                                                    if (a1 == 1634954868 && a2 == 0xE400000000000000)
                                                                                                                                                                                                                    {
LABEL_1557:
                                                                                                                                                                                                                      v8 = -111;
                                                                                                                                                                                                                      goto LABEL_9;
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                    v217 = a1 == 0x6173676E6174 && a2 == 0xE600000000000000;
                                                                                                                                                                                                                    v218 = v217;
                                                                                                                                                                                                                    v8 = -111;
                                                                                                                                                                                                                    if ((result & 1) == 0 && !v218)
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                      if ((result & 1) != 0)
                                                                                                                                                                                                                        goto LABEL_1557;
                                                                                                                                                                                                                      if (a1 == 1869901684 && a2 == 0xE400000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                                      {
                                                                                                                                                                                                                        v8 = -103;
                                                                                                                                                                                                                        goto LABEL_9;
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                      if (a1 == 1918986101 && a2 == 0xE400000000000000)
                                                                                                                                                                                                                      {
LABEL_1573:
                                                                                                                                                                                                                        v8 = -102;
                                                                                                                                                                                                                        goto LABEL_9;
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                      v219 = a1 == 0x6369746972616775 && a2 == 0xE800000000000000;
                                                                                                                                                                                                                      v220 = v219;
                                                                                                                                                                                                                      v8 = -102;
                                                                                                                                                                                                                      if ((result & 1) == 0 && !v220)
                                                                                                                                                                                                                      {
                                                                                                                                                                                                                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                        if ((result & 1) != 0)
                                                                                                                                                                                                                          goto LABEL_1573;
                                                                                                                                                                                                                        if (a1 == 1768513910 && a2 == 0xE400000000000000)
                                                                                                                                                                                                                        {
LABEL_1585:
                                                                                                                                                                                                                          v8 = -100;
                                                                                                                                                                                                                          goto LABEL_9;
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                        v221 = a1 == 6906230 && a2 == 0xE300000000000000;
                                                                                                                                                                                                                        v222 = v221;
                                                                                                                                                                                                                        v8 = -100;
                                                                                                                                                                                                                        if ((result & 1) == 0 && !v222)
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                          if ((result & 1) != 0)
                                                                                                                                                                                                                            goto LABEL_1585;
                                                                                                                                                                                                                          if (a1 == 1752459638 && a2 == 0xE400000000000000)
                                                                                                                                                                                                                          {
LABEL_1597:
                                                                                                                                                                                                                            v8 = -99;
                                                                                                                                                                                                                            goto LABEL_9;
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                          v223 = a1 == 0x6971756B68746976 && a2 == 0xE800000000000000;
                                                                                                                                                                                                                          v224 = v223;
                                                                                                                                                                                                                          v8 = -99;
                                                                                                                                                                                                                          if ((result & 1) == 0 && !v224)
                                                                                                                                                                                                                          {
                                                                                                                                                                                                                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                            if ((result & 1) != 0)
                                                                                                                                                                                                                              goto LABEL_1597;
                                                                                                                                                                                                                            if (a1 == 1634886007 && a2 == 0xE400000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x6963676E61726177 && a2 == 0xEA00000000006974 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                                            {
                                                                                                                                                                                                                              v8 = -97;
                                                                                                                                                                                                                              goto LABEL_9;
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                            if (a1 == 1869112183 && a2 == 0xE400000000000000)
                                                                                                                                                                                                                            {
LABEL_1616:
                                                                                                                                                                                                                              v8 = -98;
                                                                                                                                                                                                                              goto LABEL_9;
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                            v225 = a1 == 0x6F68636E6177 && a2 == 0xE600000000000000;
                                                                                                                                                                                                                            v226 = v225;
                                                                                                                                                                                                                            v8 = -98;
                                                                                                                                                                                                                            if ((result & 1) == 0 && !v226)
                                                                                                                                                                                                                            {
                                                                                                                                                                                                                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                              if ((result & 1) != 0)
                                                                                                                                                                                                                                goto LABEL_1616;
                                                                                                                                                                                                                              if (a1 == 1868918904 && a2 == 0xE400000000000000)
                                                                                                                                                                                                                              {
LABEL_1628:
                                                                                                                                                                                                                                v8 = 109;
                                                                                                                                                                                                                                goto LABEL_9;
                                                                                                                                                                                                                              }
                                                                                                                                                                                                                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                              v227 = a1 == 0x6973726570646C6FLL && a2 == 0xEA00000000006E61;
                                                                                                                                                                                                                              v228 = v227;
                                                                                                                                                                                                                              v8 = 109;
                                                                                                                                                                                                                              if ((result & 1) == 0 && !v228)
                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                                if ((result & 1) != 0)
                                                                                                                                                                                                                                  goto LABEL_1628;
                                                                                                                                                                                                                                if (a1 == 2020963192 && a2 == 0xE400000000000000)
                                                                                                                                                                                                                                {
LABEL_1640:
                                                                                                                                                                                                                                  v8 = 26;
                                                                                                                                                                                                                                  goto LABEL_9;
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                                v229 = a1 == 0x726F6669656E7563 && a2 == 0xE90000000000006DLL;
                                                                                                                                                                                                                                v230 = v229;
                                                                                                                                                                                                                                v8 = 26;
                                                                                                                                                                                                                                if ((result & 1) == 0 && !v230)
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                                  if ((result & 1) != 0)
                                                                                                                                                                                                                                    goto LABEL_1640;
                                                                                                                                                                                                                                  if (a1 == 1769629049 && a2 == 0xE400000000000000)
                                                                                                                                                                                                                                  {
LABEL_1652:
                                                                                                                                                                                                                                    v8 = -96;
                                                                                                                                                                                                                                    goto LABEL_9;
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                                  v231 = a1 == 0x6964697A6579 && a2 == 0xE600000000000000;
                                                                                                                                                                                                                                  v232 = v231;
                                                                                                                                                                                                                                  v8 = -96;
                                                                                                                                                                                                                                  if ((result & 1) == 0 && !v232)
                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                                    if ((result & 1) != 0)
                                                                                                                                                                                                                                      goto LABEL_1652;
                                                                                                                                                                                                                                    result = 1768515961;
                                                                                                                                                                                                                                    if (a1 == 1768515961 && a2 == 0xE400000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 27001 && a2 == 0xE200000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                      v8 = -95;
                                                                                                                                                                                                                                      goto LABEL_9;
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                    if (a1 == 1651401082 && a2 == 0xE400000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x617A6162616E617ALL && a2 == 0xEF65726175717372 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                      v8 = -94;
                                                                                                                                                                                                                                      goto LABEL_9;
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                    result = 1752066426;
                                                                                                                                                                                                                                    if (a1 == 1752066426 && a2 == 0xE400000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || a1 == 0x6574697265686E69 && a2 == 0xE900000000000064)
                                                                                                                                                                                                                                    {
LABEL_1681:
                                                                                                                                                                                                                                      v8 = 55;
                                                                                                                                                                                                                                      goto LABEL_9;
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                                    v233 = a1 == 1767989617 && a2 == 0xE400000000000000;
                                                                                                                                                                                                                                    v234 = v233;
                                                                                                                                                                                                                                    v8 = 55;
                                                                                                                                                                                                                                    if ((result & 1) == 0 && !v234)
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                                      if ((result & 1) != 0)
                                                                                                                                                                                                                                        goto LABEL_1681;
                                                                                                                                                                                                                                      if (a1 == 2038004090 && a2 == 0xE400000000000000)
                                                                                                                                                                                                                                      {
LABEL_1693:
                                                                                                                                                                                                                                        v8 = 24;
                                                                                                                                                                                                                                        goto LABEL_9;
                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                                      v236 = a1 == 0x6E6F6D6D6F63 && a2 == 0xE600000000000000;
                                                                                                                                                                                                                                      v8 = 24;
                                                                                                                                                                                                                                      if ((result & 1) == 0 && !v236)
                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                                        if ((result & 1) != 0)
                                                                                                                                                                                                                                          goto LABEL_1693;
                                                                                                                                                                                                                                        if (a1 == 2054847098 && a2 == 0xE400000000000000)
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                          v8 = -101;
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                                          v238 = a1 == 0x6E776F6E6B6E75 && a2 == 0xE700000000000000;
                                                                                                                                                                                                                                          v8 = -101;
                                                                                                                                                                                                                                          if ((result & 1) == 0 && !v238)
                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                                            if ((result & 1) != 0)
                                                                                                                                                                                                                                              v8 = -101;
                                                                                                                                                                                                                                            else
                                                                                                                                                                                                                                              v8 = -93;
                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                              }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                }
                                                                                                                                                                                                              }
                                                                                                                                                                                                            }
                                                                                                                                                                                                          }
                                                                                                                                                                                                        }
                                                                                                                                                                                                      }
                                                                                                                                                                                                    }
                                                                                                                                                                                                  }
                                                                                                                                                                                                }
                                                                                                                                                                                              }
                                                                                                                                                                                            }
                                                                                                                                                                                          }
                                                                                                                                                                                        }
                                                                                                                                                                                      }
                                                                                                                                                                                    }
                                                                                                                                                                                  }
                                                                                                                                                                                }
                                                                                                                                                                              }
                                                                                                                                                                            }
                                                                                                                                                                          }
                                                                                                                                                                        }
                                                                                                                                                                      }
                                                                                                                                                                    }
                                                                                                                                                                  }
                                                                                                                                                                }
                                                                                                                                                              }
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_9:
  *a3 = v8;
  return result;
}

uint64_t closure #1 in static Parser.classifyBlockProperty(_:valueOnly:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, __int16 *a3@<X8>)
{
  uint64_t v4;
  __int16 v6;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  BOOL v37;
  BOOL v38;
  BOOL v39;
  BOOL v40;
  BOOL v41;
  BOOL v42;
  BOOL v43;
  BOOL v44;
  BOOL v45;
  BOOL v46;
  BOOL v47;
  BOOL v48;
  BOOL v49;
  BOOL v50;
  BOOL v51;
  BOOL v52;
  BOOL v53;
  BOOL v54;
  BOOL v55;
  BOOL v56;
  BOOL v57;
  BOOL v58;
  BOOL v59;
  BOOL v60;
  BOOL v61;
  BOOL v62;
  BOOL v63;
  BOOL v64;
  BOOL v65;
  BOOL v66;
  BOOL v67;
  BOOL v68;
  BOOL v69;
  BOOL v70;
  BOOL v71;
  BOOL v72;
  BOOL v73;
  BOOL v74;
  BOOL v75;
  BOOL v76;
  BOOL v77;
  BOOL v78;
  BOOL v79;
  BOOL v80;
  BOOL v81;
  BOOL v82;
  BOOL v83;
  BOOL v84;
  BOOL v85;
  BOOL v86;
  BOOL v87;
  BOOL v88;
  BOOL v89;
  BOOL v90;
  BOOL v91;
  BOOL v92;
  BOOL v93;
  BOOL v94;
  BOOL v95;
  BOOL v96;
  BOOL v97;
  BOOL v98;
  BOOL v99;
  BOOL v100;
  BOOL v101;
  BOOL v102;
  BOOL v103;
  BOOL v104;
  BOOL v105;
  BOOL v106;
  BOOL v107;
  BOOL v108;
  BOOL v109;
  BOOL v110;
  BOOL v111;
  BOOL v112;
  BOOL v113;
  BOOL v114;
  BOOL v115;
  BOOL v116;
  BOOL v117;
  BOOL v118;
  BOOL v119;
  BOOL v120;
  BOOL v121;
  BOOL v122;
  BOOL v123;
  BOOL v124;
  BOOL v125;
  BOOL v126;
  BOOL v127;
  BOOL v128;
  BOOL v129;
  BOOL v130;
  BOOL v131;
  BOOL v132;
  BOOL v133;
  BOOL v134;
  BOOL v135;
  BOOL v136;
  BOOL v137;
  BOOL v138;
  BOOL v139;
  BOOL v140;
  BOOL v141;
  BOOL v142;
  BOOL v143;
  BOOL v144;
  BOOL v145;
  BOOL v146;
  BOOL v147;
  BOOL v148;
  BOOL v149;
  BOOL v150;
  BOOL v151;
  BOOL v152;
  BOOL v153;
  BOOL v154;
  BOOL v155;
  BOOL v156;
  BOOL v157;
  BOOL v158;
  BOOL v159;
  BOOL v160;
  BOOL v161;
  BOOL v162;
  BOOL v163;
  BOOL v164;
  BOOL v165;
  BOOL v166;
  BOOL v167;
  BOOL v168;
  BOOL v169;
  BOOL v170;
  BOOL v171;
  BOOL v172;
  BOOL v173;
  BOOL v174;
  BOOL v175;
  BOOL v176;
  BOOL v177;
  BOOL v178;
  BOOL v179;
  BOOL v180;
  BOOL v181;
  BOOL v182;
  BOOL v183;
  BOOL v184;
  BOOL v185;
  BOOL v186;
  BOOL v187;
  BOOL v188;
  BOOL v189;
  BOOL v190;
  BOOL v191;
  BOOL v192;
  BOOL v193;
  BOOL v194;
  BOOL v195;
  BOOL v196;
  BOOL v197;
  BOOL v198;
  BOOL v199;
  BOOL v200;
  BOOL v201;
  BOOL v202;
  BOOL v203;
  BOOL v204;
  BOOL v205;
  BOOL v206;
  BOOL v207;
  BOOL v208;
  BOOL v209;
  BOOL v210;
  BOOL v211;
  BOOL v212;
  BOOL v214;
  BOOL v216;

  v4 = result;
  if (result == 0x6D616C6461 && a2 == 0xE500000000000000
    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    v6 = 289;
    goto LABEL_5;
  }
  if (v4 == 0x756E6E6165676561 && a2 == 0xED0000737265626DLL
    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    v6 = 166;
    goto LABEL_5;
  }
  if (v4 == 1836017761 && a2 == 0xE400000000000000
    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    v6 = 231;
    goto LABEL_5;
  }
  if (v4 == 0x63696D6568636C61 && a2 == 0xEA00000000006C61
    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
    || v4 == 0xD000000000000011 && a2 == 0x80000001DF0077F0
    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    v6 = 302;
    goto LABEL_5;
  }
  if (v4 == 0x7465626168706C61 && a2 == 0xEC00000066706369
    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
    || v4 == 0xD00000000000001BLL && a2 == 0x80000001DF007810
    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    v6 = 154;
    goto LABEL_5;
  }
  if (v4 == 0xD000000000000014 && a2 == 0x80000001DF007650
    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    v6 = 253;
    goto LABEL_5;
  }
  if (v4 == 0xD000000000000011 && a2 == 0x80000001DF007830)
  {
LABEL_34:
    v6 = 276;
    goto LABEL_5;
  }
  result = _stringCompareWithSmolCheck(_:_:expecting:)();
  v8 = v4 == 0xD00000000000001BLL && a2 == 0x80000001DF007850;
  v6 = 276;
  if ((result & 1) == 0 && !v8)
  {
    result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if ((result & 1) != 0)
      goto LABEL_34;
    if (v4 == 0xD000000000000013 && a2 == 0x80000001DF007870
      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      v6 = 167;
      goto LABEL_5;
    }
    if (v4 == 0x73746E6569636E61 && a2 == 0xEE00736C6F626D79
      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      v6 = 168;
      goto LABEL_5;
    }
    if (v4 == 0x636962617261 && a2 == 0xE600000000000000
      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      v6 = 12;
      goto LABEL_5;
    }
    if (v4 == 0x7865636962617261 && a2 == 0xEA00000000006174)
    {
LABEL_58:
      v6 = 21;
      goto LABEL_5;
    }
    result = _stringCompareWithSmolCheck(_:_:expecting:)();
    v9 = v4 == 0x7865636962617261 && a2 == 0xEF616465646E6574;
    v10 = v9;
    v6 = 21;
    if ((result & 1) == 0 && !v10)
    {
      result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) != 0)
        goto LABEL_58;
      if (v4 == 0x7865636962617261 && a2 == 0xEA00000000006274)
      {
LABEL_70:
        v6 = 20;
        goto LABEL_5;
      }
      result = _stringCompareWithSmolCheck(_:_:expecting:)();
      v11 = v4 == 0x7865636962617261 && a2 == 0xEF626465646E6574;
      v12 = v11;
      v6 = 20;
      if ((result & 1) == 0 && !v12)
      {
        result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) != 0)
          goto LABEL_70;
        if (v4 == 0x616D636962617261 && a2 == 0xEA00000000006874
          || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
          || v4 == 0xD000000000000023 && a2 == 0x80000001DF007890
          || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
        {
          v6 = 292;
          goto LABEL_5;
        }
        if (v4 == 0x6670636962617261 && a2 == 0xE900000000000061
          || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
          || v4 == 0xD000000000000018 && a2 == 0x80000001DF0078C0
          || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
        {
          v6 = 155;
          goto LABEL_5;
        }
        if (v4 == 0x6670636962617261 && a2 == 0xE900000000000062)
        {
LABEL_105:
          v6 = 161;
          goto LABEL_5;
        }
        result = _stringCompareWithSmolCheck(_:_:expecting:)();
        v13 = v4 == 0xD000000000000018 && a2 == 0x80000001DF0078E0;
        v14 = v13;
        v6 = 161;
        if ((result & 1) == 0 && !v14)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) != 0)
            goto LABEL_105;
          if (v4 == 0x7573636962617261 && a2 == 0xE900000000000070
            || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
            || v4 == 0xD000000000000010 && a2 == 0x80000001DF007900
            || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
            v6 = 14;
            goto LABEL_5;
          }
          if (v4 == 0x6E61696E656D7261 && a2 == 0xE800000000000000
            || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
            v6 = 10;
            goto LABEL_5;
          }
          if (v4 == 0x73776F727261 && a2 == 0xE600000000000000
            || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
            v6 = 78;
            goto LABEL_5;
          }
          if (v4 == 0x6969637361 && a2 == 0xE500000000000000)
            goto LABEL_123;
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          v6 = 0;
          if ((result & 1) != 0)
            goto LABEL_5;
          if (v4 == 0x74616C6369736162 && a2 == 0xEA00000000006E69)
          {
LABEL_123:
            v6 = 0;
            goto LABEL_5;
          }
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          v6 = 0;
          if ((result & 1) != 0)
            goto LABEL_5;
          if (v4 == 0x6E617473657661 && a2 == 0xE700000000000000
            || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
            v6 = 200;
            goto LABEL_5;
          }
          if (v4 == 0x6573656E696C6162 && a2 == 0xE800000000000000
            || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
            v6 = 58;
            goto LABEL_5;
          }
          if (v4 == 0x6D756D6162 && a2 == 0xE500000000000000
            || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
            v6 = 126;
            goto LABEL_5;
          }
          if (v4 == 0x7075736D756D6162 && a2 == 0xE800000000000000
            || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
            || v4 == 0x7075736D756D6162 && a2 == 0xEF746E656D656C70
            || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
            v6 = 254;
            goto LABEL_5;
          }
          if (v4 == 0x6861766173736162 && a2 == 0xE800000000000000
            || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
            v6 = 257;
            goto LABEL_5;
          }
          if (v4 == 0x6B61746162 && a2 == 0xE500000000000000
            || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
            v6 = 60;
            goto LABEL_5;
          }
          if (v4 == 0x696C61676E6562 && a2 == 0xE700000000000000
            || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
            v6 = 23;
            goto LABEL_5;
          }
          if (v4 == 0x6B75736B69616862 && a2 == 0xE900000000000069
            || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
            v6 = 240;
            goto LABEL_5;
          }
          if (v4 == 0x656C656B636F6C62 && a2 == 0xED000073746E656DLL
            || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
            v6 = 85;
            goto LABEL_5;
          }
          if (v4 == 0x6F666F6D6F706F62 && a2 == 0xE800000000000000
            || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
            v6 = 110;
            goto LABEL_5;
          }
          if (v4 == 0x6F666F6D6F706F62 && a2 == 0xEB00000000747865)
          {
LABEL_182:
            v6 = 113;
            goto LABEL_5;
          }
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          v15 = v4 == 0xD000000000000010 && a2 == 0x80000001DF007920;
          v16 = v15;
          v6 = 113;
          if ((result & 1) == 0 && !v16)
          {
            result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) != 0)
              goto LABEL_182;
            if (v4 == 0x6977617264786F62 && a2 == 0xEA0000000000676ELL
              || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              v6 = 84;
              goto LABEL_5;
            }
            if (v4 == 0x696D68617262 && a2 == 0xE600000000000000
              || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              v6 = 214;
              goto LABEL_5;
            }
            if (v4 == 0x656C6C69617262 && a2 == 0xE700000000000000
              || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
              || v4 == 0x70656C6C69617262 && a2 == 0xEF736E7265747461
              || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              v6 = 91;
              goto LABEL_5;
            }
            if (v4 == 0x6573656E69677562 && a2 == 0xE800000000000000
              || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              v6 = 55;
              goto LABEL_5;
            }
            if (v4 == 0x6469687562 && a2 == 0xE500000000000000
              || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              v6 = 46;
              goto LABEL_5;
            }
            if (v4 == 0x6E69746E617A7962 && a2 == 0xEE00636973756D65
              || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
              || v4 == 0xD000000000000017 && a2 == 0x80000001DF007940
              || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              v6 = 274;
              goto LABEL_5;
            }
            if (v4 == 0x6E6169726163 && a2 == 0xE600000000000000
              || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              v6 = 171;
              goto LABEL_5;
            }
            if (v4 == 0xD000000000000011 && a2 == 0x80000001DF0075F0
              || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              v6 = 183;
              goto LABEL_5;
            }
            if (v4 == 0x616D6B616863 && a2 == 0xE600000000000000
              || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              v6 = 217;
              goto LABEL_5;
            }
            if (v4 == 1835100259 && a2 == 0xE400000000000000
              || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              v6 = 139;
              goto LABEL_5;
            }
            if (v4 == 0x65656B6F72656863 && a2 == 0xE800000000000000
              || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              v6 = 40;
              goto LABEL_5;
            }
            if (v4 == 0x65656B6F72656863 && a2 == 0xEB00000000707573
              || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
              || v4 == 0xD000000000000012 && a2 == 0x80000001DF007960
              || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              v6 = 145;
              goto LABEL_5;
            }
            if (v4 == 0x6D79737373656863 && a2 == 0xEC000000736C6F62
              || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              v6 = 306;
              goto LABEL_5;
            }
            if (v4 == 0x696D7361726F6863 && a2 == 0xEA00000000006E61
              || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              v6 = 212;
              goto LABEL_5;
            }
            if (v4 == 7039587 && a2 == 0xE300000000000000)
            {
LABEL_259:
              v6 = 120;
              goto LABEL_5;
            }
            result = _stringCompareWithSmolCheck(_:_:expecting:)();
            v17 = v4 == 0xD000000000000014 && a2 == 0x80000001DF007980;
            v18 = v17;
            v6 = 120;
            if ((result & 1) == 0 && !v18)
            {
              result = _stringCompareWithSmolCheck(_:_:expecting:)();
              if ((result & 1) != 0)
                goto LABEL_259;
              if (v4 == 0x61706D6F636B6A63 && a2 == 0xE900000000000074)
              {
LABEL_271:
                v6 = 117;
                goto LABEL_5;
              }
              result = _stringCompareWithSmolCheck(_:_:expecting:)();
              v19 = v4 == 0xD000000000000010 && a2 == 0x80000001DF0079A0;
              v20 = v19;
              v6 = 117;
              if ((result & 1) == 0 && !v20)
              {
                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                if ((result & 1) != 0)
                  goto LABEL_271;
                if (v4 == 0x61706D6F636B6A63 && a2 == 0xEE00736D726F6674
                  || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                  || v4 == 0xD000000000000015 && a2 == 0x80000001DF0079C0
                  || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                {
                  v6 = 159;
                  goto LABEL_5;
                }
                if (v4 == 0xD000000000000013 && a2 == 0x80000001DF0079E0
                  || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                  || v4 == 0xD00000000000001ALL && a2 == 0x80000001DF007A00
                  || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                {
                  v6 = 153;
                  goto LABEL_5;
                }
                if (v4 == 0xD000000000000016 && a2 == 0x80000001DF007A20
                  || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                  || (result = 0xD000000000000024, v4 == 0xD000000000000024) && a2 == 0x80000001DF007A40
                  || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                {
                  v6 = 314;
                  goto LABEL_5;
                }
                if (v4 == 0x617478656B6A63 && a2 == 0xE700000000000000
                  || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)
                  || v4 == 0xD00000000000001ELL && a2 == 0x80000001DF007A70
                  || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                {
                  v6 = 118;
                  goto LABEL_5;
                }
                if (v4 == 0x627478656B6A63 && a2 == 0xE700000000000000)
                {
LABEL_311:
                  v6 = 309;
                  goto LABEL_5;
                }
                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                v21 = v4 == 0xD00000000000001ELL && a2 == 0x80000001DF007A90;
                v22 = v21;
                v6 = 309;
                if ((result & 1) == 0 && !v22)
                {
                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                  if ((result & 1) != 0)
                    goto LABEL_311;
                  if (v4 == 0x637478656B6A63 && a2 == 0xE700000000000000)
                  {
LABEL_323:
                    v6 = 310;
                    goto LABEL_5;
                  }
                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                  v23 = v4 == 0xD00000000000001ELL && a2 == 0x80000001DF007AB0;
                  v24 = v23;
                  v6 = 310;
                  if ((result & 1) == 0 && !v24)
                  {
                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                    if ((result & 1) != 0)
                      goto LABEL_323;
                    if (v4 == 0x647478656B6A63 && a2 == 0xE700000000000000)
                    {
LABEL_335:
                      v6 = 311;
                      goto LABEL_5;
                    }
                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                    v25 = v4 == 0xD00000000000001ELL && a2 == 0x80000001DF007AD0;
                    v26 = v25;
                    v6 = 311;
                    if ((result & 1) == 0 && !v26)
                    {
                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                      if ((result & 1) != 0)
                        goto LABEL_335;
                      if (v4 == 0x657478656B6A63 && a2 == 0xE700000000000000)
                      {
LABEL_347:
                        v6 = 312;
                        goto LABEL_5;
                      }
                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                      v27 = v4 == 0xD00000000000001ELL && a2 == 0x80000001DF007AF0;
                      v28 = v27;
                      v6 = 312;
                      if ((result & 1) == 0 && !v28)
                      {
                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                        if ((result & 1) != 0)
                          goto LABEL_347;
                        if (v4 == 0x667478656B6A63 && a2 == 0xE700000000000000)
                        {
LABEL_359:
                          v6 = 313;
                          goto LABEL_5;
                        }
                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                        v29 = v4 == 0xD00000000000001ELL && a2 == 0x80000001DF007B10;
                        v30 = v29;
                        v6 = 313;
                        if ((result & 1) == 0 && !v30)
                        {
                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                          if ((result & 1) != 0)
                            goto LABEL_359;
                          if (v4 == 0x677478656B6A63 && a2 == 0xE700000000000000)
                          {
LABEL_371:
                            v6 = 315;
                            goto LABEL_5;
                          }
                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                          v31 = v4 == 0xD00000000000001ELL && a2 == 0x80000001DF007B30;
                          v32 = v31;
                          v6 = 315;
                          if ((result & 1) == 0 && !v32)
                          {
                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                            if ((result & 1) != 0)
                              goto LABEL_371;
                            if (v4 == 0x63696461726B6A63 && a2 == 0xEE00707573736C61)
                            {
LABEL_383:
                              v6 = 104;
                              goto LABEL_5;
                            }
                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                            v33 = v4 == 0xD000000000000015 && a2 == 0x80000001DF007B50;
                            v34 = v33;
                            v6 = 104;
                            if ((result & 1) == 0 && !v34)
                            {
                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                              if ((result & 1) != 0)
                                goto LABEL_383;
                              if (v4 == 0x6B6F7274736B6A63 && a2 == 0xEA00000000007365
                                || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                              {
                                v6 = 114;
                                goto LABEL_5;
                              }
                              if (v4 == 0x6F626D79736B6A63 && a2 == 0xEA0000000000736CLL)
                              {
LABEL_399:
                                v6 = 107;
                                goto LABEL_5;
                              }
                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                              v35 = v4 == 0xD000000000000018 && a2 == 0x80000001DF007B70;
                              v36 = v35;
                              v6 = 107;
                              if ((result & 1) == 0 && !v36)
                              {
                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                if ((result & 1) != 0)
                                  goto LABEL_399;
                                if (v4 == 0x616A7461706D6F63 && a2 == 0xEA00000000006F6DLL)
                                {
LABEL_411:
                                  v6 = 111;
                                  goto LABEL_5;
                                }
                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                v37 = v4 == 0xD000000000000017 && a2 == 0x80000001DF007B90;
                                v38 = v37;
                                v6 = 111;
                                if ((result & 1) == 0 && !v38)
                                {
                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                  if ((result & 1) != 0)
                                    goto LABEL_411;
                                  if (v4 == 0x706C6F72746E6F63 && a2 == 0xEF73657275746369
                                    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                  {
                                    v6 = 81;
                                    goto LABEL_5;
                                  }
                                  if (v4 == 0x636974706F63 && a2 == 0xE600000000000000
                                    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                  {
                                    v6 = 98;
                                    goto LABEL_5;
                                  }
                                  if (v4 == 0xD000000000000012 && a2 == 0x80000001DF007BB0
                                    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                  {
                                    v6 = 172;
                                    goto LABEL_5;
                                  }
                                  if (v4 == 0x676E69746E756F63 && a2 == 0xEB00000000646F72)
                                  {
LABEL_435:
                                    v6 = 279;
                                    goto LABEL_5;
                                  }
                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                  v39 = v4 == 0xD000000000000013 && a2 == 0x80000001DF007BD0;
                                  v40 = v39;
                                  v6 = 279;
                                  if ((result & 1) == 0 && !v40)
                                  {
                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                    if ((result & 1) != 0)
                                      goto LABEL_435;
                                    if (v4 == 0x726F6669656E7563 && a2 == 0xE90000000000006DLL
                                      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                    {
                                      v6 = 247;
                                      goto LABEL_5;
                                    }
                                    if (v4 == 0xD000000000000010 && a2 == 0x80000001DF007BF0)
                                    {
LABEL_451:
                                      v6 = 248;
                                      goto LABEL_5;
                                    }
                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                    v41 = v4 == 0xD00000000000001ELL && a2 == 0x80000001DF007C10;
                                    v42 = v41;
                                    v6 = 248;
                                    if ((result & 1) == 0 && !v42)
                                    {
                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                      if ((result & 1) != 0)
                                        goto LABEL_451;
                                      if (v4 == 0x79636E6572727563 && a2 == 0xEF736C6F626D7973
                                        || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                      {
                                        v6 = 74;
                                        goto LABEL_5;
                                      }
                                      if (v4 == 0xD000000000000010 && a2 == 0x80000001DF007C30
                                        || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                      {
                                        v6 = 187;
                                        goto LABEL_5;
                                      }
                                      if (v4 == 0x6E696D6F72707963 && a2 == 0xEB000000006E616FLL
                                        || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                      {
                                        v6 = 250;
                                        goto LABEL_5;
                                      }
                                      if (v4 == 0x63696C6C69727963 && a2 == 0xE800000000000000
                                        || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                      {
                                        v6 = 8;
                                        goto LABEL_5;
                                      }
                                      if (v4 == 0x63696C6C69727963 && a2 == 0xEC00000061747865)
                                      {
LABEL_479:
                                        v6 = 102;
                                        goto LABEL_5;
                                      }
                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                      v43 = v4 == 0xD000000000000011 && a2 == 0x80000001DF007C50;
                                      v44 = v43;
                                      v6 = 102;
                                      if ((result & 1) == 0 && !v44)
                                      {
                                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                        if ((result & 1) != 0)
                                          goto LABEL_479;
                                        if (v4 == 0x63696C6C69727963 && a2 == 0xEC00000062747865)
                                        {
LABEL_491:
                                          v6 = 125;
                                          goto LABEL_5;
                                        }
                                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                        v45 = v4 == 0xD000000000000011 && a2 == 0x80000001DF007C70;
                                        v46 = v45;
                                        v6 = 125;
                                        if ((result & 1) == 0 && !v46)
                                        {
                                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                          if ((result & 1) != 0)
                                            goto LABEL_491;
                                          if (v4 == 0x63696C6C69727963 && a2 == 0xEC00000063747865)
                                          {
LABEL_503:
                                            v6 = 63;
                                            goto LABEL_5;
                                          }
                                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                          v47 = v4 == 0xD000000000000011 && a2 == 0x80000001DF007C90;
                                          v48 = v47;
                                          v6 = 63;
                                          if ((result & 1) == 0 && !v48)
                                          {
                                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                            if ((result & 1) != 0)
                                              goto LABEL_503;
                                            if (v4 == 0x63696C6C69727963 && a2 == 0xEB00000000707573)
                                            {
LABEL_523:
                                              v6 = 9;
                                              goto LABEL_5;
                                            }
                                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                            v49 = v4 == 0xD000000000000012 && a2 == 0x80000001DF007CB0;
                                            v50 = v49;
                                            v6 = 9;
                                            if ((result & 1) == 0 && !v50)
                                            {
                                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                              v51 = v4 == 0xD000000000000015 && a2 == 0x80000001DF007CD0;
                                              v52 = v51;
                                              v6 = 9;
                                              if ((result & 1) == 0 && !v52)
                                              {
                                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                if ((result & 1) != 0)
                                                  goto LABEL_523;
                                                if (v4 == 0x74657265736564 && a2 == 0xE700000000000000
                                                  || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                      (result & 1) != 0))
                                                {
                                                  v6 = 178;
                                                  goto LABEL_5;
                                                }
                                                if (v4 == 0x6167616E61766564 && a2 == 0xEA00000000006972
                                                  || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                      (result & 1) != 0))
                                                {
                                                  v6 = 22;
                                                  goto LABEL_5;
                                                }
                                                if (v4 == 0x6167616E61766564 && a2 == 0xED00007478656972)
                                                {
LABEL_543:
                                                  v6 = 133;
                                                  goto LABEL_5;
                                                }
                                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                v53 = v4 == 0xD000000000000012 && a2 == 0x80000001DF007CF0;
                                                v54 = v53;
                                                v6 = 133;
                                                if ((result & 1) == 0 && !v54)
                                                {
                                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                  if ((result & 1) != 0)
                                                    goto LABEL_543;
                                                  if (v4 == 0x6974697263616964 && a2 == 0xEC000000736C6163
                                                    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                        (result & 1) != 0)
                                                    || v4 == 0xD000000000000019 && a2 == 0x80000001DF007D10
                                                    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                        (result & 1) != 0))
                                                  {
                                                    v6 = 6;
                                                    goto LABEL_5;
                                                  }
                                                  if (v4 == 0x6974697263616964 && a2 == 0xEF747865736C6163
                                                    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                        (result & 1) != 0)
                                                    || v4 == 0xD000000000000021 && a2 == 0x80000001DF007D30
                                                    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                        (result & 1) != 0))
                                                  {
                                                    v6 = 57;
                                                    goto LABEL_5;
                                                  }
                                                  if (v4 == 0xD000000000000016 && a2 == 0x80000001DF007D60)
                                                  {
LABEL_577:
                                                    v6 = 75;
                                                    goto LABEL_5;
                                                  }
                                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                  v55 = v4 == 0xD000000000000023 && a2 == 0x80000001DF007D80;
                                                  v56 = v55;
                                                  v6 = 75;
                                                  if ((result & 1) == 0 && !v56)
                                                  {
                                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                    v57 = v4 == 0xD000000000000018 && a2 == 0x80000001DF007DB0;
                                                    v58 = v57;
                                                    v6 = 75;
                                                    if ((result & 1) == 0 && !v58)
                                                    {
                                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                      if ((result & 1) != 0)
                                                        goto LABEL_577;
                                                      if (v4 == 0x6974697263616964 && a2 == 0xEF707573736C6163)
                                                      {
LABEL_589:
                                                        v6 = 69;
                                                        goto LABEL_5;
                                                      }
                                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                      v59 = v4 == 0xD000000000000023 && a2 == 0x80000001DF007DD0;
                                                      v60 = v59;
                                                      v6 = 69;
                                                      if ((result & 1) == 0 && !v60)
                                                      {
                                                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                        if ((result & 1) != 0)
                                                          goto LABEL_589;
                                                        if (v4 == 0x73746162676E6964 && a2 == 0xE800000000000000
                                                          || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                              (result & 1) != 0))
                                                        {
                                                          v6 = 88;
                                                          goto LABEL_5;
                                                        }
                                                        if (v4 == 0x756B617365766964 && a2 == 0xEA00000000007572
                                                          || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                              (result & 1) != 0))
                                                        {
                                                          v6 = 234;
                                                          goto LABEL_5;
                                                        }
                                                        if (v4 == 0x6172676F64 && a2 == 0xE500000000000000
                                                          || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                              (result & 1) != 0))
                                                        {
                                                          v6 = 232;
                                                          goto LABEL_5;
                                                        }
                                                        if (v4 == 0x6F6E696D6F64 && a2 == 0xE600000000000000
                                                          || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                              (result & 1) != 0)
                                                          || v4 == 0x69746F6E696D6F64 && a2 == 0xEB0000000073656CLL
                                                          || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                              (result & 1) != 0))
                                                        {
                                                          v6 = 294;
                                                          goto LABEL_5;
                                                        }
                                                        if (v4 == 0x6E61796F6C707564 && a2 == 0xE800000000000000
                                                          || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                              (result & 1) != 0))
                                                        {
                                                          v6 = 271;
                                                          goto LABEL_5;
                                                        }
                                                        if (v4 == 0xD000000000000016 && a2 == 0x80000001DF007E00
                                                          || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                              (result & 1) != 0))
                                                        {
                                                          v6 = 249;
                                                          goto LABEL_5;
                                                        }
                                                        if (v4 == 0xD000000000000020 && a2 == 0x80000001DF007E20
                                                          || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                              (result & 1) != 0))
                                                        {
                                                          v6 = 252;
                                                          goto LABEL_5;
                                                        }
                                                        if (v4 == 0xD000000000000013 && a2 == 0x80000001DF007630
                                                          || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                              (result & 1) != 0))
                                                        {
                                                          v6 = 251;
                                                          goto LABEL_5;
                                                        }
                                                        if (v4 == 0x6E617361626C65 && a2 == 0xE700000000000000
                                                          || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                              (result & 1) != 0))
                                                        {
                                                          v6 = 182;
                                                          goto LABEL_5;
                                                        }
                                                        if (v4 == 0x6369616D796C65 && a2 == 0xE700000000000000
                                                          || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                              (result & 1) != 0))
                                                        {
                                                          v6 = 213;
                                                          goto LABEL_5;
                                                        }
                                                        if (v4 == 0x6E6F6369746F6D65 && a2 == 0xE900000000000073
                                                          || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                              (result & 1) != 0))
                                                        {
                                                          v6 = 299;
                                                          goto LABEL_5;
                                                        }
                                                        if (v4 == 0xD000000000000010 && a2 == 0x80000001DF007E50)
                                                        {
LABEL_648:
                                                          v6 = 83;
                                                          goto LABEL_5;
                                                        }
                                                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                        v61 = v4 == 0xD000000000000015 && a2 == 0x80000001DF007E70;
                                                        v62 = v61;
                                                        v6 = 83;
                                                        if ((result & 1) == 0 && !v62)
                                                        {
                                                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                          if ((result & 1) != 0)
                                                            goto LABEL_648;
                                                          if (v4 == 0xD000000000000013 && a2 == 0x80000001DF007E90)
                                                          {
LABEL_660:
                                                            v6 = 296;
                                                            goto LABEL_5;
                                                          }
                                                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                          v63 = v4 == 0xD00000000000001ELL && a2 == 0x80000001DF007EB0;
                                                          v64 = v63;
                                                          v6 = 296;
                                                          if ((result & 1) == 0 && !v64)
                                                          {
                                                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                            if ((result & 1) != 0)
                                                              goto LABEL_660;
                                                            if (v4 == 0x6465736F6C636E65
                                                              && a2 == 0xEB000000006B6A63)
                                                            {
LABEL_672:
                                                              v6 = 116;
                                                              goto LABEL_5;
                                                            }
                                                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                            v65 = v4 == 0xD00000000000001BLL
                                                               && a2 == 0x80000001DF007ED0;
                                                            v66 = v65;
                                                            v6 = 116;
                                                            if ((result & 1) == 0 && !v66)
                                                            {
                                                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                              if ((result & 1) != 0)
                                                                goto LABEL_672;
                                                              if (v4 == 0xD000000000000016
                                                                && a2 == 0x80000001DF007EF0
                                                                || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                    (result & 1) != 0)
                                                                || v4 == 0xD00000000000001DLL
                                                                && a2 == 0x80000001DF007F10
                                                                || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                    (result & 1) != 0))
                                                              {
                                                                v6 = 297;
                                                                goto LABEL_5;
                                                              }
                                                              if (v4 == 0x6369706F69687465
                                                                && a2 == 0xE800000000000000
                                                                || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                    (result & 1) != 0))
                                                              {
                                                                v6 = 38;
                                                                goto LABEL_5;
                                                              }
                                                              if (v4 == 0x6369706F69687465
                                                                && a2 == 0xEB00000000747865)
                                                              {
LABEL_695:
                                                                v6 = 101;
                                                                goto LABEL_5;
                                                              }
                                                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                              v67 = v4 == 0xD000000000000010
                                                                 && a2 == 0x80000001DF007F30;
                                                              v68 = v67;
                                                              v6 = 101;
                                                              if ((result & 1) == 0 && !v68)
                                                              {
                                                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                if ((result & 1) != 0)
                                                                  goto LABEL_695;
                                                                if (v4 == 0x6369706F69687465
                                                                  && a2 == 0xEC00000061747865)
                                                                {
LABEL_707:
                                                                  v6 = 143;
                                                                  goto LABEL_5;
                                                                }
                                                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                v69 = v4 == 0xD000000000000011
                                                                   && a2 == 0x80000001DF007F50;
                                                                v70 = v69;
                                                                v6 = 143;
                                                                if ((result & 1) == 0 && !v70)
                                                                {
                                                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                  if ((result & 1) != 0)
                                                                    goto LABEL_707;
                                                                  if (v4 == 0x6369706F69687465
                                                                    && a2 == 0xEC00000062747865)
                                                                  {
LABEL_719:
                                                                    v6 = 287;
                                                                    goto LABEL_5;
                                                                  }
                                                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                  v71 = v4 == 0xD000000000000011
                                                                     && a2 == 0x80000001DF007F70;
                                                                  v72 = v71;
                                                                  v6 = 287;
                                                                  if ((result & 1) == 0 && !v72)
                                                                  {
                                                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                    if ((result & 1) != 0)
                                                                      goto LABEL_719;
                                                                    if (v4 == 0x6369706F69687465
                                                                      && a2 == 0xEB00000000707573)
                                                                    {
LABEL_731:
                                                                      v6 = 39;
                                                                      goto LABEL_5;
                                                                    }
                                                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                    v73 = v4 == 0xD000000000000012
                                                                       && a2 == 0x80000001DF007F90;
                                                                    v74 = v73;
                                                                    v6 = 39;
                                                                    if ((result & 1) == 0 && !v74)
                                                                    {
                                                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                      if ((result & 1) != 0)
                                                                        goto LABEL_731;
                                                                      if (v4 == 0x697274656D6F6567
                                                                        && a2 == 0xEF73657061687363
                                                                        || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                            (result & 1) != 0))
                                                                      {
                                                                        v6 = 86;
                                                                        goto LABEL_5;
                                                                      }
                                                                      if (v4 == 0xD000000000000012
                                                                        && a2 == 0x80000001DF007FB0)
                                                                      {
LABEL_747:
                                                                        v6 = 303;
                                                                        goto LABEL_5;
                                                                      }
                                                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                      v75 = v4 == 0xD000000000000017
                                                                         && a2 == 0x80000001DF007FD0;
                                                                      v76 = v75;
                                                                      v6 = 303;
                                                                      if ((result & 1) == 0 && !v76)
                                                                      {
                                                                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                        if ((result & 1) != 0)
                                                                          goto LABEL_747;
                                                                        if (v4 == 0x6E616967726F6567
                                                                          && a2 == 0xE800000000000000
                                                                          || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                              (result & 1) != 0))
                                                                        {
                                                                          v6 = 36;
                                                                          goto LABEL_5;
                                                                        }
                                                                        if (v4 == 0x6E616967726F6567
                                                                          && a2 == 0xEB00000000747865)
                                                                        {
LABEL_763:
                                                                          v6 = 64;
                                                                          goto LABEL_5;
                                                                        }
                                                                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                        v77 = v4 == 0xD000000000000010
                                                                           && a2 == 0x80000001DF007FF0;
                                                                        v78 = v77;
                                                                        v6 = 64;
                                                                        if ((result & 1) == 0 && !v78)
                                                                        {
                                                                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                          if ((result & 1) != 0)
                                                                            goto LABEL_763;
                                                                          if (v4 == 0x6E616967726F6567
                                                                            && a2 == 0xEB00000000707573)
                                                                          {
LABEL_775:
                                                                            v6 = 99;
                                                                            goto LABEL_5;
                                                                          }
                                                                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                          v79 = v4 == 0xD000000000000012
                                                                             && a2 == 0x80000001DF008010;
                                                                          v80 = v79;
                                                                          v6 = 99;
                                                                          if ((result & 1) == 0 && !v80)
                                                                          {
                                                                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                            if ((result & 1) != 0)
                                                                              goto LABEL_775;
                                                                            if (v4 == 0x74696C6F67616C67
                                                                              && a2 == 0xEA00000000006369
                                                                              || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                  (result & 1) != 0))
                                                                            {
                                                                              v6 = 96;
                                                                              goto LABEL_5;
                                                                            }
                                                                            if (v4 == 0x74696C6F67616C67
                                                                              && a2 == 0xED00007075736369)
                                                                            {
LABEL_791:
                                                                              v6 = 283;
                                                                              goto LABEL_5;
                                                                            }
                                                                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                            v81 = v4 == 0xD000000000000014
                                                                               && a2 == 0x80000001DF008030;
                                                                            v82 = v81;
                                                                            v6 = 283;
                                                                            if ((result & 1) == 0 && !v82)
                                                                            {
                                                                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                              if ((result & 1) != 0)
                                                                                goto LABEL_791;
                                                                              if (v4 == 0x636968746F67
                                                                                && a2 == 0xE600000000000000
                                                                                || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                    (result & 1) != 0))
                                                                              {
                                                                                v6 = 174;
                                                                                goto LABEL_5;
                                                                              }
                                                                              if (v4 == 0x6168746E617267
                                                                                && a2 == 0xE700000000000000
                                                                                || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                    (result & 1) != 0))
                                                                              {
                                                                                v6 = 224;
                                                                                goto LABEL_5;
                                                                              }
                                                                              if (v4 == 0x6B65657267
                                                                                && a2 == 0xE500000000000000
                                                                                || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                    (result & 1) != 0)
                                                                                || v4 == 0x646E616B65657267
                                                                                && a2 == 0xEE00636974706F63
                                                                                || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                    (result & 1) != 0))
                                                                              {
                                                                                v6 = 7;
                                                                                goto LABEL_5;
                                                                              }
                                                                              if (v4 == 0x7478656B65657267
                                                                                && a2 == 0xE800000000000000)
                                                                              {
LABEL_818:
                                                                                v6 = 71;
                                                                                goto LABEL_5;
                                                                              }
                                                                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                              v83 = v4 == 0x7478656B65657267
                                                                                 && a2 == 0xED00006465646E65;
                                                                              v84 = v83;
                                                                              v6 = 71;
                                                                              if ((result & 1) == 0 && !v84)
                                                                              {
                                                                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                if ((result & 1) != 0)
                                                                                  goto LABEL_818;
                                                                                if (v4 == 0x69746172616A7567
                                                                                  && a2 == 0xE800000000000000
                                                                                  || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                      (result & 1) != 0))
                                                                                {
                                                                                  v6 = 25;
                                                                                  goto LABEL_5;
                                                                                }
                                                                                if (v4 == 0x67616C616A6E7567
                                                                                  && a2 == 0xEC00000069646E6FLL
                                                                                  || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                      (result & 1) != 0))
                                                                                {
                                                                                  v6 = 243;
                                                                                  goto LABEL_5;
                                                                                }
                                                                                if (v4 == 0x69686B756D727567
                                                                                  && a2 == 0xE800000000000000
                                                                                  || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                      (result & 1) != 0))
                                                                                {
                                                                                  v6 = 24;
                                                                                  goto LABEL_5;
                                                                                }
                                                                                if (v4 == 0xD000000000000010
                                                                                  && a2 == 0x80000001DF008050)
                                                                                {
LABEL_842:
                                                                                  v6 = 162;
                                                                                  goto LABEL_5;
                                                                                }
                                                                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                v85 = v4 == 0xD00000000000001ALL
                                                                                   && a2 == 0x80000001DF008070;
                                                                                v86 = v85;
                                                                                v6 = 162;
                                                                                if ((result & 1) == 0 && !v86)
                                                                                {
                                                                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                  if ((result & 1) != 0)
                                                                                    goto LABEL_842;
                                                                                  if (v4 == 0x6B72616D666C6168
                                                                                    && a2 == 0xE900000000000073)
                                                                                  {
LABEL_854:
                                                                                    v6 = 158;
                                                                                    goto LABEL_5;
                                                                                  }
                                                                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                  v87 = v4 == 0xD000000000000012
                                                                                     && a2 == 0x80000001DF008090;
                                                                                  v88 = v87;
                                                                                  v6 = 158;
                                                                                  if ((result & 1) == 0 && !v88)
                                                                                  {
                                                                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                    if ((result & 1) != 0)
                                                                                      goto LABEL_854;
                                                                                    if (v4 == 0x6C75676E6168
                                                                                      && a2 == 0xE600000000000000
                                                                                      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                          (result & 1) != 0)
                                                                                      || v4 == 0x79736C75676E6168
                                                                                      && a2 == 0xEF73656C62616C6CLL
                                                                                      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                          (result & 1) != 0))
                                                                                    {
                                                                                      v6 = 147;
                                                                                      goto LABEL_5;
                                                                                    }
                                                                                    if (v4 == 0x6F726966696E6168
                                                                                      && a2 == 0xEE006179676E6968
                                                                                      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                          (result & 1) != 0))
                                                                                    {
                                                                                      v6 = 206;
                                                                                      goto LABEL_5;
                                                                                    }
                                                                                    if (v4 == 0x6F6F6E756E6168
                                                                                      && a2 == 0xE700000000000000
                                                                                      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                          (result & 1) != 0))
                                                                                    {
                                                                                      v6 = 45;
                                                                                      goto LABEL_5;
                                                                                    }
                                                                                    if (v4 == 0x6E6172746168
                                                                                      && a2 == 0xE600000000000000
                                                                                      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                          (result & 1) != 0))
                                                                                    {
                                                                                      v6 = 191;
                                                                                      goto LABEL_5;
                                                                                    }
                                                                                    if (v4 == 0x776572626568
                                                                                      && a2 == 0xE600000000000000
                                                                                      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                          (result & 1) != 0))
                                                                                    {
                                                                                      v6 = 11;
                                                                                      goto LABEL_5;
                                                                                    }
                                                                                    if (v4 == 0xD000000000000010
                                                                                      && a2 == 0x80000001DF0080B0)
                                                                                    {
LABEL_889:
                                                                                      v6 = 150;
                                                                                      goto LABEL_5;
                                                                                    }
                                                                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                    v89 = v4 == 0xD000000000000018
                                                                                       && a2 == 0x80000001DF0080D0;
                                                                                    v90 = v89;
                                                                                    v6 = 150;
                                                                                    if ((result & 1) == 0 && !v90)
                                                                                    {
                                                                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                      if ((result & 1) != 0)
                                                                                        goto LABEL_889;
                                                                                      if (v4 == 0x7272757368676968
                                                                                        && a2 == 0xEE0073657461676FLL
                                                                                        || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                            (result & 1) != 0))
                                                                                      {
                                                                                        v6 = 149;
                                                                                        goto LABEL_5;
                                                                                      }
                                                                                      if (v4 == 0x616E616761726968
                                                                                        && a2 == 0xE800000000000000
                                                                                        || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                            (result & 1) != 0))
                                                                                      {
                                                                                        v6 = 108;
                                                                                        goto LABEL_5;
                                                                                      }
                                                                                      if (v4 == 6513769
                                                                                        && a2 == 0xE300000000000000)
                                                                                      {
LABEL_909:
                                                                                        v6 = 106;
                                                                                        goto LABEL_5;
                                                                                      }
                                                                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                      v91 = v4 == 0xD000000000000020
                                                                                         && a2 == 0x80000001DF0080F0;
                                                                                      v92 = v91;
                                                                                      v6 = 106;
                                                                                      if ((result & 1) == 0 && !v92)
                                                                                      {
                                                                                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                        if ((result & 1) != 0)
                                                                                          goto LABEL_909;
                                                                                        if (v4 == 0xD000000000000012
                                                                                          && a2 == 0x80000001DF008120)
                                                                                        {
LABEL_921:
                                                                                          v6 = 261;
                                                                                          goto LABEL_5;
                                                                                        }
                                                                                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                        v93 = v4 == 0xD000000000000020
                                                                                           && a2 == 0x80000001DF008140;
                                                                                        v94 = v93;
                                                                                        v6 = 261;
                                                                                        if ((result & 1) == 0 && !v94)
                                                                                        {
                                                                                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                          if ((result & 1) != 0)
                                                                                            goto LABEL_921;
                                                                                          if (v4 == 0x6C61697265706D69
                                                                                            && a2 == 0xEF6369616D617261
                                                                                            || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                                (result & 1) != 0))
                                                                                          {
                                                                                            v6 = 188;
                                                                                            goto LABEL_5;
                                                                                          }
                                                                                          if (v4 == 0xD000000000000010
                                                                                            && a2 == 0x80000001DF008170)
                                                                                          {
LABEL_937:
                                                                                            v6 = 130;
                                                                                            goto LABEL_5;
                                                                                          }
                                                                                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                          v95 = v4 == 0xD000000000000016
                                                                                             && a2 == 0x80000001DF008190;
                                                                                          v96 = v95;
                                                                                          v6 = 130;
                                                                                          if ((result & 1) == 0 && !v96)
                                                                                          {
                                                                                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                            if ((result & 1) != 0)
                                                                                              goto LABEL_937;
                                                                                            if (v4 == 0xD000000000000011
                                                                                              && a2 == 0x80000001DF0081B0
                                                                                              || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                                  (result & 1) != 0))
                                                                                            {
                                                                                              v6 = 290;
                                                                                              goto LABEL_5;
                                                                                            }
                                                                                            if (v4 == 0xD000000000000014
                                                                                              && a2 == 0x80000001DF0076F0
                                                                                              || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                                  (result & 1) != 0))
                                                                                            {
                                                                                              v6 = 202;
                                                                                              goto LABEL_5;
                                                                                            }
                                                                                            if (v4 == 0xD000000000000015
                                                                                              && a2 == 0x80000001DF007710
                                                                                              || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                                  (result & 1) != 0))
                                                                                            {
                                                                                              v6 = 201;
                                                                                              goto LABEL_5;
                                                                                            }
                                                                                            if (v4 == 0x747865617069
                                                                                              && a2 == 0xE600000000000000
                                                                                              || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                                  (result & 1) != 0)
                                                                                              || v4 == 0x6E65747865617069
                                                                                              && a2 == 0xED0000736E6F6973
                                                                                              || (result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                                                                                                  (result & 1) != 0))
                                                                                            {
                                                                                              v6 = 4;
                                                                                              goto LABEL_5;
                                                                                            }
                                                                                            if (v4 == 1869439338
                                                                                              && a2 == 0xE400000000000000)
                                                                                            {
LABEL_968:
                                                                                              v6 = 37;
                                                                                              goto LABEL_5;
                                                                                            }
                                                                                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                            v97 = v4 == 0x616A6C75676E6168
                                                                                               && a2 == 0xEA00000000006F6DLL;
                                                                                            v98 = v97;
                                                                                            v6 = 37;
                                                                                            if ((result & 1) == 0
                                                                                              && !v98)
                                                                                            {
                                                                                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                              if ((result & 1) != 0)
                                                                                                goto LABEL_968;
                                                                                              if (v4 == 0x617478656F6D616ALL
                                                                                                && a2 == 0xE800000000000000)
                                                                                              {
LABEL_980:
                                                                                                v6 = 136;
                                                                                                goto LABEL_5;
                                                                                              }
                                                                                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                              v99 = v4 == 0xD000000000000013 && a2 == 0x80000001DF0081D0;
                                                                                              v100 = v99;
                                                                                              v6 = 136;
                                                                                              if ((result & 1) == 0
                                                                                                && !v100)
                                                                                              {
                                                                                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                if ((result & 1) != 0)
                                                                                                  goto LABEL_980;
                                                                                                if (v4 == 0x627478656F6D616ALL && a2 == 0xE800000000000000)
                                                                                                {
LABEL_992:
                                                                                                  v6 = 148;
                                                                                                  goto LABEL_5;
                                                                                                }
                                                                                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                v101 = v4 == 0xD000000000000013 && a2 == 0x80000001DF0081F0;
                                                                                                v102 = v101;
                                                                                                v6 = 148;
                                                                                                if ((result & 1) == 0 && !v102)
                                                                                                {
                                                                                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                  if ((result & 1) != 0)
                                                                                                    goto LABEL_992;
                                                                                                  if (v4 == 0x6573656E6176616ALL && a2 == 0xE800000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                  {
                                                                                                    v6 = 137;
                                                                                                    goto LABEL_5;
                                                                                                  }
                                                                                                  if (v4 == 0x69687469616BLL && a2 == 0xE600000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                  {
                                                                                                    v6 = 215;
                                                                                                    goto LABEL_5;
                                                                                                  }
                                                                                                  if (v4 == 0x61747865616E616BLL && a2 == 0xE800000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || v4 == 0x65747865616E616BLL && a2 == 0xED0000616465646ELL || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                  {
                                                                                                    v6 = 268;
                                                                                                    goto LABEL_5;
                                                                                                  }
                                                                                                  if (v4 == 0x62747865616E616BLL && a2 == 0xE800000000000000)
                                                                                                  {
LABEL_1019:
                                                                                                    v6 = 266;
                                                                                                    goto LABEL_5;
                                                                                                  }
                                                                                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                  v103 = v4 == 0x65747865616E616BLL && a2 == 0xED0000626465646ELL;
                                                                                                  v104 = v103;
                                                                                                  v6 = 266;
                                                                                                  if ((result & 1) == 0 && !v104)
                                                                                                  {
                                                                                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                    if ((result & 1) != 0)
                                                                                                      goto LABEL_1019;
                                                                                                    if (v4 == 0x707573616E616BLL && a2 == 0xE700000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || v4 == 0x70707573616E616BLL && a2 == 0xEE00746E656D656CLL || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                    {
                                                                                                      v6 = 267;
                                                                                                      goto LABEL_5;
                                                                                                    }
                                                                                                    if (v4 == 0x6E75626E616BLL && a2 == 0xE600000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                    {
                                                                                                      v6 = 112;
                                                                                                      goto LABEL_5;
                                                                                                    }
                                                                                                    if (v4 == 0x6978676E616BLL && a2 == 0xE600000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || v4 == 0x61726978676E616BLL && a2 == 0xEE00736C61636964 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                    {
                                                                                                      v6 = 105;
                                                                                                      goto LABEL_5;
                                                                                                    }
                                                                                                    if (v4 == 0x6164616E6E616BLL && a2 == 0xE700000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                    {
                                                                                                      v6 = 29;
                                                                                                      goto LABEL_5;
                                                                                                    }
                                                                                                    if (v4 == 0x616E616B6174616BLL && a2 == 0xE800000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                    {
                                                                                                      v6 = 109;
                                                                                                      goto LABEL_5;
                                                                                                    }
                                                                                                    if (v4 == 0x616E616B6174616BLL && a2 == 0xEB00000000747865)
                                                                                                    {
LABEL_1057:
                                                                                                      v6 = 115;
                                                                                                      goto LABEL_5;
                                                                                                    }
                                                                                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                    v105 = v4 == 0xD00000000000001ALL && a2 == 0x80000001DF008210;
                                                                                                    v106 = v105;
                                                                                                    v6 = 115;
                                                                                                    if ((result & 1) == 0 && !v106)
                                                                                                    {
                                                                                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                      if ((result & 1) != 0)
                                                                                                        goto LABEL_1057;
                                                                                                      if (v4 == 0x696C686179616BLL && a2 == 0xE700000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                      {
                                                                                                        v6 = 134;
                                                                                                        goto LABEL_5;
                                                                                                      }
                                                                                                      if (v4 == 0x7468736F7261686BLL && a2 == 0xEA00000000006968 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                      {
                                                                                                        v6 = 196;
                                                                                                        goto LABEL_5;
                                                                                                      }
                                                                                                      if (v4 == 0xD000000000000011 && a2 == 0x80000001DF0076B0 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                      {
                                                                                                        v6 = 264;
                                                                                                        goto LABEL_5;
                                                                                                      }
                                                                                                      if (v4 == 0x72656D686BLL && a2 == 0xE500000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                      {
                                                                                                        v6 = 48;
                                                                                                        goto LABEL_5;
                                                                                                      }
                                                                                                      if (v4 == 0x6D797372656D686BLL && a2 == 0xEC000000736C6F62 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                      {
                                                                                                        v6 = 54;
                                                                                                        goto LABEL_5;
                                                                                                      }
                                                                                                      if (v4 == 0x696B6A6F686BLL && a2 == 0xE600000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                      {
                                                                                                        v6 = 221;
                                                                                                        goto LABEL_5;
                                                                                                      }
                                                                                                      if (v4 == 0x646177616475686BLL && a2 == 0xE900000000000069 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                      {
                                                                                                        v6 = 223;
                                                                                                        goto LABEL_5;
                                                                                                      }
                                                                                                      if (v4 == 7299436 && a2 == 0xE300000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                      {
                                                                                                        v6 = 33;
                                                                                                        goto LABEL_5;
                                                                                                      }
                                                                                                      if (v4 == 0x7573316E6974616CLL && a2 == 0xE900000000000070)
                                                                                                      {
LABEL_1109:
                                                                                                        v6 = 1;
                                                                                                        goto LABEL_5;
                                                                                                      }
                                                                                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                      v107 = v4 == 0xD000000000000010 && a2 == 0x80000001DF008230;
                                                                                                      v108 = v107;
                                                                                                      v6 = 1;
                                                                                                      if ((result & 1) == 0 && !v108)
                                                                                                      {
                                                                                                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                        v109 = v4 == 0x316E6974616CLL && a2 == 0xE600000000000000;
                                                                                                        v110 = v109;
                                                                                                        v6 = 1;
                                                                                                        if ((result & 1) == 0 && !v110)
                                                                                                        {
                                                                                                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                          if ((result & 1) != 0)
                                                                                                            goto LABEL_1109;
                                                                                                          if (v4 == 0x7478656E6974616CLL && a2 == 0xE900000000000061)
                                                                                                          {
LABEL_1121:
                                                                                                            v6 = 2;
                                                                                                            goto LABEL_5;
                                                                                                          }
                                                                                                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                          v111 = v4 == 0x7478656E6974616CLL && a2 == 0xEE00616465646E65;
                                                                                                          v112 = v111;
                                                                                                          v6 = 2;
                                                                                                          if ((result & 1) == 0 && !v112)
                                                                                                          {
                                                                                                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                            if ((result & 1) != 0)
                                                                                                              goto LABEL_1121;
                                                                                                            if (v4 == 0xD000000000000012 && a2 == 0x80000001DF008250)
                                                                                                            {
LABEL_1133:
                                                                                                              v6 = 70;
                                                                                                              goto LABEL_5;
                                                                                                            }
                                                                                                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                            v113 = v4 == 0xD000000000000017 && a2 == 0x80000001DF008270;
                                                                                                            v114 = v113;
                                                                                                            v6 = 70;
                                                                                                            if ((result & 1) == 0 && !v114)
                                                                                                            {
                                                                                                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                              if ((result & 1) != 0)
                                                                                                                goto LABEL_1133;
                                                                                                              if (v4 == 0x7478656E6974616CLL && a2 == 0xE900000000000062)
                                                                                                              {
LABEL_1145:
                                                                                                                v6 = 3;
                                                                                                                goto LABEL_5;
                                                                                                              }
                                                                                                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                              v115 = v4 == 0x7478656E6974616CLL && a2 == 0xEE00626465646E65;
                                                                                                              v116 = v115;
                                                                                                              v6 = 3;
                                                                                                              if ((result & 1) == 0 && !v116)
                                                                                                              {
                                                                                                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                if ((result & 1) != 0)
                                                                                                                  goto LABEL_1145;
                                                                                                                if (v4 == 0x7478656E6974616CLL && a2 == 0xE900000000000063)
                                                                                                                {
LABEL_1157:
                                                                                                                  v6 = 97;
                                                                                                                  goto LABEL_5;
                                                                                                                }
                                                                                                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                v117 = v4 == 0x7478656E6974616CLL && a2 == 0xEE00636465646E65;
                                                                                                                v118 = v117;
                                                                                                                v6 = 97;
                                                                                                                if ((result & 1) == 0 && !v118)
                                                                                                                {
                                                                                                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                  if ((result & 1) != 0)
                                                                                                                    goto LABEL_1157;
                                                                                                                  if (v4 == 0x7478656E6974616CLL && a2 == 0xE900000000000064)
                                                                                                                  {
LABEL_1169:
                                                                                                                    v6 = 128;
                                                                                                                    goto LABEL_5;
                                                                                                                  }
                                                                                                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                  v119 = v4 == 0x7478656E6974616CLL && a2 == 0xEE00646465646E65;
                                                                                                                  v120 = v119;
                                                                                                                  v6 = 128;
                                                                                                                  if ((result & 1) == 0 && !v120)
                                                                                                                  {
                                                                                                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                    if ((result & 1) != 0)
                                                                                                                      goto LABEL_1169;
                                                                                                                    if (v4 == 0x7478656E6974616CLL && a2 == 0xE900000000000065)
                                                                                                                    {
LABEL_1181:
                                                                                                                      v6 = 144;
                                                                                                                      goto LABEL_5;
                                                                                                                    }
                                                                                                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                    v121 = v4 == 0x7478656E6974616CLL && a2 == 0xEE00656465646E65;
                                                                                                                    v122 = v121;
                                                                                                                    v6 = 144;
                                                                                                                    if ((result & 1) == 0 && !v122)
                                                                                                                    {
                                                                                                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                      if ((result & 1) != 0)
                                                                                                                        goto LABEL_1181;
                                                                                                                      if (v4 == 0x7478656E6974616CLL && a2 == 0xE900000000000066)
                                                                                                                      {
LABEL_1193:
                                                                                                                        v6 = 186;
                                                                                                                        goto LABEL_5;
                                                                                                                      }
                                                                                                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                      v123 = v4 == 0x7478656E6974616CLL && a2 == 0xEE00666465646E65;
                                                                                                                      v124 = v123;
                                                                                                                      v6 = 186;
                                                                                                                      if ((result & 1) == 0 && !v124)
                                                                                                                      {
                                                                                                                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                        if ((result & 1) != 0)
                                                                                                                          goto LABEL_1193;
                                                                                                                        if (v4 == 0x7478656E6974616CLL && a2 == 0xE900000000000067)
                                                                                                                        {
LABEL_1205:
                                                                                                                          v6 = 282;
                                                                                                                          goto LABEL_5;
                                                                                                                        }
                                                                                                                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                        v125 = v4 == 0x7478656E6974616CLL && a2 == 0xEE00676465646E65;
                                                                                                                        v126 = v125;
                                                                                                                        v6 = 282;
                                                                                                                        if ((result & 1) == 0 && !v126)
                                                                                                                        {
                                                                                                                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                          if ((result & 1) != 0)
                                                                                                                            goto LABEL_1205;
                                                                                                                          if (v4 == 0x61686370656CLL && a2 == 0xE600000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                          {
                                                                                                                            v6 = 61;
                                                                                                                            goto LABEL_5;
                                                                                                                          }
                                                                                                                          if (v4 == 0xD000000000000011 && a2 == 0x80000001DF008290 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                          {
                                                                                                                            v6 = 76;
                                                                                                                            goto LABEL_5;
                                                                                                                          }
                                                                                                                          if (v4 == 0x75626D696CLL && a2 == 0xE500000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                          {
                                                                                                                            v6 = 51;
                                                                                                                            goto LABEL_5;
                                                                                                                          }
                                                                                                                          if (v4 == 0x617261656E696CLL && a2 == 0xE700000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                          {
                                                                                                                            v6 = 185;
                                                                                                                            goto LABEL_5;
                                                                                                                          }
                                                                                                                          if (v4 == 0xD000000000000010 && a2 == 0x80000001DF0082B0 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                          {
                                                                                                                            v6 = 165;
                                                                                                                            goto LABEL_5;
                                                                                                                          }
                                                                                                                          if (v4 == 0xD000000000000010 && a2 == 0x80000001DF0082D0 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                          {
                                                                                                                            v6 = 164;
                                                                                                                            goto LABEL_5;
                                                                                                                          }
                                                                                                                          if (v4 == 1970497900 && a2 == 0xE400000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                          {
                                                                                                                            v6 = 123;
                                                                                                                            goto LABEL_5;
                                                                                                                          }
                                                                                                                          if (v4 == 0x7075737573696CLL && a2 == 0xE700000000000000)
                                                                                                                          {
LABEL_1245:
                                                                                                                            v6 = 245;
                                                                                                                            goto LABEL_5;
                                                                                                                          }
                                                                                                                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                          v127 = v4 == 0x707075737573696CLL && a2 == 0xEE00746E656D656CLL;
                                                                                                                          v128 = v127;
                                                                                                                          v6 = 245;
                                                                                                                          if ((result & 1) == 0 && !v128)
                                                                                                                          {
                                                                                                                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                            if ((result & 1) != 0)
                                                                                                                              goto LABEL_1245;
                                                                                                                            if (v4 == 0x6F72727573776F6CLL && a2 == 0xED00007365746167 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                            {
                                                                                                                              v6 = 151;
                                                                                                                              goto LABEL_5;
                                                                                                                            }
                                                                                                                            if (v4 == 0x6E616963796CLL && a2 == 0xE600000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                            {
                                                                                                                              v6 = 170;
                                                                                                                              goto LABEL_5;
                                                                                                                            }
                                                                                                                            result = 0x6E616964796CLL;
                                                                                                                            if (v4 == 0x6E616964796CLL && a2 == 0xE600000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                            {
                                                                                                                              v6 = 193;
                                                                                                                              goto LABEL_5;
                                                                                                                            }
                                                                                                                            if (v4 == 0x696E616A6168616DLL && a2 == 0xE800000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                            {
                                                                                                                              v6 = 218;
                                                                                                                              goto LABEL_5;
                                                                                                                            }
                                                                                                                            if (v4 == 0x676E6F6A68616DLL && a2 == 0xE700000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || v4 == 0x74676E6F6A68616DLL && a2 == 0xEC00000073656C69 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                            {
                                                                                                                              v6 = 293;
                                                                                                                              goto LABEL_5;
                                                                                                                            }
                                                                                                                            if (v4 == 0x726173616B616DLL && a2 == 0xE700000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                            {
                                                                                                                              v6 = 244;
                                                                                                                              goto LABEL_5;
                                                                                                                            }
                                                                                                                            if (v4 == 0x616C6179616C616DLL && a2 == 0xE90000000000006DLL || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                            {
                                                                                                                              v6 = 30;
                                                                                                                              goto LABEL_5;
                                                                                                                            }
                                                                                                                            if (v4 == 0x636961646E616DLL && a2 == 0xE700000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                            {
                                                                                                                              v6 = 18;
                                                                                                                              goto LABEL_5;
                                                                                                                            }
                                                                                                                            if (v4 == 0x65616863696E616DLL && a2 == 0xEA00000000006E61 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                            {
                                                                                                                              v6 = 199;
                                                                                                                              goto LABEL_5;
                                                                                                                            }
                                                                                                                            if (v4 == 0x6E65686372616DLL && a2 == 0xE700000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                            {
                                                                                                                              v6 = 241;
                                                                                                                              goto LABEL_5;
                                                                                                                            }
                                                                                                                            if (v4 == 0x676D61726173616DLL && a2 == 0xEC00000069646E6FLL || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                            {
                                                                                                                              v6 = 242;
                                                                                                                              goto LABEL_5;
                                                                                                                            }
                                                                                                                            if (v4 == 0x68706C616874616DLL && a2 == 0xEC0000006D756E61 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || (result = 0xD00000000000001FLL, v4 == 0xD00000000000001FLL) && a2 == 0x80000001DF0082F0 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                            {
                                                                                                                              v6 = 280;
                                                                                                                              goto LABEL_5;
                                                                                                                            }
                                                                                                                            if (v4 == 0x7265706F6874616DLL && a2 == 0xED000073726F7461)
                                                                                                                            {
LABEL_1311:
                                                                                                                              v6 = 79;
                                                                                                                              goto LABEL_5;
                                                                                                                            }
                                                                                                                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                            v129 = v4 == 0xD000000000000015 && a2 == 0x80000001DF008310;
                                                                                                                            v130 = v129;
                                                                                                                            v6 = 79;
                                                                                                                            if ((result & 1) == 0 && !v130)
                                                                                                                            {
                                                                                                                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                              if ((result & 1) != 0)
                                                                                                                                goto LABEL_1311;
                                                                                                                              if (v4 == 0x6D756E6E6179616DLL && a2 == 0xED0000736C617265 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                              {
                                                                                                                                v6 = 277;
                                                                                                                                goto LABEL_5;
                                                                                                                              }
                                                                                                                              if (v4 == 0x646961666564656DLL && a2 == 0xEB000000006E6972 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                              {
                                                                                                                                v6 = 259;
                                                                                                                                goto LABEL_5;
                                                                                                                              }
                                                                                                                              if (v4 == 0x616D69657465656DLL && a2 == 0xEB000000006B6579 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                              {
                                                                                                                                v6 = 146;
                                                                                                                                goto LABEL_5;
                                                                                                                              }
                                                                                                                              if (v4 == 0x616D69657465656DLL && a2 == 0xEE007478656B6579)
                                                                                                                              {
LABEL_1335:
                                                                                                                                v6 = 142;
                                                                                                                                goto LABEL_5;
                                                                                                                              }
                                                                                                                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                              v131 = v4 == 0xD000000000000015 && a2 == 0x80000001DF008330;
                                                                                                                              v132 = v131;
                                                                                                                              v6 = 142;
                                                                                                                              if ((result & 1) == 0 && !v132)
                                                                                                                              {
                                                                                                                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                if ((result & 1) != 0)
                                                                                                                                  goto LABEL_1335;
                                                                                                                                if (v4 == 0x6B696B65646E656DLL && a2 == 0xEC00000069756B61 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                {
                                                                                                                                  v6 = 288;
                                                                                                                                  goto LABEL_5;
                                                                                                                                }
                                                                                                                                if (v4 == 0x636974696F72656DLL && a2 == 0xEF65766973727563 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                {
                                                                                                                                  v6 = 195;
                                                                                                                                  goto LABEL_5;
                                                                                                                                }
                                                                                                                                if (v4 == 0xD000000000000013 && a2 == 0x80000001DF0076D0 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                {
                                                                                                                                  v6 = 194;
                                                                                                                                  goto LABEL_5;
                                                                                                                                }
                                                                                                                                if (v4 == 1868654957 && a2 == 0xE400000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                {
                                                                                                                                  v6 = 260;
                                                                                                                                  goto LABEL_5;
                                                                                                                                }
                                                                                                                                if (v4 == 0x6F7272616373696DLL && a2 == 0xEA00000000007377)
                                                                                                                                {
LABEL_1363:
                                                                                                                                  v6 = 95;
                                                                                                                                  goto LABEL_5;
                                                                                                                                }
                                                                                                                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                v133 = v4 == 0xD00000000000001DLL && a2 == 0x80000001DF008350;
                                                                                                                                v134 = v133;
                                                                                                                                v6 = 95;
                                                                                                                                if ((result & 1) == 0 && !v134)
                                                                                                                                {
                                                                                                                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                  if ((result & 1) != 0)
                                                                                                                                    goto LABEL_1363;
                                                                                                                                  if (v4 == 0xD000000000000010 && a2 == 0x80000001DF008370)
                                                                                                                                  {
LABEL_1375:
                                                                                                                                    v6 = 89;
                                                                                                                                    goto LABEL_5;
                                                                                                                                  }
                                                                                                                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                  v135 = v4 == 0xD000000000000021 && a2 == 0x80000001DF008390;
                                                                                                                                  v136 = v135;
                                                                                                                                  v6 = 89;
                                                                                                                                  if ((result & 1) == 0 && !v136)
                                                                                                                                  {
                                                                                                                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                    if ((result & 1) != 0)
                                                                                                                                      goto LABEL_1375;
                                                                                                                                    if (v4 == 0xD000000000000010 && a2 == 0x80000001DF0083C0)
                                                                                                                                    {
LABEL_1387:
                                                                                                                                      v6 = 93;
                                                                                                                                      goto LABEL_5;
                                                                                                                                    }
                                                                                                                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                    v137 = v4 == 0xD000000000000021 && a2 == 0x80000001DF0083E0;
                                                                                                                                    v138 = v137;
                                                                                                                                    v6 = 93;
                                                                                                                                    if ((result & 1) == 0 && !v138)
                                                                                                                                    {
                                                                                                                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                      if ((result & 1) != 0)
                                                                                                                                        goto LABEL_1387;
                                                                                                                                      if (v4 == 0x746369706373696DLL && a2 == 0xEF7368706172676FLL || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || v4 == 0xD000000000000022 && a2 == 0x80000001DF008410 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                      {
                                                                                                                                        v6 = 298;
                                                                                                                                        goto LABEL_5;
                                                                                                                                      }
                                                                                                                                      if (v4 == 0x626D79736373696DLL && a2 == 0xEB00000000736C6FLL)
                                                                                                                                      {
LABEL_1406:
                                                                                                                                        v6 = 87;
                                                                                                                                        goto LABEL_5;
                                                                                                                                      }
                                                                                                                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                      v139 = v4 == 0xD000000000000014 && a2 == 0x80000001DF008440;
                                                                                                                                      v140 = v139;
                                                                                                                                      v6 = 87;
                                                                                                                                      if ((result & 1) == 0 && !v140)
                                                                                                                                      {
                                                                                                                                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                        if ((result & 1) != 0)
                                                                                                                                          goto LABEL_1406;
                                                                                                                                        if (v4 == 0x686365746373696DLL && a2 == 0xED00006C6163696ELL)
                                                                                                                                        {
LABEL_1418:
                                                                                                                                          v6 = 80;
                                                                                                                                          goto LABEL_5;
                                                                                                                                        }
                                                                                                                                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                        v141 = v4 == 0xD000000000000016 && a2 == 0x80000001DF008460;
                                                                                                                                        v142 = v141;
                                                                                                                                        v6 = 80;
                                                                                                                                        if ((result & 1) == 0 && !v142)
                                                                                                                                        {
                                                                                                                                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                          if ((result & 1) != 0)
                                                                                                                                            goto LABEL_1418;
                                                                                                                                          if (v4 == 1768189805 && a2 == 0xE400000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                          {
                                                                                                                                            v6 = 228;
                                                                                                                                            goto LABEL_5;
                                                                                                                                          }
                                                                                                                                          if (v4 == 0x7265696669646F6DLL && a2 == 0xEF7372657474656CLL)
                                                                                                                                          {
LABEL_1434:
                                                                                                                                            v6 = 5;
                                                                                                                                            goto LABEL_5;
                                                                                                                                          }
                                                                                                                                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                          v143 = v4 == 0xD000000000000016 && a2 == 0x80000001DF008480;
                                                                                                                                          v144 = v143;
                                                                                                                                          v6 = 5;
                                                                                                                                          if ((result & 1) == 0 && !v144)
                                                                                                                                          {
                                                                                                                                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                            if ((result & 1) != 0)
                                                                                                                                              goto LABEL_1434;
                                                                                                                                            if (v4 == 0xD000000000000013 && a2 == 0x80000001DF0084A0 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                            {
                                                                                                                                              v6 = 127;
                                                                                                                                              goto LABEL_5;
                                                                                                                                            }
                                                                                                                                            if (v4 == 0x61696C6F676E6F6DLL && a2 == 0xE90000000000006ELL || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                            {
                                                                                                                                              v6 = 49;
                                                                                                                                              goto LABEL_5;
                                                                                                                                            }
                                                                                                                                            if (v4 == 0x61696C6F676E6F6DLL && a2 == 0xEC0000007075736ELL)
                                                                                                                                            {
LABEL_1454:
                                                                                                                                              v6 = 229;
                                                                                                                                              goto LABEL_5;
                                                                                                                                            }
                                                                                                                                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                            v145 = v4 == 0xD000000000000013 && a2 == 0x80000001DF0084C0;
                                                                                                                                            v146 = v145;
                                                                                                                                            v6 = 229;
                                                                                                                                            if ((result & 1) == 0 && !v146)
                                                                                                                                            {
                                                                                                                                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                              if ((result & 1) != 0)
                                                                                                                                                goto LABEL_1454;
                                                                                                                                              if (v4 == 7303789 && a2 == 0xE300000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                              {
                                                                                                                                                v6 = 255;
                                                                                                                                                goto LABEL_5;
                                                                                                                                              }
                                                                                                                                              if (v4 == 0x696E61746C756DLL && a2 == 0xE700000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                              {
                                                                                                                                                v6 = 222;
                                                                                                                                                goto LABEL_5;
                                                                                                                                              }
                                                                                                                                              if (v4 == 0x636973756DLL && a2 == 0xE500000000000000)
                                                                                                                                              {
LABEL_1474:
                                                                                                                                                v6 = 275;
                                                                                                                                                goto LABEL_5;
                                                                                                                                              }
                                                                                                                                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                              v147 = v4 == 0x736C61636973756DLL && a2 == 0xEE00736C6F626D79;
                                                                                                                                              v148 = v147;
                                                                                                                                              v6 = 275;
                                                                                                                                              if ((result & 1) == 0 && !v148)
                                                                                                                                              {
                                                                                                                                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                if ((result & 1) != 0)
                                                                                                                                                  goto LABEL_1474;
                                                                                                                                                if (v4 == 0x72616D6E61796DLL && a2 == 0xE700000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                {
                                                                                                                                                  v6 = 35;
                                                                                                                                                  goto LABEL_5;
                                                                                                                                                }
                                                                                                                                                if (v4 == 0x6572616D6E61796DLL && a2 == 0xEB00000000617478)
                                                                                                                                                {
LABEL_1490:
                                                                                                                                                  v6 = 140;
                                                                                                                                                  goto LABEL_5;
                                                                                                                                                }
                                                                                                                                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                v149 = v4 == 0xD000000000000010 && a2 == 0x80000001DF0084E0;
                                                                                                                                                v150 = v149;
                                                                                                                                                v6 = 140;
                                                                                                                                                if ((result & 1) == 0 && !v150)
                                                                                                                                                {
                                                                                                                                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                  if ((result & 1) != 0)
                                                                                                                                                    goto LABEL_1490;
                                                                                                                                                  if (v4 == 0x6572616D6E61796DLL && a2 == 0xEB00000000627478)
                                                                                                                                                  {
LABEL_1502:
                                                                                                                                                    v6 = 138;
                                                                                                                                                    goto LABEL_5;
                                                                                                                                                  }
                                                                                                                                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                  v151 = v4 == 0xD000000000000010 && a2 == 0x80000001DF008500;
                                                                                                                                                  v152 = v151;
                                                                                                                                                  v6 = 138;
                                                                                                                                                  if ((result & 1) == 0 && !v152)
                                                                                                                                                  {
                                                                                                                                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                    if ((result & 1) != 0)
                                                                                                                                                      goto LABEL_1502;
                                                                                                                                                    if (v4 == 0x616561746162616ELL && a2 == 0xE90000000000006ELL || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                    {
                                                                                                                                                      v6 = 190;
                                                                                                                                                      goto LABEL_5;
                                                                                                                                                    }
                                                                                                                                                    if (v4 == 0x67616E69646E616ELL && a2 == 0xEB00000000697261 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                    {
                                                                                                                                                      v6 = 235;
                                                                                                                                                      goto LABEL_5;
                                                                                                                                                    }
                                                                                                                                                    if (v4 == 25198 && a2 == 0xE200000000000000)
                                                                                                                                                    {
LABEL_1522:
                                                                                                                                                      v6 = 320;
                                                                                                                                                      goto LABEL_5;
                                                                                                                                                    }
                                                                                                                                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                    v153 = v4 == 0x6B636F6C626F6ELL && a2 == 0xE700000000000000;
                                                                                                                                                    v154 = v153;
                                                                                                                                                    v6 = 320;
                                                                                                                                                    if ((result & 1) == 0 && !v154)
                                                                                                                                                    {
                                                                                                                                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                      if ((result & 1) != 0)
                                                                                                                                                        goto LABEL_1522;
                                                                                                                                                      if (v4 == 0x756C69617477656ELL && a2 == 0xE900000000000065 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                      {
                                                                                                                                                        v6 = 53;
                                                                                                                                                        goto LABEL_5;
                                                                                                                                                      }
                                                                                                                                                      if (v4 == 1635214702 && a2 == 0xE400000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                      {
                                                                                                                                                        v6 = 225;
                                                                                                                                                        goto LABEL_5;
                                                                                                                                                      }
                                                                                                                                                      result = 7301998;
                                                                                                                                                      if (v4 == 7301998 && a2 == 0xE300000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                      {
                                                                                                                                                        v6 = 16;
                                                                                                                                                        goto LABEL_5;
                                                                                                                                                      }
                                                                                                                                                      if (v4 == 0x6F667265626D756ELL && a2 == 0xEB00000000736D72 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                      {
                                                                                                                                                        v6 = 77;
                                                                                                                                                        goto LABEL_5;
                                                                                                                                                      }
                                                                                                                                                      if (v4 == 0x756873756ELL && a2 == 0xE500000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                      {
                                                                                                                                                        v6 = 270;
                                                                                                                                                        goto LABEL_5;
                                                                                                                                                      }
                                                                                                                                                      if (v4 == 0xD000000000000014 && a2 == 0x80000001DF007670 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                      {
                                                                                                                                                        v6 = 284;
                                                                                                                                                        goto LABEL_5;
                                                                                                                                                      }
                                                                                                                                                      if (v4 == 7496559 && a2 == 0xE300000000000000)
                                                                                                                                                      {
LABEL_1558:
                                                                                                                                                        v6 = 82;
                                                                                                                                                        goto LABEL_5;
                                                                                                                                                      }
                                                                                                                                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                      v155 = v4 == 0xD00000000000001BLL && a2 == 0x80000001DF008520;
                                                                                                                                                      v156 = v155;
                                                                                                                                                      v6 = 82;
                                                                                                                                                      if ((result & 1) == 0 && !v156)
                                                                                                                                                      {
                                                                                                                                                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                        if ((result & 1) != 0)
                                                                                                                                                          goto LABEL_1558;
                                                                                                                                                        if (v4 == 0x6D6168676FLL && a2 == 0xE500000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          v6 = 42;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }
                                                                                                                                                        if (v4 == 0x696B6968636C6FLL && a2 == 0xE700000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          v6 = 62;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }
                                                                                                                                                        if (v4 == 0x61676E7568646C6FLL && a2 == 0xEC0000006E616972 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          v6 = 205;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }
                                                                                                                                                        if (v4 == 0x696C617469646C6FLL && a2 == 0xE900000000000063 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          v6 = 173;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }
                                                                                                                                                        if (v4 == 0x6874726F6E646C6FLL && a2 == 0xEF6E616962617261 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          v6 = 198;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }
                                                                                                                                                        if (v4 == 0x696D726570646C6FLL && a2 == 0xE900000000000063 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          v6 = 175;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }
                                                                                                                                                        if (v4 == 0x6973726570646C6FLL && a2 == 0xEA00000000006E61 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          v6 = 177;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }
                                                                                                                                                        if (v4 == 0x6964676F73646C6FLL && a2 == 0xEA00000000006E61 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          v6 = 209;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }
                                                                                                                                                        if (v4 == 0x6874756F73646C6FLL && a2 == 0xEF6E616962617261 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          v6 = 197;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }
                                                                                                                                                        if (v4 == 0x696B727574646C6FLL && a2 == 0xE900000000000063 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          v6 = 204;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }
                                                                                                                                                        if (v4 == 0x7568677975646C6FLL && a2 == 0xE900000000000072 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          v6 = 211;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }
                                                                                                                                                        if (v4 == 0x617969726FLL && a2 == 0xE500000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          v6 = 26;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }
                                                                                                                                                        if (v4 == 0xD000000000000012 && a2 == 0x80000001DF008540 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          v6 = 300;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }
                                                                                                                                                        if (v4 == 0x656761736FLL && a2 == 0xE500000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          v6 = 181;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }
                                                                                                                                                        if (v4 == 0x61796E616D736FLL && a2 == 0xE700000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          v6 = 180;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }
                                                                                                                                                        if (v4 == 0xD000000000000013 && a2 == 0x80000001DF008560 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          v6 = 291;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }
                                                                                                                                                        if (v4 == 0x6D68687761686170 && a2 == 0xEB00000000676E6FLL || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          v6 = 258;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }
                                                                                                                                                        if (v4 == 0x6E6572796D6C6170 && a2 == 0xE900000000000065 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          v6 = 189;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }
                                                                                                                                                        if (v4 == 0x61686E6963756170 && a2 == 0xE900000000000075 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          v6 = 239;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }
                                                                                                                                                        if (v4 == 0x61707367616870 && a2 == 0xE700000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                        {
                                                                                                                                                          v6 = 131;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }
                                                                                                                                                        if (v4 == 0x736F747369616870 && a2 == 0xE800000000000000)
                                                                                                                                                        {
LABEL_1650:
                                                                                                                                                          v6 = 169;
                                                                                                                                                          goto LABEL_5;
                                                                                                                                                        }
                                                                                                                                                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                        v157 = v4 == 0x736F747369616870 && a2 == 0xEC00000063736964;
                                                                                                                                                        v158 = v157;
                                                                                                                                                        v6 = 169;
                                                                                                                                                        if ((result & 1) == 0 && !v158)
                                                                                                                                                        {
                                                                                                                                                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                          if ((result & 1) != 0)
                                                                                                                                                            goto LABEL_1650;
                                                                                                                                                          if (v4 == 0x6963696E656F6870 && a2 == 0xEA00000000006E61 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                          {
                                                                                                                                                            v6 = 192;
                                                                                                                                                            goto LABEL_5;
                                                                                                                                                          }
                                                                                                                                                          if (v4 == 0x636974656E6F6870 && a2 == 0xEB00000000747865)
                                                                                                                                                          {
LABEL_1666:
                                                                                                                                                            v6 = 67;
                                                                                                                                                            goto LABEL_5;
                                                                                                                                                          }
                                                                                                                                                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                          v159 = v4 == 0xD000000000000012 && a2 == 0x80000001DF008580;
                                                                                                                                                          v160 = v159;
                                                                                                                                                          v6 = 67;
                                                                                                                                                          if ((result & 1) == 0 && !v160)
                                                                                                                                                          {
                                                                                                                                                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                            if ((result & 1) != 0)
                                                                                                                                                              goto LABEL_1666;
                                                                                                                                                            if (v4 == 0x636974656E6F6870 && a2 == 0xEE00707573747865 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || v4 == 0xD00000000000001CLL && a2 == 0x80000001DF0085A0 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                            {
                                                                                                                                                              v6 = 68;
                                                                                                                                                              goto LABEL_5;
                                                                                                                                                            }
                                                                                                                                                            if (v4 == 0x63676E6979616C70 && a2 == 0xEC00000073647261 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                            {
                                                                                                                                                              v6 = 295;
                                                                                                                                                              goto LABEL_5;
                                                                                                                                                            }
                                                                                                                                                            if (v4 == 0x707265746C617370 && a2 == 0xEE006976616C6861 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                            {
                                                                                                                                                              v6 = 203;
                                                                                                                                                              goto LABEL_5;
                                                                                                                                                            }
                                                                                                                                                            if (v4 == 6387056 && a2 == 0xE300000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || v4 == 0x7565746176697270 && a2 == 0xEE00616572616573)
                                                                                                                                                            {
LABEL_1696:
                                                                                                                                                              v6 = 152;
                                                                                                                                                              goto LABEL_5;
                                                                                                                                                            }
                                                                                                                                                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                            v161 = v4 == 0x7565746176697270 && a2 == 0xEA00000000006573;
                                                                                                                                                            v162 = v161;
                                                                                                                                                            v6 = 152;
                                                                                                                                                            if ((result & 1) == 0 && !v162)
                                                                                                                                                            {
                                                                                                                                                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                              if ((result & 1) != 0)
                                                                                                                                                                goto LABEL_1696;
                                                                                                                                                              if (v4 == 0x74617574636E7570 && a2 == 0xEB000000006E6F69)
                                                                                                                                                              {
LABEL_1708:
                                                                                                                                                                v6 = 72;
                                                                                                                                                                goto LABEL_5;
                                                                                                                                                              }
                                                                                                                                                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                              v163 = v4 == 0xD000000000000012 && a2 == 0x80000001DF0085C0;
                                                                                                                                                              v164 = v163;
                                                                                                                                                              v6 = 72;
                                                                                                                                                              if ((result & 1) == 0 && !v164)
                                                                                                                                                              {
                                                                                                                                                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                if ((result & 1) != 0)
                                                                                                                                                                  goto LABEL_1708;
                                                                                                                                                                if (v4 == 0x676E616A6572 && a2 == 0xE600000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                {
                                                                                                                                                                  v6 = 135;
                                                                                                                                                                  goto LABEL_5;
                                                                                                                                                                }
                                                                                                                                                                if (v4 == 1768781170 && a2 == 0xE400000000000000)
                                                                                                                                                                {
LABEL_1724:
                                                                                                                                                                  v6 = 207;
                                                                                                                                                                  goto LABEL_5;
                                                                                                                                                                }
                                                                                                                                                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                v165 = v4 == 0xD000000000000012 && a2 == 0x80000001DF0085E0;
                                                                                                                                                                v166 = v165;
                                                                                                                                                                v6 = 207;
                                                                                                                                                                if ((result & 1) == 0 && !v166)
                                                                                                                                                                {
                                                                                                                                                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                  if ((result & 1) != 0)
                                                                                                                                                                    goto LABEL_1724;
                                                                                                                                                                  if (v4 == 0x63696E7572 && a2 == 0xE500000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                  {
                                                                                                                                                                    v6 = 43;
                                                                                                                                                                    goto LABEL_5;
                                                                                                                                                                  }
                                                                                                                                                                  if (v4 == 0x61746972616D6173 && a2 == 0xE90000000000006ELL || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                  {
                                                                                                                                                                    v6 = 17;
                                                                                                                                                                    goto LABEL_5;
                                                                                                                                                                  }
                                                                                                                                                                  if (v4 == 0x7468736172756173 && a2 == 0xEA00000000006172 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                  {
                                                                                                                                                                    v6 = 132;
                                                                                                                                                                    goto LABEL_5;
                                                                                                                                                                  }
                                                                                                                                                                  if (v4 == 0x61646172616873 && a2 == 0xE700000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                  {
                                                                                                                                                                    v6 = 219;
                                                                                                                                                                    goto LABEL_5;
                                                                                                                                                                  }
                                                                                                                                                                  if (v4 == 0x6E616976616873 && a2 == 0xE700000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                  {
                                                                                                                                                                    v6 = 179;
                                                                                                                                                                    goto LABEL_5;
                                                                                                                                                                  }
                                                                                                                                                                  if (v4 == 0xD000000000000017 && a2 == 0x80000001DF008600 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                  {
                                                                                                                                                                    v6 = 272;
                                                                                                                                                                    goto LABEL_5;
                                                                                                                                                                  }
                                                                                                                                                                  if (v4 == 0x6D616864646973 && a2 == 0xE700000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                  {
                                                                                                                                                                    v6 = 227;
                                                                                                                                                                    goto LABEL_5;
                                                                                                                                                                  }
                                                                                                                                                                  if (v4 == 0x616C61686E6973 && a2 == 0xE700000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                  {
                                                                                                                                                                    v6 = 31;
                                                                                                                                                                    goto LABEL_5;
                                                                                                                                                                  }
                                                                                                                                                                  if (v4 == 0xD000000000000015 && a2 == 0x80000001DF008620 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                  {
                                                                                                                                                                    v6 = 220;
                                                                                                                                                                    goto LABEL_5;
                                                                                                                                                                  }
                                                                                                                                                                  if (v4 == 0x726F666C6C616D73 && a2 == 0xEA0000000000736DLL)
                                                                                                                                                                  {
LABEL_1772:
                                                                                                                                                                    v6 = 160;
                                                                                                                                                                    goto LABEL_5;
                                                                                                                                                                  }
                                                                                                                                                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                  v167 = v4 == 0xD000000000000011 && a2 == 0x80000001DF008640;
                                                                                                                                                                  v168 = v167;
                                                                                                                                                                  v6 = 160;
                                                                                                                                                                  if ((result & 1) == 0 && !v168)
                                                                                                                                                                  {
                                                                                                                                                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                    if ((result & 1) != 0)
                                                                                                                                                                      goto LABEL_1772;
                                                                                                                                                                    if (v4 == 0x6E616B6C6C616D73 && a2 == 0xEC00000074786561)
                                                                                                                                                                    {
LABEL_1784:
                                                                                                                                                                      v6 = 269;
                                                                                                                                                                      goto LABEL_5;
                                                                                                                                                                    }
                                                                                                                                                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                    v169 = v4 == 0xD000000000000012 && a2 == 0x80000001DF008660;
                                                                                                                                                                    v170 = v169;
                                                                                                                                                                    v6 = 269;
                                                                                                                                                                    if ((result & 1) == 0 && !v170)
                                                                                                                                                                    {
                                                                                                                                                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                      if ((result & 1) != 0)
                                                                                                                                                                        goto LABEL_1784;
                                                                                                                                                                      if (v4 == 0x6E616964676F73 && a2 == 0xE700000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                      {
                                                                                                                                                                        v6 = 210;
                                                                                                                                                                        goto LABEL_5;
                                                                                                                                                                      }
                                                                                                                                                                      if (v4 == 0x706D6F7361726F73 && a2 == 0xEB00000000676E65 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                      {
                                                                                                                                                                        v6 = 216;
                                                                                                                                                                        goto LABEL_5;
                                                                                                                                                                      }
                                                                                                                                                                      if (v4 == 0x6F626D6F796F73 && a2 == 0xE700000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                      {
                                                                                                                                                                        v6 = 237;
                                                                                                                                                                        goto LABEL_5;
                                                                                                                                                                      }
                                                                                                                                                                      if (v4 == 0x736C616963657073 && a2 == 0xE800000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                      {
                                                                                                                                                                        v6 = 163;
                                                                                                                                                                        goto LABEL_5;
                                                                                                                                                                      }
                                                                                                                                                                      if (v4 == 0x73656E61646E7573 && a2 == 0xE900000000000065 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                      {
                                                                                                                                                                        v6 = 59;
                                                                                                                                                                        goto LABEL_5;
                                                                                                                                                                      }
                                                                                                                                                                      if (v4 == 0x73656E61646E7573 && a2 == 0xEC00000070757365)
                                                                                                                                                                      {
LABEL_1816:
                                                                                                                                                                        v6 = 65;
                                                                                                                                                                        goto LABEL_5;
                                                                                                                                                                      }
                                                                                                                                                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                      v171 = v4 == 0xD000000000000013 && a2 == 0x80000001DF008680;
                                                                                                                                                                      v172 = v171;
                                                                                                                                                                      v6 = 65;
                                                                                                                                                                      if ((result & 1) == 0 && !v172)
                                                                                                                                                                      {
                                                                                                                                                                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                        if ((result & 1) != 0)
                                                                                                                                                                          goto LABEL_1816;
                                                                                                                                                                        if (v4 == 0x776F727261707573 && a2 == 0xEA00000000006173)
                                                                                                                                                                        {
LABEL_1828:
                                                                                                                                                                          v6 = 90;
                                                                                                                                                                          goto LABEL_5;
                                                                                                                                                                        }
                                                                                                                                                                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                        v173 = v4 == 0xD000000000000013 && a2 == 0x80000001DF0086A0;
                                                                                                                                                                        v174 = v173;
                                                                                                                                                                        v6 = 90;
                                                                                                                                                                        if ((result & 1) == 0 && !v174)
                                                                                                                                                                        {
                                                                                                                                                                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                          if ((result & 1) != 0)
                                                                                                                                                                            goto LABEL_1828;
                                                                                                                                                                          if (v4 == 0x776F727261707573 && a2 == 0xEA00000000006273)
                                                                                                                                                                          {
LABEL_1840:
                                                                                                                                                                            v6 = 92;
                                                                                                                                                                            goto LABEL_5;
                                                                                                                                                                          }
                                                                                                                                                                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                          v175 = v4 == 0xD000000000000013 && a2 == 0x80000001DF0086C0;
                                                                                                                                                                          v176 = v175;
                                                                                                                                                                          v6 = 92;
                                                                                                                                                                          if ((result & 1) == 0 && !v176)
                                                                                                                                                                          {
                                                                                                                                                                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                            if ((result & 1) != 0)
                                                                                                                                                                              goto LABEL_1840;
                                                                                                                                                                            if (v4 == 0x776F727261707573 && a2 == 0xEA00000000006373)
                                                                                                                                                                            {
LABEL_1852:
                                                                                                                                                                              v6 = 304;
                                                                                                                                                                              goto LABEL_5;
                                                                                                                                                                            }
                                                                                                                                                                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                            v177 = v4 == 0xD000000000000013 && a2 == 0x80000001DF0086E0;
                                                                                                                                                                            v178 = v177;
                                                                                                                                                                            v6 = 304;
                                                                                                                                                                            if ((result & 1) == 0 && !v178)
                                                                                                                                                                            {
                                                                                                                                                                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                              if ((result & 1) != 0)
                                                                                                                                                                                goto LABEL_1852;
                                                                                                                                                                              if (v4 == 0xD000000000000010 && a2 == 0x80000001DF008700)
                                                                                                                                                                              {
LABEL_1864:
                                                                                                                                                                                v6 = 94;
                                                                                                                                                                                goto LABEL_5;
                                                                                                                                                                              }
                                                                                                                                                                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                              v179 = v4 == 0xD000000000000021 && a2 == 0x80000001DF008720;
                                                                                                                                                                              v180 = v179;
                                                                                                                                                                              v6 = 94;
                                                                                                                                                                              if ((result & 1) == 0 && !v180)
                                                                                                                                                                              {
                                                                                                                                                                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                if ((result & 1) != 0)
                                                                                                                                                                                  goto LABEL_1864;
                                                                                                                                                                                if (v4 == 0x61617570707573 && a2 == 0xE700000000000000)
                                                                                                                                                                                {
LABEL_1876:
                                                                                                                                                                                  v6 = 318;
                                                                                                                                                                                  goto LABEL_5;
                                                                                                                                                                                }
                                                                                                                                                                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                v181 = v4 == 0xD00000000000001CLL && a2 == 0x80000001DF008750;
                                                                                                                                                                                v182 = v181;
                                                                                                                                                                                v6 = 318;
                                                                                                                                                                                if ((result & 1) == 0 && !v182)
                                                                                                                                                                                {
                                                                                                                                                                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                  if ((result & 1) != 0)
                                                                                                                                                                                    goto LABEL_1876;
                                                                                                                                                                                  if (v4 == 0x62617570707573 && a2 == 0xE700000000000000)
                                                                                                                                                                                  {
LABEL_1888:
                                                                                                                                                                                    v6 = 319;
                                                                                                                                                                                    goto LABEL_5;
                                                                                                                                                                                  }
                                                                                                                                                                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                  v183 = v4 == 0xD00000000000001CLL && a2 == 0x80000001DF008770;
                                                                                                                                                                                  v184 = v183;
                                                                                                                                                                                  v6 = 319;
                                                                                                                                                                                  if ((result & 1) == 0 && !v184)
                                                                                                                                                                                  {
                                                                                                                                                                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                    if ((result & 1) != 0)
                                                                                                                                                                                      goto LABEL_1888;
                                                                                                                                                                                    if (v4 == 0x74636E7570707573 && a2 == 0xEE006E6F69746175)
                                                                                                                                                                                    {
LABEL_1900:
                                                                                                                                                                                      v6 = 103;
                                                                                                                                                                                      goto LABEL_5;
                                                                                                                                                                                    }
                                                                                                                                                                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                    v185 = v4 == 0xD000000000000017 && a2 == 0x80000001DF008790;
                                                                                                                                                                                    v186 = v185;
                                                                                                                                                                                    v6 = 103;
                                                                                                                                                                                    if ((result & 1) == 0 && !v186)
                                                                                                                                                                                    {
                                                                                                                                                                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                      if ((result & 1) != 0)
                                                                                                                                                                                        goto LABEL_1900;
                                                                                                                                                                                      if (v4 == 0xD000000000000018 && a2 == 0x80000001DF0087B0)
                                                                                                                                                                                      {
LABEL_1912:
                                                                                                                                                                                        v6 = 305;
                                                                                                                                                                                        goto LABEL_5;
                                                                                                                                                                                      }
                                                                                                                                                                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                      v187 = v4 == 0xD000000000000021 && a2 == 0x80000001DF0087D0;
                                                                                                                                                                                      v188 = v187;
                                                                                                                                                                                      v6 = 305;
                                                                                                                                                                                      if ((result & 1) == 0 && !v188)
                                                                                                                                                                                      {
                                                                                                                                                                                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                        if ((result & 1) != 0)
                                                                                                                                                                                          goto LABEL_1912;
                                                                                                                                                                                        if (v4 == 0x646E617265707573 && a2 == 0xEB00000000627573)
                                                                                                                                                                                        {
LABEL_1924:
                                                                                                                                                                                          v6 = 73;
                                                                                                                                                                                          goto LABEL_5;
                                                                                                                                                                                        }
                                                                                                                                                                                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                        v189 = v4 == 0xD000000000000019 && a2 == 0x80000001DF008800;
                                                                                                                                                                                        v190 = v189;
                                                                                                                                                                                        v6 = 73;
                                                                                                                                                                                        if ((result & 1) == 0 && !v190)
                                                                                                                                                                                        {
                                                                                                                                                                                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                          if ((result & 1) != 0)
                                                                                                                                                                                            goto LABEL_1924;
                                                                                                                                                                                          if (v4 == 0xD000000000000011 && a2 == 0x80000001DF008820 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                          {
                                                                                                                                                                                            v6 = 281;
                                                                                                                                                                                            goto LABEL_5;
                                                                                                                                                                                          }
                                                                                                                                                                                          if (v4 == 0x616E69746F6C7973 && a2 == 0xEB00000000697267 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                          {
                                                                                                                                                                                            v6 = 129;
                                                                                                                                                                                            goto LABEL_5;
                                                                                                                                                                                          }
                                                                                                                                                                                          if (v4 == 0xD000000000000019 && a2 == 0x80000001DF008840)
                                                                                                                                                                                          {
LABEL_1944:
                                                                                                                                                                                            v6 = 307;
                                                                                                                                                                                            goto LABEL_5;
                                                                                                                                                                                          }
                                                                                                                                                                                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                          v191 = v4 == 0xD00000000000001ELL && a2 == 0x80000001DF008860;
                                                                                                                                                                                          v192 = v191;
                                                                                                                                                                                          v6 = 307;
                                                                                                                                                                                          if ((result & 1) == 0 && !v192)
                                                                                                                                                                                          {
                                                                                                                                                                                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                            if ((result & 1) != 0)
                                                                                                                                                                                              goto LABEL_1944;
                                                                                                                                                                                            if (v4 == 0xD000000000000019 && a2 == 0x80000001DF008880 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                            {
                                                                                                                                                                                              v6 = 308;
                                                                                                                                                                                              goto LABEL_5;
                                                                                                                                                                                            }
                                                                                                                                                                                            if (v4 == 0x636169727973 && a2 == 0xE600000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                            {
                                                                                                                                                                                              v6 = 13;
                                                                                                                                                                                              goto LABEL_5;
                                                                                                                                                                                            }
                                                                                                                                                                                            if (v4 == 0x7573636169727973 && a2 == 0xE900000000000070)
                                                                                                                                                                                            {
LABEL_1964:
                                                                                                                                                                                              v6 = 19;
                                                                                                                                                                                              goto LABEL_5;
                                                                                                                                                                                            }
                                                                                                                                                                                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                            v193 = v4 == 0xD000000000000010 && a2 == 0x80000001DF0088A0;
                                                                                                                                                                                            v194 = v193;
                                                                                                                                                                                            v6 = 19;
                                                                                                                                                                                            if ((result & 1) == 0 && !v194)
                                                                                                                                                                                            {
                                                                                                                                                                                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                              if ((result & 1) != 0)
                                                                                                                                                                                                goto LABEL_1964;
                                                                                                                                                                                              if (v4 == 0x676F6C61676174 && a2 == 0xE700000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                              {
                                                                                                                                                                                                v6 = 44;
                                                                                                                                                                                                goto LABEL_5;
                                                                                                                                                                                              }
                                                                                                                                                                                              if (v4 == 0x61776E6162676174 && a2 == 0xE800000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                              {
                                                                                                                                                                                                v6 = 47;
                                                                                                                                                                                                goto LABEL_5;
                                                                                                                                                                                              }
                                                                                                                                                                                              if (v4 == 1936154996 && a2 == 0xE400000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                              {
                                                                                                                                                                                                v6 = 316;
                                                                                                                                                                                                goto LABEL_5;
                                                                                                                                                                                              }
                                                                                                                                                                                              if (v4 == 0x656C696174 && a2 == 0xE500000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                              {
                                                                                                                                                                                                v6 = 52;
                                                                                                                                                                                                goto LABEL_5;
                                                                                                                                                                                              }
                                                                                                                                                                                              if (v4 == 0x6D616874696174 && a2 == 0xE700000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                              {
                                                                                                                                                                                                v6 = 56;
                                                                                                                                                                                                goto LABEL_5;
                                                                                                                                                                                              }
                                                                                                                                                                                              if (v4 == 0x74656976696174 && a2 == 0xE700000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                              {
                                                                                                                                                                                                v6 = 141;
                                                                                                                                                                                                goto LABEL_5;
                                                                                                                                                                                              }
                                                                                                                                                                                              if (v4 == 0x6A6E617578696174 && a2 == 0xEB00000000676E69)
                                                                                                                                                                                              {
LABEL_2000:
                                                                                                                                                                                                v6 = 278;
                                                                                                                                                                                                goto LABEL_5;
                                                                                                                                                                                              }
                                                                                                                                                                                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                              v195 = v4 == 0xD000000000000012 && a2 == 0x80000001DF0088C0;
                                                                                                                                                                                              v196 = v195;
                                                                                                                                                                                              v6 = 278;
                                                                                                                                                                                              if ((result & 1) == 0 && !v196)
                                                                                                                                                                                              {
                                                                                                                                                                                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                if ((result & 1) != 0)
                                                                                                                                                                                                  goto LABEL_2000;
                                                                                                                                                                                                if (v4 == 0x69726B6174 && a2 == 0xE500000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                {
                                                                                                                                                                                                  v6 = 230;
                                                                                                                                                                                                  goto LABEL_5;
                                                                                                                                                                                                }
                                                                                                                                                                                                if (v4 == 0x6C696D6174 && a2 == 0xE500000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                {
                                                                                                                                                                                                  v6 = 27;
                                                                                                                                                                                                  goto LABEL_5;
                                                                                                                                                                                                }
                                                                                                                                                                                                if (v4 == 0x7075736C696D6174 && a2 == 0xE800000000000000)
                                                                                                                                                                                                {
LABEL_2020:
                                                                                                                                                                                                  v6 = 246;
                                                                                                                                                                                                  goto LABEL_5;
                                                                                                                                                                                                }
                                                                                                                                                                                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                v197 = v4 == 0x7075736C696D6174 && a2 == 0xEF746E656D656C70;
                                                                                                                                                                                                v198 = v197;
                                                                                                                                                                                                v6 = 246;
                                                                                                                                                                                                if ((result & 1) == 0 && !v198)
                                                                                                                                                                                                {
                                                                                                                                                                                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                  if ((result & 1) != 0)
                                                                                                                                                                                                    goto LABEL_2020;
                                                                                                                                                                                                  if (v4 == 0x6173676E6174 && a2 == 0xE600000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                  {
                                                                                                                                                                                                    v6 = 256;
                                                                                                                                                                                                    goto LABEL_5;
                                                                                                                                                                                                  }
                                                                                                                                                                                                  if (v4 == 0x7475676E6174 && a2 == 0xE600000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                  {
                                                                                                                                                                                                    v6 = 262;
                                                                                                                                                                                                    goto LABEL_5;
                                                                                                                                                                                                  }
                                                                                                                                                                                                  if (v4 == 0xD000000000000010 && a2 == 0x80000001DF0088E0 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                  {
                                                                                                                                                                                                    v6 = 263;
                                                                                                                                                                                                    goto LABEL_5;
                                                                                                                                                                                                  }
                                                                                                                                                                                                  if (v4 == 0x75737475676E6174 && a2 == 0xE900000000000070)
                                                                                                                                                                                                  {
LABEL_2044:
                                                                                                                                                                                                    v6 = 265;
                                                                                                                                                                                                    goto LABEL_5;
                                                                                                                                                                                                  }
                                                                                                                                                                                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                  v199 = v4 == 0xD000000000000010 && a2 == 0x80000001DF008900;
                                                                                                                                                                                                  v200 = v199;
                                                                                                                                                                                                  v6 = 265;
                                                                                                                                                                                                  if ((result & 1) == 0 && !v200)
                                                                                                                                                                                                  {
                                                                                                                                                                                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                    if ((result & 1) != 0)
                                                                                                                                                                                                      goto LABEL_2044;
                                                                                                                                                                                                    if (v4 == 0x7567756C6574 && a2 == 0xE600000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                    {
                                                                                                                                                                                                      v6 = 28;
                                                                                                                                                                                                      goto LABEL_5;
                                                                                                                                                                                                    }
                                                                                                                                                                                                    if (v4 == 0x616E61616874 && a2 == 0xE600000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                    {
                                                                                                                                                                                                      v6 = 15;
                                                                                                                                                                                                      goto LABEL_5;
                                                                                                                                                                                                    }
                                                                                                                                                                                                    if (v4 == 1767991412 && a2 == 0xE400000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                    {
                                                                                                                                                                                                      v6 = 32;
                                                                                                                                                                                                      goto LABEL_5;
                                                                                                                                                                                                    }
                                                                                                                                                                                                    if (v4 == 0x6E617465626974 && a2 == 0xE700000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                    {
                                                                                                                                                                                                      v6 = 34;
                                                                                                                                                                                                      goto LABEL_5;
                                                                                                                                                                                                    }
                                                                                                                                                                                                    if (v4 == 0x6867616E69666974 && a2 == 0xE800000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                    {
                                                                                                                                                                                                      v6 = 100;
                                                                                                                                                                                                      goto LABEL_5;
                                                                                                                                                                                                    }
                                                                                                                                                                                                    if (v4 == 0x61747568726974 && a2 == 0xE700000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                    {
                                                                                                                                                                                                      v6 = 226;
                                                                                                                                                                                                      goto LABEL_5;
                                                                                                                                                                                                    }
                                                                                                                                                                                                    if (v4 == 1869901684 && a2 == 0xE400000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                    {
                                                                                                                                                                                                      v6 = 285;
                                                                                                                                                                                                      goto LABEL_5;
                                                                                                                                                                                                    }
                                                                                                                                                                                                    if (v4 == 0x726F70736E617274 && a2 == 0xEF70616D646E6174)
                                                                                                                                                                                                    {
LABEL_2084:
                                                                                                                                                                                                      v6 = 301;
                                                                                                                                                                                                      goto LABEL_5;
                                                                                                                                                                                                    }
                                                                                                                                                                                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                    v201 = v4 == 0xD000000000000016 && a2 == 0x80000001DF008920;
                                                                                                                                                                                                    v202 = v201;
                                                                                                                                                                                                    v6 = 301;
                                                                                                                                                                                                    if ((result & 1) == 0 && !v202)
                                                                                                                                                                                                    {
                                                                                                                                                                                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                      if ((result & 1) != 0)
                                                                                                                                                                                                        goto LABEL_2084;
                                                                                                                                                                                                      if (v4 == 1935762293 && a2 == 0xE400000000000000)
                                                                                                                                                                                                      {
LABEL_2104:
                                                                                                                                                                                                        v6 = 41;
                                                                                                                                                                                                        goto LABEL_5;
                                                                                                                                                                                                      }
                                                                                                                                                                                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                      v203 = v4 == 0xD000000000000022 && a2 == 0x80000001DF008940;
                                                                                                                                                                                                      v204 = v203;
                                                                                                                                                                                                      v6 = 41;
                                                                                                                                                                                                      if ((result & 1) == 0 && !v204)
                                                                                                                                                                                                      {
                                                                                                                                                                                                        result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                        v205 = v4 == 0xD000000000000011 && a2 == 0x80000001DF008970;
                                                                                                                                                                                                        v206 = v205;
                                                                                                                                                                                                        v6 = 41;
                                                                                                                                                                                                        if ((result & 1) == 0 && !v206)
                                                                                                                                                                                                        {
                                                                                                                                                                                                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                          if ((result & 1) != 0)
                                                                                                                                                                                                            goto LABEL_2104;
                                                                                                                                                                                                          if (v4 == 0x74786573616375 && a2 == 0xE700000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || (result = 0xD00000000000002ALL, v4 == 0xD00000000000002ALL) && a2 == 0x80000001DF008990 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                          {
                                                                                                                                                                                                            v6 = 50;
                                                                                                                                                                                                            goto LABEL_5;
                                                                                                                                                                                                          }
                                                                                                                                                                                                          if (v4 == 0x6174786573616375 && a2 == 0xE800000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0) || (result = 0xD00000000000002BLL, v4 == 0xD00000000000002BLL) && a2 == 0x80000001DF0089C0 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                          {
                                                                                                                                                                                                            v6 = 238;
                                                                                                                                                                                                            goto LABEL_5;
                                                                                                                                                                                                          }
                                                                                                                                                                                                          if (v4 == 0x6369746972616775 && a2 == 0xE800000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                          {
                                                                                                                                                                                                            v6 = 176;
                                                                                                                                                                                                            goto LABEL_5;
                                                                                                                                                                                                          }
                                                                                                                                                                                                          if (v4 == 6906230 && a2 == 0xE300000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                          {
                                                                                                                                                                                                            v6 = 124;
                                                                                                                                                                                                            goto LABEL_5;
                                                                                                                                                                                                          }
                                                                                                                                                                                                          if (v4 == 0x7478656369646576 && a2 == 0xE800000000000000)
                                                                                                                                                                                                          {
LABEL_2138:
                                                                                                                                                                                                            v6 = 66;
                                                                                                                                                                                                            goto LABEL_5;
                                                                                                                                                                                                          }
                                                                                                                                                                                                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                          v207 = v4 == 0x7478656369646576 && a2 == 0xEF736E6F69736E65;
                                                                                                                                                                                                          v208 = v207;
                                                                                                                                                                                                          v6 = 66;
                                                                                                                                                                                                          if ((result & 1) == 0 && !v208)
                                                                                                                                                                                                          {
                                                                                                                                                                                                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                            if ((result & 1) != 0)
                                                                                                                                                                                                              goto LABEL_2138;
                                                                                                                                                                                                            if (v4 == 0x6C61636974726576 && a2 == 0xED0000736D726F66 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                            {
                                                                                                                                                                                                              v6 = 157;
                                                                                                                                                                                                              goto LABEL_5;
                                                                                                                                                                                                            }
                                                                                                                                                                                                            if (v4 == 0x6971756B68746976 && a2 == 0xE800000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                            {
                                                                                                                                                                                                              v6 = 184;
                                                                                                                                                                                                              goto LABEL_5;
                                                                                                                                                                                                            }
                                                                                                                                                                                                            if (v4 == 29558 && a2 == 0xE200000000000000)
                                                                                                                                                                                                            {
LABEL_2158:
                                                                                                                                                                                                              v6 = 156;
                                                                                                                                                                                                              goto LABEL_5;
                                                                                                                                                                                                            }
                                                                                                                                                                                                            result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                            v209 = v4 == 0xD000000000000012 && a2 == 0x80000001DF0089F0;
                                                                                                                                                                                                            v210 = v209;
                                                                                                                                                                                                            v6 = 156;
                                                                                                                                                                                                            if ((result & 1) == 0 && !v210)
                                                                                                                                                                                                            {
                                                                                                                                                                                                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                              if ((result & 1) != 0)
                                                                                                                                                                                                                goto LABEL_2158;
                                                                                                                                                                                                              if (v4 == 0x7075737376 && a2 == 0xE500000000000000)
                                                                                                                                                                                                              {
LABEL_2170:
                                                                                                                                                                                                                v6 = 317;
                                                                                                                                                                                                                goto LABEL_5;
                                                                                                                                                                                                              }
                                                                                                                                                                                                              result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                              v211 = v4 == 0xD00000000000001CLL && a2 == 0x80000001DF008A10;
                                                                                                                                                                                                              v212 = v211;
                                                                                                                                                                                                              v6 = 317;
                                                                                                                                                                                                              if ((result & 1) == 0 && !v212)
                                                                                                                                                                                                              {
                                                                                                                                                                                                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                if ((result & 1) != 0)
                                                                                                                                                                                                                  goto LABEL_2170;
                                                                                                                                                                                                                if (v4 == 0x6F68636E6177 && a2 == 0xE600000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                                {
                                                                                                                                                                                                                  v6 = 286;
                                                                                                                                                                                                                  goto LABEL_5;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                if (v4 == 0x6963676E61726177 && a2 == 0xEA00000000006974 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                                {
                                                                                                                                                                                                                  v6 = 233;
                                                                                                                                                                                                                  goto LABEL_5;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                if (v4 == 0x6964697A6579 && a2 == 0xE600000000000000 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                                {
                                                                                                                                                                                                                  v6 = 208;
                                                                                                                                                                                                                  goto LABEL_5;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                if (v4 == 0x6163696461726979 && a2 == 0xEA0000000000736CLL || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                                {
                                                                                                                                                                                                                  v6 = 122;
                                                                                                                                                                                                                  goto LABEL_5;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                if (v4 == 0x62616C6C79736979 && a2 == 0xEB0000000073656CLL || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                                {
                                                                                                                                                                                                                  v6 = 121;
                                                                                                                                                                                                                  goto LABEL_5;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                if (v4 == 0x676E696A6979 && a2 == 0xE600000000000000)
                                                                                                                                                                                                                {
LABEL_2202:
                                                                                                                                                                                                                  v6 = 119;
                                                                                                                                                                                                                  goto LABEL_5;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                v214 = v4 == 0xD000000000000015 && a2 == 0x80000001DF008A30;
                                                                                                                                                                                                                v6 = 119;
                                                                                                                                                                                                                if ((result & 1) == 0 && !v214)
                                                                                                                                                                                                                {
                                                                                                                                                                                                                  result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                  if ((result & 1) != 0)
                                                                                                                                                                                                                    goto LABEL_2202;
                                                                                                                                                                                                                  if (v4 == 0x617A6162616E617ALL && a2 == 0xEF65726175717372 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                                                                                                                                                                                                                  {
                                                                                                                                                                                                                    v6 = 236;
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                  else if (v4 == 0x796E6E656D616E7ALL && a2 == 0xED0000636973756DLL)
                                                                                                                                                                                                                  {
                                                                                                                                                                                                                    v6 = 273;
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                  else
                                                                                                                                                                                                                  {
                                                                                                                                                                                                                    result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                    v216 = v4 == 0xD000000000000017 && a2 == 0x80000001DF008A50;
                                                                                                                                                                                                                    v6 = 273;
                                                                                                                                                                                                                    if ((result & 1) == 0 && !v216)
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                      result = _stringCompareWithSmolCheck(_:_:expecting:)();
                                                                                                                                                                                                                      if ((result & 1) != 0)
                                                                                                                                                                                                                        v6 = 273;
                                                                                                                                                                                                                      else
                                                                                                                                                                                                                        v6 = 321;
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                }
                                                                                                                                                                                                              }
                                                                                                                                                                                                            }
                                                                                                                                                                                                          }
                                                                                                                                                                                                        }
                                                                                                                                                                                                      }
                                                                                                                                                                                                    }
                                                                                                                                                                                                  }
                                                                                                                                                                                                }
                                                                                                                                                                                              }
                                                                                                                                                                                            }
                                                                                                                                                                                          }
                                                                                                                                                                                        }
                                                                                                                                                                                      }
                                                                                                                                                                                    }
                                                                                                                                                                                  }
                                                                                                                                                                                }
                                                                                                                                                                              }
                                                                                                                                                                            }
                                                                                                                                                                          }
                                                                                                                                                                        }
                                                                                                                                                                      }
                                                                                                                                                                    }
                                                                                                                                                                  }
                                                                                                                                                                }
                                                                                                                                                              }
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_5:
  *a3 = v6;
  return result;
}

uint64_t closure #1 in static Parser.classifySpecialPropValue(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v4;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a1 == 7958113 && a2 == 0xE300000000000000;
  if (v4
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x64656E6769737361 && a2 == 0xE800000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x6969637361 && a2 == 0xE500000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v7 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
    swift_storeEnumTagMultiPayload();
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
    v9 = a3;
    v10 = 0;
    v11 = v7;
  }
  else
  {
    v11 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
    v9 = a3;
    v10 = 1;
  }
  return v8(v9, v10, 1, v11);
}

unint64_t specialized Collection<>.firstIndex(of:)(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v8;
  char v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v14 = a4 >> 14;
  if (a4 >> 14 == a3 >> 14)
    return 0;
  if (Substring.subscript.getter() == a1 && v8 == a2)
  {
    v4 = a3;
LABEL_6:
    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v9 & 1) != 0)
    {
      return a3;
    }
    else
    {
      while (1)
      {
        v11 = Substring.index(after:)();
        if (v11 >> 14 == v14)
          return 0;
        v4 = v11;
        if (Substring.subscript.getter() == a1 && v12 == a2)
          goto LABEL_6;
        v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v10 & 1) != 0)
          return v4;
      }
    }
  }
  return v4;
}

uint64_t Parser.classifyCharacterPropertyValueOnly(_:)@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  Swift::String_optional v25;
  uint64_t countAndFlagsBits;
  unint64_t object;
  uint64_t v28;
  uint64_t v29;
  Swift::String_optional v30;
  char v32;
  char v33;
  BOOL v35;
  _QWORD *v36;
  uint64_t v37;
  _BYTE *v38;
  Swift::String v39;
  Swift::String v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  Swift::String v52;
  Swift::String v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  __int16 v64;
  __int128 v65;
  uint64_t v66;
  unint64_t v67;
  char v68;

  v3 = v2;
  v6 = type metadata accessor for Unicode.Scalar.Properties();
  v57 = *(_QWORD *)(v6 - 8);
  v58 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Atom.CharacterProperty.Kind?);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *a1;
  v20 = a1[1];
  v21 = a1[2];
  v22 = a1[3];
  if ((v20 & 0x2000000000000000) != 0)
    v23 = HIBYTE(v20) & 0xF;
  else
    v23 = *a1 & 0xFFFFFFFFFFFFLL;
  if (!v23)
  {
    v65 = 8uLL;
    v66 = 0;
    v67 = 0;
    v68 = 36;
    v36 = a2;
    v37 = v3;
    return error #1 (_:) in Parser.classifyCharacterPropertyValueOnly(_:)(&v65, v37, v21, v22, v19, v20, v36);
  }
  v55 = v22;
  v56 = v21;
  v59 = a2;
  specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)(v19, v20, (uint64_t)v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) != 1)
  {
    outlined init with take of AST.Atom.Kind((uint64_t)v13, (uint64_t)v18, type metadata accessor for AST.Atom.CharacterProperty.Kind);
    return outlined init with take of AST.Atom.Kind((uint64_t)v18, (uint64_t)v59, type metadata accessor for AST.Atom.CharacterProperty.Kind);
  }
  outlined destroy of _ASTParent?((uint64_t)v13, &demangling cache variable for type metadata for AST.Atom.CharacterProperty.Kind?);
  specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)(v19, v20, (char *)&v65);
  if (v65 != 67)
  {
    v38 = v59;
    *v59 = v65;
    v38[1] = 1;
    return swift_storeEnumTagMultiPayload();
  }
  specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)(v19, v20, (char *)&v65);
  if (v65 != 38)
  {
    *v59 = v65;
    return swift_storeEnumTagMultiPayload();
  }
  specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)(v19, v20, (char *)&v65);
  if (v65 != 163)
  {
    *v59 = v65;
    return swift_storeEnumTagMultiPayload();
  }
  specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)(v19, v20, (char *)&v65);
  if (v65 != 6)
  {
    *v59 = v65;
    return swift_storeEnumTagMultiPayload();
  }
  v62 = 0;
  v63 = 0xE000000000000000;
  *(_QWORD *)&v65 = v19;
  *((_QWORD *)&v65 + 1) = v20;
  v66 = 0;
  v67 = v23;
  swift_bridgeObjectRetain();
  v25 = String.Iterator.next()();
  result = v25.value._countAndFlagsBits;
  if (!v25.value._object)
  {
LABEL_45:
    swift_bridgeObjectRelease();
    v39 = String.lowercased()();
    swift_bridgeObjectRelease();
    v40._countAndFlagsBits = 28265;
    v40._object = (void *)0xE200000000000000;
    if (String.hasPrefix(_:)(v40))
    {
      v41 = specialized Collection.dropFirst(_:)(2uLL, v39._countAndFlagsBits, (unint64_t)v39._object);
      v43 = v42;
      v45 = v44;
      v47 = v46;
      swift_bridgeObjectRelease();
      v48 = MEMORY[0x1DF0F366C](v41, v43, v45, v47);
      v50 = v49;
      swift_bridgeObjectRelease();
      closure #1 in static Parser.classifyBlockProperty(_:valueOnly:)(v48, v50, &v64);
      swift_bridgeObjectRelease();
      v51 = v59;
      if (v64 != 321)
      {
        *(_WORD *)v59 = v64;
        return swift_storeEnumTagMultiPayload();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      v51 = v59;
    }
    swift_bridgeObjectRetain();
    v52._countAndFlagsBits = v19;
    v52._object = (void *)v20;
    AST.Atom.CharacterProperty.PCRESpecialCategory.init(rawValue:)(v52);
    if (v65 != 5)
    {
      *v51 = v65;
      return swift_storeEnumTagMultiPayload();
    }
    swift_bridgeObjectRetain();
    v53._countAndFlagsBits = v19;
    v53._object = (void *)v20;
    AST.Atom.CharacterProperty.JavaSpecial.init(rawValue:)(v53);
    if (v65 != 18)
    {
      *v51 = v65;
      return swift_storeEnumTagMultiPayload();
    }
    v65 = 0uLL;
    v66 = v19;
    v67 = v20;
    v68 = 18;
    v36 = v51;
    v37 = v3;
    v22 = v55;
    v21 = v56;
    return error #1 (_:) in Parser.classifyCharacterPropertyValueOnly(_:)(&v65, v37, v21, v22, v19, v20, v36);
  }
  countAndFlagsBits = v25.value._countAndFlagsBits;
  object = (unint64_t)v25.value._object;
  v29 = v57;
  v28 = v58;
  while ((object & 0x2000000000000000) != 0 ? HIBYTE(object) & 0xF : countAndFlagsBits & 0xFFFFFFFFFFFFLL)
  {
    if ((object & 0x1000000000000000) != 0)
    {
      _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((object & 0x2000000000000000) != 0)
      {
        v60 = countAndFlagsBits;
        v61 = object & 0xFFFFFFFFFFFFFFLL;
      }
      else if ((countAndFlagsBits & 0x1000000000000000) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }
      _decodeScalar(_:startingAt:)();
    }
    Unicode.Scalar.properties.getter();
    v32 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v28);
    if ((v32 & 1) == 0 && (countAndFlagsBits != 95 || object != 0xE100000000000000))
    {
      v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v35 = countAndFlagsBits == 45 && object == 0xE100000000000000;
      if ((v33 & 1) == 0 && !v35 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        MEMORY[0x1DF0F36FC](countAndFlagsBits, object);
    }
    swift_bridgeObjectRelease();
    v30 = String.Iterator.next()();
    result = v30.value._countAndFlagsBits;
    countAndFlagsBits = v30.value._countAndFlagsBits;
    object = (unint64_t)v30.value._object;
    if (!v30.value._object)
      goto LABEL_45;
  }
  __break(1u);
  return result;
}

uint64_t error #1 (_:) in Parser.classifyCharacterPropertyValueOnly(_:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v29[4];
  char v30;

  outlined init with take of ParseError(a1, (uint64_t)v29);
  v11 = v29[1];
  v12 = v29[2];
  v24 = v29[3];
  v25 = v29[0];
  v23 = v30;
  ParseError.description.getter();
  v14 = v13;
  v16 = v15;
  v17 = *(char **)(a2 + 72);
  outlined retain of ParseError((uint64_t)a1);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(a2 + 72) = v17;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v17 + 2) + 1, 1, v17);
    *(_QWORD *)(a2 + 72) = v17;
  }
  v20 = *((_QWORD *)v17 + 2);
  v19 = *((_QWORD *)v17 + 3);
  if (v20 >= v19 >> 1)
  {
    v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v19 > 1), v20 + 1, 1, v17);
    *(_QWORD *)(a2 + 72) = v17;
  }
  *((_QWORD *)v17 + 2) = v20 + 1;
  v21 = &v17[80 * v20];
  v21[32] = 1;
  *((_QWORD *)v21 + 5) = v14;
  *((_QWORD *)v21 + 6) = v16;
  *((_QWORD *)v21 + 7) = a3;
  *((_QWORD *)v21 + 8) = a4;
  *((_QWORD *)v21 + 9) = v25;
  *((_QWORD *)v21 + 10) = v11;
  *((_QWORD *)v21 + 11) = v12;
  *((_QWORD *)v21 + 12) = v24;
  v21[104] = v23;
  *a7 = 0;
  a7[1] = 0;
  a7[2] = a5;
  a7[3] = a6;
  type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
  swift_storeEnumTagMultiPayload();
  return swift_bridgeObjectRetain();
}

uint64_t Parser.classifyCharacterProperty(key:value:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char v58;
  _BYTE *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  unint64_t v74;
  char v75;

  v4 = v3;
  v70 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
  v8 = *(_QWORD *)(v70 - 8);
  MEMORY[0x1E0C80A78](v70, v9);
  v11 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Atom.CharacterProperty.Kind?);
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v16 = (char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v17);
  v19 = (char *)&v63 - v18;
  v20 = a1[1];
  v22 = a1[2];
  v21 = a1[3];
  v23 = *a2;
  v24 = a2[1];
  v25 = HIBYTE(v20) & 0xF;
  v71 = *a1;
  if ((v20 & 0x2000000000000000) == 0)
    v25 = v71 & 0xFFFFFFFFFFFFLL;
  if (!v25)
  {
    v49 = v22;
    v50 = v21;
    v51 = v23;
    v52 = *(char **)(v4 + 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v52 + 2) + 1, 1, v52);
    v54 = *((_QWORD *)v52 + 2);
    v53 = *((_QWORD *)v52 + 3);
    if (v54 >= v53 >> 1)
    {
      v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v53 > 1), v54 + 1, 1, v52);
      v56 = v49;
      v55 = v50;
      v52 = v60;
    }
    else
    {
      v55 = v50;
      v56 = v49;
    }
    *((_QWORD *)v52 + 2) = v54 + 1;
    v57 = &v52[80 * v54];
    v57[32] = 1;
    *((_QWORD *)v57 + 5) = 0xD000000000000016;
    *((_QWORD *)v57 + 6) = 0x80000001DF006B60;
    *((_QWORD *)v57 + 7) = v56;
    *((_QWORD *)v57 + 8) = v55;
    *((_QWORD *)v57 + 9) = 8;
    *((_QWORD *)v57 + 10) = 0;
    *((_QWORD *)v57 + 11) = 0;
    *((_QWORD *)v57 + 12) = 0;
    v57[104] = 36;
    *(_QWORD *)(v4 + 72) = v52;
    *a3 = v71;
    a3[1] = v20;
    a3[2] = v51;
    a3[3] = v24;
    return swift_storeEnumTagMultiPayload();
  }
  v69 = v4;
  v26 = a2[2];
  v27 = a2[3];
  v28 = HIBYTE(v24) & 0xF;
  if ((v24 & 0x2000000000000000) == 0)
    v28 = v23 & 0xFFFFFFFFFFFFLL;
  v29 = v23;
  if (!v28)
  {
    v72 = 8uLL;
    v73 = 0;
    v74 = 0;
    v75 = 36;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    valueError #1 (_:) in Parser.classifyCharacterProperty(key:value:)(&v72, v69, v26, v27, v71, v20, v29, v24, a3);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v65 = v21;
  v66 = v27;
  v64 = v22;
  v67 = a3;
  v68 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v30 = v71;
  specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)(v71, v20, (char *)&v72);
  v31 = v72;
  if (v72 != 67)
  {
    v32 = specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)(v68, v24);
    if (v32 != 2)
    {
      v58 = v32;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v59 = v67;
      *v67 = v31;
      v59[1] = v58 & 1;
      return swift_storeEnumTagMultiPayload();
    }
  }
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v62 = v30;
  v33 = v30;
  v35 = v68;
  v34 = v69;
  v36 = v66;
  specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)(v33, v20, v68, v24, v69, v24, v26, v66, (uint64_t)v19, v62, v20);
  outlined init with take of Source.Located<AST.Atom.Kind>?((uint64_t)v19, (uint64_t)v16, &demangling cache variable for type metadata for AST.Atom.CharacterProperty.Kind?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v16, 1, v70) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined init with take of AST.Atom.Kind((uint64_t)v16, (uint64_t)v11, type metadata accessor for AST.Atom.CharacterProperty.Kind);
    return outlined init with take of AST.Atom.Kind((uint64_t)v11, (uint64_t)v67, type metadata accessor for AST.Atom.CharacterProperty.Kind);
  }
  outlined destroy of _ASTParent?((uint64_t)v16, &demangling cache variable for type metadata for AST.Atom.CharacterProperty.Kind?);
  if (v26 >> 14 >= v64 >> 14)
    v37 = v64;
  else
    v37 = v26;
  if (v36 >> 14 >= v65 >> 14)
    v38 = v36;
  else
    v38 = v65;
  *(_QWORD *)&v72 = v71;
  *((_QWORD *)&v72 + 1) = v20;
  v73 = v35;
  v74 = v24;
  v75 = 18;
  if (v38 >> 14 < v37 >> 14)
  {
    __break(1u);
    goto LABEL_32;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ParseError.description.getter();
  v35 = v39;
  v19 = v40;
  v11 = *(char **)(v34 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_32:
    v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
  v41 = v71;
  v43 = *((_QWORD *)v11 + 2);
  v42 = *((_QWORD *)v11 + 3);
  v44 = v68;
  if (v43 >= v42 >> 1)
  {
    v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v42 > 1), v43 + 1, 1, v11);
    v44 = v68;
    v11 = v61;
  }
  *((_QWORD *)v11 + 2) = v43 + 1;
  v45 = &v11[80 * v43];
  v45[32] = 1;
  *((_QWORD *)v45 + 5) = v35;
  *((_QWORD *)v45 + 6) = v19;
  *((_QWORD *)v45 + 7) = v37;
  *((_QWORD *)v45 + 8) = v38;
  *((_QWORD *)v45 + 9) = v41;
  *((_QWORD *)v45 + 10) = v20;
  *((_QWORD *)v45 + 11) = v44;
  *((_QWORD *)v45 + 12) = v24;
  v45[104] = 18;
  v46 = v44;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v69 + 72) = v11;
  v47 = v67;
  *(_QWORD *)v67 = v41;
  v47[1] = v20;
  v47[2] = v46;
  v47[3] = v24;
  return swift_storeEnumTagMultiPayload();
}

uint64_t valueError #1 (_:) in Parser.classifyCharacterProperty(key:value:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v33[4];
  char v34;

  outlined init with take of ParseError(a1, (uint64_t)v33);
  v14 = v33[1];
  v27 = v33[2];
  v28 = v33[0];
  v26 = v33[3];
  v25 = v34;
  ParseError.description.getter();
  v16 = v15;
  v18 = v17;
  v19 = *(char **)(a2 + 72);
  outlined retain of ParseError((uint64_t)a1);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(a2 + 72) = v19;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v19 + 2) + 1, 1, v19);
    *(_QWORD *)(a2 + 72) = v19;
  }
  v22 = *((_QWORD *)v19 + 2);
  v21 = *((_QWORD *)v19 + 3);
  if (v22 >= v21 >> 1)
  {
    v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v22 + 1, 1, v19);
    *(_QWORD *)(a2 + 72) = v19;
  }
  *((_QWORD *)v19 + 2) = v22 + 1;
  v23 = &v19[80 * v22];
  v23[32] = 1;
  *((_QWORD *)v23 + 5) = v16;
  *((_QWORD *)v23 + 6) = v18;
  *((_QWORD *)v23 + 7) = a3;
  *((_QWORD *)v23 + 8) = a4;
  *((_QWORD *)v23 + 9) = v28;
  *((_QWORD *)v23 + 10) = v14;
  *((_QWORD *)v23 + 11) = v27;
  *((_QWORD *)v23 + 12) = v26;
  v23[104] = v25;
  *a9 = a5;
  a9[1] = a6;
  a9[2] = a7;
  a9[3] = a8;
  type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t closure #1 in Parser.classifyCharacterProperty(key:value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t (*v27)(_QWORD *, uint64_t, uint64_t, uint64_t);
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  unint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  BOOL v37;
  char v38;
  char v39;
  BOOL v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  BOOL v46;
  char v47;
  void (*v48)(char *, char *, uint64_t);
  char v49;
  BOOL v50;
  char v51;
  char v52;
  BOOL v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  unsigned int v60;
  unsigned __int8 *v61;
  unsigned int v62;
  char v63;
  uint64_t v64;
  unsigned __int8 *v65;
  unsigned int v66;
  uint64_t v67;
  unsigned __int8 *v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  unsigned __int8 *v72;
  unsigned int v73;
  __int128 *v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  char v85;

  v77 = a6;
  v78 = a7;
  v76 = a5;
  v79 = a10;
  v80 = a8;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Unicode.NumericType?);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v76 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Unicode.NumericType();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v21);
  v23 = (char *)&v76 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 == 0x747069726373 && a2 == 0xE600000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 25459 && a2 == 0xE200000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)(a3, a4, (char *)&v82);
    v24 = v82;
    if (v82 == 163)
    {
LABEL_8:
      *(_QWORD *)&v82 = a3;
      *((_QWORD *)&v82 + 1) = a4;
      v83 = 0;
      v84 = 0;
      v25 = 19;
LABEL_9:
      v85 = v25;
      valueError #1 (_:) in Parser.classifyCharacterProperty(key:value:)(&v82, v76, v77, v78, v80, v79, a3, a4, a9);
      v26 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
      v27 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56);
      v28 = a9;
      v29 = 0;
      return v27(v28, v29, 1, v26);
    }
    goto LABEL_10;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x80000001DF007550
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 7889779 && a2 == 0xE300000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)(a3, a4, (char *)&v82);
    v24 = v82;
    if (v82 == 163)
      goto LABEL_8;
    goto LABEL_10;
  }
  if (a1 == 25447 && a2 == 0xE200000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x636C6172656E6567 && a2 == 0xEF79726F67657461
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)(a3, a4, (char *)&v82);
    v24 = v82;
    if (v82 == 38)
    {
      *(_QWORD *)&v82 = a3;
      *((_QWORD *)&v82 + 1) = a4;
      v83 = 0;
      v84 = 0;
      v25 = 20;
      goto LABEL_9;
    }
LABEL_10:
    *(_BYTE *)a9 = v24;
    v30 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
    goto LABEL_11;
  }
  if (a1 == 6645601 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v32 = specialized static Parser.parseAge(_:)();
    if ((v34 & 1) != 0)
    {
      *(_QWORD *)&v82 = a3;
      *((_QWORD *)&v82 + 1) = a4;
      v83 = 0;
      v84 = 0;
      v25 = 22;
      goto LABEL_9;
    }
    *a9 = v32;
    a9[1] = v33;
    v30 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
LABEL_11:
    swift_storeEnumTagMultiPayload();
    v27 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56);
    v28 = a9;
    v29 = 0;
    v26 = v30;
    return v27(v28, v29, 1, v26);
  }
  if (a1 == 1701667182 && a2 == 0xE400000000000000
    || ((v36 = _stringCompareWithSmolCheck(_:_:expecting:)(), a1 == 24942)
      ? (v37 = a2 == 0xE200000000000000)
      : (v37 = 0),
        !v37 ? (v38 = 0) : (v38 = 1),
        (v36 & 1) != 0 || (v38 & 1) != 0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    *a9 = a3;
    a9[1] = a4;
    v35 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
LABEL_39:
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(a9, 0, 1, v35);
    return swift_bridgeObjectRetain();
  }
  if (a1 == 0x76636972656D756ELL && a2 == 0xEC00000065756C61
    || ((v39 = _stringCompareWithSmolCheck(_:_:expecting:)(), a1 == 30318)
      ? (v40 = a2 == 0xE200000000000000)
      : (v40 = 0),
        !v40 ? (v41 = 0) : (v41 = 1),
        (v39 & 1) != 0 || (v41 & 1) != 0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    *(_QWORD *)&v82 = 0;
    if (specialized String.withCString<A>(_:)(a3, a4))
    {
      *a9 = v82;
      v42 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
LABEL_62:
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(a9, 0, 1, v42);
    }
    *(_QWORD *)&v82 = a3;
    *((_QWORD *)&v82 + 1) = a4;
    v83 = 0;
    v84 = 0;
    v43 = 23;
    goto LABEL_64;
  }
  if (a1 == 0x74636972656D756ELL && a2 == 0xEB00000000657079
    || ((v45 = _stringCompareWithSmolCheck(_:_:expecting:)(), a1 == 29806)
      ? (v46 = a2 == 0xE200000000000000)
      : (v46 = 0),
        !v46 ? (v47 = 0) : (v47 = 1),
        (v45 & 1) != 0 || (v47 & 1) != 0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)(a3, a4, v18);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) != 1)
    {
      v48 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
      v48(v23, v18, v19);
      v48((char *)a9, v23, v19);
      v42 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
      goto LABEL_62;
    }
    outlined destroy of _ASTParent?((uint64_t)v18, &demangling cache variable for type metadata for Unicode.NumericType?);
    *(_QWORD *)&v82 = a3;
    *((_QWORD *)&v82 + 1) = a4;
    v83 = 0;
    v84 = 0;
    v43 = 24;
    goto LABEL_64;
  }
  if (a1 == 6515827 && a2 == 0xE300000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0xD000000000000016 && a2 == 0x80000001DF007570
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    *(_BYTE *)a9 = 0;
LABEL_86:
    a9[1] = a3;
    a9[2] = a4;
    v35 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
    goto LABEL_39;
  }
  if (a1 == 6518131 && a2 == 0xE300000000000000
    || ((v49 = _stringCompareWithSmolCheck(_:_:expecting:)(), a1 == 0xD000000000000016)
      ? (v50 = a2 == 0x80000001DF007590)
      : (v50 = 0),
        !v50 ? (v51 = 0) : (v51 = 1),
        (v49 & 1) != 0 || (v51 & 1) != 0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    *(_BYTE *)a9 = 1;
    goto LABEL_86;
  }
  if (a1 == 6517875 && a2 == 0xE300000000000000
    || ((v52 = _stringCompareWithSmolCheck(_:_:expecting:)(), a1 == 0xD000000000000016)
      ? (v53 = a2 == 0x80000001DF0075B0)
      : (v53 = 0),
        !v53 ? (v54 = 0) : (v54 = 1),
        (v52 & 1) != 0 || (v54 & 1) != 0 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)))
  {
    *(_BYTE *)a9 = 2;
    goto LABEL_86;
  }
  if (a1 != 6513507 || a2 != 0xE300000000000000)
  {
    result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if ((result & 1) == 0)
    {
      result = 0xD000000000000017;
      if (a1 != 0xD000000000000017 || a2 != 0x80000001DF0075D0)
      {
        result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0)
        {
          if ((a1 != 7040098 || a2 != 0xE300000000000000)
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
            && (a1 != 0x6B636F6C62 || a2 != 0xE500000000000000)
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            v26 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
            v27 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56);
            v28 = a9;
            v29 = 1;
            return v27(v28, v29, 1, v26);
          }
          specialized static Parser.withNormalizedForms<A>(_:requireInPrefix:match:)(a3, a4, (__int16 *)&v82);
          if ((unsigned __int16)v82 == 321)
          {
            *(_QWORD *)&v82 = a3;
            *((_QWORD *)&v82 + 1) = a4;
            v83 = 0;
            v84 = 0;
            v25 = 21;
            goto LABEL_9;
          }
          *(_WORD *)a9 = v82;
          v30 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
          goto LABEL_11;
        }
      }
    }
  }
  v55 = HIBYTE(a4) & 0xF;
  v56 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a4 & 0x2000000000000000) != 0)
    v57 = HIBYTE(a4) & 0xF;
  else
    v57 = a3 & 0xFFFFFFFFFFFFLL;
  if (!v57)
    goto LABEL_194;
  if ((a4 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    v60 = specialized _parseInteger<A, B>(ascii:radix:)(a3, a4, 10);
    swift_bridgeObjectRelease();
    if (((v60 >> 8) & 1) == 0)
    {
LABEL_181:
      if ((_BYTE)v60 != 0xFF)
      {
        Unicode.CanonicalCombiningClass.init(rawValue:)();
        v42 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
        goto LABEL_62;
      }
    }
LABEL_194:
    *(_QWORD *)&v82 = a3;
    *((_QWORD *)&v82 + 1) = a4;
    v83 = 0;
    v84 = 0;
    v43 = 25;
LABEL_64:
    v85 = v43;
    valueError #1 (_:) in Parser.classifyCharacterProperty(key:value:)(&v82, v76, v77, v78, v80, v79, a3, a4, a9);
    v44 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
    return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(a9, 0, 1, v44);
  }
  if ((a4 & 0x2000000000000000) == 0)
  {
    if ((a3 & 0x1000000000000000) != 0)
      result = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    else
      result = _StringObject.sharedUTF8.getter();
    v58 = *(unsigned __int8 *)result;
    if (v58 == 43)
    {
      if (v56 > 0)
      {
        v67 = v56 - 1;
        if (v56 != 1)
        {
          if (result)
          {
            LOBYTE(v60) = 0;
            v68 = (unsigned __int8 *)(result + 1);
            while (1)
            {
              v69 = *v68 - 48;
              if (v69 > 9)
                goto LABEL_179;
              if (((10 * v60) & 0xF00) != 0)
                goto LABEL_179;
              v60 = (10 * v60) + v69;
              if (((v60 >> 8) & 1) != 0)
                goto LABEL_179;
              v63 = 0;
              ++v68;
              if (!--v67)
                goto LABEL_180;
            }
          }
          goto LABEL_163;
        }
        goto LABEL_179;
      }
      goto LABEL_198;
    }
    if (v58 != 45)
    {
      if (v56)
      {
        if (result)
        {
          LOBYTE(v60) = 0;
          while (1)
          {
            v70 = *(unsigned __int8 *)result - 48;
            if (v70 > 9)
              goto LABEL_179;
            if (((10 * v60) & 0xF00) != 0)
              goto LABEL_179;
            v60 = (10 * v60) + v70;
            if (((v60 >> 8) & 1) != 0)
              goto LABEL_179;
            v63 = 0;
            ++result;
            if (!--v56)
              goto LABEL_180;
          }
        }
        goto LABEL_163;
      }
LABEL_179:
      LOBYTE(v60) = 0;
      v63 = 1;
LABEL_180:
      v81 = v63;
      if ((v63 & 1) == 0)
        goto LABEL_181;
      goto LABEL_194;
    }
    if (v56 > 0)
    {
      v59 = v56 - 1;
      if (v56 != 1)
      {
        if (result)
        {
          LOBYTE(v60) = 0;
          v61 = (unsigned __int8 *)(result + 1);
          while (1)
          {
            v62 = *v61 - 48;
            if (v62 > 9)
              goto LABEL_179;
            if (((10 * v60) & 0xF00) != 0)
              goto LABEL_179;
            v60 = (10 * v60) - v62;
            if ((v60 & 0xFFFFFF00) != 0)
              goto LABEL_179;
            v63 = 0;
            ++v61;
            if (!--v59)
              goto LABEL_180;
          }
        }
LABEL_163:
        LOBYTE(v60) = 0;
        v63 = 0;
        goto LABEL_180;
      }
      goto LABEL_179;
    }
    __break(1u);
LABEL_197:
    __break(1u);
LABEL_198:
    __break(1u);
    goto LABEL_199;
  }
  *(_QWORD *)&v82 = a3;
  *((_QWORD *)&v82 + 1) = a4 & 0xFFFFFFFFFFFFFFLL;
  if (a3 != 43)
  {
    if (a3 != 45)
    {
      if (v55)
      {
        LOBYTE(v60) = 0;
        v74 = &v82;
        while (1)
        {
          v75 = *(unsigned __int8 *)v74 - 48;
          if (v75 > 9)
            break;
          if (((10 * v60) & 0xF00) != 0)
            break;
          v60 = (10 * v60) + v75;
          if (((v60 >> 8) & 1) != 0)
            break;
          v63 = 0;
          v74 = (__int128 *)((char *)v74 + 1);
          if (!--v55)
            goto LABEL_180;
        }
      }
      goto LABEL_179;
    }
    if (v55)
    {
      v64 = v55 - 1;
      if (v64)
      {
        LOBYTE(v60) = 0;
        v65 = (unsigned __int8 *)&v82 + 1;
        while (1)
        {
          v66 = *v65 - 48;
          if (v66 > 9)
            break;
          if (((10 * v60) & 0xF00) != 0)
            break;
          v60 = (10 * v60) - v66;
          if ((v60 & 0xFFFFFF00) != 0)
            break;
          v63 = 0;
          ++v65;
          if (!--v64)
            goto LABEL_180;
        }
      }
      goto LABEL_179;
    }
    goto LABEL_197;
  }
  if (v55)
  {
    v71 = v55 - 1;
    if (v71)
    {
      LOBYTE(v60) = 0;
      v72 = (unsigned __int8 *)&v82 + 1;
      while (1)
      {
        v73 = *v72 - 48;
        if (v73 > 9)
          break;
        if (((10 * v60) & 0xF00) != 0)
          break;
        v60 = (10 * v60) + v73;
        if (((v60 >> 8) & 1) != 0)
          break;
        v63 = 0;
        ++v72;
        if (!--v71)
          goto LABEL_180;
      }
    }
    goto LABEL_179;
  }
LABEL_199:
  __break(1u);
  return result;
}

uint64_t currentRegexLiteralFormatVersion.getter()
{
  return 1;
}

uint64_t CompilerLexError.message.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CompilerLexError.message.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*CompilerLexError.message.modify())()
{
  return AST.root.modify;
}

uint64_t CompilerLexError.location.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t CompilerLexError.completelyErroneous.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t CompilerLexError.completelyErroneous.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 24) = result;
  return result;
}

uint64_t (*CompilerLexError.completelyErroneous.modify())()
{
  return AST.root.modify;
}

uint64_t swiftCompilerLexRegexLiteral(start:bufferEnd:mustBeRegex:)@<X0>(unsigned __int8 *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _BYTE v7[8];

  lexRegex(start:end:delimiters:)((uint64_t)v7, a1, a2, (uint64_t)&outlined read-only object #0 of swiftCompilerLexRegexLiteral(start:bufferEnd:mustBeRegex:));
  v5 = v4;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_BYTE *)(a3 + 32) = 0;
  return result;
}

int64_t lexRegex(start:end:)(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  uint64_t v3;
  int64_t result;
  uint64_t v5;

  result = lexRegex(start:end:delimiters:)(a1, a2, a3, (uint64_t)&outlined read-only object #0 of lexRegex(start:end:));
  if (v3)
    return v5;
  return result;
}

uint64_t DelimiterLexError.resumePtr.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t CompilerParseError.message.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CompilerParseError.message.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*CompilerParseError.message.modify())()
{
  return AST.root.modify;
}

uint64_t CompilerParseError.location.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t CompilerParseError.location.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = result;
  *(_BYTE *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*CompilerParseError.location.modify())()
{
  return AST.root.modify;
}

void (**swiftCompilerParseRegexLiteral(_:captureBufferOut:)(uint64_t a1, uint64_t a2, _WORD *a3))(__int128 *__return_ptr, uint64_t, void *)
{
  uint64_t v3;
  void (**object)(__int128 *__return_ptr, uint64_t, void *);
  Swift::String v6;
  __int128 v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  __int128 v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  __int128 v20;
  void (**v21)(__int128 *__return_ptr, uint64_t, void *);
  uint64_t v22;

  object = (void (**)(__int128 *__return_ptr, uint64_t, void *))a1;
  specialized parseWithDelimiters<A>(_:)(a1, a2, (uint64_t)&v19);
  if (v3)
  {
    *(_QWORD *)&v19 = 0;
    *((_QWORD *)&v19 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v19 = 0xD000000000000021;
    *((_QWORD *)&v19 + 1) = 0x80000001DF005040;
    *(_QWORD *)&v16 = v3;
    MEMORY[0x1DF0F3CD8](v3);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v6._countAndFlagsBits = String.init<A>(describing:)();
    object = (void (**)(__int128 *__return_ptr, uint64_t, void *))v6._object;
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7 = v19;
    v22 = v3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocatedErrorProtocol);
    v8 = swift_dynamicCast();
    if (v8)
    {
      v9 = *((_QWORD *)&v20 + 1);
      object = v21;
      __swift_project_boxed_opaque_existential_1Tm(&v19, *((uint64_t *)&v20 + 1));
      object[2](&v16, v9, object);
      v10 = v16;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v19);
    }
    else
    {
      v21 = 0;
      v19 = 0u;
      v20 = 0u;
      outlined destroy of _ASTParent?((uint64_t)&v19, &demangling cache variable for type metadata for LocatedErrorProtocol?);
      v10 = 0;
    }
    lazy protocol witness table accessor for type CompilerParseError and conformance CompilerParseError();
    swift_allocError();
    *(_OWORD *)v14 = v7;
    *(_QWORD *)(v14 + 16) = v10;
    *(_BYTE *)(v14 + 24) = v8 ^ 1;
    swift_willThrow();
  }
  else
  {
    static CaptureList.Builder.build(_:)((uint64_t *)&v19, (char **)&v16);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v22 = v16;
    CaptureList._captureStructure.getter((uint64_t)&v19);
    swift_bridgeObjectRelease();
    v11 = v19;
    v12 = v20;
    v13 = BYTE8(v20);
    v16 = v19;
    v17 = v20;
    v18 = BYTE8(v20);
    CaptureStructure.encode(to:)(a3);
    outlined consume of CaptureStructure(v11, *((uint64_t *)&v11 + 1), v12, v13);
    swift_bridgeObjectRetain();
  }
  return object;
}

uint64_t specialized parseWithDelimiters<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v4;
  Swift::String v5;
  unsigned __int128 v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned __int8 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[2];
  _QWORD v49[3];
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;

  *(_QWORD *)&v52 = a1;
  *((_QWORD *)&v52 + 1) = a2;
  swift_bridgeObjectRetain();
  v4 = (void *)String.init<A>(_:)();
  v5._countAndFlagsBits = (uint64_t)&v52;
  v5._object = v4;
  v6 = (unsigned __int128)droppingRegexDelimiters(_:)(v5);
  v7 = v6;
  v8 = *((_QWORD *)&v6 + 1);
  swift_bridgeObjectRelease();
  v9 = v52;
  v44 = *((_QWORD *)&v52 + 1);
  if ((v52 & 1) != 0)
  {
    v10 = 61;
  }
  else if (*((uint64_t *)&v52 + 1) >= 1
         && (specialized StringProtocol.spansMultipleLinesInRegexLiteral.getter(v7, v8) & 1) != 0)
  {
    v10 = 67;
  }
  else
  {
    v10 = 0;
  }
  specialized parseWithRecovery<A>(_:_:)(v7, v8, v10, (uint64_t)&v52);
  v11 = v53;
  v45 = v52;
  v12 = *(_QWORD *)(v53 + 16) + 1;
  v13 = v53;
  do
  {
    if (!--v12)
    {
      result = swift_bridgeObjectRelease();
      *(_OWORD *)a3 = v45;
      *(_QWORD *)(a3 + 16) = v11;
      return result;
    }
    v14 = v13 + 80;
    v15 = *(unsigned __int8 *)(v13 + 32);
    v13 += 80;
  }
  while (v15 > 1);
  v39 = v9;
  v16 = *(_QWORD *)(v14 - 32);
  v43 = *(_QWORD *)(v14 - 40);
  v17 = *(_QWORD *)(v14 - 24);
  v18 = *(_QWORD *)(v14 - 16);
  v19 = *(_QWORD *)v14;
  v20 = *(_QWORD *)(v14 + 8);
  v41 = *(_QWORD *)(v14 + 16);
  v42 = *(_QWORD *)(v14 - 8);
  v40 = *(_BYTE *)(v14 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()>);
  lazy protocol witness table accessor for type Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()> and conformance Source.LocatedError<A>(&lazy protocol witness table cache variable for type Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()> and conformance Source.LocatedError<A>, &demangling cache variable for type metadata for Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()>, (uint64_t)&protocol conformance descriptor for Source.LocatedError<A>);
  v21 = swift_allocError();
  *(_BYTE *)v22 = v15;
  *(_QWORD *)(v22 + 8) = v43;
  *(_QWORD *)(v22 + 16) = v16;
  *(_QWORD *)(v22 + 24) = v17;
  *(_QWORD *)(v22 + 32) = v18;
  *(_QWORD *)(v22 + 40) = v42;
  *(_QWORD *)(v22 + 48) = v19;
  *(_QWORD *)(v22 + 56) = v20;
  *(_QWORD *)(v22 + 64) = v41;
  *(_BYTE *)(v22 + 72) = v40;
  *(_QWORD *)(v22 + 80) = v17;
  *(_QWORD *)(v22 + 88) = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of ParseError?(v42, v19, v20, v41, v40);
  swift_willThrow();
  swift_bridgeObjectRelease_n();
  swift_release();
  swift_bridgeObjectRelease();
  v54 = v21;
  MEMORY[0x1DF0F3CD8](v21);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocatedErrorProtocol);
  if (!swift_dynamicCast())
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1DF0F3CCC](v54);
  }
  MEMORY[0x1DF0F3CCC](v21);
  outlined init with take of LocatedErrorProtocol(&v52, (uint64_t)v49);
  v23 = MEMORY[0x1DF0F378C](35, 0xE100000000000000, v44);
  if (v39)
    v25 = 31779;
  else
    v25 = 47;
  if (v39)
    v26 = (void *)0xE200000000000000;
  else
    v26 = (void *)0xE100000000000000;
  v48[0] = v23;
  v48[1] = v24;
  swift_bridgeObjectRetain();
  v27._countAndFlagsBits = v25;
  v27._object = v26;
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v28 = String.count.getter();
  swift_bridgeObjectRelease();
  v29 = v50;
  v30 = v51;
  __swift_project_boxed_opaque_existential_1Tm(v49, v50);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v30 + 16))(v48, v29, v30);
  v31 = String.distance(from:to:)();
  v32 = String.distance(from:to:)();
  result = swift_bridgeObjectRelease();
  if (v32 < v31)
  {
    __break(1u);
    goto LABEL_26;
  }
  if (__OFADD__(v28, v31))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  result = String.index(_:offsetBy:)();
  if (__OFADD__(v28, v32))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v34 = result;
  v35 = String.index(_:offsetBy:)();
  v36 = v50;
  v37 = v51;
  __swift_project_boxed_opaque_existential_1Tm(v49, v50);
  v38 = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 24))(v36, v37);
  result = swift_getErrorValue();
  if (v35 >> 14 >= v34 >> 14)
  {
    Error.addingLocation(_:)(v34, v35, v46, v47);
    MEMORY[0x1DF0F3CCC](v38);
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v49);
    return MEMORY[0x1DF0F3CCC](v54);
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t parseWithDelimiters<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  Swift::String v12;
  unsigned __int128 v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  Swift::String v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[4];
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  int v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[2];
  _QWORD v61[3];
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;

  MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2);
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8);
  v11 = (void *)String.init<A>(_:)();
  v12._countAndFlagsBits = (uint64_t)&v64;
  v12._object = v11;
  v13 = (unsigned __int128)droppingRegexDelimiters(_:)(v12);
  v14 = v13;
  v15 = *((_QWORD *)&v13 + 1);
  swift_bridgeObjectRelease();
  v56 = v64;
  v55 = *((_QWORD *)&v64 + 1);
  if ((v64 & 1) != 0)
  {
    v16 = 61;
  }
  else if (*((uint64_t *)&v64 + 1) >= 1
         && (specialized StringProtocol.spansMultipleLinesInRegexLiteral.getter(v14, v15) & 1) != 0)
  {
    v16 = 67;
  }
  else
  {
    v16 = 0;
  }
  specialized parseWithRecovery<A>(_:_:)(v14, v15, v16, (uint64_t)&v64);
  v17 = v65;
  v57 = v64;
  v18 = *(_QWORD *)(v65 + 16) + 1;
  v19 = v65;
  do
  {
    if (!--v18)
    {
      result = swift_bridgeObjectRelease();
      v48 = *((_QWORD *)&v57 + 1);
      *a4 = v57;
      a4[1] = v48;
      a4[2] = v17;
      return result;
    }
    v20 = v19 + 80;
    v21 = *(unsigned __int8 *)(v19 + 32);
    v19 += 80;
  }
  while (v21 > 1);
  v49[3] = v14;
  v54 = v15;
  v49[0] = v10;
  v49[1] = a2;
  v49[2] = a1;
  v22 = *(_QWORD *)(v20 - 32);
  v53 = *(_QWORD *)(v20 - 40);
  v23 = *(_QWORD *)(v20 - 24);
  v24 = *(_QWORD *)(v20 - 16);
  v25 = *(_QWORD *)v20;
  v52 = *(_QWORD *)(v20 - 8);
  v26 = *(_QWORD *)(v20 + 8);
  v51 = *(_QWORD *)(v20 + 16);
  v50 = *(unsigned __int8 *)(v20 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()>);
  lazy protocol witness table accessor for type Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()> and conformance Source.LocatedError<A>(&lazy protocol witness table cache variable for type Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()> and conformance Source.LocatedError<A>, &demangling cache variable for type metadata for Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()>, (uint64_t)&protocol conformance descriptor for Source.LocatedError<A>);
  v27 = swift_allocError();
  *(_BYTE *)v28 = v21;
  *(_QWORD *)(v28 + 8) = v53;
  *(_QWORD *)(v28 + 16) = v22;
  *(_QWORD *)(v28 + 24) = v23;
  *(_QWORD *)(v28 + 32) = v24;
  v29 = v52;
  *(_QWORD *)(v28 + 40) = v52;
  *(_QWORD *)(v28 + 48) = v25;
  v30 = v51;
  *(_QWORD *)(v28 + 56) = v26;
  *(_QWORD *)(v28 + 64) = v30;
  v31 = v50;
  *(_BYTE *)(v28 + 72) = v50;
  *(_QWORD *)(v28 + 80) = v23;
  *(_QWORD *)(v28 + 88) = v24;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of ParseError?(v29, v25, v26, v30, v31);
  swift_willThrow();
  swift_bridgeObjectRelease_n();
  swift_release();
  swift_bridgeObjectRelease();
  v66 = v27;
  MEMORY[0x1DF0F3CD8](v27);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocatedErrorProtocol);
  if (!swift_dynamicCast())
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1DF0F3CCC](v66);
  }
  MEMORY[0x1DF0F3CCC](v27);
  outlined init with take of LocatedErrorProtocol(&v64, (uint64_t)v61);
  v32 = MEMORY[0x1DF0F378C](35, 0xE100000000000000, v55);
  if (v56)
    v34 = 31779;
  else
    v34 = 47;
  if (v56)
    v35 = (void *)0xE200000000000000;
  else
    v35 = (void *)0xE100000000000000;
  v60[0] = v32;
  v60[1] = v33;
  swift_bridgeObjectRetain();
  v36._countAndFlagsBits = v34;
  v36._object = v35;
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v37 = String.count.getter();
  swift_bridgeObjectRelease();
  v38 = v62;
  v39 = v63;
  __swift_project_boxed_opaque_existential_1Tm(v61, v62);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v39 + 16))(v60, v38, v39);
  v40 = String.distance(from:to:)();
  v41 = String.distance(from:to:)();
  result = swift_bridgeObjectRelease();
  if (v41 < v40)
  {
    __break(1u);
    goto LABEL_26;
  }
  result = v37 + v40;
  if (__OFADD__(v37, v40))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  Collection.index(atOffset:)();
  result = v37 + v41;
  if (__OFADD__(v37, v41))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v43 = v60[0];
  Collection.index(atOffset:)();
  v44 = v60[0];
  v45 = v62;
  v46 = v63;
  __swift_project_boxed_opaque_existential_1Tm(v61, v62);
  v47 = (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 24))(v45, v46);
  result = swift_getErrorValue();
  if (v44 >> 14 >= v43 >> 14)
  {
    Error.addingLocation(_:)(v43, v44, v58, v59);
    MEMORY[0x1DF0F3CCC](v47);
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v61);
    return MEMORY[0x1DF0F3CCC](v66);
  }
LABEL_28:
  __break(1u);
  return result;
}

void Delimiter.hash(into:)()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *((_QWORD *)v0 + 1);
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

BOOL static Delimiter.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && *((_QWORD *)a1 + 1) == *((_QWORD *)a2 + 1);
}

Swift::Int Delimiter.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  Swift::UInt v2;

  v1 = *v0;
  v2 = *((_QWORD *)v0 + 1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Delimiter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  Swift::UInt v2;

  v1 = *v0;
  v2 = *((_QWORD *)v0 + 1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Delimiter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *((_QWORD *)v0 + 1);
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Delimiter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  Swift::UInt v2;

  v1 = *v0;
  v2 = *((_QWORD *)v0 + 1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Delimiter(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && *((_QWORD *)a1 + 1) == *((_QWORD *)a2 + 1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.AbsentFunction.Start()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for static CaseIterable.allCases.getter in conformance Delimiter.Kind(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of droppingRegexDelimiters(_:);
}

void DelimiterLexError.kind.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *DelimiterLexError.kind.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*DelimiterLexError.kind.modify())()
{
  return AST.root.modify;
}

uint64_t DelimiterLexError.description.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1DEFA5F78 + 4 * byte_1DEFFDAAC[*v0]))(0xD00000000000001ALL, 0x80000001DF005020);
}

uint64_t sub_1DEFA5F78(uint64_t a1)
{
  return a1 + 8;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DelimiterLexError()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1DEFA5FF4 + 4 * byte_1DEFFDAB1[*v0]))(0xD00000000000001ALL, 0x80000001DF005020);
}

uint64_t sub_1DEFA5FF4(uint64_t a1)
{
  return a1 + 8;
}

unint64_t specialized Sequence<>.elementsEqual<A>(_:)(unint64_t result, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  _BOOL8 v15;
  unsigned __int8 v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD v26[2];

  v4 = result;
  v5 = 0;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v7 = result & 0xFFFFFFFFFFFFLL;
  v23 = a3 + 32;
  v24 = result;
  v25 = v7;
  v8 = 4 * v7;
  v9 = (result >> 59) & 1;
  if ((a2 & 0x1000000000000000) == 0)
    LOBYTE(v9) = 1;
  v10 = 4 << v9;
  v19 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v20 = a2 & 0xFFFFFFFFFFFFFFLL;
  v11 = 15;
  v21 = 4 << v9;
  v22 = v8;
  while (1)
  {
    if (v5 == v6)
    {
      v12 = 0;
      v13 = v6;
      goto LABEL_10;
    }
    if (v5 >= v6)
      break;
    v12 = *(unsigned __int8 *)(v23 + v5);
    v13 = v5 + 1;
LABEL_10:
    v14 = v11 >> 14;
    v15 = v11 >> 14 == v8;
    if (v11 >> 14 == v8)
    {
      v16 = 0;
      if (v5 == v6)
        return v15;
      goto LABEL_30;
    }
    v17 = v11 & 0xC;
    result = v11;
    if (v17 == v10)
    {
      result = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, v24, a2);
      v10 = v21;
      v4 = v24;
    }
    v18 = result >> 16;
    if (result >> 16 >= v25)
      goto LABEL_34;
    if ((a2 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v10 = v21;
      v4 = v24;
      v16 = result;
      if (v17 == v21)
        goto LABEL_27;
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v26[0] = v4;
      v26[1] = v20;
      v16 = *((_BYTE *)v26 + v18);
      if (v17 == v10)
        goto LABEL_27;
    }
    else
    {
      result = v19;
      if ((v4 & 0x1000000000000000) == 0)
      {
        result = _StringObject.sharedUTF8.getter();
        v10 = v21;
        v4 = v24;
      }
      v16 = *(_BYTE *)(result + v18);
      if (v17 == v10)
      {
LABEL_27:
        result = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, v24, a2);
        v10 = v21;
        v4 = v24;
        v11 = result;
        v8 = v22;
        if ((a2 & 0x1000000000000000) == 0)
        {
LABEL_24:
          v11 = (v11 & 0xFFFFFFFFFFFF0000) + 65540;
          if (v5 == v6)
            return v15;
          goto LABEL_30;
        }
        goto LABEL_28;
      }
    }
    v8 = v22;
    if ((a2 & 0x1000000000000000) == 0)
      goto LABEL_24;
LABEL_28:
    if (v25 <= v11 >> 16)
      goto LABEL_35;
    result = String.UTF8View._foreignIndex(after:)();
    v10 = v21;
    v4 = v24;
    v11 = result;
    if (v5 == v6)
      return v15;
LABEL_30:
    v15 = 0;
    if (v14 != v8)
    {
      v5 = v13;
      if (v12 == v16)
        continue;
    }
    return v15;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

uint64_t specialized Sequence<>.elementsEqual<A>(_:)(uint64_t a1, char a2, unint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v15;
  char v16;
  uint64_t result;
  char v18;
  uint64_t v19;
  unint64_t v20;

  v10 = 0;
  v11 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000) == 0)
    LOBYTE(v11) = 1;
  v12 = 4 << v11;
  v13 = HIBYTE(a6) & 0xF;
  if ((a6 & 0x2000000000000000) == 0)
    v13 = a5 & 0xFFFFFFFFFFFFLL;
  v20 = v13;
  while (1)
  {
    v15 = a3 ^ a4;
    if ((a3 ^ a4) < 0x4000)
    {
      v16 = 0;
      goto LABEL_11;
    }
    result = Substring.UTF8View.subscript.getter();
    v16 = result;
    if ((a3 & 0xC) == v12)
    {
      result = _StringGuts._slowEnsureMatchingEncoding(_:)(a3, a5, a6);
      a3 = result;
      if ((a6 & 0x1000000000000000) == 0)
      {
LABEL_10:
        a3 = (a3 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_11;
      }
    }
    else if ((a6 & 0x1000000000000000) == 0)
    {
      goto LABEL_10;
    }
    if (v20 <= a3 >> 16)
      goto LABEL_25;
    a3 = String.UTF8View._foreignIndex(after:)();
LABEL_11:
    result = v10 == a1;
    if (v10 != a1)
      break;
    v18 = 0;
    v19 = a1;
    if (v15 < 0x4000)
      return result;
LABEL_17:
    result = 0;
    if (v10 != a1)
    {
      v10 = v19;
      if (v16 == v18)
        continue;
    }
    return result;
  }
  if ((v10 & 0x8000000000000000) == 0 && v10 < a1)
  {
    v19 = v10 + 1;
    v18 = a2;
    if (v15 < 0x4000)
      return result;
    goto LABEL_17;
  }
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

unint64_t specialized Sequence<>.elementsEqual<A>(_:)(unint64_t a1, unint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  char v13;
  int v14;
  unint64_t v15;
  _BOOL8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unint64_t v19;
  unint64_t result;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v28;
  _QWORD v29[2];

  v6 = a1;
  v7 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v7 = a1 & 0xFFFFFFFFFFFFLL;
  v28 = v7;
  v8 = 4 * v7;
  v9 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000) == 0)
    LOBYTE(v9) = 1;
  v10 = 4 << v9;
  v23 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v24 = a2 & 0xFFFFFFFFFFFFFFLL;
  v11 = 15;
  v25 = 4 << v9;
  v26 = a2;
  while (1)
  {
    if (a3)
    {
      if (!a4 || a3 != a4)
      {
LABEL_11:
        v13 = 0;
        v14 = *a3++;
        v12 = v14;
        goto LABEL_14;
      }
      v12 = 0;
    }
    else
    {
      if (a4)
        goto LABEL_11;
      v12 = 0;
      a3 = 0;
    }
    v13 = 1;
LABEL_14:
    v15 = v11 >> 14;
    v16 = v11 >> 14 == v8;
    if (v11 >> 14 == v8)
    {
      v17 = 0;
      if ((v13 & 1) != 0)
        return v16;
      goto LABEL_34;
    }
    v18 = a4;
    v19 = v11 & 0xC;
    result = v11;
    if (v19 == v10)
    {
      result = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a1, v26);
      v10 = v25;
      a2 = v26;
      v6 = a1;
    }
    v21 = result >> 16;
    if (result >> 16 >= v28)
      break;
    if ((a2 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v10 = v25;
      a2 = v26;
      v6 = a1;
      v17 = result;
      if (v19 == v25)
        goto LABEL_31;
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v29[0] = v6;
      v29[1] = v24;
      v17 = *((_BYTE *)v29 + v21);
      if (v19 == v10)
        goto LABEL_31;
    }
    else
    {
      result = v23;
      if ((v6 & 0x1000000000000000) == 0)
      {
        result = _StringObject.sharedUTF8.getter();
        v10 = v25;
        a2 = v26;
        v6 = a1;
      }
      v17 = *(_BYTE *)(result + v21);
      if (v19 == v10)
      {
LABEL_31:
        result = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a1, v26);
        v10 = v25;
        a2 = v26;
        v6 = a1;
        v11 = result;
        a4 = v18;
        if ((v26 & 0x1000000000000000) == 0)
        {
LABEL_28:
          v11 = (v11 & 0xFFFFFFFFFFFF0000) + 65540;
          if ((v13 & 1) != 0)
            return v16;
          goto LABEL_34;
        }
        goto LABEL_32;
      }
    }
    a4 = v18;
    if ((a2 & 0x1000000000000000) == 0)
      goto LABEL_28;
LABEL_32:
    if (v28 <= v11 >> 16)
      goto LABEL_38;
    v22 = String.UTF8View._foreignIndex(after:)();
    v10 = v25;
    a2 = v26;
    v6 = a1;
    v11 = v22;
    if ((v13 & 1) != 0)
      return v16;
LABEL_34:
    v16 = 0;
    if (v15 == v8 || v12 != v17)
      return v16;
  }
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

unint64_t specialized Sequence<>.elementsEqual<A>(_:)(unsigned __int8 *a1, unsigned __int8 *a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 v14;
  unint64_t v15;
  unint64_t result;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD v24[2];

  v8 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v8 = a3 & 0xFFFFFFFFFFFFLL;
  v23 = v8;
  v9 = 4 * v8;
  v10 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v10) = 1;
  v11 = 4 << v10;
  v21 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a4 & 0xFFFFFFFFFFFFFFLL;
  v12 = 15;
  while (1)
  {
    v13 = v12 >> 14;
    if (v12 >> 14 == v9)
    {
      v14 = 0;
      if (!a1)
        goto LABEL_28;
      goto LABEL_21;
    }
    v15 = v12 & 0xC;
    result = v12;
    if (v15 == v11)
      result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a3, a4);
    v17 = result >> 16;
    if (result >> 16 >= v23)
      break;
    if ((a4 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v14 = result;
      if (v15 != v11)
        goto LABEL_19;
    }
    else if ((a4 & 0x2000000000000000) != 0)
    {
      v24[0] = a3;
      v24[1] = v22;
      v14 = *((_BYTE *)v24 + v17);
      if (v15 != v11)
        goto LABEL_19;
    }
    else
    {
      result = v21;
      if ((a3 & 0x1000000000000000) == 0)
        result = _StringObject.sharedUTF8.getter();
      v14 = *(_BYTE *)(result + v17);
      if (v15 != v11)
      {
LABEL_19:
        if ((a4 & 0x1000000000000000) == 0)
          goto LABEL_20;
        goto LABEL_26;
      }
    }
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a3, a4);
    v12 = result;
    if ((a4 & 0x1000000000000000) == 0)
    {
LABEL_20:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      if (!a1)
        goto LABEL_28;
      goto LABEL_21;
    }
LABEL_26:
    if (v23 <= v12 >> 16)
      goto LABEL_40;
    v12 = String.UTF8View._foreignIndex(after:)();
    if (!a1)
    {
LABEL_28:
      if (a2)
        goto LABEL_29;
      v18 = 0;
      a1 = 0;
LABEL_32:
      result = 1;
      if (v13 == v9)
        return result;
      goto LABEL_33;
    }
LABEL_21:
    if (a2 && a1 == a2)
    {
      v18 = 0;
      goto LABEL_32;
    }
LABEL_29:
    result = 0;
    v19 = *a1++;
    v18 = v19;
    if (v13 == v9)
      return result;
LABEL_33:
    if (v18 == v14)
      v20 = result;
    else
      v20 = 1;
    if (v20 == 1)
      return 0;
  }
  __break(1u);
LABEL_40:
  __break(1u);
  return result;
}

unint64_t specialized Sequence<>.elementsEqual<A>(_:)(unint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t result;
  unint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v29;
  _QWORD v30[2];

  v10 = HIBYTE(a6) & 0xF;
  if ((a6 & 0x2000000000000000) == 0)
    v10 = a5 & 0xFFFFFFFFFFFFLL;
  v25 = v10;
  v11 = 4 * v10;
  v12 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000) == 0)
    LOBYTE(v12) = 1;
  v29 = 4 << v12;
  v23 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v24 = a6 & 0xFFFFFFFFFFFFFFLL;
  v13 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v13) = 1;
  v27 = 4 << v13;
  v14 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v14 = a3 & 0xFFFFFFFFFFFFLL;
  v22 = v14;
  swift_bridgeObjectRetain();
  v15 = 15;
  while (1)
  {
    v16 = v15 >> 14;
    if (v15 >> 14 == v11)
    {
      if ((a1 ^ a2) >= 0x4000)
      {
        v19 = 0;
        goto LABEL_30;
      }
      v21 = 1;
LABEL_41:
      swift_bridgeObjectRelease();
      return v21;
    }
    result = v15;
    if ((v15 & 0xC) == v29)
      result = _StringGuts._slowEnsureMatchingEncoding(_:)(v15, a5, a6);
    v18 = result >> 16;
    if (result >> 16 >= v25)
      break;
    if ((a6 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v19 = result;
    }
    else if ((a6 & 0x2000000000000000) != 0)
    {
      v30[0] = a5;
      v30[1] = v24;
      v19 = *((_BYTE *)v30 + v18);
    }
    else
    {
      result = v23;
      if ((a5 & 0x1000000000000000) == 0)
        result = _StringObject.sharedUTF8.getter();
      v19 = *(_BYTE *)(result + v18);
    }
    if ((v15 & 0xC) == v29)
    {
      result = _StringGuts._slowEnsureMatchingEncoding(_:)(v15, a5, a6);
      v15 = result;
      if ((a6 & 0x1000000000000000) == 0)
      {
LABEL_24:
        v15 = (v15 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_29;
      }
    }
    else if ((a6 & 0x1000000000000000) == 0)
    {
      goto LABEL_24;
    }
    if (v25 <= v15 >> 16)
      goto LABEL_43;
    v15 = String.UTF8View._foreignIndex(after:)();
LABEL_29:
    if ((a1 ^ a2) < 0x4000)
    {
      v21 = 0;
      goto LABEL_41;
    }
LABEL_30:
    result = Substring.UTF8View.subscript.getter();
    v20 = result;
    if ((a1 & 0xC) == v27)
    {
      result = _StringGuts._slowEnsureMatchingEncoding(_:)(a1, a3, a4);
      a1 = result;
      if ((a4 & 0x1000000000000000) != 0)
      {
LABEL_37:
        if (v22 <= a1 >> 16)
          goto LABEL_44;
        a1 = String.UTF8View._foreignIndex(after:)();
        goto LABEL_33;
      }
    }
    else if ((a4 & 0x1000000000000000) != 0)
    {
      goto LABEL_37;
    }
    a1 = (a1 & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_33:
    v21 = 0;
    if (v16 == v11 || v19 != v20)
      goto LABEL_41;
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

unint64_t specialized Sequence<>.elementsEqual<A>(_:)(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t result;
  unint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  _QWORD v31[2];

  v9 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000) == 0)
    LOBYTE(v9) = 1;
  if ((a6 & 0x2000000000000000) != 0)
    v10 = HIBYTE(a6) & 0xF;
  else
    v10 = a5 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v11 = HIBYTE(a2) & 0xF;
  else
    v11 = a1 & 0xFFFFFFFFFFFFLL;
  v12 = 4 << v9;
  v28 = 4 * v11;
  v13 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000) == 0)
    LOBYTE(v13) = 1;
  v14 = 4 << v13;
  v25 = a2 & 0xFFFFFFFFFFFFFFLL;
  v26 = v12;
  v23 = v10;
  v24 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  swift_bridgeObjectRetain();
  v15 = 15;
  while (1)
  {
    v16 = a3 ^ a4;
    if ((a3 ^ a4) < 0x4000)
    {
      if (v28 != v15 >> 14)
      {
        v17 = 0;
        goto LABEL_19;
      }
      v22 = 1;
LABEL_43:
      swift_bridgeObjectRelease();
      return v22;
    }
    result = Substring.UTF8View.subscript.getter();
    v17 = result;
    if ((a3 & 0xC) == v26)
    {
      result = _StringGuts._slowEnsureMatchingEncoding(_:)(a3, a5, a6);
      a3 = result;
      if ((a6 & 0x1000000000000000) == 0)
      {
LABEL_17:
        a3 = (a3 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_18;
      }
    }
    else if ((a6 & 0x1000000000000000) == 0)
    {
      goto LABEL_17;
    }
    if (v23 <= a3 >> 16)
      goto LABEL_46;
    a3 = String.UTF8View._foreignIndex(after:)();
LABEL_18:
    if (v28 == v15 >> 14)
    {
      v22 = 0;
      goto LABEL_43;
    }
LABEL_19:
    v19 = v15 & 0xC;
    result = v15;
    if (v19 == v14)
      result = _StringGuts._slowEnsureMatchingEncoding(_:)(v15, a1, a2);
    v20 = result >> 16;
    if (result >> 16 >= v11)
      break;
    if ((a2 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v21 = result;
      if (v19 != v14)
        goto LABEL_29;
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v31[0] = a1;
      v31[1] = v25;
      v21 = *((_BYTE *)v31 + v20);
      if (v19 != v14)
        goto LABEL_29;
    }
    else
    {
      result = v24;
      if ((a1 & 0x1000000000000000) == 0)
        result = _StringObject.sharedUTF8.getter();
      v21 = *(_BYTE *)(result + v20);
      if (v19 != v14)
      {
LABEL_29:
        if ((a2 & 0x1000000000000000) != 0)
          goto LABEL_33;
        goto LABEL_30;
      }
    }
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(v15, a1, a2);
    v15 = result;
    if ((a2 & 0x1000000000000000) != 0)
    {
LABEL_33:
      if (v11 <= v15 >> 16)
        goto LABEL_45;
      v15 = String.UTF8View._foreignIndex(after:)();
      goto LABEL_35;
    }
LABEL_30:
    v15 = (v15 & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_35:
    v22 = 0;
    if (v16 < 0x4000 || v17 != v21)
      goto LABEL_43;
  }
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
  return result;
}

uint64_t specialized BidirectionalCollection.lastIndex(where:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  BOOL v6;

  if (result)
  {
    v2 = result;
    v3 = a2 - result;
    if (a2 == result)
    {
      return 0;
    }
    else
    {
      result = a2 - result;
      while (!__OFSUB__(result--, 1))
      {
        if (result < 0 || result >= v3)
          goto LABEL_16;
        v5 = *(unsigned __int8 *)(v2 + result);
        v6 = v5 == 10 || v5 == 13;
        if (v6 || !result)
          return result;
      }
      __break(1u);
LABEL_16:
      __break(1u);
    }
  }
  return result;
}

uint64_t DelimiterLexer.advance(escaped:)(uint64_t result)
{
  _QWORD *v1;
  _BYTE *v2;
  unsigned int v3;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (_BYTE *)v1[1];
  if ((unint64_t)v2 >= v1[2])
  {
    if (v1[3])
      v5 = (_BYTE *)v1[3];
    else
      v5 = (_BYTE *)v1[1];
    lazy protocol witness table accessor for type DelimiterLexError and conformance DelimiterLexError();
    swift_allocError();
    *(_BYTE *)v6 = 0;
LABEL_17:
    *(_QWORD *)(v6 + 8) = v5;
    return swift_willThrow();
  }
  if ((char)*v2 < 0)
  {
LABEL_24:
    v1[1] = v2 + 1;
    return result;
  }
  v3 = *v2;
  if (v3 <= 0xC)
  {
    if (!*v2)
      goto LABEL_24;
    if (v3 != 10)
      goto LABEL_6;
    goto LABEL_21;
  }
  if (v3 != 92)
  {
    if (v3 != 13)
    {
LABEL_6:
      if (v3 - 32 < 0x5F)
        goto LABEL_24;
      if (v3 == 9 && v1[3] != 0)
        goto LABEL_24;
      v5 = v2 + 1;
      lazy protocol witness table accessor for type DelimiterLexError and conformance DelimiterLexError();
      swift_allocError();
      *(_BYTE *)v6 = 3;
      goto LABEL_17;
    }
LABEL_21:
    if (!v1[3])
    {
      lazy protocol witness table accessor for type DelimiterLexError and conformance DelimiterLexError();
      swift_allocError();
      *(_BYTE *)v7 = 0;
      *(_QWORD *)(v7 + 8) = v2;
      return swift_willThrow();
    }
    goto LABEL_24;
  }
  if ((result & 1) != 0)
    goto LABEL_24;
  v1[1] = v2 + 1;
  return DelimiterLexer.advance(escaped:)(1);
}

BOOL Unicode.Scalar.isPrintableASCII.getter(int a1)
{
  return (a1 - 32) < 0x5F;
}

Swift::tuple_String__RegexParser_Delimiter __swiftcall droppingRegexDelimiters(_:)(Swift::String a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t object;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  Swift::String v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  _RegexParser::Delimiter::Kind v59;
  Swift::Int v60;
  uint64_t v61;
  void *v62;
  uint64_t countAndFlagsBits;
  unint64_t v64;
  void *v65;
  unint64_t v66;
  int v67;
  unint64_t v68;
  __int128 v69[2];
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  Swift::tuple_String__RegexParser_Delimiter result;

  v2 = 0;
  object = HIBYTE(v1) & 0xF;
  if ((v1 & 0x2000000000000000) == 0)
    object = (uint64_t)a1._object;
  v65 = a1._object;
  v66 = v1;
  v4 = 7;
  if (((v1 >> 60) & (((uint64_t)a1._object & 0x800000000000000) == 0)) != 0)
    v4 = 11;
  countAndFlagsBits = a1._countAndFlagsBits;
  v64 = v4 | (object << 16);
  while (2)
  {
    v5 = outlined read-only object #0 of droppingRegexDelimiters(_:)[v2 + 32];
    v6 = specialized String.UTF8View.subscript.getter(15, v64, (unint64_t)v65, v66);
    v8 = v6;
    v9 = v7;
    v11 = v10;
    v13 = v12;
    if (v5 == 1)
    {
      swift_bridgeObjectRetain();
      v68 = 0;
      v14 = 0xE200000000000000;
      v15 = 31779;
      goto LABEL_33;
    }
    v16 = v7 >> 14;
    v17 = v6 >> 14;
    swift_bridgeObjectRetain();
    v18 = v8;
    if (v17 == v16)
      goto LABEL_28;
    v18 = v8;
    if (Substring.UTF8View.subscript.getter() != 35)
      goto LABEL_28;
    v67 = v5;
    v19 = (v11 >> 59) & 1;
    if ((v13 & 0x1000000000000000) == 0)
      LOBYTE(v19) = 1;
    v20 = 4 << v19;
    if ((v13 & 0x2000000000000000) != 0)
      v21 = HIBYTE(v13) & 0xF;
    else
      v21 = v11 & 0xFFFFFFFFFFFFLL;
    v18 = v8;
    while (1)
    {
      if ((v18 & 0xC) == v20)
      {
        v18 = _StringGuts._slowEnsureMatchingEncoding(_:)(v18, v11, v13);
        if ((v13 & 0x1000000000000000) == 0)
        {
LABEL_19:
          v18 = (v18 & 0xFFFFFFFFFFFF0000) + 65540;
          goto LABEL_23;
        }
      }
      else if ((v13 & 0x1000000000000000) == 0)
      {
        goto LABEL_19;
      }
      if (v21 <= v18 >> 16)
      {
        __break(1u);
        goto LABEL_52;
      }
      v18 = String.UTF8View._foreignIndex(after:)();
LABEL_23:
      v22 = v18 >> 14;
      if (v18 >> 14 == v16)
        break;
      if (Substring.UTF8View.subscript.getter() != 35)
        goto LABEL_27;
    }
    v22 = v9 >> 14;
LABEL_27:
    v5 = v67;
    if (v22 < v8 >> 14)
      goto LABEL_55;
LABEL_28:
    v23 = specialized Substring.UTF8View.subscript.getter(v8, v18, v8, v9, v11, v13);
    v27 = specialized Collection.count.getter(v23, v24, v25, v26);
    if ((v27 & 0x8000000000000000) != 0)
      goto LABEL_53;
    v68 = v27;
    v28 = Substring.UTF8View.index(_:offsetBy:limitedBy:)();
    if ((v29 & 1) != 0)
      v28 = v9;
    if (v16 < v28 >> 14)
    {
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    v8 = specialized Substring.UTF8View.subscript.getter(v28, v9, v8, v9, v11, v13);
    v9 = v30;
    v11 = v31;
    v33 = v32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v14 = 0xE100000000000000;
    v15 = 47;
    v13 = v33;
LABEL_33:
    v34 = specialized Collection<>.tryDropPrefix<A>(_:)(v15, v14, v8, v9, v11, v13);
    v36 = v35;
    v38 = v37;
    v40 = v39;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v40)
      goto LABEL_6;
    if (v5)
    {
      if (!v68)
      {
        v41 = 0xE200000000000000;
        v42 = 9084;
        goto LABEL_38;
      }
LABEL_56:
      __break(1u);
LABEL_57:
      v61 = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      goto LABEL_58;
    }
    v41 = 0xE100000000000000;
    v42 = 47;
LABEL_38:
    v43 = MEMORY[0x1DF0F378C](35, 0xE100000000000000);
    v45 = v44;
    v75 = v42;
    v76 = v41;
    swift_bridgeObjectRetain();
    v46._countAndFlagsBits = v43;
    v46._object = v45;
    String.append(_:)(v46);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v47 = specialized Collection<>.tryDropSuffix<A>(_:)(v75, v76, v34, v36, v38, v40);
    v49 = v48;
    v51 = v50;
    v53 = v52;
    swift_bridgeObjectRelease();
    if (v53)
    {
      swift_bridgeObjectRelease();
      v34 = v47;
      v36 = v49;
      v38 = v51;
      v40 = v53;
    }
    swift_bridgeObjectRetain();
    v54 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5063_sSS8decoding2asSSx_q_mtcSlRzs16_UnicodeEncodingR_8CodeUnitQy_7g26Rtzr0_lufcSSSRyAGGXEfU_Ss8jK14V_s0C0O0H0OTG5Tf1cn_n(v34, v36, v38, v40);
    if (!v55)
    {
      v71 = v34;
      v72 = v36;
      v73 = v38;
      v74 = v40;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _HasContiguousBytes);
      if ((swift_dynamicCast() & 1) != 0)
      {
        outlined init with take of LocatedErrorProtocol(v69, (uint64_t)&v75);
        __swift_project_boxed_opaque_existential_1Tm(&v75, v77);
        if ((dispatch thunk of _HasContiguousBytes._providesContiguousBytesNoCopy.getter() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          __swift_project_boxed_opaque_existential_1Tm(&v75, v77);
          dispatch thunk of _HasContiguousBytes.withUnsafeBytes<A>(_:)();
          v57 = *((_QWORD *)&v69[0] + 1);
          v56 = *(_QWORD *)&v69[0];
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v75);
          goto LABEL_48;
        }
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v75);
      }
      else
      {
        v70 = 0;
        memset(v69, 0, sizeof(v69));
        outlined destroy of _ASTParent?((uint64_t)v69, &demangling cache variable for type metadata for _HasContiguousBytes?);
      }
      v54 = specialized static String._fromNonContiguousUnsafeBitcastUTF8Repairing<A>(_:)(v34, v36, v38, v40);
    }
    v56 = v54;
    v57 = v55;
    swift_bridgeObjectRelease();
LABEL_48:
    swift_bridgeObjectRetain();
    v58 = specialized Sequence<>.elementsEqual<A>(_:)(v34, v36, v38, v40, v56, v57);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v58 & 1) == 0)
    {
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }
    if (!v57)
    {
LABEL_6:
      if (++v2 == 2)
        goto LABEL_57;
      continue;
    }
    break;
  }
  *(_BYTE *)countAndFlagsBits = v5;
  *(_QWORD *)(countAndFlagsBits + 8) = v68;
  v61 = v56;
  v62 = (void *)v57;
LABEL_58:
  result._1.poundCount = v60;
  result._0._object = v62;
  result._0._countAndFlagsBits = v61;
  result._1.kind = v59;
  return result;
}

unint64_t specialized Collection.count.getter(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)();
  }
  __break(1u);
  return result;
}

unint64_t specialized Collection.count.getter(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1;
  v3 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v3 = 11;
  return String.UnicodeScalarView.distance(from:to:)(0xFuLL, v3 | (v2 << 16), a1, a2);
}

uint64_t specialized Collection<>.tryDropPrefix<A>(_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10;
  uint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;

  v10 = a2;
  if ((a2 & 0x1000000000000000) == 0 || (String.UTF8View._foreignCount()() & 0x8000000000000000) == 0)
    goto LABEL_2;
  __break(1u);
LABEL_15:
  __break(1u);
  while (1)
  {
    __break(1u);
LABEL_2:
    v12 = Substring.UTF8View.index(_:offsetBy:limitedBy:)();
    if ((v13 & 1) != 0)
      v14 = a4;
    else
      v14 = v12;
    if (v14 >> 14 < a3 >> 14)
      goto LABEL_15;
    v15 = specialized Substring.UTF8View.subscript.getter(a3, v14, a3, a4, a5, a6);
    v17 = v16;
    v19 = v18;
    v21 = v20;
    swift_bridgeObjectRetain();
    v10 = specialized Sequence<>.elementsEqual<A>(_:)(a1, v10, v15, v17, v19, v21);
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0)
      return 0;
    swift_bridgeObjectRetain();
    v22 = Substring.UTF8View.index(_:offsetBy:limitedBy:)();
    if ((v23 & 1) != 0)
      v22 = a4;
    if (a4 >> 14 >= v22 >> 14)
    {
      v24 = specialized Substring.UTF8View.subscript.getter(v22, a4, a3, a4, a5, a6);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return v24;
    }
  }
}

uint64_t Collection<>.tryDropPrefix<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return Collection<>.tryDropPrefix<A>(_:)(a1, a2, a3, a4, a5, a6, MEMORY[0x1E0DEB648], MEMORY[0x1E0DEB678], a7);
}

uint64_t specialized Collection<>.tryDropSuffix<A>(_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  unint64_t v10;
  uint64_t v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;

  v10 = a2;
  if ((a2 & 0x1000000000000000) != 0)
  {
    v13 = String.UTF8View._foreignCount()();
    if ((v13 & 0x8000000000000000) == 0)
      goto LABEL_24;
    __break(1u);
    goto LABEL_20;
  }
  if ((a2 & 0x2000000000000000) != 0)
    v12 = HIBYTE(a2) & 0xF;
  else
    v12 = a1 & 0xFFFFFFFFFFFFLL;
  while (1)
  {
    v13 = specialized Collection.count.getter(a3, a4, a5, a6);
    if (__OFSUB__(v13, v12))
    {
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    swift_bridgeObjectRetain();
    v13 = Substring.UTF8View.index(_:offsetBy:limitedBy:)();
    if ((v14 & 1) != 0)
      v13 = a4;
    if (a4 >> 14 < v13 >> 14)
      goto LABEL_21;
    v26 = v12;
    v15 = specialized Substring.UTF8View.subscript.getter(v13, a4, a3, a4, a5, a6);
    v17 = v16;
    v19 = v18;
    v21 = v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v10 = specialized Sequence<>.elementsEqual<A>(_:)(a1, v10, v15, v17, v19, v21);
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0)
      return 0;
    v13 = specialized Collection.count.getter(a3, a4, a5, a6);
    if (__OFSUB__(v13, v26))
      goto LABEL_22;
    swift_bridgeObjectRetain();
    v13 = Substring.UTF8View.index(_:offsetBy:limitedBy:)();
    if ((v22 & 1) != 0)
      v23 = a4;
    else
      v23 = v13;
    if (v23 >> 14 >= a3 >> 14)
    {
      v24 = specialized Substring.UTF8View.subscript.getter(a3, v23, a3, a4, a5, a6);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return v24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    v12 = v13;
  }
}

uint64_t Collection<>.tryDropSuffix<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return Collection<>.tryDropPrefix<A>(_:)(a1, a2, a3, a4, a5, a6, MEMORY[0x1E0DEB658], MEMORY[0x1E0DEB670], a7);
}

uint64_t Collection<>.tryDropPrefix<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(uint64_t, uint64_t, uint64_t)@<X6>, void (*a8)(uint64_t, uint64_t, uint64_t)@<X7>, uint64_t a9@<X8>)
{
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;

  v29 = a8;
  v30 = a1;
  v33 = a7;
  v34 = a6;
  v31 = a3;
  v32 = a5;
  v35 = a9;
  v12 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v17);
  v19 = (char *)&v28 - v18;
  v20 = dispatch thunk of Collection.count.getter();
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v28 = v9;
  v22 = v20;
  v21(v14, v9, a2);
  v33(v22, a2, a4);
  swift_getAssociatedConformanceWitness();
  v23 = Sequence<>.elementsEqual<A>(_:)();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, AssociatedTypeWitness);
  if ((v23 & 1) != 0)
  {
    v21(v14, v28, a2);
    v24 = v35;
    v29(v22, a2, a4);
    v25 = 0;
    v26 = v24;
  }
  else
  {
    v25 = 1;
    v26 = v35;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(v26, v25, 1, AssociatedTypeWitness);
}

int64_t lexRegex(start:end:delimiters:)(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int64_t v31;
  unsigned __int8 *v32;
  unint64_t v33;
  unint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned __int8 *v39;
  unint64_t v40;
  int v41;
  unsigned __int8 *v42;
  uint64_t v43;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  Swift::String v50;
  unsigned __int8 *v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  int64_t v55;
  int64_t v56;
  int v57;
  unint64_t v59;
  unsigned __int8 *v60;
  uint64_t v61;
  char v62;
  unsigned __int8 *v63;
  unsigned __int8 *v64;
  unint64_t v65;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unsigned __int8 *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unsigned __int8 *v77;
  unsigned __int8 *v79;
  unint64_t v80;
  unsigned __int8 *v81;

  if (a3 < (unint64_t)a2)
    goto LABEL_110;
  v6 = v5;
  v7 = a4;
  v8 = (unsigned __int8 *)a3;
  v9 = a2;
  v79 = 0;
  if ((unint64_t)a2 < a3 && *a2 == 35)
  {
    if ((unint64_t)(a2 + 1) < a3 && a2[1] == 35)
    {
      v10 = 0;
      while (1)
      {
        v11 = &a2[v10 + 2];
        if ((unint64_t)v11 > a3)
          goto LABEL_109;
        v12 = v10 + 2;
        if (__OFADD__(v10 + 1, 1))
          goto LABEL_111;
        if (a3 - (_QWORD)a2 - 2 == v10)
          break;
        ++v10;
        if (*v11 != 35)
        {
          v9 = &a2[v10 + 1];
          goto LABEL_14;
        }
      }
      v9 = (unsigned __int8 *)a3;
      v12 = a3 - (_QWORD)a2;
    }
    else
    {
      v12 = 1;
      v9 = a2 + 1;
    }
  }
  else
  {
    v12 = 0;
  }
LABEL_14:
  v13 = *(_QWORD *)(a4 + 16);
  swift_bridgeObjectRetain_n();
  v74 = v13;
  if (v13)
  {
    v14 = 0;
    v73 = v7 + 32;
    v70 = v9;
    v71 = v7;
    v67 = v12;
    v68 = v5;
    v69 = (unint64_t)v8;
    while (v14 < *(_QWORD *)(v7 + 16))
    {
      v15 = *(unsigned __int8 *)(v73 + v14);
      if (*(_BYTE *)(v73 + v14))
        v16 = 31779;
      else
        v16 = 47;
      if (*(_BYTE *)(v73 + v14))
        v17 = 0xE200000000000000;
      else
        v17 = 0xE100000000000000;
      if (v15 != 1 || v12 == 0)
      {
        v4 = HIBYTE(v17) & 3;
        v19 = &v9[v4];
        if (&v9[v4] <= v8 && (specialized Sequence<>.elementsEqual<A>(_:)(v16, v17, v9, &v9[v4]) & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          v77 = &v9[v4];
          if ((v15 & 1) == 0 && v12 >= 1 && v19 < v8)
          {
            v63 = &v9[v4];
            v64 = &v9[v4];
            while (2)
            {
              switch(*v64)
              {
                case 9u:
                case 0x20u:
                  if (++v64 > v8)
                    goto LABEL_113;
                  if (v8 != ++v63)
                    continue;
                  v64 = v8;
LABEL_101:
                  v77 = v64;
                  break;
                case 0xAu:
                case 0xDu:
                  v77 = v64;
                  v79 = v63;
                  goto LABEL_62;
                default:
                  goto LABEL_101;
              }
              break;
            }
          }
LABEL_62:
          if (v15)
            v45 = 9084;
          else
            v45 = 47;
          v46 = 0xE100000000000000;
          if (v15)
            v46 = 0xE200000000000000;
          v75 = v46;
          v76 = v45;
          while (2)
          {
            v81 = v77;
            v47 = MEMORY[0x1DF0F378C](35, 0xE100000000000000, v12);
            v49 = v48;
            swift_bridgeObjectRetain();
            v50._countAndFlagsBits = v47;
            v50._object = v49;
            String.append(_:)(v50);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v51 = v77;
            v52 = HIBYTE(v75) & 0xF;
            if (a3 < (unint64_t)&v77[v52]
              || (specialized Sequence<>.elementsEqual<A>(_:)(v76, v75, v77, &v77[v52]) & 1) == 0)
            {
              swift_bridgeObjectRelease();
              v4 = 0;
              v52 = 0;
LABEL_71:
              if (v6)
              {
                swift_bridgeObjectRelease();
                return v4;
              }
              if (v52)
              {
                swift_bridgeObjectRelease();
                *(_BYTE *)a1 = v15;
                *(_QWORD *)(a1 + 8) = v12;
                return v4;
              }
              DelimiterLexer.advance(escaped:)(0);
              continue;
            }
            break;
          }
          v77 += v52;
          if (a3 < (unint64_t)&v51[v52])
            goto LABEL_112;
          swift_bridgeObjectRelease();
          v4 = v81 - v19;
          if (!v79)
            goto LABEL_89;
          v53 = specialized BidirectionalCollection.lastIndex(where:)((uint64_t)v19, (uint64_t)v81);
          if ((v54 & 1) != 0)
            goto LABEL_118;
          v55 = v53 + 1;
          if (__OFADD__(v53, 1))
            goto LABEL_114;
          if (v4 < v55)
            goto LABEL_115;
          if (v55 == v4)
          {
LABEL_89:
            v4 = static String._fromUTF8Repairing(_:)();
            v52 = v59;
            if ((specialized Sequence<>.elementsEqual<A>(_:)(v19, v81, v4, v59) & 1) != 0)
              goto LABEL_71;
            swift_bridgeObjectRelease();
            v60 = v77;
            lazy protocol witness table accessor for type DelimiterLexError and conformance DelimiterLexError();
            v6 = swift_allocError();
            v62 = 1;
          }
          else
          {
            v56 = v53 + 1;
            while (1)
            {
              if (v56 >= v4)
                goto LABEL_106;
              if (v55 < 0)
                goto LABEL_107;
              v57 = v19[v56];
              if (v57 != 32 && v57 != 9)
                break;
              if (v4 == ++v56)
                goto LABEL_89;
            }
            v60 = v77;
            lazy protocol witness table accessor for type DelimiterLexError and conformance DelimiterLexError();
            v6 = swift_allocError();
            v62 = 4;
          }
          *(_BYTE *)v61 = v62;
          *(_QWORD *)(v61 + 8) = v60;
          swift_willThrow();
          goto LABEL_71;
        }
        swift_bridgeObjectRelease_n();
        goto LABEL_17;
      }
      if (v12 <= 1)
      {
        v20 = specialized Collection.prefix(_:)(v12, 0x7C23uLL, 0xE200000000000000);
        if (v12 < 0)
          goto LABEL_108;
        v24 = v20;
        v25 = v21;
        v26 = v22;
        v27 = v23;
        swift_bridgeObjectRetain();
        v4 = specialized Sequence<>.elementsEqual<A>(_:)(v12, 35, v24, v25, v26, v27);
        swift_bridgeObjectRelease();
        v9 = v70;
        if ((v4 & 1) != 0)
        {
          v28 = specialized Collection.dropFirst(_:)(v12, 0x7C23uLL, 0xE200000000000000);
          v30 = v29;
          v4 = v31;
          v32 = v8;
          v34 = v33;
          swift_bridgeObjectRetain();
          v80 = v4;
          v35 = &v70[specialized Collection.count.getter(v28, v30, v4, v34)];
          if (v35 > v32)
          {
LABEL_38:
            swift_bridgeObjectRelease();
            v12 = v67;
            v6 = v68;
            v8 = (unsigned __int8 *)v69;
            v9 = v70;
LABEL_17:
            v7 = v71;
            goto LABEL_18;
          }
          v36 = ((unint64_t)v4 >> 59) & 1;
          if ((v34 & 0x1000000000000000) == 0)
            LOBYTE(v36) = 1;
          v72 = 4 << v36;
          v37 = HIBYTE(v34) & 0xF;
          if ((v34 & 0x2000000000000000) == 0)
            v37 = v4 & 0xFFFFFFFFFFFFLL;
          v65 = v37;
          v38 = v28;
          v39 = v70;
          while (2)
          {
            v40 = v38 ^ v30;
            if (v35 == v39)
            {
              if (v40 < 0x4000)
              {
                v19 = &v70[specialized Collection.count.getter(v28, v30, v80, v34)];
                v77 = v19;
                if ((unint64_t)v19 <= v69)
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v12 = 0;
                  v15 = 1;
                  v6 = v68;
                  goto LABEL_62;
                }
LABEL_116:
                __break(1u);
LABEL_117:
                __break(1u);
LABEL_118:
                __break(1u);
                JUMPOUT(0x1DEFA827CLL);
              }
              v41 = 0;
              v42 = v39;
            }
            else
            {
              if (v40 < 0x4000)
                goto LABEL_38;
              v42 = v39 + 1;
              v41 = *v39;
            }
            v4 = Substring.UTF8View.subscript.getter();
            if ((v38 & 0xC) == v72)
            {
              v38 = _StringGuts._slowEnsureMatchingEncoding(_:)(v38, v80, v34);
              if ((v34 & 0x1000000000000000) == 0)
                goto LABEL_51;
            }
            else if ((v34 & 0x1000000000000000) == 0)
            {
LABEL_51:
              v38 = (v38 & 0xFFFFFFFFFFFF0000) + 65540;
              if (v35 == v39)
                goto LABEL_38;
LABEL_52:
              v39 = v42;
              if (v41 != v4)
                goto LABEL_38;
              continue;
            }
            break;
          }
          if (v65 <= v38 >> 16)
            goto LABEL_117;
          v38 = String.UTF8View._foreignIndex(after:)();
          if (v35 == v39)
            goto LABEL_38;
          goto LABEL_52;
        }
      }
LABEL_18:
      if (++v14 == v74)
        goto LABEL_58;
    }
    __break(1u);
LABEL_106:
    __break(1u);
LABEL_107:
    __break(1u);
LABEL_108:
    __break(1u);
LABEL_109:
    __break(1u);
LABEL_110:
    __break(1u);
LABEL_111:
    __break(1u);
LABEL_112:
    __break(1u);
LABEL_113:
    __break(1u);
LABEL_114:
    __break(1u);
LABEL_115:
    __break(1u);
    goto LABEL_116;
  }
LABEL_58:
  swift_bridgeObjectRelease_n();
  lazy protocol witness table accessor for type DelimiterLexError and conformance DelimiterLexError();
  swift_allocError();
  *(_BYTE *)v43 = 2;
  *(_QWORD *)(v43 + 8) = v9 + 1;
  swift_willThrow();
  return v4;
}

void ParseError.hash(into:)()
{
  __int128 *v0;
  _QWORD v1[4];

  outlined init with take of ParseError(v0, (uint64_t)v1);
  __asm { BR              X10 }
}

uint64_t sub_1DEFA8328()
{
  Hasher._combine(_:)(0);
  return String.hash(into:)();
}

void sub_1DEFA8540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, Swift::UInt a11)
{
  Swift::UInt v11;

  Hasher._combine(_:)(0x34uLL);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(a11);
  JUMPOUT(0x1DEFA8528);
}

void sub_1DEFA8560()
{
  Hasher._combine(_:)(0x35uLL);
  String.hash(into:)();
  JUMPOUT(0x1DEFA8424);
}

void sub_1DEFA8590(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;

  if (a12 | a13 | v13 | a11)
  {
    v14 = a12 | a13 | a11;
    if (v13 == 1 && v14 == 0)
    {
      Hasher._combine(_:)(0xBuLL);
    }
    else if (v13 == 2 && v14 == 0)
    {
      Hasher._combine(_:)(0xCuLL);
    }
    else if (v13 != 3 || v14)
    {
      if (v13 != 4 || v14)
      {
        if (v13 != 5 || v14)
        {
          if (v13 != 6 || v14)
          {
            if (v13 != 7 || v14)
            {
              if (v13 != 8 || v14)
              {
                if (v13 != 9 || v14)
                {
                  if (v13 != 10 || v14)
                  {
                    if (v13 != 11 || v14)
                    {
                      if (v13 != 12 || v14)
                      {
                        if (v13 != 13 || v14)
                        {
                          if (v13 != 14 || v14)
                          {
                            if (v13 != 15 || v14)
                            {
                              if (v13 != 16 || v14)
                              {
                                if (v13 != 17 || v14)
                                  Hasher._combine(_:)(0x36uLL);
                                else
                                  Hasher._combine(_:)(0x33uLL);
                              }
                              else
                              {
                                Hasher._combine(_:)(0x32uLL);
                              }
                            }
                            else
                            {
                              Hasher._combine(_:)(0x2CuLL);
                            }
                          }
                          else
                          {
                            Hasher._combine(_:)(0x2BuLL);
                          }
                        }
                        else
                        {
                          Hasher._combine(_:)(0x2AuLL);
                        }
                      }
                      else
                      {
                        Hasher._combine(_:)(0x29uLL);
                      }
                    }
                    else
                    {
                      Hasher._combine(_:)(0x28uLL);
                    }
                  }
                  else
                  {
                    Hasher._combine(_:)(0x24uLL);
                  }
                }
                else
                {
                  Hasher._combine(_:)(0x23uLL);
                }
              }
              else
              {
                Hasher._combine(_:)(0x1AuLL);
              }
            }
            else
            {
              Hasher._combine(_:)(0x19uLL);
            }
          }
          else
          {
            Hasher._combine(_:)(0x18uLL);
          }
        }
        else
        {
          Hasher._combine(_:)(0x11uLL);
        }
      }
      else
      {
        Hasher._combine(_:)(0x10uLL);
      }
    }
    else
    {
      Hasher._combine(_:)(0xFuLL);
    }
  }
  else
  {
    Hasher._combine(_:)(4uLL);
  }
  JUMPOUT(0x1DEFA8528);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ParseError()
{
  __int128 *v0;
  _BYTE v2[40];

  outlined init with take of ParseError(v0, (uint64_t)v2);
  Hasher.init(_seed:)();
  ParseError.hash(into:)();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ParseError()
{
  __int128 *v0;
  _BYTE v1[40];

  outlined init with take of ParseError(v0, (uint64_t)v1);
  ParseError.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ParseError()
{
  __int128 *v0;
  _BYTE v2[40];

  outlined init with take of ParseError(v0, (uint64_t)v2);
  Hasher.init(_seed:)();
  ParseError.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ParseError(__int128 *a1, __int128 *a2)
{
  char v3;
  __int128 v5[2];
  _BYTE v6[40];

  outlined init with take of ParseError(a1, (uint64_t)v5);
  outlined init with take of ParseError(a2, (uint64_t)v6);
  specialized static ParseError.== infix(_:_:)(v5);
  return v3 & 1;
}

void ParseError.description.getter()
{
  __int128 *v0;
  _BYTE v1[8];
  _QWORD v2[4];

  outlined init with take of ParseError(v0, (uint64_t)v1);
  outlined init with take of ParseError(v0, (uint64_t)v2);
  __asm { BR              X10 }
}

unint64_t sub_1DEFA88EC()
{
  uint64_t v0;
  Swift::String v1;
  void *v3;

  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = v0;
  v1._object = v3;
  String.append(_:)(v1);
  return 0xD000000000000011;
}

void sub_1DEFA94E0()
{
  JUMPOUT(0x1DEFA94BCLL);
}

void protocol witness for CustomStringConvertible.description.getter in conformance ParseError()
{
  __int128 *v0;
  _BYTE v1[40];

  outlined init with take of ParseError(v0, (uint64_t)v1);
  ParseError.description.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance FatalParseError()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FatalParseError()
{
  Hasher._combine(_:)(0);
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FatalParseError()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FatalParseError(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FatalParseError()
{
  Swift::String *v0;
  Swift::String v1;
  _QWORD v3[2];

  v1 = *v0;
  strcpy((char *)v3, "UNREACHABLE: ");
  String.append(_:)(v1);
  return v3[0];
}

void Diagnostic.behavior.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t Diagnostic.message.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

__n128 Diagnostic.location.getter@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  __n128 result;

  result = *(__n128 *)(v1 + 24);
  *a1 = result;
  return result;
}

BOOL Diagnostic.isAnyError.getter()
{
  unsigned __int8 *v0;

  return *v0 < 2u;
}

BOOL Diagnostic.Behavior.isAnyError.getter()
{
  unsigned __int8 *v0;

  return *v0 < 2u;
}

void Diagnostic.hash(into:)()
{
  unsigned __int8 *v0;
  unint64_t v1;
  unint64_t v2;
  int v3;

  v2 = *((_QWORD *)v0 + 3);
  v1 = *((_QWORD *)v0 + 4);
  v3 = v0[72];
  Hasher._combine(_:)(*v0);
  String.hash(into:)();
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v1 >> 14);
  if (v3 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    ParseError.hash(into:)();
  }
}

BOOL static Diagnostic.Behavior.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int Diagnostic.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  unint64_t v2;
  unint64_t v3;
  int v4;

  v1 = *v0;
  v3 = *((_QWORD *)v0 + 3);
  v2 = *((_QWORD *)v0 + 4);
  v4 = v0[72];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  String.hash(into:)();
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  if (v4 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    ParseError.hash(into:)();
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Diagnostic()
{
  unsigned __int8 *v0;
  unint64_t v1;
  unint64_t v2;
  int v3;

  v2 = *((_QWORD *)v0 + 3);
  v1 = *((_QWORD *)v0 + 4);
  v3 = v0[72];
  Hasher._combine(_:)(*v0);
  String.hash(into:)();
  Hasher._combine(_:)(v2 >> 14);
  Hasher._combine(_:)(v1 >> 14);
  if (v3 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    ParseError.hash(into:)();
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Diagnostic()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  unint64_t v2;
  unint64_t v3;
  int v4;

  v1 = *v0;
  v3 = *((_QWORD *)v0 + 3);
  v2 = *((_QWORD *)v0 + 4);
  v4 = v0[72];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  String.hash(into:)();
  Hasher._combine(_:)(v3 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  if (v4 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    ParseError.hash(into:)();
  }
  return Hasher._finalize()();
}

void Diagnostic.Behavior.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Diagnostic.Behavior(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

_RegexParser::Diagnostics __swiftcall Diagnostics.init()()
{
  _QWORD *v0;
  _RegexParser::Diagnostics result;

  *v0 = MEMORY[0x1E0DEE9D8];
  return result;
}

uint64_t Diagnostics.append(_:)(char *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v16 = *a1;
  v2 = *((_QWORD *)a1 + 2);
  v14 = *((_QWORD *)a1 + 3);
  v15 = *((_QWORD *)a1 + 1);
  v3 = *((_QWORD *)a1 + 5);
  v13 = *((_QWORD *)a1 + 4);
  v4 = *((_QWORD *)a1 + 6);
  v5 = *((_QWORD *)a1 + 7);
  v6 = *((_QWORD *)a1 + 8);
  v7 = a1[72];
  v8 = *v1;
  swift_bridgeObjectRetain();
  outlined copy of ParseError?(v3, v4, v5, v6, v7);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v8 + 16) + 1, 1, (char *)v8);
    v8 = result;
  }
  v11 = *(_QWORD *)(v8 + 16);
  v10 = *(_QWORD *)(v8 + 24);
  if (v11 >= v10 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v11 + 1, 1, (char *)v8);
    v8 = result;
  }
  *(_QWORD *)(v8 + 16) = v11 + 1;
  v12 = v8 + 80 * v11;
  *(_BYTE *)(v12 + 32) = v16;
  *(_QWORD *)(v12 + 40) = v15;
  *(_QWORD *)(v12 + 48) = v2;
  *(_QWORD *)(v12 + 56) = v14;
  *(_QWORD *)(v12 + 64) = v13;
  *(_QWORD *)(v12 + 72) = v3;
  *(_QWORD *)(v12 + 80) = v4;
  *(_QWORD *)(v12 + 88) = v5;
  *(_QWORD *)(v12 + 96) = v6;
  *(_BYTE *)(v12 + 104) = v7;
  *v1 = v8;
  return result;
}

Swift::Void __swiftcall Diagnostics.append(contentsOf:)(_RegexParser::Diagnostics contentsOf)
{
  uint64_t v1;

  v1 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v1);
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v10 = v4 + v2;
  else
    v10 = v4;
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v10, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  if ((*(_QWORD *)(v3 + 24) >> 1) - *(_QWORD *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v7 = *(_QWORD *)(v3 + 16);
  v8 = __OFADD__(v7, v2);
  v9 = v7 + v2;
  if (!v8)
  {
    *(_QWORD *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

Swift::Void __swiftcall Diagnostics.appendNewFatalErrors(from:)(_RegexParser::Diagnostics from)
{
  char **v1;
  char **v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = v1;
  v3 = *v1;
  v4 = specialized Collection.dropFirst(_:)(*((_QWORD *)v3 + 2), *(_QWORD *)from.diags._rawValue);
  v6 = v5;
  v8 = v7;
  v10 = v9 >> 1;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v11 = v6 - 32;
  v12 = v8;
  v13 = v8;
LABEL_2:
  v14 = v11 + 80 * v12;
  while (1)
  {
    if (v10 == v13)
    {
      swift_unknownObjectRelease_n();
      return;
    }
    if (v12 < v8 || v13 >= v10)
      break;
    v15 = *(unsigned __int8 *)(v14 + 32);
    ++v13;
    v14 += 80;
    if (!v15)
    {
      v35 = v4;
      v30 = *(_QWORD *)(v14 - 24);
      v31 = *(_QWORD *)(v14 - 40);
      v16 = *(_QWORD *)(v14 - 8);
      v28 = v2;
      v29 = *(_QWORD *)(v14 - 16);
      v17 = *(_QWORD *)v14;
      v18 = *(_QWORD *)(v14 + 8);
      v19 = *(_QWORD *)(v14 + 16);
      v20 = v3;
      v21 = *(_BYTE *)(v14 + 24);
      v34 = *(_QWORD *)(v14 - 32);
      swift_bridgeObjectRetain();
      v33 = v16;
      v22 = v16;
      v23 = v17;
      v32 = v21;
      v24 = v21;
      v3 = v20;
      outlined copy of ParseError?(v22, v17, v18, v19, v24);
      v2 = v28;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v20 + 2) + 1, 1, v20);
      v26 = *((_QWORD *)v3 + 2);
      v25 = *((_QWORD *)v3 + 3);
      if (v26 >= v25 >> 1)
        v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v25 > 1), v26 + 1, 1, v3);
      *((_QWORD *)v3 + 2) = v26 + 1;
      v27 = &v3[80 * v26];
      v27[32] = 0;
      *((_QWORD *)v27 + 5) = v31;
      *((_QWORD *)v27 + 6) = v34;
      *((_QWORD *)v27 + 7) = v30;
      *((_QWORD *)v27 + 8) = v29;
      *((_QWORD *)v27 + 9) = v33;
      *((_QWORD *)v27 + 10) = v23;
      *((_QWORD *)v27 + 11) = v18;
      *((_QWORD *)v27 + 12) = v19;
      v27[104] = v32;
      *v28 = v3;
      v12 = v13;
      v4 = v35;
      goto LABEL_2;
    }
  }
  __break(1u);
}

uint64_t specialized Sequence.contains(where:)(uint64_t (*a1)(_BYTE *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  _BYTE v10[8];
  __int128 v11;

  v4 = *(_QWORD *)(a3 + 16);
  if (v4)
  {
    v6 = v4 - 1;
    v7 = (_OWORD *)(a3 + 40);
    do
    {
      v8 = v6;
      v10[0] = *((_BYTE *)v7 - 8);
      v11 = *v7;
      LOBYTE(v4) = (v3 != 0) | a1(v10);
      if ((v4 & 1) != 0)
        break;
      v6 = v8 - 1;
      v7 = (_OWORD *)((char *)v7 + 24);
    }
    while (v8);
  }
  return v4 & 1;
}

unint64_t specialized Sequence.contains(where:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t result;
  int v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = a4 & 0xFFFFFFFFFFFFFFLL;
  v20 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((a4 & 0x2000000000000000) != 0)
    v10 = HIBYTE(a4) & 0xF;
  else
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain();
  v11 = a1;
  while (1)
  {
    v12 = v11 ^ a2;
    if ((v11 ^ a2) < 0x4000)
    {
LABEL_37:
      swift_bridgeObjectRelease();
      return (v12 & 0xFFFFFFFFFFFFC000) != 0;
    }
    _StringGuts.validateScalarIndex(_:in:)(v11, a1, a2, a3, a4);
    if ((a4 & 0x1000000000000000) != 0)
    {
      result = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((a4 & 0x2000000000000000) != 0)
      {
        v21 = a3;
        v22 = v23;
      }
      else if ((a3 & 0x1000000000000000) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }
      result = _decodeScalar(_:startingAt:)();
    }
    v14 = result;
    if ((v11 & 0xC) != v9 && (v11 & 1) != 0)
      break;
    if ((v11 & 0xC) == v9)
    {
      result = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a3, a4);
      v11 = result;
      if (v10 <= result >> 16)
        goto LABEL_38;
    }
    else if (v10 <= v11 >> 16)
    {
      goto LABEL_38;
    }
    if ((v11 & 1) != 0)
      goto LABEL_21;
    v11 = v11 & 0xC | _StringGuts.scalarAlignSlow(_:)(v11, a3, a4) & 0xFFFFFFFFFFFFFFF3 | 1;
    if ((a4 & 0x1000000000000000) != 0)
    {
LABEL_35:
      v11 = String.UnicodeScalarView._foreignIndex(after:)();
      if (v14 == 10)
        goto LABEL_37;
      goto LABEL_36;
    }
LABEL_22:
    v15 = v11 >> 16;
    if ((a4 & 0x2000000000000000) != 0)
    {
      v21 = a3;
      v22 = v23;
      v17 = *((unsigned __int8 *)&v21 + v15);
    }
    else
    {
      v16 = v20;
      if ((a3 & 0x1000000000000000) == 0)
        v16 = _StringObject.sharedUTF8.getter();
      v17 = *(unsigned __int8 *)(v16 + v15);
    }
    v18 = (char)v17;
    v19 = __clz(v17 ^ 0xFF) - 24;
    if (v18 >= 0)
      LOBYTE(v19) = 1;
    v11 = ((v15 + v19) << 16) | 5;
    if (v14 == 10)
      goto LABEL_37;
LABEL_36:
    if (v14 == 13)
      goto LABEL_37;
  }
  if (v10 > v11 >> 16)
  {
LABEL_21:
    if ((a4 & 0x1000000000000000) != 0)
      goto LABEL_35;
    goto LABEL_22;
  }
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.contains(where:)(uint64_t (*a1)(_QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _BOOL4 v10;
  _QWORD v12[2];

  v4 = *(_QWORD *)(a3 + 16);
  if (v4)
  {
    v6 = (uint64_t *)(a3 + 40);
    v7 = v4 - 1;
    do
    {
      v8 = *v6;
      v12[0] = *(v6 - 1);
      v12[1] = v8;
      swift_bridgeObjectRetain();
      v9 = a1(v12);
      swift_bridgeObjectRelease();
      if (v3)
        break;
      v6 += 2;
      v10 = v7-- == 0;
    }
    while (((v9 | v10) & 1) == 0);
  }
  else
  {
    LOBYTE(v9) = 0;
  }
  return v9 & 1;
}

BOOL Diagnostics.hasFatalError.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;
  uint64_t v2;
  int v3;

  v1 = (unsigned __int8 *)(*(_QWORD *)v0 + 32);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 16) + 1;
  do
  {
    if (!--v2)
      break;
    v3 = *v1;
    v1 += 80;
  }
  while (v3);
  return v2 != 0;
}

void Diagnostics.hash(into:)(uint64_t a1)
{
  uint64_t *v1;

  specialized Array<A>.hash(into:)(a1, *v1);
}

Swift::Int Diagnostics.hashValue.getter()
{
  return AST.GlobalMatchingOptionSequence.hashValue.getter((void (*)(_BYTE *, uint64_t))specialized Array<A>.hash(into:));
}

Swift::Int AST.GlobalMatchingOptionSequence.hashValue.getter(void (*a1)(_BYTE *, uint64_t))
{
  uint64_t *v1;
  uint64_t v3;
  _BYTE v5[72];

  v3 = *v1;
  Hasher.init(_seed:)();
  a1(v5, v3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Diagnostics(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AST.GlobalMatchingOptionSequence(a1, a2, (void (*)(_BYTE *, uint64_t))specialized Array<A>.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.GlobalMatchingOptionSequence(uint64_t a1, uint64_t a2, void (*a3)(_BYTE *, uint64_t))
{
  uint64_t *v3;
  uint64_t v5;
  _BYTE v7[72];

  v5 = *v3;
  Hasher.init(_seed:)();
  a3(v7, v5);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Diagnostics(uint64_t a1)
{
  uint64_t *v1;

  specialized Array<A>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Diagnostics(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AST.GlobalMatchingOptionSequence(a1, a2, a3, (void (*)(_BYTE *, uint64_t))specialized Array<A>.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.GlobalMatchingOptionSequence(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *, uint64_t))
{
  uint64_t *v4;
  uint64_t v6;
  _BYTE v8[72];

  v6 = *v4;
  Hasher.init(_seed:)();
  a4(v8, v6);
  return Hasher._finalize()();
}

void protocol witness for static Equatable.== infix(_:_:) in conformance Diagnostics(uint64_t *a1, uint64_t *a2)
{
  specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ErrorDiagnostic #1 in Diagnostics.throwAnyError()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Source.Located.init(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD *v8;

  v5 = *a2;
  v6 = a2[1];
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a4, a1);
  result = type metadata accessor for Source.Located();
  v8 = (_QWORD *)(a4 + *(int *)(result + 28));
  *v8 = v5;
  v8[1] = v6;
  return result;
}

uint64_t specialized Parser.tryEating<A>(_:)@<X0>(uint64_t a1@<X0>, char **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  unint64_t v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  __int128 v61;
  uint64_t v62;
  unint64_t v63;
  __int128 v64;

  v6 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v53 = *(_BYTE *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 48);
  v51 = *(_QWORD *)(a1 + 56);
  v52 = *(_QWORD *)(a1 + 40);
  v50 = *(_BYTE *)(a1 + 64);
  v10 = *(_QWORD *)(a1 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits = 123;
  v11._object = (void *)0xE100000000000000;
  if (!Parser.tryEat(_:)(v11))
    goto LABEL_9;
  v12 = *(_QWORD *)(a1 + 16);
  result = specialized Parser.tryEating<A>(_:)((uint64_t *)a1, a2, &v59);
  v14 = v63;
  if (v60 >> 1 == 0xFFFFFFFF && v63 < 2)
  {
    v14 = 0;
    v58 = 0;
    v56 = 0;
    v57 = 0u;
    v15 = 0x1FFFFFFFELL;
    v55 = 0u;
  }
  else
  {
    if (*(_QWORD *)(a1 + 16) >> 14 < v12 >> 14)
    {
LABEL_27:
      __break(1u);
      return result;
    }
    v55 = v64;
    v58 = v62;
    v57 = v61;
    v56 = v59;
    v15 = v60;
    if (v63 > 1)
      goto LABEL_8;
  }
  if ((v15 & 0xFFFFFFFFFFFFFFFELL) == 0x1FFFFFFFELL)
  {
LABEL_9:
    v58 = 0;
    v14 = 0;
    v56 = 0;
    v57 = 0u;
    v15 = 0x1FFFFFFFELL;
    v55 = 0u;
    goto LABEL_10;
  }
LABEL_8:
  v16._countAndFlagsBits = 125;
  v16._object = (void *)0xE100000000000000;
  if (!Parser.tryEat(_:)(v16))
    goto LABEL_9;
LABEL_10:
  if (v14 <= 1 && (v15 & 0xFFFFFFFFFFFFFFFELL) == 0x1FFFFFFFELL)
  {
    v46 = v15;
    v47 = v8;
    v48 = v7;
    v49 = v14;
    v17 = *(_QWORD *)(a1 + 72);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    specialized Collection.dropFirst(_:)(*(_QWORD *)(v10 + 16), v17);
    v19 = v18;
    v21 = v20;
    v23 = v22 >> 1;
    swift_bridgeObjectRetain();
    result = swift_unknownObjectRetain();
    v24 = v19 - 32;
    v25 = v21;
    v26 = v21;
LABEL_13:
    v27 = v24 + 80 * v25;
    v14 = v49;
    while (1)
    {
      if (v23 == v26)
      {
        swift_bridgeObjectRelease();
        result = swift_unknownObjectRelease_n();
        *(_QWORD *)a1 = v6;
        *(_QWORD *)(a1 + 8) = v5;
        v15 = v46;
        *(_QWORD *)(a1 + 16) = v48;
        *(_QWORD *)(a1 + 24) = v47;
        *(_BYTE *)(a1 + 32) = v53;
        *(_QWORD *)(a1 + 40) = v52;
        *(_QWORD *)(a1 + 48) = v9;
        *(_QWORD *)(a1 + 56) = v51;
        *(_BYTE *)(a1 + 64) = v50;
        *(_QWORD *)(a1 + 72) = v10;
        goto LABEL_25;
      }
      if (v25 < v21 || v26 >= v23)
        break;
      v28 = *(unsigned __int8 *)(v27 + 32);
      ++v26;
      v27 += 80;
      if (!v28)
      {
        v44 = v5;
        v45 = v24;
        v42 = v6;
        v43 = v9;
        v39 = *(_QWORD *)(v27 - 24);
        v40 = *(_QWORD *)(v27 - 40);
        v29 = *(_QWORD *)(v27 - 8);
        v37 = *(_QWORD *)(v27 - 32);
        v38 = *(_QWORD *)(v27 - 16);
        v30 = *(_QWORD *)v27;
        v31 = *(_QWORD *)(v27 + 8);
        v32 = *(_QWORD *)(v27 + 16);
        v33 = *(_BYTE *)(v27 + 24);
        swift_bridgeObjectRetain();
        v41 = v29;
        outlined copy of ParseError?(v29, v30, v31, v32, v33);
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v10 + 16) + 1, 1, (char *)v10);
          v10 = result;
        }
        v35 = *(_QWORD *)(v10 + 16);
        v34 = *(_QWORD *)(v10 + 24);
        v24 = v45;
        if (v35 >= v34 >> 1)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v34 > 1), v35 + 1, 1, (char *)v10);
          v24 = v45;
          v10 = result;
        }
        *(_QWORD *)(v10 + 16) = v35 + 1;
        v36 = v10 + 80 * v35;
        *(_BYTE *)(v36 + 32) = 0;
        *(_QWORD *)(v36 + 40) = v40;
        *(_QWORD *)(v36 + 48) = v37;
        *(_QWORD *)(v36 + 56) = v39;
        *(_QWORD *)(v36 + 64) = v38;
        *(_QWORD *)(v36 + 72) = v41;
        *(_QWORD *)(v36 + 80) = v30;
        *(_QWORD *)(v36 + 88) = v31;
        *(_QWORD *)(v36 + 96) = v32;
        *(_BYTE *)(v36 + 104) = v33;
        v25 = v26;
        v9 = v43;
        v5 = v44;
        v6 = v42;
        goto LABEL_13;
      }
    }
    __break(1u);
    goto LABEL_27;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
LABEL_25:
  *(_QWORD *)a3 = v56;
  *(_QWORD *)(a3 + 8) = v15;
  *(_OWORD *)(a3 + 16) = v57;
  *(_QWORD *)(a3 + 32) = v58;
  *(_QWORD *)(a3 + 40) = v14;
  *(_OWORD *)(a3 + 48) = v55;
  return result;
}

uint64_t specialized Parser.tryEating<A>(_:)@<X0>(uint64_t *a1@<X0>, char **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  Swift::String v24;
  int v25;
  int v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t result;
  uint64_t v39;
  char *v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  Swift::String v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  char v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  char v109;

  v89 = a1[2];
  v90 = *a1;
  v88 = a1[3];
  v87 = *((_BYTE *)a1 + 32);
  v5 = a1[6];
  v85 = a1[7];
  v86 = a1[5];
  v84 = *((_BYTE *)a1 + 64);
  v6 = (char *)a1[9];
  v92 = a1[1];
  swift_bridgeObjectRetain();
  v91 = v5;
  swift_bridgeObjectRetain();
  v94 = v6;
  swift_bridgeObjectRetain();
  specialized Parser.tryEatPrefix(maxLength:_:)(0, 1, a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD *))specialized Source.peekPrefix(maxLength:_:), &v98);
  v7 = v99;
  if (!v99)
    goto LABEL_6;
  v8 = v98;
  v83 = v100;
  v9 = *a2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a2 = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_68;
  while (1)
  {
    v12 = *((_QWORD *)v9 + 2);
    v11 = *((_QWORD *)v9 + 3);
    if (v12 >= v11 >> 1)
    {
      v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1, v9, &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
      *a2 = v9;
    }
    *((_QWORD *)v9 + 2) = v12 + 1;
    v13 = &v9[32 * v12];
    *((_QWORD *)v13 + 4) = v8;
    *((_QWORD *)v13 + 5) = v7;
    *((_OWORD *)v13 + 3) = v83;
LABEL_6:
    Parser.lexNumber(_:)(1, (uint64_t)&v98);
    v78 = v98;
    v14 = v100;
    *(_QWORD *)&v83 = v99;
    v15 = *((_QWORD *)&v100 + 1);
    v16 = v101;
    specialized Parser.tryEatPrefix(maxLength:_:)(0, 1, a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD *))specialized Source.peekPrefix(maxLength:_:), &v98);
    v17 = v99;
    if (v99)
    {
      v18 = v98;
      v75 = v100;
      v19 = *a2;
      v20 = swift_isUniquelyReferenced_nonNull_native();
      *a2 = v19;
      if ((v20 & 1) == 0)
      {
        v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v19 + 2) + 1, 1, v19, &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
        *a2 = v19;
      }
      v22 = *((_QWORD *)v19 + 2);
      v21 = *((_QWORD *)v19 + 3);
      if (v22 >= v21 >> 1)
      {
        v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v22 + 1, 1, v19, &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
        *a2 = v19;
      }
      *((_QWORD *)v19 + 2) = v22 + 1;
      v23 = &v19[32 * v22];
      *((_QWORD *)v23 + 4) = v18;
      *((_QWORD *)v23 + 5) = v17;
      *((_OWORD *)v23 + 3) = v75;
    }
    v24._countAndFlagsBits = 44;
    v24._object = (void *)0xE100000000000000;
    v79 = v15;
    v81 = v14;
    if (Parser.tryEat(_:)(v24))
    {
LABEL_13:
      v25 = 0;
      v26 = 1;
      goto LABEL_23;
    }
    if ((a1[7] & 0x10) != 0
      && (v27._countAndFlagsBits = 46, v27._object = (void *)0xE100000000000000, Parser.tryEat(_:)(v27)))
    {
      v28._countAndFlagsBits = 46;
      v28._object = (void *)0xE100000000000000;
      if (!Parser.tryEat(_:)(v28))
      {
        v106 = xmmword_1DF003EF0;
        v107 = 0;
        v108 = 0;
        v109 = 3;
        Parser.errorAtCurrentPosition(_:)(&v106);
      }
      v29._countAndFlagsBits = 46;
      v29._object = (void *)0xE100000000000000;
      if (Parser.tryEat(_:)(v29))
        goto LABEL_13;
      v30._countAndFlagsBits = 60;
      v30._object = (void *)0xE100000000000000;
      if (!Parser.tryEat(_:)(v30))
      {
        v102 = xmmword_1DF003F00;
        v103 = 0;
        v104 = 0;
        v105 = 3;
        Parser.errorAtCurrentPosition(_:)(&v102);
      }
      v25 = 0;
      v26 = 0;
    }
    else
    {
      v26 = 0;
      v25 = 1;
    }
LABEL_23:
    specialized Parser.tryEatPrefix(maxLength:_:)(0, 1, a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD *))specialized Source.peekPrefix(maxLength:_:), &v98);
    v31 = v99;
    if (v99)
    {
      v32 = v98;
      v76 = v100;
      v33 = *a2;
      v34 = swift_isUniquelyReferenced_nonNull_native();
      *a2 = v33;
      if ((v34 & 1) == 0)
      {
        v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v33 + 2) + 1, 1, v33, &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
        *a2 = v33;
      }
      v36 = *((_QWORD *)v33 + 2);
      v35 = *((_QWORD *)v33 + 3);
      if (v36 >= v35 >> 1)
      {
        v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v35 > 1), v36 + 1, 1, v33, &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
        *a2 = v33;
      }
      *((_QWORD *)v33 + 2) = v36 + 1;
      v37 = &v33[32 * v36];
      *((_QWORD *)v37 + 4) = v32;
      *((_QWORD *)v37 + 5) = v31;
      *((_OWORD *)v37 + 3) = v76;
    }
    result = (uint64_t)Parser.lexNumber(_:)(1, (uint64_t)&v98);
    if (((v25 | v26) & 1) == 0 && (v101 & 1) == 0 && (v99 & 1) == 0)
      break;
LABEL_34:
    specialized Parser.tryEatPrefix(maxLength:_:)(0, 1, a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD *))specialized Source.peekPrefix(maxLength:_:), &v95);
    v8 = v96;
    if (v96)
    {
      v39 = v95;
      v77 = v97;
      v40 = *a2;
      v41 = swift_isUniquelyReferenced_nonNull_native();
      *a2 = v40;
      if ((v41 & 1) == 0)
      {
        v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v40 + 2) + 1, 1, v40, &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
        *a2 = v40;
      }
      v43 = *((_QWORD *)v40 + 2);
      v42 = *((_QWORD *)v40 + 3);
      if (v43 >= v42 >> 1)
      {
        v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v42 > 1), v43 + 1, 1, v40, &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
        *a2 = v40;
      }
      *((_QWORD *)v40 + 2) = v43 + 1;
      v44 = &v40[32 * v43];
      *((_QWORD *)v44 + 4) = v39;
      *((_QWORD *)v44 + 5) = v8;
      *((_OWORD *)v44 + 3) = v77;
    }
    v45 = *((_QWORD *)&v100 + 1);
    v46 = v100;
    if ((v16 & 1) != 0)
    {
      if ((v25 & 1) != 0)
      {
        if ((v101 & 1) == 0)
        {
          v47._object = (void *)0x80000001DF007410;
          v47._countAndFlagsBits = 0xD00000000000002ELL;
          Parser.unreachable(_:)(v47);
        }
      }
      else if ((v101 & 1) == 0)
      {
        v50 = 0;
        v48 = v99 & 1;
        v49 = 0x4000000000000000;
        v52 = *((_QWORD *)&v100 + 1);
        v51 = v100;
        v53 = v98;
        v46 = 0;
        v45 = 0;
        goto LABEL_54;
      }
    }
    else
    {
      v48 = v83 & 1;
      if ((v101 & 1) != 0)
      {
        if ((v25 & 1) != 0)
        {
          v45 = 0;
          v46 = 0;
          v49 = 0;
          v50 = 0;
          goto LABEL_53;
        }
        if ((v26 & 1) != 0)
        {
          v50 = 0;
          v46 = 0;
          v45 = 0;
          v49 = 0x2000000000000000;
LABEL_53:
          v52 = v79;
          v51 = v81;
          v53 = v78;
LABEL_54:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          result = swift_bridgeObjectRelease();
          *a3 = v53;
          a3[1] = v48;
          a3[2] = v51;
          a3[3] = v52;
          a3[4] = v50;
          a3[5] = v49;
          a3[6] = v46;
          a3[7] = v45;
          return result;
        }
      }
      else if ((v25 & 1) == 0)
      {
        v49 = v99 & 1 | 0x6000000000000000;
        v50 = v98;
        goto LABEL_53;
      }
    }
    v54 = a1[9];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7 = specialized Collection.dropFirst(_:)(*((_QWORD *)v94 + 2), v54);
    v56 = v55;
    v58 = v57;
    a2 = (char **)(v59 >> 1);
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    v60 = v56 - 32;
    v61 = v58;
    v9 = v58;
LABEL_56:
    v62 = v60 + 80 * (_QWORD)v61;
    while (1)
    {
      if (a2 == (char **)v9)
      {
        swift_bridgeObjectRelease();
        result = swift_unknownObjectRelease_n();
        *a1 = v90;
        a1[1] = v92;
        a1[2] = v89;
        a1[3] = v88;
        *((_BYTE *)a1 + 32) = v87;
        a1[5] = v86;
        a1[6] = v91;
        a1[7] = v85;
        *((_BYTE *)a1 + 64) = v84;
        a1[9] = (uint64_t)v94;
        *(_OWORD *)a3 = xmmword_1DF003F10;
        a3[2] = 0;
        a3[3] = 0;
        *((_OWORD *)a3 + 2) = 0u;
        *((_OWORD *)a3 + 3) = 0u;
        return result;
      }
      if ((uint64_t)v61 < (uint64_t)v58 || (uint64_t)v9 >= (uint64_t)a2)
        break;
      v63 = *(unsigned __int8 *)(v62 + 32);
      ++v9;
      v62 += 80;
      if (!v63)
      {
        v80 = v60;
        v82 = v7;
        v72 = *(_QWORD *)(v62 - 24);
        v73 = *(_QWORD *)(v62 - 40);
        v64 = *(_QWORD *)(v62 - 8);
        v71 = *(_QWORD *)(v62 - 16);
        v65 = *(_QWORD *)v62;
        v8 = *(_QWORD *)(v62 + 8);
        v66 = *(_QWORD *)(v62 + 16);
        v67 = *(_BYTE *)(v62 + 24);
        v74 = *(_QWORD *)(v62 - 32);
        swift_bridgeObjectRetain();
        outlined copy of ParseError?(v64, v65, v8, v66, v67);
        *(_QWORD *)&v83 = v54;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v94 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v94 + 2) + 1, 1, v94);
        v69 = *((_QWORD *)v94 + 2);
        v68 = *((_QWORD *)v94 + 3);
        if (v69 >= v68 >> 1)
          v94 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v68 > 1), v69 + 1, 1, v94);
        *((_QWORD *)v94 + 2) = v69 + 1;
        v70 = &v94[80 * v69];
        v70[32] = 0;
        *((_QWORD *)v70 + 5) = v73;
        *((_QWORD *)v70 + 6) = v74;
        *((_QWORD *)v70 + 7) = v72;
        *((_QWORD *)v70 + 8) = v71;
        v60 = v80;
        *((_QWORD *)v70 + 9) = v64;
        *((_QWORD *)v70 + 10) = v65;
        *((_QWORD *)v70 + 11) = v8;
        *((_QWORD *)v70 + 12) = v66;
        v70[104] = v67;
        v61 = v9;
        v7 = v82;
        v54 = v83;
        goto LABEL_56;
      }
    }
    __break(1u);
LABEL_68:
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v9 + 2) + 1, 1, v9, &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
    *a2 = v9;
  }
  if (!__OFSUB__(v98, 1))
  {
    --v98;
    goto LABEL_34;
  }
  __break(1u);
  return result;
}

uint64_t Parser.errorAtCurrentPosition(_:)(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[4];
  char v20;

  v2 = v1;
  outlined init with take of ParseError(a1, (uint64_t)v19);
  v4 = v19[2];
  v17 = v19[1];
  v18 = v19[0];
  v5 = v19[3];
  v6 = v20;
  v7 = *(_QWORD *)(v1 + 16);
  ParseError.description.getter();
  v9 = v8;
  v11 = v10;
  v12 = *(_QWORD *)(v1 + 72);
  outlined retain of ParseError((uint64_t)a1);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v12 + 16) + 1, 1, (char *)v12);
    v12 = result;
  }
  v15 = *(_QWORD *)(v12 + 16);
  v14 = *(_QWORD *)(v12 + 24);
  if (v15 >= v14 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v14 > 1), v15 + 1, 1, (char *)v12);
    v12 = result;
  }
  *(_QWORD *)(v12 + 16) = v15 + 1;
  v16 = v12 + 80 * v15;
  *(_BYTE *)(v16 + 32) = 1;
  *(_QWORD *)(v16 + 40) = v9;
  *(_QWORD *)(v16 + 48) = v11;
  *(_QWORD *)(v16 + 56) = v7;
  *(_QWORD *)(v16 + 64) = v7;
  *(_QWORD *)(v16 + 72) = v18;
  *(_QWORD *)(v16 + 80) = v17;
  *(_QWORD *)(v16 + 88) = v4;
  *(_QWORD *)(v16 + 96) = v5;
  *(_BYTE *)(v16 + 104) = v6;
  *(_QWORD *)(v2 + 72) = v12;
  return result;
}

Swift::Bool __swiftcall Parser.tryEat(_:)(Swift::String a1)
{
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v3;
  unint64_t v4;
  Swift::Bool v5;
  uint64_t v6;
  void *v7;
  void *v8;
  char v9;

  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v3 = String.subscript.getter();
  if ((v3 ^ v4) >> 14)
  {
    v6 = Substring.subscript.getter();
    v8 = v7;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    if (v6 == countAndFlagsBits && v8 == object)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v5 = 0;
      if ((v9 & 1) == 0)
        return v5;
    }
    v5 = 1;
    Parser.advance(_:)(1);
    return v5;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized Parser.tryEat<A>(sequence:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t result;
  uint64_t v26;
  _QWORD *v27;
  _QWORD v28[2];

  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  swift_bridgeObjectRetain();
  v26 = v5;
  v7 = String.subscript.getter();
  v9 = v8;
  swift_bridgeObjectRelease();
  v10 = specialized Sequence<>.starts<A>(with:)(a1, a2, v7, v9);
  swift_bridgeObjectRelease();
  if ((v10 & 1) == 0)
    return v10 & 1;
  v11 = v6;
  if (String.count.getter() >= 1)
  {
    swift_bridgeObjectRetain();
    String.subscript.getter();
    swift_bridgeObjectRelease();
    v12 = Substring.index(_:offsetBy:limitedBy:)();
    v14 = v13;
    swift_bridgeObjectRelease();
    if ((v14 & 1) == 0)
    {
      if (v6 >> 14 >= v12 >> 14)
      {
LABEL_13:
        v27[2] = v12;
        v27[3] = v11;
        return v10 & 1;
      }
      __break(1u);
    }
  }
  strcpy((char *)v28, "UNREACHABLE: ");
  HIWORD(v28[1]) = -4864;
  v15._countAndFlagsBits = 0xD000000000000015;
  v15._object = (void *)0x80000001DF0073C0;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16 = v28[0];
  v17 = v28[1];
  v18 = (char *)v27[9];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v18 + 2) + 1, 1, v18);
  v20 = *((_QWORD *)v18 + 2);
  v19 = *((_QWORD *)v18 + 3);
  if (v20 >= v19 >> 1)
    v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v19 > 1), v20 + 1, 1, v18);
  *((_QWORD *)v18 + 2) = v20 + 1;
  v21 = &v18[80 * v20];
  v21[32] = 0;
  *((_QWORD *)v21 + 5) = v16;
  *((_QWORD *)v21 + 6) = v17;
  *((_QWORD *)v21 + 7) = v26;
  *((_QWORD *)v21 + 8) = v26;
  *(_OWORD *)(v21 + 72) = 0u;
  *(_OWORD *)(v21 + 88) = 0u;
  v21[104] = -1;
  v27[9] = v18;
  swift_bridgeObjectRetain();
  String.subscript.getter();
  swift_bridgeObjectRelease();
  v22 = Substring.distance(from:to:)();
  swift_bridgeObjectRelease();
  if (v22 < 1)
    return v10 & 1;
  swift_bridgeObjectRetain();
  String.subscript.getter();
  swift_bridgeObjectRelease();
  v12 = Substring.index(_:offsetBy:limitedBy:)();
  v24 = v23;
  result = swift_bridgeObjectRelease();
  if ((v24 & 1) != 0)
    return v10 & 1;
  if (v11 >> 14 >= v12 >> 14)
    goto LABEL_13;
  __break(1u);
  return result;
}

uint64_t specialized Parser.tryEatNonEmpty<A>(sequence:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  swift_bridgeObjectRetain();
  *(_QWORD *)&v10 = String.init<A>(_:)();
  *((_QWORD *)&v10 + 1) = v4;
  v11 = 0;
  v12 = 0;
  v13 = 3;
  swift_bridgeObjectRetain();
  v5 = String.subscript.getter();
  v7 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v5 ^ v7) >= 0x4000)
  {
    swift_bridgeObjectRelease();
    v8 = specialized Parser.tryEat<A>(sequence:)(a1, a2);
  }
  else
  {
    Parser.errorAtCurrentPosition(_:)(&v10);
    swift_bridgeObjectRelease();
    v8 = 0;
  }
  return v8 & 1;
}

Swift::Void __swiftcall Parser.advance(_:)(Swift::Int a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  char v4;
  char v5;
  Swift::String v6;
  uint64_t v7;
  char v8;
  char v9;

  if (a1 >= 1)
  {
    v2 = *(_QWORD *)(v1 + 24);
    swift_bridgeObjectRetain();
    String.subscript.getter();
    swift_bridgeObjectRelease();
    v3 = Substring.index(_:offsetBy:limitedBy:)();
    v5 = v4;
    swift_bridgeObjectRelease();
    if ((v5 & 1) == 0)
    {
      if (v2 >> 14 >= v3 >> 14)
      {
LABEL_8:
        *(_QWORD *)(v1 + 16) = v3;
        *(_QWORD *)(v1 + 24) = v2;
        return;
      }
      __break(1u);
    }
  }
  v6._object = (void *)0x80000001DF0073C0;
  v6._countAndFlagsBits = 0xD000000000000015;
  Parser.unreachable(_:)(v6);
  v2 = *(_QWORD *)(v1 + 24);
  swift_bridgeObjectRetain();
  String.subscript.getter();
  swift_bridgeObjectRelease();
  v7 = Substring.distance(from:to:)();
  swift_bridgeObjectRelease();
  if (v7 >= 1)
  {
    swift_bridgeObjectRetain();
    String.subscript.getter();
    swift_bridgeObjectRelease();
    v3 = Substring.index(_:offsetBy:limitedBy:)();
    v9 = v8;
    swift_bridgeObjectRelease();
    if ((v9 & 1) == 0)
    {
      if (v2 >> 14 < v3 >> 14)
      {
        __break(1u);
        return;
      }
      goto LABEL_8;
    }
  }
}

Swift::Void __swiftcall Parser.unreachable(_:)(Swift::String a1)
{
  uint64_t v1;
  uint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD v13[2];

  v2 = v1;
  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  v5 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRetain();
  strcpy((char *)v13, "UNREACHABLE: ");
  HIWORD(v13[1]) = -4864;
  v6._countAndFlagsBits = countAndFlagsBits;
  v6._object = object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7 = v13[0];
  v8 = v13[1];
  v9 = *(char **)(v1 + 72);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
  v11 = *((_QWORD *)v9 + 2);
  v10 = *((_QWORD *)v9 + 3);
  if (v11 >= v10 >> 1)
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v11 + 1, 1, v9);
  *((_QWORD *)v9 + 2) = v11 + 1;
  v12 = &v9[80 * v11];
  v12[32] = 0;
  *((_QWORD *)v12 + 5) = v7;
  *((_QWORD *)v12 + 6) = v8;
  *((_QWORD *)v12 + 7) = v5;
  *((_QWORD *)v12 + 8) = v5;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  v12[104] = -1;
  *(_QWORD *)(v2 + 72) = v9;
}

Swift::Bool __swiftcall Source.tryAdvance(_:)(Swift::Int a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  char v4;
  char v5;
  Swift::Bool result;

  if (a1 < 1)
    return 0;
  v2 = *(_QWORD *)(v1 + 24);
  swift_bridgeObjectRetain();
  String.subscript.getter();
  swift_bridgeObjectRelease();
  v3 = Substring.index(_:offsetBy:limitedBy:)();
  v5 = v4;
  result = swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
    return 0;
  if (v2 >> 14 < v3 >> 14)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v1 + 16) = v3;
    *(_QWORD *)(v1 + 24) = v2;
    return 1;
  }
  return result;
}

Swift::String_optional __swiftcall Parser.tryEat()()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  Swift::String_optional result;

  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v0 = String.subscript.getter();
  if ((v0 ^ v1) >> 14)
  {
    v2 = Substring.subscript.getter();
    v3 = v4;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    Parser.advance(_:)(1);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    v2 = 0;
    v3 = 0;
  }
  v5 = v2;
  v6 = v3;
  result.value._object = v6;
  result.value._countAndFlagsBits = v5;
  return result;
}

uint64_t specialized Parser.tryEat<A>(anyOf:)(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[6];
  _QWORD v11[2];

  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v2 = String.subscript.getter();
  if (!((v2 ^ v3) >> 14))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
LABEL_5:
    swift_bridgeObjectRelease();
    return 0;
  }
  v4 = Substring.subscript.getter();
  v6 = v5;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  v7 = swift_bridgeObjectRelease();
  v11[0] = v4;
  v11[1] = v6;
  MEMORY[0x1E0C80A78](v7, v8);
  v10[2] = v11;
  if ((specialized Sequence.contains(where:)(partial apply for specialized closure #1 in Sequence<>.contains(_:), (uint64_t)v10, a1) & 1) == 0)goto LABEL_5;
  Parser.advance(_:)(1);
  return v4;
}

uint64_t Parser.eat(upToCount:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;
  char v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;

  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  swift_bridgeObjectRetain();
  v27 = v6;
  v7 = String.subscript.getter();
  v9 = v8;
  result = swift_bridgeObjectRelease();
  if (a1 < 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  result = Substring.index(_:offsetBy:limitedBy:)();
  if ((v11 & 1) != 0)
    v12 = v9;
  else
    v12 = result;
  if (v12 >> 14 < v7 >> 14)
    goto LABEL_13;
  v28 = a2;
  v13 = Substring.subscript.getter();
  v15 = v14;
  v17 = v16;
  v19 = v18;
  swift_bridgeObjectRelease();
  v20 = v5;
  if (Substring.distance(from:to:)() < 1
    || (swift_bridgeObjectRetain(),
        String.subscript.getter(),
        swift_bridgeObjectRelease(),
        v21 = Substring.index(_:offsetBy:limitedBy:)(),
        v23 = v22,
        result = swift_bridgeObjectRelease(),
        v20 = v5,
        (v23 & 1) != 0))
  {
LABEL_10:
    v24 = MEMORY[0x1DF0F366C](v13, v15, v17, v19);
    v26 = v25;
    result = swift_bridgeObjectRelease();
    if (v20 >> 14 >= v5 >> 14)
    {
      *v28 = v24;
      v28[1] = v26;
      v28[2] = v5;
      v28[3] = v20;
      return result;
    }
    goto LABEL_14;
  }
  if (v27 >> 14 >= v21 >> 14)
  {
    *(_QWORD *)(v2 + 16) = v21;
    *(_QWORD *)(v2 + 24) = v27;
    v20 = v21;
    goto LABEL_10;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t specialized Parser.tryEatPrefix(maxLength:_:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, _QWORD *a3@<X2>, uint64_t (*a4)(uint64_t, _QWORD, _QWORD *)@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[4];

  v7 = a3[1];
  v9 = a3[2];
  v8 = a3[3];
  v25[0] = *a3;
  v25[1] = v7;
  v25[2] = v9;
  v25[3] = v8;
  result = a4(a1, a2 & 1, v25);
  if (v13)
  {
    v14 = v11;
    v15 = v13;
    v23 = v12;
    v24 = result;
    v16 = v9;
    if (Substring.distance(from:to:)() > 0)
    {
      swift_bridgeObjectRetain();
      String.subscript.getter();
      swift_bridgeObjectRelease();
      v17 = Substring.index(_:offsetBy:limitedBy:)();
      v19 = v18;
      result = swift_bridgeObjectRelease();
      v16 = v9;
      if ((v19 & 1) == 0)
      {
        if (v8 >> 14 < v17 >> 14)
        {
LABEL_11:
          __break(1u);
          return result;
        }
        a3[2] = v17;
        a3[3] = v8;
        v16 = v17;
      }
    }
    v20 = MEMORY[0x1DF0F366C](v24, v14, v23, v15);
    v22 = v21;
    result = swift_bridgeObjectRelease();
    if (v16 >> 14 >= v9 >> 14)
    {
      *a5 = v20;
      a5[1] = v22;
      a5[2] = v9;
      a5[3] = v16;
      return result;
    }
    __break(1u);
    goto LABEL_11;
  }
  *(_OWORD *)a5 = 0u;
  *((_OWORD *)a5 + 1) = 0u;
  return result;
}

uint64_t Parser.tryEatPrefix(maxLength:_:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  unint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;

  v5 = v4;
  v9 = a2 & 1;
  v10 = *(_QWORD *)(v4 + 16);
  v27 = *(_QWORD *)(v4 + 24);
  swift_bridgeObjectRetain();
  v11 = Source.peekPrefix(maxLength:_:)(a1, v9, a3);
  v13 = v12;
  v15 = v14;
  v17 = v16;
  result = swift_bridgeObjectRelease();
  if (v17)
  {
    v26 = a4;
    v19 = v10;
    if (Substring.distance(from:to:)() >= 1)
    {
      swift_bridgeObjectRetain();
      String.subscript.getter();
      swift_bridgeObjectRelease();
      v20 = Substring.index(_:offsetBy:limitedBy:)();
      v22 = v21;
      result = swift_bridgeObjectRelease();
      v19 = v10;
      if ((v22 & 1) == 0)
      {
        if (v27 >> 14 < v20 >> 14)
        {
LABEL_11:
          __break(1u);
          return result;
        }
        *(_QWORD *)(v5 + 16) = v20;
        *(_QWORD *)(v5 + 24) = v27;
        v19 = v20;
      }
    }
    v23 = MEMORY[0x1DF0F366C](v11, v13, v15, v17);
    v25 = v24;
    result = swift_bridgeObjectRelease();
    if (v19 >> 14 >= v10 >> 14)
    {
      *v26 = v23;
      v26[1] = v25;
      v26[2] = v10;
      v26[3] = v19;
      return result;
    }
    __break(1u);
    goto LABEL_11;
  }
  *(_OWORD *)a4 = 0u;
  *((_OWORD *)a4 + 1) = 0u;
  return result;
}

uint64_t Parser.expectASCII()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  char v13;

  v3 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v4 = String.subscript.getter();
  if (!((v4 ^ v5) >> 14))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    v11 = 0u;
    v12 = 0u;
    v13 = 36;
    result = Parser.errorAtCurrentPosition(_:)(&v11);
LABEL_7:
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    return result;
  }
  v7 = Substring.subscript.getter();
  v9 = v8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  Parser.advance(_:)(1);
  result = Character.asciiValue.getter();
  if ((result & 0x100) != 0)
  {
    *(_QWORD *)&v11 = v7;
    *((_QWORD *)&v11 + 1) = v9;
    v12 = 0uLL;
    v13 = 9;
    Parser.errorAtCurrentPosition(_:)(&v11);
    result = swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  v10 = *(_QWORD *)(v1 + 16);
  if (v10 >> 14 < v3 >> 14)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v3;
    *(_QWORD *)(a1 + 24) = v10;
  }
  return result;
}

uint64_t Character.isOctalDigit.getter(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v5;

  result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if ((result & 1) == 0)
  {
    if (a1 != 48 || a2 != 0xE100000000000000)
    {
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        v5 = 0;
        return v5 & 1;
      }
      if (a1 == 55 && a2 == 0xE100000000000000)
      {
        v5 = 1;
        return v5 & 1;
      }
    }
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)() ^ 1;
    return v5 & 1;
  }
  __break(1u);
  return result;
}

BOOL specialized implicit closure #3 in RadixKind.characterFilter.getter()
{
  char v0;

  Character.hexDigitValue.getter();
  return (v0 & 1) == 0;
}

uint64_t Parser.validateUnicodeScalar(_:_:)@<X0>(uint64_t *a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();
  Swift::String_optional v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t result;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  int v39;
  _BOOL4 v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned __int8 *v48;
  unsigned int v49;
  BOOL v50;
  char v53;
  unint64_t v54;
  unsigned __int8 v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned __int8 *v59;
  unsigned int v60;
  char v64;
  unint64_t v65;
  unsigned __int8 v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned __int8 *v70;
  unsigned int v71;
  char v75;
  unint64_t v76;
  unsigned __int8 v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  char v85;
  unint64_t v86;
  unsigned __int8 v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned __int8 *v91;
  unsigned int v92;
  char v96;
  unint64_t v97;
  unsigned __int8 v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unint64_t *v102;
  unsigned int v103;
  char v107;
  unint64_t v108;
  unsigned __int8 v109;
  Swift::String v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;

  v5 = *a1;
  v6 = a1[1];
  v7 = a1[2];
  v119 = a1[3];
  v8 = HIBYTE(v6) & 0xF;
  v9 = *a1 & 0xFFFFFFFFFFFFLL;
  if ((v6 & 0x2000000000000000) != 0)
    v10 = HIBYTE(v6) & 0xF;
  else
    v10 = v5 & 0xFFFFFFFFFFFFLL;
  if (!v10)
  {
LABEL_9:
    v118 = a3;
    v14 = a2;
    v15 = v6;
    v16 = v5;
    v121 = v5;
    v122 = v15;
    v123 = a2;
    v124 = 0;
    v125 = 2;
    ParseError.description.getter();
    v18 = v17;
    v20 = v19;
    v21 = *(_QWORD *)(v120 + 72);
    v22 = v15;
    swift_bridgeObjectRetain();
    result = swift_isUniquelyReferenced_nonNull_native();
    v24 = v7;
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v21 + 16) + 1, 1, (char *)v21);
      v21 = result;
    }
    v26 = *(_QWORD *)(v21 + 16);
    v25 = *(_QWORD *)(v21 + 24);
    if (v26 >= v25 >> 1)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v25 > 1), v26 + 1, 1, (char *)v21);
      v21 = result;
    }
    LODWORD(v27) = 0;
    *(_QWORD *)(v21 + 16) = v26 + 1;
    v28 = v21 + 80 * v26;
    v29 = 1;
    *(_BYTE *)(v28 + 32) = 1;
    *(_QWORD *)(v28 + 40) = v18;
    *(_QWORD *)(v28 + 48) = v20;
    v7 = v24;
    v30 = v119;
    *(_QWORD *)(v28 + 56) = v24;
    *(_QWORD *)(v28 + 64) = v119;
    *(_QWORD *)(v28 + 72) = v16;
    *(_QWORD *)(v28 + 80) = v22;
    *(_QWORD *)(v28 + 88) = v14;
    *(_QWORD *)(v28 + 96) = 0;
    *(_BYTE *)(v28 + 104) = 2;
    *(_QWORD *)(v120 + 72) = v21;
    a3 = v118;
    goto LABEL_14;
  }
  v11 = off_1EA977268[(char)a2];
  v121 = *a1;
  v122 = v6;
  v123 = 0;
  v124 = v10;
  swift_bridgeObjectRetain();
  while (1)
  {
    v12 = String.Iterator.next()();
    if (!v12.value._object)
      break;
    v13 = ((uint64_t (*)(uint64_t))v11)(v12.value._countAndFlagsBits);
    swift_bridgeObjectRelease();
    if ((v13 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_9;
    }
  }
  result = swift_bridgeObjectRelease();
  v39 = a2;
  if (a2)
  {
    v40 = a2 != 1;
    if (v39 == 1)
      v41 = 10;
    else
      v41 = 16;
    if ((v6 & 0x1000000000000000) == 0)
    {
LABEL_29:
      if ((v6 & 0x2000000000000000) == 0)
      {
        if ((v5 & 0x1000000000000000) != 0)
        {
          result = (v6 & 0xFFFFFFFFFFFFFFFLL) + 32;
        }
        else
        {
          result = _StringObject.sharedUTF8.getter();
          v9 = v117;
        }
        v30 = v119;
        v42 = *(unsigned __int8 *)result;
        if (v42 == 43)
        {
          if (v9 >= 1)
          {
            v43 = v9 - 1;
            if (v9 != 1)
            {
              v67 = v41 + 55;
              v68 = v41 + 87;
              if (v40)
              {
                v69 = 58;
              }
              else
              {
                v68 = 97;
                v67 = 65;
                v69 = v41 + 48;
              }
              if (result)
              {
                v47 = 0;
                v70 = (unsigned __int8 *)(result + 1);
                while (1)
                {
                  v71 = *v70;
                  if (v71 < 0x30 || v71 >= v69)
                  {
                    if (v71 < 0x41 || v71 >= v67)
                    {
                      if (v71 < 0x61 || v71 >= v68)
                        goto LABEL_170;
                      v75 = -87;
                    }
                    else
                    {
                      v75 = -55;
                    }
                  }
                  else
                  {
                    v75 = -48;
                  }
                  v76 = v47 * (unint64_t)v41;
                  if ((v76 & 0xFFFFFFFF00000000) != 0)
                    goto LABEL_170;
                  v77 = v75 + v71;
                  v50 = __CFADD__((_DWORD)v76, v77);
                  v47 = v76 + v77;
                  if (v50)
                    goto LABEL_170;
                  ++v70;
                  if (!--v43)
                    goto LABEL_197;
                }
              }
              goto LABEL_143;
            }
            goto LABEL_170;
          }
          goto LABEL_207;
        }
        if (v42 != 45)
        {
          if (v9)
          {
            v78 = v41 + 55;
            v79 = v41 + 87;
            if (v40)
            {
              v80 = 58;
            }
            else
            {
              v79 = 97;
              v78 = 65;
              v80 = v41 + 48;
            }
            if (result)
            {
              v47 = 0;
              while (1)
              {
                v81 = *(unsigned __int8 *)result;
                if (v81 < 0x30 || v81 >= v80)
                {
                  if (v81 < 0x41 || v81 >= v78)
                  {
                    if (v81 < 0x61 || v81 >= v79)
                      goto LABEL_170;
                    v85 = -87;
                  }
                  else
                  {
                    v85 = -55;
                  }
                }
                else
                {
                  v85 = -48;
                }
                v86 = v47 * (unint64_t)v41;
                if ((v86 & 0xFFFFFFFF00000000) != 0)
                  goto LABEL_170;
                v87 = v85 + v81;
                v50 = __CFADD__((_DWORD)v86, v87);
                v47 = v86 + v87;
                if (v50)
                  goto LABEL_170;
                ++result;
                if (!--v9)
                  goto LABEL_144;
              }
            }
            goto LABEL_143;
          }
LABEL_170:
          v47 = 0;
          LOBYTE(v43) = 1;
          goto LABEL_197;
        }
        if (v9 >= 1)
        {
          v43 = v9 - 1;
          if (v9 != 1)
          {
            v44 = v41 + 55;
            v45 = v41 + 87;
            if (v40)
            {
              v46 = 58;
            }
            else
            {
              v45 = 97;
              v44 = 65;
              v46 = v41 + 48;
            }
            if (result)
            {
              v47 = 0;
              v48 = (unsigned __int8 *)(result + 1);
              while (1)
              {
                v49 = *v48;
                v50 = v49 < 0x30 || v49 >= v46;
                if (v50)
                {
                  if (v49 < 0x41 || v49 >= v44)
                  {
                    if (v49 < 0x61 || v49 >= v45)
                      goto LABEL_170;
                    v53 = -87;
                  }
                  else
                  {
                    v53 = -55;
                  }
                }
                else
                {
                  v53 = -48;
                }
                v54 = v47 * (unint64_t)v41;
                if ((v54 & 0xFFFFFFFF00000000) != 0)
                  goto LABEL_170;
                v55 = v53 + v49;
                v50 = v54 >= v55;
                v47 = v54 - v55;
                if (!v50)
                  goto LABEL_170;
                ++v48;
                if (!--v43)
                  goto LABEL_197;
              }
            }
LABEL_143:
            v47 = 0;
LABEL_144:
            LOBYTE(v43) = 0;
LABEL_197:
            if ((v43 & 1) == 0)
            {
              v29 = 0;
              LODWORD(v27) = v47;
              goto LABEL_14;
            }
LABEL_199:
            v121 = 0;
            v122 = 0xE000000000000000;
            _StringGuts.grow(_:)(19);
            swift_bridgeObjectRelease();
            v121 = 0xD000000000000011;
            v122 = 0x80000001DF007020;
            v110._countAndFlagsBits = v5;
            v110._object = (void *)v6;
            String.append(_:)(v110);
            v111 = v121;
            v112 = v122;
            v113 = *(_QWORD *)(v120 + 72);
            swift_bridgeObjectRetain();
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v113 + 16) + 1, 1, (char *)v113);
              v113 = result;
            }
            v115 = *(_QWORD *)(v113 + 16);
            v114 = *(_QWORD *)(v113 + 24);
            if (v115 >= v114 >> 1)
            {
              result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v114 > 1), v115 + 1, 1, (char *)v113);
              v113 = result;
            }
            LODWORD(v27) = 0;
            *(_QWORD *)(v113 + 16) = v115 + 1;
            v116 = v113 + 80 * v115;
            v29 = 1;
            *(_BYTE *)(v116 + 32) = 1;
            *(_QWORD *)(v116 + 40) = v111;
            *(_QWORD *)(v116 + 48) = v112;
            v30 = v119;
            *(_QWORD *)(v116 + 56) = v7;
            *(_QWORD *)(v116 + 64) = v119;
            *(_QWORD *)(v116 + 72) = v5;
            *(_QWORD *)(v116 + 80) = v6;
            *(_QWORD *)(v116 + 88) = 0;
            *(_QWORD *)(v116 + 96) = 0;
            *(_BYTE *)(v116 + 104) = 0;
            *(_QWORD *)(v120 + 72) = v113;
            goto LABEL_14;
          }
          goto LABEL_170;
        }
        __break(1u);
LABEL_206:
        __break(1u);
LABEL_207:
        __break(1u);
        goto LABEL_208;
      }
      v121 = v5;
      v122 = v6 & 0xFFFFFFFFFFFFFFLL;
      if (v5 == 43)
      {
        if (!v8)
        {
LABEL_208:
          __break(1u);
          return result;
        }
        v43 = v8 - 1;
        if (v8 != 1)
        {
          v47 = 0;
          v88 = v41 + 48;
          v89 = v41 + 55;
          v90 = v41 + 87;
          if (v40)
          {
            v88 = 58;
          }
          else
          {
            v90 = 97;
            v89 = 65;
          }
          v91 = (unsigned __int8 *)&v121 + 1;
          v30 = v119;
          while (1)
          {
            v92 = *v91;
            if (v92 < 0x30 || v92 >= v88)
            {
              if (v92 < 0x41 || v92 >= v89)
              {
                if (v92 < 0x61 || v92 >= v90)
                  goto LABEL_170;
                v96 = -87;
              }
              else
              {
                v96 = -55;
              }
            }
            else
            {
              v96 = -48;
            }
            v97 = v47 * (unint64_t)v41;
            if ((v97 & 0xFFFFFFFF00000000) != 0)
              goto LABEL_170;
            v98 = v96 + v92;
            v50 = __CFADD__((_DWORD)v97, v98);
            v47 = v97 + v98;
            if (v50)
              goto LABEL_170;
            ++v91;
            if (!--v43)
              goto LABEL_197;
          }
        }
      }
      else if (v5 == 45)
      {
        if (!v8)
          goto LABEL_206;
        v43 = v8 - 1;
        if (v8 != 1)
        {
          v47 = 0;
          v56 = v41 + 48;
          v57 = v41 + 55;
          v58 = v41 + 87;
          if (v40)
          {
            v56 = 58;
          }
          else
          {
            v58 = 97;
            v57 = 65;
          }
          v59 = (unsigned __int8 *)&v121 + 1;
          v30 = v119;
          while (1)
          {
            v60 = *v59;
            if (v60 < 0x30 || v60 >= v56)
            {
              if (v60 < 0x41 || v60 >= v57)
              {
                if (v60 < 0x61 || v60 >= v58)
                  goto LABEL_170;
                v64 = -87;
              }
              else
              {
                v64 = -55;
              }
            }
            else
            {
              v64 = -48;
            }
            v65 = v47 * (unint64_t)v41;
            if ((v65 & 0xFFFFFFFF00000000) != 0)
              goto LABEL_170;
            v66 = v64 + v60;
            v50 = v65 >= v66;
            v47 = v65 - v66;
            if (!v50)
              goto LABEL_170;
            ++v59;
            if (!--v43)
              goto LABEL_197;
          }
        }
      }
      else if (v8)
      {
        v47 = 0;
        v99 = v41 + 48;
        v100 = v41 + 55;
        v101 = v41 + 87;
        if (v40)
        {
          v99 = 58;
        }
        else
        {
          v101 = 97;
          v100 = 65;
        }
        v102 = &v121;
        do
        {
          v103 = *(unsigned __int8 *)v102;
          if (v103 < 0x30 || v103 >= v99)
          {
            if (v103 < 0x41 || v103 >= v100)
            {
              if (v103 < 0x61 || v103 >= v101)
                goto LABEL_195;
              v107 = -87;
            }
            else
            {
              v107 = -55;
            }
          }
          else
          {
            v107 = -48;
          }
          v108 = v47 * (unint64_t)v41;
          if ((v108 & 0xFFFFFFFF00000000) != 0)
            goto LABEL_195;
          v109 = v107 + v103;
          v50 = __CFADD__((_DWORD)v108, v109);
          v47 = v108 + v109;
          if (v50)
            goto LABEL_195;
          v102 = (unint64_t *)((char *)v102 + 1);
          --v8;
        }
        while (v8);
        LOBYTE(v43) = 0;
        goto LABEL_196;
      }
LABEL_195:
      v47 = 0;
      LOBYTE(v43) = 1;
LABEL_196:
      v30 = v119;
      goto LABEL_197;
    }
  }
  else
  {
    v40 = 0;
    v41 = 8;
    if ((v6 & 0x1000000000000000) == 0)
      goto LABEL_29;
  }
  swift_bridgeObjectRetain();
  v27 = specialized _parseInteger<A, B>(ascii:radix:)(v5, v6, v41);
  result = swift_bridgeObjectRelease();
  v30 = v119;
  if ((v27 & 0x100000000) != 0)
    goto LABEL_199;
  v29 = 0;
LABEL_14:
  if ((v29 & 1) != 0)
  {
    LODWORD(v27) = 0;
  }
  else if (WORD1(v27) > 0x10u || (v27 & 0xFFFFF800) == 0xD800)
  {
    v31 = a3;
    v121 = 0;
    v122 = 0xE000000000000000;
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    v121 = 0xD000000000000017;
    v122 = 0x80000001DF007530;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v32._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v27 = v121;
    v33 = v122;
    v34 = *(char **)(v120 + 72);
    swift_bridgeObjectRetain_n();
    v35 = v7;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v34 + 2) + 1, 1, v34);
    v37 = *((_QWORD *)v34 + 2);
    v36 = *((_QWORD *)v34 + 3);
    if (v37 >= v36 >> 1)
      v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v36 > 1), v37 + 1, 1, v34);
    *((_QWORD *)v34 + 2) = v37 + 1;
    v38 = &v34[80 * v37];
    v38[32] = 1;
    *((_QWORD *)v38 + 5) = v27;
    *((_QWORD *)v38 + 6) = v33;
    v7 = v35;
    *((_QWORD *)v38 + 7) = v35;
    *((_QWORD *)v38 + 8) = v30;
    *((_QWORD *)v38 + 9) = v27;
    *((_QWORD *)v38 + 10) = v33;
    *((_QWORD *)v38 + 11) = 0;
    *((_QWORD *)v38 + 12) = 0;
    v38[104] = 4;
    result = swift_bridgeObjectRelease();
    LODWORD(v27) = 0;
    *(_QWORD *)(v120 + 72) = v34;
    a3 = v31;
  }
  *(_DWORD *)a3 = v27;
  *(_QWORD *)(a3 + 8) = v7;
  *(_QWORD *)(a3 + 16) = v30;
  return result;
}

unsigned __int8 *Parser.lexNumber(_:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unsigned __int8 *result;
  void *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned int v21;
  char v25;
  uint64_t v26;
  unsigned __int8 v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned __int8 *v31;
  unsigned int v32;
  char v36;
  uint64_t v37;
  unsigned __int8 v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned __int8 *v42;
  unsigned int v43;
  char v47;
  uint64_t v48;
  unsigned __int8 v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  char v57;
  uint64_t v58;
  unsigned __int8 v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned __int8 *v63;
  unsigned int v64;
  char v68;
  uint64_t v69;
  unsigned __int8 v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t *v74;
  unsigned int v75;
  char v79;
  uint64_t v80;
  unsigned __int8 v81;
  char v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  Swift::String v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;

  result = (unsigned __int8 *)Parser.tryEatPrefix(maxLength:_:)(0, 1, (uint64_t (*)(uint64_t))off_1EA977268[a1], &v96);
  v6 = (void *)v97;
  if (!v97)
  {
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_BYTE *)(a2 + 32) = 1;
    return result;
  }
  v7 = v96;
  if (a1)
  {
    if (a1 == 1)
    {
      v8 = 0;
      v9 = 10;
    }
    else
    {
      v8 = 1;
      v9 = 16;
    }
  }
  else
  {
    v8 = 0;
    v9 = 8;
  }
  v11 = v98;
  v10 = v99;
  v12 = HIBYTE(v97) & 0xF;
  v13 = v96 & 0xFFFFFFFFFFFFLL;
  if ((v97 & 0x2000000000000000) != 0)
    v14 = HIBYTE(v97) & 0xF;
  else
    v14 = v96 & 0xFFFFFFFFFFFFLL;
  if (v14)
  {
    if ((v97 & 0x1000000000000000) == 0)
    {
      if ((v97 & 0x2000000000000000) != 0)
      {
        v97 &= 0xFFFFFFFFFFFFFFuLL;
        if (v96 == 43)
        {
          if (v12)
          {
            if (--v12)
            {
              v19 = 0;
              v60 = v9 + 48;
              v61 = v9 + 55;
              v62 = v9 + 87;
              if (v8)
              {
                v60 = 58;
              }
              else
              {
                v62 = 97;
                v61 = 65;
              }
              v63 = (unsigned __int8 *)&v96 + 1;
              while (1)
              {
                v64 = *v63;
                if (v64 < 0x30 || v64 >= v60)
                {
                  if (v64 < 0x41 || v64 >= v61)
                  {
                    if (v64 < 0x61 || v64 >= v62)
                      goto LABEL_173;
                    v68 = -87;
                  }
                  else
                  {
                    v68 = -55;
                  }
                }
                else
                {
                  v68 = -48;
                }
                v69 = v19 * v9;
                if ((unsigned __int128)(v19 * (__int128)v9) >> 64 != (v19 * v9) >> 63)
                  goto LABEL_173;
                v70 = v64 + v68;
                v19 = v69 + v70;
                if (__OFADD__(v69, v70))
                  goto LABEL_173;
                ++v63;
                if (!--v12)
                  goto LABEL_174;
              }
            }
            goto LABEL_173;
          }
LABEL_186:
          __break(1u);
          return result;
        }
        if (v96 != 45)
        {
          if (v12)
          {
            v19 = 0;
            v71 = v9 + 48;
            v72 = v9 + 55;
            v73 = v9 + 87;
            if (v8)
            {
              v71 = 58;
            }
            else
            {
              v73 = 97;
              v72 = 65;
            }
            v74 = &v96;
            while (1)
            {
              v75 = *(unsigned __int8 *)v74;
              if (v75 < 0x30 || v75 >= v71)
              {
                if (v75 < 0x41 || v75 >= v72)
                {
                  if (v75 < 0x61 || v75 >= v73)
                    goto LABEL_173;
                  v79 = -87;
                }
                else
                {
                  v79 = -55;
                }
              }
              else
              {
                v79 = -48;
              }
              v80 = v19 * v9;
              if ((unsigned __int128)(v19 * (__int128)v9) >> 64 != (v19 * v9) >> 63)
                goto LABEL_173;
              v81 = v75 + v79;
              v19 = v80 + v81;
              if (__OFADD__(v80, v81))
                goto LABEL_173;
              v74 = (uint64_t *)((char *)v74 + 1);
              if (!--v12)
                goto LABEL_174;
            }
          }
          goto LABEL_173;
        }
        if (v12)
        {
          if (--v12)
          {
            v19 = 0;
            v28 = v9 + 48;
            v29 = v9 + 55;
            v30 = v9 + 87;
            if (v8)
            {
              v28 = 58;
            }
            else
            {
              v30 = 97;
              v29 = 65;
            }
            v31 = (unsigned __int8 *)&v96 + 1;
            while (1)
            {
              v32 = *v31;
              if (v32 < 0x30 || v32 >= v28)
              {
                if (v32 < 0x41 || v32 >= v29)
                {
                  if (v32 < 0x61 || v32 >= v30)
                    goto LABEL_173;
                  v36 = -87;
                }
                else
                {
                  v36 = -55;
                }
              }
              else
              {
                v36 = -48;
              }
              v37 = v19 * v9;
              if ((unsigned __int128)(v19 * (__int128)v9) >> 64 != (v19 * v9) >> 63)
                goto LABEL_173;
              v38 = v32 + v36;
              v19 = v37 - v38;
              if (__OFSUB__(v37, v38))
                goto LABEL_173;
              ++v31;
              if (!--v12)
                goto LABEL_174;
            }
          }
          goto LABEL_173;
        }
      }
      else
      {
        if ((v96 & 0x1000000000000000) != 0)
          result = (unsigned __int8 *)((v97 & 0xFFFFFFFFFFFFFFFLL) + 32);
        else
          result = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
        v15 = *result;
        if (v15 == 43)
        {
          if (v13 >= 1)
          {
            v12 = v13 - 1;
            if (v13 != 1)
            {
              v39 = v9 + 48;
              v40 = v9 + 55;
              v41 = v9 + 87;
              if (v8)
              {
                v39 = 58;
              }
              else
              {
                v41 = 97;
                v40 = 65;
              }
              if (result)
              {
                v19 = 0;
                v42 = result + 1;
                while (1)
                {
                  v43 = *v42;
                  if (v43 < 0x30 || v43 >= v39)
                  {
                    if (v43 < 0x41 || v43 >= v40)
                    {
                      if (v43 < 0x61 || v43 >= v41)
                        goto LABEL_173;
                      v47 = -87;
                    }
                    else
                    {
                      v47 = -55;
                    }
                  }
                  else
                  {
                    v47 = -48;
                  }
                  v48 = v19 * v9;
                  if ((unsigned __int128)(v19 * (__int128)v9) >> 64 != (v19 * v9) >> 63)
                    goto LABEL_173;
                  v49 = v43 + v47;
                  v19 = v48 + v49;
                  if (__OFADD__(v48, v49))
                    goto LABEL_173;
                  ++v42;
                  if (!--v12)
                    goto LABEL_174;
                }
              }
              goto LABEL_122;
            }
            goto LABEL_173;
          }
          goto LABEL_185;
        }
        if (v15 != 45)
        {
          if (v13)
          {
            v50 = v9 + 48;
            v51 = v9 + 55;
            v52 = v9 + 87;
            if (v8)
            {
              v50 = 58;
            }
            else
            {
              v52 = 97;
              v51 = 65;
            }
            if (result)
            {
              v19 = 0;
              while (1)
              {
                v53 = *result;
                if (v53 < 0x30 || v53 >= v50)
                {
                  if (v53 < 0x41 || v53 >= v51)
                  {
                    if (v53 < 0x61 || v53 >= v52)
                      goto LABEL_173;
                    v57 = -87;
                  }
                  else
                  {
                    v57 = -55;
                  }
                }
                else
                {
                  v57 = -48;
                }
                v58 = v19 * v9;
                if ((unsigned __int128)(v19 * (__int128)v9) >> 64 != (v19 * v9) >> 63)
                  goto LABEL_173;
                v59 = v53 + v57;
                v19 = v58 + v59;
                if (__OFADD__(v58, v59))
                  goto LABEL_173;
                ++result;
                if (!--v13)
                  goto LABEL_123;
              }
            }
            goto LABEL_122;
          }
LABEL_173:
          v19 = 0;
          LOBYTE(v12) = 1;
          goto LABEL_174;
        }
        if (v13 >= 1)
        {
          v12 = v13 - 1;
          if (v13 != 1)
          {
            v16 = v9 + 48;
            v17 = v9 + 55;
            v18 = v9 + 87;
            if (v8)
            {
              v16 = 58;
            }
            else
            {
              v18 = 97;
              v17 = 65;
            }
            if (result)
            {
              v19 = 0;
              v20 = result + 1;
              while (1)
              {
                v21 = *v20;
                if (v21 < 0x30 || v21 >= v16)
                {
                  if (v21 < 0x41 || v21 >= v17)
                  {
                    if (v21 < 0x61 || v21 >= v18)
                      goto LABEL_173;
                    v25 = -87;
                  }
                  else
                  {
                    v25 = -55;
                  }
                }
                else
                {
                  v25 = -48;
                }
                v26 = v19 * v9;
                if ((unsigned __int128)(v19 * (__int128)v9) >> 64 != (v19 * v9) >> 63)
                  goto LABEL_173;
                v27 = v21 + v25;
                v19 = v26 - v27;
                if (__OFSUB__(v26, v27))
                  goto LABEL_173;
                ++v20;
                if (!--v12)
                  goto LABEL_174;
              }
            }
LABEL_122:
            v19 = 0;
LABEL_123:
            LOBYTE(v12) = 0;
LABEL_174:
            if ((v12 & 1) == 0)
            {
LABEL_175:
              result = (unsigned __int8 *)swift_bridgeObjectRelease();
              *(_QWORD *)a2 = v19;
              *(_QWORD *)(a2 + 8) = 0;
              *(_QWORD *)(a2 + 16) = v11;
              *(_QWORD *)(a2 + 24) = v10;
              *(_BYTE *)(a2 + 32) = 0;
              return result;
            }
            goto LABEL_177;
          }
          goto LABEL_173;
        }
        __break(1u);
      }
      __break(1u);
LABEL_185:
      __break(1u);
      goto LABEL_186;
    }
    swift_bridgeObjectRetain();
    v19 = (uint64_t)specialized _parseInteger<A, B>(ascii:radix:)(v7, (uint64_t)v6, v9);
    v83 = v82;
    swift_bridgeObjectRelease();
    if ((v83 & 1) == 0)
      goto LABEL_175;
  }
LABEL_177:
  v95 = a2;
  v84 = v11;
  v96 = 0;
  v97 = 0xE000000000000000;
  swift_bridgeObjectRetain();
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  v96 = 0xD000000000000011;
  v97 = 0x80000001DF007020;
  v85 = v7;
  v86._countAndFlagsBits = v7;
  v86._object = v6;
  String.append(_:)(v86);
  v87 = v96;
  v88 = v97;
  v89 = v2;
  v90 = *(char **)(v2 + 72);
  swift_bridgeObjectRetain();
  v91 = v10;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v90 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v90 + 2) + 1, 1, v90);
  v93 = *((_QWORD *)v90 + 2);
  v92 = *((_QWORD *)v90 + 3);
  if (v93 >= v92 >> 1)
    v90 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v92 > 1), v93 + 1, 1, v90);
  *((_QWORD *)v90 + 2) = v93 + 1;
  v94 = &v90[80 * v93];
  v94[32] = 1;
  *((_QWORD *)v94 + 5) = v87;
  *((_QWORD *)v94 + 6) = v88;
  *((_QWORD *)v94 + 7) = v84;
  *((_QWORD *)v94 + 8) = v91;
  *((_QWORD *)v94 + 9) = v85;
  *((_QWORD *)v94 + 10) = v6;
  *((_QWORD *)v94 + 11) = 0;
  *((_QWORD *)v94 + 12) = 0;
  v94[104] = 0;
  result = (unsigned __int8 *)swift_bridgeObjectRelease_n();
  *(_QWORD *)(v89 + 72) = v90;
  *(_OWORD *)v95 = xmmword_1DF003F20;
  *(_QWORD *)(v95 + 16) = v84;
  *(_QWORD *)(v95 + 24) = v91;
  *(_BYTE *)(v95 + 32) = 0;
  return result;
}

uint64_t Parser.expectUnicodeScalar(numDigits:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[4];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  v3 = v2;
  v6 = *(_QWORD *)(v2 + 16);
  Parser.eat(upToCount:)(a1, &v23);
  v8 = v23;
  v7 = v24;
  v10 = v25;
  v9 = v26;
  swift_bridgeObjectRetain();
  v11 = String.count.getter();
  swift_bridgeObjectRelease();
  if (v11 == a1)
    goto LABEL_6;
  v23 = v8;
  v24 = v7;
  v25 = a1;
  v26 = 0;
  v27 = 1;
  swift_bridgeObjectRetain();
  ParseError.description.getter();
  v19 = v13;
  v20 = v12;
  v11 = *(_QWORD *)(v3 + 72);
  swift_bridgeObjectRetain();
  v21 = a2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_9;
  while (1)
  {
    v15 = *(_QWORD *)(v11 + 16);
    v14 = *(_QWORD *)(v11 + 24);
    if (v15 >= v14 >> 1)
      v11 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v14 > 1), v15 + 1, 1, (char *)v11);
    *(_QWORD *)(v11 + 16) = v15 + 1;
    v16 = v11 + 80 * v15;
    *(_BYTE *)(v16 + 32) = 1;
    *(_QWORD *)(v16 + 40) = v20;
    *(_QWORD *)(v16 + 48) = v19;
    *(_QWORD *)(v16 + 56) = v10;
    *(_QWORD *)(v16 + 64) = v9;
    *(_QWORD *)(v16 + 72) = v8;
    *(_QWORD *)(v16 + 80) = v7;
    *(_QWORD *)(v16 + 88) = a1;
    *(_QWORD *)(v16 + 96) = 0;
    *(_BYTE *)(v16 + 104) = 1;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 72) = v11;
    a2 = v21;
LABEL_6:
    v17 = *(_QWORD *)(v3 + 16);
    if (v17 >> 14 >= v6 >> 14)
      break;
    __break(1u);
LABEL_9:
    v11 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v11 + 16) + 1, 1, (char *)v11);
  }
  v22[0] = v8;
  v22[1] = v7;
  v22[2] = v6;
  v22[3] = v17;
  Parser.validateUnicodeScalar(_:_:)(v22, 2u, a2);
  return swift_bridgeObjectRelease();
}

uint64_t Parser.expectUnicodeScalarSequence(eating:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  char *v4;
  char *v5;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  Swift::String v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  char *v37;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  __int128 v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  char v48;
  __int128 v49;
  __int128 v50;
  char v51;

  v5 = v4;
  v45 = (char *)MEMORY[0x1E0DEE9D8];
  specialized Parser.tryEatPrefix(maxLength:_:)(0, 1, v4, (uint64_t (*)(uint64_t, _QWORD, _QWORD *))specialized Source.peekPrefix(maxLength:_:), (uint64_t *)&v49);
  v8 = *((_QWORD *)&v49 + 1);
  if (*((_QWORD *)&v49 + 1))
  {
    v9 = v49;
    v44 = v50;
    v3 = MEMORY[0x1E0DEE9D8];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_45;
    goto LABEL_3;
  }
LABEL_6:
  v39 = (char *)MEMORY[0x1E0DEE9D8];
  v41 = a1;
  v42 = a2;
  v43 = v5;
  while (1)
  {
    v9 = *((_QWORD *)v5 + 2);
    swift_bridgeObjectRetain();
    *(_QWORD *)&v49 = 0;
    *((_QWORD *)&v49 + 1) = 0xE000000000000000;
    v40 = v9;
    if ((closure #1 in Parser.expectUnicodeScalarSequence(eating:)(v5, a1, a2, &v45) & 1) == 0)
    {
      while (1)
      {
        *(_QWORD *)&v44 = v9;
        a1 = *((_QWORD *)v5 + 1);
        v8 = *((_QWORD *)v5 + 2);
        v3 = *((_QWORD *)v5 + 3);
        v5 = (char *)*((_QWORD *)v5 + 9);
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v13 = String.subscript.getter();
        v15 = v14;
        swift_bridgeObjectRelease();
        if (!((v13 ^ v15) >> 14))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          a2 = v42;
          swift_bridgeObjectRelease();
          v5 = v43;
          a1 = v41;
          goto LABEL_25;
        }
        *(_QWORD *)&v44 = Substring.subscript.getter();
        v17 = v16;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        String.subscript.getter();
        swift_bridgeObjectRelease();
        v9 = Substring.index(_:offsetBy:limitedBy:)();
        a2 = v18;
        swift_bridgeObjectRelease();
        if ((a2 & 1) == 0)
          break;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v5 + 2) + 1, 1, v5);
        v20 = *((_QWORD *)v5 + 2);
        v19 = *((_QWORD *)v5 + 3);
        if (v20 >= v19 >> 1)
          v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v19 > 1), v20 + 1, 1, v5);
        *((_QWORD *)v5 + 2) = v20 + 1;
        v21 = &v5[80 * v20];
        v21[32] = 0;
        *((_QWORD *)v21 + 5) = 0xD000000000000022;
        *((_QWORD *)v21 + 6) = 0x80000001DF007440;
        *((_QWORD *)v21 + 7) = v8;
        *((_QWORD *)v21 + 8) = v8;
        *(_OWORD *)(v21 + 72) = 0u;
        *(_OWORD *)(v21 + 88) = 0u;
        v21[104] = -1;
        *((_QWORD *)v43 + 9) = v5;
        swift_bridgeObjectRetain();
        String.subscript.getter();
        swift_bridgeObjectRelease();
        v22 = Substring.distance(from:to:)();
        swift_bridgeObjectRelease();
        if (v22 < 1)
        {
          v9 = v8;
          v5 = v43;
        }
        else
        {
          swift_bridgeObjectRetain();
          String.subscript.getter();
          v23 = v3;
          swift_bridgeObjectRelease();
          v3 = Substring.index(_:offsetBy:limitedBy:)();
          a2 = v24;
          swift_bridgeObjectRelease();
          v9 = v8;
          v5 = v43;
          if ((a2 & 1) == 0)
          {
            if (v23 >> 14 < v3 >> 14)
              goto LABEL_43;
            v9 = v3;
            v3 = v23;
LABEL_23:
            *((_QWORD *)v5 + 2) = v9;
            *((_QWORD *)v5 + 3) = v3;
          }
        }
        MEMORY[0x1DF0F36FC](v44, v17);
        swift_bridgeObjectRelease();
        a1 = v41;
        a2 = v42;
        if ((closure #1 in Parser.expectUnicodeScalarSequence(eating:)(v5, v41, v42, &v45) & 1) != 0)
          goto LABEL_25;
      }
      if (v3 >> 14 < v9 >> 14)
      {
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        v3 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v3 + 16) + 1, 1, (char *)v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
LABEL_3:
        v11 = *(_QWORD *)(v3 + 16);
        v10 = *(_QWORD *)(v3 + 24);
        if (v11 >= v10 >> 1)
          v3 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v11 + 1, 1, (char *)v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
        *(_QWORD *)(v3 + 16) = v11 + 1;
        v12 = v3 + 32 * v11;
        *(_QWORD *)(v12 + 32) = v9;
        *(_QWORD *)(v12 + 40) = v8;
        *(_OWORD *)(v12 + 48) = v44;
        v45 = (char *)v3;
        goto LABEL_6;
      }
      v5 = v43;
      goto LABEL_23;
    }
LABEL_25:
    swift_bridgeObjectRelease();
    if (v9 >> 14 < v40 >> 14)
      goto LABEL_44;
    v25 = HIBYTE(*((_QWORD *)&v49 + 1)) & 0xFLL;
    if ((*((_QWORD *)&v49 + 1) & 0x2000000000000000) == 0)
      v25 = v49 & 0xFFFFFFFFFFFFLL;
    if (!v25)
      break;
    *(_QWORD *)&v50 = v40;
    *((_QWORD *)&v50 + 1) = v9;
    Parser.validateUnicodeScalar(_:_:)((uint64_t *)&v49, 2u, (uint64_t)&v46);
    swift_bridgeObjectRelease();
    v26 = v46;
    v8 = *((_QWORD *)&v46 + 1);
    v27 = v47;
    v28 = v39;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v39 + 2) + 1, 1, v39);
    v30 = *((_QWORD *)v28 + 2);
    v29 = *((_QWORD *)v28 + 3);
    v3 = v30 + 1;
    if (v30 >= v29 >> 1)
      v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v29 > 1), v30 + 1, 1, v28);
    *((_QWORD *)v28 + 2) = v3;
    v39 = v28;
    v31 = &v28[24 * v30];
    *((_DWORD *)v31 + 8) = v26;
    *((_QWORD *)v31 + 5) = v8;
    *((_QWORD *)v31 + 6) = v27;
  }
  swift_bridgeObjectRelease();
  v32._countAndFlagsBits = a1;
  v32._object = (void *)a2;
  if (!Parser.tryEat(_:)(v32))
  {
    *(_QWORD *)&v49 = a1;
    *((_QWORD *)&v49 + 1) = a2;
    v50 = 0uLL;
    v51 = 3;
    Parser.errorAtCurrentPosition(_:)(&v49);
  }
  v33 = *((_QWORD *)v39 + 2);
  if (v33 == 1)
  {
    v35 = *(_OWORD *)(v39 + 40);
    *(_DWORD *)a3 = *((_DWORD *)v39 + 8);
    *(_OWORD *)(a3 + 8) = v35;
    goto LABEL_40;
  }
  if (!v33)
  {
    v46 = xmmword_1DF003F30;
    v47 = xmmword_1DF003EE0;
    v48 = 2;
    Parser.errorAtCurrentPosition(_:)(&v46);
    v34 = *((_QWORD *)v5 + 2);
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = v34;
    *(_QWORD *)(a3 + 16) = v34;
LABEL_40:
    type metadata accessor for AST.Atom.Kind(0);
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v37 = v45;
  *(_QWORD *)a3 = v39;
  *(_QWORD *)(a3 + 8) = v37;
  type metadata accessor for AST.Atom.Kind(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t closure #1 in Parser.expectUnicodeScalarSequence(eating:)(_QWORD *a1, uint64_t a2, uint64_t a3, char **a4)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v24;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;

  swift_bridgeObjectRetain();
  v7 = String.subscript.getter();
  v9 = v8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v7 ^ v9) < 0x4000)
    return 1;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10 = String.subscript.getter();
  if (!((v10 ^ v11) >> 14))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    goto LABEL_4;
  }
  v19 = Substring.subscript.getter();
  v21 = v20;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  if (v19 == a2 && v21 == a3)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v22 & 1) != 0)
    return 1;
LABEL_4:
  specialized Parser.tryEatPrefix(maxLength:_:)(0, 1, a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD *))specialized Source.peekPrefix(maxLength:_:), &v26);
  v12 = v27;
  if (v27)
  {
    v13 = v26;
    v24 = v28;
    v14 = *a4;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a4 = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v14 + 2) + 1, 1, v14, &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
      *a4 = v14;
    }
    v17 = *((_QWORD *)v14 + 2);
    v16 = *((_QWORD *)v14 + 3);
    if (v17 >= v16 >> 1)
    {
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1, v14, &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
      *a4 = v14;
    }
    *((_QWORD *)v14 + 2) = v17 + 1;
    v18 = &v14[32 * v17];
    *((_QWORD *)v18 + 4) = v13;
    *((_QWORD *)v18 + 5) = v12;
    *((_OWORD *)v18 + 3) = v24;
    return 1;
  }
  return 0;
}

uint64_t specialized Parser.lexUntil(_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v6;
  unint64_t v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  char *v50;

  v6 = a1;
  v8 = a1[2];
  if ((specialized Parser.tryEatNonEmpty<A>(sequence:)(a2, a3) & 1) != 0)
  {
    result = swift_bridgeObjectRelease();
    v10 = v8;
LABEL_27:
    if (v10 >> 14 < v8 >> 14)
      goto LABEL_31;
    *a4 = 0;
    a4[1] = 0xE000000000000000;
    a4[2] = v8;
    a4[3] = v10;
    return result;
  }
  v44 = a2;
  v43 = a4;
  v42 = v8;
  v10 = v8;
  v45 = a3;
  v48 = v6;
  while (1)
  {
    v49 = v10;
    v10 = v6[2];
    v11 = v6[3];
    v12 = (char *)v6[9];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13 = String.subscript.getter();
    v15 = v14;
    swift_bridgeObjectRelease();
    if (!((v13 ^ v15) >> 14))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v8 = v42;
      a4 = v43;
      v10 = v49;
      goto LABEL_27;
    }
    v46 = Substring.subscript.getter();
    v47 = v16;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    String.subscript.getter();
    swift_bridgeObjectRelease();
    v17 = Substring.index(_:offsetBy:limitedBy:)();
    v19 = v18;
    result = swift_bridgeObjectRelease();
    if ((v19 & 1) == 0)
      break;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v23 = *((_QWORD *)v12 + 2);
    v22 = *((_QWORD *)v12 + 3);
    if (v23 >= v22 >> 1)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v22 > 1), v23 + 1, 1, v12);
    *((_QWORD *)v12 + 2) = v23 + 1;
    v24 = &v12[80 * v23];
    v24[32] = 0;
    *((_QWORD *)v24 + 5) = 0xD000000000000022;
    *((_QWORD *)v24 + 6) = 0x80000001DF007440;
    *((_QWORD *)v24 + 7) = v10;
    *((_QWORD *)v24 + 8) = v10;
    *(_OWORD *)(v24 + 72) = 0u;
    *(_OWORD *)(v24 + 88) = 0u;
    v24[104] = -1;
    v50 = v12;
    v48[9] = v12;
    swift_bridgeObjectRetain();
    String.subscript.getter();
    swift_bridgeObjectRelease();
    v25 = Substring.distance(from:to:)();
    swift_bridgeObjectRelease();
    if (v25 < 1
      || (swift_bridgeObjectRetain(),
          String.subscript.getter(),
          swift_bridgeObjectRelease(),
          v26 = Substring.index(_:offsetBy:limitedBy:)(),
          v28 = v27,
          result = swift_bridgeObjectRelease(),
          (v28 & 1) != 0))
    {
      v20 = v44;
      v21 = v45;
      goto LABEL_19;
    }
    v20 = v44;
    v21 = v45;
    if (v11 >> 14 < v26 >> 14)
      goto LABEL_30;
    v10 = v26;
LABEL_17:
    v48[2] = v10;
    v48[3] = v11;
LABEL_19:
    MEMORY[0x1DF0F36FC](v46, v47);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v29 = String.init<A>(_:)();
    v31 = v30;
    swift_bridgeObjectRetain();
    v32 = String.subscript.getter();
    v34 = v33;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v32 ^ v34) >> 14)
    {
      swift_bridgeObjectRelease();
      v6 = v48;
      if ((specialized Parser.tryEat<A>(sequence:)(v20, v21) & 1) != 0)
      {
        result = swift_bridgeObjectRelease();
        v8 = v42;
        a4 = v43;
        goto LABEL_27;
      }
    }
    else
    {
      ParseError.description.getter();
      v36 = v35;
      v38 = v37;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v50 + 2) + 1, 1, v50);
      v40 = *((_QWORD *)v50 + 2);
      v39 = *((_QWORD *)v50 + 3);
      if (v40 >= v39 >> 1)
        v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v39 > 1), v40 + 1, 1, v50);
      *((_QWORD *)v50 + 2) = v40 + 1;
      v41 = &v50[80 * v40];
      v41[32] = 1;
      *((_QWORD *)v41 + 5) = v36;
      *((_QWORD *)v41 + 6) = v38;
      *((_QWORD *)v41 + 7) = v10;
      *((_QWORD *)v41 + 8) = v10;
      *((_QWORD *)v41 + 9) = v29;
      *((_QWORD *)v41 + 10) = v31;
      *((_QWORD *)v41 + 11) = 0;
      *((_QWORD *)v41 + 12) = 0;
      v41[104] = 3;
      swift_bridgeObjectRelease();
      v6 = v48;
      v48[9] = v50;
    }
  }
  v20 = v44;
  if (v11 >> 14 >= v17 >> 14)
  {
    v10 = v17;
    v50 = v12;
    v21 = v45;
    goto LABEL_17;
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t specialized Parser.lexUntil(_:)@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(void)@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  char v22;
  unint64_t v24;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;

  v3 = a1;
  v4 = a1[2];
  result = a2();
  v24 = v4;
  if ((result & 1) == 0)
  {
    v6 = v4;
    v26 = v3;
    do
    {
      v28 = v6;
      v4 = v3[2];
      v7 = v3[3];
      v8 = (char *)v3[9];
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v9 = String.subscript.getter();
      v11 = v10;
      swift_bridgeObjectRelease();
      if (!((v9 ^ v11) >> 14))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        v4 = v28;
        break;
      }
      v27 = Substring.subscript.getter();
      v29 = v12;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.subscript.getter();
      swift_bridgeObjectRelease();
      v13 = Substring.index(_:offsetBy:limitedBy:)();
      v15 = v14;
      result = swift_bridgeObjectRelease();
      if ((v15 & 1) != 0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
        v17 = *((_QWORD *)v8 + 2);
        v16 = *((_QWORD *)v8 + 3);
        if (v17 >= v16 >> 1)
          v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1, v8);
        *((_QWORD *)v8 + 2) = v17 + 1;
        v18 = &v8[80 * v17];
        v18[32] = 0;
        *((_QWORD *)v18 + 5) = 0xD000000000000022;
        *((_QWORD *)v18 + 6) = 0x80000001DF007440;
        *((_QWORD *)v18 + 7) = v4;
        *((_QWORD *)v18 + 8) = v4;
        *(_OWORD *)(v18 + 72) = 0u;
        *(_OWORD *)(v18 + 88) = 0u;
        v18[104] = -1;
        v26[9] = v8;
        v3 = v26;
        swift_bridgeObjectRetain();
        String.subscript.getter();
        swift_bridgeObjectRelease();
        v19 = Substring.distance(from:to:)();
        swift_bridgeObjectRelease();
        if (v19 < 1)
          goto LABEL_6;
        swift_bridgeObjectRetain();
        String.subscript.getter();
        swift_bridgeObjectRelease();
        v20 = Substring.index(_:offsetBy:limitedBy:)();
        v22 = v21;
        v3 = v26;
        result = swift_bridgeObjectRelease();
        if ((v22 & 1) != 0)
          goto LABEL_6;
        if (v7 >> 14 < v20 >> 14)
          goto LABEL_21;
        v4 = v20;
      }
      else
      {
        if (v7 >> 14 < v13 >> 14)
        {
          __break(1u);
LABEL_21:
          __break(1u);
LABEL_22:
          __break(1u);
          return result;
        }
        v4 = v13;
        v3 = v26;
      }
      v3[2] = v4;
      v3[3] = v7;
LABEL_6:
      MEMORY[0x1DF0F36FC](v27, v29);
      swift_bridgeObjectRelease();
      result = ((uint64_t (*)(_QWORD *))a2)(v3);
      v6 = v4;
    }
    while ((result & 1) == 0);
  }
  if (v4 >> 14 < v24 >> 14)
    goto LABEL_22;
  *a3 = 0;
  a3[1] = 0xE000000000000000;
  a3[2] = v24;
  a3[3] = v4;
  return result;
}

uint64_t Parser.lexUnicodeScalar()@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  __int128 v29;
  uint64_t v30;
  Swift::String v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t result;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  int v98;
  __int128 v99;
  uint64_t v100;
  __int128 v101;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Atom.Kind?);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v7 = v1[1];
  v10 = v1[2];
  v9 = v1[3];
  LOBYTE(v5) = *((_BYTE *)v1 + 32);
  v11 = v1[5];
  v12 = v1[6];
  v92 = v1[7];
  v93 = v11;
  v91 = *((unsigned __int8 *)v1 + 64);
  v13 = v1[9];
  v97 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v94 = v9;
  v95 = v10;
  v14 = String.subscript.getter();
  v96 = v13;
  if ((v14 ^ v15) >> 14)
  {
    v16 = Substring.subscript.getter();
    v18 = v17;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    Parser.advance(_:)(1);
    if (!v18)
      goto LABEL_49;
    v19 = v16 == 117 && v18 == 0xE100000000000000;
    v20 = v19;
    if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      v21._countAndFlagsBits = 123;
      v21._object = (void *)0xE100000000000000;
      if (Parser.tryEat(_:)(v21))
      {
        swift_bridgeObjectRelease();
        Parser.expectUnicodeScalarSequence(eating:)(125, 0xE100000000000000, (uint64_t)v6);
        v22 = type metadata accessor for AST.Atom.Kind(0);
        v23 = *(_QWORD *)(v22 - 8);
LABEL_32:
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v6, 0, 1, v22);
        goto LABEL_50;
      }
    }
    if (v16 == 120 && v18 == 0xE100000000000000)
    {
      v24._countAndFlagsBits = 123;
      v24._object = (void *)0xE100000000000000;
      if (!Parser.tryEat(_:)(v24))
        goto LABEL_22;
    }
    else if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
           || (v25._countAndFlagsBits = 123, v25._object = (void *)0xE100000000000000, !Parser.tryEat(_:)(v25)))
    {
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        if ((v20 & 1) != 0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v30 = 4;
        }
        else
        {
          if ((v16 != 85 || v18 != 0xE100000000000000) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            if ((v16 == 111 && v18 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              && (v31._countAndFlagsBits = 123, v31._object = (void *)0xE100000000000000, Parser.tryEat(_:)(v31)))
            {
              swift_bridgeObjectRelease();
              specialized Parser.lexUntil(_:)(v1, 125, 0xE100000000000000, &v100);
              v32 = v100;
              v33 = v101;
            }
            else
            {
              if (v16 == 48 && v18 == 0xE100000000000000)
              {
                swift_bridgeObjectRelease();
              }
              else
              {
                v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                if ((v34 & 1) == 0)
                  goto LABEL_49;
              }
              specialized Parser.tryEatPrefix(maxLength:_:)(3, 0, v1, (uint64_t (*)(uint64_t, _QWORD, _QWORD *))specialized Source.peekPrefix(maxLength:_:), &v100);
              v33 = v101;
              if (!(_QWORD)v101)
                goto LABEL_64;
              v32 = v100;
            }
            v100 = v32;
            *(_QWORD *)&v101 = v33;
            v28 = 0;
            goto LABEL_25;
          }
          swift_bridgeObjectRelease();
          v30 = 8;
        }
        Parser.expectUnicodeScalar(numDigits:)(v30, (uint64_t)&v100);
        *(_DWORD *)v6 = v100;
        v29 = v101;
        goto LABEL_30;
      }
LABEL_22:
      swift_bridgeObjectRelease();
      specialized Parser.tryEatPrefix(maxLength:_:)(2, 0, v1, (uint64_t (*)(uint64_t, _QWORD, _QWORD *))specialized Source.peekPrefix(maxLength:_:), &v100);
      v27 = v101;
      if ((_QWORD)v101)
      {
        v26 = v100;
        goto LABEL_24;
      }
LABEL_64:
      v75 = v1[2];
      *(_DWORD *)v6 = 0;
      *((_QWORD *)v6 + 1) = v75;
      *((_QWORD *)v6 + 2) = v75;
      goto LABEL_31;
    }
    swift_bridgeObjectRelease();
    specialized Parser.lexUntil(_:)(v1, 125, 0xE100000000000000, &v100);
    v26 = v100;
    v27 = v101;
LABEL_24:
    v100 = v26;
    *(_QWORD *)&v101 = v27;
    v28 = 2;
LABEL_25:
    Parser.validateUnicodeScalar(_:_:)(&v100, v28, (uint64_t)&v98);
    swift_bridgeObjectRelease();
    *(_DWORD *)v6 = v98;
    v29 = v99;
LABEL_30:
    *(_OWORD *)(v6 + 8) = v29;
LABEL_31:
    v22 = type metadata accessor for AST.Atom.Kind(0);
    swift_storeEnumTagMultiPayload();
    v23 = *(_QWORD *)(v22 - 8);
    goto LABEL_32;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_49:
  v22 = type metadata accessor for AST.Atom.Kind(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v6, 1, 1, v22);
LABEL_50:
  type metadata accessor for AST.Atom.Kind(0);
  v35 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v6, 1, v22) == 1)
  {
    v89 = v35;
    v90 = v22;
    outlined destroy of _ASTParent?((uint64_t)v6, &demangling cache variable for type metadata for AST.Atom.Kind?);
    v36 = v1[9];
    v87 = v1;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v37 = v96;
    v38 = v7;
    v39 = v12;
    v40 = v8;
    v41 = a1;
    v42 = specialized Collection.dropFirst(_:)(*(_QWORD *)(v96 + 16), v36);
    v44 = v43;
    v46 = v45;
    v48 = v47 >> 1;
    swift_bridgeObjectRetain();
    v88 = v42;
    v49 = v41;
    v50 = v40;
    v51 = v39;
    result = swift_unknownObjectRetain();
    v53 = v44 - 32;
    v54 = v37;
    v55 = v46;
    v56 = v46;
LABEL_52:
    v57 = v53 + 80 * v55;
    while (1)
    {
      if (v48 == v56)
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease_n();
        v72 = v97;
        v73 = v87;
        *v87 = v50;
        v73[1] = v38;
        v74 = v94;
        v73[2] = v95;
        v73[3] = v74;
        *((_BYTE *)v73 + 32) = v72;
        v73[5] = v93;
        v73[6] = v51;
        v73[7] = v92;
        *((_BYTE *)v73 + 64) = v91;
        v73[9] = v54;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v89 + 56))(v49, 1, 1, v90);
      }
      if (v55 < v46 || v56 >= v48)
        break;
      v58 = *(unsigned __int8 *)(v57 + 32);
      ++v56;
      v57 += 80;
      if (!v58)
      {
        v81 = v53;
        v83 = v36;
        v84 = v50;
        v85 = v51;
        v96 = v38;
        v59 = *(_QWORD *)(v57 - 32);
        v80 = *(_QWORD *)(v57 - 40);
        v79 = *(_QWORD *)(v57 - 24);
        v60 = *(_QWORD *)(v57 - 8);
        v78 = *(_QWORD *)(v57 - 16);
        v61 = *(_QWORD *)v57;
        v62 = *(_QWORD *)(v57 + 8);
        v63 = *(_QWORD *)(v57 + 16);
        v64 = *(_BYTE *)(v57 + 24);
        v77 = v59;
        swift_bridgeObjectRetain();
        v82 = v61;
        outlined copy of ParseError?(v60, v61, v62, v63, v64);
        result = swift_isUniquelyReferenced_nonNull_native();
        v86 = v49;
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v54 + 16) + 1, 1, (char *)v54);
          v54 = result;
        }
        v66 = *(_QWORD *)(v54 + 16);
        v65 = *(_QWORD *)(v54 + 24);
        v67 = v54;
        if (v66 >= v65 >> 1)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v65 > 1), v66 + 1, 1, (char *)v54);
          v67 = result;
        }
        *(_QWORD *)(v67 + 16) = v66 + 1;
        v54 = v67;
        v68 = v67 + 80 * v66;
        *(_BYTE *)(v68 + 32) = 0;
        v69 = v77;
        *(_QWORD *)(v68 + 40) = v80;
        *(_QWORD *)(v68 + 48) = v69;
        v70 = v78;
        *(_QWORD *)(v68 + 56) = v79;
        *(_QWORD *)(v68 + 64) = v70;
        v71 = v82;
        *(_QWORD *)(v68 + 72) = v60;
        *(_QWORD *)(v68 + 80) = v71;
        *(_QWORD *)(v68 + 88) = v62;
        *(_QWORD *)(v68 + 96) = v63;
        *(_BYTE *)(v68 + 104) = v64;
        v55 = v56;
        v51 = v85;
        v49 = v86;
        v38 = v96;
        v50 = v84;
        v36 = v83;
        v53 = v81;
        goto LABEL_52;
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined init with take of AST.Atom.Kind((uint64_t)v6, a1, type metadata accessor for AST.Atom.Kind);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v35 + 56))(a1, 0, 1, v22);
  }
  return result;
}

uint64_t Parser.lexQuantifier()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v3 = *(_QWORD *)v1;
  v4 = *(_QWORD *)(v1 + 8);
  v54 = *(_QWORD *)(v1 + 24);
  v55 = *(_QWORD *)(v1 + 16);
  v53 = *(_BYTE *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 48);
  v51 = *(_QWORD *)(v1 + 56);
  v52 = *(_QWORD *)(v1 + 40);
  v50 = *(_BYTE *)(v1 + 64);
  v6 = *(_QWORD *)(v1 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  closure #1 in Parser.lexQuantifier()(v1, (uint64_t)&v66);
  v57 = v66;
  v58 = v68;
  v60 = v69;
  v61 = v70;
  v62 = v72;
  v63 = v73;
  v7 = v75;
  v64 = v74;
  v8 = v76;
  v9 = v77;
  v59 = v67;
  v10 = v79;
  v65 = v78;
  if (v67 >> 1 == 0xFFFFFFFF && v71 < 2)
  {
    v45 = v71;
    v46 = v75;
    v47 = v3;
    v48 = v79;
    v49 = v76;
    v11 = *(_QWORD *)(v1 + 72);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    specialized Collection.dropFirst(_:)(*(_QWORD *)(v6 + 16), v11);
    v13 = v12;
    v15 = v14;
    v17 = v16 >> 1;
    swift_bridgeObjectRetain();
    result = swift_unknownObjectRetain();
    v19 = v13 - 32;
    v20 = v15;
    v21 = v15;
LABEL_4:
    v22 = v19 + 80 * v20;
    while (1)
    {
      if (v17 == v21)
      {
        swift_bridgeObjectRelease();
        result = swift_unknownObjectRelease_n();
        *(_QWORD *)v1 = v47;
        *(_QWORD *)(v1 + 8) = v4;
        *(_QWORD *)(v1 + 16) = v55;
        *(_QWORD *)(v1 + 24) = v54;
        *(_BYTE *)(v1 + 32) = v53;
        *(_QWORD *)(v1 + 40) = v52;
        *(_QWORD *)(v1 + 48) = v5;
        *(_QWORD *)(v1 + 56) = v51;
        *(_BYTE *)(v1 + 64) = v50;
        *(_QWORD *)(v1 + 72) = v6;
        *a1 = v57;
        a1[1] = v59;
        a1[2] = v58;
        a1[3] = v60;
        a1[4] = v61;
        a1[5] = v45;
        a1[6] = v62;
        a1[7] = v63;
        a1[8] = v64;
        a1[9] = v46;
        a1[10] = v49;
        a1[11] = v9;
        a1[12] = v65;
        a1[13] = v48;
        return result;
      }
      if (v20 < v15 || v21 >= v17)
        break;
      v23 = *(unsigned __int8 *)(v22 + 32);
      ++v21;
      v22 += 80;
      if (!v23)
      {
        v41 = v19;
        v42 = v9;
        v43 = v5;
        v44 = v4;
        v37 = *(_QWORD *)(v22 - 24);
        v38 = *(_QWORD *)(v22 - 40);
        v24 = *(_QWORD *)(v22 - 8);
        v35 = *(_QWORD *)(v22 - 32);
        v36 = *(_QWORD *)(v22 - 16);
        v56 = v6;
        v26 = *(_QWORD *)v22;
        v25 = *(_QWORD *)(v22 + 8);
        v27 = *(_QWORD *)(v22 + 16);
        v28 = *(_BYTE *)(v22 + 24);
        swift_bridgeObjectRetain();
        v39 = v24;
        v40 = v26;
        v29 = v26;
        v30 = v25;
        v6 = v56;
        outlined copy of ParseError?(v24, v29, v30, v27, v28);
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v56 + 16) + 1, 1, (char *)v56);
          v6 = result;
        }
        v32 = *(_QWORD *)(v6 + 16);
        v31 = *(_QWORD *)(v6 + 24);
        if (v32 >= v31 >> 1)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v31 > 1), v32 + 1, 1, (char *)v6);
          v6 = result;
        }
        *(_QWORD *)(v6 + 16) = v32 + 1;
        v33 = v6 + 80 * v32;
        *(_BYTE *)(v33 + 32) = 0;
        *(_QWORD *)(v33 + 40) = v38;
        *(_QWORD *)(v33 + 48) = v35;
        *(_QWORD *)(v33 + 56) = v37;
        *(_QWORD *)(v33 + 64) = v36;
        *(_QWORD *)(v33 + 72) = v39;
        *(_QWORD *)(v33 + 80) = v40;
        *(_QWORD *)(v33 + 88) = v30;
        *(_QWORD *)(v33 + 96) = v27;
        *(_BYTE *)(v33 + 104) = v28;
        v20 = v21;
        v5 = v43;
        v4 = v44;
        v19 = v41;
        v9 = v42;
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  else
  {
    v34 = v71;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    *a1 = v57;
    a1[1] = v59;
    a1[2] = v58;
    a1[3] = v60;
    a1[4] = v61;
    a1[5] = v34;
    a1[6] = v62;
    a1[7] = v63;
    a1[8] = v64;
    a1[9] = v7;
    *((_BYTE *)a1 + 80) = v8;
    a1[11] = v9;
    a1[12] = v65;
    a1[13] = v10;
  }
  return result;
}

uint64_t closure #1 in Parser.lexQuantifier()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  Swift::String v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t result;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  Swift::String v26;
  uint64_t v27;
  Swift::String v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[40];
  unint64_t v38;
  __int128 v39;
  char *v40;

  v40 = (char *)MEMORY[0x1E0DEE9D8];
  if ((*(_BYTE *)(a1 + 56) & 1) == 0)
    goto LABEL_7;
  specialized Parser.tryEatPrefix(maxLength:_:)(0, 1, (_QWORD *)a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD *))specialized Source.peekPrefix(maxLength:_:), (uint64_t *)v37);
  v5 = *(_QWORD *)&v37[8];
  if (!*(_QWORD *)&v37[8])
    goto LABEL_7;
  v6 = *(_QWORD *)v37;
  v36 = *(_OWORD *)&v37[16];
  v2 = (char *)MEMORY[0x1E0DEE9D8];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_38;
  while (1)
  {
    v8 = *((_QWORD *)v2 + 2);
    v7 = *((_QWORD *)v2 + 3);
    if (v8 >= v7 >> 1)
      v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1, v2, &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
    *((_QWORD *)v2 + 2) = v8 + 1;
    v9 = &v2[32 * v8];
    *((_QWORD *)v9 + 4) = v6;
    *((_QWORD *)v9 + 5) = v5;
    *((_OWORD *)v9 + 3) = v36;
    v40 = v2;
LABEL_7:
    v5 = *(_QWORD *)(a1 + 16);
    v10._countAndFlagsBits = 42;
    v10._object = (void *)0xE100000000000000;
    if (Parser.tryEat(_:)(v10))
    {
      memset(v37, 0, sizeof(v37));
LABEL_14:
      v14 = 0;
      v39 = 0uLL;
      v6 = 0x8000000000000000;
      goto LABEL_15;
    }
    v11._countAndFlagsBits = 43;
    v11._object = (void *)0xE100000000000000;
    v2 = &v37[8];
    if (Parser.tryEat(_:)(v11))
    {
      v12 = 1;
LABEL_13:
      *(_QWORD *)v37 = v12;
      memset(&v37[8], 0, 32);
      goto LABEL_14;
    }
    v13._countAndFlagsBits = 63;
    v13._object = (void *)0xE100000000000000;
    if (Parser.tryEat(_:)(v13))
    {
      v12 = 2;
      goto LABEL_13;
    }
    specialized Parser.tryEating<A>(_:)(a1, &v40, (uint64_t)v37);
    v14 = *(_QWORD *)&v37[8];
    v6 = v38;
    if (*(_QWORD *)&v37[8] >> 1 == 0xFFFFFFFFLL && v38 < 2)
    {
      v17 = 0;
      v19 = 0;
      v6 = 0;
      v5 = 0;
      v15 = 0;
      v18 = 0uLL;
      v16 = 0uLL;
      v14 = 0x1FFFFFFFELL;
      goto LABEL_17;
    }
LABEL_15:
    v15 = *(_QWORD *)(a1 + 16);
    if (v15 >> 14 < v5 >> 14)
    {
      __break(1u);
      goto LABEL_37;
    }
    v16 = v39;
    v17 = *(_QWORD *)&v37[32];
    v18 = *(_OWORD *)&v37[16];
    v19 = *(_QWORD *)v37;
LABEL_17:
    if (v14 >> 1 == 0xFFFFFFFF && v6 <= 1)
    {
      *(_OWORD *)a2 = xmmword_1DF003F10;
      *(_OWORD *)(a2 + 16) = 0u;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)(a2 + 48) = 0u;
      *(_OWORD *)(a2 + 64) = 0u;
      *(_OWORD *)(a2 + 80) = 0u;
      *(_OWORD *)(a2 + 96) = 0u;
      return swift_bridgeObjectRelease();
    }
    v35 = v16;
    v36 = v18;
    if ((*(_BYTE *)(a1 + 56) & 1) != 0)
    {
      specialized Parser.tryEatPrefix(maxLength:_:)(0, 1, (_QWORD *)a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD *))specialized Source.peekPrefix(maxLength:_:), (uint64_t *)v37);
      if (*(_QWORD *)&v37[8])
      {
        v34 = *(_QWORD *)&v37[8];
        v32 = *(_QWORD *)v37;
        v33 = *(_OWORD *)&v37[16];
        v21 = v40;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v21 + 2) + 1, 1, v21, &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
        v23 = *((_QWORD *)v21 + 2);
        v22 = *((_QWORD *)v21 + 3);
        v24 = v23 + 1;
        if (v23 >= v22 >> 1)
        {
          v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v22 > 1), v23 + 1, 1, v21, &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
          v24 = v23 + 1;
          v21 = v31;
        }
        *((_QWORD *)v21 + 2) = v24;
        v25 = &v21[32 * v23];
        *((_QWORD *)v25 + 4) = v32;
        *((_QWORD *)v25 + 5) = v34;
        *((_OWORD *)v25 + 3) = v33;
        v40 = v21;
      }
    }
    v2 = *(char **)(a1 + 16);
    v26._countAndFlagsBits = 63;
    v26._object = (void *)0xE100000000000000;
    result = Parser.tryEat(_:)(v26);
    if ((result & 1) != 0)
    {
      v27 = 1;
    }
    else
    {
      v28._countAndFlagsBits = 43;
      v28._object = (void *)0xE100000000000000;
      result = Parser.tryEat(_:)(v28);
      v27 = 2;
      if ((result & 1) == 0)
        v27 = 0;
    }
    v29 = *(_QWORD *)(a1 + 16);
    if (v29 >> 14 >= (unint64_t)v2 >> 14)
      break;
LABEL_37:
    __break(1u);
LABEL_38:
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v2 + 2) + 1, 1, v2, &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
  }
  v30 = v40;
  *(_QWORD *)a2 = v19;
  *(_QWORD *)(a2 + 8) = v14;
  *(_OWORD *)(a2 + 16) = v36;
  *(_QWORD *)(a2 + 32) = v17;
  *(_QWORD *)(a2 + 40) = v6;
  *(_OWORD *)(a2 + 48) = v35;
  *(_QWORD *)(a2 + 64) = v5;
  *(_QWORD *)(a2 + 72) = v15;
  *(_QWORD *)(a2 + 80) = v27;
  *(_QWORD *)(a2 + 88) = v2;
  *(_QWORD *)(a2 + 96) = v29;
  *(_QWORD *)(a2 + 104) = v30;
  return result;
}

uint64_t Source.Located.init(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result;
  _QWORD *v9;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a5, a1, a4);
  result = type metadata accessor for Source.Located();
  v9 = (_QWORD *)(a5 + *(int *)(result + 28));
  *v9 = a2;
  v9[1] = a3;
  return result;
}

uint64_t Parser.expectQuoted(endingWith:count:ignoreEscaped:eatEnding:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, char a5@<W4>, uint64_t *a6@<X8>)
{
  unint64_t *v6;
  unint64_t *v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t result;
  unint64_t v32;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  char v46;

  v7 = v6;
  swift_bridgeObjectRetain();
  v12 = MEMORY[0x1DF0F378C](a1, a2, a3);
  v14 = v13;
  v15 = v7[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(_QWORD *)&v43 = 0;
  *((_QWORD *)&v43 + 1) = 0xE000000000000000;
  v38 = a1;
  v39 = a2;
  v16 = v15;
  if ((closure #1 in closure #1 in Parser.expectQuoted(endingWith:count:ignoreEscaped:eatEnding:)((uint64_t)v7, v12, v14, a1, a2, (char)a4) & 1) == 0)
  {
    v35 = a4 & 1;
    v32 = v15;
    v16 = v15;
    v40 = v7;
    v36 = v12;
    v37 = v14;
    while (1)
    {
      v15 = *v7;
      v14 = v7[1];
      a4 = (char *)v7[2];
      v17 = v7[3];
      a1 = v7[9];
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v12 = String.subscript.getter();
      a2 = v18;
      swift_bridgeObjectRelease();
      if (!((v12 ^ a2) >> 14))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v14 = v37;
        swift_bridgeObjectRelease();
        v15 = v32;
        v7 = v40;
        v12 = v36;
        goto LABEL_20;
      }
      v19 = Substring.subscript.getter();
      v41 = v20;
      v42 = v19;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.subscript.getter();
      swift_bridgeObjectRelease();
      v16 = Substring.index(_:offsetBy:limitedBy:)();
      a2 = v21;
      swift_bridgeObjectRelease();
      if ((a2 & 1) == 0)
        break;
      v7 = v40;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        a1 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16) + 1, 1, (char *)a1);
      v23 = *(_QWORD *)(a1 + 16);
      v22 = *(_QWORD *)(a1 + 24);
      if (v23 >= v22 >> 1)
        a1 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v22 > 1), v23 + 1, 1, (char *)a1);
      *(_QWORD *)(a1 + 16) = v23 + 1;
      v24 = a1 + 80 * v23;
      *(_BYTE *)(v24 + 32) = 0;
      *(_QWORD *)(v24 + 40) = 0xD000000000000022;
      *(_QWORD *)(v24 + 48) = 0x80000001DF007440;
      *(_QWORD *)(v24 + 56) = a4;
      *(_QWORD *)(v24 + 64) = a4;
      *(_OWORD *)(v24 + 72) = 0u;
      *(_OWORD *)(v24 + 88) = 0u;
      *(_BYTE *)(v24 + 104) = -1;
      v40[9] = a1;
      swift_bridgeObjectRetain();
      String.subscript.getter();
      swift_bridgeObjectRelease();
      a1 = Substring.distance(from:to:)();
      swift_bridgeObjectRelease();
      if (a1 < 1)
      {
        v16 = (unint64_t)a4;
        v12 = v36;
        v14 = v37;
      }
      else
      {
        swift_bridgeObjectRetain();
        String.subscript.getter();
        swift_bridgeObjectRelease();
        a2 = Substring.index(_:offsetBy:limitedBy:)();
        a1 = v25;
        v7 = v40;
        swift_bridgeObjectRelease();
        v16 = (unint64_t)a4;
        v12 = v36;
        v14 = v37;
        if ((a1 & 1) == 0)
        {
          if (v17 >> 14 < a2 >> 14)
            goto LABEL_36;
          v16 = a2;
LABEL_17:
          v7[2] = v16;
          v7[3] = v17;
        }
      }
      a2 = v41;
      MEMORY[0x1DF0F36FC](v42, v41);
      swift_bridgeObjectRelease();
      if ((closure #1 in closure #1 in Parser.expectQuoted(endingWith:count:ignoreEscaped:eatEnding:)((uint64_t)v7, v12, v14, v38, v39, v35) & 1) != 0)
      {
        v15 = v32;
        goto LABEL_20;
      }
    }
    v7 = v40;
    if (v17 >> 14 < v16 >> 14)
    {
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    v12 = v36;
    v14 = v37;
    goto LABEL_17;
  }
LABEL_20:
  swift_bridgeObjectRelease();
  if (v15 >> 14 > v16 >> 14)
    goto LABEL_37;
  a2 = *((_QWORD *)&v43 + 1);
  a1 = v43;
  swift_bridgeObjectRelease();
  v16 = v7[2];
  if (v15 >> 14 > v16 >> 14)
  {
LABEL_38:
    __break(1u);
LABEL_39:
    a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)a4 + 2) + 1, 1, a4);
    goto LABEL_28;
  }
  v26 = HIBYTE(*((_QWORD *)&v43 + 1)) & 0xFLL;
  if ((*((_QWORD *)&v43 + 1) & 0x2000000000000000) == 0)
    v26 = v43 & 0xFFFFFFFFFFFFLL;
  if (v26)
  {
    if ((a5 & 1) == 0)
      goto LABEL_34;
    goto LABEL_31;
  }
  a4 = (char *)v7[9];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_39;
LABEL_28:
  v28 = *((_QWORD *)a4 + 2);
  v27 = *((_QWORD *)a4 + 3);
  if (v28 >= v27 >> 1)
    a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v28 + 1, 1, a4);
  *((_QWORD *)a4 + 2) = v28 + 1;
  v29 = &a4[80 * v28];
  v29[32] = 1;
  *((_QWORD *)v29 + 5) = 0xD00000000000001BLL;
  *((_QWORD *)v29 + 6) = 0x80000001DF006FC0;
  *((_QWORD *)v29 + 7) = v15;
  *((_QWORD *)v29 + 8) = v16;
  *((_QWORD *)v29 + 9) = 1;
  *((_QWORD *)v29 + 10) = 0;
  *((_QWORD *)v29 + 11) = 0;
  *((_QWORD *)v29 + 12) = 0;
  v29[104] = 36;
  v7[9] = (unint64_t)a4;
  if ((a5 & 1) != 0)
  {
LABEL_31:
    if ((specialized Parser.tryEat<A>(sequence:)(v12, v14) & 1) == 0)
    {
      *(_QWORD *)&v43 = String.init<A>(_:)();
      *((_QWORD *)&v43 + 1) = v30;
      v44 = 0;
      v45 = 0;
      v46 = 3;
      Parser.errorAtCurrentPosition(_:)(&v43);
    }
  }
LABEL_34:
  result = swift_bridgeObjectRelease();
  *a6 = a1;
  a6[1] = a2;
  a6[2] = v15;
  a6[3] = v16;
  return result;
}

uint64_t closure #1 in closure #1 in Parser.expectQuoted(endingWith:count:ignoreEscaped:eatEnding:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 *v14;
  Swift::String v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD v23[4];
  char v24;
  _QWORD v25[4];
  char v26;

  swift_bridgeObjectRetain();
  v8 = String.subscript.getter();
  v10 = v9;
  swift_bridgeObjectRelease();
  LOBYTE(v8) = specialized Sequence<>.starts<A>(with:)(a2, a3, v8, v10);
  swift_bridgeObjectRelease();
  if ((v8 & 1) != 0)
    return 1;
  v23[0] = a4;
  v23[1] = a5;
  v23[2] = 0;
  v23[3] = 0;
  v24 = 3;
  swift_bridgeObjectRetain();
  v11 = String.subscript.getter();
  v13 = v12;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v11 ^ v13) < 0x4000)
  {
    v14 = (__int128 *)v23;
LABEL_4:
    Parser.errorAtCurrentPosition(_:)(v14);
    return 1;
  }
  if ((a6 & 1) != 0)
  {
    v16._countAndFlagsBits = 92;
    v16._object = (void *)0xE100000000000000;
    if (Parser.tryEat(_:)(v16))
    {
      v25[0] = 2;
      memset(&v25[1], 0, 24);
      v26 = 36;
      swift_bridgeObjectRetain();
      v17 = String.subscript.getter();
      v19 = v18;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!((v17 ^ v19) >> 14))
      {
        v14 = (__int128 *)v25;
        goto LABEL_4;
      }
    }
  }
  return 0;
}

uint64_t closure #1 in Parser.lexQuote()@<X0>(unint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  char v23;
  char v24;
  unint64_t v25;
  Swift::String v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;

  result = specialized Parser.tryEat<A>(sequence:)(20828, 0xE200000000000000);
  if ((result & 1) == 0)
  {
    if ((*(_BYTE *)(a1 + 56) & 4) != 0
      && (v26._countAndFlagsBits = 34,
          v26._object = (void *)0xE100000000000000,
          result = Parser.tryEat(_:)(v26),
          (result & 1) != 0))
    {
      result = Parser.expectQuoted(endingWith:count:ignoreEscaped:eatEnding:)(34, 0xE100000000000000, 1, (char *)1, 1, &v41);
      v27 = v42;
      *a2 = v41;
      a2[1] = v27;
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
    }
    return result;
  }
  v36 = a2;
  v41 = 0;
  v42 = 0xE000000000000000;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  v8 = String.subscript.getter();
  v10 = v9;
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v37 = v7;
  if ((v8 ^ v10) >= 0x4000)
  {
    v6 = a1;
    result = specialized Parser.tryEat<A>(sequence:)(17756, 0xE200000000000000);
    if ((result & 1) == 0)
    {
      v38 = a1;
      while (1)
      {
        v39 = v7;
        v2 = *(_QWORD *)(a1 + 8);
        v6 = *(_QWORD *)(a1 + 16);
        v11 = *(_QWORD *)(a1 + 24);
        v8 = *(_QWORD *)(a1 + 48);
        v12 = *(char **)(a1 + 72);
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v13 = String.subscript.getter();
        v15 = v14;
        swift_bridgeObjectRelease();
        if (!((v13 ^ v15) >> 14))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          result = swift_bridgeObjectRelease();
          a1 = v38;
          v7 = v39;
          goto LABEL_27;
        }
        v40 = Substring.subscript.getter();
        v17 = v16;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        String.subscript.getter();
        swift_bridgeObjectRelease();
        v7 = Substring.index(_:offsetBy:limitedBy:)();
        v8 = v18;
        swift_bridgeObjectRelease();
        if ((v8 & 1) == 0)
          break;
        a1 = v38;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
        v20 = *((_QWORD *)v12 + 2);
        v19 = *((_QWORD *)v12 + 3);
        if (v20 >= v19 >> 1)
          v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v19 > 1), v20 + 1, 1, v12);
        *((_QWORD *)v12 + 2) = v20 + 1;
        v21 = &v12[80 * v20];
        v21[32] = 0;
        *((_QWORD *)v21 + 5) = 0xD000000000000022;
        *((_QWORD *)v21 + 6) = 0x80000001DF007440;
        *((_QWORD *)v21 + 7) = v6;
        *((_QWORD *)v21 + 8) = v6;
        *(_OWORD *)(v21 + 72) = 0u;
        *(_OWORD *)(v21 + 88) = 0u;
        v21[104] = -1;
        *(_QWORD *)(v38 + 72) = v12;
        swift_bridgeObjectRetain();
        String.subscript.getter();
        swift_bridgeObjectRelease();
        v22 = Substring.distance(from:to:)();
        swift_bridgeObjectRelease();
        if (v22 >= 1)
        {
          swift_bridgeObjectRetain();
          String.subscript.getter();
          swift_bridgeObjectRelease();
          v8 = Substring.index(_:offsetBy:limitedBy:)();
          v24 = v23;
          a1 = v38;
          swift_bridgeObjectRelease();
          v7 = v6;
          if ((v24 & 1) != 0)
            goto LABEL_19;
          if (v11 >> 14 < v8 >> 14)
            goto LABEL_45;
          v7 = v8;
          goto LABEL_17;
        }
        v7 = v6;
LABEL_19:
        MEMORY[0x1DF0F36FC](v40, v17);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v8 = String.subscript.getter();
        v6 = v25;
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        if ((v8 ^ v6) >= 0x4000)
        {
          v6 = a1;
          result = specialized Parser.tryEat<A>(sequence:)(17756, 0xE200000000000000);
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_27;
      }
      a1 = v38;
      if (v11 >> 14 < v7 >> 14)
      {
        __break(1u);
        goto LABEL_44;
      }
LABEL_17:
      *(_QWORD *)(a1 + 16) = v7;
      *(_QWORD *)(a1 + 24) = v11;
      goto LABEL_19;
    }
  }
LABEL_27:
  if (v7 >> 14 < v37 >> 14)
  {
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  v2 = v41;
  v6 = v42;
  if ((*(_BYTE *)(a1 + 56) & 0x40) != 0)
  {
    result = specialized StringProtocol.spansMultipleLinesInRegexLiteral.getter(v41, v42);
    if ((result & 1) != 0)
    {
      v8 = *(_QWORD *)(a1 + 72);
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
      {
LABEL_31:
        v29 = *(_QWORD *)(v8 + 16);
        v28 = *(_QWORD *)(v8 + 24);
        if (v29 >= v28 >> 1)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v28 > 1), v29 + 1, 1, (char *)v8);
          v8 = result;
        }
        *(_QWORD *)(v8 + 16) = v29 + 1;
        v30 = v8 + 80 * v29;
        *(_BYTE *)(v30 + 32) = 1;
        *(_QWORD *)(v30 + 40) = 0xD000000000000041;
        *(_QWORD *)(v30 + 48) = 0x80000001DF006EF0;
        *(_QWORD *)(v30 + 56) = v37;
        *(_QWORD *)(v30 + 64) = v7;
        *(_QWORD *)(v30 + 72) = 3;
        *(_QWORD *)(v30 + 80) = 0;
        *(_QWORD *)(v30 + 88) = 0;
        *(_QWORD *)(v30 + 96) = 0;
        *(_BYTE *)(v30 + 104) = 36;
        *(_QWORD *)(a1 + 72) = v8;
        goto LABEL_34;
      }
LABEL_46:
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v8 + 16) + 1, 1, (char *)v8);
      v8 = result;
      goto LABEL_31;
    }
  }
LABEL_34:
  if (*(_BYTE *)(a1 + 32) == 1)
  {
    v31 = HIBYTE(v6) & 0xF;
    if ((v6 & 0x2000000000000000) == 0)
      v31 = v2 & 0xFFFFFFFFFFFFLL;
    if (!v31)
    {
      v32 = *(_QWORD *)(a1 + 72);
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v32 + 16) + 1, 1, (char *)v32);
        v32 = result;
      }
      v34 = *(_QWORD *)(v32 + 16);
      v33 = *(_QWORD *)(v32 + 24);
      if (v34 >= v33 >> 1)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v33 > 1), v34 + 1, 1, (char *)v32);
        v32 = result;
      }
      *(_QWORD *)(v32 + 16) = v34 + 1;
      v35 = v32 + 80 * v34;
      *(_BYTE *)(v35 + 32) = 1;
      *(_QWORD *)(v35 + 40) = 0xD00000000000001BLL;
      *(_QWORD *)(v35 + 48) = 0x80000001DF006FC0;
      *(_QWORD *)(v35 + 56) = v37;
      *(_QWORD *)(v35 + 64) = v7;
      *(_QWORD *)(v35 + 72) = 1;
      *(_QWORD *)(v35 + 80) = 0;
      *(_QWORD *)(v35 + 88) = 0;
      *(_QWORD *)(v35 + 96) = 0;
      *(_BYTE *)(v35 + 104) = 36;
      *(_QWORD *)(a1 + 72) = v32;
    }
  }
  *v36 = v2;
  v36[1] = v6;
  return result;
}

void static SyntaxOptions.multilineCompilerLiteral.getter(_QWORD *a1@<X8>)
{
  *a1 = 64;
}

uint64_t specialized StringProtocol.spansMultipleLinesInRegexLiteral.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];

  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return 0;
  v5 = 0;
  v6 = a2 & 0xFFFFFFFFFFFFFFLL;
  v7 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  while (1)
  {
    if ((a2 & 0x1000000000000000) != 0)
    {
      v9 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((a2 & 0x2000000000000000) != 0)
      {
        v13[0] = a1;
        v13[1] = v6;
        v9 = *((unsigned __int8 *)v13 + v5);
        if (*((char *)v13 + v5) < 0)
          __asm { BR              X9 }
      }
      else
      {
        v8 = v7;
        if ((a1 & 0x1000000000000000) == 0)
          v8 = _StringObject.sharedUTF8.getter();
        v9 = *(unsigned __int8 *)(v8 + v5);
        if (*(char *)(v8 + v5) < 0)
          __asm { BR              X10 }
      }
      v10 = 1;
    }
    v11 = 1;
    if (v9 == 10 || v9 == 13)
      break;
    v5 += v10;
    if (v5 >= v2)
      return 0;
  }
  return v11;
}

uint64_t Parser.lexInterpolation()@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v2 = v1;
  v72 = v1[1];
  v73 = v1[2];
  v68 = v1[3];
  v69 = *v1;
  v67 = *((_BYTE *)v1 + 32);
  v3 = v1[6];
  v65 = v1[7];
  v66 = v1[5];
  v64 = *((_BYTE *)v1 + 64);
  v4 = v1[9];
  swift_bridgeObjectRetain();
  v71 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((specialized Parser.tryEat<A>(sequence:)(31548, 0xE200000000000000) & 1) == 0)
    goto LABEL_24;
  v60 = v4;
  v6 = v1[2];
  v5 = v1[3];
  swift_bridgeObjectRetain();
  v7 = String.subscript.getter();
  v9 = v8;
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v62 = v6;
  if ((v7 ^ v9) >= 0x4000)
  {
    v74 = v2;
    do
    {
      swift_bridgeObjectRetain();
      v14 = String.subscript.getter();
      v16 = v15;
      swift_bridgeObjectRelease();
      LOBYTE(v14) = specialized Sequence<>.starts<A>(with:)(15997, 0xE200000000000000, v14, v16);
      result = swift_bridgeObjectRelease();
      if ((v14 & 1) != 0)
        break;
      v17 = (char *)v2[9];
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v18 = String.subscript.getter();
      v20 = v19;
      swift_bridgeObjectRelease();
      if (!((v18 ^ v20) >> 14))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        v2 = v74;
        break;
      }
      v76 = Substring.subscript.getter();
      v78 = v21;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.subscript.getter();
      swift_bridgeObjectRelease();
      v22 = v6;
      v6 = Substring.index(_:offsetBy:limitedBy:)();
      v24 = v23;
      result = swift_bridgeObjectRelease();
      if ((v24 & 1) != 0)
      {
        v2 = v74;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v17 + 2) + 1, 1, v17);
        v6 = v22;
        v26 = *((_QWORD *)v17 + 2);
        v25 = *((_QWORD *)v17 + 3);
        if (v26 >= v25 >> 1)
          v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v25 > 1), v26 + 1, 1, v17);
        *((_QWORD *)v17 + 2) = v26 + 1;
        v27 = &v17[80 * v26];
        v27[32] = 0;
        *((_QWORD *)v27 + 5) = 0xD000000000000022;
        *((_QWORD *)v27 + 6) = 0x80000001DF007440;
        *((_QWORD *)v27 + 7) = v22;
        *((_QWORD *)v27 + 8) = v22;
        *(_OWORD *)(v27 + 72) = 0u;
        *(_OWORD *)(v27 + 88) = 0u;
        v27[104] = -1;
        v74[9] = (uint64_t)v17;
        swift_bridgeObjectRetain();
        String.subscript.getter();
        swift_bridgeObjectRelease();
        v28 = Substring.distance(from:to:)();
        swift_bridgeObjectRelease();
        if (v28 < 1)
          goto LABEL_6;
        swift_bridgeObjectRetain();
        String.subscript.getter();
        swift_bridgeObjectRelease();
        v29 = Substring.index(_:offsetBy:limitedBy:)();
        v31 = v30;
        result = swift_bridgeObjectRelease();
        if ((v31 & 1) != 0)
          goto LABEL_6;
        if (v5 >> 14 < v29 >> 14)
          goto LABEL_39;
        v6 = v29;
      }
      else
      {
        v2 = v74;
        if (v5 >> 14 < v6 >> 14)
          goto LABEL_37;
      }
      v2[2] = v6;
      v2[3] = v5;
LABEL_6:
      MEMORY[0x1DF0F36FC](v76, v78);
      swift_bridgeObjectRelease();
      v5 = v2[3];
      swift_bridgeObjectRetain();
      v11 = String.subscript.getter();
      v13 = v12;
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
    }
    while ((v11 ^ v13) >> 14);
  }
  if (v6 >> 14 < v62 >> 14)
    goto LABEL_38;
  if ((specialized Parser.tryEat<A>(sequence:)(15997, 0xE200000000000000) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    v4 = v60;
LABEL_24:
    v33 = v2[9];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v34 = specialized Collection.dropFirst(_:)(*(_QWORD *)(v4 + 16), v33);
    v36 = v35;
    v38 = v37;
    v40 = v39 >> 1;
    swift_bridgeObjectRetain();
    result = swift_unknownObjectRetain();
    v41 = v36 - 32;
    v42 = v38;
    v43 = v38;
LABEL_25:
    v44 = v41 + 80 * v42;
    while (1)
    {
      if (v40 == v43)
      {
        swift_bridgeObjectRelease();
        result = swift_unknownObjectRelease_n();
        *v2 = v69;
        v2[1] = v72;
        v2[2] = v73;
        v2[3] = v68;
        *((_BYTE *)v2 + 32) = v67;
        v2[5] = v66;
        v2[6] = v71;
        v2[7] = v65;
        *((_BYTE *)v2 + 64) = v64;
        v2[9] = v4;
        *(_OWORD *)a1 = 0u;
        *(_OWORD *)(a1 + 16) = 0u;
        return result;
      }
      if (v42 < v38 || v43 >= v40)
        break;
      v45 = *(unsigned __int8 *)(v44 + 32);
      ++v43;
      v44 += 80;
      if (!v45)
      {
        v77 = v34;
        v79 = v33;
        v75 = v41;
        v59 = *(_QWORD *)(v44 - 24);
        v61 = *(_QWORD *)(v44 - 40);
        v46 = *(_QWORD *)(v44 - 8);
        v57 = *(_QWORD *)(v44 - 32);
        v58 = *(_QWORD *)(v44 - 16);
        v47 = *(_QWORD *)v44;
        v48 = *(_QWORD *)(v44 + 8);
        v49 = *(_QWORD *)(v44 + 16);
        v50 = *(_BYTE *)(v44 + 24);
        swift_bridgeObjectRetain();
        v63 = v46;
        v51 = v46;
        v52 = v47;
        outlined copy of ParseError?(v51, v47, v48, v49, v50);
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v4 + 16) + 1, 1, (char *)v4);
          v4 = result;
        }
        v54 = *(_QWORD *)(v4 + 16);
        v53 = *(_QWORD *)(v4 + 24);
        v55 = v4;
        if (v54 >= v53 >> 1)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v53 > 1), v54 + 1, 1, (char *)v4);
          v55 = result;
        }
        *(_QWORD *)(v55 + 16) = v54 + 1;
        v4 = v55;
        v56 = v55 + 80 * v54;
        *(_BYTE *)(v56 + 32) = 0;
        *(_QWORD *)(v56 + 40) = v61;
        *(_QWORD *)(v56 + 48) = v57;
        *(_QWORD *)(v56 + 56) = v59;
        *(_QWORD *)(v56 + 64) = v58;
        *(_QWORD *)(v56 + 72) = v63;
        *(_QWORD *)(v56 + 80) = v52;
        *(_QWORD *)(v56 + 88) = v48;
        *(_QWORD *)(v56 + 96) = v49;
        *(_BYTE *)(v56 + 104) = v50;
        v42 = v43;
        v34 = v77;
        v33 = v79;
        v41 = v75;
        goto LABEL_25;
      }
    }
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v32 = v2[2];
  if (v32 >> 14 >= v73 >> 14)
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0xE000000000000000;
    *(_QWORD *)(a1 + 16) = v73;
    *(_QWORD *)(a1 + 24) = v32;
    return result;
  }
LABEL_40:
  __break(1u);
  return result;
}

_QWORD *Parser.lexQuote()@<X0>(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t)@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  _QWORD *result;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(v2 + 16);
  result = a1(&v8, v2);
  v6 = v9;
  if (v9)
  {
    v7 = *(_QWORD *)(v2 + 16);
    if (v7 >> 14 < v4 >> 14)
    {
      __break(1u);
    }
    else
    {
      *a2 = v8;
      a2[1] = v6;
      a2[2] = v4;
      a2[3] = v7;
    }
  }
  else
  {
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
  }
  return result;
}

uint64_t closure #1 in Parser.lexComment()@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::String v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  char v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;

  v2 = (_QWORD *)result;
  if ((*(_BYTE *)(result + 32) & 1) == 0)
  {
    result = specialized Parser.tryEat<A>(sequence:)(2309928, 0xE300000000000000);
    if ((result & 1) != 0)
    {
      v4 = v2;
      v5 = 41;
      v6 = 0xE100000000000000;
LABEL_7:
      result = specialized Parser.lexUntil(_:)(v4, v5, v6, &v34);
      v8 = v35;
      *a2 = v34;
      a2[1] = v8;
      return result;
    }
  }
  v7 = v2[7];
  if ((v7 & 8) != 0)
  {
    result = specialized Parser.tryEat<A>(sequence:)(10799, 0xE200000000000000);
    if ((result & 1) != 0)
    {
      v4 = v2;
      v5 = 12074;
      v6 = 0xE200000000000000;
      goto LABEL_7;
    }
    v7 = v2[7];
  }
  if ((v7 & 2) == 0
    || (v9._countAndFlagsBits = 35,
        v9._object = (void *)0xE100000000000000,
        result = Parser.tryEat(_:)(v9),
        (result & 1) == 0))
  {
    *a2 = 0;
    a2[1] = 0;
    return result;
  }
  v30 = a2;
  v10 = v2[2];
  v34 = 0;
  v35 = 0xE000000000000000;
  result = closure #1 in closure #1 in Parser.lexComment()((uint64_t)v2);
  v31 = v10;
  if ((result & 1) == 0)
  {
    v11 = v10;
    v32 = v2;
    while (1)
    {
      v10 = v2[2];
      v12 = v2[3];
      v13 = (char *)v2[9];
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v14 = String.subscript.getter();
      v16 = v15;
      swift_bridgeObjectRelease();
      if (!((v14 ^ v16) >> 14))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        v10 = v11;
        goto LABEL_30;
      }
      v17 = Substring.subscript.getter();
      v33 = v18;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.subscript.getter();
      swift_bridgeObjectRelease();
      v19 = Substring.index(_:offsetBy:limitedBy:)();
      v21 = v20;
      result = swift_bridgeObjectRelease();
      if ((v21 & 1) == 0)
        break;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
      v23 = *((_QWORD *)v13 + 2);
      v22 = *((_QWORD *)v13 + 3);
      if (v23 >= v22 >> 1)
        v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v22 > 1), v23 + 1, 1, v13);
      *((_QWORD *)v13 + 2) = v23 + 1;
      v24 = &v13[80 * v23];
      v24[32] = 0;
      *((_QWORD *)v24 + 5) = 0xD000000000000022;
      *((_QWORD *)v24 + 6) = 0x80000001DF007440;
      *((_QWORD *)v24 + 7) = v10;
      *((_QWORD *)v24 + 8) = v10;
      *(_OWORD *)(v24 + 72) = 0u;
      *(_OWORD *)(v24 + 88) = 0u;
      v24[104] = -1;
      v32[9] = v13;
      swift_bridgeObjectRetain();
      String.subscript.getter();
      swift_bridgeObjectRelease();
      v25 = Substring.distance(from:to:)();
      swift_bridgeObjectRelease();
      if (v25 < 1)
      {
        v2 = v32;
      }
      else
      {
        swift_bridgeObjectRetain();
        String.subscript.getter();
        swift_bridgeObjectRelease();
        v26 = Substring.index(_:offsetBy:limitedBy:)();
        v28 = v27;
        result = swift_bridgeObjectRelease();
        v2 = v32;
        if ((v28 & 1) == 0)
        {
          if (v12 >> 14 < v26 >> 14)
            goto LABEL_33;
          v10 = v26;
LABEL_28:
          v2[2] = v10;
          v2[3] = v12;
        }
      }
      MEMORY[0x1DF0F36FC](v17, v33);
      swift_bridgeObjectRelease();
      result = closure #1 in closure #1 in Parser.lexComment()((uint64_t)v2);
      v11 = v10;
      if ((result & 1) != 0)
        goto LABEL_30;
    }
    if (v12 >> 14 < v19 >> 14)
    {
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
      return result;
    }
    v10 = v19;
    v2 = v32;
    goto LABEL_28;
  }
LABEL_30:
  if (v10 >> 14 < v31 >> 14)
    goto LABEL_34;
  v29 = v35;
  *v30 = v34;
  v30[1] = v29;
  return result;
}

uint64_t closure #1 in closure #1 in Parser.lexComment()(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  swift_bridgeObjectRetain();
  v2 = String.subscript.getter();
  v4 = v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 ^ v4) >= 0x4000)
    __asm { BR              X10 }
  return 1;
}

uint64_t Parser.lexMatchingOption()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t countAndFlagsBits;
  unint64_t v12;
  uint64_t object;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t result;
  unint64_t v32;
  uint64_t v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String_optional v36;
  unint64_t v37;
  __int128 *v38;
  char v39;
  Swift::String v40;
  Swift::String v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  Swift::String v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  _QWORD v65[4];
  char v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  char v74;

  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(v1 + 8);
  v6 = *(_QWORD *)(v1 + 16);
  v5 = *(char **)(v1 + 24);
  LOBYTE(v61) = *(_BYTE *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 48);
  v59 = *(_QWORD *)(v1 + 56);
  v60 = *(_QWORD *)(v1 + 40);
  LOBYTE(v58) = *(_BYTE *)(v1 + 64);
  v8 = *(_QWORD *)(v1 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v62 = v5;
  v9 = String.subscript.getter();
  countAndFlagsBits = v10;
  if (!((v9 ^ v12) >> 14))
  {
    v57 = v3;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_3;
  }
  object = Substring.subscript.getter();
  v17 = v30;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Parser.advance(_:)(1);
  if (object == 105 && v17 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    countAndFlagsBits = 0;
  }
  else if (object == 74 && v17 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    countAndFlagsBits = 1;
  }
  else if (object == 109 && v17 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    countAndFlagsBits = 2;
  }
  else
  {
    if (object != 110 || v17 != 0xE100000000000000)
      goto LABEL_34;
LABEL_35:
    swift_bridgeObjectRelease();
    countAndFlagsBits = 3;
  }
LABEL_20:
  while (1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v32 = *(_QWORD *)(v1 + 16);
    if (v32 >> 14 >= v6 >> 14)
      break;
    __break(1u);
    while (1)
    {
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
LABEL_45:
        swift_bridgeObjectRelease();
        countAndFlagsBits = 5;
        goto LABEL_20;
      }
      v57 = v3;
      if (object == 120 && v17 == 0xE100000000000000)
      {
        swift_bridgeObjectRelease();
        goto LABEL_51;
      }
      v64 = v8;
      v33 = v1;
      v3 = a1;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        break;
      if (object == 119 && v17 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        countAndFlagsBits = 8;
LABEL_58:
        a1 = v3;
        v1 = v33;
        v8 = v64;
        goto LABEL_20;
      }
      if (object == 68 && v17 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        countAndFlagsBits = 9;
        goto LABEL_58;
      }
      if (object == 80 && v17 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        countAndFlagsBits = 10;
        goto LABEL_58;
      }
      if (object == 83 && v17 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        countAndFlagsBits = 11;
        goto LABEL_58;
      }
      if (object == 87 && v17 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        countAndFlagsBits = 12;
        goto LABEL_58;
      }
      if (object == 121 && v17 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v35._countAndFlagsBits = 123;
        v35._object = (void *)0xE100000000000000;
        if (!Parser.tryEat(_:)(v35))
        {
          v71 = xmmword_1DF003F50;
          v72 = 0;
          v73 = 0;
          v74 = 3;
          v38 = &v71;
          goto LABEL_87;
        }
        v17 = *(_QWORD *)(v1 + 16);
        v36 = Parser.tryEat()();
        if (!v36.value._object)
          goto LABEL_85;
        v37 = *(_QWORD *)(v1 + 16);
        if (v37 >> 14 < (unint64_t)v17 >> 14)
        {
          __break(1u);
        }
        else
        {
          countAndFlagsBits = v36.value._countAndFlagsBits;
          object = (uint64_t)v36.value._object;
          if (v36.value._countAndFlagsBits == 125 && v36.value._object == (void *)0xE100000000000000
            || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
LABEL_85:
            v65[0] = 0xD000000000000011;
            v65[1] = 0x80000001DF007210;
            v65[2] = 0;
            v65[3] = 0;
            v66 = 3;
            v38 = (__int128 *)v65;
LABEL_87:
            Parser.errorAtCurrentPosition(_:)(v38);
            countAndFlagsBits = 13;
LABEL_88:
            a1 = v3;
            v8 = v64;
            goto LABEL_20;
          }
          if (v36.value._countAndFlagsBits == 119 && v36.value._object == (void *)0xE100000000000000
            || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            countAndFlagsBits = 14;
LABEL_116:
            v46._countAndFlagsBits = 125;
            v46._object = (void *)0xE100000000000000;
            if (Parser.tryEat(_:)(v46))
              goto LABEL_58;
            v67 = xmmword_1DF003F60;
            v68 = 0;
            v69 = 0;
            v70 = 3;
            v1 = v33;
            Parser.errorAtCurrentPosition(_:)(&v67);
            goto LABEL_88;
          }
          if (v36.value._countAndFlagsBits == 103 && v36.value._object == (void *)0xE100000000000000
            || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
LABEL_115:
            countAndFlagsBits = 13;
            goto LABEL_116;
          }
          swift_bridgeObjectRetain();
          _StringGuts.grow(_:)(51);
          v40._countAndFlagsBits = 0xD00000000000001BLL;
          v40._object = (void *)0x80000001DF006CA0;
          String.append(_:)(v40);
          Character.write<A>(to:)();
          v41._countAndFlagsBits = 0xD000000000000016;
          v41._object = (void *)0x80000001DF006CC0;
          String.append(_:)(v41);
          v59 = 0xE000000000000000;
          v60 = 0;
          v42 = *(char **)(v1 + 72);
          swift_bridgeObjectRetain();
          v62 = v42;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          {
LABEL_112:
            v44 = *((_QWORD *)v62 + 2);
            v43 = *((_QWORD *)v62 + 3);
            v61 = v44 + 1;
            v58 = v44;
            if (v44 >= v43 >> 1)
              v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v43 > 1), v61, 1, v62);
            *((_QWORD *)v62 + 2) = v61;
            v45 = &v62[80 * v58];
            v45[32] = 1;
            *((_QWORD *)v45 + 5) = v60;
            *((_QWORD *)v45 + 6) = v59;
            *((_QWORD *)v45 + 7) = v17;
            *((_QWORD *)v45 + 8) = v37;
            *((_QWORD *)v45 + 9) = countAndFlagsBits;
            *((_QWORD *)v45 + 10) = object;
            *((_QWORD *)v45 + 11) = 0;
            *((_QWORD *)v45 + 12) = 0;
            v45[104] = 16;
            swift_bridgeObjectRelease_n();
            *(_QWORD *)(v33 + 72) = v62;
            goto LABEL_115;
          }
        }
        v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v62 + 2) + 1, 1, v62);
        goto LABEL_112;
      }
      if (object == 88 && v17 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        countAndFlagsBits = 15;
        goto LABEL_58;
      }
      if (object == 117 && v17 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        countAndFlagsBits = 16;
        goto LABEL_58;
      }
      if (object == 98 && v17 == 0xE100000000000000)
      {
        swift_bridgeObjectRelease();
        countAndFlagsBits = 17;
        goto LABEL_58;
      }
      v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v8 = v64;
      if ((v39 & 1) != 0)
      {
        countAndFlagsBits = 17;
        goto LABEL_20;
      }
LABEL_3:
      object = *(_QWORD *)(v1 + 72);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v63 = (char *)v8;
      specialized Collection.dropFirst(_:)(*(_QWORD *)(v8 + 16), object);
      v15 = v14;
      v17 = v16;
      v3 = (_QWORD *)(v18 >> 1);
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      countAndFlagsBits = v15 - 32;
      v19 = v17;
      v8 = v17;
LABEL_4:
      v20 = countAndFlagsBits + 80 * v19;
      while (1)
      {
        if (v3 == (_QWORD *)v8)
        {
          swift_bridgeObjectRelease();
          result = swift_unknownObjectRelease_n();
          *(_QWORD *)v1 = v57;
          *(_QWORD *)(v1 + 8) = v4;
          *(_QWORD *)(v1 + 16) = v6;
          *(_QWORD *)(v1 + 24) = v62;
          *(_BYTE *)(v1 + 32) = v61;
          *(_QWORD *)(v1 + 40) = v60;
          *(_QWORD *)(v1 + 48) = v7;
          *(_QWORD *)(v1 + 56) = v59;
          *(_BYTE *)(v1 + 64) = v58;
          *(_QWORD *)(v1 + 72) = v63;
          a1[1] = 0;
          a1[2] = 0;
          *a1 = 20;
          return result;
        }
        if (v19 < v17 || v8 >= (uint64_t)v3)
          break;
        v21 = *(unsigned __int8 *)(v20 + 32);
        ++v8;
        v20 += 80;
        if (!v21)
        {
          v52 = v7;
          v53 = v4;
          v54 = v6;
          v55 = v1;
          v56 = a1;
          v48 = *(_QWORD *)(v20 - 24);
          v49 = *(_QWORD *)(v20 - 40);
          v22 = *(_QWORD *)(v20 - 8);
          v47 = *(_QWORD *)(v20 - 16);
          v24 = *(_QWORD *)v20;
          v23 = *(_QWORD *)(v20 + 8);
          v25 = *(_QWORD *)(v20 + 16);
          v26 = *(_BYTE *)(v20 + 24);
          v50 = *(_QWORD *)(v20 - 32);
          swift_bridgeObjectRetain();
          outlined copy of ParseError?(v22, v24, v23, v25, v26);
          v51 = countAndFlagsBits;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v63 + 2) + 1, 1, v63);
          v28 = *((_QWORD *)v63 + 2);
          v27 = *((_QWORD *)v63 + 3);
          object = v28 + 1;
          if (v28 >= v27 >> 1)
            v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v28 + 1, 1, v63);
          *((_QWORD *)v63 + 2) = object;
          v29 = &v63[80 * v28];
          v29[32] = 0;
          countAndFlagsBits = v51;
          *((_QWORD *)v29 + 5) = v49;
          *((_QWORD *)v29 + 6) = v50;
          *((_QWORD *)v29 + 7) = v48;
          *((_QWORD *)v29 + 8) = v47;
          *((_QWORD *)v29 + 9) = v22;
          *((_QWORD *)v29 + 10) = v24;
          *((_QWORD *)v29 + 11) = v23;
          *((_QWORD *)v29 + 12) = v25;
          v29[104] = v26;
          v19 = v8;
          v1 = v55;
          a1 = v56;
          v4 = v53;
          v6 = v54;
          v7 = v52;
          goto LABEL_4;
        }
      }
      __break(1u);
LABEL_34:
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_35;
      if (object == 115 && v17 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        countAndFlagsBits = 4;
        goto LABEL_20;
      }
      if (object == 85 && v17 == 0xE100000000000000)
        goto LABEL_45;
    }
    swift_bridgeObjectRelease();
    v8 = v64;
LABEL_51:
    v34._countAndFlagsBits = 120;
    v34._object = (void *)0xE100000000000000;
    if (Parser.tryEat(_:)(v34))
      countAndFlagsBits = 7;
    else
      countAndFlagsBits = 6;
  }
  *a1 = countAndFlagsBits;
  a1[1] = v6;
  a1[2] = v32;
  return result;
}

double Parser.lexMatchingOptionSequence()@<D0>(unint64_t *a1@<X8>)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v4;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  double result;
  unint64_t v14;
  Swift::String v15;
  char v16;
  Swift::String v17;
  _BOOL4 v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  unsigned __int8 v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  _BOOL4 v50;
  unint64_t v51;
  _BOOL4 v52;
  unint64_t v53;
  __int128 v54;
  char *v55;
  uint64_t v56;
  __int128 v57;

  v4 = v1[1];
  v5 = v1[2];
  v6 = (char *)v1[6];
  v7 = v1[9];
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = String.subscript.getter();
  if ((v8 ^ v9) >> 14)
  {
    v10 = Substring.subscript.getter();
    v11 = v12;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v10 = 0;
    v11 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v11)
  {
    if (v10 == 41 && v11 == (char *)0xE100000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_9:
      *a1 = 0;
      a1[1] = 0;
      v14 = MEMORY[0x1E0DEE9D8];
      a1[2] = 1;
      a1[3] = v14;
      a1[4] = 0;
      a1[5] = 0;
      a1[6] = 1;
      a1[7] = v14;
      return result;
    }
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v4 & 1) != 0)
      goto LABEL_9;
  }
  v15._countAndFlagsBits = 94;
  v15._object = (void *)0xE100000000000000;
  v52 = Parser.tryEat(_:)(v15);
  if (v52)
  {
    v51 = v1[2];
    if (v51 >> 14 < v5 >> 14)
    {
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
      goto LABEL_19;
    }
    v53 = v5;
  }
  else
  {
    v53 = 0;
    v51 = 0;
  }
  Parser.lexMatchingOption()(&v56);
  v16 = v56;
  v6 = (char *)MEMORY[0x1E0DEE9D8];
  if (v56 != 20)
  {
    v27 = v57;
    do
    {
      v54 = v27;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
      v29 = *((_QWORD *)v6 + 2);
      v28 = *((_QWORD *)v6 + 3);
      v30 = v54;
      if (v29 >= v28 >> 1)
      {
        v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v28 > 1), v29 + 1, 1, v6);
        v30 = v54;
        v6 = v32;
      }
      *((_QWORD *)v6 + 2) = v29 + 1;
      v31 = &v6[24 * v29];
      v31[32] = v16;
      *(_OWORD *)(v31 + 40) = v30;
      Parser.lexMatchingOption()(&v56);
      v16 = v56;
      v27 = v57;
    }
    while (v56 != 20);
  }
  v4 = v1[2];
  v17._countAndFlagsBits = 45;
  v17._object = (void *)0xE100000000000000;
  v18 = Parser.tryEat(_:)(v17);
  if (!v18)
  {
    v24 = 0;
    v26 = 0;
    v23 = (char *)MEMORY[0x1E0DEE9D8];
    v25 = v53;
    goto LABEL_32;
  }
  v50 = v18;
  v7 = v1[2];
  v2 = v53;
  if (v7 >> 14 < v4 >> 14)
    goto LABEL_57;
  if (!v52)
    goto LABEL_22;
  v11 = (char *)v1[9];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_58;
LABEL_19:
  v20 = *((_QWORD *)v11 + 2);
  v19 = *((_QWORD *)v11 + 3);
  if (v20 >= v19 >> 1)
    v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v19 > 1), v20 + 1, 1, v11);
  *((_QWORD *)v11 + 2) = v20 + 1;
  v21 = &v11[80 * v20];
  v21[32] = 1;
  *((_QWORD *)v21 + 5) = 0xD000000000000031;
  *((_QWORD *)v21 + 6) = 0x80000001DF006C40;
  *((_QWORD *)v21 + 7) = v2;
  *((_QWORD *)v21 + 8) = v51;
  *((_QWORD *)v21 + 9) = 6;
  *((_QWORD *)v21 + 10) = 0;
  *((_QWORD *)v21 + 11) = 0;
  *((_QWORD *)v21 + 12) = 0;
  v21[104] = 36;
  v1[9] = v11;
LABEL_22:
  v47 = v7;
  v48 = v4;
  v49 = a1;
  Parser.lexMatchingOption()(&v56);
  v22 = v56;
  v23 = (char *)MEMORY[0x1E0DEE9D8];
  if (v56 != 20)
  {
    v34 = *((_QWORD *)&v57 + 1);
    v33 = v57;
    while (v22 - 15 >= 3)
    {
      if (v22 - 13 <= 1)
      {
        v35 = (char *)v1[9];
        v55 = v23;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v35 + 2) + 1, 1, v35);
        v37 = *((_QWORD *)v35 + 2);
        v42 = *((_QWORD *)v35 + 3);
        v38 = v37 + 1;
        v40 = 0xD00000000000002FLL;
        v39 = 0x80000001DF006A60;
        if (v37 >= v42 >> 1)
          v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v42 > 1), v37 + 1, 1, v35);
        v41 = 11;
        goto LABEL_48;
      }
LABEL_49:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v23 + 2) + 1, 1, v23);
      v45 = *((_QWORD *)v23 + 2);
      v44 = *((_QWORD *)v23 + 3);
      if (v45 >= v44 >> 1)
        v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v44 > 1), v45 + 1, 1, v23);
      *((_QWORD *)v23 + 2) = v45 + 1;
      v46 = &v23[24 * v45];
      v46[32] = v22;
      *((_QWORD *)v46 + 5) = v33;
      *((_QWORD *)v46 + 6) = v34;
      Parser.lexMatchingOption()(&v56);
      v22 = v56;
      v34 = *((_QWORD *)&v57 + 1);
      v33 = v57;
      if (v56 == 20)
        goto LABEL_23;
    }
    v35 = (char *)v1[9];
    v55 = v23;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v35 + 2) + 1, 1, v35);
    v37 = *((_QWORD *)v35 + 2);
    v36 = *((_QWORD *)v35 + 3);
    v38 = v37 + 1;
    v39 = 0x80000001DF006A30;
    if (v37 >= v36 >> 1)
      v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v36 > 1), v37 + 1, 1, v35);
    v40 = 0xD00000000000002CLL;
    v41 = 12;
LABEL_48:
    *((_QWORD *)v35 + 2) = v38;
    v43 = &v35[80 * v37];
    v43[32] = 1;
    *((_QWORD *)v43 + 5) = v40;
    *((_QWORD *)v43 + 6) = v39;
    *((_QWORD *)v43 + 7) = v33;
    *((_QWORD *)v43 + 8) = v34;
    *((_QWORD *)v43 + 9) = v41;
    *((_QWORD *)v43 + 10) = 0;
    *((_QWORD *)v43 + 11) = 0;
    *((_QWORD *)v43 + 12) = 0;
    v43[104] = 36;
    v1[9] = v35;
    v23 = v55;
    goto LABEL_49;
  }
LABEL_23:
  v24 = v48;
  a1 = v49;
  v25 = v53;
  v26 = v47;
  v18 = v50;
LABEL_32:
  if (v52 || v18 || *((_QWORD *)v6 + 2))
  {
    *a1 = v25;
    a1[1] = v51;
    a1[2] = !v52;
    a1[3] = (unint64_t)v6;
    a1[4] = v24;
    a1[5] = v26;
    a1[6] = !v18;
    a1[7] = (unint64_t)v23;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = 0.0;
    *((_OWORD *)a1 + 2) = 0u;
    *((_OWORD *)a1 + 3) = 0u;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
  }
  return result;
}

uint64_t Parser.lexChangeMatchingOptionAtom()@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  char v12;
  uint64_t v13;
  Swift::String v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v4 = *v1;
  v3 = v1[1];
  v5 = v1[2];
  v6 = v1[3];
  v7 = *((_BYTE *)v1 + 32);
  v8 = v1[6];
  v55 = v1[7];
  v57 = v1[5];
  v53 = *((_BYTE *)v1 + 64);
  v9 = v1[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((specialized Parser.tryEat<A>(sequence:)(16168, 0xE200000000000000) & 1) != 0
    && (Parser.lexMatchingOptionSequence()((unint64_t *)&v60), (v10 = v62) != 0))
  {
    v11 = v60;
    v12 = v61;
    v13 = v64;
    v54 = v63;
    v56 = v65;
    v58 = v66;
    v14._countAndFlagsBits = 41;
    v14._object = (void *)0xE100000000000000;
    if (!Parser.tryEat(_:)(v14))
    {
      v60 = xmmword_1DF003F70;
      v61 = 0;
      v62 = 0;
      LOBYTE(v63) = 3;
      Parser.errorAtCurrentPosition(_:)(&v60);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    *(_OWORD *)a1 = v11;
    *(_BYTE *)(a1 + 16) = v12 & 1;
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = v54;
    *(_QWORD *)(a1 + 40) = v13;
    *(_BYTE *)(a1 + 48) = v56 & 1;
    *(_QWORD *)(a1 + 56) = v58;
  }
  else
  {
    v50 = v7;
    v51 = v6;
    v52 = v5;
    v16 = v1[9];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    specialized Collection.dropFirst(_:)(*(_QWORD *)(v9 + 16), v16);
    v59 = v8;
    v18 = v17;
    v20 = v19;
    v22 = v21 >> 1;
    swift_bridgeObjectRetain();
    result = swift_unknownObjectRetain();
    v23 = v18 - 32;
    v24 = v20;
    v25 = v20;
LABEL_7:
    v26 = v23 + 80 * v24;
    while (1)
    {
      if (v22 == v25)
      {
        swift_bridgeObjectRelease();
        result = swift_unknownObjectRelease_n();
        *v1 = v4;
        v1[1] = v3;
        v1[2] = v52;
        v1[3] = v51;
        *((_BYTE *)v1 + 32) = v50;
        v1[5] = v57;
        v1[6] = v8;
        v1[7] = v55;
        *((_BYTE *)v1 + 64) = v53;
        v1[9] = v9;
        *(_OWORD *)a1 = 0u;
        *(_OWORD *)(a1 + 16) = 0u;
        *(_OWORD *)(a1 + 32) = 0u;
        *(_OWORD *)(a1 + 48) = 0u;
        return result;
      }
      if (v24 < v20 || v25 >= v22)
        break;
      v27 = *(unsigned __int8 *)(v26 + 32);
      ++v25;
      v26 += 80;
      if (!v27)
      {
        v48 = v4;
        v49 = v3;
        v45 = a1;
        v41 = *(_QWORD *)(v26 - 24);
        v42 = *(_QWORD *)(v26 - 40);
        v28 = *(_QWORD *)(v26 - 8);
        v39 = *(_QWORD *)(v26 - 32);
        v40 = *(_QWORD *)(v26 - 16);
        v30 = *(_QWORD *)v26;
        v29 = *(_QWORD *)(v26 + 8);
        v31 = *(_QWORD *)(v26 + 16);
        v43 = v9;
        v32 = *(_BYTE *)(v26 + 24);
        swift_bridgeObjectRetain();
        v46 = v28;
        v47 = v30;
        v33 = v30;
        v34 = v29;
        v44 = v32;
        v35 = v32;
        v9 = v43;
        outlined copy of ParseError?(v28, v33, v29, v31, v35);
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v43 + 16) + 1, 1, (char *)v43);
          v9 = result;
        }
        v37 = *(_QWORD *)(v9 + 16);
        v36 = *(_QWORD *)(v9 + 24);
        a1 = v45;
        if (v37 >= v36 >> 1)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v36 > 1), v37 + 1, 1, (char *)v9);
          v9 = result;
        }
        *(_QWORD *)(v9 + 16) = v37 + 1;
        v38 = v9 + 80 * v37;
        *(_BYTE *)(v38 + 32) = 0;
        *(_QWORD *)(v38 + 40) = v42;
        *(_QWORD *)(v38 + 48) = v39;
        *(_QWORD *)(v38 + 56) = v41;
        *(_QWORD *)(v38 + 64) = v40;
        *(_QWORD *)(v38 + 72) = v46;
        *(_QWORD *)(v38 + 80) = v47;
        *(_QWORD *)(v38 + 88) = v34;
        *(_QWORD *)(v38 + 96) = v31;
        *(_BYTE *)(v38 + 104) = v44;
        v24 = v25;
        v4 = v48;
        v3 = v49;
        v8 = v59;
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t Parser.lexExplicitPCRE2GroupStart()@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;

  v4 = *v1;
  v3 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  v7 = *((_BYTE *)v1 + 32);
  v8 = v1[6];
  v56 = v1[7];
  v57 = v1[5];
  v55 = *((_BYTE *)v1 + 64);
  v9 = v1[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((specialized Parser.tryEat<A>(sequence:)(10792, 0xE200000000000000) & 1) != 0)
  {
    if ((specialized Parser.tryEat<A>(sequence:)(0x3A63696D6F7461, 0xE700000000000000) & 1) != 0)
    {
      v10 = 3;
LABEL_11:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      *(_QWORD *)a1 = v10;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_OWORD *)(a1 + 56) = 0u;
      *(_QWORD *)(a1 + 72) = 0;
      *(_BYTE *)(a1 + 80) = 3;
      return result;
    }
    if ((specialized Parser.tryEat<A>(sequence:)(979463280, 0xE400000000000000) & 1) != 0)
    {
      v10 = 4;
      goto LABEL_11;
    }
    if ((specialized Parser.tryEat<A>(sequence:)(0xD000000000000013, 0x80000001DF008D90) & 1) != 0)
    {
      v10 = 4;
      goto LABEL_11;
    }
    if ((specialized Parser.tryEat<A>(sequence:)(979463278, 0xE400000000000000) & 1) != 0
      || (specialized Parser.tryEat<A>(sequence:)(0xD000000000000013, 0x80000001DF008DB0) & 1) != 0)
    {
      v10 = 5;
      goto LABEL_11;
    }
    if ((specialized Parser.tryEat<A>(sequence:)(979528816, 0xE400000000000000) & 1) != 0
      || (specialized Parser.tryEat<A>(sequence:)(0xD000000000000014, 0x80000001DF008DD0) & 1) != 0)
    {
      v10 = 7;
      goto LABEL_11;
    }
    if ((specialized Parser.tryEat<A>(sequence:)(979528814, 0xE400000000000000) & 1) != 0
      || (specialized Parser.tryEat<A>(sequence:)(0xD000000000000014, 0x80000001DF008DF0) & 1) != 0)
    {
      v10 = 8;
      goto LABEL_11;
    }
    if ((specialized Parser.tryEat<A>(sequence:)(0x3A616C70616ELL, 0xE600000000000000) & 1) != 0
      || (specialized Parser.tryEat<A>(sequence:)(0xD00000000000001ELL, 0x80000001DF008E10) & 1) != 0)
    {
      v10 = 6;
      goto LABEL_11;
    }
    if ((specialized Parser.tryEat<A>(sequence:)(0x3A626C70616ELL, 0xE600000000000000) & 1) != 0
      || (specialized Parser.tryEat<A>(sequence:)(0xD00000000000001FLL, 0x80000001DF008E30) & 1) != 0)
    {
      v10 = 9;
      goto LABEL_11;
    }
    if ((specialized Parser.tryEat<A>(sequence:)(3830387, 0xE300000000000000) & 1) != 0
      || (specialized Parser.tryEat<A>(sequence:)(0x725F747069726373, 0xEB000000003A6E75) & 1) != 0)
    {
      v10 = 10;
      goto LABEL_11;
    }
    if ((specialized Parser.tryEat<A>(sequence:)(980579169, 0xE400000000000000) & 1) != 0)
    {
      v10 = 11;
      goto LABEL_11;
    }
    if ((specialized Parser.tryEat<A>(sequence:)(0xD000000000000012, 0x80000001DF008E50) & 1) != 0)
    {
      v10 = 11;
      goto LABEL_11;
    }
  }
  v53 = v3;
  v54 = a1;
  v52 = v7;
  v51 = v5;
  v12 = v8;
  v13 = v4;
  v14 = v1[9];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  specialized Collection.dropFirst(_:)(*(_QWORD *)(v9 + 16), v14);
  v49 = v15;
  v17 = v16;
  v19 = v18 >> 1;
  v20 = v6;
  v21 = v53;
  v22 = v54;
  swift_bridgeObjectRetain();
  result = swift_unknownObjectRetain();
  v23 = v49 - 32;
  v24 = v17;
  v25 = v17;
LABEL_32:
  v26 = v23 + 80 * v24;
  while (1)
  {
    if (v19 == v25)
    {
      swift_bridgeObjectRelease();
      result = swift_unknownObjectRelease_n();
      *v1 = v13;
      v1[1] = v21;
      v1[2] = v20;
      v1[3] = v51;
      *((_BYTE *)v1 + 32) = v52;
      v1[5] = v57;
      v1[6] = v12;
      v1[7] = v56;
      *((_BYTE *)v1 + 64) = v55;
      v1[9] = v9;
      *(_OWORD *)v22 = 0u;
      *(_OWORD *)(v22 + 16) = 0u;
      *(_OWORD *)(v22 + 32) = 0u;
      *(_OWORD *)(v22 + 48) = 0u;
      *(_OWORD *)(v22 + 64) = 0u;
      *(_BYTE *)(v22 + 80) = -1;
      return result;
    }
    if (v24 < v17 || v25 >= v19)
      break;
    v27 = *(unsigned __int8 *)(v26 + 32);
    ++v25;
    v26 += 80;
    if (!v27)
    {
      v46 = v23;
      v47 = v20;
      v48 = v13;
      v50 = v12;
      v42 = *(_QWORD *)(v26 - 24);
      v43 = *(_QWORD *)(v26 - 40);
      v40 = *(_QWORD *)(v26 - 32);
      v41 = *(_QWORD *)(v26 - 16);
      v44 = v9;
      v28 = *(_QWORD *)(v26 - 8);
      v29 = *(_QWORD *)v26;
      v30 = *(_QWORD *)(v26 + 8);
      v31 = *(_QWORD *)(v26 + 16);
      v32 = *(_BYTE *)(v26 + 24);
      swift_bridgeObjectRetain();
      v45 = v28;
      v33 = v28;
      v34 = v44;
      outlined copy of ParseError?(v33, v29, v30, v31, v32);
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v44 + 16) + 1, 1, (char *)v44);
        v34 = result;
      }
      v35 = v34;
      v36 = *(_QWORD *)(v34 + 16);
      v37 = v35;
      v38 = *(_QWORD *)(v35 + 24);
      if (v36 >= v38 >> 1)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v38 > 1), v36 + 1, 1, (char *)v37);
        v37 = result;
      }
      *(_QWORD *)(v37 + 16) = v36 + 1;
      v39 = v37 + 80 * v36;
      v9 = v37;
      *(_BYTE *)(v39 + 32) = 0;
      *(_QWORD *)(v39 + 40) = v43;
      *(_QWORD *)(v39 + 48) = v40;
      *(_QWORD *)(v39 + 56) = v42;
      *(_QWORD *)(v39 + 64) = v41;
      *(_QWORD *)(v39 + 72) = v45;
      *(_QWORD *)(v39 + 80) = v29;
      *(_QWORD *)(v39 + 88) = v30;
      *(_QWORD *)(v39 + 96) = v31;
      *(_BYTE *)(v39 + 104) = v32;
      v24 = v25;
      v22 = v54;
      v21 = v53;
      v12 = v50;
      v20 = v47;
      v13 = v48;
      v23 = v46;
      goto LABEL_32;
    }
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in Parser.expectIdentifier(_:endingWith:eatEnding:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  Swift::String v28;
  Swift::String v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  Swift::String v35;
  Swift::String v36;
  char *v37;
  unint64_t v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  char v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  char v81;

  v7 = a1[1];
  v8 = a1[2];
  v9 = a1;
  swift_bridgeObjectRetain();
  v10 = String.subscript.getter();
  v12 = v11;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v10 ^ v12) < 0x4000
    || (swift_bridgeObjectRetain(),
        v13 = String.subscript.getter(),
        v15 = v14,
        v74 = a5,
        swift_bridgeObjectRelease(),
        LOBYTE(v13) = specialized Sequence<>.starts<A>(with:)(a2, a3, v13, v15),
        swift_bridgeObjectRelease(),
        (v13 & 1) != 0))
  {
    v78 = a4;
    v79 = 0;
    v80 = 0;
    v81 = 26;
    result = Parser.errorAtCurrentPosition(_:)(&v78);
    goto LABEL_4;
  }
  v72 = a2;
  v19 = (char *)v9[9];
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v20 = String.subscript.getter();
  if (!((v20 ^ v21) >> 14))
    goto LABEL_50;
  v22 = Substring.subscript.getter();
  v24 = v23;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v25 = String.index(after:)();
  swift_bridgeObjectRelease();
  if (v25 >> 14 < v8 >> 14)
  {
    __break(1u);
    goto LABEL_45;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (!v24)
  {
LABEL_51:
    __break(1u);
    return result;
  }
  swift_bridgeObjectRetain();
  v26 = Character.isNumber.getter();
  swift_bridgeObjectRelease();
  if ((v26 & 1) != 0)
  {
    a2 = a4;
    *(_QWORD *)&v78 = 0;
    *((_QWORD *)&v78 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(29);
    v27 = 8 * (char)a4;
    v28._countAndFlagsBits = *(_QWORD *)&aGroupNacallout[v27];
    v28._object = *(void **)&aGroupNacallout[v27 + 24];
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._object = (void *)0x80000001DF006A90;
    v29._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v29);
    v7 = 0;
    v22 = 0xE000000000000000;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
LABEL_11:
      v31 = *((_QWORD *)v19 + 2);
      v30 = *((_QWORD *)v19 + 3);
      if (v31 >= v30 >> 1)
        v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v30 > 1), v31 + 1, 1, v19);
      *((_QWORD *)v19 + 2) = v31 + 1;
      v32 = &v19[80 * v31];
      v32[32] = 1;
      *((_QWORD *)v32 + 5) = v7;
      *((_QWORD *)v32 + 6) = v22;
      *((_QWORD *)v32 + 7) = v8;
      *((_QWORD *)v32 + 8) = v25;
      *((_QWORD *)v32 + 9) = a2;
      *((_QWORD *)v32 + 10) = 0;
      *((_QWORD *)v32 + 11) = 0;
      *((_QWORD *)v32 + 12) = 0;
      v32[104] = 28;
      v9[9] = v19;
      goto LABEL_14;
    }
LABEL_45:
    v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v19 + 2) + 1, 1, v19);
    goto LABEL_11;
  }
LABEL_14:
  specialized Parser.tryEatPrefix(maxLength:_:)(0, 1, v9, (uint64_t (*)(uint64_t, _QWORD, _QWORD *))specialized Source.peekPrefix(maxLength:_:), (uint64_t *)&v78);
  v18 = *((_QWORD *)&v78 + 1);
  if (*((_QWORD *)&v78 + 1))
  {
    v17 = v78;
    result = swift_bridgeObjectRelease();
    a5 = v74;
    goto LABEL_5;
  }
  v33 = a4;
  *(_QWORD *)&v78 = 0;
  *((_QWORD *)&v78 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  v34 = 8 * (char)a4;
  v35._countAndFlagsBits = *(_QWORD *)&aGroupNacallout[v34];
  v35._object = *(void **)&aGroupNacallout[v34 + 24];
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  v36._countAndFlagsBits = 0xD00000000000002ALL;
  v36._object = (void *)0x80000001DF006AB0;
  String.append(_:)(v36);
  v38 = *((_QWORD *)&v78 + 1);
  v37 = (char *)v78;
  v39 = (char *)v9[9];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_47;
  while (2)
  {
    v41 = *((_QWORD *)v39 + 2);
    v40 = *((_QWORD *)v39 + 3);
    if (v41 >= v40 >> 1)
      v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v40 > 1), v41 + 1, 1, v39);
    *((_QWORD *)v39 + 2) = v41 + 1;
    v42 = &v39[80 * v41];
    v42[32] = 1;
    *((_QWORD *)v42 + 5) = v37;
    *((_QWORD *)v42 + 6) = v38;
    *((_QWORD *)v42 + 7) = v8;
    *((_QWORD *)v42 + 8) = v25;
    *((_QWORD *)v42 + 9) = v33;
    *((_QWORD *)v42 + 10) = 0;
    *((_QWORD *)v42 + 11) = 0;
    *((_QWORD *)v42 + 12) = 0;
    v42[104] = 27;
    swift_bridgeObjectRelease();
    v9[9] = v39;
    v43 = v9[2];
    swift_bridgeObjectRetain();
    *(_QWORD *)&v78 = 0;
    *((_QWORD *)&v78 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    v44 = String.subscript.getter();
    v46 = v45;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v44 ^ v46) >= 0x4000)
    {
      swift_bridgeObjectRetain();
      v47 = String.subscript.getter();
      v49 = v48;
      swift_bridgeObjectRelease();
      LOBYTE(v47) = specialized Sequence<>.starts<A>(with:)(v72, a3, v47, v49);
      swift_bridgeObjectRelease();
      if ((v47 & 1) == 0)
      {
        v71 = v43;
        v25 = v43;
        v50 = (_QWORD *)*v9;
        v73 = v9;
        while (1)
        {
          v39 = (char *)v9[2];
          v38 = v9[3];
          v37 = (char *)v9[9];
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v51 = String.subscript.getter();
          v53 = v52;
          swift_bridgeObjectRelease();
          if (!((v51 ^ v53) >> 14))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            a5 = v74;
            v43 = v71;
            goto LABEL_22;
          }
          v77 = Substring.subscript.getter();
          v8 = v54;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v9 = v50;
          String.subscript.getter();
          v33 = v55;
          swift_bridgeObjectRelease();
          v25 = Substring.index(_:offsetBy:limitedBy:)();
          v57 = v56;
          swift_bridgeObjectRelease();
          if ((v57 & 1) == 0)
            break;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v37 + 2) + 1, 1, v37);
          v59 = *((_QWORD *)v37 + 2);
          v58 = *((_QWORD *)v37 + 3);
          if (v59 >= v58 >> 1)
            v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v58 > 1), v59 + 1, 1, v37);
          *((_QWORD *)v37 + 2) = v59 + 1;
          v60 = &v37[80 * v59];
          v60[32] = 0;
          *((_QWORD *)v60 + 5) = 0xD000000000000022;
          *((_QWORD *)v60 + 6) = 0x80000001DF007440;
          *((_QWORD *)v60 + 7) = v39;
          *((_QWORD *)v60 + 8) = v39;
          *(_OWORD *)(v60 + 72) = 0u;
          *(_OWORD *)(v60 + 88) = 0u;
          v60[104] = -1;
          v73[9] = v37;
          swift_bridgeObjectRetain();
          String.subscript.getter();
          swift_bridgeObjectRelease();
          v61 = Substring.distance(from:to:)();
          swift_bridgeObjectRelease();
          if (v61 >= 1)
          {
            swift_bridgeObjectRetain();
            String.subscript.getter();
            swift_bridgeObjectRelease();
            v62 = Substring.index(_:offsetBy:limitedBy:)();
            v64 = v63;
            swift_bridgeObjectRelease();
            v25 = (unint64_t)v39;
            if ((v64 & 1) != 0)
              goto LABEL_39;
            if (v38 >> 14 < v62 >> 14)
              goto LABEL_49;
            v25 = v62;
            goto LABEL_37;
          }
          v25 = (unint64_t)v39;
LABEL_39:
          MEMORY[0x1DF0F36FC](v77, v8);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v65 = String.subscript.getter();
          v67 = v66;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v65 ^ v67) >= 0x4000)
          {
            swift_bridgeObjectRetain();
            v68 = String.subscript.getter();
            v70 = v69;
            swift_bridgeObjectRelease();
            LOBYTE(v68) = specialized Sequence<>.starts<A>(with:)(v72, a3, v68, v70);
            swift_bridgeObjectRelease();
            v9 = v73;
            if ((v68 & 1) == 0)
              continue;
          }
          a5 = v74;
          v43 = v71;
          goto LABEL_22;
        }
        if (v38 >> 14 < v25 >> 14)
        {
          __break(1u);
LABEL_47:
          v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v39 + 2) + 1, 1, v39);
          continue;
        }
LABEL_37:
        v73[2] = v25;
        v73[3] = v38;
        goto LABEL_39;
      }
    }
    break;
  }
  v25 = v43;
  a5 = v74;
LABEL_22:
  swift_bridgeObjectRelease();
  if (v25 >> 14 < v43 >> 14)
  {
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    result = swift_bridgeObjectRelease();
    goto LABEL_51;
  }
  result = swift_bridgeObjectRelease();
LABEL_4:
  v17 = 0;
  v18 = 0xE000000000000000;
LABEL_5:
  *a5 = v17;
  a5[1] = v18;
  return result;
}

uint64_t Character.isWordCharacter.getter(uint64_t a1, uint64_t a2)
{
  if ((Character.isLetter.getter() & 1) != 0
    || (Character.isNumber.getter() & 1) != 0
    || a1 == 95 && a2 == 0xE100000000000000)
  {
    return 1;
  }
  else
  {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t key path getter for Character.isWordCharacter : Character@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t result;

  v3 = *a1;
  v4 = a1[1];
  if ((Character.isLetter.getter() & 1) != 0
    || (Character.isNumber.getter() & 1) != 0
    || (v3 == 95 ? (v5 = v4 == 0xE100000000000000) : (v5 = 0), v5))
  {
    result = 1;
  }
  else
  {
    result = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  *a2 = result & 1;
  return result;
}

uint64_t Parser.expectNamedGroup(endingWith:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t result;
  unsigned __int8 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  unsigned __int8 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  unsigned __int8 v30;

  v23 = 0u;
  v24 = 0u;
  result = lexBalanced #1 (_:) in Parser.expectNamedGroup(endingWith:)((uint64_t *)&v23, v3, a1, a2, (uint64_t)&v25);
  v8 = v30;
  if (v30 == 255)
  {
    v13 = v3[2];
    result = closure #1 in Parser.expectIdentifier(_:endingWith:eatEnding:)(v3, a1, a2, 0, &v25);
    v14 = v3[2];
    if (v14 >> 14 < v13 >> 14)
    {
      __break(1u);
    }
    else
    {
      v15 = v25;
      v23 = v25;
      *(_QWORD *)&v24 = v13;
      *((_QWORD *)&v24 + 1) = v14;
      swift_bridgeObjectRetain();
      lexBalanced #1 (_:) in Parser.expectNamedGroup(endingWith:)((uint64_t *)&v23, v3, a1, a2, (uint64_t)&v25);
      swift_bridgeObjectRelease();
      v16 = v30;
      if (v30 == 255)
      {
        result = specialized Parser.tryEat<A>(sequence:)(a1, a2);
        if ((result & 1) == 0)
        {
          *(_QWORD *)&v25 = a1;
          *((_QWORD *)&v25 + 1) = a2;
          swift_bridgeObjectRetain();
          *(_QWORD *)&v25 = String.init<A>(_:)();
          *((_QWORD *)&v25 + 1) = v18;
          v26 = 0uLL;
          LOBYTE(v27) = 3;
          Parser.errorAtCurrentPosition(_:)(&v25);
          result = swift_bridgeObjectRelease();
        }
        *(_OWORD *)a3 = v15;
        *(_QWORD *)(a3 + 16) = v13;
        *(_QWORD *)(a3 + 24) = v14;
        *(_OWORD *)(a3 + 32) = 0u;
        *(_OWORD *)(a3 + 48) = 0u;
        *(_OWORD *)(a3 + 64) = 0u;
        *(_BYTE *)(a3 + 80) = 0;
      }
      else
      {
        v17 = v29;
        v21 = v27;
        v22 = v28;
        v19 = v25;
        v20 = v26;
        result = swift_bridgeObjectRelease();
        *(_OWORD *)a3 = v19;
        *(_OWORD *)(a3 + 16) = v20;
        *(_OWORD *)(a3 + 32) = v21;
        *(_OWORD *)(a3 + 48) = v22;
        *(_OWORD *)(a3 + 64) = v17;
        *(_BYTE *)(a3 + 80) = v16;
      }
    }
  }
  else
  {
    v9 = v26;
    v10 = v27;
    v11 = v28;
    v12 = v29;
    *(_OWORD *)a3 = v25;
    *(_OWORD *)(a3 + 16) = v9;
    *(_OWORD *)(a3 + 32) = v10;
    *(_OWORD *)(a3 + 48) = v11;
    *(_OWORD *)(a3 + 64) = v12;
    *(_BYTE *)(a3 + 80) = v8;
  }
  return result;
}

uint64_t lexBalanced #1 (_:) in Parser.expectNamedGroup(endingWith:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  Swift::String v14;
  uint64_t result;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  v10 = *a1;
  v9 = a1[1];
  v11 = a1[2];
  v12 = a1[3];
  v13 = a2[2];
  v14._countAndFlagsBits = 45;
  v14._object = (void *)0xE100000000000000;
  result = Parser.tryEat(_:)(v14);
  if ((result & 1) == 0)
  {
    *(_OWORD *)(a5 + 48) = 0u;
    *(_OWORD *)(a5 + 64) = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)a5 = 0u;
    *(_BYTE *)(a5 + 80) = -1;
    return result;
  }
  v16 = a2[2];
  if (v16 >> 14 < v13 >> 14)
  {
    __break(1u);
    goto LABEL_10;
  }
  v20 = v10;
  result = closure #1 in Parser.expectIdentifier(_:endingWith:eatEnding:)(a2, a3, a4, 0, &v21);
  v17 = a2[2];
  if (v16 >> 14 > v17 >> 14)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  v18 = v21;
  if ((specialized Parser.tryEat<A>(sequence:)(a3, a4) & 1) == 0)
  {
    *(_QWORD *)&v21 = a3;
    *((_QWORD *)&v21 + 1) = a4;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v21 = String.init<A>(_:)();
    *((_QWORD *)&v21 + 1) = v19;
    v22 = 0;
    v23 = 0;
    v24 = 3;
    Parser.errorAtCurrentPosition(_:)(&v21);
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)a5 = v20;
  *(_QWORD *)(a5 + 8) = v9;
  *(_QWORD *)(a5 + 16) = v11;
  *(_QWORD *)(a5 + 24) = v12;
  *(_QWORD *)(a5 + 32) = v13;
  *(_QWORD *)(a5 + 40) = v16;
  *(_OWORD *)(a5 + 48) = v18;
  *(_QWORD *)(a5 + 64) = v16;
  *(_QWORD *)(a5 + 72) = v17;
  *(_BYTE *)(a5 + 80) = 1;
  return swift_bridgeObjectRetain();
}

uint64_t Parser.lexGroupStart()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  char v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  _OWORD v60[5];
  unsigned __int8 v61;

  v3 = *(_QWORD *)(v1 + 8);
  v58 = *(_QWORD *)v1;
  v4 = *(_QWORD *)(v1 + 16);
  v56 = *(_QWORD *)(v1 + 24);
  v54 = *(_BYTE *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 40);
  v6 = *(_QWORD *)(v1 + 48);
  v7 = *(_QWORD *)(v1 + 56);
  v8 = *(_BYTE *)(v1 + 64);
  v9 = *(_QWORD *)(v1 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  closure #1 in closure #1 in Parser.lexGroupStart()(v1, (uint64_t)v60);
  v10 = v61;
  if (v61 == 255)
  {
    v49 = v4;
    v51 = v7;
    v48 = v8;
    v53 = v5;
    v13 = *(_QWORD *)(v1 + 72);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    specialized Collection.dropFirst(_:)(*(_QWORD *)(v9 + 16), v13);
    v15 = v14;
    v17 = v16;
    v19 = v18 >> 1;
    swift_bridgeObjectRetain();
    result = swift_unknownObjectRetain();
    v20 = v15 - 32;
    v21 = v17;
    v22 = v17;
    v23 = v6;
LABEL_5:
    v24 = v20 + 80 * v21;
    while (1)
    {
      if (v19 == v22)
      {
        swift_bridgeObjectRelease();
        result = swift_unknownObjectRelease_n();
        *(_QWORD *)v1 = v58;
        *(_QWORD *)(v1 + 8) = v3;
        *(_QWORD *)(v1 + 16) = v49;
        *(_QWORD *)(v1 + 24) = v56;
        *(_BYTE *)(v1 + 32) = v54;
        *(_QWORD *)(v1 + 40) = v53;
        *(_QWORD *)(v1 + 48) = v23;
        *(_QWORD *)(v1 + 56) = v51;
        *(_BYTE *)(v1 + 64) = v48;
        *(_QWORD *)(v1 + 72) = v9;
        *(_OWORD *)a1 = 0u;
        *(_OWORD *)(a1 + 16) = 0u;
        *(_OWORD *)(a1 + 32) = 0u;
        *(_OWORD *)(a1 + 48) = 0u;
        *(_OWORD *)(a1 + 64) = 0u;
        *(_QWORD *)(a1 + 88) = 0;
        *(_QWORD *)(a1 + 96) = 0;
        *(_QWORD *)(a1 + 80) = 255;
        return result;
      }
      if (v21 < v17 || v22 >= v19)
        break;
      v25 = *(unsigned __int8 *)(v24 + 32);
      ++v22;
      v24 += 80;
      if (!v25)
      {
        v46 = v3;
        v47 = v20;
        v43 = v23;
        v38 = *(_QWORD *)(v24 - 24);
        v39 = *(_QWORD *)(v24 - 40);
        v26 = *(_QWORD *)(v24 - 8);
        v37 = *(_QWORD *)(v24 - 16);
        v28 = *(_QWORD *)v24;
        v27 = *(_QWORD *)(v24 + 8);
        v29 = *(_QWORD *)(v24 + 16);
        v40 = v9;
        v30 = *(_BYTE *)(v24 + 24);
        v45 = *(_QWORD *)(v24 - 32);
        swift_bridgeObjectRetain();
        v44 = v28;
        v42 = v27;
        v31 = v27;
        v32 = v29;
        v41 = v30;
        v33 = v30;
        v9 = v40;
        outlined copy of ParseError?(v26, v28, v31, v29, v33);
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v40 + 16) + 1, 1, (char *)v40);
          v9 = result;
        }
        v35 = *(_QWORD *)(v9 + 16);
        v34 = *(_QWORD *)(v9 + 24);
        v20 = v47;
        if (v35 >= v34 >> 1)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v34 > 1), v35 + 1, 1, (char *)v9);
          v20 = v47;
          v9 = result;
        }
        *(_QWORD *)(v9 + 16) = v35 + 1;
        v36 = v9 + 80 * v35;
        *(_BYTE *)(v36 + 32) = 0;
        *(_QWORD *)(v36 + 40) = v39;
        *(_QWORD *)(v36 + 48) = v45;
        *(_QWORD *)(v36 + 56) = v38;
        *(_QWORD *)(v36 + 64) = v37;
        *(_QWORD *)(v36 + 72) = v26;
        v23 = v43;
        *(_QWORD *)(v36 + 80) = v44;
        *(_QWORD *)(v36 + 88) = v42;
        *(_QWORD *)(v36 + 96) = v32;
        *(_BYTE *)(v36 + 104) = v41;
        v21 = v22;
        v3 = v46;
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  else
  {
    v57 = v60[1];
    v59 = v60[0];
    v52 = v60[3];
    v55 = v60[2];
    v50 = v60[4];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v12 = *(_QWORD *)(v1 + 16);
    if (v12 >> 14 >= v4 >> 14)
    {
      *(_OWORD *)a1 = v59;
      *(_OWORD *)(a1 + 16) = v57;
      *(_OWORD *)(a1 + 32) = v55;
      *(_OWORD *)(a1 + 48) = v52;
      *(_OWORD *)(a1 + 64) = v50;
      *(_BYTE *)(a1 + 80) = v10;
      *(_QWORD *)(a1 + 88) = v4;
      *(_QWORD *)(a1 + 96) = v12;
      return result;
    }
  }
  __break(1u);
  return result;
}

double closure #1 in closure #1 in Parser.lexGroupStart()@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  double result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char **v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  Swift::String v33;
  Swift::String v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  Swift::String v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  char v62;
  char v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  char v69;
  __int128 v70;
  _BYTE v71[32];
  __int128 v72;
  __int128 v73;
  unsigned __int8 v74;

  Parser.lexExplicitPCRE2GroupStart()((uint64_t)&v70);
  v4 = v74;
  if (v74 != 255)
  {
    result = *(double *)&v70;
    v6 = *(_OWORD *)v71;
    v7 = *(_OWORD *)&v71[16];
    v8 = v72;
    v9 = v73;
    *(_OWORD *)a2 = v70;
    *(_OWORD *)(a2 + 16) = v6;
    *(_OWORD *)(a2 + 32) = v7;
    *(_OWORD *)(a2 + 48) = v8;
    *(_OWORD *)(a2 + 64) = v9;
LABEL_10:
    *(_BYTE *)(a2 + 80) = v4;
    return result;
  }
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_BYTE *)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_QWORD *)(a1 + 56);
  v15 = *(_BYTE *)(a1 + 64);
  v16 = (char **)(a1 + 72);
  v17 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)&v70 = *(_QWORD *)a1;
  *((_QWORD *)&v70 + 1) = v10;
  *(_OWORD *)v71 = *(_OWORD *)(a1 + 16);
  v71[16] = v11;
  *(_QWORD *)&v71[24] = v12;
  *(_QWORD *)&v72 = v13;
  *((_QWORD *)&v72 + 1) = v14;
  LOBYTE(v73) = v15;
  *((_QWORD *)&v73 + 1) = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  closure #1 in Parser.shouldLexGroupLikeAtom()((uint64_t)&v70, &v69);
  v18 = *((_QWORD *)&v73 + 1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v68 = v18;
  Diagnostics.appendNewFatalErrors(from:)((_RegexParser::Diagnostics)&v68);
  swift_bridgeObjectRelease();
  if ((v69 & 1) != 0
    || (v19._countAndFlagsBits = 40, v19._object = (void *)0xE100000000000000, !Parser.tryEat(_:)(v19)))
  {
    result = 0.0;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    v4 = -1;
    goto LABEL_10;
  }
  v20._countAndFlagsBits = 63;
  v20._object = (void *)0xE100000000000000;
  if (!Parser.tryEat(_:)(v20))
  {
    v24 = *(_QWORD *)(a1 + 56);
    if ((v24 & 0x20) != 0)
    {
      if ((specialized Parser.tryEat<A>(sequence:)(14943, 0xE200000000000000) & 1) != 0)
        goto LABEL_49;
      v24 = *(_QWORD *)(a1 + 56);
    }
    if ((v24 & 0x80) == 0)
    {
      result = 0.0;
      *(_OWORD *)(a2 + 48) = 0u;
      *(_OWORD *)(a2 + 64) = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)a2 = 0u;
      v4 = 3;
      goto LABEL_10;
    }
    goto LABEL_49;
  }
  v21._countAndFlagsBits = 58;
  v21._object = (void *)0xE100000000000000;
  if (Parser.tryEat(_:)(v21))
  {
LABEL_49:
    v23 = 1;
    goto LABEL_50;
  }
  v22._countAndFlagsBits = 124;
  v22._object = (void *)0xE100000000000000;
  if (Parser.tryEat(_:)(v22))
  {
    v23 = 2;
LABEL_50:
    *(_QWORD *)a2 = v23;
    result = 0.0;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_QWORD *)(a2 + 72) = 0;
    v4 = 3;
    goto LABEL_10;
  }
  v25._countAndFlagsBits = 62;
  v25._object = (void *)0xE100000000000000;
  if (!Parser.tryEat(_:)(v25))
  {
    v26._countAndFlagsBits = 61;
    v26._object = (void *)0xE100000000000000;
    if (Parser.tryEat(_:)(v26))
    {
      v23 = 4;
      goto LABEL_50;
    }
    v27._countAndFlagsBits = 33;
    v27._object = (void *)0xE100000000000000;
    if (Parser.tryEat(_:)(v27))
    {
      v23 = 5;
      goto LABEL_50;
    }
    v28._countAndFlagsBits = 42;
    v28._object = (void *)0xE100000000000000;
    if (Parser.tryEat(_:)(v28))
    {
      v23 = 6;
      goto LABEL_50;
    }
    if ((specialized Parser.tryEat<A>(sequence:)(15676, 0xE200000000000000) & 1) != 0)
    {
      v23 = 7;
      goto LABEL_50;
    }
    if ((specialized Parser.tryEat<A>(sequence:)(8508, 0xE200000000000000) & 1) != 0)
    {
      v23 = 8;
      goto LABEL_50;
    }
    if ((specialized Parser.tryEat<A>(sequence:)(10812, 0xE200000000000000) & 1) != 0)
    {
      v23 = 9;
      goto LABEL_50;
    }
    v29._countAndFlagsBits = 60;
    v29._object = (void *)0xE100000000000000;
    if (Parser.tryEat(_:)(v29) || (specialized Parser.tryEat<A>(sequence:)(15440, 0xE200000000000000) & 1) != 0)
    {
      v30 = 62;
LABEL_33:
      Parser.expectNamedGroup(endingWith:)(v30, 0xE100000000000000, (uint64_t)&v70);
      v4 = v74;
      v31 = *(_OWORD *)v71;
      *(_OWORD *)a2 = v70;
      *(_OWORD *)(a2 + 16) = v31;
      v32 = v72;
      *(_OWORD *)(a2 + 32) = *(_OWORD *)&v71[16];
      *(_OWORD *)(a2 + 48) = v32;
      result = *(double *)&v73;
      *(_OWORD *)(a2 + 64) = v73;
      goto LABEL_10;
    }
    v33._countAndFlagsBits = 39;
    v33._object = (void *)0xE100000000000000;
    if (Parser.tryEat(_:)(v33))
    {
      v30 = 39;
      goto LABEL_33;
    }
    Parser.lexMatchingOptionSequence()((unint64_t *)&v70);
    v67 = *(_OWORD *)&v71[8];
    if (*(_QWORD *)&v71[8])
    {
      v65 = v70;
      v66 = *((_QWORD *)&v72 + 1);
      v63 = v72;
      v64 = *(_QWORD *)&v71[24];
      v62 = v71[0];
      v34._countAndFlagsBits = 58;
      v34._object = (void *)0xE100000000000000;
      if (Parser.tryEat(_:)(v34))
      {
LABEL_59:
        *(_OWORD *)a2 = v65;
        *(_QWORD *)(a2 + 16) = v62 & 1;
        result = *(double *)&v67;
        *(_OWORD *)(a2 + 24) = v67;
        *(_QWORD *)(a2 + 40) = v64;
        *(_QWORD *)(a2 + 48) = v63 & 1;
        *(_QWORD *)(a2 + 64) = 0;
        *(_QWORD *)(a2 + 72) = 0;
        *(_QWORD *)(a2 + 56) = v66;
        v4 = 2;
        goto LABEL_10;
      }
      v35 = *(_QWORD *)(a1 + 16);
      v36 = *(char **)(a1 + 72);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37 = String.subscript.getter();
      v39 = v38;
      if (!((v37 ^ v40) >> 14))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
LABEL_58:
        v70 = xmmword_1DF003F70;
        *(_OWORD *)v71 = 0uLL;
        v71[16] = 3;
        Parser.errorAtCurrentPosition(_:)(&v70);
        goto LABEL_59;
      }
      v61 = Substring.subscript.getter();
      v53 = v52;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v41 = String.index(after:)();
      swift_bridgeObjectRelease();
      if (v41 >> 14 >= v35 >> 14)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v53)
        {
          *(_QWORD *)&v70 = v61;
          *((_QWORD *)&v70 + 1) = v53;
          *(_OWORD *)v71 = 0uLL;
          v71[16] = 17;
          swift_bridgeObjectRetain();
          ParseError.description.getter();
          v55 = v54;
          v57 = v56;
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v36 + 2) + 1, 1, v36);
          v59 = *((_QWORD *)v36 + 2);
          v58 = *((_QWORD *)v36 + 3);
          if (v59 >= v58 >> 1)
            v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v58 > 1), v59 + 1, 1, v36);
          *((_QWORD *)v36 + 2) = v59 + 1;
          v60 = &v36[80 * v59];
          v60[32] = 1;
          *((_QWORD *)v60 + 5) = v55;
          *((_QWORD *)v60 + 6) = v57;
          *((_QWORD *)v60 + 7) = v35;
          *((_QWORD *)v60 + 8) = v41;
          *((_QWORD *)v60 + 9) = v61;
          *((_QWORD *)v60 + 10) = v53;
          *((_QWORD *)v60 + 11) = 0;
          *((_QWORD *)v60 + 12) = 0;
          v60[104] = 17;
          swift_bridgeObjectRelease_n();
          *v16 = v36;
          goto LABEL_59;
        }
        goto LABEL_58;
      }
      goto LABEL_61;
    }
    v35 = *(_QWORD *)(a1 + 16);
    v41 = *(_QWORD *)(a1 + 48);
    v36 = *(char **)(a1 + 72);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v42 = String.subscript.getter();
    if ((v42 ^ v43) >> 14)
    {
      *(_QWORD *)&v67 = Substring.subscript.getter();
      v45 = v44;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v39 = String.index(after:)();
      swift_bridgeObjectRelease();
      if (v39 >> 14 < v35 >> 14)
      {
        __break(1u);
LABEL_61:
        __break(1u);
        goto LABEL_62;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v45)
      {
        *(_QWORD *)&v70 = 0;
        *((_QWORD *)&v70 + 1) = 0xE000000000000000;
        v46._countAndFlagsBits = 63;
        v46._object = (void *)0xE100000000000000;
        String.append(_:)(v46);
        swift_bridgeObjectRetain();
        Character.write<A>(to:)();
        swift_bridgeObjectRelease();
        a1 = *((_QWORD *)&v70 + 1);
        v41 = v70;
        *(_OWORD *)v71 = 0uLL;
        v71[16] = 14;
        ParseError.description.getter();
        v66 = v48;
        *(_QWORD *)&v67 = v47;
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
LABEL_45:
          v50 = *((_QWORD *)v36 + 2);
          v49 = *((_QWORD *)v36 + 3);
          if (v50 >= v49 >> 1)
            v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v49 > 1), v50 + 1, 1, v36);
          *((_QWORD *)v36 + 2) = v50 + 1;
          v51 = &v36[80 * v50];
          v51[32] = 1;
          *((_QWORD *)v51 + 5) = v67;
          *((_QWORD *)v51 + 6) = v66;
          *((_QWORD *)v51 + 7) = v35;
          *((_QWORD *)v51 + 8) = v39;
          *((_QWORD *)v51 + 9) = v41;
          *((_QWORD *)v51 + 10) = a1;
          *((_QWORD *)v51 + 11) = 0;
          *((_QWORD *)v51 + 12) = 0;
          v51[104] = 14;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *v16 = v36;
          goto LABEL_49;
        }
LABEL_62:
        v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v36 + 2) + 1, 1, v36);
        goto LABEL_45;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    v70 = 9uLL;
    *(_OWORD *)v71 = 0uLL;
    v71[16] = 36;
    Parser.errorAtCurrentPosition(_:)(&v70);
    goto LABEL_49;
  }
  *(_QWORD *)a2 = 3;
  result = 0.0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_QWORD *)(a2 + 72) = 0;
  *(_BYTE *)(a2 + 80) = 3;
  return result;
}

void static SyntaxOptions.namedCapturesOnly.getter(_QWORD *a1@<X8>)
{
  *a1 = 128;
}

uint64_t Parser.expectNamedReference(endingWith:eatEnding:allowRecursionLevel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  _QWORD *v5;
  unint64_t v11;
  uint64_t result;
  unint64_t v13;
  __int128 v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  char v25;

  v11 = v5[2];
  result = closure #1 in Parser.expectIdentifier(_:endingWith:eatEnding:)(v5, a1, a2, 0, &v22);
  v13 = v5[2];
  if (v13 >> 14 < v11 >> 14)
  {
    __break(1u);
  }
  else
  {
    v20 = *((_QWORD *)&v22 + 1);
    v21 = v22;
    if ((a4 & 1) == 0)
    {
      v17 = 0;
      v15 = 0;
      v14 = 0uLL;
      v16 = 1;
      if ((a3 & 1) == 0)
        goto LABEL_16;
      goto LABEL_14;
    }
    result = Parser.lexRecursionLevel()((uint64_t)&v22);
    v14 = v22;
    v15 = v24;
    if ((v25 & 1) != 0)
    {
      v16 = 1;
      v17 = v23;
      if ((a3 & 1) == 0)
        goto LABEL_16;
      goto LABEL_14;
    }
    if (v11 >> 14 >= v23 >> 14)
      v11 = v23;
    if (v13 >> 14 < v24 >> 14)
      v13 = v24;
    if (v13 >> 14 >= v11 >> 14)
    {
      v17 = v23;
      v16 = 0;
      if ((a3 & 1) == 0)
      {
LABEL_16:
        *(_QWORD *)a5 = v21;
        *(_QWORD *)(a5 + 8) = v20;
        *(_QWORD *)(a5 + 16) = 0;
        *(_QWORD *)(a5 + 24) = 0;
        *(_BYTE *)(a5 + 32) = 2;
        *(_OWORD *)(a5 + 40) = v14;
        *(_QWORD *)(a5 + 56) = v17;
        *(_QWORD *)(a5 + 64) = v15;
        *(_BYTE *)(a5 + 72) = v16;
        *(_QWORD *)(a5 + 80) = v11;
        *(_QWORD *)(a5 + 88) = v13;
        return result;
      }
LABEL_14:
      v19 = v14;
      result = specialized Parser.tryEat<A>(sequence:)(a1, a2);
      v14 = v19;
      if ((result & 1) == 0)
      {
        *(_QWORD *)&v22 = a1;
        *((_QWORD *)&v22 + 1) = a2;
        swift_bridgeObjectRetain();
        *(_QWORD *)&v22 = String.init<A>(_:)();
        *((_QWORD *)&v22 + 1) = v18;
        v23 = 0;
        v24 = 0;
        v25 = 3;
        Parser.errorAtCurrentPosition(_:)(&v22);
        result = swift_bridgeObjectRelease();
        v14 = v19;
      }
      goto LABEL_16;
    }
  }
  __break(1u);
  return result;
}

uint64_t Parser.getClosingDelimiter(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  BOOL v5;
  BOOL v6;
  char v7;
  BOOL v8;
  BOOL v9;
  char v10;
  BOOL v11;
  BOOL v12;
  char v13;
  BOOL v14;
  BOOL v15;
  char v16;
  BOOL v17;
  BOOL v18;
  char v19;
  BOOL v20;
  BOOL v21;
  Swift::String v23;

  v3 = a1;
  if (a1 != 39 || a2 != 0xE100000000000000)
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v5 = v3 == 34 && a2 == 0xE100000000000000;
    v6 = v5;
    if ((v4 & 1) == 0 && !v6)
    {
      v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v8 = v3 == 96 && a2 == 0xE100000000000000;
      v9 = v8;
      if ((v7 & 1) == 0 && !v9)
      {
        v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v11 = v3 == 94 && a2 == 0xE100000000000000;
        v12 = v11;
        if ((v10 & 1) == 0 && !v12)
        {
          v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
          v14 = v3 == 37 && a2 == 0xE100000000000000;
          v15 = v14;
          if ((v13 & 1) == 0 && !v15)
          {
            v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
            v17 = v3 == 35 && a2 == 0xE100000000000000;
            v18 = v17;
            if ((v16 & 1) == 0 && !v18)
            {
              v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
              v20 = v3 == 36 && a2 == 0xE100000000000000;
              v21 = v20;
              if ((v19 & 1) == 0 && !v21 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
              {
                if (v3 == 60 && a2 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  return 62;
                if (v3 == 123 && a2 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  return 125;
                v23._countAndFlagsBits = 0x656C646E61686E55;
                v23._object = (void *)0xEE00657361632064;
                Parser.unreachable(_:)(v23);
              }
            }
          }
        }
      }
    }
  }
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t Parser.lexNumberedReference(allowWholePatternRef:allowRecursionLevel:)@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  Swift::String v12;
  unint64_t v13;
  char *v14;
  uint64_t result;
  unint64_t v16;
  Swift::String v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  int64_t v25;
  int64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  int v41;
  unint64_t v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  __int128 v49;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  __int128 v76;
  unint64_t v77;
  char *v78;
  char v79;

  LODWORD(v4) = a2;
  v6 = *(_QWORD *)v3;
  v7 = *(_QWORD *)(v3 + 8);
  v8 = *(_QWORD *)(v3 + 16);
  v9 = *(_QWORD *)(v3 + 24);
  LODWORD(v70) = *(unsigned __int8 *)(v3 + 32);
  v10 = *(_QWORD *)(v3 + 48);
  v68 = *(_QWORD *)(v3 + 56);
  v69 = *(_QWORD *)(v3 + 40);
  v67 = *(_BYTE *)(v3 + 64);
  v11 = *(char **)(v3 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12._countAndFlagsBits = 43;
  v12._object = (void *)0xE100000000000000;
  v75 = v8;
  v13 = v8 >> 14;
  if (!Parser.tryEat(_:)(v12))
    goto LABEL_4;
  LODWORD(v74) = v4;
  v14 = *(char **)(v3 + 16);
  if ((unint64_t)v14 >> 14 < v13)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  result = (uint64_t)Parser.lexNumber(_:)(1, (uint64_t)&v76);
  if ((v79 & 1) == 0)
  {
    v42 = v77;
    if (v13 < v77 >> 14)
      v42 = v75;
    if ((unint64_t)v14 >> 14 >= (unint64_t)v78 >> 14)
      v43 = v14;
    else
      v43 = v78;
    if ((unint64_t)v43 >> 14 >= v42 >> 14)
    {
      v69 = v42;
      v70 = v43;
      v6 = v76;
      v9 = BYTE8(v76) & 1;
      v41 = 1;
      v68 = 1;
      goto LABEL_38;
    }
    __break(1u);
  }
  else
  {
LABEL_4:
    v16 = *(_QWORD *)(v3 + 16);
    v17._countAndFlagsBits = 45;
    v17._object = (void *)0xE100000000000000;
    if (!Parser.tryEat(_:)(v17))
    {
LABEL_8:
      Parser.lexNumber(_:)(1, (uint64_t)&v76);
      if ((v79 & 1) != 0)
      {
        v74 = v10;
        v19 = *(_QWORD *)(v3 + 72);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        specialized Collection.dropFirst(_:)(*((_QWORD *)v11 + 2), v19);
        v72 = v20;
        v13 = v21;
        v23 = v22 >> 1;
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        v24 = v72 - 32;
        v25 = v13;
        v26 = v13;
LABEL_10:
        v27 = v24 + 80 * v25;
        v10 = v74;
        while (1)
        {
          if (v23 == v26)
          {
            swift_bridgeObjectRelease();
            result = swift_unknownObjectRelease_n();
            *(_QWORD *)v3 = v6;
            *(_QWORD *)(v3 + 8) = v7;
            *(_QWORD *)(v3 + 16) = v75;
            *(_QWORD *)(v3 + 24) = v9;
            *(_BYTE *)(v3 + 32) = (_BYTE)v70;
            *(_QWORD *)(v3 + 40) = v69;
            *(_QWORD *)(v3 + 48) = v74;
            *(_QWORD *)(v3 + 56) = v68;
            *(_BYTE *)(v3 + 64) = v67;
            *(_QWORD *)(v3 + 72) = v11;
            *(_OWORD *)a3 = 0u;
            *(_OWORD *)(a3 + 16) = 0u;
            *(_QWORD *)(a3 + 32) = 255;
            *(_OWORD *)(a3 + 40) = 0u;
            *(_OWORD *)(a3 + 56) = 0u;
            *(_OWORD *)(a3 + 72) = 0u;
            *(_QWORD *)(a3 + 88) = 0;
            return result;
          }
          if (v25 < (uint64_t)v13 || v26 >= v23)
            break;
          v28 = *(unsigned __int8 *)(v27 + 32);
          ++v26;
          v27 += 80;
          if (!v28)
          {
            v62 = v6;
            v63 = v7;
            v73 = v24;
            v66 = v9;
            v57 = *(_QWORD *)(v27 - 24);
            v58 = *(_QWORD *)(v27 - 40);
            v55 = *(_QWORD *)(v27 - 32);
            v56 = *(_QWORD *)(v27 - 16);
            v59 = v11;
            v30 = *(_QWORD *)(v27 - 8);
            v29 = *(_QWORD *)v27;
            v32 = *(_QWORD *)(v27 + 8);
            v31 = *(_QWORD *)(v27 + 16);
            v33 = *(_BYTE *)(v27 + 24);
            swift_bridgeObjectRetain();
            v60 = v30;
            v61 = v32;
            v34 = v30;
            v11 = v59;
            v35 = v32;
            v36 = v31;
            outlined copy of ParseError?(v34, v29, v35, v31, v33);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v59 + 2) + 1, 1, v59);
            v38 = *((_QWORD *)v11 + 2);
            v37 = *((_QWORD *)v11 + 3);
            v24 = v73;
            if (v38 >= v37 >> 1)
            {
              v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v37 > 1), v38 + 1, 1, v11);
              v24 = v73;
              v11 = v40;
            }
            *((_QWORD *)v11 + 2) = v38 + 1;
            v39 = &v11[80 * v38];
            v39[32] = 0;
            *((_QWORD *)v39 + 5) = v58;
            *((_QWORD *)v39 + 6) = v55;
            *((_QWORD *)v39 + 7) = v57;
            *((_QWORD *)v39 + 8) = v56;
            *((_QWORD *)v39 + 9) = v60;
            v6 = v62;
            *((_QWORD *)v39 + 10) = v29;
            *((_QWORD *)v39 + 11) = v61;
            *((_QWORD *)v39 + 12) = v36;
            v39[104] = v33;
            v25 = v26;
            v7 = v63;
            v9 = v66;
            goto LABEL_10;
          }
        }
        __break(1u);
LABEL_58:
        __break(1u);
        goto LABEL_59;
      }
      v41 = 0;
      v70 = v78;
      v68 = 0;
      v69 = v77;
      v6 = v76;
      v9 = BYTE8(v76) & 1;
LABEL_38:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v11 = *(char **)(v3 + 16);
      v7 = (unint64_t)v11 >> 14;
      if ((unint64_t)v11 >> 14 >= v13)
      {
        if (((v41 | a1) & 1) != 0 || v9 || v6)
          goto LABEL_46;
        v74 = 0;
        v10 = *(_QWORD *)(v3 + 72);
        result = swift_isUniquelyReferenced_nonNull_native();
        LOBYTE(v6) = v4;
        if ((result & 1) != 0)
        {
LABEL_43:
          v4 = *(_QWORD *)(v10 + 16);
          v47 = *(_QWORD *)(v10 + 24);
          if (v4 >= v47 >> 1)
          {
            result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v47 > 1), v4 + 1, 1, (char *)v10);
            v10 = result;
          }
          *(_QWORD *)(v10 + 16) = v4 + 1;
          v48 = v10 + 80 * v4;
          *(_BYTE *)(v48 + 32) = 1;
          *(_QWORD *)(v48 + 40) = 0xD000000000000022;
          *(_QWORD *)(v48 + 48) = 0x80000001DF006E60;
          *(_QWORD *)(v48 + 56) = v75;
          *(_QWORD *)(v48 + 64) = v11;
          *(_QWORD *)(v48 + 72) = 5;
          *(_QWORD *)(v48 + 80) = 0;
          *(_QWORD *)(v48 + 88) = 0;
          *(_QWORD *)(v48 + 96) = 0;
          *(_BYTE *)(v48 + 104) = 36;
          *(_QWORD *)(v3 + 72) = v10;
          LOBYTE(v4) = v6;
          v6 = v74;
LABEL_46:
          if ((v4 & 1) != 0)
          {
            result = Parser.lexRecursionLevel()((uint64_t)&v76);
            v49 = v76;
            v50 = v77;
            v51 = v78;
            if ((v79 & 1) == 0)
            {
              v52 = v75;
              if (v13 >= v77 >> 14)
                v52 = v77;
              if (v7 < (unint64_t)v78 >> 14)
                v11 = v78;
              v75 = v52;
              v53 = v70;
              if ((unint64_t)v11 >> 14 >= v52 >> 14)
              {
                v54 = 0;
LABEL_56:
                *(_QWORD *)a3 = v6;
                *(_QWORD *)(a3 + 8) = v9;
                *(_QWORD *)(a3 + 16) = v69;
                *(_QWORD *)(a3 + 24) = v53;
                *(_QWORD *)(a3 + 32) = v68;
                *(_OWORD *)(a3 + 40) = v49;
                *(_QWORD *)(a3 + 56) = v50;
                *(_QWORD *)(a3 + 64) = v51;
                *(_QWORD *)(a3 + 72) = v54;
                *(_QWORD *)(a3 + 80) = v75;
                *(_QWORD *)(a3 + 88) = v11;
                return result;
              }
              goto LABEL_64;
            }
          }
          else
          {
            v50 = 0;
            v51 = 0;
            v49 = 0uLL;
          }
          v54 = 1;
          v53 = v70;
          goto LABEL_56;
        }
LABEL_61:
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v10 + 16) + 1, 1, (char *)v10);
        v10 = result;
        goto LABEL_43;
      }
      goto LABEL_58;
    }
    v64 = v13;
    v65 = v9;
    v9 = v6;
    LODWORD(v74) = v4;
    v13 = v10;
    v10 = v7;
    v18 = *(char **)(v3 + 16);
    v6 = (unint64_t)v18 >> 14;
    v7 = v16 >> 14;
    if ((unint64_t)v18 >> 14 < v16 >> 14)
    {
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
    result = (uint64_t)Parser.lexNumber(_:)(1, (uint64_t)&v76);
    if ((v79 & 1) != 0)
    {
      v7 = v10;
      v10 = v13;
      LOBYTE(v4) = v74;
      v6 = v9;
      v13 = v64;
      v9 = v65;
      goto LABEL_8;
    }
    v44 = v77;
    v45 = v76;
    if ((BYTE8(v76) & 1) == 0)
    {
      v45 = -(uint64_t)v76;
      if (__OFSUB__(0, (_QWORD)v76))
        goto LABEL_65;
    }
    if (v7 < v77 >> 14)
      v44 = v16;
    if (v6 >= (unint64_t)v78 >> 14)
      v46 = v18;
    else
      v46 = v78;
    if ((unint64_t)v46 >> 14 >= v44 >> 14)
    {
      v69 = v44;
      v70 = v46;
      v9 = BYTE8(v76) & 1;
      v41 = 1;
      v68 = 1;
      v10 = v13;
      LOBYTE(v4) = v74;
      v13 = v64;
      v6 = v45;
      goto LABEL_38;
    }
  }
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
  return result;
}

uint64_t Parser.lexKnownConditionalStart()@<X0>(_OWORD *a1@<X8>)
{
  char *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  Swift::String v11;
  Swift::String v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;
  Swift::String v34;
  Swift::Bool v35;
  Swift::String v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  Swift::String v79;
  char *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  Swift::String v89;
  uint64_t v90;
  unint64_t v91;
  int64x2_t v92;
  char v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  Swift::Bool v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  char *v122;
  unint64_t v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  _BYTE v137[48];
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  char v144;
  __int128 v145;
  __int128 v146;
  char v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  unsigned __int8 v151;
  __int128 v152;
  __int128 v153;
  _BYTE v154[24];
  unint64_t v155;
  uint64_t v156;
  char *v157;
  __int128 v158;
  uint64_t v159;
  uint64_t v160;
  char v161;
  _BYTE v162[128];
  _BYTE v163[128];
  _OWORD v164[8];
  unint64_t v165;
  char *v166;
  __int128 v167;
  uint64_t v168;
  uint64_t v169;
  char v170;

  v5 = v1;
  v129 = *((_QWORD *)v1 + 2);
  v130 = *(_QWORD *)v1;
  v128 = *((_QWORD *)v1 + 3);
  v127 = v1[32];
  v6 = *((_QWORD *)v1 + 6);
  v125 = *((_QWORD *)v1 + 7);
  v126 = *((_QWORD *)v1 + 5);
  v124 = v1[64];
  v7 = (char *)*((_QWORD *)v1 + 9);
  v132 = *((_QWORD *)v1 + 1);
  swift_bridgeObjectRetain();
  v131 = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(_QWORD *)&v134 = v1;
  if ((specialized Parser.tryEat<A>(sequence:)(2637608, 0xE300000000000000) & 1) == 0)
    goto LABEL_53;
  v4 = (uint64_t)&v142;
  v8 = *((_QWORD *)v1 + 1);
  v111 = *(_QWORD *)v1;
  v9 = *((_QWORD *)v1 + 2);
  v116 = *((_QWORD *)v1 + 3);
  LOBYTE(v115) = v1[32];
  v10 = *((_QWORD *)v1 + 6);
  v113 = *((_QWORD *)v1 + 7);
  v114 = *((_QWORD *)v1 + 5);
  v112 = v1[64];
  v3 = *((_QWORD *)v1 + 9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits = 82;
  v11._object = (void *)0xE100000000000000;
  v123 = v10;
  if (!Parser.tryEat(_:)(v11))
  {
    v110 = v3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Character>);
    v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_1DF003EC0;
    *(_QWORD *)(v2 + 32) = 60;
    *(_QWORD *)(v2 + 40) = 0xE100000000000000;
    *(_QWORD *)(v2 + 48) = 39;
    *(_QWORD *)(v2 + 56) = 0xE100000000000000;
    v15 = specialized Parser.tryEat<A>(anyOf:)(v2);
    v17 = v16;
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    if (v17)
    {
      v117 = v8;
      v118 = v9;
      v119 = v7;
      v2 = Parser.getClosingDelimiter(for:)(v15, v17);
      v19 = v18;
      swift_bridgeObjectRelease();
      Parser.lexNumberedReference(allowWholePatternRef:allowRecursionLevel:)(0, 0, (uint64_t)&v149);
      v20 = v151;
      if (v151 == 255)
      {
        Parser.expectNamedReference(endingWith:eatEnding:allowRecursionLevel:)(v2, v19, 1, 0, (uint64_t)&v135);
        swift_bridgeObjectRelease();
        v22 = *((_QWORD *)&v135 + 1);
        v21 = v135;
        v24 = *((_QWORD *)&v136 + 1);
        v23 = v136;
        v20 = v137[0];
        v25 = *(_QWORD *)&v137[8];
        v28 = *(_QWORD *)&v137[24];
        v27 = *(_QWORD *)&v137[16];
        v26 = *(_QWORD *)&v137[32];
        v4 = v137[40];
        v30 = *((_QWORD *)&v138 + 1);
        v29 = v138;
      }
      else
      {
        v31 = v149;
        v100 = *((_QWORD *)&v150 + 1);
        v102 = v150;
        v27 = *((_QWORD *)&v152 + 1);
        v98 = v152;
        v26 = *((_QWORD *)&v153 + 1);
        v28 = v153;
        v29 = *(_QWORD *)&v154[8];
        v4 = v154[0] & 1;
        v30 = *(_QWORD *)&v154[16];
        if ((specialized Parser.tryEat<A>(sequence:)(v2, v19) & 1) == 0)
        {
          *(_QWORD *)&v149 = v2;
          *((_QWORD *)&v149 + 1) = v19;
          *(_QWORD *)&v135 = String.init<A>(_:)();
          *((_QWORD *)&v135 + 1) = v32;
          v136 = 0uLL;
          v137[0] = 3;
          Parser.errorAtCurrentPosition(_:)(&v135);
        }
        swift_bridgeObjectRelease();
        v22 = *((_QWORD *)&v31 + 1);
        v21 = v31;
        v24 = v100;
        v23 = v102;
        v25 = v98;
      }
      *(_QWORD *)&v142 = v21;
      *((_QWORD *)&v142 + 1) = v22;
      *(_QWORD *)&v143 = v23;
      *((_QWORD *)&v143 + 1) = v24;
      v144 = v20;
      *(_QWORD *)&v145 = v25;
      *((_QWORD *)&v145 + 1) = v27;
      *(_QWORD *)&v146 = v28;
      *((_QWORD *)&v146 + 1) = v26;
      v147 = v4;
      *(_QWORD *)&v148 = v29;
      *((_QWORD *)&v148 + 1) = v30;
      _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOj0_((uint64_t)&v142);
      goto LABEL_17;
    }
    if ((specialized Parser.tryEat<A>(sequence:)(0x454E49464544, 0xE600000000000000) & 1) != 0)
    {
      _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOi4_((uint64_t)&v142);
    }
    else
    {
      if ((specialized Parser.tryEat<A>(sequence:)(0x4E4F4953524556, 0xE700000000000000) & 1) != 0)
      {
        v33 = *((_QWORD *)v1 + 2);
        v34._countAndFlagsBits = 62;
        v34._object = (void *)0xE100000000000000;
        v35 = Parser.tryEat(_:)(v34);
        v36._countAndFlagsBits = 61;
        v36._object = (void *)0xE100000000000000;
        result = Parser.tryEat(_:)(v36);
        if ((result & 1) == 0)
        {
          v167 = xmmword_1DF003F80;
          v168 = 0;
          v169 = 0;
          v170 = 3;
          result = Parser.errorAtCurrentPosition(_:)(&v167);
        }
        v2 = *((_QWORD *)v1 + 2);
        if (v2 >> 14 < v33 >> 14)
        {
          __break(1u);
        }
        else
        {
          v105 = v35;
          v117 = v8;
          v118 = v9;
          v119 = v7;
          Parser.lexNumber(_:)(1, (uint64_t)&v149);
          if ((v151 & 1) != 0)
          {
            v149 = xmmword_1DF003F30;
            v150 = xmmword_1DF003F90;
            v151 = 2;
            Parser.errorAtCurrentPosition(_:)(&v149);
            v38 = 0;
            v39 = *((_QWORD *)v1 + 2);
            v40 = 1;
            v41 = v39;
          }
          else
          {
            v41 = *((_QWORD *)&v150 + 1);
            v39 = v150;
            v38 = v149;
            v40 = BYTE8(v149) & 1;
          }
          v89._countAndFlagsBits = 46;
          v89._object = (void *)0xE100000000000000;
          if (!Parser.tryEat(_:)(v89))
          {
            v142 = xmmword_1DF003EF0;
            v143 = 0uLL;
            v144 = 3;
            Parser.errorAtCurrentPosition(_:)(&v142);
          }
          result = (uint64_t)Parser.lexNumber(_:)(1, (uint64_t)&v135);
          if ((v137[0] & 1) != 0)
          {
            v135 = xmmword_1DF003F30;
            v136 = xmmword_1DF003F90;
            v137[0] = 2;
            result = Parser.errorAtCurrentPosition(_:)(&v135);
            v90 = 0;
            v91 = *((_QWORD *)v1 + 2);
            v92 = vdupq_n_s64(v91);
            v93 = 1;
          }
          else
          {
            v92 = (int64x2_t)v136;
            v90 = v135;
            v93 = BYTE8(v135) & 1;
            v91 = *((_QWORD *)v1 + 2);
          }
          if (v2 >> 14 <= v91 >> 14)
          {
            LOBYTE(v149) = v105;
            *((_QWORD *)&v149 + 1) = v33;
            *(_QWORD *)&v150 = v2;
            *((_QWORD *)&v150 + 1) = v38;
            v151 = v40;
            *(_QWORD *)&v152 = v39;
            *((_QWORD *)&v152 + 1) = v41;
            *(_QWORD *)&v153 = v90;
            BYTE8(v153) = v93;
            *(int64x2_t *)v154 = v92;
            *(_QWORD *)&v154[16] = v2;
            v155 = v91;
            _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOi1_((uint64_t)&v149);
            outlined init with take of AST.Conditional.Condition.Kind(&v149, &v135);
            outlined init with take of AST.Conditional.Condition.Kind(&v135, &v142);
LABEL_17:
            outlined init with take of AST.Conditional.Condition.Kind(&v142, &v149);
            AST.root.modify(&v149);
            outlined init with take of AST.Conditional.Condition?((uint64_t)&v149, (uint64_t)&v158);
            v5 = v1;
            v7 = v119;
            goto LABEL_18;
          }
        }
        __break(1u);
        return result;
      }
      Parser.lexNumberedReference(allowWholePatternRef:allowRecursionLevel:)(0, 1, (uint64_t)&v135);
      if (v137[0] == 255)
      {
        v117 = v8;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        Parser.expectNamedReference(endingWith:eatEnding:allowRecursionLevel:)(41, 0xE100000000000000, 0, 1, (uint64_t)&v149);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v3 = *((_QWORD *)&v149 + 1);
        v42 = v149;
        v43 = *((_QWORD *)&v150 + 1);
        v2 = v150;
        LOBYTE(v44) = v151;
        v45 = v152;
        v46 = v153;
        LOBYTE(v8) = v154[0];
        v47 = *(_OWORD *)&v154[8];
        v118 = v9;
        if (!v151)
          goto LABEL_81;
        if (v151 == 1)
        {
          if ((BYTE8(v149) & 1) != 0 || (v149 & 0x8000000000000000) == 0)
            goto LABEL_85;
        }
        else
        {
          v122 = v7;
          v94 = *((_QWORD *)v5 + 6);
          v107 = v153;
          v109 = v152;
          v104 = *(_OWORD *)&v154[8];
          swift_bridgeObjectRetain();
          outlined copy of AST.Reference.Kind(v42, v3, v2, v43, 2);
          v95 = specialized Set.contains(_:)(v42, v3, v94);
          outlined consume of AST.Reference.Kind(v42, v3, v2, v43, 2);
          v7 = v122;
          swift_bridgeObjectRelease();
          v47 = v104;
          v46 = v107;
          v45 = v109;
          if ((v95 & 1) == 0)
            goto LABEL_85;
        }
        goto LABEL_83;
      }
      v142 = v135;
      v143 = v136;
      v144 = v137[0];
      v145 = *(_OWORD *)&v137[8];
      v146 = *(_OWORD *)&v137[24];
      v147 = v137[40] & 1;
      v148 = v138;
      _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOj0_((uint64_t)&v142);
    }
    outlined init with take of AST.Conditional.Condition.Kind(&v142, &v149);
    AST.root.modify(&v149);
    outlined init with take of AST.Conditional.Condition?((uint64_t)&v149, (uint64_t)&v158);
    goto LABEL_36;
  }
  v12._countAndFlagsBits = 38;
  v12._object = (void *)0xE100000000000000;
  if (!Parser.tryEat(_:)(v12))
  {
    Parser.lexNumber(_:)(1, (uint64_t)&v135);
    if ((v137[0] & 1) != 0)
    {
      _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOi3_((uint64_t)&v142);
LABEL_21:
      outlined init with take of AST.Conditional.Condition.Kind(&v142, &v149);
      AST.root.modify(&v149);
      outlined init with take of AST.Conditional.Condition?((uint64_t)&v149, (uint64_t)&v158);
      while (1)
      {
        v1 = (char *)&cache variable for noncanonical specialized generic type metadata for AST.Conditional.Condition.Kind?;
        outlined init with take of AST.Conditional.Condition?((uint64_t)&v158, (uint64_t)v162);
        outlined init with take of AST.Conditional.Condition?((uint64_t)v162, (uint64_t)v163);
        if (_s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOSgWOg((uint64_t)v163) == 1)
        {
          v120 = v7;
          v2 = *((_QWORD *)v5 + 9);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v4 = specialized Collection.dropFirst(_:)(*(_QWORD *)(v3 + 16), v2);
          v49 = v48;
          v7 = v50;
          v1 = (char *)(v51 >> 1);
          v110 = v2;
          swift_bridgeObjectRetain();
          swift_unknownObjectRetain();
          v52 = v49 - 32;
          v53 = v7;
          v13 = v7;
LABEL_39:
          v54 = v52 + 80 * (_QWORD)v53;
          while (1)
          {
            if (v1 == v13)
            {
              swift_bridgeObjectRelease();
              swift_unknownObjectRelease_n();
              *(_QWORD *)v5 = v111;
              *((_QWORD *)v5 + 1) = v8;
              *((_QWORD *)v5 + 2) = v9;
              *((_QWORD *)v5 + 3) = v116;
              v5[32] = v115;
              *((_QWORD *)v5 + 5) = v114;
              *((_QWORD *)v5 + 6) = v10;
              *((_QWORD *)v5 + 7) = v113;
              v5[64] = v112;
              *((_QWORD *)v5 + 9) = v3;
              _s12_RegexParser3ASTV11ConditionalV9ConditionVSgWOi0_((uint64_t)&v149);
              outlined init with take of AST.Conditional.Condition?((uint64_t)&v149, (uint64_t)v164);
              v7 = v120;
              goto LABEL_52;
            }
            if ((uint64_t)v53 < (uint64_t)v7 || (uint64_t)v13 >= (uint64_t)v1)
              break;
            v55 = *(unsigned __int8 *)(v54 + 32);
            ++v13;
            v54 += 80;
            if (!v55)
            {
              v2 = v8;
              v106 = v52;
              v108 = v4;
              v118 = v9;
              v99 = *(_QWORD *)(v54 - 24);
              v101 = *(_QWORD *)(v54 - 40);
              v56 = *(_QWORD *)(v54 - 8);
              v97 = *(_QWORD *)(v54 - 16);
              v57 = *(_QWORD *)v54;
              v58 = *(_QWORD *)(v54 + 8);
              v59 = *(_QWORD *)(v54 + 16);
              v60 = *(_BYTE *)(v54 + 24);
              v96 = *(_QWORD *)(v54 - 32);
              swift_bridgeObjectRetain();
              v103 = v59;
              outlined copy of ParseError?(v56, v57, v58, v59, v60);
              v117 = v2;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v3 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v3 + 16) + 1, 1, (char *)v3);
              v62 = *(_QWORD *)(v3 + 16);
              v61 = *(_QWORD *)(v3 + 24);
              v63 = (char *)v3;
              if (v62 >= v61 >> 1)
                v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v61 > 1), v62 + 1, 1, (char *)v3);
              *((_QWORD *)v63 + 2) = v62 + 1;
              v3 = (uint64_t)v63;
              v64 = &v63[80 * v62];
              v64[32] = 0;
              *((_QWORD *)v64 + 5) = v101;
              *((_QWORD *)v64 + 6) = v96;
              *((_QWORD *)v64 + 7) = v99;
              *((_QWORD *)v64 + 8) = v97;
              *((_QWORD *)v64 + 9) = v56;
              *((_QWORD *)v64 + 10) = v57;
              *((_QWORD *)v64 + 11) = v58;
              *((_QWORD *)v64 + 12) = v103;
              v64[104] = v60;
              v53 = v13;
              v5 = (char *)v134;
              v8 = v2;
              v9 = v118;
              v10 = v123;
              v4 = v108;
              v52 = v106;
              goto LABEL_39;
            }
          }
          __break(1u);
LABEL_88:
          __break(1u);
          goto LABEL_89;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined init with take of AST.Conditional.Condition?((uint64_t)v162, (uint64_t)&v149);
        v13 = (char *)*((_QWORD *)v5 + 2);
        if ((unint64_t)v13 >> 14 < v9 >> 14)
          goto LABEL_88;
        outlined init with take of AST.Conditional.Condition.Kind(&v149, v164);
        v165 = v9;
        v166 = v13;
        AST.root.modify(v164);
LABEL_52:
        outlined init with take of AST.Conditional.Condition?((uint64_t)v164, (uint64_t)&v142);
        outlined init with take of AST.Conditional.Condition?((uint64_t)&v142, (uint64_t)&v149);
        if (_s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOSgWOg((uint64_t)&v149) != 1)
          break;
LABEL_53:
        v2 = *((_QWORD *)v5 + 9);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v42 = specialized Collection.dropFirst(_:)(*((_QWORD *)v7 + 2), v2);
        v66 = v65;
        v68 = v67;
        v43 = v69 >> 1;
        v123 = v2;
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        v44 = v66 - 32;
        v70 = v68;
        v8 = v68;
LABEL_54:
        v71 = v44 + 80 * v70;
        while (1)
        {
          if (v43 == v8)
          {
            swift_bridgeObjectRelease();
            swift_unknownObjectRelease_n();
            *(_QWORD *)v5 = v130;
            *((_QWORD *)v5 + 1) = v132;
            *((_QWORD *)v5 + 2) = v129;
            *((_QWORD *)v5 + 3) = v128;
            v5[32] = v127;
            *((_QWORD *)v5 + 5) = v126;
            *((_QWORD *)v5 + 6) = v131;
            *((_QWORD *)v5 + 7) = v125;
            v5[64] = v124;
            *((_QWORD *)v5 + 9) = v7;
            _s12_RegexParser3ASTV11ConditionalV9ConditionVSgWOi0_((uint64_t)v164);
            return outlined init with take of AST.Conditional.Condition?((uint64_t)v164, (uint64_t)a1);
          }
          if (v70 < v68 || v8 >= v43)
            break;
          v72 = *(unsigned __int8 *)(v71 + 32);
          ++v8;
          v71 += 80;
          if (!v72)
          {
            v121 = v42;
            v115 = *(_QWORD *)(v71 - 24);
            v116 = *(_QWORD *)(v71 - 40);
            v2 = *(_QWORD *)(v71 - 8);
            v114 = *(_QWORD *)(v71 - 16);
            v73 = *(_QWORD *)v71;
            v4 = *(_QWORD *)(v71 + 8);
            v74 = *(_QWORD *)(v71 + 16);
            v3 = *(unsigned __int8 *)(v71 + 24);
            v117 = *(_QWORD *)(v71 - 32);
            swift_bridgeObjectRetain();
            outlined copy of ParseError?(v2, v73, v4, v74, v3);
            v118 = v44;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v7 + 2) + 1, 1, v7);
            v76 = *((_QWORD *)v7 + 2);
            v75 = *((_QWORD *)v7 + 3);
            v77 = v7;
            if (v76 >= v75 >> 1)
              v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v75 > 1), v76 + 1, 1, v7);
            *((_QWORD *)v77 + 2) = v76 + 1;
            v7 = v77;
            v78 = &v77[80 * v76];
            v78[32] = 0;
            v44 = v118;
            *((_QWORD *)v78 + 5) = v116;
            *((_QWORD *)v78 + 6) = v117;
            *((_QWORD *)v78 + 7) = v115;
            *((_QWORD *)v78 + 8) = v114;
            *((_QWORD *)v78 + 9) = v2;
            *((_QWORD *)v78 + 10) = v73;
            *((_QWORD *)v78 + 11) = v4;
            *((_QWORD *)v78 + 12) = v74;
            v78[104] = v3;
            v70 = v8;
            v5 = (char *)v134;
            v42 = v121;
            goto LABEL_54;
          }
        }
        __break(1u);
LABEL_81:
        if ((v3 & 1) != 0 || *((_QWORD *)v5 + 5) < v42)
        {
LABEL_85:
          outlined consume of AST.Reference.Kind(v42, v3, v2, v43, v44);
          _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOSgWOi0_((uint64_t)&v149);
        }
        else
        {
LABEL_83:
          *(_QWORD *)&v142 = v42;
          *((_QWORD *)&v142 + 1) = v3;
          *(_QWORD *)&v143 = v2;
          *((_QWORD *)&v143 + 1) = v43;
          v144 = v44;
          *(_OWORD *)(v4 + 40) = v45;
          *(_OWORD *)(v4 + 56) = v46;
          v147 = v8;
          v148 = v47;
          _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOj0_((uint64_t)&v142);
          outlined init with take of AST.Conditional.Condition.Kind(&v142, &v149);
          AST.root.modify(&v149);
        }
        outlined init with take of AST.Conditional.Condition?((uint64_t)&v149, (uint64_t)&v158);
LABEL_18:
        v8 = v117;
        v9 = v118;
LABEL_36:
        v10 = v123;
        v3 = v110;
      }
      v3 = v156;
      v7 = v157;
      v79._countAndFlagsBits = 41;
      v79._object = (void *)0xE100000000000000;
      if (Parser.tryEat(_:)(v79))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_71;
      }
      v134 = xmmword_1DF003F70;
      v158 = xmmword_1DF003F70;
      v160 = 0;
      v159 = 0;
      v161 = 3;
      v8 = *((_QWORD *)v5 + 2);
      ParseError.description.getter();
      v1 = v80;
      v2 = v81;
      v13 = (char *)*((_QWORD *)v5 + 9);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_68;
      goto LABEL_90;
    }
    v14 = *((_QWORD *)&v136 + 1);
    *(_QWORD *)&v142 = v135;
    *((_QWORD *)&v142 + 1) = BYTE8(v135) & 1;
    v143 = v136;
    v144 = 0;
    v145 = 0u;
    v146 = 0u;
    v147 = 1;
    *(_QWORD *)&v148 = v136;
LABEL_20:
    *((_QWORD *)&v148 + 1) = v14;
    _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOi0_((uint64_t)&v142);
    goto LABEL_21;
  }
  v13 = (char *)*((_QWORD *)v1 + 2);
  closure #1 in Parser.expectIdentifier(_:endingWith:eatEnding:)(v1, 41, 0xE100000000000000, 0, &v149);
  v14 = *((_QWORD *)v1 + 2);
  if (v14 >> 14 >= (unint64_t)v13 >> 14)
  {
    v142 = v149;
    v143 = 0uLL;
    v144 = 2;
    v145 = 0u;
    v146 = 0u;
    v147 = 1;
    *(_QWORD *)&v148 = v13;
    goto LABEL_20;
  }
LABEL_89:
  __break(1u);
LABEL_90:
  v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
LABEL_68:
  v83 = *((_QWORD *)v13 + 2);
  v82 = *((_QWORD *)v13 + 3);
  if (v83 >= v82 >> 1)
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v82 > 1), v83 + 1, 1, v13);
  *((_QWORD *)v13 + 2) = v83 + 1;
  v84 = &v13[80 * v83];
  v84[32] = 1;
  *((_QWORD *)v84 + 5) = v1;
  *((_QWORD *)v84 + 6) = v2;
  *((_QWORD *)v84 + 7) = v8;
  *((_QWORD *)v84 + 8) = v8;
  *(_OWORD *)(v84 + 72) = v134;
  *((_QWORD *)v84 + 11) = 0;
  *((_QWORD *)v84 + 12) = 0;
  v84[104] = 3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *((_QWORD *)v5 + 9) = v13;
LABEL_71:
  outlined init with take of AST.Conditional.Condition.Kind(&v149, &v135);
  *(_QWORD *)&v141 = v3;
  *((_QWORD *)&v141 + 1) = v7;
  v85 = v140;
  a1[6] = v139;
  a1[7] = v85;
  v86 = *(_OWORD *)&v137[16];
  a1[2] = *(_OWORD *)v137;
  a1[3] = v86;
  v87 = v138;
  a1[4] = *(_OWORD *)&v137[32];
  a1[5] = v87;
  v88 = v136;
  *a1 = v135;
  a1[1] = v88;
  a1[8] = v141;
  return AST.root.modify(a1);
}

uint64_t Parser.lexGroupConditionalStart()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unsigned __int8 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD v109[10];
  unsigned __int8 v110;

  v3 = *(_QWORD *)v1;
  v98 = *(_QWORD *)(v1 + 24);
  v100 = *(_QWORD *)(v1 + 16);
  v96 = *(_BYTE *)(v1 + 32);
  v4 = *(_QWORD *)(v1 + 48);
  v94 = *(_QWORD *)(v1 + 56);
  v95 = *(_QWORD *)(v1 + 40);
  v93 = *(_BYTE *)(v1 + 64);
  v5 = *(_QWORD *)(v1 + 72);
  v103 = *(_QWORD *)(v1 + 8);
  swift_bridgeObjectRetain();
  v102 = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = specialized Parser.tryEat<A>(sequence:)(16168, 0xE200000000000000);
  v7 = *(_QWORD *)(v1 + 72);
  v8 = *(_QWORD *)(v1 + 8);
  v9 = *(_QWORD *)(v1 + 48);
  v104 = v3;
  if ((v6 & 1) == 0)
  {
LABEL_17:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v43 = specialized Collection.dropFirst(_:)(*(_QWORD *)(v5 + 16), v7);
    v45 = v44;
    v47 = v46;
    v49 = v48 >> 1;
    swift_bridgeObjectRetain();
    result = swift_unknownObjectRetain();
    v50 = v45 - 32;
    v51 = v47;
    v52 = v47;
LABEL_18:
    v53 = v50 + 80 * v51;
    while (1)
    {
      if (v49 == v52)
      {
        swift_bridgeObjectRelease();
        result = swift_unknownObjectRelease_n();
        *(_QWORD *)v1 = v3;
        *(_QWORD *)(v1 + 8) = v103;
        *(_QWORD *)(v1 + 16) = v100;
        *(_QWORD *)(v1 + 24) = v98;
        *(_BYTE *)(v1 + 32) = v96;
        *(_QWORD *)(v1 + 40) = v95;
        *(_QWORD *)(v1 + 48) = v102;
        *(_QWORD *)(v1 + 56) = v94;
        *(_BYTE *)(v1 + 64) = v93;
        *(_QWORD *)(v1 + 72) = v5;
        *(_OWORD *)a1 = 0u;
        *(_OWORD *)(a1 + 16) = 0u;
        *(_OWORD *)(a1 + 32) = 0u;
        *(_OWORD *)(a1 + 48) = 0u;
        *(_OWORD *)(a1 + 64) = 0u;
        *(_QWORD *)(a1 + 88) = 0;
        *(_QWORD *)(a1 + 96) = 0;
        *(_QWORD *)(a1 + 80) = 255;
        return result;
      }
      if (v51 < v47 || v52 >= v49)
        break;
      v54 = *(unsigned __int8 *)(v53 + 32);
      ++v52;
      v53 += 80;
      if (!v54)
      {
        v108 = v7;
        v90 = v50;
        v92 = v43;
        v82 = *(_QWORD *)(v53 - 40);
        v84 = a1;
        v55 = *(_QWORD *)(v53 - 8);
        v78 = *(_QWORD *)(v53 - 16);
        v80 = *(_QWORD *)(v53 - 24);
        v57 = *(_QWORD *)v53;
        v56 = *(_QWORD *)(v53 + 8);
        v58 = *(_QWORD *)(v53 + 16);
        v59 = *(_BYTE *)(v53 + 24);
        v76 = *(_QWORD *)(v53 - 32);
        swift_bridgeObjectRetain();
        v86 = v55;
        v88 = v57;
        v60 = v57;
        v61 = v56;
        outlined copy of ParseError?(v55, v60, v56, v58, v59);
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v5 + 16) + 1, 1, (char *)v5);
          v5 = result;
        }
        v63 = *(_QWORD *)(v5 + 16);
        v62 = *(_QWORD *)(v5 + 24);
        v64 = v5;
        a1 = v84;
        if (v63 >= v62 >> 1)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v62 > 1), v63 + 1, 1, (char *)v5);
          v64 = result;
        }
        *(_QWORD *)(v64 + 16) = v63 + 1;
        v5 = v64;
        v65 = v64 + 80 * v63;
        *(_BYTE *)(v65 + 32) = 0;
        *(_QWORD *)(v65 + 40) = v82;
        *(_QWORD *)(v65 + 48) = v76;
        *(_QWORD *)(v65 + 56) = v80;
        *(_QWORD *)(v65 + 64) = v78;
        *(_QWORD *)(v65 + 72) = v86;
        *(_QWORD *)(v65 + 80) = v88;
        *(_QWORD *)(v65 + 88) = v61;
        *(_QWORD *)(v65 + 96) = v58;
        *(_BYTE *)(v65 + 104) = v59;
        v51 = v52;
        v3 = v104;
        v7 = v108;
        v50 = v90;
        v43 = v92;
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v89 = v5;
  v85 = *(_QWORD *)v1;
  v10 = *(_QWORD *)(v1 + 16);
  v11 = *(_QWORD *)(v1 + 24);
  v87 = *(_BYTE *)(v1 + 32);
  v12 = *(_QWORD *)(v1 + 40);
  v13 = *(_QWORD *)(v1 + 56);
  v14 = *(_BYTE *)(v1 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  closure #1 in closure #1 in Parser.lexGroupStart()(v1, (uint64_t)v109);
  v91 = v9;
  v15 = v110;
  if (v110 == 255)
  {
    v81 = v12;
    v83 = v11;
    v74 = v8;
    v75 = v14;
    v77 = v13;
    v79 = v10;
    v23 = *(_QWORD *)(v1 + 72);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v107 = v7;
    specialized Collection.dropFirst(_:)(*(_QWORD *)(v7 + 16), v23);
    v25 = v24;
    v27 = v26;
    v29 = v28 >> 1;
    swift_bridgeObjectRetain();
    result = swift_unknownObjectRetain();
    v30 = v25 - 32;
    v31 = v27;
    v32 = v27;
    v33 = v87;
LABEL_6:
    v3 = v104;
    v34 = v30 + 80 * v31;
    while (v29 != v32)
    {
      if (v31 < v27 || v32 >= v29)
        goto LABEL_30;
      v35 = *(unsigned __int8 *)(v34 + 32);
      ++v32;
      v34 += 80;
      if (!v35)
      {
        v73 = v30;
        v69 = *(_QWORD *)(v34 - 24);
        v70 = *(_QWORD *)(v34 - 40);
        v36 = *(_QWORD *)(v34 - 8);
        v67 = *(_QWORD *)(v34 - 32);
        v68 = *(_QWORD *)(v34 - 16);
        v37 = *(_QWORD *)v34;
        v38 = *(_QWORD *)(v34 + 8);
        v39 = *(_QWORD *)(v34 + 16);
        v66 = *(_BYTE *)(v34 + 24);
        swift_bridgeObjectRetain();
        v72 = v37;
        v71 = v38;
        outlined copy of ParseError?(v36, v37, v38, v39, v66);
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v107 + 16) + 1, 1, (char *)v107);
          v107 = result;
        }
        v41 = *(_QWORD *)(v107 + 16);
        v40 = *(_QWORD *)(v107 + 24);
        v30 = v73;
        if (v41 >= v40 >> 1)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v40 > 1), v41 + 1, 1, (char *)v107);
          v30 = v73;
          v107 = result;
        }
        v33 = v87;
        *(_QWORD *)(v107 + 16) = v41 + 1;
        v42 = v107 + 80 * v41;
        *(_BYTE *)(v42 + 32) = 0;
        *(_QWORD *)(v42 + 40) = v70;
        *(_QWORD *)(v42 + 48) = v67;
        *(_QWORD *)(v42 + 56) = v69;
        *(_QWORD *)(v42 + 64) = v68;
        *(_QWORD *)(v42 + 72) = v36;
        *(_QWORD *)(v42 + 80) = v72;
        *(_QWORD *)(v42 + 88) = v71;
        *(_QWORD *)(v42 + 96) = v39;
        *(_BYTE *)(v42 + 104) = v66;
        v31 = v32;
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease_n();
    *(_QWORD *)v1 = v85;
    *(_QWORD *)(v1 + 8) = v74;
    *(_QWORD *)(v1 + 16) = v79;
    *(_QWORD *)(v1 + 24) = v83;
    *(_BYTE *)(v1 + 32) = v33;
    *(_QWORD *)(v1 + 40) = v81;
    *(_QWORD *)(v1 + 48) = v91;
    *(_QWORD *)(v1 + 56) = v77;
    *(_BYTE *)(v1 + 64) = v75;
    v7 = v107;
    *(_QWORD *)(v1 + 72) = v107;
    v5 = v89;
    goto LABEL_17;
  }
  v16 = v109[0];
  v17 = v109[1];
  v18 = v109[2];
  v19 = v109[3];
  v20 = v109[4];
  v105 = v109[6];
  v106 = v109[5];
  v99 = v109[8];
  v101 = v109[7];
  v97 = v109[9];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v22 = *(_QWORD *)(v1 + 16);
  if (v22 >> 14 >= v10 >> 14)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a1 = v16;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v18;
    *(_QWORD *)(a1 + 24) = v19;
    *(_QWORD *)(a1 + 32) = v20;
    *(_QWORD *)(a1 + 40) = v106;
    *(_QWORD *)(a1 + 48) = v105;
    *(_QWORD *)(a1 + 56) = v101;
    *(_QWORD *)(a1 + 64) = v99;
    *(_QWORD *)(a1 + 72) = v97;
    *(_BYTE *)(a1 + 80) = v15;
    *(_QWORD *)(a1 + 88) = v10;
    *(_QWORD *)(a1 + 96) = v22;
    return result;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t Parser.lexAbsentFunctionStart()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t result;
  char v5;
  unint64_t v6;

  v3 = *(_QWORD *)(v1 + 16);
  result = specialized Parser.tryEat<A>(sequence:)(2088648488, 0xE400000000000000);
  v5 = result;
  if ((result & 1) != 0
    || (result = specialized Parser.tryEat<A>(sequence:)(8273704, 0xE300000000000000), (result & 1) != 0))
  {
    v6 = *(_QWORD *)(v1 + 16);
    if (v6 >> 14 < v3 >> 14)
    {
      __break(1u);
    }
    else
    {
      *(_BYTE *)a1 = (v5 & 1) == 0;
      *(_QWORD *)(a1 + 8) = v3;
      *(_QWORD *)(a1 + 16) = v6;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 2;
  }
  return result;
}

uint64_t Parser.lexCustomCCStart()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  Swift::String v61;
  Swift::String v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  unint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  unsigned int (*v90)(char *, uint64_t, uint64_t);
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;

  v2 = v1;
  v91 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Atom.CharacterProperty?);
  v5 = MEMORY[0x1E0C80A78](v3, v4);
  v7 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v64 - v9;
  v11 = type metadata accessor for AST.Atom.CharacterProperty(0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v88 = (uint64_t)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.CharacterProperty>?);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *v2;
  v20 = v2[1];
  v22 = v2[2];
  v21 = v2[3];
  LOBYTE(v17) = *((_BYTE *)v2 + 32);
  v23 = v2[5];
  v24 = v2[6];
  v25 = v2[7];
  v26 = v2[9];
  v89 = v2 + 9;
  v27 = *((unsigned __int8 *)v2 + 64);
  v86 = v21;
  v87 = v19;
  v93 = v19;
  v94 = v20;
  v95 = v22;
  v96 = v21;
  v97 = v17;
  v84 = v25;
  v85 = v23;
  v98 = v23;
  v99 = v24;
  v100 = v25;
  v83 = v27;
  v101 = v27;
  v102 = v26;
  LOBYTE(v92) = v17;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  closure #1 in closure #1 in Parser.lexPOSIXCharacterProperty()(&v93, (uint64_t)v7);
  v90 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v90(v7, 1, v11) == 1)
  {
    v82 = v12;
    v79 = v11;
    v80 = v18;
    v81 = v22;
    outlined destroy of _ASTParent?((uint64_t)v7, &demangling cache variable for type metadata for AST.Atom.CharacterProperty?);
    v28 = v102;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v29 = specialized Collection.dropFirst(_:)(*(_QWORD *)(v26 + 16), v28);
    v31 = v30;
    v33 = v32;
    v35 = v34 >> 1;
    v78 = v28;
    swift_bridgeObjectRetain();
    v77 = v29;
    result = swift_unknownObjectRetain();
    v37 = v31 - 32;
    v38 = v33;
    v39 = v33;
LABEL_3:
    v40 = v91;
    v41 = v37 + 80 * v38;
    v42 = v82;
    while (1)
    {
      if (v35 == v39)
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease_n();
        v93 = v87;
        v94 = v20;
        v22 = v81;
        v95 = v81;
        v96 = v86;
        v97 = v92;
        v98 = v85;
        v99 = v24;
        v100 = v84;
        v101 = v83;
        v102 = v26;
        v11 = v79;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v42 + 56))(v10, 1, 1, v79);
        v18 = v80;
        goto LABEL_15;
      }
      if (v38 < v33 || v39 >= v35)
        break;
      v43 = *(unsigned __int8 *)(v41 + 32);
      ++v39;
      v41 += 80;
      if (!v43)
      {
        v68 = v24;
        v70 = v10;
        v72 = v20;
        v76 = v37;
        v44 = *(_QWORD *)(v41 - 32);
        v66 = *(_QWORD *)(v41 - 40);
        v65 = *(_QWORD *)(v41 - 24);
        v45 = *(_QWORD *)(v41 - 8);
        v64 = *(_QWORD *)(v41 - 16);
        v47 = *(_QWORD *)v41;
        v46 = *(_QWORD *)(v41 + 8);
        v48 = *(_QWORD *)(v41 + 16);
        v49 = *(unsigned __int8 *)(v41 + 24);
        v75 = v44;
        swift_bridgeObjectRetain();
        v74 = v45;
        v73 = v47;
        v71 = v46;
        v69 = v48;
        v67 = v49;
        outlined copy of ParseError?(v45, v47, v46, v48, v49);
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v26 + 16) + 1, 1, (char *)v26);
          v26 = result;
        }
        v51 = *(_QWORD *)(v26 + 16);
        v50 = *(_QWORD *)(v26 + 24);
        v37 = v76;
        v20 = v72;
        v10 = v70;
        v24 = v68;
        if (v51 >= v50 >> 1)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v50 > 1), v51 + 1, 1, (char *)v26);
          v37 = v76;
          v26 = result;
        }
        *(_QWORD *)(v26 + 16) = v51 + 1;
        v52 = v26 + 80 * v51;
        *(_BYTE *)(v52 + 32) = 0;
        *(_QWORD *)(v52 + 40) = v66;
        *(_QWORD *)(v52 + 48) = v75;
        *(_QWORD *)(v52 + 56) = v65;
        *(_QWORD *)(v52 + 64) = v64;
        *(_QWORD *)(v52 + 72) = v74;
        *(_QWORD *)(v52 + 80) = v73;
        *(_QWORD *)(v52 + 88) = v71;
        *(_QWORD *)(v52 + 96) = v69;
        *(_BYTE *)(v52 + 104) = v67;
        v38 = v39;
        goto LABEL_3;
      }
    }
    __break(1u);
    goto LABEL_25;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with take of AST.Atom.Kind((uint64_t)v7, (uint64_t)v10, type metadata accessor for AST.Atom.CharacterProperty);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
  v40 = v91;
LABEL_15:
  v53 = v90(v10, 1, v11);
  if (v53 == 1)
  {
    outlined destroy of _ASTParent?((uint64_t)v10, &demangling cache variable for type metadata for AST.Atom.CharacterProperty?);
    v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.CharacterProperty>);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v18, 1, 1, v54);
  }
  else
  {
    v55 = (uint64_t)v10;
    v56 = v88;
    outlined init with take of AST.Atom.Kind(v55, v88, type metadata accessor for AST.Atom.CharacterProperty);
    result = outlined init with take of AST.Atom.Kind(v56, (uint64_t)v18, type metadata accessor for AST.Atom.CharacterProperty);
    v57 = v95;
    if (v95 >> 14 < v22 >> 14)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.CharacterProperty>);
    v59 = &v18[*(int *)(v58 + 28)];
    *(_QWORD *)v59 = v22;
    *((_QWORD *)v59 + 1) = v57;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v18, 0, 1, v58);
  }
  outlined destroy of _ASTParent?((uint64_t)v18, &demangling cache variable for type metadata for Source.Located<AST.Atom.CharacterProperty>?);
  v60 = v102;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v92 = v60;
  Diagnostics.appendNewFatalErrors(from:)((_RegexParser::Diagnostics)&v92);
  result = swift_bridgeObjectRelease();
  if (v53 != 1
    || (v61._countAndFlagsBits = 91,
        v61._object = (void *)0xE100000000000000,
        result = Parser.tryEat(_:)(v61),
        (result & 1) == 0))
  {
    v40[1] = 0;
    v40[2] = 0;
    *v40 = 2;
    return result;
  }
  v62._countAndFlagsBits = 94;
  v62._object = (void *)0xE100000000000000;
  result = Parser.tryEat(_:)(v62);
  v63 = v2[2];
  if (v63 >> 14 >= v22 >> 14)
  {
    *(_BYTE *)v40 = result & 1;
    v40[1] = v22;
    v40[2] = v63;
    return result;
  }
LABEL_26:
  __break(1u);
  return result;
}

void Parser.lexCustomCCBinOp()()
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Parser.peekCCBinOp()();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __asm { BR              X9 }
}

uint64_t sub_1DEFB6F58()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  if ((specialized Parser.tryEat<A>(sequence:)(11565, 0xE200000000000000) & 1) == 0)
  {
    *(_QWORD *)&v7 = String.init<A>(_:)();
    *((_QWORD *)&v7 + 1) = v3;
    v8 = 0;
    v9 = 0;
    v10 = 3;
    Parser.errorAtCurrentPosition(_:)(&v7);
  }
  result = swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(v1 + 16);
  if (v5 >> 14 < v6 >> 14)
  {
    __break(1u);
    JUMPOUT(0x1DEFB7014);
  }
  *(_BYTE *)v0 = v2;
  *(_QWORD *)(v0 + 8) = v6;
  *(_QWORD *)(v0 + 16) = v5;
  return result;
}

_RegexParser::AST::CustomCharacterClass::SetOp_optional __swiftcall Parser.peekCCBinOp()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _RegexParser::AST::CustomCharacterClass::SetOp_optional result;
  char v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v1 = v0;
  swift_bridgeObjectRetain();
  v2 = String.subscript.getter();
  v4 = v3;
  swift_bridgeObjectRelease();
  LOBYTE(v2) = specialized Sequence<>.starts<A>(with:)(11565, 0xE200000000000000, v2, v4);
  result.value = swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    v6 = 0;
  }
  else
  {
    swift_bridgeObjectRetain();
    v7 = String.subscript.getter();
    v9 = v8;
    swift_bridgeObjectRelease();
    LOBYTE(v7) = specialized Sequence<>.starts<A>(with:)(32382, 0xE200000000000000, v7, v9);
    result.value = swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
    {
      v6 = 2;
    }
    else
    {
      swift_bridgeObjectRetain();
      v10 = String.subscript.getter();
      v12 = v11;
      swift_bridgeObjectRelease();
      LOBYTE(v10) = specialized Sequence<>.starts<A>(with:)(9766, 0xE200000000000000, v10, v12);
      result.value = swift_bridgeObjectRelease();
      if ((v10 & 1) != 0)
        v6 = 1;
      else
        v6 = 3;
    }
  }
  *v1 = v6;
  return result;
}

unint64_t closure #1 in Parser.canLexDotNetCharClassSubtraction()@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  char v12;
  unint64_t result;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  char v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  char v36;
  char v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  Swift::String v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  char v52;
  char v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  char v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  char v71;
  char v72;
  unint64_t v73;
  char v74;
  char v75;
  Swift::String v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  char v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  char v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char v112;
  char v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char v120;
  char v121;
  unint64_t v122;
  unint64_t v123;
  Swift::String v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  Swift::Int v129;
  uint64_t v130;
  Swift::String v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  unint64_t v135;
  unint64_t v136;
  char *v137;
  Swift::Int v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  Swift::Int v146;
  uint64_t v147;
  Swift::String v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  unint64_t v152;
  unint64_t v153;
  char *v154;
  Swift::Int v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  char *v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  char *v172;
  char v173;
  unint64_t v174;
  unint64_t v175;
  char *v177;
  char v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char v182;
  unint64_t v183;
  char v184;
  char v185;
  uint64_t v186;
  Swift::String v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  char *v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  char v197;
  char v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  char *v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  char v208;
  char v209;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v211;
  unint64_t v212;
  char *v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t v216;
  char v217;
  char v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  char v229;
  char v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t *v233;
  unint64_t *v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  void *v238;
  unint64_t *v239;
  unint64_t v240;
  unint64_t v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  char *v246;
  char *v247;
  uint64_t v248;
  unint64_t v249;
  _QWORD *v250;
  _QWORD v251[5];

  v239 = a2;
  v248 = type metadata accessor for Unicode.Scalar.Properties();
  v243 = *(_QWORD *)(v248 - 8);
  MEMORY[0x1E0C80A78](v248, v3);
  v247 = (char *)&v236 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v237 = (unint64_t)" bound, but lexed upper bound?";
  v241 = 0x80000001DF007440;
  v242 = (unint64_t)"Unhandled termination condition";
  v238 = (void *)0x80000001DF0073C0;
  v250 = (_QWORD *)a1;
  while (1)
  {
    v5 = *(char **)(a1 + 16);
    if ((*(_BYTE *)(a1 + 32) & 1) == 0)
    {
      v6 = *(_QWORD *)(a1 + 24);
      swift_bridgeObjectRetain();
      v7 = String.subscript.getter();
      v9 = v8;
      swift_bridgeObjectRelease();
      LOBYTE(v7) = specialized Sequence<>.starts<A>(with:)(2309928, 0xE300000000000000, v7, v9);
      swift_bridgeObjectRelease();
      if ((v7 & 1) != 0)
      {
        if (String.count.getter() < 1
          || (swift_bridgeObjectRetain(),
              String.subscript.getter(),
              swift_bridgeObjectRelease(),
              v10 = Substring.index(_:offsetBy:limitedBy:)(),
              v12 = v11,
              result = swift_bridgeObjectRelease(),
              (v12 & 1) != 0))
        {
          strcpy((char *)v251, "UNREACHABLE: ");
          HIWORD(v251[1]) = -4864;
          v28._countAndFlagsBits = 0xD000000000000015;
          v28._object = (void *)(v242 | 0x8000000000000000);
          String.append(_:)(v28);
          swift_bridgeObjectRelease();
          v29 = v251[0];
          v30 = v251[1];
          v31 = *(char **)(a1 + 72);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v31 + 2) + 1, 1, v31);
          v33 = *((_QWORD *)v31 + 2);
          v32 = *((_QWORD *)v31 + 3);
          if (v33 >= v32 >> 1)
            v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v32 > 1), v33 + 1, 1, v31);
          *((_QWORD *)v31 + 2) = v33 + 1;
          v34 = &v31[80 * v33];
          v34[32] = 0;
          *((_QWORD *)v34 + 5) = v29;
          *((_QWORD *)v34 + 6) = v30;
          *((_QWORD *)v34 + 7) = v5;
          *((_QWORD *)v34 + 8) = v5;
          *(_OWORD *)(v34 + 72) = 0u;
          *(_OWORD *)(v34 + 88) = 0u;
          v34[104] = -1;
          *(_QWORD *)(a1 + 72) = v31;
          swift_bridgeObjectRetain();
          String.subscript.getter();
          swift_bridgeObjectRelease();
          v35 = Substring.distance(from:to:)();
          swift_bridgeObjectRelease();
          if (v35 < 1)
            goto LABEL_27;
          swift_bridgeObjectRetain();
          String.subscript.getter();
          swift_bridgeObjectRelease();
          v10 = Substring.index(_:offsetBy:limitedBy:)();
          v37 = v36;
          result = swift_bridgeObjectRelease();
          if ((v37 & 1) != 0)
            goto LABEL_27;
          if (v6 >> 14 < v10 >> 14)
            goto LABEL_234;
        }
        else if (v6 >> 14 < v10 >> 14)
        {
          goto LABEL_231;
        }
        *(_QWORD *)(a1 + 16) = v10;
        *(_QWORD *)(a1 + 24) = v6;
LABEL_27:
        v38 = (_QWORD *)a1;
        v39 = 41;
        v40 = 0xE100000000000000;
LABEL_40:
        result = specialized Parser.lexUntil(_:)(v38, v39, v40, v251);
        v54 = v251[1];
LABEL_41:
        if (*(_QWORD *)(a1 + 16) >> 14 < (unint64_t)v5 >> 14)
          goto LABEL_220;
        if (v54)
          goto LABEL_2;
        v5 = *(char **)(a1 + 16);
        goto LABEL_44;
      }
    }
    v14 = *(_QWORD *)(a1 + 56);
    if ((v14 & 8) != 0)
    {
      v15 = *(_QWORD *)(a1 + 24);
      swift_bridgeObjectRetain();
      v16 = String.subscript.getter();
      v18 = v17;
      swift_bridgeObjectRelease();
      LOBYTE(v16) = specialized Sequence<>.starts<A>(with:)(10799, 0xE200000000000000, v16, v18);
      swift_bridgeObjectRelease();
      if ((v16 & 1) != 0)
      {
        if (String.count.getter() < 1
          || (swift_bridgeObjectRetain(),
              String.subscript.getter(),
              swift_bridgeObjectRelease(),
              v19 = Substring.index(_:offsetBy:limitedBy:)(),
              v21 = v20,
              result = swift_bridgeObjectRelease(),
              (v21 & 1) != 0))
        {
          strcpy((char *)v251, "UNREACHABLE: ");
          HIWORD(v251[1]) = -4864;
          v44._countAndFlagsBits = 0xD000000000000015;
          v44._object = (void *)(v242 | 0x8000000000000000);
          String.append(_:)(v44);
          swift_bridgeObjectRelease();
          v45 = v251[0];
          v46 = v251[1];
          v47 = *(char **)(a1 + 72);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v47 + 2) + 1, 1, v47);
          v49 = *((_QWORD *)v47 + 2);
          v48 = *((_QWORD *)v47 + 3);
          if (v49 >= v48 >> 1)
            v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v48 > 1), v49 + 1, 1, v47);
          *((_QWORD *)v47 + 2) = v49 + 1;
          v50 = &v47[80 * v49];
          v50[32] = 0;
          *((_QWORD *)v50 + 5) = v45;
          *((_QWORD *)v50 + 6) = v46;
          *((_QWORD *)v50 + 7) = v5;
          *((_QWORD *)v50 + 8) = v5;
          *(_OWORD *)(v50 + 72) = 0u;
          *(_OWORD *)(v50 + 88) = 0u;
          v50[104] = -1;
          *(_QWORD *)(a1 + 72) = v47;
          swift_bridgeObjectRetain();
          String.subscript.getter();
          swift_bridgeObjectRelease();
          v51 = Substring.distance(from:to:)();
          swift_bridgeObjectRelease();
          if (v51 < 1)
            goto LABEL_39;
          swift_bridgeObjectRetain();
          String.subscript.getter();
          swift_bridgeObjectRelease();
          v19 = Substring.index(_:offsetBy:limitedBy:)();
          v53 = v52;
          result = swift_bridgeObjectRelease();
          if ((v53 & 1) != 0)
            goto LABEL_39;
          if (v15 >> 14 < v19 >> 14)
            goto LABEL_237;
        }
        else if (v15 >> 14 < v19 >> 14)
        {
          goto LABEL_233;
        }
        *(_QWORD *)(a1 + 16) = v19;
        *(_QWORD *)(a1 + 24) = v15;
LABEL_39:
        v38 = (_QWORD *)a1;
        v39 = 12074;
        v40 = 0xE200000000000000;
        goto LABEL_40;
      }
    }
    if ((v14 & 2) != 0)
    {
      v22 = v5;
      v23 = *(_QWORD *)(a1 + 24);
      v24 = *(char **)(a1 + 72);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v246 = v22;
      v25 = String.subscript.getter();
      v27 = v26;
      swift_bridgeObjectRelease();
      if (!((v25 ^ v27) >> 14))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_18:
        a1 = (uint64_t)v250;
        v5 = v246;
        goto LABEL_44;
      }
      v41 = Substring.subscript.getter();
      v43 = v42;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v41 != 35 || v43 != 0xE100000000000000)
      {
        v72 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v72 & 1) != 0)
          goto LABEL_67;
        goto LABEL_18;
      }
      swift_bridgeObjectRelease();
LABEL_67:
      swift_bridgeObjectRetain();
      String.subscript.getter();
      swift_bridgeObjectRelease();
      v73 = Substring.index(_:offsetBy:limitedBy:)();
      v75 = v74;
      result = swift_bridgeObjectRelease();
      if ((v75 & 1) != 0)
      {
        strcpy((char *)v251, "UNREACHABLE: ");
        HIWORD(v251[1]) = -4864;
        v76._countAndFlagsBits = 0xD000000000000015;
        v76._object = v238;
        String.append(_:)(v76);
        swift_bridgeObjectRelease();
        v77 = v251[0];
        v78 = v251[1];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v24 + 2) + 1, 1, v24);
        v80 = *((_QWORD *)v24 + 2);
        v79 = *((_QWORD *)v24 + 3);
        if (v80 >= v79 >> 1)
          v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v79 > 1), v80 + 1, 1, v24);
        *((_QWORD *)v24 + 2) = v80 + 1;
        v81 = &v24[80 * v80];
        v81[32] = 0;
        *((_QWORD *)v81 + 5) = v77;
        *((_QWORD *)v81 + 6) = v78;
        v82 = (unint64_t)v246;
        *((_QWORD *)v81 + 7) = v246;
        *((_QWORD *)v81 + 8) = v82;
        *(_OWORD *)(v81 + 72) = 0u;
        *(_OWORD *)(v81 + 88) = 0u;
        v81[104] = -1;
        v250[9] = v24;
        swift_bridgeObjectRetain();
        String.subscript.getter();
        swift_bridgeObjectRelease();
        v83 = Substring.distance(from:to:)();
        swift_bridgeObjectRelease();
        if (v83 < 1)
        {
          v73 = v82;
          a1 = (uint64_t)v250;
LABEL_92:
          v251[0] = 0;
          v251[1] = 0xE000000000000000;
          result = closure #1 in closure #1 in Parser.lexComment()(a1);
          v102 = v73;
          v240 = v73;
          v103 = v73;
          if ((result & 1) != 0)
          {
LABEL_110:
            if (v102 >> 14 < v240 >> 14)
              goto LABEL_229;
            v54 = v251[1];
            v5 = v246;
            goto LABEL_41;
          }
          while (1)
          {
            v102 = *(_QWORD *)(a1 + 16);
            v104 = *(_QWORD *)(a1 + 24);
            v105 = *(char **)(a1 + 72);
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v249 = v104;
            v106 = String.subscript.getter();
            v108 = v107;
            swift_bridgeObjectRelease();
            if (!((v106 ^ v108) >> 14))
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              result = swift_bridgeObjectRelease();
              v102 = v103;
              a1 = (uint64_t)v250;
              goto LABEL_110;
            }
            v109 = Substring.subscript.getter();
            v244 = v110;
            v245 = v109;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            String.subscript.getter();
            swift_bridgeObjectRelease();
            v111 = Substring.index(_:offsetBy:limitedBy:)();
            v113 = v112;
            result = swift_bridgeObjectRelease();
            if ((v113 & 1) == 0)
              break;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v105 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v105 + 2) + 1, 1, v105);
            v115 = *((_QWORD *)v105 + 2);
            v114 = *((_QWORD *)v105 + 3);
            if (v115 >= v114 >> 1)
              v105 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v114 > 1), v115 + 1, 1, v105);
            *((_QWORD *)v105 + 2) = v115 + 1;
            v116 = &v105[80 * v115];
            v116[32] = 0;
            v117 = v241;
            *((_QWORD *)v116 + 5) = 0xD000000000000022;
            *((_QWORD *)v116 + 6) = v117;
            *((_QWORD *)v116 + 7) = v102;
            *((_QWORD *)v116 + 8) = v102;
            *(_OWORD *)(v116 + 72) = 0u;
            *(_OWORD *)(v116 + 88) = 0u;
            v116[104] = -1;
            v250[9] = v105;
            swift_bridgeObjectRetain();
            String.subscript.getter();
            swift_bridgeObjectRelease();
            v118 = Substring.distance(from:to:)();
            swift_bridgeObjectRelease();
            if (v118 < 1)
            {
              a1 = (uint64_t)v250;
            }
            else
            {
              swift_bridgeObjectRetain();
              String.subscript.getter();
              swift_bridgeObjectRelease();
              v119 = Substring.index(_:offsetBy:limitedBy:)();
              v121 = v120;
              result = swift_bridgeObjectRelease();
              a1 = (uint64_t)v250;
              if ((v121 & 1) == 0)
              {
                if (v249 >> 14 < v119 >> 14)
                  goto LABEL_228;
                v102 = v119;
LABEL_108:
                v122 = v249;
                a1 = (uint64_t)v250;
                v250[2] = v102;
                *(_QWORD *)(a1 + 24) = v122;
              }
            }
            MEMORY[0x1DF0F36FC](v245, v244);
            swift_bridgeObjectRelease();
            result = closure #1 in closure #1 in Parser.lexComment()(a1);
            v103 = v102;
            if ((result & 1) != 0)
              goto LABEL_110;
          }
          if (v249 >> 14 < v111 >> 14)
            goto LABEL_221;
          v102 = v111;
          goto LABEL_108;
        }
        swift_bridgeObjectRetain();
        String.subscript.getter();
        swift_bridgeObjectRelease();
        v84 = Substring.index(_:offsetBy:limitedBy:)();
        v86 = v85;
        result = swift_bridgeObjectRelease();
        v73 = v82;
        a1 = (uint64_t)v250;
        if ((v86 & 1) != 0)
          goto LABEL_92;
        if (v23 >> 14 < v84 >> 14)
          goto LABEL_240;
        v73 = v84;
      }
      else
      {
        a1 = (uint64_t)v250;
        if (v23 >> 14 < v73 >> 14)
          goto LABEL_235;
      }
      *(_QWORD *)(a1 + 16) = v73;
      *(_QWORD *)(a1 + 24) = v23;
      goto LABEL_92;
    }
LABEL_44:
    if ((*(_BYTE *)(a1 + 56) & 1) == 0)
      goto LABEL_113;
    swift_bridgeObjectRetain();
    v55 = String.subscript.getter();
    v57 = v56;
    result = swift_bridgeObjectRelease();
    if (v57 >> 14 < v55 >> 14)
      goto LABEL_216;
    v246 = v5;
    v58 = Substring.subscript.getter();
    v60 = v59;
    swift_bridgeObjectRelease();
    v61 = v58 >> 14;
    v62 = v60 >> 14;
    if (v58 >> 14 == v60 >> 14)
      goto LABEL_81;
    v63 = Substring.subscript.getter();
    result = specialized Collection.first.getter(v63, v64);
    if ((result & 0x100000000) != 0)
      goto LABEL_242;
    v65 = v247;
    Unicode.Scalar.properties.getter();
    v66 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
    swift_bridgeObjectRelease();
    v249 = *(_QWORD *)(v243 + 8);
    ((void (*)(char *, uint64_t))v249)(v65, v248);
    if ((v66 & 1) == 0)
      goto LABEL_81;
    result = Substring.index(after:)();
    v67 = result >> 14;
    if (result >> 14 == v62)
      goto LABEL_80;
    v245 = v58 >> 14;
    while (1)
    {
      result = Substring.subscript.getter();
      if ((v68 & 0x2000000000000000) != 0)
        v69 = HIBYTE(v68) & 0xF;
      else
        v69 = result & 0xFFFFFFFFFFFFLL;
      if (!v69)
      {
        __break(1u);
LABEL_216:
        __break(1u);
LABEL_217:
        __break(1u);
        goto LABEL_218;
      }
      if ((v68 & 0x1000000000000000) != 0)
      {
        _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((v68 & 0x2000000000000000) != 0)
        {
          v251[0] = result;
          v251[1] = v68 & 0xFFFFFFFFFFFFFFLL;
        }
        else if ((result & 0x1000000000000000) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }
        _decodeScalar(_:startingAt:)();
      }
      v70 = v247;
      Unicode.Scalar.properties.getter();
      v71 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
      swift_bridgeObjectRelease();
      result = ((uint64_t (*)(char *, uint64_t))v249)(v70, v248);
      if ((v71 & 1) == 0)
        break;
      result = Substring.index(after:)();
      v67 = result >> 14;
      if (result >> 14 == v62)
      {
        if (v62 >= v245)
          goto LABEL_81;
        goto LABEL_217;
      }
    }
    v62 = v67;
    v61 = v245;
LABEL_80:
    if (v62 < v61)
      goto LABEL_217;
LABEL_81:
    v87 = Substring.subscript.getter();
    v89 = v88;
    v91 = v90;
    v93 = v92;
    swift_bridgeObjectRelease();
    if (!((v87 ^ v89) >> 14))
    {
      swift_bridgeObjectRelease();
      a1 = (uint64_t)v250;
LABEL_113:
      v123 = *(_QWORD *)(a1 + 16);
      v124._countAndFlagsBits = 45;
      v124._object = (void *)0xE100000000000000;
      result = Parser.tryEat(_:)(v124);
      if ((result & 1) == 0)
        goto LABEL_213;
      v125 = *(_QWORD *)(a1 + 16);
      if (v125 >> 14 < v123 >> 14)
        goto LABEL_238;
      v241 = v237 | 0x8000000000000000;
      v238 = (void *)(v242 | 0x8000000000000000);
      v236 = v123;
      v237 = v125;
      while (1)
      {
        if ((*(_BYTE *)(a1 + 32) & 1) != 0
          || (swift_bridgeObjectRetain(),
              v126 = String.subscript.getter(),
              v128 = v127,
              swift_bridgeObjectRelease(),
              LOBYTE(v126) = specialized Sequence<>.starts<A>(with:)(2309928, 0xE300000000000000, v126, v128),
              swift_bridgeObjectRelease(),
              (v126 & 1) == 0))
        {
          v142 = *(_QWORD *)(a1 + 56);
          if ((v142 & 8) == 0
            || (swift_bridgeObjectRetain(),
                v143 = String.subscript.getter(),
                v145 = v144,
                swift_bridgeObjectRelease(),
                LOBYTE(v143) = specialized Sequence<>.starts<A>(with:)(10799, 0xE200000000000000, v143, v145),
                swift_bridgeObjectRelease(),
                (v143 & 1) == 0))
          {
            if ((v142 & 2) == 0)
              goto LABEL_143;
            v157 = v125;
            v158 = *(_QWORD *)(a1 + 24);
            v159 = *(char **)(a1 + 72);
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v246 = (char *)v157;
            v160 = String.subscript.getter();
            v162 = v161;
            swift_bridgeObjectRelease();
            if (!((v160 ^ v162) >> 14))
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
LABEL_142:
              a1 = (uint64_t)v250;
              v125 = (unint64_t)v246;
              goto LABEL_143;
            }
            v179 = Substring.subscript.getter();
            v181 = v180;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v179 == 35 && v181 == 0xE100000000000000)
            {
              swift_bridgeObjectRelease();
            }
            else
            {
              v182 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if ((v182 & 1) == 0)
                goto LABEL_142;
            }
            swift_bridgeObjectRetain();
            String.subscript.getter();
            swift_bridgeObjectRelease();
            v183 = Substring.index(_:offsetBy:limitedBy:)();
            v185 = v184;
            result = swift_bridgeObjectRelease();
            if ((v185 & 1) == 0)
            {
              v186 = (uint64_t)v250;
              if (v158 >> 14 < v183 >> 14)
                goto LABEL_239;
              goto LABEL_179;
            }
            strcpy((char *)v251, "UNREACHABLE: ");
            HIWORD(v251[1]) = -4864;
            v187._countAndFlagsBits = 0xD000000000000015;
            v187._object = v238;
            String.append(_:)(v187);
            swift_bridgeObjectRelease();
            v188 = v251[0];
            v189 = v251[1];
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v159 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v159 + 2) + 1, 1, v159);
            v191 = *((_QWORD *)v159 + 2);
            v190 = *((_QWORD *)v159 + 3);
            if (v191 >= v190 >> 1)
              v159 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v190 > 1), v191 + 1, 1, v159);
            *((_QWORD *)v159 + 2) = v191 + 1;
            v192 = &v159[80 * v191];
            v192[32] = 0;
            *((_QWORD *)v192 + 5) = v188;
            *((_QWORD *)v192 + 6) = v189;
            v193 = (unint64_t)v246;
            *((_QWORD *)v192 + 7) = v246;
            *((_QWORD *)v192 + 8) = v193;
            *(_OWORD *)(v192 + 72) = 0u;
            *(_OWORD *)(v192 + 88) = 0u;
            v192[104] = -1;
            v186 = (uint64_t)v250;
            v250[9] = v159;
            swift_bridgeObjectRetain();
            String.subscript.getter();
            swift_bridgeObjectRelease();
            v194 = Substring.distance(from:to:)();
            swift_bridgeObjectRelease();
            v183 = v193;
            if (v194 >= 1)
            {
              swift_bridgeObjectRetain();
              v195 = (unint64_t)v246;
              String.subscript.getter();
              swift_bridgeObjectRelease();
              v196 = Substring.index(_:offsetBy:limitedBy:)();
              v198 = v197;
              result = swift_bridgeObjectRelease();
              v183 = v195;
              if ((v198 & 1) == 0)
              {
                if (v158 >> 14 < v196 >> 14)
                  goto LABEL_241;
                v183 = v196;
                v186 = (uint64_t)v250;
LABEL_179:
                *(_QWORD *)(v186 + 16) = v183;
                *(_QWORD *)(v186 + 24) = v158;
              }
            }
            v251[0] = 0;
            v251[1] = 0xE000000000000000;
            result = closure #1 in closure #1 in Parser.lexComment()(v186);
            v199 = v183;
            v240 = v183;
            a1 = v186;
            if ((result & 1) != 0)
            {
LABEL_209:
              if (v199 >> 14 < v240 >> 14)
                goto LABEL_236;
              v156 = v251[1];
              v125 = (unint64_t)v246;
              goto LABEL_136;
            }
            while (2)
            {
              v199 = *(_QWORD *)(a1 + 16);
              v201 = *(_QWORD *)(a1 + 24);
              v202 = *(char **)(a1 + 72);
              swift_bridgeObjectRetain_n();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v249 = v201;
              v203 = String.subscript.getter();
              v205 = v204;
              swift_bridgeObjectRelease();
              if (!((v203 ^ v205) >> 14))
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                result = swift_bridgeObjectRelease();
                v199 = v183;
                a1 = (uint64_t)v250;
                goto LABEL_209;
              }
              v244 = Substring.subscript.getter();
              v245 = v206;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              String.subscript.getter();
              swift_bridgeObjectRelease();
              v207 = Substring.index(_:offsetBy:limitedBy:)();
              v209 = v208;
              result = swift_bridgeObjectRelease();
              if ((v209 & 1) == 0)
              {
                a1 = (uint64_t)v250;
                if (v249 >> 14 < v207 >> 14)
                  goto LABEL_226;
                v199 = v207;
                goto LABEL_183;
              }
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              a1 = (uint64_t)v250;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                v202 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v202 + 2) + 1, 1, v202);
              v212 = *((_QWORD *)v202 + 2);
              v211 = *((_QWORD *)v202 + 3);
              if (v212 >= v211 >> 1)
                v202 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v211 > 1), v212 + 1, 1, v202);
              *((_QWORD *)v202 + 2) = v212 + 1;
              v213 = &v202[80 * v212];
              v213[32] = 0;
              v214 = v241;
              *((_QWORD *)v213 + 5) = 0xD000000000000022;
              *((_QWORD *)v213 + 6) = v214;
              *((_QWORD *)v213 + 7) = v199;
              *((_QWORD *)v213 + 8) = v199;
              *(_OWORD *)(v213 + 72) = 0u;
              *(_OWORD *)(v213 + 88) = 0u;
              v213[104] = -1;
              *(_QWORD *)(a1 + 72) = v202;
              swift_bridgeObjectRetain();
              String.subscript.getter();
              swift_bridgeObjectRelease();
              v215 = Substring.distance(from:to:)();
              swift_bridgeObjectRelease();
              if (v215 >= 1)
              {
                swift_bridgeObjectRetain();
                String.subscript.getter();
                swift_bridgeObjectRelease();
                v216 = Substring.index(_:offsetBy:limitedBy:)();
                v218 = v217;
                result = swift_bridgeObjectRelease();
                if ((v218 & 1) == 0)
                {
                  if (v249 >> 14 < v216 >> 14)
                    goto LABEL_232;
                  v199 = v216;
LABEL_183:
                  v200 = v249;
                  *(_QWORD *)(a1 + 16) = v199;
                  *(_QWORD *)(a1 + 24) = v200;
                }
              }
              MEMORY[0x1DF0F36FC](v244, v245);
              swift_bridgeObjectRelease();
              result = closure #1 in closure #1 in Parser.lexComment()(a1);
              v183 = v199;
              if ((result & 1) != 0)
                goto LABEL_209;
              continue;
            }
          }
          v146 = String.count.getter();
          if (!Source.tryAdvance(_:)(v146))
          {
            v147 = *(_QWORD *)(a1 + 16);
            strcpy((char *)v251, "UNREACHABLE: ");
            HIWORD(v251[1]) = -4864;
            v148._countAndFlagsBits = 0xD000000000000015;
            v148._object = (void *)(v242 | 0x8000000000000000);
            String.append(_:)(v148);
            swift_bridgeObjectRelease();
            v149 = v251[0];
            v150 = v251[1];
            v151 = *(char **)(a1 + 72);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v151 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v151 + 2) + 1, 1, v151);
            v153 = *((_QWORD *)v151 + 2);
            v152 = *((_QWORD *)v151 + 3);
            if (v153 >= v152 >> 1)
              v151 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v152 > 1), v153 + 1, 1, v151);
            *((_QWORD *)v151 + 2) = v153 + 1;
            v154 = &v151[80 * v153];
            v154[32] = 0;
            *((_QWORD *)v154 + 5) = v149;
            *((_QWORD *)v154 + 6) = v150;
            *((_QWORD *)v154 + 7) = v147;
            *((_QWORD *)v154 + 8) = v147;
            *(_OWORD *)(v154 + 72) = 0u;
            *(_OWORD *)(v154 + 88) = 0u;
            v154[104] = -1;
            *(_QWORD *)(a1 + 72) = v151;
            swift_bridgeObjectRetain();
            String.subscript.getter();
            swift_bridgeObjectRelease();
            v155 = Substring.distance(from:to:)();
            swift_bridgeObjectRelease();
            Source.tryAdvance(_:)(v155);
          }
          v139 = (_QWORD *)a1;
          v140 = 12074;
          v141 = 0xE200000000000000;
        }
        else
        {
          v129 = String.count.getter();
          if (!Source.tryAdvance(_:)(v129))
          {
            v130 = *(_QWORD *)(a1 + 16);
            strcpy((char *)v251, "UNREACHABLE: ");
            HIWORD(v251[1]) = -4864;
            v131._countAndFlagsBits = 0xD000000000000015;
            v131._object = (void *)(v242 | 0x8000000000000000);
            String.append(_:)(v131);
            swift_bridgeObjectRelease();
            v132 = v251[0];
            v133 = v251[1];
            v134 = *(char **)(a1 + 72);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v134 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v134 + 2) + 1, 1, v134);
            v136 = *((_QWORD *)v134 + 2);
            v135 = *((_QWORD *)v134 + 3);
            if (v136 >= v135 >> 1)
              v134 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v135 > 1), v136 + 1, 1, v134);
            *((_QWORD *)v134 + 2) = v136 + 1;
            v137 = &v134[80 * v136];
            v137[32] = 0;
            *((_QWORD *)v137 + 5) = v132;
            *((_QWORD *)v137 + 6) = v133;
            *((_QWORD *)v137 + 7) = v130;
            *((_QWORD *)v137 + 8) = v130;
            *(_OWORD *)(v137 + 72) = 0u;
            *(_OWORD *)(v137 + 88) = 0u;
            v137[104] = -1;
            *(_QWORD *)(a1 + 72) = v134;
            swift_bridgeObjectRetain();
            String.subscript.getter();
            swift_bridgeObjectRelease();
            v138 = Substring.distance(from:to:)();
            swift_bridgeObjectRelease();
            Source.tryAdvance(_:)(v138);
          }
          v139 = (_QWORD *)a1;
          v140 = 41;
          v141 = 0xE100000000000000;
        }
        result = specialized Parser.lexUntil(_:)(v139, v140, v141, v251);
        v156 = v251[1];
LABEL_136:
        if (*(_QWORD *)(a1 + 16) >> 14 < v125 >> 14)
          goto LABEL_225;
        if (v156)
          goto LABEL_116;
        v125 = *(_QWORD *)(a1 + 16);
LABEL_143:
        if ((*(_BYTE *)(a1 + 56) & 1) == 0)
          goto LABEL_212;
        swift_bridgeObjectRetain();
        v163 = String.subscript.getter();
        v165 = v164;
        result = swift_bridgeObjectRelease();
        if (v165 >> 14 < v163 >> 14)
        {
LABEL_222:
          __break(1u);
          goto LABEL_223;
        }
        v246 = (char *)v125;
        v166 = Substring.subscript.getter();
        v168 = v167;
        swift_bridgeObjectRelease();
        v169 = v168 >> 14;
        v245 = v166 >> 14;
        if (v166 >> 14 != v168 >> 14)
        {
          v170 = Substring.subscript.getter();
          result = specialized Collection.first.getter(v170, v171);
          if ((result & 0x100000000) != 0)
            goto LABEL_243;
          v172 = v247;
          Unicode.Scalar.properties.getter();
          v173 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
          swift_bridgeObjectRelease();
          v249 = *(_QWORD *)(v243 + 8);
          ((void (*)(char *, uint64_t))v249)(v172, v248);
          if ((v173 & 1) != 0)
          {
            result = Substring.index(after:)();
            v174 = result >> 14;
            if (result >> 14 != v169)
            {
              while (1)
              {
                result = Substring.subscript.getter();
                if (!((v175 & 0x2000000000000000) != 0 ? HIBYTE(v175) & 0xF : result & 0xFFFFFFFFFFFFLL))
                  break;
                if ((v175 & 0x1000000000000000) != 0)
                {
                  _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
                }
                else
                {
                  if ((v175 & 0x2000000000000000) != 0)
                  {
                    v251[0] = result;
                    v251[1] = v175 & 0xFFFFFFFFFFFFFFLL;
                  }
                  else if ((result & 0x1000000000000000) == 0)
                  {
                    _StringObject.sharedUTF8.getter();
                  }
                  _decodeScalar(_:startingAt:)();
                }
                v177 = v247;
                Unicode.Scalar.properties.getter();
                v178 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
                swift_bridgeObjectRelease();
                result = ((uint64_t (*)(char *, uint64_t))v249)(v177, v248);
                if ((v178 & 1) == 0)
                {
                  v169 = v174;
LABEL_198:
                  a1 = (uint64_t)v250;
                  goto LABEL_199;
                }
                result = Substring.index(after:)();
                v174 = result >> 14;
                if (result >> 14 == v169)
                  goto LABEL_198;
              }
LABEL_218:
              __break(1u);
LABEL_219:
              __break(1u);
LABEL_220:
              __break(1u);
LABEL_221:
              __break(1u);
              goto LABEL_222;
            }
LABEL_199:
            if (v169 < v245)
            {
LABEL_223:
              __break(1u);
              goto LABEL_224;
            }
          }
        }
        v219 = Substring.subscript.getter();
        v221 = v220;
        v223 = v222;
        v225 = v224;
        swift_bridgeObjectRelease();
        if (!((v219 ^ v221) >> 14))
        {
          swift_bridgeObjectRelease();
LABEL_212:
          result = Parser.lexCustomCCStart()(v251);
          if (LOBYTE(v251[0]) != 2)
          {
            v234 = v239;
            v235 = v237;
            *v239 = v236;
            v234[1] = v235;
            *((_BYTE *)v234 + 16) = 0;
            return result;
          }
LABEL_213:
          v233 = v239;
          *v239 = 0;
          v233[1] = 0;
          *((_BYTE *)v233 + 16) = 1;
          return result;
        }
        if (Substring.distance(from:to:)() >= 1)
        {
          v226 = *(_QWORD *)(a1 + 24);
          swift_bridgeObjectRetain();
          v249 = String.subscript.getter();
          v245 = v227;
          swift_bridgeObjectRelease();
          a1 = (uint64_t)v250;
          v228 = Substring.index(_:offsetBy:limitedBy:)();
          v230 = v229;
          result = swift_bridgeObjectRelease();
          if ((v230 & 1) == 0)
          {
            if (v226 >> 14 < v228 >> 14)
              goto LABEL_230;
            *(_QWORD *)(a1 + 16) = v228;
            *(_QWORD *)(a1 + 24) = v226;
          }
        }
        MEMORY[0x1DF0F366C](v219, v221, v223, v225);
        v232 = v231;
        result = swift_bridgeObjectRelease();
        if (*(_QWORD *)(a1 + 16) >> 14 < (unint64_t)v246 >> 14)
        {
LABEL_224:
          __break(1u);
LABEL_225:
          __break(1u);
LABEL_226:
          __break(1u);
          goto LABEL_227;
        }
        if (!v232)
          goto LABEL_212;
LABEL_116:
        swift_bridgeObjectRelease();
        v125 = *(_QWORD *)(a1 + 16);
      }
    }
    v94 = Substring.distance(from:to:)();
    a1 = (uint64_t)v250;
    if (v94 >= 1)
    {
      v95 = v250[3];
      swift_bridgeObjectRetain();
      v249 = String.subscript.getter();
      v245 = v96;
      swift_bridgeObjectRelease();
      a1 = (uint64_t)v250;
      v97 = Substring.index(_:offsetBy:limitedBy:)();
      v99 = v98;
      result = swift_bridgeObjectRelease();
      if ((v99 & 1) == 0)
        break;
    }
LABEL_86:
    MEMORY[0x1DF0F366C](v87, v89, v91, v93);
    v101 = v100;
    result = swift_bridgeObjectRelease();
    if (*(_QWORD *)(a1 + 16) >> 14 < (unint64_t)v246 >> 14)
      goto LABEL_219;
    if (!v101)
      goto LABEL_113;
LABEL_2:
    swift_bridgeObjectRelease();
  }
  if (v95 >> 14 >= v97 >> 14)
  {
    *(_QWORD *)(a1 + 16) = v97;
    *(_QWORD *)(a1 + 24) = v95;
    goto LABEL_86;
  }
LABEL_227:
  __break(1u);
LABEL_228:
  __break(1u);
LABEL_229:
  __break(1u);
LABEL_230:
  __break(1u);
LABEL_231:
  __break(1u);
LABEL_232:
  __break(1u);
LABEL_233:
  __break(1u);
LABEL_234:
  __break(1u);
LABEL_235:
  __break(1u);
LABEL_236:
  __break(1u);
LABEL_237:
  __break(1u);
LABEL_238:
  __break(1u);
LABEL_239:
  __break(1u);
LABEL_240:
  __break(1u);
LABEL_241:
  __break(1u);
LABEL_242:
  __break(1u);
LABEL_243:
  __break(1u);
  return result;
}

uint64_t Parser.lexPOSIXCharacterProperty()@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int (*v71)(_QWORD, _QWORD, _QWORD);
  uint64_t v72;
  char *v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char v82;

  v81 = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Atom.CharacterProperty?);
  v4 = MEMORY[0x1E0C80A78](v2, v3);
  v6 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v56 - v8;
  v10 = type metadata accessor for AST.Atom.CharacterProperty(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = v1[1];
  v16 = v1[2];
  v79 = *v1;
  v80 = v16;
  v17 = v1[3];
  LOBYTE(v16) = *((_BYTE *)v1 + 32);
  v18 = v1[6];
  v77 = v1[5];
  v78 = v17;
  v76 = v1[7];
  v75 = *((unsigned __int8 *)v1 + 64);
  v19 = v1[9];
  v82 = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  closure #1 in closure #1 in Parser.lexPOSIXCharacterProperty()(v1, (uint64_t)v6);
  v20 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v11 + 48);
  if (v20(v6, 1, v10) == 1)
  {
    v70 = v18;
    v71 = v20;
    v73 = v14;
    v74 = v15;
    v72 = v11;
    outlined destroy of _ASTParent?((uint64_t)v6, &demangling cache variable for type metadata for AST.Atom.CharacterProperty?);
    v21 = v1[9];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v22 = specialized Collection.dropFirst(_:)(*(_QWORD *)(v19 + 16), v21);
    v24 = v23;
    v26 = v25;
    v28 = v27 >> 1;
    v69 = v21;
    swift_bridgeObjectRetain();
    v68 = v22;
    result = swift_unknownObjectRetain();
    v30 = v24 - 32;
    v31 = v26;
    v32 = v26;
LABEL_3:
    v34 = v80;
    v33 = v81;
    v35 = v30 + 80 * v31;
    v36 = v74;
    while (1)
    {
      if (v28 == v32)
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease_n();
        v49 = v82;
        *v1 = v79;
        v1[1] = v36;
        v50 = v78;
        v1[2] = v34;
        v1[3] = v50;
        *((_BYTE *)v1 + 32) = v49;
        v51 = v70;
        v1[5] = v77;
        v1[6] = v51;
        v1[7] = v76;
        *((_BYTE *)v1 + 64) = v75;
        v1[9] = v19;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v72 + 56))(v9, 1, 1, v10);
        v14 = v73;
        v20 = v71;
        goto LABEL_15;
      }
      if (v31 < v26 || v32 >= v28)
        break;
      v37 = *(unsigned __int8 *)(v35 + 32);
      ++v32;
      v35 += 80;
      if (!v37)
      {
        v62 = v9;
        v64 = v10;
        v67 = v30;
        v38 = *(_QWORD *)(v35 - 32);
        v60 = *(_QWORD *)(v35 - 40);
        v59 = *(_QWORD *)(v35 - 24);
        v39 = *(_QWORD *)(v35 - 8);
        v58 = *(_QWORD *)(v35 - 16);
        v41 = *(_QWORD *)v35;
        v40 = *(_QWORD *)(v35 + 8);
        v42 = *(_QWORD *)(v35 + 16);
        v43 = *(unsigned __int8 *)(v35 + 24);
        v57 = v38;
        swift_bridgeObjectRetain();
        v65 = v41;
        v66 = v39;
        v44 = v41;
        v45 = v40;
        v63 = v42;
        v61 = v43;
        outlined copy of ParseError?(v39, v44, v40, v42, v43);
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v19 + 16) + 1, 1, (char *)v19);
          v19 = result;
        }
        v47 = *(_QWORD *)(v19 + 16);
        v46 = *(_QWORD *)(v19 + 24);
        v30 = v67;
        v10 = v64;
        v9 = v62;
        if (v47 >= v46 >> 1)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v46 > 1), v47 + 1, 1, (char *)v19);
          v30 = v67;
          v19 = result;
        }
        *(_QWORD *)(v19 + 16) = v47 + 1;
        v48 = v19 + 80 * v47;
        *(_BYTE *)(v48 + 32) = 0;
        *(_QWORD *)(v48 + 40) = v60;
        *(_QWORD *)(v48 + 48) = v57;
        *(_QWORD *)(v48 + 56) = v59;
        *(_QWORD *)(v48 + 64) = v58;
        *(_QWORD *)(v48 + 72) = v66;
        *(_QWORD *)(v48 + 80) = v65;
        *(_QWORD *)(v48 + 88) = v45;
        *(_QWORD *)(v48 + 96) = v63;
        *(_BYTE *)(v48 + 104) = v61;
        v31 = v32;
        goto LABEL_3;
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined init with take of AST.Atom.Kind((uint64_t)v6, (uint64_t)v9, type metadata accessor for AST.Atom.CharacterProperty);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
    v34 = v80;
    v33 = v81;
LABEL_15:
    if (v20(v9, 1, v10) == 1)
    {
      outlined destroy of _ASTParent?((uint64_t)v9, &demangling cache variable for type metadata for AST.Atom.CharacterProperty?);
      v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.CharacterProperty>);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v33, 1, 1, v52);
    }
    outlined init with take of AST.Atom.Kind((uint64_t)v9, (uint64_t)v14, type metadata accessor for AST.Atom.CharacterProperty);
    result = outlined init with take of AST.Atom.Kind((uint64_t)v14, v33, type metadata accessor for AST.Atom.CharacterProperty);
    v53 = v1[2];
    if (v53 >> 14 >= v34 >> 14)
    {
      v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.CharacterProperty>);
      v55 = (unint64_t *)(v33 + *(int *)(v54 + 28));
      *v55 = v34;
      v55[1] = v53;
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v33, 0, 1, v54);
    }
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in Parser.lexPOSIXCharacterProperty()@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  Swift::String v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL4 v23;
  uint64_t v24[4];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (uint64_t *)((char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((specialized Parser.tryEat<A>(sequence:)(14939, 0xE200000000000000) & 1) == 0)
  {
    v18 = type metadata accessor for AST.Atom.CharacterProperty(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a2, 1, 1, v18);
  }
  v8._countAndFlagsBits = 94;
  v8._object = (void *)0xE100000000000000;
  v9 = Parser.tryEat(_:)(v8);
  specialized Parser.lexUntil(_:)(a1, atPossibleEnding #1 (_:) in Parser.lexCharacterPropertyKeyValue(), &v25);
  v11 = v25;
  v10 = v26;
  v12 = v27;
  v13 = v28;
  v14._countAndFlagsBits = 61;
  v14._object = (void *)0xE100000000000000;
  if (Parser.tryEat(_:)(v14))
  {
    v22 = v13;
    v23 = v9;
    specialized Parser.lexUntil(_:)(a1, atPossibleEnding #1 (_:) in Parser.lexCharacterPropertyKeyValue(), &v25);
    v16 = v25;
    v15 = v26;
    v17 = v27;
    v13 = v28;
    if ((specialized Parser.tryEat<A>(sequence:)(23866, 0xE200000000000000) & 1) != 0)
    {
      if (v10)
      {
        v25 = v11;
        v26 = v10;
        v27 = v12;
        v28 = v22;
        v24[0] = v16;
        v24[1] = v15;
        v24[2] = v17;
        v24[3] = v13;
        Parser.classifyCharacterProperty(key:value:)(&v25, v24, v7);
        swift_bridgeObjectRelease();
LABEL_10:
        swift_bridgeObjectRelease();
        outlined init with take of AST.Atom.Kind((uint64_t)v7, a2, type metadata accessor for AST.Atom.CharacterProperty.Kind);
        v20 = type metadata accessor for AST.Atom.CharacterProperty(0);
        *(_BYTE *)(a2 + *(int *)(v20 + 20)) = v23;
        *(_BYTE *)(a2 + *(int *)(v20 + 24)) = 1;
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a2, 0, 1, v20);
      }
LABEL_9:
      v25 = v16;
      v26 = v15;
      v27 = v17;
      v28 = v13;
      Parser.classifyCharacterPropertyValueOnly(_:)(&v25, v7);
      goto LABEL_10;
    }
  }
  else if ((specialized Parser.tryEat<A>(sequence:)(23866, 0xE200000000000000) & 1) != 0)
  {
    v23 = v9;
    v16 = v11;
    v15 = v10;
    v17 = v12;
    goto LABEL_9;
  }
  v21 = type metadata accessor for AST.Atom.CharacterProperty(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(a2, 1, 1, v21);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t Parser.lexNamedCharacter()@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  uint64_t v22[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Atom.Kind?);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AST.Atom.Kind(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = v1[2];
  if ((specialized Parser.tryEat<A>(sequence:)(31566, 0xE200000000000000) & 1) != 0)
  {
    if ((specialized Parser.tryEat<A>(sequence:)(11093, 0xE200000000000000) & 1) != 0)
    {
      specialized Parser.lexUntil(_:)(v1, 125, 0xE100000000000000, v22);
      Parser.validateUnicodeScalar(_:_:)(v22, 2u, (uint64_t)&v20);
      swift_bridgeObjectRelease();
      *(_DWORD *)v6 = v20;
      *(_OWORD *)(v6 + 8) = v21;
    }
    else
    {
      specialized Parser.lexUntil(_:)(v1, 125, 0xE100000000000000, v22);
      v13 = v22[1];
      *(_QWORD *)v6 = v22[0];
      *((_QWORD *)v6 + 1) = v13;
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
  }
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of _ASTParent?((uint64_t)v6, &demangling cache variable for type metadata for AST.Atom.Kind?);
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a1, 1, 1, v14);
  }
  else
  {
    outlined init with take of AST.Atom.Kind((uint64_t)v6, (uint64_t)v11, type metadata accessor for AST.Atom.Kind);
    result = outlined init with take of AST.Atom.Kind((uint64_t)v11, a1, type metadata accessor for AST.Atom.Kind);
    v16 = v1[2];
    if (v16 >> 14 < v12 >> 14)
    {
      __break(1u);
    }
    else
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>);
      v18 = (unint64_t *)(a1 + *(int *)(v17 + 28));
      *v18 = v12;
      v18[1] = v16;
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(a1, 0, 1, v17);
    }
  }
  return result;
}

uint64_t atPossibleEnding #1 (_:) in Parser.lexCharacterPropertyKeyValue()()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v6;

  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v0 = String.subscript.getter();
  if (!((v0 ^ v1) >> 14))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
LABEL_7:
    swift_bridgeObjectRelease();
    return 1;
  }
  v2 = Substring.subscript.getter();
  v4 = v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  if (v2 == 61 && v4 == 0xE100000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v2 == 58 && v4 == 0xE100000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v2 == 91 && v4 == 0xE100000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v2 == 93 && v4 == 0xE100000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v2 == 125 && v4 == 0xE100000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v2 == 92 && v4 == 0xE100000000000000)
  {
    goto LABEL_7;
  }
  v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  return v6 & 1;
}

uint64_t Parser.lexCharacterProperty()@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Atom.CharacterProperty?);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AST.Atom.CharacterProperty(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = v1[2];
  closure #1 in Parser.lexCharacterProperty()(v1, (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of _ASTParent?((uint64_t)v6, &demangling cache variable for type metadata for AST.Atom.CharacterProperty?);
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.CharacterProperty>);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a1, 1, 1, v13);
  }
  else
  {
    outlined init with take of AST.Atom.Kind((uint64_t)v6, (uint64_t)v11, type metadata accessor for AST.Atom.CharacterProperty);
    result = outlined init with take of AST.Atom.Kind((uint64_t)v11, a1, type metadata accessor for AST.Atom.CharacterProperty);
    v15 = v1[2];
    if (v15 >> 14 < v12 >> 14)
    {
      __break(1u);
    }
    else
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.CharacterProperty>);
      v17 = (unint64_t *)(a1 + *(int *)(v16 + 28));
      *v17 = v12;
      v17[1] = v15;
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a1, 0, 1, v16);
    }
  }
  return result;
}

uint64_t closure #1 in Parser.lexCharacterProperty()@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _BYTE *v19;
  uint64_t v20;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;
  unsigned __int128 v27;
  uint64_t v28;
  uint64_t v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unsigned __int128 v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char v40;

  v4 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v33 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  v7 = String.subscript.getter();
  v9 = v8;
  swift_bridgeObjectRelease();
  LOBYTE(v7) = specialized Sequence<>.starts<A>(with:)(31600, 0xE200000000000000, v7, v9);
  swift_bridgeObjectRelease();
  if ((v7 & 1) == 0)
  {
    swift_bridgeObjectRetain();
    v10 = String.subscript.getter();
    v12 = v11;
    swift_bridgeObjectRelease();
    LOBYTE(v10) = specialized Sequence<>.starts<A>(with:)(31568, 0xE200000000000000, v10, v12);
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0)
    {
      v20 = type metadata accessor for AST.Atom.CharacterProperty(0);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a2, 1, 1, v20);
    }
  }
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13 = String.subscript.getter();
  if ((v13 ^ v14) >> 14)
  {
    v15 = Substring.subscript.getter();
    v16 = v17;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v15 = 0;
    v16 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v16)
  {
    if (v15 == 80 && v16 == 0xE100000000000000)
      v18 = 1;
    else
      v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v19 = v33;
    swift_bridgeObjectRelease();
  }
  else
  {
    v18 = 0;
    v19 = v33;
  }
  Parser.advance(_:)(2);
  specialized Parser.lexUntil(_:)(a1, atPossibleEnding #1 (_:) in Parser.lexCharacterPropertyKeyValue(), &v37);
  v22 = *((_QWORD *)&v37 + 1);
  v23 = v37;
  v25 = v38;
  v24 = v39;
  v26._countAndFlagsBits = 61;
  v26._object = (void *)0xE100000000000000;
  if (!Parser.tryEat(_:)(v26))
    goto LABEL_18;
  specialized Parser.lexUntil(_:)(a1, atPossibleEnding #1 (_:) in Parser.lexCharacterPropertyKeyValue(), &v37);
  v27 = v37;
  v28 = v38;
  v29 = v39;
  if (!v22)
  {
    v24 = v39;
    v25 = v38;
    v22 = *((_QWORD *)&v37 + 1);
    v23 = v37;
LABEL_18:
    *(_QWORD *)&v37 = v23;
    *((_QWORD *)&v37 + 1) = v22;
    v38 = v25;
    v39 = v24;
    Parser.classifyCharacterPropertyValueOnly(_:)((uint64_t *)&v37, v19);
    goto LABEL_19;
  }
  v37 = __PAIR128__(v22, v23);
  v38 = v25;
  v39 = v24;
  v34 = v27;
  v35 = v28;
  v36 = v29;
  Parser.classifyCharacterProperty(key:value:)((uint64_t *)&v37, (uint64_t *)&v34, v19);
  swift_bridgeObjectRelease();
LABEL_19:
  swift_bridgeObjectRelease();
  v30._countAndFlagsBits = 125;
  v30._object = (void *)0xE100000000000000;
  if (!Parser.tryEat(_:)(v30))
  {
    v37 = xmmword_1DF003F60;
    v38 = 0;
    v39 = 0;
    v40 = 3;
    Parser.errorAtCurrentPosition(_:)((__int128 *)&v37);
  }
  outlined init with take of AST.Atom.Kind((uint64_t)v19, a2, type metadata accessor for AST.Atom.CharacterProperty.Kind);
  v31 = type metadata accessor for AST.Atom.CharacterProperty(0);
  *(_BYTE *)(a2 + *(int *)(v31 + 20)) = v18 & 1;
  *(_BYTE *)(a2 + *(int *)(v31 + 24)) = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(a2, 0, 1, v31);
}

uint64_t Parser.lexRecursionLevel()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unint64_t v3;
  Swift::String v4;
  uint64_t result;
  uint64_t v6;
  Swift::String v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  char v12;

  v3 = *(_QWORD *)(v1 + 16);
  v4._countAndFlagsBits = 43;
  v4._object = (void *)0xE100000000000000;
  if (Parser.tryEat(_:)(v4))
  {
    result = (uint64_t)Parser.lexNumber(_:)(1, (uint64_t)&v9);
    if ((v12 & 1) == 0)
    {
      if ((v10 & 1) == 0)
      {
        v6 = v9;
        goto LABEL_12;
      }
      goto LABEL_8;
    }
LABEL_7:
    v9 = 0;
    v10 = xmmword_1DF003FA0;
    v11 = 0;
    v12 = 2;
    result = Parser.errorAtCurrentPosition(_:)((__int128 *)&v9);
    goto LABEL_8;
  }
  v7._countAndFlagsBits = 45;
  v7._object = (void *)0xE100000000000000;
  result = Parser.tryEat(_:)(v7);
  if ((result & 1) == 0)
    goto LABEL_8;
  result = (uint64_t)Parser.lexNumber(_:)(1, (uint64_t)&v9);
  if ((v12 & 1) != 0)
    goto LABEL_7;
  if ((v10 & 1) == 0)
  {
    v6 = -v9;
    if (__OFSUB__(0, v9))
    {
LABEL_15:
      __break(1u);
      return result;
    }
LABEL_12:
    v8 = *(_QWORD *)(v1 + 16);
    if (v8 >> 14 >= v3 >> 14)
    {
      *(_QWORD *)a1 = v6;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = v3;
      *(_QWORD *)(a1 + 24) = v8;
      *(_BYTE *)(a1 + 32) = 0;
      return result;
    }
    __break(1u);
    goto LABEL_15;
  }
LABEL_8:
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = 1;
  return result;
}

uint64_t Parser.lexEscapedReference()@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v19;
  unint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  Swift::String v29;
  Swift::Bool v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  Swift::String v43;
  Swift::Bool v44;
  uint64_t inited;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  Swift::String v80;
  Swift::Bool v81;
  char v82;
  char v83;
  __int128 v84;
  char v85;
  uint64_t v86;
  char v87;
  char v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(char *, uint64_t, uint64_t, uint64_t);
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  int64_t v104;
  uint64_t result;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  unsigned __int8 v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  void (*v141)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t *v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  char v155;
  __int128 v156;
  __int128 v157;
  unsigned __int8 v158;
  __int128 v159;
  __int128 v160;
  uint64_t v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  __int128 v167;
  uint64_t v168;
  uint64_t v169;
  char v170;

  v153 = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Atom.Kind?);
  v4 = MEMORY[0x1E0C80A78](v2, v3);
  v6 = (char *)&v132 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4, v7);
  v152 = (uint64_t)&v132 - v8;
  v9 = type metadata accessor for AST.Atom.Kind(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v148 = (uint64_t)&v132 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *v1;
  v13 = v1[1];
  v16 = v1[2];
  v15 = v1[3];
  LOBYTE(v12) = *((_BYTE *)v1 + 32);
  v17 = v1[6];
  v145 = v1[5];
  v144 = v1[7];
  v143 = *((unsigned __int8 *)v1 + 64);
  v18 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v1[9];
  v155 = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v154 = v16;
  v146 = v15;
  v147 = v14;
  v19 = String.subscript.getter();
  v150 = v13;
  v151 = v17;
  if (!((v19 ^ v20) >> 14))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v21(v6, 1, 1, v9);
    v22 = v10;
    v23 = v153;
    v24 = v154;
    goto LABEL_40;
  }
  v139 = v10;
  v140 = v6;
  v25 = Substring.subscript.getter();
  v27 = v26;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  v141 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v18;
  swift_bridgeObjectRelease();
  v28._countAndFlagsBits = 103;
  v28._object = (void *)0xE100000000000000;
  if (!Parser.tryEat(_:)(v28))
  {
    v43._countAndFlagsBits = 107;
    v43._object = (void *)0xE100000000000000;
    v44 = Parser.tryEat(_:)(v43);
    v24 = v154;
    if (!v44)
    {
      v22 = v139;
      if (v25 == 48 && v27 == 0xE100000000000000)
      {
        swift_bridgeObjectRelease();
        v18 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v141;
        v6 = v140;
        v23 = v153;
LABEL_28:
        v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
        v21(v6, 1, 1, v9);
        goto LABEL_40;
      }
      v76 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v18 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v141;
      v6 = v140;
      v23 = v153;
      if ((v76 & 1) != 0)
        goto LABEL_28;
      Parser.lexNumber(_:)(1, (uint64_t)&v156);
      if ((v158 & 1) != 0)
        goto LABEL_28;
      v77 = *((_QWORD *)&v157 + 1);
      v78 = v157;
      v79 = BYTE8(v156) & 1;
      *(_QWORD *)v6 = v156;
      *((_QWORD *)v6 + 1) = v79;
      *((_QWORD *)v6 + 2) = v78;
      *((_QWORD *)v6 + 3) = v77;
      v6[32] = 0;
      *(_OWORD *)(v6 + 40) = 0u;
      *(_OWORD *)(v6 + 56) = 0u;
      v6[72] = 1;
      *((_QWORD *)v6 + 10) = v78;
      *((_QWORD *)v6 + 11) = v77;
      swift_storeEnumTagMultiPayload();
LABEL_35:
      v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
      v21(v6, 0, 1, v9);
      goto LABEL_40;
    }
    v149 = v9;
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Character>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1DF003EC0;
    *(_QWORD *)(inited + 32) = 60;
    *(_QWORD *)(inited + 40) = 0xE100000000000000;
    *(_QWORD *)(inited + 48) = 39;
    *(_QWORD *)(inited + 56) = 0xE100000000000000;
    v46 = specialized Parser.tryEat<A>(anyOf:)(inited);
    v48 = v47;
    swift_setDeallocating();
    swift_arrayDestroy();
    v23 = v153;
    if (v48)
    {
      v49 = Parser.getClosingDelimiter(for:)(v46, v48);
      v51 = v50;
      swift_bridgeObjectRelease();
      Parser.lexNumberedReference(allowWholePatternRef:allowRecursionLevel:)(0, 1, (uint64_t)&v156);
      v52 = v158;
      v6 = v140;
      if (v158 == 255)
      {
        v53 = v49;
        v54 = v1;
        Parser.expectNamedReference(endingWith:eatEnding:allowRecursionLevel:)(v53, v51, 1, 1, (uint64_t)&v156);
        swift_bridgeObjectRelease();
        v56 = *((_QWORD *)&v156 + 1);
        v55 = v156;
        v58 = *((_QWORD *)&v157 + 1);
        v57 = v157;
        v52 = v158;
        v60 = *((_QWORD *)&v159 + 1);
        v59 = v159;
        v62 = *((_QWORD *)&v160 + 1);
        v61 = v160;
        v63 = v161;
        v65 = *((_QWORD *)&v162 + 1);
        v64 = v162;
        v18 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v141;
LABEL_39:
        *(_QWORD *)v6 = v55;
        *((_QWORD *)v6 + 1) = v56;
        *((_QWORD *)v6 + 2) = v57;
        *((_QWORD *)v6 + 3) = v58;
        v6[32] = v52;
        *((_QWORD *)v6 + 5) = v59;
        *((_QWORD *)v6 + 6) = v60;
        *((_QWORD *)v6 + 7) = v61;
        *((_QWORD *)v6 + 8) = v62;
        v6[72] = v63;
        *((_QWORD *)v6 + 10) = v64;
        *((_QWORD *)v6 + 11) = v65;
        v9 = v149;
        swift_storeEnumTagMultiPayload();
        v22 = v139;
        v95 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v139 + 56);
        v95(v6, 0, 1, v9);
        v1 = v54;
        v21 = v95;
        v24 = v154;
        goto LABEL_40;
      }
      v138 = *((_QWORD *)&v156 + 1);
      v86 = v156;
      v136 = *((_QWORD *)&v157 + 1);
      v137 = v157;
      v134 = *((_QWORD *)&v159 + 1);
      v135 = v159;
      v62 = *((_QWORD *)&v160 + 1);
      v133 = v160;
      v87 = v161;
      v64 = v162;
      LODWORD(v132) = v161 & 1;
      v65 = *((_QWORD *)&v162 + 1);
      if ((specialized Parser.tryEat<A>(sequence:)(v49, v51) & 1) != 0)
      {
        v54 = v1;
      }
      else
      {
        *(_QWORD *)&v156 = v49;
        *((_QWORD *)&v156 + 1) = v51;
        *(_QWORD *)&v167 = String.init<A>(_:)();
        *((_QWORD *)&v167 + 1) = v93;
        v168 = 0;
        v169 = 0;
        v170 = 3;
        v54 = v1;
        Parser.errorAtCurrentPosition(_:)(&v167);
      }
LABEL_38:
      swift_bridgeObjectRelease();
      v55 = v86;
      *(_QWORD *)&v156 = v86;
      v56 = v138;
      *((_QWORD *)&v156 + 1) = v138;
      v57 = v137;
      *(_QWORD *)&v157 = v137;
      v58 = v136;
      *((_QWORD *)&v157 + 1) = v136;
      v158 = v52;
      v59 = v135;
      v60 = v134;
      *(_QWORD *)&v159 = v135;
      *((_QWORD *)&v159 + 1) = v134;
      v61 = v133;
      *(_QWORD *)&v160 = v133;
      *((_QWORD *)&v160 + 1) = v62;
      LOBYTE(v161) = v87 & 1;
      *(_QWORD *)&v162 = v64;
      *((_QWORD *)&v162 + 1) = v65;
      v23 = v153;
      v18 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v141;
      v63 = v132;
      goto LABEL_39;
    }
    v80._countAndFlagsBits = 123;
    v80._object = (void *)0xE100000000000000;
    v81 = Parser.tryEat(_:)(v80);
    v9 = v149;
    v18 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v141;
    v6 = v140;
    if (!v81)
      goto LABEL_27;
    Parser.expectNamedReference(endingWith:eatEnding:allowRecursionLevel:)(125, 0xE100000000000000, 1, 0, (uint64_t)&v156);
    v82 = v158;
    v83 = v161;
    v84 = v157;
    *(_OWORD *)v6 = v156;
    *((_OWORD *)v6 + 1) = v84;
    v6[32] = v82;
    *(_OWORD *)(v6 + 40) = v159;
    *(_OWORD *)(v6 + 56) = v160;
    v6[72] = v83;
    *((_OWORD *)v6 + 5) = v162;
LABEL_34:
    swift_storeEnumTagMultiPayload();
    v22 = v139;
    goto LABEL_35;
  }
  swift_bridgeObjectRelease();
  v29._countAndFlagsBits = 123;
  v29._object = (void *)0xE100000000000000;
  v30 = Parser.tryEat(_:)(v29);
  v24 = v154;
  v149 = v9;
  if (!v30)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Character>);
    v66 = swift_allocObject();
    *(_OWORD *)(v66 + 16) = xmmword_1DF003EC0;
    *(_QWORD *)(v66 + 32) = 60;
    *(_QWORD *)(v66 + 40) = 0xE100000000000000;
    *(_QWORD *)(v66 + 48) = 39;
    *(_QWORD *)(v66 + 56) = 0xE100000000000000;
    v67 = specialized Parser.tryEat<A>(anyOf:)(v66);
    v69 = v68;
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    v18 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v141;
    v6 = v140;
    v23 = v153;
    if (v69)
    {
      v70 = Parser.getClosingDelimiter(for:)(v67, v69);
      v72 = v71;
      swift_bridgeObjectRelease();
      Parser.lexNumberedReference(allowWholePatternRef:allowRecursionLevel:)(1, 0, (uint64_t)&v156);
      v52 = v158;
      if (v158 == 255)
      {
        v73 = v70;
        v54 = v1;
        Parser.expectNamedReference(endingWith:eatEnding:allowRecursionLevel:)(v73, v72, 1, 0, (uint64_t)&v156);
        swift_bridgeObjectRelease();
        v56 = *((_QWORD *)&v156 + 1);
        v55 = v156;
        v58 = *((_QWORD *)&v157 + 1);
        v57 = v157;
        v52 = v158;
        v60 = *((_QWORD *)&v159 + 1);
        v59 = v159;
        v62 = *((_QWORD *)&v160 + 1);
        v61 = v160;
        v63 = v161;
        v65 = *((_QWORD *)&v162 + 1);
        v64 = v162;
        goto LABEL_39;
      }
      v138 = *((_QWORD *)&v156 + 1);
      v86 = v156;
      v136 = *((_QWORD *)&v157 + 1);
      v137 = v157;
      v134 = *((_QWORD *)&v159 + 1);
      v135 = v159;
      v62 = *((_QWORD *)&v160 + 1);
      v133 = v160;
      v87 = v161;
      v64 = v162;
      LODWORD(v132) = v161 & 1;
      v65 = *((_QWORD *)&v162 + 1);
      if ((specialized Parser.tryEat<A>(sequence:)(v70, v72) & 1) != 0)
      {
        v54 = v1;
      }
      else
      {
        *(_QWORD *)&v156 = v70;
        *((_QWORD *)&v156 + 1) = v72;
        *(_QWORD *)&v163 = String.init<A>(_:)();
        *((_QWORD *)&v163 + 1) = v94;
        v164 = 0;
        v165 = 0;
        v166 = 3;
        v54 = v1;
        Parser.errorAtCurrentPosition(_:)(&v163);
      }
      goto LABEL_38;
    }
    Parser.lexNumberedReference(allowWholePatternRef:allowRecursionLevel:)(0, 0, (uint64_t)&v156);
    v85 = v158;
    v9 = v149;
    if (v158 == 255)
    {
LABEL_27:
      v22 = v139;
      goto LABEL_28;
    }
    v88 = v161;
    v89 = v157;
    v90 = v159;
    v91 = v160;
    v92 = v162;
    *(_OWORD *)v6 = v156;
    *((_OWORD *)v6 + 1) = v89;
    v6[32] = v85;
    *(_OWORD *)(v6 + 40) = v90;
    *(_OWORD *)(v6 + 56) = v91;
    v6[72] = v88 & 1;
    *((_OWORD *)v6 + 5) = v92;
    goto LABEL_34;
  }
  Parser.lexNumberedReference(allowWholePatternRef:allowRecursionLevel:)(0, 0, (uint64_t)&v156);
  v31 = v158;
  v6 = v140;
  v142 = v1;
  if (v158 == 255)
  {
    Parser.expectNamedReference(endingWith:eatEnding:allowRecursionLevel:)(125, 0xE100000000000000, 1, 0, (uint64_t)&v156);
    v32 = *((_QWORD *)&v156 + 1);
    v33 = v156;
    v35 = *((_QWORD *)&v157 + 1);
    v34 = v157;
    v31 = v158;
    v37 = *((_QWORD *)&v159 + 1);
    v36 = v159;
    v39 = *((_QWORD *)&v160 + 1);
    v38 = v160;
    v40 = v161;
    v42 = *((_QWORD *)&v162 + 1);
    v41 = v162;
    v22 = v139;
  }
  else
  {
    v138 = *((_QWORD *)&v156 + 1);
    v33 = v156;
    v136 = *((_QWORD *)&v157 + 1);
    v137 = v157;
    v135 = v159;
    v38 = v160;
    v134 = *((_QWORD *)&v159 + 1);
    v39 = *((_QWORD *)&v160 + 1);
    v74 = v161;
    v42 = *((_QWORD *)&v162 + 1);
    v41 = v162;
    LODWORD(v133) = v161 & 1;
    if ((specialized Parser.tryEat<A>(sequence:)(125, 0xE100000000000000) & 1) == 0)
    {
      *(_QWORD *)&v156 = 125;
      *((_QWORD *)&v156 + 1) = 0xE100000000000000;
      *(_QWORD *)&v163 = String.init<A>(_:)();
      *((_QWORD *)&v163 + 1) = v75;
      v164 = 0;
      v165 = 0;
      v166 = 3;
      Parser.errorAtCurrentPosition(_:)(&v163);
      swift_bridgeObjectRelease();
    }
    *(_QWORD *)&v156 = v33;
    v32 = v138;
    *((_QWORD *)&v156 + 1) = v138;
    v34 = v137;
    *(_QWORD *)&v157 = v137;
    v35 = v136;
    *((_QWORD *)&v157 + 1) = v136;
    v158 = v31;
    v36 = v135;
    v37 = v134;
    *(_QWORD *)&v159 = v135;
    *((_QWORD *)&v159 + 1) = v134;
    *(_QWORD *)&v160 = v38;
    *((_QWORD *)&v160 + 1) = v39;
    LOBYTE(v161) = v74 & 1;
    *(_QWORD *)&v162 = v41;
    *((_QWORD *)&v162 + 1) = v42;
    v22 = v139;
    v40 = v133;
  }
  *(_QWORD *)v6 = v33;
  *((_QWORD *)v6 + 1) = v32;
  *((_QWORD *)v6 + 2) = v34;
  *((_QWORD *)v6 + 3) = v35;
  v6[32] = v31;
  *((_QWORD *)v6 + 5) = v36;
  *((_QWORD *)v6 + 6) = v37;
  *((_QWORD *)v6 + 7) = v38;
  *((_QWORD *)v6 + 8) = v39;
  v6[72] = v40;
  *((_QWORD *)v6 + 10) = v41;
  *((_QWORD *)v6 + 11) = v42;
  v9 = v149;
  swift_storeEnumTagMultiPayload();
  v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
  v21(v6, 0, 1, v9);
  v23 = v153;
  v1 = v142;
  v24 = v154;
  v18 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v141;
LABEL_40:
  v96 = *(char **)(v22 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v96)(v6, 1, v9) == 1)
  {
    v140 = v96;
    v141 = v21;
    v149 = v9;
    outlined destroy of _ASTParent?((uint64_t)v6, &demangling cache variable for type metadata for AST.Atom.Kind?);
    v97 = v1[9];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v98 = specialized Collection.dropFirst(_:)(*((_QWORD *)v18 + 2), v97);
    v100 = v99;
    v102 = v101;
    v104 = v103 >> 1;
    swift_bridgeObjectRetain();
    result = swift_unknownObjectRetain();
    v106 = v100 - 32;
    v107 = v102;
    v108 = v102;
    v109 = v151;
    v110 = v152;
LABEL_42:
    v111 = v106 + 80 * v107;
    while (1)
    {
      if (v104 == v108)
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease_n();
        v124 = v155;
        v125 = v150;
        *v1 = v147;
        v1[1] = v125;
        v24 = v154;
        v126 = v146;
        v1[2] = v154;
        v1[3] = v126;
        *((_BYTE *)v1 + 32) = v124;
        v1[5] = v145;
        v1[6] = v109;
        v1[7] = v144;
        *((_BYTE *)v1 + 64) = v143;
        v1[9] = (uint64_t)v18;
        v9 = v149;
        v141((char *)v110, 1, 1, v149);
        v96 = v140;
        goto LABEL_54;
      }
      if (v107 < v102 || v108 >= v104)
        break;
      v112 = *(unsigned __int8 *)(v111 + 32);
      ++v108;
      v111 += 80;
      if (!v112)
      {
        v139 = v106;
        v137 = v98;
        v138 = v97;
        v142 = v1;
        v113 = *(_QWORD *)(v111 - 32);
        v135 = *(_QWORD *)(v111 - 40);
        v134 = *(_QWORD *)(v111 - 24);
        v114 = *(_QWORD *)(v111 - 8);
        v133 = *(_QWORD *)(v111 - 16);
        v115 = *(_QWORD *)v111;
        v116 = *(_QWORD *)(v111 + 8);
        v117 = *(_QWORD *)(v111 + 16);
        v118 = (char *)v18;
        v119 = *(_BYTE *)(v111 + 24);
        v132 = v113;
        swift_bridgeObjectRetain();
        v136 = v115;
        outlined copy of ParseError?(v114, v115, v116, v117, v119);
        v120 = (uint64_t)v118;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v118 + 2) + 1, 1, v118);
          v120 = result;
        }
        v122 = *(_QWORD *)(v120 + 16);
        v121 = *(_QWORD *)(v120 + 24);
        v106 = v139;
        if (v122 >= v121 >> 1)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v121 > 1), v122 + 1, 1, (char *)v120);
          v106 = v139;
          v120 = result;
        }
        *(_QWORD *)(v120 + 16) = v122 + 1;
        v123 = v120 + 80 * v122;
        *(_BYTE *)(v123 + 32) = 0;
        *(_QWORD *)(v123 + 40) = v135;
        *(_QWORD *)(v123 + 48) = v132;
        *(_QWORD *)(v123 + 56) = v134;
        *(_QWORD *)(v123 + 64) = v133;
        *(_QWORD *)(v123 + 72) = v114;
        *(_QWORD *)(v123 + 80) = v136;
        *(_QWORD *)(v123 + 88) = v116;
        *(_QWORD *)(v123 + 96) = v117;
        *(_BYTE *)(v123 + 104) = v119;
        v18 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v120;
        v107 = v108;
        v23 = v153;
        v1 = v142;
        v110 = v152;
        v109 = v151;
        v97 = v138;
        v98 = v137;
        goto LABEL_42;
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v110 = v152;
    outlined init with take of AST.Atom.Kind((uint64_t)v6, v152, type metadata accessor for AST.Atom.Kind);
    v21((char *)v110, 0, 1, v9);
LABEL_54:
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v96)(v110, 1, v9) == 1)
    {
      outlined destroy of _ASTParent?(v110, &demangling cache variable for type metadata for AST.Atom.Kind?);
      v127 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v127 - 8) + 56))(v23, 1, 1, v127);
    }
    v128 = v148;
    outlined init with take of AST.Atom.Kind(v110, v148, type metadata accessor for AST.Atom.Kind);
    result = outlined init with take of AST.Atom.Kind(v128, v23, type metadata accessor for AST.Atom.Kind);
    v129 = v1[2];
    if (v129 >> 14 >= v24 >> 14)
    {
      v130 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>);
      v131 = (unint64_t *)(v23 + *(int *)(v130 + 28));
      *v131 = v24;
      v131[1] = v129;
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v130 - 8) + 56))(v23, 0, 1, v130);
    }
  }
  __break(1u);
  return result;
}

uint64_t Parser.lexGroupLikeReference()@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char v20;
  unint64_t v21;
  unsigned __int8 v22;
  char v23;
  __int128 v24;
  uint64_t v25;
  Swift::String v26;
  unsigned __int8 v27;
  char v28;
  __int128 v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  Swift::String v68;
  unint64_t v69;
  Swift::String v70;
  unsigned __int8 v71;
  char v72;
  Swift::String v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  __int128 v96;
  uint64_t v97;
  char *v98;
  char v99;
  __int128 v100;
  __int128 v101;
  unsigned __int8 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  __int128 v106;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Atom.Kind?);
  v5 = MEMORY[0x1E0C80A78](v3, v4);
  v7 = (char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v75 - v9;
  v11 = type metadata accessor for AST.Atom.Kind(0);
  v12 = *(_QWORD **)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = v1[1];
  v90 = *v1;
  v17 = v1[2];
  v94 = v1[3];
  LOBYTE(v14) = *((_BYTE *)v1 + 32);
  v18 = v1[6];
  v93 = v1[5];
  v92 = v1[7];
  v91 = *((unsigned __int8 *)v1 + 64);
  v19 = (char *)v1[9];
  v99 = v14;
  v97 = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v98 = v19;
  swift_bridgeObjectRetain();
  v20 = specialized Parser.tryEat<A>(sequence:)(16168, 0xE200000000000000);
  v95 = v15;
  if ((v20 & 1) == 0)
  {
    *(_QWORD *)&v96 = v12[7];
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v96)(v7, 1, 1, v11);
    v21 = v17;
    goto LABEL_5;
  }
  v87 = v12;
  v21 = v17;
  if ((specialized Parser.tryEat<A>(sequence:)(15696, 0xE200000000000000) & 1) == 0)
  {
    v25 = a1;
    if ((specialized Parser.tryEat<A>(sequence:)(15952, 0xE200000000000000) & 1) != 0
      || (v26._countAndFlagsBits = 38, v26._object = (void *)0xE100000000000000, Parser.tryEat(_:)(v26)))
    {
      Parser.expectNamedReference(endingWith:eatEnding:allowRecursionLevel:)(41, 0xE100000000000000, 1, 0, (uint64_t)&v100);
      v27 = v102;
      v28 = v105;
      v29 = v101;
      *(_OWORD *)v7 = v100;
      *((_OWORD *)v7 + 1) = v29;
      v7[32] = v27;
      *(_OWORD *)(v7 + 40) = v103;
      *(_OWORD *)(v7 + 56) = v104;
      v7[72] = v28;
      *((_OWORD *)v7 + 5) = v106;
      swift_storeEnumTagMultiPayload();
      v12 = v87;
      *(_QWORD *)&v96 = v87[7];
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v96)(v7, 0, 1, v11);
      goto LABEL_9;
    }
    v88 = v18;
    v67 = v1[2];
    v68._countAndFlagsBits = 82;
    v68._object = (void *)0xE100000000000000;
    result = Parser.tryEat(_:)(v68);
    v12 = v87;
    if ((result & 1) != 0)
    {
      v69 = v1[2];
      if (v69 >> 14 < v67 >> 14)
        goto LABEL_41;
      v70._countAndFlagsBits = 41;
      v70._object = (void *)0xE100000000000000;
      if (!Parser.tryEat(_:)(v70))
      {
        v100 = xmmword_1DF003F70;
        v101 = 0uLL;
        v102 = 3;
        Parser.errorAtCurrentPosition(_:)(&v100);
      }
      *(_QWORD *)v7 = 0;
      *((_QWORD *)v7 + 1) = 0;
      *((_QWORD *)v7 + 2) = v67;
      *((_QWORD *)v7 + 3) = v69;
      v7[32] = 0;
      *(_OWORD *)(v7 + 40) = 0u;
      *(_OWORD *)(v7 + 56) = 0u;
      v7[72] = 1;
      *((_QWORD *)v7 + 10) = v67;
      *((_QWORD *)v7 + 11) = v69;
    }
    else
    {
      Parser.lexNumberedReference(allowWholePatternRef:allowRecursionLevel:)(1, 0, (uint64_t)&v100);
      v71 = v102;
      if (v102 == 255)
      {
        *(_QWORD *)&v96 = v12[7];
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v96)(v7, 1, 1, v11);
LABEL_38:
        v18 = v88;
        goto LABEL_9;
      }
      v84 = v100;
      v83 = v101;
      v86 = v103;
      v85 = v104;
      v96 = v106;
      v72 = v105;
      v73._countAndFlagsBits = 41;
      v73._object = (void *)0xE100000000000000;
      if (!Parser.tryEat(_:)(v73))
      {
        v100 = xmmword_1DF003F70;
        v101 = 0uLL;
        v102 = 3;
        Parser.errorAtCurrentPosition(_:)(&v100);
      }
      v74 = v83;
      *(_OWORD *)v7 = v84;
      *((_OWORD *)v7 + 1) = v74;
      v7[32] = v71;
      *(_OWORD *)(v7 + 40) = v86;
      *(_OWORD *)(v7 + 56) = v85;
      v7[72] = v72 & 1;
      *((_OWORD *)v7 + 5) = v96;
    }
    swift_storeEnumTagMultiPayload();
    *(_QWORD *)&v96 = v12[7];
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v96)(v7, 0, 1, v11);
    goto LABEL_38;
  }
  Parser.expectNamedReference(endingWith:eatEnding:allowRecursionLevel:)(41, 0xE100000000000000, 1, 0, (uint64_t)&v100);
  v22 = v102;
  v23 = v105;
  v24 = v101;
  *(_OWORD *)v7 = v100;
  *((_OWORD *)v7 + 1) = v24;
  v7[32] = v22;
  *(_OWORD *)(v7 + 40) = v103;
  *(_OWORD *)(v7 + 56) = v104;
  v7[72] = v23;
  *((_OWORD *)v7 + 5) = v106;
  swift_storeEnumTagMultiPayload();
  v12 = v87;
  *(_QWORD *)&v96 = v87[7];
  ((void (*)(char *, _QWORD, uint64_t, uint64_t))v96)(v7, 0, 1, v11);
LABEL_5:
  v25 = a1;
LABEL_9:
  v30 = (_QWORD *)v12[6];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v30)(v7, 1, v11) == 1)
  {
    v87 = v30;
    v88 = v18;
    outlined destroy of _ASTParent?((uint64_t)v7, &demangling cache variable for type metadata for AST.Atom.Kind?);
    v89 = v11;
    v31 = v21;
    v32 = v1[9];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v33 = specialized Collection.dropFirst(_:)(*((_QWORD *)v98 + 2), v32);
    v35 = v34;
    v37 = v36;
    v39 = v38 >> 1;
    *(_QWORD *)&v86 = v32;
    v21 = v31;
    v11 = v89;
    v40 = v97;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v85 = v33;
    result = swift_unknownObjectRetain();
    v42 = v35 - 32;
    v43 = v37;
    v44 = v37;
LABEL_11:
    v45 = v42 + 80 * v43;
    while (1)
    {
      if (v39 == v44)
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease_n();
        v59 = v99;
        *v1 = v90;
        v1[1] = v40;
        v60 = v94;
        v1[2] = v21;
        v1[3] = v60;
        *((_BYTE *)v1 + 32) = v59;
        v61 = v88;
        v1[5] = v93;
        v1[6] = v61;
        v1[7] = v92;
        *((_BYTE *)v1 + 64) = v91;
        v1[9] = (uint64_t)v98;
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v96)(v10, 1, 1, v11);
        v30 = v87;
        goto LABEL_23;
      }
      if (v43 < v37 || v44 >= v39)
        break;
      v46 = *(unsigned __int8 *)(v45 + 32);
      ++v44;
      v45 += 80;
      if (!v46)
      {
        v82 = v21;
        *(_QWORD *)&v83 = v10;
        *(_QWORD *)&v84 = v25;
        v47 = *(_QWORD *)(v45 - 32);
        v77 = *(_QWORD *)(v45 - 40);
        v76 = *(_QWORD *)(v45 - 24);
        v48 = *(_QWORD *)(v45 - 8);
        v75 = *(_QWORD *)(v45 - 16);
        v50 = *(_QWORD *)v45;
        v49 = *(_QWORD *)(v45 + 8);
        v51 = *(_QWORD *)(v45 + 16);
        v52 = *(_BYTE *)(v45 + 24);
        v80 = v47;
        swift_bridgeObjectRetain();
        v78 = v48;
        v79 = v49;
        outlined copy of ParseError?(v48, v50, v49, v51, v52);
        result = swift_isUniquelyReferenced_nonNull_native();
        v81 = v42;
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v98 + 2) + 1, 1, v98);
          v98 = (char *)result;
        }
        v54 = *((_QWORD *)v98 + 2);
        v53 = *((_QWORD *)v98 + 3);
        if (v54 >= v53 >> 1)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v53 > 1), v54 + 1, 1, v98);
          v98 = (char *)result;
        }
        v55 = v98;
        *((_QWORD *)v98 + 2) = v54 + 1;
        v56 = &v55[80 * v54];
        v56[32] = 0;
        v57 = v80;
        *((_QWORD *)v56 + 5) = v77;
        *((_QWORD *)v56 + 6) = v57;
        v58 = v75;
        *((_QWORD *)v56 + 7) = v76;
        *((_QWORD *)v56 + 8) = v58;
        *((_QWORD *)v56 + 9) = v78;
        *((_QWORD *)v56 + 10) = v50;
        *((_QWORD *)v56 + 11) = v79;
        *((_QWORD *)v56 + 12) = v51;
        v56[104] = v52;
        v43 = v44;
        v25 = v84;
        v10 = (char *)v83;
        v21 = v82;
        v11 = v89;
        v40 = v97;
        v42 = v81;
        goto LABEL_11;
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined init with take of AST.Atom.Kind((uint64_t)v7, (uint64_t)v10, type metadata accessor for AST.Atom.Kind);
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v96)(v10, 0, 1, v11);
LABEL_23:
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v30)(v10, 1, v11) == 1)
    {
      outlined destroy of _ASTParent?((uint64_t)v10, &demangling cache variable for type metadata for AST.Atom.Kind?);
      v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(v25, 1, 1, v62);
    }
    v63 = (uint64_t)v95;
    outlined init with take of AST.Atom.Kind((uint64_t)v10, (uint64_t)v95, type metadata accessor for AST.Atom.Kind);
    result = outlined init with take of AST.Atom.Kind(v63, v25, type metadata accessor for AST.Atom.Kind);
    v64 = v1[2];
    if (v64 >> 14 >= v21 >> 14)
    {
      v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>);
      v66 = (unint64_t *)(v25 + *(int *)(v65 + 28));
      *v66 = v21;
      v66[1] = v64;
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v25, 0, 1, v65);
    }
  }
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t closure #1 in Parser.shouldLexGroupLikeAtom()@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::String v4;
  uint64_t result;
  Swift::String v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  Swift::String v14;
  uint64_t inited;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  Swift::String v28;
  Swift::String v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;

  v4._countAndFlagsBits = 40;
  v4._object = (void *)0xE100000000000000;
  result = Parser.tryEat(_:)(v4);
  if ((result & 1) != 0)
  {
    v6._countAndFlagsBits = 63;
    v6._object = (void *)0xE100000000000000;
    if (Parser.tryEat(_:)(v6))
    {
      v7 = *(_QWORD *)(a1 + 8);
      v8 = *(_BYTE *)(a1 + 32);
      v9 = *(_QWORD *)(a1 + 40);
      v10 = *(_QWORD *)(a1 + 48);
      v11 = *(_QWORD *)(a1 + 56);
      v12 = *(_QWORD *)(a1 + 72);
      v13 = *(_BYTE *)(a1 + 64);
      v44 = *(_QWORD *)a1;
      v45 = v7;
      v46 = *(_OWORD *)(a1 + 16);
      LOBYTE(v47) = v8;
      v48 = v9;
      v49 = v10;
      v50 = v11;
      v51 = v13;
      v52 = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v14._countAndFlagsBits = 80;
      v14._object = (void *)0xE100000000000000;
      LOBYTE(v10) = Parser.tryEat(_:)(v14);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Character>);
      if ((v10 & 1) != 0)
      {
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1DF003EC0;
        *(_QWORD *)(inited + 32) = 61;
        *(_QWORD *)(inited + 40) = 0xE100000000000000;
        *(_QWORD *)(inited + 48) = 62;
        *(_QWORD *)(inited + 56) = 0xE100000000000000;
        specialized Parser.tryEat<A>(anyOf:)(inited);
        v17 = v16;
        swift_setDeallocating();
        swift_arrayDestroy();
        if (!v17)
        {
          v18 = 0;
          goto LABEL_14;
        }
      }
      else
      {
        v21 = swift_initStackObject();
        *(_OWORD *)(v21 + 16) = xmmword_1DF003EC0;
        *(_QWORD *)(v21 + 32) = 38;
        *(_QWORD *)(v21 + 40) = 0xE100000000000000;
        *(_QWORD *)(v21 + 48) = 82;
        *(_QWORD *)(v21 + 56) = 0xE100000000000000;
        specialized Parser.tryEat<A>(anyOf:)(v21);
        v23 = v22;
        swift_setDeallocating();
        swift_arrayDestroy();
        if (!v23)
        {
          v54 = v44;
          v55 = v45;
          v56 = v46;
          v57 = v47;
          v58 = v48;
          v59 = v49;
          v60 = v50;
          v61 = v51;
          v62 = v52;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Character>);
          v24 = swift_initStackObject();
          *(_QWORD *)(v24 + 32) = 43;
          *(_OWORD *)(v24 + 16) = xmmword_1DF003EC0;
          *(_QWORD *)(v24 + 40) = 0xE100000000000000;
          *(_QWORD *)(v24 + 48) = 45;
          *(_QWORD *)(v24 + 56) = 0xE100000000000000;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          specialized Parser.tryEat<A>(anyOf:)(v24);
          swift_bridgeObjectRelease();
          swift_setDeallocating();
          swift_arrayDestroy();
          v25 = v62;
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v26 = String.subscript.getter();
          if ((v26 ^ v27) >> 14)
          {
            Substring.subscript.getter();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            v18 = Character.isNumber.getter();
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            v18 = 0;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v53 = v25;
          Diagnostics.appendNewFatalErrors(from:)((_RegexParser::Diagnostics)&v53);
          swift_bridgeObjectRelease();
LABEL_14:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v54 = v52;
          Diagnostics.appendNewFatalErrors(from:)((_RegexParser::Diagnostics)&v54);
          result = swift_bridgeObjectRelease();
          if ((v18 & 1) != 0
            || (v28._countAndFlagsBits = 67,
                v28._object = (void *)0xE100000000000000,
                result = Parser.tryEat(_:)(v28),
                (result & 1) != 0)
            || (v29._countAndFlagsBits = 123,
                v29._object = (void *)0xE100000000000000,
                result = Parser.tryEat(_:)(v29),
                (result & 1) != 0))
          {
            v19 = 1;
            goto LABEL_18;
          }
          v30 = *(_QWORD *)(a1 + 8);
          v31 = *(_BYTE *)(a1 + 32);
          v32 = *(_QWORD *)(a1 + 40);
          v33 = *(_QWORD *)(a1 + 48);
          v34 = *(_QWORD *)(a1 + 56);
          v35 = *(_BYTE *)(a1 + 64);
          v36 = *(_QWORD *)(a1 + 72);
          v54 = *(_QWORD *)a1;
          v55 = v30;
          v56 = *(_OWORD *)(a1 + 16);
          v57 = v31;
          v58 = v32;
          v59 = v33;
          v60 = v34;
          v61 = v35;
          v62 = v36;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          Parser.lexMatchingOptionSequence()((unint64_t *)&v44);
          if (*((_QWORD *)&v46 + 1))
          {
            outlined consume of AST.MatchingOptionSequence?(v44, v45, v46, *((uint64_t *)&v46 + 1));
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v37 = String.subscript.getter();
            if ((v37 ^ v38) >= 0x4000)
            {
              v39 = Substring.subscript.getter();
              v41 = v40;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (v39 == 41 && v41 == 0xE100000000000000)
              {
                swift_bridgeObjectRelease();
              }
              else
              {
                v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                v19 = 0;
                if ((v42 & 1) == 0)
                  goto LABEL_28;
              }
              v19 = 1;
              Parser.advance(_:)(1);
              goto LABEL_28;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          v19 = 0;
LABEL_28:
          v43 = v62;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v44 = v43;
          Diagnostics.appendNewFatalErrors(from:)((_RegexParser::Diagnostics)&v44);
          result = swift_bridgeObjectRelease();
          goto LABEL_18;
        }
      }
      swift_bridgeObjectRelease();
      v18 = 1;
      goto LABEL_14;
    }
    v20._countAndFlagsBits = 42;
    v20._object = (void *)0xE100000000000000;
    result = Parser.tryEat(_:)(v20);
    v19 = result;
  }
  else
  {
    v19 = 0;
  }
LABEL_18:
  *a2 = v19 & 1;
  return result;
}

uint64_t closure #1 in Parser.expectEscaped()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  Swift::String v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  unsigned int (*v43)(char *, uint64_t, uint64_t);
  uint64_t v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  char v77;

  v73 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Atom.Kind?);
  MEMORY[0x1E0C80A78](v3, v4);
  v70 = (uint64_t)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = type metadata accessor for AST.Atom.Kind(0);
  v69 = *(_QWORD *)(v72 - 8);
  v7 = MEMORY[0x1E0C80A78](v72, v6);
  v68 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v7, v9);
  v67 = (uint64_t)&v65 - v11;
  MEMORY[0x1E0C80A78](v10, v12);
  v66 = (char *)&v65 - v13;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.CharacterProperty>?);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.CharacterProperty>);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v20);
  v22 = (char *)&v65 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>?);
  v25 = MEMORY[0x1E0C80A78](v23, v24);
  v27 = (char *)&v65 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v28);
  v30 = (char *)&v65 - v29;
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>);
  v32 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31, v33);
  v35 = (char *)&v65 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(v71) = *(unsigned __int8 *)(a1 + 32);
  v36._countAndFlagsBits = 99;
  v36._object = (void *)0xE100000000000000;
  if (Parser.tryEat(_:)(v36) || (specialized Parser.tryEat<A>(sequence:)(11587, 0xE200000000000000) & 1) != 0)
  {
    Parser.expectASCII()((uint64_t)&v74);
    v37 = *((_QWORD *)&v74 + 1);
    if (*((_QWORD *)&v74 + 1))
    {
      v38 = v73;
      *v73 = v74;
      v38[1] = v37;
    }
    return swift_storeEnumTagMultiPayload();
  }
  if ((specialized Parser.tryEat<A>(sequence:)(0x2D435C2D4DLL, 0xE500000000000000) & 1) != 0)
  {
    Parser.expectASCII()((uint64_t)&v74);
    v39 = *((_QWORD *)&v74 + 1);
    if (*((_QWORD *)&v74 + 1))
    {
      v40 = v73;
      *v73 = v74;
      v40[1] = v39;
    }
    return swift_storeEnumTagMultiPayload();
  }
  if ((specialized Parser.tryEat<A>(sequence:)(11597, 0xE200000000000000) & 1) != 0)
  {
    Parser.expectASCII()((uint64_t)&v74);
    v41 = *((_QWORD *)&v74 + 1);
    if (*((_QWORD *)&v74 + 1))
    {
      v42 = v73;
      *v73 = v74;
      v42[1] = v41;
    }
    return swift_storeEnumTagMultiPayload();
  }
  Parser.lexNamedCharacter()((uint64_t)v30);
  v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
  if (v43(v30, 1, v31) != 1)
  {
    outlined init with take of Source.Located<AST.Atom.Kind>?((uint64_t)v30, (uint64_t)v35, &demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>);
    return outlined init with take of AST.Atom.Kind((uint64_t)v35, (uint64_t)v73, type metadata accessor for AST.Atom.Kind);
  }
  outlined destroy of _ASTParent?((uint64_t)v30, &demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>?);
  Parser.lexCharacterProperty()((uint64_t)v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    outlined destroy of _ASTParent?((uint64_t)v17, &demangling cache variable for type metadata for Source.Located<AST.Atom.CharacterProperty>?);
    if ((v71 & 1) == 0)
    {
      Parser.lexEscapedReference()((uint64_t)v27);
      if (v43(v27, 1, v31) != 1)
      {
        v52 = v67;
        outlined init with copy of AST.Atom((uint64_t)v27, v67, type metadata accessor for AST.Atom.Kind);
        outlined destroy of _ASTParent?((uint64_t)v27, &demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>);
        v50 = v52;
        v51 = (uint64_t)v66;
        goto LABEL_24;
      }
      outlined destroy of _ASTParent?((uint64_t)v27, &demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>?);
    }
    v44 = v70;
    Parser.lexUnicodeScalar()(v70);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v69 + 48))(v44, 1, v72) == 1)
    {
      outlined destroy of _ASTParent?(v44, &demangling cache variable for type metadata for AST.Atom.Kind?);
      v45 = *(char **)(a1 + 8);
      v46 = *(_QWORD *)(a1 + 16);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v47 = String.subscript.getter();
      if (!((v47 ^ v48) >> 14))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
LABEL_34:
        v74 = 2uLL;
        v75 = 0;
        v76 = 0;
        v77 = 36;
        Parser.errorAtCurrentPosition(_:)(&v74);
        return swift_storeEnumTagMultiPayload();
      }
      v53 = Substring.subscript.getter();
      v55 = v54;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      Parser.advance(_:)(1);
      v56 = *(_QWORD *)(a1 + 16);
      if (v56 >> 14 < v46 >> 14)
      {
        __break(1u);
      }
      else
      {
        v19 = a1;
        if (!v55)
          goto LABEL_34;
        static AST.Atom.EscapedBuiltin.fromCharacter(_:inCustomCharacterClass:)(v53, v55, v71, (char *)&v74);
        v57 = v74;
        if (v74 != 31)
        {
          swift_bridgeObjectRelease();
          *(_BYTE *)v73 = v57;
          return swift_storeEnumTagMultiPayload();
        }
        swift_bridgeObjectRetain();
        if (((Character.asciiValue.getter() & 0x100) != 0
           || (Character.isLetter.getter() & 1) == 0 && (Character.isNumber.getter() & 1) == 0)
          && ((Character.asciiValue.getter() & 0x100) == 0 || (Character.isWhitespace.getter() & 1) != 0))
        {
          swift_bridgeObjectRelease();
LABEL_41:
          v64 = v73;
          *v73 = v53;
          v64[1] = v55;
          return swift_storeEnumTagMultiPayload();
        }
        *(_QWORD *)&v74 = v53;
        *((_QWORD *)&v74 + 1) = v55;
        v75 = 0;
        v76 = 0;
        v77 = 10;
        swift_bridgeObjectRetain();
        ParseError.description.getter();
        a1 = v58;
        v71 = v59;
        v45 = *(char **)(v19 + 72);
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
LABEL_38:
          v61 = *((_QWORD *)v45 + 2);
          v60 = *((_QWORD *)v45 + 3);
          if (v61 >= v60 >> 1)
            v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v60 > 1), v61 + 1, 1, v45);
          *((_QWORD *)v45 + 2) = v61 + 1;
          v62 = &v45[80 * v61];
          v62[32] = 1;
          v63 = v71;
          *((_QWORD *)v62 + 5) = a1;
          *((_QWORD *)v62 + 6) = v63;
          *((_QWORD *)v62 + 7) = v46;
          *((_QWORD *)v62 + 8) = v56;
          *((_QWORD *)v62 + 9) = v53;
          *((_QWORD *)v62 + 10) = v55;
          *((_QWORD *)v62 + 11) = 0;
          *((_QWORD *)v62 + 12) = 0;
          v62[104] = 10;
          swift_bridgeObjectRelease_n();
          *(_QWORD *)(v19 + 72) = v45;
          goto LABEL_41;
        }
      }
      v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v45 + 2) + 1, 1, v45);
      goto LABEL_38;
    }
    v50 = v44;
    v51 = (uint64_t)v68;
LABEL_24:
    outlined init with take of AST.Atom.Kind(v50, v51, type metadata accessor for AST.Atom.Kind);
    return outlined init with take of AST.Atom.Kind(v51, (uint64_t)v73, type metadata accessor for AST.Atom.Kind);
  }
  outlined init with take of Source.Located<AST.Atom.Kind>?((uint64_t)v17, (uint64_t)v22, &demangling cache variable for type metadata for Source.Located<AST.Atom.CharacterProperty>);
  outlined init with take of AST.Atom.Kind((uint64_t)v22, (uint64_t)v73, type metadata accessor for AST.Atom.CharacterProperty);
  return swift_storeEnumTagMultiPayload();
}

uint64_t Parser.lexPCRECallout()@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  __int128 *v2;
  char *v4;
  uint64_t inited;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  Swift::String v46;
  Swift::String v47;
  unint64_t v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  __int128 *v52;
  Swift::String v53;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  __int128 *v58;
  uint64_t v59;
  unint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  char *v65;
  unint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  char v74;

  v2 = v1;
  if ((specialized Parser.tryEat<A>(sequence:)(4407080, 0xE300000000000000) & 1) == 0)
  {
    _s12_RegexParser3ASTV4AtomV7CalloutOSgWOi0_((uint64_t)&v71);
    return outlined init with take of AST.Conditional.Condition?((uint64_t)&v71, a1);
  }
  v4 = (char *)*((_QWORD *)v1 + 2);
  Parser.lexNumber(_:)(1, (uint64_t)&v71);
  if ((v74 & 1) == 0)
  {
    v11 = 0;
    inited = v72;
    v10 = v73;
    v12 = v71;
    v6 = BYTE8(v71) & 1;
    goto LABEL_41;
  }
  inited = *((_QWORD *)v1 + 2);
  v6 = *((_QWORD *)v1 + 6);
  v1 = (__int128 *)*((_QWORD *)v1 + 9);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7 = String.subscript.getter();
  if ((v7 ^ v8) >> 14)
  {
    v9 = Substring.subscript.getter();
    v10 = v13;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v9 = 0;
    v10 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v10)
  {
    if (v9 == 41 && v10 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_13:
      v11 = 0;
      v12 = 0;
      v6 = 0;
      v10 = inited;
      goto LABEL_41;
    }
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v14 & 1) != 0)
      goto LABEL_13;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Character>);
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 32) = 96;
  *(_OWORD *)(inited + 16) = xmmword_1DF003FB0;
  *(_QWORD *)(inited + 40) = 0xE100000000000000;
  *(_QWORD *)(inited + 48) = 39;
  *(_QWORD *)(inited + 56) = 0xE100000000000000;
  *(_QWORD *)(inited + 64) = 34;
  *(_QWORD *)(inited + 72) = 0xE100000000000000;
  *(_QWORD *)(inited + 80) = 94;
  *(_QWORD *)(inited + 88) = 0xE100000000000000;
  *(_QWORD *)(inited + 96) = 37;
  *(_QWORD *)(inited + 104) = 0xE100000000000000;
  *(_QWORD *)(inited + 112) = 35;
  *(_QWORD *)(inited + 120) = 0xE100000000000000;
  *(_QWORD *)(inited + 128) = 36;
  *(_QWORD *)(inited + 136) = 0xE100000000000000;
  *(_QWORD *)(inited + 144) = 123;
  *(_QWORD *)(inited + 152) = 0xE100000000000000;
  v1 = (__int128 *)specialized Parser.tryEat<A>(anyOf:)(inited);
  v16 = v15;
  swift_setDeallocating();
  swift_arrayDestroy();
  if (v16)
  {
    v17 = Parser.getClosingDelimiter(for:)((uint64_t)v1, v16);
    v19 = v18;
    swift_bridgeObjectRelease();
    v11 = 1;
    v20 = v17;
    v1 = v2;
    Parser.expectQuoted(endingWith:count:ignoreEscaped:eatEnding:)(v20, v19, 1, 0, 1, (uint64_t *)&v61);
    swift_bridgeObjectRelease();
    inited = 0;
    v10 = 0;
    v6 = *((_QWORD *)&v61 + 1);
    v12 = v61;
    goto LABEL_41;
  }
  v21 = a1;
  v22 = *((_QWORD *)v2 + 2);
  *(_QWORD *)&v61 = 0;
  *((_QWORD *)&v61 + 1) = 0xE000000000000000;
  v55 = v4;
  v56 = v22;
  v57 = a1;
  v58 = v2;
  if ((closure #1 in closure #1 in Parser.lexPCRECallout()() & 1) != 0)
    goto LABEL_32;
  a1 = v22;
  while (1)
  {
    v1 = *(__int128 **)v2;
    v22 = *((_QWORD *)v2 + 2);
    v23 = *((_QWORD *)v2 + 3);
    v4 = (char *)*((_QWORD *)v2 + 9);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v60 = v23;
    v6 = String.subscript.getter();
    v10 = v24;
    inited = v25;
    swift_bridgeObjectRelease();
    if (!((v6 ^ v10) >> 14))
      break;
    v59 = Substring.subscript.getter();
    v6 = v26;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    String.subscript.getter();
    v10 = v27;
    swift_bridgeObjectRelease();
    v28 = Substring.index(_:offsetBy:limitedBy:)();
    inited = v29;
    swift_bridgeObjectRelease();
    if ((inited & 1) != 0)
    {
      a1 = v57;
      v2 = v58;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v4 + 2) + 1, 1, v4);
      v31 = *((_QWORD *)v4 + 2);
      v30 = *((_QWORD *)v4 + 3);
      if (v31 >= v30 >> 1)
        v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v30 > 1), v31 + 1, 1, v4);
      *((_QWORD *)v4 + 2) = v31 + 1;
      v32 = &v4[80 * v31];
      v32[32] = 0;
      *((_QWORD *)v32 + 5) = 0xD000000000000022;
      *((_QWORD *)v32 + 6) = 0x80000001DF007440;
      *((_QWORD *)v32 + 7) = v22;
      *((_QWORD *)v32 + 8) = v22;
      *(_OWORD *)(v32 + 72) = 0u;
      *(_OWORD *)(v32 + 88) = 0u;
      v32[104] = -1;
      *((_QWORD *)v58 + 9) = v4;
      swift_bridgeObjectRetain();
      String.subscript.getter();
      inited = v33;
      v10 = v34;
      v4 = v35;
      swift_bridgeObjectRelease();
      v36 = Substring.distance(from:to:)();
      swift_bridgeObjectRelease();
      if (v36 < 1)
        goto LABEL_20;
      swift_bridgeObjectRetain();
      String.subscript.getter();
      v10 = v37;
      v4 = v38;
      swift_bridgeObjectRelease();
      v2 = v58;
      v28 = Substring.index(_:offsetBy:limitedBy:)();
      inited = v39;
      swift_bridgeObjectRelease();
      if ((inited & 1) != 0)
        goto LABEL_20;
      if (v60 >> 14 < v28 >> 14)
        goto LABEL_49;
    }
    else
    {
      a1 = v57;
      v2 = v58;
      if (v60 >> 14 < v28 >> 14)
        goto LABEL_48;
    }
    v22 = v28;
    *((_QWORD *)v2 + 2) = v28;
    *((_QWORD *)v2 + 3) = v60;
LABEL_20:
    v21 = a1;
    v1 = &v61;
    MEMORY[0x1DF0F36FC](v59, v6);
    swift_bridgeObjectRelease();
    a1 = v22;
    if ((closure #1 in closure #1 in Parser.lexPCRECallout()() & 1) != 0)
      goto LABEL_32;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v22 = a1;
  v21 = v57;
  v2 = v58;
LABEL_32:
  if (v22 >> 14 < v56 >> 14)
    goto LABEL_50;
  v40 = v22;
  v6 = *((_QWORD *)&v61 + 1);
  v41 = v61;
  swift_bridgeObjectRetain();
  v42 = String.subscript.getter();
  v44 = v43;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v42 ^ v44) >> 14)
    goto LABEL_37;
  v45 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000) == 0)
    v45 = v41 & 0xFFFFFFFFFFFFLL;
  if (v45)
  {
LABEL_37:
    v60 = v40;
    *(_QWORD *)&v61 = 4407080;
    *((_QWORD *)&v61 + 1) = 0xE300000000000000;
    swift_bridgeObjectRetain();
    a1 = v41;
    v46._countAndFlagsBits = v41;
    v46._object = (void *)v6;
    String.append(_:)(v46);
    swift_bridgeObjectRelease();
    v47._countAndFlagsBits = 41;
    v47._object = (void *)0xE100000000000000;
    String.append(_:)(v47);
    v10 = *((_QWORD *)&v61 + 1);
    inited = v61;
    v62 = 0;
    v63 = 0;
    v64 = 15;
    ParseError.description.getter();
    v22 = v48;
    v4 = v49;
    v1 = (__int128 *)*((_QWORD *)v2 + 9);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_38;
    goto LABEL_51;
  }
  v61 = xmmword_1DF003F70;
  v62 = 0;
  v63 = 0;
  v64 = 3;
  v1 = v2;
  Parser.errorAtCurrentPosition(_:)(&v61);
  inited = 0;
  v10 = 0;
  v11 = 1;
  v4 = v55;
  a1 = v21;
  v12 = v41;
LABEL_41:
  while (1)
  {
    v22 = *((_QWORD *)v2 + 2);
    if (v22 >> 14 >= (unint64_t)v4 >> 14)
      break;
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    v1 = (__int128 *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v1 + 2) + 1, 1, (char *)v1);
LABEL_38:
    v51 = *((_QWORD *)v1 + 2);
    v50 = *((_QWORD *)v1 + 3);
    v12 = a1;
    if (v51 >= v50 >> 1)
      v1 = (__int128 *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v50 > 1), v51 + 1, 1, (char *)v1);
    *((_QWORD *)v1 + 2) = v51 + 1;
    v52 = &v1[5 * v51];
    v11 = 1;
    *((_BYTE *)v52 + 32) = 1;
    *((_QWORD *)v52 + 5) = v22;
    *((_QWORD *)v52 + 6) = v4;
    *((_QWORD *)v52 + 7) = v56;
    *((_QWORD *)v52 + 8) = v60;
    *((_QWORD *)v52 + 9) = inited;
    *((_QWORD *)v52 + 10) = v10;
    *((_QWORD *)v52 + 11) = 0;
    *((_QWORD *)v52 + 12) = 0;
    *((_BYTE *)v52 + 104) = 15;
    swift_bridgeObjectRelease();
    inited = 0;
    v10 = 0;
    a1 = v57;
    v2 = v58;
    *((_QWORD *)v58 + 9) = v1;
    v4 = v55;
  }
  v53._countAndFlagsBits = 41;
  v53._object = (void *)0xE100000000000000;
  if (!Parser.tryEat(_:)(v53))
  {
    v67 = xmmword_1DF003F70;
    v68 = 0;
    v69 = 0;
    v70 = 3;
    Parser.errorAtCurrentPosition(_:)(&v67);
  }
  *(_QWORD *)&v61 = v12;
  *((_QWORD *)&v61 + 1) = v6;
  v62 = inited;
  v63 = v10;
  v64 = v11;
  v65 = v4;
  v66 = v22;
  _s12_RegexParser3ASTV4AtomV7CalloutOWOi_((uint64_t)&v61);
  outlined init with take of AST.Atom.Callout(&v61, &v71);
  AST.root.modify(&v71);
  return outlined init with take of AST.Conditional.Condition?((uint64_t)&v71, a1);
}

uint64_t closure #1 in closure #1 in Parser.lexPCRECallout()()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_bridgeObjectRetain();
  v0 = String.subscript.getter();
  v2 = v1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v0 ^ v2) >= 0x4000)
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v4 = String.subscript.getter();
    if ((v4 ^ v5) >> 14)
    {
      v6 = Substring.subscript.getter();
      v7 = v8;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v6 = 0;
      v7 = 0;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v7)
    {
      if (v6 == 41 && v7 == 0xE100000000000000)
        v3 = 1;
      else
        v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      v3 = 0;
    }
  }
  else
  {
    v3 = 1;
  }
  return v3 & 1;
}

unint64_t Parser.expectOnigurumaCalloutArgList(leftBrace:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t result;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  _QWORD *v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  unint64_t v59;
  char v60;
  char v61;
  Swift::String v62;
  Swift::String v63;
  __int128 v64;
  unint64_t v65;
  unint64_t v66;
  Swift::String v67;
  __int128 v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  char v75;
  char v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  Swift::String v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v87;
  char *v88;
  _QWORD *v89;
  unint64_t v90;
  unint64_t v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  char v95;

  v84 = a1[1];
  v85 = *a1;
  v3 = v2[2];
  v4 = v2[3];
  swift_bridgeObjectRetain();
  result = String.subscript.getter();
  if (v6 >> 14 < result >> 14)
  {
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }
  v88 = (char *)MEMORY[0x1E0DEE9D8];
  v89 = v2;
  while (1)
  {
    v90 = v3;
    v9 = Substring.subscript.getter();
    v11 = v10;
    swift_bridgeObjectRelease();
    v12 = v9 >> 14;
    v13 = v11 >> 14;
    v91 = v4;
    if (v9 >> 14 != v11 >> 14)
    {
      v15 = Substring.subscript.getter();
      v16 = v14;
      if (v15 == 44 && v14 == 0xE100000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v15 == 125 && v16 == 0xE100000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v76 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v76 & 1) == 0)
        {
          result = Substring.index(after:)();
          v77 = result >> 14;
          if (result >> 14 != v13)
          {
            while (1)
            {
              v87 = v77;
              v79 = Substring.subscript.getter();
              v80 = v78;
              if (v79 == 44 && v78 == 0xE100000000000000)
                break;
              if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0 || v79 == 125 && v80 == 0xE100000000000000)
                break;
              v81 = _stringCompareWithSmolCheck(_:_:expecting:)();
              result = swift_bridgeObjectRelease();
              if ((v81 & 1) != 0)
                goto LABEL_73;
              result = Substring.index(after:)();
              v77 = result >> 14;
              if (result >> 14 == v13)
              {
                if (v13 >= v12)
                  goto LABEL_11;
                goto LABEL_81;
              }
            }
            result = swift_bridgeObjectRelease();
LABEL_73:
            if (v87 >= v12)
              goto LABEL_11;
            goto LABEL_81;
          }
          if (v13 < v12)
            goto LABEL_81;
        }
      }
    }
LABEL_11:
    v17 = Substring.subscript.getter();
    v19 = v18;
    v21 = v20;
    v23 = v22;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!((v17 ^ v19) >> 14))
    {
      swift_bridgeObjectRelease();
      v24 = v90;
LABEL_24:
      v35 = v89;
      v36 = (char *)v89[9];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v36 + 2) + 1, 1, v36);
      v38 = *((_QWORD *)v36 + 2);
      v37 = *((_QWORD *)v36 + 3);
      if (v38 >= v37 >> 1)
        v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v37 > 1), v38 + 1, 1, v36);
      *((_QWORD *)v36 + 2) = v38 + 1;
      v39 = &v36[80 * v38];
      v39[32] = 1;
      *((_QWORD *)v39 + 5) = 0xD00000000000001CLL;
      *((_QWORD *)v39 + 6) = 0x80000001DF006980;
      *((_QWORD *)v39 + 7) = v24;
      *((_QWORD *)v39 + 8) = v24;
      *((_QWORD *)v39 + 9) = 15;
      *((_QWORD *)v39 + 10) = 0;
      *((_QWORD *)v39 + 11) = 0;
      *((_QWORD *)v39 + 12) = 0;
      v39[104] = 36;
      v89[9] = v36;
      goto LABEL_29;
    }
    v25 = v90;
    v24 = v90;
    if (Substring.distance(from:to:)() >= 1)
    {
      swift_bridgeObjectRetain();
      String.subscript.getter();
      swift_bridgeObjectRelease();
      v26 = Substring.index(_:offsetBy:limitedBy:)();
      v28 = v27;
      v25 = v90;
      result = swift_bridgeObjectRelease();
      v24 = v90;
      if ((v28 & 1) == 0)
      {
        if (v91 >> 14 < v26 >> 14)
          goto LABEL_84;
        v89[2] = v26;
        v89[3] = v91;
        v24 = v26;
      }
    }
    v29 = MEMORY[0x1DF0F366C](v17, v19, v21, v23);
    v31 = v30;
    result = swift_bridgeObjectRelease();
    if (v24 >> 14 < v25 >> 14)
      goto LABEL_82;
    if (!v31)
      goto LABEL_24;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v88 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v88 + 2) + 1, 1, v88, &demangling cache variable for type metadata for _ContiguousArrayStorage<Source.Located<String>>);
    v33 = *((_QWORD *)v88 + 2);
    v32 = *((_QWORD *)v88 + 3);
    if (v33 >= v32 >> 1)
      v88 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v32 > 1), v33 + 1, 1, v88, &demangling cache variable for type metadata for _ContiguousArrayStorage<Source.Located<String>>);
    *((_QWORD *)v88 + 2) = v33 + 1;
    v34 = &v88[32 * v33];
    *((_QWORD *)v34 + 4) = v29;
    *((_QWORD *)v34 + 5) = v31;
    *((_QWORD *)v34 + 6) = v90;
    *((_QWORD *)v34 + 7) = v24;
    v35 = v89;
LABEL_29:
    swift_bridgeObjectRetain();
    v40 = String.subscript.getter();
    v42 = v41;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v40 ^ v42) < 0x4000)
      goto LABEL_76;
    v43 = (char *)v35[9];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v44 = String.subscript.getter();
    v46 = v45;
    swift_bridgeObjectRelease();
    if (!((v44 ^ v46) >> 14))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_36;
    }
    v47 = Substring.subscript.getter();
    v49 = v48;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v49)
      break;
LABEL_36:
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v51 = String.subscript.getter();
    v53 = v52;
    swift_bridgeObjectRelease();
    if (!((v51 ^ v53) >> 14))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_45:
      *(_QWORD *)&v92 = 0x6465746365707865;
      *((_QWORD *)&v92 + 1) = 0xEA00000000002720;
      v62._countAndFlagsBits = 44;
      v62._object = (void *)0xE100000000000000;
      String.append(_:)(v62);
      v63._countAndFlagsBits = 39;
      v63._object = (void *)0xE100000000000000;
      String.append(_:)(v63);
      v64 = v92;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v43 + 2) + 1, 1, v43);
      v66 = *((_QWORD *)v43 + 2);
      v65 = *((_QWORD *)v43 + 3);
      if (v66 >= v65 >> 1)
        v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v65 > 1), v66 + 1, 1, v43);
      *((_QWORD *)v43 + 2) = v66 + 1;
      v7 = &v43[80 * v66];
      v7[32] = 1;
      *(_OWORD *)(v7 + 40) = v64;
      *((_QWORD *)v7 + 7) = v24;
      *((_QWORD *)v7 + 8) = v24;
      *(_OWORD *)(v7 + 72) = xmmword_1DF003FC0;
      *((_QWORD *)v7 + 11) = 0;
      *((_QWORD *)v7 + 12) = 0;
      v7[104] = 3;
      v35[9] = v43;
      goto LABEL_4;
    }
    v54 = Substring.subscript.getter();
    v56 = v55;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v54 == 44 && v56 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
      v57 = v91;
    }
    else
    {
      v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v57 = v91;
      if ((v58 & 1) == 0)
        goto LABEL_45;
    }
    swift_bridgeObjectRetain();
    String.subscript.getter();
    swift_bridgeObjectRelease();
    v59 = Substring.index(_:offsetBy:limitedBy:)();
    v61 = v60;
    result = swift_bridgeObjectRelease();
    if ((v61 & 1) != 0)
    {
      strcpy((char *)&v92, "UNREACHABLE: ");
      HIWORD(v92) = -4864;
      v67._countAndFlagsBits = 0xD000000000000015;
      v67._object = (void *)0x80000001DF0073C0;
      String.append(_:)(v67);
      swift_bridgeObjectRelease();
      v68 = v92;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v43 + 2) + 1, 1, v43);
      v70 = *((_QWORD *)v43 + 2);
      v69 = *((_QWORD *)v43 + 3);
      if (v70 >= v69 >> 1)
        v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v69 > 1), v70 + 1, 1, v43);
      *((_QWORD *)v43 + 2) = v70 + 1;
      v71 = &v43[80 * v70];
      v71[32] = 0;
      *(_OWORD *)(v71 + 40) = v68;
      *((_QWORD *)v71 + 7) = v24;
      *((_QWORD *)v71 + 8) = v24;
      *(_OWORD *)(v71 + 72) = 0u;
      *(_OWORD *)(v71 + 88) = 0u;
      v71[104] = -1;
      v35[9] = v43;
      swift_bridgeObjectRetain();
      String.subscript.getter();
      swift_bridgeObjectRelease();
      v72 = Substring.distance(from:to:)();
      swift_bridgeObjectRelease();
      if (v72 >= 1)
      {
        swift_bridgeObjectRetain();
        String.subscript.getter();
        swift_bridgeObjectRelease();
        v73 = Substring.index(_:offsetBy:limitedBy:)();
        v75 = v74;
        result = swift_bridgeObjectRelease();
        if ((v75 & 1) == 0)
        {
          if (v91 >> 14 < v73 >> 14)
            goto LABEL_85;
          v35[2] = v73;
          v35[3] = v91;
        }
      }
    }
    else
    {
      if (v57 >> 14 < v59 >> 14)
        goto LABEL_83;
      v35[2] = v59;
      v35[3] = v57;
    }
LABEL_4:
    v3 = v35[2];
    v4 = v35[3];
    swift_bridgeObjectRetain();
    result = String.subscript.getter();
    if (v8 >> 14 < result >> 14)
      goto LABEL_80;
  }
  if (v47 != 125 || v49 != 0xE100000000000000)
  {
    v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v50 & 1) != 0)
      goto LABEL_76;
    goto LABEL_36;
  }
  swift_bridgeObjectRelease();
LABEL_76:
  v82._countAndFlagsBits = 125;
  v82._object = (void *)0xE100000000000000;
  result = Parser.tryEat(_:)(v82);
  if ((result & 1) == 0)
  {
    v92 = xmmword_1DF003F60;
    v93 = 0;
    v94 = 0;
    v95 = 3;
    result = Parser.errorAtCurrentPosition(_:)(&v92);
  }
  v83 = v35[2];
  if (v83 >> 14 >= v24 >> 14)
  {
    *a2 = v85;
    a2[1] = v84;
    a2[2] = v88;
    a2[3] = v24;
    a2[4] = v83;
    return result;
  }
LABEL_86:
  __break(1u);
  return result;
}

uint64_t Parser.lexOnigurumaCalloutTag()@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  unint64_t v3;
  Swift::String v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  Swift::String v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v3 = v1[2];
  v4._countAndFlagsBits = 91;
  v4._object = (void *)0xE100000000000000;
  result = Parser.tryEat(_:)(v4);
  if ((result & 1) != 0)
  {
    v6 = v1[2];
    if (v6 >> 14 < v3 >> 14)
    {
      __break(1u);
    }
    else
    {
      result = closure #1 in Parser.expectIdentifier(_:endingWith:eatEnding:)(v1, 93, 0xE100000000000000, 2u, &v11);
      v7 = v1[2];
      if (v7 >> 14 >= v6 >> 14)
      {
        v8 = v11;
        v9._countAndFlagsBits = 93;
        v9._object = (void *)0xE100000000000000;
        result = Parser.tryEat(_:)(v9);
        if ((result & 1) == 0)
        {
          v11 = xmmword_1DF003FD0;
          v12 = 0;
          v13 = 0;
          v14 = 3;
          result = Parser.errorAtCurrentPosition(_:)(&v11);
        }
        v10 = v1[2];
        if (v7 >> 14 <= v10 >> 14)
        {
          *(_QWORD *)a1 = v3;
          *(_QWORD *)(a1 + 8) = v6;
          *(_OWORD *)(a1 + 16) = v8;
          *(_QWORD *)(a1 + 32) = v6;
          *(_QWORD *)(a1 + 40) = v7;
          *(_QWORD *)(a1 + 48) = v7;
          *(_QWORD *)(a1 + 56) = v10;
          return result;
        }
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t Parser.lexOnigurumaNamedCallout()@<X0>(_OWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  unint64_t v11;
  Swift::String v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  _BYTE v71[160];
  __int128 v72;
  unint64_t v73;
  unint64_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  v3 = v1[1];
  v61 = v1[2];
  v62 = *v1;
  v60 = v1[3];
  v59 = *((_BYTE *)v1 + 32);
  v4 = v1[6];
  v57 = v1[7];
  v58 = v1[5];
  v56 = *((_BYTE *)v1 + 64);
  v5 = v1[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v64 = v3;
  v65 = a1;
  v63 = v4;
  if ((specialized Parser.tryEat<A>(sequence:)(10792, 0xE200000000000000) & 1) == 0)
  {
    _s12_RegexParser3ASTV4AtomV7CalloutOSgWOi0_((uint64_t)&v87);
    outlined init with take of AST.Conditional.Condition?((uint64_t)&v87, (uint64_t)v71);
LABEL_11:
    outlined init with take of AST.Conditional.Condition?((uint64_t)v71, (uint64_t)&v72);
    outlined init with take of AST.Conditional.Condition?((uint64_t)&v72, (uint64_t)&v87);
    if (_s12_RegexParser3ASTV4AtomV7CalloutOSgWOg((uint64_t)&v87) != 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined init with take of AST.Conditional.Condition?((uint64_t)&v72, (uint64_t)&v67);
      outlined init with take of AST.Atom.Callout(&v67, a1);
      return AST.root.modify(a1);
    }
    v19 = v1[9];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v20 = v5;
    v21 = specialized Collection.dropFirst(_:)(*(_QWORD *)(v5 + 16), v19);
    v23 = v22;
    v25 = v24;
    v27 = v26 >> 1;
    swift_bridgeObjectRetain();
    result = swift_unknownObjectRetain();
    v28 = v23 - 32;
    v29 = v25;
    v30 = v25;
LABEL_13:
    v31 = v28 + 80 * v29;
    while (1)
    {
      if (v27 == v30)
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease_n();
        *v1 = v62;
        v1[1] = v3;
        v1[2] = v61;
        v1[3] = v60;
        *((_BYTE *)v1 + 32) = v59;
        v1[5] = v58;
        v1[6] = v4;
        v1[7] = v57;
        *((_BYTE *)v1 + 64) = v56;
        v1[9] = v20;
        return outlined init with take of AST.Conditional.Condition?((uint64_t)&v72, (uint64_t)a1);
      }
      if (v29 < v25 || v30 >= v27)
        break;
      v32 = *(unsigned __int8 *)(v31 + 32);
      ++v30;
      v31 += 80;
      if (!v32)
      {
        v53 = v28;
        v55 = v21;
        v66 = v19;
        v48 = *(_QWORD *)(v31 - 24);
        v50 = *(_QWORD *)(v31 - 40);
        v33 = *(_QWORD *)(v31 - 8);
        v44 = *(_QWORD *)(v31 - 32);
        v46 = *(_QWORD *)(v31 - 16);
        v34 = *(_QWORD *)v31;
        v35 = *(_QWORD *)(v31 + 8);
        v36 = *(_QWORD *)(v31 + 16);
        v37 = *(_BYTE *)(v31 + 24);
        swift_bridgeObjectRetain();
        outlined copy of ParseError?(v33, v34, v35, v36, v37);
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v20 + 16) + 1, 1, (char *)v20);
          v20 = result;
        }
        v38 = v20;
        v39 = *(_QWORD *)(v20 + 16);
        v40 = v38;
        v41 = *(_QWORD *)(v38 + 24);
        if (v39 >= v41 >> 1)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v41 > 1), v39 + 1, 1, (char *)v40);
          v40 = result;
        }
        *(_QWORD *)(v40 + 16) = v39 + 1;
        v42 = v40 + 80 * v39;
        v20 = v40;
        *(_BYTE *)(v42 + 32) = 0;
        *(_QWORD *)(v42 + 40) = v50;
        *(_QWORD *)(v42 + 48) = v44;
        *(_QWORD *)(v42 + 56) = v48;
        *(_QWORD *)(v42 + 64) = v46;
        *(_QWORD *)(v42 + 72) = v33;
        *(_QWORD *)(v42 + 80) = v34;
        *(_QWORD *)(v42 + 88) = v35;
        *(_QWORD *)(v42 + 96) = v36;
        *(_BYTE *)(v42 + 104) = v37;
        v29 = v30;
        v3 = v64;
        a1 = v65;
        v4 = v63;
        v19 = v66;
        v28 = v53;
        v21 = v55;
        goto LABEL_13;
      }
    }
    __break(1u);
    goto LABEL_26;
  }
  v6 = v1[2];
  result = closure #1 in Parser.expectIdentifier(_:endingWith:eatEnding:)(v1, 41, 0xE100000000000000, 1u, &v87);
  v8 = v1[2];
  v54 = v6;
  if (v8 >> 14 < v6 >> 14)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v9 = v87;
  Parser.lexOnigurumaCalloutTag()((uint64_t)&v87);
  v10 = v87;
  v51 = v89;
  v52 = v88;
  v47 = v91;
  v49 = v90;
  v43 = v93;
  v45 = v92;
  v11 = v1[2];
  v12._countAndFlagsBits = 123;
  v12._object = (void *)0xE100000000000000;
  result = Parser.tryEat(_:)(v12);
  if ((result & 1) == 0)
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    goto LABEL_8;
  }
  v13 = v1[2];
  if (v13 >> 14 >= v11 >> 14)
  {
    *(_QWORD *)&v72 = v11;
    *((_QWORD *)&v72 + 1) = v13;
    Parser.expectOnigurumaCalloutArgList(leftBrace:)((uint64_t *)&v72, &v87);
    v15 = *((_QWORD *)&v87 + 1);
    v14 = v87;
    v16 = v88;
    v17 = v89;
LABEL_8:
    v18._countAndFlagsBits = 41;
    v18._object = (void *)0xE100000000000000;
    if (!Parser.tryEat(_:)(v18))
    {
      v67 = xmmword_1DF003F70;
      v68 = 0;
      v69 = 0;
      v70 = 3;
      Parser.errorAtCurrentPosition(_:)(&v67);
    }
    v72 = v9;
    v73 = v54;
    v74 = v8;
    v75 = v10;
    v76 = v52;
    v77 = v51;
    v78 = v49;
    v79 = v47;
    v80 = v45;
    v81 = v43;
    v82 = v14;
    v83 = v15;
    v84 = v16;
    v85 = v17;
    v86 = *((_QWORD *)&v10 + 1);
    _s12_RegexParser3ASTV4AtomV7CalloutOWOi0_((uint64_t)&v72);
    outlined init with take of AST.Atom.Callout(&v72, &v87);
    AST.root.modify(&v87);
    outlined init with take of AST.Conditional.Condition?((uint64_t)&v87, (uint64_t)v71);
    v3 = v64;
    a1 = v65;
    v4 = v63;
    goto LABEL_11;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t Parser.lexOnigurumaCalloutOfContents()@<X0>(_OWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  Swift::String v15;
  unint64_t v16;
  char v17;
  Swift::String v18;
  Swift::String v19;
  unint64_t v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _OWORD *v73;
  _OWORD *v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  _BYTE v79[160];
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  unint64_t v96;
  unint64_t v97;
  __int128 v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;

  v3 = v1[1];
  v67 = v1[2];
  v68 = *v1;
  v66 = v1[3];
  v65 = *((_BYTE *)v1 + 32);
  v4 = v1[6];
  v63 = v1[7];
  v64 = v1[5];
  v62 = *((_BYTE *)v1 + 64);
  v5 = v1[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((specialized Parser.tryEat<A>(sequence:)(16168, 0xE200000000000000) & 1) == 0
    || (specialized Parser.tryEatPrefix(maxLength:_:)(0, 1, v1, (uint64_t (*)(uint64_t, _QWORD, _QWORD *))specialized Source.peekPrefix(maxLength:_:), (uint64_t *)&v98), !*((_QWORD *)&v98 + 1)))
  {
    _s12_RegexParser3ASTV4AtomV7CalloutOSgWOi0_((uint64_t)&v98);
    outlined init with take of AST.Conditional.Condition?((uint64_t)&v98, (uint64_t)v79);
LABEL_16:
    outlined init with take of AST.Conditional.Condition?((uint64_t)v79, (uint64_t)&v80);
    outlined init with take of AST.Conditional.Condition?((uint64_t)&v80, (uint64_t)&v98);
    if (_s12_RegexParser3ASTV4AtomV7CalloutOSgWOg((uint64_t)&v98) != 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined init with take of AST.Conditional.Condition?((uint64_t)&v80, (uint64_t)&v75);
      outlined init with take of AST.Atom.Callout(&v75, a1);
      return AST.root.modify(a1);
    }
    v22 = v1[9];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v23 = specialized Collection.dropFirst(_:)(*(_QWORD *)(v5 + 16), v22);
    v25 = v24;
    v27 = v26;
    v29 = v28 >> 1;
    swift_bridgeObjectRetain();
    result = swift_unknownObjectRetain();
    v30 = v25 - 32;
    v31 = v27;
    v32 = v27;
LABEL_18:
    v33 = v30 + 80 * v31;
    while (1)
    {
      if (v29 == v32)
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease_n();
        *v1 = v68;
        v1[1] = v3;
        v1[2] = v67;
        v1[3] = v66;
        *((_BYTE *)v1 + 32) = v65;
        v1[5] = v64;
        v1[6] = v4;
        v1[7] = v63;
        *((_BYTE *)v1 + 64) = v62;
        v1[9] = v5;
        return outlined init with take of AST.Conditional.Condition?((uint64_t)&v80, (uint64_t)a1);
      }
      if (v31 < v27 || v32 >= v29)
        break;
      v34 = *(unsigned __int8 *)(v33 + 32);
      ++v32;
      v33 += 80;
      if (!v34)
      {
        v60 = v23;
        v61 = v22;
        v58 = v30;
        v70 = v4;
        v72 = v3;
        v74 = a1;
        v51 = *(_QWORD *)(v33 - 24);
        v53 = *(_QWORD *)(v33 - 40);
        v35 = *(_QWORD *)(v33 - 8);
        v47 = *(_QWORD *)(v33 - 32);
        v49 = *(_QWORD *)(v33 - 16);
        v36 = *(_QWORD *)v33;
        v37 = *(_QWORD *)(v33 + 8);
        v38 = *(_QWORD *)(v33 + 16);
        v39 = *(_BYTE *)(v33 + 24);
        swift_bridgeObjectRetain();
        v55 = v35;
        outlined copy of ParseError?(v35, v36, v37, v38, v39);
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v5 + 16) + 1, 1, (char *)v5);
          v5 = result;
        }
        v41 = *(_QWORD *)(v5 + 16);
        v40 = *(_QWORD *)(v5 + 24);
        v42 = v5;
        if (v41 >= v40 >> 1)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v40 > 1), v41 + 1, 1, (char *)v5);
          v42 = result;
        }
        *(_QWORD *)(v42 + 16) = v41 + 1;
        v5 = v42;
        v43 = v42 + 80 * v41;
        *(_BYTE *)(v43 + 32) = 0;
        *(_QWORD *)(v43 + 40) = v53;
        *(_QWORD *)(v43 + 48) = v47;
        *(_QWORD *)(v43 + 56) = v51;
        *(_QWORD *)(v43 + 64) = v49;
        *(_QWORD *)(v43 + 72) = v55;
        *(_QWORD *)(v43 + 80) = v36;
        *(_QWORD *)(v43 + 88) = v37;
        *(_QWORD *)(v43 + 96) = v38;
        *(_BYTE *)(v43 + 104) = v39;
        v31 = v32;
        v3 = v72;
        a1 = v74;
        v4 = v70;
        v23 = v60;
        v22 = v61;
        v30 = v58;
        goto LABEL_18;
      }
    }
    __break(1u);
    goto LABEL_31;
  }
  v7 = v99;
  v6 = v100;
  swift_bridgeObjectRetain();
  v8 = String.count.getter();
  swift_bridgeObjectRelease();
  result = Parser.expectQuoted(endingWith:count:ignoreEscaped:eatEnding:)(125, 0xE100000000000000, v8, 0, 1, (uint64_t *)&v98);
  v10 = v100;
  v11 = v1[2];
  if (v11 >> 14 >= v100 >> 14)
  {
    v69 = v4;
    v71 = v3;
    v57 = v98;
    v59 = v7;
    v54 = v99;
    v56 = *((_QWORD *)&v98 + 1);
    Parser.lexOnigurumaCalloutTag()((uint64_t)&v98);
    v50 = *((_QWORD *)&v98 + 1);
    v52 = v98;
    v12 = v100;
    v13 = v101;
    v46 = v102;
    v48 = v99;
    v44 = v104;
    v45 = v103;
    v14 = v1[2];
    v15._countAndFlagsBits = 62;
    v15._object = (void *)0xE100000000000000;
    result = Parser.tryEat(_:)(v15);
    v73 = a1;
    v16 = v6;
    if ((result & 1) != 0)
    {
      v17 = 0;
    }
    else
    {
      v18._countAndFlagsBits = 60;
      v18._object = (void *)0xE100000000000000;
      result = Parser.tryEat(_:)(v18);
      if ((result & 1) != 0)
      {
        v17 = 1;
      }
      else
      {
        v19._countAndFlagsBits = 88;
        v19._object = (void *)0xE100000000000000;
        result = Parser.tryEat(_:)(v19);
        if ((result & 1) != 0)
          v17 = 2;
        else
          v17 = 0;
      }
    }
    v20 = v1[2];
    if (v20 >> 14 < v14 >> 14)
      goto LABEL_32;
    v21._countAndFlagsBits = 41;
    v21._object = (void *)0xE100000000000000;
    if (!Parser.tryEat(_:)(v21))
    {
      v75 = xmmword_1DF003F70;
      v76 = 0;
      v77 = 0;
      v78 = 3;
      Parser.errorAtCurrentPosition(_:)(&v75);
    }
    swift_bridgeObjectRelease();
    *(_QWORD *)&v80 = v59;
    *((_QWORD *)&v80 + 1) = v16;
    v81 = v57;
    v82 = v56;
    v83 = v54;
    v84 = v10;
    v85 = v10;
    v86 = v11;
    v87 = v52;
    v88 = v50;
    v89 = v48;
    v90 = v12;
    v91 = v13;
    v92 = v46;
    v93 = v45;
    v94 = v44;
    v95 = v17;
    v96 = v14;
    v97 = v20;
    _s12_RegexParser3ASTV4AtomV7CalloutOWOi1_((uint64_t)&v80);
    outlined init with take of AST.Atom.Callout(&v80, &v98);
    AST.root.modify(&v98);
    outlined init with take of AST.Conditional.Condition?((uint64_t)&v98, (uint64_t)v79);
    v3 = v71;
    a1 = v73;
    v4 = v69;
    goto LABEL_16;
  }
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t Parser.lexBacktrackingDirective()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  unint64_t v13;
  Swift::String v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  Swift::String v24;
  Swift::String v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  unsigned __int8 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  char v89;

  v3 = v1;
  v5 = *v1;
  v72 = v1[3];
  v73 = v1[2];
  v71 = *((_BYTE *)v1 + 32);
  v6 = v1[6];
  v69 = v1[7];
  v70 = v1[5];
  v68 = *((_BYTE *)v1 + 64);
  v7 = (uint64_t *)v1[9];
  v81 = v1[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((specialized Parser.tryEat<A>(sequence:)(10792, 0xE200000000000000) & 1) == 0)
    goto LABEL_42;
  v8 = v1[2];
  if ((specialized Parser.tryEat<A>(sequence:)(0x545045434341, 0xE600000000000000) & 1) != 0)
  {
    v9 = 0;
    v10 = 0;
    goto LABEL_7;
  }
  if ((specialized Parser.tryEat<A>(sequence:)(1279869254, 0xE400000000000000) & 1) != 0
    || (v11._countAndFlagsBits = 70, v11._object = (void *)0xE100000000000000, Parser.tryEat(_:)(v11)))
  {
    v9 = 0;
    v10 = 1;
    goto LABEL_7;
  }
  if ((specialized Parser.tryEat<A>(sequence:)(1263681869, 0xE400000000000000) & 1) != 0)
  {
    v9 = 1;
    v10 = 2;
    goto LABEL_7;
  }
  v75 = v8;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v30 = String.subscript.getter();
  if ((v30 ^ v31) >> 14)
  {
    v32 = Substring.subscript.getter();
    v2 = v33;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v32 = 0;
    v2 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v2)
  {
    if (v32 == 58 && v2 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_33:
      v9 = 1;
      v10 = 2;
      v8 = v75;
      goto LABEL_7;
    }
    v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v34 & 1) != 0)
      goto LABEL_33;
  }
  if ((specialized Parser.tryEat<A>(sequence:)(0x54494D4D4F43, 0xE600000000000000) & 1) != 0)
  {
    v9 = 0;
    v10 = 3;
    v8 = v75;
    goto LABEL_7;
  }
  v8 = v75;
  if ((specialized Parser.tryEat<A>(sequence:)(0x454E555250, 0xE500000000000000) & 1) != 0)
  {
    v9 = 0;
    v10 = 4;
    goto LABEL_7;
  }
  if ((specialized Parser.tryEat<A>(sequence:)(1346980691, 0xE400000000000000) & 1) != 0)
  {
    v9 = 0;
    v10 = 5;
    goto LABEL_7;
  }
  if ((specialized Parser.tryEat<A>(sequence:)(1313163348, 0xE400000000000000) & 1) == 0)
  {
LABEL_42:
    v74 = v6;
    v77 = 0;
    v78 = 0;
    v76 = 0;
    v80 = 0;
    v8 = 0;
    v79 = 0;
LABEL_43:
    v2 = v1[9];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    specialized Collection.dropFirst(_:)(v7[2], v2);
    v36 = v35;
    v6 = v37;
    v39 = v38 >> 1;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    v40 = v36 - 32;
    v41 = v6;
    v9 = v6;
    v42 = v81;
LABEL_44:
    v43 = v40 + 80 * v41;
    while (1)
    {
      if (v39 == v9)
      {
        swift_bridgeObjectRelease();
        result = swift_unknownObjectRelease_n();
        *v3 = v5;
        v3[1] = v42;
        v3[2] = v73;
        v3[3] = v72;
        *((_BYTE *)v3 + 32) = v71;
        v3[5] = v70;
        v3[6] = v74;
        v3[7] = v69;
        *((_BYTE *)v3 + 64) = v68;
        v3[9] = (uint64_t)v7;
        *a1 = v79;
        a1[1] = v8;
        a1[2] = v80;
        a1[3] = v78;
        a1[4] = 1;
        goto LABEL_55;
      }
      if (v41 < v6 || v9 >= v39)
        break;
      v44 = *(unsigned __int8 *)(v43 + 32);
      ++v9;
      v43 += 80;
      if (!v44)
      {
        v64 = v40;
        v65 = v2;
        v67 = v5;
        v75 = v8;
        v66 = a1;
        v59 = *(_QWORD *)(v43 - 24);
        v60 = *(_QWORD *)(v43 - 40);
        v45 = *(_QWORD *)(v43 - 8);
        v58 = *(_QWORD *)(v43 - 16);
        v46 = *(_QWORD *)v43;
        v47 = *(_QWORD *)(v43 + 8);
        v48 = *(_QWORD *)(v43 + 16);
        v49 = (char *)v7;
        v50 = *(_BYTE *)(v43 + 24);
        v63 = *(_QWORD *)(v43 - 32);
        swift_bridgeObjectRetain();
        v61 = v45;
        v51 = v45;
        v52 = v48;
        v53 = v46;
        v62 = v50;
        outlined copy of ParseError?(v51, v46, v47, v52, v50);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v49 + 2) + 1, 1, v49);
        v55 = *((_QWORD *)v49 + 2);
        v54 = *((_QWORD *)v49 + 3);
        v56 = v49;
        if (v55 >= v54 >> 1)
          v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v54 > 1), v55 + 1, 1, v49);
        *((_QWORD *)v56 + 2) = v55 + 1;
        v7 = (uint64_t *)v56;
        v57 = &v56[80 * v55];
        v57[32] = 0;
        *((_QWORD *)v57 + 5) = v60;
        *((_QWORD *)v57 + 6) = v63;
        *((_QWORD *)v57 + 7) = v59;
        *((_QWORD *)v57 + 8) = v58;
        *((_QWORD *)v57 + 9) = v61;
        *((_QWORD *)v57 + 10) = v53;
        *((_QWORD *)v57 + 11) = v47;
        *((_QWORD *)v57 + 12) = v52;
        v57[104] = v62;
        v41 = v9;
        v2 = v65;
        a1 = v66;
        v42 = v81;
        v8 = v75;
        v5 = v67;
        v40 = v64;
        goto LABEL_44;
      }
    }
    __break(1u);
    goto LABEL_57;
  }
  v9 = 0;
  v10 = 6;
LABEL_7:
  v80 = v1[2];
  if (v80 >> 14 < v8 >> 14)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  v79 = v10;
  v12._countAndFlagsBits = 58;
  v12._object = (void *)0xE100000000000000;
  if (Parser.tryEat(_:)(v12))
  {
    Parser.expectQuoted(endingWith:count:ignoreEscaped:eatEnding:)(41, 0xE100000000000000, 1, 0, 0, &v82);
    v13 = v83;
    v77 = v84;
    v78 = v82;
    v76 = v85;
  }
  else
  {
    v77 = 0;
    v78 = 0;
    v13 = 0;
    v76 = 0;
  }
  v14._countAndFlagsBits = 41;
  v14._object = (void *)0xE100000000000000;
  if (!Parser.tryEat(_:)(v14))
  {
    v86 = xmmword_1DF003F70;
    v87 = 0;
    v88 = 0;
    v89 = 3;
    Parser.errorAtCurrentPosition(_:)(&v86);
  }
  v15 = v9 ^ 1;
  if (v13)
    v15 = 1;
  if ((v15 & 1) == 0)
  {
    swift_bridgeObjectRetain();
    v75 = v8;
    v16 = String.subscript.getter();
    v18 = v17;
    v20 = v19;
    v22 = v21;
    swift_bridgeObjectRelease();
    v6 = MEMORY[0x1DF0F366C](v16, v18, v20, v22);
    v7 = v23;
    swift_bridgeObjectRelease();
    v82 = 0;
    v83 = 0xE000000000000000;
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease();
    v82 = 0xD000000000000018;
    v83 = 0x80000001DF006E00;
    v24._countAndFlagsBits = v6;
    v24._object = v7;
    String.append(_:)(v24);
    v25._object = (void *)0x80000001DF006E20;
    v25._countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v25);
    v2 = v82;
    v8 = v83;
    v9 = v1[9];
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
LABEL_17:
      v27 = *(_QWORD *)(v9 + 16);
      v26 = *(_QWORD *)(v9 + 24);
      if (v27 >= v26 >> 1)
        v9 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v26 > 1), v27 + 1, 1, (char *)v9);
      *(_QWORD *)(v9 + 16) = v27 + 1;
      v28 = v9 + 80 * v27;
      *(_BYTE *)(v28 + 32) = 1;
      *(_QWORD *)(v28 + 40) = v2;
      *(_QWORD *)(v28 + 48) = v8;
      v8 = v75;
      *(_QWORD *)(v28 + 56) = v75;
      *(_QWORD *)(v28 + 64) = v80;
      *(_QWORD *)(v28 + 72) = v6;
      *(_QWORD *)(v28 + 80) = v7;
      *(_QWORD *)(v28 + 88) = 0;
      *(_QWORD *)(v28 + 96) = 0;
      *(_BYTE *)(v28 + 104) = 13;
      swift_bridgeObjectRelease();
      v13 = 0;
      v3[9] = v9;
      goto LABEL_22;
    }
LABEL_58:
    v9 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v9 + 16) + 1, 1, (char *)v9);
    goto LABEL_17;
  }
  if (v13 == 1)
  {
    v74 = v6;
    goto LABEL_43;
  }
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_BYTE *)a1 = v79;
  a1[1] = v8;
  a1[2] = v80;
  a1[3] = v78;
  a1[4] = v13;
LABEL_55:
  a1[5] = v77;
  a1[6] = v76;
  return result;
}

uint64_t Parser.expectGroupLikeAtom()@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  __int128 v17;
  uint64_t v19;
  Swift::String v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  Swift::String v49;
  Swift::String v50;
  Swift::String v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  _BYTE *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  _BYTE v73[160];
  _BYTE v74[160];
  _OWORD v75[10];
  _BYTE v76[160];
  _BYTE v77[160];
  _BYTE v78[160];
  _BYTE v79[160];
  _BYTE v80[24];
  uint64_t v81;
  _BYTE v82[24];
  uint64_t v83;
  char v84[8];
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  char v91;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>?);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  Parser.lexGroupLikeReference()((uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
  {
    outlined init with take of Source.Located<AST.Atom.Kind>?((uint64_t)v7, (uint64_t)v12, &demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>);
    return outlined init with take of AST.Atom.Kind((uint64_t)v12, a1, type metadata accessor for AST.Atom.Kind);
  }
  outlined destroy of _ASTParent?((uint64_t)v7, &demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>?);
  Parser.lexChangeMatchingOptionAtom()((uint64_t)v80);
  v13 = v81;
  if (!v81)
  {
    Parser.lexBacktrackingDirective()((uint64_t *)v80);
    v19 = *(_QWORD *)v82;
    if (*(_QWORD *)v82 != 1)
    {
      v34 = v81;
      v35 = *(_OWORD *)&v80[8];
      v36 = *(_OWORD *)&v82[8];
      *(_BYTE *)a1 = v80[0];
      *(_OWORD *)(a1 + 8) = v35;
      *(_QWORD *)(a1 + 24) = v34;
      *(_QWORD *)(a1 + 32) = v19;
      *(_OWORD *)(a1 + 40) = v36;
      type metadata accessor for AST.Atom.Kind(0);
      return swift_storeEnumTagMultiPayload();
    }
    Parser.lexGlobalMatchingOption()((uint64_t)v84);
    if (v85 >> 1 == 0xFFFFFFFF)
    {
      Parser.lexPCRECallout()((uint64_t)v78);
      outlined init with take of AST.Conditional.Condition?((uint64_t)v78, (uint64_t)v79);
      outlined init with take of AST.Conditional.Condition?((uint64_t)v79, (uint64_t)v80);
      if (_s12_RegexParser3ASTV4AtomV7CalloutOSgWOg((uint64_t)v80) == 1)
      {
        Parser.lexOnigurumaNamedCallout()(v75);
        outlined init with take of AST.Conditional.Condition?((uint64_t)v75, (uint64_t)v76);
        outlined init with take of AST.Conditional.Condition?((uint64_t)v76, (uint64_t)v77);
        if (_s12_RegexParser3ASTV4AtomV7CalloutOSgWOg((uint64_t)v77) == 1)
        {
          Parser.lexOnigurumaCalloutOfContents()(&v69);
          outlined init with take of AST.Conditional.Condition?((uint64_t)&v69, (uint64_t)v73);
          outlined init with take of AST.Conditional.Condition?((uint64_t)v73, (uint64_t)v74);
          if (_s12_RegexParser3ASTV4AtomV7CalloutOSgWOg((uint64_t)v74) == 1)
          {
            v20._countAndFlagsBits = 40;
            v20._object = (void *)0xE100000000000000;
            if (!Parser.tryEat(_:)(v20))
            {
              v69 = xmmword_1DF003FE0;
              v70 = 0;
              v71 = 0;
              v72 = 3;
              Parser.errorAtCurrentPosition(_:)(&v69);
            }
            specialized Parser.lexUntil(_:)(v1, closure #1 in Parser.expectGroupLikeAtom(), &v88);
            v21 = v88;
            v22 = v89;
            v23 = v90;
            v24 = HIBYTE(*((_QWORD *)&v88 + 1)) & 0xFLL;
            if ((*((_QWORD *)&v88 + 1) & 0x2000000000000000) == 0)
              v24 = v88 & 0xFFFFFFFFFFFFLL;
            if (v24)
            {
              v89 = 0;
              v90 = 0;
              v91 = 14;
              swift_bridgeObjectRetain();
              ParseError.description.getter();
              v67 = v26;
              *(_QWORD *)&v68 = v25;
              v27 = (char *)v1[9];
              swift_bridgeObjectRetain();
              v28 = v22;
              v29 = v23;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v27 + 2) + 1, 1, v27);
              v31 = *((_QWORD *)v27 + 2);
              v30 = *((_QWORD *)v27 + 3);
              if (v31 >= v30 >> 1)
                v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v30 > 1), v31 + 1, 1, v27);
              *((_QWORD *)v27 + 2) = v31 + 1;
              v32 = &v27[80 * v31];
              v32[32] = 1;
              v33 = v67;
              *((_QWORD *)v32 + 5) = v68;
              *((_QWORD *)v32 + 6) = v33;
              *((_QWORD *)v32 + 7) = v28;
              *((_QWORD *)v32 + 8) = v29;
              *(_OWORD *)(v32 + 72) = v21;
              *((_QWORD *)v32 + 11) = 0;
              *((_QWORD *)v32 + 12) = 0;
              v32[104] = 14;
              swift_bridgeObjectRelease();
            }
            else
            {
              v68 = xmmword_1DF003F70;
              v88 = xmmword_1DF003F70;
              v89 = 0;
              v90 = 0;
              v91 = 3;
              ParseError.description.getter();
              v67 = v59;
              v61 = v60;
              v27 = (char *)v1[9];
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v27 + 2) + 1, 1, v27);
              v63 = *((_QWORD *)v27 + 2);
              v62 = *((_QWORD *)v27 + 3);
              if (v63 >= v62 >> 1)
                v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v62 > 1), v63 + 1, 1, v27);
              *((_QWORD *)v27 + 2) = v63 + 1;
              v64 = &v27[80 * v63];
              v64[32] = 1;
              *((_QWORD *)v64 + 5) = v67;
              *((_QWORD *)v64 + 6) = v61;
              *((_QWORD *)v64 + 7) = v22;
              *((_QWORD *)v64 + 8) = v23;
              *(_OWORD *)(v64 + 72) = v68;
              *((_QWORD *)v64 + 11) = 0;
              *((_QWORD *)v64 + 12) = 0;
              v64[104] = 3;
            }
LABEL_26:
            swift_bridgeObjectRelease();
            v2[9] = v27;
            type metadata accessor for AST.Atom.Kind(0);
            return swift_storeEnumTagMultiPayload();
          }
          v58 = v74;
        }
        else
        {
          v58 = v77;
        }
      }
      else
      {
        v58 = v80;
      }
      outlined init with take of AST.Atom.Callout(v58, (_OWORD *)a1);
      type metadata accessor for AST.Atom.Kind(0);
      return swift_storeEnumTagMultiPayload();
    }
    v37 = v86;
    v38 = v87;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v68 = v37;
    v39 = String.subscript.getter();
    v41 = v40;
    v43 = v42;
    v45 = v44;
    swift_bridgeObjectRelease();
    v46 = MEMORY[0x1DF0F366C](v39, v41, v43, v45);
    v48 = v47;
    swift_bridgeObjectRelease();
    *(_QWORD *)v80 = 0;
    *(_QWORD *)&v80[8] = 0xE000000000000000;
    _StringGuts.grow(_:)(62);
    v49._object = (void *)0x80000001DF006D20;
    v49._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v49);
    v50._countAndFlagsBits = v46;
    v50._object = v48;
    String.append(_:)(v50);
    v51._countAndFlagsBits = 0xD00000000000002BLL;
    v51._object = (void *)0x80000001DF006D40;
    String.append(_:)(v51);
    v52 = *(_QWORD *)v80;
    v53 = *(_QWORD *)&v80[8];
    v27 = (char *)v2[9];
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v27 + 2) + 1, 1, v27);
    v55 = *((_QWORD *)v27 + 2);
    v54 = *((_QWORD *)v27 + 3);
    v56 = v55 + 1;
    if (v55 >= v54 >> 1)
    {
      v67 = v55 + 1;
      v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v54 > 1), v55 + 1, 1, v27);
      v56 = v67;
      v27 = v65;
    }
    *((_QWORD *)v27 + 2) = v56;
    v57 = &v27[80 * v55];
    v57[32] = 1;
    *((_QWORD *)v57 + 5) = v52;
    *((_QWORD *)v57 + 6) = v53;
    *((_QWORD *)v57 + 7) = v68;
    *((_QWORD *)v57 + 8) = v38;
    *((_QWORD *)v57 + 9) = v46;
    *((_QWORD *)v57 + 10) = v48;
    *((_QWORD *)v57 + 11) = 0;
    *((_QWORD *)v57 + 12) = 0;
    v57[104] = 8;
    goto LABEL_26;
  }
  v14 = v83;
  v15 = v82[16];
  v16 = v80[16];
  v17 = *(_OWORD *)v82;
  *(_OWORD *)a1 = *(_OWORD *)v80;
  *(_BYTE *)(a1 + 16) = v16 & 1;
  *(_QWORD *)(a1 + 24) = v13;
  *(_OWORD *)(a1 + 32) = v17;
  *(_BYTE *)(a1 + 48) = v15 & 1;
  *(_QWORD *)(a1 + 56) = v14;
  type metadata accessor for AST.Atom.Kind(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t Parser.lexGlobalMatchingOption()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  Swift::String v14;
  uint64_t *v15;
  Swift::String v16;
  int64x2_t v17;
  Swift::String v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t result;
  Swift::String v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  int64x2_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  int64x2_t v65;
  char v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  char v81;

  v2 = v1;
  v4 = *(_QWORD *)v1;
  v5 = *(_QWORD *)(v1 + 8);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v61.i32[0] = *(unsigned __int8 *)(v1 + 32);
  v8 = *(_QWORD *)(v1 + 48);
  v59 = *(_QWORD *)(v1 + 56);
  v60 = *(_QWORD *)(v1 + 40);
  v58 = *(_BYTE *)(v1 + 64);
  v9 = *(_QWORD *)(v1 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(_QWORD *)&v62 = v9;
  swift_bridgeObjectRetain();
  if ((specialized Parser.tryEat<A>(sequence:)(10792, 0xE200000000000000) & 1) == 0)
    goto LABEL_49;
  v10 = *(_QWORD *)(v1 + 16);
  if ((specialized Parser.tryEat<A>(sequence:)(0x43594E415F525342, 0xEB00000000464C52) & 1) == 0)
  {
    if ((specialized Parser.tryEat<A>(sequence:)(0x43494E555F525342, 0xEB0000000045444FLL) & 1) != 0)
    {
      v11 = 0;
      v13 = 0x8000000000000000;
      v12 = 1;
      goto LABEL_46;
    }
    if ((specialized Parser.tryEat<A>(sequence:)(1179406915, 0xE400000000000000) & 1) != 0)
    {
      v11 = 0;
      v13 = 0x6000000000000000;
      v12 = 2;
      goto LABEL_46;
    }
    if ((specialized Parser.tryEat<A>(sequence:)(21059, 0xE200000000000000) & 1) != 0)
    {
      v11 = 0;
      v12 = 0;
      v13 = 0x6000000000000000;
      goto LABEL_46;
    }
    if ((specialized Parser.tryEat<A>(sequence:)(0x464C5243594E41, 0xE700000000000000) & 1) != 0)
    {
      v11 = 0;
      v13 = 0x6000000000000000;
      v12 = 3;
      goto LABEL_46;
    }
    if ((specialized Parser.tryEat<A>(sequence:)(5852737, 0xE300000000000000) & 1) != 0)
    {
      v11 = 0;
      v13 = 0x6000000000000000;
      v12 = 4;
      goto LABEL_46;
    }
    if ((specialized Parser.tryEat<A>(sequence:)(17996, 0xE200000000000000) & 1) != 0)
    {
      v11 = 0;
      v13 = 0x6000000000000000;
      v12 = 1;
      goto LABEL_46;
    }
    if ((specialized Parser.tryEat<A>(sequence:)(5002574, 0xE300000000000000) & 1) != 0)
    {
      v11 = 0;
      v13 = 0x6000000000000000;
      v12 = 5;
      goto LABEL_46;
    }
    if ((specialized Parser.tryEat<A>(sequence:)(0x45445F54494D494CLL, 0xEB00000000485450) & 1) != 0)
    {
      v14._countAndFlagsBits = 61;
      v14._object = (void *)0xE100000000000000;
      if (!Parser.tryEat(_:)(v14))
      {
        v68 = xmmword_1DF003F80;
        v69 = 0;
        v70 = 0;
        v71 = 3;
        Parser.errorAtCurrentPosition(_:)(&v68);
      }
      Parser.lexNumber(_:)(1, (uint64_t)&v63);
      if ((v66 & 1) != 0)
      {
        v67 = 0;
        v15 = &v67;
        v13 = 1;
LABEL_34:
        *(_OWORD *)(v15 + 1) = xmmword_1DF003FA0;
        v15[3] = 0;
        *((_BYTE *)v15 + 32) = 2;
        Parser.errorAtCurrentPosition(_:)((__int128 *)v15);
        v12 = 0;
        v11 = *(_QWORD *)(v1 + 16);
        goto LABEL_46;
      }
      v17 = v65;
      v12 = v63;
      v13 = v64 & 1;
    }
    else
    {
      if ((specialized Parser.tryEat<A>(sequence:)(0x45485F54494D494CLL, 0xEA00000000005041) & 1) != 0)
      {
        v16._countAndFlagsBits = 61;
        v16._object = (void *)0xE100000000000000;
        if (!Parser.tryEat(_:)(v16))
        {
          v73 = xmmword_1DF003F80;
          v74 = 0;
          v75 = 0;
          v76 = 3;
          Parser.errorAtCurrentPosition(_:)(&v73);
        }
        Parser.lexNumber(_:)(1, (uint64_t)&v63);
        if ((v66 & 1) != 0)
        {
          v72 = 0;
          v13 = 0x2000000000000001;
          v15 = &v72;
          goto LABEL_34;
        }
        v17 = v65;
        v12 = v63;
        v19 = v64;
        v20 = 0x2000000000000000;
      }
      else
      {
        if ((specialized Parser.tryEat<A>(sequence:)(0x414D5F54494D494CLL, 0xEB00000000484354) & 1) == 0)
        {
          if ((specialized Parser.tryEat<A>(sequence:)(0xD000000000000010, 0x80000001DF007110) & 1) != 0)
          {
            v11 = 0;
            v13 = 0xA000000000000000;
            v12 = 1;
          }
          else if ((specialized Parser.tryEat<A>(sequence:)(0x5954504D45544F4ELL, 0xE800000000000000) & 1) != 0)
          {
            v11 = 0;
            v12 = 0;
            v13 = 0xA000000000000000;
          }
          else if ((specialized Parser.tryEat<A>(sequence:)(0x5F4F5455415F4F4ELL, 0xEF53534553534F50) & 1) != 0)
          {
            v11 = 0;
            v13 = 0xA000000000000000;
            v12 = 2;
          }
          else if ((specialized Parser.tryEat<A>(sequence:)(0xD000000000000011, 0x80000001DF0070F0) & 1) != 0)
          {
            v11 = 0;
            v13 = 0xA000000000000000;
            v12 = 3;
          }
          else if ((specialized Parser.tryEat<A>(sequence:)(0x54494A5F4F4ELL, 0xE600000000000000) & 1) != 0)
          {
            v11 = 0;
            v13 = 0xA000000000000000;
            v12 = 4;
          }
          else if ((specialized Parser.tryEat<A>(sequence:)(0x54524154535F4F4ELL, 0xEC00000054504F5FLL) & 1) != 0)
          {
            v11 = 0;
            v13 = 0xA000000000000000;
            v12 = 5;
          }
          else if ((specialized Parser.tryEat<A>(sequence:)(4609109, 0xE300000000000000) & 1) != 0)
          {
            v11 = 0;
            v13 = 0xA000000000000000;
            v12 = 6;
          }
          else
          {
            if ((specialized Parser.tryEat<A>(sequence:)(5260117, 0xE300000000000000) & 1) == 0)
              goto LABEL_49;
            v11 = 0;
            v13 = 0xA000000000000000;
            v12 = 7;
          }
          goto LABEL_46;
        }
        v18._countAndFlagsBits = 61;
        v18._object = (void *)0xE100000000000000;
        if (!Parser.tryEat(_:)(v18))
        {
          v78 = xmmword_1DF003F80;
          v79 = 0;
          v80 = 0;
          v81 = 3;
          Parser.errorAtCurrentPosition(_:)(&v78);
        }
        Parser.lexNumber(_:)(1, (uint64_t)&v63);
        if ((v66 & 1) != 0)
        {
          v77 = 0;
          v13 = 0x4000000000000001;
          v15 = &v77;
          goto LABEL_34;
        }
        v17 = v65;
        v12 = v63;
        v19 = v64;
        v20 = 0x4000000000000000;
      }
      v13 = v20 & 0xFFFFFFFFFFFFFFFELL | v19 & 1;
    }
    if (v13 >> 1 == 0xFFFFFFFF)
      goto LABEL_49;
    goto LABEL_47;
  }
  v11 = 0;
  v12 = 0;
  v13 = 0x8000000000000000;
LABEL_46:
  v17 = vdupq_n_s64(v11);
LABEL_47:
  if (*(_QWORD *)(v1 + 16) >> 14 < (unint64_t)v10 >> 14)
    goto LABEL_69;
  if (v13 >> 1 != 0xFFFFFFFF)
  {
    v61 = v17;
    v4 = v12;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v39._countAndFlagsBits = 41;
    v39._object = (void *)0xE100000000000000;
    result = Parser.tryEat(_:)(v39);
    if ((result & 1) == 0)
    {
      v62 = xmmword_1DF003F70;
      v78 = xmmword_1DF003F70;
      v79 = 0;
      v80 = 0;
      v81 = 3;
      v7 = *(_QWORD *)(v1 + 16);
      ParseError.description.getter();
      v1 = v40;
      v60 = v41;
      v10 = *(_QWORD *)(v2 + 72);
      result = swift_isUniquelyReferenced_nonNull_native();
      v5 = v6;
      if ((result & 1) != 0)
        goto LABEL_63;
      goto LABEL_71;
    }
    goto LABEL_66;
  }
LABEL_49:
  v57 = v7;
  v13 = *(_QWORD *)(v1 + 72);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  specialized Collection.dropFirst(_:)(*(_QWORD *)(v62 + 16), v13);
  v22 = v21;
  v7 = v23;
  v1 = v24 >> 1;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v25 = v22 - 32;
  v26 = v7;
  v10 = v7;
LABEL_50:
  v27 = v25 + 80 * v26;
  while (1)
  {
    if (v1 == v10)
    {
      swift_bridgeObjectRelease();
      result = swift_unknownObjectRelease_n();
      *(_QWORD *)v2 = v4;
      *(_QWORD *)(v2 + 8) = v5;
      *(_QWORD *)(v2 + 16) = v6;
      *(_QWORD *)(v2 + 24) = v57;
      *(_BYTE *)(v2 + 32) = v61.i8[0];
      *(_QWORD *)(v2 + 40) = v60;
      *(_QWORD *)(v2 + 48) = v8;
      *(_QWORD *)(v2 + 56) = v59;
      *(_BYTE *)(v2 + 64) = v58;
      *(_QWORD *)(v2 + 72) = v62;
      *(_OWORD *)a1 = xmmword_1DF003F10;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      return result;
    }
    if (v26 < v7 || v10 >= v1)
      break;
    v28 = *(unsigned __int8 *)(v27 + 32);
    ++v10;
    v27 += 80;
    if (!v28)
    {
      v52 = v8;
      v53 = v5;
      v55 = a1;
      v56 = v25;
      v50 = v13;
      v54 = v6;
      v48 = *(_QWORD *)(v27 - 24);
      v49 = *(_QWORD *)(v27 - 40);
      v29 = *(_QWORD *)(v27 - 8);
      v46 = *(_QWORD *)(v27 - 32);
      v47 = *(_QWORD *)(v27 - 16);
      v30 = *(_QWORD *)v27;
      v31 = *(_QWORD *)(v27 + 8);
      v32 = *(_QWORD *)(v27 + 16);
      v33 = *(_BYTE *)(v27 + 24);
      swift_bridgeObjectRetain();
      outlined copy of ParseError?(v29, v30, v31, v32, v33);
      v51 = v4;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        *(_QWORD *)&v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v62 + 16) + 1, 1, (char *)v62);
      v35 = *(_QWORD *)(v62 + 16);
      v34 = *(_QWORD *)(v62 + 24);
      v25 = v56;
      if (v35 >= v34 >> 1)
      {
        v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v34 > 1), v35 + 1, 1, (char *)v62);
        v25 = v56;
        *(_QWORD *)&v62 = v37;
      }
      *(_QWORD *)(v62 + 16) = v35 + 1;
      v36 = v62 + 80 * v35;
      *(_BYTE *)(v36 + 32) = 0;
      *(_QWORD *)(v36 + 40) = v49;
      *(_QWORD *)(v36 + 48) = v46;
      *(_QWORD *)(v36 + 56) = v48;
      *(_QWORD *)(v36 + 64) = v47;
      *(_QWORD *)(v36 + 72) = v29;
      *(_QWORD *)(v36 + 80) = v30;
      *(_QWORD *)(v36 + 88) = v31;
      *(_QWORD *)(v36 + 96) = v32;
      *(_BYTE *)(v36 + 104) = v33;
      v26 = v10;
      v6 = v54;
      a1 = v55;
      v8 = v52;
      v5 = v53;
      v13 = v50;
      v4 = v51;
      goto LABEL_50;
    }
  }
  __break(1u);
LABEL_69:
  __break(1u);
  do
  {
    __break(1u);
LABEL_71:
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v10 + 16) + 1, 1, (char *)v10);
    v10 = result;
LABEL_63:
    v43 = *(_QWORD *)(v10 + 16);
    v42 = *(_QWORD *)(v10 + 24);
    if (v43 >= v42 >> 1)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v42 > 1), v43 + 1, 1, (char *)v10);
      v10 = result;
    }
    *(_QWORD *)(v10 + 16) = v43 + 1;
    v44 = v10 + 80 * v43;
    *(_BYTE *)(v44 + 32) = 1;
    *(_QWORD *)(v44 + 40) = v1;
    *(_QWORD *)(v44 + 48) = v60;
    *(_QWORD *)(v44 + 56) = v7;
    *(_QWORD *)(v44 + 64) = v7;
    *(_OWORD *)(v44 + 72) = v62;
    *(_QWORD *)(v44 + 88) = 0;
    *(_QWORD *)(v44 + 96) = 0;
    *(_BYTE *)(v44 + 104) = 3;
    *(_QWORD *)(v2 + 72) = v10;
    v6 = v5;
LABEL_66:
    v45 = *(_QWORD *)(v2 + 16);
  }
  while (v45 >> 14 < v6 >> 14);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v13;
  *(int64x2_t *)(a1 + 16) = v61;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v45;
  return result;
}

uint64_t closure #1 in Parser.expectGroupLikeAtom()()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t inited;
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRetain();
  v0 = String.subscript.getter();
  v2 = v1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v0 ^ v2) < 0x4000)
    return 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Character>);
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 32) = 58;
  *(_OWORD *)(inited + 16) = xmmword_1DF003EC0;
  *(_QWORD *)(inited + 40) = 0xE100000000000000;
  *(_QWORD *)(inited + 48) = 41;
  *(_QWORD *)(inited + 56) = 0xE100000000000000;
  specialized Parser.tryEat<A>(anyOf:)(inited);
  v5 = v4;
  swift_setDeallocating();
  swift_arrayDestroy();
  if (v5)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  return 0;
}

uint64_t Parser.lexAtom()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t result;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v2 = v1;
  v44 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v43 = (uint64_t)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Atom.Kind?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AST.Atom.Kind(0);
  v12 = *(_QWORD *)(v11 - 8);
  v14 = MEMORY[0x1E0C80A78](v11, v13);
  v42 = (uint64_t)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v41 - v17;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>?);
  v21 = MEMORY[0x1E0C80A78](v19, v20);
  v23 = (char *)&v41 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v24);
  v26 = (char *)&v41 - v25;
  v27 = *(_QWORD *)(v2 + 16);
  closure #1 in Parser.lexAtom()((_QWORD *)v2, *(unsigned __int8 *)(v2 + 32), (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of _ASTParent?((uint64_t)v10, &demangling cache variable for type metadata for AST.Atom.Kind?);
    v28 = 1;
  }
  else
  {
    outlined init with take of AST.Atom.Kind((uint64_t)v10, (uint64_t)v18, type metadata accessor for AST.Atom.Kind);
    result = outlined init with take of AST.Atom.Kind((uint64_t)v18, (uint64_t)v26, type metadata accessor for AST.Atom.Kind);
    v30 = *(_QWORD *)(v2 + 16);
    if (v30 >> 14 < v27 >> 14)
    {
      __break(1u);
      return result;
    }
    v28 = 0;
    v31 = &v26[*(int *)(v3 + 28)];
    *(_QWORD *)v31 = v27;
    *((_QWORD *)v31 + 1) = v30;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v26, v28, 1, v3);
  outlined init with take of Source.Located<AST.Atom.Kind>?((uint64_t)v26, (uint64_t)v23, &demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v23, 1, v3) == 1)
  {
    outlined destroy of _ASTParent?((uint64_t)v23, &demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>?);
    v32 = type metadata accessor for AST.Atom(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v44, 1, 1, v32);
  }
  else
  {
    v33 = v43;
    outlined init with take of Source.Located<AST.Atom.Kind>?((uint64_t)v23, v43, &demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>);
    v34 = v42;
    outlined init with copy of AST.Atom(v33, v42, type metadata accessor for AST.Atom.Kind);
    v35 = (uint64_t *)(v33 + *(int *)(v3 + 28));
    v36 = *v35;
    v37 = v35[1];
    outlined destroy of _ASTParent?(v33, &demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>);
    v38 = v44;
    outlined init with take of AST.Atom.Kind(v34, v44, type metadata accessor for AST.Atom.Kind);
    v39 = type metadata accessor for AST.Atom(0);
    v40 = (_QWORD *)(v38 + *(int *)(v39 + 20));
    *v40 = v36;
    v40[1] = v37;
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v38, 0, 1, v39);
  }
}

unint64_t closure #1 in Parser.lexAtom()@<X0>(_QWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  char **v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(_QWORD *, uint64_t, uint64_t, uint64_t);
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  unint64_t v72;
  const char *v73;
  unint64_t v74;
  Swift::String v75;
  char v76;
  char *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  char *v93;
  char v94;
  BOOL v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  char *v104;
  _BYTE v105[4];
  int v106;
  uint64_t v107;
  uint64_t *v108;
  _QWORD *v109;
  _BYTE *v110;
  _BYTE *v111;
  __int128 v112;
  _QWORD *v113;
  unint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  char v120;
  __int128 v121;
  uint64_t v122;
  _OWORD v123[7];
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  _BYTE v127[32];
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  char v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char v140;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.Kind>);
  MEMORY[0x1E0C80A78](v6, v7);
  v108 = (uint64_t *)&v105[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.CharacterProperty>?);
  MEMORY[0x1E0C80A78](v9, v10);
  *(_QWORD *)&v112 = &v105[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for AST.Atom.CharacterProperty(0);
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v111 = &v105[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v14, v16);
  v110 = &v105[-v17];
  v18 = *a1;
  v19 = a1[2];
  v20 = a1[3];
  v113 = a1;
  swift_bridgeObjectRetain();
  v21 = String.subscript.getter();
  v23 = v22;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!((v21 ^ v23) >> 14))
  {
    v24 = type metadata accessor for AST.Atom.Kind(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(a3, 1, 1, v24);
  }
  v109 = (_QWORD *)a3;
  v26 = (uint64_t)v113;
  v106 = a2;
  if ((a2 & 1) == 0)
  {
    v37 = v113[9];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v107 = v37;
    swift_bridgeObjectRetain();
    v38 = String.subscript.getter();
    if ((v38 ^ v39) >> 14)
    {
      a3 = Substring.subscript.getter();
      v40 = v45;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a3 = 0;
      v40 = 0;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v40)
      goto LABEL_17;
    if (a3 == 41 && v40 == 0xE100000000000000)
    {
LABEL_26:
      swift_bridgeObjectRelease();
      goto LABEL_27;
    }
    v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v46 & 1) == 0)
    {
LABEL_17:
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v47 = String.subscript.getter();
      if ((v47 ^ v48) >> 14)
      {
        v19 = Substring.subscript.getter();
        v49 = v64;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v19 = 0;
        v49 = 0;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!v49)
        goto LABEL_4;
      if (v19 == 124 && v49 == 0xE100000000000000)
        goto LABEL_26;
      v76 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v76 & 1) == 0)
        goto LABEL_4;
    }
LABEL_27:
    v65 = type metadata accessor for AST.Atom.Kind(0);
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v109, 1, 1, v65);
  }
LABEL_4:
  v27 = v112;
  Parser.lexPOSIXCharacterProperty()(v112);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.Located<AST.Atom.CharacterProperty>);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 48))(v27, 1, v28) != 1)
  {
    v41 = v111;
    outlined init with copy of AST.Atom(v27, (uint64_t)v111, type metadata accessor for AST.Atom.CharacterProperty);
    outlined destroy of _ASTParent?(v27, &demangling cache variable for type metadata for Source.Located<AST.Atom.CharacterProperty>);
    v42 = v110;
    outlined init with take of AST.Atom.Kind((uint64_t)v41, (uint64_t)v110, type metadata accessor for AST.Atom.CharacterProperty);
    v43 = (uint64_t)v42;
    v36 = v109;
    outlined init with take of AST.Atom.Kind(v43, (uint64_t)v109, type metadata accessor for AST.Atom.CharacterProperty);
    v44 = type metadata accessor for AST.Atom.Kind(0);
LABEL_11:
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v36, 0, 1, v44);
  }
  outlined destroy of _ASTParent?(v27, &demangling cache variable for type metadata for Source.Located<AST.Atom.CharacterProperty>?);
  v29 = v106;
  if ((v106 & 1) == 0)
  {
    v50 = *(_QWORD *)(v26 + 8);
    v51 = *(_BYTE *)(v26 + 32);
    v52 = *(_QWORD *)(v26 + 40);
    v53 = *(_QWORD *)(v26 + 48);
    v54 = *(_QWORD *)(v26 + 56);
    v55 = *(_BYTE *)(v26 + 64);
    v57 = (char **)(v26 + 72);
    v56 = *(_QWORD *)(v26 + 72);
    v126 = *(_QWORD *)v26;
    *(_QWORD *)v127 = v50;
    v112 = *(_OWORD *)(v26 + 16);
    *(_OWORD *)&v127[8] = v112;
    v127[24] = v51;
    *(_QWORD *)&v128 = v52;
    *((_QWORD *)&v128 + 1) = v53;
    *(_QWORD *)&v129 = v54;
    BYTE8(v129) = v55;
    v130 = v56;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    closure #1 in Parser.shouldLexGroupLikeAtom()((uint64_t)&v126, &v114);
    v58 = v130;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v123[0] = v58;
    Diagnostics.appendNewFatalErrors(from:)((_RegexParser::Diagnostics)v123);
    swift_bridgeObjectRelease();
    if (v114 == 1)
    {
      v59 = (uint64_t)v109;
      Parser.expectGroupLikeAtom()((uint64_t)v109);
      v60 = type metadata accessor for AST.Atom.Kind(0);
      v61 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56);
      v62 = (_QWORD *)v59;
LABEL_21:
      v63 = 0;
      return v61(v62, v63, 1, v60);
    }
    v77 = (char *)v26;
    Parser.lexQuantifier()(&v114);
    if ((unint64_t)v115 >> 1 == 0xFFFFFFFF && (unint64_t)v117 < 2)
    {
      _s12_RegexParser6SourceV7LocatedVy_AEy_AA3ASTV14QuantificationV6AmountOG_AEy_AI4KindOGSayAG6TriviaVGtGSgWOi0_(v123);
      outlined init with take of Source.Located<AST.Atom.Kind>?((uint64_t)v123, (uint64_t)&v126, &demangling cache variable for type metadata for Source.Located<(Source.Located<AST.Quantification.Amount>, Source.Located<AST.Quantification.Kind>, [AST.Trivia])>?);
    }
    else
    {
      v78 = *(_QWORD *)(v26 + 16);
      if (v78 >> 14 < (unint64_t)v112 >> 14)
      {
        __break(1u);
        goto LABEL_106;
      }
      *(_OWORD *)v127 = v115;
      *(_OWORD *)&v127[16] = v116;
      v128 = v117;
      v129 = v118;
      v126 = v114;
      v130 = v119;
      v131 = v120;
      v132 = v121;
      v133 = v122;
      v134 = v112;
      v135 = v78;
      AST.root.modify(&v126);
    }
    outlined init with take of Source.Located<AST.Atom.Kind>?((uint64_t)&v126, (uint64_t)&v114, &demangling cache variable for type metadata for Source.Located<(Source.Located<AST.Quantification.Amount>, Source.Located<AST.Quantification.Kind>, [AST.Trivia])>?);
    outlined init with take of Source.Located<AST.Atom.Kind>?((uint64_t)&v114, (uint64_t)v123, &demangling cache variable for type metadata for Source.Located<(Source.Located<AST.Quantification.Amount>, Source.Located<AST.Quantification.Kind>, [AST.Trivia])>?);
    if (_s12_RegexParser6SourceV7LocatedVy_AEy_AA3ASTV14QuantificationV6AmountOG_AEy_AI4KindOGSayAG6TriviaVGtGSgWOg((uint64_t)v123) == 1)
      goto LABEL_6;
    v79 = v124;
    v19 = v125;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v112 = v79;
    v80 = String.subscript.getter();
    v82 = v81;
    v83 = v26;
    v85 = v84;
    v87 = v86;
    swift_bridgeObjectRelease();
    v26 = MEMORY[0x1DF0F366C](v80, v82, v85, v87);
    v18 = v88;
    outlined retain of AST.Conditional.Condition(&v114, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Source.Located<(Source.Located<AST.Quantification.Amount>, Source.Located<AST.Quantification.Kind>, [AST.Trivia])>?);
    swift_bridgeObjectRelease();
    v136 = v26;
    v137 = v18;
    v138 = 0;
    v139 = 0;
    v140 = 12;
    ParseError.description.getter();
    a3 = v89;
    v20 = v90;
    v77 = *(char **)(v83 + 72);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
LABEL_48:
      v92 = *((_QWORD *)v77 + 2);
      v91 = *((_QWORD *)v77 + 3);
      if (v92 >= v91 >> 1)
        v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v91 > 1), v92 + 1, 1, v77);
      *((_QWORD *)v77 + 2) = v92 + 1;
      v93 = &v77[80 * v92];
      v93[32] = 1;
      *((_QWORD *)v93 + 5) = a3;
      *((_QWORD *)v93 + 6) = v20;
      *((_QWORD *)v93 + 7) = v112;
      *((_QWORD *)v93 + 8) = v19;
      *((_QWORD *)v93 + 9) = v26;
      *((_QWORD *)v93 + 10) = v18;
      *((_QWORD *)v93 + 11) = 0;
      *((_QWORD *)v93 + 12) = 0;
      v93[104] = 12;
      swift_bridgeObjectRelease();
      *v57 = v77;
      v44 = type metadata accessor for AST.Atom.Kind(0);
      v36 = v109;
      goto LABEL_11;
    }
LABEL_106:
    v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v77 + 2) + 1, 1, v77);
    goto LABEL_48;
  }
LABEL_6:
  v30 = v29;
  v31 = *(_QWORD *)(v26 + 16);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v32 = String.subscript.getter();
  v34 = v33;
  if (!((v32 ^ v35) >> 14))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    v36 = v109;
LABEL_37:
    v75._object = (void *)0x80000001DF0074C0;
    v75._countAndFlagsBits = 0xD000000000000017;
    Parser.unreachable(_:)(v75);
    v60 = type metadata accessor for AST.Atom.Kind(0);
    v61 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56);
    v62 = v36;
    v63 = 1;
    return v61(v62, v63, 1, v60);
  }
  v66 = v26;
  v67 = Substring.subscript.getter();
  v69 = v68;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  Parser.advance(_:)(1);
  v70 = *(_QWORD *)(v66 + 16);
  v71 = (char *)(v70 >> 14);
  if (v70 >> 14 < v31 >> 14)
  {
    __break(1u);
    goto LABEL_92;
  }
  v36 = v109;
  if (!v69)
    goto LABEL_37;
  if (v67 == 41 && v69 == 0xE100000000000000
    || ((v94 = _stringCompareWithSmolCheck(_:_:expecting:)(), v67 == 124)
      ? (v95 = v69 == 0xE100000000000000)
      : (v95 = 0),
        (v36 = v109, !v95) ? (v96 = 0) : (v96 = 1),
        (v94 & 1) != 0 || (v96 & 1) != 0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if ((v30 & 1) != 0)
    {
LABEL_35:
      *v36 = v67;
      v36[1] = v69;
LABEL_36:
      v44 = type metadata accessor for AST.Atom.Kind(0);
      goto LABEL_11;
    }
    v72 = 0xD00000000000001DLL;
    v73 = "Is as a termination condition";
LABEL_34:
    v74 = (unint64_t)(v73 - 32) | 0x8000000000000000;
    Parser.unreachable(_:)(*(Swift::String *)&v72);
    goto LABEL_35;
  }
  if (v67 == 40 && v69 == 0xE100000000000000)
  {
    if ((v30 & 1) != 0)
      goto LABEL_63;
    goto LABEL_67;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0 && (v30 & 1) == 0)
  {
LABEL_67:
    v72 = 0xD00000000000002CLL;
    v73 = "Should have lexed a group or group-like atom";
    goto LABEL_34;
  }
  if (v67 == 46 && v69 == 0xE100000000000000)
    goto LABEL_70;
LABEL_63:
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
LABEL_70:
    swift_bridgeObjectRelease();
    if ((v30 & 1) == 0)
      goto LABEL_36;
    v97 = 46;
    goto LABEL_77;
  }
  if (v67 == 94 && v69 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    if ((v30 & 1) == 0)
      goto LABEL_36;
    v97 = 94;
    goto LABEL_77;
  }
  if (v67 == 36 && v69 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    if ((v30 & 1) == 0)
      goto LABEL_36;
    v97 = 36;
LABEL_77:
    *v36 = v97;
    v36[1] = 0xE100000000000000;
    goto LABEL_36;
  }
  if (v67 == 92 && v69 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v98 = (uint64_t)v113;
    closure #1 in Parser.expectEscaped()((uint64_t)v113, v108);
    if ((unint64_t)v71 <= *(_QWORD *)(v98 + 16) >> 14)
    {
      v99 = (uint64_t)v109;
      outlined init with take of AST.Atom.Kind((uint64_t)v108, (uint64_t)v109, type metadata accessor for AST.Atom.Kind);
      v60 = type metadata accessor for AST.Atom.Kind(0);
      v61 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56);
      v62 = (_QWORD *)v99;
      goto LABEL_21;
    }
    __break(1u);
    goto LABEL_112;
  }
LABEL_92:
  v36 = v109;
  if (v67 == 93 && v69 == 0xE100000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || (uint64_t)specialized Collection.count.getter(v67, v69) < 2)
  {
    goto LABEL_35;
  }
  swift_bridgeObjectRetain();
  result = specialized Collection.first.getter(v67, v69);
  if ((result & 0x100000000) == 0)
  {
    if ((result & 0xFFFFFF80) != 0
      || v67 == 2573 && v69 == 0xE200000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
      || (Character.isLetter.getter() & 1) != 0
      || (Character.isNumber.getter() & 1) != 0)
    {
      swift_bridgeObjectRelease();
LABEL_104:
      v36 = v109;
      goto LABEL_35;
    }
    v126 = v67;
    *(_QWORD *)v127 = v69;
    *(_OWORD *)&v127[8] = 0uLL;
    v127[24] = 11;
    swift_bridgeObjectRetain();
    ParseError.description.getter();
    v98 = v100;
    v34 = v101;
    v71 = (char *)v113[9];
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
LABEL_108:
      v103 = *((_QWORD *)v71 + 2);
      v102 = *((_QWORD *)v71 + 3);
      if (v103 >= v102 >> 1)
        v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v102 > 1), v103 + 1, 1, v71);
      *((_QWORD *)v71 + 2) = v103 + 1;
      v104 = &v71[80 * v103];
      v104[32] = 1;
      *((_QWORD *)v104 + 5) = v98;
      *((_QWORD *)v104 + 6) = v34;
      *((_QWORD *)v104 + 7) = v31;
      *((_QWORD *)v104 + 8) = v70;
      *((_QWORD *)v104 + 9) = v67;
      *((_QWORD *)v104 + 10) = v69;
      *((_QWORD *)v104 + 11) = 0;
      *((_QWORD *)v104 + 12) = 0;
      v104[104] = 11;
      swift_bridgeObjectRelease_n();
      v113[9] = v71;
      goto LABEL_104;
    }
LABEL_112:
    v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v71 + 2) + 1, 1, v71);
    goto LABEL_108;
  }
  __break(1u);
  return result;
}

unint64_t Character.isConfusable.getter(unint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  char v7;
  char v8;

  v4 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v4 = a1;
  v5 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v5 = 11;
  if ((uint64_t)String.UnicodeScalarView.distance(from:to:)(0xFuLL, v5 | (v4 << 16), a1, a2) < 2)
    goto LABEL_10;
  result = specialized Collection.first.getter(a1, a2);
  if ((result & 0x100000000) == 0)
  {
    if ((result & 0xFFFFFF80) == 0 && (a1 != 2573 || a2 != 0xE200000000000000))
    {
      v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v7 = 0;
      if ((v8 & 1) != 0)
        return v7 & 1;
      if ((Character.isLetter.getter() & 1) == 0)
      {
        v7 = Character.isNumber.getter() ^ 1;
        return v7 & 1;
      }
    }
LABEL_10:
    v7 = 0;
    return v7 & 1;
  }
  __break(1u);
  return result;
}

_RegexParser::AST::CustomCharacterClass::SetOp_optional Parser.lexCustomCharacterClassRangeOperator()@<W0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _RegexParser::AST::CustomCharacterClass::SetOp_optional result;
  Swift::String v4;
  unint64_t v5;
  __int128 v6;
  char v7;

  v6 = *(_OWORD *)(v1 + 16);
  result.value = Parser.peekCCBinOp()().value;
  if (v7 == 3
    && (v4._countAndFlagsBits = 45,
        v4._object = (void *)0xE100000000000000,
        result.value = Parser.tryEat(_:)(v4),
        (result.value & 1) != 0))
  {
    v5 = *(_QWORD *)(v1 + 16);
    if (v5 >> 14 < (unint64_t)v6 >> 14)
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)a1 = v6;
      *(_QWORD *)(a1 + 8) = v5;
      *(_BYTE *)(a1 + 16) = 0;
    }
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 1;
  }
  return result;
}

_RegexParser::AST::GlobalMatchingOptionSequence_optional __swiftcall Parser.lexGlobalMatchingOptionSequence()()
{
  char **v0;
  char **v1;
  void *v2;
  Swift::Bool v3;
  unint64_t v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  char *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  _RegexParser::AST::GlobalMatchingOptionSequence_optional result;

  v1 = v0;
  v2 = (void *)Parser.lexGlobalMatchingOption()((uint64_t)&v17);
  v4 = v18;
  v5 = (char *)MEMORY[0x1E0DEE9D8];
  if (v18 >> 1 != 0xFFFFFFFF)
  {
    v7 = v19;
    v6 = v20;
    do
    {
      v15 = v7;
      v16 = v6;
      v8 = v17;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v5 + 2) + 1, 1, v5);
      v10 = *((_QWORD *)v5 + 2);
      v9 = *((_QWORD *)v5 + 3);
      v12 = v15;
      v11 = v16;
      if (v10 >= v9 >> 1)
      {
        v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1, v5);
        v12 = v15;
        v11 = v16;
        v5 = v14;
      }
      *((_QWORD *)v5 + 2) = v10 + 1;
      v13 = &v5[48 * v10];
      *((_QWORD *)v13 + 4) = v8;
      *((_QWORD *)v13 + 5) = v4;
      *((_OWORD *)v13 + 3) = v12;
      *((_OWORD *)v13 + 4) = v11;
      v2 = (void *)Parser.lexGlobalMatchingOption()((uint64_t)&v17);
      v4 = v18;
      v7 = v19;
      v6 = v20;
    }
    while (v18 >> 1 != 0xFFFFFFFF);
  }
  if (!*((_QWORD *)v5 + 2))
  {
    v2 = (void *)swift_bridgeObjectRelease();
    v5 = 0;
  }
  *v1 = v5;
  result.value.options._rawValue = v2;
  result.is_nil = v3;
  return result;
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;

  if (!*(_QWORD *)(a3 + 16))
    return 0;
  Hasher.init(_seed:)();
  String.hash(into:)();
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(a3 + 32);
  v8 = v6 & ~v7;
  v9 = a3 + 56;
  if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
    return 0;
  v10 = ~v7;
  v11 = *(_QWORD *)(a3 + 48);
  while (1)
  {
    v12 = (_QWORD *)(v11 + 16 * v8);
    v13 = *v12 == a1 && v12[1] == a2;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      break;
    v8 = (v8 + 1) & v10;
    if (((*(_QWORD *)(v9 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
      return 0;
  }
  return 1;
}

void static SyntaxOptions.experimentalRanges.getter(_QWORD *a1@<X8>)
{
  *a1 = 16;
}

void static SyntaxOptions.experimentalCaptures.getter(_QWORD *a1@<X8>)
{
  *a1 = 32;
}

void static SyntaxOptions.experimentalQuotes.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

void static SyntaxOptions.experimentalComments.getter(_QWORD *a1@<X8>)
{
  *a1 = 8;
}

void static SyntaxOptions.nonSemanticWhitespace.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static SyntaxOptions.endOfLineComments.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

uint64_t Parser.parse()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  Swift::String v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  Swift::String v20;
  uint64_t v21;
  char *v23;
  uint64_t v24;

  Parser.lexGlobalMatchingOptionSequence()();
  v3 = v24;
  if (v24)
  {
    v4 = *(_QWORD *)(v24 + 16);
    v5 = v24 + 48 * v4 + 32;
    v6 = v4 + 1;
    while (--v6)
    {
      v7 = (_QWORD *)(v5 - 48);
      v8 = *(_QWORD *)(v5 - 40) >> 61;
      v5 -= 48;
      if (v8 == 3)
      {
        *(_BYTE *)(v1 + 64) = *v7;
        break;
      }
    }
  }
  Parser.parseNode()(&v24);
  v9 = v24;
  v10 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRetain();
  v11 = String.subscript.getter();
  v13 = v12;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v11 ^ v13) >= 0x4000)
  {
    v14._countAndFlagsBits = 41;
    v14._object = (void *)0xE100000000000000;
    if (!Parser.tryEat(_:)(v14))
    {
      v20._object = (void *)0x80000001DF0073A0;
      v20._countAndFlagsBits = 0xD00000000000001FLL;
      Parser.unreachable(_:)(v20);
      goto LABEL_14;
    }
    v15 = *(_QWORD *)(v1 + 16);
    if (v15 >> 14 < v10 >> 14)
    {
      __break(1u);
    }
    else
    {
      v11 = *(_QWORD *)(v1 + 72);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
LABEL_10:
        v17 = *(_QWORD *)(v11 + 16);
        v16 = *(_QWORD *)(v11 + 24);
        v18 = v17 + 1;
        if (v17 >= v16 >> 1)
        {
          v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1, (char *)v11);
          v18 = v17 + 1;
          v11 = (uint64_t)v23;
        }
        *(_QWORD *)(v11 + 16) = v18;
        v19 = v11 + 80 * v17;
        *(_BYTE *)(v19 + 32) = 1;
        *(_QWORD *)(v19 + 40) = 0xD000000000000030;
        *(_QWORD *)(v19 + 48) = 0x80000001DF006AE0;
        *(_QWORD *)(v19 + 56) = v10;
        *(_QWORD *)(v19 + 64) = v15;
        *(_QWORD *)(v19 + 72) = 10;
        *(_QWORD *)(v19 + 80) = 0;
        *(_QWORD *)(v19 + 88) = 0;
        *(_QWORD *)(v19 + 96) = 0;
        *(_BYTE *)(v19 + 104) = 36;
        *(_QWORD *)(v1 + 72) = v11;
        goto LABEL_14;
      }
    }
    v11 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v11 + 16) + 1, 1, (char *)v11);
    goto LABEL_10;
  }
LABEL_14:
  v21 = *(_QWORD *)(v1 + 72);
  *a1 = v9;
  a1[1] = v3;
  a1[2] = v21;
  return swift_bridgeObjectRetain();
}

uint64_t Parser.parseNode()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  Swift::String v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  Swift::String v19;
  uint64_t v20;
  unint64_t v21;

  v3 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRetain();
  v4 = String.subscript.getter();
  v6 = v5;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!((v4 ^ v6) >> 14))
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
    *(_QWORD *)(result + 24) = v3;
    *a1 = result | 0xB000000000000000;
    return result;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Node>);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1DF003EB0;
  Parser.parseConcatenation()((unint64_t *)(v8 + 32));
  v9 = *(_QWORD *)(v1 + 16);
  v10._countAndFlagsBits = 124;
  v10._object = (void *)0xE100000000000000;
  result = Parser.tryEat(_:)(v10);
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  if ((result & 1) != 0)
  {
    while (1)
    {
      v12 = *(_QWORD *)(v1 + 16);
      if (v12 >> 14 < v9 >> 14)
        break;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
      v14 = *((_QWORD *)v11 + 2);
      v13 = *((_QWORD *)v11 + 3);
      if (v14 >= v13 >> 1)
        v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, v11);
      *((_QWORD *)v11 + 2) = v14 + 1;
      v15 = &v11[16 * v14];
      *((_QWORD *)v15 + 4) = v9;
      *((_QWORD *)v15 + 5) = v12;
      Parser.parseConcatenation()(&v21);
      v16 = v21;
      v18 = *(_QWORD *)(v8 + 16);
      v17 = *(_QWORD *)(v8 + 24);
      if (v18 >= v17 >> 1)
        v8 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v17 > 1), v18 + 1, 1, (char *)v8);
      *(_QWORD *)(v8 + 16) = v18 + 1;
      *(_QWORD *)(v8 + 8 * v18 + 32) = v16;
      v9 = *(_QWORD *)(v1 + 16);
      v19._countAndFlagsBits = 124;
      v19._object = (void *)0xE100000000000000;
      result = Parser.tryEat(_:)(v19);
      if ((result & 1) == 0)
        goto LABEL_12;
    }
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
LABEL_12:
  v20 = *(_QWORD *)(v8 + 16);
  if (v20 == 1)
  {
    result = swift_bridgeObjectRelease();
    if (*(_QWORD *)(v8 + 16))
    {
      *a1 = *(_QWORD *)(v8 + 32);
      swift_retain();
      return swift_bridgeObjectRelease();
    }
    goto LABEL_19;
  }
  result = swift_allocObject();
  if (!v20)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (*((_QWORD *)v11 + 2) == v20 - 1)
  {
    *(_QWORD *)(result + 16) = v8;
    *(_QWORD *)(result + 24) = v11;
    *a1 = result;
    return result;
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t Parser.parseConcatenation()@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  uint64_t result;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  int64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int8 v85;
  uint64_t v86;
  unsigned __int8 v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  char v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  Swift::String v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;

  v136 = (char *)MEMORY[0x1E0DEE9D8];
  v2 = *(_QWORD *)(v1 + 16);
  v130 = v2;
  while (1)
  {
    swift_bridgeObjectRetain();
    v4 = String.subscript.getter();
    v6 = v5;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v4 ^ v6) < 0x4000)
      goto LABEL_72;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v7 = String.subscript.getter();
    v9 = v8;
    swift_bridgeObjectRelease();
    if ((v7 ^ v9) >> 14)
    {
      v10 = Substring.subscript.getter();
      v12 = v11;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v12)
      {
        if (v10 == 124 && v12 == 0xE100000000000000)
        {
LABEL_71:
          swift_bridgeObjectRelease();
          goto LABEL_72;
        }
        v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v13 & 1) != 0)
          goto LABEL_72;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14 = String.subscript.getter();
    v16 = v15;
    swift_bridgeObjectRelease();
    if ((v14 ^ v16) >> 14)
    {
      v17 = Substring.subscript.getter();
      v19 = v18;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v19)
      {
        if (v17 == 41 && v19 == 0xE100000000000000)
          goto LABEL_71;
        v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v20 & 1) != 0)
          goto LABEL_72;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v21 = v137;
    result = closure #1 in Parser.lexComment()(v137, &v138);
    v23 = v139;
    if (v139)
    {
      v24 = *(_QWORD *)(v137 + 16);
      if (v24 >> 14 >= v2 >> 14)
      {
        v25 = v138;
LABEL_20:
        v26 = swift_allocObject();
        *(_QWORD *)(v26 + 16) = v25;
        *(_QWORD *)(v26 + 24) = v23;
        *(_QWORD *)(v26 + 32) = v2;
        *(_QWORD *)(v26 + 40) = v24;
        v27 = v136;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v136 + 2) + 1, 1, v136);
        v29 = *((_QWORD *)v27 + 2);
        v28 = *((_QWORD *)v27 + 3);
        v30 = v29 + 1;
        if (v29 >= v28 >> 1)
          v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v28 > 1), v29 + 1, 1, v27);
        v3 = v26 | 0x6000000000000000;
        goto LABEL_3;
      }
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
      goto LABEL_87;
    }
    if ((*(_BYTE *)(v137 + 56) & 1) != 0)
    {
      v31 = *(_QWORD *)(v137 + 8);
      v32 = *(_QWORD *)(v137 + 16);
      v33 = *(_QWORD *)(v137 + 24);
      v138 = *(_QWORD *)v137;
      v139 = v31;
      v140 = v32;
      v141 = v33;
      v34 = specialized Source.peekPrefix(maxLength:_:)(0, 1);
      if (v37)
      {
        v38 = v35;
        v39 = v37;
        v40 = v34;
        v134 = v36;
        v24 = v32;
        if (Substring.distance(from:to:)() >= 1)
        {
          swift_bridgeObjectRetain();
          String.subscript.getter();
          swift_bridgeObjectRelease();
          v41 = Substring.index(_:offsetBy:limitedBy:)();
          v43 = v42;
          result = swift_bridgeObjectRelease();
          v24 = v32;
          if ((v43 & 1) == 0)
          {
            if (v33 >> 14 < v41 >> 14)
              goto LABEL_85;
            *(_QWORD *)(v137 + 16) = v41;
            *(_QWORD *)(v137 + 24) = v33;
            v24 = v41;
          }
        }
        v25 = MEMORY[0x1DF0F366C](v40, v38, v134, v39);
        v23 = v44;
        result = swift_bridgeObjectRelease();
        if (v24 >> 14 < v32 >> 14)
          goto LABEL_84;
        v21 = v137;
        if (v23)
        {
          v2 = v32;
          goto LABEL_20;
        }
      }
    }
    v45 = *(_QWORD *)(v21 + 16);
    result = closure #1 in Parser.lexQuote()(v21, &v138);
    v46 = v139;
    if (v139)
    {
      v47 = *(_QWORD *)(v21 + 16);
      if (v47 >> 14 < v45 >> 14)
        goto LABEL_83;
      v48 = v138;
      v49 = swift_allocObject();
      *(_QWORD *)(v49 + 16) = v48;
      *(_QWORD *)(v49 + 24) = v46;
      *(_QWORD *)(v49 + 32) = v45;
      *(_QWORD *)(v49 + 40) = v47;
      v27 = v136;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v136 + 2) + 1, 1, v136);
      v29 = *((_QWORD *)v27 + 2);
      v50 = *((_QWORD *)v27 + 3);
      v30 = v29 + 1;
      if (v29 >= v50 >> 1)
        v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v50 > 1), v29 + 1, 1, v27);
      v3 = v49 | 0x5000000000000000;
      goto LABEL_3;
    }
    Parser.lexInterpolation()((uint64_t)&v138);
    v51 = v139;
    if (v139)
    {
      v53 = v140;
      v52 = v141;
      v54 = v138;
      v55 = swift_allocObject();
      *(_QWORD *)(v55 + 16) = v54;
      *(_QWORD *)(v55 + 24) = v51;
      *(_QWORD *)(v55 + 32) = v53;
      *(_QWORD *)(v55 + 40) = v52;
      v27 = v136;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v136 + 2) + 1, 1, v136);
      v29 = *((_QWORD *)v27 + 2);
      v56 = *((_QWORD *)v27 + 3);
      v30 = v29 + 1;
      if (v29 >= v56 >> 1)
        v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v56 > 1), v29 + 1, 1, v27);
      v3 = v55 | 0x7000000000000000;
      goto LABEL_3;
    }
    Parser.parseQuantifierOperand()(&v138);
    v57 = v138;
    if ((~v138 & 0xF000000000000007) == 0)
      break;
    v59 = *(_QWORD *)v21;
    v58 = *(_QWORD *)(v21 + 8);
    v60 = *(_QWORD *)(v21 + 16);
    v128 = *(_QWORD *)(v21 + 24);
    v126 = *(_BYTE *)(v21 + 32);
    v61 = *(_QWORD *)(v21 + 48);
    v122 = *(_QWORD *)(v21 + 56);
    v124 = *(_QWORD *)(v21 + 40);
    v120 = *(_BYTE *)(v21 + 64);
    v62 = *(_QWORD *)(v21 + 72);
    swift_bridgeObjectRetain();
    v132 = v61;
    swift_bridgeObjectRetain();
    v135 = v62;
    swift_bridgeObjectRetain();
    closure #1 in Parser.lexQuantifier()(v21, (uint64_t)&v138);
    v63 = v141;
    v65 = v142;
    v64 = v143;
    v131 = v57;
    if (v139 >> 1 == 0xFFFFFFFF && v143 < 2)
    {
      v116 = v60;
      v118 = v58;
      v66 = v137;
      v67 = *(_QWORD *)(v137 + 72);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v68 = specialized Collection.dropFirst(_:)(*(_QWORD *)(v135 + 16), v67);
      v70 = v69;
      v72 = v71;
      v74 = v73 >> 1;
      swift_bridgeObjectRetain();
      result = swift_unknownObjectRetain();
      v75 = v70 - 32;
      v76 = v72;
      v77 = v72;
      v78 = v132;
LABEL_50:
      v79 = v75 + 80 * v76;
      while (v74 != v77)
      {
        if (v76 < v72 || v77 >= v74)
        {
          __break(1u);
          goto LABEL_82;
        }
        v80 = *(unsigned __int8 *)(v79 + 32);
        ++v77;
        v79 += 80;
        if (!v80)
        {
          v112 = v68;
          v114 = v59;
          v115 = v75;
          v108 = *(_QWORD *)(v79 - 24);
          v109 = *(_QWORD *)(v79 - 40);
          v81 = *(_QWORD *)(v79 - 8);
          v107 = *(_QWORD *)(v79 - 16);
          v83 = *(_QWORD *)v79;
          v82 = *(_QWORD *)(v79 + 8);
          v84 = *(_QWORD *)(v79 + 16);
          v85 = *(_BYTE *)(v79 + 24);
          v111 = *(_QWORD *)(v79 - 32);
          swift_bridgeObjectRetain();
          v110 = v83;
          v86 = v83;
          v87 = v85;
          outlined copy of ParseError?(v81, v86, v82, v84, v85);
          result = swift_isUniquelyReferenced_nonNull_native();
          v113 = v67;
          if ((result & 1) == 0)
          {
            result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v135 + 16) + 1, 1, (char *)v135);
            v135 = result;
          }
          v89 = *(_QWORD *)(v135 + 16);
          v88 = *(_QWORD *)(v135 + 24);
          v75 = v115;
          if (v89 >= v88 >> 1)
          {
            result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v88 > 1), v89 + 1, 1, (char *)v135);
            v75 = v115;
            v135 = result;
          }
          *(_QWORD *)(v135 + 16) = v89 + 1;
          v90 = v135 + 80 * v89;
          *(_BYTE *)(v90 + 32) = 0;
          *(_QWORD *)(v90 + 40) = v109;
          v68 = v112;
          *(_QWORD *)(v90 + 48) = v111;
          *(_QWORD *)(v90 + 56) = v108;
          *(_QWORD *)(v90 + 64) = v107;
          *(_QWORD *)(v90 + 72) = v81;
          *(_QWORD *)(v90 + 80) = v110;
          *(_QWORD *)(v90 + 88) = v82;
          *(_QWORD *)(v90 + 96) = v84;
          *(_BYTE *)(v90 + 104) = v87;
          v76 = v77;
          v66 = v137;
          v57 = v131;
          v78 = v132;
          v67 = v113;
          v59 = v114;
          goto LABEL_50;
        }
      }
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease_n();
      *(_QWORD *)v66 = v59;
      *(_QWORD *)(v66 + 8) = v118;
      *(_QWORD *)(v66 + 16) = v116;
      *(_QWORD *)(v66 + 24) = v128;
      *(_BYTE *)(v66 + 32) = v126;
      *(_QWORD *)(v66 + 40) = v124;
      *(_QWORD *)(v66 + 48) = v78;
      *(_QWORD *)(v66 + 56) = v122;
      *(_BYTE *)(v66 + 64) = v120;
      v98 = v136;
      *(_QWORD *)(v66 + 72) = v135;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v98 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v136 + 2) + 1, 1, v136);
      v100 = *((_QWORD *)v98 + 2);
      v99 = *((_QWORD *)v98 + 3);
      if (v100 >= v99 >> 1)
        v98 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v99 > 1), v100 + 1, 1, v98);
      *((_QWORD *)v98 + 2) = v100 + 1;
      v136 = v98;
      *(_QWORD *)&v98[8 * v100 + 32] = v57;
      v2 = *(_QWORD *)(v66 + 16);
    }
    else
    {
      v119 = v149;
      v121 = v144;
      v91 = v139;
      v123 = v147;
      v125 = v146;
      v127 = v145;
      v129 = v150;
      v92 = v140;
      v93 = v138;
      v117 = v151;
      v94 = v148;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v95 = *(_QWORD *)(v137 + 16);
      if (v95 >> 14 < v2 >> 14)
        goto LABEL_88;
      v96 = swift_allocObject();
      *(_QWORD *)(v96 + 16) = v93;
      *(_QWORD *)(v96 + 24) = v91;
      *(_QWORD *)(v96 + 32) = v92;
      *(_QWORD *)(v96 + 40) = v63;
      *(_QWORD *)(v96 + 48) = v65;
      *(_QWORD *)(v96 + 56) = v64;
      *(_QWORD *)(v96 + 64) = v121;
      *(_QWORD *)(v96 + 72) = v127;
      *(_QWORD *)(v96 + 80) = v125;
      *(_QWORD *)(v96 + 88) = v123;
      *(_BYTE *)(v96 + 96) = v94;
      *(_QWORD *)(v96 + 104) = v119;
      *(_QWORD *)(v96 + 112) = v129;
      *(_QWORD *)(v96 + 120) = v131;
      *(_QWORD *)(v96 + 128) = v2;
      *(_QWORD *)(v96 + 136) = v95;
      *(_QWORD *)(v96 + 144) = v117;
      v27 = v136;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v136 + 2) + 1, 1, v136);
      v21 = v137;
      v29 = *((_QWORD *)v27 + 2);
      v97 = *((_QWORD *)v27 + 3);
      v30 = v29 + 1;
      if (v29 >= v97 >> 1)
        v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v97 > 1), v29 + 1, 1, v27);
      v3 = v96 | 0x4000000000000000;
LABEL_3:
      *((_QWORD *)v27 + 2) = v30;
      v136 = v27;
      *(_QWORD *)&v27[8 * v29 + 32] = v3;
      v2 = *(_QWORD *)(v21 + 16);
    }
  }
  v106._object = (void *)0x80000001DF0073E0;
  v106._countAndFlagsBits = 0xD000000000000023;
  Parser.unreachable(_:)(v106);
LABEL_72:
  v101 = *((_QWORD *)v136 + 2);
  if (!v101)
  {
    result = swift_allocObject();
    v102 = *(_QWORD *)(v137 + 16);
    if (v102 >> 14 >= v130 >> 14)
    {
      v103 = result;
      *(_QWORD *)(result + 16) = v130;
      *(_QWORD *)(result + 24) = v102;
      result = swift_bridgeObjectRelease();
      v104 = v103 | 0xB000000000000000;
LABEL_79:
      *a1 = v104;
      return result;
    }
    goto LABEL_86;
  }
  if (v101 == 1)
  {
    *a1 = *((_QWORD *)v136 + 4);
    swift_retain();
    return swift_bridgeObjectRelease();
  }
  result = swift_allocObject();
  v105 = *(_QWORD *)(v137 + 16);
  if (v105 >> 14 >= v130 >> 14)
  {
    *(_QWORD *)(result + 16) = v136;
    *(_QWORD *)(result + 24) = v130;
    *(_QWORD *)(result + 32) = v105;
    v104 = result | 0x1000000000000000;
    goto LABEL_79;
  }
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
  return result;
}

uint64_t Parser.parseQuantifierOperand()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  char v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 *v44;
  int EnumCaseMultiPayload;
  unint64_t *v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  unint64_t v58;
  uint64_t *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  _OWORD v70[7];
  __int128 v71;
  __int128 v72[8];
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  char v78;
  unint64_t v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  _BYTE v86[32];
  __int128 v87;
  __int128 v88;
  _BYTE v89[144];
  _OWORD v90[9];

  v59 = a1;
  v2 = type metadata accessor for AST.Atom.Kind(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Atom?);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AST.Atom(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = *(_QWORD *)(v1 + 16);
  Parser.lexKnownConditionalStart()(&v81);
  outlined init with take of AST.Conditional.Condition?((uint64_t)&v81, (uint64_t)v89);
  outlined init with take of AST.Conditional.Condition?((uint64_t)v89, (uint64_t)v90);
  if (_s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOSgWOg((uint64_t)v90) != 1)
  {
    *(_OWORD *)&v86[16] = v90[6];
    v87 = v90[7];
    v88 = v90[8];
    v83 = v90[2];
    v84 = v90[3];
    v85 = v90[4];
    *(_OWORD *)v86 = v90[5];
    v81 = v90[0];
    v82 = v90[1];
    Parser.parseConditionalBranches(start:_:)(v58, &v81, (unint64_t)&v60);
    result = outlined release of AST.Conditional.Condition?((uint64_t)v89);
    v22 = v60;
    goto LABEL_13;
  }
  v15 = (uint64_t)v9;
  *((_QWORD *)&v57 + 1) = v2;
  v16 = (uint64_t)v5;
  Parser.lexGroupConditionalStart()((uint64_t)&v73);
  v17 = v78;
  if (v78 != -1)
  {
    v23 = *((_QWORD *)&v77 + 1);
    v57 = v76;
    *((_QWORD *)&v55 + 1) = v77;
    v56 = v75;
    v24 = *((_QWORD *)&v74 + 1);
    v25 = v74;
    v26 = *((_QWORD *)&v73 + 1);
    v27 = v73;
    v60 = v73;
    v61 = v74;
    v62 = v75;
    v63 = v76;
    v64 = v77;
    LOBYTE(v65) = v78;
    *((_QWORD *)&v65 + 1) = v79;
    *(_QWORD *)&v66 = v80;
    Parser.parseGroupBody(start:_:)(v79, (uint64_t)&v60, (uint64_t)&v81);
    outlined consume of Source.Located<AST.Group.Kind>?(v27, v26, v25, v24, v56, *((uint64_t *)&v56 + 1), v57, *((uint64_t *)&v57 + 1), *((uint64_t *)&v55 + 1), v23, v17);
    v70[4] = v85;
    v70[5] = *(_OWORD *)v86;
    v70[6] = *(_OWORD *)&v86[16];
    v71 = v87;
    v70[0] = v81;
    v70[1] = v82;
    v70[2] = v83;
    v70[3] = v84;
    v72[6] = *(_OWORD *)&v86[16];
    v72[7] = v87;
    v72[4] = v85;
    v72[5] = *(_OWORD *)v86;
    v72[2] = v83;
    v72[3] = v84;
    v72[0] = v81;
    v72[1] = v82;
    _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOi2_((uint64_t)v72);
    v28 = v71;
    outlined init with take of AST.Conditional.Condition.Kind(v72, &v81);
    v88 = v28;
    v66 = *(_OWORD *)&v86[16];
    v67 = v87;
    v68 = v28;
    v62 = v83;
    v63 = v84;
    v64 = v85;
    v65 = *(_OWORD *)v86;
    v60 = v81;
    v61 = v82;
    Parser.parseConditionalBranches(start:_:)(v58, &v60, (unint64_t)&v69);
    result = outlined release of AST.Group((uint64_t)v70);
    v22 = v69;
    goto LABEL_13;
  }
  Parser.lexAbsentFunctionStart()((uint64_t)&v81);
  v18 = v81;
  if (v81 != 2)
  {
    v29 = v82;
    v30 = *((_QWORD *)&v81 + 1);
    v31 = swift_allocObject();
    LOBYTE(v81) = v18 & 1;
    *((_QWORD *)&v81 + 1) = v30;
    *(_QWORD *)&v82 = v29;
    result = Parser.parseAbsentFunctionBody(_:)((uint64_t)&v81, v31 + 16);
    v32 = 0xA000000000000000;
LABEL_11:
    v22 = v31 | v32;
    goto LABEL_13;
  }
  Parser.lexGroupStart()((uint64_t)&v81);
  v19 = v86[0];
  if (v86[0] != 0xFF)
  {
    v56 = *(_OWORD *)&v86[8];
    v55 = v85;
    *((_QWORD *)&v57 + 1) = *((_QWORD *)&v84 + 1);
    v33 = v84;
    v34 = *((_QWORD *)&v83 + 1);
    v35 = v83;
    v36 = *((_QWORD *)&v82 + 1);
    v37 = v82;
    v54 = v82;
    v38 = *((_QWORD *)&v81 + 1);
    v39 = v81;
    v53 = v81;
    *(_QWORD *)&v57 = swift_allocObject();
    *(_QWORD *)&v81 = v39;
    *((_QWORD *)&v81 + 1) = v38;
    *(_QWORD *)&v82 = v37;
    *((_QWORD *)&v82 + 1) = v36;
    *(_QWORD *)&v83 = v35;
    *((_QWORD *)&v83 + 1) = v34;
    *(_QWORD *)&v84 = v33;
    *((_QWORD *)&v84 + 1) = *((_QWORD *)&v57 + 1);
    v40 = v55;
    v85 = v55;
    v86[0] = v19;
    *(_OWORD *)&v86[8] = v56;
    Parser.parseGroupBody(start:_:)(v58, (uint64_t)&v81, v57 + 16);
    result = outlined consume of Source.Located<AST.Group.Kind>?(v53, *((uint64_t *)&v53 + 1), v54, *((uint64_t *)&v54 + 1), v35, v34, v33, *((uint64_t *)&v57 + 1), v40, *((uint64_t *)&v40 + 1), v19);
    v22 = v57 | 0x2000000000000000;
    goto LABEL_13;
  }
  Parser.lexCustomCCStart()(&v81);
  v20 = v81;
  if (v81 != 2)
  {
    v41 = v82;
    v42 = *((_QWORD *)&v81 + 1);
    v31 = swift_allocObject();
    LOBYTE(v81) = v20 & 1;
    *((_QWORD *)&v81 + 1) = v42;
    *(_QWORD *)&v82 = v41;
    result = Parser.parseCustomCharacterClass(_:)((unsigned __int8 *)&v81, (_BYTE *)(v31 + 16));
    v32 = 0x9000000000000000;
    goto LABEL_11;
  }
  Parser.lexAtom()(v15);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v15, 1, v10) == 1)
  {
    result = outlined destroy of _ASTParent?(v15, &demangling cache variable for type metadata for AST.Atom?);
    v22 = 0xF000000000000007;
LABEL_13:
    *v59 = v22;
    return result;
  }
  v43 = (uint64_t)v14;
  outlined init with take of AST.Atom.Kind(v15, (uint64_t)v14, type metadata accessor for AST.Atom);
  v44 = (__int128 *)v16;
  outlined init with copy of AST.Atom((uint64_t)v14, v16, type metadata accessor for AST.Atom.Kind);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v46 = (unint64_t *)v59;
  if (EnumCaseMultiPayload == 13)
  {
    v47 = *(_BYTE *)(v16 + 16);
    v48 = *(_QWORD *)(v16 + 24);
    v49 = *(_BYTE *)(v16 + 48);
    v50 = *(_QWORD *)(v16 + 56);
    v81 = *v44;
    LOBYTE(v82) = v47;
    *((_QWORD *)&v82 + 1) = v48;
    v83 = v44[2];
    LOBYTE(v84) = v49;
    *((_QWORD *)&v84 + 1) = v50;
    Parser.applySyntaxOptions(of:isScoped:)(&v81);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of AST.Atom(v16, type metadata accessor for AST.Atom.Kind);
  }
  v51 = swift_allocBox();
  result = outlined init with take of AST.Atom.Kind(v43, v52, type metadata accessor for AST.Atom);
  *v46 = v51 | 0x8000000000000000;
  return result;
}

_QWORD *Parser.parseConditionalBranches(start:_:)@<X0>(unint64_t a1@<X0>, __int128 *a2@<X1>, unint64_t a3@<X8>)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  Swift::String v27;
  uint64_t v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char *v35;
  void (*v36)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[2];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;

  v6 = v3;
  v9 = a2[7];
  v55 = a2[6];
  v56 = v9;
  v57 = a2[8];
  v10 = a2[3];
  v51 = a2[2];
  v52 = v10;
  v11 = a2[5];
  v53 = a2[4];
  v54 = v11;
  v12 = a2[1];
  v49 = *a2;
  v50 = v12;
  Parser.parseNode()(&v44);
  v13 = v44;
  v14 = (unint64_t)v44 >> 60;
  v43 = (_QWORD *)a3;
  if ((unint64_t)v44 >> 60)
  {
    v15 = swift_allocObject();
    v5 = 0;
    v16 = 0;
    v17 = *((_QWORD *)v3 + 2);
    *(_QWORD *)(v15 + 16) = v17;
    *(_QWORD *)(v15 + 24) = v17;
    a3 = v15 | 0xB000000000000000;
  }
  else
  {
    v18 = *(_QWORD **)(v44 + 24);
    if (!v18[2])
      goto LABEL_17;
    v42 = (unint64_t)v44 >> 60;
    v19 = *(_QWORD **)(v44 + 16);
    v14 = v19[2];
    if (!v14)
      goto LABEL_18;
    if (v14 == 1)
      goto LABEL_19;
    v5 = v18[4];
    v16 = v18[5];
    v4 = v19[4];
    a3 = v19[5];
    if (v14 != 2)
    {
      v39 = v18[5];
      v40 = v18[4];
      v41 = a1;
      v48[0] = v44;
      AST.Node._associatedValue.getter();
      v20 = v46;
      v21 = v47;
      __swift_project_boxed_opaque_existential_1Tm(&v44, v46);
      v36 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v21 + 16);
      v37 = v4;
      v38 = a3;
      swift_retain();
      swift_retain();
      v36(v48, v20, v21);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v44);
      a3 = v48[0];
      v4 = v48[1];
      *(_QWORD *)&v44 = 0;
      *((_QWORD *)&v44 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(43);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v44 = 0xD000000000000029;
      *((_QWORD *)&v44 + 1) = 0x80000001DF006DD0;
      v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      v5 = *((_QWORD *)&v44 + 1);
      a1 = v44;
      v3 = (char *)*((_QWORD *)v3 + 9);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_9;
      goto LABEL_20;
    }
    swift_retain();
    swift_retain();
    swift_release();
    v14 = v42;
    v13 = v4;
  }
  while (1)
  {
    v27._countAndFlagsBits = 41;
    v27._object = (void *)0xE100000000000000;
    v3 = v6;
    if (!Parser.tryEat(_:)(v27))
    {
      v44 = xmmword_1DF003F70;
      v45 = 0;
      v46 = 0;
      LOBYTE(v47) = 3;
      v3 = v6;
      Parser.errorAtCurrentPosition(_:)(&v44);
    }
    v28 = swift_allocObject();
    v29 = *((_QWORD *)v6 + 2);
    if (v29 >> 14 >= a1 >> 14)
      break;
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v3 + 2) + 1, 1, v3);
LABEL_9:
    v24 = *((_QWORD *)v3 + 2);
    v23 = *((_QWORD *)v3 + 3);
    v25 = v24 + 1;
    if (v24 >= v23 >> 1)
    {
      v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v23 > 1), v24 + 1, 1, v3);
      v25 = v24 + 1;
      v3 = v35;
    }
    *((_QWORD *)v3 + 2) = v25;
    v26 = &v3[80 * v24];
    v26[32] = 1;
    *((_QWORD *)v26 + 5) = a1;
    *((_QWORD *)v26 + 6) = v5;
    *((_QWORD *)v26 + 7) = a3;
    *((_QWORD *)v26 + 8) = v4;
    *((_QWORD *)v26 + 9) = v14;
    *((_QWORD *)v26 + 10) = 0;
    *((_QWORD *)v26 + 11) = 0;
    *((_QWORD *)v26 + 12) = 0;
    v26[104] = 5;
    swift_release();
    *((_QWORD *)v6 + 9) = v3;
    v5 = v40;
    a1 = v41;
    a3 = v38;
    v16 = v39;
    v14 = v42;
    v13 = v37;
  }
  LOBYTE(v48[0]) = v14 != 0;
  *(_QWORD *)(v28 + 16) = a1;
  *(_QWORD *)(v28 + 24) = v29;
  v30 = v56;
  *(_OWORD *)(v28 + 128) = v55;
  *(_OWORD *)(v28 + 144) = v30;
  *(_OWORD *)(v28 + 160) = v57;
  v31 = v52;
  *(_OWORD *)(v28 + 64) = v51;
  *(_OWORD *)(v28 + 80) = v31;
  v32 = v54;
  *(_OWORD *)(v28 + 96) = v53;
  *(_OWORD *)(v28 + 112) = v32;
  v33 = v50;
  *(_OWORD *)(v28 + 32) = v49;
  *(_OWORD *)(v28 + 48) = v33;
  *(_QWORD *)(v28 + 176) = v13;
  *(_QWORD *)(v28 + 184) = v5;
  *(_QWORD *)(v28 + 192) = v16;
  *(_BYTE *)(v28 + 200) = v48[0];
  *(_QWORD *)(v28 + 208) = a3;
  *v43 = v28 | 0x3000000000000000;
  return outlined retain of AST.Conditional.Condition(&v49, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of AST.Conditional.Condition.Kind);
}

uint64_t Parser.applySyntaxOptions(of:isScoped:)(__int128 *a1)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  uint64_t result;
  _BYTE *v5;
  uint64_t v6;
  _BYTE *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  __int128 v22;
  unint64_t v23;
  _BYTE v24[24];
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  v2 = a1[1];
  v26 = *a1;
  v27 = v2;
  v3 = a1[3];
  v28 = a1[2];
  v29 = v3;
  v25 = 128;
  v24[16] = 3;
  result = mapOption #1 (_:_:) in Parser.applySyntaxOptions(of:isScoped:)(&v25, (uint64_t (*)(_BYTE *))closure #1 in mapOption #2 (_:_:) in Parser.applySyntaxOptions(of:isScoped:)partial apply, (uint64_t)v24, (uint64_t)&v26, v1);
  if ((*(_BYTE *)(v1 + 56) & 0x40) != 0)
  {
    v5 = (_BYTE *)(*((_QWORD *)&v29 + 1) + 32);
    v6 = *(_QWORD *)(*((_QWORD *)&v29 + 1) + 16) + 1;
    while (--v6)
    {
      v7 = v5 + 24;
      v8 = *v5 & 0xFE;
      v5 += 24;
      if (v8 == 6)
      {
        v9 = *((_QWORD *)v7 - 2);
        v10 = *((_QWORD *)v7 - 1);
        v11 = *(_QWORD *)(v1 + 72);
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v11 + 16) + 1, 1, (char *)v11);
          v11 = result;
        }
        v12 = *(_QWORD *)(v11 + 16);
        v13 = *(_QWORD *)(v11 + 24);
        v14 = v12 + 1;
        if (v12 >= v13 >> 1)
        {
          v23 = v12 + 1;
          v20 = (char *)v11;
          v21 = *(_QWORD *)(v11 + 16);
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v12 + 1, 1, v20);
          v12 = v21;
          v14 = v23;
          v11 = result;
        }
        *(_QWORD *)(v11 + 16) = v14;
        v15 = v11 + 80 * v12;
        *(_BYTE *)(v15 + 32) = 1;
        *(_QWORD *)(v15 + 40) = 0xD000000000000036;
        *(_QWORD *)(v15 + 48) = 0x80000001DF0069F0;
        *(_QWORD *)(v15 + 56) = v9;
        *(_QWORD *)(v15 + 64) = v10;
        v16 = 13;
        goto LABEL_17;
      }
    }
    if ((v27 & 1) != 0)
      return result;
    v22 = v26;
    v11 = *(_QWORD *)(v1 + 72);
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v11 + 16) + 1, 1, (char *)v11);
      v11 = result;
    }
    v18 = *(_QWORD *)(v11 + 16);
    v17 = *(_QWORD *)(v11 + 24);
    v19 = v18 + 1;
    if (v18 >= v17 >> 1)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v17 > 1), v18 + 1, 1, (char *)v11);
      v19 = v18 + 1;
      v11 = result;
    }
    *(_QWORD *)(v11 + 16) = v19;
    v15 = v11 + 80 * v18;
    *(_BYTE *)(v15 + 32) = 1;
    *(_QWORD *)(v15 + 40) = 0xD00000000000004BLL;
    *(_QWORD *)(v15 + 48) = 0x80000001DF0069A0;
    *(_OWORD *)(v15 + 56) = v22;
    v16 = 14;
LABEL_17:
    *(_QWORD *)(v15 + 72) = v16;
    *(_QWORD *)(v15 + 80) = 0;
    *(_QWORD *)(v15 + 88) = 0;
    *(_QWORD *)(v15 + 96) = 0;
    *(_BYTE *)(v15 + 104) = 36;
    *(_QWORD *)(v1 + 72) = v11;
  }
  else
  {
    v25 = 3;
    return mapOption #1 (_:_:) in Parser.applySyntaxOptions(of:isScoped:)(&v25, (uint64_t (*)(_BYTE *))specialized implicit closure #3 in Parser.applySyntaxOptions(of:isScoped:), 0, (uint64_t)&v26, v1);
  }
  return result;
}

uint64_t mapOption #1 (_:_:) in Parser.applySyntaxOptions(of:isScoped:)(uint64_t *a1, uint64_t (*a2)(_BYTE *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  _BYTE v14[24];
  _BYTE v15[24];

  v9 = *a1;
  outlined init with take of AST.Conditional.Condition?(a4, (uint64_t)v14);
  outlined init with take of AST.Conditional.Condition?((uint64_t)v14, (uint64_t)v15);
  if ((v15[16] & 1) == 0)
  {
    v10 = *(_QWORD *)(a5 + 56);
    if ((v10 & v9) != 0)
      *(_QWORD *)(a5 + 56) = v10 & ~v9;
  }
  if ((specialized Sequence.contains(where:)(a2, a3, *(_QWORD *)(a4 + 24)) & 1) != 0)
  {
    v11 = *(_QWORD *)(a5 + 56);
    if ((v9 & ~v11) != 0)
      *(_QWORD *)(a5 + 56) = v11 | v9;
  }
  result = specialized Sequence.contains(where:)(a2, a3, *(_QWORD *)(a4 + 56));
  if ((result & 1) != 0)
  {
    v13 = *(_QWORD *)(a5 + 56);
    if ((v13 & v9) != 0)
      *(_QWORD *)(a5 + 56) = v13 & ~v9;
  }
  return result;
}

void static SyntaxOptions.extendedSyntax.getter(_QWORD *a1@<X8>)
{
  *a1 = 3;
}

BOOL specialized implicit closure #3 in Parser.applySyntaxOptions(of:isScoped:)(_BYTE *a1)
{
  return (*a1 & 0xFE) == 6;
}

uint64_t Parser.parseGroupBody(start:_:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char *v3;
  char *v4;
  unint64_t v5;
  Swift::Int v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL4 v22;
  Swift::String v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t *__return_ptr, uint64_t, uint64_t);
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v48;
  uint64_t v49;
  char v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  Swift::Int v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65[3];
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  Swift::Int v73[2];
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;

  v64 = a1;
  v12 = *((_QWORD *)v4 + 5);
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
  {
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v4 + 2) + 1, 1, v4);
    goto LABEL_21;
  }
  v3 = v4;
  v7 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v16 = *(_QWORD *)(a2 + 32);
  v15 = *(_QWORD *)(a2 + 40);
  v17 = *(_QWORD *)(a2 + 48);
  v18 = *(_QWORD *)(a2 + 56);
  v19 = *(_QWORD *)(a2 + 64);
  v20 = *(_QWORD *)(a2 + 72);
  v10 = *(unsigned __int8 *)(a2 + 80);
  v55 = *(_OWORD *)(a2 + 88);
  *((_QWORD *)v4 + 5) = v14;
  v61 = v15;
  v60 = v17;
  v59 = v18;
  v57 = v19;
  v56 = v20;
  if (v10 == 1)
  {
    if (!v6)
    {
LABEL_8:
      v21 = *((_QWORD *)v4 + 7);
      goto LABEL_11;
    }
    swift_bridgeObjectRetain();
LABEL_7:
    specialized Set._Variant.insert(_:)(v73, v7, v6);
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  if (!v10)
  {
    outlined copy of AST.Group.Kind(v7, v6, v8, v9, v16, v15, v17, v18, v19, v20, 0);
    goto LABEL_7;
  }
  v21 = *((_QWORD *)v4 + 7);
  if (v10 == 2)
  {
    v73[0] = v7;
    v73[1] = v6;
    v63 = v21;
    v74 = v8 & 1;
    v75 = v9;
    v76 = v16;
    v77 = v61;
    v78 = v60 & 1;
    v79 = v59;
    v65[0] = 128;
    MEMORY[0x1E0C80A78](a1, a2);
    v50 = 3;
    mapOption #1 (_:_:) in Parser.applySyntaxOptions(of:isScoped:)(v65, (uint64_t (*)(_BYTE *))partial apply for closure #1 in mapOption #2 (_:_:) in Parser.applySyntaxOptions(of:isScoped:), (uint64_t)&v49, (uint64_t)v73, (uint64_t)v4);
    v65[0] = 3;
    mapOption #1 (_:_:) in Parser.applySyntaxOptions(of:isScoped:)(v65, (uint64_t (*)(_BYTE *))specialized implicit closure #3 in Parser.applySyntaxOptions(of:isScoped:), 0, (uint64_t)v73, (uint64_t)v4);
    v21 = v63;
  }
LABEL_11:
  v63 = v21;
  v22 = (~(_BYTE)v21 & 3) == 0 && (~*((_DWORD *)v4 + 14) & 3) != 0;
  v58 = v16;
  Parser.parseNode()(v65);
  v62 = v65[0];
  v23._countAndFlagsBits = 41;
  v23._object = (void *)0xE100000000000000;
  if (!Parser.tryEat(_:)(v23))
  {
    v69 = xmmword_1DF003F70;
    v70 = 0;
    v71 = 0;
    v72 = 3;
    Parser.errorAtCurrentPosition(_:)(&v69);
  }
  v5 = *((_QWORD *)v4 + 2);
  v24 = v64;
  if (v5 >> 14 < v64 >> 14)
    goto LABEL_26;
  if (!v22)
    goto LABEL_24;
  if ((v4[56] & 0x40) == 0)
    goto LABEL_24;
  v51 = *(_QWORD *)v4;
  v68 = v62;
  AST.Node._associatedValue.getter();
  v54 = v7;
  v53 = v8;
  v25 = v66;
  v26 = v67;
  __swift_project_boxed_opaque_existential_1Tm(v65, v66);
  v52 = v9;
  v27 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v26 + 16);
  swift_bridgeObjectRetain();
  v27(&v68, v25, v26);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v65);
  v28 = String.subscript.getter();
  v30 = v29;
  v32 = v31;
  v34 = v33;
  swift_bridgeObjectRelease();
  v35 = v30;
  v7 = v54;
  v36 = v32;
  v8 = v53;
  LOBYTE(v28) = specialized Sequence.contains(where:)(v28, v35, v36, v34);
  v9 = v52;
  swift_bridgeObjectRelease();
  v24 = v64;
  if ((v28 & 1) == 0)
    goto LABEL_24;
  v4 = (char *)*((_QWORD *)v3 + 9);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_27;
LABEL_21:
  v38 = *((_QWORD *)v4 + 2);
  v37 = *((_QWORD *)v4 + 3);
  v39 = v38 + 1;
  v24 = v64;
  if (v38 >= v37 >> 1)
  {
    v51 = v38 + 1;
    v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v37 > 1), v39, 1, v4);
    v24 = v64;
    v39 = v51;
    v4 = v48;
  }
  *((_QWORD *)v4 + 2) = v39;
  v40 = &v4[80 * v38];
  v40[32] = 1;
  *((_QWORD *)v40 + 5) = 0xD000000000000053;
  *((_QWORD *)v40 + 6) = 0x80000001DF006E90;
  *((_QWORD *)v40 + 7) = v24;
  *((_QWORD *)v40 + 8) = v5;
  *((_QWORD *)v40 + 9) = 4;
  *((_QWORD *)v40 + 10) = 0;
  *((_QWORD *)v40 + 11) = 0;
  *((_QWORD *)v40 + 12) = 0;
  v40[104] = 36;
  *((_QWORD *)v3 + 9) = v4;
LABEL_24:
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)(a3 + 16) = v8;
  *(_QWORD *)(a3 + 24) = v9;
  v41 = v58;
  v42 = v61;
  *(_QWORD *)(a3 + 32) = v58;
  *(_QWORD *)(a3 + 40) = v42;
  v43 = v60;
  v44 = v59;
  *(_QWORD *)(a3 + 48) = v60;
  *(_QWORD *)(a3 + 56) = v44;
  v45 = v57;
  v46 = v56;
  *(_QWORD *)(a3 + 64) = v57;
  *(_QWORD *)(a3 + 72) = v46;
  *(_BYTE *)(a3 + 80) = v10;
  *(_OWORD *)(a3 + 88) = v55;
  *(_QWORD *)(a3 + 104) = v62;
  *(_QWORD *)(a3 + 112) = v24;
  *(_QWORD *)(a3 + 120) = v5;
  *((_QWORD *)v3 + 7) = v63;
  return outlined copy of AST.Group.Kind(v7, v6, v8, v9, v41, v42, v43, v44, v45, v46, v10);
}

uint64_t Parser.parseAbsentFunctionBody(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  Swift::String v23;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  Swift::String v28;
  uint64_t result;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[2];

  v6 = v2;
  v38 = *(_OWORD *)(a1 + 8);
  if (*(_BYTE *)a1 == 1)
  {
    Parser.parseNode()(&v39);
    v8 = 0;
    v4 = 0;
    i = 0;
    v5 = v39;
    goto LABEL_24;
  }
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10 = String.subscript.getter();
  v8 = v11;
  if ((v10 ^ v12) >> 14)
  {
    v3 = Substring.subscript.getter();
    v13 = v14;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v3 = 0;
    v13 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v13)
    goto LABEL_12;
  if (v3 != 41 || v13 != 0xE100000000000000)
  {
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0)
      goto LABEL_11;
LABEL_12:
    v16 = (char *)v6;
    Parser.parseNode()(&v39);
    if ((unint64_t)v39 >> 60)
    {
      v8 = 0;
      v4 = 0;
      i = 4;
      v5 = v39;
    }
    else
    {
      v17 = *(_QWORD **)(v39 + 16);
      v18 = v17[2];
      if (!v18)
        goto LABEL_29;
      v19 = *(_QWORD **)(v39 + 24);
      if (!v19[2])
        goto LABEL_30;
      if (v18 < 2)
        goto LABEL_31;
      v8 = v19[4];
      v4 = v19[5];
      v5 = v17[4];
      v20 = v17[5];
      if (v18 != 2)
      {
        v43[0] = v39;
        v37 = v18;
        AST.Node._associatedValue.getter();
        v21 = v42;
        v35 = v41;
        __swift_project_boxed_opaque_existential_1Tm(&v39, v41);
        v33 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v21 + 16);
        v36 = v20;
        swift_retain();
        swift_retain();
        v33(v43, v35, v21);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v39);
        v32 = v43[1];
        v34 = v43[0];
        *(_QWORD *)&v39 = 0;
        *((_QWORD *)&v39 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(52);
        v22._object = (void *)0x80000001DF006D70;
        v22._countAndFlagsBits = 0xD000000000000032;
        String.append(_:)(v22);
        v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v23);
        swift_bridgeObjectRelease();
        v3 = *((_QWORD *)&v39 + 1);
        v31 = v39;
        v16 = *(char **)(v6 + 72);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          goto LABEL_21;
        goto LABEL_32;
      }
      swift_retain();
      swift_retain();
      swift_release();
      i = v20 | 2;
    }
    goto LABEL_24;
  }
  swift_bridgeObjectRelease();
LABEL_11:
  v5 = 0;
  v8 = 0;
  v4 = 0;
  for (i = 6; ; i = v36 | 2)
  {
LABEL_24:
    v28._countAndFlagsBits = 41;
    v28._object = (void *)0xE100000000000000;
    v16 = (char *)v6;
    result = Parser.tryEat(_:)(v28);
    if ((result & 1) == 0)
    {
      v39 = xmmword_1DF003F70;
      v40 = 0;
      v41 = 0;
      LOBYTE(v42) = 3;
      v16 = (char *)v6;
      result = Parser.errorAtCurrentPosition(_:)(&v39);
    }
    v30 = *(_QWORD *)(v6 + 16);
    if (v30 >> 14 >= (unint64_t)v38 >> 14)
      break;
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v16 + 2) + 1, 1, v16);
LABEL_21:
    v26 = *((_QWORD *)v16 + 2);
    v25 = *((_QWORD *)v16 + 3);
    if (v26 >= v25 >> 1)
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v25 > 1), v26 + 1, 1, v16);
    *((_QWORD *)v16 + 2) = v26 + 1;
    v27 = &v16[80 * v26];
    v27[32] = 1;
    *((_QWORD *)v27 + 5) = v31;
    *((_QWORD *)v27 + 6) = v3;
    *((_QWORD *)v27 + 7) = v34;
    *((_QWORD *)v27 + 8) = v32;
    *((_QWORD *)v27 + 9) = v37;
    *((_QWORD *)v27 + 10) = 0;
    *((_QWORD *)v27 + 11) = 0;
    *((_QWORD *)v27 + 12) = 0;
    v27[104] = 7;
    swift_release();
    *(_QWORD *)(v6 + 72) = v16;
  }
  *(_OWORD *)a2 = v38;
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v8;
  *(_QWORD *)(a2 + 32) = v4;
  *(_QWORD *)(a2 + 40) = i;
  *(_QWORD *)(a2 + 48) = v38;
  *(_QWORD *)(a2 + 56) = v30;
  return result;
}

uint64_t Parser.parseCustomCharacterClass(_:)@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t (*v42)(uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t);
  _QWORD *rawValue;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t rawValue_low;
  Swift::String v60;
  uint64_t result;
  unint64_t v62;
  unint64_t v63;
  void *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  _OWORD *v69;
  char *v70;
  void *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  _BYTE *v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  __int128 v91;
  uint64_t v92;
  char *v93;
  unint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int (*v102)(char *, uint64_t, uint64_t);
  Swift::OpaquePointer into;
  Swift::OpaquePointer v104[2];
  uint64_t v105;
  uint64_t v106;
  char v107;

  v87 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.CustomCharacterClass.Member?);
  v6 = MEMORY[0x1E0C80A78](v4, v5);
  v8 = (unint64_t)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)&v84 - v10;
  v12 = type metadata accessor for AST.CustomCharacterClass.Member(0);
  v13 = *(_QWORD *)(v12 - 8);
  v15 = MEMORY[0x1E0C80A78](v12, v14);
  v17 = (char *)&v84 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v15, v18);
  v98 = (uint64_t)&v84 - v20;
  v22 = MEMORY[0x1E0C80A78](v19, v21);
  v24 = (uint64_t)&v84 - v23;
  v26 = MEMORY[0x1E0C80A78](v22, v25);
  v101 = (uint64_t)&v84 - v27;
  v29 = MEMORY[0x1E0C80A78](v26, v28);
  v93 = (char *)&v84 - v30;
  v32 = MEMORY[0x1E0C80A78](v29, v31);
  v92 = (uint64_t)&v84 - v33;
  v35 = MEMORY[0x1E0C80A78](v32, v34);
  v37 = (char *)&v84 - v36;
  MEMORY[0x1E0C80A78](v35, v38);
  v97 = (uint64_t)&v84 - v39;
  v85 = *a1;
  v40 = *((_QWORD *)a1 + 1);
  v89 = *((_QWORD *)a1 + 2);
  v90 = v40;
  v86 = *(unsigned __int8 *)(v2 + 32);
  *(_BYTE *)(v2 + 32) = 1;
  v41 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  into._rawValue = (void *)MEMORY[0x1E0DEE9D8];
  Parser.parseCCCMember()((uint64_t)v11);
  v102 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v102(v11, 1, v12) != 1)
  {
    v42 = type metadata accessor for AST.CustomCharacterClass.Member;
    v95 = v11;
    v96 = v37;
    do
    {
      v43 = (uint64_t)v11;
      v44 = v97;
      outlined init with take of AST.Atom.Kind(v43, v97, v42);
      v45 = v42;
      outlined init with take of AST.Atom.Kind(v44, (uint64_t)v37, v42);
      rawValue = into._rawValue;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        rawValue = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, rawValue[2] + 1, 1, rawValue);
      v48 = rawValue[2];
      v47 = rawValue[3];
      if (v48 >= v47 >> 1)
        rawValue = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v47 > 1, v48 + 1, 1, rawValue);
      rawValue[2] = v48 + 1;
      v37 = v96;
      outlined init with take of AST.Atom.Kind((uint64_t)v96, (uint64_t)rawValue+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(_QWORD *)(v13 + 72) * v48, v45);
      into._rawValue = rawValue;
      v42 = v45;
      Parser.parsePotentialCCRange(into:)(&into);
      v11 = v95;
      Parser.parseCCCMember()((uint64_t)v95);
    }
    while (v102(v11, 1, v12) != 1);
    v41 = into._rawValue;
  }
  outlined destroy of _ASTParent?((uint64_t)v11, &demangling cache variable for type metadata for AST.CustomCharacterClass.Member?);
  v49 = v41[2];
  swift_bridgeObjectRetain();
  v97 = v49;
  if (v49)
  {
    v50 = 0;
    v51 = (char *)type metadata accessor for AST.CustomCharacterClass.Member;
    do
    {
      if (v50 >= v41[2])
        goto LABEL_45;
      v52 = v92;
      outlined init with copy of AST.Atom((uint64_t)v41+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(_QWORD *)(v13 + 72) * v50, v92, type metadata accessor for AST.CustomCharacterClass.Member);
      v53 = v52;
      v54 = (uint64_t)v93;
      outlined init with take of AST.Atom.Kind(v53, (uint64_t)v93, type metadata accessor for AST.CustomCharacterClass.Member);
      if (swift_getEnumCaseMultiPayload() != 4)
      {
        swift_bridgeObjectRelease();
        outlined destroy of AST.Atom(v54, type metadata accessor for AST.CustomCharacterClass.Member);
        goto LABEL_19;
      }
      ++v50;
      outlined destroy of AST.Atom(v54, type metadata accessor for AST.CustomCharacterClass.Member);
    }
    while (v97 != v50);
  }
  swift_bridgeObjectRelease();
  v51 = *(char **)(v2 + 72);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_47;
  while (1)
  {
    v56 = *((_QWORD *)v51 + 2);
    v55 = *((_QWORD *)v51 + 3);
    if (v56 >= v55 >> 1)
      v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v55 > 1), v56 + 1, 1, v51);
    *((_QWORD *)v51 + 2) = v56 + 1;
    v57 = &v51[80 * v56];
    v57[32] = 1;
    *((_QWORD *)v57 + 5) = 0xD000000000000027;
    *((_QWORD *)v57 + 6) = 0x80000001DF006BF0;
    v58 = v89;
    *((_QWORD *)v57 + 7) = v90;
    *((_QWORD *)v57 + 8) = v58;
    *((_QWORD *)v57 + 9) = 7;
    *((_QWORD *)v57 + 10) = 0;
    *((_QWORD *)v57 + 11) = 0;
    *((_QWORD *)v57 + 12) = 0;
    v57[104] = 36;
    *(_QWORD *)(v2 + 72) = v51;
LABEL_19:
    Parser.lexCustomCCBinOp()();
    rawValue_low = LOBYTE(v104[0]._rawValue);
    if (LOBYTE(v104[0]._rawValue) == 3)
      break;
    v68 = (char *)v104[1]._rawValue;
    v67 = v105;
    v88 = 0x80000001DF006BF0;
    v91 = xmmword_1DF003EB0;
    v51 = (char *)type metadata accessor for AST.CustomCharacterClass.Member;
    v92 = v24;
    v93 = v17;
    v94 = v8;
    v99 = v12;
    v100 = v13;
    while (1)
    {
      v95 = v68;
      v96 = (char *)v67;
      v97 = rawValue_low;
      v73 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v104[0]._rawValue = (void *)MEMORY[0x1E0DEE9D8];
      Parser.parseCCCMember()(v8);
      if (v102((char *)v8, 1, v12) != 1)
      {
        do
        {
          v74 = v101;
          outlined init with take of AST.Atom.Kind(v8, v101, type metadata accessor for AST.CustomCharacterClass.Member);
          outlined init with take of AST.Atom.Kind(v74, v24, type metadata accessor for AST.CustomCharacterClass.Member);
          v75 = v104[0]._rawValue;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v75 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v75[2] + 1, 1, v75);
          v77 = v75[2];
          v76 = v75[3];
          if (v77 >= v76 >> 1)
            v75 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v76 > 1, v77 + 1, 1, v75);
          v75[2] = v77 + 1;
          outlined init with take of AST.Atom.Kind(v24, (uint64_t)v75+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(_QWORD *)(v13 + 72) * v77, type metadata accessor for AST.CustomCharacterClass.Member);
          v104[0]._rawValue = v75;
          Parser.parsePotentialCCRange(into:)(v104);
          Parser.parseCCCMember()(v8);
        }
        while (v102((char *)v8, 1, v12) != 1);
        v73 = v104[0]._rawValue;
      }
      outlined destroy of _ASTParent?(v8, &demangling cache variable for type metadata for AST.CustomCharacterClass.Member?);
      v12 = v73[2];
      swift_bridgeObjectRetain();
      if (v12)
        break;
LABEL_39:
      swift_bridgeObjectRelease();
      v79 = *(char **)(v2 + 72);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v79 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v79 + 2) + 1, 1, v79);
      v12 = v99;
      v13 = v100;
      v81 = *((_QWORD *)v79 + 2);
      v80 = *((_QWORD *)v79 + 3);
      if (v81 >= v80 >> 1)
        v79 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v80 > 1), v81 + 1, 1, v79);
      v8 = v94;
      *((_QWORD *)v79 + 2) = v81 + 1;
      v82 = &v79[80 * v81];
      v82[32] = 1;
      *((_QWORD *)v82 + 5) = 0xD000000000000027;
      v83 = v90;
      *((_QWORD *)v82 + 6) = v88;
      *((_QWORD *)v82 + 7) = v83;
      *((_QWORD *)v82 + 8) = v89;
      *((_QWORD *)v82 + 9) = 7;
      *((_QWORD *)v82 + 10) = 0;
      *((_QWORD *)v82 + 11) = 0;
      *((_QWORD *)v82 + 12) = 0;
      v82[104] = 36;
      *(_QWORD *)(v2 + 72) = v79;
      v78 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
LABEL_26:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AST.CustomCharacterClass.Member>);
      v69 = (_OWORD *)swift_allocObject();
      v69[1] = v91;
      v70 = (char *)v69 + v78;
      v71 = v104[0]._rawValue;
      *(Swift::OpaquePointer *)v70 = into;
      v70[8] = v97;
      v72 = (uint64_t)v96;
      *((_QWORD *)v70 + 2) = v95;
      *((_QWORD *)v70 + 3) = v72;
      *((_QWORD *)v70 + 4) = v71;
      swift_storeEnumTagMultiPayload();
      into._rawValue = v69;
      Parser.lexCustomCCBinOp()();
      rawValue_low = LOBYTE(v104[0]._rawValue);
      v68 = (char *)v104[1]._rawValue;
      v67 = v105;
      v24 = v92;
      v17 = v93;
      if (LOBYTE(v104[0]._rawValue) == 3)
        goto LABEL_20;
    }
    v8 = 0;
    while (v8 < v73[2])
    {
      v78 = (*(unsigned __int8 *)(v100 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80);
      v24 = *(_QWORD *)(v100 + 72);
      v13 = v98;
      outlined init with copy of AST.Atom((uint64_t)v73 + v78 + v24 * v8, v98, type metadata accessor for AST.CustomCharacterClass.Member);
      outlined init with take of AST.Atom.Kind(v13, (uint64_t)v17, type metadata accessor for AST.CustomCharacterClass.Member);
      if (swift_getEnumCaseMultiPayload() != 4)
      {
        swift_bridgeObjectRelease();
        outlined destroy of AST.Atom((uint64_t)v17, type metadata accessor for AST.CustomCharacterClass.Member);
        v12 = v99;
        v13 = v100;
        v8 = v94;
        goto LABEL_26;
      }
      ++v8;
      outlined destroy of AST.Atom((uint64_t)v17, type metadata accessor for AST.CustomCharacterClass.Member);
      if (v12 == v8)
        goto LABEL_39;
    }
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v51 + 2) + 1, 1, v51);
  }
LABEL_20:
  v60._countAndFlagsBits = 93;
  v60._object = (void *)0xE100000000000000;
  result = Parser.tryEat(_:)(v60);
  if ((result & 1) == 0)
  {
    *(_OWORD *)&v104[0]._rawValue = xmmword_1DF003FD0;
    v105 = 0;
    v106 = 0;
    v107 = 3;
    result = Parser.errorAtCurrentPosition(_:)((__int128 *)v104);
  }
  v62 = *(_QWORD *)(v2 + 16);
  v63 = v90;
  if (v62 >> 14 < v90 >> 14)
    goto LABEL_46;
  v64 = into._rawValue;
  v65 = v87;
  *v87 = v85;
  v66 = v89;
  v65[1] = v63;
  v65[2] = v66;
  v65[3] = v64;
  v65[4] = v63;
  v65[5] = v62;
  *(_BYTE *)(v2 + 32) = v86;
  return result;
}

uint64_t Parser.parseCCCMember()@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  char v46[8];
  __int128 v47;
  uint64_t v48;
  _BYTE v49[24];
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Atom?);
  MEMORY[0x1E0C80A78](v4, v5);
  v45 = &v36[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for AST.Atom(0);
  v43 = *(_QWORD *)(v7 - 8);
  v44 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v42 = &v36[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = *v1;
  v11 = v2[1];
  v12 = v2[2];
  v13 = v2[3];
  swift_bridgeObjectRetain();
  v14 = String.subscript.getter();
  v16 = v15;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v14 ^ v16) < 0x4000)
    goto LABEL_14;
  v41 = a1;
  v40 = *((unsigned __int8 *)v2 + 32);
  v17 = v2[5];
  v18 = v2[6];
  v38 = v2[7];
  v39 = v17;
  v37 = *((unsigned __int8 *)v2 + 64);
  v19 = v2[9];
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v20 = String.subscript.getter();
  if ((v20 ^ v21) >> 14)
  {
    v22 = Substring.subscript.getter();
    v23 = v24;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v22 = 0;
    v23 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1 = v41;
  if (v23)
  {
    if (v22 == 93 && v23 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_14:
      v27 = type metadata accessor for AST.CustomCharacterClass.Member(0);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(a1, 1, 1, v27);
    }
    v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v25 & 1) != 0)
      goto LABEL_14;
  }
  v48 = v10;
  *(_QWORD *)v49 = v11;
  *(_QWORD *)&v49[8] = v12;
  *(_QWORD *)&v49[16] = v13;
  LOBYTE(v50) = v40;
  *((_QWORD *)&v50 + 1) = v39;
  v51 = v18;
  v52 = v38;
  v53 = v37;
  v54 = v19;
  Parser.peekCCBinOp()();
  if (v46[0] != 3)
    goto LABEL_14;
  Parser.lexCustomCCStart()(&v48);
  if (v48 != 2)
  {
    v46[0] = v48 & 1;
    v47 = *(_OWORD *)v49;
    Parser.parseCustomCharacterClass(_:)(&v48, v46);
    v29 = *(_QWORD *)&v49[16];
    *(_BYTE *)a1 = v48;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v49;
    *(_QWORD *)(a1 + 24) = v29;
    *(_OWORD *)(a1 + 32) = v50;
    v30 = type metadata accessor for AST.CustomCharacterClass.Member(0);
LABEL_16:
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(a1, 0, 1, v30);
  }
  Parser.lexQuote()((_QWORD *(*)(uint64_t *__return_ptr, uint64_t))closure #1 in Parser.lexQuote(), &v48);
  v26 = *(_QWORD *)v49;
  if (*(_QWORD *)v49
    || (Parser.lexQuote()((_QWORD *(*)(uint64_t *__return_ptr, uint64_t))closure #1 in Parser.lexComment(), &v48), (v26 = *(_QWORD *)v49) != 0)|| (v33 = (uint64_t)v45, (v2[7] & 1) != 0)&& (specialized Parser.tryEatPrefix(maxLength:_:)(0, 1, v2, (uint64_t (*)(uint64_t, _QWORD, _QWORD *))specialized Source.peekPrefix(maxLength:_:), &v48), (v26 = *(_QWORD *)v49) != 0))
  {
    v31 = *(_OWORD *)&v49[8];
    *(_QWORD *)a1 = v48;
    *(_QWORD *)(a1 + 8) = v26;
    *(_OWORD *)(a1 + 16) = v31;
    v32 = type metadata accessor for AST.CustomCharacterClass.Member(0);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(a1, 0, 1, v32);
  }
  Parser.lexAtom()(v33);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v33, 1, v44) != 1)
  {
    v35 = v42;
    outlined init with take of AST.Atom.Kind(v33, (uint64_t)v42, type metadata accessor for AST.Atom);
    outlined init with take of AST.Atom.Kind((uint64_t)v35, a1, type metadata accessor for AST.Atom);
    v30 = type metadata accessor for AST.CustomCharacterClass.Member(0);
    goto LABEL_16;
  }
  outlined destroy of _ASTParent?(v33, &demangling cache variable for type metadata for AST.Atom?);
  v34 = type metadata accessor for AST.CustomCharacterClass.Member(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(a1, 1, 1, v34);
}

Swift::Void __swiftcall Parser.parsePotentialCCRange(into:)(Swift::OpaquePointer *into)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *rawValue;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  Swift::OpaquePointer *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  unint64_t v76;
  unint64_t v77;
  Swift::OpaquePointer *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  Swift::OpaquePointer *v90;
  unint64_t v91;
  Swift::OpaquePointer *v92;
  uint64_t v93;
  _QWORD *v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t **v100;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v102;
  unint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  Swift::OpaquePointer *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  Swift::OpaquePointer *v128;
  uint64_t v129;
  uint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  _QWORD *v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unsigned int (*v140)(uint64_t, uint64_t, unint64_t);
  uint64_t (*v141)(uint64_t);
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  char *v156;
  unint64_t v157;
  BOOL v158;
  unint64_t v159;
  Swift::OpaquePointer *v160;
  uint64_t v161;
  int *v162;
  uint64_t **v163;
  uint64_t *v164;
  _QWORD *v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  char v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char v175;
  char **v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  unint64_t v180;
  unint64_t v181;
  char *v182;
  size_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  char *v189;
  char *v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t *v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  Swift::OpaquePointer *v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t *v210;
  uint64_t v211;
  Swift::OpaquePointer *v212;
  uint64_t v213;
  __int128 v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  __int128 v218;
  char v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char v223;
  uint64_t v224;
  __int128 v225;
  char v226;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.Atom?);
  v6 = MEMORY[0x1E0C80A78](v4, v5);
  v8 = (char *)&v184 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)&v184 - v10;
  v12 = type metadata accessor for AST.Atom(0);
  v13 = *(_QWORD *)(v12 - 8);
  v15 = MEMORY[0x1E0C80A78](v12, v14);
  v17 = (char *)&v184 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v18);
  v200 = (uint64_t)&v184 - v19;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AST.CustomCharacterClass.Member?);
  MEMORY[0x1E0C80A78](v20, v21);
  v201 = (uint64_t)&v184 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for Unicode.Scalar.Properties();
  v213 = *(_QWORD *)(v23 - 8);
  *(_QWORD *)&v214 = v23;
  MEMORY[0x1E0C80A78](v23, v24);
  v212 = (Swift::OpaquePointer *)((char *)&v184 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  v26 = type metadata accessor for AST.CustomCharacterClass.Member(0);
  v28 = MEMORY[0x1E0C80A78](v26, v27);
  v30 = MEMORY[0x1E0C80A78](v28, v29);
  v32 = MEMORY[0x1E0C80A78](v30, v31);
  v34 = MEMORY[0x1E0C80A78](v32, v33);
  MEMORY[0x1E0C80A78](v34, v35);
  v38 = MEMORY[0x1E0C80A78]((char *)&v184 - v36, v37);
  v210 = (uint64_t *)((char *)&v184 - v39);
  v41 = MEMORY[0x1E0C80A78](v38, v40);
  v43 = MEMORY[0x1E0C80A78](v41, v42);
  v45 = (uint64_t *)((char *)&v184 - v44);
  v47 = MEMORY[0x1E0C80A78](v43, v46);
  v49 = (char *)&v184 - v48;
  v51 = MEMORY[0x1E0C80A78](v47, v50);
  rawValue = into->_rawValue;
  v60 = *((_QWORD *)into->_rawValue + 2);
  if (!v60)
    return;
  v199 = v54;
  v195 = v52;
  v193 = v51;
  v191 = v13;
  v192 = v11;
  v196 = v12;
  v190 = v8;
  v197 = v58;
  v198 = v57;
  v189 = v17;
  v188 = v56;
  v61 = (*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
  v194 = v53;
  v62 = *(_QWORD *)(v53 + 72);
  v63 = (char *)&v184 - v55;
  outlined init with copy of AST.Atom((uint64_t)rawValue + v61 + v62 * (v60 - 1), (uint64_t)&v184 - v55, type metadata accessor for AST.CustomCharacterClass.Member);
  outlined init with copy of AST.Atom((uint64_t)v63, (uint64_t)v49, type metadata accessor for AST.CustomCharacterClass.Member);
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    outlined destroy of AST.Atom((uint64_t)v63, type metadata accessor for AST.CustomCharacterClass.Member);
    v64 = (uint64_t)v49;
    goto LABEL_44;
  }
  v187 = v63;
  outlined destroy of AST.Atom((uint64_t)v49, type metadata accessor for AST.CustomCharacterClass.Member);
  v186 = *((_QWORD *)into->_rawValue + 2);
  v211 = v2;
  v206 = into;
  v208 = v26;
  v205 = v61;
  v207 = v62;
  v202 = v45;
  while (1)
  {
    v65 = *(_QWORD *)(v2 + 16);
    closure #1 in Parser.lexComment()(v2, &v216);
    v66 = v217;
    if (!v217)
      break;
    v67 = *(_QWORD *)(v2 + 16);
    if (v67 >> 14 < v65 >> 14)
    {
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
      goto LABEL_129;
    }
    v68 = v216;
LABEL_36:
    *v45 = v68;
    v45[1] = v66;
    v45[2] = v65;
    v45[3] = v67;
    swift_storeEnumTagMultiPayload();
    v94 = into->_rawValue;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v94 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v94[2] + 1, 1, v94);
    v96 = v94[2];
    v95 = v94[3];
    if (v96 >= v95 >> 1)
      v94 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v95 > 1, v96 + 1, 1, v94);
    v94[2] = v96 + 1;
    outlined init with take of AST.Atom.Kind((uint64_t)v45, (uint64_t)v94 + v61 + v96 * v62, type metadata accessor for AST.CustomCharacterClass.Member);
    into->_rawValue = v94;
  }
  if ((*(_BYTE *)(v2 + 56) & 1) == 0)
    goto LABEL_42;
  v61 = *(_QWORD *)(v2 + 8);
  v69 = *(Swift::OpaquePointer **)(v2 + 16);
  swift_bridgeObjectRetain();
  v209 = (unint64_t)v69;
  v70 = String.subscript.getter();
  v26 = v71;
  v65 = v72;
  swift_bridgeObjectRelease();
  if (v26 >> 14 < v70 >> 14)
    goto LABEL_128;
  v73 = Substring.subscript.getter();
  v75 = v74;
  v61 = v76;
  v26 = v77;
  swift_bridgeObjectRelease();
  v62 = (unint64_t)v75 >> 14;
  if (v73 >> 14 == (unint64_t)v75 >> 14)
    goto LABEL_29;
  v204 = v73 >> 14;
  v78 = (Swift::OpaquePointer *)(v73 >> 14);
  do
  {
    v79 = Substring.subscript.getter();
    if ((v80 & 0x2000000000000000) != 0)
      v81 = HIBYTE(v80) & 0xF;
    else
      v81 = v79 & 0xFFFFFFFFFFFFLL;
    if (!v81)
    {
      __break(1u);
LABEL_115:
      v62 = v207;
LABEL_116:
      swift_unknownObjectRelease();
      v159 = v65;
      v160 = v206;
      specialized RangeReplaceableCollection<>.removeLast(_:)(v159);
      v161 = v188;
      outlined init with take of AST.Atom.Kind(v200, v188, type metadata accessor for AST.Atom);
      v162 = (int *)type metadata accessor for AST.CustomCharacterClass.Range(0);
      outlined init with take of AST.Atom.Kind((uint64_t)v189, v161 + v162[6], type metadata accessor for AST.Atom);
      v163 = (uint64_t **)(v161 + v162[5]);
      v164 = (uint64_t *)v185;
      *v163 = v202;
      v163[1] = v164;
      *(_QWORD *)(v161 + v162[7]) = v75;
      swift_storeEnumTagMultiPayload();
      v165 = v160->_rawValue;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v165 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v165[2] + 1, 1, v165);
      v166 = v211;
      v167 = v205;
      v169 = v165[2];
      v168 = v165[3];
      if (v169 >= v168 >> 1)
        v165 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v168 > 1, v169 + 1, 1, v165);
      v165[2] = v169 + 1;
      outlined init with take of AST.Atom.Kind(v188, (uint64_t)v165 + v167 + v169 * v62, type metadata accessor for AST.CustomCharacterClass.Member);
      v160->_rawValue = v165;
      v170 = *(_QWORD *)(v166 + 8);
      v171 = *(_BYTE *)(v166 + 32);
      v172 = *(_QWORD *)(v166 + 40);
      v173 = *(_QWORD *)(v166 + 48);
      v174 = *(_QWORD *)(v166 + 56);
      v175 = *(_BYTE *)(v166 + 64);
      v176 = (char **)(v166 + 72);
      v177 = *(_QWORD *)(v166 + 72);
      v216 = *(_QWORD *)v166;
      v217 = v170;
      v218 = *(_OWORD *)(v166 + 16);
      v219 = v171;
      v220 = v172;
      v221 = v173;
      v222 = v174;
      v223 = v175;
      v224 = v177;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      closure #1 in Parser.canLexDotNetCharClassSubtraction()((uint64_t)&v216, (unint64_t *)&v225);
      v178 = v224;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v215 = v178;
      Diagnostics.appendNewFatalErrors(from:)((_RegexParser::Diagnostics)&v215);
      swift_bridgeObjectRelease();
      if ((v226 & 1) == 0)
      {
        v214 = v225;
        v179 = *v176;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v179 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v179 + 2) + 1, 1, v179);
        v181 = *((_QWORD *)v179 + 2);
        v180 = *((_QWORD *)v179 + 3);
        if (v181 >= v180 >> 1)
          v179 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v180 > 1), v181 + 1, 1, v179);
        *((_QWORD *)v179 + 2) = v181 + 1;
        v182 = &v179[80 * v181];
        v182[32] = 1;
        *((_QWORD *)v182 + 5) = 0xD000000000000035;
        *((_QWORD *)v182 + 6) = 0x80000001DF006B80;
        *(_OWORD *)(v182 + 56) = v214;
        *((_QWORD *)v182 + 9) = 17;
        *((_QWORD *)v182 + 10) = 0;
        *((_QWORD *)v182 + 11) = 0;
        *((_QWORD *)v182 + 12) = 0;
        v182[104] = 36;
        *v176 = v179;
      }
      return;
    }
    if ((v80 & 0x1000000000000000) != 0)
    {
      _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((v80 & 0x2000000000000000) != 0)
      {
        v216 = v79;
        v217 = v80 & 0xFFFFFFFFFFFFFFLL;
      }
      else if ((v79 & 0x1000000000000000) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }
      _decodeScalar(_:startingAt:)();
    }
    v65 = (unint64_t)v212;
    Unicode.Scalar.properties.getter();
    into = (Swift::OpaquePointer *)Unicode.Scalar.Properties.isPatternWhitespace.getter();
    swift_bridgeObjectRelease();
    (*(void (**)(unint64_t, _QWORD))(v213 + 8))(v65, v214);
    if ((into & 1) == 0)
      goto LABEL_27;
    v78 = (Swift::OpaquePointer *)((unint64_t)Substring.index(after:)() >> 14);
  }
  while (v78 != (Swift::OpaquePointer *)v62);
  v78 = (Swift::OpaquePointer *)((unint64_t)v75 >> 14);
LABEL_27:
  v82 = (unint64_t)v78 >= v204;
  v2 = v211;
  if (!v82)
  {
LABEL_129:
    __break(1u);
    goto LABEL_130;
  }
LABEL_29:
  v83 = Substring.subscript.getter();
  v85 = v84;
  v61 = v86;
  v65 = v87;
  swift_bridgeObjectRelease();
  if ((v83 ^ v85) < 0x4000)
  {
    swift_bridgeObjectRelease();
    into = v206;
    v26 = v208;
    v61 = v205;
    v62 = v207;
LABEL_42:
    Parser.lexCustomCharacterClassRangeOperator()((uint64_t)&v216);
    if ((v218 & 1) == 0)
    {
      v97 = (uint64_t *)v216;
      v98 = v217;
      v99 = v199;
      *v199 = 45;
      v99[1] = 0xE100000000000000;
      type metadata accessor for AST.Atom.Kind(0);
      swift_storeEnumTagMultiPayload();
      v100 = (uint64_t **)((char *)v99 + *(int *)(v196 + 20));
      *v100 = v97;
      v100[1] = (uint64_t *)v98;
      swift_storeEnumTagMultiPayload();
      v65 = (unint64_t)into->_rawValue;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v202 = v97;
      v185 = v98;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        goto LABEL_138;
      goto LABEL_46;
    }
    v64 = (uint64_t)v187;
LABEL_44:
    outlined destroy of AST.Atom(v64, type metadata accessor for AST.CustomCharacterClass.Member);
    return;
  }
  if (Substring.distance(from:to:)() < 1)
    goto LABEL_34;
  v26 = *(_QWORD *)(v211 + 24);
  swift_bridgeObjectRetain();
  String.subscript.getter();
  v204 = v88;
  v203 = v89;
  v62 = (uint64_t)v90;
  swift_bridgeObjectRelease();
  v2 = v211;
  v91 = Substring.index(_:offsetBy:limitedBy:)();
  into = v92;
  swift_bridgeObjectRelease();
  if ((into & 1) != 0)
  {
LABEL_34:
    v68 = MEMORY[0x1DF0F366C](v83, v85, v61, v65);
    v66 = v93;
    swift_bridgeObjectRelease();
    v67 = *(_QWORD *)(v2 + 16);
    v65 = v209;
    into = v206;
    v62 = v207;
    if (v67 >> 14 < v209 >> 14)
    {
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
      goto LABEL_135;
    }
    v26 = v208;
    v61 = v205;
    v45 = v202;
    if (!v66)
      goto LABEL_42;
    goto LABEL_36;
  }
  if (v26 >> 14 >= v91 >> 14)
  {
    *(_QWORD *)(v2 + 16) = v91;
    *(_QWORD *)(v2 + 24) = v26;
    goto LABEL_34;
  }
LABEL_135:
  __break(1u);
  while (2)
  {
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v65 + 16) + 1, 1, (_QWORD *)v65);
LABEL_46:
    v103 = *(_QWORD *)(v65 + 16);
    v102 = *(_QWORD *)(v65 + 24);
    v104 = v199;
    if (v103 >= v102 >> 1)
    {
      v183 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v102 > 1, v103 + 1, 1, (_QWORD *)v65);
      v104 = v199;
      v65 = v183;
    }
    *(_QWORD *)(v65 + 16) = v103 + 1;
    v105 = v65 + v61 + v103 * v62;
    v106 = (uint64_t)v104;
    while (2)
    {
      outlined init with take of AST.Atom.Kind(v106, v105, type metadata accessor for AST.CustomCharacterClass.Member);
      into->_rawValue = (void *)v65;
      v65 = *(_QWORD *)(v2 + 16);
      closure #1 in Parser.lexComment()(v2, &v216);
      v107 = v217;
      if (v217)
      {
        v108 = *(_QWORD *)(v2 + 16);
        if (v108 >> 14 < v65 >> 14)
          goto LABEL_131;
        v109 = v216;
LABEL_80:
        v130 = v210;
        *v210 = v109;
        v130[1] = v107;
        v130[2] = v65;
        v130[3] = v108;
        swift_storeEnumTagMultiPayload();
        v65 = (unint64_t)into->_rawValue;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v65 + 16) + 1, 1, (_QWORD *)v65);
        v132 = *(_QWORD *)(v65 + 16);
        v131 = *(_QWORD *)(v65 + 24);
        if (v132 >= v131 >> 1)
          v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v131 > 1, v132 + 1, 1, (_QWORD *)v65);
        *(_QWORD *)(v65 + 16) = v132 + 1;
        v105 = v65 + v61 + v132 * v62;
        v106 = (uint64_t)v210;
        continue;
      }
      break;
    }
    if ((*(_BYTE *)(v2 + 56) & 1) == 0)
      goto LABEL_86;
    into = *(Swift::OpaquePointer **)(v2 + 16);
    swift_bridgeObjectRetain();
    v110 = String.subscript.getter();
    v61 = v111;
    v65 = v112;
    swift_bridgeObjectRelease();
    if (v61 >> 14 < v110 >> 14)
      goto LABEL_132;
    v209 = (unint64_t)into;
    v113 = Substring.subscript.getter();
    v61 = v114;
    v62 = (uint64_t)v115;
    swift_bridgeObjectRelease();
    v26 = v61 >> 14;
    if (v113 >> 14 != v61 >> 14)
    {
      v204 = v113 >> 14;
      v2 = v113 >> 14;
      while (1)
      {
        v116 = Substring.subscript.getter();
        if ((v117 & 0x2000000000000000) != 0)
          v118 = HIBYTE(v117) & 0xF;
        else
          v118 = v116 & 0xFFFFFFFFFFFFLL;
        if (!v118)
        {
          __break(1u);
          goto LABEL_127;
        }
        if ((v117 & 0x1000000000000000) != 0)
        {
          _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }
        else
        {
          if ((v117 & 0x2000000000000000) != 0)
          {
            v216 = v116;
            v217 = v117 & 0xFFFFFFFFFFFFFFLL;
          }
          else if ((v116 & 0x1000000000000000) == 0)
          {
            _StringObject.sharedUTF8.getter();
          }
          _decodeScalar(_:startingAt:)();
        }
        v65 = (unint64_t)v212;
        Unicode.Scalar.properties.getter();
        into = (Swift::OpaquePointer *)Unicode.Scalar.Properties.isPatternWhitespace.getter();
        swift_bridgeObjectRelease();
        (*(void (**)(unint64_t, _QWORD))(v213 + 8))(v65, v214);
        if ((into & 1) == 0)
          break;
        v2 = (unint64_t)Substring.index(after:)() >> 14;
        if (v2 == v26)
        {
          v2 = v61 >> 14;
          break;
        }
      }
      v82 = v2 >= v204;
      v2 = v211;
      if (v82)
        goto LABEL_73;
      goto LABEL_133;
    }
LABEL_73:
    v119 = Substring.subscript.getter();
    v121 = v120;
    v61 = v122;
    v65 = v123;
    swift_bridgeObjectRelease();
    if ((v119 ^ v121) >= 0x4000)
    {
      if (Substring.distance(from:to:)() >= 1)
      {
        v124 = *(_QWORD *)(v211 + 24);
        swift_bridgeObjectRetain();
        String.subscript.getter();
        v204 = v125;
        v203 = v126;
        v26 = v127;
        v2 = v211;
        swift_bridgeObjectRelease();
        v62 = Substring.index(_:offsetBy:limitedBy:)();
        into = v128;
        swift_bridgeObjectRelease();
        if ((into & 1) == 0)
        {
          if (v124 >> 14 < (unint64_t)v62 >> 14)
            continue;
          *(_QWORD *)(v2 + 16) = v62;
          *(_QWORD *)(v2 + 24) = v124;
        }
      }
      v109 = MEMORY[0x1DF0F366C](v119, v121, v61, v65);
      v107 = v129;
      swift_bridgeObjectRelease();
      v108 = *(_QWORD *)(v2 + 16);
      v65 = v209;
      v62 = v207;
      if (v108 >> 14 < v209 >> 14)
        goto LABEL_134;
      into = v206;
      v26 = v208;
      v61 = v205;
      if (!v107)
        goto LABEL_86;
      goto LABEL_80;
    }
    break;
  }
  swift_bridgeObjectRelease();
  into = v206;
  v26 = v208;
  v61 = v205;
  v62 = v207;
LABEL_86:
  v133 = v201;
  Parser.parseCCCMember()(v201);
  if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t))(v194 + 48))(v133, 1, v26) == 1)
  {
    outlined destroy of AST.Atom((uint64_t)v187, type metadata accessor for AST.CustomCharacterClass.Member);
    v134 = &demangling cache variable for type metadata for AST.CustomCharacterClass.Member?;
    goto LABEL_97;
  }
  v135 = v193;
  outlined init with take of AST.Atom.Kind(v133, v193, type metadata accessor for AST.CustomCharacterClass.Member);
  outlined init with copy of AST.Atom(v135, v195, type metadata accessor for AST.CustomCharacterClass.Member);
  v136 = into->_rawValue;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v136 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v136[2] + 1, 1, v136);
  v138 = v136[2];
  v137 = v136[3];
  if (v138 >= v137 >> 1)
    v136 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v137 > 1, v138 + 1, 1, v136);
  v136[2] = v138 + 1;
  outlined init with take of AST.Atom.Kind(v195, (uint64_t)v136 + v61 + v138 * v62, type metadata accessor for AST.CustomCharacterClass.Member);
  into->_rawValue = v136;
  v133 = (uint64_t)v192;
  v139 = (uint64_t)v187;
  makeOperand #1 (_:isLHS:) in Parser.parsePotentialCCRange(into:)((uint64_t)v187);
  outlined destroy of AST.Atom(v139, type metadata accessor for AST.CustomCharacterClass.Member);
  v140 = *(unsigned int (**)(uint64_t, uint64_t, unint64_t))(v191 + 48);
  v26 = v196;
  if (v140(v133, 1, v196) != 1)
  {
    v143 = v200;
    outlined init with take of AST.Atom.Kind(v133, v200, type metadata accessor for AST.Atom);
    v133 = (uint64_t)v190;
    v144 = v193;
    makeOperand #1 (_:isLHS:) in Parser.parsePotentialCCRange(into:)(v193);
    outlined destroy of AST.Atom(v144, type metadata accessor for AST.CustomCharacterClass.Member);
    if (v140(v133, 1, v26) == 1)
    {
      v141 = type metadata accessor for AST.Atom;
      v142 = v143;
      goto LABEL_96;
    }
    outlined init with take of AST.Atom.Kind(v133, (uint64_t)v189, type metadata accessor for AST.Atom);
    v65 = *((_QWORD *)into->_rawValue + 2) - v186 + 1;
    v145 = specialized BidirectionalCollection.suffix(_:)(v65, (uint64_t)into->_rawValue);
    v213 = v146;
    *(_QWORD *)&v214 = v145;
    v61 = v147;
    v2 = v148 >> 1;
    swift_bridgeObjectRetain();
    v75 = (char *)MEMORY[0x1E0DEE9D8];
    if (v61 != v2)
    {
      v212 = (Swift::OpaquePointer *)(v2 - 1);
      into = (Swift::OpaquePointer *)v61;
LABEL_101:
      v149 = v213 + v62 * (_QWORD)into;
      v62 = (uint64_t)into;
      while ((uint64_t)into >= (uint64_t)v61 && v62 < v2)
      {
        v150 = v197;
        outlined init with copy of AST.Atom(v149, v197, type metadata accessor for AST.CustomCharacterClass.Member);
        v151 = (char *)(v62 + 1);
        v152 = v150;
        v26 = v198;
        outlined init with take of AST.Atom.Kind(v152, v198, type metadata accessor for AST.CustomCharacterClass.Member);
        if (swift_getEnumCaseMultiPayload() == 4)
        {
          v210 = *(uint64_t **)v26;
          v209 = *(_QWORD *)(v26 + 8);
          v153 = *(_QWORD *)(v26 + 16);
          v26 = *(_QWORD *)(v26 + 24);
          v204 = v153;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v75 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v75 + 2) + 1, 1, v75, &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
          v155 = *((_QWORD *)v75 + 2);
          v154 = *((_QWORD *)v75 + 3);
          if (v155 >= v154 >> 1)
            v75 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v154 > 1), v155 + 1, 1, v75, &demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Trivia>);
          *((_QWORD *)v75 + 2) = v155 + 1;
          v156 = &v75[32 * v155];
          v157 = v209;
          *((_QWORD *)v156 + 4) = v210;
          *((_QWORD *)v156 + 5) = v157;
          *((_QWORD *)v156 + 6) = v204;
          *((_QWORD *)v156 + 7) = v26;
          into = (Swift::OpaquePointer *)(v62 + 1);
          v158 = v212 == (Swift::OpaquePointer *)v62;
          v62 = v207;
          if (v158)
            goto LABEL_116;
          goto LABEL_101;
        }
        outlined destroy of AST.Atom(v26, type metadata accessor for AST.CustomCharacterClass.Member);
        v149 += v207;
        ++v62;
        if ((char *)v2 == v151)
          goto LABEL_115;
      }
      goto LABEL_137;
    }
    goto LABEL_116;
  }
  v141 = type metadata accessor for AST.CustomCharacterClass.Member;
  v142 = v193;
LABEL_96:
  outlined destroy of AST.Atom(v142, v141);
  v134 = &demangling cache variable for type metadata for AST.Atom?;
LABEL_97:
  outlined destroy of _ASTParent?(v133, v134);
}

void makeOperand #1 (_:isLHS:) in Parser.parsePotentialCCRange(into:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD);
  char *v6;
  uint64_t v7;

  v2 = type metadata accessor for AST.CustomCharacterClass.Member(0);
  MEMORY[0x1E0C80A78](v2, v3);
  outlined init with copy of AST.Atom(a1, (uint64_t)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  v6 = (char *)sub_1DEFC5DE4 + 4 * byte_1DEFFDB2E[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1DEFC5DE4()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  uint64_t v3;

  outlined destroy of AST.Atom(v1, type metadata accessor for AST.CustomCharacterClass.Member);
  v2._countAndFlagsBits = 0x6C20646573726150;
  v2._object = (void *)0xEC00000072657461;
  Parser.unreachable(_:)(v2);
  v3 = type metadata accessor for AST.Atom(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v0, 1, 1, v3);
}

uint64_t specialized BidirectionalCollection.suffix(_:)(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for AST.CustomCharacterClass.Member(0);
    return a2;
  }
  return result;
}

unint64_t specialized RangeReplaceableCollection<>.removeLast(_:)(unint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  BOOL v3;

  if (result)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v2 = *(_QWORD *)(*(_QWORD *)v1 + 16);
      v3 = v2 >= result;
      result = v2 - result;
      if (v3)
        return specialized Array.replaceSubrange<A>(_:with:)(result, v2);
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized parseWithRecovery<A>(_:_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15[6];
  char *v16[2];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  v20 = a1;
  v21 = a2;
  swift_bridgeObjectRetain();
  v6 = String.init<A>(_:)();
  v8 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0)
    v8 = v6;
  v9 = 7;
  if (((v7 >> 60) & ((v6 & 0x800000000000000) == 0)) != 0)
    v9 = 11;
  v10 = (char *)MEMORY[0x1E0DEE9D8];
  v29 = MEMORY[0x1E0DEE9D8];
  v20 = v6;
  v21 = v7;
  v22 = 15;
  v23 = v9 | (v8 << 16);
  v24 = 0;
  v25 = 0;
  v26 = MEMORY[0x1E0DEE9E8];
  v27 = a3;
  v28 = 3;
  Parser.parse()(&v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = v17;
  v11 = v18;
  v13 = v19;
  v15[0] = v17;
  v15[1] = v18;
  v15[2] = v19;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static CaptureList.Builder.build(_:)(v15, v16);
  v15[3] = v12;
  v15[4] = v11;
  v15[5] = v13;
  v16[1] = v10;
  RegexValidator.validate()(a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t parseWithRecovery<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v19[6];
  char *v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;

  MEMORY[0x1E0C80A78](a1, a2);
  v6 = *v5;
  (*(void (**)(char *, uint64_t))(v7 + 16))((char *)&v19[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  v9 = String.init<A>(_:)();
  v11 = HIBYTE(v10) & 0xF;
  if ((v10 & 0x2000000000000000) == 0)
    v11 = v9;
  v12 = 7;
  if (((v10 >> 60) & ((v9 & 0x800000000000000) == 0)) != 0)
    v12 = 11;
  v13 = (char *)MEMORY[0x1E0DEE9D8];
  v33 = MEMORY[0x1E0DEE9D8];
  v24 = v9;
  v25 = v10;
  v26 = 15;
  v27 = v12 | (v11 << 16);
  v28 = 0;
  v29 = 0;
  v30 = MEMORY[0x1E0DEE9E8];
  v31 = v6;
  v32 = 3;
  Parser.parse()(&v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15 = v21;
  v14 = v22;
  v16 = v23;
  v19[0] = v21;
  v19[1] = v22;
  v19[2] = v23;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static CaptureList.Builder.build(_:)(v19, v20);
  v19[3] = v15;
  v19[4] = v14;
  v19[5] = v16;
  v20[1] = v13;
  RegexValidator.validate()(a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t validate(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[6];
  char *v8[2];

  v3 = a1[1];
  v5 = a1[2];
  v7[0] = *a1;
  v4 = v7[0];
  v7[1] = v3;
  v7[2] = v5;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static CaptureList.Builder.build(_:)(v7, v8);
  v7[3] = v4;
  v7[4] = v3;
  v7[5] = v5;
  v8[1] = (char *)MEMORY[0x1E0DEE9D8];
  RegexValidator.validate()(a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t parse<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;

  v23 = *a2;
  result = parseWithRecovery<A>(_:_:)(a1, (uint64_t)&v23, (uint64_t)v21);
  v5 = v21[1];
  v6 = v22;
  v7 = *(_QWORD *)(v22 + 16) + 1;
  v8 = v22;
  while (--v7)
  {
    v9 = v8 + 80;
    v10 = *(unsigned __int8 *)(v8 + 32);
    v8 += 80;
    if (v10 <= 1)
    {
      v11 = *(_QWORD *)(v9 - 32);
      v12 = *(_QWORD *)(v9 - 24);
      v13 = *(_QWORD *)(v9 - 16);
      v19 = *(_QWORD *)(v9 - 8);
      v20 = *(_QWORD *)(v9 - 40);
      v14 = *(_QWORD *)(v9 + 16);
      v17 = *(_QWORD *)(v9 + 8);
      v18 = *(_QWORD *)v9;
      v15 = *(_BYTE *)(v9 + 24);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()>);
      lazy protocol witness table accessor for type Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()> and conformance Source.LocatedError<A>(&lazy protocol witness table cache variable for type Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()> and conformance Source.LocatedError<A>, &demangling cache variable for type metadata for Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()>, (uint64_t)&protocol conformance descriptor for Source.LocatedError<A>);
      swift_allocError();
      *(_BYTE *)v16 = v10;
      *(_QWORD *)(v16 + 8) = v20;
      *(_QWORD *)(v16 + 16) = v11;
      *(_QWORD *)(v16 + 24) = v12;
      *(_QWORD *)(v16 + 32) = v13;
      *(_QWORD *)(v16 + 40) = v19;
      *(_QWORD *)(v16 + 48) = v18;
      *(_QWORD *)(v16 + 56) = v17;
      *(_QWORD *)(v16 + 64) = v14;
      *(_BYTE *)(v16 + 72) = v15;
      *(_QWORD *)(v16 + 80) = v12;
      *(_QWORD *)(v16 + 88) = v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of ParseError?(v19, v18, v17, v14, v15);
      swift_willThrow();
      swift_bridgeObjectRelease_n();
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }
  *a3 = v21[0];
  a3[1] = v5;
  a3[2] = v6;
  return result;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (uint64_t *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

void static SyntaxOptions.traditional.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void static SyntaxOptions.experimental.getter(_QWORD *a1@<X8>)
{
  *a1 = 61;
}

uint64_t parseWithDelimitersWithRecovery<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  Swift::String v6;
  unsigned __int128 v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BYTE v12[8];
  uint64_t v13;

  MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(_BYTE *))(v4 + 16))(&v12[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)]);
  v5 = (void *)String.init<A>(_:)();
  v6._countAndFlagsBits = (uint64_t)v12;
  v6._object = v5;
  v7 = (unsigned __int128)droppingRegexDelimiters(_:)(v6);
  v8 = v7;
  v9 = *((_QWORD *)&v7 + 1);
  swift_bridgeObjectRelease();
  if ((v12[0] & 1) != 0)
  {
    v10 = 61;
  }
  else if (v13 >= 1 && (specialized StringProtocol.spansMultipleLinesInRegexLiteral.getter(v8, v9) & 1) != 0)
  {
    v10 = 67;
  }
  else
  {
    v10 = 0;
  }
  specialized parseWithRecovery<A>(_:_:)(v8, v9, v10, a2);
  return swift_bridgeObjectRelease();
}

uint64_t Collection.offsets(of:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v6 = ((uint64_t (*)(void))Collection.offset(of:))();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v7 = type metadata accessor for Range();
  result = Collection.offset(of:)(a1 + *(int *)(v7 + 36), a2, a3);
  if (result >= v6)
    return v6;
  __break(1u);
  return result;
}

uint64_t Collection.index(atOffset:)()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v1 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v2);
  v4 = (char *)&v6 - v3;
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.index(_:offsetBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, AssociatedTypeWitness);
}

uint64_t Error.addingLocation(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _BYTE v26[40];

  v5 = v4;
  v10 = *(_QWORD *)(a3 - 8);
  v11 = MEMORY[0x1E0C80A78](a1, a2);
  v13 = &v26[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  MEMORY[0x1E0C80A78](v11, v14);
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  ((void (*)(_BYTE *, uint64_t))v15)(&v26[-v16 - 8], v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocatedErrorProtocol);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v26);
    v17 = swift_allocError();
    v15(v18, v5, a3);
  }
  else
  {
    v15((uint64_t)v13, v5, a3);
    v20 = type metadata accessor for Source.LocatedError(0, a3, a4, v19);
    MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for Source.LocatedError<A>, v20);
    v17 = swift_allocError();
    v22 = v21;
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v21, v13, a3);
    v23 = (_QWORD *)(v22 + *(int *)(v20 + 36));
    *v23 = a1;
    v23[1] = a2;
  }
  return v17;
}

double RegexValidator.validate()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  Swift::Int v8;
  Swift::Int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double result;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  _QWORD *v30;
  Swift::Int v31[3];
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  v2 = MEMORY[0x1E0DEE9D8];
  if (*(_QWORD *)(v1 + 8))
    v2 = *(_QWORD *)(v1 + 8);
  v27 = v2;
  v3 = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRetain();
  if (v3)
  {
    if (*(_QWORD *)(v27 + 16))
      __asm { BR              X11 }
    __break(1u);
    goto LABEL_21;
  }
  swift_bridgeObjectRelease();
  v31[2] = MEMORY[0x1E0DEE9E8];
  v4 = v30[3];
  v5 = *(_QWORD *)(v4 + 16);
  swift_bridgeObjectRetain();
  if (v5)
  {
    v6 = 0;
    v28 = v5;
    v7 = (_OWORD *)(v4 + 64);
    while (v6 < *(_QWORD *)(v4 + 16))
    {
      v8 = *((_QWORD *)v7 - 3);
      if (v8)
      {
        v9 = *((_QWORD *)v7 - 4);
        v29 = *v7;
        swift_bridgeObjectRetain_n();
        v10 = specialized Set._Variant.insert(_:)(v31, v9, v8);
        swift_bridgeObjectRelease();
        if ((v10 & 1) != 0)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          *(_QWORD *)&v32 = v9;
          *((_QWORD *)&v32 + 1) = v8;
          v33 = 0;
          v34 = 0;
          v35 = 33;
          ParseError.description.getter();
          v12 = v11;
          v14 = v13;
          v15 = (char *)v30[4];
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v15 + 2) + 1, 1, v15);
          v16 = v29;
          v18 = *((_QWORD *)v15 + 2);
          v17 = *((_QWORD *)v15 + 3);
          if (v18 >= v17 >> 1)
          {
            v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v17 > 1), v18 + 1, 1, v15);
            v16 = v29;
            v15 = v20;
          }
          *((_QWORD *)v15 + 2) = v18 + 1;
          v19 = &v15[80 * v18];
          v19[32] = 1;
          *((_QWORD *)v19 + 5) = v12;
          *((_QWORD *)v19 + 6) = v14;
          *(_OWORD *)(v19 + 56) = v16;
          *((_QWORD *)v19 + 9) = v9;
          *((_QWORD *)v19 + 10) = v8;
          *((_QWORD *)v19 + 11) = 0;
          *((_QWORD *)v19 + 12) = 0;
          v19[104] = 33;
          swift_bridgeObjectRelease_n();
          v30[4] = v15;
          v5 = v28;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      ++v6;
      v7 = (_OWORD *)((char *)v7 + 56);
      if (v5 == v6)
        goto LABEL_19;
    }
LABEL_21:
    __break(1u);
    JUMPOUT(0x1DEFC7234);
  }
LABEL_19:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v32 = *v30;
  RegexValidator.validateNode(_:)((uint64_t)&v32);
  v21 = v30[1];
  v22 = v30[2];
  *(_QWORD *)&v32 = *v30;
  *((_QWORD *)&v32 + 1) = v21;
  v33 = v22;
  v23 = v30[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  specialized Array.append<A>(contentsOf:)(v23);
  v24 = v33;
  result = *(double *)&v32;
  *(_OWORD *)a1 = v32;
  *(_QWORD *)(a1 + 16) = v24;
  return result;
}

void RegexValidator.validateNode(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = type metadata accessor for AST.CustomCharacterClass.Member(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v4 = type metadata accessor for AST.Atom(0);
  MEMORY[0x1E0C80A78](v4, v5);
  __asm { BR              X11 }
}

void sub_1DEFC72FC(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v4 = 0;
    do
    {
      if (v4 >= *(_QWORD *)(v2 + 16))
      {
        __break(1u);
        JUMPOUT(0x1DEFC7B88);
      }
      v5 = v4 + 1;
      *(_QWORD *)(v1 - 160) = *(_QWORD *)(v2 + 32 + 8 * v4);
      RegexValidator.validateNode(_:)(v1 - 160);
      v4 = v5;
    }
    while (v3 != v5);
  }
}

double RegexValidator.expectInvalid(at:)(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned int v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v17;
  _QWORD v18[2];

  v2 = v1;
  v3 = *a1;
  v4 = *(_QWORD *)(v1 + 16);
  v5 = (unsigned __int8 *)(v4 + 32);
  v6 = *(_QWORD *)(v4 + 16) + 1;
  while (--v6)
  {
    v7 = *v5;
    v5 += 80;
    if (v7 < 2)
      return *(double *)&v3;
  }
  v17 = *a1;
  strcpy((char *)v18, "UNREACHABLE: ");
  HIWORD(v18[1]) = -4864;
  v8._countAndFlagsBits = 0xD00000000000001ELL;
  v8._object = (void *)0x80000001DF007190;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9 = v18[0];
  v10 = v18[1];
  v11 = *(char **)(v1 + 32);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
  v13 = *((_QWORD *)v11 + 2);
  v12 = *((_QWORD *)v11 + 3);
  v3 = v17;
  if (v13 >= v12 >> 1)
  {
    v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1, v11);
    v3 = v17;
    v11 = v15;
  }
  *((_QWORD *)v11 + 2) = v13 + 1;
  v14 = &v11[80 * v13];
  v14[32] = 0;
  *((_QWORD *)v14 + 5) = v9;
  *((_QWORD *)v14 + 6) = v10;
  *(_OWORD *)(v14 + 56) = v3;
  *(_QWORD *)&v3 = 0;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  v14[104] = -1;
  *(_QWORD *)(v2 + 32) = v11;
  return *(double *)&v3;
}

void RegexValidator.validateMatchingOption(_:)(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1DEFC80F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;

  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease();
  v3._object = (void *)0x80000001DF006850;
  v3._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v3);
  v4 = *(_QWORD *)(v0 + 32);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v4 + 16) + 1, 1, (char *)v4);
    v4 = result;
  }
  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = v6 + 1;
  if (v6 >= v7 >> 1)
  {
    v12 = v6 + 1;
    v10 = (char *)v4;
    v11 = *(_QWORD *)(v4 + 16);
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v6 + 1, 1, v10);
    v6 = v11;
    v8 = v12;
    v4 = result;
  }
  *(_QWORD *)(v4 + 16) = v8;
  v9 = v4 + 80 * v6;
  *(_BYTE *)(v9 + 32) = 1;
  *(_QWORD *)(v9 + 40) = 0xD000000000000011;
  *(_QWORD *)(v9 + 48) = 0x80000001DF007210;
  *(_QWORD *)(v9 + 56) = v2;
  *(_QWORD *)(v9 + 64) = v1;
  *(_QWORD *)(v9 + 72) = 0xD000000000000011;
  *(_QWORD *)(v9 + 80) = 0x80000001DF007210;
  *(_QWORD *)(v9 + 88) = 0;
  *(_QWORD *)(v9 + 96) = 0;
  *(_BYTE *)(v9 + 104) = 29;
  *(_QWORD *)(v0 + 32) = v4;
  return result;
}

void RegexValidator.validateMatchingOptions(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _OWORD *v5;
  __int128 v6;
  uint64_t v7;
  unint64_t v8;
  _OWORD *v9;
  __int128 v10;
  _BYTE v11[8];
  __int128 v12;

  v1 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(v1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (_OWORD *)(v1 + 40);
    while (v4 < *(_QWORD *)(v1 + 16))
    {
      ++v4;
      v11[0] = *((_BYTE *)v5 - 8);
      v6 = *v5;
      v5 = (_OWORD *)((char *)v5 + 24);
      v12 = v6;
      RegexValidator.validateMatchingOption(_:)((uint64_t)v11);
      if (v3 == v4)
        goto LABEL_5;
    }
    __break(1u);
    goto LABEL_11;
  }
LABEL_5:
  v7 = *(_QWORD *)(v2 + 16);
  if (v7)
  {
    v8 = 0;
    v9 = (_OWORD *)(v2 + 40);
    while (v8 < *(_QWORD *)(v2 + 16))
    {
      ++v8;
      v11[0] = *((_BYTE *)v9 - 8);
      v10 = *v9;
      v9 = (_OWORD *)((char *)v9 + 24);
      v12 = v10;
      RegexValidator.validateMatchingOption(_:)((uint64_t)v11);
      if (v7 == v8)
        return;
    }
LABEL_11:
    __break(1u);
  }
}

uint64_t Unicode.BinaryProperty.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1DEFC84DC + 4 * word_1DEFFDB48[*v0]))(0xD000000000000015, 0x80000001DF004980);
}

uint64_t sub_1DEFC84DC()
{
  return 0x65485F4949435341;
}

uint64_t sub_1DEFC8500()
{
  return 0x7465626168706C41;
}

uint64_t sub_1DEFC851C()
{
  return 0x6E6F435F69646942;
}

unint64_t sub_1DEFC87F4()
{
  return 0xD000000000000017;
}

uint64_t sub_1DEFC8800()
{
  return 0x7361637265776F4CLL;
}

uint64_t sub_1DEFC880C()
{
  return 1752457549;
}

uint64_t sub_1DEFC8838@<X0>(uint64_t a1@<X8>)
{
  return a1 - 7;
}

uint64_t sub_1DEFC8848@<X0>(uint64_t a1@<X8>)
{
  return a1 + 11;
}

uint64_t sub_1DEFC8864@<X0>(uint64_t a1@<X8>)
{
  return a1 - 6;
}

uint64_t sub_1DEFC8874()
{
  return 0x44495F726568744FLL;
}

uint64_t sub_1DEFC8898()
{
  return 0x6F4C5F726568744FLL;
}

uint64_t sub_1DEFC88C0()
{
  return 0x614D5F726568744FLL;
}

uint64_t sub_1DEFC88E0()
{
  return 0x70555F726568744FLL;
}

uint64_t sub_1DEFC8904()
{
  return 0x5F6E726574746150;
}

uint64_t sub_1DEFC8928@<X0>(uint64_t a1@<X8>)
{
  return a1 - 4;
}

uint64_t sub_1DEFC8938@<X0>(uint64_t a1@<X8>)
{
  return a1 + 5;
}

uint64_t sub_1DEFC8948()
{
  return 0x6F697461746F7551;
}

uint64_t sub_1DEFC896C()
{
  return 0x6C616369646152;
}

uint64_t sub_1DEFC8984@<X0>(uint64_t a1@<X8>)
{
  return a1 - 5;
}

uint64_t sub_1DEFC8994()
{
  return 0x746F445F74666F53;
}

uint64_t sub_1DEFC89B4@<X0>(uint64_t a1@<X8>)
{
  return a1 - 6;
}

uint64_t sub_1DEFC89C4@<X0>(uint64_t a1@<X8>)
{
  return a1 - 3;
}

uint64_t sub_1DEFC89D4@<X0>(uint64_t a1@<X8>)
{
  return a1 - 6;
}

void sub_1DEFC8A00()
{
  JUMPOUT(0x1DEFC8A0CLL);
}

uint64_t sub_1DEFC8A18()
{
  return 0x70535F6574696857;
}

uint64_t sub_1DEFC8A38()
{
  return 0x746E6F435F444958;
}

uint64_t sub_1DEFC8A58()
{
  return 0x726174535F444958;
}

uint64_t sub_1DEFC8A78()
{
  return 0x5F73646E61707845;
}

void RegexValidator.validateCharacterProperty(_:at:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD);
  char *v6;
  uint64_t v7;

  v2 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
  MEMORY[0x1E0C80A78](v2, v3);
  outlined init with copy of AST.Atom(a1, (uint64_t)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  v6 = (char *)sub_1DEFC8B78 + 4 * byte_1DEFFDBCE[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1DEFC8B78()
{
  uint64_t v0;

  return outlined destroy of AST.Atom(v0, type metadata accessor for AST.Atom.CharacterProperty.Kind);
}

void sub_1DEFC8EC8(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;

  *(_BYTE *)(v4 - 96) = a1;
  v5._countAndFlagsBits = Unicode.BinaryProperty.rawValue.getter();
  *(_QWORD *)(v4 - 96) = 39;
  *(_QWORD *)(v4 - 88) = 0xE100000000000000;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 39;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  v8 = *(_QWORD *)(v4 - 96);
  v7 = *(void **)(v4 - 88);
  *(_QWORD *)(v4 - 96) = 0;
  *(_QWORD *)(v4 - 88) = 0xE000000000000000;
  _StringGuts.grow(_:)(57);
  v9 = *(_QWORD *)(v4 - 88);
  *(_QWORD *)(v4 - 96) = *(_QWORD *)(v4 - 96);
  *(_QWORD *)(v4 - 88) = v9;
  v10._countAndFlagsBits = v8;
  v10._object = v7;
  String.append(_:)(v10);
  v11._countAndFlagsBits = 0xD000000000000037;
  v11._object = (void *)0x80000001DF006810;
  String.append(_:)(v11);
  v12 = *(_QWORD *)(v4 - 96);
  v13 = *(_QWORD *)(v4 - 88);
  v14 = *(char **)(v1 + 32);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v14 + 2) + 1, 1, v14);
  v16 = *((_QWORD *)v14 + 2);
  v15 = *((_QWORD *)v14 + 3);
  v17 = v16 + 1;
  if (v16 >= v15 >> 1)
  {
    *(_QWORD *)(v4 - 104) = v17;
    v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v16 + 1, 1, v14);
    v17 = *(_QWORD *)(v4 - 104);
    v14 = v19;
  }
  *((_QWORD *)v14 + 2) = v17;
  v18 = &v14[80 * v16];
  v18[32] = 1;
  *((_QWORD *)v18 + 5) = v12;
  *((_QWORD *)v18 + 6) = v13;
  *((_QWORD *)v18 + 7) = v3;
  *((_QWORD *)v18 + 8) = v2;
  *((_QWORD *)v18 + 9) = v8;
  *((_QWORD *)v18 + 10) = v7;
  *((_QWORD *)v18 + 11) = 0;
  *((_QWORD *)v18 + 12) = 0;
  JUMPOUT(0x1DEFC8F98);
}

void RegexValidator.validateAtom(_:inCustomCharacterClass:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD);
  char *v8;
  uint64_t v9;

  v2 = type metadata accessor for AST.Atom.CharacterProperty(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v4 = type metadata accessor for AST.Atom.Kind(0);
  MEMORY[0x1E0C80A78](v4, v5);
  outlined init with copy of AST.Atom(a1, (uint64_t)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  v8 = (char *)sub_1DEFC91D4 + 4 * word_1DEFFDC24[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1DEFC91D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  outlined destroy of AST.Atom(v2, type metadata accessor for AST.Atom.Kind);
  v4 = (uint64_t *)(v1 + *(int *)(type metadata accessor for AST.Atom(0) + 20));
  v5 = *v4;
  v6 = v4[1];
  *(_QWORD *)(v3 - 160) = 0;
  *(_QWORD *)(v3 - 152) = 0xE000000000000000;
  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 - 160) = 0xD000000000000010;
  *(_QWORD *)(v3 - 152) = 0x80000001DF0072C0;
  v7._object = (void *)0x80000001DF006850;
  v7._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v7);
  v8 = *(_QWORD *)(v3 - 160);
  v9 = *(_QWORD *)(v3 - 152);
  v10 = *(_QWORD *)(v0 + 32);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v10 + 16) + 1, 1, (char *)v10);
    v10 = result;
  }
  v13 = *(_QWORD *)(v10 + 16);
  v12 = *(_QWORD *)(v10 + 24);
  if (v13 >= v12 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1, (char *)v10);
    v10 = result;
  }
  *(_QWORD *)(v10 + 16) = v13 + 1;
  v14 = v10 + 80 * v13;
  *(_BYTE *)(v14 + 32) = 1;
  *(_QWORD *)(v14 + 40) = v8;
  *(_QWORD *)(v14 + 48) = v9;
  *(_QWORD *)(v14 + 56) = v5;
  *(_QWORD *)(v14 + 64) = v6;
  *(_QWORD *)(v14 + 72) = 0xD000000000000010;
  *(_QWORD *)(v14 + 80) = 0x80000001DF0072C0;
  *(_QWORD *)(v14 + 88) = 0;
  *(_QWORD *)(v14 + 96) = 0;
  *(_BYTE *)(v14 + 104) = 29;
  *(_QWORD *)(v0 + 32) = v10;
  return result;
}

void RegexValidator.validateCharacterClassMember(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD);
  char *v12;
  uint64_t v13;

  v2 = type metadata accessor for AST.Atom(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v4 = type metadata accessor for AST.CustomCharacterClass.Range(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v6 = type metadata accessor for AST.CustomCharacterClass.Member(0);
  v8 = MEMORY[0x1E0C80A78](v6, v7);
  MEMORY[0x1E0C80A78](v8, v9);
  outlined init with copy of AST.Atom(a1, (uint64_t)&v13 - v10, v11);
  v12 = (char *)&loc_1DEFC9EB8 + dword_1DEFCA0B4[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1DEFC9EC8()
{
  uint64_t v0;

  return outlined destroy of AST.Atom(v0, type metadata accessor for AST.CustomCharacterClass.Member);
}

uint64_t RegexValidator.validateCharacterClassRange(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t result;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  Swift::String v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  Swift::String v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;

  v2 = v1;
  v4 = type metadata accessor for AST.Atom(0);
  v6 = MEMORY[0x1E0C80A78](v4, v5);
  v8 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)&v59 - v10;
  outlined init with copy of AST.Atom(a1, (uint64_t)&v59 - v10, type metadata accessor for AST.Atom);
  v12 = type metadata accessor for AST.CustomCharacterClass.Range(0);
  outlined init with copy of AST.Atom(a1 + *(int *)(v12 + 24), (uint64_t)v8, type metadata accessor for AST.Atom);
  RegexValidator.validateAtom(_:inCustomCharacterClass:)((uint64_t)v11);
  RegexValidator.validateAtom(_:inCustomCharacterClass:)((uint64_t)v8);
  if ((AST.Atom.isValidCharacterClassRangeBound.getter() & 1) == 0)
  {
    outlined destroy of AST.Atom((uint64_t)v8, type metadata accessor for AST.Atom);
    v34 = &v11[*(int *)(v4 + 20)];
    v35 = *(_QWORD *)v34;
    v36 = *((_QWORD *)v34 + 1);
    v37 = (uint64_t)v11;
LABEL_17:
    outlined destroy of AST.Atom(v37, type metadata accessor for AST.Atom);
    v28 = *(char **)(v1 + 32);
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v28 + 2) + 1, 1, v28);
      v28 = (char *)result;
    }
    v40 = *((_QWORD *)v28 + 2);
    v39 = *((_QWORD *)v28 + 3);
    if (v40 >= v39 >> 1)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v39 > 1), v40 + 1, 1, v28);
      v28 = (char *)result;
    }
    *((_QWORD *)v28 + 2) = v40 + 1;
    v41 = &v28[80 * v40];
    v41[32] = 1;
    *((_QWORD *)v41 + 5) = 0xD000000000000027;
    *((_QWORD *)v41 + 6) = 0x80000001DF006BC0;
    *((_QWORD *)v41 + 7) = v35;
    *((_QWORD *)v41 + 8) = v36;
    *((_QWORD *)v41 + 9) = 16;
    *((_QWORD *)v41 + 10) = 0;
    *((_QWORD *)v41 + 11) = 0;
    *((_QWORD *)v41 + 12) = 0;
    v42 = 36;
    goto LABEL_22;
  }
  if ((AST.Atom.isValidCharacterClassRangeBound.getter() & 1) == 0)
  {
    outlined destroy of AST.Atom((uint64_t)v11, type metadata accessor for AST.Atom);
    v38 = &v8[*(int *)(v4 + 20)];
    v35 = *(_QWORD *)v38;
    v36 = *((_QWORD *)v38 + 1);
    v37 = (uint64_t)v8;
    goto LABEL_17;
  }
  AST.Atom.literalCharacterValue.getter();
  if (!v14)
  {
    outlined destroy of AST.Atom((uint64_t)v8, type metadata accessor for AST.Atom);
    v43 = &v11[*(int *)(v4 + 20)];
    v44 = *(_QWORD *)v43;
    v45 = *((_QWORD *)v43 + 1);
    outlined destroy of AST.Atom((uint64_t)v11, type metadata accessor for AST.Atom);
    v62 = 0;
    v63 = 0xE000000000000000;
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
    v62 = 0xD00000000000001DLL;
    v63 = 0x80000001DF007320;
    v46._countAndFlagsBits = 0xD00000000000001BLL;
    v46._object = (void *)0x80000001DF006850;
    String.append(_:)(v46);
    v47 = v62;
    v48 = v63;
    v28 = *(char **)(v1 + 32);
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v28 + 2) + 1, 1, v28);
      v28 = (char *)result;
    }
    v50 = *((_QWORD *)v28 + 2);
    v49 = *((_QWORD *)v28 + 3);
    if (v50 >= v49 >> 1)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v49 > 1), v50 + 1, 1, v28);
      v28 = (char *)result;
    }
    *((_QWORD *)v28 + 2) = v50 + 1;
    v41 = &v28[80 * v50];
    v41[32] = 1;
    *((_QWORD *)v41 + 5) = v47;
    *((_QWORD *)v41 + 6) = v48;
    *((_QWORD *)v41 + 7) = v44;
    *((_QWORD *)v41 + 8) = v45;
    goto LABEL_35;
  }
  v15 = v13;
  v16 = v14;
  outlined destroy of AST.Atom((uint64_t)v11, type metadata accessor for AST.Atom);
  AST.Atom.literalCharacterValue.getter();
  if (!v18)
  {
    swift_bridgeObjectRelease();
    v51 = &v8[*(int *)(v4 + 20)];
    v52 = *(_QWORD *)v51;
    v53 = *((_QWORD *)v51 + 1);
    outlined destroy of AST.Atom((uint64_t)v8, type metadata accessor for AST.Atom);
    v62 = 0;
    v63 = 0xE000000000000000;
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
    v62 = 0xD00000000000001DLL;
    v63 = 0x80000001DF007320;
    v54._countAndFlagsBits = 0xD00000000000001BLL;
    v54._object = (void *)0x80000001DF006850;
    String.append(_:)(v54);
    v55 = v62;
    v56 = v63;
    v28 = *(char **)(v1 + 32);
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v28 + 2) + 1, 1, v28);
      v28 = (char *)result;
    }
    v58 = *((_QWORD *)v28 + 2);
    v57 = *((_QWORD *)v28 + 3);
    if (v58 >= v57 >> 1)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v57 > 1), v58 + 1, 1, v28);
      v28 = (char *)result;
    }
    *((_QWORD *)v28 + 2) = v58 + 1;
    v41 = &v28[80 * v58];
    v41[32] = 1;
    *((_QWORD *)v41 + 5) = v55;
    *((_QWORD *)v41 + 6) = v56;
    *((_QWORD *)v41 + 7) = v52;
    *((_QWORD *)v41 + 8) = v53;
LABEL_35:
    *((_QWORD *)v41 + 9) = 0xD00000000000001DLL;
    *((_QWORD *)v41 + 10) = 0x80000001DF007320;
    *((_QWORD *)v41 + 11) = 0;
    *((_QWORD *)v41 + 12) = 0;
    v42 = 29;
LABEL_22:
    v41[104] = v42;
LABEL_23:
    *(_QWORD *)(v2 + 32) = v28;
    return result;
  }
  v19 = v17;
  v20 = v18;
  outlined destroy of AST.Atom((uint64_t)v8, type metadata accessor for AST.Atom);
  v21 = v19 == v15 && v20 == v16;
  if (!v21 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v62 = v15;
    v63 = v16;
    v64 = v19;
    v65 = v20;
    v66 = 35;
    v22 = (uint64_t *)(a1 + *(int *)(v12 + 20));
    v23 = *v22;
    v60 = v22[1];
    v61 = v23;
    ParseError.description.getter();
    v25 = v24;
    v27 = v26;
    v28 = *(char **)(v1 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v28 + 2) + 1, 1, v28);
    v30 = *((_QWORD *)v28 + 2);
    v29 = *((_QWORD *)v28 + 3);
    if (v30 >= v29 >> 1)
      v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v29 > 1), v30 + 1, 1, v28);
    *((_QWORD *)v28 + 2) = v30 + 1;
    v31 = &v28[80 * v30];
    v31[32] = 1;
    *((_QWORD *)v31 + 5) = v25;
    *((_QWORD *)v31 + 6) = v27;
    v32 = v60;
    *((_QWORD *)v31 + 7) = v61;
    *((_QWORD *)v31 + 8) = v32;
    *((_QWORD *)v31 + 9) = v15;
    *((_QWORD *)v31 + 10) = v16;
    *((_QWORD *)v31 + 11) = v19;
    *((_QWORD *)v31 + 12) = v20;
    v31[104] = 35;
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

unint64_t specialized Source.peekPrefix(maxLength:_:)(uint64_t a1, char a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t result;
  char v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24[2];

  swift_bridgeObjectRetain();
  v4 = String.subscript.getter();
  v6 = v5;
  result = swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    if (v6 >> 14 < v4 >> 14)
    {
LABEL_27:
      __break(1u);
      return result;
    }
  }
  else
  {
    if (a1 < 0)
    {
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    result = Substring.index(_:offsetBy:limitedBy:)();
    if ((v8 & 1) != 0)
      v9 = v6;
    else
      v9 = result;
    if (v9 >> 14 < v4 >> 14)
      goto LABEL_26;
  }
  v10 = Substring.subscript.getter();
  v12 = v11;
  swift_bridgeObjectRelease();
  v13 = v12 >> 14;
  if (v10 >> 14 != v12 >> 14)
  {
    v24[0] = Substring.subscript.getter();
    v24[1] = v14;
    key path getter for Character.isWordCharacter : Character(v24, &v23);
    swift_bridgeObjectRelease();
    if ((v23 & 1) != 0)
    {
      while (1)
      {
        result = Substring.index(after:)();
        v15 = result >> 14;
        if (result >> 14 == v13)
          break;
        v16 = Substring.subscript.getter();
        v18 = v17;
        if ((Character.isLetter.getter() & 1) != 0
          || (Character.isNumber.getter() & 1) != 0
          || v16 == 95 && v18 == 0xE100000000000000)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
          result = swift_bridgeObjectRelease();
          if ((v19 & 1) == 0)
          {
            v13 = v15;
            break;
          }
        }
      }
      if (v13 < v10 >> 14)
      {
        __break(1u);
        goto LABEL_25;
      }
    }
  }
  v20 = Substring.subscript.getter();
  v22 = v21;
  swift_bridgeObjectRelease();
  if (!((v20 ^ v22) >> 14))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v20;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t result;
  char v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;

  v31 = type metadata accessor for Unicode.Scalar.Properties();
  v4 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31, v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  v8 = String.subscript.getter();
  v10 = v9;
  result = swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    if (v10 >> 14 < v8 >> 14)
    {
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
  }
  else
  {
    if (a1 < 0)
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    result = Substring.index(_:offsetBy:limitedBy:)();
    if ((v12 & 1) != 0)
      v13 = v10;
    else
      v13 = result;
    if (v13 >> 14 < v8 >> 14)
      goto LABEL_36;
  }
  v14 = Substring.subscript.getter();
  v16 = v15;
  swift_bridgeObjectRelease();
  v17 = v16 >> 14;
  v29 = v14 >> 14;
  if (v14 >> 14 != v16 >> 14)
  {
    v18 = Substring.subscript.getter();
    result = specialized Collection.first.getter(v18, v19);
    if ((result & 0x100000000) != 0)
    {
LABEL_37:
      __break(1u);
      return result;
    }
    Unicode.Scalar.properties.getter();
    v20 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
    v30 = *(void (**)(char *, uint64_t))(v4 + 8);
    v30(v7, v31);
    swift_bridgeObjectRelease();
    if ((v20 & 1) != 0)
    {
      while (1)
      {
        result = Substring.index(after:)();
        v21 = result >> 14;
        if (result >> 14 == v17)
          break;
        result = Substring.subscript.getter();
        if ((v22 & 0x2000000000000000) != 0)
          v23 = HIBYTE(v22) & 0xF;
        else
          v23 = result & 0xFFFFFFFFFFFFLL;
        if (!v23)
        {
          __break(1u);
          goto LABEL_33;
        }
        if ((v22 & 0x1000000000000000) != 0)
        {
          _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }
        else
        {
          if ((v22 & 0x2000000000000000) != 0)
          {
            v32 = result;
            v33 = v22 & 0xFFFFFFFFFFFFFFLL;
          }
          else if ((result & 0x1000000000000000) == 0)
          {
            _StringObject.sharedUTF8.getter();
          }
          _decodeScalar(_:startingAt:)();
        }
        Unicode.Scalar.properties.getter();
        v24 = Unicode.Scalar.Properties.isPatternWhitespace.getter();
        v30(v7, v31);
        result = swift_bridgeObjectRelease();
        if ((v24 & 1) == 0)
        {
          v17 = v21;
          break;
        }
      }
      if (v17 >= v29)
        goto LABEL_29;
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
  }
LABEL_29:
  v25 = Substring.subscript.getter();
  v27 = v26;
  swift_bridgeObjectRelease();
  if (!((v25 ^ v27) >> 14))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v25;
}

{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t result;
  char v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;

  swift_bridgeObjectRetain();
  v4 = String.subscript.getter();
  v6 = v5;
  result = swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    if (v6 >> 14 >= v4 >> 14)
      goto LABEL_9;
LABEL_30:
    __break(1u);
    return result;
  }
  if (a1 < 0)
    goto LABEL_28;
  result = Substring.index(_:offsetBy:limitedBy:)();
  if ((v8 & 1) != 0)
    v9 = v6;
  else
    v9 = result;
  if (v9 >> 14 < v4 >> 14)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
LABEL_9:
  v10 = Substring.subscript.getter();
  v12 = v11;
  swift_bridgeObjectRelease();
  v13 = v10 >> 14;
  v14 = v12 >> 14;
  if (v10 >> 14 == v12 >> 14)
    goto LABEL_23;
  if (Substring.subscript.getter() == 123 && v15 == 0xE100000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v16 & 1) == 0)
      goto LABEL_23;
  }
  result = Substring.index(after:)();
  v17 = result >> 14;
  if (result >> 14 == v14)
  {
LABEL_22:
    if (v14 < v13)
      goto LABEL_27;
    goto LABEL_23;
  }
  while (1)
  {
    if (Substring.subscript.getter() == 123 && v19 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    if ((v18 & 1) == 0)
      break;
LABEL_17:
    result = Substring.index(after:)();
    v17 = result >> 14;
    if (result >> 14 == v14)
    {
      v13 = v10 >> 14;
      goto LABEL_22;
    }
  }
  if (v17 < v10 >> 14)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
LABEL_23:
  v20 = Substring.subscript.getter();
  v22 = v21;
  swift_bridgeObjectRelease();
  if (!((v20 ^ v22) >> 14))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v20;
}

{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t result;
  char v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;

  swift_bridgeObjectRetain();
  v4 = String.subscript.getter();
  v6 = v5;
  result = swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    if (v6 >> 14 < v4 >> 14)
    {
LABEL_23:
      __break(1u);
      return result;
    }
  }
  else
  {
    if (a1 < 0)
    {
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    result = Substring.index(_:offsetBy:limitedBy:)();
    if ((v8 & 1) != 0)
      v9 = v6;
    else
      v9 = result;
    if (v9 >> 14 < v4 >> 14)
      goto LABEL_22;
  }
  v10 = Substring.subscript.getter();
  v12 = v11;
  swift_bridgeObjectRelease();
  v13 = v12 >> 14;
  if (v10 >> 14 != v12 >> 14)
  {
    v14 = Substring.subscript.getter();
    v16 = Character.isOctalDigit.getter(v14, v15);
    swift_bridgeObjectRelease();
    if ((v16 & 1) != 0)
    {
      result = Substring.index(after:)();
      v17 = result >> 14;
      if (result >> 14 != v13)
      {
        v18 = Substring.subscript.getter();
        v20 = Character.isOctalDigit.getter(v18, v19);
        result = swift_bridgeObjectRelease();
        if ((v20 & 1) != 0)
        {
          while (1)
          {
            result = Substring.index(after:)();
            v17 = result >> 14;
            if (result >> 14 == v13)
              break;
            v21 = Substring.subscript.getter();
            v23 = Character.isOctalDigit.getter(v21, v22);
            result = swift_bridgeObjectRelease();
            if ((v23 & 1) == 0)
              goto LABEL_15;
          }
        }
        else
        {
LABEL_15:
          v13 = v17;
        }
      }
      if (v13 < v10 >> 14)
      {
        __break(1u);
        goto LABEL_21;
      }
    }
  }
  v24 = Substring.subscript.getter();
  v26 = v25;
  swift_bridgeObjectRelease();
  if (!((v24 ^ v26) >> 14))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v24;
}

{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t result;
  char v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  char v15;
  unint64_t v16;
  char v17;
  char v18;
  char v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;

  swift_bridgeObjectRetain();
  v4 = String.subscript.getter();
  v6 = v5;
  result = swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    if (v6 >> 14 < v4 >> 14)
    {
LABEL_23:
      __break(1u);
      return result;
    }
  }
  else
  {
    if (a1 < 0)
    {
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    result = Substring.index(_:offsetBy:limitedBy:)();
    if ((v8 & 1) != 0)
      v9 = v6;
    else
      v9 = result;
    if (v9 >> 14 < v4 >> 14)
      goto LABEL_22;
  }
  v10 = Substring.subscript.getter();
  v12 = v11;
  swift_bridgeObjectRelease();
  v13 = v12 >> 14;
  if (v10 >> 14 != v12 >> 14)
  {
    Substring.subscript.getter();
    Character.hexDigitValue.getter();
    v15 = v14;
    swift_bridgeObjectRelease();
    if ((v15 & 1) == 0)
    {
      result = Substring.index(after:)();
      v16 = result >> 14;
      if (result >> 14 != v13)
      {
        Substring.subscript.getter();
        Character.hexDigitValue.getter();
        v18 = v17;
        result = swift_bridgeObjectRelease();
        if ((v18 & 1) != 0)
        {
LABEL_15:
          v13 = v16;
        }
        else
        {
          while (1)
          {
            result = Substring.index(after:)();
            v16 = result >> 14;
            if (result >> 14 == v13)
              break;
            Substring.subscript.getter();
            Character.hexDigitValue.getter();
            v20 = v19;
            result = swift_bridgeObjectRelease();
            if ((v20 & 1) != 0)
              goto LABEL_15;
          }
        }
      }
      if (v13 < v10 >> 14)
      {
        __break(1u);
        goto LABEL_21;
      }
    }
  }
  v21 = Substring.subscript.getter();
  v23 = v22;
  swift_bridgeObjectRelease();
  if (!((v21 ^ v23) >> 14))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v21;
}

unint64_t Source.peekPrefix(maxLength:_:)(uint64_t a1, char a2, uint64_t (*a3)(uint64_t))
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t result;
  char v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t (*v25)(uint64_t);

  swift_bridgeObjectRetain();
  v6 = String.subscript.getter();
  v8 = v7;
  result = swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    if (v8 >> 14 < v6 >> 14)
    {
LABEL_24:
      __break(1u);
      return result;
    }
  }
  else
  {
    if (a1 < 0)
    {
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    result = Substring.index(_:offsetBy:limitedBy:)();
    if ((v10 & 1) != 0)
      v11 = v8;
    else
      v11 = result;
    if (v11 >> 14 < v6 >> 14)
      goto LABEL_23;
  }
  v12 = Substring.subscript.getter();
  v14 = v13;
  swift_bridgeObjectRelease();
  v15 = v12 >> 14;
  v16 = v14 >> 14;
  if (v12 >> 14 != v14 >> 14)
  {
    v17 = Substring.subscript.getter();
    v18 = a3(v17);
    swift_bridgeObjectRelease();
    if ((v18 & 1) != 0)
    {
      v25 = a3;
      result = Substring.index(after:)();
      v19 = result >> 14;
      if (result >> 14 != v16)
      {
        while (1)
        {
          v20 = Substring.subscript.getter();
          v21 = v25(v20);
          result = swift_bridgeObjectRelease();
          if ((v21 & 1) == 0)
            break;
          result = Substring.index(after:)();
          v19 = result >> 14;
          if (result >> 14 == v16)
            goto LABEL_16;
        }
        v16 = v19;
LABEL_16:
        v15 = v12 >> 14;
      }
      if (v16 < v15)
      {
        __break(1u);
        goto LABEL_22;
      }
    }
  }
  v22 = Substring.subscript.getter();
  v24 = v23;
  swift_bridgeObjectRelease();
  if ((v22 ^ v24) < 0x4000)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v22;
}

uint64_t specialized Sequence<>.starts<A>(with:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v5;
  void *object;
  char v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  Swift::String_optional v13;

  v5 = a3 ^ a4;
  swift_bridgeObjectRetain();
  if (v5 >= 0x4000)
  {
    while (1)
    {
      v9 = Substring.subscript.getter();
      v11 = v10;
      v12 = Substring.index(after:)();
      v13 = String.Iterator.next()();
      if (!v13.value._object)
        break;
      if (v9 == v13.value._countAndFlagsBits && v13.value._object == v11)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v8 & 1) == 0)
          goto LABEL_3;
      }
      if ((v12 ^ a4) < 0x4000)
        goto LABEL_2;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_2:
    object = String.Iterator.next()().value._object;
    swift_bridgeObjectRelease();
    if (object)
    {
LABEL_3:
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  return 1;
}

uint64_t Source.Location.range.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t Source.Location.range.setter(uint64_t result, uint64_t a2)
{
  _QWORD *v2;

  *v2 = result;
  v2[1] = a2;
  return result;
}

uint64_t (*Source.Location.range.modify())()
{
  return AST.root.modify;
}

double Source.Location.init<A>(_:in:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v7;

  lazy protocol witness table accessor for type String and conformance String();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  swift_bridgeObjectRelease();
  result = *(double *)&v7;
  *a3 = v7;
  return result;
}

uint64_t Source.Location.init(from:)@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  if (a2 >> 14 < a1 >> 14)
  {
    __break(1u);
  }
  else
  {
    *a3 = a1;
    a3[1] = a2;
  }
  return result;
}

BOOL Source.Location.isFake.getter()
{
  _QWORD *v0;

  return *v0 < 0x4000uLL && v0[1] < 0x4000uLL;
}

BOOL Source.Location.isReal.getter()
{
  _QWORD *v0;

  return ((*v0 | v0[1]) & 0xFFFFFFFFFFFFC000) != 0;
}

void Source.Location.hash(into:)()
{
  _QWORD *v0;
  unint64_t v1;

  v1 = v0[1];
  Hasher._combine(_:)(*v0 >> 14);
  Hasher._combine(_:)(v1 >> 14);
}

Swift::Int Source.Location.hashValue.getter()
{
  unint64_t *v0;
  unint64_t v1;
  unint64_t v2;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 >> 14);
  Hasher._combine(_:)(v2 >> 14);
  return Hasher._finalize()();
}

uint64_t Source.LocatedError.error.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

__n128 Source.LocatedError.location.getter@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v2;
  __n128 result;

  result = *(__n128 *)(v2 + *(int *)(a1 + 36));
  *a2 = result;
  return result;
}

uint64_t Source.LocatedError.init(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a6, a1, a4);
  result = type metadata accessor for Source.LocatedError(0, a4, a5, v11);
  v13 = (_QWORD *)(a6 + *(int *)(result + 36));
  *v13 = a2;
  v13[1] = a3;
  return result;
}

uint64_t Source.LocatedError._typeErasedError.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v4, v1, v2);
  return v3;
}

uint64_t Source.Located.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*Source.Located.value.modify())()
{
  return AST.root.modify;
}

__n128 Source.Located.location.getter@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v2;
  __n128 result;

  result = *(__n128 *)(v2 + *(int *)(a1 + 28));
  *a2 = result;
  return result;
}

__n128 Source.Located.location.setter(__n128 *a1, uint64_t a2)
{
  uint64_t v2;
  __n128 result;

  result = *a1;
  *(__n128 *)(v2 + *(int *)(a2 + 28)) = *a1;
  return result;
}

uint64_t (*Source.Located.location.modify())()
{
  return AST.root.modify;
}

int64x2_t Source.Located.init(faking:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  int64x2_t result;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  v4 = type metadata accessor for Source.Located();
  result = vdupq_n_s64(0xFuLL);
  *(int64x2_t *)(a3 + *(int *)(v4 + 28)) = result;
  return result;
}

uint64_t Source.Located.map<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(uint64_t);
  uint64_t result;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  v10 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = v13(v5);
  if (!v6)
  {
    v15 = (uint64_t *)(v5 + *(int *)(a3 + 28));
    v16 = *v15;
    v17 = v15[1];
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a5, v12, a4);
    result = type metadata accessor for Source.Located();
    v18 = (_QWORD *)(a5 + *(int *)(result + 28));
    *v18 = v16;
    v18[1] = v17;
  }
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance <A> Source.Located<A>(uint64_t a1, uint64_t a2)
{
  return static Source.Located<A>.== infix(_:_:)(a1, a2);
}

void specialized Source.Located<A>.hash(into:)()
{
  uint64_t v0;
  Swift::UInt v1;
  char v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  __int128 v6[2];
  Swift::UInt v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  outlined init with take of ParseError((__int128 *)v0, (uint64_t)v6);
  outlined init with take of ParseError(v6, (uint64_t)&v7);
  v1 = v7;
  if ((v11 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    v2 = v8;
    v4 = v9;
    v3 = v10;
    Hasher._combine(_:)(0);
    if ((v2 & 1) != 0)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v1);
    }
    Hasher._combine(_:)(v4 >> 14);
    Hasher._combine(_:)(v3 >> 14);
  }
  v5 = *(_QWORD *)(v0 + 48);
  Hasher._combine(_:)(*(_QWORD *)(v0 + 40) >> 14);
  Hasher._combine(_:)(v5 >> 14);
}

void Source.Located<A>.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  dispatch thunk of Hashable.hash(into:)();
  v4 = (_QWORD *)(v2 + *(int *)(a2 + 28));
  v5 = v4[1];
  Hasher._combine(_:)(*v4 >> 14);
  Hasher._combine(_:)(v5 >> 14);
}

Swift::Int Source.Located<A>.hashValue.getter(uint64_t a1)
{
  _BYTE v3[72];

  Hasher.init(_seed:)();
  Source.Located<A>.hash(into:)((uint64_t)v3, a1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <A> Source.Located<A>(uint64_t a1)
{
  return Source.Located<A>.hashValue.getter(a1);
}

void protocol witness for Hashable.hash(into:) in conformance <A> Source.Located<A>(uint64_t a1, uint64_t a2)
{
  Source.Located<A>.hash(into:)(a1, a2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <A> Source.Located<A>(uint64_t a1, uint64_t a2)
{
  _BYTE v4[72];

  Hasher.init(_seed:)();
  Source.Located<A>.hash(into:)((uint64_t)v4, a2);
  return Hasher._finalize()();
}

uint64_t Source.LocatedError.description.getter()
{
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  return 0;
}

uint64_t SyntaxOptions.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t SyntaxOptions.rawValue.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*SyntaxOptions.rawValue.modify())()
{
  return AST.root.modify;
}

_RegexParser::SyntaxOptions __swiftcall SyntaxOptions.init(rawValue:)(_RegexParser::SyntaxOptions rawValue)
{
  _RegexParser::SyntaxOptions *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

_RegexParser::SyntaxOptions __swiftcall SyntaxOptions.init()()
{
  _QWORD *v0;
  _RegexParser::SyntaxOptions result;

  *v0 = 0;
  return result;
}

_QWORD *protocol witness for OptionSet.init(rawValue:) in conformance SyntaxOptions@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void protocol witness for SetAlgebra.init() in conformance SyntaxOptions(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *protocol witness for SetAlgebra.union(_:) in conformance SyntaxOptions@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.intersection(_:) in conformance SyntaxOptions@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance SyntaxOptions@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance SyntaxOptions(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *protocol witness for SetAlgebra.remove(_:) in conformance SyntaxOptions@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *protocol witness for SetAlgebra.update(with:) in conformance SyntaxOptions@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *protocol witness for SetAlgebra.formUnion(_:) in conformance SyntaxOptions(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.formIntersection(_:) in conformance SyntaxOptions(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance SyntaxOptions(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.subtracting(_:) in conformance SyntaxOptions@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance SyntaxOptions(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance SyntaxOptions(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance SyntaxOptions(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance SyntaxOptions()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance SyntaxOptions()
{
  return SetAlgebra.init<A>(_:)();
}

_QWORD *protocol witness for SetAlgebra.subtract(_:) in conformance SyntaxOptions(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance SyntaxOptions@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SyntaxOptions(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SyntaxOptions(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t specialized _ASTPrintable._dump()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;
  uint64_t v27;
  void *v28;
  void *v29;
  Swift::String v30;
  Swift::String v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  AST.Node._associatedValue.getter();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ASTNode);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ASTParent);
  if ((swift_dynamicCast() & 1) == 0)
  {
    v34 = 0;
    v32 = 0u;
    v33 = 0u;
    outlined destroy of _ASTParent?((uint64_t)&v32, &demangling cache variable for type metadata for _ASTParent?);
    swift_release();
    AST.Node._associatedValue.getter();
    v17 = *((_QWORD *)&v33 + 1);
    v18 = v34;
    __swift_project_boxed_opaque_existential_1Tm(&v32, *((uint64_t *)&v33 + 1));
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v18 + 8) + 24))(v17);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v32);
    return v19;
  }
  v0 = *((_QWORD *)&v33 + 1);
  v1 = v34;
  __swift_project_boxed_opaque_existential_1Tm(&v32, *((uint64_t *)&v33 + 1));
  v2 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(v0, v1);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v32);
  result = swift_release();
  v4 = *(_QWORD *)(v2 + 16);
  if (!v4)
  {
    v6 = MEMORY[0x1E0DEE9D8];
    goto LABEL_20;
  }
  v5 = 0;
  v6 = MEMORY[0x1E0DEE9D8];
  do
  {
    v7 = v5;
    while (1)
    {
      if (v7 >= *(_QWORD *)(v2 + 16))
      {
        __break(1u);
        goto LABEL_31;
      }
      v8 = *(_QWORD *)(v2 + 32 + 8 * v7);
      if (v8 >> 60 != 6)
        break;
LABEL_5:
      if (v4 == ++v7)
        goto LABEL_20;
    }
    swift_retain();
    v9 = specialized _ASTPrintable._dump()(v8);
    v11 = v10;
    swift_release();
    v12 = HIBYTE(v11) & 0xF;
    if ((v11 & 0x2000000000000000) == 0)
      v12 = v9 & 0xFFFFFFFFFFFFLL;
    if (!v12)
    {
      result = swift_bridgeObjectRelease();
      goto LABEL_5;
    }
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v6 + 16) + 1, 1, (char *)v6);
      v6 = result;
    }
    v14 = *(_QWORD *)(v6 + 16);
    v13 = *(_QWORD *)(v6 + 24);
    v15 = v14 + 1;
    if (v14 >= v13 >> 1)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, (char *)v6);
      v15 = v14 + 1;
      v6 = result;
    }
    v5 = v7 + 1;
    *(_QWORD *)(v6 + 16) = v15;
    v16 = v6 + 16 * v14;
    *(_QWORD *)(v16 + 32) = v9;
    *(_QWORD *)(v16 + 40) = v11;
  }
  while (v4 - 1 != v7);
LABEL_20:
  swift_bridgeObjectRelease();
  AST.Node._associatedValue.getter();
  v21 = *((_QWORD *)&v33 + 1);
  v20 = v34;
  __swift_project_boxed_opaque_existential_1Tm(&v32, *((uint64_t *)&v33 + 1));
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v20 + 8) + 24))(v21);
  v23 = v22;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v32);
  v24 = *(_QWORD *)(v6 + 16);
  if (v24)
  {
    if (v24 != 1)
      goto LABEL_25;
    v25 = HIBYTE(v23) & 0xF;
    if ((v23 & 0x2000000000000000) == 0)
      v25 = v19 & 0xFFFFFFFFFFFFLL;
    if (v25)
    {
LABEL_25:
      *(_QWORD *)&v32 = v19;
      *((_QWORD *)&v32 + 1) = v23;
      v26._countAndFlagsBits = 40;
      v26._object = (void *)0xE100000000000000;
      String.append(_:)(v26);
      swift_getCanonicalSpecializedMetadata();
      lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t)&unk_1EA9768C0, (uint64_t)&cache variable for noncanonical specialized generic type metadata for [String], MEMORY[0x1E0DEAF20]);
      v27 = BidirectionalCollection<>.joined(separator:)();
      v29 = v28;
      swift_bridgeObjectRelease();
      v30._countAndFlagsBits = v27;
      v30._object = v29;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31._countAndFlagsBits = 41;
      v31._object = (void *)0xE100000000000000;
      String.append(_:)(v31);
      return v32;
    }
    result = swift_bridgeObjectRelease();
    if (*(_QWORD *)(v6 + 16))
    {
      v19 = *(_QWORD *)(v6 + 32);
      swift_bridgeObjectRetain();
      goto LABEL_28;
    }
LABEL_31:
    __break(1u);
  }
  else
  {
LABEL_28:
    swift_bridgeObjectRelease();
    return v19;
  }
  return result;
}

{
  __int128 *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  uint64_t v20;
  void *v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t result;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  outlined init with take of AST.Node((_QWORD *)v0 + 13, &v37);
  v1 = v0[5];
  v33 = v0[4];
  v34 = v1;
  v2 = v0[7];
  v35 = v0[6];
  v36 = v2;
  v3 = v0[1];
  v29 = *v0;
  v30 = v3;
  v4 = v0[3];
  v31 = v0[2];
  v32 = v4;
  outlined init with take of AST.Node(&v37, &v28);
  outlined retain of AST.Node((uint64_t)&v37);
  if (v28 >> 60 == 6)
    goto LABEL_11;
  swift_retain();
  v5 = specialized _ASTPrintable._dump()();
  v7 = v6;
  swift_release();
  v8 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0)
    v8 = v5 & 0xFFFFFFFFFFFFLL;
  if (!v8)
  {
    swift_bridgeObjectRelease();
LABEL_11:
    v9 = (char *)MEMORY[0x1E0DEE9D8];
    goto LABEL_12;
  }
  v9 = (char *)MEMORY[0x1E0DEE9D8];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
  v11 = *((_QWORD *)v9 + 2);
  v10 = *((_QWORD *)v9 + 3);
  v12 = v11 + 1;
  if (v11 >= v10 >> 1)
  {
    v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v11 + 1, 1, v9);
    v12 = v11 + 1;
    v9 = v26;
  }
  *((_QWORD *)v9 + 2) = v12;
  v13 = &v9[16 * v11];
  *((_QWORD *)v13 + 4) = v5;
  *((_QWORD *)v13 + 5) = v7;
LABEL_12:
  swift_arrayDestroy();
  v14 = AST.Group._dumpBase.getter();
  v16 = v14;
  v17 = *((_QWORD *)v9 + 2);
  if (!v17)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    return v16;
  }
  if (v17 != 1)
    goto LABEL_17;
  v18 = HIBYTE(v15) & 0xF;
  if ((v15 & 0x2000000000000000) == 0)
    v18 = v14 & 0xFFFFFFFFFFFFLL;
  if (v18)
  {
LABEL_17:
    v27 = v14;
    v19._countAndFlagsBits = 40;
    v19._object = (void *)0xE100000000000000;
    String.append(_:)(v19);
    swift_getCanonicalSpecializedMetadata();
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t)&unk_1EA9768C0, (uint64_t)&cache variable for noncanonical specialized generic type metadata for [String], MEMORY[0x1E0DEAF20]);
    v20 = BidirectionalCollection<>.joined(separator:)();
    v22 = v21;
    swift_bridgeObjectRelease();
    v23._countAndFlagsBits = v20;
    v23._object = v22;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._countAndFlagsBits = 41;
    v24._object = (void *)0xE100000000000000;
    String.append(_:)(v24);
    return v27;
  }
  result = swift_bridgeObjectRelease();
  if (*((_QWORD *)v9 + 2))
  {
    v16 = *((_QWORD *)v9 + 4);
    swift_bridgeObjectRetain();
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

{
  Swift::String *v0;
  Swift::String v1;

  String.append(_:)(v0[1]);
  v1._countAndFlagsBits = 93;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 91;
}

{
  Swift::String v0;
  Swift::String v1;
  uint64_t v3;

  v3 = AST.Atom._dumpBase.getter();
  v0._countAndFlagsBits = 45;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
  type metadata accessor for AST.CustomCharacterClass.Range(0);
  v1._countAndFlagsBits = AST.Atom._dumpBase.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  return v3;
}

{
  __int128 *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  uint64_t v20;
  void *v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t result;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;

  outlined init with take of AST.Node((_QWORD *)v0 + 13, &v38);
  v1 = v0[7];
  v35 = v0[6];
  v36 = v1;
  v37 = *((_QWORD *)v0 + 16);
  v2 = v0[3];
  v31 = v0[2];
  v32 = v2;
  v3 = v0[5];
  v33 = v0[4];
  v34 = v3;
  v4 = v0[1];
  v29 = *v0;
  v30 = v4;
  outlined init with take of AST.Node(&v38, &v28);
  outlined retain of AST.Node((uint64_t)&v38);
  if (v28 >> 60 == 6)
    goto LABEL_11;
  swift_retain();
  v5 = specialized _ASTPrintable._dump()();
  v7 = v6;
  swift_release();
  v8 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0)
    v8 = v5 & 0xFFFFFFFFFFFFLL;
  if (!v8)
  {
    swift_bridgeObjectRelease();
LABEL_11:
    v9 = (char *)MEMORY[0x1E0DEE9D8];
    goto LABEL_12;
  }
  v9 = (char *)MEMORY[0x1E0DEE9D8];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
  v11 = *((_QWORD *)v9 + 2);
  v10 = *((_QWORD *)v9 + 3);
  v12 = v11 + 1;
  if (v11 >= v10 >> 1)
  {
    v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v11 + 1, 1, v9);
    v12 = v11 + 1;
    v9 = v26;
  }
  *((_QWORD *)v9 + 2) = v12;
  v13 = &v9[16 * v11];
  *((_QWORD *)v13 + 4) = v5;
  *((_QWORD *)v13 + 5) = v7;
LABEL_12:
  swift_arrayDestroy();
  v14 = AST.Quantification._dumpBase.getter();
  v16 = v14;
  v17 = *((_QWORD *)v9 + 2);
  if (!v17)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    return v16;
  }
  if (v17 != 1)
    goto LABEL_17;
  v18 = HIBYTE(v15) & 0xF;
  if ((v15 & 0x2000000000000000) == 0)
    v18 = v14 & 0xFFFFFFFFFFFFLL;
  if (v18)
  {
LABEL_17:
    v27 = v14;
    v19._countAndFlagsBits = 40;
    v19._object = (void *)0xE100000000000000;
    String.append(_:)(v19);
    swift_getCanonicalSpecializedMetadata();
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t)&unk_1EA9768C0, (uint64_t)&cache variable for noncanonical specialized generic type metadata for [String], MEMORY[0x1E0DEAF20]);
    v20 = BidirectionalCollection<>.joined(separator:)();
    v22 = v21;
    swift_bridgeObjectRelease();
    v23._countAndFlagsBits = v20;
    v23._object = v22;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._countAndFlagsBits = 41;
    v24._object = (void *)0xE100000000000000;
    String.append(_:)(v24);
    return v27;
  }
  result = swift_bridgeObjectRelease();
  if (*((_QWORD *)v9 + 2))
  {
    v16 = *((_QWORD *)v9 + 4);
    swift_bridgeObjectRetain();
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  Swift::String v5;
  void *v6;
  Swift::String v7;
  uint64_t v9;

  v1 = (void *)0xE90000000000003ELL;
  v2 = 0x64696C61766E693CLL;
  v3 = 0x64696C61766E693CLL;
  if ((*(_BYTE *)(v0 + 8) & 1) == 0)
    v3 = dispatch thunk of CustomStringConvertible.description.getter();
  v9 = v3;
  v4 = *(_BYTE *)(v0 + 40);
  v5._countAndFlagsBits = 46;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  if ((v4 & 1) == 0)
  {
    v2 = dispatch thunk of CustomStringConvertible.description.getter();
    v1 = v6;
  }
  v7._countAndFlagsBits = v2;
  v7._object = v1;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  return v9;
}

{
  _BYTE *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  Swift::String v4;

  if ((*v0 & 1) != 0)
    v1 = 15678;
  else
    v1 = 61;
  if ((*v0 & 1) != 0)
    v2 = 0xE200000000000000;
  else
    v2 = 0xE100000000000000;
  v3 = v2;
  String.append(_:)(*(Swift::String *)&v1);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = specialized _ASTPrintable._dump()();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  return 0x4E4F4953524556;
}

uint64_t specialized _ASTPrintable._dump()(uint64_t a1, uint64_t a2)
{
  Swift::String v2;

  String.append(_:)(*(Swift::String *)&a1);
  v2._countAndFlagsBits = 34;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0x222065746F7571;
}

uint64_t specialized _ASTPrintable._dump()(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    return 0x64696C61766E693CLL;
  else
    return dispatch thunk of CustomStringConvertible.description.getter();
}

unint64_t specialized _ASTPrintable._dump()(uint64_t a1)
{
  Swift::String v2;
  Swift::String v3;

  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = MEMORY[0x1DF0F3828](a1, &type metadata for AST.GlobalMatchingOption);
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 62;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 0xD00000000000001DLL;
}

uint64_t specialized _ASTPrintable._dump()(char a1)
{
  return *(_QWORD *)&aEager_0[8 * a1];
}

{
  if ((a1 & 1) != 0)
    return 15678;
  else
    return 61;
}

void specialized _ASTPrintable._dump()()
{
  uint64_t v0;
  _OWORD v1[2];
  __int128 v2;

  outlined init with take of AST.AbsentFunction.Kind((_OWORD *)(v0 + 16), v1);
  outlined init with take of AST.AbsentFunction.Kind(v1, &v2);
  __asm { BR              X11 }
}

unint64_t sub_1DEFCCB08@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  uint64_t v21;
  void *v22;
  void *v23;
  Swift::String v24;
  Swift::String v25;
  unint64_t v27;

  *(_QWORD *)(v2 - 96) = a1 & 0xFFFFFFFFFFFFFFF9;
  v3 = *(_QWORD *)(v2 - 120);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Node>);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1DF003EB0;
  *(_QWORD *)(v4 + 32) = v3;
  outlined retain of AST.AbsentFunction(v1);
  v5 = 0;
  v6 = (char *)MEMORY[0x1E0DEE9D8];
  do
  {
    v7 = v5;
    while (1)
    {
      if (v7 >= *(_QWORD *)(v4 + 16))
      {
        __break(1u);
        goto LABEL_26;
      }
      if (*(_QWORD *)(v4 + 32 + 8 * v7) >> 60 != 6)
        break;
LABEL_4:
      if (++v7 == 1)
        goto LABEL_15;
    }
    swift_retain();
    v8 = specialized _ASTPrintable._dump()();
    v10 = v9;
    swift_release();
    v11 = HIBYTE(v10) & 0xF;
    if ((v10 & 0x2000000000000000) == 0)
      v11 = v8 & 0xFFFFFFFFFFFFLL;
    if (!v11)
    {
      swift_bridgeObjectRelease();
      goto LABEL_4;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
    v13 = *((_QWORD *)v6 + 2);
    v12 = *((_QWORD *)v6 + 3);
    if (v13 >= v12 >> 1)
      v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1, v6);
    v5 = v7 + 1;
    *((_QWORD *)v6 + 2) = v13 + 1;
    v14 = &v6[16 * v13];
    *((_QWORD *)v14 + 4) = v8;
    *((_QWORD *)v14 + 5) = v10;
  }
  while (v7);
LABEL_15:
  swift_bridgeObjectRelease();
  v15 = AST.AbsentFunction._dumpBase.getter();
  v17 = v15;
  v18 = *((_QWORD *)v6 + 2);
  if (!v18)
  {
LABEL_23:
    swift_bridgeObjectRelease();
    return v17;
  }
  if (v18 == 1)
  {
    v19 = HIBYTE(v16) & 0xF;
    if ((v16 & 0x2000000000000000) == 0)
      v19 = v15 & 0xFFFFFFFFFFFFLL;
    if (!v19)
    {
      swift_bridgeObjectRelease();
      if (*((_QWORD *)v6 + 2))
      {
        v17 = *((_QWORD *)v6 + 4);
        swift_bridgeObjectRetain();
        goto LABEL_23;
      }
LABEL_26:
      __break(1u);
      JUMPOUT(0x1DEFCCDE4);
    }
  }
  v27 = v15;
  v20._countAndFlagsBits = 40;
  v20._object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  swift_getCanonicalSpecializedMetadata();
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t)&unk_1EA9768C0, (uint64_t)&cache variable for noncanonical specialized generic type metadata for [String], MEMORY[0x1E0DEAF20]);
  v21 = BidirectionalCollection<>.joined(separator:)();
  v23 = v22;
  swift_bridgeObjectRelease();
  v24._countAndFlagsBits = v21;
  v24._object = v23;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25._countAndFlagsBits = 41;
  v25._object = (void *)0xE100000000000000;
  String.append(_:)(v25);
  return v27;
}

uint64_t specialized _ASTPrintable._dump()(uint64_t a1, void *a2)
{
  Swift::String v4;
  Swift::String v5;

  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = a1;
  v4._object = a2;
  String.append(_:)(v4);
  v5._countAndFlagsBits = 62;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return 0x6C6F707265746E69;
}

uint64_t specialized _ASTPrintable._dump()(uint64_t a1)
{
  unint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  uint64_t v18;
  void *v19;
  void *v20;
  Swift::String v21;
  Swift::String v22;

  v2 = *(_QWORD *)(a1 + 16);
  result = swift_bridgeObjectRetain();
  if (v2)
  {
    v4 = 0;
    v5 = MEMORY[0x1E0DEE9D8];
    while (1)
    {
      v6 = v4 <= v2 ? v2 : v4;
      v7 = v4;
      while (1)
      {
        if (v6 == v7)
        {
          __break(1u);
          return result;
        }
        if (*(_QWORD *)(a1 + 32 + 8 * v7) >> 60 != 6)
          break;
LABEL_7:
        if (v2 == ++v7)
          goto LABEL_21;
      }
      swift_retain();
      v8 = specialized _ASTPrintable._dump()();
      v10 = v9;
      swift_release();
      v11 = HIBYTE(v10) & 0xF;
      if ((v10 & 0x2000000000000000) == 0)
        v11 = v8 & 0xFFFFFFFFFFFFLL;
      if (!v11)
        break;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v5 + 16) + 1, 1, (char *)v5);
        v5 = result;
      }
      v13 = *(_QWORD *)(v5 + 16);
      v12 = *(_QWORD *)(v5 + 24);
      if (v13 >= v12 >> 1)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1, (char *)v5);
        v5 = result;
      }
      v4 = v7 + 1;
      *(_QWORD *)(v5 + 16) = v13 + 1;
      v14 = v5 + 16 * v13;
      *(_QWORD *)(v14 + 32) = v8;
      *(_QWORD *)(v14 + 40) = v10;
      if (v2 - 1 == v7)
        goto LABEL_21;
    }
    result = swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  v5 = MEMORY[0x1E0DEE9D8];
LABEL_21:
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(v5 + 16);
  if (v15)
  {
    if (v15 == 1)
    {
      v16 = *(_QWORD *)(v5 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      v17._countAndFlagsBits = 40;
      v17._object = (void *)0xE100000000000000;
      String.append(_:)(v17);
      swift_getCanonicalSpecializedMetadata();
      lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t)&unk_1EA9768C0, (uint64_t)&cache variable for noncanonical specialized generic type metadata for [String], MEMORY[0x1E0DEAF20]);
      v18 = BidirectionalCollection<>.joined(separator:)();
      v20 = v19;
      swift_bridgeObjectRelease();
      v21._countAndFlagsBits = v18;
      v21._object = v20;
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      v22._countAndFlagsBits = 41;
      v22._object = (void *)0xE100000000000000;
      String.append(_:)(v22);
      return 0;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v16;
}

{
  unint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  uint64_t v22;
  void *v23;
  void *v24;
  Swift::String v25;
  Swift::String v26;
  _QWORD v27[2];

  v2 = *(_QWORD *)(a1 + 16);
  result = swift_bridgeObjectRetain();
  if (!v2)
  {
    v5 = MEMORY[0x1E0DEE9D8];
    goto LABEL_21;
  }
  v4 = 0;
  v5 = MEMORY[0x1E0DEE9D8];
  do
  {
    if (v4 <= v2)
      v6 = v2;
    else
      v6 = v4;
    v7 = v4;
    while (1)
    {
      if (v6 == v7)
      {
        __break(1u);
        goto LABEL_32;
      }
      if (*(_QWORD *)(a1 + 32 + 8 * v7) >> 60 != 6)
        break;
LABEL_7:
      if (v2 == ++v7)
        goto LABEL_21;
    }
    swift_retain();
    v8 = specialized _ASTPrintable._dump()();
    v10 = v9;
    swift_release();
    v11 = HIBYTE(v10) & 0xF;
    if ((v10 & 0x2000000000000000) == 0)
      v11 = v8 & 0xFFFFFFFFFFFFLL;
    if (!v11)
    {
      result = swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v5 + 16) + 1, 1, (char *)v5);
      v5 = result;
    }
    v13 = *(_QWORD *)(v5 + 16);
    v12 = *(_QWORD *)(v5 + 24);
    v14 = v13 + 1;
    if (v13 >= v12 >> 1)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1, (char *)v5);
      v14 = v13 + 1;
      v5 = result;
    }
    v4 = v7 + 1;
    *(_QWORD *)(v5 + 16) = v14;
    v15 = v5 + 16 * v13;
    *(_QWORD *)(v15 + 32) = v8;
    *(_QWORD *)(v15 + 40) = v10;
  }
  while (v2 - 1 != v7);
LABEL_21:
  swift_bridgeObjectRelease();
  strcpy((char *)v27, "alternation<");
  BYTE5(v27[1]) = 0;
  HIWORD(v27[1]) = -5120;
  v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 62;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  v18 = v27[0];
  v19 = *(_QWORD *)(v5 + 16);
  if (v19)
  {
    if (v19 != 1)
      goto LABEL_26;
    v20 = HIBYTE(v27[1]) & 0xF;
    if ((v27[1] & 0x2000000000000000) == 0)
      v20 = v27[0] & 0xFFFFFFFFFFFFLL;
    if (v20)
    {
LABEL_26:
      v21._countAndFlagsBits = 40;
      v21._object = (void *)0xE100000000000000;
      String.append(_:)(v21);
      swift_getCanonicalSpecializedMetadata();
      lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t)&unk_1EA9768C0, (uint64_t)&cache variable for noncanonical specialized generic type metadata for [String], MEMORY[0x1E0DEAF20]);
      v22 = BidirectionalCollection<>.joined(separator:)();
      v24 = v23;
      swift_bridgeObjectRelease();
      v25._countAndFlagsBits = v22;
      v25._object = v24;
      String.append(_:)(v25);
      swift_bridgeObjectRelease();
      v26._countAndFlagsBits = 41;
      v26._object = (void *)0xE100000000000000;
      String.append(_:)(v26);
      return v27[0];
    }
    result = swift_bridgeObjectRelease();
    if (*(_QWORD *)(v5 + 16))
    {
      v18 = *(_QWORD *)(v5 + 32);
      swift_bridgeObjectRetain();
      goto LABEL_29;
    }
LABEL_32:
    __break(1u);
  }
  else
  {
LABEL_29:
    swift_bridgeObjectRelease();
    return v18;
  }
  return result;
}

Swift::String __swiftcall _ASTPrintable._dump()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t isUniquelyReferenced_nonNull_native;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  BOOL v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::String v27;
  uint64_t v28;
  void *v29;
  void *v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String result;
  _QWORD *v34;
  uint64_t v35;
  void *v36;

  v2 = v1;
  v3 = v0;
  isUniquelyReferenced_nonNull_native = _ASTPrintable._children.getter(v0, v1);
  if (isUniquelyReferenced_nonNull_native)
  {
    v6 = isUniquelyReferenced_nonNull_native;
    v7 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 16);
    if (v7)
    {
      v8 = 0;
      v9 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      while (1)
      {
        v34 = v9;
        v10 = v8;
        while (1)
        {
          if (v10 >= *(_QWORD *)(v6 + 16))
          {
            __break(1u);
            goto LABEL_33;
          }
          if (*(_QWORD *)(v6 + 32 + 8 * v10) >> 60 != 6)
            break;
LABEL_5:
          if (v7 == ++v10)
          {
            v9 = v34;
            goto LABEL_22;
          }
        }
        swift_retain();
        v11 = specialized _ASTPrintable._dump()();
        v13 = v12;
        swift_release();
        v14 = HIBYTE(v13) & 0xF;
        if ((v13 & 0x2000000000000000) == 0)
          v14 = v11 & 0xFFFFFFFFFFFFLL;
        if (!v14)
          break;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v34[2] + 1, 1, (char *)v34);
          v34 = (_QWORD *)isUniquelyReferenced_nonNull_native;
        }
        v16 = v34[2];
        v15 = v34[3];
        v17 = v16 + 1;
        if (v16 >= v15 >> 1)
        {
          isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v16 + 1, 1, (char *)v34);
          v17 = v16 + 1;
          v34 = (_QWORD *)isUniquelyReferenced_nonNull_native;
        }
        v8 = v10 + 1;
        v34[2] = v17;
        v18 = &v34[2 * v16];
        v18[4] = v11;
        v18[5] = v13;
        v19 = v7 - 1 == v10;
        v9 = v34;
        if (v19)
          goto LABEL_22;
      }
      isUniquelyReferenced_nonNull_native = swift_bridgeObjectRelease();
      goto LABEL_5;
    }
    v9 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_22:
    swift_bridgeObjectRelease();
    v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v3, v2);
    v20 = v23;
    v22 = (void *)v24;
    v25 = v9[2];
    if (v25)
    {
      if (v25 != 1)
        goto LABEL_27;
      v26 = HIBYTE(v24) & 0xF;
      if ((v24 & 0x2000000000000000) == 0)
        v26 = v23 & 0xFFFFFFFFFFFFLL;
      if (v26)
      {
LABEL_27:
        v35 = v23;
        v36 = (void *)v24;
        v27._countAndFlagsBits = 40;
        v27._object = (void *)0xE100000000000000;
        String.append(_:)(v27);
        swift_getCanonicalSpecializedMetadata();
        lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t)&unk_1EA9768C0, (uint64_t)&cache variable for noncanonical specialized generic type metadata for [String], MEMORY[0x1E0DEAF20]);
        v28 = BidirectionalCollection<>.joined(separator:)();
        v30 = v29;
        swift_bridgeObjectRelease();
        v31._countAndFlagsBits = v28;
        v31._object = v30;
        String.append(_:)(v31);
        swift_bridgeObjectRelease();
        v32._countAndFlagsBits = 41;
        v32._object = (void *)0xE100000000000000;
        String.append(_:)(v32);
        v20 = v35;
        v22 = v36;
        goto LABEL_31;
      }
      isUniquelyReferenced_nonNull_native = swift_bridgeObjectRelease();
      if (!v9[2])
      {
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
      v20 = v9[4];
      v22 = (void *)v9[5];
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    goto LABEL_31;
  }
  v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v3, v2);
  v22 = v21;
LABEL_31:
  isUniquelyReferenced_nonNull_native = v20;
  v5 = v22;
LABEL_34:
  result._object = v5;
  result._countAndFlagsBits = isUniquelyReferenced_nonNull_native;
  return result;
}

uint64_t _ASTPrintable._children.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v3 = v2;
  v5 = MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v10((char *)&v18 - v11, v3, a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ASTParent);
  if (!swift_dynamicCast())
  {
    v21 = 0;
    v19 = 0u;
    v20 = 0u;
    outlined destroy of _ASTParent?((uint64_t)&v19, &demangling cache variable for type metadata for _ASTParent?);
    v10(v7, v3, a1);
    if (swift_dynamicCast())
    {
      v18 = v19;
      AST.Node._associatedValue.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ASTNode);
      if (swift_dynamicCast())
      {
        v15 = *((_QWORD *)&v20 + 1);
        v16 = v21;
        __swift_project_boxed_opaque_existential_1Tm(&v19, *((uint64_t *)&v20 + 1));
        v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 16))(v15, v16);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v19);
        swift_release();
        return v14;
      }
      v21 = 0;
      v19 = 0u;
      v20 = 0u;
      outlined destroy of _ASTParent?((uint64_t)&v19, &demangling cache variable for type metadata for _ASTParent?);
      swift_release();
    }
    return 0;
  }
  v12 = *((_QWORD *)&v20 + 1);
  v13 = v21;
  __swift_project_boxed_opaque_existential_1Tm(&v19, *((uint64_t *)&v20 + 1));
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 16))(v12, v13);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v19);
  return v14;
}

uint64_t AST._dumpBase.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v6;

  v1 = *(_QWORD *)(v0 + 8);
  if (v1)
  {
    v6._countAndFlagsBits = specialized _ASTPrintable._dump()(v1);
    v6._object = v2;
    v3._countAndFlagsBits = 32;
    v3._object = (void *)0xE100000000000000;
    String.append(_:)(v3);
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
  }
  v4._countAndFlagsBits = specialized _ASTPrintable._dump()();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST()
{
  return AST._dumpBase.getter();
}

uint64_t AST.Node._dumpBase.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[3];
  uint64_t v5;
  uint64_t v6;

  AST.Node._associatedValue.getter();
  v0 = v5;
  v1 = v6;
  __swift_project_boxed_opaque_existential_1Tm(v4, v5);
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 + 8) + 24))(v0);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v4);
  return v2;
}

uint64_t protocol witness for _ASTPrintable._dumpBase.getter in conformance AST.Node()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[3];
  uint64_t v5;
  uint64_t v6;

  AST.Node._associatedValue.getter();
  v0 = v5;
  v1 = v6;
  __swift_project_boxed_opaque_existential_1Tm(v4, v5);
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 + 8) + 24))(v0);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v4);
  return v2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Node()
{
  return specialized _ASTPrintable._dump()();
}

uint64_t AST.Conditional.Condition._dumpBase.getter()
{
  __int128 *v0;
  _OWORD v2[8];
  uint64_t v3;
  unint64_t v4;
  __int128 v5[8];

  outlined init with take of AST.Conditional.Condition.Kind(v0, v5);
  v3 = 0;
  v4 = 0xE000000000000000;
  outlined init with take of AST.Conditional.Condition.Kind(v5, v2);
  _print_unlocked<A, B>(_:_:)();
  return v3;
}

uint64_t protocol witness for _ASTPrintable._dumpBase.getter in conformance AST.Conditional.Condition()
{
  __int128 *v0;
  _OWORD v2[8];
  uint64_t v3;
  unint64_t v4;
  __int128 v5[8];

  outlined init with take of AST.Conditional.Condition.Kind(v0, v5);
  v3 = 0;
  v4 = 0xE000000000000000;
  outlined init with take of AST.Conditional.Condition.Kind(v5, v2);
  _print_unlocked<A, B>(_:_:)();
  return v3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Conditional.Condition(uint64_t a1)
{
  unint64_t v2;

  v2 = lazy protocol witness table accessor for type AST.Conditional.Condition and conformance AST.Conditional.Condition();
  return (*(uint64_t (**)(uint64_t, unint64_t))(v2 + 24))(a1, v2);
}

uint64_t AST.Conditional.Condition.PCREVersionCheck.Kind._dumpBase.getter()
{
  _BYTE *v0;

  if (*v0)
    return 15678;
  else
    return 61;
}

uint64_t protocol witness for _ASTPrintable._dumpBase.getter in conformance AST.Conditional.Condition.PCREVersionCheck.Kind()
{
  _BYTE *v0;

  if (*v0)
    return 15678;
  else
    return 61;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Conditional.Condition.PCREVersionCheck.Kind()
{
  char *v0;

  return specialized _ASTPrintable._dump()(*v0);
}

uint64_t AST.Conditional.Condition.PCREVersionNumber._dumpBase.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  Swift::String v5;
  void *v6;
  Swift::String v7;
  uint64_t v9;

  v1 = (void *)0xE90000000000003ELL;
  v2 = 0x64696C61766E693CLL;
  v3 = *(_BYTE *)(v0 + 40);
  v4 = 0x64696C61766E693CLL;
  if ((*(_BYTE *)(v0 + 8) & 1) == 0)
    v4 = dispatch thunk of CustomStringConvertible.description.getter();
  v9 = v4;
  v5._countAndFlagsBits = 46;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  if ((v3 & 1) == 0)
  {
    v2 = dispatch thunk of CustomStringConvertible.description.getter();
    v1 = v6;
  }
  v7._countAndFlagsBits = v2;
  v7._object = v1;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Conditional.Condition.PCREVersionNumber()
{
  return specialized _ASTPrintable._dump()();
}

uint64_t AST.Conditional.Condition.PCREVersionCheck._dumpBase.getter()
{
  _BYTE *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  Swift::String v4;

  if (*v0)
    v1 = 15678;
  else
    v1 = 61;
  if (*v0)
    v2 = 0xE200000000000000;
  else
    v2 = 0xE100000000000000;
  v3 = v2;
  String.append(_:)(*(Swift::String *)&v1);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = specialized _ASTPrintable._dump()();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  return 0x4E4F4953524556;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Conditional.Condition.PCREVersionCheck()
{
  return specialized _ASTPrintable._dump()();
}

uint64_t AST.Reference._dumpBase.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_BYTE *)(v0 + 72);
  _print_unlocked<A, B>(_:_:)();
  result = 0;
  if ((v2 & 1) == 0)
  {
    if ((v1 & 1) != 0)
    {
      v6 = 0xE90000000000003ELL;
      v4 = 0x64696C61766E693CLL;
    }
    else
    {
      v4 = dispatch thunk of CustomStringConvertible.description.getter();
      v6 = v5;
    }
    v7 = v6;
    String.append(_:)(*(Swift::String *)&v4);
    swift_bridgeObjectRelease();
    return 0;
  }
  return result;
}

uint64_t AST.Atom.Number._dumpBase.getter()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 8) & 1) != 0)
    return 0x64696C61766E693CLL;
  else
    return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Atom.Number()
{
  uint64_t v0;

  return specialized _ASTPrintable._dump()(*(_QWORD *)v0, *(_BYTE *)(v0 + 8));
}

uint64_t AST.Atom.Callout._dumpBase.getter()
{
  _OWORD *v0;
  int v1;
  unint64_t v3;
  _OWORD v4[10];
  _OWORD v5[10];

  outlined init with take of AST.Atom.Callout(v0, v4);
  outlined init with take of AST.Atom.Callout(v4, v5);
  v1 = _s12_RegexParser3ASTV4AtomV7CalloutOWOg((uint64_t)v5);
  if (v1)
  {
    if (v1 == 1)
    {
      AST.root.modify(v5);
      return AST.Atom.Callout.OnigurumaNamed._dumpBase.getter();
    }
    else
    {
      AST.root.modify(v5);
      return AST.Atom.Callout.OnigurumaOfContents._dumpBase.getter();
    }
  }
  else
  {
    AST.root.modify(v5);
    v3 = lazy protocol witness table accessor for type AST.Atom.Callout.PCRE and conformance AST.Atom.Callout.PCRE();
    return (*(uint64_t (**)(ValueMetadata *, unint64_t))(v3 + 24))(&type metadata for AST.Atom.Callout.PCRE, v3);
  }
}

uint64_t protocol witness for _ASTPrintable._dumpBase.getter in conformance AST.Atom.Callout()
{
  _OWORD *v0;
  int v1;
  unint64_t v3;
  _OWORD v4[10];
  _OWORD v5[10];

  outlined init with take of AST.Atom.Callout(v0, v4);
  outlined init with take of AST.Atom.Callout(v4, v5);
  v1 = _s12_RegexParser3ASTV4AtomV7CalloutOWOg((uint64_t)v5);
  if (v1)
  {
    if (v1 == 1)
    {
      AST.root.modify(v5);
      return AST.Atom.Callout.OnigurumaNamed._dumpBase.getter();
    }
    else
    {
      AST.root.modify(v5);
      return AST.Atom.Callout.OnigurumaOfContents._dumpBase.getter();
    }
  }
  else
  {
    AST.root.modify(v5);
    v3 = lazy protocol witness table accessor for type AST.Atom.Callout.PCRE and conformance AST.Atom.Callout.PCRE();
    return (*(uint64_t (**)(ValueMetadata *, unint64_t))(v3 + 24))(&type metadata for AST.Atom.Callout.PCRE, v3);
  }
}

uint64_t AST.Atom.Callout.PCRE._dumpBase.getter()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x6C61632045524350;
  v0._object = (void *)0xED00002074756F6CLL;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  return 0;
}

uint64_t protocol witness for _ASTPrintable._dumpBase.getter in conformance AST.Atom.Callout.PCRE()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x6C61632045524350;
  v0._object = (void *)0xED00002074756F6CLL;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  return 0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Atom.Callout.PCRE(uint64_t a1)
{
  unint64_t v2;

  v2 = lazy protocol witness table accessor for type AST.Atom.Callout.PCRE and conformance AST.Atom.Callout.PCRE();
  return (*(uint64_t (**)(uint64_t, unint64_t))(v2 + 24))(a1, v2);
}

uint64_t AST.Atom.Callout.OnigurumaTag._dumpBase.getter()
{
  Swift::String *v0;
  Swift::String v1;

  String.append(_:)(v0[1]);
  v1._countAndFlagsBits = 93;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 91;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Atom.Callout.OnigurumaTag()
{
  return specialized _ASTPrintable._dump()();
}

uint64_t AST.Atom.Callout.OnigurumaNamed.ArgList._dumpBase.getter()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v16 = MEMORY[0x1E0DEE9D8];
    result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    v4 = 0;
    v5 = (uint64_t *)(v1 + 40);
    while (v4 < *(_QWORD *)(v1 + 16))
    {
      v7 = *(v5 - 1);
      v6 = *v5;
      v9 = *(_QWORD *)(v16 + 16);
      v8 = *(_QWORD *)(v16 + 24);
      result = swift_bridgeObjectRetain();
      if (v9 >= v8 >> 1)
        result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v9 + 1, 1);
      ++v4;
      *(_QWORD *)(v16 + 16) = v9 + 1;
      v10 = v16 + 16 * v9;
      *(_QWORD *)(v10 + 32) = v7;
      *(_QWORD *)(v10 + 40) = v6;
      v5 += 4;
      if (v2 == v4)
        goto LABEL_7;
    }
    __break(1u);
  }
  else
  {
LABEL_7:
    swift_getCanonicalSpecializedMetadata();
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t)&unk_1EA9768C0, (uint64_t)&cache variable for noncanonical specialized generic type metadata for [String], MEMORY[0x1E0DEAF20]);
    v11 = BidirectionalCollection<>.joined(separator:)();
    v13 = v12;
    swift_bridgeObjectRelease();
    v14._countAndFlagsBits = v11;
    v14._object = v13;
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._countAndFlagsBits = 125;
    v15._object = (void *)0xE100000000000000;
    String.append(_:)(v15);
    return 123;
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Atom.Callout.OnigurumaNamed.ArgList()
{
  return AST.Atom.Callout.OnigurumaNamed.ArgList._dumpBase.getter();
}

unint64_t AST.Atom.Callout.OnigurumaNamed._dumpBase.getter()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;

  v1 = *v0;
  v2 = (void *)v0[1];
  v3 = v0[7];
  v4 = v0[14];
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = v1;
  v5._object = v2;
  String.append(_:)(v5);
  if (v3)
  {
    v6._countAndFlagsBits = specialized _ASTPrintable._dump()();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
  }
  if (v4)
  {
    v7._countAndFlagsBits = AST.Atom.Callout.OnigurumaNamed.ArgList._dumpBase.getter();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
  }
  return 0xD000000000000018;
}

unint64_t AST.Atom.Callout.OnigurumaOfContents._dumpBase.getter()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;

  v1 = v0[2];
  v2 = (void *)v0[3];
  v3 = v0[11];
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = v1;
  v4._object = v2;
  String.append(_:)(v4);
  v5._countAndFlagsBits = 125;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  if (v3)
  {
    v6._countAndFlagsBits = specialized _ASTPrintable._dump()();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
  }
  v7._countAndFlagsBits = 32;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  _print_unlocked<A, B>(_:_:)();
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  return 0xD00000000000001FLL;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Reference()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t result;
  Swift::String v5;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_BYTE *)(v0 + 72);
  _print_unlocked<A, B>(_:_:)();
  result = 0;
  if ((v3 & 1) == 0)
  {
    v5._countAndFlagsBits = specialized _ASTPrintable._dump()(v1, v2 & 1);
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    return 0;
  }
  return result;
}

void AST.Group.Kind._dumpBase.getter()
{
  __asm { BR              X10 }
}

uint64_t sub_1DEFCEAF8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  uint64_t v34;
  void *v35;
  Swift::String v36;
  Swift::String v37;

  v36._countAndFlagsBits = v34;
  v36._object = v35;
  String.append(_:)(v36);
  v37._countAndFlagsBits = 62;
  v37._object = (void *)0xE100000000000000;
  String.append(_:)(v37);
  return 0x3C65727574706163;
}

void sub_1DEFCEC60()
{
  JUMPOUT(0x1DEFCEC40);
}

void protocol witness for CustomStringConvertible.description.getter in conformance AST.Group.Kind()
{
  AST.Group.Kind._dumpBase.getter();
}

uint64_t AST.Group._dumpBase.getter()
{
  Swift::String v0;

  AST.Group.Kind._dumpBase.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0x5F70756F7267;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Group()
{
  return specialized _ASTPrintable._dump()();
}

void AST.Quantification.Amount._printBase.getter()
{
  AST.Quantification.Amount._canonicalBase.getter();
}

void AST.Quantification.Amount._canonicalBase.getter()
{
  __asm { BR              X15 }
}

uint64_t sub_1DEFCEFB4()
{
  char v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  Swift::String v5;

  if ((v0 & 1) != 0)
  {
    v1 = 0x7265626D756E233CLL;
    v2 = 0xEA00000000003E23;
  }
  else
  {
    v1 = dispatch thunk of CustomStringConvertible.description.getter();
    v2 = v3;
  }
  v4 = v2;
  String.append(_:)(*(Swift::String *)&v1);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 125;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return 123;
}

void AST.Quantification.Amount._dumpBase.getter()
{
  __asm { BR              X15 }
}

uint64_t sub_1DEFCF238()
{
  char v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  Swift::String v5;

  if ((v0 & 1) != 0)
  {
    v1 = 0x64696C61766E693CLL;
    v3 = 0xE90000000000003ELL;
  }
  else
  {
    v1 = dispatch thunk of CustomStringConvertible.description.getter();
    v3 = v2;
  }
  v4 = v3;
  String.append(_:)(*(Swift::String *)&v1);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 62;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return 0x3C796C7463617865;
}

void protocol witness for CustomStringConvertible.description.getter in conformance AST.Quantification.Amount()
{
  AST.Quantification.Amount._dumpBase.getter();
}

uint64_t AST.Quantification.Kind._printBase.getter()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = 63;
  if (*v0 != 1)
    v1 = 43;
  if (*v0)
    return v1;
  else
    return *v0;
}

uint64_t AST.Quantification.Kind._dumpBase.getter()
{
  char *v0;

  return *(_QWORD *)&aEager_0[8 * *v0];
}

uint64_t protocol witness for _ASTPrintable._dumpBase.getter in conformance AST.Quantification.Kind()
{
  char *v0;

  return *(_QWORD *)&aEager_0[8 * *v0];
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Quantification.Kind()
{
  char *v0;

  return specialized _ASTPrintable._dump()(*v0);
}

uint64_t AST.Quantification._printBase.getter()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v1 = *(unsigned __int8 *)(v0 + 80);
  AST.Quantification.Amount._canonicalBase.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3 = 63;
  if ((_DWORD)v1 != 1)
    v3 = 43;
  if ((_DWORD)v1)
    v4 = v3;
  else
    v4 = v1;
  if ((_DWORD)v1)
    v5 = 0xE100000000000000;
  else
    v5 = 0xE000000000000000;
  v6 = v5;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease();
  return 0x5F746E617571;
}

uint64_t AST.Quantification._dumpBase.getter()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;

  v1 = *(char *)(v0 + 80);
  AST.Quantification.Amount._dumpBase.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 95;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  v4._countAndFlagsBits = *(_QWORD *)&aEager_0[8 * v1];
  v4._object = *(void **)&aReluctanposses[8 * v1 + 16];
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  return 0x5F746E617571;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Quantification()
{
  return specialized _ASTPrintable._dump()();
}

unint64_t AST.CustomCharacterClass._dumpBase.getter()
{
  unsigned __int8 *v0;
  int v1;
  char v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;
  _QWORD v15[6];
  unint64_t v16;
  unint64_t v17;

  v1 = *v0;
  v15[0] = 0;
  v15[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(38);
  swift_bridgeObjectRelease();
  v16 = 0xD00000000000001FLL;
  v17 = 0x80000001DF005170;
  if (v1 == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v2 & 1) == 0)
    {
      v3 = 0xE500000000000000;
      v4 = 0x65736C6166;
      goto LABEL_6;
    }
  }
  v3 = 0xE400000000000000;
  v4 = 1702195828;
LABEL_6:
  v5 = v3;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 8236;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  AST.CustomCharacterClass.strippingTriviaShallow.getter((uint64_t)v15);
  v7 = v15[3];
  v8 = type metadata accessor for AST.CustomCharacterClass.Member(0);
  v9 = MEMORY[0x1DF0F3828](v7, v8);
  v11 = v10;
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = v9;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 41;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  return v16;
}

__n128 protocol witness for _ASTNode.location.getter in conformance AST.CustomCharacterClass@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = v1[2];
  *a1 = result;
  return result;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.CustomCharacterClass()
{
  return AST.CustomCharacterClass._dumpBase.getter();
}

void AST.CustomCharacterClass.Member._dumpBase.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(_QWORD);
  char *v25;
  _QWORD v26[16];

  v1 = type metadata accessor for AST.CustomCharacterClass.Range(0);
  MEMORY[0x1E0C80A78](v1, v2);
  v3 = type metadata accessor for AST.Atom(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v5 = type metadata accessor for AST.CustomCharacterClass.Member(0);
  v26[8] = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5, v6);
  v26[6] = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v7, v9);
  v26[1] = (char *)v26 - v11;
  v13 = MEMORY[0x1E0C80A78](v10, v12);
  v26[2] = (char *)v26 - v14;
  v16 = MEMORY[0x1E0C80A78](v13, v15);
  v26[7] = (char *)v26 - v17;
  v19 = MEMORY[0x1E0C80A78](v16, v18);
  v21 = MEMORY[0x1E0C80A78](v19, v20);
  MEMORY[0x1E0C80A78](v21, v22);
  outlined init with copy of AST.Atom(v0, (uint64_t)v26 - v23, v24);
  v25 = (char *)&loc_1DEFCFA4C + dword_1DEFCFEFC[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

unint64_t sub_1DEFCFA5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(v0 + 24);
  *(_BYTE *)(v1 - 136) = *(_BYTE *)v0;
  *(_OWORD *)(v1 - 128) = *(_OWORD *)(v0 + 8);
  *(_QWORD *)(v1 - 112) = v2;
  *(_OWORD *)(v1 - 104) = *(_OWORD *)(v0 + 32);
  v3 = AST.CustomCharacterClass._dumpBase.getter();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t AST.CustomCharacterClass.Range._dumpBase.getter()
{
  Swift::String v0;
  Swift::String v1;
  uint64_t v3;

  v3 = AST.Atom._dumpBase.getter();
  v0._countAndFlagsBits = 45;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
  type metadata accessor for AST.CustomCharacterClass.Range(0);
  v1._countAndFlagsBits = AST.Atom._dumpBase.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t protocol witness for _ASTPrintable._dumpBase.getter in conformance AST.CustomCharacterClass.Range()
{
  Swift::String v0;
  Swift::String v1;
  uint64_t v3;

  v3 = AST.Atom._dumpBase.getter();
  v0._countAndFlagsBits = 45;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
  v1._countAndFlagsBits = AST.Atom._dumpBase.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t AST.Atom.BacktrackingDirective._dumpBase.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t result;
  Swift::String v4;
  Swift::String v5;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(void **)(v0 + 32);
  _print_unlocked<A, B>(_:_:)();
  result = 0;
  if (v2)
  {
    v4._countAndFlagsBits = v1;
    v4._object = v2;
    String.append(_:)(v4);
    v5._countAndFlagsBits = 8250;
    v5._object = (void *)0xE200000000000000;
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    return 0;
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Atom.BacktrackingDirective()
{
  return AST.Atom.BacktrackingDirective._dumpBase.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.Group.BalancedCapture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  return AST.Group.BalancedCapture._canonicalBase.getter(a1, a2, a3, a4, a5, a6, a7, a8, *v8, v8[1]);
}

uint64_t AST.AbsentFunction.Kind._dumpBase.getter()
{
  uint64_t v0;

  return *(_QWORD *)&aRepeaterexpres[8 * ((*(unsigned __int8 *)(v0 + 24) >> 1) & 3)];
}

void AST.GlobalMatchingOption.Kind._dumpBase.getter()
{
  AST.GlobalMatchingOption.Kind._canonicalBase.getter();
}

void AST.GlobalMatchingOption.Kind._canonicalBase.getter()
{
  __asm { BR              X12 }
}

uint64_t sub_1DEFD01B4()
{
  char v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  if ((v0 & 1) != 0)
  {
    v1 = 0x7265626D756E233CLL;
    v2 = 0xEA00000000003E23;
  }
  else
  {
    v1 = dispatch thunk of CustomStringConvertible.description.getter();
    v2 = v3;
  }
  v4 = v2;
  String.append(_:)(*(Swift::String *)&v1);
  swift_bridgeObjectRelease();
  return 0x45445F54494D494CLL;
}

void protocol witness for _ASTPrintable._dumpBase.getter in conformance AST.GlobalMatchingOption.Kind()
{
  AST.GlobalMatchingOption.Kind._canonicalBase.getter();
}

void AST.GlobalMatchingOption._dumpBase.getter()
{
  AST.GlobalMatchingOption.Kind._canonicalBase.getter();
}

unint64_t AST.GlobalMatchingOptionSequence._dumpBase.getter()
{
  uint64_t *v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;

  v1 = *v0;
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = MEMORY[0x1DF0F3828](v1, &type metadata for AST.GlobalMatchingOption);
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 62;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 0xD00000000000001DLL;
}

unint64_t protocol witness for _ASTPrintable._dumpBase.getter in conformance AST.GlobalMatchingOptionSequence()
{
  uint64_t *v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;

  v1 = *v0;
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = MEMORY[0x1DF0F3828](v1, &type metadata for AST.GlobalMatchingOption);
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 62;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 0xD00000000000001DLL;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance AST.GlobalMatchingOptionSequence()
{
  uint64_t *v0;

  return specialized _ASTPrintable._dump()(*v0);
}

uint64_t PrettyPrinter.maxTopDownLevels.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t PrettyPrinter.maxTopDownLevels.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)v2 = result;
  *(_BYTE *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*PrettyPrinter.maxTopDownLevels.modify())()
{
  return AST.root.modify;
}

uint64_t PrettyPrinter.minBottomUpLevels.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t PrettyPrinter.minBottomUpLevels.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = result;
  *(_BYTE *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*PrettyPrinter.minBottomUpLevels.modify())()
{
  return AST.root.modify;
}

uint64_t PrettyPrinter.indentWidth.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t PrettyPrinter.indentWidth.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  return result;
}

uint64_t (*PrettyPrinter.indentWidth.modify())()
{
  return AST.root.modify;
}

void PrettyPrinter.quantificationBehavior.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 72);
}

_BYTE *PrettyPrinter.quantificationBehavior.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 72) = *result;
  return result;
}

uint64_t (*PrettyPrinter.quantificationBehavior.modify())()
{
  return AST.root.modify;
}

uint64_t PrettyPrinter.inlineMatchingOptions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PrettyPrinter.inlineMatchingOptions.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 80) = a1;
  return result;
}

uint64_t (*PrettyPrinter.inlineMatchingOptions.modify())()
{
  return AST.root.modify;
}

void __swiftcall PrettyPrinter.init(maxTopDownLevels:minBottomUpLevels:)(_RegexParser::PrettyPrinter *__return_ptr retstr, Swift::Int_optional maxTopDownLevels, Swift::Int_optional minBottomUpLevels)
{
  retstr->maxTopDownLevels.value = maxTopDownLevels.value;
  retstr->maxTopDownLevels.is_nil = maxTopDownLevels.is_nil;
  retstr->minBottomUpLevels.value = minBottomUpLevels.value;
  retstr->minBottomUpLevels.is_nil = minBottomUpLevels.is_nil;
  *(_OWORD *)&retstr->indentWidth = xmmword_1DF003EE0;
  retstr->result._object = (void *)0xE000000000000000;
  retstr->startOfLine = 1;
  retstr->indentLevel = 0;
  retstr->quantificationBehavior = _RegexParser_AST_Quantification_Kind_eager;
  retstr->inlineMatchingOptions._rawValue = (void *)MEMORY[0x1E0DEE9D8];
}

Swift::Void __swiftcall PrettyPrinter.output(_:)(Swift::String a1)
{
  String.append(_:)(a1);
}

Swift::Void __swiftcall PrettyPrinter.terminateLine()()
{
  uint64_t v0;
  Swift::String v1;

  v1._countAndFlagsBits = 10;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  *(_BYTE *)(v0 + 56) = 1;
}

Swift::Void __swiftcall PrettyPrinter.indent()()
{
  uint64_t v0;
  Swift::String v1;

  if (*(_BYTE *)(v0 + 56) == 1)
  {
    if ((unsigned __int128)(*(uint64_t *)(v0 + 64) * (__int128)*(uint64_t *)(v0 + 32)) >> 64 == (uint64_t)(*(_QWORD *)(v0 + 64) * *(_QWORD *)(v0 + 32)) >> 63)
    {
      v1._countAndFlagsBits = MEMORY[0x1DF0F378C](32, 0xE100000000000000);
      String.append(_:)(v1);
      swift_bridgeObjectRelease();
      *(_BYTE *)(v0 + 56) = 0;
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t PrettyPrinter.depth.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

void PrettyPrinter.printLine(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  Swift::String v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;

  v2 = (uint64_t (*)(uint64_t))a1;
  if (*(_BYTE *)(v1 + 56) == 1)
  {
    if ((unsigned __int128)(*(uint64_t *)(v1 + 64) * (__int128)*(uint64_t *)(v1 + 32)) >> 64 != (uint64_t)(*(_QWORD *)(v1 + 64) * *(_QWORD *)(v1 + 32)) >> 63)
    {
      __break(1u);
      return;
    }
    v3._countAndFlagsBits = MEMORY[0x1DF0F378C](32, 0xE100000000000000);
    String.append(_:)(v3);
    a1 = swift_bridgeObjectRelease();
    *(_BYTE *)(v1 + 56) = 0;
  }
  v4 = v2(a1);
  if (v5)
  {
    v6 = v5;
    do
    {
      v7 = v6;
      String.append(_:)(*(Swift::String *)&v4);
      v8 = swift_bridgeObjectRelease();
      v4 = v2(v8);
      v6 = v9;
    }
    while (v9);
  }
  v10._countAndFlagsBits = 10;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  *(_BYTE *)(v1 + 56) = 1;
}

uint64_t (*PrettyPrinter.printIndented(_:)(uint64_t (*result)(uint64_t)))(uint64_t)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v1 + 64);
  v3 = __OFADD__(v2, 1);
  v4 = v2 + 1;
  if (v3)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v1 + 64) = v4;
    result = (uint64_t (*)(uint64_t))result(v1);
    v5 = *(_QWORD *)(v1 + 64);
    v3 = __OFSUB__(v5, 1);
    v6 = v5 - 1;
    if (!v3)
    {
      *(_QWORD *)(v1 + 64) = v6;
      return result;
    }
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall PrettyPrinter.pushMatchingOptions(_:isAdded:)(Swift::OpaquePointer _, Swift::Bool isAdded)
{
  Swift::Bool v2;
  uint64_t v3;
  void *rawValue;
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  v6 = *(_QWORD *)(v3 + 64);
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
  {
    __break(1u);
  }
  else
  {
    v2 = isAdded;
    rawValue = _._rawValue;
    *(_QWORD *)(v3 + 64) = v8;
    v5 = *(_QWORD **)(v3 + 80);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_3;
  }
  v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
LABEL_3:
  v10 = v5[2];
  v9 = v5[3];
  if (v10 >= v9 >> 1)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v5);
  v5[2] = v10 + 1;
  v11 = &v5[2 * v10];
  v11[4] = rawValue;
  *((_BYTE *)v11 + 40) = v2;
  *(_QWORD *)(v3 + 80) = v5;
}

Swift::tuple_OpaquePointer_Bool __swiftcall PrettyPrinter.popMatchingOptions()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  Swift::tuple_OpaquePointer_Bool result;

  v2 = *(_QWORD *)(v1 + 64);
  v3 = __OFSUB__(v2, 1);
  v4 = v2 - 1;
  if (v3)
  {
    __break(1u);
    goto LABEL_7;
  }
  *(_QWORD *)(v1 + 64) = v4;
  v0 = *(_QWORD **)(v1 + 80);
  if (!v0[2])
  {
LABEL_7:
    __break(1u);
LABEL_8:
    isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v0);
    v0 = (_QWORD *)isUniquelyReferenced_nonNull_native;
    v7 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 16);
    if (v7)
      goto LABEL_5;
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_8;
  v7 = v0[2];
  if (!v7)
    goto LABEL_9;
LABEL_5:
  v8 = v7 - 1;
  v9 = &v0[2 * v8];
  isUniquelyReferenced_nonNull_native = v9[4];
  v6 = *((_BYTE *)v9 + 40);
  v0[2] = v8;
  *(_QWORD *)(v1 + 80) = v0;
LABEL_10:
  result._0._rawValue = (void *)isUniquelyReferenced_nonNull_native;
  result._1 = v6;
  return result;
}

Swift::String __swiftcall AST.renderAsCanonical(showDelimiters:terminateLine:)(Swift::Bool showDelimiters, Swift::Bool terminateLine)
{
  __int128 *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  Swift::String result;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v3 = *((_QWORD *)v2 + 2);
  v11 = 0;
  v12 = 1;
  v13 = 0;
  v14 = 1;
  v15 = xmmword_1DF003EE0;
  v16 = 0xE000000000000000;
  v17 = 1;
  v18 = 0;
  v19 = 0;
  v20 = MEMORY[0x1E0DEE9D8];
  v9 = *v2;
  v10 = v3;
  PrettyPrinter.printAsCanonical(_:delimiters:terminateLine:)((uint64_t *)&v9, showDelimiters, terminateLine);
  v4 = *((_QWORD *)&v15 + 1);
  v5 = (void *)v16;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = v4;
  v7 = v5;
  result._object = v7;
  result._countAndFlagsBits = v6;
  return result;
}

void PrettyPrinter.printAsCanonical(_:delimiters:terminateLine:)(uint64_t *a1, char a2, char a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;

  v6 = *a1;
  v7 = a1[1];
  if (*(_BYTE *)(v3 + 56) == 1)
  {
    if ((unsigned __int128)(*(uint64_t *)(v3 + 64) * (__int128)*(uint64_t *)(v3 + 32)) >> 64 != (uint64_t)(*(_QWORD *)(v3 + 64) * *(_QWORD *)(v3 + 32)) >> 63)
    {
      __break(1u);
      return;
    }
    v8._countAndFlagsBits = MEMORY[0x1DF0F378C](32, 0xE100000000000000);
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    *(_BYTE *)(v3 + 56) = 0;
  }
  if ((a2 & 1) != 0)
  {
    v9._countAndFlagsBits = 12071;
    v9._object = (void *)0xE200000000000000;
    String.append(_:)(v9);
  }
  if (v7)
  {
    v12 = v7;
    PrettyPrinter.outputAsCanonical(_:)((_RegexParser::AST::GlobalMatchingOptionSequence)&v12);
  }
  v12 = v6;
  PrettyPrinter.outputAsCanonical(_:)((uint64_t)&v12);
  if ((a2 & 1) != 0)
  {
    v10._countAndFlagsBits = 10031;
    v10._object = (void *)0xE200000000000000;
    String.append(_:)(v10);
  }
  if ((a3 & 1) != 0)
  {
    v11._countAndFlagsBits = 10;
    v11._object = (void *)0xE100000000000000;
    String.append(_:)(v11);
    *(_BYTE *)(v3 + 56) = 1;
  }
}

Swift::String __swiftcall AST.Node.renderAsCanonical(showDelimiters:terminateLine:)(Swift::Bool showDelimiters, Swift::Bool terminateLine)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  Swift::String result;
  uint64_t v11[4];
  char v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v5 = *v2;
  v11[3] = 0;
  v12 = 1;
  v13 = 0;
  v14 = 1;
  v15 = xmmword_1DF003EE0;
  v16 = 0xE000000000000000;
  v17 = 1;
  v18 = 0;
  v19 = 0;
  v20 = MEMORY[0x1E0DEE9D8];
  v11[0] = v5;
  v11[1] = 0;
  v11[2] = MEMORY[0x1E0DEE9D8];
  swift_retain();
  PrettyPrinter.printAsCanonical(_:delimiters:terminateLine:)(v11, showDelimiters, terminateLine);
  v6 = *((_QWORD *)&v15 + 1);
  v7 = (void *)v16;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = v6;
  v9 = v7;
  result._object = v9;
  result._countAndFlagsBits = v8;
  return result;
}

Swift::Void __swiftcall PrettyPrinter.outputAsCanonical(_:)(_RegexParser::AST::GlobalMatchingOptionSequence a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;

  v1 = *(_QWORD *)a1.options._rawValue;
  v2 = *(_QWORD *)(*(_QWORD *)a1.options._rawValue + 16);
  if (v2)
  {
    v3 = 0;
    v4 = v1 + 48;
    while (v3 < *(_QWORD *)(v1 + 16))
    {
      ++v3;
      AST.GlobalMatchingOption.Kind._canonicalBase.getter();
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      v6._countAndFlagsBits = 41;
      v6._object = (void *)0xE100000000000000;
      String.append(_:)(v6);
      v7._countAndFlagsBits = 10792;
      v7._object = (void *)0xE200000000000000;
      String.append(_:)(v7);
      swift_bridgeObjectRelease();
      v4 += 48;
      if (v2 == v3)
        return;
    }
    __break(1u);
  }
}

void PrettyPrinter.outputAsCanonical(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[15];
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v20 = type metadata accessor for AST.CustomCharacterClass.Range(0);
  v3 = MEMORY[0x1E0C80A78](v20, v2);
  v19[14] = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0C80A78](v3, v5);
  v19[6] = (char *)v19 - v7;
  MEMORY[0x1E0C80A78](v6, v8);
  v22 = type metadata accessor for AST.CustomCharacterClass.Member(0);
  v10 = MEMORY[0x1E0C80A78](v22, v9);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  v19[7] = (char *)v19 - v13;
  MEMORY[0x1E0C80A78](v12, v14);
  v19[9] = (char *)v19 - v15;
  v16 = type metadata accessor for AST.Atom(0);
  MEMORY[0x1E0C80A78](v16, v17);
  v21 = (char *)v19 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __asm { BR              X11 }
}

{
  uint64_t v1;
  Swift::String v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2._countAndFlagsBits = 8273704;
  v2._object = (void *)0xE300000000000000;
  String.append(_:)(v2);
  __asm { BR              X10 }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD);
  char *v10;
  uint64_t v11;

  v2 = type metadata accessor for AST.Atom(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v4 = type metadata accessor for AST.CustomCharacterClass.Range(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v6 = type metadata accessor for AST.CustomCharacterClass.Member(0);
  MEMORY[0x1E0C80A78](v6, v7);
  outlined init with copy of AST.Atom(a1, (uint64_t)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  v10 = (char *)sub_1DEFD298C + 4 * byte_1DEFFDC8F[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_1DEFD0F28(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  Swift::String v6;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = v3 - 1;
    while (1)
    {
      *(_QWORD *)(v1 - 240) = *(_QWORD *)(v2 + 32 + 8 * v4);
      PrettyPrinter.outputAsCanonical(_:)(v1 - 240);
      if (v5 == v4)
        break;
      ++v4;
      v6._countAndFlagsBits = 124;
      v6._object = (void *)0xE100000000000000;
      String.append(_:)(v6);
      if (v4 >= *(_QWORD *)(v2 + 16))
      {
        __break(1u);
        JUMPOUT(0x1DEFD0F8CLL);
      }
    }
  }
}

void specialized Sequence.forEach(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = (uint64_t *)(a1 + 32);
    do
    {
      v3 = *v2++;
      v4 = v3;
      PrettyPrinter.outputAsCanonical(_:)((uint64_t)&v4);
      --v1;
    }
    while (v1);
  }
}

uint64_t specialized Sequence.forEach(_:)(uint64_t result)
{
  if (*(_QWORD *)(result + 16))
    __asm { BR              X9 }
  return result;
}

void AST.Group.Kind._canonicalBase.getter()
{
  __asm { BR              X4 }
}

uint64_t sub_1DEFD232C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;

  v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
  v3._countAndFlagsBits = 62;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 3948328;
}

uint64_t AST.Atom._canonicalBase.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  _BYTE v19[16];
  _QWORD v20[4];
  char v21;
  __int128 v22;
  __int128 v23;
  char v24;
  __int128 v25;

  v1 = type metadata accessor for AST.Atom.Kind(0);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = &v19[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  AST.Atom.literalStringValue.getter();
  if (v6)
  {
    v7 = v5;
    if (v5 == 46 && v6 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 11868;
    }
  }
  else
  {
    outlined init with copy of AST.Atom(v0, (uint64_t)v4, type metadata accessor for AST.Atom.Kind);
    v7 = 94;
    switch(swift_getEnumCaseMultiPayload())
    {
      case 4u:
        v9 = *v4;
        v20[0] = 0;
        v20[1] = 0xE000000000000000;
        v10._countAndFlagsBits = 92;
        v10._object = (void *)0xE100000000000000;
        String.append(_:)(v10);
        v19[15] = v9;
        AST.Atom.EscapedBuiltin.character.getter();
        Character.write<A>(to:)();
        swift_bridgeObjectRelease();
        v7 = v20[0];
        break;
      case 9u:
        v14 = *((_QWORD *)v4 + 1);
        v15 = *((_QWORD *)v4 + 2);
        v16 = *((_QWORD *)v4 + 3);
        v17 = v4[72];
        v18 = v4[32];
        v20[0] = *(_QWORD *)v4;
        v13 = v20[0];
        v20[1] = v14;
        v20[2] = v15;
        v20[3] = v16;
        v21 = v18;
        v22 = *(_OWORD *)(v4 + 40);
        v23 = *(_OWORD *)(v4 + 56);
        v24 = v17;
        v25 = *((_OWORD *)v4 + 5);
        v7 = AST.Reference._canonicalBase.getter();
        outlined consume of AST.Reference.Kind(v13, v14, v15, v16, v18);
        break;
      case 0xFu:
        return v7;
      case 0x10u:
        v7 = 36;
        break;
      default:
        v20[0] = 0;
        v20[1] = 0xE000000000000000;
        _StringGuts.grow(_:)(19);
        swift_bridgeObjectRelease();
        strcpy((char *)v20, "/* TODO: atom ");
        HIBYTE(v20[1]) = -18;
        v11._countAndFlagsBits = AST.Atom._dumpBase.getter();
        String.append(_:)(v11);
        swift_bridgeObjectRelease();
        v12._countAndFlagsBits = 3090976;
        v12._object = (void *)0xE300000000000000;
        String.append(_:)(v12);
        v7 = v20[0];
        outlined destroy of AST.Atom((uint64_t)v4, type metadata accessor for AST.Atom.Kind);
        break;
    }
  }
  return v7;
}

void sub_1DEFD27F0()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  _QWORD v5[9];

  v2._countAndFlagsBits = 124;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v5[0] = v0;
  PrettyPrinter.outputAsCanonical(_:)((uint64_t)v5);
  v3._countAndFlagsBits = 124;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  v5[0] = v1 & 0xFFFFFFFFFFFFFFF9;
  PrettyPrinter.outputAsCanonical(_:)((uint64_t)v5);
  v4._countAndFlagsBits = 41;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
}

uint64_t sub_1DEFD298C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;

  v2 = *(_QWORD *)(v0 + 24);
  if (*(_BYTE *)v0)
    v3 = 24155;
  else
    v3 = 91;
  if (*(_BYTE *)v0)
    v4 = 0xE200000000000000;
  else
    v4 = 0xE100000000000000;
  v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v2 + 16);
  if (v6)
  {
    v7 = v2 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
    v8 = *(_QWORD *)(v1 + 72);
    do
    {
      ((void (*)(uint64_t))PrettyPrinter.outputAsCanonical(_:))(v7);
      v7 += v8;
      --v6;
    }
    while (v6);
  }
  v9._countAndFlagsBits = 93;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  return swift_bridgeObjectRelease();
}

uint64_t AST.Group.BalancedCapture._dumpBase.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;

  v1 = v0[1];
  v2 = v0[6];
  v3 = (void *)v0[7];
  if (v1)
    v4 = *v0;
  else
    v4 = 0;
  if (v1)
    v5 = (void *)v0[1];
  else
    v5 = (void *)0xE000000000000000;
  swift_bridgeObjectRetain();
  v6._countAndFlagsBits = v4;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 45;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  v8._countAndFlagsBits = v2;
  v8._object = v3;
  String.append(_:)(v8);
  return 0;
}

uint64_t AST.Reference._canonicalBase.getter()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  Swift::String v13;
  unint64_t v15;
  unint64_t v16;

  v1 = *(unsigned __int8 *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_BYTE *)(v0 + 72);
  if (v1 == 2)
  {
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    v16 = 0xD000000000000019;
  }
  else
  {
    if (v1 != 1)
    {
      if (!(*(_QWORD *)(v0 + 8) & 1 | *(_QWORD *)v0))
        return 693255976;
      if ((*(_QWORD *)(v0 + 8) & 1) != 0)
      {
        v8 = 0x64696C61766E693CLL;
        v10 = 0xE90000000000003ELL;
      }
      else
      {
        v8 = dispatch thunk of CustomStringConvertible.description.getter();
        v10 = v9;
      }
      v15 = v10;
      String.append(_:)(*(Swift::String *)&v8);
      swift_bridgeObjectRelease();
      return 92;
    }
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    v16 = 0xD00000000000001CLL;
  }
  _print_unlocked<A, B>(_:_:)();
  v4 = 0;
  if ((v3 & 1) == 0)
  {
    if ((v2 & 1) != 0)
    {
      v5 = 0x64696C61766E693CLL;
      v7 = 0xE90000000000003ELL;
    }
    else
    {
      v5 = dispatch thunk of CustomStringConvertible.description.getter();
      v7 = v6;
    }
    v11 = v7;
    String.append(_:)(*(Swift::String *)&v5);
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  v12 = 0xE000000000000000;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 3090976;
  v13._object = (void *)0xE300000000000000;
  String.append(_:)(v13);
  return v16;
}

Swift::Void __swiftcall AST.Node._postOrder(into:)(Swift::OpaquePointer *into)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *rawValue;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v3 = *v1;
  AST.Node._associatedValue.getter();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ASTNode);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ASTParent);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v4 = *((_QWORD *)&v11 + 1);
    v5 = v12;
    __swift_project_boxed_opaque_existential_1Tm(&v10, *((uint64_t *)&v11 + 1));
    v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v10);
    swift_release();
    specialized Sequence.forEach(_:)(v6);
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = 0;
    v10 = 0u;
    v11 = 0u;
    outlined destroy of _ASTParent?((uint64_t)&v10, &demangling cache variable for type metadata for _ASTParent?);
    swift_release();
  }
  rawValue = (char *)into->_rawValue;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)rawValue + 2) + 1, 1, rawValue);
  v9 = *((_QWORD *)rawValue + 2);
  v8 = *((_QWORD *)rawValue + 3);
  if (v9 >= v8 >> 1)
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v9 + 1, 1, rawValue);
  *((_QWORD *)rawValue + 2) = v9 + 1;
  *(_QWORD *)&rawValue[8 * v9 + 32] = v3;
  into->_rawValue = rawValue;
}

Swift::Void __swiftcall AST.Node._renderRange(count:into:)(Swift::Int count, Swift::String *into)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[10];

  if (count >= 1)
  {
    v16[8] = v3;
    v16[9] = v4;
    v5 = *v2;
    v12 = MEMORY[0x1DF0F378C](45, 0xE100000000000000, count - 1);
    v13 = v6;
    swift_bridgeObjectRetain();
    v7._countAndFlagsBits = 94;
    v7._object = (void *)0xE100000000000000;
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v9 = v12;
    v8 = v13;
    v16[0] = v5;
    AST.Node._associatedValue.getter();
    v10 = v14;
    v11 = v15;
    __swift_project_boxed_opaque_existential_1Tm(&v12, v14);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v11 + 16))(v16, v10, v11);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v12);
    v12 = v9;
    v13 = v8;
    lazy protocol witness table accessor for type String and conformance String();
    String.replaceSubrange<A>(_:with:)();
    swift_bridgeObjectRelease();
  }
}

uint64_t AST.Node._render(in:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  Swift::OpaquePointer into;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23[3];

  v3 = *v2;
  v4 = String.count.getter();
  v5 = MEMORY[0x1DF0F378C](32, 0xE100000000000000, v4);
  v7 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1DF003EB0;
  *(_QWORD *)(v8 + 32) = v5;
  *(_QWORD *)(v8 + 40) = v7;
  v23[0] = v8;
  v9 = MEMORY[0x1E0DEE9D8];
  into._rawValue = (void *)MEMORY[0x1E0DEE9D8];
  v21 = v3;
  swift_bridgeObjectRetain();
  AST.Node._postOrder(into:)(&into);
  v22 = v9;
  if (*((_QWORD *)into._rawValue + 2))
    __asm { BR              X9 }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Sequence.forEach(_:)(v9, a1, a2, v23, v5, v7);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  v10 = v23[0];
  if (!*(_QWORD *)(v23[0] + 16))
  {
    __break(1u);
    JUMPOUT(0x1DEFD3830);
  }
  v11 = *(_QWORD *)(v23[0] + 40);
  v12 = HIBYTE(v11) & 0xF;
  if ((v11 & 0x2000000000000000) == 0)
    v12 = *(_QWORD *)(v23[0] + 32) & 0xFFFFFFFFFFFFLL;
  into._rawValue = *(void **)(v23[0] + 32);
  v18 = v11;
  v19 = 0;
  v20 = v12;
  swift_bridgeObjectRetain_n();
  while ((unint64_t)String.Iterator.next()().value._object)
  {
    v13 = Character.isWhitespace.getter();
    swift_bridgeObjectRelease();
    if ((v13 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = MEMORY[0x1E0DEE9D8];
LABEL_11:
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t AST._render(in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_retain();
  v4 = AST.Node._render(in:)(a1, a2);
  swift_release();
  return v4;
}

uint64_t _TreeNode.height.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char v12;

  if (!(*(uint64_t (**)(void))(a2 + 8))())
    return 1;
  v3 = type metadata accessor for Array();
  MEMORY[0x1DF0F3DA4](MEMORY[0x1E0DEAF38], v3);
  Sequence.enumerated()();
  v4 = swift_bridgeObjectRelease();
  MEMORY[0x1E0C80A78](v4, v5);
  KeyPath = swift_getKeyPath();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a2;
  *(_QWORD *)(v7 + 24) = KeyPath;
  v8 = type metadata accessor for LazySequence();
  MEMORY[0x1DF0F3DA4](MEMORY[0x1E0DEC330], v8);
  LazySequenceProtocol.map<A>(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  v9 = type metadata accessor for LazyMapSequence();
  MEMORY[0x1DF0F3DA4](MEMORY[0x1E0DEC858], v9);
  Sequence<>.max()();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v12 & 1) != 0)
    return 1;
  result = v11 + 1;
  if (__OFADD__(v11, 1))
    __break(1u);
  return result;
}

uint64_t key path getter for _TreeNode.height : <A>A@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = _TreeNode.height.getter(*(_QWORD *)(a2 + a1 - 16), *(_QWORD *)(a2 + a1 - 8));
  *a3 = result;
  return result;
}

uint64_t Unicode.Scalar.AllScalars.startIndex.getter()
{
  return 0;
}

uint64_t Unicode.Scalar.AllScalars.endIndex.getter()
{
  return 1112064;
}

uint64_t Unicode.Scalar.AllScalars.subscript.getter(uint64_t result)
{
  BOOL v1;

  if (result >= 55296)
  {
    v1 = __OFADD__(result, 2048);
    result += 2048;
    if (v1)
      goto LABEL_11;
  }
  if (result < 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (HIDWORD(result))
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (result >> 11 == 27)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  if (WORD1(result) > 0x10u)
    goto LABEL_10;
  return result;
}

uint64_t Unicode.Scalar.AllScalars._customIndexOfEquatableElement(_:)(uint64_t result)
{
  if (result >= 0xE000)
    return result - 2048;
  else
    return result;
}

uint64_t Unicode.Scalar.AllScalars._customContainsEquatableElement(_:)()
{
  return 1;
}

_QWORD *protocol witness for BidirectionalCollection.index(before:) in conformance Unicode.Scalar.AllScalars@<X0>(_QWORD *result@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if (v2 >> 11 <= 0x21E)
  {
    *a2 = v2;
    return result;
  }
  __break(1u);
  return result;
}

unint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance Unicode.Scalar.AllScalars(unint64_t *result)
{
  unint64_t v1;

  v1 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if (v1 >> 11 <= 0x21E)
  {
    *result = v1;
    return result;
  }
  __break(1u);
  return result;
}

void protocol witness for Collection.endIndex.getter in conformance Unicode.Scalar.AllScalars(_QWORD *a1@<X8>)
{
  *a1 = 1112064;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance Unicode.Scalar.AllScalars(uint64_t (*result)(), unint64_t *a2))()
{
  unint64_t v2;
  BOOL v3;

  v2 = *a2;
  if ((uint64_t)*a2 >= 55296)
  {
    v3 = __OFADD__(v2, 2048);
    v2 += 2048;
    if (v3)
      goto LABEL_11;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (HIDWORD(v2))
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v2 >> 11 != 27)
  {
    if (WORD1(v2) <= 0x10u)
    {
      *(_DWORD *)result = v2;
      return AST.root.modify;
    }
    goto LABEL_10;
  }
LABEL_12:
  __break(1u);
  return result;
}

_QWORD *protocol witness for Collection.subscript.getter in conformance Unicode.Scalar.AllScalars@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  if ((*result & 0x8000000000000000) != 0 || (v2 = result[1], v2 > 1112064))
  {
    __break(1u);
  }
  else
  {
    *a2 = *result;
    a2[1] = v2;
  }
  return result;
}

double protocol witness for Collection.indices.getter in conformance Unicode.Scalar.AllScalars@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = xmmword_1DF004090;
  return result;
}

uint64_t protocol witness for Collection.isEmpty.getter in conformance Unicode.Scalar.AllScalars()
{
  return 0;
}

uint64_t protocol witness for Collection.count.getter in conformance Unicode.Scalar.AllScalars()
{
  return 1112064;
}

unsigned int *protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance Unicode.Scalar.AllScalars@<X0>(unsigned int *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *result;
  if (v2 >= 0xE000)
    v2 -= 2048;
  *(_QWORD *)a2 = v2;
  *(_WORD *)(a2 + 8) = 0;
  return result;
}

void protocol witness for Collection._customLastIndexOfEquatableElement(_:) in conformance Unicode.Scalar.AllScalars(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

_QWORD *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance Unicode.Scalar.AllScalars@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v3;

  v3 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else if (v3 <= 0x10F800)
  {
    *a3 = v3;
    return result;
  }
  __break(1u);
  return result;
}

unint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance Unicode.Scalar.AllScalars@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t result;
  char v6;

  result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

_QWORD *protocol witness for RandomAccessCollection.distance(from:to:) in conformance Unicode.Scalar.AllScalars(_QWORD *result, unint64_t *a2)
{
  unint64_t v2;

  v2 = *a2;
  if (*result <= 0x10F800uLL && v2 <= 0x10F800)
    return (_QWORD *)(v2 - *result);
  __break(1u);
  return result;
}

uint64_t *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance Unicode.Scalar.AllScalars(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  BOOL v5;

  v2 = *result;
  v3 = a2[1];
  if (*result >= *a2)
  {
    v5 = __OFSUB__(v2, v3);
    v4 = v2 - v3 < 0;
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  if (v4 == v5)
    __break(1u);
  return result;
}

_QWORD *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance Unicode.Scalar.AllScalars(_QWORD *result, _QWORD *a2)
{
  if (*result < *a2 || a2[1] < *result)
    __break(1u);
  return result;
}

{
  if (*result < *a2 || a2[1] < result[1])
    __break(1u);
  return result;
}

_QWORD *protocol witness for Collection.index(after:) in conformance Unicode.Scalar.AllScalars@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (*result >> 11 > 0x21EuLL)
    __break(1u);
  else
    *a2 = *result + 1;
  return result;
}

_QWORD *protocol witness for Collection.formIndex(after:) in conformance Unicode.Scalar.AllScalars(_QWORD *result)
{
  if (*result >> 11 > 0x21EuLL)
    __break(1u);
  else
    ++*result;
  return result;
}

uint64_t protocol witness for Sequence._customContainsEquatableElement(_:) in conformance Unicode.Scalar.AllScalars()
{
  return 1;
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance Unicode.Scalar.AllScalars()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t Unsupported.description.getter()
{
  return Unsupported.description.getter(0x726F707075736E55);
}

uint64_t Unreachable.description.getter()
{
  return Unsupported.description.getter(0x6168636165726E55);
}

uint64_t Unsupported.description.getter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;

  v3 = *v1;
  v4 = (void *)v1[1];
  v5 = v1[2];
  v6 = (void *)v1[3];
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = v3;
  v7._object = v4;
  String.append(_:)(v7);
  v8._countAndFlagsBits = 538970663;
  v8._object = (void *)0xE400000000000000;
  String.append(_:)(v8);
  v9._countAndFlagsBits = v5;
  v9._object = v6;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 58;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t Unsupported.init(_:file:line:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X5>, _QWORD *a4@<X8>)
{
  uint64_t result;
  uint64_t v9;

  result = StaticString.description.getter();
  *a4 = a1;
  a4[1] = a2;
  a4[2] = result;
  a4[3] = v9;
  a4[4] = a3;
  return result;
}

uint64_t Range.destructure.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  v6 = *(_QWORD *)(a3 + 16);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v8(a1, v3, v6);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v8)(a2, v3 + *(int *)(a3 + 36), v6);
}

uint64_t BidirectionalCollection.mapOffsets(_:)@<X0>(uint64_t a1@<X0>, void (*a2)(char *, uint64_t)@<X1>, char *a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void (*v23)(char *, uint64_t);
  uint64_t result;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  void (*v31)(char *, char *, uint64_t);
  char *v32;
  uint64_t (*v33)(char *, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t TupleTypeMetadata2;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);

  v40 = a1;
  v41 = a2;
  v39 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v5 = MEMORY[0x1E0C80A78](TupleTypeMetadata2, v4);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v5, v8);
  v37 = (char *)&v36 - v10;
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v13 = MEMORY[0x1E0C80A78](v9, v12);
  v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v13, v16);
  v19 = (char *)&v36 - v18;
  MEMORY[0x1E0C80A78](v17, v20);
  v22 = (char *)&v36 - v21;
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of BidirectionalCollection.index(_:offsetBy:)();
  v40 = v11;
  v23 = *(void (**)(char *, uint64_t))(v11 + 8);
  v23(v19, AssociatedTypeWitness);
  dispatch thunk of Collection.endIndex.getter();
  dispatch thunk of BidirectionalCollection.index(_:offsetBy:)();
  v41 = v23;
  v23(v15, AssociatedTypeWitness);
  swift_getAssociatedConformanceWitness();
  result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    v25 = v37;
    v26 = TupleTypeMetadata2;
    v27 = &v37[*(int *)(TupleTypeMetadata2 + 48)];
    v28 = v40;
    v29 = *(void (**)(char *, char *, uint64_t))(v40 + 32);
    v29(v37, v22, AssociatedTypeWitness);
    v29(v27, v19, AssociatedTypeWitness);
    v30 = &v7[*(int *)(v26 + 48)];
    v31 = *(void (**)(char *, char *, uint64_t))(v28 + 16);
    v31(v7, v25, AssociatedTypeWitness);
    v31(v30, v27, AssociatedTypeWitness);
    v32 = v39;
    v29(v39, v7, AssociatedTypeWitness);
    v33 = (uint64_t (*)(char *, uint64_t))v41;
    v41(v30, AssociatedTypeWitness);
    v34 = &v7[*(int *)(v26 + 48)];
    v29(v7, v25, AssociatedTypeWitness);
    v29(v34, v27, AssociatedTypeWitness);
    v35 = type metadata accessor for Range();
    v29(&v32[*(int *)(v35 + 36)], v34, AssociatedTypeWitness);
    return v33(v7, AssociatedTypeWitness);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t BidirectionalCollection.flatmapOffsets(_:)@<X0>(uint64_t a1@<X0>, void (*a2)(char *, uint64_t)@<X1>, int a3@<W2>, char *a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t result;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t TupleTypeMetadata2;
  char *v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  uint64_t v40;

  LODWORD(v40) = a3;
  v37 = (char *)a1;
  v38 = a2;
  v39 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v6 = MEMORY[0x1E0C80A78](TupleTypeMetadata2, v5);
  v8 = (char *)&TupleTypeMetadata2 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)&TupleTypeMetadata2 - v10;
  swift_getAssociatedConformanceWitness();
  v12 = type metadata accessor for Range();
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v15 = *(_QWORD **)(AssociatedTypeWitness - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&TupleTypeMetadata2 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v17, v20);
  v25 = (char *)&TupleTypeMetadata2 - v24;
  if ((v40 & 1) == 0)
    return BidirectionalCollection.mapOffsets(_:)((uint64_t)v37, v38, v39);
  v37 = (char *)v23;
  v38 = v22;
  v40 = v21;
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    v27 = TupleTypeMetadata2;
    v28 = &v11[*(int *)(TupleTypeMetadata2 + 48)];
    v29 = (void (*)(char *, char *, uint64_t))v15[4];
    v29(v11, v25, AssociatedTypeWitness);
    v29(v28, v19, AssociatedTypeWitness);
    v30 = &v8[*(int *)(v27 + 48)];
    v31 = (void (*)(char *, char *, uint64_t))v15[2];
    v31(v8, v11, AssociatedTypeWitness);
    v31(v30, v28, AssociatedTypeWitness);
    v32 = (uint64_t)v37;
    v29(v37, v8, AssociatedTypeWitness);
    v33 = (void (*)(char *, uint64_t))v15[1];
    v33(v30, AssociatedTypeWitness);
    v34 = &v8[*(int *)(v27 + 48)];
    v29(v8, v11, AssociatedTypeWitness);
    v29(v34, v28, AssociatedTypeWitness);
    v35 = v40;
    v29((char *)(v32 + *(int *)(v40 + 36)), v34, AssociatedTypeWitness);
    v33(v8, AssociatedTypeWitness);
    return (*((uint64_t (**)(char *, uint64_t, uint64_t))v38 + 4))(v39, v32, v35);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t Collection.split(around:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v29 = a1;
  v30 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v31 = a6;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v11 = type metadata accessor for PartialRangeFrom();
  v26 = *(_QWORD *)(v11 - 8);
  v27 = v11;
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v23 - v13;
  v15 = type metadata accessor for PartialRangeUpTo();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)&v23 - v18;
  v28 = *(_QWORD *)(AssociatedConformanceWitness + 8);
  result = dispatch thunk of static Equatable.== infix(_:_:)();
  if ((result & 1) != 0)
  {
    v24 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16);
    v25 = a3;
    v24(v19, a4, AssociatedTypeWitness);
    MEMORY[0x1DF0F3DA4](MEMORY[0x1E0DEC940], v15);
    Collection.subscript.getter();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
    dispatch thunk of Collection.subscript.getter();
    v21 = a4 + *(int *)(type metadata accessor for Range() + 36);
    result = dispatch thunk of static Equatable.== infix(_:_:)();
    if ((result & 1) != 0)
    {
      v24(v14, v21, AssociatedTypeWitness);
      v22 = v27;
      MEMORY[0x1DF0F3DA4](MEMORY[0x1E0DEC928], v27);
      Collection.subscript.getter();
      return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v14, v22);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t Collection.offset(ofIndex:)()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v1 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v2);
  v4 = (char *)&v7 - v3;
  dispatch thunk of Collection.startIndex.getter();
  v5 = dispatch thunk of Collection.distance(from:to:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, AssociatedTypeWitness);
  return v5;
}

uint64_t Collection.convertByOffset<A>(_:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, char *a6@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t AssociatedConformanceWitness;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  void (*v31)(char *, char *, uint64_t);
  char *v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  void (*v35)(char *, uint64_t);
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t TupleTypeMetadata2;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v44 = a2;
  v41 = a6;
  v42 = a1;
  v43 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v11 = MEMORY[0x1E0C80A78](TupleTypeMetadata2, v10);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v11, v14);
  v38 = (char *)&v38 - v16;
  v39 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v18 = MEMORY[0x1E0C80A78](v15, v17);
  v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v21);
  v23 = (char *)&v38 - v22;
  Collection.offset(of:)(a1, a3, a4);
  Collection.index(atOffset:)();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v24 = type metadata accessor for Range();
  Collection.offset(of:)(v42 + *(int *)(v24 + 36), a3, a4);
  Collection.index(atOffset:)();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    v44 = AssociatedConformanceWitness;
    v28 = v39;
    v27 = TupleTypeMetadata2;
    v29 = v38;
    v30 = &v38[*(int *)(TupleTypeMetadata2 + 48)];
    v31 = *(void (**)(char *, char *, uint64_t))(v39 + 32);
    v31(v38, v23, AssociatedTypeWitness);
    v31(v30, v20, AssociatedTypeWitness);
    v32 = &v13[*(int *)(v27 + 48)];
    v33 = *(void (**)(char *, char *, uint64_t))(v28 + 16);
    v33(v13, v29, AssociatedTypeWitness);
    v33(v32, v30, AssociatedTypeWitness);
    v34 = v41;
    v31(v41, v13, AssociatedTypeWitness);
    v35 = *(void (**)(char *, uint64_t))(v28 + 8);
    v35(v32, AssociatedTypeWitness);
    v36 = &v13[*(int *)(v27 + 48)];
    v31(v13, v29, AssociatedTypeWitness);
    v31(v36, v30, AssociatedTypeWitness);
    v37 = type metadata accessor for Range();
    v31(&v34[*(int *)(v37 + 36)], v36, AssociatedTypeWitness);
    return ((uint64_t (*)(char *, uint64_t))v35)(v13, AssociatedTypeWitness);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t Collection.convertByOffset<A>(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  Collection.offset(of:)(a1, a3, a5);
  return Collection.index(atOffset:)();
}

uint64_t UnsafeMutableRawPointer.roundedUp<A>(toAlignmentOf:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(a3 - 8) + 80);
  if (!__OFADD__(a2, v3))
    return (a2 + v3) & ~v3;
  __break(1u);
  return result;
}

BOOL String.isOnGraphemeClusterBoundary(_:)()
{
  char v0;

  swift_bridgeObjectRetain();
  String.Index.init(_:within:)();
  return (v0 & 1) == 0;
}

uint64_t String.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;

  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #1 in String.init<A>(_:), 0, a2, MEMORY[0x1E0DEE0F8], MEMORY[0x1E0DEDCE8], a3, MEMORY[0x1E0DEDD18], a8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  swift_getCanonicalSpecializedMetadata();
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [UInt32] and conformance [A], (uint64_t)&unk_1EA976888, (uint64_t)&cache variable for noncanonical specialized generic type metadata for [UInt32], MEMORY[0x1E0DEAF50]);
  lazy protocol witness table accessor for type Unicode.UTF32 and conformance Unicode.UTF32();
  result = static String._fromCodeUnits<A, B>(_:encoding:repair:)();
  if (v11)
  {
    v12 = result;
    swift_bridgeObjectRelease();
    return v12;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_DWORD *closure #1 in String.init<A>(_:)@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t AnyType.base.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t (*AnyType.base.modify())()
{
  return AST.root.modify;
}

BOOL static AnyType.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

void AnyType.hash(into:)()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int AnyType.hashValue.getter()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnyType()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AnyType()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnyType()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t Unicode.Script.init(rawValue:)@<X0>(char *a1@<X8>)
{
  unint64_t v2;
  uint64_t result;
  unint64_t v4;
  char v5;

  v2 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  result = swift_bridgeObjectRelease();
  v4 = v2 - 128;
  if (v2 >= 0x80)
  {
    v5 = -111;
    LOBYTE(v2) = 0x80;
    switch(v4)
    {
      case 0uLL:
        goto LABEL_2;
      case 1uLL:
        LOBYTE(v2) = -127;
        goto LABEL_2;
      case 2uLL:
        LOBYTE(v2) = -126;
        goto LABEL_2;
      case 3uLL:
        LOBYTE(v2) = -125;
        goto LABEL_2;
      case 4uLL:
        LOBYTE(v2) = -124;
        goto LABEL_2;
      case 5uLL:
        LOBYTE(v2) = -123;
        goto LABEL_2;
      case 6uLL:
        LOBYTE(v2) = -122;
        goto LABEL_2;
      case 7uLL:
        LOBYTE(v2) = -121;
        goto LABEL_2;
      case 8uLL:
        LOBYTE(v2) = -120;
        goto LABEL_2;
      case 9uLL:
        LOBYTE(v2) = -119;
        goto LABEL_2;
      case 0xAuLL:
        LOBYTE(v2) = -118;
        goto LABEL_2;
      case 0xBuLL:
        LOBYTE(v2) = -117;
        goto LABEL_2;
      case 0xCuLL:
        LOBYTE(v2) = -116;
        goto LABEL_2;
      case 0xDuLL:
        LOBYTE(v2) = -115;
        goto LABEL_2;
      case 0xEuLL:
        LOBYTE(v2) = -114;
        goto LABEL_2;
      case 0xFuLL:
        LOBYTE(v2) = -113;
        goto LABEL_2;
      case 0x10uLL:
        LOBYTE(v2) = -112;
        goto LABEL_2;
      case 0x11uLL:
        break;
      case 0x12uLL:
        v5 = -110;
        break;
      case 0x13uLL:
        v5 = -109;
        break;
      case 0x14uLL:
        v5 = -108;
        break;
      case 0x15uLL:
        v5 = -107;
        break;
      case 0x16uLL:
        v5 = -106;
        break;
      case 0x17uLL:
        v5 = -105;
        break;
      case 0x18uLL:
        v5 = -104;
        break;
      case 0x19uLL:
        v5 = -103;
        break;
      case 0x1AuLL:
        v5 = -102;
        break;
      case 0x1BuLL:
        v5 = -101;
        break;
      case 0x1CuLL:
        v5 = -100;
        break;
      case 0x1DuLL:
        v5 = -99;
        break;
      case 0x1EuLL:
        v5 = -98;
        break;
      case 0x1FuLL:
        v5 = -97;
        break;
      case 0x20uLL:
        v5 = -96;
        break;
      case 0x21uLL:
        v5 = -95;
        break;
      case 0x22uLL:
        v5 = -94;
        break;
      default:
        v5 = -93;
        break;
    }
  }
  else
  {
LABEL_2:
    v5 = v2;
  }
  *a1 = v5;
  return result;
}

void *static Unicode.Script.allCases.getter()
{
  return &outlined read-only object #0 of static Unicode.Script.allCases.getter;
}

uint64_t Unicode.Script.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1DEFD50C4 + 4 * word_1DEFFDCB8[*v0]))(0xD000000000000015, 0x80000001DF004250);
}

uint64_t sub_1DEFD50C4()
{
  return 0x6D616C6441;
}

uint64_t sub_1DEFD50D8()
{
  return 1836017729;
}

uint64_t sub_1DEFD50E8()
{
  return 0x636962617241;
}

uint64_t sub_1DEFD50FC()
{
  return 0x6E617473657641;
}

uint64_t sub_1DEFD5E44()
{
  return 0x6867616E69666954;
}

uint64_t sub_1DEFD5E5C()
{
  return 0x61747568726954;
}

uint64_t sub_1DEFD5E74()
{
  return 1869901652;
}

uint64_t sub_1DEFD5E84()
{
  return 0x6369746972616755;
}

uint64_t sub_1DEFD5E9C()
{
  return 0x6E776F6E6B6E55;
}

uint64_t sub_1DEFD5EB4()
{
  return 6906198;
}

uint64_t sub_1DEFD5EC4()
{
  return 0x6971756B68746956;
}

uint64_t sub_1DEFD5EDC()
{
  return 0x6F68636E6157;
}

uint64_t sub_1DEFD5EF0()
{
  return 0x435F676E61726157;
}

uint64_t sub_1DEFD5F14()
{
  return 0x6964697A6559;
}

uint64_t sub_1DEFD5F28()
{
  return 26969;
}

uint64_t sub_1DEFD5F50()
{
  return 0x6E61696E656D7241;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Unicode.Script(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance AST.Atom.CharacterProperty.JavaSpecial(a1, a2, a3, a4, Unicode.Script.rawValue.getter);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Unicode.Script@<X0>(char *a1@<X8>)
{
  return Unicode.Script.init(rawValue:)(a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Unicode.Script@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = Unicode.Script.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Unicode.Script(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AST.Atom.CharacterProperty.JavaSpecial(a1, a2, (void (*)(uint64_t))Unicode.Script.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Unicode.Script(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance AST.Atom.CharacterProperty.JavaSpecial(a1, a2, a3, (void (*)(void))Unicode.Script.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Unicode.Script(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.CharacterProperty.JavaSpecial(a1, a2, a3, (void (*)(uint64_t))Unicode.Script.rawValue.getter);
}

void protocol witness for static CaseIterable.allCases.getter in conformance Unicode.Script(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Unicode.Script.allCases.getter;
}

void *static Unicode.POSIXProperty.allCases.getter()
{
  return &outlined read-only object #0 of static Unicode.POSIXProperty.allCases.getter;
}

uint64_t Unicode.POSIXProperty.rawValue.getter()
{
  char *v0;

  return *(_QWORD *)&aAlnum_1[8 * *v0];
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Unicode.POSIXProperty(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Unicode.POSIXProperty@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  return Unicode.POSIXProperty.init(rawValue:)(*a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Unicode.POSIXProperty(_QWORD *a1@<X8>)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = 8 * *v1;
  v3 = *(_QWORD *)&aAlnum_1[v2];
  v4 = *(_QWORD *)((char *)&unk_1DF003C18 + v2);
  *a1 = v3;
  a1[1] = v4;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Unicode.POSIXProperty()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Unicode.POSIXProperty()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Unicode.POSIXProperty()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

void protocol witness for static CaseIterable.allCases.getter in conformance Unicode.POSIXProperty(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Unicode.POSIXProperty.allCases.getter;
}

uint64_t Unicode.ExtendedGeneralCategory.init(rawValue:)@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;
  char v5;

  v2 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  result = swift_bridgeObjectRelease();
  v4 = 0;
  v5 = 20;
  switch(v2)
  {
    case 0:
      goto LABEL_22;
    case 1:
      v4 = 1;
      goto LABEL_22;
    case 2:
      v4 = 2;
      goto LABEL_22;
    case 3:
      v4 = 3;
      goto LABEL_22;
    case 4:
      v4 = 4;
      goto LABEL_22;
    case 5:
      v4 = 5;
      goto LABEL_22;
    case 6:
      v4 = 6;
      goto LABEL_22;
    case 7:
      v4 = 7;
      goto LABEL_22;
    case 8:
      v4 = 8;
      goto LABEL_22;
    case 9:
      v4 = 9;
      goto LABEL_22;
    case 10:
      v4 = 10;
      goto LABEL_22;
    case 11:
      v4 = 11;
      goto LABEL_22;
    case 12:
      v4 = 12;
      goto LABEL_22;
    case 13:
      v4 = 13;
      goto LABEL_22;
    case 14:
      v4 = 14;
      goto LABEL_22;
    case 15:
      v4 = 15;
      goto LABEL_22;
    case 16:
      v4 = 16;
      goto LABEL_22;
    case 17:
      v4 = 17;
      goto LABEL_22;
    case 18:
      v4 = 18;
      goto LABEL_22;
    case 19:
      v4 = 19;
LABEL_22:
      v5 = v4;
      break;
    case 20:
      break;
    case 21:
      v5 = 21;
      break;
    case 22:
      v5 = 22;
      break;
    case 23:
      v5 = 23;
      break;
    case 24:
      v5 = 24;
      break;
    case 25:
      v5 = 25;
      break;
    case 26:
      v5 = 26;
      break;
    case 27:
      v5 = 27;
      break;
    case 28:
      v5 = 28;
      break;
    case 29:
      v5 = 29;
      break;
    case 30:
      v5 = 30;
      break;
    case 31:
      v5 = 31;
      break;
    case 32:
      v5 = 32;
      break;
    case 33:
      v5 = 33;
      break;
    case 34:
      v5 = 34;
      break;
    case 35:
      v5 = 35;
      break;
    case 36:
      v5 = 36;
      break;
    case 37:
      v5 = 37;
      break;
    default:
      v5 = 38;
      break;
  }
  *a1 = v5;
  return result;
}

void *static Unicode.ExtendedGeneralCategory.allCases.getter()
{
  return &outlined read-only object #0 of static Unicode.ExtendedGeneralCategory.allCases.getter;
}

uint64_t Unicode.ExtendedGeneralCategory.rawValue.getter()
{
  char *v0;

  return qword_1DF003C48[*v0];
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Unicode.ExtendedGeneralCategory(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance AST.Atom.CharacterProperty.JavaSpecial(a1, a2, a3, a4, Unicode.ExtendedGeneralCategory.rawValue.getter);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Unicode.ExtendedGeneralCategory@<X0>(char *a1@<X8>)
{
  return Unicode.ExtendedGeneralCategory.init(rawValue:)(a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Unicode.ExtendedGeneralCategory@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = Unicode.ExtendedGeneralCategory.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Unicode.ExtendedGeneralCategory(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AST.Atom.CharacterProperty.JavaSpecial(a1, a2, (void (*)(uint64_t))Unicode.ExtendedGeneralCategory.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Unicode.ExtendedGeneralCategory(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance AST.Atom.CharacterProperty.JavaSpecial(a1, a2, a3, (void (*)(void))Unicode.ExtendedGeneralCategory.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Unicode.ExtendedGeneralCategory(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.CharacterProperty.JavaSpecial(a1, a2, a3, (void (*)(uint64_t))Unicode.ExtendedGeneralCategory.rawValue.getter);
}

void protocol witness for static CaseIterable.allCases.getter in conformance Unicode.ExtendedGeneralCategory(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Unicode.ExtendedGeneralCategory.allCases.getter;
}

uint64_t Unicode.BinaryProperty.init(rawValue:)@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;
  char v5;

  v2 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  result = swift_bridgeObjectRelease();
  v4 = 0;
  v5 = 49;
  switch(v2)
  {
    case 0:
      goto LABEL_51;
    case 1:
      v4 = 1;
      goto LABEL_51;
    case 2:
      v4 = 2;
      goto LABEL_51;
    case 3:
      v4 = 3;
      goto LABEL_51;
    case 4:
      v4 = 4;
      goto LABEL_51;
    case 5:
      v4 = 5;
      goto LABEL_51;
    case 6:
      v4 = 6;
      goto LABEL_51;
    case 7:
      v4 = 7;
      goto LABEL_51;
    case 8:
      v4 = 8;
      goto LABEL_51;
    case 9:
      v4 = 9;
      goto LABEL_51;
    case 10:
      v4 = 10;
      goto LABEL_51;
    case 11:
      v4 = 11;
      goto LABEL_51;
    case 12:
      v4 = 12;
      goto LABEL_51;
    case 13:
      v4 = 13;
      goto LABEL_51;
    case 14:
      v4 = 14;
      goto LABEL_51;
    case 15:
      v4 = 15;
      goto LABEL_51;
    case 16:
      v4 = 16;
      goto LABEL_51;
    case 17:
      v4 = 17;
      goto LABEL_51;
    case 18:
      v4 = 18;
      goto LABEL_51;
    case 19:
      v4 = 19;
      goto LABEL_51;
    case 20:
      v4 = 20;
      goto LABEL_51;
    case 21:
      v4 = 21;
      goto LABEL_51;
    case 22:
      v4 = 22;
      goto LABEL_51;
    case 23:
      v4 = 23;
      goto LABEL_51;
    case 24:
      v4 = 24;
      goto LABEL_51;
    case 25:
      v4 = 25;
      goto LABEL_51;
    case 26:
      v4 = 26;
      goto LABEL_51;
    case 27:
      v4 = 27;
      goto LABEL_51;
    case 28:
      v4 = 28;
      goto LABEL_51;
    case 29:
      v4 = 29;
      goto LABEL_51;
    case 30:
      v4 = 30;
      goto LABEL_51;
    case 31:
      v4 = 31;
      goto LABEL_51;
    case 32:
      v4 = 32;
      goto LABEL_51;
    case 33:
      v4 = 33;
      goto LABEL_51;
    case 34:
      v4 = 34;
      goto LABEL_51;
    case 35:
      v4 = 35;
      goto LABEL_51;
    case 36:
      v4 = 36;
      goto LABEL_51;
    case 37:
      v4 = 37;
      goto LABEL_51;
    case 38:
      v4 = 38;
      goto LABEL_51;
    case 39:
      v4 = 39;
      goto LABEL_51;
    case 40:
      v4 = 40;
      goto LABEL_51;
    case 41:
      v4 = 41;
      goto LABEL_51;
    case 42:
      v4 = 42;
      goto LABEL_51;
    case 43:
      v4 = 43;
      goto LABEL_51;
    case 44:
      v4 = 44;
      goto LABEL_51;
    case 45:
      v4 = 45;
      goto LABEL_51;
    case 46:
      v4 = 46;
      goto LABEL_51;
    case 47:
      v4 = 47;
      goto LABEL_51;
    case 48:
      v4 = 48;
LABEL_51:
      v5 = v4;
      break;
    case 49:
      break;
    case 50:
      v5 = 50;
      break;
    case 51:
      v5 = 51;
      break;
    case 52:
      v5 = 52;
      break;
    case 53:
      v5 = 53;
      break;
    case 54:
      v5 = 54;
      break;
    case 55:
      v5 = 55;
      break;
    case 56:
      v5 = 56;
      break;
    case 57:
      v5 = 57;
      break;
    case 58:
      v5 = 58;
      break;
    case 59:
      v5 = 59;
      break;
    case 60:
      v5 = 60;
      break;
    case 61:
      v5 = 61;
      break;
    case 62:
      v5 = 62;
      break;
    case 63:
      v5 = 63;
      break;
    case 64:
      v5 = 64;
      break;
    case 65:
      v5 = 65;
      break;
    case 66:
      v5 = 66;
      break;
    default:
      v5 = 67;
      break;
  }
  *a1 = v5;
  return result;
}

void *static Unicode.BinaryProperty.allCases.getter()
{
  return &outlined read-only object #0 of static Unicode.BinaryProperty.allCases.getter;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Unicode.BinaryProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance AST.Atom.CharacterProperty.JavaSpecial(a1, a2, a3, a4, Unicode.BinaryProperty.rawValue.getter);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AST.Atom.CharacterProperty.JavaSpecial(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v6 = a5();
  v8 = v7;
  if (v6 == a5() && v8 == v9)
    v11 = 1;
  else
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11 & 1;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Unicode.BinaryProperty@<X0>(char *a1@<X8>)
{
  return Unicode.BinaryProperty.init(rawValue:)(a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Unicode.BinaryProperty@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = Unicode.BinaryProperty.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Unicode.BinaryProperty(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AST.Atom.CharacterProperty.JavaSpecial(a1, a2, (void (*)(uint64_t))Unicode.BinaryProperty.rawValue.getter);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AST.Atom.CharacterProperty.JavaSpecial(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v4;

  v4 = Hasher.init(_seed:)();
  a3(v4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Unicode.BinaryProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance AST.Atom.CharacterProperty.JavaSpecial(a1, a2, a3, (void (*)(void))Unicode.BinaryProperty.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AST.Atom.CharacterProperty.JavaSpecial(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Unicode.BinaryProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.CharacterProperty.JavaSpecial(a1, a2, a3, (void (*)(uint64_t))Unicode.BinaryProperty.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AST.Atom.CharacterProperty.JavaSpecial(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v5;

  v5 = Hasher.init(_seed:)();
  a4(v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for static CaseIterable.allCases.getter in conformance Unicode.BinaryProperty(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Unicode.BinaryProperty.allCases.getter;
}

uint64_t Unicode.Block.init(rawValue:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, __int16 *a3@<X8>)
{
  uint64_t v6;
  Swift::String v7;
  unint64_t v8;
  uint64_t result;
  __int16 v10;
  unint64_t v11;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<StaticString>);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 32) = "Basic_Latin";
  *(_QWORD *)(v6 + 40) = 11;
  *(_QWORD *)(v6 + 104) = "Latin_Extended_B";
  *(_QWORD *)(v6 + 128) = "IPA_Extensions";
  *(_QWORD *)(v6 + 176) = "Combining_Diacritical_Marks";
  *(_QWORD *)(v6 + 184) = 27;
  *(_QWORD *)(v6 + 200) = "Greek_and_Coptic";
  *(_QWORD *)(v6 + 272) = "Armenian";
  *(_QWORD *)(v6 + 296) = "Hebrew";
  *(_QWORD *)(v6 + 320) = "Arabic";
  *(_QWORD *)(v6 + 344) = "Syriac";
  *(_QWORD *)(v6 + 392) = "Thaana";
  *(_QWORD *)(v6 + 464) = "Mandaic";
  *(_QWORD *)(v6 + 472) = 7;
  *(_QWORD *)(v6 + 488) = "Syriac_Supplement";
  *(_QWORD *)(v6 + 512) = "Arabic_Extended_B";
  *(_QWORD *)(v6 + 536) = "Arabic_Extended_A";
  *(_QWORD *)(v6 + 560) = "Devanagari";
  *(_QWORD *)(v6 + 568) = 10;
  *(_QWORD *)(v6 + 584) = "Bengali";
  *(_QWORD *)(v6 + 592) = 7;
  *(_QWORD *)(v6 + 608) = "Gurmukhi";
  *(_QWORD *)(v6 + 632) = "Gujarati";
  *(_QWORD *)(v6 + 656) = "Oriya";
  *(_QWORD *)(v6 + 680) = "Tamil";
  *(_QWORD *)(v6 + 704) = "Telugu";
  *(_QWORD *)(v6 + 728) = "Kannada";
  *(_QWORD *)(v6 + 736) = 7;
  *(_QWORD *)(v6 + 752) = "Malayalam";
  *(_QWORD *)(v6 + 776) = "Sinhala";
  *(_QWORD *)(v6 + 784) = 7;
  *(_QWORD *)(v6 + 800) = "Thai";
  *(_QWORD *)(v6 + 824) = "Lao";
  *(_QWORD *)(v6 + 848) = "Tibetan";
  *(_QWORD *)(v6 + 856) = 7;
  *(_QWORD *)(v6 + 872) = "Myanmar";
  *(_QWORD *)(v6 + 880) = 7;
  *(_QWORD *)(v6 + 896) = "Georgian";
  *(_QWORD *)(v6 + 920) = "Hangul_Jamo";
  *(_QWORD *)(v6 + 944) = "Ethiopic";
  *(_QWORD *)(v6 + 968) = "Ethiopic_Supplement";
  *(_QWORD *)(v6 + 992) = "Cherokee";
  *(_QWORD *)(v6 + 1016) = "Unified_Canadian_Aboriginal_Syllabics";
  *(_QWORD *)(v6 + 1040) = "Ogham";
  *(_QWORD *)(v6 + 1064) = "Runic";
  *(_QWORD *)(v6 + 1088) = "Tagalog";
  *(_QWORD *)(v6 + 1096) = 7;
  *(_QWORD *)(v6 + 1112) = "Hanunoo";
  *(_QWORD *)(v6 + 1120) = 7;
  *(_QWORD *)(v6 + 1136) = "Buhid";
  *(_QWORD *)(v6 + 1160) = "Tagbanwa";
  *(_QWORD *)(v6 + 1184) = "Khmer";
  *(_QWORD *)(v6 + 1208) = "Mongolian";
  *(_QWORD *)(v6 + 1232) = "Unified_Canadian_Aboriginal_Syllabics_Extended";
  *(_QWORD *)(v6 + 1240) = 46;
  *(_QWORD *)(v6 + 1256) = "Limbu";
  *(_QWORD *)(v6 + 1280) = "Tai_Le";
  *(_QWORD *)(v6 + 1304) = "New_Tai_Lue";
  *(_QWORD *)(v6 + 1328) = "Khmer_Symbols";
  *(_QWORD *)(v6 + 1352) = "Buginese";
  *(_QWORD *)(v6 + 1376) = "Tai_Tham";
  *(_QWORD *)(v6 + 1400) = "Combining_Diacritical_Marks_Extended";
  *(_QWORD *)(v6 + 1424) = "Balinese";
  *(_QWORD *)(v6 + 1448) = "Sundanese";
  *(_QWORD *)(v6 + 1472) = "Batak";
  *(_QWORD *)(v6 + 1496) = "Lepcha";
  *(_QWORD *)(v6 + 1520) = "Ol_Chiki";
  *(_QWORD *)(v6 + 1544) = "Cyrillic_Extended_C";
  *(_QWORD *)(v6 + 1568) = "Georgian_Extended";
  *(_QWORD *)(v6 + 1592) = "Sundanese_Supplement";
  *(_QWORD *)(v6 + 1616) = "Vedic_Extensions";
  *(_QWORD *)(v6 + 1640) = "Phonetic_Extensions";
  *(_QWORD *)(v6 + 1664) = "Phonetic_Extensions_Supplement";
  *(_QWORD *)(v6 + 1688) = "Combining_Diacritical_Marks_Supplement";
  *(_QWORD *)(v6 + 1712) = "Latin_Extended_Additional";
  *(_QWORD *)(v6 + 1736) = "Greek_Extended";
  *(_QWORD *)(v6 + 1760) = "General_Punctuation";
  *(_QWORD *)(v6 + 1784) = "Superscripts_and_Subscripts";
  *(_QWORD *)(v6 + 1808) = "Currency_Symbols";
  *(_QWORD *)(v6 + 1832) = "Combining_Diacritical_Marks_for_Symbols";
  *(_QWORD *)(v6 + 1856) = "Letterlike_Symbols";
  *(_QWORD *)(v6 + 1880) = "Number_Forms";
  *(_QWORD *)(v6 + 1904) = "Arrows";
  *(_QWORD *)(v6 + 1928) = "Mathematical_Operators";
  *(_QWORD *)(v6 + 1952) = "Miscellaneous_Technical";
  *(_QWORD *)(v6 + 1976) = "Control_Pictures";
  *(_QWORD *)(v6 + 2000) = "Optical_Character_Recognition";
  *(_QWORD *)(v6 + 2024) = "Enclosed_Alphanumerics";
  *(_QWORD *)(v6 + 2048) = "Box_Drawing";
  *(_QWORD *)(v6 + 2072) = "Block_Elements";
  *(_QWORD *)(v6 + 2096) = "Geometric_Shapes";
  *(_QWORD *)(v6 + 2120) = "Miscellaneous_Symbols";
  *(_QWORD *)(v6 + 2144) = "Dingbats";
  *(_QWORD *)(v6 + 2168) = "Miscellaneous_Mathematical_Symbols_A";
  *(_QWORD *)(v6 + 2192) = "Supplemental_Arrows_A";
  *(_QWORD *)(v6 + 2216) = "Braille_Patterns";
  *(_QWORD *)(v6 + 2240) = "Supplemental_Arrows_B";
  *(_QWORD *)(v6 + 2264) = "Miscellaneous_Mathematical_Symbols_B";
  *(_QWORD *)(v6 + 2288) = "Supplemental_Mathematical_Operators";
  *(_QWORD *)(v6 + 2312) = "Miscellaneous_Symbols_and_Arrows";
  *(_QWORD *)(v6 + 2336) = "Glagolitic";
  *(_QWORD *)(v6 + 2360) = "Latin_Extended_C";
  *(_QWORD *)(v6 + 2384) = "Coptic";
  *(_QWORD *)(v6 + 2408) = "Georgian_Supplement";
  *(_QWORD *)(v6 + 2432) = "Tifinagh";
  *(_QWORD *)(v6 + 2456) = "Ethiopic_Extended";
  *(_QWORD *)(v6 + 2480) = "Cyrillic_Extended_A";
  *(_QWORD *)(v6 + 2504) = "Supplemental_Punctuation";
  *(_QWORD *)(v6 + 2528) = "CJK_Radicals_Supplement";
  *(_QWORD *)(v6 + 2552) = "Kangxi_Radicals";
  *(_QWORD *)(v6 + 2576) = "Ideographic_Description_Characters";
  *(_QWORD *)(v6 + 2600) = "CJK_Symbols_and_Punctuation";
  *(_QWORD *)(v6 + 2624) = "Hiragana";
  *(_QWORD *)(v6 + 2648) = "Katakana";
  *(_QWORD *)(v6 + 2672) = "Bopomofo";
  *(_QWORD *)(v6 + 2696) = "Hangul_Compatibility_Jamo";
  *(_QWORD *)(v6 + 2720) = "Kanbun";
  *(_QWORD *)(v6 + 2744) = "Bopomofo_Extended";
  *(_QWORD *)(v6 + 2768) = "CJK_Strokes";
  *(_QWORD *)(v6 + 2792) = "Katakana_Phonetic_Extensions";
  *(_QWORD *)(v6 + 2816) = "Enclosed_CJK_Letters_and_Months";
  *(_QWORD *)(v6 + 2840) = "CJK_Compatibility";
  *(_QWORD *)(v6 + 2864) = "CJK_Unified_Ideographs_Extension_A";
  *(_QWORD *)(v6 + 2888) = "Yijing_Hexagram_Symbols";
  *(_QWORD *)(v6 + 2912) = "CJK_Unified_Ideographs";
  *(_QWORD *)(v6 + 2936) = "Yi_Syllables";
  *(_QWORD *)(v6 + 2960) = "Yi_Radicals";
  *(_QWORD *)(v6 + 2984) = "Lisu";
  *(_QWORD *)(v6 + 3008) = "Vai";
  *(_QWORD *)(v6 + 3032) = "Cyrillic_Extended_B";
  *(_QWORD *)(v6 + 3056) = "Bamum";
  *(_QWORD *)(v6 + 3080) = "Modifier_Tone_Letters";
  *(_QWORD *)(v6 + 3104) = "Latin_Extended_D";
  *(_QWORD *)(v6 + 3128) = "Syloti_Nagri";
  *(_QWORD *)(v6 + 3152) = "Common_Indic_Number_Forms";
  *(_QWORD *)(v6 + 3176) = "Phags_pa";
  *(_QWORD *)(v6 + 3200) = "Saurashtra";
  *(_QWORD *)(v6 + 3224) = "Devanagari_Extended";
  *(_QWORD *)(v6 + 3248) = "Kayah_Li";
  *(_QWORD *)(v6 + 3272) = "Rejang";
  *(_QWORD *)(v6 + 3296) = "Hangul_Jamo_Extended_A";
  *(_QWORD *)(v6 + 3320) = "Javanese";
  *(_QWORD *)(v6 + 3344) = "Myanmar_Extended_B";
  *(_QWORD *)(v6 + 3368) = "Cham";
  *(_QWORD *)(v6 + 3392) = "Myanmar_Extended_A";
  *(_QWORD *)(v6 + 3416) = "Tai_Viet";
  *(_QWORD *)(v6 + 3440) = "Meetei_Mayek_Extensions";
  *(_QWORD *)(v6 + 3464) = "Ethiopic_Extended_A";
  *(_QWORD *)(v6 + 3488) = "Latin_Extended_E";
  *(_QWORD *)(v6 + 3512) = "Cherokee_Supplement";
  *(_QWORD *)(v6 + 3536) = "Meetei_Mayek";
  *(_QWORD *)(v6 + 3560) = "Hangul_Syllables";
  *(_QWORD *)(v6 + 3584) = "Hangul_Jamo_Extended_B";
  *(_QWORD *)(v6 + 3608) = "High_Surrogates";
  *(_QWORD *)(v6 + 3632) = "High_Private_Use_Surrogates";
  *(_QWORD *)(v6 + 3656) = "Low_Surrogates";
  *(_QWORD *)(v6 + 3680) = "Private_Use_Area";
  *(_QWORD *)(v6 + 3704) = "CJK_Compatibility_Ideographs";
  *(_QWORD *)(v6 + 3728) = "Alphabetic_Presentation_Forms";
  *(_QWORD *)(v6 + 3752) = "Arabic_Presentation_Forms_A";
  *(_QWORD *)(v6 + 3776) = "Variation_Selectors";
  *(_QWORD *)(v6 + 3800) = "Vertical_Forms";
  *(_QWORD *)(v6 + 3824) = "Combining_Half_Marks";
  *(_QWORD *)(v6 + 3848) = "CJK_Compatibility_Forms";
  *(_QWORD *)(v6 + 3872) = "Small_Form_Variants";
  *(_QWORD *)(v6 + 1792) = 27;
  *(_QWORD *)(v6 + 3896) = "Arabic_Presentation_Forms_B";
  *(_QWORD *)(v6 + 2008) = 29;
  *(_QWORD *)(v6 + 2344) = 10;
  *(_QWORD *)(v6 + 2608) = 27;
  *(_QWORD *)(v6 + 3208) = 10;
  *(_QWORD *)(v6 + 3640) = 27;
  *(_QWORD *)(v6 + 3760) = 27;
  *(_QWORD *)(v6 + 3904) = 27;
  *(_QWORD *)(v6 + 3736) = 29;
  *(_QWORD *)(v6 + 3920) = "Halfwidth_and_Fullwidth_Forms";
  *(_QWORD *)(v6 + 3928) = 29;
  *(_QWORD *)(v6 + 3944) = "Specials";
  *(_QWORD *)(v6 + 3968) = "Linear_B_Syllabary";
  *(_QWORD *)(v6 + 3992) = "Linear_B_Ideograms";
  *(_QWORD *)(v6 + 4016) = "Aegean_Numbers";
  *(_QWORD *)(v6 + 4040) = "Ancient_Greek_Numbers";
  *(_QWORD *)(v6 + 4064) = "Ancient_Symbols";
  *(_QWORD *)(v6 + 4088) = "Phaistos_Disc";
  *(_QWORD *)(v6 + 4112) = "Lycian";
  *(_QWORD *)(v6 + 4136) = "Carian";
  *(_QWORD *)(v6 + 4160) = "Coptic_Epact_Numbers";
  *(_QWORD *)(v6 + 4184) = "Old_Italic";
  *(_QWORD *)(v6 + 4192) = 10;
  *(_QWORD *)(v6 + 4208) = "Gothic";
  *(_QWORD *)(v6 + 4232) = "Old_Permic";
  *(_QWORD *)(v6 + 4240) = 10;
  *(_QWORD *)(v6 + 4256) = "Ugaritic";
  *(_QWORD *)(v6 + 4280) = "Old_Persian";
  *(_QWORD *)(v6 + 4304) = "Deseret";
  *(_QWORD *)(v6 + 4328) = "Shavian";
  *(_QWORD *)(v6 + 4352) = "Osmanya";
  *(_QWORD *)(v6 + 4376) = "Osage";
  *(_QWORD *)(v6 + 4400) = "Elbasan";
  *(_QWORD *)(v6 + 4424) = "Caucasian_Albanian";
  *(_QWORD *)(v6 + 4448) = "Vithkuqi";
  *(_QWORD *)(v6 + 4472) = "Linear_A";
  *(_QWORD *)(v6 + 4496) = "Latin_Extended_F";
  *(_QWORD *)(v6 + 4520) = "Cypriot_Syllabary";
  *(_QWORD *)(v6 + 4544) = "Imperial_Aramaic";
  *(_QWORD *)(v6 + 4568) = "Palmyrene";
  *(_QWORD *)(v6 + 4592) = "Nabataean";
  *(_QWORD *)(v6 + 4616) = "Hatran";
  *(_QWORD *)(v6 + 4640) = "Phoenician";
  *(_QWORD *)(v6 + 4648) = 10;
  *(_QWORD *)(v6 + 4664) = "Lydian";
  *(_QWORD *)(v6 + 4688) = "Meroitic_Hieroglyphs";
  *(_QWORD *)(v6 + 4712) = "Meroitic_Cursive";
  *(_QWORD *)(v6 + 4736) = "Kharoshthi";
  *(_QWORD *)(v6 + 4744) = 10;
  *(_QWORD *)(v6 + 4760) = "Old_South_Arabian";
  *(_QWORD *)(v6 + 4784) = "Old_North_Arabian";
  *(_QWORD *)(v6 + 4808) = "Manichaean";
  *(_QWORD *)(v6 + 4816) = 10;
  *(_QWORD *)(v6 + 4832) = "Avestan";
  *(_QWORD *)(v6 + 4856) = "Inscriptional_Parthian";
  *(_QWORD *)(v6 + 4880) = "Inscriptional_Pahlavi";
  *(_QWORD *)(v6 + 4904) = "Psalter_Pahlavi";
  *(_QWORD *)(v6 + 4928) = "Old_Turkic";
  *(_QWORD *)(v6 + 4936) = 10;
  *(_QWORD *)(v6 + 4952) = "Old_Hungarian";
  *(_QWORD *)(v6 + 4976) = "Hanifi_Rohingya";
  *(_QWORD *)(v6 + 5000) = "Rumi_Numeral_Symbols";
  *(_QWORD *)(v6 + 5024) = "Yezidi";
  *(_QWORD *)(v6 + 5048) = "Old_Sogdian";
  *(_QWORD *)(v6 + 5072) = "Sogdian";
  *(_QWORD *)(v6 + 5096) = "Old_Uyghur";
  *(_QWORD *)(v6 + 5104) = 10;
  *(_QWORD *)(v6 + 5120) = "Chorasmian";
  *(_QWORD *)(v6 + 5128) = 10;
  *(_QWORD *)(v6 + 5144) = "Elymaic";
  *(_QWORD *)(v6 + 5168) = "Brahmi";
  *(_QWORD *)(v6 + 5312) = "Sinhala_Archaic_Numbers";
  *(_QWORD *)(v6 + 5336) = "Khojki";
  *(_QWORD *)(v6 + 5360) = "Multani";
  *(_QWORD *)(v6 + 5384) = "Khudawadi";
  *(_QWORD *)(v6 + 5408) = "Grantha";
  *(_QWORD *)(v6 + 5672) = "Nandinagari";
  *(_QWORD *)(v6 + 5656) = 11;
  *(_BYTE *)(v6 + 5664) = 2;
  *(_QWORD *)(v6 + 5432) = "Newa";
  *(_QWORD *)(v6 + 5632) = 11;
  *(_BYTE *)(v6 + 5640) = 2;
  *(_QWORD *)(v6 + 5648) = "Dives_Akuru";
  *(_QWORD *)(v6 + 5624) = "Warang_Citi";
  *(_BYTE *)(v6 + 5616) = 2;
  *(_QWORD *)(v6 + 5480) = "Siddham";
  *(_BYTE *)(v6 + 5592) = 2;
  *(_QWORD *)(v6 + 5600) = "Dogra";
  *(_QWORD *)(v6 + 5608) = 5;
  *(_QWORD *)(v6 + 5576) = "Ahom";
  *(_BYTE *)(v6 + 5568) = 2;
  *(_QWORD *)(v6 + 5584) = 4;
  *(_QWORD *)(v6 + 1960) = 23;
  *(_QWORD *)(v6 + 5552) = "Takri";
  *(_BYTE *)(v6 + 5544) = 2;
  *(_QWORD *)(v6 + 5560) = 5;
  *(_QWORD *)(v6 + 5528) = "Mongolian_Supplement";
  *(_QWORD *)(v6 + 5512) = 4;
  *(_BYTE *)(v6 + 5520) = 2;
  *(_QWORD *)(v6 + 5536) = 20;
  *(_QWORD *)(v6 + 5504) = "Modi";
  *(_BYTE *)(v6 + 5472) = 2;
  *(_QWORD *)(v6 + 5488) = 7;
  *(_BYTE *)(v6 + 5496) = 2;
  *(_QWORD *)(v6 + 5456) = "Tirhuta";
  *(_QWORD *)(v6 + 2536) = 23;
  *(_QWORD *)(v6 + 5440) = 4;
  *(_BYTE *)(v6 + 5448) = 2;
  *(_QWORD *)(v6 + 5464) = 7;
  *(_QWORD *)(v6 + 2896) = 23;
  *(_QWORD *)(v6 + 3448) = 23;
  *(_QWORD *)(v6 + 5392) = 9;
  *(_BYTE *)(v6 + 5400) = 2;
  *(_QWORD *)(v6 + 5416) = 7;
  *(_BYTE *)(v6 + 5424) = 2;
  *(_QWORD *)(v6 + 3856) = 23;
  *(_BYTE *)(v6 + 5112) = 2;
  *(_QWORD *)(v6 + 5344) = 6;
  *(_BYTE *)(v6 + 5352) = 2;
  *(_QWORD *)(v6 + 5368) = 7;
  *(_BYTE *)(v6 + 5376) = 2;
  *(_BYTE *)(v6 + 5136) = 2;
  *(_QWORD *)(v6 + 5152) = 7;
  *(_BYTE *)(v6 + 5160) = 2;
  *(_BYTE *)(v6 + 5304) = 2;
  *(_QWORD *)(v6 + 5320) = 23;
  *(_BYTE *)(v6 + 5328) = 2;
  *(_QWORD *)(v6 + 5272) = 8;
  *(_BYTE *)(v6 + 5280) = 2;
  *(_QWORD *)(v6 + 5288) = "Sharada";
  *(_QWORD *)(v6 + 5296) = 7;
  *(_BYTE *)(v6 + 5184) = 2;
  *(_QWORD *)(v6 + 5248) = 6;
  *(_BYTE *)(v6 + 5256) = 2;
  *(_QWORD *)(v6 + 5264) = "Mahajani";
  *(_QWORD *)(v6 + 5240) = "Chakma";
  *(_BYTE *)(v6 + 5232) = 2;
  *(_QWORD *)(v6 + 5192) = "Kaithi";
  *(_BYTE *)(v6 + 5208) = 2;
  *(_QWORD *)(v6 + 5216) = "Sora_Sompeng";
  *(_QWORD *)(v6 + 5224) = 12;
  *(_QWORD *)(v6 + 5200) = 6;
  *(_QWORD *)(v6 + 5696) = "Zanabazar_Square";
  *(_QWORD *)(v6 + 5176) = 6;
  *(_QWORD *)(v6 + 5720) = "Soyombo";
  *(_QWORD *)(v6 + 5744) = "Unified_Canadian_Aboriginal_Syllabics_Extended_A";
  *(_QWORD *)(v6 + 5752) = 48;
  *(_QWORD *)(v6 + 5768) = "Pau_Cin_Hau";
  *(_QWORD *)(v6 + 5792) = "Bhaiksuki";
  *(_QWORD *)(v6 + 5816) = "Marchen";
  *(_QWORD *)(v6 + 5840) = "Masaram_Gondi";
  *(_QWORD *)(v6 + 5864) = "Gunjala_Gondi";
  *(_QWORD *)(v6 + 5888) = "Makasar";
  *(_QWORD *)(v6 + 5056) = 11;
  *(_BYTE *)(v6 + 5064) = 2;
  *(_QWORD *)(v6 + 5080) = 7;
  *(_BYTE *)(v6 + 5088) = 2;
  *(_QWORD *)(v6 + 4312) = 7;
  *(_QWORD *)(v6 + 4336) = 7;
  *(_QWORD *)(v6 + 4360) = 7;
  *(_BYTE *)(v6 + 5016) = 2;
  *(_QWORD *)(v6 + 5032) = 6;
  *(_BYTE *)(v6 + 5040) = 2;
  *(_QWORD *)(v6 + 4408) = 7;
  *(_QWORD *)(v6 + 4840) = 7;
  *(_QWORD *)(v6 + 4888) = 21;
  *(_QWORD *)(v6 + 4984) = 15;
  *(_BYTE *)(v6 + 4992) = 2;
  *(_QWORD *)(v6 + 5008) = 20;
  *(_BYTE *)(v6 + 4896) = 2;
  *(_QWORD *)(v6 + 4912) = 15;
  *(_BYTE *)(v6 + 4920) = 2;
  *(_BYTE *)(v6 + 4944) = 2;
  *(_QWORD *)(v6 + 4960) = 13;
  *(_BYTE *)(v6 + 4968) = 2;
  *(_QWORD *)(v6 + 5728) = 7;
  *(_QWORD *)(v6 + 5824) = 7;
  *(_QWORD *)(v6 + 5896) = 7;
  *(_QWORD *)(v6 + 5912) = "Lisu_Supplement";
  *(_QWORD *)(v6 + 5936) = "Tamil_Supplement";
  *(_QWORD *)(v6 + 5960) = "Cuneiform";
  *(_QWORD *)(v6 + 5984) = "Cuneiform_Numbers_and_Punctuation";
  *(_QWORD *)(v6 + 6008) = "Early_Dynastic_Cuneiform";
  *(_QWORD *)(v6 + 152) = "Spacing_Modifier_Letters";
  *(_QWORD *)(v6 + 160) = 24;
  *(_BYTE *)(v6 + 4848) = 2;
  *(_QWORD *)(v6 + 4864) = 22;
  *(_BYTE *)(v6 + 4872) = 2;
  *(_QWORD *)(v6 + 2512) = 24;
  *(_BYTE *)(v6 + 4752) = 2;
  *(_QWORD *)(v6 + 4768) = 17;
  *(_BYTE *)(v6 + 4776) = 2;
  *(_BYTE *)(v6 + 4824) = 2;
  *(_QWORD *)(v6 + 4792) = 17;
  *(_BYTE *)(v6 + 4800) = 2;
  *(_QWORD *)(v6 + 6016) = 24;
  *(_QWORD *)(v6 + 6032) = "Cypro_Minoan";
  *(_QWORD *)(v6 + 6056) = "Egyptian_Hieroglyphs";
  *(_QWORD *)(v6 + 6080) = "Egyptian_Hieroglyph_Format_Controls";
  *(_QWORD *)(v6 + 6104) = "Anatolian_Hieroglyphs";
  *(_QWORD *)(v6 + 6128) = "Bamum_Supplement";
  *(_QWORD *)(v6 + 6152) = "Mro";
  *(_QWORD *)(v6 + 4720) = 16;
  *(_BYTE *)(v6 + 4728) = 2;
  *(_QWORD *)(v6 + 416) = "NKo";
  *(_QWORD *)(v6 + 424) = 3;
  *(_QWORD *)(v6 + 4672) = 6;
  *(_BYTE *)(v6 + 4680) = 2;
  *(_QWORD *)(v6 + 4696) = 20;
  *(_BYTE *)(v6 + 4704) = 2;
  *(_QWORD *)(v6 + 832) = 3;
  *(_QWORD *)(v6 + 928) = 11;
  *(_QWORD *)(v6 + 4624) = 6;
  *(_BYTE *)(v6 + 4632) = 2;
  *(_BYTE *)(v6 + 4656) = 2;
  *(_QWORD *)(v6 + 1312) = 11;
  *(_QWORD *)(v6 + 2056) = 11;
  *(_QWORD *)(v6 + 4576) = 9;
  *(_BYTE *)(v6 + 4584) = 2;
  *(_QWORD *)(v6 + 4600) = 9;
  *(_BYTE *)(v6 + 4608) = 2;
  *(_QWORD *)(v6 + 3016) = 3;
  *(_QWORD *)(v6 + 4456) = 8;
  *(_QWORD *)(v6 + 4528) = 17;
  *(_BYTE *)(v6 + 4536) = 2;
  *(_QWORD *)(v6 + 4552) = 16;
  *(_BYTE *)(v6 + 4560) = 2;
  *(_BYTE *)(v6 + 4464) = 2;
  *(_QWORD *)(v6 + 4480) = 8;
  *(_BYTE *)(v6 + 4488) = 2;
  *(_QWORD *)(v6 + 4504) = 16;
  *(_BYTE *)(v6 + 4512) = 2;
  *(_QWORD *)(v6 + 6160) = 3;
  *(_QWORD *)(v6 + 6176) = "Tangsa";
  *(_QWORD *)(v6 + 6200) = "Bassa_Vah";
  *(_QWORD *)(v6 + 6224) = "Pahawh_Hmong";
  *(_QWORD *)(v6 + 6248) = "Medefaidrin";
  *(_QWORD *)(v6 + 2296) = 35;
  *(_QWORD *)(v6 + 2776) = 11;
  *(_BYTE *)(v6 + 4416) = 2;
  *(_QWORD *)(v6 + 4432) = 18;
  *(_BYTE *)(v6 + 4440) = 2;
  *(_QWORD *)(v6 + 2968) = 11;
  *(_BYTE *)(v6 + 4272) = 2;
  *(_QWORD *)(v6 + 4288) = 11;
  *(_BYTE *)(v6 + 4368) = 2;
  *(_QWORD *)(v6 + 4384) = 5;
  *(_BYTE *)(v6 + 4392) = 2;
  *(_BYTE *)(v6 + 4296) = 2;
  *(_BYTE *)(v6 + 4320) = 2;
  *(_BYTE *)(v6 + 4344) = 2;
  *(_QWORD *)(v6 + 5680) = 11;
  *(_QWORD *)(v6 + 5776) = 11;
  *(_QWORD *)(v6 + 6088) = 35;
  *(_QWORD *)(v6 + 6256) = 11;
  *(_QWORD *)(v6 + 6272) = "Miao";
  *(_QWORD *)(v6 + 6296) = "Ideographic_Symbols_and_Punctuation";
  *(_QWORD *)(v6 + 6304) = 35;
  *(_QWORD *)(v6 + 6320) = "Tangut";
  *(_QWORD *)(v6 + 6344) = "Tangut_Components";
  *(_QWORD *)(v6 + 6368) = "Khitan_Small_Script";
  *(_QWORD *)(v6 + 6392) = "Tangut_Supplement";
  *(_BYTE *)(v6 + 4248) = 2;
  *(_QWORD *)(v6 + 4264) = 8;
  *(_QWORD *)(v6 + 368) = "Arabic_Supplement";
  *(_QWORD *)(v6 + 376) = 17;
  *(_QWORD *)(v6 + 496) = 17;
  *(_BYTE *)(v6 + 4200) = 2;
  *(_QWORD *)(v6 + 4216) = 6;
  *(_BYTE *)(v6 + 4224) = 2;
  *(_QWORD *)(v6 + 520) = 17;
  *(_QWORD *)(v6 + 544) = 17;
  *(_QWORD *)(v6 + 4144) = 6;
  *(_BYTE *)(v6 + 4152) = 2;
  *(_QWORD *)(v6 + 4168) = 20;
  *(_BYTE *)(v6 + 4176) = 2;
  *(_QWORD *)(v6 + 1576) = 17;
  *(_QWORD *)(v6 + 2464) = 17;
  *(_QWORD *)(v6 + 4096) = 13;
  *(_BYTE *)(v6 + 4104) = 2;
  *(_QWORD *)(v6 + 4120) = 6;
  *(_BYTE *)(v6 + 4128) = 2;
  *(_QWORD *)(v6 + 2752) = 17;
  *(_QWORD *)(v6 + 2848) = 17;
  *(_QWORD *)(v6 + 4048) = 21;
  *(_BYTE *)(v6 + 4056) = 2;
  *(_QWORD *)(v6 + 4072) = 15;
  *(_BYTE *)(v6 + 4080) = 2;
  *(_BYTE *)(v6 + 3960) = 2;
  *(_QWORD *)(v6 + 3976) = 18;
  *(_BYTE *)(v6 + 3984) = 2;
  *(_BYTE *)(v6 + 4008) = 2;
  *(_QWORD *)(v6 + 4024) = 14;
  *(_BYTE *)(v6 + 4032) = 2;
  *(_QWORD *)(v6 + 4000) = 18;
  *(_QWORD *)(v6 + 6352) = 17;
  *(_QWORD *)(v6 + 6400) = 17;
  *(_QWORD *)(v6 + 6416) = "Kana_Extended_B";
  *(_QWORD *)(v6 + 6440) = "Kana_Supplement";
  *(_QWORD *)(v6 + 6464) = "Kana_Extended_A";
  *(_QWORD *)(v6 + 6488) = "Small_Kana_Extension";
  *(_BYTE *)(v6 + 3936) = 2;
  *(_QWORD *)(v6 + 3952) = 8;
  *(_QWORD *)(v6 + 1600) = 20;
  *(_QWORD *)(v6 + 3784) = 19;
  *(_BYTE *)(v6 + 3792) = 2;
  *(_QWORD *)(v6 + 3880) = 19;
  *(_BYTE *)(v6 + 3888) = 2;
  *(_BYTE *)(v6 + 3912) = 2;
  *(_QWORD *)(v6 + 3808) = 14;
  *(_BYTE *)(v6 + 3816) = 2;
  *(_QWORD *)(v6 + 3832) = 20;
  *(_BYTE *)(v6 + 3840) = 2;
  *(_BYTE *)(v6 + 3864) = 2;
  *(_QWORD *)(v6 + 6064) = 20;
  *(_QWORD *)(v6 + 6496) = 20;
  *(_QWORD *)(v6 + 6512) = "Nushu";
  *(_QWORD *)(v6 + 6536) = "Duployan";
  *(_QWORD *)(v6 + 6560) = "Shorthand_Format_Controls";
  *(_QWORD *)(v6 + 6584) = "Znamenny_Musical_Notation";
  *(_QWORD *)(v6 + 6608) = "Byzantine_Musical_Symbols";
  *(_QWORD *)(v6 + 2560) = 15;
  *(_QWORD *)(v6 + 6632) = "Musical_Symbols";
  *(_QWORD *)(v6 + 3616) = 15;
  *(_BYTE *)(v6 + 3744) = 2;
  *(_BYTE *)(v6 + 3768) = 2;
  *(_BYTE *)(v6 + 3648) = 2;
  *(_QWORD *)(v6 + 3664) = 14;
  *(_QWORD *)(v6 + 3688) = 16;
  *(_BYTE *)(v6 + 3696) = 2;
  *(_QWORD *)(v6 + 3712) = 28;
  *(_BYTE *)(v6 + 3720) = 2;
  *(_BYTE *)(v6 + 3672) = 2;
  *(_QWORD *)(v6 + 5920) = 15;
  *(_QWORD *)(v6 + 6424) = 15;
  *(_QWORD *)(v6 + 6448) = 15;
  *(_QWORD *)(v6 + 6472) = 15;
  *(_QWORD *)(v6 + 6640) = 15;
  *(_QWORD *)(v6 + 6656) = "Ancient_Greek_Musical_Notation";
  *(_QWORD *)(v6 + 6680) = "Mayan_Numerals";
  *(_QWORD *)(v6 + 80) = "Latin_Extended_A";
  *(_QWORD *)(v6 + 88) = 16;
  *(_QWORD *)(v6 + 3592) = 22;
  *(_BYTE *)(v6 + 3600) = 2;
  *(_BYTE *)(v6 + 3624) = 2;
  *(_QWORD *)(v6 + 112) = 16;
  *(_QWORD *)(v6 + 3544) = 12;
  *(_BYTE *)(v6 + 3552) = 2;
  *(_QWORD *)(v6 + 3568) = 16;
  *(_BYTE *)(v6 + 3576) = 2;
  *(_QWORD *)(v6 + 136) = 14;
  *(_QWORD *)(v6 + 208) = 16;
  *(_QWORD *)(v6 + 3496) = 16;
  *(_BYTE *)(v6 + 3504) = 2;
  *(_QWORD *)(v6 + 3520) = 19;
  *(_BYTE *)(v6 + 3528) = 2;
  *(_QWORD *)(v6 + 304) = 6;
  *(_QWORD *)(v6 + 328) = 6;
  *(_QWORD *)(v6 + 352) = 6;
  *(_BYTE *)(v6 + 3456) = 2;
  *(_QWORD *)(v6 + 3472) = 19;
  *(_BYTE *)(v6 + 3480) = 2;
  *(_QWORD *)(v6 + 400) = 6;
  *(_QWORD *)(v6 + 712) = 6;
  *(_QWORD *)(v6 + 3400) = 18;
  *(_BYTE *)(v6 + 3408) = 2;
  *(_QWORD *)(v6 + 3424) = 8;
  *(_BYTE *)(v6 + 3432) = 2;
  *(_QWORD *)(v6 + 1288) = 6;
  *(_QWORD *)(v6 + 1744) = 14;
  *(_QWORD *)(v6 + 3352) = 18;
  *(_BYTE *)(v6 + 3360) = 2;
  *(_QWORD *)(v6 + 3376) = 4;
  *(_BYTE *)(v6 + 3384) = 2;
  *(_QWORD *)(v6 + 2080) = 14;
  *(_BYTE *)(v6 + 3216) = 2;
  *(_QWORD *)(v6 + 3304) = 22;
  *(_BYTE *)(v6 + 3312) = 2;
  *(_QWORD *)(v6 + 3328) = 8;
  *(_BYTE *)(v6 + 3336) = 2;
  *(_QWORD *)(v6 + 3232) = 19;
  *(_BYTE *)(v6 + 3240) = 2;
  *(_QWORD *)(v6 + 3256) = 8;
  *(_BYTE *)(v6 + 3264) = 2;
  *(_QWORD *)(v6 + 3280) = 6;
  *(_BYTE *)(v6 + 3288) = 2;
  *(_QWORD *)(v6 + 6688) = 14;
  *(_QWORD *)(v6 + 6704) = "Tai_Xuan_Jing_Symbols";
  *(_QWORD *)(v6 + 6728) = "Counting_Rod_Numerals";
  *(_QWORD *)(v6 + 6752) = "Mathematical_Alphanumeric_Symbols";
  *(_QWORD *)(v6 + 5992) = 33;
  *(_QWORD *)(v6 + 6760) = 33;
  *(_QWORD *)(v6 + 6776) = "Sutton_SignWriting";
  *(_QWORD *)(v6 + 6800) = "Latin_Extended_G";
  *(_QWORD *)(v6 + 3160) = 25;
  *(_BYTE *)(v6 + 3168) = 2;
  *(_QWORD *)(v6 + 3184) = 8;
  *(_BYTE *)(v6 + 3192) = 2;
  *(_QWORD *)(v6 + 1504) = 6;
  *(_QWORD *)(v6 + 1624) = 16;
  *(_QWORD *)(v6 + 3112) = 16;
  *(_BYTE *)(v6 + 3120) = 2;
  *(_QWORD *)(v6 + 3136) = 12;
  *(_BYTE *)(v6 + 3144) = 2;
  *(_QWORD *)(v6 + 1816) = 16;
  *(_QWORD *)(v6 + 1912) = 6;
  *(_QWORD *)(v6 + 3064) = 5;
  *(_BYTE *)(v6 + 3072) = 2;
  *(_QWORD *)(v6 + 3088) = 21;
  *(_BYTE *)(v6 + 3096) = 2;
  *(_QWORD *)(v6 + 1936) = 22;
  *(_QWORD *)(v6 + 1984) = 16;
  *(_QWORD *)(v6 + 2032) = 22;
  *(_BYTE *)(v6 + 3024) = 2;
  *(_QWORD *)(v6 + 3040) = 19;
  *(_BYTE *)(v6 + 3048) = 2;
  *(_QWORD *)(v6 + 2104) = 16;
  *(_QWORD *)(v6 + 2224) = 16;
  *(_QWORD *)(v6 + 2368) = 16;
  *(_BYTE *)(v6 + 2976) = 2;
  *(_QWORD *)(v6 + 2992) = 4;
  *(_BYTE *)(v6 + 3000) = 2;
  *(_BYTE *)(v6 + 2904) = 2;
  *(_QWORD *)(v6 + 2920) = 22;
  *(_BYTE *)(v6 + 2928) = 2;
  *(_QWORD *)(v6 + 2944) = 12;
  *(_BYTE *)(v6 + 2952) = 2;
  *(_QWORD *)(v6 + 5704) = 16;
  *(_QWORD *)(v6 + 5944) = 16;
  *(_QWORD *)(v6 + 6136) = 16;
  *(_QWORD *)(v6 + 6808) = 16;
  *(_QWORD *)(v6 + 6824) = "Glagolitic_Supplement";
  *(_QWORD *)(v6 + 6848) = "Nyiakeng_Puachue_Hmong";
  *(_BYTE *)(v6 + 2808) = 2;
  *(_BYTE *)(v6 + 2880) = 2;
  *(_BYTE *)(v6 + 2856) = 2;
  *(_QWORD *)(v6 + 2872) = 34;
  *(_QWORD *)(v6 + 6856) = 22;
  *(_QWORD *)(v6 + 6872) = "Toto";
  *(_QWORD *)(v6 + 6896) = "Wancho";
  *(_QWORD *)(v6 + 2824) = 31;
  *(_BYTE *)(v6 + 2832) = 2;
  *(_QWORD *)(v6 + 2392) = 6;
  *(_BYTE *)(v6 + 2712) = 2;
  *(_QWORD *)(v6 + 2728) = 6;
  *(_BYTE *)(v6 + 2736) = 2;
  *(_BYTE *)(v6 + 2784) = 2;
  *(_QWORD *)(v6 + 2800) = 28;
  *(_BYTE *)(v6 + 2760) = 2;
  *(_QWORD *)(v6 + 6184) = 6;
  *(_QWORD *)(v6 + 6328) = 6;
  *(_QWORD *)(v6 + 6904) = 6;
  *(_QWORD *)(v6 + 6920) = "Ethiopic_Extended_B";
  *(_QWORD *)(v6 + 6944) = "Mende_Kikakui";
  *(_QWORD *)(v6 + 6968) = "Adlam";
  *(_QWORD *)(v6 + 664) = 5;
  *(_BYTE *)(v6 + 2664) = 2;
  *(_QWORD *)(v6 + 2680) = 8;
  *(_BYTE *)(v6 + 2688) = 2;
  *(_QWORD *)(v6 + 2704) = 25;
  *(_QWORD *)(v6 + 688) = 5;
  *(_QWORD *)(v6 + 1048) = 5;
  *(_BYTE *)(v6 + 2616) = 2;
  *(_QWORD *)(v6 + 2632) = 8;
  *(_BYTE *)(v6 + 2640) = 2;
  *(_QWORD *)(v6 + 2656) = 8;
  *(_QWORD *)(v6 + 1072) = 5;
  *(_QWORD *)(v6 + 1144) = 5;
  *(_QWORD *)(v6 + 1192) = 5;
  *(_BYTE *)(v6 + 2568) = 2;
  *(_QWORD *)(v6 + 2584) = 34;
  *(_BYTE *)(v6 + 2592) = 2;
  *(_QWORD *)(v6 + 1264) = 5;
  *(_QWORD *)(v6 + 1480) = 5;
  *(_BYTE *)(v6 + 2520) = 2;
  *(_BYTE *)(v6 + 2544) = 2;
  *(_QWORD *)(v6 + 6520) = 5;
  *(_QWORD *)(v6 + 6976) = 5;
  *(_QWORD *)(v6 + 6992) = "Indic_Siyaq_Numbers";
  *(_QWORD *)(v6 + 7016) = "Ottoman_Siyaq_Numbers";
  *(_QWORD *)(v6 + 7040) = "Arabic_Mathematical_Alphabetic_Symbols";
  *(_QWORD *)(v6 + 2488) = 19;
  *(_BYTE *)(v6 + 2496) = 2;
  *(_QWORD *)(v6 + 1696) = 38;
  *(_BYTE *)(v6 + 2424) = 2;
  *(_QWORD *)(v6 + 2440) = 8;
  *(_BYTE *)(v6 + 2448) = 2;
  *(_BYTE *)(v6 + 2472) = 2;
  *(_QWORD *)(v6 + 7048) = 38;
  *(_QWORD *)(v6 + 7064) = "Mahjong_Tiles";
  *(_QWORD *)(v6 + 7088) = "Domino_Tiles";
  *(_QWORD *)(v6 + 1024) = 37;
  *(_QWORD *)(v6 + 1888) = 12;
  *(_BYTE *)(v6 + 2352) = 2;
  *(_BYTE *)(v6 + 2400) = 2;
  *(_QWORD *)(v6 + 2416) = 19;
  *(_BYTE *)(v6 + 2376) = 2;
  *(_QWORD *)(v6 + 6040) = 12;
  *(_QWORD *)(v6 + 6232) = 12;
  *(_QWORD *)(v6 + 7096) = 12;
  *(_QWORD *)(v6 + 7112) = "Playing_Cards";
  *(_QWORD *)(v6 + 7136) = "Enclosed_Alphanumeric_Supplement";
  *(_BYTE *)(v6 + 2304) = 2;
  *(_QWORD *)(v6 + 7160) = "Enclosed_Ideographic_Supplement";
  *(_QWORD *)(v6 + 2320) = 32;
  *(_BYTE *)(v6 + 2328) = 2;
  *(_QWORD *)(v6 + 7168) = 31;
  *(_QWORD *)(v6 + 7184) = "Miscellaneous_Symbols_and_Pictographs";
  *(_QWORD *)(v6 + 2248) = 21;
  *(_BYTE *)(v6 + 2280) = 2;
  *(_BYTE *)(v6 + 2256) = 2;
  *(_QWORD *)(v6 + 2272) = 36;
  *(_QWORD *)(v6 + 7192) = 37;
  *(_QWORD *)(v6 + 7208) = "Emoticons";
  *(_QWORD *)(v6 + 440) = "Samaritan";
  *(_QWORD *)(v6 + 448) = 9;
  *(_QWORD *)(v6 + 2200) = 21;
  *(_BYTE *)(v6 + 2208) = 2;
  *(_BYTE *)(v6 + 2232) = 2;
  *(_QWORD *)(v6 + 760) = 9;
  *(_QWORD *)(v6 + 2152) = 8;
  *(_BYTE *)(v6 + 2160) = 2;
  *(_QWORD *)(v6 + 2176) = 36;
  *(_BYTE *)(v6 + 2184) = 2;
  *(_QWORD *)(v6 + 1216) = 9;
  *(_QWORD *)(v6 + 1456) = 9;
  *(_BYTE *)(v6 + 2088) = 2;
  *(_BYTE *)(v6 + 2112) = 2;
  *(_QWORD *)(v6 + 2128) = 21;
  *(_BYTE *)(v6 + 2136) = 2;
  *(_QWORD *)(v6 + 5800) = 9;
  *(_QWORD *)(v6 + 5968) = 9;
  *(_QWORD *)(v6 + 6208) = 9;
  *(_QWORD *)(v6 + 7216) = 9;
  *(_QWORD *)(v6 + 7232) = "Ornamental_Dingbats";
  *(_QWORD *)(v6 + 248) = "Cyrillic_Supplement";
  *(_QWORD *)(v6 + 256) = 19;
  *(_BYTE *)(v6 + 2040) = 2;
  *(_BYTE *)(v6 + 2064) = 2;
  *(_QWORD *)(v6 + 976) = 19;
  *(_QWORD *)(v6 + 1552) = 19;
  *(_QWORD *)(v6 + 1648) = 19;
  *(_BYTE *)(v6 + 1992) = 2;
  *(_BYTE *)(v6 + 2016) = 2;
  *(_QWORD *)(v6 + 1768) = 19;
  *(_BYTE *)(v6 + 1944) = 2;
  *(_BYTE *)(v6 + 1968) = 2;
  *(_QWORD *)(v6 + 6376) = 19;
  *(_QWORD *)(v6 + 6928) = 19;
  *(_QWORD *)(v6 + 7000) = 19;
  *(_QWORD *)(v6 + 7240) = 19;
  *(_QWORD *)(v6 + 7256) = "Transport_and_Map_Symbols";
  *(_QWORD *)(v6 + 7280) = "Alchemical_Symbols";
  *(_QWORD *)(v6 + 56) = "Latin_1_Supplement";
  *(_QWORD *)(v6 + 64) = 18;
  *(_BYTE *)(v6 + 1896) = 2;
  *(_BYTE *)(v6 + 1920) = 2;
  *(_BYTE *)(v6 + 1824) = 2;
  *(_QWORD *)(v6 + 1864) = 18;
  *(_BYTE *)(v6 + 1872) = 2;
  *(_QWORD *)(v6 + 6784) = 18;
  *(_QWORD *)(v6 + 7288) = 18;
  *(_QWORD *)(v6 + 7304) = "Geometric_Shapes_Extended";
  *(_QWORD *)(v6 + 1840) = 39;
  *(_BYTE *)(v6 + 1848) = 2;
  *(_QWORD *)(v6 + 1408) = 36;
  *(_QWORD *)(v6 + 1720) = 25;
  *(_BYTE *)(v6 + 1752) = 2;
  *(_BYTE *)(v6 + 1776) = 2;
  *(_BYTE *)(v6 + 1800) = 2;
  *(_QWORD *)(v6 + 6568) = 25;
  *(_QWORD *)(v6 + 6592) = 25;
  *(_QWORD *)(v6 + 6616) = 25;
  *(_QWORD *)(v6 + 7264) = 25;
  *(_QWORD *)(v6 + 7312) = 25;
  *(_BYTE *)(v6 + 1656) = 2;
  *(_QWORD *)(v6 + 7328) = "Supplemental_Arrows_C";
  *(_QWORD *)(v6 + 1672) = 30;
  *(_BYTE *)(v6 + 1704) = 2;
  *(_BYTE *)(v6 + 1728) = 2;
  *(_BYTE *)(v6 + 1680) = 2;
  *(_QWORD *)(v6 + 6112) = 21;
  *(_QWORD *)(v6 + 6712) = 21;
  *(_QWORD *)(v6 + 6736) = 21;
  *(_QWORD *)(v6 + 6832) = 21;
  *(_QWORD *)(v6 + 7024) = 21;
  *(_QWORD *)(v6 + 7336) = 21;
  *(_QWORD *)(v6 + 7352) = "Supplemental_Symbols_and_Pictographs";
  *(_QWORD *)(v6 + 7360) = 36;
  *(_QWORD *)(v6 + 7376) = "Chess_Symbols";
  *(_QWORD *)(v6 + 1336) = 13;
  *(_QWORD *)(v6 + 1528) = 8;
  *(_BYTE *)(v6 + 1608) = 2;
  *(_BYTE *)(v6 + 1632) = 2;
  *(_BYTE *)(v6 + 1536) = 2;
  *(_BYTE *)(v6 + 1560) = 2;
  *(_BYTE *)(v6 + 1584) = 2;
  *(_QWORD *)(v6 + 5848) = 13;
  *(_QWORD *)(v6 + 5872) = 13;
  *(_QWORD *)(v6 + 6952) = 13;
  *(_QWORD *)(v6 + 7072) = 13;
  *(_QWORD *)(v6 + 7120) = 13;
  *(_QWORD *)(v6 + 7384) = 13;
  *(_QWORD *)(v6 + 7400) = "Symbols_and_Pictographs_Extended_A";
  *(_QWORD *)(v6 + 7424) = "Symbols_for_Legacy_Computing";
  *(_BYTE *)(v6 + 1488) = 2;
  *(_BYTE *)(v6 + 1512) = 2;
  *(_QWORD *)(v6 + 7432) = 28;
  *(_QWORD *)(v6 + 7448) = "CJK_Unified_Ideographs_Extension_B";
  *(_QWORD *)(v6 + 7472) = "CJK_Unified_Ideographs_Extension_C";
  *(_QWORD *)(v6 + 7496) = "CJK_Unified_Ideographs_Extension_D";
  *(_BYTE *)(v6 + 1464) = 2;
  *(_QWORD *)(v6 + 224) = "Cyrillic";
  *(_QWORD *)(v6 + 232) = 8;
  *(_BYTE *)(v6 + 48) = 2;
  *(_BYTE *)(v6 + 72) = 2;
  *(_BYTE *)(v6 + 1416) = 2;
  *(_QWORD *)(v6 + 1432) = 8;
  *(_BYTE *)(v6 + 1440) = 2;
  *(_BYTE *)(v6 + 96) = 2;
  *(_BYTE *)(v6 + 120) = 2;
  *(_QWORD *)(v6 + 1360) = 8;
  *(_BYTE *)(v6 + 1368) = 2;
  *(_QWORD *)(v6 + 1384) = 8;
  *(_BYTE *)(v6 + 1392) = 2;
  *(_BYTE *)(v6 + 144) = 2;
  *(_BYTE *)(v6 + 168) = 2;
  *(_BYTE *)(v6 + 192) = 2;
  *(_BYTE *)(v6 + 216) = 2;
  *(_BYTE *)(v6 + 1320) = 2;
  *(_BYTE *)(v6 + 1344) = 2;
  *(_BYTE *)(v6 + 240) = 2;
  *(_BYTE *)(v6 + 264) = 2;
  *(_QWORD *)(v6 + 280) = 8;
  *(_BYTE *)(v6 + 1272) = 2;
  *(_BYTE *)(v6 + 1296) = 2;
  *(_BYTE *)(v6 + 288) = 2;
  *(_BYTE *)(v6 + 312) = 2;
  *(_BYTE *)(v6 + 336) = 2;
  *(_BYTE *)(v6 + 360) = 2;
  *(_BYTE *)(v6 + 1224) = 2;
  *(_BYTE *)(v6 + 1248) = 2;
  *(_BYTE *)(v6 + 384) = 2;
  *(_BYTE *)(v6 + 408) = 2;
  *(_BYTE *)(v6 + 432) = 2;
  *(_QWORD *)(v6 + 1168) = 8;
  *(_BYTE *)(v6 + 1176) = 2;
  *(_BYTE *)(v6 + 1200) = 2;
  *(_BYTE *)(v6 + 456) = 2;
  *(_BYTE *)(v6 + 480) = 2;
  *(_BYTE *)(v6 + 504) = 2;
  *(_BYTE *)(v6 + 528) = 2;
  *(_BYTE *)(v6 + 1128) = 2;
  *(_BYTE *)(v6 + 1152) = 2;
  *(_BYTE *)(v6 + 552) = 2;
  *(_BYTE *)(v6 + 576) = 2;
  *(_BYTE *)(v6 + 600) = 2;
  *(_QWORD *)(v6 + 616) = 8;
  *(_BYTE *)(v6 + 1080) = 2;
  *(_BYTE *)(v6 + 1104) = 2;
  *(_BYTE *)(v6 + 624) = 2;
  *(_QWORD *)(v6 + 640) = 8;
  *(_BYTE *)(v6 + 648) = 2;
  *(_BYTE *)(v6 + 672) = 2;
  *(_BYTE *)(v6 + 1032) = 2;
  *(_BYTE *)(v6 + 1056) = 2;
  *(_BYTE *)(v6 + 696) = 2;
  *(_BYTE *)(v6 + 720) = 2;
  *(_BYTE *)(v6 + 744) = 2;
  *(_BYTE *)(v6 + 984) = 2;
  *(_QWORD *)(v6 + 1000) = 8;
  *(_BYTE *)(v6 + 1008) = 2;
  *(_BYTE *)(v6 + 768) = 2;
  *(_BYTE *)(v6 + 792) = 2;
  *(_QWORD *)(v6 + 808) = 4;
  *(_BYTE *)(v6 + 936) = 2;
  *(_QWORD *)(v6 + 952) = 8;
  *(_BYTE *)(v6 + 960) = 2;
  *(_BYTE *)(v6 + 816) = 2;
  *(_BYTE *)(v6 + 840) = 2;
  *(_BYTE *)(v6 + 864) = 2;
  *(_BYTE *)(v6 + 888) = 2;
  *(_QWORD *)(v6 + 904) = 8;
  *(_BYTE *)(v6 + 912) = 2;
  *(_BYTE *)(v6 + 5688) = 2;
  *(_BYTE *)(v6 + 5712) = 2;
  *(_BYTE *)(v6 + 5736) = 2;
  *(_BYTE *)(v6 + 5760) = 2;
  *(_BYTE *)(v6 + 5784) = 2;
  *(_BYTE *)(v6 + 5808) = 2;
  *(_BYTE *)(v6 + 5832) = 2;
  *(_BYTE *)(v6 + 5856) = 2;
  *(_BYTE *)(v6 + 5880) = 2;
  *(_BYTE *)(v6 + 5904) = 2;
  *(_BYTE *)(v6 + 5928) = 2;
  *(_BYTE *)(v6 + 5952) = 2;
  *(_BYTE *)(v6 + 5976) = 2;
  *(_BYTE *)(v6 + 6000) = 2;
  *(_BYTE *)(v6 + 6024) = 2;
  *(_BYTE *)(v6 + 6048) = 2;
  *(_BYTE *)(v6 + 6072) = 2;
  *(_BYTE *)(v6 + 6096) = 2;
  *(_BYTE *)(v6 + 6120) = 2;
  *(_BYTE *)(v6 + 6144) = 2;
  *(_BYTE *)(v6 + 6168) = 2;
  *(_BYTE *)(v6 + 6192) = 2;
  *(_BYTE *)(v6 + 6216) = 2;
  *(_BYTE *)(v6 + 6240) = 2;
  *(_BYTE *)(v6 + 6264) = 2;
  *(_BYTE *)(v6 + 6288) = 2;
  *(_BYTE *)(v6 + 6312) = 2;
  *(_BYTE *)(v6 + 6336) = 2;
  *(_BYTE *)(v6 + 6360) = 2;
  *(_BYTE *)(v6 + 6384) = 2;
  *(_BYTE *)(v6 + 6408) = 2;
  *(_BYTE *)(v6 + 6432) = 2;
  *(_BYTE *)(v6 + 6456) = 2;
  *(_BYTE *)(v6 + 6480) = 2;
  *(_BYTE *)(v6 + 6504) = 2;
  *(_BYTE *)(v6 + 6528) = 2;
  *(_BYTE *)(v6 + 6552) = 2;
  *(_BYTE *)(v6 + 6576) = 2;
  *(_BYTE *)(v6 + 6600) = 2;
  *(_BYTE *)(v6 + 6624) = 2;
  *(_BYTE *)(v6 + 6648) = 2;
  *(_BYTE *)(v6 + 6672) = 2;
  *(_BYTE *)(v6 + 6696) = 2;
  *(_BYTE *)(v6 + 6720) = 2;
  *(_BYTE *)(v6 + 6744) = 2;
  *(_BYTE *)(v6 + 6768) = 2;
  *(_BYTE *)(v6 + 6792) = 2;
  *(_BYTE *)(v6 + 6816) = 2;
  *(_BYTE *)(v6 + 6840) = 2;
  *(_BYTE *)(v6 + 6864) = 2;
  *(_BYTE *)(v6 + 6888) = 2;
  *(_BYTE *)(v6 + 6912) = 2;
  *(_BYTE *)(v6 + 6936) = 2;
  *(_BYTE *)(v6 + 6960) = 2;
  *(_BYTE *)(v6 + 6984) = 2;
  *(_BYTE *)(v6 + 7008) = 2;
  *(_BYTE *)(v6 + 7032) = 2;
  *(_BYTE *)(v6 + 7056) = 2;
  *(_BYTE *)(v6 + 7080) = 2;
  *(_BYTE *)(v6 + 7104) = 2;
  *(_BYTE *)(v6 + 7128) = 2;
  *(_BYTE *)(v6 + 7152) = 2;
  *(_BYTE *)(v6 + 7176) = 2;
  *(_BYTE *)(v6 + 7200) = 2;
  *(_BYTE *)(v6 + 7224) = 2;
  *(_BYTE *)(v6 + 7248) = 2;
  *(_BYTE *)(v6 + 7272) = 2;
  *(_BYTE *)(v6 + 7296) = 2;
  *(_BYTE *)(v6 + 7320) = 2;
  *(_BYTE *)(v6 + 7344) = 2;
  *(_BYTE *)(v6 + 7368) = 2;
  *(_BYTE *)(v6 + 7392) = 2;
  *(_BYTE *)(v6 + 7416) = 2;
  *(_BYTE *)(v6 + 7440) = 2;
  *(_BYTE *)(v6 + 7464) = 2;
  *(_BYTE *)(v6 + 7488) = 2;
  *(_BYTE *)(v6 + 7512) = 2;
  *(_BYTE *)(v6 + 7536) = 2;
  *(_BYTE *)(v6 + 7560) = 2;
  *(_BYTE *)(v6 + 7584) = 2;
  *(_BYTE *)(v6 + 7608) = 2;
  *(_BYTE *)(v6 + 7632) = 2;
  *(_BYTE *)(v6 + 7656) = 2;
  *(_BYTE *)(v6 + 7680) = 2;
  *(_BYTE *)(v6 + 7704) = 2;
  *(_BYTE *)(v6 + 7728) = 2;
  *(_QWORD *)(v6 + 7520) = "CJK_Unified_Ideographs_Extension_E";
  *(_QWORD *)(v6 + 7544) = "CJK_Unified_Ideographs_Extension_F";
  *(_QWORD *)(v6 + 7568) = "CJK_Compatibility_Ideographs_Supplement";
  *(_QWORD *)(v6 + 7576) = 39;
  *(_QWORD *)(v6 + 7592) = "CJK_Unified_Ideographs_Extension_G";
  *(_QWORD *)(v6 + 7408) = 34;
  *(_QWORD *)(v6 + 7456) = 34;
  *(_QWORD *)(v6 + 7480) = 34;
  *(_QWORD *)(v6 + 7504) = 34;
  *(_QWORD *)(v6 + 7528) = 34;
  *(_QWORD *)(v6 + 7552) = 34;
  *(_QWORD *)(v6 + 7600) = 34;
  *(_QWORD *)(v6 + 7616) = "Tags";
  *(_QWORD *)(v6 + 6280) = 4;
  *(_QWORD *)(v6 + 6880) = 4;
  *(_QWORD *)(v6 + 7624) = 4;
  *(_QWORD *)(v6 + 7640) = "Variation_Selectors_Supplement";
  *(_QWORD *)(v6 + 6664) = 30;
  *(_QWORD *)(v6 + 7648) = 30;
  *(_QWORD *)(v6 + 7664) = "Supplementary_Private_Use_Area_A";
  *(_QWORD *)(v6 + 7688) = "Supplementary_Private_Use_Area_B";
  *(_OWORD *)(v6 + 16) = xmmword_1DF0040A0;
  *(_QWORD *)(v6 + 7144) = 32;
  *(_QWORD *)(v6 + 7672) = 32;
  *(_QWORD *)(v6 + 7696) = 32;
  *(_QWORD *)(v6 + 7712) = "No_Block";
  *(_QWORD *)(v6 + 6544) = 8;
  *(_QWORD *)(v6 + 7720) = 8;
  v7._countAndFlagsBits = a1;
  v7._object = a2;
  v8 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v6, v7);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (v8 >= 0x80 && v8 - 128 >= 0x40 && v8 - 192 >= 0x40)
  {
    v11 = v8 - 256;
    v10 = 303;
    LOWORD(v8) = 256;
    switch(v11)
    {
      case 0uLL:
        goto LABEL_4;
      case 1uLL:
        LOWORD(v8) = 257;
        goto LABEL_4;
      case 2uLL:
        LOWORD(v8) = 258;
        goto LABEL_4;
      case 3uLL:
        LOWORD(v8) = 259;
        goto LABEL_4;
      case 4uLL:
        LOWORD(v8) = 260;
        goto LABEL_4;
      case 5uLL:
        LOWORD(v8) = 261;
        goto LABEL_4;
      case 6uLL:
        LOWORD(v8) = 262;
        goto LABEL_4;
      case 7uLL:
        LOWORD(v8) = 263;
        goto LABEL_4;
      case 8uLL:
        LOWORD(v8) = 264;
        goto LABEL_4;
      case 9uLL:
        LOWORD(v8) = 265;
        goto LABEL_4;
      case 0xAuLL:
        LOWORD(v8) = 266;
        goto LABEL_4;
      case 0xBuLL:
        LOWORD(v8) = 267;
        goto LABEL_4;
      case 0xCuLL:
        LOWORD(v8) = 268;
        goto LABEL_4;
      case 0xDuLL:
        LOWORD(v8) = 269;
        goto LABEL_4;
      case 0xEuLL:
        LOWORD(v8) = 270;
        goto LABEL_4;
      case 0xFuLL:
        LOWORD(v8) = 271;
        goto LABEL_4;
      case 0x10uLL:
        LOWORD(v8) = 272;
        goto LABEL_4;
      case 0x11uLL:
        LOWORD(v8) = 273;
        goto LABEL_4;
      case 0x12uLL:
        LOWORD(v8) = 274;
        goto LABEL_4;
      case 0x13uLL:
        LOWORD(v8) = 275;
        goto LABEL_4;
      case 0x14uLL:
        LOWORD(v8) = 276;
        goto LABEL_4;
      case 0x15uLL:
        LOWORD(v8) = 277;
        goto LABEL_4;
      case 0x16uLL:
        LOWORD(v8) = 278;
        goto LABEL_4;
      case 0x17uLL:
        LOWORD(v8) = 279;
        goto LABEL_4;
      case 0x18uLL:
        LOWORD(v8) = 280;
        goto LABEL_4;
      case 0x19uLL:
        LOWORD(v8) = 281;
        goto LABEL_4;
      case 0x1AuLL:
        LOWORD(v8) = 282;
        goto LABEL_4;
      case 0x1BuLL:
        LOWORD(v8) = 283;
        goto LABEL_4;
      case 0x1CuLL:
        LOWORD(v8) = 284;
        goto LABEL_4;
      case 0x1DuLL:
        LOWORD(v8) = 285;
        goto LABEL_4;
      case 0x1EuLL:
        LOWORD(v8) = 286;
        goto LABEL_4;
      case 0x1FuLL:
        LOWORD(v8) = 287;
        goto LABEL_4;
      case 0x20uLL:
        LOWORD(v8) = 288;
        goto LABEL_4;
      case 0x21uLL:
        LOWORD(v8) = 289;
        goto LABEL_4;
      case 0x22uLL:
        LOWORD(v8) = 290;
        goto LABEL_4;
      case 0x23uLL:
        LOWORD(v8) = 291;
        goto LABEL_4;
      case 0x24uLL:
        LOWORD(v8) = 292;
        goto LABEL_4;
      case 0x25uLL:
        LOWORD(v8) = 293;
        goto LABEL_4;
      case 0x26uLL:
        LOWORD(v8) = 294;
        goto LABEL_4;
      case 0x27uLL:
        LOWORD(v8) = 295;
        goto LABEL_4;
      case 0x28uLL:
        LOWORD(v8) = 296;
        goto LABEL_4;
      case 0x29uLL:
        LOWORD(v8) = 297;
        goto LABEL_4;
      case 0x2AuLL:
        LOWORD(v8) = 298;
        goto LABEL_4;
      case 0x2BuLL:
        LOWORD(v8) = 299;
        goto LABEL_4;
      case 0x2CuLL:
        LOWORD(v8) = 300;
        goto LABEL_4;
      case 0x2DuLL:
        LOWORD(v8) = 301;
        goto LABEL_4;
      case 0x2EuLL:
        LOWORD(v8) = 302;
        goto LABEL_4;
      case 0x2FuLL:
        break;
      case 0x30uLL:
        v10 = 304;
        break;
      case 0x31uLL:
        v10 = 305;
        break;
      case 0x32uLL:
        v10 = 306;
        break;
      case 0x33uLL:
        v10 = 307;
        break;
      case 0x34uLL:
        v10 = 308;
        break;
      case 0x35uLL:
        v10 = 309;
        break;
      case 0x36uLL:
        v10 = 310;
        break;
      case 0x37uLL:
        v10 = 311;
        break;
      case 0x38uLL:
        v10 = 312;
        break;
      case 0x39uLL:
        v10 = 313;
        break;
      case 0x3AuLL:
        v10 = 314;
        break;
      case 0x3BuLL:
        v10 = 315;
        break;
      case 0x3CuLL:
        v10 = 316;
        break;
      case 0x3DuLL:
        v10 = 317;
        break;
      case 0x3EuLL:
        v10 = 318;
        break;
      case 0x3FuLL:
        v10 = 319;
        break;
      default:
        v10 = 321;
        break;
    }
  }
  else
  {
LABEL_4:
    v10 = v8;
  }
  *a3 = v10;
  return result;
}

void *static Unicode.Block.allCases.getter()
{
  return &outlined read-only object #0 of static Unicode.Block.allCases.getter;
}

uint64_t Unicode.Block.rawValue.getter()
{
  unsigned __int16 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1DEFD8460 + 4 * word_1DEFFDEA8[*v0]))(0xD000000000000012, 0x80000001DF0051D0);
}

uint64_t sub_1DEFD8460()
{
  return 0x614C5F6369736142;
}

unint64_t sub_1DEFD8484()
{
  return 0xD000000000000010;
}

uint64_t sub_1DEFD9B9C@<X0>(uint64_t a1@<X8>)
{
  return a1 + 5;
}

uint64_t sub_1DEFD9BAC@<X0>(uint64_t a1@<X8>)
{
  return a1 + 6;
}

uint64_t sub_1DEFD9BBC()
{
  return 1869901652;
}

uint64_t sub_1DEFD9BCC()
{
  return 0x6F68636E6157;
}

uint64_t sub_1DEFD9BE0@<X0>(uint64_t a1@<X8>)
{
  return a1 + 3;
}

uint64_t sub_1DEFD9BF0()
{
  return 0x694B5F65646E654DLL;
}

uint64_t sub_1DEFD9C14()
{
  return 0x6D616C6441;
}

uint64_t sub_1DEFD9C28@<X0>(uint64_t a1@<X8>)
{
  return a1 + 3;
}

uint64_t sub_1DEFD9C38@<X0>(uint64_t a1@<X8>)
{
  return a1 + 5;
}

uint64_t sub_1DEFD9C48@<X0>(uint64_t a1@<X8>)
{
  return a1 + 22;
}

uint64_t sub_1DEFD9C58()
{
  return 0x5F676E6F6A68614DLL;
}

uint64_t sub_1DEFD9C7C()
{
  return 0x545F6F6E696D6F44;
}

uint64_t sub_1DEFD9CA0()
{
  return 0x5F676E6979616C50;
}

uint64_t sub_1DEFD9CC4@<X0>(uint64_t a1@<X8>)
{
  return a1 + 16;
}

uint64_t sub_1DEFD9CD4@<X0>(uint64_t a1@<X8>)
{
  return a1 + 15;
}

uint64_t sub_1DEFD9CE4@<X0>(uint64_t a1@<X8>)
{
  return a1 + 21;
}

uint64_t sub_1DEFD9CF4()
{
  return 0x6E6F6369746F6D45;
}

uint64_t sub_1DEFD9D14@<X0>(uint64_t a1@<X8>)
{
  return a1 + 3;
}

uint64_t sub_1DEFD9D24@<X0>(uint64_t a1@<X8>)
{
  return a1 + 9;
}

uint64_t sub_1DEFD9D34@<X0>(uint64_t a1@<X8>)
{
  return a1 + 2;
}

uint64_t sub_1DEFD9D44@<X0>(uint64_t a1@<X8>)
{
  return a1 + 9;
}

uint64_t sub_1DEFD9D54@<X0>(uint64_t a1@<X8>)
{
  return a1 + 5;
}

uint64_t sub_1DEFD9D64@<X0>(uint64_t a1@<X8>)
{
  return a1 + 20;
}

uint64_t sub_1DEFD9D74()
{
  return 0x79535F7373656843;
}

uint64_t sub_1DEFD9D98@<X0>(uint64_t a1@<X8>)
{
  return a1 + 18;
}

uint64_t sub_1DEFD9DA8@<X0>(uint64_t a1@<X8>)
{
  return a1 + 12;
}

uint64_t sub_1DEFD9DB8@<X0>(uint64_t a1@<X8>)
{
  return a1 + 18;
}

uint64_t sub_1DEFD9DC8@<X0>(uint64_t a1@<X8>)
{
  return a1 + 18;
}

uint64_t sub_1DEFD9DD8@<X0>(uint64_t a1@<X8>)
{
  return a1 + 18;
}

uint64_t sub_1DEFD9DE8@<X0>(uint64_t a1@<X8>)
{
  return a1 + 18;
}

uint64_t sub_1DEFD9DF8@<X0>(uint64_t a1@<X8>)
{
  return a1 + 18;
}

uint64_t sub_1DEFD9E08@<X0>(uint64_t a1@<X8>)
{
  return a1 + 23;
}

uint64_t sub_1DEFD9E18@<X0>(uint64_t a1@<X8>)
{
  return a1 + 18;
}

uint64_t sub_1DEFD9E28()
{
  return 1936154964;
}

uint64_t sub_1DEFD9E38@<X0>(uint64_t a1@<X8>)
{
  return a1 + 14;
}

uint64_t sub_1DEFD9E48@<X0>(uint64_t a1@<X8>)
{
  return a1 + 16;
}

void sub_1DEFD9E58()
{
  JUMPOUT(0x1DEFD9E64);
}

uint64_t sub_1DEFD9E70()
{
  return 0x6B636F6C425F6F4ELL;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Unicode.Block()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = Unicode.Block.rawValue.getter();
  v2 = v1;
  if (v0 == Unicode.Block.rawValue.getter() && v2 == v3)
    v5 = 1;
  else
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Unicode.Block@<X0>(uint64_t a1@<X0>, __int16 *a2@<X8>)
{
  return Unicode.Block.init(rawValue:)(*(_QWORD *)a1, *(void **)(a1 + 8), a2);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Unicode.Block@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = Unicode.Block.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Unicode.Block()
{
  Hasher.init(_seed:)();
  Unicode.Block.rawValue.getter();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Unicode.Block()
{
  Unicode.Block.rawValue.getter();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Unicode.Block()
{
  Hasher.init(_seed:)();
  Unicode.Block.rawValue.getter();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for static CaseIterable.allCases.getter in conformance Unicode.Block(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Unicode.Block.allCases.getter;
}

uint64_t specialized static TypeConstruction.tupleType<A>(of:labels:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t TupleTypeMetadata;
  uint64_t v4;
  uint64_t result;

  if (a3)
    TupleTypeMetadata = specialized String.withCString<A>(_:)(a2, a3);
  else
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  v4 = TupleTypeMetadata;
  swift_bridgeObjectRelease();
  if (v4)
    return v4;
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t static TypeConstruction.tupleType<A>(of:labels:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  dispatch thunk of Collection.count.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (value: Any.Type, state: Int));
  dispatch thunk of Sequence.withContiguousStorageIfAvailable<A>(_:)();
  if (v7)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a1, a4);
    return v7;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

BOOL specialized String.withCString<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  _BYTE *v4;
  BOOL v5;
  BOOL v7;

  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      if (a1 <= 0x20u && ((0x100003E01uLL >> a1) & 1) != 0)
        return 0;
LABEL_9:
      v4 = (_BYTE *)_swift_stdlib_strtod_clocale();
      if (v4)
        return *v4 == 0;
      return 0;
    }
    if ((a1 & 0x1000000000000000) != 0)
    {
      v3 = *(unsigned __int8 *)(a2 + 32);
      if (v3 < 0x21 && ((0x100003E01uLL >> v3) & 1) != 0)
        return 0;
      goto LABEL_9;
    }
  }
  _StringGuts._slowWithCString<A>(_:)();
  if (!v2)
    return v7;
  return v5;
}

uint64_t specialized String.withCString<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  if ((a2 & 0x1000000000000000) == 0 && ((a2 & 0x2000000000000000) != 0 || (a1 & 0x1000000000000000) != 0))
    return swift_getTupleTypeMetadata();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (value: Any.Type, state: Int));
  result = _StringGuts._slowWithCString<A>(_:)();
  if (!v2)
    return v4;
  return result;
}

uint64_t static TypeConstruction.tuple<A>(of:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = (char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any.Type);
  v10 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #1 in static TypeConstruction.tuple<A>(of:), 0, a2, v8, MEMORY[0x1E0DEDCE8], *(_QWORD *)(a3 + 8), MEMORY[0x1E0DEDD18], v9);
  v11 = specialized static TypeConstruction.tupleType<A>(of:labels:)(v10, 0, 0);
  create #1 <A><A1>(_:) in static TypeConstruction.tuple<A>(of:)(a1, a2, v11, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
}

uint64_t create #1 <A><A1>(_:) in static TypeConstruction.tuple<A>(of:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t *v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v20 = a4;
  v7 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v12);
  v14 = (char *)&v20 - v13;
  v15 = static UnsafeMutablePointer.allocate(capacity:)();
  v25 = v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, a2);
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  while (1)
  {
    dispatch thunk of IteratorProtocol.next()();
    if (!v24)
      break;
    outlined init with take of AST.AbsentFunction.Kind(&v23, &v21);
    v16 = v22;
    v17 = __swift_project_boxed_opaque_existential_1Tm(&v21, v22);
    specialized initializeElement #1 <A><A1><A2>(_:) in create #1 <A><A1>(_:) in static TypeConstruction.tuple<A>(of:)((uint64_t)v17, &v25, v16);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v21);
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, AssociatedTypeWitness);
  v18 = v20;
  v20[3] = a3;
  __swift_allocate_boxed_opaque_existential_1Tm(v18);
  UnsafeMutablePointer.move()();
  return MEMORY[0x1DF0F38D0](v15, a3);
}

uint64_t specialized initializeElement #1 <A><A1><A2>(_:) in create #1 <A><A1>(_:) in static TypeConstruction.tuple<A>(of:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  result = MEMORY[0x1E0C80A78](a1, a1);
  v8 = *(unsigned __int8 *)(v5 + 80);
  if (__OFADD__(*a2, v8))
  {
    __break(1u);
  }
  else
  {
    v9 = (*a2 + v8) & ~v8;
    *a2 = v9;
    (*(void (**)(char *))(v5 + 16))((char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
    result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(v9, (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a3);
    *a2 += v6;
  }
  return result;
}

uint64_t closure #1 in static TypeConstruction.tuple<A>(of:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  result = swift_getDynamicType();
  *a2 = result;
  return result;
}

uint64_t static TypeConstruction.arrayType(of:)()
{
  return type metadata accessor for Array();
}

uint64_t static TypeConstruction.optionalType(of:)()
{
  return type metadata accessor for Optional();
}

uint64_t static TypeConstruction.optionalType<A>(of:depth:)(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t result;
  BOOL v4;

  v2 = a2;
  if (a2 <= 4)
    goto LABEL_3;
  while (1)
  {
    type metadata accessor for Optional();
    type metadata accessor for Optional();
    type metadata accessor for Optional();
    result = type metadata accessor for Optional();
    v4 = __OFSUB__(v2, 4);
    v2 -= 4;
    if (v4)
    {
      __break(1u);
      JUMPOUT(0x1DEFDA850);
    }
LABEL_3:
    switch(v2)
    {
      case 0uLL:
        return result;
      case 1uLL:
        return type metadata accessor for Optional();
      case 2uLL:
        goto LABEL_6;
      case 3uLL:
        goto LABEL_5;
      case 4uLL:
        type metadata accessor for Optional();
LABEL_5:
        type metadata accessor for Optional();
LABEL_6:
        type metadata accessor for Optional();
        return type metadata accessor for Optional();
      default:
        continue;
    }
  }
}

uint64_t static MemoryLayout.tupleElementIndex<A>(of:elementTypes:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[3];
  uint64_t v21;

  v20[1] = a2;
  v2 = *a1;
  v3 = type metadata accessor for EnumeratedSequence();
  MEMORY[0x1E0C80A78](v3, v4);
  v5 = type metadata accessor for EnumeratedSequence.Iterator();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v20 - v8;
  v10 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  v11 = v10;
  if ((v12 & 1) != 0 || !v10)
    return v11;
  Sequence.enumerated()();
  EnumeratedSequence.makeIterator()();
  v13 = 0;
  v14 = (_QWORD *)MEMORY[0x1E0DEC5B8];
  while (1)
  {
    result = EnumeratedSequence.Iterator.next()();
    if (!v21 || !*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + *v14) - 8) + 64))
    {
      v11 = 0;
LABEL_15:
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      return v11;
    }
    v16 = *(_QWORD *)(v21 - 8);
    v17 = *(unsigned __int8 *)(v16 + 80);
    if (__OFADD__(v13, v17))
      break;
    v18 = (v13 + v17) & ~v17;
    if (v18 == v11)
    {
      v11 = v20[2];
      goto LABEL_15;
    }
    v19 = *(_QWORD *)(v16 + 64);
    v13 = v18 + v19;
    if (__OFADD__(v18, v19))
    {
      __break(1u);
      return v11;
    }
  }
  __break(1u);
  return result;
}

char *specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

size_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(size_t a1, int64_t a2, char a3)
{
  size_t *v3;
  size_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

char *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Unicode.Scalar>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 29;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8])
      memmove(v13, v14, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 4 * v8);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CaptureStructure>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Node>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

size_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(size_t result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  unint64_t v16;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AST.CustomCharacterClass.Member>);
  v10 = *(_QWORD *)(type metadata accessor for AST.CustomCharacterClass.Member(0) - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_29;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  v15 = *(_QWORD *)(type metadata accessor for AST.CustomCharacterClass.Member(0) - 8);
  if ((v5 & 1) != 0)
  {
    if (v13 < a4
      || (v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(_QWORD *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (size_t)v13;
}

unint64_t _StringGuts.validateScalarIndex(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5)
    goto LABEL_9;
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 <= result >> 16)
  {
    __break(1u);
LABEL_9:
    result = _StringGuts.validateSubscalarIndex(_:)(result, a2, a3);
    if ((result & 1) == 0)
      return result & 0xC | _StringGuts.scalarAlignSlow(_:)(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
  }
  return result;
}

unint64_t _StringGuts.validateSubscalarIndex(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 0xC) == 4 << v5)
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a2, a3);
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 <= result >> 16)
    __break(1u);
  return result;
}

unint64_t _StringGuts.scalarAlignSlow(_:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  _QWORD v13[4];

  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000;
  }
  else
  {
    v5 = result >> 16;
    if ((a3 & 0x1000000000000000) == 0)
    {
      v13[2] = v3;
      v13[3] = v4;
      if ((a3 & 0x2000000000000000) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((_BYTE *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            v7 = v5 - 1;
            v11 = *((_BYTE *)&v12 + v5-- + 7) & 0xC0;
          }
          while (v11 == 128);
          return v7 << 16;
        }
        goto LABEL_14;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (v5 == (a2 & 0xFFFFFFFFFFFFLL))
          goto LABEL_14;
      }
      else
      {
        v12 = result >> 16;
        v6 = _StringObject.sharedUTF8.getter();
        v5 = v12;
        if (v12 == v10)
          goto LABEL_14;
      }
      if ((*(_BYTE *)(v6 + v5) & 0xC0) == 0x80)
      {
        do
        {
          v7 = v5 - 1;
          v8 = *(_BYTE *)(v6 - 1 + v5--) & 0xC0;
        }
        while (v8 == 128);
        return v7 << 16;
      }
LABEL_14:
      v7 = v5;
      return v7 << 16;
    }
    v9 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0)
      v9 = a2 & 0xFFFFFFFFFFFFLL;
    if (v5 != v9)
      return _StringGuts.foreignScalarAlign(_:)();
  }
  return result;
}

uint64_t _StringGuts._slowEnsureMatchingEncoding(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v3 = a1;
  v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v10 = String.UTF16View.index(_:offsetBy:)();
    v11 = v10 + (v4 << 16);
    v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v13 = v12;
    return v13 | 4;
  }
  else
  {
    v5 = MEMORY[0x1DF0F3744](15, a1 >> 16);
    v6 = v5 + (v4 << 16);
    v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v8 = v7;
    return v8 | 8;
  }
}

uint64_t *specialized _copyCollectionToContiguousArray<A>(_:)()
{
  _QWORD *v0;
  int64_t v1;
  uint64_t v2;
  uint64_t *result;
  uint64_t v4;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Unicode.Scalar>);
  v0 = (_QWORD *)swift_allocObject();
  v1 = _swift_stdlib_malloc_size(v0);
  v2 = v1 - 32;
  if (v1 < 32)
    v2 = v1 - 29;
  v0[2] = 1112064;
  v0[3] = 2 * (v2 >> 2);
  result = specialized Sequence._copySequenceContents(initializing:)(&v4, (uint64_t)(v0 + 4), 1112064);
  if (result == (uint64_t *)1112064)
    return v0;
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CaptureList.Capture>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[56 * v8])
      memmove(v12, v13, 56 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Diagnostic>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 80);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[80 * v8])
      memmove(v12, v13, 80 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AST.GlobalMatchingOption>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8])
      memmove(v12, v13, 48 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 48 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Node>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Source.Location>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AST.Atom.Scalar>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8])
      memmove(v12, v13, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 24 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AST.MatchingOption>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8])
      memmove(v12, v13, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 24 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

size_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(size_t result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  unint64_t v16;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AST.CustomCharacterClass.Member>);
  v10 = *(_QWORD *)(type metadata accessor for AST.CustomCharacterClass.Member(0) - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_29;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  v15 = *(_QWORD *)(type metadata accessor for AST.CustomCharacterClass.Member(0) - 8);
  if ((v5 & 1) != 0)
  {
    if (v13 < a4
      || (v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(_QWORD *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return (size_t)v13;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v6 = (char)result;
  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v6 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v9])
      memmove(v14, v15, 32 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<([AST.MatchingOption], Bool)>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[2 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ([AST.MatchingOption], Bool));
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew()(_QWORD *a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

unsigned __int8 *specialized _parseInteger<A, B>(ascii:radix:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v15 = a1;
  v16 = a2;
  v17 = a3;
  v18 = a4;
  lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain();
  v7 = String.init<A>(_:)();
  v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v10 = HIBYTE(v8) & 0xF;
    v15 = v7;
    v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  v7 = static String._copying(_:)();
  v12 = v11;
  swift_bridgeObjectRelease();
  v8 = v12;
  if ((v12 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  v13 = specialized closure #1 in _parseInteger<A, B>(ascii:radix:)(v9, v10, a5);
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t specialized _parseInteger<A, B>(ascii:radix:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;

  v13 = a1;
  v14 = a2;
  swift_bridgeObjectRetain();
  v5 = String.init<A>(_:)();
  v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v8 = HIBYTE(v6) & 0xF;
    v13 = v5;
    v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  v5 = static String._copying(_:)();
  v10 = v9;
  swift_bridgeObjectRelease();
  v6 = v10;
  if ((v10 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  v11 = specialized closure #1 in _parseInteger<A, B>(ascii:radix:)(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11 | ((((unint64_t)v11 >> 32) & 1) << 32);
}

{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int16 v11;
  uint64_t v13;
  uint64_t v14;

  v13 = a1;
  v14 = a2;
  swift_bridgeObjectRetain();
  v5 = String.init<A>(_:)();
  v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v8 = HIBYTE(v6) & 0xF;
    v13 = v5;
    v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  v5 = static String._copying(_:)();
  v10 = v9;
  swift_bridgeObjectRelease();
  v6 = v10;
  if ((v10 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  v11 = (unsigned __int16)specialized closure #1 in _parseInteger<A, B>(ascii:radix:)(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11 & 0x1FF;
}

unsigned __int8 *specialized _parseInteger<A, B>(ascii:radix:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;

  v13 = a1;
  v14 = a2;
  swift_bridgeObjectRetain();
  v5 = String.init<A>(_:)();
  v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v8 = HIBYTE(v6) & 0xF;
    v13 = v5;
    v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  v5 = static String._copying(_:)();
  v10 = v9;
  swift_bridgeObjectRelease();
  v6 = v10;
  if ((v10 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  v11 = specialized closure #1 in _parseInteger<A, B>(ascii:radix:)(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

unsigned __int8 *specialized closure #1 in _parseInteger<A, B>(ascii:radix:)(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  char v11;
  unsigned int v12;
  unsigned __int8 v13;
  unint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  unsigned int v21;
  char v22;
  unint64_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  unint64_t v31;
  unsigned __int8 v32;

  v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      v16 = a2 - 1;
      if (a2 != 1)
      {
        v17 = a3 + 87;
        if (a3 > 10)
        {
          v18 = a3 + 55;
        }
        else
        {
          v17 = 97;
          v18 = 65;
        }
        if (a3 <= 10)
          v19 = a3 + 48;
        else
          v19 = 58;
        if (result)
        {
          v8 = 0;
          v20 = result + 1;
          do
          {
            v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                v12 = 0;
                v13 = 1;
                if (v21 < 0x61 || v21 >= v17)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v22 = -87;
              }
              else
              {
                v22 = -55;
              }
            }
            else
            {
              v22 = -48;
            }
            v23 = v8 * (unint64_t)a3;
            if ((v23 & 0xFFFFFFFF00000000) != 0)
              goto LABEL_72;
            v24 = v21 + v22;
            v8 = v23 + v24;
            if (__CFADD__((_DWORD)v23, v24))
              goto LABEL_72;
            ++v20;
            --v16;
          }
          while (v16);
LABEL_48:
          v13 = 0;
          v12 = v8;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
LABEL_72:
      v12 = 0;
      v13 = 1;
      return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        v25 = a3 + 87;
        if (a3 > 10)
        {
          v26 = a3 + 55;
        }
        else
        {
          v25 = 97;
          v26 = 65;
        }
        if (a3 <= 10)
          v27 = a3 + 48;
        else
          v27 = 58;
        if (result)
        {
          v28 = 0;
          do
          {
            v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                v12 = 0;
                v13 = 1;
                if (v29 < 0x61 || v29 >= v25)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v30 = -87;
              }
              else
              {
                v30 = -55;
              }
            }
            else
            {
              v30 = -48;
            }
            v31 = v28 * (unint64_t)a3;
            if ((v31 & 0xFFFFFFFF00000000) != 0)
              goto LABEL_72;
            v32 = v29 + v30;
            v28 = v31 + v32;
            if (__CFADD__((_DWORD)v31, v32))
              goto LABEL_72;
            ++result;
            --a2;
          }
          while (a2);
          v13 = 0;
          v12 = v28;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      v4 = a2 - 1;
      if (a2 != 1)
      {
        v5 = a3 + 87;
        if (a3 > 10)
        {
          v6 = a3 + 55;
        }
        else
        {
          v5 = 97;
          v6 = 65;
        }
        if (a3 <= 10)
          v7 = a3 + 48;
        else
          v7 = 58;
        if (result)
        {
          v8 = 0;
          v9 = result + 1;
          while (1)
          {
            v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                v12 = 0;
                v13 = 1;
                if (v10 < 0x61 || v10 >= v5)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v11 = -87;
              }
              else
              {
                v11 = -55;
              }
            }
            else
            {
              v11 = -48;
            }
            v14 = v8 * (unint64_t)a3;
            if ((v14 & 0xFFFFFFFF00000000) != 0)
              goto LABEL_72;
            v15 = v10 + v11;
            v8 = v14 - v15;
            if (v14 < v15)
              goto LABEL_72;
            ++v9;
            if (!--v4)
              goto LABEL_48;
          }
        }
LABEL_71:
        v12 = 0;
        v13 = 0;
        return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 *v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  v13 = 0;
                  if (v11 < 0x61 || v11 >= v8)
                    return (unsigned __int8 *)v13;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v14 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v14 - (v11 + v12);
              if (__OFSUB__(v14, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      v23 = a3 + 48;
      v24 = a3 + 55;
      v25 = a3 + 87;
      if (a3 > 10)
      {
        v23 = 58;
      }
      else
      {
        v25 = 97;
        v24 = 65;
      }
      if (result)
      {
        v26 = 0;
        do
        {
          v27 = *result;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              v13 = 0;
              if (v27 < 0x61 || v27 >= v25)
                return (unsigned __int8 *)v13;
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          v29 = v26 * a3;
          if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63)
            return 0;
          v26 = v29 + (v27 + v28);
          if (__OFADD__(v29, (v27 + v28)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v29 + (v27 + v28));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  v15 = a2 - 1;
  if (a2 == 1)
    return 0;
  v16 = a3 + 48;
  v17 = a3 + 55;
  v18 = a3 + 87;
  if (a3 > 10)
  {
    v16 = 58;
  }
  else
  {
    v18 = 97;
    v17 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v19 = result + 1;
  do
  {
    v20 = *v19;
    if (v20 < 0x30 || v20 >= v16)
    {
      if (v20 < 0x41 || v20 >= v17)
      {
        v13 = 0;
        if (v20 < 0x61 || v20 >= v18)
          return (unsigned __int8 *)v13;
        v21 = -87;
      }
      else
      {
        v21 = -55;
      }
    }
    else
    {
      v21 = -48;
    }
    v22 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v22 + (v20 + v21);
    if (__OFADD__(v22, (v20 + v21)))
      return 0;
    ++v19;
    --v15;
  }
  while (v15);
  return (unsigned __int8 *)v9;
}

{
  int v3;
  uint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  char v11;
  unsigned __int8 v12;
  int v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned int v24;
  unsigned int v25;
  char v26;

  v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      v14 = a2 - 1;
      if (a2 != 1)
      {
        v15 = a3 + 87;
        if (a3 > 10)
        {
          v16 = a3 + 55;
        }
        else
        {
          v15 = 97;
          v16 = 65;
        }
        if (a3 <= 10)
          v17 = a3 + 48;
        else
          v17 = 58;
        if (result)
        {
          LOBYTE(v8) = 0;
          v18 = result + 1;
          do
          {
            v19 = *v18;
            if (v19 < 0x30 || v19 >= v17)
            {
              if (v19 < 0x41 || v19 >= v16)
              {
                v12 = 0;
                v13 = 1;
                if (v19 < 0x61 || v19 >= v15)
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                v20 = -87;
              }
              else
              {
                v20 = -55;
              }
            }
            else
            {
              v20 = -48;
            }
            if (((v8 * (unsigned __int16)a3) & 0xFF00) != 0)
              goto LABEL_72;
            v8 = (v8 * a3) + (v19 + v20);
            if (((v8 >> 8) & 1) != 0)
              goto LABEL_72;
            ++v18;
            --v14;
          }
          while (v14);
LABEL_48:
          v13 = 0;
          v12 = v8;
          return (unsigned __int8 *)(v12 | (v13 << 8));
        }
        goto LABEL_71;
      }
LABEL_72:
      v12 = 0;
      v13 = 1;
      return (unsigned __int8 *)(v12 | (v13 << 8));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        v21 = a3 + 87;
        if (a3 > 10)
        {
          v22 = a3 + 55;
        }
        else
        {
          v21 = 97;
          v22 = 65;
        }
        if (a3 <= 10)
          v23 = a3 + 48;
        else
          v23 = 58;
        if (result)
        {
          LOBYTE(v24) = 0;
          do
          {
            v25 = *result;
            if (v25 < 0x30 || v25 >= v23)
            {
              if (v25 < 0x41 || v25 >= v22)
              {
                v12 = 0;
                v13 = 1;
                if (v25 < 0x61 || v25 >= v21)
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                v26 = -87;
              }
              else
              {
                v26 = -55;
              }
            }
            else
            {
              v26 = -48;
            }
            if (((v24 * (unsigned __int16)a3) & 0xFF00) != 0)
              goto LABEL_72;
            v24 = (v24 * a3) + (v25 + v26);
            if (((v24 >> 8) & 1) != 0)
              goto LABEL_72;
            ++result;
            --a2;
          }
          while (a2);
          v13 = 0;
          v12 = v24;
          return (unsigned __int8 *)(v12 | (v13 << 8));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      v4 = a2 - 1;
      if (a2 != 1)
      {
        v5 = a3 + 87;
        if (a3 > 10)
        {
          v6 = a3 + 55;
        }
        else
        {
          v5 = 97;
          v6 = 65;
        }
        if (a3 <= 10)
          v7 = a3 + 48;
        else
          v7 = 58;
        if (result)
        {
          LOBYTE(v8) = 0;
          v9 = result + 1;
          while (1)
          {
            v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                v12 = 0;
                v13 = 1;
                if (v10 < 0x61 || v10 >= v5)
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                v11 = -87;
              }
              else
              {
                v11 = -55;
              }
            }
            else
            {
              v11 = -48;
            }
            if (((v8 * (unsigned __int16)a3) & 0xFF00) != 0)
              goto LABEL_72;
            v8 = (v8 * a3) - (v10 + v11);
            if ((v8 & 0xFFFFFF00) != 0)
              goto LABEL_72;
            ++v9;
            if (!--v4)
              goto LABEL_48;
          }
        }
LABEL_71:
        v12 = 0;
        v13 = 0;
        return (unsigned __int8 *)(v12 | (v13 << 8));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static String._copying(_:)()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v0 = String.subscript.getter();
  v4 = static String._copying(_:)(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t static String._copying(_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  if ((a4 & 0x1000000000000000) != 0)
  {
    v9 = specialized Collection.count.getter(a1, a2, a3, a4);
    if (v9)
    {
      v10 = v9;
      v11 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v9, 0);
      v12 = specialized Sequence._copySequenceContents(initializing:)((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
        goto LABEL_9;
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    v13 = MEMORY[0x1DF0F36A8](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
LABEL_12:
        JUMPOUT(0x1DF0F36A8);
LABEL_9:
      _StringObject.sharedUTF8.getter();
      goto LABEL_12;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x1DF0F36A8]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

_QWORD *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

unint64_t specialized Sequence._copySequenceContents(initializing:)(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD v29[2];

  if (!a2)
  {
    v13 = 0;
    v15 = a4;
LABEL_34:
    *(_QWORD *)result = a4;
    *(_QWORD *)(result + 8) = a5;
    *(_QWORD *)(result + 16) = a6;
    *(_QWORD *)(result + 24) = a7;
    *(_QWORD *)(result + 32) = v15;
    return v13;
  }
  if (!a3)
  {
    v15 = a4;
    v13 = 0;
    goto LABEL_34;
  }
  v10 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v10) = 1;
  v11 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v11 = a6 & 0xFFFFFFFFFFFFLL;
  v27 = v11;
  if (a3 < 0)
    goto LABEL_37;
  v23 = result;
  v24 = a5;
  v13 = 0;
  v14 = a5 >> 14;
  v15 = a4;
  v16 = 4 << v10;
  v17 = a4 >> 14;
  v25 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v26 = a7 & 0xFFFFFFFFFFFFFFLL;
  v22 = a4;
  v28 = a4 >> 14;
  while (1)
  {
    v18 = v15 >> 14;
    if (v15 >> 14 == v14)
      goto LABEL_33;
    v19 = v15 & 0xC;
    v20 = v15;
    if (v19 == v16)
      break;
    if (v18 < v17)
      goto LABEL_35;
LABEL_14:
    if (v18 >= v14)
      goto LABEL_35;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v17 = v28;
      v21 = result;
      if (v19 != v16)
        goto LABEL_22;
    }
    else if ((a7 & 0x2000000000000000) != 0)
    {
      v29[0] = a6;
      v29[1] = v26;
      v21 = *((_BYTE *)v29 + (v20 >> 16));
      if (v19 != v16)
        goto LABEL_22;
    }
    else
    {
      result = v25;
      if ((a6 & 0x1000000000000000) == 0)
      {
        result = _StringObject.sharedUTF8.getter();
        v17 = v28;
      }
      v21 = *(_BYTE *)(result + (v20 >> 16));
      if (v19 != v16)
      {
LABEL_22:
        if ((a7 & 0x1000000000000000) != 0)
          goto LABEL_23;
        goto LABEL_9;
      }
    }
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(v15, a6, a7);
    v17 = v28;
    v15 = result;
    if ((a7 & 0x1000000000000000) != 0)
    {
LABEL_23:
      if (v27 <= v15 >> 16)
        goto LABEL_36;
      result = String.UTF8View._foreignIndex(after:)();
      v17 = v28;
      v15 = result;
      goto LABEL_10;
    }
LABEL_9:
    v15 = (v15 & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_10:
    *(_BYTE *)(a2 + v13++) = v21;
    if (a3 == v13)
    {
      v13 = a3;
LABEL_33:
      result = v23;
      a5 = v24;
      a4 = v22;
      goto LABEL_34;
    }
  }
  result = _StringGuts._slowEnsureMatchingEncoding(_:)(v15, a6, a7);
  v17 = v28;
  v20 = result;
  v18 = result >> 14;
  if (result >> 14 >= v28)
    goto LABEL_14;
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized static String._fromNonContiguousUnsafeBitcastUTF8Repairing<A>(_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE v14[24];

  v8 = specialized Collection.count.getter(a1, a2, a3, a4);
  if (v8)
  {
    v9 = v8;
    v10 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v8, 0);
    v11 = specialized Sequence._copySequenceContents(initializing:)((unint64_t)v14, (uint64_t)(v10 + 4), v9, a1, a2, a3, a4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (v11 != v9)
      __break(1u);
  }
  v12 = static String._fromUTF8Repairing(_:)();
  swift_release();
  return v12;
}

uint64_t closure #2 in String.init<A, B>(decoding:as:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = static String._fromUTF8Repairing(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;
  char isUniquelyReferenced_nonNull_native;
  Swift::Int *v17;
  Swift::Int v18;
  uint64_t v19;

  v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v7 + 48);
    while (1)
    {
      v13 = (_QWORD *)(v12 + 16 * v10);
      v14 = *v13 == a2 && v13[1] == a3;
      if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        goto LABEL_9;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v17 = (Swift::Int *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
    v18 = v17[1];
    *a1 = *v17;
    a1[1] = v18;
    swift_bridgeObjectRetain();
    return 0;
  }
  else
  {
LABEL_9:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v19 = *v3;
    *v3 = 0x8000000000000000;
    swift_bridgeObjectRetain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
    *v3 = v19;
    swift_bridgeObjectRelease();
    *a1 = a2;
    a1[1] = a3;
    return 1;
  }
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_43:
    result = swift_release();
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v37 = (_QWORD *)(v2 + 56);
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v7)
    {
      v14 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    if (v16 >= v8)
      goto LABEL_33;
    v17 = v37[v16];
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v8)
        goto LABEL_33;
      v17 = v37[v11];
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v8)
          goto LABEL_33;
        v17 = v37[v11];
        if (!v17)
          break;
      }
    }
LABEL_23:
    v7 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v8)
  {
LABEL_33:
    swift_release();
    v1 = v0;
    v29 = *(_BYTE *)(v2 + 32);
    v30 = 1 << v29;
    if (1 << v29 > 63)
    {
      v31 = (unint64_t)(v30 + 63) >> 6;
      if ((v29 & 0x3Fu) >= 8)
      {
        v32 = v31 & 0x3FFFFFFFFFFFFFCLL;
        v33 = (_OWORD *)(v2 + 72);
        v34 = v31 & 0x3FFFFFFFFFFFFFCLL;
        do
        {
          *(v33 - 1) = 0uLL;
          *v33 = 0uLL;
          v33 += 2;
          v34 -= 4;
        }
        while (v34);
        if (v31 == v32)
          goto LABEL_42;
      }
      else
      {
        v32 = 0;
      }
      v35 = v31 - v32;
      v36 = (_QWORD *)(v2 + 8 * v32 + 56);
      do
      {
        *v36++ = 0;
        --v35;
      }
      while (v35);
    }
    else
    {
      *v37 = -1 << v30;
    }
LABEL_42:
    *(_QWORD *)(v2 + 16) = 0;
    goto LABEL_43;
  }
  v17 = v37[v18];
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v8)
      goto LABEL_33;
    v17 = v37[v11];
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_45:
  __break(1u);
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  Swift::Int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  Swift::Int *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_16;
  if ((a4 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_16;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  result = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = ~v12;
    v15 = *(_QWORD *)(v11 + 48);
    do
    {
      v16 = (_QWORD *)(v15 + 16 * a3);
      if (*v16 == v8 && v16[1] == a2)
        goto LABEL_19;
      result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) != 0)
        goto LABEL_19;
      a3 = (a3 + 1) & v14;
    }
    while (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0);
  }
LABEL_16:
  v18 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v19 = (Swift::Int *)(*(_QWORD *)(v18 + 48) + 16 * a3);
  *v19 = v8;
  v19[1] = a2;
  v20 = *(_QWORD *)(v18 + 16);
  v21 = __OFADD__(v20, 1);
  v22 = v20 + 1;
  if (!v21)
  {
    *(_QWORD *)(v18 + 16) = v22;
    return result;
  }
  __break(1u);
LABEL_19:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *specialized _NativeSet.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain_n();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    result = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t *specialized Sequence._copySequenceContents(initializing:)(uint64_t *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int v4;

  if (!a2)
  {
    a3 = 0;
    goto LABEL_15;
  }
  if (!a3)
  {
LABEL_15:
    *result = a3;
    return (uint64_t *)a3;
  }
  if (a3 < 0)
    goto LABEL_19;
  v3 = 0;
  while (1)
  {
    if (v3 == 1112064)
    {
      a3 = 1112064;
      goto LABEL_15;
    }
    v4 = v3;
    if (v3 >> 11 >= 0x1B)
      break;
LABEL_9:
    if (v4 >> 11 == 27)
      goto LABEL_18;
    if (HIWORD(v4) > 0x10u)
      goto LABEL_17;
    *(_DWORD *)(a2 + 4 * v3++) = v4;
    if (a3 == v3)
      goto LABEL_15;
  }
  if (v3 <= 0xFFFFF7FF)
  {
    v4 = v3 + 2048;
    goto LABEL_9;
  }
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

void specialized Array<A>.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    v4 = *(_QWORD *)(type metadata accessor for AST.CustomCharacterClass.Member(0) - 8);
    v5 = a2 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v6 = *(_QWORD *)(v4 + 72);
    do
    {
      AST.CustomCharacterClass.Member.hash(into:)();
      v5 += v6;
      --v3;
    }
    while (v3);
  }
}

{
  Swift::UInt v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    v5 = a2 + 32;
    do
    {
      v5 += 8;
      AST.Node.hash(into:)(a1);
      --v4;
    }
    while (v4);
  }
}

{
  Swift::UInt v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    v4 = (unint64_t *)(a2 + 40);
    do
    {
      v5 = *v4;
      Hasher._combine(_:)(*(v4 - 1) >> 14);
      Hasher._combine(_:)(v5 >> 14);
      v4 += 2;
      --v3;
    }
    while (v3);
  }
}

{
  Swift::UInt v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;

  v3 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    v4 = (unint64_t *)(a2 + 56);
    do
    {
      v6 = *(v4 - 1);
      v5 = *v4;
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(v6 >> 14);
      Hasher._combine(_:)(v5 >> 14);
      v4 += 4;
      --v3;
    }
    while (v3);
  }
}

{
  Swift::UInt v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;

  v3 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    v4 = (unint64_t *)(a2 + 56);
    do
    {
      v6 = *(v4 - 1);
      v5 = *v4;
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Hasher._combine(_:)(v6 >> 14);
      Hasher._combine(_:)(v5 >> 14);
      swift_bridgeObjectRelease();
      v4 += 4;
      --v3;
    }
    while (v3);
  }
}

{
  Swift::UInt v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;

  v3 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    v4 = (unint64_t *)(a2 + 48);
    do
    {
      v6 = *(v4 - 1);
      v5 = *v4;
      Hasher._combine(_:)(*((_DWORD *)v4 - 4));
      Hasher._combine(_:)(v6 >> 14);
      Hasher._combine(_:)(v5 >> 14);
      v4 += 3;
      --v3;
    }
    while (v3);
  }
}

{
  Swift::UInt v3;

  v3 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
    __asm { BR              X9 }
}

{
  Swift::UInt v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;

  v3 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    v4 = (unint64_t *)(a2 + 48);
    do
    {
      v6 = *(v4 - 1);
      v5 = *v4;
      Hasher._combine(_:)(*((unsigned __int8 *)v4 - 16));
      Hasher._combine(_:)(v6 >> 14);
      Hasher._combine(_:)(v5 >> 14);
      v4 += 3;
      --v3;
    }
    while (v3);
  }
}

{
  Swift::UInt v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v3 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    v4 = (unint64_t *)(a2 + 56);
    do
    {
      v8 = v4[2];
      v9 = v4[3];
      v11 = v4[4];
      v10 = v4[5];
      v12 = *((unsigned __int8 *)v4 + 48);
      v17 = *v4;
      v18 = v4[1];
      Hasher._combine(_:)(*((unsigned __int8 *)v4 - 24));
      swift_bridgeObjectRetain();
      v15 = v8;
      v16 = v11;
      v13 = v8;
      v14 = v9;
      outlined copy of ParseError?(v13, v9, v11, v10, v12);
      String.hash(into:)();
      Hasher._combine(_:)(v17 >> 14);
      Hasher._combine(_:)(v18 >> 14);
      if (v12 == 255)
      {
        Hasher._combine(_:)(0);
        v5 = v15;
        v6 = v16;
        v7 = v10;
      }
      else
      {
        v5 = v15;
        Hasher._combine(_:)(1u);
        ParseError.hash(into:)();
        v6 = v16;
        v7 = v10;
      }
      v4 += 10;
      swift_bridgeObjectRelease();
      outlined consume of ParseError?(v5, v14, v6, v7, v12);
      --v3;
    }
    while (v3);
  }
}

unint64_t String.UnicodeScalarView.distance(from:to:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  unint64_t result;
  unint64_t v9;
  uint64_t i;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;

  v7 = _StringGuts.validateInclusiveScalarIndex(_:)(a1, a3, a4);
  result = _StringGuts.validateInclusiveScalarIndex(_:)(a2, a3, a4);
  v9 = result >> 14;
  if (v7 >> 14 < result >> 14)
  {
    for (i = 0; ; ++i)
    {
      v11 = i + 1;
      if (__OFADD__(i, 1))
        break;
      if ((a4 & 0x1000000000000000) != 0)
      {
        result = String.UnicodeScalarView._foreignIndex(after:)();
        v7 = result;
      }
      else
      {
        v12 = v7 >> 16;
        if ((a4 & 0x2000000000000000) != 0)
        {
          v22 = a3;
          v23 = a4 & 0xFFFFFFFFFFFFFFLL;
          v13 = *((unsigned __int8 *)&v22 + v12);
        }
        else
        {
          result = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000) == 0)
            result = _StringObject.sharedUTF8.getter();
          v13 = *(unsigned __int8 *)(result + v12);
        }
        v14 = (char)v13;
        v15 = __clz(v13 ^ 0xFF) - 24;
        if (v14 >= 0)
          LOBYTE(v15) = 1;
        v7 = ((v12 + v15) << 16) | 5;
      }
      if (v9 <= v7 >> 14)
        return v11;
    }
    __break(1u);
LABEL_36:
    __break(1u);
    return result;
  }
  if (v9 < v7 >> 14)
  {
    v11 = 0;
    while (!__OFSUB__(v11--, 1))
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        result = String.UnicodeScalarView._foreignIndex(before:)();
        v7 = result;
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          v22 = a3;
          v23 = a4 & 0xFFFFFFFFFFFFFFLL;
          if ((*((_BYTE *)&v22 + (v7 >> 16) - 1) & 0xC0) == 0x80)
          {
            v20 = 0;
            do
              v21 = *((_BYTE *)&v22 + (v7 >> 16) + v20-- - 2) & 0xC0;
            while (v21 == 128);
            v19 = 1 - v20;
          }
          else
          {
            v19 = 1;
          }
        }
        else
        {
          result = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000) == 0)
            result = _StringObject.sharedUTF8.getter();
          v17 = 0;
          do
            v18 = *(_BYTE *)(result + (v7 >> 16) - 1 + v17--) & 0xC0;
          while (v18 == 128);
          v19 = -v17;
        }
        v7 = (v7 - (v19 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
      }
      if (v9 >= v7 >> 14)
        return v11;
    }
    goto LABEL_36;
  }
  return 0;
}

unint64_t _StringGuts.validateInclusiveScalarIndex(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5)
    goto LABEL_9;
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 < result >> 16)
  {
    __break(1u);
LABEL_9:
    result = _StringGuts.validateInclusiveSubscalarIndex(_:)(result, a2, a3);
    if ((result & 1) == 0)
      return result & 0xC | _StringGuts.scalarAlignSlow(_:)(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
  }
  return result;
}

unint64_t _StringGuts.validateInclusiveSubscalarIndex(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 0xC) == 4 << v5)
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a2, a3);
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 < result >> 16)
    __break(1u);
  return result;
}

uint64_t _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t result;
  char v13;
  _QWORD v14[2];
  char v15;

  if ((a4 & 0x1000000000000000) != 0)
  {
    result = 0;
    goto LABEL_8;
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    v11 = v14;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    v11 = (_QWORD *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v11 = (_QWORD *)_StringObject.sharedUTF8.getter();
  }
  result = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5H15VGXEfU_Si_SsTG5SiTf1nnc_nTf4xnn_n((uint64_t)v11, a1, a2, a3, a4, a5);
  if (!v5)
  {
    v15 = v13 & 1;
LABEL_8:
    LOBYTE(v14[0]) = (a4 & 0x1000000000000000) != 0;
  }
  return result;
}

uint64_t _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5063_sSS8decoding2asSSx_q_mtcSlRzs16_UnicodeEncodingR_8CodeUnitQy_7g26Rtzr0_lufcSSSRyAGGXEfU_Ss8jK14V_s0C0O0H0OTG5Tf1cn_n(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  _QWORD *v8;
  _QWORD v10[2];

  if ((a4 & 0x1000000000000000) != 0)
    return 0;
  if ((a4 & 0x2000000000000000) != 0)
  {
    v10[0] = a3;
    v10[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    v8 = v10;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    v8 = (_QWORD *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v8 = (_QWORD *)_StringObject.sharedUTF8.getter();
  }
  return _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5SS_Tg5063_sSS8decoding2asSSx_q_mtcSlRzs16_UnicodeEncodingR_8CodeUnitQy_7g26Rtzr0_lufcSSSRyAGGXEfU_Ss8iJ14V_s0C0O0H0OTG5Tf1nnc_nTf4xn_n((uint64_t)v8, a1, a2, a3, a4);
}

unint64_t _StringGuts.validateScalarIndex(_:in:)(unint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  char v9;
  unint64_t v10;
  uint64_t v11;

  v9 = (a5 & 0x1000000000000000) == 0 || (a4 & 0x800000000000000) != 0;
  v10 = result & 0xC;
  v11 = 4 << v9;
  if ((result & 1) == 0 || v10 == v11)
  {
LABEL_9:
    if (v10 == v11)
      result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a4, a5);
    if (result >> 14 < a2 >> 14 || result >> 14 >= a3 >> 14)
    {
      __break(1u);
    }
    else if ((result & 1) != 0)
    {
      return result;
    }
    return result & 0xC | _StringGuts.scalarAlignSlow(_:)(result, a4, a5) & 0xFFFFFFFFFFFFFFF3 | 1;
  }
  v10 = result >> 14;
  if (result >> 14 < a2 >> 14 || (v11 = a3 >> 14, v10 >= a3 >> 14))
  {
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

BOOL specialized static AST.Group.BalancedCapture.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL8 result;
  char v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;

  v3 = a1[1];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[6];
  v7 = a1[7];
  v9 = a1[8];
  v8 = a1[9];
  v10 = a2[1];
  v11 = a2[4];
  v12 = a2[5];
  v13 = a2[6];
  v14 = a2[7];
  v16 = a2[8];
  v15 = a2[9];
  if (v3)
  {
    if (!v10)
      return 0;
    v18 = a1[2];
    v17 = a1[3];
    v20 = a2[2];
    v19 = a2[3];
    if (*a1 == *a2 && v3 == v10)
    {
      if ((v20 ^ v18) >> 14)
        return 0;
      goto LABEL_11;
    }
    v27 = a2[3];
    v28 = a1[3];
    v29 = a2[8];
    v30 = a2[9];
    v31 = a1[8];
    v32 = a1[9];
    v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = 0;
    if ((v22 & 1) != 0)
    {
      v9 = v31;
      v8 = v32;
      v16 = v29;
      v15 = v30;
      v19 = v27;
      v17 = v28;
      if ((v20 ^ v18) < 0x4000)
      {
LABEL_11:
        result = 0;
        if ((v19 ^ v17) >> 14)
          return result;
LABEL_12:
        if ((v11 ^ v4) >= 0x4000)
          return result;
        if ((v12 ^ v5) >> 14)
          return 0;
        if (v6 == v13 && v7 == v14)
        {
          if ((v16 ^ v9) >> 14)
            return 0;
        }
        else
        {
          v23 = v16;
          v24 = v9;
          v25 = v8;
          v26 = v15;
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            return 0;
          v15 = v26;
          v8 = v25;
          if ((v23 ^ v24) >= 0x4000)
            return 0;
        }
        return (v15 ^ v8) < 0x4000;
      }
    }
  }
  else
  {
    result = 0;
    if (!v10)
      goto LABEL_12;
  }
  return result;
}

BOOL specialized static AST.MatchingOptionSequence.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v4 = *(_BYTE *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v8 = *(_BYTE *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_BYTE *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 24);
  v13 = *(_QWORD *)(a2 + 32);
  v12 = *(_QWORD *)(a2 + 40);
  v14 = *(_BYTE *)(a2 + 48);
  v15 = *(_QWORD *)(a2 + 56);
  if ((v4 & 1) != 0)
  {
    if ((v10 & 1) == 0)
      return 0;
  }
  else if ((v10 & 1) != 0 || (*(_QWORD *)a2 ^ *(_QWORD *)a1) >> 14 || (*(_QWORD *)(a2 + 8) ^ *(_QWORD *)(a1 + 8)) >> 14)
  {
    return 0;
  }
  if (!specialized static Array<A>.== infix(_:_:)(v5, v11))
    return 0;
  if ((v8 & 1) != 0)
  {
    if ((v14 & 1) != 0)
      return specialized static Array<A>.== infix(_:_:)(v9, v15);
    return 0;
  }
  if ((v14 & 1) != 0 || (v13 ^ v7) >> 14 || (v12 ^ v6) >> 14)
    return 0;
  return specialized static Array<A>.== infix(_:_:)(v9, v15);
}

void specialized static AST.Group.Kind.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1DEFDEA28@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, int a7@<W8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE v57[280];

  if (a7)
  {
    v44 = v17;
    v45 = v20;
    v30 = v11;
    v31 = v16;
    v32 = v7;
    v34 = v12;
    v35 = v18;
    v37 = v14;
    v39 = v15;
    v40 = v10;
    v41 = v9;
    v42 = v8;
    outlined copy of AST.Group.Kind(v30, v31, v34, v37, v39, a4, a5, a6, v44, v45, a7);
    outlined copy of AST.Group.Kind(v35, a1, v32, v56, a3, v40, v41, v42, a2, v13, v19);
    outlined release of (AST.Group.Kind, AST.Group.Kind)((uint64_t)v57);
    goto LABEL_11;
  }
  v50 = v10;
  v51 = v9;
  v54 = v7;
  v55 = v8;
  if (v18 == v11 && a1 == v16)
  {
    v22 = v14;
    outlined copy of AST.Group.Kind(v18, a1, v12, v14, v15, a4, a5, a6, v17, v20, 0);
    outlined copy of AST.Group.Kind(v18, a1, v54, v56, a3, v50, v51, v55, a2, v13, 0);
    outlined release of (AST.Group.Kind, AST.Group.Kind)((uint64_t)v57);
    if ((v12 ^ (unint64_t)v54) >> 14)
      goto LABEL_11;
  }
  else
  {
    v23 = v20;
    v53 = v13;
    v24 = v14;
    v25 = v15;
    v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v28 = v16;
    v22 = v24;
    outlined copy of AST.Group.Kind(v11, v28, v12, v24, v25, a4, a5, a6, v17, v23, 0);
    outlined copy of AST.Group.Kind(v18, a1, v54, v56, a3, v50, v51, v55, a2, v53, 0);
    outlined release of (AST.Group.Kind, AST.Group.Kind)((uint64_t)v57);
    if ((v46 & 1) == 0 || (v12 ^ (unint64_t)v54) >= 0x4000)
      goto LABEL_11;
  }
  if ((v22 ^ (unint64_t)v56) >= 0x4000)
  {
LABEL_11:
    v29 = 0;
    return v29 & 1;
  }
  v29 = 1;
  return v29 & 1;
}

uint64_t specialized static AST.Reference.Kind.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v13;
  char v15;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v6 = *(unsigned __int8 *)(a1 + 32);
  v7 = *(_QWORD *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v11 = *(unsigned __int8 *)(a2 + 32);
  if (!*(_BYTE *)(a1 + 32))
  {
    if (!*(_BYTE *)(a2 + 32))
    {
      outlined consume of AST.Reference.Kind(*(_QWORD *)a1, v3, v5, v4, 0);
      outlined consume of AST.Reference.Kind(v7, v8, v10, v9, 0);
      if ((v3 & 1) == 0)
        goto LABEL_5;
LABEL_10:
      if ((v8 & 1) != 0)
        return !((v10 ^ (unint64_t)v5) >> 14) && (v9 ^ (unint64_t)v4) < 0x4000;
      return 0;
    }
LABEL_21:
    outlined copy of AST.Reference.Kind(v7, v8, v10, v9, v11);
    outlined consume of AST.Reference.Kind(v2, v3, v5, v4, v6);
    outlined consume of AST.Reference.Kind(v7, v8, v10, v9, v11);
    return 0;
  }
  if (v6 == 1)
  {
    if (v11 == 1)
    {
      outlined consume of AST.Reference.Kind(*(_QWORD *)a1, v3, v5, v4, 1);
      outlined consume of AST.Reference.Kind(v7, v8, v10, v9, 1);
      if ((v3 & 1) == 0)
      {
LABEL_5:
        if ((v8 & 1) != 0 || v2 != v7)
          return 0;
        return !((v10 ^ (unint64_t)v5) >> 14) && (v9 ^ (unint64_t)v4) < 0x4000;
      }
      goto LABEL_10;
    }
    goto LABEL_21;
  }
  if (v11 != 2)
  {
    swift_bridgeObjectRetain();
    goto LABEL_21;
  }
  v13 = *(_QWORD *)a1;
  if (v2 == v7 && v3 == v8)
  {
    outlined copy of AST.Reference.Kind(v13, v3, v10, v9, 2);
    outlined copy of AST.Reference.Kind(v2, v3, v5, v4, 2);
    outlined consume of AST.Reference.Kind(v2, v3, v5, v4, 2);
    outlined consume of AST.Reference.Kind(v2, v3, v10, v9, 2);
    return 1;
  }
  else
  {
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    outlined copy of AST.Reference.Kind(v7, v8, v10, v9, 2);
    outlined copy of AST.Reference.Kind(v2, v3, v5, v4, 2);
    outlined consume of AST.Reference.Kind(v2, v3, v5, v4, 2);
    outlined consume of AST.Reference.Kind(v7, v8, v10, v9, 2);
    return v15 & 1;
  }
}

BOOL specialized static AST.Reference.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  _BOOL8 result;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _OWORD v22[2];
  char v23;
  _OWORD v24[2];
  char v25;

  v2 = *(_BYTE *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_BYTE *)(a1 + 48);
  v18 = *(_QWORD *)(a1 + 64);
  v19 = *(_QWORD *)(a1 + 56);
  v5 = *(_BYTE *)(a1 + 72);
  v20 = *(_QWORD *)(a1 + 80);
  v21 = *(_QWORD *)(a1 + 88);
  v6 = *(_BYTE *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a2 + 64);
  v11 = *(_BYTE *)(a2 + 72);
  v13 = *(_QWORD *)(a2 + 80);
  v12 = *(_QWORD *)(a2 + 88);
  v14 = *(_OWORD *)(a1 + 16);
  v24[0] = *(_OWORD *)a1;
  v24[1] = v14;
  v25 = v2;
  v15 = *(_OWORD *)(a2 + 16);
  v22[0] = *(_OWORD *)a2;
  v22[1] = v15;
  v23 = v6;
  if ((specialized static AST.Reference.Kind.== infix(_:_:)((uint64_t)v24, (uint64_t)v22) & 1) == 0)
    return 0;
  if ((v5 & 1) == 0)
  {
    if ((v11 & 1) == 0)
    {
      if ((v4 & 1) != 0)
      {
        if ((v7 & 1) == 0)
          return 0;
      }
      else
      {
        result = 0;
        if ((v7 & 1) != 0 || v3 != v8)
          return result;
      }
      result = 0;
      if ((v10 ^ v19) >> 14 || (v9 ^ v18) >> 14)
        return result;
      return (v13 ^ v20) < 0x4000 && (v12 ^ v21) < 0x4000;
    }
    return 0;
  }
  if ((v11 & 1) == 0)
    return 0;
  return (v13 ^ v20) < 0x4000 && (v12 ^ v21) < 0x4000;
}

BOOL specialized static AST.Conditional.Condition.PCREVersionNumber.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  _BOOL8 result;
  char v12;
  unint64_t v13;

  v3 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_BYTE *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v9 = *(_QWORD *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 72);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 8))
      return 0;
  }
  else
  {
    if (*(_QWORD *)a1 == *(_QWORD *)a2)
      v10 = *(_BYTE *)(a2 + 8);
    else
      v10 = 1;
    if ((v10 & 1) != 0)
      return 0;
  }
  result = 0;
  if (!((*(_QWORD *)(a2 + 16) ^ v3) >> 14) && !((*(_QWORD *)(a2 + 24) ^ v2) >> 14))
  {
    if ((v5 & 1) != 0)
    {
      if (!*(_BYTE *)(a2 + 40))
        return 0;
    }
    else
    {
      if (v4 == *(_QWORD *)(a2 + 32))
        v12 = *(_BYTE *)(a2 + 40);
      else
        v12 = 1;
      if ((v12 & 1) != 0)
        return 0;
    }
    result = 0;
    if (!((*(_QWORD *)(a2 + 48) ^ v7) >> 14) && !((*(_QWORD *)(a2 + 56) ^ v6) >> 14))
    {
      v13 = *(_QWORD *)(a2 + 72) ^ v8;
      return (*(_QWORD *)(a2 + 64) ^ v9) < 0x4000 && v13 < 0x4000;
    }
  }
  return result;
}

void specialized static AST.Quantification.Amount.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X19 }
}

BOOL sub_1DEFDF514@<W0>(uint64_t a1@<X2>, char a2@<W7>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (v8 >> 61)
    return 0;
  if ((a2 & 1) != 0)
  {
    if ((v5 & 1) == 0)
      return 0;
  }
  else if ((v5 & 1) != 0 || a1 != v6)
  {
    return 0;
  }
  return !((v3 ^ v7) >> 14) && (a3 ^ v4) < 0x4000;
}

void specialized static AST.Atom.CharacterProperty.Kind.== infix(_:_:)(uint64_t a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  _QWORD v54[15];
  uint64_t v55;
  char *v56;

  v55 = a1;
  v56 = a2;
  v2 = type metadata accessor for Unicode.CanonicalCombiningClass();
  v54[4] = *(_QWORD *)(v2 - 8);
  v54[5] = v2;
  MEMORY[0x1E0C80A78](v2, v3);
  v54[1] = (char *)v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Unicode.NumericType();
  v54[2] = *(_QWORD *)(v5 - 8);
  v54[3] = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v54[0] = (char *)v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
  v10 = MEMORY[0x1E0C80A78](v8, v9);
  v54[14] = (char *)v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v10, v12);
  v54[13] = (char *)v54 - v14;
  v16 = MEMORY[0x1E0C80A78](v13, v15);
  v54[12] = (char *)v54 - v17;
  v19 = MEMORY[0x1E0C80A78](v16, v18);
  v54[11] = (char *)v54 - v20;
  v22 = MEMORY[0x1E0C80A78](v19, v21);
  v54[9] = (char *)v54 - v23;
  v25 = MEMORY[0x1E0C80A78](v22, v24);
  v54[8] = (char *)v54 - v26;
  v28 = MEMORY[0x1E0C80A78](v25, v27);
  v54[10] = (char *)v54 - v29;
  v31 = MEMORY[0x1E0C80A78](v28, v30);
  v54[6] = (char *)v54 - v32;
  v34 = MEMORY[0x1E0C80A78](v31, v33);
  v36 = MEMORY[0x1E0C80A78](v34, v35);
  v54[7] = (char *)v54 - v37;
  v39 = MEMORY[0x1E0C80A78](v36, v38);
  v41 = MEMORY[0x1E0C80A78](v39, v40);
  v43 = MEMORY[0x1E0C80A78](v41, v42);
  v45 = MEMORY[0x1E0C80A78](v43, v44);
  MEMORY[0x1E0C80A78](v45, v46);
  v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AST.Atom.CharacterProperty.Kind, AST.Atom.CharacterProperty.Kind));
  v49 = MEMORY[0x1E0C80A78](v47, v48);
  v51 = (char *)v54 + *(int *)(v49 + 48) - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AST.Atom(v55, (uint64_t)v54 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AST.Atom.CharacterProperty.Kind);
  v52 = (uint64_t)v56;
  v56 = v51;
  outlined init with copy of AST.Atom(v52, (uint64_t)v51, type metadata accessor for AST.Atom.CharacterProperty.Kind);
  v53 = (char *)sub_1DEFDF9E8 + 4 * word_1DEFFE13A[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1DEFDF9E8()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;

  outlined init with copy of AST.Atom(v1, (uint64_t)v0, type metadata accessor for AST.Atom.CharacterProperty.Kind);
  v3 = *(char **)(v2 - 112);
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of _ASTParent?(v1, &demangling cache variable for type metadata for (AST.Atom.CharacterProperty.Kind, AST.Atom.CharacterProperty.Kind));
  }
  else
  {
    v4 = *v3;
    *(_BYTE *)(v2 - 101) = *v0;
    *(_BYTE *)(v2 - 102) = v4;
    v5 = Unicode.ExtendedGeneralCategory.rawValue.getter();
    v7 = v6;
    if (v5 == Unicode.ExtendedGeneralCategory.rawValue.getter() && v7 == v8)
    {
      swift_bridgeObjectRelease_n();
LABEL_9:
      outlined destroy of AST.Atom(v1, type metadata accessor for AST.Atom.CharacterProperty.Kind);
      v10 = 1;
      return v10 & 1;
    }
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v9 & 1) != 0)
      goto LABEL_9;
    outlined destroy of AST.Atom(v1, type metadata accessor for AST.Atom.CharacterProperty.Kind);
  }
  v10 = 0;
  return v10 & 1;
}

BOOL specialized static AST.Atom.Callout.OnigurumaTag.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BOOL8 result;

  if ((*a2 ^ *a1) >> 14 || (a1[1] ^ a2[1]) >> 14)
    return 0;
  v3 = a1[4];
  v2 = a1[5];
  v5 = a1[6];
  v4 = a1[7];
  v7 = a2[4];
  v6 = a2[5];
  v9 = a2[6];
  v8 = a2[7];
  if (a1[2] == a2[2] && a1[3] == a2[3])
  {
    if ((v7 ^ v3) >> 14)
      return 0;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = 0;
    if ((v10 & 1) == 0 || (v7 ^ v3) >= 0x4000)
      return result;
  }
  if ((v6 ^ v2) >= 0x4000)
    return 0;
  return (v9 ^ v5) < 0x4000 && (v8 ^ v4) < 0x4000;
}

BOOL specialized static AST.Atom.Callout.OnigurumaNamed.ArgList.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*a2 ^ *a1) >> 14)
    return 0;
  if ((a1[1] ^ a2[1]) >> 14)
    return 0;
  v2 = a1[3];
  v3 = a1[4];
  v4 = a2[3];
  v5 = a2[4];
  if ((specialized static Array<A>.== infix(_:_:)(a1[2], a2[2]) & 1) == 0)
    return 0;
  return (v4 ^ v2) < 0x4000 && (v5 ^ v3) < 0x4000;
}

BOOL specialized static AST.Atom.Callout.OnigurumaNamed.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  _BOOL8 result;
  uint64_t v33;
  BOOL v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  v9 = *(_QWORD *)(a1 + 72);
  v10 = *(_QWORD *)(a1 + 80);
  v11 = *(_QWORD *)(a1 + 88);
  v12 = *(_OWORD *)(a1 + 112);
  v59 = *(_OWORD *)(a1 + 96);
  v58 = *(_QWORD *)(a1 + 128);
  v14 = *(_QWORD *)(a2 + 16);
  v13 = *(_QWORD *)(a2 + 24);
  v15 = *(_QWORD *)(a2 + 32);
  v16 = *(_QWORD *)(a2 + 40);
  v17 = *(_QWORD *)(a2 + 48);
  v18 = *(_QWORD *)(a2 + 56);
  v20 = *(_QWORD *)(a2 + 64);
  v19 = *(_QWORD *)(a2 + 72);
  v22 = *(_QWORD *)(a2 + 80);
  v21 = *(_QWORD *)(a2 + 88);
  v23 = *(_QWORD *)(a2 + 112);
  v56 = *(_OWORD *)(a2 + 120);
  v57 = *(_OWORD *)(a2 + 96);
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8))
  {
    if ((v14 ^ v2) >> 14)
      return 0;
LABEL_7:
    if ((v13 ^ v3) >= 0x4000)
      return 0;
    if (v8)
    {
      *(_QWORD *)&v68 = v4;
      *((_QWORD *)&v68 + 1) = v6;
      *(_QWORD *)&v69 = v5;
      *((_QWORD *)&v69 + 1) = v8;
      v70 = v7;
      v71 = v9;
      v72 = v10;
      v73 = v11;
      if (v18)
      {
        *(_QWORD *)&v62 = v15;
        *((_QWORD *)&v62 + 1) = v16;
        v63 = v17;
        *(_QWORD *)&v64 = v18;
        *((_QWORD *)&v64 + 1) = v20;
        v65 = v19;
        v66 = v22;
        v67 = v21;
        v61 = v12;
        v33 = v23;
        v34 = specialized static AST.Atom.Callout.OnigurumaTag.== infix(_:_:)(&v68, &v62);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v23 = v33;
        v12 = v61;
        if (!v34)
          return 0;
LABEL_13:
        if ((_QWORD)v12)
        {
          v68 = v59;
          v69 = v12;
          v70 = v58;
          if (v23)
          {
            v62 = v57;
            v63 = v23;
            v64 = v56;
            v35 = specialized static AST.Atom.Callout.OnigurumaNamed.ArgList.== infix(_:_:)(&v68, &v62);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            return v35;
          }
          swift_bridgeObjectRetain();
        }
        else if (!v23)
        {
          return 1;
        }
        swift_bridgeObjectRelease();
        return 0;
      }
      v53 = v10;
      v55 = v7;
      v36 = v9;
      v37 = v11;
      v49 = v17;
      v51 = v19;
      v38 = v20;
      v45 = v15;
      v47 = v16;
      swift_bridgeObjectRetain();
      v15 = v45;
      v16 = v47;
      v17 = v49;
      v19 = v51;
      v20 = v38;
      v11 = v37;
      v10 = v53;
      v7 = v55;
      v9 = v36;
    }
    else if (!v18)
    {
      goto LABEL_13;
    }
    *(_QWORD *)&v68 = v4;
    *((_QWORD *)&v68 + 1) = v6;
    *(_QWORD *)&v69 = v5;
    *((_QWORD *)&v69 + 1) = v8;
    v70 = v7;
    v71 = v9;
    v72 = v10;
    v73 = v11;
    v74 = v15;
    v75 = v16;
    v76 = v17;
    v77 = v18;
    v78 = v20;
    v79 = v19;
    v80 = v22;
    v81 = v21;
    swift_bridgeObjectRetain();
    outlined release of (AST.Atom.Callout.OnigurumaTag?, AST.Atom.Callout.OnigurumaTag?)((uint64_t)&v68);
    return 0;
  }
  v39 = *(_QWORD *)(a1 + 24);
  v40 = *(_QWORD *)(a2 + 64);
  v44 = *(_QWORD *)(a2 + 32);
  v46 = *(_QWORD *)(a2 + 40);
  v48 = *(_QWORD *)(a2 + 48);
  v50 = *(_QWORD *)(a2 + 72);
  v41 = *(_QWORD *)(a1 + 88);
  v42 = *(_QWORD *)(a1 + 72);
  v52 = *(_QWORD *)(a1 + 80);
  v54 = *(_QWORD *)(a1 + 64);
  v43 = *(_QWORD *)(a1 + 48);
  v24 = *(_QWORD *)(a2 + 56);
  v25 = *(_QWORD *)(a1 + 56);
  v26 = *(_QWORD *)(a1 + 40);
  v27 = *(_QWORD *)(a1 + 32);
  v28 = *(_QWORD *)(a2 + 80);
  v29 = *(_QWORD *)(a2 + 88);
  v30 = *(_QWORD *)(a2 + 112);
  v60 = *(_OWORD *)(a1 + 112);
  v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
  result = 0;
  if ((v31 & 1) != 0)
  {
    v12 = v60;
    v23 = v30;
    v21 = v29;
    v22 = v28;
    v4 = v27;
    v6 = v26;
    v8 = v25;
    v18 = v24;
    v9 = v42;
    v5 = v43;
    v10 = v52;
    v7 = v54;
    v20 = v40;
    v11 = v41;
    v17 = v48;
    v19 = v50;
    v15 = v44;
    v16 = v46;
    v3 = v39;
    if ((v14 ^ v2) < 0x4000)
      goto LABEL_7;
  }
  return result;
}

BOOL specialized static AST.Atom.Callout.OnigurumaOfContents.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  _BOOL8 result;
  unint64_t v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  _QWORD v70[8];
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  if ((*(_QWORD *)a2 ^ *(_QWORD *)a1) >> 14 || (*(_QWORD *)(a1 + 8) ^ *(_QWORD *)(a2 + 8)) >> 14)
    return 0;
  v2 = *(_QWORD *)(a1 + 32);
  v68 = *(_QWORD *)(a1 + 48);
  v69 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 64);
  v66 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 80);
  v6 = *(_QWORD *)(a1 + 88);
  v7 = *(_QWORD *)(a1 + 96);
  v9 = *(_QWORD *)(a1 + 104);
  v8 = *(_QWORD *)(a1 + 112);
  v10 = *(_QWORD *)(a1 + 120);
  v11 = *(unsigned __int8 *)(a1 + 128);
  v13 = *(_QWORD *)(a1 + 136);
  v12 = *(_QWORD *)(a1 + 144);
  v14 = *(_QWORD *)(a2 + 32);
  v15 = *(_QWORD *)(a2 + 40);
  v67 = *(_QWORD *)(a2 + 48);
  v65 = *(_QWORD *)(a2 + 56);
  v16 = *(_QWORD *)(a2 + 72);
  v64 = *(_QWORD *)(a2 + 64);
  v17 = *(_QWORD *)(a2 + 80);
  v18 = *(_QWORD *)(a2 + 88);
  v19 = *(_QWORD *)(a2 + 96);
  v20 = *(_QWORD *)(a2 + 104);
  v22 = *(_QWORD *)(a2 + 112);
  v21 = *(_QWORD *)(a2 + 120);
  v23 = *(unsigned __int8 *)(a2 + 128);
  v24 = *(_QWORD *)(a2 + 136);
  v25 = *(_QWORD *)(a2 + 144);
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16) && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24))
  {
    if ((v14 ^ v2) >> 14)
      return 0;
  }
  else
  {
    v56 = *(_QWORD *)(a2 + 80);
    v47 = *(_QWORD *)(a2 + 96);
    v48 = *(_QWORD *)(a2 + 136);
    v49 = *(unsigned __int8 *)(a2 + 128);
    v58 = *(_QWORD *)(a2 + 104);
    v60 = *(_QWORD *)(a2 + 120);
    v50 = *(_QWORD *)(a2 + 112);
    v51 = *(_QWORD *)(a2 + 144);
    v52 = *(_QWORD *)(a1 + 120);
    v53 = *(_QWORD *)(a1 + 104);
    v62 = *(_QWORD *)(a1 + 112);
    v54 = *(_QWORD *)(a1 + 96);
    v55 = *(_QWORD *)(a1 + 80);
    v26 = *(_QWORD *)(a1 + 72);
    v27 = *(_QWORD *)(a1 + 64);
    v28 = *(_QWORD *)(a2 + 88);
    v29 = *(_QWORD *)(a1 + 136);
    v30 = *(unsigned __int8 *)(a1 + 128);
    v31 = *(_QWORD *)(a1 + 88);
    v32 = *(_QWORD *)(a1 + 144);
    v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = 0;
    if ((v33 & 1) == 0)
      return result;
    v12 = v32;
    v6 = v31;
    v11 = v30;
    v13 = v29;
    v18 = v28;
    v3 = v27;
    v4 = v26;
    v7 = v54;
    v5 = v55;
    v10 = v52;
    v9 = v53;
    v21 = v60;
    v8 = v62;
    v22 = v50;
    v25 = v51;
    v17 = v56;
    v20 = v58;
    v23 = v49;
    v19 = v47;
    v24 = v48;
    if ((v14 ^ v2) >= 0x4000)
      return result;
  }
  result = 0;
  if ((v15 ^ v69) >> 14 || (v67 ^ v68) >> 14 || (v65 ^ v66) >= 0x4000)
    return result;
  if (v6)
  {
    v71 = v3;
    v72 = v4;
    v73 = v5;
    v74 = v6;
    v75 = v7;
    v76 = v9;
    v77 = v8;
    v78 = v10;
    if (v18)
    {
      v70[0] = v64;
      v70[1] = v16;
      v70[2] = v17;
      v70[3] = v18;
      v70[4] = v19;
      v70[5] = v20;
      v70[6] = v22;
      v70[7] = v21;
      v35 = v12;
      v36 = v11;
      v37 = v13;
      v38 = v25;
      v39 = v23;
      v40 = v24;
      v41 = specialized static AST.Atom.Callout.OnigurumaTag.== infix(_:_:)(&v71, v70);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v24 = v40;
      v23 = v39;
      v25 = v38;
      v13 = v37;
      v11 = v36;
      v12 = v35;
      if (v41)
        return v11 == v23 && (v24 ^ v13) < 0x4000 && (v25 ^ v12) < 0x4000;
      return 0;
    }
    v61 = v21;
    v63 = v8;
    v44 = v10;
    v45 = v22;
    v57 = v17;
    v59 = v20;
    v46 = v19;
    swift_bridgeObjectRetain();
    v17 = v57;
    v19 = v46;
    v20 = v59;
    v21 = v61;
    v22 = v45;
    v10 = v44;
    v8 = v63;
LABEL_27:
    v71 = v3;
    v72 = v4;
    v73 = v5;
    v74 = v6;
    v75 = v7;
    v76 = v9;
    v77 = v8;
    v78 = v10;
    v79 = v64;
    v80 = v16;
    v81 = v17;
    v82 = v18;
    v83 = v19;
    v84 = v20;
    v85 = v22;
    v86 = v21;
    swift_bridgeObjectRetain();
    outlined release of (AST.Atom.Callout.OnigurumaTag?, AST.Atom.Callout.OnigurumaTag?)((uint64_t)&v71);
    return 0;
  }
  if (v18)
    goto LABEL_27;
  return v11 == v23 && (v24 ^ v13) < 0x4000 && (v25 ^ v12) < 0x4000;
}

BOOL specialized static AST.Atom.Callout.== infix(_:_:)(_OWORD *a1, _OWORD *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  BOOL v36;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[32];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  _OWORD v57[10];
  _OWORD v58[10];
  _OWORD v59[10];
  _OWORD v60[10];
  __int128 v61[10];
  _OWORD v62[10];

  outlined init with take of AST.Atom.Callout(a1, v58);
  outlined init with take of AST.Atom.Callout(a2, v59);
  outlined init with take of AST.Atom.Callout(v58, v60);
  outlined init with take of AST.Atom.Callout(v59, v61);
  outlined init with take of AST.Atom.Callout(v58, v62);
  v3 = _s12_RegexParser3ASTV4AtomV7CalloutOWOg((uint64_t)v62);
  if (!v3)
  {
    v15 = AST.root.modify(v62);
    v16 = *(_QWORD *)v15;
    v17 = *(_QWORD *)(v15 + 8);
    v18 = *(_QWORD *)(v15 + 16);
    v19 = *(_QWORD *)(v15 + 24);
    v20 = *(_BYTE *)(v15 + 32);
    v21 = *(_QWORD *)(v15 + 40);
    v22 = *(_QWORD *)(v15 + 48);
    outlined init with take of AST.Atom.Callout(v59, v57);
    if (!_s12_RegexParser3ASTV4AtomV7CalloutOWOg((uint64_t)v57))
    {
      v23 = AST.root.modify(v57);
      v24 = *(_BYTE *)(v23 + 32);
      *(_QWORD *)&v38 = v16;
      *((_QWORD *)&v38 + 1) = v17;
      *(_QWORD *)&v39 = v18;
      *((_QWORD *)&v39 + 1) = v19;
      LOBYTE(v40) = v20;
      *((_QWORD *)&v40 + 1) = v21;
      *(_QWORD *)&v41 = v22;
      v25 = *(_OWORD *)(v23 + 16);
      v48 = *(_OWORD *)v23;
      v49 = v25;
      v50[0] = v24;
      *(_OWORD *)&v50[8] = *(_OWORD *)(v23 + 40);
      outlined release of AST.Atom.Callout((uint64_t)v59, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of AST.Atom.Callout);
      outlined release of AST.Atom.Callout((uint64_t)v58, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of AST.Atom.Callout);
      outlined release of AST.Atom.Callout((uint64_t)v58, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of AST.Atom.Callout);
      outlined release of AST.Atom.Callout((uint64_t)v59, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of AST.Atom.Callout);
      v14 = specialized static Source.Located<A>.== infix(_:_:)((uint64_t)&v38, (uint64_t)&v48);
      goto LABEL_9;
    }
LABEL_10:
    outlined release of AST.Atom.Callout((uint64_t)v58, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of AST.Atom.Callout);
    outlined release of AST.Atom.Callout((uint64_t)v59, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of AST.Atom.Callout);
    outlined release of (AST.Atom.Callout, AST.Atom.Callout)((uint64_t)v60);
    return 0;
  }
  if (v3 != 1)
  {
    v26 = AST.root.modify(v62);
    outlined init with take of AST.Atom.Callout(v59, v57);
    if (_s12_RegexParser3ASTV4AtomV7CalloutOWOg((uint64_t)v57) == 2)
    {
      v27 = AST.root.modify(v57);
      v28 = *(_OWORD *)(v26 + 112);
      v53 = *(_OWORD *)(v26 + 96);
      v54 = v28;
      v55 = *(_OWORD *)(v26 + 128);
      v56 = *(_QWORD *)(v26 + 144);
      v29 = *(_OWORD *)(v26 + 48);
      *(_OWORD *)v50 = *(_OWORD *)(v26 + 32);
      *(_OWORD *)&v50[16] = v29;
      v30 = *(_OWORD *)(v26 + 80);
      v51 = *(_OWORD *)(v26 + 64);
      v52 = v30;
      v31 = *(_OWORD *)(v26 + 16);
      v48 = *(_OWORD *)v26;
      v49 = v31;
      v32 = *(_OWORD *)(v27 + 112);
      v44 = *(_OWORD *)(v27 + 96);
      v45 = v32;
      v46 = *(_OWORD *)(v27 + 128);
      v47 = *(_QWORD *)(v27 + 144);
      v33 = *(_OWORD *)(v27 + 48);
      v40 = *(_OWORD *)(v27 + 32);
      v41 = v33;
      v34 = *(_OWORD *)(v27 + 80);
      v42 = *(_OWORD *)(v27 + 64);
      v43 = v34;
      v35 = *(_OWORD *)(v27 + 16);
      v38 = *(_OWORD *)v27;
      v39 = v35;
      outlined release of AST.Atom.Callout((uint64_t)v59, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of AST.Atom.Callout);
      outlined release of AST.Atom.Callout((uint64_t)v58, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of AST.Atom.Callout);
      outlined release of AST.Atom.Callout((uint64_t)v58, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of AST.Atom.Callout);
      outlined release of AST.Atom.Callout((uint64_t)v59, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of AST.Atom.Callout);
      v14 = specialized static AST.Atom.Callout.OnigurumaOfContents.== infix(_:_:)((uint64_t)&v48, (uint64_t)&v38);
      goto LABEL_9;
    }
    goto LABEL_10;
  }
  v4 = AST.root.modify(v62);
  outlined init with take of AST.Atom.Callout(v59, v57);
  if (_s12_RegexParser3ASTV4AtomV7CalloutOWOg((uint64_t)v57) != 1)
    goto LABEL_10;
  v5 = AST.root.modify(v57);
  v6 = *(_OWORD *)(v4 + 112);
  v53 = *(_OWORD *)(v4 + 96);
  v54 = v6;
  *(_QWORD *)&v55 = *(_QWORD *)(v4 + 128);
  v7 = *(_OWORD *)(v4 + 48);
  *(_OWORD *)v50 = *(_OWORD *)(v4 + 32);
  *(_OWORD *)&v50[16] = v7;
  v8 = *(_OWORD *)(v4 + 80);
  v51 = *(_OWORD *)(v4 + 64);
  v52 = v8;
  v9 = *(_OWORD *)(v4 + 16);
  v48 = *(_OWORD *)v4;
  v49 = v9;
  v10 = *(_OWORD *)(v5 + 112);
  v44 = *(_OWORD *)(v5 + 96);
  v45 = v10;
  *(_QWORD *)&v46 = *(_QWORD *)(v5 + 128);
  v11 = *(_OWORD *)(v5 + 48);
  v40 = *(_OWORD *)(v5 + 32);
  v41 = v11;
  v12 = *(_OWORD *)(v5 + 80);
  v42 = *(_OWORD *)(v5 + 64);
  v43 = v12;
  v13 = *(_OWORD *)(v5 + 16);
  v38 = *(_OWORD *)v5;
  v39 = v13;
  outlined release of AST.Atom.Callout((uint64_t)v59, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of AST.Atom.Callout);
  outlined release of AST.Atom.Callout((uint64_t)v58, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of AST.Atom.Callout);
  outlined release of AST.Atom.Callout((uint64_t)v58, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of AST.Atom.Callout);
  outlined release of AST.Atom.Callout((uint64_t)v59, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of AST.Atom.Callout);
  v14 = specialized static AST.Atom.Callout.OnigurumaNamed.== infix(_:_:)((uint64_t)&v48, (uint64_t)&v38);
LABEL_9:
  v36 = v14;
  outlined release of (AST.Atom.Callout, AST.Atom.Callout)((uint64_t)v60);
  outlined release of AST.Atom.Callout((uint64_t)v59, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of AST.Atom.Callout);
  outlined release of AST.Atom.Callout((uint64_t)v58, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of AST.Atom.Callout);
  return v36;
}

uint64_t specialized static AST.Atom.BacktrackingDirective.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2)
    return 0;
  v2 = 0;
  if (!((a1[1] ^ a2[1]) >> 14) && !((a1[2] ^ a2[2]) >> 14))
  {
    v3 = a1[4];
    v4 = a2[4];
    if (v3)
    {
      if (v4)
      {
        v6 = a1[5];
        v5 = a1[6];
        v8 = a2[5];
        v7 = a2[6];
        if (a1[3] == a2[3] && v3 == v4)
        {
          if ((v8 ^ v6) >> 14)
            return 0;
        }
        else if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0 || (v8 ^ v6) >= 0x4000)
        {
          return 0;
        }
        if ((v7 ^ v5) < 0x4000)
          return 1;
      }
    }
    else if (!v4)
    {
      return 1;
    }
    return 0;
  }
  return v2;
}

void specialized static AST.Atom.Kind.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  _QWORD v49[11];
  uint64_t v50;
  uint64_t v51;
  char *v52;

  v50 = a1;
  v51 = a2;
  v49[0] = type metadata accessor for AST.Atom.CharacterProperty(0);
  MEMORY[0x1E0C80A78](v49[0], v2);
  v49[1] = (char *)v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for AST.Atom.Kind(0);
  v6 = MEMORY[0x1E0C80A78](v4, v5);
  v49[7] = (char *)v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v6, v8);
  v49[10] = (char *)v49 - v10;
  v12 = MEMORY[0x1E0C80A78](v9, v11);
  v49[8] = (char *)v49 - v13;
  v15 = MEMORY[0x1E0C80A78](v12, v14);
  v49[6] = (char *)v49 - v16;
  v18 = MEMORY[0x1E0C80A78](v15, v17);
  v49[9] = (char *)v49 - v19;
  v21 = MEMORY[0x1E0C80A78](v18, v20);
  v49[4] = (char *)v49 - v22;
  v24 = MEMORY[0x1E0C80A78](v21, v23);
  v49[3] = (char *)v49 - v25;
  v27 = MEMORY[0x1E0C80A78](v24, v26);
  v49[2] = (char *)v49 - v28;
  v30 = MEMORY[0x1E0C80A78](v27, v29);
  v32 = MEMORY[0x1E0C80A78](v30, v31);
  v34 = MEMORY[0x1E0C80A78](v32, v33);
  v49[5] = (char *)v49 - v35;
  v37 = MEMORY[0x1E0C80A78](v34, v36);
  v39 = MEMORY[0x1E0C80A78](v37, v38);
  MEMORY[0x1E0C80A78](v39, v40);
  v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AST.Atom.Kind, AST.Atom.Kind));
  v43 = MEMORY[0x1E0C80A78](v41, v42);
  v45 = (char *)v49 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = (uint64_t)&v45[*(int *)(v43 + 48)];
  outlined init with copy of AST.Atom(v50, (uint64_t)v45, type metadata accessor for AST.Atom.Kind);
  v47 = v51;
  v51 = v46;
  outlined init with copy of AST.Atom(v47, v46, type metadata accessor for AST.Atom.Kind);
  v52 = v45;
  v48 = (char *)sub_1DEFE0FA4 + 4 * word_1DEFFE15E[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1DEFE0FA4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  char v10;

  v2 = *(_QWORD *)(v0 + 120);
  outlined init with copy of AST.Atom(v2, (uint64_t)v1, type metadata accessor for AST.Atom.Kind);
  v4 = *v1;
  v3 = v1[1];
  v5 = *(uint64_t **)(v0 + 96);
  if (swift_getEnumCaseMultiPayload())
  {
    swift_bridgeObjectRelease();
    outlined destroy of _ASTParent?(v2, &demangling cache variable for type metadata for (AST.Atom.Kind, AST.Atom.Kind));
    goto LABEL_11;
  }
  v6 = *v5;
  v7 = v5[1];
  if (v4 == v6 && v3 == v7)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v9 & 1) == 0)
    {
      outlined destroy of AST.Atom(v2, type metadata accessor for AST.Atom.Kind);
LABEL_11:
      v10 = 0;
      return v10 & 1;
    }
  }
  outlined destroy of AST.Atom(v2, type metadata accessor for AST.Atom.Kind);
  v10 = 1;
  return v10 & 1;
}

void specialized static AST.CustomCharacterClass.Member.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  _QWORD v26[3];
  uint64_t v27;
  char *v28;
  uint64_t v29;

  v29 = a2;
  v27 = type metadata accessor for AST.Atom(0);
  MEMORY[0x1E0C80A78](v27, v3);
  v26[2] = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26[0] = type metadata accessor for AST.CustomCharacterClass.Range(0);
  MEMORY[0x1E0C80A78](v26[0], v5);
  v26[1] = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AST.CustomCharacterClass.Member(0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = MEMORY[0x1E0C80A78](v9, v10);
  v13 = MEMORY[0x1E0C80A78](v11, v12);
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v17 = MEMORY[0x1E0C80A78](v15, v16);
  v28 = (char *)v26 - v18;
  MEMORY[0x1E0C80A78](v17, v19);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AST.CustomCharacterClass.Member, AST.CustomCharacterClass.Member));
  v22 = MEMORY[0x1E0C80A78](v20, v21);
  v24 = (char *)v26 + *(int *)(v22 + 48) - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AST.Atom(a1, (uint64_t)v26 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AST.CustomCharacterClass.Member);
  outlined init with copy of AST.Atom(v29, (uint64_t)v24, type metadata accessor for AST.CustomCharacterClass.Member);
  v25 = (char *)sub_1DEFE1AF4 + 4 * byte_1DEFFE182[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1DEFE1AF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;

  outlined init with copy of AST.Atom(v2, v1, type metadata accessor for AST.CustomCharacterClass.Member);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 40);
  if (swift_getEnumCaseMultiPayload())
  {
    swift_bridgeObjectRelease();
    outlined destroy of _ASTParent?(v2, &demangling cache variable for type metadata for (AST.CustomCharacterClass.Member, AST.CustomCharacterClass.Member));
LABEL_11:
    v13 = 0;
    return v13 & 1;
  }
  v6 = *(_QWORD *)(v1 + 8);
  v7 = *(_QWORD *)(v1 + 16);
  v8 = *(_BYTE *)v1;
  v9 = *(_QWORD *)(v0 + 24);
  v10 = *(_QWORD *)(v0 + 32);
  v11 = *(_QWORD *)(v0 + 40);
  if (!specialized static Source.Located<A>.== infix(_:_:)(v8, v6, v7, *(_BYTE *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16)))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_10:
    outlined destroy of AST.Atom(v2, type metadata accessor for AST.CustomCharacterClass.Member);
    goto LABEL_11;
  }
  v12 = ((uint64_t (*)(uint64_t, uint64_t))specialized static Array<A>.== infix(_:_:))(v3, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v12 & 1) == 0 || (v10 ^ v4) >> 14 || (v11 ^ v5) >= 0x4000)
    goto LABEL_10;
  outlined destroy of AST.Atom(v2, type metadata accessor for AST.CustomCharacterClass.Member);
  v13 = 1;
  return v13 & 1;
}

void specialized static AST.AbsentFunction.Kind.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1DEFE20CC()
{
  char v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v10;
  uint64_t v11;

  if ((v0 & 6) != 0)
  {
    outlined copy of AST.AbsentFunction.Kind(v7, v5, v3, v1);
    outlined copy of AST.AbsentFunction.Kind(v6, v4, v2, v0);
    outlined consume of AST.AbsentFunction.Kind(v7, v5, v3, v1);
    outlined consume of AST.AbsentFunction.Kind(v6, v4, v2, v0);
    v8 = 0;
  }
  else
  {
    v10 = v6;
    v11 = v7;
    outlined copy of AST.AbsentFunction.Kind(v6, v4, v2, v0);
    outlined copy of AST.AbsentFunction.Kind(v7, v5, v3, v1);
    outlined copy of AST.AbsentFunction.Kind(v7, v5, v3, v1);
    outlined copy of AST.AbsentFunction.Kind(v6, v4, v2, v0);
    v8 = ((uint64_t (*)(uint64_t *, uint64_t *))specialized static AST.Node.== infix(_:_:))(&v11, &v10);
    outlined consume of AST.AbsentFunction.Kind(v7, v5, v3, v1);
    outlined consume of AST.AbsentFunction.Kind(v6, v4, v2, v0);
    outlined consume of AST.AbsentFunction.Kind(v6, v4, v2, v0);
    outlined consume of AST.AbsentFunction.Kind(v7, v5, v3, v1);
  }
  return v8 & 1;
}

BOOL specialized static AST.AbsentFunction.== infix(_:_:)(uint64_t a1, _QWORD *a2)
{
  __int128 v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _OWORD v10[2];

  if ((*a2 ^ *(_QWORD *)a1) >> 14)
    return 0;
  if ((*(_QWORD *)(a1 + 8) ^ a2[1]) >> 14)
    return 0;
  v2 = *(_OWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v6 = a2[6];
  v5 = a2[7];
  v10[0] = *(_OWORD *)(a1 + 16);
  v10[1] = v2;
  specialized static AST.AbsentFunction.Kind.== infix(_:_:)((uint64_t)v10);
  if ((v7 & 1) == 0)
    return 0;
  return (v6 ^ v4) < 0x4000 && (v5 ^ v3) < 0x4000;
}

uint64_t specialized static AST.Quantification.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char v16;
  char v17;
  char v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[4];
  uint64_t v30;
  uint64_t v31;
  _OWORD v32[4];
  unint64_t v33;
  unint64_t v34;

  v3 = *(_QWORD *)(a1 + 64);
  v2 = *(_QWORD *)(a1 + 72);
  v4 = *(unsigned __int8 *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_QWORD *)(a1 + 96);
  v22 = *(_QWORD *)(a1 + 128);
  v8 = *(_QWORD *)(a2 + 64);
  v7 = *(_QWORD *)(a2 + 72);
  v9 = *(_BYTE *)(a2 + 80);
  v10 = *(_QWORD *)(a2 + 88);
  v11 = *(_QWORD *)(a2 + 96);
  v27 = *(_QWORD *)(a2 + 104);
  v28 = *(_QWORD *)(a1 + 104);
  v25 = *(_QWORD *)(a2 + 112);
  v26 = *(_QWORD *)(a1 + 112);
  v23 = *(_QWORD *)(a2 + 120);
  v24 = *(_QWORD *)(a1 + 120);
  v21 = *(_QWORD *)(a2 + 128);
  v12 = *(_OWORD *)(a1 + 16);
  v32[0] = *(_OWORD *)a1;
  v32[1] = v12;
  v13 = *(_OWORD *)(a1 + 48);
  v32[2] = *(_OWORD *)(a1 + 32);
  v32[3] = v13;
  v33 = v3;
  v34 = v2;
  v14 = *(_OWORD *)(a2 + 16);
  v29[0] = *(_OWORD *)a2;
  v29[1] = v14;
  v15 = *(_OWORD *)(a2 + 48);
  v29[2] = *(_OWORD *)(a2 + 32);
  v29[3] = v15;
  v30 = v8;
  v31 = v7;
  specialized static AST.Quantification.Amount.== infix(_:_:)((uint64_t)v32);
  v17 = v16;
  v18 = 0;
  if ((v17 & 1) != 0 && !((v8 ^ v3) >> 14) && !((v7 ^ v2) >> 14))
  {
    if (specialized static Source.Located<A>.== infix(_:_:)(v4, v5, v6, v9, v10, v11))
    {
      *(_QWORD *)&v32[0] = v28;
      *(_QWORD *)&v29[0] = v27;
      v19 = specialized static AST.Node.== infix(_:_:)(v32, v29);
      v18 = 0;
      if ((v19 & 1) != 0 && !((v25 ^ v26) >> 14) && !((v23 ^ v24) >> 14))
        v18 = specialized static Array<A>.== infix(_:_:)(v22, v21);
    }
    else
    {
      v18 = 0;
    }
  }
  return v18 & 1;
}

void specialized static AST.Conditional.Condition.Kind.== infix(_:_:)(__int128 *a1, __int128 *a2)
{
  char *v3;
  __int128 v4[8];
  __int128 v5[8];
  _OWORD v6[8];
  _OWORD v7[8];
  _OWORD v8[8];

  outlined init with take of AST.Conditional.Condition.Kind(a1, v4);
  outlined init with take of AST.Conditional.Condition.Kind(a2, v5);
  outlined init with take of AST.Conditional.Condition.Kind(v4, v6);
  outlined init with take of AST.Conditional.Condition.Kind(v5, v7);
  outlined init with take of AST.Conditional.Condition.Kind(v4, v8);
  v3 = (char *)sub_1DEFE25E4
     + 4 * byte_1DEFFE18C[_s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOg(v8)];
  __asm { BR              X10 }
}

BOOL sub_1DEFE25E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  __int128 v16;
  BOOL v17;
  uint64_t v19;
  uint64_t v20;
  _OWORD v21[2];
  char v22;
  __int128 v23;
  __int128 v24;
  char v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD v38[8];
  __int128 v39[8];
  __int128 v40[8];
  _BYTE v41[488];

  v1 = _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOj0_(v0 - 216);
  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_BYTE *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 48);
  v9 = *(_QWORD *)(v1 + 56);
  v10 = *(_QWORD *)(v1 + 64);
  v11 = *(_BYTE *)(v1 + 72);
  v19 = *(_QWORD *)(v1 + 88);
  v20 = *(_QWORD *)(v1 + 80);
  outlined init with take of AST.Conditional.Condition.Kind(v40, v38);
  if (_s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOg(v38))
  {
    outlined init with take of AST.Conditional.Condition.Kind(v39, &v27);
    v12 = _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOj0_((uint64_t)&v27);
    outlined copy of AST.Reference.Kind(*(_QWORD *)v12, *(_QWORD *)(v12 + 8), *(_QWORD *)(v12 + 16), *(_QWORD *)(v12 + 24), *(_BYTE *)(v12 + 32));
    outlined retain of AST.Conditional.Condition(v40, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of AST.Conditional.Condition.Kind);
    outlined release of (AST.Conditional.Condition.Kind, AST.Conditional.Condition.Kind)((uint64_t)v41);
    return 0;
  }
  else
  {
    v13 = _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOj0_((uint64_t)v38);
    v14 = *(_BYTE *)(v13 + 32);
    v15 = *(_BYTE *)(v13 + 72);
    *(_QWORD *)&v27 = v2;
    *((_QWORD *)&v27 + 1) = v3;
    v28 = v4;
    v29 = v5;
    v30 = v6;
    v31 = v7;
    v32 = v8;
    v33 = v9;
    v34 = v10;
    v35 = v11;
    v36 = v20;
    v37 = v19;
    v16 = *(_OWORD *)(v13 + 16);
    v21[0] = *(_OWORD *)v13;
    v21[1] = v16;
    v22 = v14;
    v23 = *(_OWORD *)(v13 + 40);
    v24 = *(_OWORD *)(v13 + 56);
    v25 = v15;
    v26 = *(_OWORD *)(v13 + 80);
    outlined retain of AST.Conditional.Condition(v40, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of AST.Conditional.Condition.Kind);
    outlined retain of AST.Conditional.Condition(v39, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of AST.Conditional.Condition.Kind);
    outlined retain of AST.Conditional.Condition(v39, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of AST.Conditional.Condition.Kind);
    outlined retain of AST.Conditional.Condition(v40, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of AST.Conditional.Condition.Kind);
    v17 = specialized static AST.Reference.== infix(_:_:)((uint64_t)&v27, (uint64_t)v21);
    outlined release of (AST.Conditional.Condition.Kind, AST.Conditional.Condition.Kind)((uint64_t)v41);
    outlined retain of AST.Conditional.Condition(v40, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of AST.Conditional.Condition.Kind);
    outlined retain of AST.Conditional.Condition(v39, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of AST.Conditional.Condition.Kind);
  }
  return v17;
}

uint64_t specialized static AST.Conditional.== infix(_:_:)(uint64_t *a1, __int128 *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  char v20;
  char v21;
  uint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  __int128 v27[8];
  __int128 v28[8];
  __int128 v29[8];
  __int128 v30[8];

  v4 = *a1;
  v5 = a1[1];
  outlined init with take of AST.Conditional.Condition.Kind((__int128 *)a1 + 1, v29);
  v7 = a1[18];
  v6 = a1[19];
  v9 = a1[20];
  v8 = a1[21];
  v10 = *((_BYTE *)a1 + 184);
  v25 = a1[22];
  v26 = a1[24];
  v11 = *(_QWORD *)a2;
  v12 = *((_QWORD *)a2 + 1);
  outlined init with take of AST.Conditional.Condition.Kind(a2 + 1, v30);
  v13 = 0;
  if (!((v11 ^ v4) >> 14) && !((v12 ^ v5) >> 14))
  {
    v14 = *((_QWORD *)a2 + 20);
    v23 = *((_QWORD *)a2 + 21);
    v15 = *((_QWORD *)a2 + 22);
    v24 = *((_BYTE *)a2 + 184);
    v16 = *((_QWORD *)a2 + 24);
    v19 = (uint64_t *)(a2 + 9);
    v17 = *((_QWORD *)a2 + 18);
    v18 = v19[1];
    outlined init with take of AST.Conditional.Condition.Kind(v29, v28);
    outlined init with take of AST.Conditional.Condition.Kind(v30, v27);
    specialized static AST.Conditional.Condition.Kind.== infix(_:_:)(v28, v27);
    v21 = v20;
    v13 = 0;
    if ((v21 & 1) != 0 && !((v17 ^ v7) >> 14) && !((v18 ^ v6) >> 14))
    {
      *(_QWORD *)&v28[0] = v9;
      *(_QWORD *)&v27[0] = v14;
      if ((specialized static AST.Node.== infix(_:_:)(v28, v27) & 1) == 0)
        goto LABEL_11;
      if ((v10 & 1) != 0)
      {
        if ((v24 & 1) == 0)
          goto LABEL_11;
LABEL_15:
        *(_QWORD *)&v28[0] = v26;
        *(_QWORD *)&v27[0] = v16;
        v13 = specialized static AST.Node.== infix(_:_:)(v28, v27);
        return v13 & 1;
      }
      if ((v24 & 1) != 0)
      {
LABEL_11:
        v13 = 0;
        return v13 & 1;
      }
      v13 = 0;
      if (!((v23 ^ v8) >> 14) && !((v15 ^ v25) >> 14))
        goto LABEL_15;
    }
  }
  return v13 & 1;
}

BOOL specialized static AST.Group.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char v18;
  char v19;
  _BOOL8 result;
  _OWORD v22[5];
  char v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD v26[5];
  char v27;
  unint64_t v28;
  unint64_t v29;

  v2 = *(_BYTE *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 88);
  v3 = *(_QWORD *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 104);
  v5 = *(_QWORD *)(a1 + 112);
  v7 = *(_QWORD *)(a1 + 120);
  v8 = *(_BYTE *)(a2 + 80);
  v10 = *(_QWORD *)(a2 + 88);
  v9 = *(_QWORD *)(a2 + 96);
  v12 = *(_QWORD *)(a2 + 104);
  v11 = *(_QWORD *)(a2 + 112);
  v13 = *(_QWORD *)(a2 + 120);
  v14 = *(_OWORD *)(a1 + 16);
  v26[0] = *(_OWORD *)a1;
  v26[1] = v14;
  v15 = *(_OWORD *)(a1 + 48);
  v26[2] = *(_OWORD *)(a1 + 32);
  v26[3] = v15;
  v26[4] = *(_OWORD *)(a1 + 64);
  v27 = v2;
  v28 = v4;
  v29 = v3;
  v16 = *(_OWORD *)(a2 + 16);
  v22[0] = *(_OWORD *)a2;
  v22[1] = v16;
  v17 = *(_OWORD *)(a2 + 48);
  v22[2] = *(_OWORD *)(a2 + 32);
  v22[3] = v17;
  v22[4] = *(_OWORD *)(a2 + 64);
  v23 = v8;
  v24 = v10;
  v25 = v9;
  specialized static AST.Group.Kind.== infix(_:_:)((uint64_t)v26);
  v19 = v18;
  result = 0;
  if ((v19 & 1) != 0 && !((v10 ^ v4) >> 14) && !((v9 ^ v3) >> 14))
  {
    *(_QWORD *)&v26[0] = v6;
    *(_QWORD *)&v22[0] = v12;
    return (specialized static AST.Node.== infix(_:_:)(v26, v22) & 1) != 0 && (v11 ^ v5) < 0x4000 && (v13 ^ v7) < 0x4000;
  }
  return result;
}

void specialized static AST.Node.== infix(_:_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = type metadata accessor for AST.Atom(0);
  v4 = MEMORY[0x1E0C80A78](v2, v3);
  MEMORY[0x1E0C80A78](v4, v5);
  __asm { BR              X11 }
}

uint64_t sub_1DEFE2D70@<X0>(uint64_t a1@<X8>)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char v7;

  if (v1 >> 60)
    goto LABEL_6;
  v3 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  swift_retain();
  swift_retain();
  if ((((uint64_t (*)(uint64_t, uint64_t))specialized static Array<A>.== infix(_:_:))(v3, v5) & 1) == 0)
  {
    swift_release();
    swift_release();
    goto LABEL_6;
  }
  v6 = specialized static Array<A>.== infix(_:_:)(v2, v4);
  swift_release();
  swift_release();
  if (!v6)
  {
LABEL_6:
    v7 = 0;
    return v7 & 1;
  }
  v7 = 1;
  return v7 & 1;
}

uint64_t specialized static AST.GlobalMatchingOption.Kind.== infix(_:_:)(uint64_t a1)
{
  return ((uint64_t (*)(void))((char *)sub_1DEFE3324 + 4 * byte_1DEFFE1AA[*(_QWORD *)(a1 + 8) >> 61]))();
}

BOOL sub_1DEFE3324@<W0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  unint64_t v6;
  unint64_t v7;

  if (v2 >> 61)
    return 0;
  if ((v5 & 1) != 0)
  {
    if ((v2 & 1) == 0)
      return 0;
  }
  else if ((v2 & 1) != 0 || v4 != v3)
  {
    return 0;
  }
  return !((v1 ^ v7) >> 14) && (a1 ^ v6) < 0x4000;
}

void specialized static ParseError.== infix(_:_:)(__int128 *a1)
{
  _QWORD v1[4];

  outlined init with take of ParseError(a1, (uint64_t)v1);
  __asm { BR              X10 }
}

uint64_t sub_1DEFE3674()
{
  uint64_t v0;
  __int128 *v1;
  uint64_t v2;
  char v4;
  _QWORD v6[4];
  char v7;
  uint64_t v8;

  v2 = v8;
  outlined init with take of ParseError(v1, (uint64_t)v6);
  if (v7)
  {
    v4 = 0;
  }
  else if (v0 == v6[0] && v2 == v6[1])
  {
    v4 = 1;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  return v4 & 1;
}

uint64_t specialized static AST.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v9;

  v2 = a1[1];
  v3 = a1[2];
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v9 = *a1;
  specialized static AST.Node.== infix(_:_:)((uint64_t)&v9);
  if ((v6 & 1) == 0)
    goto LABEL_5;
  if (!v2)
  {
    if (v4)
    {
      LOBYTE(v4) = 0;
LABEL_10:
      swift_bridgeObjectRelease();
      return v4 & 1;
    }
LABEL_8:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized static Array<A>.== infix(_:_:)(v3, v5);
    LOBYTE(v4) = v7;
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  if (!v4)
  {
    swift_bridgeObjectRetain();
    goto LABEL_10;
  }
  if ((specialized static Array<A>.== infix(_:_:)(v2, v4) & 1) != 0)
    goto LABEL_8;
LABEL_5:
  LOBYTE(v4) = 0;
  return v4 & 1;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1DF0F3D8C]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1DF0F3D98](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t outlined copy of ParseError?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 != 0xFF)
    return outlined copy of ParseError(a1, a2, a3, a4, a5);
  return a1;
}

uint64_t outlined copy of ParseError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t result;

  if (a5 <= 0x23u)
  {
    if (((1 << a5) & 0x363FBFF5FLL) != 0)
      return swift_bridgeObjectRetain();
    if (((1 << a5) & 0x800040000) != 0)
    {
      swift_bridgeObjectRetain();
      return swift_bridgeObjectRetain();
    }
  }
  return result;
}

uint64_t type metadata accessor for AST.Atom(uint64_t a1)
{
  return type metadata accessor for AST.Atom(a1, (uint64_t *)&type metadata singleton initialization cache for AST.Atom);
}

uint64_t type metadata accessor for AST.CustomCharacterClass.Member(uint64_t a1)
{
  return type metadata accessor for AST.Atom(a1, (uint64_t *)&type metadata singleton initialization cache for AST.CustomCharacterClass.Member);
}

BOOL specialized static AST.CustomCharacterClass.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  if (!specialized static Source.Located<A>.== infix(_:_:)(*(_BYTE *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16))|| (specialized static Array<A>.== infix(_:_:)(v2, v5) & 1) == 0)
  {
    return 0;
  }
  return (v6 ^ v3) < 0x4000 && (v7 ^ v4) < 0x4000;
}

uint64_t type metadata accessor for AST.Atom.Kind(uint64_t a1)
{
  return type metadata accessor for AST.Atom(a1, (uint64_t *)&type metadata singleton initialization cache for AST.Atom.Kind);
}

uint64_t outlined destroy of AST.Atom(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of AST.Atom(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined copy of AST.AbsentFunction.Kind(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v4;
  uint64_t result;

  v4 = (a4 >> 1) & 3;
  if (v4 && v4 != 2)
  {
    if (v4 != 1)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t outlined consume of AST.AbsentFunction.Kind(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v4;
  uint64_t result;

  v4 = (a4 >> 1) & 3;
  if (v4 != 2)
  {
    if (v4 == 1)
    {
      swift_release();
    }
    else if (v4)
    {
      return result;
    }
  }
  return swift_release();
}

BOOL specialized static Diagnostic.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _BOOL8 result;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;

  if (*a1 != *a2)
    return 0;
  v2 = *((_QWORD *)a1 + 3);
  v4 = *((_QWORD *)a1 + 4);
  v3 = *((_QWORD *)a1 + 5);
  v6 = *((_QWORD *)a1 + 6);
  v5 = *((_QWORD *)a1 + 7);
  v7 = *((_QWORD *)a1 + 8);
  v8 = a1[72];
  v10 = *((_QWORD *)a2 + 3);
  v9 = *((_QWORD *)a2 + 4);
  v12 = *((_QWORD *)a2 + 5);
  v11 = *((_QWORD *)a2 + 6);
  v14 = *((_QWORD *)a2 + 7);
  v13 = *((_QWORD *)a2 + 8);
  v15 = a2[72];
  if (*((_QWORD *)a1 + 1) == *((_QWORD *)a2 + 1) && *((_QWORD *)a1 + 2) == *((_QWORD *)a2 + 2))
  {
    if ((v10 ^ v2) >> 14)
      return 0;
LABEL_8:
    if ((v9 ^ v4) >> 14)
      return 0;
    if (v8 == 255)
    {
      if (v15 == 255)
        return 1;
    }
    else if (v15 != 255)
    {
      *(_QWORD *)&v33 = v3;
      *((_QWORD *)&v33 + 1) = v6;
      v34 = v5;
      v35 = v7;
      v36 = v8;
      v37 = v12;
      v38 = v11;
      v39 = v14;
      v40 = v13;
      v41 = v15;
      specialized static ParseError.== infix(_:_:)(&v33);
      return (v24 & 1) != 0;
    }
    v25 = v13;
    v26 = v5;
    v27 = v6;
    v28 = v3;
    outlined copy of ParseError?(v3, v6, v5, v7, v8);
    outlined copy of ParseError?(v12, v11, v14, v25, v15);
    outlined consume of ParseError?(v28, v27, v26, v7, v8);
    outlined consume of ParseError?(v12, v11, v14, v25, v15);
    return 0;
  }
  v29 = *((_QWORD *)a1 + 5);
  v30 = *((_QWORD *)a1 + 6);
  v31 = *((_QWORD *)a1 + 7);
  v32 = a1[72];
  v16 = a2[72];
  v17 = *((_QWORD *)a1 + 8);
  v18 = *((_QWORD *)a2 + 5);
  v19 = *((_QWORD *)a2 + 6);
  v20 = *((_QWORD *)a2 + 7);
  v21 = *((_QWORD *)a2 + 8);
  v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
  result = 0;
  if ((v22 & 1) != 0)
  {
    v13 = v21;
    v14 = v20;
    v11 = v19;
    v12 = v18;
    v7 = v17;
    v15 = v16;
    v8 = v32;
    v6 = v30;
    v5 = v31;
    v3 = v29;
    if ((v10 ^ v2) < 0x4000)
      goto LABEL_8;
  }
  return result;
}

BOOL specialized static CaptureList.Capture.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _BOOL8 result;

  v3 = a1[1];
  v4 = a1[2];
  v6 = a1[3];
  v5 = a1[4];
  v7 = a1[5];
  v8 = a2[1];
  v9 = a2[2];
  v11 = a2[3];
  v10 = a2[4];
  v12 = a2[5];
  if (!v3)
  {
    if (!v8)
      goto LABEL_10;
    return 0;
  }
  if (!v8)
    return 0;
  if (*a1 != *a2 || v3 != v8)
  {
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = 0;
    if ((v13 & 1) == 0 || v6 != v11)
      return result;
    goto LABEL_11;
  }
LABEL_10:
  result = 0;
  if (v6 != v11)
    return result;
LABEL_11:
  if (v4 == v9)
    return (v10 ^ v5) < 0x4000 && (v12 ^ v7) < 0x4000;
  return result;
}

BOOL specialized static AST.Conditional.Condition.PCREVersionCheck.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  BOOL v2;
  unsigned __int8 v3;
  __int128 v4;
  uint64_t v5;
  unsigned __int8 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  unsigned __int8 v10;
  __int128 v11;
  uint64_t v12;
  unsigned __int8 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v17;
  unsigned __int8 v18;
  __int128 v19;
  uint64_t v20;
  unsigned __int8 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  unsigned __int8 v25;
  __int128 v26;
  uint64_t v27;
  unsigned __int8 v28;
  __int128 v29;
  __int128 v30;

  if (*a1 == *a2)
  {
    v2 = 0;
    if (!((*((_QWORD *)a1 + 1) ^ *((_QWORD *)a2 + 1)) >> 14) && !((*((_QWORD *)a1 + 2) ^ *((_QWORD *)a2 + 2)) >> 14))
    {
      v3 = a1[32];
      v4 = *(_OWORD *)(a1 + 40);
      v5 = *((_QWORD *)a1 + 7);
      v6 = a1[64];
      v7 = *(_OWORD *)(a1 + 72);
      v8 = *(_OWORD *)(a1 + 88);
      v9 = *((_QWORD *)a2 + 3);
      v10 = a2[32];
      v11 = *(_OWORD *)(a2 + 40);
      v12 = *((_QWORD *)a2 + 7);
      v13 = a2[64];
      v14 = *(_OWORD *)(a2 + 72);
      v15 = *(_OWORD *)(a2 + 88);
      v24 = *((_QWORD *)a1 + 3);
      v25 = v3;
      v26 = v4;
      v27 = v5;
      v28 = v6;
      v29 = v7;
      v30 = v8;
      v17 = v9;
      v18 = v10;
      v19 = v11;
      v20 = v12;
      v21 = v13;
      v22 = v14;
      v23 = v15;
      return specialized static AST.Conditional.Condition.PCREVersionNumber.== infix(_:_:)((uint64_t)&v24, (uint64_t)&v17);
    }
  }
  else
  {
    return 0;
  }
  return v2;
}

BOOL specialized static AST.Conditional.Condition.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v11[8];
  __int128 v12[8];
  __int128 v13[8];
  __int128 v14[8];

  outlined init with take of AST.Conditional.Condition.Kind((__int128 *)a1, v13);
  v5 = *(_QWORD *)(a1 + 128);
  v4 = *(_QWORD *)(a1 + 136);
  outlined init with take of AST.Conditional.Condition.Kind((__int128 *)a2, v14);
  v7 = *(_QWORD *)(a2 + 128);
  v6 = *(_QWORD *)(a2 + 136);
  outlined init with take of AST.Conditional.Condition.Kind(v13, v12);
  outlined init with take of AST.Conditional.Condition.Kind(v14, v11);
  specialized static AST.Conditional.Condition.Kind.== infix(_:_:)(v12, v11);
  if ((v8 & 1) == 0)
    return 0;
  return (v7 ^ v5) < 0x4000 && (v6 ^ v4) < 0x4000;
}

BOOL specialized static AST.MatchingOption.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2)
    return 0;
  return (*((_QWORD *)a1 + 1) ^ *((_QWORD *)a2 + 1)) < 0x4000
      && (*((_QWORD *)a1 + 2) ^ *((_QWORD *)a2 + 2)) < 0x4000uLL;
}

uint64_t specialized static AST.CustomCharacterClass.Range.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  char v25;

  specialized static AST.Atom.Kind.== infix(_:_:)(a1, a2);
  if ((v4 & 1) == 0)
    goto LABEL_10;
  v5 = type metadata accessor for AST.Atom(0);
  v6 = *(int *)(v5 + 20);
  v7 = a1 + v6;
  v8 = *(_QWORD *)(a1 + v6);
  v9 = (_QWORD *)(a2 + v6);
  if ((*v9 ^ v8) >> 14)
    goto LABEL_10;
  if ((*(_QWORD *)(v7 + 8) ^ v9[1]) >> 14)
    goto LABEL_10;
  v10 = v5;
  v11 = type metadata accessor for AST.CustomCharacterClass.Range(0);
  v12 = *(int *)(v11 + 20);
  v13 = a1 + v12;
  v14 = *(_QWORD *)(a1 + v12);
  v15 = (_QWORD *)(a2 + v12);
  if ((*v15 ^ v14) >> 14)
    goto LABEL_10;
  if ((*(_QWORD *)(v13 + 8) ^ v15[1]) >> 14)
    goto LABEL_10;
  v16 = v11;
  v17 = *(int *)(v11 + 24);
  v18 = a1 + v17;
  v19 = a2 + v17;
  specialized static AST.Atom.Kind.== infix(_:_:)(a1 + v17, a2 + v17);
  if ((v20 & 1) == 0
    || (v21 = *(int *)(v10 + 20),
        v22 = v18 + v21,
        v23 = *(_QWORD *)(v18 + v21),
        v24 = (_QWORD *)(v19 + v21),
        (*v24 ^ v23) >> 14)
    || (*(_QWORD *)(v22 + 8) ^ v24[1]) >> 14)
  {
LABEL_10:
    v25 = 0;
  }
  else
  {
    v25 = specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + *(int *)(v16 + 28)), *(_QWORD *)(a2 + *(int *)(v16 + 28)));
  }
  return v25 & 1;
}

BOOL specialized static AST.GlobalMatchingOption.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  _OWORD v9[2];

  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  v6 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v6;
  if ((specialized static AST.GlobalMatchingOption.Kind.== infix(_:_:)((uint64_t)v9) & 1) == 0)
    return 0;
  return (v5 ^ v3) < 0x4000 && (v4 ^ v2) < 0x4000;
}

BOOL specialized static AST.Atom.Number.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v2;

  v2 = *(_BYTE *)(a2 + 8);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 8))
      return 0;
  }
  else
  {
    if (*(_QWORD *)a1 != *(_QWORD *)a2)
      v2 = 1;
    if ((v2 & 1) != 0)
      return 0;
  }
  return (*(_QWORD *)(a2 + 16) ^ *(_QWORD *)(a1 + 16)) < 0x4000
      && (*(_QWORD *)(a2 + 24) ^ *(_QWORD *)(a1 + 24)) < 0x4000uLL;
}

uint64_t outlined copy of AST.Reference.Kind(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if (a5 == 2)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t outlined consume of AST.Reference.Kind(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if (a5 == 2)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t type metadata accessor for AST.Atom.CharacterProperty(uint64_t a1)
{
  return type metadata accessor for AST.Atom(a1, (uint64_t *)&type metadata singleton initialization cache for AST.Atom.CharacterProperty);
}

_OWORD *outlined init with take of AST.Atom.Callout(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  v3 = a1[2];
  v4 = a1[3];
  v5 = a1[5];
  a2[4] = a1[4];
  a2[5] = v5;
  a2[2] = v3;
  a2[3] = v4;
  v6 = a1[6];
  v7 = a1[7];
  v8 = a1[8];
  *(_OWORD *)((char *)a2 + 137) = *(_OWORD *)((char *)a1 + 137);
  a2[7] = v7;
  a2[8] = v8;
  a2[6] = v6;
  return a2;
}

uint64_t _s12_RegexParser3ASTV4AtomV7CalloutOWOg(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 152);
}

uint64_t outlined consume of AST.Atom.Callout(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  switch(a20)
  {
    case 2:
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    case 1:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    case 0:
      return outlined consume of AST.Atom.Callout.PCRE.Argument(result, a2, a3, a4, a5 & 1);
  }
  return result;
}

uint64_t outlined consume of AST.Atom.Callout.PCRE.Argument(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if ((a5 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t outlined init with take of AST.Atom.Kind(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t lazy protocol witness table accessor for type AST.Atom.Callout.PCRE and conformance AST.Atom.Callout.PCRE()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Atom.Callout.PCRE and conformance AST.Atom.Callout.PCRE;
  if (!lazy protocol witness table cache variable for type AST.Atom.Callout.PCRE and conformance AST.Atom.Callout.PCRE)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Atom.Callout.PCRE, &type metadata for AST.Atom.Callout.PCRE);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.Callout.PCRE and conformance AST.Atom.Callout.PCRE);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Atom.Callout.PCRE and conformance AST.Atom.Callout.PCRE;
  if (!lazy protocol witness table cache variable for type AST.Atom.Callout.PCRE and conformance AST.Atom.Callout.PCRE)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Atom.Callout.PCRE, &type metadata for AST.Atom.Callout.PCRE);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.Callout.PCRE and conformance AST.Atom.Callout.PCRE);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Atom.Callout.PCRE and conformance AST.Atom.Callout.PCRE;
  if (!lazy protocol witness table cache variable for type AST.Atom.Callout.PCRE and conformance AST.Atom.Callout.PCRE)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Atom.Callout.PCRE, &type metadata for AST.Atom.Callout.PCRE);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.Callout.PCRE and conformance AST.Atom.Callout.PCRE);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Atom.Callout.PCRE and conformance AST.Atom.Callout.PCRE;
  if (!lazy protocol witness table cache variable for type AST.Atom.Callout.PCRE and conformance AST.Atom.Callout.PCRE)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Atom.Callout.PCRE, &type metadata for AST.Atom.Callout.PCRE);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.Callout.PCRE and conformance AST.Atom.Callout.PCRE);
  }
  return result;
}

uint64_t type metadata accessor for AST.Atom.CharacterProperty.Kind(uint64_t a1)
{
  return type metadata accessor for AST.Atom(a1, (uint64_t *)&type metadata singleton initialization cache for AST.Atom.CharacterProperty.Kind);
}

BOOL specialized static AST.Atom.Callout.PCRE.Argument.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v13;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v6 = *(_BYTE *)(a1 + 32);
  v7 = *(_QWORD *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v11 = *(_BYTE *)(a2 + 32);
  if ((v6 & 1) == 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0)
    {
      outlined consume of AST.Atom.Callout.PCRE.Argument(*(_QWORD *)a1, v3, v5, v4, 0);
      outlined consume of AST.Atom.Callout.PCRE.Argument(v7, v8, v10, v9, 0);
      if ((v3 & 1) != 0)
      {
        if ((v8 & 1) == 0)
          return 0;
      }
      else if ((v8 & 1) != 0 || v2 != v7)
      {
        return 0;
      }
      return !((v10 ^ (unint64_t)v5) >> 14) && (v9 ^ (unint64_t)v4) < 0x4000;
    }
LABEL_14:
    outlined copy of AST.Atom.Callout.PCRE.Argument(v7, v8, v10, v9, v11);
    outlined consume of AST.Atom.Callout.PCRE.Argument(v2, v3, v5, v4, v6);
    outlined consume of AST.Atom.Callout.PCRE.Argument(v7, v8, v10, v9, v11);
    return 0;
  }
  if ((*(_BYTE *)(a2 + 32) & 1) == 0)
  {
    swift_bridgeObjectRetain();
    goto LABEL_14;
  }
  if (v2 == v7 && v3 == v8)
  {
    outlined copy of AST.Atom.Callout.PCRE.Argument(*(_QWORD *)a1, v3, v10, v9, 1);
    outlined copy of AST.Atom.Callout.PCRE.Argument(v2, v3, v5, v4, 1);
    outlined consume of AST.Atom.Callout.PCRE.Argument(v2, v3, v5, v4, 1);
    outlined consume of AST.Atom.Callout.PCRE.Argument(v2, v3, v10, v9, 1);
    return 1;
  }
  else
  {
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    outlined copy of AST.Atom.Callout.PCRE.Argument(v7, v8, v10, v9, 1);
    outlined copy of AST.Atom.Callout.PCRE.Argument(v2, v3, v5, v4, 1);
    outlined consume of AST.Atom.Callout.PCRE.Argument(v2, v3, v5, v4, 1);
    outlined consume of AST.Atom.Callout.PCRE.Argument(v7, v8, v10, v9, 1);
    return v13 & 1;
  }
}

uint64_t outlined copy of AST.Atom.Callout.PCRE.Argument(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if ((a5 & 1) != 0)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t type metadata accessor for Source.Located()
{
  return __swift_instantiateCanonicalPrespecializedGenericMetadata();
}

uint64_t outlined copy of AST.Conditional.Condition.Kind(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14)
{
  if ((a14 & 7) == 3)
  {
    outlined copy of AST.Group.Kind(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
    return swift_retain();
  }
  else if ((a14 & 7u) <= 1)
  {
    return outlined copy of AST.Reference.Kind(result, a2, a3, a4, a5);
  }
  return result;
}

uint64_t outlined copy of AST.Group.Kind(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t result;

  if (!a11)
    return swift_bridgeObjectRetain();
  if (a11 == 1 || a11 == 2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of AST.Conditional.Condition.Kind(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14)
{
  if ((a14 & 7) == 3)
  {
    outlined consume of AST.Group.Kind(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
    return swift_release();
  }
  else if ((a14 & 7u) <= 1)
  {
    return outlined consume of AST.Reference.Kind(result, a2, a3, a4, a5);
  }
  return result;
}

uint64_t outlined consume of AST.Group.Kind(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t result;

  if (!a11)
    return swift_bridgeObjectRelease();
  if (a11 == 1 || a11 == 2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

_OWORD *outlined init with take of AST.Conditional.Condition.Kind(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[3];
  a2[2] = a1[2];
  a2[3] = v4;
  *a2 = v2;
  a2[1] = v3;
  v5 = a1[4];
  v6 = a1[5];
  v7 = a1[7];
  a2[6] = a1[6];
  a2[7] = v7;
  a2[4] = v5;
  a2[5] = v6;
  return a2;
}

unint64_t lazy protocol witness table accessor for type AST.Conditional.Condition and conformance AST.Conditional.Condition()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Conditional.Condition and conformance AST.Conditional.Condition;
  if (!lazy protocol witness table cache variable for type AST.Conditional.Condition and conformance AST.Conditional.Condition)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Conditional.Condition, &type metadata for AST.Conditional.Condition);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Conditional.Condition and conformance AST.Conditional.Condition);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Conditional.Condition and conformance AST.Conditional.Condition;
  if (!lazy protocol witness table cache variable for type AST.Conditional.Condition and conformance AST.Conditional.Condition)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Conditional.Condition, &type metadata for AST.Conditional.Condition);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Conditional.Condition and conformance AST.Conditional.Condition);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Conditional.Condition and conformance AST.Conditional.Condition;
  if (!lazy protocol witness table cache variable for type AST.Conditional.Condition and conformance AST.Conditional.Condition)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Conditional.Condition, &type metadata for AST.Conditional.Condition);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Conditional.Condition and conformance AST.Conditional.Condition);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Conditional.Condition and conformance AST.Conditional.Condition;
  if (!lazy protocol witness table cache variable for type AST.Conditional.Condition and conformance AST.Conditional.Condition)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Conditional.Condition, &type metadata for AST.Conditional.Condition);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Conditional.Condition and conformance AST.Conditional.Condition);
  }
  return result;
}

uint64_t _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOg(_DWORD *a1)
{
  int v1;

  v1 = a1[26];
  if ((v1 & 4) != 0)
    return (*a1 + 4);
  else
    return v1 & 7;
}

uint64_t _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOj0_(uint64_t result)
{
  *(_QWORD *)(result + 104) &= 0xFFFFFFFFFFFFFFF8;
  return result;
}

uint64_t type metadata accessor for AST.CustomCharacterClass.Range(uint64_t a1)
{
  return type metadata accessor for AST.Atom(a1, (uint64_t *)&type metadata singleton initialization cache for AST.CustomCharacterClass.Range);
}

uint64_t type metadata accessor for AST.Atom(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined assign with take of AST.Atom.CharacterProperty.Kind(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t outlined retain of AST.Group(uint64_t a1)
{
  outlined copy of AST.Group.Kind(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_BYTE *)(a1 + 80));
  swift_retain();
  return a1;
}

unint64_t lazy protocol witness table accessor for type CompilerParseError and conformance CompilerParseError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CompilerParseError and conformance CompilerParseError;
  if (!lazy protocol witness table cache variable for type CompilerParseError and conformance CompilerParseError)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for CompilerParseError, &type metadata for CompilerParseError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompilerParseError and conformance CompilerParseError);
  }
  return result;
}

uint64_t outlined consume of CaptureStructure(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result;

  if (a4 == 2 || a4 == 1)
    return swift_release();
  if (!a4)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t outlined init with take of LocatedErrorProtocol(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x1DF0F3DA4](MEMORY[0x1E0DEA9A8], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t type metadata accessor for Source.LocatedError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Source.LocatedError);
}

unint64_t lazy protocol witness table accessor for type AST.AbsentFunction and conformance AST.AbsentFunction()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.AbsentFunction and conformance AST.AbsentFunction;
  if (!lazy protocol witness table cache variable for type AST.AbsentFunction and conformance AST.AbsentFunction)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.AbsentFunction, &type metadata for AST.AbsentFunction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.AbsentFunction and conformance AST.AbsentFunction);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.AbsentFunction and conformance AST.AbsentFunction;
  if (!lazy protocol witness table cache variable for type AST.AbsentFunction and conformance AST.AbsentFunction)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.AbsentFunction, &type metadata for AST.AbsentFunction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.AbsentFunction and conformance AST.AbsentFunction);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.AbsentFunction and conformance AST.AbsentFunction;
  if (!lazy protocol witness table cache variable for type AST.AbsentFunction and conformance AST.AbsentFunction)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.AbsentFunction, &type metadata for AST.AbsentFunction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.AbsentFunction and conformance AST.AbsentFunction);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.AbsentFunction and conformance AST.AbsentFunction;
  if (!lazy protocol witness table cache variable for type AST.AbsentFunction and conformance AST.AbsentFunction)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.AbsentFunction, &type metadata for AST.AbsentFunction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.AbsentFunction and conformance AST.AbsentFunction);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.AbsentFunction and conformance AST.AbsentFunction;
  if (!lazy protocol witness table cache variable for type AST.AbsentFunction and conformance AST.AbsentFunction)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.AbsentFunction, &type metadata for AST.AbsentFunction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.AbsentFunction and conformance AST.AbsentFunction);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Empty and conformance AST.Empty()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Empty and conformance AST.Empty;
  if (!lazy protocol witness table cache variable for type AST.Empty and conformance AST.Empty)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Empty, &type metadata for AST.Empty);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Empty and conformance AST.Empty);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Empty and conformance AST.Empty;
  if (!lazy protocol witness table cache variable for type AST.Empty and conformance AST.Empty)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Empty, &type metadata for AST.Empty);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Empty and conformance AST.Empty);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Empty and conformance AST.Empty;
  if (!lazy protocol witness table cache variable for type AST.Empty and conformance AST.Empty)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Empty, &type metadata for AST.Empty);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Empty and conformance AST.Empty);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Empty and conformance AST.Empty;
  if (!lazy protocol witness table cache variable for type AST.Empty and conformance AST.Empty)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Empty, &type metadata for AST.Empty);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Empty and conformance AST.Empty);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Empty and conformance AST.Empty;
  if (!lazy protocol witness table cache variable for type AST.Empty and conformance AST.Empty)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Empty, &type metadata for AST.Empty);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Empty and conformance AST.Empty);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.CustomCharacterClass and conformance AST.CustomCharacterClass()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.CustomCharacterClass and conformance AST.CustomCharacterClass;
  if (!lazy protocol witness table cache variable for type AST.CustomCharacterClass and conformance AST.CustomCharacterClass)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.CustomCharacterClass, &type metadata for AST.CustomCharacterClass);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.CustomCharacterClass and conformance AST.CustomCharacterClass);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.CustomCharacterClass and conformance AST.CustomCharacterClass;
  if (!lazy protocol witness table cache variable for type AST.CustomCharacterClass and conformance AST.CustomCharacterClass)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.CustomCharacterClass, &type metadata for AST.CustomCharacterClass);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.CustomCharacterClass and conformance AST.CustomCharacterClass);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.CustomCharacterClass and conformance AST.CustomCharacterClass;
  if (!lazy protocol witness table cache variable for type AST.CustomCharacterClass and conformance AST.CustomCharacterClass)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.CustomCharacterClass, &type metadata for AST.CustomCharacterClass);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.CustomCharacterClass and conformance AST.CustomCharacterClass);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.CustomCharacterClass and conformance AST.CustomCharacterClass;
  if (!lazy protocol witness table cache variable for type AST.CustomCharacterClass and conformance AST.CustomCharacterClass)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.CustomCharacterClass, &type metadata for AST.CustomCharacterClass);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.CustomCharacterClass and conformance AST.CustomCharacterClass);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.CustomCharacterClass and conformance AST.CustomCharacterClass;
  if (!lazy protocol witness table cache variable for type AST.CustomCharacterClass and conformance AST.CustomCharacterClass)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.CustomCharacterClass, &type metadata for AST.CustomCharacterClass);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.CustomCharacterClass and conformance AST.CustomCharacterClass);
  }
  return result;
}

uint64_t sub_1DEFE52D8()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type AST.Interpolation and conformance AST.Interpolation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Interpolation and conformance AST.Interpolation;
  if (!lazy protocol witness table cache variable for type AST.Interpolation and conformance AST.Interpolation)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Interpolation, &type metadata for AST.Interpolation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Interpolation and conformance AST.Interpolation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Interpolation and conformance AST.Interpolation;
  if (!lazy protocol witness table cache variable for type AST.Interpolation and conformance AST.Interpolation)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Interpolation, &type metadata for AST.Interpolation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Interpolation and conformance AST.Interpolation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Interpolation and conformance AST.Interpolation;
  if (!lazy protocol witness table cache variable for type AST.Interpolation and conformance AST.Interpolation)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Interpolation, &type metadata for AST.Interpolation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Interpolation and conformance AST.Interpolation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Interpolation and conformance AST.Interpolation;
  if (!lazy protocol witness table cache variable for type AST.Interpolation and conformance AST.Interpolation)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Interpolation, &type metadata for AST.Interpolation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Interpolation and conformance AST.Interpolation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Interpolation and conformance AST.Interpolation;
  if (!lazy protocol witness table cache variable for type AST.Interpolation and conformance AST.Interpolation)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Interpolation, &type metadata for AST.Interpolation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Interpolation and conformance AST.Interpolation);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Trivia and conformance AST.Trivia()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Trivia and conformance AST.Trivia;
  if (!lazy protocol witness table cache variable for type AST.Trivia and conformance AST.Trivia)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Trivia, &type metadata for AST.Trivia);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Trivia and conformance AST.Trivia);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Trivia and conformance AST.Trivia;
  if (!lazy protocol witness table cache variable for type AST.Trivia and conformance AST.Trivia)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Trivia, &type metadata for AST.Trivia);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Trivia and conformance AST.Trivia);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Trivia and conformance AST.Trivia;
  if (!lazy protocol witness table cache variable for type AST.Trivia and conformance AST.Trivia)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Trivia, &type metadata for AST.Trivia);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Trivia and conformance AST.Trivia);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Trivia and conformance AST.Trivia;
  if (!lazy protocol witness table cache variable for type AST.Trivia and conformance AST.Trivia)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Trivia, &type metadata for AST.Trivia);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Trivia and conformance AST.Trivia);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Trivia and conformance AST.Trivia;
  if (!lazy protocol witness table cache variable for type AST.Trivia and conformance AST.Trivia)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Trivia, &type metadata for AST.Trivia);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Trivia and conformance AST.Trivia);
  }
  return result;
}

uint64_t sub_1DEFE5384()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type AST.Quote and conformance AST.Quote()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Quote and conformance AST.Quote;
  if (!lazy protocol witness table cache variable for type AST.Quote and conformance AST.Quote)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Quote, &type metadata for AST.Quote);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Quote and conformance AST.Quote);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Quote and conformance AST.Quote;
  if (!lazy protocol witness table cache variable for type AST.Quote and conformance AST.Quote)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Quote, &type metadata for AST.Quote);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Quote and conformance AST.Quote);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Quote and conformance AST.Quote;
  if (!lazy protocol witness table cache variable for type AST.Quote and conformance AST.Quote)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Quote, &type metadata for AST.Quote);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Quote and conformance AST.Quote);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Quote and conformance AST.Quote;
  if (!lazy protocol witness table cache variable for type AST.Quote and conformance AST.Quote)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Quote, &type metadata for AST.Quote);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Quote and conformance AST.Quote);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Quote and conformance AST.Quote;
  if (!lazy protocol witness table cache variable for type AST.Quote and conformance AST.Quote)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Quote, &type metadata for AST.Quote);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Quote and conformance AST.Quote);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Quantification and conformance AST.Quantification()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Quantification and conformance AST.Quantification;
  if (!lazy protocol witness table cache variable for type AST.Quantification and conformance AST.Quantification)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Quantification, &type metadata for AST.Quantification);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Quantification and conformance AST.Quantification);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Quantification and conformance AST.Quantification;
  if (!lazy protocol witness table cache variable for type AST.Quantification and conformance AST.Quantification)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Quantification, &type metadata for AST.Quantification);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Quantification and conformance AST.Quantification);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Quantification and conformance AST.Quantification;
  if (!lazy protocol witness table cache variable for type AST.Quantification and conformance AST.Quantification)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Quantification, &type metadata for AST.Quantification);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Quantification and conformance AST.Quantification);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Quantification and conformance AST.Quantification;
  if (!lazy protocol witness table cache variable for type AST.Quantification and conformance AST.Quantification)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Quantification, &type metadata for AST.Quantification);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Quantification and conformance AST.Quantification);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Quantification and conformance AST.Quantification;
  if (!lazy protocol witness table cache variable for type AST.Quantification and conformance AST.Quantification)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Quantification, &type metadata for AST.Quantification);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Quantification and conformance AST.Quantification);
  }
  return result;
}

uint64_t outlined retain of AST.Quantification(uint64_t a1)
{
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t lazy protocol witness table accessor for type AST.Conditional and conformance AST.Conditional()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Conditional and conformance AST.Conditional;
  if (!lazy protocol witness table cache variable for type AST.Conditional and conformance AST.Conditional)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Conditional, &type metadata for AST.Conditional);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Conditional and conformance AST.Conditional);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Conditional and conformance AST.Conditional;
  if (!lazy protocol witness table cache variable for type AST.Conditional and conformance AST.Conditional)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Conditional, &type metadata for AST.Conditional);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Conditional and conformance AST.Conditional);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Conditional and conformance AST.Conditional;
  if (!lazy protocol witness table cache variable for type AST.Conditional and conformance AST.Conditional)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Conditional, &type metadata for AST.Conditional);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Conditional and conformance AST.Conditional);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Conditional and conformance AST.Conditional;
  if (!lazy protocol witness table cache variable for type AST.Conditional and conformance AST.Conditional)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Conditional, &type metadata for AST.Conditional);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Conditional and conformance AST.Conditional);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Conditional and conformance AST.Conditional;
  if (!lazy protocol witness table cache variable for type AST.Conditional and conformance AST.Conditional)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Conditional, &type metadata for AST.Conditional);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Conditional and conformance AST.Conditional);
  }
  return result;
}

uint64_t outlined retain of AST.Conditional(uint64_t a1)
{
  outlined copy of AST.Conditional.Condition.Kind(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_OWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120));
  swift_retain();
  swift_retain();
  return a1;
}

unint64_t lazy protocol witness table accessor for type AST.Group and conformance AST.Group()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Group and conformance AST.Group;
  if (!lazy protocol witness table cache variable for type AST.Group and conformance AST.Group)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Group, &type metadata for AST.Group);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Group and conformance AST.Group);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Group and conformance AST.Group;
  if (!lazy protocol witness table cache variable for type AST.Group and conformance AST.Group)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Group, &type metadata for AST.Group);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Group and conformance AST.Group);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Group and conformance AST.Group;
  if (!lazy protocol witness table cache variable for type AST.Group and conformance AST.Group)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Group, &type metadata for AST.Group);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Group and conformance AST.Group);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Group and conformance AST.Group;
  if (!lazy protocol witness table cache variable for type AST.Group and conformance AST.Group)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Group, &type metadata for AST.Group);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Group and conformance AST.Group);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Group and conformance AST.Group;
  if (!lazy protocol witness table cache variable for type AST.Group and conformance AST.Group)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Group, &type metadata for AST.Group);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Group and conformance AST.Group);
  }
  return result;
}

uint64_t objectdestroyTm()
{
  uint64_t v0;

  outlined consume of AST.Group.Kind(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_BYTE *)(v0 + 96));
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type AST.Concatenation and conformance AST.Concatenation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Concatenation and conformance AST.Concatenation;
  if (!lazy protocol witness table cache variable for type AST.Concatenation and conformance AST.Concatenation)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Concatenation, &type metadata for AST.Concatenation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Concatenation and conformance AST.Concatenation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Concatenation and conformance AST.Concatenation;
  if (!lazy protocol witness table cache variable for type AST.Concatenation and conformance AST.Concatenation)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Concatenation, &type metadata for AST.Concatenation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Concatenation and conformance AST.Concatenation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Concatenation and conformance AST.Concatenation;
  if (!lazy protocol witness table cache variable for type AST.Concatenation and conformance AST.Concatenation)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Concatenation, &type metadata for AST.Concatenation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Concatenation and conformance AST.Concatenation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Concatenation and conformance AST.Concatenation;
  if (!lazy protocol witness table cache variable for type AST.Concatenation and conformance AST.Concatenation)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Concatenation, &type metadata for AST.Concatenation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Concatenation and conformance AST.Concatenation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Concatenation and conformance AST.Concatenation;
  if (!lazy protocol witness table cache variable for type AST.Concatenation and conformance AST.Concatenation)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Concatenation, &type metadata for AST.Concatenation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Concatenation and conformance AST.Concatenation);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Alternation and conformance AST.Alternation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Alternation and conformance AST.Alternation;
  if (!lazy protocol witness table cache variable for type AST.Alternation and conformance AST.Alternation)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Alternation, &type metadata for AST.Alternation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Alternation and conformance AST.Alternation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Alternation and conformance AST.Alternation;
  if (!lazy protocol witness table cache variable for type AST.Alternation and conformance AST.Alternation)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Alternation, &type metadata for AST.Alternation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Alternation and conformance AST.Alternation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Alternation and conformance AST.Alternation;
  if (!lazy protocol witness table cache variable for type AST.Alternation and conformance AST.Alternation)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Alternation, &type metadata for AST.Alternation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Alternation and conformance AST.Alternation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Alternation and conformance AST.Alternation;
  if (!lazy protocol witness table cache variable for type AST.Alternation and conformance AST.Alternation)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Alternation, &type metadata for AST.Alternation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Alternation and conformance AST.Alternation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Alternation and conformance AST.Alternation;
  if (!lazy protocol witness table cache variable for type AST.Alternation and conformance AST.Alternation)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Alternation, &type metadata for AST.Alternation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Alternation and conformance AST.Alternation);
  }
  return result;
}

unint64_t specialized Collection.dropFirst(_:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v3 = HIBYTE(a3) & 0xF;
    else
      v3 = a2 & 0xFFFFFFFFFFFFLL;
    v4 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v4 = 11;
    v5 = v4 | (v3 << 16);
    result = String.index(_:offsetBy:limitedBy:)();
    if ((v6 & 1) != 0)
      result = v5;
    if (4 * v3 >= result >> 14)
      return String.subscript.getter();
  }
  __break(1u);
  return result;
}

uint64_t _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5H15VGXEfU_Si_SsTG5SiTf1nnc_nTf4xnn_n(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unsigned int v36;
  char v37;
  uint64_t v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  uint64_t v42;
  unsigned int v43;
  char v44;
  uint64_t v45;

  v10 = a2;
  v11 = result;
  v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0)
    LOBYTE(v12) = 1;
  v13 = 4 << v12;
  v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      v15 = a2 >> 16;
      if (v14 != v13)
        goto LABEL_6;
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0)
    v16 = HIBYTE(a5) & 0xF;
  if (v16 < a2 >> 16)
    goto LABEL_95;
  result = String.UTF8View._foreignDistance(from:to:)();
  v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, a4, a5);
    v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0)
      goto LABEL_8;
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0)
    v17 = a4 & 0xFFFFFFFFFFFFLL;
  if (v17 < v10 >> 16)
    goto LABEL_91;
  if (v17 < a3 >> 16)
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  result = String.UTF8View._foreignDistance(from:to:)();
LABEL_21:
  v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_90;
  }
  if (v18 < v15)
  {
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11)
    v19 = 0;
  v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        v31 = a6 + 48;
        v32 = a6 + 55;
        v33 = a6 + 87;
        if (a6 > 10)
        {
          v31 = 58;
        }
        else
        {
          v33 = 97;
          v32 = 65;
        }
        if (v19)
        {
          v24 = 0;
          v34 = v19 + 1;
          v35 = result - 1;
          do
          {
            v36 = *v34;
            if (v36 < 0x30 || v36 >= v31)
            {
              if (v36 < 0x41 || v36 >= v32)
              {
                v29 = 0;
                if (v36 < 0x61 || v36 >= v33)
                  return v29;
                v37 = -87;
              }
              else
              {
                v37 = -55;
              }
            }
            else
            {
              v37 = -48;
            }
            v38 = v24 * a6;
            if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63)
              return 0;
            v24 = v38 + (v36 + v37);
            if (__OFADD__(v38, (v36 + v37)))
              return 0;
            ++v34;
            --v35;
          }
          while (v35);
          return v24;
        }
        return 0;
      }
      return 0;
    }
    goto LABEL_94;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      v39 = a6 + 48;
      v40 = a6 + 55;
      v41 = a6 + 87;
      if (a6 > 10)
      {
        v39 = 58;
      }
      else
      {
        v41 = 97;
        v40 = 65;
      }
      if (v19)
      {
        v42 = 0;
        do
        {
          v43 = *v19;
          if (v43 < 0x30 || v43 >= v39)
          {
            if (v43 < 0x41 || v43 >= v40)
            {
              v29 = 0;
              if (v43 < 0x61 || v43 >= v41)
                return v29;
              v44 = -87;
            }
            else
            {
              v44 = -55;
            }
          }
          else
          {
            v44 = -48;
          }
          v45 = v42 * a6;
          if ((unsigned __int128)(v42 * (__int128)a6) >> 64 != (v42 * a6) >> 63)
            return 0;
          v42 = v45 + (v43 + v44);
          if (__OFADD__(v45, (v43 + v44)))
            return 0;
          ++v19;
          --result;
        }
        while (result);
        return v45 + (v43 + v44);
      }
      return 0;
    }
    return 0;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      v21 = a6 + 48;
      v22 = a6 + 55;
      v23 = a6 + 87;
      if (a6 > 10)
      {
        v21 = 58;
      }
      else
      {
        v23 = 97;
        v22 = 65;
      }
      if (v19)
      {
        v24 = 0;
        v25 = v19 + 1;
        v26 = result - 1;
        while (1)
        {
          v27 = *v25;
          if (v27 < 0x30 || v27 >= v21)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              v29 = 0;
              if (v27 < 0x61 || v27 >= v23)
                return v29;
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          v30 = v24 * a6;
          if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63)
            return 0;
          v24 = v30 - (v27 + v28);
          if (__OFSUB__(v30, (v27 + v28)))
            return 0;
          ++v25;
          if (!--v26)
            return v24;
        }
      }
      return 0;
    }
    return 0;
  }
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
  return result;
}

unint64_t specialized static Parser.parseAge(_:)()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t result;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  char v25;
  unsigned __int8 *v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  __int16 v38;
  char v39;

  v0 = String.subscript.getter();
  v2 = v1;
  v3 = v1 >> 14;
  swift_bridgeObjectRetain();
  if (v3 == v0 >> 14)
    goto LABEL_8;
  v4 = Substring.subscript.getter();
  if (!v5)
    goto LABEL_8;
  if (v4 == 86 && v5 == 0xE100000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) == 0)
    {
LABEL_8:
      swift_bridgeObjectRelease();
      v8 = 46;
      goto LABEL_12;
    }
  }
  Substring.subscript.getter();
  swift_bridgeObjectRelease();
  v9 = Substring.index(after:)();
  result = swift_bridgeObjectRelease();
  if (v3 < v9 >> 14)
  {
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v0 = Substring.subscript.getter();
  v2 = v11;
  swift_bridgeObjectRelease();
  v8 = 95;
LABEL_12:
  v12 = specialized Collection<>.firstIndex(of:)(v8, 0xE100000000000000, v0, v2);
  v14 = v13;
  swift_bridgeObjectRelease();
  if ((v14 & 1) != 0)
    goto LABEL_28;
  if (v12 >> 14 < v0 >> 14)
  {
    __break(1u);
    goto LABEL_31;
  }
  swift_bridgeObjectRetain();
  v15 = Substring.subscript.getter();
  v19 = v18;
  if (!((v15 ^ v16) >> 14))
  {
LABEL_31:
    swift_bridgeObjectRelease_n();
    goto LABEL_28;
  }
  v20 = v15;
  v21 = v16;
  v22 = v17;
  v23 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n(v15, v16, v17, v18, 10);
  if ((v24 & 0x100) != 0)
  {
    v26 = specialized _parseInteger<A, B>(ascii:radix:)(v20, v21, v22, v19, 10);
    v25 = v27;
  }
  else
  {
    v25 = v24;
    v26 = (unsigned __int8 *)v23;
  }
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v25 & 1) != 0)
    goto LABEL_28;
  if (v12 >> 14 > v2 >> 14)
    goto LABEL_33;
  Substring.subscript.getter();
  v29 = v28;
  swift_bridgeObjectRelease();
  result = Substring.index(_:offsetBy:limitedBy:)();
  if ((v30 & 1) != 0)
    result = v29;
  if (v29 >> 14 >= result >> 14)
  {
    v31 = Substring.subscript.getter();
    v33 = v32;
    v35 = v34;
    v37 = v36;
    swift_bridgeObjectRelease();
    if ((v31 ^ v33) >= 0x4000)
    {
      _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n(v31, v33, v35, v37, 10);
      if ((v38 & 0x100) != 0)
        specialized _parseInteger<A, B>(ascii:radix:)(v31, v33, v35, v37, 10);
      v39 = v38;
      swift_bridgeObjectRelease();
      if ((v39 & 1) == 0)
        return (unint64_t)v26;
      return 0;
    }
LABEL_28:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t specialized String.UTF8View.subscript.getter(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = a2;
  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((a2 & 0xC) == 4 << v8)
  {
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a3, a4);
    v6 = result;
  }
  if ((v7 & 0xC) == v9)
  {
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(v7, a3, a4);
    v7 = result;
  }
  v10 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a4 & 0x2000000000000000) != 0)
    v10 = HIBYTE(a4) & 0xF;
  if (v6 >> 14 <= 4 * v10 && v6 >> 14 >= v7 >> 14)
    return v7;
  __break(1u);
  return result;
}

unint64_t specialized Collection.dropFirst(_:)(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t v12;

  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v3 = a3;
    v4 = a2;
    v8 = HIBYTE(a3) & 0xF;
    v7 = a2 & 0xFFFFFFFFFFFFLL;
    if ((a3 & 0x2000000000000000) != 0)
      v6 = HIBYTE(a3) & 0xF;
    else
      v6 = a2 & 0xFFFFFFFFFFFFLL;
    v5 = v6 << 16;
    if ((a3 & 0x1000000000000000) == 0)
    {
      if (v6 >= a1)
      {
        result = (a1 << 16) | 4;
        goto LABEL_18;
      }
      if ((a3 & 0x2000000000000000) == 0)
      {
        v9 = a2 << 16;
        goto LABEL_17;
      }
      goto LABEL_13;
    }
  }
  result = String.UTF8View._foreignIndex(_:offsetBy:limitedBy:)();
  if ((v11 & 1) == 0)
    goto LABEL_18;
  if ((v3 & 0x2000000000000000) != 0)
LABEL_13:
    v7 = v8;
  v9 = v7 << 16;
  if ((v3 & 0x1000000000000000) != 0 && (v4 & 0x800000000000000) == 0)
  {
    result = v9 | 0xB;
    goto LABEL_18;
  }
LABEL_17:
  result = v9 | 7;
LABEL_18:
  if (4 * v6 < result >> 14)
  {
    __break(1u);
  }
  else
  {
    v12 = 7;
    if (((v3 >> 60) & ((v4 & 0x800000000000000) == 0)) != 0)
      v12 = 11;
    return specialized String.UTF8View.subscript.getter(result, v5 | v12, v4, v3);
  }
  return result;
}

unint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  BOOL v5;

  if (result > 0x10F800 || a3 > 0x10F800)
  {
    __break(1u);
    goto LABEL_16;
  }
  v4 = a3 - result;
  if (a2 >= 1)
  {
    if (v4 < 0 || v4 >= a2)
      goto LABEL_12;
    return 0;
  }
  if (v4 <= 0 && v4 > a2)
    return 0;
LABEL_12:
  v5 = __OFADD__(result, a2);
  result += a2;
  if (v5)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (result > 0x10F800)
LABEL_17:
    __break(1u);
  return result;
}

uint64_t specialized Collection.prefix(_:)(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;

  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  v3 = a3;
  v4 = a2;
  v6 = HIBYTE(a3) & 0xF;
  v5 = a2 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0x2000000000000000) != 0)
    v7 = HIBYTE(a3) & 0xF;
  else
    v7 = a2 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0x1000000000000000) != 0)
  {
LABEL_11:
    v10 = String.UTF8View._foreignIndex(_:offsetBy:limitedBy:)();
    if ((v11 & 1) == 0)
    {
      v9 = v10;
      return specialized String.UTF8View.subscript.getter(15, v9, v4, v3);
    }
    if ((v3 & 0x2000000000000000) == 0)
      goto LABEL_15;
    goto LABEL_14;
  }
  if (v7 >= a1)
  {
    v9 = (a1 << 16) | 4;
    return specialized String.UTF8View.subscript.getter(15, v9, v4, v3);
  }
  if ((a3 & 0x2000000000000000) == 0)
  {
    v8 = a2 << 16;
LABEL_18:
    v9 = v8 | 7;
    return specialized String.UTF8View.subscript.getter(15, v9, v4, v3);
  }
LABEL_14:
  v5 = v6;
LABEL_15:
  v8 = v5 << 16;
  if ((v3 & 0x1000000000000000) == 0 || (v4 & 0x800000000000000) != 0)
    goto LABEL_18;
  v9 = v8 | 0xB;
  return specialized String.UTF8View.subscript.getter(15, v9, v4, v3);
}

uint64_t specialized Substring.UTF8View.subscript.getter(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v10 = a2;
  v11 = result;
  v12 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000) == 0)
    LOBYTE(v12) = 1;
  v13 = 4 << v12;
  if ((a2 & 0xC) == 4 << v12)
  {
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a5, a6);
    v10 = result;
  }
  if ((v11 & 0xC) == v13)
  {
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a5, a6);
    v11 = result;
  }
  if (v10 >> 14 <= a4 >> 14 && v11 >> 14 >= a3 >> 14 && v10 >> 14 >= v11 >> 14)
    return v11;
  __break(1u);
  return result;
}

uint64_t _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5SS_Tg5063_sSS8decoding2asSSx_q_mtcSlRzs16_UnicodeEncodingR_8CodeUnitQy_7g26Rtzr0_lufcSSSRyAGGXEfU_Ss8iJ14V_s0C0O0H0OTG5Tf1nnc_nTf4xn_n(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;

  v8 = a2;
  v9 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0)
    LOBYTE(v9) = 1;
  v10 = 4 << v9;
  v11 = a2 & 0xC;
  if (v11 == 4 << v9)
  {
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      v12 = a2 >> 16;
      if (v11 != v10)
        goto LABEL_6;
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  v13 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0)
    v13 = HIBYTE(a5) & 0xF;
  if (v13 < a2 >> 16)
    goto LABEL_28;
  result = String.UTF8View._foreignDistance(from:to:)();
  v12 = result;
  if (v11 == v10)
  {
LABEL_14:
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(v8, a4, a5);
    v8 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v10)
  {
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0)
      goto LABEL_8;
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    result = (a3 >> 16) - (v8 >> 16);
LABEL_21:
    if (__OFADD__(v12, result))
    {
      __break(1u);
    }
    else if (v12 + result >= v12)
    {
      return static String._fromUTF8Repairing(_:)();
    }
    __break(1u);
    goto LABEL_26;
  }
  v14 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0)
    v14 = a4 & 0xFFFFFFFFFFFFLL;
  if (v14 < v8 >> 16)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v14 >= a3 >> 16)
  {
    result = String.UTF8View._foreignDistance(from:to:)();
    goto LABEL_21;
  }
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t result, int64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  int64_t v9;
  size_t isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_26;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v6 = result;
  v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  v12 = *(_QWORD *)(type metadata accessor for AST.CustomCharacterClass.Member(0) - 8);
  v13 = (char *)v4 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  v14 = *(_QWORD *)(v12 + 72);
  v15 = v14 * v6;
  v16 = &v13[v14 * v6];
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_24;
  v17 = v4[2];
  if (__OFSUB__(v17, a2))
    goto LABEL_30;
  if (v15 < v14 * a2 || v16 >= &v13[v14 * a2 + (v17 - a2) * v14])
  {
    result = swift_arrayInitWithTakeFrontToBack();
  }
  else if (v15 != v14 * a2)
  {
    result = swift_arrayInitWithTakeBackToFront();
  }
  v19 = v4[2];
  v20 = __OFADD__(v19, v8);
  v21 = v19 - v7;
  if (!v20)
  {
    v4[2] = v21;
LABEL_24:
    *(_QWORD *)v2 = v4;
    return result;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, void *a6)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  Swift::String v17;
  char *v18;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  unint64_t v29;
  uint64_t count;
  Swift::String into;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v23._countAndFlagsBits = a5;
  v23._object = a6;
  v25 = *(_QWORD *)(result + 16);
  if (v25)
  {
    v6 = a4;
    v7 = 0;
    v24 = result + 32;
    while (1)
    {
      v8 = *(_QWORD *)(v24 + 8 * v7);
      swift_retain();
      v35 = v8;
      v34 = v8;
      AST.Node._associatedValue.getter();
      v9 = v32;
      v10 = v33;
      __swift_project_boxed_opaque_existential_1Tm(&into, v32);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v10 + 16))(&v34, v9, v10);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&into);
      String.subscript.getter();
      count = Substring.distance(from:to:)();
      result = swift_bridgeObjectRelease();
      v28 = *(_QWORD *)(*v6 + 16);
      if (v28)
        break;
LABEL_10:
      into = v23;
      v34 = v35;
      swift_bridgeObjectRetain();
      AST.Node._renderRange(count:into:)(count, &into);
      v17 = into;
      v18 = (char *)*v6;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v6 = (uint64_t)v18;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v18 + 2) + 1, 1, v18);
        *v6 = (uint64_t)v18;
      }
      v21 = *((_QWORD *)v18 + 2);
      v20 = *((_QWORD *)v18 + 3);
      if (v21 >= v20 >> 1)
      {
        v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v20 > 1), v21 + 1, 1, v18);
        *v6 = (uint64_t)v18;
      }
      *((_QWORD *)v18 + 2) = v21 + 1;
      *(Swift::String *)&v18[16 * v21 + 32] = v17;
LABEL_19:
      result = swift_release();
      if (!v26 && ++v7 != v25)
        continue;
      return result;
    }
    v11 = 0;
LABEL_5:
    if (v11 >= *(_QWORD *)(*v6 + 16))
    {
      __break(1u);
    }
    else
    {
      v29 = v11 + 1;
      swift_bridgeObjectRetain();
      v12 = String.subscript.getter();
      v14 = v13;
      swift_bridgeObjectRelease();
      v15 = v12;
      while ((v15 ^ v14) >= 0x4000)
      {
        Substring.subscript.getter();
        v15 = Substring.index(after:)();
        v16 = Character.isWhitespace.getter();
        swift_bridgeObjectRelease();
        if ((v16 & 1) == 0)
        {
          result = swift_bridgeObjectRelease();
          ++v11;
          v6 = a4;
          if (v29 != v28)
            goto LABEL_5;
          goto LABEL_10;
        }
      }
      swift_bridgeObjectRelease();
      into._countAndFlagsBits = v35;
      v6 = a4;
      v22 = *a4;
      result = swift_isUniquelyReferenced_nonNull_native();
      *a4 = v22;
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v22);
        v22 = result;
        *a4 = result;
      }
      if (v11 < *(_QWORD *)(v22 + 16))
      {
        AST.Node._renderRange(count:into:)(count, (Swift::String *)(v22 + 16 * v11 + 32));
        goto LABEL_19;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1DEFE6890()
{
  return 16;
}

__n128 sub_1DEFE689C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1DEFE68A8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in _TreeNode.height.getter()
{
  return swift_getAtKeyPath();
}

unint64_t lazy protocol witness table accessor for type Unicode.UTF32 and conformance Unicode.UTF32()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Unicode.UTF32 and conformance Unicode.UTF32;
  if (!lazy protocol witness table cache variable for type Unicode.UTF32 and conformance Unicode.UTF32)
  {
    result = MEMORY[0x1DF0F3DA4](MEMORY[0x1E0DEE500], MEMORY[0x1E0DEE4F8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Unicode.UTF32 and conformance Unicode.UTF32);
  }
  return result;
}

uint64_t partial apply for closure #1 in static TypeConstruction.tupleType<A>(of:labels:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *(_QWORD *)(v1 + 24);
  if (v3)
    result = specialized String.withCString<A>(_:)(*(_QWORD *)(v1 + 16), v3);
  else
    result = swift_getTupleTypeMetadata();
  *a1 = result;
  a1[1] = v5;
  return result;
}

unint64_t lazy protocol witness table accessor for type AST and conformance AST()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST and conformance AST;
  if (!lazy protocol witness table cache variable for type AST and conformance AST)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST, &type metadata for AST);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST and conformance AST);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST and conformance AST;
  if (!lazy protocol witness table cache variable for type AST and conformance AST)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST, &type metadata for AST);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST and conformance AST);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST and conformance AST;
  if (!lazy protocol witness table cache variable for type AST and conformance AST)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST, &type metadata for AST);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST and conformance AST);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Node and conformance AST.Node()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Node and conformance AST.Node;
  if (!lazy protocol witness table cache variable for type AST.Node and conformance AST.Node)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Node, &type metadata for AST.Node);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Node and conformance AST.Node);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Node and conformance AST.Node;
  if (!lazy protocol witness table cache variable for type AST.Node and conformance AST.Node)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Node, &type metadata for AST.Node);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Node and conformance AST.Node);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Node and conformance AST.Node;
  if (!lazy protocol witness table cache variable for type AST.Node and conformance AST.Node)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Node, &type metadata for AST.Node);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Node and conformance AST.Node);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AST.Alternation(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AST.Alternation and conformance AST.Alternation();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type AST.Alternation and conformance AST.Alternation();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for AST.Alternation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Alternation and conformance AST.Alternation, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Alternation and conformance AST.Alternation);
}

unint64_t instantiation function for generic protocol witness table for AST.Concatenation(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AST.Concatenation and conformance AST.Concatenation();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type AST.Concatenation and conformance AST.Concatenation();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for AST.Concatenation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Concatenation and conformance AST.Concatenation, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Concatenation and conformance AST.Concatenation);
}

unint64_t instantiation function for generic protocol witness table for AST.Quote(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AST.Quote and conformance AST.Quote();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for AST.Quote(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Quote and conformance AST.Quote, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Quote and conformance AST.Quote);
}

unint64_t instantiation function for generic protocol witness table for AST.Trivia(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AST.Trivia and conformance AST.Trivia();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for AST.Trivia(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Trivia and conformance AST.Trivia, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Trivia and conformance AST.Trivia);
}

unint64_t instantiation function for generic protocol witness table for AST.Interpolation(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AST.Interpolation and conformance AST.Interpolation();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for AST.Interpolation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Interpolation and conformance AST.Interpolation, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Interpolation and conformance AST.Interpolation);
}

unint64_t instantiation function for generic protocol witness table for AST.Empty(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AST.Empty and conformance AST.Empty();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for AST.Empty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Empty and conformance AST.Empty, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Empty and conformance AST.Empty);
}

unint64_t lazy protocol witness table accessor for type AST.AbsentFunction.Start and conformance AST.AbsentFunction.Start()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.AbsentFunction.Start and conformance AST.AbsentFunction.Start;
  if (!lazy protocol witness table cache variable for type AST.AbsentFunction.Start and conformance AST.AbsentFunction.Start)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.AbsentFunction.Start, &type metadata for AST.AbsentFunction.Start);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.AbsentFunction.Start and conformance AST.AbsentFunction.Start);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.AbsentFunction.Kind and conformance AST.AbsentFunction.Kind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.AbsentFunction.Kind and conformance AST.AbsentFunction.Kind;
  if (!lazy protocol witness table cache variable for type AST.AbsentFunction.Kind and conformance AST.AbsentFunction.Kind)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.AbsentFunction.Kind, &type metadata for AST.AbsentFunction.Kind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.AbsentFunction.Kind and conformance AST.AbsentFunction.Kind);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AST.AbsentFunction(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AST.AbsentFunction and conformance AST.AbsentFunction();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type AST.AbsentFunction and conformance AST.AbsentFunction();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for AST.AbsentFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.AbsentFunction and conformance AST.AbsentFunction, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.AbsentFunction and conformance AST.AbsentFunction);
}

unint64_t lazy protocol witness table accessor for type AST.Reference.Kind and conformance AST.Reference.Kind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Reference.Kind and conformance AST.Reference.Kind;
  if (!lazy protocol witness table cache variable for type AST.Reference.Kind and conformance AST.Reference.Kind)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Reference.Kind, &type metadata for AST.Reference.Kind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Reference.Kind and conformance AST.Reference.Kind);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Reference and conformance AST.Reference()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Reference and conformance AST.Reference;
  if (!lazy protocol witness table cache variable for type AST.Reference and conformance AST.Reference)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Reference, &type metadata for AST.Reference);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Reference and conformance AST.Reference);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Reference and conformance AST.Reference;
  if (!lazy protocol witness table cache variable for type AST.Reference and conformance AST.Reference)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Reference, &type metadata for AST.Reference);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Reference and conformance AST.Reference);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Reference and conformance AST.Reference;
  if (!lazy protocol witness table cache variable for type AST.Reference and conformance AST.Reference)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Reference, &type metadata for AST.Reference);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Reference and conformance AST.Reference);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.GlobalMatchingOptionSequence and conformance AST.GlobalMatchingOptionSequence()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.GlobalMatchingOptionSequence and conformance AST.GlobalMatchingOptionSequence;
  if (!lazy protocol witness table cache variable for type AST.GlobalMatchingOptionSequence and conformance AST.GlobalMatchingOptionSequence)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.GlobalMatchingOptionSequence, &type metadata for AST.GlobalMatchingOptionSequence);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.GlobalMatchingOptionSequence and conformance AST.GlobalMatchingOptionSequence);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.GlobalMatchingOptionSequence and conformance AST.GlobalMatchingOptionSequence;
  if (!lazy protocol witness table cache variable for type AST.GlobalMatchingOptionSequence and conformance AST.GlobalMatchingOptionSequence)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.GlobalMatchingOptionSequence, &type metadata for AST.GlobalMatchingOptionSequence);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.GlobalMatchingOptionSequence and conformance AST.GlobalMatchingOptionSequence);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.GlobalMatchingOptionSequence and conformance AST.GlobalMatchingOptionSequence;
  if (!lazy protocol witness table cache variable for type AST.GlobalMatchingOptionSequence and conformance AST.GlobalMatchingOptionSequence)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.GlobalMatchingOptionSequence, &type metadata for AST.GlobalMatchingOptionSequence);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.GlobalMatchingOptionSequence and conformance AST.GlobalMatchingOptionSequence);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AST.Group(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AST.Group and conformance AST.Group();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type AST.Group and conformance AST.Group();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for AST.Quantification(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AST.Quantification and conformance AST.Quantification();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type AST.Quantification and conformance AST.Quantification();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for Equatable in AST.Atom.Kind()
{
  return lazy protocol witness table accessor for type AST.Atom and conformance AST.Atom(&lazy protocol witness table cache variable for type AST.Atom.Kind and conformance AST.Atom.Kind, type metadata accessor for AST.Atom.Kind, (uint64_t)&protocol conformance descriptor for AST.Atom.Kind);
}

uint64_t lazy protocol witness table accessor for type AST.Atom and conformance AST.Atom(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x1DF0F3DA4](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in AST.Atom()
{
  return lazy protocol witness table accessor for type AST.Atom and conformance AST.Atom(&lazy protocol witness table cache variable for type AST.Atom and conformance AST.Atom, type metadata accessor for AST.Atom, (uint64_t)&protocol conformance descriptor for AST.Atom);
}

uint64_t instantiation function for generic protocol witness table for AST.Atom(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type AST.Atom and conformance AST.Atom(&lazy protocol witness table cache variable for type AST.Atom and conformance AST.Atom, type metadata accessor for AST.Atom, (uint64_t)&protocol conformance descriptor for AST.Atom);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type AST.Atom and conformance AST.Atom(&lazy protocol witness table cache variable for type AST.Atom and conformance AST.Atom, type metadata accessor for AST.Atom, (uint64_t)&protocol conformance descriptor for AST.Atom);
  result = lazy protocol witness table accessor for type AST.Atom and conformance AST.Atom(&lazy protocol witness table cache variable for type AST.Atom and conformance AST.Atom, type metadata accessor for AST.Atom, (uint64_t)&protocol conformance descriptor for AST.Atom);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Atom.Number and conformance AST.Atom.Number()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Atom.Number and conformance AST.Atom.Number;
  if (!lazy protocol witness table cache variable for type AST.Atom.Number and conformance AST.Atom.Number)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Atom.Number, &type metadata for AST.Atom.Number);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.Number and conformance AST.Atom.Number);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Atom.Number and conformance AST.Atom.Number;
  if (!lazy protocol witness table cache variable for type AST.Atom.Number and conformance AST.Atom.Number)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Atom.Number, &type metadata for AST.Atom.Number);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.Number and conformance AST.Atom.Number);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Atom.Number and conformance AST.Atom.Number;
  if (!lazy protocol witness table cache variable for type AST.Atom.Number and conformance AST.Atom.Number)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Atom.Number, &type metadata for AST.Atom.Number);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.Number and conformance AST.Atom.Number);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Atom.Scalar and conformance AST.Atom.Scalar()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Atom.Scalar and conformance AST.Atom.Scalar;
  if (!lazy protocol witness table cache variable for type AST.Atom.Scalar and conformance AST.Atom.Scalar)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Atom.Scalar, &type metadata for AST.Atom.Scalar);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.Scalar and conformance AST.Atom.Scalar);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Atom.ScalarSequence and conformance AST.Atom.ScalarSequence()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Atom.ScalarSequence and conformance AST.Atom.ScalarSequence;
  if (!lazy protocol witness table cache variable for type AST.Atom.ScalarSequence and conformance AST.Atom.ScalarSequence)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Atom.ScalarSequence, &type metadata for AST.Atom.ScalarSequence);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.ScalarSequence and conformance AST.Atom.ScalarSequence);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Atom.EscapedBuiltin and conformance AST.Atom.EscapedBuiltin()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Atom.EscapedBuiltin and conformance AST.Atom.EscapedBuiltin;
  if (!lazy protocol witness table cache variable for type AST.Atom.EscapedBuiltin and conformance AST.Atom.EscapedBuiltin)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Atom.EscapedBuiltin, &type metadata for AST.Atom.EscapedBuiltin);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.EscapedBuiltin and conformance AST.Atom.EscapedBuiltin);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in AST.Atom.CharacterProperty()
{
  return lazy protocol witness table accessor for type AST.Atom and conformance AST.Atom(&lazy protocol witness table cache variable for type AST.Atom.CharacterProperty and conformance AST.Atom.CharacterProperty, type metadata accessor for AST.Atom.CharacterProperty, (uint64_t)&protocol conformance descriptor for AST.Atom.CharacterProperty);
}

unint64_t lazy protocol witness table accessor for type AST.Atom.CharacterProperty.Kind.MapKind and conformance AST.Atom.CharacterProperty.Kind.MapKind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Atom.CharacterProperty.Kind.MapKind and conformance AST.Atom.CharacterProperty.Kind.MapKind;
  if (!lazy protocol witness table cache variable for type AST.Atom.CharacterProperty.Kind.MapKind and conformance AST.Atom.CharacterProperty.Kind.MapKind)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Atom.CharacterProperty.Kind.MapKind, &type metadata for AST.Atom.CharacterProperty.Kind.MapKind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.CharacterProperty.Kind.MapKind and conformance AST.Atom.CharacterProperty.Kind.MapKind);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in AST.Atom.CharacterProperty.Kind()
{
  return lazy protocol witness table accessor for type AST.Atom and conformance AST.Atom(&lazy protocol witness table cache variable for type AST.Atom.CharacterProperty.Kind and conformance AST.Atom.CharacterProperty.Kind, type metadata accessor for AST.Atom.CharacterProperty.Kind, (uint64_t)&protocol conformance descriptor for AST.Atom.CharacterProperty.Kind);
}

unint64_t lazy protocol witness table accessor for type AST.Atom.CharacterProperty.PCRESpecialCategory and conformance AST.Atom.CharacterProperty.PCRESpecialCategory()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Atom.CharacterProperty.PCRESpecialCategory and conformance AST.Atom.CharacterProperty.PCRESpecialCategory;
  if (!lazy protocol witness table cache variable for type AST.Atom.CharacterProperty.PCRESpecialCategory and conformance AST.Atom.CharacterProperty.PCRESpecialCategory)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Atom.CharacterProperty.PCRESpecialCategory, &type metadata for AST.Atom.CharacterProperty.PCRESpecialCategory);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.CharacterProperty.PCRESpecialCategory and conformance AST.Atom.CharacterProperty.PCRESpecialCategory);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Atom.CharacterProperty.JavaSpecial and conformance AST.Atom.CharacterProperty.JavaSpecial()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Atom.CharacterProperty.JavaSpecial and conformance AST.Atom.CharacterProperty.JavaSpecial;
  if (!lazy protocol witness table cache variable for type AST.Atom.CharacterProperty.JavaSpecial and conformance AST.Atom.CharacterProperty.JavaSpecial)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Atom.CharacterProperty.JavaSpecial, &type metadata for AST.Atom.CharacterProperty.JavaSpecial);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.CharacterProperty.JavaSpecial and conformance AST.Atom.CharacterProperty.JavaSpecial);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in AST.Atom.CharacterProperty.JavaSpecial()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [AST.Atom.CharacterProperty.JavaSpecial] and conformance [A], (uint64_t)&unk_1EA976850, (uint64_t)&cache variable for noncanonical specialized generic type metadata for [AST.Atom.CharacterProperty.JavaSpecial], MEMORY[0x1E0DEAF50]);
}

unint64_t lazy protocol witness table accessor for type AST.Atom.Callout.PCRE.Argument and conformance AST.Atom.Callout.PCRE.Argument()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Atom.Callout.PCRE.Argument and conformance AST.Atom.Callout.PCRE.Argument;
  if (!lazy protocol witness table cache variable for type AST.Atom.Callout.PCRE.Argument and conformance AST.Atom.Callout.PCRE.Argument)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Atom.Callout.PCRE.Argument, &type metadata for AST.Atom.Callout.PCRE.Argument);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.Callout.PCRE.Argument and conformance AST.Atom.Callout.PCRE.Argument);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Atom.Callout.OnigurumaNamed.ArgList and conformance AST.Atom.Callout.OnigurumaNamed.ArgList()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaNamed.ArgList and conformance AST.Atom.Callout.OnigurumaNamed.ArgList;
  if (!lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaNamed.ArgList and conformance AST.Atom.Callout.OnigurumaNamed.ArgList)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Atom.Callout.OnigurumaNamed.ArgList, &type metadata for AST.Atom.Callout.OnigurumaNamed.ArgList);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaNamed.ArgList and conformance AST.Atom.Callout.OnigurumaNamed.ArgList);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaNamed.ArgList and conformance AST.Atom.Callout.OnigurumaNamed.ArgList;
  if (!lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaNamed.ArgList and conformance AST.Atom.Callout.OnigurumaNamed.ArgList)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Atom.Callout.OnigurumaNamed.ArgList, &type metadata for AST.Atom.Callout.OnigurumaNamed.ArgList);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaNamed.ArgList and conformance AST.Atom.Callout.OnigurumaNamed.ArgList);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaNamed.ArgList and conformance AST.Atom.Callout.OnigurumaNamed.ArgList;
  if (!lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaNamed.ArgList and conformance AST.Atom.Callout.OnigurumaNamed.ArgList)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Atom.Callout.OnigurumaNamed.ArgList, &type metadata for AST.Atom.Callout.OnigurumaNamed.ArgList);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaNamed.ArgList and conformance AST.Atom.Callout.OnigurumaNamed.ArgList);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Atom.Callout.OnigurumaNamed and conformance AST.Atom.Callout.OnigurumaNamed()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaNamed and conformance AST.Atom.Callout.OnigurumaNamed;
  if (!lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaNamed and conformance AST.Atom.Callout.OnigurumaNamed)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Atom.Callout.OnigurumaNamed, &type metadata for AST.Atom.Callout.OnigurumaNamed);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaNamed and conformance AST.Atom.Callout.OnigurumaNamed);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaNamed and conformance AST.Atom.Callout.OnigurumaNamed;
  if (!lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaNamed and conformance AST.Atom.Callout.OnigurumaNamed)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Atom.Callout.OnigurumaNamed, &type metadata for AST.Atom.Callout.OnigurumaNamed);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaNamed and conformance AST.Atom.Callout.OnigurumaNamed);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaNamed and conformance AST.Atom.Callout.OnigurumaNamed;
  if (!lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaNamed and conformance AST.Atom.Callout.OnigurumaNamed)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Atom.Callout.OnigurumaNamed, &type metadata for AST.Atom.Callout.OnigurumaNamed);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaNamed and conformance AST.Atom.Callout.OnigurumaNamed);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Atom.Callout.OnigurumaOfContents.Direction and conformance AST.Atom.Callout.OnigurumaOfContents.Direction()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaOfContents.Direction and conformance AST.Atom.Callout.OnigurumaOfContents.Direction;
  if (!lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaOfContents.Direction and conformance AST.Atom.Callout.OnigurumaOfContents.Direction)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Atom.Callout.OnigurumaOfContents.Direction, &type metadata for AST.Atom.Callout.OnigurumaOfContents.Direction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaOfContents.Direction and conformance AST.Atom.Callout.OnigurumaOfContents.Direction);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Atom.Callout.OnigurumaOfContents and conformance AST.Atom.Callout.OnigurumaOfContents()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaOfContents and conformance AST.Atom.Callout.OnigurumaOfContents;
  if (!lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaOfContents and conformance AST.Atom.Callout.OnigurumaOfContents)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Atom.Callout.OnigurumaOfContents, &type metadata for AST.Atom.Callout.OnigurumaOfContents);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaOfContents and conformance AST.Atom.Callout.OnigurumaOfContents);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaOfContents and conformance AST.Atom.Callout.OnigurumaOfContents;
  if (!lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaOfContents and conformance AST.Atom.Callout.OnigurumaOfContents)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Atom.Callout.OnigurumaOfContents, &type metadata for AST.Atom.Callout.OnigurumaOfContents);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaOfContents and conformance AST.Atom.Callout.OnigurumaOfContents);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaOfContents and conformance AST.Atom.Callout.OnigurumaOfContents;
  if (!lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaOfContents and conformance AST.Atom.Callout.OnigurumaOfContents)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Atom.Callout.OnigurumaOfContents, &type metadata for AST.Atom.Callout.OnigurumaOfContents);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaOfContents and conformance AST.Atom.Callout.OnigurumaOfContents);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Atom.Callout and conformance AST.Atom.Callout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Atom.Callout and conformance AST.Atom.Callout;
  if (!lazy protocol witness table cache variable for type AST.Atom.Callout and conformance AST.Atom.Callout)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Atom.Callout, &type metadata for AST.Atom.Callout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.Callout and conformance AST.Atom.Callout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Atom.Callout and conformance AST.Atom.Callout;
  if (!lazy protocol witness table cache variable for type AST.Atom.Callout and conformance AST.Atom.Callout)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Atom.Callout, &type metadata for AST.Atom.Callout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.Callout and conformance AST.Atom.Callout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Atom.Callout and conformance AST.Atom.Callout;
  if (!lazy protocol witness table cache variable for type AST.Atom.Callout and conformance AST.Atom.Callout)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Atom.Callout, &type metadata for AST.Atom.Callout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.Callout and conformance AST.Atom.Callout);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Atom.Callout.OnigurumaTag and conformance AST.Atom.Callout.OnigurumaTag()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaTag and conformance AST.Atom.Callout.OnigurumaTag;
  if (!lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaTag and conformance AST.Atom.Callout.OnigurumaTag)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Atom.Callout.OnigurumaTag, &type metadata for AST.Atom.Callout.OnigurumaTag);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaTag and conformance AST.Atom.Callout.OnigurumaTag);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaTag and conformance AST.Atom.Callout.OnigurumaTag;
  if (!lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaTag and conformance AST.Atom.Callout.OnigurumaTag)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Atom.Callout.OnigurumaTag, &type metadata for AST.Atom.Callout.OnigurumaTag);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaTag and conformance AST.Atom.Callout.OnigurumaTag);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaTag and conformance AST.Atom.Callout.OnigurumaTag;
  if (!lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaTag and conformance AST.Atom.Callout.OnigurumaTag)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Atom.Callout.OnigurumaTag, &type metadata for AST.Atom.Callout.OnigurumaTag);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.Callout.OnigurumaTag and conformance AST.Atom.Callout.OnigurumaTag);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Atom.BacktrackingDirective.Kind and conformance AST.Atom.BacktrackingDirective.Kind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Atom.BacktrackingDirective.Kind and conformance AST.Atom.BacktrackingDirective.Kind;
  if (!lazy protocol witness table cache variable for type AST.Atom.BacktrackingDirective.Kind and conformance AST.Atom.BacktrackingDirective.Kind)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Atom.BacktrackingDirective.Kind, &type metadata for AST.Atom.BacktrackingDirective.Kind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.BacktrackingDirective.Kind and conformance AST.Atom.BacktrackingDirective.Kind);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Atom.BacktrackingDirective and conformance AST.Atom.BacktrackingDirective()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Atom.BacktrackingDirective and conformance AST.Atom.BacktrackingDirective;
  if (!lazy protocol witness table cache variable for type AST.Atom.BacktrackingDirective and conformance AST.Atom.BacktrackingDirective)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Atom.BacktrackingDirective, &type metadata for AST.Atom.BacktrackingDirective);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.BacktrackingDirective and conformance AST.Atom.BacktrackingDirective);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Atom.BacktrackingDirective and conformance AST.Atom.BacktrackingDirective;
  if (!lazy protocol witness table cache variable for type AST.Atom.BacktrackingDirective and conformance AST.Atom.BacktrackingDirective)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Atom.BacktrackingDirective, &type metadata for AST.Atom.BacktrackingDirective);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.BacktrackingDirective and conformance AST.Atom.BacktrackingDirective);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Atom.BacktrackingDirective and conformance AST.Atom.BacktrackingDirective;
  if (!lazy protocol witness table cache variable for type AST.Atom.BacktrackingDirective and conformance AST.Atom.BacktrackingDirective)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Atom.BacktrackingDirective, &type metadata for AST.Atom.BacktrackingDirective);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Atom.BacktrackingDirective and conformance AST.Atom.BacktrackingDirective);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AST.Conditional(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AST.Conditional and conformance AST.Conditional();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for AST.Conditional(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Conditional and conformance AST.Conditional, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Conditional and conformance AST.Conditional);
}

unint64_t lazy protocol witness table accessor for type AST.Conditional.Condition.Kind and conformance AST.Conditional.Condition.Kind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Conditional.Condition.Kind and conformance AST.Conditional.Condition.Kind;
  if (!lazy protocol witness table cache variable for type AST.Conditional.Condition.Kind and conformance AST.Conditional.Condition.Kind)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Conditional.Condition.Kind, &type metadata for AST.Conditional.Condition.Kind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Conditional.Condition.Kind and conformance AST.Conditional.Condition.Kind);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Conditional.Condition.PCREVersionNumber and conformance AST.Conditional.Condition.PCREVersionNumber()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionNumber and conformance AST.Conditional.Condition.PCREVersionNumber;
  if (!lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionNumber and conformance AST.Conditional.Condition.PCREVersionNumber)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Conditional.Condition.PCREVersionNumber, &type metadata for AST.Conditional.Condition.PCREVersionNumber);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionNumber and conformance AST.Conditional.Condition.PCREVersionNumber);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionNumber and conformance AST.Conditional.Condition.PCREVersionNumber;
  if (!lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionNumber and conformance AST.Conditional.Condition.PCREVersionNumber)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Conditional.Condition.PCREVersionNumber, &type metadata for AST.Conditional.Condition.PCREVersionNumber);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionNumber and conformance AST.Conditional.Condition.PCREVersionNumber);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionNumber and conformance AST.Conditional.Condition.PCREVersionNumber;
  if (!lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionNumber and conformance AST.Conditional.Condition.PCREVersionNumber)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Conditional.Condition.PCREVersionNumber, &type metadata for AST.Conditional.Condition.PCREVersionNumber);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionNumber and conformance AST.Conditional.Condition.PCREVersionNumber);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Conditional.Condition.PCREVersionCheck.Kind and conformance AST.Conditional.Condition.PCREVersionCheck.Kind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionCheck.Kind and conformance AST.Conditional.Condition.PCREVersionCheck.Kind;
  if (!lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionCheck.Kind and conformance AST.Conditional.Condition.PCREVersionCheck.Kind)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Conditional.Condition.PCREVersionCheck.Kind, &type metadata for AST.Conditional.Condition.PCREVersionCheck.Kind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionCheck.Kind and conformance AST.Conditional.Condition.PCREVersionCheck.Kind);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionCheck.Kind and conformance AST.Conditional.Condition.PCREVersionCheck.Kind;
  if (!lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionCheck.Kind and conformance AST.Conditional.Condition.PCREVersionCheck.Kind)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Conditional.Condition.PCREVersionCheck.Kind, &type metadata for AST.Conditional.Condition.PCREVersionCheck.Kind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionCheck.Kind and conformance AST.Conditional.Condition.PCREVersionCheck.Kind);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionCheck.Kind and conformance AST.Conditional.Condition.PCREVersionCheck.Kind;
  if (!lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionCheck.Kind and conformance AST.Conditional.Condition.PCREVersionCheck.Kind)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Conditional.Condition.PCREVersionCheck.Kind, &type metadata for AST.Conditional.Condition.PCREVersionCheck.Kind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionCheck.Kind and conformance AST.Conditional.Condition.PCREVersionCheck.Kind);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Conditional.Condition.PCREVersionCheck and conformance AST.Conditional.Condition.PCREVersionCheck()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionCheck and conformance AST.Conditional.Condition.PCREVersionCheck;
  if (!lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionCheck and conformance AST.Conditional.Condition.PCREVersionCheck)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Conditional.Condition.PCREVersionCheck, &type metadata for AST.Conditional.Condition.PCREVersionCheck);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionCheck and conformance AST.Conditional.Condition.PCREVersionCheck);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionCheck and conformance AST.Conditional.Condition.PCREVersionCheck;
  if (!lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionCheck and conformance AST.Conditional.Condition.PCREVersionCheck)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Conditional.Condition.PCREVersionCheck, &type metadata for AST.Conditional.Condition.PCREVersionCheck);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionCheck and conformance AST.Conditional.Condition.PCREVersionCheck);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionCheck and conformance AST.Conditional.Condition.PCREVersionCheck;
  if (!lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionCheck and conformance AST.Conditional.Condition.PCREVersionCheck)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Conditional.Condition.PCREVersionCheck, &type metadata for AST.Conditional.Condition.PCREVersionCheck);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Conditional.Condition.PCREVersionCheck and conformance AST.Conditional.Condition.PCREVersionCheck);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in AST.CustomCharacterClass.Member()
{
  return lazy protocol witness table accessor for type AST.Atom and conformance AST.Atom(&lazy protocol witness table cache variable for type AST.CustomCharacterClass.Member and conformance AST.CustomCharacterClass.Member, type metadata accessor for AST.CustomCharacterClass.Member, (uint64_t)&protocol conformance descriptor for AST.CustomCharacterClass.Member);
}

uint64_t base witness table accessor for Equatable in AST.CustomCharacterClass.Range()
{
  return lazy protocol witness table accessor for type AST.Atom and conformance AST.Atom(&lazy protocol witness table cache variable for type AST.CustomCharacterClass.Range and conformance AST.CustomCharacterClass.Range, type metadata accessor for AST.CustomCharacterClass.Range, (uint64_t)&protocol conformance descriptor for AST.CustomCharacterClass.Range);
}

unint64_t lazy protocol witness table accessor for type AST.CustomCharacterClass.SetOp and conformance AST.CustomCharacterClass.SetOp()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.CustomCharacterClass.SetOp and conformance AST.CustomCharacterClass.SetOp;
  if (!lazy protocol witness table cache variable for type AST.CustomCharacterClass.SetOp and conformance AST.CustomCharacterClass.SetOp)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.CustomCharacterClass.SetOp, &type metadata for AST.CustomCharacterClass.SetOp);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.CustomCharacterClass.SetOp and conformance AST.CustomCharacterClass.SetOp);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.CustomCharacterClass.Start and conformance AST.CustomCharacterClass.Start()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.CustomCharacterClass.Start and conformance AST.CustomCharacterClass.Start;
  if (!lazy protocol witness table cache variable for type AST.CustomCharacterClass.Start and conformance AST.CustomCharacterClass.Start)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.CustomCharacterClass.Start, &type metadata for AST.CustomCharacterClass.Start);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.CustomCharacterClass.Start and conformance AST.CustomCharacterClass.Start);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Group.Kind and conformance AST.Group.Kind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Group.Kind and conformance AST.Group.Kind;
  if (!lazy protocol witness table cache variable for type AST.Group.Kind and conformance AST.Group.Kind)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Group.Kind, &type metadata for AST.Group.Kind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Group.Kind and conformance AST.Group.Kind);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Group.Kind and conformance AST.Group.Kind;
  if (!lazy protocol witness table cache variable for type AST.Group.Kind and conformance AST.Group.Kind)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Group.Kind, &type metadata for AST.Group.Kind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Group.Kind and conformance AST.Group.Kind);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Group.Kind and conformance AST.Group.Kind;
  if (!lazy protocol witness table cache variable for type AST.Group.Kind and conformance AST.Group.Kind)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Group.Kind, &type metadata for AST.Group.Kind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Group.Kind and conformance AST.Group.Kind);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Group.BalancedCapture and conformance AST.Group.BalancedCapture()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Group.BalancedCapture and conformance AST.Group.BalancedCapture;
  if (!lazy protocol witness table cache variable for type AST.Group.BalancedCapture and conformance AST.Group.BalancedCapture)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Group.BalancedCapture, &type metadata for AST.Group.BalancedCapture);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Group.BalancedCapture and conformance AST.Group.BalancedCapture);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Group.BalancedCapture and conformance AST.Group.BalancedCapture;
  if (!lazy protocol witness table cache variable for type AST.Group.BalancedCapture and conformance AST.Group.BalancedCapture)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Group.BalancedCapture, &type metadata for AST.Group.BalancedCapture);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Group.BalancedCapture and conformance AST.Group.BalancedCapture);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Group.BalancedCapture and conformance AST.Group.BalancedCapture;
  if (!lazy protocol witness table cache variable for type AST.Group.BalancedCapture and conformance AST.Group.BalancedCapture)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Group.BalancedCapture, &type metadata for AST.Group.BalancedCapture);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Group.BalancedCapture and conformance AST.Group.BalancedCapture);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.MatchingOption.Kind and conformance AST.MatchingOption.Kind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.MatchingOption.Kind and conformance AST.MatchingOption.Kind;
  if (!lazy protocol witness table cache variable for type AST.MatchingOption.Kind and conformance AST.MatchingOption.Kind)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.MatchingOption.Kind, &type metadata for AST.MatchingOption.Kind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.MatchingOption.Kind and conformance AST.MatchingOption.Kind);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.MatchingOption and conformance AST.MatchingOption()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.MatchingOption and conformance AST.MatchingOption;
  if (!lazy protocol witness table cache variable for type AST.MatchingOption and conformance AST.MatchingOption)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.MatchingOption, &type metadata for AST.MatchingOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.MatchingOption and conformance AST.MatchingOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.MatchingOption and conformance AST.MatchingOption;
  if (!lazy protocol witness table cache variable for type AST.MatchingOption and conformance AST.MatchingOption)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.MatchingOption, &type metadata for AST.MatchingOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.MatchingOption and conformance AST.MatchingOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.MatchingOption and conformance AST.MatchingOption;
  if (!lazy protocol witness table cache variable for type AST.MatchingOption and conformance AST.MatchingOption)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.MatchingOption, &type metadata for AST.MatchingOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.MatchingOption and conformance AST.MatchingOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.MatchingOption and conformance AST.MatchingOption;
  if (!lazy protocol witness table cache variable for type AST.MatchingOption and conformance AST.MatchingOption)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.MatchingOption, &type metadata for AST.MatchingOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.MatchingOption and conformance AST.MatchingOption);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.MatchingOptionSequence and conformance AST.MatchingOptionSequence()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.MatchingOptionSequence and conformance AST.MatchingOptionSequence;
  if (!lazy protocol witness table cache variable for type AST.MatchingOptionSequence and conformance AST.MatchingOptionSequence)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.MatchingOptionSequence, &type metadata for AST.MatchingOptionSequence);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.MatchingOptionSequence and conformance AST.MatchingOptionSequence);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.MatchingOptionSequence and conformance AST.MatchingOptionSequence;
  if (!lazy protocol witness table cache variable for type AST.MatchingOptionSequence and conformance AST.MatchingOptionSequence)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.MatchingOptionSequence, &type metadata for AST.MatchingOptionSequence);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.MatchingOptionSequence and conformance AST.MatchingOptionSequence);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.MatchingOptionSequence and conformance AST.MatchingOptionSequence;
  if (!lazy protocol witness table cache variable for type AST.MatchingOptionSequence and conformance AST.MatchingOptionSequence)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.MatchingOptionSequence, &type metadata for AST.MatchingOptionSequence);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.MatchingOptionSequence and conformance AST.MatchingOptionSequence);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for AST.MatchingOption(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.MatchingOption and conformance AST.MatchingOption, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.MatchingOption and conformance AST.MatchingOption);
}

uint64_t instantiation function for generic protocol witness table for AST.MatchingOptionSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.MatchingOptionSequence and conformance AST.MatchingOptionSequence, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.MatchingOptionSequence and conformance AST.MatchingOptionSequence);
}

unint64_t lazy protocol witness table accessor for type AST.GlobalMatchingOption.NewlineMatching and conformance AST.GlobalMatchingOption.NewlineMatching()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.GlobalMatchingOption.NewlineMatching and conformance AST.GlobalMatchingOption.NewlineMatching;
  if (!lazy protocol witness table cache variable for type AST.GlobalMatchingOption.NewlineMatching and conformance AST.GlobalMatchingOption.NewlineMatching)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.GlobalMatchingOption.NewlineMatching, &type metadata for AST.GlobalMatchingOption.NewlineMatching);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.GlobalMatchingOption.NewlineMatching and conformance AST.GlobalMatchingOption.NewlineMatching);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.GlobalMatchingOption.NewlineSequenceMatching and conformance AST.GlobalMatchingOption.NewlineSequenceMatching()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.GlobalMatchingOption.NewlineSequenceMatching and conformance AST.GlobalMatchingOption.NewlineSequenceMatching;
  if (!lazy protocol witness table cache variable for type AST.GlobalMatchingOption.NewlineSequenceMatching and conformance AST.GlobalMatchingOption.NewlineSequenceMatching)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.GlobalMatchingOption.NewlineSequenceMatching, &type metadata for AST.GlobalMatchingOption.NewlineSequenceMatching);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.GlobalMatchingOption.NewlineSequenceMatching and conformance AST.GlobalMatchingOption.NewlineSequenceMatching);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.GlobalMatchingOption.Kind and conformance AST.GlobalMatchingOption.Kind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.GlobalMatchingOption.Kind and conformance AST.GlobalMatchingOption.Kind;
  if (!lazy protocol witness table cache variable for type AST.GlobalMatchingOption.Kind and conformance AST.GlobalMatchingOption.Kind)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.GlobalMatchingOption.Kind, &type metadata for AST.GlobalMatchingOption.Kind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.GlobalMatchingOption.Kind and conformance AST.GlobalMatchingOption.Kind);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.GlobalMatchingOption.Kind and conformance AST.GlobalMatchingOption.Kind;
  if (!lazy protocol witness table cache variable for type AST.GlobalMatchingOption.Kind and conformance AST.GlobalMatchingOption.Kind)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.GlobalMatchingOption.Kind, &type metadata for AST.GlobalMatchingOption.Kind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.GlobalMatchingOption.Kind and conformance AST.GlobalMatchingOption.Kind);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.GlobalMatchingOption.Kind and conformance AST.GlobalMatchingOption.Kind;
  if (!lazy protocol witness table cache variable for type AST.GlobalMatchingOption.Kind and conformance AST.GlobalMatchingOption.Kind)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.GlobalMatchingOption.Kind, &type metadata for AST.GlobalMatchingOption.Kind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.GlobalMatchingOption.Kind and conformance AST.GlobalMatchingOption.Kind);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AST.GlobalMatchingOption(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AST.GlobalMatchingOption and conformance AST.GlobalMatchingOption();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.GlobalMatchingOption and conformance AST.GlobalMatchingOption()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.GlobalMatchingOption and conformance AST.GlobalMatchingOption;
  if (!lazy protocol witness table cache variable for type AST.GlobalMatchingOption and conformance AST.GlobalMatchingOption)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.GlobalMatchingOption, &type metadata for AST.GlobalMatchingOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.GlobalMatchingOption and conformance AST.GlobalMatchingOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.GlobalMatchingOption and conformance AST.GlobalMatchingOption;
  if (!lazy protocol witness table cache variable for type AST.GlobalMatchingOption and conformance AST.GlobalMatchingOption)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.GlobalMatchingOption, &type metadata for AST.GlobalMatchingOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.GlobalMatchingOption and conformance AST.GlobalMatchingOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.GlobalMatchingOption and conformance AST.GlobalMatchingOption;
  if (!lazy protocol witness table cache variable for type AST.GlobalMatchingOption and conformance AST.GlobalMatchingOption)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.GlobalMatchingOption, &type metadata for AST.GlobalMatchingOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.GlobalMatchingOption and conformance AST.GlobalMatchingOption);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.GlobalMatchingOption and conformance AST.GlobalMatchingOption;
  if (!lazy protocol witness table cache variable for type AST.GlobalMatchingOption and conformance AST.GlobalMatchingOption)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.GlobalMatchingOption, &type metadata for AST.GlobalMatchingOption);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.GlobalMatchingOption and conformance AST.GlobalMatchingOption);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Quantification.Amount and conformance AST.Quantification.Amount()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Quantification.Amount and conformance AST.Quantification.Amount;
  if (!lazy protocol witness table cache variable for type AST.Quantification.Amount and conformance AST.Quantification.Amount)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Quantification.Amount, &type metadata for AST.Quantification.Amount);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Quantification.Amount and conformance AST.Quantification.Amount);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Quantification.Amount and conformance AST.Quantification.Amount;
  if (!lazy protocol witness table cache variable for type AST.Quantification.Amount and conformance AST.Quantification.Amount)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Quantification.Amount, &type metadata for AST.Quantification.Amount);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Quantification.Amount and conformance AST.Quantification.Amount);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Quantification.Amount and conformance AST.Quantification.Amount;
  if (!lazy protocol witness table cache variable for type AST.Quantification.Amount and conformance AST.Quantification.Amount)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Quantification.Amount, &type metadata for AST.Quantification.Amount);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Quantification.Amount and conformance AST.Quantification.Amount);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Quantification.Kind and conformance AST.Quantification.Kind;
  if (!lazy protocol witness table cache variable for type AST.Quantification.Kind and conformance AST.Quantification.Kind)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Quantification.Kind, &type metadata for AST.Quantification.Kind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Quantification.Kind and conformance AST.Quantification.Kind);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Quantification.Kind and conformance AST.Quantification.Kind;
  if (!lazy protocol witness table cache variable for type AST.Quantification.Kind and conformance AST.Quantification.Kind)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Quantification.Kind, &type metadata for AST.Quantification.Kind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Quantification.Kind and conformance AST.Quantification.Kind);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AST.Quantification.Kind and conformance AST.Quantification.Kind;
  if (!lazy protocol witness table cache variable for type AST.Quantification.Kind and conformance AST.Quantification.Kind)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AST.Quantification.Kind, &type metadata for AST.Quantification.Kind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AST.Quantification.Kind and conformance AST.Quantification.Kind);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Delimiter and conformance Delimiter()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Delimiter and conformance Delimiter;
  if (!lazy protocol witness table cache variable for type Delimiter and conformance Delimiter)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for Delimiter, &type metadata for Delimiter);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Delimiter and conformance Delimiter);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DelimiterLexError.Kind and conformance DelimiterLexError.Kind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DelimiterLexError.Kind and conformance DelimiterLexError.Kind;
  if (!lazy protocol witness table cache variable for type DelimiterLexError.Kind and conformance DelimiterLexError.Kind)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for DelimiterLexError.Kind, &type metadata for DelimiterLexError.Kind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DelimiterLexError.Kind and conformance DelimiterLexError.Kind);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Diagnostic and conformance Diagnostic()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Diagnostic and conformance Diagnostic;
  if (!lazy protocol witness table cache variable for type Diagnostic and conformance Diagnostic)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for Diagnostic, &type metadata for Diagnostic);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Diagnostic and conformance Diagnostic);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Diagnostic.Behavior and conformance Diagnostic.Behavior()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Diagnostic.Behavior and conformance Diagnostic.Behavior;
  if (!lazy protocol witness table cache variable for type Diagnostic.Behavior and conformance Diagnostic.Behavior)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for Diagnostic.Behavior, &type metadata for Diagnostic.Behavior);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Diagnostic.Behavior and conformance Diagnostic.Behavior);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Diagnostics and conformance Diagnostics()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Diagnostics and conformance Diagnostics;
  if (!lazy protocol witness table cache variable for type Diagnostics and conformance Diagnostics)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for Diagnostics, &type metadata for Diagnostics);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Diagnostics and conformance Diagnostics);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Source.Location and conformance Source.Location()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Source.Location and conformance Source.Location;
  if (!lazy protocol witness table cache variable for type Source.Location and conformance Source.Location)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for Source.Location, &type metadata for Source.Location);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Source.Location and conformance Source.Location);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for Source.LocatedError<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for Source.LocatedError<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for Equatable in <A> Source.Located<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 8);
  return MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for <A> Source.Located<A>, a1, &v4);
}

unint64_t lazy protocol witness table accessor for type SyntaxOptions and conformance SyntaxOptions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SyntaxOptions and conformance SyntaxOptions;
  if (!lazy protocol witness table cache variable for type SyntaxOptions and conformance SyntaxOptions)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for SyntaxOptions, &type metadata for SyntaxOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SyntaxOptions and conformance SyntaxOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SyntaxOptions and conformance SyntaxOptions;
  if (!lazy protocol witness table cache variable for type SyntaxOptions and conformance SyntaxOptions)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for SyntaxOptions, &type metadata for SyntaxOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SyntaxOptions and conformance SyntaxOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SyntaxOptions and conformance SyntaxOptions;
  if (!lazy protocol witness table cache variable for type SyntaxOptions and conformance SyntaxOptions)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for SyntaxOptions, &type metadata for SyntaxOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SyntaxOptions and conformance SyntaxOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SyntaxOptions and conformance SyntaxOptions;
  if (!lazy protocol witness table cache variable for type SyntaxOptions and conformance SyntaxOptions)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for SyntaxOptions, &type metadata for SyntaxOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SyntaxOptions and conformance SyntaxOptions);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for AST(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST and conformance AST, (uint64_t (*)(void))lazy protocol witness table accessor for type AST and conformance AST);
}

uint64_t instantiation function for generic protocol witness table for AST.Node(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Node and conformance AST.Node, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Node and conformance AST.Node);
}

uint64_t instantiation function for generic protocol witness table for AST.Conditional.Condition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Conditional.Condition and conformance AST.Conditional.Condition, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Conditional.Condition and conformance AST.Conditional.Condition);
}

uint64_t instantiation function for generic protocol witness table for AST.Conditional.Condition.PCREVersionCheck.Kind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Conditional.Condition.PCREVersionCheck.Kind and conformance AST.Conditional.Condition.PCREVersionCheck.Kind, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Conditional.Condition.PCREVersionCheck.Kind and conformance AST.Conditional.Condition.PCREVersionCheck.Kind);
}

uint64_t instantiation function for generic protocol witness table for AST.Conditional.Condition.PCREVersionNumber(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Conditional.Condition.PCREVersionNumber and conformance AST.Conditional.Condition.PCREVersionNumber, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Conditional.Condition.PCREVersionNumber and conformance AST.Conditional.Condition.PCREVersionNumber);
}

uint64_t instantiation function for generic protocol witness table for AST.Conditional.Condition.PCREVersionCheck(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Conditional.Condition.PCREVersionCheck and conformance AST.Conditional.Condition.PCREVersionCheck, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Conditional.Condition.PCREVersionCheck and conformance AST.Conditional.Condition.PCREVersionCheck);
}

uint64_t instantiation function for generic protocol witness table for AST.Atom.Number(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Atom.Number and conformance AST.Atom.Number, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Atom.Number and conformance AST.Atom.Number);
}

uint64_t instantiation function for generic protocol witness table for AST.Atom.Callout(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Atom.Callout and conformance AST.Atom.Callout, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Atom.Callout and conformance AST.Atom.Callout);
}

uint64_t instantiation function for generic protocol witness table for AST.Atom.Callout.PCRE(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Atom.Callout.PCRE and conformance AST.Atom.Callout.PCRE, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Atom.Callout.PCRE and conformance AST.Atom.Callout.PCRE);
}

uint64_t instantiation function for generic protocol witness table for AST.Atom.Callout.OnigurumaTag(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Atom.Callout.OnigurumaTag and conformance AST.Atom.Callout.OnigurumaTag, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Atom.Callout.OnigurumaTag and conformance AST.Atom.Callout.OnigurumaTag);
}

uint64_t instantiation function for generic protocol witness table for AST.Atom.Callout.OnigurumaNamed.ArgList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Atom.Callout.OnigurumaNamed.ArgList and conformance AST.Atom.Callout.OnigurumaNamed.ArgList, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Atom.Callout.OnigurumaNamed.ArgList and conformance AST.Atom.Callout.OnigurumaNamed.ArgList);
}

uint64_t instantiation function for generic protocol witness table for AST.Atom.Callout.OnigurumaNamed(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Atom.Callout.OnigurumaNamed and conformance AST.Atom.Callout.OnigurumaNamed, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Atom.Callout.OnigurumaNamed and conformance AST.Atom.Callout.OnigurumaNamed);
}

uint64_t instantiation function for generic protocol witness table for AST.Atom.Callout.OnigurumaOfContents(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Atom.Callout.OnigurumaOfContents and conformance AST.Atom.Callout.OnigurumaOfContents, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Atom.Callout.OnigurumaOfContents and conformance AST.Atom.Callout.OnigurumaOfContents);
}

uint64_t instantiation function for generic protocol witness table for AST.Reference(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Reference and conformance AST.Reference, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Reference and conformance AST.Reference);
}

uint64_t instantiation function for generic protocol witness table for AST.Group.Kind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Group.Kind and conformance AST.Group.Kind, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Group.Kind and conformance AST.Group.Kind);
}

uint64_t instantiation function for generic protocol witness table for AST.Group(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Group and conformance AST.Group, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Group and conformance AST.Group);
}

uint64_t instantiation function for generic protocol witness table for AST.Quantification.Amount(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Quantification.Amount and conformance AST.Quantification.Amount, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Quantification.Amount and conformance AST.Quantification.Amount);
}

uint64_t instantiation function for generic protocol witness table for AST.Quantification.Kind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Quantification.Kind and conformance AST.Quantification.Kind);
}

uint64_t instantiation function for generic protocol witness table for AST.Quantification(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Quantification and conformance AST.Quantification, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Quantification and conformance AST.Quantification);
}

unint64_t instantiation function for generic protocol witness table for AST.CustomCharacterClass(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AST.CustomCharacterClass and conformance AST.CustomCharacterClass();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for AST.CustomCharacterClass(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.CustomCharacterClass and conformance AST.CustomCharacterClass, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.CustomCharacterClass and conformance AST.CustomCharacterClass);
}

uint64_t instantiation function for generic protocol witness table for AST.CustomCharacterClass.Member(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type AST.Atom and conformance AST.Atom(&lazy protocol witness table cache variable for type AST.CustomCharacterClass.Member and conformance AST.CustomCharacterClass.Member, type metadata accessor for AST.CustomCharacterClass.Member, (uint64_t)&protocol conformance descriptor for AST.CustomCharacterClass.Member);
  result = lazy protocol witness table accessor for type AST.Atom and conformance AST.Atom(&lazy protocol witness table cache variable for type AST.CustomCharacterClass.Member and conformance AST.CustomCharacterClass.Member, type metadata accessor for AST.CustomCharacterClass.Member, (uint64_t)&protocol conformance descriptor for AST.CustomCharacterClass.Member);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for AST.CustomCharacterClass.Range(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type AST.Atom and conformance AST.Atom(&lazy protocol witness table cache variable for type AST.CustomCharacterClass.Range and conformance AST.CustomCharacterClass.Range, type metadata accessor for AST.CustomCharacterClass.Range, (uint64_t)&protocol conformance descriptor for AST.CustomCharacterClass.Range);
  result = lazy protocol witness table accessor for type AST.Atom and conformance AST.Atom(&lazy protocol witness table cache variable for type AST.CustomCharacterClass.Range and conformance AST.CustomCharacterClass.Range, type metadata accessor for AST.CustomCharacterClass.Range, (uint64_t)&protocol conformance descriptor for AST.CustomCharacterClass.Range);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for AST.Atom.BacktrackingDirective(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Atom.BacktrackingDirective and conformance AST.Atom.BacktrackingDirective, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Atom.BacktrackingDirective and conformance AST.Atom.BacktrackingDirective);
}

uint64_t instantiation function for generic protocol witness table for AST.Group.BalancedCapture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Group.BalancedCapture and conformance AST.Group.BalancedCapture, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.Group.BalancedCapture and conformance AST.Group.BalancedCapture);
}

uint64_t instantiation function for generic protocol witness table for AST.GlobalMatchingOption.Kind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.GlobalMatchingOption.Kind and conformance AST.GlobalMatchingOption.Kind, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.GlobalMatchingOption.Kind and conformance AST.GlobalMatchingOption.Kind);
}

uint64_t instantiation function for generic protocol witness table for AST.GlobalMatchingOption(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.GlobalMatchingOption and conformance AST.GlobalMatchingOption, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.GlobalMatchingOption and conformance AST.GlobalMatchingOption);
}

uint64_t instantiation function for generic protocol witness table for AST.GlobalMatchingOptionSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AST.Alternation(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.GlobalMatchingOptionSequence and conformance AST.GlobalMatchingOptionSequence, (uint64_t (*)(void))lazy protocol witness table accessor for type AST.GlobalMatchingOptionSequence and conformance AST.GlobalMatchingOptionSequence);
}

uint64_t instantiation function for generic protocol witness table for AST.Alternation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = a4();
  result = a5();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type Unicode.Scalar.AllScalars and conformance Unicode.Scalar.AllScalars()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Unicode.Scalar.AllScalars and conformance Unicode.Scalar.AllScalars;
  if (!lazy protocol witness table cache variable for type Unicode.Scalar.AllScalars and conformance Unicode.Scalar.AllScalars)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for Unicode.Scalar.AllScalars, &type metadata for Unicode.Scalar.AllScalars);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Unicode.Scalar.AllScalars and conformance Unicode.Scalar.AllScalars);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Unicode.Scalar.AllScalars and conformance Unicode.Scalar.AllScalars;
  if (!lazy protocol witness table cache variable for type Unicode.Scalar.AllScalars and conformance Unicode.Scalar.AllScalars)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for Unicode.Scalar.AllScalars, &type metadata for Unicode.Scalar.AllScalars);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Unicode.Scalar.AllScalars and conformance Unicode.Scalar.AllScalars);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Unicode.Scalar.AllScalars and conformance Unicode.Scalar.AllScalars;
  if (!lazy protocol witness table cache variable for type Unicode.Scalar.AllScalars and conformance Unicode.Scalar.AllScalars)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for Unicode.Scalar.AllScalars, &type metadata for Unicode.Scalar.AllScalars);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Unicode.Scalar.AllScalars and conformance Unicode.Scalar.AllScalars);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Unicode.Scalar.AllScalars and conformance Unicode.Scalar.AllScalars;
  if (!lazy protocol witness table cache variable for type Unicode.Scalar.AllScalars and conformance Unicode.Scalar.AllScalars)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for Unicode.Scalar.AllScalars, &type metadata for Unicode.Scalar.AllScalars);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Unicode.Scalar.AllScalars and conformance Unicode.Scalar.AllScalars);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in Unicode.Scalar.AllScalars()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, MEMORY[0x1E0DEB8B8]);
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    result = MEMORY[0x1DF0F3DA4](MEMORY[0x1E0DEB440], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in Unicode.Scalar.AllScalars()
{
  return lazy protocol witness table accessor for type Slice<Unicode.Scalar.AllScalars> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Unicode.Scalar.AllScalars> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type Unicode.Scalar.AllScalars and conformance Unicode.Scalar.AllScalars, MEMORY[0x1E0DEDE40]);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in Unicode.Scalar.AllScalars()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, MEMORY[0x1E0DEB890]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in Unicode.Scalar.AllScalars()
{
  return lazy protocol witness table accessor for type Slice<Unicode.Scalar.AllScalars> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Unicode.Scalar.AllScalars> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type Unicode.Scalar.AllScalars and conformance Unicode.Scalar.AllScalars, MEMORY[0x1E0DEDE28]);
}

uint64_t lazy protocol witness table accessor for type Slice<Unicode.Scalar.AllScalars> and conformance <> Slice<A>(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<Unicode.Scalar.AllScalars>);
    v8 = a2();
    result = MEMORY[0x1DF0F3DA4](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Index : Comparable in Unicode.Scalar.AllScalars()
{
  return MEMORY[0x1E0DEB430];
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in Unicode.Scalar.AllScalars()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, MEMORY[0x1E0DEB8C0]);
}

uint64_t lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t CanonicalSpecializedMetadata;
  unint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    CanonicalSpecializedMetadata = swift_getCanonicalSpecializedMetadata();
    v6 = lazy protocol witness table accessor for type Int and conformance Int();
    v7[0] = MEMORY[0x1E0DEB458];
    v7[1] = v6;
    result = MEMORY[0x1DF0F3DA4](a2, CanonicalSpecializedMetadata, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in Unicode.Scalar.AllScalars()
{
  return lazy protocol witness table accessor for type Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()> and conformance Source.LocatedError<A>(&lazy protocol witness table cache variable for type Slice<Unicode.Scalar.AllScalars> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<Unicode.Scalar.AllScalars>, MEMORY[0x1E0DEDE48]);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in Unicode.Scalar.AllScalars()
{
  return lazy protocol witness table accessor for type Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()> and conformance Source.LocatedError<A>(&lazy protocol witness table cache variable for type IndexingIterator<Unicode.Scalar.AllScalars> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<Unicode.Scalar.AllScalars>, MEMORY[0x1E0DEC908]);
}

uint64_t lazy protocol witness table accessor for type Source.LocatedError<ErrorDiagnostic #1 in Diagnostics.throwAnyError()> and conformance Source.LocatedError<A>(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1DF0F3DA4](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnyType and conformance AnyType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyType and conformance AnyType;
  if (!lazy protocol witness table cache variable for type AnyType and conformance AnyType)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for AnyType, &type metadata for AnyType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyType and conformance AnyType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Unicode.Script and conformance Unicode.Script()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Unicode.Script and conformance Unicode.Script;
  if (!lazy protocol witness table cache variable for type Unicode.Script and conformance Unicode.Script)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for Unicode.Script, &type metadata for Unicode.Script);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Unicode.Script and conformance Unicode.Script);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in Unicode.Script()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [Unicode.Script] and conformance [A], (uint64_t)&unk_1EA976780, (uint64_t)&cache variable for noncanonical specialized generic type metadata for [Unicode.Script], MEMORY[0x1E0DEAF50]);
}

unint64_t lazy protocol witness table accessor for type Unicode.POSIXProperty and conformance Unicode.POSIXProperty()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Unicode.POSIXProperty and conformance Unicode.POSIXProperty;
  if (!lazy protocol witness table cache variable for type Unicode.POSIXProperty and conformance Unicode.POSIXProperty)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for Unicode.POSIXProperty, &type metadata for Unicode.POSIXProperty);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Unicode.POSIXProperty and conformance Unicode.POSIXProperty);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in Unicode.POSIXProperty()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [Unicode.POSIXProperty] and conformance [A], (uint64_t)&unk_1EA976748, (uint64_t)&cache variable for noncanonical specialized generic type metadata for [Unicode.POSIXProperty], MEMORY[0x1E0DEAF50]);
}

unint64_t lazy protocol witness table accessor for type Unicode.ExtendedGeneralCategory and conformance Unicode.ExtendedGeneralCategory()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Unicode.ExtendedGeneralCategory and conformance Unicode.ExtendedGeneralCategory;
  if (!lazy protocol witness table cache variable for type Unicode.ExtendedGeneralCategory and conformance Unicode.ExtendedGeneralCategory)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for Unicode.ExtendedGeneralCategory, &type metadata for Unicode.ExtendedGeneralCategory);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Unicode.ExtendedGeneralCategory and conformance Unicode.ExtendedGeneralCategory);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in Unicode.ExtendedGeneralCategory()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [Unicode.ExtendedGeneralCategory] and conformance [A], (uint64_t)&unk_1EA976710, (uint64_t)&cache variable for noncanonical specialized generic type metadata for [Unicode.ExtendedGeneralCategory], MEMORY[0x1E0DEAF50]);
}

unint64_t lazy protocol witness table accessor for type Unicode.BinaryProperty and conformance Unicode.BinaryProperty()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Unicode.BinaryProperty and conformance Unicode.BinaryProperty;
  if (!lazy protocol witness table cache variable for type Unicode.BinaryProperty and conformance Unicode.BinaryProperty)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for Unicode.BinaryProperty, &type metadata for Unicode.BinaryProperty);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Unicode.BinaryProperty and conformance Unicode.BinaryProperty);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in Unicode.BinaryProperty()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [Unicode.BinaryProperty] and conformance [A], (uint64_t)&unk_1EA9766D8, (uint64_t)&cache variable for noncanonical specialized generic type metadata for [Unicode.BinaryProperty], MEMORY[0x1E0DEAF50]);
}

unint64_t lazy protocol witness table accessor for type Unicode.Block and conformance Unicode.Block()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Unicode.Block and conformance Unicode.Block;
  if (!lazy protocol witness table cache variable for type Unicode.Block and conformance Unicode.Block)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for Unicode.Block, &type metadata for Unicode.Block);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Unicode.Block and conformance Unicode.Block);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in Unicode.Block()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [Unicode.Block] and conformance [A], (uint64_t)&unk_1EA9766A0, (uint64_t)&cache variable for noncanonical specialized generic type metadata for [Unicode.Block], MEMORY[0x1E0DEAF50]);
}

uint64_t destroy for AST()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeBufferWithCopyOfBuffer for AST(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for AST(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for AST(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AST(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AST(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AST()
{
  return &type metadata for AST;
}

_QWORD *initializeBufferWithCopyOfBuffer for AST.Node(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t destroy for AST.Node()
{
  return swift_release();
}

_QWORD *assignWithCopy for AST.Node(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

_QWORD *assignWithTake for AST.Node(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AST.Node(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x75 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 117);
  v3 = ((*(_QWORD *)a1 >> 60) & 0x8F | (16 * (*(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x74)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AST.Node(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x74)
  {
    *(_QWORD *)result = a2 - 117;
    if (a3 >= 0x75)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x75)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 4) & 7 | (8 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTag for AST.Node(_QWORD *a1)
{
  return *a1 >> 60;
}

_QWORD *destructiveProjectEnumData for AST.Node(_QWORD *result)
{
  *result &= 0xFFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t *destructiveInjectEnumTag for AST.Node(uint64_t *result, uint64_t a2)
{
  *result = *result & 0xFFFFFFFFFFFFFF8 | (a2 << 60);
  return result;
}

ValueMetadata *type metadata accessor for AST.Node()
{
  return &type metadata for AST.Node;
}

uint64_t destroy for AST.Alternation()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

ValueMetadata *type metadata accessor for AST.Alternation()
{
  return &type metadata for AST.Alternation;
}

uint64_t initializeBufferWithCopyOfBuffer for AST.Concatenation(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for AST.Concatenation()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for AST.Concatenation(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for AST.Concatenation(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AST.Concatenation(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AST.Concatenation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AST.Concatenation()
{
  return &type metadata for AST.Concatenation;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

ValueMetadata *type metadata accessor for AST.Quote()
{
  return &type metadata for AST.Quote;
}

ValueMetadata *type metadata accessor for AST.Trivia()
{
  return &type metadata for AST.Trivia;
}

ValueMetadata *type metadata accessor for AST.Interpolation()
{
  return &type metadata for AST.Interpolation;
}

uint64_t getEnumTagSinglePayload for AST.Empty(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AST.Empty(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for AST.Empty()
{
  return &type metadata for AST.Empty;
}

uint64_t destroy for AST.AbsentFunction(uint64_t *a1)
{
  return outlined consume of AST.AbsentFunction.Kind(a1[2], a1[3], a1[4], a1[5]);
}

uint64_t initializeWithCopy for AST.AbsentFunction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  outlined copy of AST.AbsentFunction.Kind(v4, v5, v6, v7);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  return a1;
}

_QWORD *assignWithCopy for AST.AbsentFunction(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = a2[2];
  v5 = a2[3];
  v6 = a2[4];
  v7 = a2[5];
  outlined copy of AST.AbsentFunction.Kind(v4, v5, v6, v7);
  v8 = a1[2];
  v9 = a1[3];
  v10 = a1[4];
  v11 = a1[5];
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  outlined consume of AST.AbsentFunction.Kind(v8, v9, v10, v11);
  a1[6] = a2[6];
  a1[7] = a2[7];
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for AST.AbsentFunction(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v8;
  *(_OWORD *)(a1 + 32) = a2[2];
  outlined consume of AST.AbsentFunction.Kind(v4, v5, v6, v7);
  *(_OWORD *)(a1 + 48) = a2[3];
  return a1;
}

uint64_t getEnumTagSinglePayload for AST.AbsentFunction(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x3D && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 61);
  v3 = (((4 * (*(_BYTE *)(a1 + 16) & 7)) | (32 * *(_DWORD *)(a1 + 40))) & 0x3C | (*(_DWORD *)(a1 + 40) >> 1) & 3) ^ 0x3F;
  if (v3 >= 0x3C)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AST.AbsentFunction(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3C)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 61;
    if (a3 >= 0x3D)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 >= 0x3D)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
    {
      *(_QWORD *)(result + 16) = (-a2 >> 2) & 7;
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = ((unint64_t)((-a2 >> 2) & 0xF | (16 * (-a2 & 0x3F))) >> 3) & 7;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AST.AbsentFunction()
{
  return &type metadata for AST.AbsentFunction;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

ValueMetadata *type metadata accessor for AST.AbsentFunction.Start()
{
  return &type metadata for AST.AbsentFunction.Start;
}

uint64_t destroy for AST.AbsentFunction.Kind(uint64_t *a1)
{
  return outlined consume of AST.AbsentFunction.Kind(*a1, a1[1], a1[2], a1[3]);
}

uint64_t *initializeWithCopy for AST.AbsentFunction.Kind(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  outlined copy of AST.AbsentFunction.Kind(*a2, v4, v5, v6);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return a1;
}

uint64_t *assignWithCopy for AST.AbsentFunction.Kind(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  outlined copy of AST.AbsentFunction.Kind(*a2, v4, v5, v6);
  v7 = *a1;
  v8 = a1[1];
  v9 = a1[2];
  v10 = a1[3];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  outlined consume of AST.AbsentFunction.Kind(v7, v8, v9, v10);
  return a1;
}

uint64_t *assignWithTake for AST.AbsentFunction.Kind(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v3 = *a1;
  v5 = a1[1];
  v4 = a1[2];
  v6 = a1[3];
  v7 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v7;
  outlined consume of AST.AbsentFunction.Kind(v3, v5, v4, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AST.AbsentFunction.Kind(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x3D && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 61);
  v3 = (((4 * (*(_BYTE *)a1 & 7)) | (32 * *(_DWORD *)(a1 + 24))) & 0x3C | (*(_DWORD *)(a1 + 24) >> 1) & 3) ^ 0x3F;
  if (v3 >= 0x3C)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AST.AbsentFunction.Kind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3C)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 61;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x3D)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x3D)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
    {
      *(_QWORD *)result = (-a2 >> 2) & 7;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = ((unint64_t)((-a2 >> 2) & 0xF | (16 * (-a2 & 0x3F))) >> 3) & 7;
    }
  }
  return result;
}

uint64_t getEnumTag for AST.AbsentFunction.Kind(uint64_t a1)
{
  unsigned int v1;

  v1 = (*(_DWORD *)(a1 + 24) >> 1) & 3;
  if (v1 == 3)
    return (*(_QWORD *)a1 >> 3) + 3;
  else
    return v1;
}

uint64_t destructiveProjectEnumData for AST.AbsentFunction.Kind(uint64_t result)
{
  *(_QWORD *)(result + 24) &= 0xFFFFFFFFFFFFFFF9;
  return result;
}

_QWORD *destructiveInjectEnumTag for AST.AbsentFunction.Kind(_QWORD *result, unsigned int a2)
{
  unint64_t v2;

  if (a2 < 3)
  {
    v2 = result[3] & 0xFFFFFFFFFFFFFFF8 | (2 * (a2 & 3));
    *result &= 0xFFFFFFFFFFFFFFF8;
    result[3] = v2;
  }
  else
  {
    *result = 8 * (a2 - 3);
    result[1] = 0;
    result[2] = 0;
    result[3] = 6;
  }
  return result;
}

ValueMetadata *type metadata accessor for AST.AbsentFunction.Kind()
{
  return &type metadata for AST.AbsentFunction.Kind;
}

uint64_t destroy for AST.Reference(uint64_t a1, uint64_t a2)
{
  return destroy for AST.Reference(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of AST.Reference.Kind);
}

uint64_t initializeWithCopy for AST.Reference(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  outlined copy of AST.Reference.Kind(*(_QWORD *)a2, v5, v6, v7, v8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  return a1;
}

uint64_t assignWithCopy for AST.Reference(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  __int128 v15;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  outlined copy of AST.Reference.Kind(*(_QWORD *)a2, v5, v6, v7, v8);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v13 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v8;
  outlined consume of AST.Reference.Kind(v9, v10, v11, v12, v13);
  v14 = *(_OWORD *)(a2 + 40);
  v15 = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v15;
  *(_OWORD *)(a1 + 40) = v14;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  return a1;
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t assignWithTake for AST.Reference(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  char v10;

  v4 = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  v10 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v4;
  outlined consume of AST.Reference.Kind(v5, v6, v7, v8, v10);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for AST.Reference(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 96))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AST.Reference(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 96) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AST.Reference()
{
  return &type metadata for AST.Reference;
}

uint64_t initializeWithCopy for AST.Reference.Kind(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeWithCopy for AST.Reference.Kind(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of AST.Reference.Kind);
}

uint64_t *assignWithCopy for AST.Reference.Kind(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for AST.Reference.Kind(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of AST.Reference.Kind, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of AST.Reference.Kind);
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t *assignWithTake for AST.Reference.Kind(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for AST.Reference.Kind(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of AST.Reference.Kind);
}

uint64_t getEnumTagSinglePayload for AST.Reference.Kind(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AST.Reference.Kind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for AST.Reference.Kind(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t destructiveInjectEnumTag for AST.Reference.Kind(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AST.Reference.Kind()
{
  return &type metadata for AST.Reference.Kind;
}

ValueMetadata *type metadata accessor for AST.GlobalMatchingOptionSequence()
{
  return &type metadata for AST.GlobalMatchingOptionSequence;
}

uint64_t *initializeBufferWithCopyOfBuffer for AST.Atom(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for AST.Atom.Kind(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 5u:
      case 6u:
      case 7u:
      case 8u:
        v8 = a2[1];
        *a1 = *a2;
        a1[1] = v8;
        swift_bridgeObjectRetain();
        goto LABEL_20;
      case 2u:
        v13 = a2[1];
        *a1 = *a2;
        a1[1] = v13;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_20;
      case 3u:
        v10 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 4u:
            v11 = a2[1];
            *a1 = *a2;
            a1[1] = v11;
            swift_bridgeObjectRetain();
            goto LABEL_18;
          case 5u:
            v25 = type metadata accessor for Unicode.NumericType();
            (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(a1, a2, v25);
            goto LABEL_18;
          case 7u:
            *(_BYTE *)a1 = *(_BYTE *)a2;
            v26 = a2[2];
            a1[1] = a2[1];
            a1[2] = v26;
            swift_bridgeObjectRetain();
            goto LABEL_18;
          case 8u:
            v27 = type metadata accessor for Unicode.CanonicalCombiningClass();
            (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(a1, a2, v27);
            goto LABEL_18;
          case 0xEu:
            v28 = a2[1];
            *a1 = *a2;
            a1[1] = v28;
            v29 = a2[3];
            a1[2] = a2[2];
            a1[3] = v29;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
LABEL_18:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
            break;
        }
        v30 = type metadata accessor for AST.Atom.CharacterProperty(0);
        *((_BYTE *)a1 + *(int *)(v30 + 20)) = *((_BYTE *)a2 + *(int *)(v30 + 20));
        *((_BYTE *)a1 + *(int *)(v30 + 24)) = *((_BYTE *)a2 + *(int *)(v30 + 24));
        goto LABEL_20;
      case 9u:
      case 0xAu:
        v14 = *a2;
        v15 = a2[1];
        v16 = a2[2];
        v17 = a2[3];
        v18 = *((_BYTE *)a2 + 32);
        outlined copy of AST.Reference.Kind(*a2, v15, v16, v17, v18);
        *a1 = v14;
        a1[1] = v15;
        a1[2] = v16;
        a1[3] = v17;
        *((_BYTE *)a1 + 32) = v18;
        *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
        *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 7);
        *((_BYTE *)a1 + 72) = *((_BYTE *)a2 + 72);
        *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
        goto LABEL_20;
      case 0xBu:
        v19 = a2[1];
        v20 = a2[2];
        v21 = a2[3];
        v22 = a2[4];
        v32 = a2[7];
        v33 = a2[5];
        v34 = a2[8];
        v35 = a2[9];
        v36 = a2[10];
        v37 = a2[11];
        v38 = a2[12];
        v39 = a2[13];
        v40 = a2[14];
        v41 = a2[15];
        v42 = a2[16];
        v43 = a2[17];
        v44 = a2[18];
        v45 = *((_BYTE *)a2 + 152);
        v23 = *a2;
        v24 = a2[6];
        outlined copy of AST.Atom.Callout(*a2, v19, v20, v21, v22, v33, v24, v32, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44,
          v45);
        *a1 = v23;
        a1[1] = v19;
        a1[2] = v20;
        a1[3] = v21;
        a1[4] = v22;
        a1[5] = v33;
        a1[6] = v24;
        a1[7] = v32;
        a1[8] = v34;
        a1[9] = v35;
        a1[10] = v36;
        a1[11] = v37;
        a1[12] = v38;
        a1[13] = v39;
        a1[14] = v40;
        a1[15] = v41;
        a1[16] = v42;
        a1[17] = v43;
        a1[18] = v44;
        *((_BYTE *)a1 + 152) = v45;
        goto LABEL_20;
      case 0xCu:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v12 = a2[3];
        a1[2] = a2[2];
        a1[3] = v12;
        a1[4] = a2[4];
        *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
        swift_bridgeObjectRetain();
        goto LABEL_20;
      case 0xDu:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
        a1[3] = a2[3];
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
        a1[7] = a2[7];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_20:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        break;
    }
    *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t outlined copy of AST.Atom.Callout(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  switch(a20)
  {
    case 2:
      swift_bridgeObjectRetain();
      return swift_bridgeObjectRetain();
    case 1:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return swift_bridgeObjectRetain();
    case 0:
      return outlined copy of AST.Atom.Callout.PCRE.Argument(result, a2, a3, a4, a5 & 1);
  }
  return result;
}

uint64_t destroy for AST.Atom(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  type metadata accessor for AST.Atom.Kind(0);
  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 5:
    case 6:
    case 7:
    case 8:
    case 12:
      goto LABEL_2;
    case 2:
    case 13:
LABEL_4:
      swift_bridgeObjectRelease();
LABEL_2:
      result = swift_bridgeObjectRelease();
      break;
    case 3:
      type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
      result = swift_getEnumCaseMultiPayload();
      switch((int)result)
      {
        case 4:
        case 7:
          goto LABEL_2;
        case 5:
          v3 = type metadata accessor for Unicode.NumericType();
          goto LABEL_9;
        case 8:
          v3 = type metadata accessor for Unicode.CanonicalCombiningClass();
LABEL_9:
          result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
          break;
        case 14:
          goto LABEL_4;
        default:
          return result;
      }
      break;
    case 9:
    case 10:
      result = outlined consume of AST.Reference.Kind(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
      break;
    case 11:
      result = outlined consume of AST.Atom.Callout(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
                 *(_BYTE *)(a1 + 152));
      break;
    default:
      return result;
  }
  return result;
}

_QWORD *initializeWithCopy for AST.Atom(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;

  v6 = type metadata accessor for AST.Atom.Kind(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 5u:
    case 6u:
    case 7u:
    case 8u:
      v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      swift_bridgeObjectRetain();
      goto LABEL_18;
    case 2u:
      v11 = a2[1];
      *a1 = *a2;
      a1[1] = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_18;
    case 3u:
      v8 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 4u:
          v9 = a2[1];
          *a1 = *a2;
          a1[1] = v9;
          swift_bridgeObjectRetain();
          goto LABEL_16;
        case 5u:
          v24 = type metadata accessor for Unicode.NumericType();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(a1, a2, v24);
          goto LABEL_16;
        case 7u:
          *(_BYTE *)a1 = *(_BYTE *)a2;
          v25 = a2[2];
          a1[1] = a2[1];
          a1[2] = v25;
          swift_bridgeObjectRetain();
          goto LABEL_16;
        case 8u:
          v26 = type metadata accessor for Unicode.CanonicalCombiningClass();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(a1, a2, v26);
          goto LABEL_16;
        case 0xEu:
          v27 = a2[1];
          *a1 = *a2;
          a1[1] = v27;
          v28 = a2[3];
          a1[2] = a2[2];
          a1[3] = v28;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
LABEL_16:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
          break;
      }
      v29 = type metadata accessor for AST.Atom.CharacterProperty(0);
      *((_BYTE *)a1 + *(int *)(v29 + 20)) = *((_BYTE *)a2 + *(int *)(v29 + 20));
      *((_BYTE *)a1 + *(int *)(v29 + 24)) = *((_BYTE *)a2 + *(int *)(v29 + 24));
      goto LABEL_18;
    case 9u:
    case 0xAu:
      v12 = *a2;
      v13 = a2[1];
      v14 = a2[2];
      v15 = a2[3];
      v16 = *((_BYTE *)a2 + 32);
      outlined copy of AST.Reference.Kind(*a2, v13, v14, v15, v16);
      *a1 = v12;
      a1[1] = v13;
      a1[2] = v14;
      a1[3] = v15;
      *((_BYTE *)a1 + 32) = v16;
      *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 7);
      *((_BYTE *)a1 + 72) = *((_BYTE *)a2 + 72);
      *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
      goto LABEL_18;
    case 0xBu:
      v17 = a2[1];
      v18 = a2[2];
      v19 = a2[3];
      v20 = a2[4];
      v31 = a2[7];
      v32 = a2[8];
      v33 = a2[9];
      v34 = a2[10];
      v35 = a2[11];
      v36 = a2[12];
      v37 = a2[13];
      v38 = a2[14];
      v39 = a2[15];
      v40 = a2[16];
      v41 = a2[17];
      v42 = a2[18];
      v43 = *((_BYTE *)a2 + 152);
      v21 = *a2;
      v44 = a3;
      v22 = a2[5];
      v23 = a2[6];
      outlined copy of AST.Atom.Callout(*a2, v17, v18, v19, v20, v22, v23, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42,
        v43);
      *a1 = v21;
      a1[1] = v17;
      a1[2] = v18;
      a1[3] = v19;
      a1[4] = v20;
      a1[5] = v22;
      a3 = v44;
      a1[6] = v23;
      a1[7] = v31;
      a1[8] = v32;
      a1[9] = v33;
      a1[10] = v34;
      a1[11] = v35;
      a1[12] = v36;
      a1[13] = v37;
      a1[14] = v38;
      a1[15] = v39;
      a1[16] = v40;
      a1[17] = v41;
      a1[18] = v42;
      *((_BYTE *)a1 + 152) = v43;
      goto LABEL_18;
    case 0xCu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v10 = a2[3];
      a1[2] = a2[2];
      a1[3] = v10;
      a1[4] = a2[4];
      *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
      swift_bridgeObjectRetain();
      goto LABEL_18;
    case 0xDu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
      a1[3] = a2[3];
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
      a1[7] = a2[7];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_18:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      break;
  }
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  return a1;
}

_QWORD *assignWithCopy for AST.Atom(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;

  if (a1 != a2)
  {
    outlined destroy of AST.Atom((uint64_t)a1, type metadata accessor for AST.Atom.Kind);
    v6 = type metadata accessor for AST.Atom.Kind(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 5u:
      case 6u:
      case 7u:
      case 8u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_19;
      case 2u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_19;
      case 3u:
        v7 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 4u:
            *a1 = *a2;
            a1[1] = a2[1];
            swift_bridgeObjectRetain();
            goto LABEL_17;
          case 5u:
            v24 = type metadata accessor for Unicode.NumericType();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(a1, a2, v24);
            goto LABEL_17;
          case 7u:
            *(_BYTE *)a1 = *(_BYTE *)a2;
            a1[1] = a2[1];
            a1[2] = a2[2];
            swift_bridgeObjectRetain();
            goto LABEL_17;
          case 8u:
            v25 = type metadata accessor for Unicode.CanonicalCombiningClass();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(a1, a2, v25);
            goto LABEL_17;
          case 0xEu:
            *a1 = *a2;
            a1[1] = a2[1];
            a1[2] = a2[2];
            a1[3] = a2[3];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
LABEL_17:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
            break;
        }
        v26 = type metadata accessor for AST.Atom.CharacterProperty(0);
        *((_BYTE *)a1 + *(int *)(v26 + 20)) = *((_BYTE *)a2 + *(int *)(v26 + 20));
        *((_BYTE *)a1 + *(int *)(v26 + 24)) = *((_BYTE *)a2 + *(int *)(v26 + 24));
        goto LABEL_19;
      case 9u:
      case 0xAu:
        v11 = *a2;
        v12 = a2[1];
        v13 = a2[2];
        v14 = a2[3];
        v15 = *((_BYTE *)a2 + 32);
        outlined copy of AST.Reference.Kind(*a2, v12, v13, v14, v15);
        *a1 = v11;
        a1[1] = v12;
        a1[2] = v13;
        a1[3] = v14;
        *((_BYTE *)a1 + 32) = v15;
        v16 = *(_OWORD *)(a2 + 5);
        v17 = *(_OWORD *)(a2 + 7);
        *((_BYTE *)a1 + 72) = *((_BYTE *)a2 + 72);
        *(_OWORD *)(a1 + 7) = v17;
        *(_OWORD *)(a1 + 5) = v16;
        *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
        goto LABEL_19;
      case 0xBu:
        v18 = a2[1];
        v19 = a2[2];
        v20 = a2[3];
        v21 = a2[4];
        v31 = a2[7];
        v32 = a2[5];
        v33 = a2[8];
        v34 = a2[9];
        v35 = a2[10];
        v36 = a2[11];
        v37 = a2[12];
        v38 = a2[13];
        v39 = a2[14];
        v40 = a2[15];
        v41 = a2[16];
        v42 = a2[17];
        v43 = a2[18];
        v44 = *((_BYTE *)a2 + 152);
        v22 = *a2;
        v23 = a2[6];
        outlined copy of AST.Atom.Callout(*a2, v18, v19, v20, v21, v32, v23, v31, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43,
          v44);
        *a1 = v22;
        a1[1] = v18;
        a1[2] = v19;
        a1[3] = v20;
        a1[4] = v21;
        a1[5] = v32;
        a1[6] = v23;
        a1[7] = v31;
        a1[8] = v33;
        a1[9] = v34;
        a1[10] = v35;
        a1[11] = v36;
        a1[12] = v37;
        a1[13] = v38;
        a1[14] = v39;
        a1[15] = v40;
        a1[16] = v41;
        a1[17] = v42;
        a1[18] = v43;
        *((_BYTE *)a1 + 152) = v44;
        goto LABEL_19;
      case 0xCu:
        v8 = *(_OWORD *)a2;
        a1[2] = a2[2];
        *(_OWORD *)a1 = v8;
        a1[3] = a2[3];
        a1[4] = a2[4];
        *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
        swift_bridgeObjectRetain();
        goto LABEL_19;
      case 0xDu:
        v9 = *(_OWORD *)a2;
        *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
        *(_OWORD *)a1 = v9;
        a1[3] = a2[3];
        v10 = *((_OWORD *)a2 + 2);
        *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
        *((_OWORD *)a1 + 2) = v10;
        a1[7] = a2[7];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_19:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        break;
    }
  }
  v27 = *(int *)(a3 + 20);
  v28 = (_QWORD *)((char *)a1 + v27);
  v29 = (_QWORD *)((char *)a2 + v27);
  *v28 = *v29;
  v28[1] = v29[1];
  return a1;
}

char *initializeWithTake for AST.Atom(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for AST.Atom.Kind(0);
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    v7 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 8)
    {
      v10 = type metadata accessor for Unicode.CanonicalCombiningClass();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 5)
    {
      v9 = type metadata accessor for Unicode.NumericType();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    v11 = type metadata accessor for AST.Atom.CharacterProperty(0);
    a1[*(int *)(v11 + 20)] = a2[*(int *)(v11 + 20)];
    a1[*(int *)(v11 + 24)] = a2[*(int *)(v11 + 24)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *assignWithTake for AST.Atom(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    outlined destroy of AST.Atom((uint64_t)a1, type metadata accessor for AST.Atom.Kind);
    v6 = type metadata accessor for AST.Atom.Kind(0);
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      v7 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 8)
      {
        v10 = type metadata accessor for Unicode.CanonicalCombiningClass();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
        swift_storeEnumTagMultiPayload();
      }
      else if (EnumCaseMultiPayload == 5)
      {
        v9 = type metadata accessor for Unicode.NumericType();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
      }
      v11 = type metadata accessor for AST.Atom.CharacterProperty(0);
      a1[*(int *)(v11 + 20)] = a2[*(int *)(v11 + 20)];
      a1[*(int *)(v11 + 24)] = a2[*(int *)(v11 + 24)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

uint64_t getEnumTagSinglePayload for AST.Atom()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DEFEC250(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AST.Atom.Kind(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for AST.Atom()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DEFEC298(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AST.Atom.Kind(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata completion function for AST.Atom()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for AST.Atom.Kind(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AST.Atom.Kind(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 5u:
      case 6u:
      case 7u:
      case 8u:
        v7 = a2[1];
        *a1 = *a2;
        a1[1] = v7;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        v13 = *a2;
        v14 = a2[1];
        *a1 = v13;
        a1[1] = v14;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        v10 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 4u:
            v11 = a2[1];
            *a1 = *a2;
            a1[1] = v11;
            swift_bridgeObjectRetain();
            goto LABEL_19;
          case 5u:
            v29 = type metadata accessor for Unicode.NumericType();
            (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(a1, a2, v29);
            goto LABEL_19;
          case 7u:
            *(_BYTE *)a1 = *(_BYTE *)a2;
            v30 = a2[2];
            a1[1] = a2[1];
            a1[2] = v30;
            swift_bridgeObjectRetain();
            goto LABEL_19;
          case 8u:
            v31 = type metadata accessor for Unicode.CanonicalCombiningClass();
            (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(a1, a2, v31);
            goto LABEL_19;
          case 0xEu:
            v32 = a2[1];
            *a1 = *a2;
            a1[1] = v32;
            v33 = a2[3];
            a1[2] = a2[2];
            a1[3] = v33;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
LABEL_19:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
            break;
        }
        v34 = type metadata accessor for AST.Atom.CharacterProperty(0);
        *((_BYTE *)a1 + *(int *)(v34 + 20)) = *((_BYTE *)a2 + *(int *)(v34 + 20));
        *((_BYTE *)a1 + *(int *)(v34 + 24)) = *((_BYTE *)a2 + *(int *)(v34 + 24));
        swift_storeEnumTagMultiPayload();
        break;
      case 9u:
      case 0xAu:
        v15 = *a2;
        v16 = a2[1];
        v17 = a2[2];
        v18 = a2[3];
        v19 = *((_BYTE *)a2 + 32);
        outlined copy of AST.Reference.Kind(*a2, v16, v17, v18, v19);
        *a1 = v15;
        a1[1] = v16;
        a1[2] = v17;
        a1[3] = v18;
        *((_BYTE *)a1 + 32) = v19;
        *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
        *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 7);
        *((_BYTE *)a1 + 72) = *((_BYTE *)a2 + 72);
        *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
        swift_storeEnumTagMultiPayload();
        break;
      case 0xBu:
        v20 = *a2;
        v21 = a2[1];
        v22 = a2[2];
        v23 = a2[3];
        v24 = a2[4];
        v25 = a2[5];
        v35 = a2[8];
        v36 = a2[9];
        v37 = a2[10];
        v38 = a2[11];
        v39 = a2[12];
        v40 = a2[13];
        v41 = a2[14];
        v42 = a2[15];
        v43 = a2[16];
        v44 = a2[17];
        v45 = a2[18];
        v46 = *((_BYTE *)a2 + 152);
        v26 = *a2;
        v27 = a2[6];
        v28 = a2[7];
        outlined copy of AST.Atom.Callout(v26, v21, v22, v23, v24, v25, v27, v28, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45,
          v46);
        *a1 = v20;
        a1[1] = v21;
        a1[2] = v22;
        a1[3] = v23;
        a1[4] = v24;
        a1[5] = v25;
        a1[6] = v27;
        a1[7] = v28;
        a1[8] = v35;
        a1[9] = v36;
        a1[10] = v37;
        a1[11] = v38;
        a1[12] = v39;
        a1[13] = v40;
        a1[14] = v41;
        a1[15] = v42;
        a1[16] = v43;
        a1[17] = v44;
        a1[18] = v45;
        *((_BYTE *)a1 + 152) = v46;
        swift_storeEnumTagMultiPayload();
        break;
      case 0xCu:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v12 = a2[3];
        a1[2] = a2[2];
        a1[3] = v12;
        a1[4] = a2[4];
        *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 0xDu:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
        a1[3] = a2[3];
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
        a1[7] = a2[7];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for AST.Atom.Kind(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 5:
    case 6:
    case 7:
    case 8:
    case 12:
      goto LABEL_2;
    case 2:
    case 13:
LABEL_4:
      swift_bridgeObjectRelease();
LABEL_2:
      result = swift_bridgeObjectRelease();
      break;
    case 3:
      type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
      result = swift_getEnumCaseMultiPayload();
      switch((int)result)
      {
        case 4:
        case 7:
          goto LABEL_2;
        case 5:
          v3 = type metadata accessor for Unicode.NumericType();
          goto LABEL_9;
        case 8:
          v3 = type metadata accessor for Unicode.CanonicalCombiningClass();
LABEL_9:
          result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
          break;
        case 14:
          goto LABEL_4;
        default:
          return result;
      }
      break;
    case 9:
    case 10:
      result = outlined consume of AST.Reference.Kind(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
      break;
    case 11:
      result = outlined consume of AST.Atom.Callout(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
                 *(_BYTE *)(a1 + 152));
      break;
    default:
      return result;
  }
  return result;
}

_QWORD *initializeWithCopy for AST.Atom.Kind(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 5u:
    case 6u:
    case 7u:
    case 8u:
      v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRetain();
      goto LABEL_18;
    case 2u:
      v10 = *a2;
      v11 = a2[1];
      *a1 = v10;
      a1[1] = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_18;
    case 3u:
      v7 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 4u:
          v8 = a2[1];
          *a1 = *a2;
          a1[1] = v8;
          swift_bridgeObjectRetain();
          goto LABEL_16;
        case 5u:
          v26 = type metadata accessor for Unicode.NumericType();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(a1, a2, v26);
          goto LABEL_16;
        case 7u:
          *(_BYTE *)a1 = *(_BYTE *)a2;
          v27 = a2[2];
          a1[1] = a2[1];
          a1[2] = v27;
          swift_bridgeObjectRetain();
          goto LABEL_16;
        case 8u:
          v28 = type metadata accessor for Unicode.CanonicalCombiningClass();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(a1, a2, v28);
          goto LABEL_16;
        case 0xEu:
          v29 = a2[1];
          *a1 = *a2;
          a1[1] = v29;
          v30 = a2[3];
          a1[2] = a2[2];
          a1[3] = v30;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
LABEL_16:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
          break;
      }
      v31 = type metadata accessor for AST.Atom.CharacterProperty(0);
      *((_BYTE *)a1 + *(int *)(v31 + 20)) = *((_BYTE *)a2 + *(int *)(v31 + 20));
      *((_BYTE *)a1 + *(int *)(v31 + 24)) = *((_BYTE *)a2 + *(int *)(v31 + 24));
      goto LABEL_18;
    case 9u:
    case 0xAu:
      v12 = *a2;
      v13 = a2[1];
      v14 = a2[2];
      v15 = a2[3];
      v16 = *((_BYTE *)a2 + 32);
      outlined copy of AST.Reference.Kind(*a2, v13, v14, v15, v16);
      *a1 = v12;
      a1[1] = v13;
      a1[2] = v14;
      a1[3] = v15;
      *((_BYTE *)a1 + 32) = v16;
      *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 7);
      *((_BYTE *)a1 + 72) = *((_BYTE *)a2 + 72);
      *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
      goto LABEL_18;
    case 0xBu:
      v17 = *a2;
      v18 = a2[1];
      v19 = a2[2];
      v20 = a2[3];
      v21 = a2[4];
      v22 = a2[5];
      v33 = a2[8];
      v34 = a2[9];
      v35 = a2[10];
      v36 = a2[11];
      v37 = a2[12];
      v38 = a2[13];
      v39 = a2[14];
      v40 = a2[15];
      v41 = a2[16];
      v42 = a2[17];
      v43 = a2[18];
      v44 = *((_BYTE *)a2 + 152);
      v23 = *a2;
      v24 = a2[6];
      v25 = a2[7];
      outlined copy of AST.Atom.Callout(v23, v18, v19, v20, v21, v22, v24, v25, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43,
        v44);
      *a1 = v17;
      a1[1] = v18;
      a1[2] = v19;
      a1[3] = v20;
      a1[4] = v21;
      a1[5] = v22;
      a1[6] = v24;
      a1[7] = v25;
      a1[8] = v33;
      a1[9] = v34;
      a1[10] = v35;
      a1[11] = v36;
      a1[12] = v37;
      a1[13] = v38;
      a1[14] = v39;
      a1[15] = v40;
      a1[16] = v41;
      a1[17] = v42;
      a1[18] = v43;
      *((_BYTE *)a1 + 152) = v44;
      goto LABEL_18;
    case 0xCu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v9 = a2[3];
      a1[2] = a2[2];
      a1[3] = v9;
      a1[4] = a2[4];
      *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
      swift_bridgeObjectRetain();
      goto LABEL_18;
    case 0xDu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
      a1[3] = a2[3];
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
      a1[7] = a2[7];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_18:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_QWORD *assignWithCopy for AST.Atom.Kind(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;

  if (a1 != a2)
  {
    outlined destroy of AST.Atom((uint64_t)a1, type metadata accessor for AST.Atom.Kind);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 5u:
      case 6u:
      case 7u:
      case 8u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_19;
      case 2u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_19;
      case 3u:
        v6 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 4u:
            *a1 = *a2;
            a1[1] = a2[1];
            swift_bridgeObjectRetain();
            goto LABEL_17;
          case 5u:
            v26 = type metadata accessor for Unicode.NumericType();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(a1, a2, v26);
            goto LABEL_17;
          case 7u:
            *(_BYTE *)a1 = *(_BYTE *)a2;
            a1[1] = a2[1];
            a1[2] = a2[2];
            swift_bridgeObjectRetain();
            goto LABEL_17;
          case 8u:
            v27 = type metadata accessor for Unicode.CanonicalCombiningClass();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(a1, a2, v27);
            goto LABEL_17;
          case 0xEu:
            *a1 = *a2;
            a1[1] = a2[1];
            a1[2] = a2[2];
            a1[3] = a2[3];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
LABEL_17:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
            break;
        }
        v28 = type metadata accessor for AST.Atom.CharacterProperty(0);
        *((_BYTE *)a1 + *(int *)(v28 + 20)) = *((_BYTE *)a2 + *(int *)(v28 + 20));
        *((_BYTE *)a1 + *(int *)(v28 + 24)) = *((_BYTE *)a2 + *(int *)(v28 + 24));
        goto LABEL_19;
      case 9u:
      case 0xAu:
        v10 = *a2;
        v11 = a2[1];
        v12 = a2[2];
        v13 = a2[3];
        v14 = *((_BYTE *)a2 + 32);
        outlined copy of AST.Reference.Kind(*a2, v11, v12, v13, v14);
        *a1 = v10;
        a1[1] = v11;
        a1[2] = v12;
        a1[3] = v13;
        *((_BYTE *)a1 + 32) = v14;
        v15 = *(_OWORD *)(a2 + 5);
        v16 = *(_OWORD *)(a2 + 7);
        *((_BYTE *)a1 + 72) = *((_BYTE *)a2 + 72);
        *(_OWORD *)(a1 + 7) = v16;
        *(_OWORD *)(a1 + 5) = v15;
        *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
        goto LABEL_19;
      case 0xBu:
        v17 = *a2;
        v18 = a2[1];
        v19 = a2[2];
        v20 = a2[3];
        v21 = a2[4];
        v22 = a2[5];
        v30 = a2[8];
        v31 = a2[9];
        v32 = a2[10];
        v33 = a2[11];
        v34 = a2[12];
        v35 = a2[13];
        v36 = a2[14];
        v37 = a2[15];
        v38 = a2[16];
        v39 = a2[17];
        v40 = a2[18];
        v41 = *((_BYTE *)a2 + 152);
        v23 = *a2;
        v24 = a2[6];
        v25 = a2[7];
        outlined copy of AST.Atom.Callout(v23, v18, v19, v20, v21, v22, v24, v25, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40,
          v41);
        *a1 = v17;
        a1[1] = v18;
        a1[2] = v19;
        a1[3] = v20;
        a1[4] = v21;
        a1[5] = v22;
        a1[6] = v24;
        a1[7] = v25;
        a1[8] = v30;
        a1[9] = v31;
        a1[10] = v32;
        a1[11] = v33;
        a1[12] = v34;
        a1[13] = v35;
        a1[14] = v36;
        a1[15] = v37;
        a1[16] = v38;
        a1[17] = v39;
        a1[18] = v40;
        *((_BYTE *)a1 + 152) = v41;
        goto LABEL_19;
      case 0xCu:
        v7 = *(_OWORD *)a2;
        a1[2] = a2[2];
        *(_OWORD *)a1 = v7;
        a1[3] = a2[3];
        a1[4] = a2[4];
        *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
        swift_bridgeObjectRetain();
        goto LABEL_19;
      case 0xDu:
        v8 = *(_OWORD *)a2;
        *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
        *(_OWORD *)a1 = v8;
        a1[3] = a2[3];
        v9 = *((_OWORD *)a2 + 2);
        *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
        *((_OWORD *)a1 + 2) = v9;
        a1[7] = a2[7];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_19:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *initializeWithTake for AST.Atom.Kind(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (swift_getEnumCaseMultiPayload() == 3)
  {
    v6 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 8)
    {
      v9 = type metadata accessor for Unicode.CanonicalCombiningClass();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 5)
    {
      v8 = type metadata accessor for Unicode.NumericType();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v10 = type metadata accessor for AST.Atom.CharacterProperty(0);
    *((_BYTE *)a1 + *(int *)(v10 + 20)) = *((_BYTE *)a2 + *(int *)(v10 + 20));
    *((_BYTE *)a1 + *(int *)(v10 + 24)) = *((_BYTE *)a2 + *(int *)(v10 + 24));
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for AST.Atom.Kind(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    outlined destroy of AST.Atom((uint64_t)a1, type metadata accessor for AST.Atom.Kind);
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      v6 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 8)
      {
        v9 = type metadata accessor for Unicode.CanonicalCombiningClass();
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
        swift_storeEnumTagMultiPayload();
      }
      else if (EnumCaseMultiPayload == 5)
      {
        v8 = type metadata accessor for Unicode.NumericType();
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      }
      v10 = type metadata accessor for AST.Atom.CharacterProperty(0);
      *((_BYTE *)a1 + *(int *)(v10 + 20)) = *((_BYTE *)a2 + *(int *)(v10 + 20));
      *((_BYTE *)a1 + *(int *)(v10 + 24)) = *((_BYTE *)a2 + *(int *)(v10 + 24));
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t destructiveInjectEnumTag for AST.Atom.Kind()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata completion function for AST.Atom.Kind()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for AST.Atom.CharacterProperty(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AST.Atom.Number(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AST.Atom.Number(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

ValueMetadata *type metadata accessor for AST.Atom.Number()
{
  return &type metadata for AST.Atom.Number;
}

uint64_t getEnumTagSinglePayload for AST.Atom.Scalar(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AST.Atom.Scalar(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for AST.Atom.Scalar()
{
  return &type metadata for AST.Atom.Scalar;
}

_QWORD *initializeBufferWithCopyOfBuffer for AST.Alternation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for AST.Alternation(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for AST.Alternation(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AST.Alternation(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AST.Alternation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AST.Atom.ScalarSequence()
{
  return &type metadata for AST.Atom.ScalarSequence;
}

uint64_t getEnumTagSinglePayload for AST.Atom.EscapedBuiltin(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xE2)
    goto LABEL_17;
  if (a2 + 30 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 30) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 30;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 30;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 30;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x1F;
  v8 = v6 - 31;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AST.Atom.EscapedBuiltin(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 30 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 30) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE2)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE1)
    return ((uint64_t (*)(void))((char *)&loc_1DEFEDA44 + 4 * byte_1DEFFE2C7[v4]))();
  *a1 = a2 + 30;
  return ((uint64_t (*)(void))((char *)sub_1DEFEDA78 + 4 * byte_1DEFFE2C2[v4]))();
}

uint64_t sub_1DEFEDA78(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DEFEDA80(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DEFEDA88);
  return result;
}

uint64_t sub_1DEFEDA94(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DEFEDA9CLL);
  *(_BYTE *)result = a2 + 30;
  return result;
}

uint64_t sub_1DEFEDAA0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DEFEDAA8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AST.Atom.EscapedBuiltin()
{
  return &type metadata for AST.Atom.EscapedBuiltin;
}

uint64_t *initializeBufferWithCopyOfBuffer for AST.Atom.CharacterProperty(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 4u:
        v8 = a2[1];
        *a1 = *a2;
        a1[1] = v8;
        swift_bridgeObjectRetain();
        goto LABEL_10;
      case 5u:
        v10 = type metadata accessor for Unicode.NumericType();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
        goto LABEL_10;
      case 7u:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        v11 = a2[2];
        a1[1] = a2[1];
        a1[2] = v11;
        swift_bridgeObjectRetain();
        goto LABEL_10;
      case 8u:
        v12 = type metadata accessor for Unicode.CanonicalCombiningClass();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
        goto LABEL_10;
      case 0xEu:
        v13 = a2[1];
        *a1 = *a2;
        a1[1] = v13;
        v14 = a2[3];
        a1[2] = a2[2];
        a1[3] = v14;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_10:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        break;
    }
    v15 = *(int *)(a3 + 24);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
    *((_BYTE *)a1 + v15) = *((_BYTE *)a2 + v15);
  }
  return a1;
}

uint64_t destroy for AST.Atom.CharacterProperty(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 4:
    case 7:
      goto LABEL_6;
    case 5:
      v3 = type metadata accessor for Unicode.NumericType();
      goto LABEL_4;
    case 8:
      v3 = type metadata accessor for Unicode.CanonicalCombiningClass();
LABEL_4:
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      break;
    case 14:
      swift_bridgeObjectRelease();
LABEL_6:
      result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

_QWORD *initializeWithCopy for AST.Atom.CharacterProperty(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 4u:
      v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      swift_bridgeObjectRetain();
      goto LABEL_8;
    case 5u:
      v8 = type metadata accessor for Unicode.NumericType();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      goto LABEL_8;
    case 7u:
      *(_BYTE *)a1 = *(_BYTE *)a2;
      v9 = a2[2];
      a1[1] = a2[1];
      a1[2] = v9;
      swift_bridgeObjectRetain();
      goto LABEL_8;
    case 8u:
      v10 = type metadata accessor for Unicode.CanonicalCombiningClass();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      goto LABEL_8;
    case 0xEu:
      v11 = a2[1];
      *a1 = *a2;
      a1[1] = v11;
      v12 = a2[3];
      a1[2] = a2[2];
      a1[3] = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_8:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      break;
  }
  v13 = *(int *)(a3 + 24);
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  *((_BYTE *)a1 + v13) = *((_BYTE *)a2 + v13);
  return a1;
}

_QWORD *assignWithCopy for AST.Atom.CharacterProperty(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    outlined destroy of AST.Atom((uint64_t)a1, type metadata accessor for AST.Atom.CharacterProperty.Kind);
    v6 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 4u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_9;
      case 5u:
        v7 = type metadata accessor for Unicode.NumericType();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
        goto LABEL_9;
      case 7u:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        swift_bridgeObjectRetain();
        goto LABEL_9;
      case 8u:
        v8 = type metadata accessor for Unicode.CanonicalCombiningClass();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        goto LABEL_9;
      case 0xEu:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_9:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        break;
    }
  }
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *initializeWithTake for AST.Atom.CharacterProperty(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 8)
  {
    v9 = type metadata accessor for Unicode.CanonicalCombiningClass();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 5)
  {
    v8 = type metadata accessor for Unicode.NumericType();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v10 = *(int *)(a3 + 24);
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  *((_BYTE *)a1 + v10) = *((_BYTE *)a2 + v10);
  return a1;
}

void *assignWithTake for AST.Atom.CharacterProperty(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    outlined destroy of AST.Atom((uint64_t)a1, type metadata accessor for AST.Atom.CharacterProperty.Kind);
    v6 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 8)
    {
      v9 = type metadata accessor for Unicode.CanonicalCombiningClass();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 5)
    {
      v8 = type metadata accessor for Unicode.NumericType();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v10 = *(int *)(a3 + 24);
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  *((_BYTE *)a1 + v10) = *((_BYTE *)a2 + v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for AST.Atom.CharacterProperty()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DEFEE210(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 2)
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AST.Atom.CharacterProperty()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DEFEE2A8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  return result;
}

uint64_t type metadata completion function for AST.Atom.CharacterProperty()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for AST.Atom.CharacterProperty.Kind(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AST.Atom.CharacterProperty.Kind(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 4u:
        v7 = a2[1];
        *a1 = *a2;
        a1[1] = v7;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 5u:
        v10 = type metadata accessor for Unicode.NumericType();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
        swift_storeEnumTagMultiPayload();
        break;
      case 7u:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        v11 = a2[2];
        a1[1] = a2[1];
        a1[2] = v11;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 8u:
        v12 = type metadata accessor for Unicode.CanonicalCombiningClass();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
        swift_storeEnumTagMultiPayload();
        break;
      case 0xEu:
        v13 = a2[1];
        *a1 = *a2;
        a1[1] = v13;
        v14 = a2[2];
        v15 = a2[3];
        a1[2] = v14;
        a1[3] = v15;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for AST.Atom.CharacterProperty.Kind(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 4:
    case 7:
      goto LABEL_6;
    case 5:
      v3 = type metadata accessor for Unicode.NumericType();
      goto LABEL_4;
    case 8:
      v3 = type metadata accessor for Unicode.CanonicalCombiningClass();
LABEL_4:
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      break;
    case 14:
      swift_bridgeObjectRelease();
LABEL_6:
      result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

_QWORD *initializeWithCopy for AST.Atom.CharacterProperty.Kind(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 4u:
      v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRetain();
      goto LABEL_8;
    case 5u:
      v7 = type metadata accessor for Unicode.NumericType();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      goto LABEL_8;
    case 7u:
      *(_BYTE *)a1 = *(_BYTE *)a2;
      v8 = a2[2];
      a1[1] = a2[1];
      a1[2] = v8;
      swift_bridgeObjectRetain();
      goto LABEL_8;
    case 8u:
      v9 = type metadata accessor for Unicode.CanonicalCombiningClass();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      goto LABEL_8;
    case 0xEu:
      v10 = a2[1];
      *a1 = *a2;
      a1[1] = v10;
      v11 = a2[2];
      v12 = a2[3];
      a1[2] = v11;
      a1[3] = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_8:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_QWORD *assignWithCopy for AST.Atom.CharacterProperty.Kind(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (a1 != a2)
  {
    outlined destroy of AST.Atom((uint64_t)a1, type metadata accessor for AST.Atom.CharacterProperty.Kind);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 4u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_9;
      case 5u:
        v6 = type metadata accessor for Unicode.NumericType();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
        goto LABEL_9;
      case 7u:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        swift_bridgeObjectRetain();
        goto LABEL_9;
      case 8u:
        v7 = type metadata accessor for Unicode.CanonicalCombiningClass();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
        goto LABEL_9;
      case 0xEu:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_9:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *initializeWithTake for AST.Atom.CharacterProperty.Kind(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 8)
  {
    v8 = type metadata accessor for Unicode.CanonicalCombiningClass();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 5)
  {
    v7 = type metadata accessor for Unicode.NumericType();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for AST.Atom.CharacterProperty.Kind(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    outlined destroy of AST.Atom((uint64_t)a1, type metadata accessor for AST.Atom.CharacterProperty.Kind);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 8)
    {
      v8 = type metadata accessor for Unicode.CanonicalCombiningClass();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 5)
    {
      v7 = type metadata accessor for Unicode.NumericType();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for AST.Atom.CharacterProperty.Kind()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for Unicode.NumericType();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for Unicode.CanonicalCombiningClass();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AST.Atom.CharacterProperty.Kind.MapKind()
{
  return &type metadata for AST.Atom.CharacterProperty.Kind.MapKind;
}

ValueMetadata *type metadata accessor for AST.Atom.CharacterProperty.PCRESpecialCategory()
{
  return &type metadata for AST.Atom.CharacterProperty.PCRESpecialCategory;
}

uint64_t getEnumTagSinglePayload for AST.Atom.CharacterProperty.JavaSpecial(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEF)
    goto LABEL_17;
  if (a2 + 17 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 17) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 17;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 17;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 17;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x12;
  v8 = v6 - 18;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AST.Atom.CharacterProperty.JavaSpecial(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 17 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 17) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEE)
    return ((uint64_t (*)(void))((char *)&loc_1DEFEEC20 + 4 * byte_1DEFFE329[v4]))();
  *a1 = a2 + 17;
  return ((uint64_t (*)(void))((char *)sub_1DEFEEC54 + 4 * byte_1DEFFE324[v4]))();
}

uint64_t sub_1DEFEEC54(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DEFEEC5C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DEFEEC64);
  return result;
}

uint64_t sub_1DEFEEC70(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DEFEEC78);
  *(_BYTE *)result = a2 + 17;
  return result;
}

uint64_t sub_1DEFEEC7C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DEFEEC84(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AST.Atom.CharacterProperty.JavaSpecial()
{
  return &type metadata for AST.Atom.CharacterProperty.JavaSpecial;
}

uint64_t destroy for AST.Atom.Callout(uint64_t a1)
{
  return outlined consume of AST.Atom.Callout(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
           *(_BYTE *)(a1 + 152));
}

uint64_t initializeWithCopy for AST.Atom.Callout(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a2 + 88);
  v16 = *(_QWORD *)(a2 + 96);
  v17 = *(_QWORD *)(a2 + 104);
  v18 = *(_QWORD *)(a2 + 112);
  v19 = *(_QWORD *)(a2 + 120);
  v20 = *(_QWORD *)(a2 + 128);
  v21 = *(_QWORD *)(a2 + 136);
  v22 = *(_QWORD *)(a2 + 144);
  v23 = *(_BYTE *)(a2 + 152);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)a2;
  outlined copy of AST.Atom.Callout(*(_QWORD *)a2, v3, v4, v5, v6, v7, v8, v9, v10, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,
    v23);
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 88) = v15;
  *(_QWORD *)(a1 + 96) = v16;
  *(_QWORD *)(a1 + 104) = v17;
  *(_QWORD *)(a1 + 112) = v18;
  *(_QWORD *)(a1 + 120) = v19;
  *(_QWORD *)(a1 + 128) = v20;
  *(_QWORD *)(a1 + 136) = v21;
  *(_QWORD *)(a1 + 144) = v22;
  *(_BYTE *)(a1 + 152) = v23;
  return a1;
}

uint64_t assignWithCopy for AST.Atom.Callout(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v28 = *(_QWORD *)(a2 + 72);
  v29 = *(_QWORD *)(a2 + 80);
  v30 = *(_QWORD *)(a2 + 88);
  v31 = *(_QWORD *)(a2 + 96);
  v32 = *(_QWORD *)(a2 + 104);
  v33 = *(_QWORD *)(a2 + 112);
  v34 = *(_QWORD *)(a2 + 120);
  v35 = *(_QWORD *)(a2 + 128);
  v36 = *(_QWORD *)(a2 + 136);
  v37 = *(_QWORD *)(a2 + 144);
  v38 = *(_BYTE *)(a2 + 152);
  outlined copy of AST.Atom.Callout(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37,
    v38);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_OWORD *)(a1 + 80);
  v22 = *(_OWORD *)(a1 + 96);
  v23 = *(_OWORD *)(a1 + 112);
  v24 = *(_OWORD *)(a1 + 128);
  v25 = *(_QWORD *)(a1 + 144);
  v26 = *(_BYTE *)(a1 + 152);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v28;
  *(_QWORD *)(a1 + 80) = v29;
  *(_QWORD *)(a1 + 88) = v30;
  *(_QWORD *)(a1 + 96) = v31;
  *(_QWORD *)(a1 + 104) = v32;
  *(_QWORD *)(a1 + 112) = v33;
  *(_QWORD *)(a1 + 120) = v34;
  *(_QWORD *)(a1 + 128) = v35;
  *(_QWORD *)(a1 + 136) = v36;
  *(_QWORD *)(a1 + 144) = v37;
  *(_BYTE *)(a1 + 152) = v38;
  outlined consume of AST.Atom.Callout(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25,
    v26);
  return a1;
}

__n128 __swift_memcpy153_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 137) = *(_OWORD *)(a2 + 137);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for AST.Atom.Callout(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v3 = *(_QWORD *)(a2 + 144);
  v4 = *(_BYTE *)(a2 + 152);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_OWORD *)(a1 + 64);
  v14 = *(_OWORD *)(a1 + 80);
  v15 = *(_OWORD *)(a1 + 96);
  v16 = *(_OWORD *)(a1 + 112);
  v17 = *(_OWORD *)(a1 + 128);
  v18 = *(_QWORD *)(a1 + 144);
  v19 = *(_BYTE *)(a1 + 152);
  v20 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v20;
  v21 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v21;
  v22 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v22;
  v23 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v23;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = v3;
  *(_BYTE *)(a1 + 152) = v4;
  outlined consume of AST.Atom.Callout(v5, v7, v6, v8, v9, v10, v11, v12, v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17, *((uint64_t *)&v17 + 1), v18,
    v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for AST.Atom.Callout(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 153))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 152);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AST.Atom.Callout(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 152) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 153) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 153) = 0;
    if (a2)
      *(_BYTE *)(result + 152) = -(char)a2;
  }
  return result;
}

uint64_t destructiveInjectEnumTag for AST.Atom.Callout(uint64_t result, char a2)
{
  *(_BYTE *)(result + 152) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AST.Atom.Callout()
{
  return &type metadata for AST.Atom.Callout;
}

uint64_t initializeWithCopy for AST.Atom.Callout.PCRE(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  outlined copy of AST.Atom.Callout.PCRE.Argument(*(_QWORD *)a2, v5, v6, v7, v8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t assignWithCopy for AST.Atom.Callout.PCRE(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  outlined copy of AST.Atom.Callout.PCRE.Argument(*(_QWORD *)a2, v5, v6, v7, v8);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  outlined consume of AST.Atom.Callout.PCRE.Argument(v9, v10, v11, v12, v13);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AST.Atom.Callout.PCRE(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;

  v4 = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_BYTE *)(a1 + 32);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_BYTE *)(a1 + 32) = v4;
  outlined consume of AST.Atom.Callout.PCRE.Argument(v5, v6, v7, v8, v9);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for AST.Atom.Callout.PCRE(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AST.Atom.Callout.PCRE(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AST.Atom.Callout.PCRE()
{
  return &type metadata for AST.Atom.Callout.PCRE;
}

uint64_t destroy for AST.Atom.Callout.PCRE(uint64_t a1)
{
  return outlined consume of AST.Atom.Callout.PCRE.Argument(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for AST.Atom.Callout.PCRE.Argument(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  outlined copy of AST.Atom.Callout.PCRE.Argument(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for AST.Atom.Callout.PCRE.Argument(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  outlined copy of AST.Atom.Callout.PCRE.Argument(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  outlined consume of AST.Atom.Callout.PCRE.Argument(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for AST.Atom.Callout.PCRE.Argument(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_BYTE *)(a1 + 32);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(_BYTE *)(a1 + 32) = v3;
  outlined consume of AST.Atom.Callout.PCRE.Argument(v4, v6, v5, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AST.Atom.Callout.PCRE.Argument(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AST.Atom.Callout.PCRE.Argument(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t destructiveInjectEnumTag for AST.Atom.Callout.PCRE.Argument(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for AST.Atom.Callout.PCRE.Argument()
{
  return &type metadata for AST.Atom.Callout.PCRE.Argument;
}

uint64_t destroy for AST.Atom.Callout.OnigurumaNamed()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AST.Atom.Callout.OnigurumaNamed(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for AST.Atom.Callout.OnigurumaNamed(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  a1[11] = a2[11];
  a1[12] = a2[12];
  a1[13] = a2[13];
  a1[14] = a2[14];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[15] = a2[15];
  a1[16] = a2[16];
  return a1;
}

__n128 __swift_memcpy136_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for AST.Atom.Callout.OnigurumaNamed(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  return a1;
}

uint64_t getEnumTagSinglePayload for AST.Atom.Callout.OnigurumaNamed(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 136))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AST.Atom.Callout.OnigurumaNamed(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 136) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 136) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AST.Atom.Callout.OnigurumaNamed()
{
  return &type metadata for AST.Atom.Callout.OnigurumaNamed;
}

uint64_t initializeWithCopy for AST.Atom.Callout.OnigurumaNamed.ArgList(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for AST.Atom.Callout.OnigurumaNamed.ArgList(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for AST.Atom.Callout.OnigurumaNamed.ArgList(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for AST.Atom.Callout.OnigurumaNamed.ArgList(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AST.Atom.Callout.OnigurumaNamed.ArgList(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AST.Atom.Callout.OnigurumaNamed.ArgList()
{
  return &type metadata for AST.Atom.Callout.OnigurumaNamed.ArgList;
}

uint64_t destroy for AST.Atom.Callout.OnigurumaOfContents()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AST.Atom.Callout.OnigurumaOfContents(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v5 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v5;
  v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v6;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AST.Atom.Callout.OnigurumaOfContents(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  return a1;
}

__n128 __swift_memcpy152_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for AST.Atom.Callout.OnigurumaOfContents(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v6 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v7;
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  return a1;
}

uint64_t getEnumTagSinglePayload for AST.Atom.Callout.OnigurumaOfContents(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 152))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AST.Atom.Callout.OnigurumaOfContents(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 152) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 152) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AST.Atom.Callout.OnigurumaOfContents()
{
  return &type metadata for AST.Atom.Callout.OnigurumaOfContents;
}

ValueMetadata *type metadata accessor for AST.Atom.Callout.OnigurumaOfContents.Direction()
{
  return &type metadata for AST.Atom.Callout.OnigurumaOfContents.Direction;
}

uint64_t initializeWithCopy for AST.Atom.Callout.OnigurumaTag(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for AST.Atom.Callout.OnigurumaTag(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  return a1;
}

uint64_t assignWithTake for AST.Atom.Callout.OnigurumaTag(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  return a1;
}

ValueMetadata *type metadata accessor for AST.Atom.Callout.OnigurumaTag()
{
  return &type metadata for AST.Atom.Callout.OnigurumaTag;
}

uint64_t destroy for AST.Atom.BacktrackingDirective()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AST.Atom.BacktrackingDirective(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AST.Atom.BacktrackingDirective(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for AST.Atom.BacktrackingDirective(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for AST.Atom.BacktrackingDirective(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AST.Atom.BacktrackingDirective(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
      *(_QWORD *)(result + 32) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AST.Atom.BacktrackingDirective()
{
  return &type metadata for AST.Atom.BacktrackingDirective;
}

uint64_t getEnumTagSinglePayload for AST.Atom.BacktrackingDirective.Kind(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AST.Atom.BacktrackingDirective.Kind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1DEFF0058 + 4 * byte_1DEFFE333[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1DEFF008C + 4 * byte_1DEFFE32E[v4]))();
}

uint64_t sub_1DEFF008C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DEFF0094(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DEFF009CLL);
  return result;
}

uint64_t sub_1DEFF00A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DEFF00B0);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1DEFF00B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DEFF00BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AST.Atom.BacktrackingDirective.Kind()
{
  return &type metadata for AST.Atom.BacktrackingDirective.Kind;
}

uint64_t destroy for AST.Conditional(uint64_t a1)
{
  outlined consume of AST.Conditional.Condition.Kind(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_OWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120));
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for AST.Conditional(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a2 + 96);
  v16 = *(_QWORD *)(a2 + 104);
  v17 = *(_QWORD *)(a2 + 112);
  v18 = *(_QWORD *)(a2 + 120);
  v19 = *(_QWORD *)(a2 + 128);
  v20 = *(_QWORD *)(a2 + 136);
  outlined copy of AST.Conditional.Condition.Kind(v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16, v17, v18);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 72) = v11;
  *(_QWORD *)(a1 + 80) = v13;
  *(_QWORD *)(a1 + 88) = v14;
  *(_QWORD *)(a1 + 96) = v15;
  *(_QWORD *)(a1 + 104) = v16;
  *(_QWORD *)(a1 + 112) = v17;
  *(_QWORD *)(a1 + 120) = v18;
  *(_QWORD *)(a1 + 128) = v19;
  *(_QWORD *)(a1 + 136) = v20;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AST.Conditional(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a2 + 72);
  v25 = *(_QWORD *)(a2 + 80);
  v26 = *(_QWORD *)(a2 + 88);
  v27 = *(_QWORD *)(a2 + 96);
  v28 = *(_QWORD *)(a2 + 104);
  v29 = *(_QWORD *)(a2 + 112);
  v30 = *(_QWORD *)(a2 + 120);
  v31 = *(_QWORD *)(a2 + 128);
  v32 = *(_QWORD *)(a2 + 136);
  outlined copy of AST.Conditional.Condition.Kind(v4, v5, v6, v7, v8, v9, v10, v11, v25, v26, v27, v28, v29, v30);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  v16 = *(_QWORD *)(a1 + 48);
  v17 = *(_QWORD *)(a1 + 56);
  v18 = *(_QWORD *)(a1 + 64);
  v19 = *(_QWORD *)(a1 + 72);
  v20 = *(_OWORD *)(a1 + 80);
  v21 = *(_OWORD *)(a1 + 96);
  v22 = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 72) = v11;
  *(_QWORD *)(a1 + 80) = v25;
  *(_QWORD *)(a1 + 88) = v26;
  *(_QWORD *)(a1 + 96) = v27;
  *(_QWORD *)(a1 + 104) = v28;
  *(_QWORD *)(a1 + 112) = v29;
  *(_QWORD *)(a1 + 120) = v30;
  *(_QWORD *)(a1 + 128) = v31;
  *(_QWORD *)(a1 + 136) = v32;
  outlined consume of AST.Conditional.Condition.Kind(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, SBYTE8(v22));
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_retain();
  swift_release();
  v23 = *(_OWORD *)(a2 + 168);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = v23;
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy200_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  result = *(__n128 *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

uint64_t assignWithTake for AST.Conditional(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 64);
  v11 = *(_QWORD *)(a1 + 72);
  v12 = *(_OWORD *)(a1 + 80);
  v13 = *(_OWORD *)(a1 + 96);
  v14 = *(_OWORD *)(a1 + 112);
  v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v15;
  v16 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v16;
  v17 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v17;
  v18 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v18;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  outlined consume of AST.Conditional.Condition.Kind(v4, v5, v6, v7, v8, v9, v10, v11, v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14, SBYTE8(v14));
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_release();
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AST.Conditional(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x75 && *(_BYTE *)(a1 + 200))
    return (*(_DWORD *)a1 + 117);
  v3 = ((*(_QWORD *)(a1 + 160) >> 60) & 0x8F | (16 * (*(_QWORD *)(a1 + 160) & 7))) ^ 0x7F;
  if (v3 >= 0x74)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AST.Conditional(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x74)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 117;
    if (a3 >= 0x75)
      *(_BYTE *)(result + 200) = 1;
  }
  else
  {
    if (a3 >= 0x75)
      *(_BYTE *)(result + 200) = 0;
    if (a2)
    {
      v3 = (-a2 >> 4) & 7 | (8 * (-a2 & 0x7F));
      *(_QWORD *)(result + 160) = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AST.Conditional()
{
  return &type metadata for AST.Conditional;
}

uint64_t initializeWithCopy for AST.Conditional.Condition(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a2 + 64);
  v14 = *(_QWORD *)(a2 + 72);
  v15 = *(_QWORD *)(a2 + 80);
  v16 = *(_QWORD *)(a2 + 88);
  v17 = *(_QWORD *)(a2 + 96);
  v18 = *(_QWORD *)(a2 + 104);
  v19 = *(_QWORD *)(a2 + 112);
  v20 = *(_QWORD *)(a2 + 120);
  outlined copy of AST.Conditional.Condition.Kind(*(_QWORD *)a2, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16, v17, v18);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v13;
  *(_QWORD *)(a1 + 72) = v14;
  *(_QWORD *)(a1 + 80) = v15;
  *(_QWORD *)(a1 + 88) = v16;
  *(_QWORD *)(a1 + 96) = v17;
  *(_QWORD *)(a1 + 104) = v18;
  *(_QWORD *)(a1 + 112) = v19;
  *(_QWORD *)(a1 + 120) = v20;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  return a1;
}

uint64_t assignWithCopy for AST.Conditional.Condition(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  v7 = a2[3];
  v8 = a2[4];
  v9 = a2[5];
  v10 = a2[6];
  v11 = a2[7];
  v24 = a2[8];
  v25 = a2[9];
  v26 = a2[10];
  v27 = a2[11];
  v28 = a2[12];
  v29 = a2[13];
  v30 = a2[14];
  v31 = a2[15];
  outlined copy of AST.Conditional.Condition.Kind(*a2, v5, v6, v7, v8, v9, v10, v11, v24, v25, v26, v27, v28, v29);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_OWORD *)(a1 + 80);
  v22 = *(_OWORD *)(a1 + 96);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v24;
  *(_QWORD *)(a1 + 72) = v25;
  *(_QWORD *)(a1 + 80) = v26;
  *(_QWORD *)(a1 + 88) = v27;
  *(_QWORD *)(a1 + 96) = v28;
  *(_QWORD *)(a1 + 104) = v29;
  *(_QWORD *)(a1 + 112) = v30;
  *(_QWORD *)(a1 + 120) = v31;
  outlined consume of AST.Conditional.Condition.Kind(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, SBYTE8(v22));
  *(_QWORD *)(a1 + 128) = a2[16];
  *(_QWORD *)(a1 + 136) = a2[17];
  return a1;
}

__n128 __swift_memcpy144_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  return result;
}

uint64_t assignWithTake for AST.Conditional.Condition(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_OWORD *)(a1 + 64);
  v13 = *(_OWORD *)(a1 + 80);
  v14 = *(_OWORD *)(a1 + 96);
  v15 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v15;
  v16 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v16;
  v17 = a2[5];
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_OWORD *)(a1 + 80) = v17;
  v18 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v18;
  outlined consume of AST.Conditional.Condition.Kind(v4, v5, v6, v7, v8, v9, v10, v11, v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14, SBYTE8(v14));
  *(_OWORD *)(a1 + 128) = a2[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for AST.Conditional.Condition(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 4 && *(_BYTE *)(a1 + 144))
    return (*(_DWORD *)a1 + 4);
  v3 = ~*(_DWORD *)(a1 + 104) & 7;
  if (v3 >= 3)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AST.Conditional.Condition(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 3)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 4;
    if (a3 >= 4)
      *(_BYTE *)(result + 144) = 1;
  }
  else
  {
    if (a3 >= 4)
      *(_BYTE *)(result + 144) = 0;
    if (a2)
    {
      *(_OWORD *)(result + 64) = 0u;
      *(_OWORD *)(result + 80) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_QWORD *)(result + 96) = 0;
      *(_QWORD *)(result + 104) = -a2 & 7;
      *(_QWORD *)(result + 112) = 0;
      *(_QWORD *)(result + 120) = 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AST.Conditional.Condition()
{
  return &type metadata for AST.Conditional.Condition;
}

uint64_t destroy for AST.Conditional.Condition(uint64_t a1)
{
  return outlined consume of AST.Conditional.Condition.Kind(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_OWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104));
}

uint64_t *initializeWithCopy for AST.Conditional.Condition.Kind(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v13 = a2[9];
  v14 = a2[10];
  v15 = a2[11];
  v16 = a2[12];
  v17 = a2[13];
  v18 = a2[14];
  v19 = a2[15];
  outlined copy of AST.Conditional.Condition.Kind(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16, v17);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  a1[13] = v17;
  a1[14] = v18;
  a1[15] = v19;
  return a1;
}

uint64_t assignWithCopy for AST.Conditional.Condition.Kind(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v24 = a2[9];
  v25 = a2[10];
  v26 = a2[11];
  v27 = a2[12];
  v28 = a2[13];
  v29 = a2[14];
  v30 = a2[15];
  outlined copy of AST.Conditional.Condition.Kind(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v24, v25, v26, v27, v28);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_OWORD *)(a1 + 80);
  v22 = *(_OWORD *)(a1 + 96);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v24;
  *(_QWORD *)(a1 + 80) = v25;
  *(_QWORD *)(a1 + 88) = v26;
  *(_QWORD *)(a1 + 96) = v27;
  *(_QWORD *)(a1 + 104) = v28;
  *(_QWORD *)(a1 + 112) = v29;
  *(_QWORD *)(a1 + 120) = v30;
  outlined consume of AST.Conditional.Condition.Kind(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, SBYTE8(v22));
  return a1;
}

__n128 __swift_memcpy128_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t assignWithTake for AST.Conditional.Condition.Kind(uint64_t a1, _OWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v3 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(_OWORD *)(a1 + 64);
  v12 = *(_OWORD *)(a1 + 80);
  v13 = *(_OWORD *)(a1 + 96);
  v14 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v14;
  v15 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v15;
  v16 = a2[5];
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_OWORD *)(a1 + 80) = v16;
  v17 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v17;
  outlined consume of AST.Conditional.Condition.Kind(v3, v5, v4, v6, v7, v8, v9, v10, v11, *((uint64_t *)&v11 + 1), v12, *((uint64_t *)&v12 + 1), v13, SBYTE8(v13));
  return a1;
}

uint64_t getEnumTagSinglePayload for AST.Conditional.Condition.Kind(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 4 && *(_BYTE *)(a1 + 128))
    return (*(_DWORD *)a1 + 4);
  v3 = ~*(_DWORD *)(a1 + 104) & 7;
  if (v3 >= 3)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AST.Conditional.Condition.Kind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 3)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 4;
    if (a3 >= 4)
      *(_BYTE *)(result + 128) = 1;
  }
  else
  {
    if (a3 >= 4)
      *(_BYTE *)(result + 128) = 0;
    if (a2)
    {
      *(_OWORD *)(result + 64) = 0u;
      *(_OWORD *)(result + 80) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_QWORD *)(result + 96) = 0;
      *(_QWORD *)(result + 104) = -a2 & 7;
      *(_QWORD *)(result + 112) = 0;
      *(_QWORD *)(result + 120) = 0;
    }
  }
  return result;
}

uint64_t destructiveInjectEnumTag for AST.Conditional.Condition.Kind(uint64_t result, unsigned int a2)
{
  if (a2 < 4)
  {
    *(_QWORD *)(result + 104) = *(_QWORD *)(result + 104) & 0xFFFFFFFFFFFFFFF8 | a2;
  }
  else
  {
    *(_QWORD *)result = a2 - 4;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_QWORD *)(result + 112) = 0;
    *(_QWORD *)(result + 120) = 0;
    *(_QWORD *)(result + 104) = 4;
  }
  return result;
}

ValueMetadata *type metadata accessor for AST.Conditional.Condition.Kind()
{
  return &type metadata for AST.Conditional.Condition.Kind;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for AST.Conditional.Condition.PCREVersionNumber(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 80))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AST.Conditional.Condition.PCREVersionNumber(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 80) = v3;
  return result;
}

ValueMetadata *type metadata accessor for AST.Conditional.Condition.PCREVersionNumber()
{
  return &type metadata for AST.Conditional.Condition.PCREVersionNumber;
}

__n128 __swift_memcpy104_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for AST.Conditional.Condition.PCREVersionCheck(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[104])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AST.Conditional.Condition.PCREVersionCheck(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 104) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for AST.Conditional.Condition.PCREVersionCheck()
{
  return &type metadata for AST.Conditional.Condition.PCREVersionCheck;
}

uint64_t getEnumTag for AST.Conditional.Condition.PCREVersionCheck.Kind(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for AST.Conditional.Condition.PCREVersionCheck.Kind(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for AST.Conditional.Condition.PCREVersionCheck.Kind()
{
  return &type metadata for AST.Conditional.Condition.PCREVersionCheck.Kind;
}

uint64_t destroy for AST.CustomCharacterClass()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AST.CustomCharacterClass(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AST.CustomCharacterClass(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AST.CustomCharacterClass(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for AST.CustomCharacterClass(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AST.CustomCharacterClass(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AST.CustomCharacterClass()
{
  return &type metadata for AST.CustomCharacterClass;
}

uint64_t initializeBufferWithCopyOfBuffer for AST.CustomCharacterClass.Member(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_1DEFF11A4 + 4 * byte_1DEFFE338[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t destroy for AST.CustomCharacterClass.Member(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 3:
    case 4:
      goto LABEL_29;
    case 1:
      type metadata accessor for AST.Atom.Kind(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
        case 5u:
        case 6u:
        case 7u:
        case 8u:
        case 0xCu:
          goto LABEL_3;
        case 2u:
        case 0xDu:
LABEL_11:
          swift_bridgeObjectRelease();
LABEL_3:
          swift_bridgeObjectRelease();
          break;
        case 3u:
          type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
          switch(swift_getEnumCaseMultiPayload())
          {
            case 4u:
            case 7u:
              goto LABEL_3;
            case 5u:
              v4 = type metadata accessor for Unicode.NumericType();
              goto LABEL_23;
            case 8u:
              v4 = type metadata accessor for Unicode.CanonicalCombiningClass();
LABEL_23:
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
              break;
            case 0xEu:
              goto LABEL_11;
            default:
              goto LABEL_4;
          }
          break;
        case 9u:
        case 0xAu:
          outlined consume of AST.Reference.Kind(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
          break;
        case 0xBu:
          outlined consume of AST.Atom.Callout(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
            *(_BYTE *)(a1 + 152));
          break;
        default:
          break;
      }
LABEL_4:
      v3 = a1 + *(int *)(type metadata accessor for AST.CustomCharacterClass.Range(0) + 24);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
        case 5u:
        case 6u:
        case 7u:
        case 8u:
        case 0xCu:
          goto LABEL_5;
        case 2u:
        case 0xDu:
LABEL_15:
          swift_bridgeObjectRelease();
LABEL_5:
          swift_bridgeObjectRelease();
          break;
        case 3u:
          type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
          switch(swift_getEnumCaseMultiPayload())
          {
            case 4u:
            case 7u:
              goto LABEL_5;
            case 5u:
              v5 = type metadata accessor for Unicode.NumericType();
              goto LABEL_25;
            case 8u:
              v5 = type metadata accessor for Unicode.CanonicalCombiningClass();
LABEL_25:
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v3, v5);
              break;
            case 0xEu:
              goto LABEL_15;
            default:
              goto LABEL_29;
          }
          break;
        case 9u:
        case 0xAu:
          outlined consume of AST.Reference.Kind(*(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_BYTE *)(v3 + 32));
          break;
        case 0xBu:
          outlined consume of AST.Atom.Callout(*(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 64), *(_QWORD *)(v3 + 72), *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88), *(_QWORD *)(v3 + 96), *(_QWORD *)(v3 + 104), *(_QWORD *)(v3 + 112), *(_QWORD *)(v3 + 120), *(_QWORD *)(v3 + 128), *(_QWORD *)(v3 + 136), *(_QWORD *)(v3 + 144),
            *(_BYTE *)(v3 + 152));
          break;
        default:
          goto LABEL_29;
      }
      goto LABEL_29;
    case 2:
      type metadata accessor for AST.Atom.Kind(0);
      result = swift_getEnumCaseMultiPayload();
      switch((int)result)
      {
        case 0:
        case 5:
        case 6:
        case 7:
        case 8:
        case 12:
          goto LABEL_29;
        case 2:
        case 13:
          goto LABEL_28;
        case 3:
          type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
          result = swift_getEnumCaseMultiPayload();
          switch((int)result)
          {
            case 4:
            case 7:
              goto LABEL_29;
            case 5:
              v6 = type metadata accessor for Unicode.NumericType();
              goto LABEL_27;
            case 8:
              v6 = type metadata accessor for Unicode.CanonicalCombiningClass();
LABEL_27:
              result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
              break;
            case 14:
              goto LABEL_28;
            default:
              return result;
          }
          break;
        case 9:
        case 10:
          result = outlined consume of AST.Reference.Kind(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
          break;
        case 11:
          result = outlined consume of AST.Atom.Callout(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
                     *(_BYTE *)(a1 + 152));
          break;
        default:
          return result;
      }
      return result;
    case 5:
LABEL_28:
      swift_bridgeObjectRelease();
LABEL_29:
      result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

void initializeWithCopy for AST.CustomCharacterClass.Member()
{
  char *v0;

  v0 = (char *)sub_1DEFF25AC + 4 * byte_1DEFFE417[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1DEFF25AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_OWORD *)v0 = *(_OWORD *)v1;
  v2 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 24) = v2;
  *(_OWORD *)(v0 + 32) = *(_OWORD *)(v1 + 32);
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  return v0;
}

uint64_t assignWithCopy for AST.CustomCharacterClass.Member(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    outlined destroy of AST.Atom(result, type metadata accessor for AST.CustomCharacterClass.Member);
    v2 = (char *)&loc_1DEFF3574 + 4 * byte_1DEFFE4A6[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

char *initializeWithTake for AST.CustomCharacterClass.Member(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v11 = type metadata accessor for AST.Atom.Kind(0);
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      v12 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
      v13 = swift_getEnumCaseMultiPayload();
      if (v13 == 8)
      {
        v25 = type metadata accessor for Unicode.CanonicalCombiningClass();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(a1, a2, v25);
        swift_storeEnumTagMultiPayload();
      }
      else if (v13 == 5)
      {
        v14 = type metadata accessor for Unicode.NumericType();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a1, a2, v14);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      v28 = type metadata accessor for AST.Atom.CharacterProperty(0);
      a1[*(int *)(v28 + 20)] = a2[*(int *)(v28 + 20)];
      a1[*(int *)(v28 + 24)] = a2[*(int *)(v28 + 24)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    v29 = type metadata accessor for AST.Atom(0);
    *(_OWORD *)&a1[*(int *)(v29 + 20)] = *(_OWORD *)&a2[*(int *)(v29 + 20)];
    goto LABEL_30;
  }
  if (EnumCaseMultiPayload == 1)
  {
    v7 = type metadata accessor for AST.Atom.Kind(0);
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      v8 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
      v9 = swift_getEnumCaseMultiPayload();
      if (v9 == 8)
      {
        v15 = type metadata accessor for Unicode.CanonicalCombiningClass();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(a1, a2, v15);
        swift_storeEnumTagMultiPayload();
      }
      else if (v9 == 5)
      {
        v10 = type metadata accessor for Unicode.NumericType();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
      }
      v16 = type metadata accessor for AST.Atom.CharacterProperty(0);
      a1[*(int *)(v16 + 20)] = a2[*(int *)(v16 + 20)];
      a1[*(int *)(v16 + 24)] = a2[*(int *)(v16 + 24)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    v17 = type metadata accessor for AST.Atom(0);
    *(_OWORD *)&a1[*(int *)(v17 + 20)] = *(_OWORD *)&a2[*(int *)(v17 + 20)];
    v18 = (int *)type metadata accessor for AST.CustomCharacterClass.Range(0);
    *(_OWORD *)&a1[v18[5]] = *(_OWORD *)&a2[v18[5]];
    v19 = v18[6];
    v20 = &a1[v19];
    v21 = &a2[v19];
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      v22 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
      v23 = swift_getEnumCaseMultiPayload();
      if (v23 == 8)
      {
        v26 = type metadata accessor for Unicode.CanonicalCombiningClass();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v20, v21, v26);
        swift_storeEnumTagMultiPayload();
      }
      else if (v23 == 5)
      {
        v24 = type metadata accessor for Unicode.NumericType();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v20, v21, v24);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      }
      v27 = type metadata accessor for AST.Atom.CharacterProperty(0);
      v20[*(int *)(v27 + 20)] = v21[*(int *)(v27 + 20)];
      v20[*(int *)(v27 + 24)] = v21[*(int *)(v27 + 24)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    *(_OWORD *)&v20[*(int *)(v17 + 20)] = *(_OWORD *)&v21[*(int *)(v17 + 20)];
    *(_QWORD *)&a1[v18[7]] = *(_QWORD *)&a2[v18[7]];
LABEL_30:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

char *assignWithTake for AST.CustomCharacterClass.Member(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (a1 != a2)
  {
    outlined destroy of AST.Atom((uint64_t)a1, type metadata accessor for AST.CustomCharacterClass.Member);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v11 = type metadata accessor for AST.Atom.Kind(0);
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        v12 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
        v13 = swift_getEnumCaseMultiPayload();
        if (v13 == 8)
        {
          v25 = type metadata accessor for Unicode.CanonicalCombiningClass();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(a1, a2, v25);
          swift_storeEnumTagMultiPayload();
        }
        else if (v13 == 5)
        {
          v14 = type metadata accessor for Unicode.NumericType();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a1, a2, v14);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
        }
        v26 = type metadata accessor for AST.Atom.CharacterProperty(0);
        a1[*(int *)(v26 + 20)] = a2[*(int *)(v26 + 20)];
        a1[*(int *)(v26 + 24)] = a2[*(int *)(v26 + 24)];
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      }
      v27 = type metadata accessor for AST.Atom(0);
      *(_OWORD *)&a1[*(int *)(v27 + 20)] = *(_OWORD *)&a2[*(int *)(v27 + 20)];
      goto LABEL_31;
    }
    if (EnumCaseMultiPayload == 1)
    {
      v7 = type metadata accessor for AST.Atom.Kind(0);
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        v8 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
        v9 = swift_getEnumCaseMultiPayload();
        if (v9 == 8)
        {
          v15 = type metadata accessor for Unicode.CanonicalCombiningClass();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(a1, a2, v15);
          swift_storeEnumTagMultiPayload();
        }
        else if (v9 == 5)
        {
          v10 = type metadata accessor for Unicode.NumericType();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
        }
        v16 = type metadata accessor for AST.Atom.CharacterProperty(0);
        a1[*(int *)(v16 + 20)] = a2[*(int *)(v16 + 20)];
        a1[*(int *)(v16 + 24)] = a2[*(int *)(v16 + 24)];
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
      }
      v17 = type metadata accessor for AST.Atom(0);
      *(_OWORD *)&a1[*(int *)(v17 + 20)] = *(_OWORD *)&a2[*(int *)(v17 + 20)];
      v18 = (int *)type metadata accessor for AST.CustomCharacterClass.Range(0);
      *(_OWORD *)&a1[v18[5]] = *(_OWORD *)&a2[v18[5]];
      v19 = v18[6];
      v20 = &a1[v19];
      v21 = &a2[v19];
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        v22 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
        v23 = swift_getEnumCaseMultiPayload();
        if (v23 == 8)
        {
          v28 = type metadata accessor for Unicode.CanonicalCombiningClass();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v20, v21, v28);
          swift_storeEnumTagMultiPayload();
        }
        else if (v23 == 5)
        {
          v24 = type metadata accessor for Unicode.NumericType();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v20, v21, v24);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
        }
        v29 = type metadata accessor for AST.Atom.CharacterProperty(0);
        v20[*(int *)(v29 + 20)] = v21[*(int *)(v29 + 20)];
        v20[*(int *)(v29 + 24)] = v21[*(int *)(v29 + 24)];
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
      }
      *(_OWORD *)&v20[*(int *)(v17 + 20)] = *(_OWORD *)&v21[*(int *)(v17 + 20)];
      *(_QWORD *)&a1[v18[7]] = *(_QWORD *)&a2[v18[7]];
LABEL_31:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AST.CustomCharacterClass.Member(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for AST.CustomCharacterClass.Member(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t type metadata completion function for AST.CustomCharacterClass.Member()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for AST.CustomCharacterClass.Range(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for AST.Atom(319);
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AST.CustomCharacterClass.Range(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for AST.Atom.Kind(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 5u:
      case 6u:
      case 7u:
      case 8u:
        v8 = a2[1];
        *a1 = *a2;
        a1[1] = v8;
        swift_bridgeObjectRetain();
        goto LABEL_20;
      case 2u:
        v13 = a2[1];
        *a1 = *a2;
        a1[1] = v13;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_20;
      case 3u:
        v10 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 4u:
            v11 = a2[1];
            *a1 = *a2;
            a1[1] = v11;
            swift_bridgeObjectRetain();
            goto LABEL_18;
          case 5u:
            v26 = type metadata accessor for Unicode.NumericType();
            (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(a1, a2, v26);
            goto LABEL_18;
          case 7u:
            *(_BYTE *)a1 = *(_BYTE *)a2;
            v27 = a2[2];
            a1[1] = a2[1];
            a1[2] = v27;
            swift_bridgeObjectRetain();
            goto LABEL_18;
          case 8u:
            v28 = type metadata accessor for Unicode.CanonicalCombiningClass();
            (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(a1, a2, v28);
            goto LABEL_18;
          case 0xEu:
            v29 = a2[1];
            *a1 = *a2;
            a1[1] = v29;
            v30 = a2[3];
            a1[2] = a2[2];
            a1[3] = v30;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
LABEL_18:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
            break;
        }
        v31 = type metadata accessor for AST.Atom.CharacterProperty(0);
        *((_BYTE *)a1 + *(int *)(v31 + 20)) = *((_BYTE *)a2 + *(int *)(v31 + 20));
        *((_BYTE *)a1 + *(int *)(v31 + 24)) = *((_BYTE *)a2 + *(int *)(v31 + 24));
        goto LABEL_20;
      case 9u:
      case 0xAu:
        v14 = *a2;
        v15 = a2[1];
        v16 = a2[2];
        v17 = a2[3];
        v18 = *((_BYTE *)a2 + 32);
        outlined copy of AST.Reference.Kind(*a2, v15, v16, v17, v18);
        *a1 = v14;
        a1[1] = v15;
        a1[2] = v16;
        a1[3] = v17;
        *((_BYTE *)a1 + 32) = v18;
        *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
        *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 7);
        *((_BYTE *)a1 + 72) = *((_BYTE *)a2 + 72);
        *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
        goto LABEL_20;
      case 0xBu:
        v19 = *a2;
        v20 = a2[1];
        v21 = a2[2];
        v22 = a2[3];
        v94 = v7;
        v66 = a2[5];
        v68 = a2[8];
        v70 = a2[9];
        v72 = a2[10];
        v74 = a2[11];
        v76 = a2[12];
        v78 = a2[13];
        v80 = a2[14];
        v82 = a2[15];
        v84 = a2[16];
        v86 = a2[17];
        v88 = a2[18];
        v90 = *((_BYTE *)a2 + 152);
        v23 = a2[4];
        v24 = a2[6];
        v25 = a2[7];
        outlined copy of AST.Atom.Callout(*a2, v20, v21, v22, v23, v66, v24, v25, v68, v70, v72, v74, v76, v78, v80, v82, v84, v86, v88,
          v90);
        *a1 = v19;
        a1[1] = v20;
        a1[2] = v21;
        a1[3] = v22;
        a1[4] = v23;
        a1[5] = v66;
        v7 = v94;
        a1[6] = v24;
        a1[7] = v25;
        a1[8] = v68;
        a1[9] = v70;
        a1[10] = v72;
        a1[11] = v74;
        a1[12] = v76;
        a1[13] = v78;
        a1[14] = v80;
        a1[15] = v82;
        a1[16] = v84;
        a1[17] = v86;
        a1[18] = v88;
        *((_BYTE *)a1 + 152) = v90;
        goto LABEL_20;
      case 0xCu:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v12 = a2[3];
        a1[2] = a2[2];
        a1[3] = v12;
        a1[4] = a2[4];
        *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
        swift_bridgeObjectRetain();
        goto LABEL_20;
      case 0xDu:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
        a1[3] = a2[3];
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
        a1[7] = a2[7];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_20:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        break;
    }
    v32 = type metadata accessor for AST.Atom(0);
    *(_OWORD *)((char *)a1 + *(int *)(v32 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(v32 + 20));
    v33 = a3[6];
    *(_OWORD *)((char *)a1 + a3[5]) = *(_OWORD *)((char *)a2 + a3[5]);
    v34 = (uint64_t *)((char *)a1 + v33);
    v35 = (uint64_t *)((char *)a2 + v33);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 5u:
      case 6u:
      case 7u:
      case 8u:
        v36 = v35[1];
        *v34 = *v35;
        v34[1] = v36;
        swift_bridgeObjectRetain();
        goto LABEL_39;
      case 2u:
        v40 = v35[1];
        *v34 = *v35;
        v34[1] = v40;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_39;
      case 3u:
        v37 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 4u:
            v38 = v35[1];
            *v34 = *v35;
            v34[1] = v38;
            swift_bridgeObjectRetain();
            goto LABEL_37;
          case 5u:
            v56 = type metadata accessor for Unicode.NumericType();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v56 - 8) + 16))(v34, v35, v56);
            goto LABEL_37;
          case 7u:
            *(_BYTE *)v34 = *(_BYTE *)v35;
            v57 = v35[2];
            v34[1] = v35[1];
            v34[2] = v57;
            swift_bridgeObjectRetain();
            goto LABEL_37;
          case 8u:
            v58 = type metadata accessor for Unicode.CanonicalCombiningClass();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v58 - 8) + 16))(v34, v35, v58);
            goto LABEL_37;
          case 0xEu:
            v59 = v35[1];
            *v34 = *v35;
            v34[1] = v59;
            v60 = v35[3];
            v34[2] = v35[2];
            v34[3] = v60;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
LABEL_37:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
            break;
        }
        v61 = type metadata accessor for AST.Atom.CharacterProperty(0);
        *((_BYTE *)v34 + *(int *)(v61 + 20)) = *((_BYTE *)v35 + *(int *)(v61 + 20));
        *((_BYTE *)v34 + *(int *)(v61 + 24)) = *((_BYTE *)v35 + *(int *)(v61 + 24));
        goto LABEL_39;
      case 9u:
        v41 = *v35;
        v42 = v35[1];
        v91 = v32;
        v44 = v35[2];
        v43 = v35[3];
        v45 = *((_BYTE *)v35 + 32);
        outlined copy of AST.Reference.Kind(*v35, v42, v44, v43, v45);
        *v34 = v41;
        v34[1] = v42;
        v34[2] = v44;
        v34[3] = v43;
        *((_BYTE *)v34 + 32) = v45;
        v32 = v91;
        *(_OWORD *)(v34 + 5) = *(_OWORD *)(v35 + 5);
        *(_OWORD *)(v34 + 7) = *(_OWORD *)(v35 + 7);
        *((_BYTE *)v34 + 72) = *((_BYTE *)v35 + 72);
        *((_OWORD *)v34 + 5) = *((_OWORD *)v35 + 5);
        goto LABEL_39;
      case 0xAu:
        v92 = v32;
        v46 = *v35;
        v47 = v35[1];
        v48 = v35[2];
        v49 = v35[3];
        v50 = *((_BYTE *)v35 + 32);
        outlined copy of AST.Reference.Kind(*v35, v47, v48, v49, v50);
        *v34 = v46;
        v34[1] = v47;
        v32 = v92;
        v34[2] = v48;
        v34[3] = v49;
        *((_BYTE *)v34 + 32) = v50;
        *(_OWORD *)(v34 + 5) = *(_OWORD *)(v35 + 5);
        *(_OWORD *)(v34 + 7) = *(_OWORD *)(v35 + 7);
        *((_BYTE *)v34 + 72) = *((_BYTE *)v35 + 72);
        *((_OWORD *)v34 + 5) = *((_OWORD *)v35 + 5);
        goto LABEL_39;
      case 0xBu:
        v51 = v35[1];
        v93 = v32;
        v52 = v35[2];
        v64 = v35[6];
        v65 = v35[4];
        v63 = v35[7];
        v67 = v35[8];
        v69 = v35[9];
        v71 = v35[10];
        v73 = v35[11];
        v75 = v35[12];
        v77 = v35[13];
        v79 = v35[14];
        v81 = v35[15];
        v83 = v35[16];
        v85 = v35[17];
        v87 = v35[18];
        v89 = *((_BYTE *)v35 + 152);
        v53 = *v35;
        v54 = v35[3];
        v55 = v35[5];
        outlined copy of AST.Atom.Callout(*v35, v51, v52, v54, v65, v55, v64, v63, v67, v69, v71, v73, v75, v77, v79, v81, v83, v85, v87,
          v89);
        *v34 = v53;
        v34[1] = v51;
        v32 = v93;
        v34[2] = v52;
        v34[3] = v54;
        v34[4] = v65;
        v34[5] = v55;
        v34[6] = v64;
        v34[7] = v63;
        v34[8] = v67;
        v34[9] = v69;
        v34[10] = v71;
        v34[11] = v73;
        v34[12] = v75;
        v34[13] = v77;
        v34[14] = v79;
        v34[15] = v81;
        v34[16] = v83;
        v34[17] = v85;
        v34[18] = v87;
        *((_BYTE *)v34 + 152) = v89;
        goto LABEL_39;
      case 0xCu:
        *(_OWORD *)v34 = *(_OWORD *)v35;
        v39 = v35[3];
        v34[2] = v35[2];
        v34[3] = v39;
        v34[4] = v35[4];
        *(_OWORD *)(v34 + 5) = *(_OWORD *)(v35 + 5);
        swift_bridgeObjectRetain();
        goto LABEL_39;
      case 0xDu:
        *(_OWORD *)v34 = *(_OWORD *)v35;
        *((_BYTE *)v34 + 16) = *((_BYTE *)v35 + 16);
        v34[3] = v35[3];
        *((_OWORD *)v34 + 2) = *((_OWORD *)v35 + 2);
        *((_BYTE *)v34 + 48) = *((_BYTE *)v35 + 48);
        v34[7] = v35[7];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_39:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        break;
    }
    *(_OWORD *)((char *)v34 + *(int *)(v32 + 20)) = *(_OWORD *)((char *)v35 + *(int *)(v32 + 20));
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for AST.CustomCharacterClass.Range(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  type metadata accessor for AST.Atom.Kind(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 5u:
    case 6u:
    case 7u:
    case 8u:
    case 0xCu:
      goto LABEL_2;
    case 2u:
    case 0xDu:
LABEL_8:
      swift_bridgeObjectRelease();
LABEL_2:
      swift_bridgeObjectRelease();
      break;
    case 3u:
      type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 4u:
        case 7u:
          goto LABEL_2;
        case 5u:
          v6 = type metadata accessor for Unicode.NumericType();
          goto LABEL_17;
        case 8u:
          v6 = type metadata accessor for Unicode.CanonicalCombiningClass();
LABEL_17:
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
          break;
        case 0xEu:
          goto LABEL_8;
        default:
          goto LABEL_3;
      }
      break;
    case 9u:
    case 0xAu:
      outlined consume of AST.Reference.Kind(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
      break;
    case 0xBu:
      outlined consume of AST.Atom.Callout(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
        *(_BYTE *)(a1 + 152));
      break;
    default:
      break;
  }
LABEL_3:
  v4 = a1 + *(int *)(a2 + 24);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 5u:
    case 6u:
    case 7u:
    case 8u:
    case 0xCu:
      goto LABEL_4;
    case 2u:
    case 0xDu:
LABEL_12:
      swift_bridgeObjectRelease();
LABEL_4:
      swift_bridgeObjectRelease();
      break;
    case 3u:
      type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 4u:
        case 7u:
          goto LABEL_4;
        case 5u:
          v7 = type metadata accessor for Unicode.NumericType();
          goto LABEL_19;
        case 8u:
          v7 = type metadata accessor for Unicode.CanonicalCombiningClass();
LABEL_19:
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v4, v7);
          break;
        case 0xEu:
          goto LABEL_12;
        default:
          return swift_bridgeObjectRelease();
      }
      break;
    case 9u:
    case 0xAu:
      outlined consume of AST.Reference.Kind(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), *(_BYTE *)(v4 + 32));
      break;
    case 0xBu:
      outlined consume of AST.Atom.Callout(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40), *(_QWORD *)(v4 + 48), *(_QWORD *)(v4 + 56), *(_QWORD *)(v4 + 64), *(_QWORD *)(v4 + 72), *(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 88), *(_QWORD *)(v4 + 96), *(_QWORD *)(v4 + 104), *(_QWORD *)(v4 + 112), *(_QWORD *)(v4 + 120), *(_QWORD *)(v4 + 128), *(_QWORD *)(v4 + 136), *(_QWORD *)(v4 + 144),
        *(_BYTE *)(v4 + 152));
      break;
    default:
      return swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for AST.CustomCharacterClass.Range(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  char v88;
  uint64_t v89;
  int *v90;
  int *v91;
  int *v92;
  int *v93;

  v6 = type metadata accessor for AST.Atom.Kind(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 5u:
    case 6u:
    case 7u:
    case 8u:
      v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      swift_bridgeObjectRetain();
      goto LABEL_18;
    case 2u:
      v11 = a2[1];
      *a1 = *a2;
      a1[1] = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_18;
    case 3u:
      v8 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 4u:
          v9 = a2[1];
          *a1 = *a2;
          a1[1] = v9;
          swift_bridgeObjectRetain();
          goto LABEL_16;
        case 5u:
          v25 = type metadata accessor for Unicode.NumericType();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(a1, a2, v25);
          goto LABEL_16;
        case 7u:
          *(_BYTE *)a1 = *(_BYTE *)a2;
          v26 = a2[2];
          a1[1] = a2[1];
          a1[2] = v26;
          swift_bridgeObjectRetain();
          goto LABEL_16;
        case 8u:
          v27 = type metadata accessor for Unicode.CanonicalCombiningClass();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(a1, a2, v27);
          goto LABEL_16;
        case 0xEu:
          v28 = a2[1];
          *a1 = *a2;
          a1[1] = v28;
          v29 = a2[3];
          a1[2] = a2[2];
          a1[3] = v29;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
LABEL_16:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
          break;
      }
      v30 = type metadata accessor for AST.Atom.CharacterProperty(0);
      *((_BYTE *)a1 + *(int *)(v30 + 20)) = *((_BYTE *)a2 + *(int *)(v30 + 20));
      *((_BYTE *)a1 + *(int *)(v30 + 24)) = *((_BYTE *)a2 + *(int *)(v30 + 24));
      goto LABEL_18;
    case 9u:
    case 0xAu:
      v12 = *a2;
      v13 = a2[1];
      v14 = a2[2];
      v15 = a2[3];
      v16 = *((_BYTE *)a2 + 32);
      outlined copy of AST.Reference.Kind(*a2, v13, v14, v15, v16);
      *a1 = v12;
      a1[1] = v13;
      a1[2] = v14;
      a1[3] = v15;
      *((_BYTE *)a1 + 32) = v16;
      *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 7);
      *((_BYTE *)a1 + 72) = *((_BYTE *)a2 + 72);
      *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
      goto LABEL_18;
    case 0xBu:
      v17 = *a2;
      v18 = a2[1];
      v19 = a2[2];
      v20 = a2[3];
      v21 = a2[5];
      v89 = v6;
      v65 = a2[8];
      v90 = a3;
      v67 = a2[9];
      v69 = a2[10];
      v71 = a2[11];
      v73 = a2[12];
      v75 = a2[13];
      v77 = a2[14];
      v79 = a2[15];
      v81 = a2[16];
      v83 = a2[17];
      v85 = a2[18];
      v87 = *((_BYTE *)a2 + 152);
      v22 = a2[4];
      v23 = a2[6];
      v24 = a2[7];
      outlined copy of AST.Atom.Callout(*a2, v18, v19, v20, v22, v21, v23, v24, v65, v67, v69, v71, v73, v75, v77, v79, v81, v83, v85,
        v87);
      *a1 = v17;
      a1[1] = v18;
      a1[2] = v19;
      a1[3] = v20;
      a1[4] = v22;
      a1[5] = v21;
      a1[6] = v23;
      a1[7] = v24;
      a1[8] = v65;
      a1[9] = v67;
      v6 = v89;
      a3 = v90;
      a1[10] = v69;
      a1[11] = v71;
      a1[12] = v73;
      a1[13] = v75;
      a1[14] = v77;
      a1[15] = v79;
      a1[16] = v81;
      a1[17] = v83;
      a1[18] = v85;
      *((_BYTE *)a1 + 152) = v87;
      goto LABEL_18;
    case 0xCu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v10 = a2[3];
      a1[2] = a2[2];
      a1[3] = v10;
      a1[4] = a2[4];
      *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
      swift_bridgeObjectRetain();
      goto LABEL_18;
    case 0xDu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
      a1[3] = a2[3];
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
      a1[7] = a2[7];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_18:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      break;
  }
  v31 = type metadata accessor for AST.Atom(0);
  *(_OWORD *)((char *)a1 + *(int *)(v31 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(v31 + 20));
  v32 = a3[6];
  *(_OWORD *)((char *)a1 + a3[5]) = *(_OWORD *)((char *)a2 + a3[5]);
  v33 = (_QWORD *)((char *)a1 + v32);
  v34 = (_QWORD *)((char *)a2 + v32);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 5u:
    case 6u:
    case 7u:
    case 8u:
      v35 = v34[1];
      *v33 = *v34;
      v33[1] = v35;
      swift_bridgeObjectRetain();
      goto LABEL_37;
    case 2u:
      v39 = v34[1];
      *v33 = *v34;
      v33[1] = v39;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_37;
    case 3u:
      v36 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 4u:
          v37 = v34[1];
          *v33 = *v34;
          v33[1] = v37;
          swift_bridgeObjectRetain();
          goto LABEL_35;
        case 5u:
          v55 = type metadata accessor for Unicode.NumericType();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v33, v34, v55);
          goto LABEL_35;
        case 7u:
          *(_BYTE *)v33 = *(_BYTE *)v34;
          v56 = v34[2];
          v33[1] = v34[1];
          v33[2] = v56;
          swift_bridgeObjectRetain();
          goto LABEL_35;
        case 8u:
          v57 = type metadata accessor for Unicode.CanonicalCombiningClass();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v57 - 8) + 16))(v33, v34, v57);
          goto LABEL_35;
        case 0xEu:
          v58 = v34[1];
          *v33 = *v34;
          v33[1] = v58;
          v59 = v34[3];
          v33[2] = v34[2];
          v33[3] = v59;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
LABEL_35:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
          break;
      }
      v60 = type metadata accessor for AST.Atom.CharacterProperty(0);
      *((_BYTE *)v33 + *(int *)(v60 + 20)) = *((_BYTE *)v34 + *(int *)(v60 + 20));
      *((_BYTE *)v33 + *(int *)(v60 + 24)) = *((_BYTE *)v34 + *(int *)(v60 + 24));
      goto LABEL_37;
    case 9u:
      v40 = *v34;
      v41 = v34[1];
      v91 = a3;
      v43 = v34[2];
      v42 = v34[3];
      v44 = *((_BYTE *)v34 + 32);
      outlined copy of AST.Reference.Kind(*v34, v41, v43, v42, v44);
      *v33 = v40;
      v33[1] = v41;
      v33[2] = v43;
      v33[3] = v42;
      *((_BYTE *)v33 + 32) = v44;
      a3 = v91;
      *(_OWORD *)(v33 + 5) = *(_OWORD *)(v34 + 5);
      *(_OWORD *)(v33 + 7) = *(_OWORD *)(v34 + 7);
      *((_BYTE *)v33 + 72) = *((_BYTE *)v34 + 72);
      *((_OWORD *)v33 + 5) = *((_OWORD *)v34 + 5);
      goto LABEL_37;
    case 0xAu:
      v92 = a3;
      v45 = *v34;
      v46 = v34[1];
      v47 = v34[2];
      v48 = v34[3];
      v49 = *((_BYTE *)v34 + 32);
      outlined copy of AST.Reference.Kind(*v34, v46, v47, v48, v49);
      *v33 = v45;
      v33[1] = v46;
      a3 = v92;
      v33[2] = v47;
      v33[3] = v48;
      *((_BYTE *)v33 + 32) = v49;
      *(_OWORD *)(v33 + 5) = *(_OWORD *)(v34 + 5);
      *(_OWORD *)(v33 + 7) = *(_OWORD *)(v34 + 7);
      *((_BYTE *)v33 + 72) = *((_BYTE *)v34 + 72);
      *((_OWORD *)v33 + 5) = *((_OWORD *)v34 + 5);
      goto LABEL_37;
    case 0xBu:
      v50 = v34[1];
      v93 = a3;
      v51 = v34[2];
      v63 = v34[6];
      v64 = v34[4];
      v62 = v34[7];
      v66 = v34[8];
      v68 = v34[9];
      v70 = v34[10];
      v72 = v34[11];
      v74 = v34[12];
      v76 = v34[13];
      v78 = v34[14];
      v80 = v34[15];
      v82 = v34[16];
      v84 = v34[17];
      v86 = v34[18];
      v88 = *((_BYTE *)v34 + 152);
      v52 = *v34;
      v53 = v34[3];
      v54 = v34[5];
      outlined copy of AST.Atom.Callout(*v34, v50, v51, v53, v64, v54, v63, v62, v66, v68, v70, v72, v74, v76, v78, v80, v82, v84, v86,
        v88);
      *v33 = v52;
      v33[1] = v50;
      a3 = v93;
      v33[2] = v51;
      v33[3] = v53;
      v33[4] = v64;
      v33[5] = v54;
      v33[6] = v63;
      v33[7] = v62;
      v33[8] = v66;
      v33[9] = v68;
      v33[10] = v70;
      v33[11] = v72;
      v33[12] = v74;
      v33[13] = v76;
      v33[14] = v78;
      v33[15] = v80;
      v33[16] = v82;
      v33[17] = v84;
      v33[18] = v86;
      *((_BYTE *)v33 + 152) = v88;
      goto LABEL_37;
    case 0xCu:
      *(_OWORD *)v33 = *(_OWORD *)v34;
      v38 = v34[3];
      v33[2] = v34[2];
      v33[3] = v38;
      v33[4] = v34[4];
      *(_OWORD *)(v33 + 5) = *(_OWORD *)(v34 + 5);
      swift_bridgeObjectRetain();
      goto LABEL_37;
    case 0xDu:
      *(_OWORD *)v33 = *(_OWORD *)v34;
      *((_BYTE *)v33 + 16) = *((_BYTE *)v34 + 16);
      v33[3] = v34[3];
      *((_OWORD *)v33 + 2) = *((_OWORD *)v34 + 2);
      *((_BYTE *)v33 + 48) = *((_BYTE *)v34 + 48);
      v33[7] = v34[7];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_37:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      break;
  }
  *(_OWORD *)((char *)v33 + *(int *)(v31 + 20)) = *(_OWORD *)((char *)v34 + *(int *)(v31 + 20));
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for AST.CustomCharacterClass.Range(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  char v89;

  if (a1 != a2)
  {
    outlined destroy of AST.Atom((uint64_t)a1, type metadata accessor for AST.Atom.Kind);
    v6 = type metadata accessor for AST.Atom.Kind(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 5u:
      case 6u:
      case 7u:
      case 8u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_19;
      case 2u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_19;
      case 3u:
        v7 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 4u:
            *a1 = *a2;
            a1[1] = a2[1];
            swift_bridgeObjectRetain();
            goto LABEL_17;
          case 5u:
            v24 = type metadata accessor for Unicode.NumericType();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(a1, a2, v24);
            goto LABEL_17;
          case 7u:
            *(_BYTE *)a1 = *(_BYTE *)a2;
            a1[1] = a2[1];
            a1[2] = a2[2];
            swift_bridgeObjectRetain();
            goto LABEL_17;
          case 8u:
            v25 = type metadata accessor for Unicode.CanonicalCombiningClass();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(a1, a2, v25);
            goto LABEL_17;
          case 0xEu:
            *a1 = *a2;
            a1[1] = a2[1];
            a1[2] = a2[2];
            a1[3] = a2[3];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
LABEL_17:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
            break;
        }
        v26 = type metadata accessor for AST.Atom.CharacterProperty(0);
        *((_BYTE *)a1 + *(int *)(v26 + 20)) = *((_BYTE *)a2 + *(int *)(v26 + 20));
        *((_BYTE *)a1 + *(int *)(v26 + 24)) = *((_BYTE *)a2 + *(int *)(v26 + 24));
        goto LABEL_19;
      case 9u:
      case 0xAu:
        v11 = *a2;
        v12 = a2[1];
        v13 = a2[2];
        v14 = a2[3];
        v15 = *((_BYTE *)a2 + 32);
        outlined copy of AST.Reference.Kind(*a2, v12, v13, v14, v15);
        *a1 = v11;
        a1[1] = v12;
        a1[2] = v13;
        a1[3] = v14;
        *((_BYTE *)a1 + 32) = v15;
        v16 = *(_OWORD *)(a2 + 5);
        v17 = *(_OWORD *)(a2 + 7);
        *((_BYTE *)a1 + 72) = *((_BYTE *)a2 + 72);
        *(_OWORD *)(a1 + 7) = v17;
        *(_OWORD *)(a1 + 5) = v16;
        *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
        goto LABEL_19;
      case 0xBu:
        v18 = a2[1];
        v19 = a2[2];
        v20 = a2[3];
        v21 = a2[4];
        v60 = a2[7];
        v62 = a2[5];
        v64 = a2[8];
        v66 = a2[9];
        v68 = a2[10];
        v70 = a2[11];
        v72 = a2[12];
        v74 = a2[13];
        v76 = a2[14];
        v78 = a2[15];
        v80 = a2[16];
        v82 = a2[17];
        v84 = a2[18];
        v87 = *((_BYTE *)a2 + 152);
        v22 = *a2;
        v23 = a2[6];
        outlined copy of AST.Atom.Callout(*a2, v18, v19, v20, v21, v62, v23, v60, v64, v66, v68, v70, v72, v74, v76, v78, v80, v82, v84,
          v87);
        *a1 = v22;
        a1[1] = v18;
        a1[2] = v19;
        a1[3] = v20;
        a1[4] = v21;
        a1[5] = v62;
        a1[6] = v23;
        a1[7] = v60;
        a1[8] = v64;
        a1[9] = v66;
        a1[10] = v68;
        a1[11] = v70;
        a1[12] = v72;
        a1[13] = v74;
        a1[14] = v76;
        a1[15] = v78;
        a1[16] = v80;
        a1[17] = v82;
        a1[18] = v84;
        *((_BYTE *)a1 + 152) = v87;
        goto LABEL_19;
      case 0xCu:
        v8 = *(_OWORD *)a2;
        a1[2] = a2[2];
        *(_OWORD *)a1 = v8;
        a1[3] = a2[3];
        a1[4] = a2[4];
        *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
        swift_bridgeObjectRetain();
        goto LABEL_19;
      case 0xDu:
        v9 = *(_OWORD *)a2;
        *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
        *(_OWORD *)a1 = v9;
        a1[3] = a2[3];
        v10 = *((_OWORD *)a2 + 2);
        *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
        *((_OWORD *)a1 + 2) = v10;
        a1[7] = a2[7];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_19:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        break;
    }
  }
  v27 = type metadata accessor for AST.Atom(0);
  v28 = *(int *)(v27 + 20);
  v29 = (_QWORD *)((char *)a1 + v28);
  v30 = (_QWORD *)((char *)a2 + v28);
  *v29 = *v30;
  v29[1] = v30[1];
  v31 = a3[5];
  v32 = (_QWORD *)((char *)a1 + v31);
  v33 = (_QWORD *)((char *)a2 + v31);
  *v32 = *v33;
  v32[1] = v33[1];
  v34 = a3[6];
  v35 = (_QWORD *)((char *)a1 + v34);
  v36 = (_QWORD *)((char *)a2 + v34);
  if (a1 != a2)
  {
    outlined destroy of AST.Atom((uint64_t)a1 + v34, type metadata accessor for AST.Atom.Kind);
    v37 = type metadata accessor for AST.Atom.Kind(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 5u:
      case 6u:
      case 7u:
      case 8u:
        *v35 = *v36;
        v35[1] = v36[1];
        swift_bridgeObjectRetain();
        goto LABEL_38;
      case 2u:
        *v35 = *v36;
        v35[1] = v36[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_38;
      case 3u:
        v38 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 4u:
            *v35 = *v36;
            v35[1] = v36[1];
            swift_bridgeObjectRetain();
            goto LABEL_36;
          case 5u:
            v50 = type metadata accessor for Unicode.NumericType();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v35, v36, v50);
            goto LABEL_36;
          case 7u:
            *(_BYTE *)v35 = *(_BYTE *)v36;
            v35[1] = v36[1];
            v35[2] = v36[2];
            swift_bridgeObjectRetain();
            goto LABEL_36;
          case 8u:
            v51 = type metadata accessor for Unicode.CanonicalCombiningClass();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v35, v36, v51);
            goto LABEL_36;
          case 0xEu:
            *v35 = *v36;
            v35[1] = v36[1];
            v35[2] = v36[2];
            v35[3] = v36[3];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
LABEL_36:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
            break;
        }
        v52 = type metadata accessor for AST.Atom.CharacterProperty(0);
        *((_BYTE *)v35 + *(int *)(v52 + 20)) = *((_BYTE *)v36 + *(int *)(v52 + 20));
        *((_BYTE *)v35 + *(int *)(v52 + 24)) = *((_BYTE *)v36 + *(int *)(v52 + 24));
        goto LABEL_38;
      case 9u:
      case 0xAu:
        v42 = *v36;
        v43 = v36[1];
        v44 = v36[2];
        v88 = v36[3];
        v85 = *((_BYTE *)v36 + 32);
        outlined copy of AST.Reference.Kind(*v36, v43, v44, v88, v85);
        *v35 = v42;
        v35[1] = v43;
        v35[2] = v44;
        v35[3] = v88;
        *((_BYTE *)v35 + 32) = v85;
        v45 = *(_OWORD *)(v36 + 5);
        v46 = *(_OWORD *)(v36 + 7);
        *((_BYTE *)v35 + 72) = *((_BYTE *)v36 + 72);
        *(_OWORD *)(v35 + 7) = v46;
        *(_OWORD *)(v35 + 5) = v45;
        *((_OWORD *)v35 + 5) = *((_OWORD *)v36 + 5);
        goto LABEL_38;
      case 0xBu:
        v47 = v36[1];
        v61 = v36[4];
        v63 = v36[2];
        v58 = v36[6];
        v59 = v36[5];
        v57 = v36[7];
        v65 = v36[8];
        v67 = v36[9];
        v69 = v36[10];
        v71 = v36[11];
        v73 = v36[12];
        v75 = v36[13];
        v77 = v36[14];
        v79 = v36[15];
        v81 = v36[16];
        v83 = v36[17];
        v86 = v36[18];
        v89 = *((_BYTE *)v36 + 152);
        v48 = *v36;
        v49 = v36[3];
        outlined copy of AST.Atom.Callout(*v36, v47, v63, v49, v61, v59, v58, v57, v65, v67, v69, v71, v73, v75, v77, v79, v81, v83, v86,
          v89);
        *v35 = v48;
        v35[1] = v47;
        v35[2] = v63;
        v35[3] = v49;
        v35[4] = v61;
        v35[5] = v59;
        v35[6] = v58;
        v35[7] = v57;
        v35[8] = v65;
        v35[9] = v67;
        v35[10] = v69;
        v35[11] = v71;
        v35[12] = v73;
        v35[13] = v75;
        v35[14] = v77;
        v35[15] = v79;
        v35[16] = v81;
        v35[17] = v83;
        v35[18] = v86;
        *((_BYTE *)v35 + 152) = v89;
        goto LABEL_38;
      case 0xCu:
        v39 = *(_OWORD *)v36;
        v35[2] = v36[2];
        *(_OWORD *)v35 = v39;
        v35[3] = v36[3];
        v35[4] = v36[4];
        *(_OWORD *)(v35 + 5) = *(_OWORD *)(v36 + 5);
        swift_bridgeObjectRetain();
        goto LABEL_38;
      case 0xDu:
        v40 = *(_OWORD *)v36;
        *((_BYTE *)v35 + 16) = *((_BYTE *)v36 + 16);
        *(_OWORD *)v35 = v40;
        v35[3] = v36[3];
        v41 = *((_OWORD *)v36 + 2);
        *((_BYTE *)v35 + 48) = *((_BYTE *)v36 + 48);
        *((_OWORD *)v35 + 2) = v41;
        v35[7] = v36[7];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_38:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
        break;
    }
  }
  v53 = *(int *)(v27 + 20);
  v54 = (_QWORD *)((char *)v35 + v53);
  v55 = (_QWORD *)((char *)v36 + v53);
  *v54 = *v55;
  v54[1] = v55[1];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for AST.CustomCharacterClass.Range(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = type metadata accessor for AST.Atom.Kind(0);
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    v7 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 8)
    {
      v10 = type metadata accessor for Unicode.CanonicalCombiningClass();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 5)
    {
      v9 = type metadata accessor for Unicode.NumericType();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    v11 = type metadata accessor for AST.Atom.CharacterProperty(0);
    a1[*(int *)(v11 + 20)] = a2[*(int *)(v11 + 20)];
    a1[*(int *)(v11 + 24)] = a2[*(int *)(v11 + 24)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v12 = type metadata accessor for AST.Atom(0);
  *(_OWORD *)&a1[*(int *)(v12 + 20)] = *(_OWORD *)&a2[*(int *)(v12 + 20)];
  v13 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  v14 = &a1[v13];
  v15 = &a2[v13];
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    v16 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
    v17 = swift_getEnumCaseMultiPayload();
    if (v17 == 8)
    {
      v19 = type metadata accessor for Unicode.CanonicalCombiningClass();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v14, v15, v19);
      swift_storeEnumTagMultiPayload();
    }
    else if (v17 == 5)
    {
      v18 = type metadata accessor for Unicode.NumericType();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v14, v15, v18);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    v20 = type metadata accessor for AST.Atom.CharacterProperty(0);
    v14[*(int *)(v20 + 20)] = v15[*(int *)(v20 + 20)];
    v14[*(int *)(v20 + 24)] = v15[*(int *)(v20 + 24)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  *(_OWORD *)&v14[*(int *)(v12 + 20)] = *(_OWORD *)&v15[*(int *)(v12 + 20)];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  return a1;
}

char *assignWithTake for AST.CustomCharacterClass.Range(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (a1 != a2)
  {
    outlined destroy of AST.Atom((uint64_t)a1, type metadata accessor for AST.Atom.Kind);
    v6 = type metadata accessor for AST.Atom.Kind(0);
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      v7 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 8)
      {
        v10 = type metadata accessor for Unicode.CanonicalCombiningClass();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
        swift_storeEnumTagMultiPayload();
      }
      else if (EnumCaseMultiPayload == 5)
      {
        v9 = type metadata accessor for Unicode.NumericType();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
      }
      v11 = type metadata accessor for AST.Atom.CharacterProperty(0);
      a1[*(int *)(v11 + 20)] = a2[*(int *)(v11 + 20)];
      a1[*(int *)(v11 + 24)] = a2[*(int *)(v11 + 24)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v12 = type metadata accessor for AST.Atom(0);
  *(_OWORD *)&a1[*(int *)(v12 + 20)] = *(_OWORD *)&a2[*(int *)(v12 + 20)];
  v13 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  v14 = &a1[v13];
  v15 = &a2[v13];
  if (a1 != a2)
  {
    outlined destroy of AST.Atom((uint64_t)&a1[v13], type metadata accessor for AST.Atom.Kind);
    v16 = type metadata accessor for AST.Atom.Kind(0);
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      v17 = type metadata accessor for AST.Atom.CharacterProperty.Kind(0);
      v18 = swift_getEnumCaseMultiPayload();
      if (v18 == 8)
      {
        v20 = type metadata accessor for Unicode.CanonicalCombiningClass();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v14, v15, v20);
        swift_storeEnumTagMultiPayload();
      }
      else if (v18 == 5)
      {
        v19 = type metadata accessor for Unicode.NumericType();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v14, v15, v19);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      }
      v21 = type metadata accessor for AST.Atom.CharacterProperty(0);
      v14[*(int *)(v21 + 20)] = v15[*(int *)(v21 + 20)];
      v14[*(int *)(v21 + 24)] = v15[*(int *)(v21 + 24)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
  }
  *(_OWORD *)&v14[*(int *)(v12 + 20)] = *(_OWORD *)&v15[*(int *)(v12 + 20)];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AST.CustomCharacterClass.Range()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DEFF7630(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for AST.Atom(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 28));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for AST.CustomCharacterClass.Range()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DEFF76B8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for AST.Atom(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  return result;
}

uint64_t type metadata completion function for AST.CustomCharacterClass.Range()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for AST.Atom(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AST.CustomCharacterClass.SetOp()
{
  return &type metadata for AST.CustomCharacterClass.SetOp;
}

ValueMetadata *type metadata accessor for AST.CustomCharacterClass.Start()
{
  return &type metadata for AST.CustomCharacterClass.Start;
}

uint64_t destroy for AST.Group(uint64_t a1)
{
  outlined consume of AST.Group.Kind(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_BYTE *)(a1 + 80));
  return swift_release();
}

uint64_t initializeWithCopy for AST.Group(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a2 + 64);
  v14 = *(_QWORD *)(a2 + 72);
  v15 = *(_BYTE *)(a2 + 80);
  outlined copy of AST.Group.Kind(*(_QWORD *)a2, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v13;
  *(_QWORD *)(a1 + 72) = v14;
  *(_BYTE *)(a1 + 80) = v15;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AST.Group(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v24 = *(_QWORD *)(a2 + 64);
  v25 = *(_QWORD *)(a2 + 72);
  v26 = *(_BYTE *)(a2 + 80);
  outlined copy of AST.Group.Kind(*(_QWORD *)a2, v5, v6, v7, v8, v9, v10, v11, v24, v25, v26);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_QWORD *)(a1 + 64);
  v21 = *(_QWORD *)(a1 + 72);
  v22 = *(_BYTE *)(a1 + 80);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v24;
  *(_QWORD *)(a1 + 72) = v25;
  *(_BYTE *)(a1 + 80) = v26;
  outlined consume of AST.Group.Kind(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  return a1;
}

uint64_t assignWithTake for AST.Group(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;

  v4 = *(_BYTE *)(a2 + 80);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_QWORD *)(a1 + 64);
  v14 = *(_QWORD *)(a1 + 72);
  v15 = *(_BYTE *)(a1 + 80);
  v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v16;
  v17 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v17;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = v4;
  outlined consume of AST.Group.Kind(v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_release();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  return a1;
}

uint64_t getEnumTagSinglePayload for AST.Group(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 128))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 80);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AST.Group(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 128) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 128) = 0;
    if (a2)
      *(_BYTE *)(result + 80) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AST.Group()
{
  return &type metadata for AST.Group;
}

uint64_t destroy for AST.Group.Kind(uint64_t a1)
{
  return outlined consume of AST.Group.Kind(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_BYTE *)(a1 + 80));
}

uint64_t initializeWithCopy for AST.Group.Kind(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_BYTE *)(a2 + 80);
  outlined copy of AST.Group.Kind(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v13;
  *(_BYTE *)(a1 + 80) = v14;
  return a1;
}

uint64_t assignWithCopy for AST.Group.Kind(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v24;
  char v25;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v24 = *(_QWORD *)(a2 + 72);
  v25 = *(_BYTE *)(a2 + 80);
  outlined copy of AST.Group.Kind(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v24, v25);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_QWORD *)(a1 + 64);
  v21 = *(_QWORD *)(a1 + 72);
  v22 = *(_BYTE *)(a1 + 80);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v24;
  *(_BYTE *)(a1 + 80) = v25;
  outlined consume of AST.Group.Kind(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  return a1;
}

__n128 __swift_memcpy81_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for AST.Group.Kind(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  __int128 v16;

  v3 = *(_BYTE *)(a2 + 80);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_QWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 72);
  v14 = *(_BYTE *)(a1 + 80);
  v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v15;
  v16 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v16;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = v3;
  outlined consume of AST.Group.Kind(v4, v6, v5, v7, v8, v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for AST.Group.Kind(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 81))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 80);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AST.Group.Kind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 80) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 81) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 81) = 0;
    if (a2)
      *(_BYTE *)(result + 80) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for AST.Group.Kind(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 80) <= 2u)
    return *(unsigned __int8 *)(a1 + 80);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t destructiveInjectEnumTag for AST.Group.Kind(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_QWORD *)result = a2 - 3;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)(result + 72) = 0;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 80) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AST.Group.Kind()
{
  return &type metadata for AST.Group.Kind;
}

uint64_t destroy for AST.Group.BalancedCapture()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AST.Group.BalancedCapture(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for AST.Group.BalancedCapture(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  return a1;
}

uint64_t assignWithTake for AST.Group.BalancedCapture(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for AST.Group.BalancedCapture(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AST.Group.BalancedCapture(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 56) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AST.Group.BalancedCapture()
{
  return &type metadata for AST.Group.BalancedCapture;
}

uint64_t getEnumTagSinglePayload for AST.MatchingOption(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xED && a1[24])
    return (*(_DWORD *)a1 + 237);
  v3 = *a1;
  v4 = v3 >= 0x14;
  v5 = v3 - 20;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AST.MatchingOption(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xEC)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 237;
    if (a3 >= 0xED)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xED)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 19;
  }
  return result;
}

ValueMetadata *type metadata accessor for AST.MatchingOption()
{
  return &type metadata for AST.MatchingOption;
}

uint64_t getEnumTagSinglePayload for AST.MatchingOption.Kind(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xED)
    goto LABEL_17;
  if (a2 + 19 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 19) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 19;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 19;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 19;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x14;
  v8 = v6 - 20;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AST.MatchingOption.Kind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 19 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 19) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xED)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEC)
    return ((uint64_t (*)(void))((char *)&loc_1DEFF825C + 4 * byte_1DEFFE60D[v4]))();
  *a1 = a2 + 19;
  return ((uint64_t (*)(void))((char *)sub_1DEFF8290 + 4 * byte_1DEFFE608[v4]))();
}

uint64_t sub_1DEFF8290(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DEFF8298(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DEFF82A0);
  return result;
}

uint64_t sub_1DEFF82AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DEFF82B4);
  *(_BYTE *)result = a2 + 19;
  return result;
}

uint64_t sub_1DEFF82B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DEFF82C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AST.MatchingOption.Kind()
{
  return &type metadata for AST.MatchingOption.Kind;
}

uint64_t destroy for AST.MatchingOptionSequence()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AST.MatchingOptionSequence(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AST.MatchingOptionSequence(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;

  v4 = *a2;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  *(_OWORD *)a1 = v4;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = a2[2];
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AST.MatchingOptionSequence(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AST.Atom.Callout.OnigurumaTag(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AST.Atom.Callout.OnigurumaTag(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AST.MatchingOptionSequence()
{
  return &type metadata for AST.MatchingOptionSequence;
}

uint64_t getEnumTagSinglePayload for AST.GlobalMatchingOption(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8) >> 1;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for AST.GlobalMatchingOption(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 2 * -a2;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AST.GlobalMatchingOption()
{
  return &type metadata for AST.GlobalMatchingOption;
}

ValueMetadata *type metadata accessor for AST.GlobalMatchingOption.NewlineMatching()
{
  return &type metadata for AST.GlobalMatchingOption.NewlineMatching;
}

ValueMetadata *type metadata accessor for AST.GlobalMatchingOption.NewlineSequenceMatching()
{
  return &type metadata for AST.GlobalMatchingOption.NewlineSequenceMatching;
}

uint64_t getEnumTagSinglePayload for AST.GlobalMatchingOption.Kind(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8) >> 1;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for AST.GlobalMatchingOption.Kind(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 2 * -a2;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTag for AST.GlobalMatchingOption.Kind(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8) >> 61;
  if (v1 <= 4)
    return v1;
  else
    return (*(_DWORD *)a1 + 5);
}

uint64_t destructiveProjectEnumData for AST.GlobalMatchingOption.Kind(uint64_t result)
{
  *(_QWORD *)(result + 8) &= 0x1FFFFFFFFFFFFFFFuLL;
  return result;
}

_QWORD *destructiveInjectEnumTag for AST.GlobalMatchingOption.Kind(_QWORD *result, uint64_t a2)
{
  if (a2 < 5)
  {
    result[1] = result[1] & 1 | (a2 << 61);
  }
  else
  {
    *result = (a2 - 5);
    result[1] = 0xA000000000000000;
    result[2] = 0;
    result[3] = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AST.GlobalMatchingOption.Kind()
{
  return &type metadata for AST.GlobalMatchingOption.Kind;
}

uint64_t destroy for AST.Quantification()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AST.Quantification(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;

  v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v3;
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  v6 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v6;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AST.Quantification(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v4 = *a2;
  v5 = a2[1];
  v6 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
  *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AST.Quantification(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_release();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  v6 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AST.Quantification(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 136))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8) >> 1;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for AST.Quantification(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 136) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 2 * -a2;
      result = 0.0;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      return result;
    }
    *(_BYTE *)(a1 + 136) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AST.Quantification()
{
  return &type metadata for AST.Quantification;
}

uint64_t getEnumTagSinglePayload for AST.Quantification.Amount(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8) >> 1;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for AST.Quantification.Amount(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    *(_QWORD *)(a1 + 56) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 2 * -a2;
      result = 0.0;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      return result;
    }
    *(_BYTE *)(a1 + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTag for AST.Quantification.Amount(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 40) >> 61;
  if (v1 <= 3)
    return v1;
  else
    return (*(_DWORD *)a1 + 4);
}

uint64_t destructiveProjectEnumData for AST.Quantification.Amount(uint64_t result)
{
  *(_QWORD *)(result + 40) &= 0x1FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t destructiveInjectEnumTag for AST.Quantification.Amount(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (a2 < 4)
  {
    v2 = *(_QWORD *)(result + 40) & 1 | (a2 << 61);
    *(_QWORD *)(result + 8) &= 1uLL;
    *(_QWORD *)(result + 40) = v2;
  }
  else
  {
    *(_QWORD *)result = (a2 - 4);
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 40) = 0x8000000000000000;
  }
  return result;
}

ValueMetadata *type metadata accessor for AST.Quantification.Amount()
{
  return &type metadata for AST.Quantification.Amount;
}

ValueMetadata *type metadata accessor for AST.Quantification.Kind()
{
  return &type metadata for AST.Quantification.Kind;
}

ValueMetadata *type metadata accessor for CaptureList()
{
  return &type metadata for CaptureList;
}

uint64_t destroy for CaptureList.Capture()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CaptureList.Capture(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CaptureList.Capture(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for CaptureList.Capture(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for CaptureList.Capture(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 49))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CaptureList.Capture(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 49) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CaptureList.Capture()
{
  return &type metadata for CaptureList.Capture;
}

ValueMetadata *type metadata accessor for CaptureList.Builder()
{
  return &type metadata for CaptureList.Builder;
}

uint64_t getEnumTagSinglePayload for CaptureList.Builder.OptionalNesting(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CaptureList.Builder.OptionalNesting(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for CaptureList.Builder.OptionalNesting()
{
  return &type metadata for CaptureList.Builder.OptionalNesting;
}

uint64_t destroy for CompilerLexError()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CompilerLexError(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CompilerLexError(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for CompilerLexError(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for CompilerLexError(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CompilerLexError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CompilerLexError()
{
  return &type metadata for CompilerLexError;
}

uint64_t initializeWithCopy for CompilerParseError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CompilerParseError(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  return a1;
}

uint64_t assignWithTake for CompilerParseError(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for CompilerParseError(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CompilerParseError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CompilerParseError()
{
  return &type metadata for CompilerParseError;
}

uint64_t getEnumTagSinglePayload for Delimiter(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[16])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Delimiter(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for Delimiter()
{
  return &type metadata for Delimiter;
}

uint64_t getEnumTagSinglePayload for DelimiterLexError(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && a1[16])
    return (*(_DWORD *)a1 + 252);
  v3 = *a1;
  v4 = v3 >= 5;
  v5 = v3 - 5;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for DelimiterLexError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_QWORD *)result = a2 - 252;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 4;
  }
  return result;
}

ValueMetadata *type metadata accessor for DelimiterLexError()
{
  return &type metadata for DelimiterLexError;
}

uint64_t getEnumTagSinglePayload for AST.Atom.CharacterProperty.PCRESpecialCategory(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AST.Atom.CharacterProperty.PCRESpecialCategory(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1DEFF923C + 4 * byte_1DEFFE617[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1DEFF9270 + 4 * byte_1DEFFE612[v4]))();
}

uint64_t sub_1DEFF9270(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DEFF9278(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DEFF9280);
  return result;
}

uint64_t sub_1DEFF928C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DEFF9294);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1DEFF9298(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DEFF92A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DelimiterLexError.Kind()
{
  return &type metadata for DelimiterLexError.Kind;
}

uint64_t initializeBufferWithCopyOfBuffer for Diagnostic(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t outlined consume of ParseError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t result;

  if (a5 <= 0x23u)
  {
    if (((1 << a5) & 0x363FBFF5FLL) != 0)
      return swift_bridgeObjectRelease();
    if (a5 == 18 || a5 == 35)
    {
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t outlined destroy of ParseError(uint64_t a1)
{
  outlined consume of ParseError(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  return a1;
}

__n128 __swift_memcpy73_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

ValueMetadata *type metadata accessor for Diagnostic()
{
  return &type metadata for Diagnostic;
}

_BYTE *destructiveInjectEnumTag for Diagnostic.Behavior(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for Diagnostic.Behavior()
{
  return &type metadata for Diagnostic.Behavior;
}

ValueMetadata *type metadata accessor for Diagnostics()
{
  return &type metadata for Diagnostics;
}

uint64_t initializeWithCopy for AST.Quote(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for AST.Quote(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for AST.Quote(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for AST.Quote(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AST.Quote(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Source()
{
  return &type metadata for Source;
}

ValueMetadata *type metadata accessor for Source.Location()
{
  return &type metadata for Source.Location;
}

uint64_t dispatch thunk of LocatedErrorProtocol.location.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of LocatedErrorProtocol._typeErasedError.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t type metadata instantiation function for Source.LocatedError()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for Source.LocatedError()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for Source.LocatedError(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
}

uint64_t type metadata instantiation function for Source.Located()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for Source.Located()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Source.LocatedError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(_OWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t initializeWithCopy for Source.LocatedError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithCopy for Source.LocatedError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  return a1;
}

uint64_t initializeWithTake for Source.LocatedError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for Source.LocatedError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for Source.LocatedError(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 >= a2)
  {
    if (v5)
      return (*(uint64_t (**)(void))(v4 + 48))();
    return 0;
  }
  if (((((*(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
    v6 = 2;
  else
    v6 = a2 - v5 + 1;
  if (v6 >= 0x10000)
    v7 = 4;
  else
    v7 = 2;
  if (v6 < 0x100)
    v7 = 1;
  if (v6 >= 2)
    v8 = v7;
  else
    v8 = 0;
  return ((uint64_t (*)(void))((char *)&loc_1DEFF995C + 4 * byte_1DEFFE61C[v8]))();
}

void storeEnumTagSinglePayload for Source.LocatedError(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v11 = 0u;
    if (a2 <= v7)
      goto LABEL_14;
  }
  else
  {
    v8 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v9 = v8 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_14:
      __asm { BR              X11 }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_1DEFF9A9C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_1DEFF9AA4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1DEFF9AACLL);
}

void sub_1DEFF9AC8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_1DEFF9AD0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_1DEFF9AD8(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v4 + v5) = 0;
  if (!a2)
    JUMPOUT(0x1DEFF9AE0);
  return (*(uint64_t (**)(uint64_t))(v3 + 56))(v4);
}

ValueMetadata *type metadata accessor for SyntaxOptions()
{
  return &type metadata for SyntaxOptions;
}

uint64_t dispatch thunk of _ASTPrintable._dumpBase.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t destroy for PrettyPrinter()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PrettyPrinter(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PrettyPrinter(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  v5 = a2[2];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_QWORD *)(a1 + 40) = a2[5];
  *(_QWORD *)(a1 + 48) = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  *(_QWORD *)(a1 + 64) = a2[8];
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  *(_QWORD *)(a1 + 80) = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy88_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for PrettyPrinter(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PrettyPrinter(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PrettyPrinter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PrettyPrinter()
{
  return &type metadata for PrettyPrinter;
}

uint64_t dispatch thunk of _TreeNode.children.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

ValueMetadata *type metadata accessor for Unicode.Scalar.AllScalars()
{
  return &type metadata for Unicode.Scalar.AllScalars;
}

ValueMetadata *type metadata accessor for Unsupported()
{
  return &type metadata for Unsupported;
}

uint64_t destroy for Unsupported()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for Unsupported(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Unsupported(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  return a1;
}

_QWORD *assignWithTake for Unsupported(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  return a1;
}

uint64_t getEnumTagSinglePayload for Unsupported(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Unsupported(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Unreachable()
{
  return &type metadata for Unreachable;
}

uint64_t getEnumTagSinglePayload for AnyType(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 8))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyType(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 8) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AnyType()
{
  return &type metadata for AnyType;
}

uint64_t getEnumTagSinglePayload for Unicode.Script(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0x5E)
    goto LABEL_17;
  if (a2 + 162 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 162) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 162;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 162;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 162;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA3;
  v8 = v6 - 163;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Unicode.Script(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 162 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 162) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0x5E)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0x5D)
    return ((uint64_t (*)(void))((char *)&loc_1DEFFA128 + 4 * byte_1DEFFE630[v4]))();
  *a1 = a2 - 94;
  return ((uint64_t (*)(void))((char *)sub_1DEFFA15C + 4 * byte_1DEFFE62B[v4]))();
}

uint64_t sub_1DEFFA15C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DEFFA164(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DEFFA16CLL);
  return result;
}

uint64_t sub_1DEFFA178(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DEFFA180);
  *(_BYTE *)result = a2 - 94;
  return result;
}

uint64_t sub_1DEFFA184(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DEFFA18C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Unicode.Script()
{
  return &type metadata for Unicode.Script;
}

uint64_t getEnumTagSinglePayload for AST.GlobalMatchingOption.NewlineMatching(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AST.GlobalMatchingOption.NewlineMatching(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1DEFFA28C + 4 * byte_1DEFFE63A[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1DEFFA2C0 + 4 * byte_1DEFFE635[v4]))();
}

uint64_t sub_1DEFFA2C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DEFFA2C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DEFFA2D0);
  return result;
}

uint64_t sub_1DEFFA2DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DEFFA2E4);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1DEFFA2E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DEFFA2F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Unicode.POSIXProperty()
{
  return &type metadata for Unicode.POSIXProperty;
}

uint64_t getEnumTagSinglePayload for Unicode.ExtendedGeneralCategory(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xDB)
    goto LABEL_17;
  if (a2 + 37 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 37) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 37;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 37;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 37;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x26;
  v8 = v6 - 38;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Unicode.ExtendedGeneralCategory(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 37 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 37) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xDB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xDA)
    return ((uint64_t (*)(void))((char *)&loc_1DEFFA3E8 + 4 * byte_1DEFFE644[v4]))();
  *a1 = a2 + 37;
  return ((uint64_t (*)(void))((char *)sub_1DEFFA41C + 4 * byte_1DEFFE63F[v4]))();
}

uint64_t sub_1DEFFA41C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DEFFA424(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DEFFA42CLL);
  return result;
}

uint64_t sub_1DEFFA438(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DEFFA440);
  *(_BYTE *)result = a2 + 37;
  return result;
}

uint64_t sub_1DEFFA444(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DEFFA44C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Unicode.ExtendedGeneralCategory()
{
  return &type metadata for Unicode.ExtendedGeneralCategory;
}

uint64_t getEnumTagSinglePayload for Unicode.BinaryProperty(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xBE)
    goto LABEL_17;
  if (a2 + 66 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 66) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 66;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 66;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 66;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x43;
  v8 = v6 - 67;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Unicode.BinaryProperty(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 66 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 66) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xBE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xBD)
    return ((uint64_t (*)(void))((char *)&loc_1DEFFA544 + 4 * byte_1DEFFE64E[v4]))();
  *a1 = a2 + 66;
  return ((uint64_t (*)(void))((char *)sub_1DEFFA578 + 4 * byte_1DEFFE649[v4]))();
}

uint64_t sub_1DEFFA578(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DEFFA580(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DEFFA588);
  return result;
}

uint64_t sub_1DEFFA594(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DEFFA59CLL);
  *(_BYTE *)result = a2 + 66;
  return result;
}

uint64_t sub_1DEFFA5A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DEFFA5A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Unicode.BinaryProperty()
{
  return &type metadata for Unicode.BinaryProperty;
}

_WORD *__swift_memcpy2_2(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for Unicode.Block(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 >> 6 < 0x3FB)
    goto LABEL_17;
  if (a2 + 320 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 320 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 320;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 320;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 320;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x141;
  v8 = v6 - 321;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Unicode.Block(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  uint64_t v5;

  if (a3 + 320 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 320 < 0xFF0000)
    v4 = 1;
  else
    v4 = v3;
  if (a3 >> 6 >= 0x3FB)
    v5 = v4;
  else
    v5 = 0;
  if (a2 >> 6 <= 0x3FA)
    return ((uint64_t (*)(void))((char *)&loc_1DEFFA6B0 + 4 * byte_1DEFFE658[v5]))();
  *a1 = a2 + 320;
  return ((uint64_t (*)(void))((char *)sub_1DEFFA6E8 + 4 * byte_1DEFFE653[v5]))();
}

uint64_t sub_1DEFFA6E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_1DEFFA6F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x1DEFFA6F8);
  return result;
}

uint64_t sub_1DEFFA704(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x1DEFFA70CLL);
  *(_WORD *)result = a2 + 320;
  return result;
}

uint64_t sub_1DEFFA710(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1DEFFA718(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

uint64_t getEnumTag for Unicode.Block(unsigned __int16 *a1)
{
  return *a1;
}

_WORD *destructiveInjectEnumTag for Unicode.Block(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for Unicode.Block()
{
  return &type metadata for Unicode.Block;
}

ValueMetadata *type metadata accessor for TypeConstruction()
{
  return &type metadata for TypeConstruction;
}

uint64_t destroy for ParseError(uint64_t a1, uint64_t a2)
{
  return destroy for AST.Reference(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of ParseError);
}

uint64_t destroy for AST.Reference(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  return a3(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(unsigned __int8 *)(a1 + 32));
}

uint64_t initializeWithCopy for ParseError(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeWithCopy for AST.Reference.Kind(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of ParseError);
}

uint64_t initializeWithCopy for AST.Reference.Kind(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a2;
  v6 = a2[1];
  v7 = a2[2];
  v8 = a2[3];
  v9 = *((unsigned __int8 *)a2 + 32);
  a4(*a2, v6, v7, v8, v9);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  *(_BYTE *)(a1 + 32) = v9;
  return a1;
}

uint64_t *assignWithCopy for ParseError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for AST.Reference.Kind(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of ParseError, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of ParseError);
}

uint64_t *assignWithCopy for AST.Reference.Kind(uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v7 = *a2;
  v8 = a2[1];
  v9 = a2[2];
  v10 = a2[3];
  v11 = *((unsigned __int8 *)a2 + 32);
  a4(*a2, v8, v9, v10, v11);
  v12 = *a1;
  v13 = a1[1];
  v14 = a1[2];
  v15 = a1[3];
  *a1 = v7;
  a1[1] = v8;
  a1[2] = v9;
  a1[3] = v10;
  v16 = *((unsigned __int8 *)a1 + 32);
  *((_BYTE *)a1 + 32) = v11;
  a5(v12, v13, v14, v15, v16);
  return a1;
}

uint64_t *assignWithTake for ParseError(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for AST.Reference.Kind(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of ParseError);
}

uint64_t *assignWithTake for AST.Reference.Kind(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v6 = *(_BYTE *)(a2 + 32);
  v7 = *a1;
  v9 = a1[1];
  v8 = a1[2];
  v10 = a1[3];
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v11;
  v12 = *((unsigned __int8 *)a1 + 32);
  *((_BYTE *)a1 + 32) = v6;
  a4(v7, v9, v8, v10, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for ParseError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xDC && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 220);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 0x24)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ParseError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xDB)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 220;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xDC)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xDC)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for ParseError(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 32) <= 0x23u)
    return *(unsigned __int8 *)(a1 + 32);
  else
    return (*(_DWORD *)a1 + 36);
}

uint64_t destructiveInjectEnumTag for ParseError(uint64_t result, unsigned int a2)
{
  if (a2 >= 0x24)
  {
    *(_QWORD *)result = a2 - 36;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 36;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
  }
  *(_BYTE *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ParseError()
{
  return &type metadata for ParseError;
}

uint64_t getEnumTagSinglePayload for AST.AbsentFunction.Start(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AST.AbsentFunction.Start(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1DEFFAA84 + 4 * byte_1DEFFE662[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1DEFFAAB8 + 4 * byte_1DEFFE65D[v4]))();
}

uint64_t sub_1DEFFAAB8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DEFFAAC0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DEFFAAC8);
  return result;
}

uint64_t sub_1DEFFAAD4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DEFFAADCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1DEFFAAE0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DEFFAAE8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Delimiter.Kind()
{
  return &type metadata for Delimiter.Kind;
}

uint64_t getEnumTagSinglePayload for UnsafeSourceLocation(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 2);
  if (*(_QWORD *)a1)
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for UnsafeSourceLocation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_QWORD *)result = a2 - 2;
    if (a3 >= 2)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for UnsafeSourceLocation()
{
  return &type metadata for UnsafeSourceLocation;
}

uint64_t destroy for Diagnostic(uint64_t a1)
{
  uint64_t result;
  int v3;

  result = swift_bridgeObjectRelease();
  v3 = *(unsigned __int8 *)(a1 + 72);
  if (v3 != 255)
    return outlined consume of ParseError(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), v3);
  return result;
}

uint64_t initializeWithCopy for Diagnostic(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v5 = *(unsigned __int8 *)(a2 + 72);
  swift_bridgeObjectRetain();
  if (v5 == 255)
  {
    v10 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v10;
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 40);
    v7 = *(_QWORD *)(a2 + 48);
    v9 = *(_QWORD *)(a2 + 56);
    v8 = *(_QWORD *)(a2 + 64);
    outlined copy of ParseError(v6, v7, v9, v8, v5);
    *(_QWORD *)(a1 + 40) = v6;
    *(_QWORD *)(a1 + 48) = v7;
    *(_QWORD *)(a1 + 56) = v9;
    *(_QWORD *)(a1 + 64) = v8;
    *(_BYTE *)(a1 + 72) = v5;
  }
  return a1;
}

uint64_t assignWithCopy for Diagnostic(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  __int128 *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = (__int128 *)(a1 + 40);
  v5 = (__int128 *)(a2 + 40);
  v6 = *(unsigned __int8 *)(a2 + 72);
  if (*(unsigned __int8 *)(a1 + 72) == 255)
  {
    if (v6 == 255)
    {
      v22 = *v5;
      v23 = *(_OWORD *)(a2 + 56);
      *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
      *v4 = v22;
      *(_OWORD *)(a1 + 56) = v23;
    }
    else
    {
      v16 = *(_QWORD *)(a2 + 40);
      v17 = *(_QWORD *)(a2 + 48);
      v19 = *(_QWORD *)(a2 + 56);
      v18 = *(_QWORD *)(a2 + 64);
      outlined copy of ParseError(v16, v17, v19, v18, v6);
      *(_QWORD *)(a1 + 40) = v16;
      *(_QWORD *)(a1 + 48) = v17;
      *(_QWORD *)(a1 + 56) = v19;
      *(_QWORD *)(a1 + 64) = v18;
      *(_BYTE *)(a1 + 72) = v6;
    }
  }
  else if (v6 == 255)
  {
    outlined destroy of ParseError(a1 + 40);
    v20 = *(_BYTE *)(a2 + 72);
    v21 = *(_OWORD *)(a2 + 56);
    *v4 = *v5;
    *(_OWORD *)(a1 + 56) = v21;
    *(_BYTE *)(a1 + 72) = v20;
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 40);
    v8 = *(_QWORD *)(a2 + 48);
    v10 = *(_QWORD *)(a2 + 56);
    v9 = *(_QWORD *)(a2 + 64);
    outlined copy of ParseError(v7, v8, v10, v9, v6);
    v11 = *(_QWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 48);
    v13 = *(_QWORD *)(a1 + 56);
    v14 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 40) = v7;
    *(_QWORD *)(a1 + 48) = v8;
    *(_QWORD *)(a1 + 56) = v10;
    *(_QWORD *)(a1 + 64) = v9;
    v15 = *(_BYTE *)(a1 + 72);
    *(_BYTE *)(a1 + 72) = v6;
    outlined consume of ParseError(v11, v12, v13, v14, v15);
  }
  return a1;
}

uint64_t assignWithTake for Diagnostic(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v5 = *(unsigned __int8 *)(a1 + 72);
  if (v5 == 255)
    goto LABEL_5;
  v6 = *(unsigned __int8 *)(a2 + 72);
  if (v6 == 255)
  {
    outlined destroy of ParseError(a1 + 40);
LABEL_5:
    v11 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v11;
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    return a1;
  }
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = v6;
  outlined consume of ParseError(v7, v8, v9, v10, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for Diagnostic(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 73))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Diagnostic(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 72) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 73) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 73) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for ErrorDiagnostic #1 in Diagnostics.throwAnyError()()
{
  return &unk_1EA976670;
}

uint64_t *initializeBufferWithCopyOfBuffer for Range(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v14;
  void (*v15)(uint64_t *, uint64_t *, uint64_t);

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_DWORD *)(v6 + 80);
  v9 = ~v8;
  v10 = v7 + v8;
  v11 = ((v7 + v8) & ~v8) + v7;
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v11 > 0x18)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + ((v8 + 16) & v9));
    swift_retain();
  }
  else
  {
    v15 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v15(a1, a2, *(_QWORD *)(a3 + 16));
    v15((uint64_t *)(((unint64_t)v4 + v10) & v9), (uint64_t *)(((unint64_t)a2 + v10) & v9), v5);
  }
  return v4;
}

uint64_t destroy for Range(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v6)(unint64_t, uint64_t);

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v6 = *(uint64_t (**)(unint64_t, uint64_t))(v4 + 8);
  v6(a1, v3);
  return v6((*(_QWORD *)(v4 + 64) + a1 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), v3);
}

unint64_t initializeWithCopy for Range(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(unint64_t, unint64_t, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  v7((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), v5);
  return a1;
}

unint64_t assignWithCopy for Range(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(unint64_t, unint64_t, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 24);
  v7(a1, a2, v5);
  v7((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), v5);
  return a1;
}

unint64_t initializeWithTake for Range(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(unint64_t, unint64_t, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32);
  v7(a1, a2, v5);
  v7((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), v5);
  return a1;
}

unint64_t assignWithTake for Range(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(unint64_t, unint64_t, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 40);
  v7(a1, a2, v5);
  v7((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for Range(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = ((*(_QWORD *)(v4 + 64) + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
     + *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1DEFFB298 + 4 * byte_1DEFFE667[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for Range(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in Delimiter.Kind()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [Delimiter.Kind] and conformance [A], (uint64_t)&unk_1EA977240, (uint64_t)&cache variable for noncanonical specialized generic type metadata for [Delimiter.Kind], MEMORY[0x1E0DEAF50]);
}

uint64_t lazy protocol witness table accessor for type [String] and conformance [A](unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t CanonicalSpecializedMetadata;

  result = *a1;
  if (!result)
  {
    CanonicalSpecializedMetadata = swift_getCanonicalSpecializedMetadata();
    result = MEMORY[0x1DF0F3DA4](a4, CanonicalSpecializedMetadata);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Delimiter.Kind and conformance Delimiter.Kind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Delimiter.Kind and conformance Delimiter.Kind;
  if (!lazy protocol witness table cache variable for type Delimiter.Kind and conformance Delimiter.Kind)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for Delimiter.Kind, &type metadata for Delimiter.Kind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Delimiter.Kind and conformance Delimiter.Kind);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParseError and conformance ParseError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParseError and conformance ParseError;
  if (!lazy protocol witness table cache variable for type ParseError and conformance ParseError)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for ParseError, &type metadata for ParseError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParseError and conformance ParseError);
  }
  return result;
}

uint64_t outlined init with take of ParseError(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_BYTE *)(a2 + 32) = *((_BYTE *)a1 + 32);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

_QWORD *outlined init with take of AST.Node(_QWORD *a1, _QWORD *a2)
{
  *a2 = *a1;
  return a2;
}

uint64_t outlined retain of AST.Node(uint64_t a1)
{
  swift_retain();
  return a1;
}

_OWORD *outlined init with take of AST.AbsentFunction.Kind(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t *outlined release of AST.AbsentFunction(uint64_t *a1)
{
  outlined consume of AST.AbsentFunction.Kind(a1[2], a1[3], a1[4], a1[5]);
  return a1;
}

uint64_t *outlined retain of AST.AbsentFunction(uint64_t *a1)
{
  outlined copy of AST.AbsentFunction.Kind(a1[2], a1[3], a1[4], a1[5]);
  return a1;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1Tm(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

_QWORD *__swift_project_boxed_opaque_existential_1Tm(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1Tm(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t partial apply for closure #1 in closure #1 in static TypeConstruction.tupleType<A>(of:labels:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getTupleTypeMetadata();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1DEFFB778()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1DEFFB7A4()
{
  return swift_deallocObject();
}

uint64_t sub_1DEFFB7B4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t objectdestroy_17Tm()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t outlined retain of ParseError(uint64_t a1)
{
  outlined copy of ParseError(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  return a1;
}

uint64_t outlined consume of Source.Located<AST.Group.Kind>?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a11 != -1)
    return outlined consume of AST.Group.Kind(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  return result;
}

uint64_t objectdestroy_2Tm()
{
  uint64_t *v0;

  outlined consume of AST.AbsentFunction.Kind(v0[4], v0[5], v0[6], v0[7]);
  return swift_deallocObject();
}

uint64_t _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOi2_(uint64_t result)
{
  *(_QWORD *)(result + 104) = *(_QWORD *)(result + 104) & 0xFFFFFFFFFFFFFFF8 | 3;
  return result;
}

uint64_t outlined release of AST.Group(uint64_t a1)
{
  outlined consume of AST.Group.Kind(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_BYTE *)(a1 + 80));
  swift_release();
  return a1;
}

uint64_t outlined release of AST.Conditional.Condition?(uint64_t a1)
{
  outlined consume of AST.Conditional.Condition?(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_OWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104));
  return a1;
}

uint64_t outlined consume of AST.Conditional.Condition?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14)
{
  if ((~a14 & 7) != 0)
    return outlined consume of AST.Conditional.Condition.Kind(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
  return result;
}

uint64_t objectdestroy_20Tm()
{
  uint64_t v0;

  outlined consume of AST.Conditional.Condition.Kind(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_OWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
  swift_release();
  swift_release();
  return swift_deallocObject();
}

BOOL partial apply for closure #1 in mapOption #2 (_:_:) in Parser.applySyntaxOptions(of:isScoped:)(unsigned __int8 *a1)
{
  uint64_t v1;

  return *a1 == *(unsigned __int8 *)(v1 + 16);
}

uint64_t partial apply for specialized closure #1 in Sequence<>.contains(_:)(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1])
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
}

double _s12_RegexParser6SourceV7LocatedVy_AEy_AA3ASTV14QuantificationV6AmountOG_AEy_AI4KindOGSayAG6TriviaVGtGSgWOi0_(_OWORD *a1)
{
  double result;

  result = 0.0;
  *a1 = xmmword_1DF003F10;
  a1[1] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  return result;
}

uint64_t _s12_RegexParser6SourceV7LocatedVy_AEy_AA3ASTV14QuantificationV6AmountOG_AEy_AI4KindOGSayAG6TriviaVGtGSgWOg(uint64_t a1)
{
  if ((*(_QWORD *)(a1 + 8) >> 1) > 0x80000000)
    return -(*(_QWORD *)(a1 + 8) >> 1);
  else
    return 0;
}

_QWORD *outlined retain of AST.Conditional.Condition(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15]);
  return a1;
}

uint64_t outlined consume of Source.Located<(Source.Located<AST.Quantification.Amount>, Source.Located<AST.Quantification.Kind>, [AST.Trivia])>?(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t result;

  if (a2 >> 1 != 0xFFFFFFFF || a6 >= 2)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t _s12_RegexParser3ASTV4AtomV7CalloutOSgWOg(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 152);
  if (v1 > 2)
    return (v1 ^ 0xFF) + 1;
  else
    return 0;
}

double _s12_RegexParser3ASTV4AtomV7CalloutOSgWOi0_(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 144) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 152) = -1;
  return result;
}

uint64_t _s12_RegexParser3ASTV4AtomV7CalloutOWOi1_(uint64_t result)
{
  *(_BYTE *)(result + 152) = 2;
  return result;
}

uint64_t _s12_RegexParser3ASTV4AtomV7CalloutOWOi0_(uint64_t result)
{
  *(_BYTE *)(result + 152) = 1;
  return result;
}

uint64_t _s12_RegexParser3ASTV4AtomV7CalloutOWOi_(uint64_t result)
{
  *(_BYTE *)(result + 152) = 0;
  return result;
}

unint64_t lazy protocol witness table accessor for type UInt32 and conformance UInt32()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    result = MEMORY[0x1DF0F3DA4](MEMORY[0x1E0DEE138], MEMORY[0x1E0DEE0F8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
  }
  return result;
}

uint64_t outlined init with take of Source.Located<AST.Atom.Kind>?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t lazy protocol witness table accessor for type Substring and conformance Substring()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    result = MEMORY[0x1DF0F3DA4](MEMORY[0x1E0DEBB10], MEMORY[0x1E0DEBAF0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

_BYTE *partial apply for closure #1 in closure #1 in Double.init<A>(_:)@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  v3 = *result;
  v4 = v3 > 0x20;
  v5 = (1 << v3) & 0x100003E01;
  v6 = v4 || v5 == 0;
  v7 = v6 && (result = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

uint64_t outlined consume of AST.MatchingOptionSequence?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a4)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

double _s12_RegexParser3ASTV11ConditionalV9ConditionVSgWOi0_(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 7;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  return result;
}

uint64_t _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOSgWOg(uint64_t a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;

  v1 = *(_DWORD *)(a1 + 104) & 7;
  v2 = v1 ^ 7;
  v3 = 8 - v1;
  if (v2 >= 3)
    return 0;
  else
    return v3;
}

uint64_t outlined init with take of AST.Conditional.Condition?(uint64_t a1, uint64_t a2)
{
  uint64_t CanonicalSpecializedMetadata;

  CanonicalSpecializedMetadata = swift_getCanonicalSpecializedMetadata();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CanonicalSpecializedMetadata - 8) + 32))(a2, a1, CanonicalSpecializedMetadata);
  return a2;
}

double _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOSgWOi0_(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 7;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  return result;
}

double _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOi4_(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 1;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = 4;
  return result;
}

double _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOi3_(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 4;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  return result;
}

uint64_t _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOi0_(uint64_t result)
{
  *(_QWORD *)(result + 104) = *(_QWORD *)(result + 104) & 0xFFFFFFFFFFFFFFF8 | 1;
  return result;
}

uint64_t _s12_RegexParser3ASTV11ConditionalV9ConditionV4KindOWOi1_(uint64_t result)
{
  *(_QWORD *)(result + 104) = *(_QWORD *)(result + 104) & 0xFFFFFFFFFFFFFFF8 | 2;
  return result;
}

uint64_t outlined consume of ParseError?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 != 0xFF)
    return outlined consume of ParseError(a1, a2, a3, a4, a5);
  return a1;
}

uint64_t sub_1DEFFBE14()
{
  return swift_deallocObject();
}

uint64_t outlined copy of CaptureStructure(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result;

  if (a4 == 2 || a4 == 1)
    return swift_retain();
  if (!a4)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_1DEFFBE4C()
{
  uint64_t v0;

  outlined consume of CaptureStructure(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  return swift_deallocObject();
}

uint64_t sub_1DEFFBE78()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type DelimiterLexError and conformance DelimiterLexError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DelimiterLexError and conformance DelimiterLexError;
  if (!lazy protocol witness table cache variable for type DelimiterLexError and conformance DelimiterLexError)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for DelimiterLexError, &type metadata for DelimiterLexError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DelimiterLexError and conformance DelimiterLexError);
  }
  return result;
}

uint64_t outlined release of (AST.Group.Kind, AST.Group.Kind)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  uint64_t v13;

  v13 = *(_QWORD *)(a1 + 88);
  v2 = *(_QWORD *)(a1 + 104);
  v12 = *(_QWORD *)(a1 + 96);
  v3 = *(_QWORD *)(a1 + 112);
  v4 = *(_QWORD *)(a1 + 120);
  v5 = *(_QWORD *)(a1 + 128);
  v6 = *(_QWORD *)(a1 + 136);
  v7 = *(_QWORD *)(a1 + 144);
  v8 = *(_QWORD *)(a1 + 152);
  v9 = *(_QWORD *)(a1 + 160);
  v10 = *(_BYTE *)(a1 + 168);
  outlined consume of AST.Group.Kind(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_BYTE *)(a1 + 80));
  outlined consume of AST.Group.Kind(v13, v12, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  return a1;
}

uint64_t outlined release of (AST.Conditional.Condition.Kind, AST.Conditional.Condition.Kind)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 136);
  v13 = *(_QWORD *)(a1 + 128);
  v3 = *(_QWORD *)(a1 + 144);
  v4 = *(_QWORD *)(a1 + 152);
  v5 = *(_QWORD *)(a1 + 160);
  v6 = *(_QWORD *)(a1 + 168);
  v7 = *(_QWORD *)(a1 + 176);
  v8 = *(_QWORD *)(a1 + 184);
  v11 = *(_OWORD *)(a1 + 208);
  v12 = *(_OWORD *)(a1 + 192);
  v10 = *(_OWORD *)(a1 + 224);
  outlined consume of AST.Conditional.Condition.Kind(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_OWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104));
  outlined consume of AST.Conditional.Condition.Kind(v13, v2, v3, v4, v5, v6, v7, v8, v12, *((uint64_t *)&v12 + 1), v11, *((uint64_t *)&v11 + 1), v10, SBYTE8(v10));
  return a1;
}

uint64_t outlined release of (AST.Atom.Callout.OnigurumaTag?, AST.Atom.Callout.OnigurumaTag?)(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined retain of Source.Located<AST.Atom.Callout.PCRE.Argument>(uint64_t a1)
{
  outlined copy of AST.Atom.Callout.PCRE.Argument(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  return a1;
}

uint64_t outlined release of AST.Atom.Callout(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 152);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    v4);
  return a1;
}

uint64_t outlined release of (AST.Atom.Callout, AST.Atom.Callout)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 168);
  v17 = *(_QWORD *)(a1 + 160);
  v3 = *(_QWORD *)(a1 + 176);
  v4 = *(_QWORD *)(a1 + 184);
  v5 = *(_QWORD *)(a1 + 192);
  v6 = *(_QWORD *)(a1 + 200);
  v7 = *(_QWORD *)(a1 + 208);
  v8 = *(_QWORD *)(a1 + 216);
  v15 = *(_OWORD *)(a1 + 240);
  v16 = *(_OWORD *)(a1 + 224);
  v13 = *(_OWORD *)(a1 + 272);
  v14 = *(_OWORD *)(a1 + 256);
  v12 = *(_OWORD *)(a1 + 288);
  v9 = *(_QWORD *)(a1 + 304);
  v10 = *(_BYTE *)(a1 + 312);
  outlined consume of AST.Atom.Callout(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_BYTE *)(a1 + 152));
  outlined consume of AST.Atom.Callout(v17, v2, v3, v4, v5, v6, v7, v8, v16, *((uint64_t *)&v16 + 1), v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v9,
    v10);
  return a1;
}

uint64_t outlined destroy of _ASTParent?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t __swift_instantiateCanonicalPrespecializedGenericMetadata()
{
  return swift_getCanonicalPrespecializedGenericMetadata();
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x1DF0F3D50](a1, v6, a5);
}

uint64_t destroy for CaptureStructure(uint64_t a1)
{
  return outlined consume of CaptureStructure(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t initializeWithCopy for CaptureStructure(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  outlined copy of CaptureStructure(*(_QWORD *)a2, v4, v5, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for CaptureStructure(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  outlined copy of CaptureStructure(*(_QWORD *)a2, v4, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v10 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  outlined consume of CaptureStructure(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for CaptureStructure(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  outlined consume of CaptureStructure(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for CaptureStructure(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CaptureStructure(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for CaptureStructure(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t destructiveInjectEnumTag for CaptureStructure(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for CaptureStructure()
{
  return &type metadata for CaptureStructure;
}

_QWORD *initializeBufferWithCopyOfBuffer for FatalParseError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for FatalParseError(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for FatalParseError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FatalParseError(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FatalParseError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FatalParseError()
{
  return &type metadata for FatalParseError;
}

ValueMetadata *type metadata accessor for IdentifierKind()
{
  return &type metadata for IdentifierKind;
}

uint64_t getEnumTagSinglePayload for AST.Atom.CharacterProperty.Kind.MapKind(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AST.Atom.CharacterProperty.Kind.MapKind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1DEFFC6F0 + 4 * byte_1DEFFE67A[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1DEFFC724 + 4 * byte_1DEFFE675[v4]))();
}

uint64_t sub_1DEFFC724(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DEFFC72C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DEFFC734);
  return result;
}

uint64_t sub_1DEFFC740(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DEFFC748);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1DEFFC74C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DEFFC754(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RadixKind()
{
  return &type metadata for RadixKind;
}

uint64_t *initializeBufferWithCopyOfBuffer for Optional(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v6 + 64) + 1;
  if (*(_DWORD *)(v6 + 80) > 7u || (v7 & 0x100000) != 0 || v8 > 0x18)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v7 + 16) & ~(unint64_t)v7));
    swift_retain();
  }
  else if ((*(unsigned int (**)(uint64_t *, uint64_t, _QWORD))(v6 + 48))(a2, 1, *(_QWORD *)(a3 + 16)))
  {
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

uint64_t destroy for Optional(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return result;
}

void *initializeWithCopy for Optional(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *assignWithCopy for Optional(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
  return a1;
}

void *initializeWithTake for Optional(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *assignWithTake for Optional(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for Optional(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v7;
  if (!a2)
    return 0;
  v8 = a2 - v6;
  if (a2 > v6)
  {
    v9 = 8 * v7;
    if (v7 > 3)
      goto LABEL_8;
    v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v7);
      if (v10)
        goto LABEL_15;
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2)
          goto LABEL_24;
LABEL_8:
        v10 = *(unsigned __int8 *)(a1 + v7);
        if (!*(_BYTE *)(a1 + v7))
          goto LABEL_24;
LABEL_15:
        v12 = (v10 - 1) << v9;
        if (v7 > 3)
          v12 = 0;
        if ((_DWORD)v7)
        {
          if (v7 <= 3)
            v13 = v7;
          else
            v13 = 4;
          __asm { BR              X12 }
        }
        return v6 + v12 + 1;
      }
      v10 = *(unsigned __int16 *)(a1 + v7);
      if (*(_WORD *)(a1 + v7))
        goto LABEL_15;
    }
  }
LABEL_24:
  if (v5 < 2)
    return 0;
  v14 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v14 >= 2)
    return v14 - 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for Optional(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  size_t v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (v8)
  {
    v10 = *(_QWORD *)(v7 + 64);
  }
  else
  {
    v9 = 0;
    v10 = *(_QWORD *)(v7 + 64) + 1;
  }
  v11 = a3 >= v9;
  v12 = a3 - v9;
  if (v12 != 0 && v11)
  {
    if (v10 > 3)
    {
      v6 = 1u;
      if (v9 < a2)
        goto LABEL_14;
      goto LABEL_21;
    }
    v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v6 = 4u;
      if (v9 < a2)
      {
LABEL_14:
        v14 = ~v9 + a2;
        if (v10 < 4)
        {
          if ((_DWORD)v10)
          {
            v15 = v14 & ~(-1 << (8 * v10));
            bzero(a1, v10);
            if ((_DWORD)v10 == 3)
            {
              *a1 = v15;
              *((_BYTE *)a1 + 2) = BYTE2(v15);
            }
            else if ((_DWORD)v10 == 2)
            {
              *a1 = v15;
            }
            else
            {
              *(_BYTE *)a1 = v15;
            }
          }
        }
        else
        {
          bzero(a1, v10);
          *(_DWORD *)a1 = v14;
        }
        __asm { BR              X10 }
      }
LABEL_21:
      __asm { BR              X11 }
    }
    if (v13 >= 0x100)
      v6 = 2;
    else
      v6 = v13 > 1;
  }
  if (v9 < a2)
    goto LABEL_14;
  goto LABEL_21;
}

void sub_1DEFFCE7C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_1DEFFCE84()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

uint64_t getEnumTag for Optional(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 48))(a1, 1);
}

uint64_t destructiveInjectEnumTag for Optional(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 56))(a1, a2, 1);
}

unint64_t lazy protocol witness table accessor for type RadixKind and conformance RadixKind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RadixKind and conformance RadixKind;
  if (!lazy protocol witness table cache variable for type RadixKind and conformance RadixKind)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for RadixKind, &type metadata for RadixKind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RadixKind and conformance RadixKind);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IdentifierKind and conformance IdentifierKind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IdentifierKind and conformance IdentifierKind;
  if (!lazy protocol witness table cache variable for type IdentifierKind and conformance IdentifierKind)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for IdentifierKind, &type metadata for IdentifierKind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IdentifierKind and conformance IdentifierKind);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FatalParseError and conformance FatalParseError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FatalParseError and conformance FatalParseError;
  if (!lazy protocol witness table cache variable for type FatalParseError and conformance FatalParseError)
  {
    result = MEMORY[0x1DF0F3DA4](&protocol conformance descriptor for FatalParseError, &type metadata for FatalParseError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FatalParseError and conformance FatalParseError);
  }
  return result;
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return MEMORY[0x1E0DEA1C0]();
}

uint64_t Character.asciiValue.getter()
{
  return MEMORY[0x1E0DEA230]();
}

uint64_t Character.isWhitespace.getter()
{
  return MEMORY[0x1E0DEA258]();
}

uint64_t Character.hexDigitValue.getter()
{
  return MEMORY[0x1E0DEA270]();
}

uint64_t Character.hash(into:)()
{
  return MEMORY[0x1E0DEA2A0]();
}

uint64_t Character.write<A>(to:)()
{
  return MEMORY[0x1E0DEA2A8]();
}

uint64_t Character.isLetter.getter()
{
  return MEMORY[0x1E0DEA2B0]();
}

uint64_t Character.isNumber.getter()
{
  return MEMORY[0x1E0DEA2B8]();
}

uint64_t dispatch thunk of BidirectionalCollection.index(_:offsetBy:)()
{
  return MEMORY[0x1E0DEA328]();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return MEMORY[0x1E0DEA3B0]();
}

uint64_t dispatch thunk of static Comparable.<= infix(_:_:)()
{
  return MEMORY[0x1E0DEA3D0]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x1E0DEA568]();
}

uint64_t String.init<A>(describing:)()
{
  return MEMORY[0x1E0DEA5F8]();
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = MEMORY[0x1E0DEA610]();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t String.utf8CString.getter()
{
  return MEMORY[0x1E0DEA630]();
}

uint64_t String._nfcCodeUnits.getter()
{
  return MEMORY[0x1E0DEA648]();
}

uint64_t static String._fromCodeUnits<A, B>(_:encoding:repair:)()
{
  return MEMORY[0x1E0DEA650]();
}

uint64_t static String._fromSubstring(_:)()
{
  return MEMORY[0x1E0DEA658]();
}

uint64_t String.replaceSubrange<A>(_:with:)()
{
  return MEMORY[0x1E0DEA680]();
}

uint64_t String.UnicodeScalarView._foreignIndex(after:)()
{
  return MEMORY[0x1E0DEA6A0]();
}

uint64_t String.UnicodeScalarView._foreignIndex(before:)()
{
  return MEMORY[0x1E0DEA6A8]();
}

uint64_t static String._fromUTF8Repairing(_:)()
{
  return MEMORY[0x1E0DEA6F0]();
}

uint64_t static String._uncheckedFromUTF8(_:)()
{
  return MEMORY[0x1E0DEA6F8]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x1E0DEA758]();
}

uint64_t String.Index.init(_:within:)()
{
  return MEMORY[0x1E0DEA7A8]();
}

uint64_t String.count.getter()
{
  return MEMORY[0x1E0DEA7B8]();
}

uint64_t String.index(after:)()
{
  return MEMORY[0x1E0DEA7C0]();
}

uint64_t String.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x1E0DEA7D0]();
}

uint64_t String.index(_:offsetBy:)()
{
  return MEMORY[0x1E0DEA7D8]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
  MEMORY[0x1E0DEA7F8](a1._countAndFlagsBits, a1._object);
}

{
  MEMORY[0x1E0DEA800](a1._countAndFlagsBits, a1._object);
}

Swift::String_optional __swiftcall String.Iterator.next()()
{
  uint64_t v0;
  void *v1;
  Swift::String_optional result;

  v0 = MEMORY[0x1E0DEA840]();
  result.value._object = v1;
  result.value._countAndFlagsBits = v0;
  return result;
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x1E0DEA850]();
}

uint64_t String.UTF8View._foreignIndex(after:)()
{
  return MEMORY[0x1E0DEA858]();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x1E0DEA868]();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:)()
{
  return MEMORY[0x1E0DEA870]();
}

uint64_t String.UTF8View._foreignDistance(from:to:)()
{
  return MEMORY[0x1E0DEA878]();
}

uint64_t String.UTF8View._foreignSubscript(position:)()
{
  return MEMORY[0x1E0DEA880]();
}

uint64_t String.distance(from:to:)()
{
  return MEMORY[0x1E0DEA8C0]();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return MEMORY[0x1E0DEA908]();
}

Swift::Bool __swiftcall String.hasPrefix(_:)(Swift::String a1)
{
  return MEMORY[0x1E0DEA940](a1._countAndFlagsBits, a1._object);
}

Swift::String __swiftcall String.init(repeating:count:)(Swift::String repeating, Swift::Int count)
{
  uint64_t v2;
  void *v3;
  Swift::String result;

  v2 = MEMORY[0x1E0DEA958](repeating._countAndFlagsBits, repeating._object, count);
  result._object = v3;
  result._countAndFlagsBits = v2;
  return result;
}

uint64_t String.init<A>(_:radix:uppercase:)()
{
  return MEMORY[0x1E0DEA9C0]();
}

uint64_t String.init<A>(_:)()
{
  return MEMORY[0x1E0DEAA38]();
}

{
  return MEMORY[0x1E0DEAA40]();
}

uint64_t String.subscript.getter()
{
  return MEMORY[0x1E0DEAA50]();
}

uint64_t dispatch thunk of Sequence.makeIterator()()
{
  return MEMORY[0x1E0DEAA58]();
}

uint64_t dispatch thunk of Sequence.withContiguousStorageIfAvailable<A>(_:)()
{
  return MEMORY[0x1E0DEAA80]();
}

uint64_t Sequence.enumerated()()
{
  return MEMORY[0x1E0DEAAB0]();
}

uint64_t Sequence.withContiguousStorageIfAvailable<A>(_:)()
{
  return MEMORY[0x1E0DEAAD8]();
}

uint64_t Sequence.lazy.getter()
{
  return MEMORY[0x1E0DEAAF8]();
}

uint64_t Sequence<>.max()()
{
  return MEMORY[0x1E0DEAB78]();
}

uint64_t Sequence<>.elementsEqual<A>(_:)()
{
  return MEMORY[0x1E0DEAB90]();
}

uint64_t dispatch thunk of RangeExpression.relative<A>(to:)()
{
  return MEMORY[0x1E0DEAC68]();
}

uint64_t Array.description.getter()
{
  return MEMORY[0x1E0DEADB0]();
}

uint64_t static Array._allocateUninitialized(_:)()
{
  return MEMORY[0x1E0DEAE10]();
}

uint64_t type metadata accessor for Array()
{
  return MEMORY[0x1E0DEAEC8]();
}

uint64_t Array.init<A>(_:)()
{
  return MEMORY[0x1E0DEAF00]();
}

uint64_t dispatch thunk of Collection.startIndex.getter()
{
  return MEMORY[0x1E0DEB528]();
}

uint64_t dispatch thunk of Collection.count.getter()
{
  return MEMORY[0x1E0DEB560]();
}

uint64_t dispatch thunk of Collection.index(_:offsetBy:)()
{
  return MEMORY[0x1E0DEB580]();
}

uint64_t dispatch thunk of Collection.distance(from:to:)()
{
  return MEMORY[0x1E0DEB5A0]();
}

uint64_t dispatch thunk of Collection.endIndex.getter()
{
  return MEMORY[0x1E0DEB5A8]();
}

uint64_t dispatch thunk of Collection.formIndex(after:)()
{
  return MEMORY[0x1E0DEB5B0]();
}

uint64_t Collection.subscript.getter()
{
  return MEMORY[0x1E0DEB690]();
}

uint64_t dispatch thunk of Collection.subscript.getter()
{
  return MEMORY[0x1E0DEB6C8]();
}

uint64_t dispatch thunk of Collection.subscript.read()
{
  return MEMORY[0x1E0DEB6D0]();
}

uint64_t type metadata accessor for Range()
{
  return MEMORY[0x1E0DEB848]();
}

Swift::Void __swiftcall UnsafeMutablePointer.deallocate()()
{
  MEMORY[0x1E0DEB8C8]();
}

uint64_t UnsafeMutablePointer.move()()
{
  return MEMORY[0x1E0DEB8F8]();
}

uint64_t static UnsafeMutablePointer.allocate(capacity:)()
{
  return MEMORY[0x1E0DEB908]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x1E0DEB940]();
}

uint64_t Substring.index(after:)()
{
  return MEMORY[0x1E0DEBA70]();
}

uint64_t Substring.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x1E0DEBA80]();
}

uint64_t Substring.UTF8View.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x1E0DEBAA0]();
}

uint64_t Substring.UTF8View.subscript.getter()
{
  return MEMORY[0x1E0DEBAD0]();
}

uint64_t Substring.distance(from:to:)()
{
  return MEMORY[0x1E0DEBAD8]();
}

uint64_t Substring.subscript.getter()
{
  return MEMORY[0x1E0DEBB48]();
}

{
  return MEMORY[0x1E0DEBB58]();
}

uint64_t dispatch thunk of IteratorProtocol.next()()
{
  return MEMORY[0x1E0DEBB68]();
}

uint64_t dispatch thunk of AnyKeyPath._storedInlineOffset.getter()
{
  return MEMORY[0x1E0DEBE78]();
}

uint64_t SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x1E0DEC050]();
}

uint64_t static _SetStorage.copy(original:)()
{
  return MEMORY[0x1E0DEC248]();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x1E0DEC250]();
}

uint64_t _StringGuts._slowWithCString<A>(_:)()
{
  return MEMORY[0x1E0DEC280]();
}

uint64_t _StringGuts.foreignScalarAlign(_:)()
{
  return MEMORY[0x1E0DEC290]();
}

uint64_t _StringGuts.foreignErrorCorrectedScalar(startingAt:)()
{
  return MEMORY[0x1E0DEC2A0]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
  MEMORY[0x1E0DEC2A8](a1);
}

uint64_t type metadata accessor for LazySequence()
{
  return MEMORY[0x1E0DEC310]();
}

uint64_t StaticString.description.getter()
{
  return MEMORY[0x1E0DEC338]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x1E0DEC588]();
}

uint64_t _decodeScalar(_:startingAt:)()
{
  return MEMORY[0x1E0DEC590]();
}

Swift::Void __swiftcall ContiguousArray.reserveCapacity(_:)(Swift::Int a1)
{
  MEMORY[0x1E0DEC680](a1);
}

uint64_t ContiguousArray.append(_:)()
{
  return MEMORY[0x1E0DEC6E0]();
}

uint64_t ContiguousArray.init()()
{
  return MEMORY[0x1E0DEC700]();
}

uint64_t type metadata accessor for ContiguousArray()
{
  return MEMORY[0x1E0DEC708]();
}

uint64_t type metadata accessor for LazyMapSequence()
{
  return MEMORY[0x1E0DEC808]();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return MEMORY[0x1E0DEC8E0]();
}

uint64_t type metadata accessor for PartialRangeFrom()
{
  return MEMORY[0x1E0DEC910]();
}

uint64_t type metadata accessor for PartialRangeUpTo()
{
  return MEMORY[0x1E0DEC930]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x1E0DECBE8]();
}

uint64_t EnumeratedSequence.makeIterator()()
{
  return MEMORY[0x1E0DECC38]();
}

uint64_t EnumeratedSequence.Iterator.next()()
{
  return MEMORY[0x1E0DECC40]();
}

uint64_t type metadata accessor for EnumeratedSequence.Iterator()
{
  return MEMORY[0x1E0DECC48]();
}

uint64_t type metadata accessor for EnumeratedSequence()
{
  return MEMORY[0x1E0DECC58]();
}

uint64_t dispatch thunk of _HasContiguousBytes.withUnsafeBytes<A>(_:)()
{
  return MEMORY[0x1E0DECDA0]();
}

uint64_t dispatch thunk of _HasContiguousBytes._providesContiguousBytesNoCopy.getter()
{
  return MEMORY[0x1E0DECDA8]();
}

uint64_t LazySequenceProtocol.map<A>(_:)()
{
  return MEMORY[0x1E0DECE28]();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return MEMORY[0x1E0DECF28](cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x1E0DED1D0]();
}

uint64_t DefaultStringInterpolation.appendInterpolation<A>(_:)()
{
  return MEMORY[0x1E0DED548]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x1E0DED600]();
}

uint64_t _findStringSwitchCaseWithCache(cases:string:cache:)()
{
  return MEMORY[0x1E0DED998]();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x1E0DEDAE0]();
}

uint64_t Error._getEmbeddedNSError()()
{
  return MEMORY[0x1E0DEDB10]();
}

uint64_t Error._code.getter()
{
  return MEMORY[0x1E0DEDB18]();
}

uint64_t Error._domain.getter()
{
  return MEMORY[0x1E0DEDB20]();
}

uint64_t Error._userInfo.getter()
{
  return MEMORY[0x1E0DEDB28]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x1E0DEDEF8]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
  MEMORY[0x1E0DEDF10](a1);
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
  MEMORY[0x1E0DEDF18](a1);
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt32 a1)
{
  MEMORY[0x1E0DEDF28](*(_QWORD *)&a1);
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt64 a1)
{
  MEMORY[0x1E0DEDF30](a1);
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x1E0DEDF40]();
}

uint64_t static Unicode.NumericType.== infix(_:_:)()
{
  return MEMORY[0x1E0DEE2C8]();
}

uint64_t type metadata accessor for Unicode.NumericType()
{
  return MEMORY[0x1E0DEE2E8]();
}

uint64_t static Unicode.CanonicalCombiningClass.== infix(_:_:)()
{
  return MEMORY[0x1E0DEE420]();
}

uint64_t Unicode.CanonicalCombiningClass.init(rawValue:)()
{
  return MEMORY[0x1E0DEE428]();
}

uint64_t type metadata accessor for Unicode.CanonicalCombiningClass()
{
  return MEMORY[0x1E0DEE438]();
}

uint64_t Unicode.Scalar.Properties.isPatternWhitespace.getter()
{
  return MEMORY[0x1E0DEE620]();
}

uint64_t type metadata accessor for Unicode.Scalar.Properties()
{
  return MEMORY[0x1E0DEE6E0]();
}

uint64_t Unicode.Scalar.properties.getter()
{
  return MEMORY[0x1E0DEE6F0]();
}

uint64_t _swift_stdlib_strtod_clocale()
{
  return MEMORY[0x1E0DEEA50]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1E0C83EE0](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x1E0DEEA98]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x1E0DEEAA8]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1E0DEEAB0]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x1E0DEEAC0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1E0DEEAD8]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1E0DEEAE0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x1E0DEEAE8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x1E0DEEAF0]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1E0DEEB08]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1E0DEEB10]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1E0DEEB18]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x1E0DEEB20]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x1E0DEEB28]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x1E0DEEB50]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x1E0DEEB60]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1E0DEEB80]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1E0DEEBF0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1E0DEEBF8]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x1E0DEEC00]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x1E0DEEC08]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x1E0DEEC18]();
}

uint64_t swift_getCanonicalPrespecializedGenericMetadata()
{
  return MEMORY[0x1E0DEEC28]();
}

uint64_t swift_getCanonicalSpecializedMetadata()
{
  return MEMORY[0x1E0DEEC30]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x1E0DEEC38]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x1E0DEEC40]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x1E0DEEC48]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x1E0DEEC50]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x1E0DEECB0]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x1E0DEECB8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1E0DEECF8]();
}

uint64_t swift_getTupleTypeMetadata()
{
  return MEMORY[0x1E0DEED18]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x1E0DEED20]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1E0DEED38]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1E0DEED40]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1E0DEED50]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x1E0DEED60]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x1E0DEED78]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x1E0DEED88]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1E0DEEDD0]();
}

uint64_t swift_projectBox()
{
  return MEMORY[0x1E0DEEE08]();
}

uint64_t swift_release()
{
  return MEMORY[0x1E0DEEE30]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x1E0DEEE38]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1E0DEEE48]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x1E0DEEE50]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x1E0DEEE70]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x1E0DEEE98]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x1E0DEEEA0]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1E0DEEEC0]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x1E0DEEEC8]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1E0DEEED0]();
}

