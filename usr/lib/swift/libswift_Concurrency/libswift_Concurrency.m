uint64_t CheckedContinuationCanary.__deallocating_deinit()
{
  _QWORD *v0;
  Swift::String v1;
  uint64_t v2;
  void *v3;
  Swift::String v4;
  Swift::String v5;

  swift_arrayDestroy();
  if (v0[2])
  {
    _StringGuts.grow(_:)(60);
    v1._countAndFlagsBits = 0xD000000000000020;
    v1._object = (void *)0x800000018D5BEC80;
    String.append(_:)(v1);
    v2 = v0[3];
    v3 = (void *)v0[4];
    swift_bridgeObjectRetain();
    v4._countAndFlagsBits = v2;
    v4._object = v3;
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    v5._object = (void *)0x800000018D5BF7D0;
    v5._countAndFlagsBits = 0xD00000000000001ALL;
    String.append(_:)(v5);
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    swift_continuation_logFailedCheck();
    swift_release();
  }
  return swift_deallocClassInstance();
}

_QWORD *CheckedContinuation.init(continuation:function:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *result;

  type metadata accessor for CheckedContinuationCanary();
  result = (_QWORD *)swift_allocObject();
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  *a4 = result;
  return result;
}

uint64_t type metadata accessor for CheckedContinuationCanary()
{
  return objc_opt_self();
}

void CheckedContinuation.resume(returning:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  swift::AsyncTask *v6;
  uint64_t v7;
  Swift::String v8;
  uint64_t v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;

  v3 = *v2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = (unint64_t *)(*v2 + 16);
  do
    v6 = (swift::AsyncTask *)__ldaxr(v5);
  while (__stlxr(0, v5));
  if (v6)
  {
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(*(_QWORD *)(*((_QWORD *)v6 + 8) + 40), a1);
    swift_continuation_throwingResume(v6);
  }
  else
  {
    v7 = v3;
    swift_retain();
    _StringGuts.grow(_:)(98);
    v8._object = (void *)0x800000018D5BEC80;
    v8._countAndFlagsBits = 0xD000000000000020;
    String.append(_:)(v8);
    v9 = *(_QWORD *)(v7 + 24);
    v10 = *(void **)(v7 + 32);
    swift_bridgeObjectRetain();
    swift_release();
    v11._countAndFlagsBits = v9;
    v11._object = v10;
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._countAndFlagsBits = 0xD00000000000003CLL;
    v12._object = (void *)0x800000018D5BECB0;
    String.append(_:)(v12);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v13._countAndFlagsBits = 2593;
    v13._object = (void *)0xE200000000000000;
    String.append(_:)(v13);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void CheckedContinuation.resume(throwing:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v16;
  void *v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  _QWORD v21[2];

  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  v9 = (unint64_t *)(*v2 + 16);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(0, v9));
  if (v10)
  {
    v11 = swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v12, a1, v4);
    swift_continuation_throwingResumeWithError(v10, v11);
  }
  else
  {
    v13 = a1;
    v14 = v8;
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v13, v4);
    v21[0] = 0;
    v21[1] = 0xE000000000000000;
    swift_retain();
    _StringGuts.grow(_:)(97);
    v15._object = (void *)0x800000018D5BEC80;
    v15._countAndFlagsBits = 0xD000000000000020;
    String.append(_:)(v15);
    v16 = *(_QWORD *)(v14 + 24);
    v17 = *(void **)(v14 + 32);
    swift_bridgeObjectRetain();
    swift_release();
    v18._countAndFlagsBits = v16;
    v18._object = v17;
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = 0xD00000000000003BLL;
    v19._object = (void *)0x800000018D5BED70;
    String.append(_:)(v19);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v20._countAndFlagsBits = 2593;
    v20._object = (void *)0xE200000000000000;
    String.append(_:)(v20);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

uint64_t closure #1 in withCheckedContinuation<A>(isolation:function:_:)(uint64_t a1, void (*a2)(_QWORD **), uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  _QWORD *v11;

  swift_bridgeObjectRetain();
  type metadata accessor for CheckedContinuationCanary();
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = a1;
  v9[3] = a4;
  v9[4] = a5;
  v11 = v9;
  a2(&v11);
  return swift_release();
}

uint64_t withCheckedContinuation<A>(isolation:function:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t ObjectType;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;

  v8[14] = a7;
  v8[15] = a8;
  v8[12] = a5;
  v8[13] = a6;
  v8[10] = a1;
  v8[11] = a4;
  if (a2)
  {
    ObjectType = swift_getObjectType();
    v11 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(ObjectType, a3);
    v13 = v12;
  }
  else
  {
    v11 = 0;
    v13 = 0;
  }
  return swift_task_switch(withCheckedContinuation<A>(isolation:function:_:), v11, v13);
}

uint64_t withCheckedContinuation<A>(isolation:function:_:)()
{
  _QWORD *v0;
  uint64_t v1;
  void (*v2)(_QWORD **);
  uint64_t v3;
  uint64_t v4;
  swift *v5;

  v1 = v0[14];
  v3 = v0[12];
  v2 = (void (*)(_QWORD **))v0[13];
  v4 = v0[11];
  v0[7] = v0[10];
  v0[2] = v0;
  v0[3] = withCheckedContinuation<A>(isolation:function:_:);
  v5 = swift_continuation_init(v0 + 2, 0);
  closure #1 in withCheckedContinuation<A>(isolation:function:_:)((uint64_t)v5, v2, v1, v4, v3);
  return swift_continuation_await((uint64_t)(v0 + 2));
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  return (*(uint64_t (**)(void))(*v0 + 8))();
}

uint64_t withCheckedContinuation<A>(function:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t (*v16)(uint64_t, void (*)(swift *));

  v13 = (_QWORD *)swift_task_alloc(64);
  *(_QWORD *)(v6 + 16) = v13;
  v13[2] = a6;
  v13[3] = a4;
  v13[4] = a5;
  v13[5] = a2;
  v13[6] = a3;
  v16 = (uint64_t (*)(uint64_t, void (*)(swift *)))((char *)&async function pointer to _unsafeInheritExecutor_withUnsafeContinuation<A>(_:)
                                                                      + async function pointer to _unsafeInheritExecutor_withUnsafeContinuation<A>(_:));
  v14 = (_QWORD *)swift_task_alloc(unk_1EE06A0E4);
  *(_QWORD *)(v6 + 24) = v14;
  *v14 = v6;
  v14[1] = withCheckedContinuation<A>(function:_:);
  return v16(a1, (void (*)(swift *))partial apply for closure #1 in _unsafeInheritExecutor_withCheckedContinuation<A>(function:_:));
}

uint64_t withCheckedContinuation<A>(function:_:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*v0 + 16);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 24));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t partial apply for closure #1 in _unsafeInheritExecutor_withCheckedContinuation<A>(function:_:)(uint64_t a1)
{
  _QWORD *v1;
  void (*v3)(_QWORD **);
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v8;

  v3 = (void (*)(_QWORD **))v1[3];
  v5 = v1[5];
  v4 = v1[6];
  type metadata accessor for CheckedContinuationCanary();
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = a1;
  v6[3] = v5;
  v6[4] = v4;
  swift_bridgeObjectRetain();
  v8 = v6;
  v3(&v8);
  return swift_release();
}

uint64_t _unsafeInheritExecutor_withUnsafeContinuation<A>(_:)(uint64_t a1, void (*a2)(swift *))
{
  _QWORD *v2;
  swift *v4;

  v2[7] = a1;
  v2[2] = v2;
  v2[3] = _unsafeInheritExecutor_withUnsafeContinuation<A>(_:);
  v4 = swift_continuation_init(v2 + 2, 0);
  a2(v4);
  return swift_continuation_await((uint64_t)(v2 + 2));
}

uint64_t withCheckedThrowingContinuation<A>(isolation:function:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t ObjectType;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;

  v8[14] = a7;
  v8[15] = a8;
  v8[12] = a5;
  v8[13] = a6;
  v8[10] = a1;
  v8[11] = a4;
  if (a2)
  {
    ObjectType = swift_getObjectType();
    v11 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(ObjectType, a3);
    v13 = v12;
  }
  else
  {
    v11 = 0;
    v13 = 0;
  }
  return swift_task_switch(withCheckedThrowingContinuation<A>(isolation:function:_:), v11, v13);
}

uint64_t withCheckedThrowingContinuation<A>(isolation:function:_:)()
{
  _QWORD *v0;
  uint64_t v1;
  void (*v2)(_QWORD **);
  uint64_t v3;
  uint64_t v4;
  swift *v5;

  v1 = v0[14];
  v3 = v0[12];
  v2 = (void (*)(_QWORD **))v0[13];
  v4 = v0[11];
  v0[7] = v0[10];
  v0[2] = v0;
  v0[3] = withCheckedThrowingContinuation<A>(isolation:function:_:);
  v5 = swift_continuation_init(v0 + 2, 1uLL);
  closure #1 in withCheckedContinuation<A>(isolation:function:_:)((uint64_t)v5, v2, v1, v4, v3);
  return swift_continuation_await((uint64_t)(v0 + 2));
}

{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  if (*(_QWORD *)(v1 + 48))
    swift_willThrow();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t withCheckedThrowingContinuation<A>(function:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t (*v16)(uint64_t, void (*)(swift *));

  v13 = (_QWORD *)swift_task_alloc(64);
  *(_QWORD *)(v6 + 16) = v13;
  v13[2] = a6;
  v13[3] = a4;
  v13[4] = a5;
  v13[5] = a2;
  v13[6] = a3;
  v16 = (uint64_t (*)(uint64_t, void (*)(swift *)))((char *)&async function pointer to _unsafeInheritExecutor_withUnsafeThrowingContinuation<A>(_:)
                                                                      + async function pointer to _unsafeInheritExecutor_withUnsafeThrowingContinuation<A>(_:));
  v14 = (_QWORD *)swift_task_alloc(unk_1EE06A0FC);
  *(_QWORD *)(v6 + 24) = v14;
  *v14 = v6;
  v14[1] = withCheckedThrowingContinuation<A>(function:_:);
  return v16(a1, (void (*)(swift *))partial apply for closure #1 in _unsafeInheritExecutor_withCheckedContinuation<A>(function:_:));
}

uint64_t withCheckedThrowingContinuation<A>(function:_:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*v0 + 16);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 24));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t _unsafeInheritExecutor_withUnsafeThrowingContinuation<A>(_:)(uint64_t a1, void (*a2)(swift *))
{
  _QWORD *v2;
  swift *v4;

  v2[7] = a1;
  v2[2] = v2;
  v2[3] = withCheckedThrowingContinuation<A>(isolation:function:_:);
  v4 = swift_continuation_init(v2 + 2, 1uLL);
  a2(v4);
  return swift_continuation_await((uint64_t)(v2 + 2));
}

uint64_t swift_deletedAsyncMethodError()
{
  return swift_task_switch(swift_deletedAsyncMethodErrorTY0_, 0, 0);
}

uint64_t swift_deletedAsyncMethodErrorTY0_()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t Executor.enqueue(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t SerialExecutor.enqueue(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Executor.enqueue(_:)(a1, a2, *(_QWORD *)(a3 + 8));
}

{
  return Executor.enqueue(_:)(a1, a2, *(_QWORD *)(a3 + 8));
}

BOOL SerialExecutor.isSameExclusiveExecutionContext(other:)(uint64_t a1)
{
  uint64_t v1;

  return v1 == a1;
}

uint64_t _sSch7enqueueyyScJF(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Executor.enqueue(_:)(a1, a2, *(_QWORD *)(a3 + 8));
}

uint64_t SerialExecutor.asUnownedSerialExecutor()()
{
  uint64_t v0;

  return v0;
}

uint64_t UnownedSerialExecutor.executor.setter(uint64_t result, uint64_t a2)
{
  _QWORD *v2;

  *v2 = result;
  v2[1] = a2;
  return result;
}

uint64_t (*UnownedSerialExecutor.executor.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t (*UnownedTaskExecutor.executor.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

BOOL static UnownedTaskExecutor.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1 == a3 && a2 == a4;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance UnownedTaskExecutor(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

void _checkExpectedExecutor(_filenameStart:_filenameLength:_filenameIsASCII:_line:_executor:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((swift_task_isCurrentExecutor(a5, a6) & 1) == 0)
    swift_task_reportUnexpectedExecutor(a1, a2, a3 & 1, a4, a5, a6);
}

uint64_t _task_serialExecutor_isSameExclusiveExecutionContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4 + 48))(a2, a3, a4) & 1;
}

uint64_t _task_serialExecutor_checkIsolated(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 56))(a2, a3);
}

uint64_t _task_serialExecutor_getExecutorRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3);
}

uint64_t _swift_task_enqueueOnExecutor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4 + 32))(a1, a3, a4);
}

uint64_t protocol witness for SerialExecutor.asUnownedSerialExecutor() in conformance DispatchQueueShim()
{
  uint64_t v0;

  return v0;
}

BOOL protocol witness for SerialExecutor.isSameExclusiveExecutionContext(other:) in conformance DispatchQueueShim(uint64_t a1)
{
  uint64_t v1;

  return v1 == a1;
}

void protocol witness for SerialExecutor.checkIsolated() in conformance DispatchQueueShim()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(60);
  v0._countAndFlagsBits = 0xD00000000000003ALL;
  v0._object = (void *)0x800000018D5BF2D0;
  String.append(_:)(v0);
  v1._object = (void *)0x800000018D5BD4A0;
  v1._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for Executor.enqueue(_:) in conformance DispatchQueueShim(_QWORD *a1)
{
  dispatch_queue_s *v1;

  return swift_task_enqueueOnDispatchQueue(a1, v1);
}

uint64_t SerialExecutor.preconditionIsolated(_:file:line:)(uint64_t (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;

  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a8 + 40))(a7, a8);
  result = swift_task_isCurrentExecutor(v9, v10);
  if ((result & 1) == 0)
  {
    _StringGuts.grow(_:)(63);
    v12._object = (void *)0x800000018D5BEE00;
    v12._countAndFlagsBits = 0xD00000000000002FLL;
    String.append(_:)(v12);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v13._countAndFlagsBits = 0x7475636578652027;
    v13._object = (void *)0xEC000000202E726FLL;
    String.append(_:)(v13);
    v14._countAndFlagsBits = a1();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t Actor.preconditionIsolated(_:file:line:)(uint64_t (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;

  v11 = *(uint64_t (**)(uint64_t, uint64_t))(a8 + 8);
  v12 = v11(a7, a8);
  result = swift_task_isCurrentExecutor(v12, v13);
  if ((result & 1) == 0)
  {
    _StringGuts.grow(_:)(63);
    v15._object = (void *)0x800000018D5BEE00;
    v15._countAndFlagsBits = 0xD00000000000002FLL;
    String.append(_:)(v15);
    v11(a7, a8);
    _print_unlocked<A, B>(_:_:)();
    v16._countAndFlagsBits = 0x7475636578652027;
    v16._object = (void *)0xEC000000202E726FLL;
    String.append(_:)(v16);
    v17._countAndFlagsBits = a1();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t static GlobalActor.preconditionIsolated(_:file:line:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return static GlobalActor.preconditionIsolated(_:file:line:)(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)partial apply for implicit closure #1 in static GlobalActor.preconditionIsolated(_:file:line:), (void (*)(uint64_t, _BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))Actor.preconditionIsolated(_:file:line:));
}

uint64_t SerialExecutor.assertIsolated(_:file:line:)(uint64_t (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;

  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a8 + 40))(a7, a8);
  result = swift_task_isCurrentExecutor(v9, v10);
  if ((result & 1) == 0)
  {
    _StringGuts.grow(_:)(63);
    v12._object = (void *)0x800000018D5BEE00;
    v12._countAndFlagsBits = 0xD00000000000002FLL;
    String.append(_:)(v12);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v13._countAndFlagsBits = 0x7475636578652027;
    v13._object = (void *)0xEC000000202E726FLL;
    String.append(_:)(v13);
    v14._countAndFlagsBits = a1();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t Actor.assertIsolated(_:file:line:)(uint64_t (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;

  v11 = *(uint64_t (**)(uint64_t, uint64_t))(a8 + 8);
  v12 = v11(a7, a8);
  result = swift_task_isCurrentExecutor(v12, v13);
  if ((result & 1) == 0)
  {
    _StringGuts.grow(_:)(63);
    v15._object = (void *)0x800000018D5BEE00;
    v15._countAndFlagsBits = 0xD00000000000002FLL;
    String.append(_:)(v15);
    v11(a7, a8);
    _print_unlocked<A, B>(_:_:)();
    v16._countAndFlagsBits = 0x7475636578652027;
    v16._object = (void *)0xEC000000202E726FLL;
    String.append(_:)(v16);
    v17._countAndFlagsBits = a1();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t static GlobalActor.assertIsolated(_:file:line:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return static GlobalActor.preconditionIsolated(_:file:line:)(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)partial apply for implicit closure #1 in static GlobalActor.assertIsolated(_:file:line:), (void (*)(uint64_t, _BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))Actor.assertIsolated(_:file:line:));
}

uint64_t static GlobalActor.preconditionIsolated(_:file:line:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void (*a10)(uint64_t, _BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;

  (*(void (**)(uint64_t, uint64_t))(a8 + 24))(a7, a8);
  v20 = a1;
  v21 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  a10(a9, v19, a3, a4, a5, a6, AssociatedTypeWitness, AssociatedConformanceWitness);
  return swift_unknownObjectRelease();
}

uint64_t Actor.assumeIsolated<A>(_:file:line:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t result;
  char isEscapingClosureAtFileLocation;
  Swift::String v20;
  Swift::String v21;

  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(a9 + 8))(a7, a9);
  if ((swift_task_isCurrentExecutor(v14, v15) & 1) == 0)
    goto LABEL_6;
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a7;
  v16[3] = a8;
  v16[4] = a9;
  v16[5] = a1;
  v16[6] = a2;
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a7;
  v17[3] = a8;
  v17[4] = a9;
  v17[5] = partial apply for thunk for @callee_guaranteed (@guaranteed A) -> (@out A1, @error @owned Error);
  v17[6] = v16;
  swift_retain();
  partial apply for thunk for @callee_guaranteed (@guaranteed A) -> (@out A1, @error @owned Error)();
  swift_release();
  if (v9)
    return swift_release();
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
LABEL_6:
    _StringGuts.grow(_:)(66);
    v20._object = (void *)0x800000018D5BFD40;
    v20._countAndFlagsBits = 0xD00000000000003FLL;
    String.append(_:)(v20);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v21._countAndFlagsBits = 46;
    v21._object = (void *)0xE100000000000000;
    String.append(_:)(v21);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

{
  return Actor.assumeIsolated<A>(_:file:line:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t AsyncSequence.compactMap<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return AsyncSequence.compactMap<A>(_:)(a1, a2, a3, a4, a5, type metadata accessor for AsyncCompactMapSequence, a6);
}

{
  return AsyncSequence.compactMap<A>(_:)(a1, a2, a3, a4, a5, type metadata accessor for AsyncThrowingCompactMapSequence, a6);
}

uint64_t AsyncCompactMapSequence.init(_:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return AsyncCompactMapSequence.init(_:transform:)(a1, a2, a3, a4, a5, a6, type metadata accessor for AsyncCompactMapSequence, a7);
}

uint64_t (*AsyncCompactMapSequence.Iterator.baseIterator.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t AsyncCompactMapSequence.Iterator.init(_:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return AsyncCompactMapSequence.Iterator.init(_:transform:)(a1, a2, a3, a4, a5, a6, type metadata accessor for AsyncCompactMapSequence.Iterator, a7);
}

uint64_t AsyncCompactMapSequence.Iterator.next()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedConformanceWitness;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  int *v15;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v3[5] = *(_QWORD *)(a2 + 24);
  v4 = type metadata accessor for Optional();
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v3[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3[9] = AssociatedTypeWitness;
  v7 = type metadata accessor for Optional();
  v3[10] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[11] = v8;
  v3[12] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3[13] = v9;
  v3[14] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3[15] = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v3[16] = AssociatedConformanceWitness;
  v11 = *(int **)(AssociatedConformanceWitness + 32);
  v3[17] = v11;
  v12 = swift_checkMetadataState();
  v15 = (int *)((char *)v11 + *v11);
  v13 = (_QWORD *)swift_task_alloc(v11[1]);
  v3[18] = v13;
  *v13 = v3;
  v13[1] = AsyncCompactMapSequence.Iterator.next();
  return ((uint64_t (*)(_QWORD, uint64_t, _QWORD))v15)(v3[12], v12, v3[16]);
}

uint64_t AsyncCompactMapSequence.Iterator.next()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  *(_QWORD *)(*(_QWORD *)v1 + 152) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = AsyncCompactMapSequence.Iterator.next();
  else
    v3 = AsyncCompactMapSequence.Iterator.next();
  return swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  int **v11;
  int *v12;
  uint64_t v13;
  _QWORD *v14;
  int *v15;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 72);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    v4 = *(_QWORD *)(v0 + 40);
    v5 = *(_QWORD *)(v0 + 16);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(v1, *(_QWORD *)(v0 + 80));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v5, 1, 1, v4);
    v6 = *(_QWORD *)(v0 + 96);
    v7 = *(_QWORD *)(v0 + 64);
    swift_task_dealloc(*(_QWORD *)(v0 + 112));
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 24);
    v9 = *(_QWORD *)(v0 + 32);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 112), v1, v3);
    v11 = (int **)(v9 + *(int *)(v10 + 44));
    v12 = *v11;
    *(_QWORD *)(v0 + 160) = v11[1];
    v13 = v12[1];
    v15 = (int *)((char *)v12 + *v12);
    swift_retain();
    v14 = (_QWORD *)swift_task_alloc(v13);
    *(_QWORD *)(v0 + 168) = v14;
    *v14 = v0;
    v14[1] = AsyncCompactMapSequence.Iterator.next();
    return ((uint64_t (*)(_QWORD, _QWORD))v15)(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 112));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 104);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 72);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 168));
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch(AsyncCompactMapSequence.Iterator.next(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(v1, *(_QWORD *)(v0 + 48));
    v4 = *(int **)(v0 + 136);
    v5 = swift_checkMetadataState();
    v11 = (int *)((char *)v4 + *v4);
    v6 = (_QWORD *)swift_task_alloc(v4[1]);
    *(_QWORD *)(v0 + 144) = v6;
    *v6 = v0;
    v6[1] = AsyncCompactMapSequence.Iterator.next();
    return ((uint64_t (*)(_QWORD, uint64_t, _QWORD))v11)(*(_QWORD *)(v0 + 96), v5, *(_QWORD *)(v0 + 128));
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 16);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v8, v1, v2);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
    v9 = *(_QWORD *)(v0 + 96);
    v10 = *(_QWORD *)(v0 + 64);
    swift_task_dealloc(*(_QWORD *)(v0 + 112));
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _ss23AsyncCompactMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  int *v16;
  uint64_t v17;
  _QWORD *v18;
  int *v20;

  v6[6] = v5;
  v6[7] = a5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  v6[8] = *(_QWORD *)(a4 + 24);
  v7 = type metadata accessor for Optional();
  v6[9] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[10] = v8;
  v6[11] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[12] = AssociatedTypeWitness;
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6[13] = v10;
  v6[14] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = swift_getAssociatedTypeWitness();
  v6[15] = v11;
  v12 = type metadata accessor for Optional();
  v6[16] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v6[17] = v13;
  v6[18] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v11 - 8);
  v6[19] = v14;
  v6[20] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6[21] = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v6[22] = AssociatedConformanceWitness;
  v16 = *(int **)(AssociatedConformanceWitness + 40);
  v6[23] = v16;
  v17 = swift_checkMetadataState();
  v20 = (int *)((char *)v16 + *v16);
  v18 = (_QWORD *)swift_task_alloc(v16[1]);
  v6[24] = v18;
  *v18 = v6;
  v18[1] = _ss23AsyncCompactMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFTQ0_;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD))v20)(v6[18], v6[3], v6[4], v6[14], v17, v6[22]);
}

uint64_t _ss23AsyncCompactMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFTQ0_()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)();
  unsigned __int8 *v14;

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 192));
  v3 = v2[3];
  if (v0)
  {
    if (v3)
    {
      v4 = v2[4];
      ObjectType = swift_getObjectType();
      v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(ObjectType, v4);
      v8 = v7;
    }
    else
    {
      v6 = 0;
      v8 = 0;
    }
    v13 = _ss23AsyncCompactMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFTY4_;
    v14 = (unsigned __int8 *)v6;
  }
  else
  {
    if (v3)
    {
      v9 = v2[4];
      v10 = swift_getObjectType();
      v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v9);
      v8 = v12;
    }
    else
    {
      v11 = 0;
      v8 = 0;
    }
    v2[25] = v11;
    v2[26] = v8;
    v13 = _ss23AsyncCompactMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFTY1_;
    v14 = (unsigned __int8 *)v11;
  }
  return swift_task_switch(v13, v14, v8);
}

uint64_t _ss23AsyncCompactMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFTY1_()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  int **v12;
  int *v13;
  uint64_t v14;
  _QWORD *v15;
  int *v16;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 120);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    v4 = *(_QWORD *)(v0 + 64);
    v5 = *(_QWORD *)(v0 + 16);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 136) + 8))(v1, *(_QWORD *)(v0 + 128));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v5, 1, 1, v4);
    v6 = *(_QWORD *)(v0 + 144);
    v7 = *(_QWORD *)(v0 + 112);
    v8 = *(_QWORD *)(v0 + 88);
    swift_task_dealloc(*(_QWORD *)(v0 + 160));
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 40);
    v10 = *(_QWORD *)(v0 + 48);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 160), v1, v3);
    v12 = (int **)(v10 + *(int *)(v11 + 44));
    v13 = *v12;
    *(_QWORD *)(v0 + 216) = v12[1];
    v14 = v13[1];
    v16 = (int *)((char *)v13 + *v13);
    swift_retain();
    v15 = (_QWORD *)swift_task_alloc(v14);
    *(_QWORD *)(v0 + 224) = v15;
    *v15 = v0;
    v15[1] = _ss23AsyncCompactMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFTQ2_;
    return ((uint64_t (*)(_QWORD, _QWORD))v16)(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 160));
  }
}

uint64_t _ss23AsyncCompactMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFTQ2_()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *v0;
  v3 = *(_QWORD *)(*v0 + 152);
  v2 = *(_QWORD *)(*v0 + 160);
  v4 = *(_QWORD *)(*v0 + 120);
  swift_task_dealloc(*(_QWORD *)(*v0 + 224));
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return swift_task_switch(_ss23AsyncCompactMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFTY3_, *(unsigned __int8 **)(v1 + 200), *(_QWORD *)(v1 + 208));
}

uint64_t _ss23AsyncCompactMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFTY3_()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(v1, *(_QWORD *)(v0 + 72));
    v4 = *(int **)(v0 + 184);
    v5 = swift_checkMetadataState();
    v12 = (int *)((char *)v4 + *v4);
    v6 = (_QWORD *)swift_task_alloc(v4[1]);
    *(_QWORD *)(v0 + 192) = v6;
    *v6 = v0;
    v6[1] = _ss23AsyncCompactMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFTQ0_;
    return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD))v12)(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 112), v5, *(_QWORD *)(v0 + 176));
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 16);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v8, v1, v2);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
    v9 = *(_QWORD *)(v0 + 144);
    v10 = *(_QWORD *)(v0 + 112);
    v11 = *(_QWORD *)(v0 + 88);
    swift_task_dealloc(*(_QWORD *)(v0 + 160));
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t _ss23AsyncCompactMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFTY4_()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 88);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 104) + 32))(*(_QWORD *)(v0 + 56), v3, *(_QWORD *)(v0 + 96));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCompactMapSequence<A, B>.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1EE06A10C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCompactMapSequence<A, B>.Iterator;
  return AsyncCompactMapSequence.Iterator.next()(a1, a2);
}

uint64_t _ss23AsyncCompactMapSequenceV8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5[2] = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[3] = AssociatedTypeWitness;
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5[4] = v11;
  v12 = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5[5] = v12;
  v13 = (_QWORD *)swift_task_alloc(dword_1EE06A114);
  v5[6] = v13;
  *v13 = v5;
  v13[1] = _ss23AsyncCompactMapSequenceV8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return _ss23AsyncCompactMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKF(a1, a2, a3, a5, v12);
}

uint64_t AsyncCompactMapSequence.makeAsyncIterator()(uint64_t a1)
{
  return AsyncCompactMapSequence.makeAsyncIterator()(a1, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))AsyncCompactMapSequence.Iterator.init(_:transform:));
}

uint64_t AsyncSequence.dropFirst(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t result;

  if (a1 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v5 = v4;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a4, v5, a2);
    result = type metadata accessor for AsyncDropFirstSequence(0, a2, a3, v10);
    *(_QWORD *)(a4 + *(int *)(result + 36)) = a1;
  }
  return result;
}

uint64_t AsyncDropFirstSequence.init(_:dropping:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return AsyncDropFirstSequence.init(_:dropping:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AsyncDropFirstSequence, a5);
}

uint64_t (*AsyncDropFirstSequence.Iterator.baseIterator.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t (*AsyncDropFirstSequence.Iterator.count.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t AsyncDropFirstSequence.Iterator.init(_:count:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return AsyncDropFirstSequence.Iterator.init(_:count:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AsyncDropFirstSequence.Iterator, a5);
}

uint64_t AsyncDropFirstSequence.Iterator.next()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v3[5] = *(_QWORD *)(a2 + 24);
  v3[6] = *(_QWORD *)(a2 + 16);
  v3[7] = swift_getAssociatedTypeWitness();
  v4 = type metadata accessor for Optional();
  v3[8] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[9] = v5;
  v3[10] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(AsyncDropFirstSequence.Iterator.next(), 0, 0);
}

uint64_t AsyncDropFirstSequence.Iterator.next()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedConformanceWitness;
  int *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t);

  v1 = v0[4];
  v2 = *(int *)(v0[3] + 36);
  v3 = *(_QWORD *)(v1 + v2);
  if (v3 < 1)
  {
    *(_QWORD *)(v1 + v2) = 0;
    swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v12 = *(int **)(AssociatedConformanceWitness + 32);
    v13 = swift_checkMetadataState();
    v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v12 + *v12);
    v14 = (_QWORD *)swift_task_alloc(v12[1]);
    v0[17] = v14;
    *v14 = v0;
    v14[1] = AsyncDropFirstSequence.Iterator.next();
    v9 = v0[2];
    v10 = v13;
    v8 = AssociatedConformanceWitness;
  }
  else
  {
    v0[11] = swift_getAssociatedTypeWitness();
    v4 = swift_getAssociatedConformanceWitness();
    v0[12] = v4;
    v5 = *(int **)(v4 + 32);
    v0[13] = v5;
    v0[14] = v3;
    v6 = swift_checkMetadataState();
    v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v5 + *v5);
    v7 = (_QWORD *)swift_task_alloc(v5[1]);
    v0[15] = v7;
    *v7 = v0;
    v7[1] = AsyncDropFirstSequence.Iterator.next();
    v8 = v0[12];
    v9 = v0[10];
    v10 = v6;
  }
  return v16(v9, v10, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  *(_QWORD *)(*(_QWORD *)v1 + 128) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = AsyncDropFirstSequence.Iterator.next();
  else
    v3 = AsyncDropFirstSequence.Iterator.next();
  return swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  int *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v5 = *(_QWORD *)(v0 + 24);
    v4 = *(_QWORD *)(v0 + 32);
    v6 = *(_QWORD *)(v0 + 16);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(v1, *(_QWORD *)(v0 + 64));
    *(_QWORD *)(v4 + *(int *)(v5 + 36)) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v6, 1, 1, v2);
    swift_task_dealloc(*(_QWORD *)(v0 + 80));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 112);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(v1, *(_QWORD *)(v0 + 64));
    if (v8 <= 1)
    {
      *(_QWORD *)(*(_QWORD *)(v0 + 32) + *(int *)(*(_QWORD *)(v0 + 24) + 36)) = 0;
      swift_getAssociatedTypeWitness();
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v16 = *(int **)(AssociatedConformanceWitness + 32);
      v17 = swift_checkMetadataState();
      v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v16 + *v16);
      v18 = (_QWORD *)swift_task_alloc(v16[1]);
      *(_QWORD *)(v0 + 136) = v18;
      *v18 = v0;
      v18[1] = AsyncDropFirstSequence.Iterator.next();
      v13 = *(_QWORD *)(v0 + 16);
      v14 = v17;
      v12 = AssociatedConformanceWitness;
    }
    else
    {
      *(_QWORD *)(v0 + 112) = v8 - 1;
      v9 = *(int **)(v0 + 104);
      v10 = swift_checkMetadataState();
      v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v9 + *v9);
      v11 = (_QWORD *)swift_task_alloc(v9[1]);
      *(_QWORD *)(v0 + 120) = v11;
      *v11 = v0;
      v11[1] = AsyncDropFirstSequence.Iterator.next();
      v12 = *(_QWORD *)(v0 + 96);
      v13 = *(_QWORD *)(v0 + 80);
      v14 = v10;
    }
    return v19(v13, v14, v12);
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *v0;
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 136));
  swift_task_dealloc(*(_QWORD *)(v1 + 80));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _ss22AsyncDropFirstSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;

  v6[6] = v5;
  v6[7] = a5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  v6[8] = *(_QWORD *)(a4 + 24);
  v6[9] = *(_QWORD *)(a4 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[10] = AssociatedTypeWitness;
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6[11] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[12] = swift_task_alloc(v11);
  v6[13] = swift_task_alloc(v11);
  v6[14] = swift_getAssociatedTypeWitness();
  v12 = type metadata accessor for Optional();
  v6[15] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v6[16] = v13;
  v6[17] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    ObjectType = swift_getObjectType();
    v15 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(ObjectType, a3);
    v17 = v16;
  }
  else
  {
    v15 = 0;
    v17 = 0;
  }
  v6[18] = v15;
  v6[19] = v17;
  return swift_task_switch(_ss22AsyncDropFirstSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY0_, v15, v17);
}

uint64_t _ss22AsyncDropFirstSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY0_()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedConformanceWitness;
  int *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = v0[6];
  v2 = *(int *)(v0[5] + 36);
  v3 = *(_QWORD *)(v1 + v2);
  if (v3 < 1)
  {
    *(_QWORD *)(v1 + v2) = 0;
    swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v15 = *(int **)(AssociatedConformanceWitness + 40);
    v16 = swift_checkMetadataState();
    v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v15 + *v15);
    v17 = (_QWORD *)swift_task_alloc(v15[1]);
    v0[25] = v17;
    *v17 = v0;
    v17[1] = _ss22AsyncDropFirstSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ3_;
    v10 = v0[12];
    v11 = v0[3];
    v12 = v0[4];
    v9 = v0[2];
    v13 = v16;
    v8 = AssociatedConformanceWitness;
  }
  else
  {
    v0[20] = swift_getAssociatedTypeWitness();
    v4 = swift_getAssociatedConformanceWitness();
    v0[21] = v4;
    v5 = *(int **)(v4 + 40);
    v0[22] = v5;
    v0[23] = v3;
    v6 = swift_checkMetadataState();
    v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v5 + *v5);
    v7 = (_QWORD *)swift_task_alloc(v5[1]);
    v0[24] = v7;
    *v7 = v0;
    v7[1] = _ss22AsyncDropFirstSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ1_;
    v8 = v0[21];
    v9 = v0[17];
    v10 = v0[13];
    v11 = v0[3];
    v12 = v0[4];
    v13 = v6;
  }
  return v19(v9, v11, v12, v10, v13, v8);
}

uint64_t _ss22AsyncDropFirstSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ1_()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 192));
  if (v0)
    v3 = _ss22AsyncDropFirstSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY4_;
  else
    v3 = _ss22AsyncDropFirstSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY2_;
  return swift_task_switch(v3, *(unsigned __int8 **)(v2 + 144), *(_QWORD *)(v2 + 152));
}

uint64_t _ss22AsyncDropFirstSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY2_()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t AssociatedConformanceWitness;
  int *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t (*v24)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v5 = *(_QWORD *)(v0 + 40);
    v4 = *(_QWORD *)(v0 + 48);
    v6 = *(_QWORD *)(v0 + 16);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(v1, *(_QWORD *)(v0 + 120));
    *(_QWORD *)(v4 + *(int *)(v5 + 36)) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v6, 1, 1, v2);
    v7 = *(_QWORD *)(v0 + 96);
    v8 = *(_QWORD *)(v0 + 104);
    swift_task_dealloc(*(_QWORD *)(v0 + 136));
    swift_task_dealloc(v8);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 184);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(v1, *(_QWORD *)(v0 + 120));
    if (v10 <= 1)
    {
      *(_QWORD *)(*(_QWORD *)(v0 + 48) + *(int *)(*(_QWORD *)(v0 + 40) + 36)) = 0;
      swift_getAssociatedTypeWitness();
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v21 = *(int **)(AssociatedConformanceWitness + 40);
      v22 = swift_checkMetadataState();
      v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v21 + *v21);
      v23 = (_QWORD *)swift_task_alloc(v21[1]);
      *(_QWORD *)(v0 + 200) = v23;
      *v23 = v0;
      v23[1] = _ss22AsyncDropFirstSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ3_;
      v16 = *(_QWORD *)(v0 + 96);
      v17 = *(_QWORD *)(v0 + 24);
      v18 = *(_QWORD *)(v0 + 32);
      v15 = *(_QWORD *)(v0 + 16);
      v19 = v22;
      v14 = AssociatedConformanceWitness;
    }
    else
    {
      *(_QWORD *)(v0 + 184) = v10 - 1;
      v11 = *(int **)(v0 + 176);
      v12 = swift_checkMetadataState();
      v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v11 + *v11);
      v13 = (_QWORD *)swift_task_alloc(v11[1]);
      *(_QWORD *)(v0 + 192) = v13;
      *v13 = v0;
      v13[1] = _ss22AsyncDropFirstSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ1_;
      v14 = *(_QWORD *)(v0 + 168);
      v15 = *(_QWORD *)(v0 + 136);
      v16 = *(_QWORD *)(v0 + 104);
      v17 = *(_QWORD *)(v0 + 24);
      v18 = *(_QWORD *)(v0 + 32);
      v19 = v12;
    }
    return v24(v15, v17, v18, v16, v19, v14);
  }
}

uint64_t _ss22AsyncDropFirstSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ3_()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 200);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (v0)
    return swift_task_switch(_ss22AsyncDropFirstSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY5_, *(unsigned __int8 **)(v2 + 144), *(_QWORD *)(v2 + 152));
  v6 = *(_QWORD *)(v2 + 136);
  v9 = v2 + 96;
  v7 = *(_QWORD *)(v2 + 96);
  v8 = *(_QWORD *)(v9 + 8);
  swift_task_dealloc(v6);
  swift_task_dealloc(v8);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t _ss22AsyncDropFirstSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY4_()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 32))(*(_QWORD *)(v0 + 56), v2, *(_QWORD *)(v0 + 80));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _ss22AsyncDropFirstSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY5_()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 104);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 32))(*(_QWORD *)(v0 + 56), v2, *(_QWORD *)(v0 + 80));
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncDropFirstSequence<A>.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1EE06A11C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCompactMapSequence<A, B>.Iterator;
  return AsyncDropFirstSequence.Iterator.next()(a1, a2);
}

uint64_t _ss22AsyncDropFirstSequenceV8IteratorVyx_GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5[2] = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[3] = AssociatedTypeWitness;
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5[4] = v11;
  v12 = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5[5] = v12;
  v13 = (_QWORD *)swift_task_alloc(dword_1EE06A124);
  v5[6] = v13;
  *v13 = v5;
  v13[1] = _ss23AsyncCompactMapSequenceV8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return _ss22AsyncDropFirstSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF(a1, a2, a3, a5, v12);
}

uint64_t AsyncDropFirstSequence.makeAsyncIterator()(uint64_t a1)
{
  return AsyncDropFirstSequence.makeAsyncIterator()(a1, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))AsyncDropFirstSequence.Iterator.init(_:count:));
}

uint64_t AsyncDropFirstSequence.dropFirst(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;

  v4 = v3;
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v10 & 0x8000000000000000) == 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v4, v8);
    v13 = *(_QWORD *)(v4 + *(int *)(a2 + 36));
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(v4, a2);
    v14 = __OFADD__(v13, a1);
    v15 = v13 + a1;
    if (!v14)
    {
      v16 = *(_QWORD *)(a2 + 24);
      (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a3, v12, v8);
      result = type metadata accessor for AsyncDropFirstSequence(0, v8, v16, v17);
      *(_QWORD *)(a3 + *(int *)(result + 36)) = v15;
      return result;
    }
    __break(1u);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t AsyncSequence.drop(while:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return AsyncSequence.drop(while:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AsyncDropWhileSequence, a5);
}

{
  return AsyncSequence.drop(while:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AsyncThrowingDropWhileSequence, a5);
}

uint64_t AsyncDropWhileSequence.init(_:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return AsyncDropWhileSequence.init(_:predicate:)(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AsyncDropWhileSequence, a6);
}

uint64_t (*AsyncDropWhileSequence.Iterator.baseIterator.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t key path getter for AsyncDropWhileSequence.Iterator.predicate : <A>AsyncDropWhileSequence<A>.Iterator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;

  v6 = *(_QWORD *)(a3 + a2 - 16);
  v7 = *(_QWORD *)(a3 + a2 - 8);
  v8 = (uint64_t *)(a1 + *(int *)(type metadata accessor for AsyncDropWhileSequence.Iterator(0, v6, v7, a4) + 36));
  v9 = *v8;
  v10 = v8[1];
  if (*v8)
  {
    v11 = (_QWORD *)swift_allocObject();
    v11[2] = v6;
    v11[3] = v7;
    v11[4] = v9;
    v11[5] = v10;
    v12 = &async function pointer to partial apply for thunk for @escaping @callee_guaranteed @async (@in_guaranteed A.AsyncSequence.Element) -> (@unowned Bool);
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  *a5 = v12;
  a5[1] = v11;
  return _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOy(v9);
}

uint64_t thunk for @escaping @callee_guaranteed @async (@in_guaranteed A.AsyncSequence.Element) -> (@unowned Bool)(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  *(_QWORD *)(v3 + 16) = a1;
  v7 = (uint64_t (*)(uint64_t))((char *)a3 + *a3);
  v5 = (_QWORD *)swift_task_alloc(a3[1]);
  *(_QWORD *)(v3 + 24) = v5;
  *v5 = v3;
  v5[1] = thunk for @escaping @callee_guaranteed @async (@in_guaranteed A.AsyncSequence.Element) -> (@unowned Bool);
  return v7(a2);
}

uint64_t thunk for @escaping @callee_guaranteed @async (@in_guaranteed A.AsyncSequence.Element) -> (@unowned Bool)(char a1)
{
  uint64_t *v1;
  _BYTE *v3;
  uint64_t v5;

  v3 = *(_BYTE **)(*v1 + 16);
  v5 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 24));
  *v3 = a1;
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t key path setter for AsyncDropWhileSequence.Iterator.predicate : <A>AsyncDropWhileSequence<A>.Iterator(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t result;

  v5 = *(_QWORD *)(a4 + a3 - 16);
  v6 = *(_QWORD *)(a4 + a3 - 8);
  v7 = *a1;
  v8 = a1[1];
  if (*a1)
  {
    v9 = (_QWORD *)swift_allocObject();
    v9[2] = v5;
    v9[3] = v6;
    v9[4] = v7;
    v9[5] = v8;
    v10 = &async function pointer to partial apply for thunk for @escaping @callee_guaranteed @async (@in_guaranteed A.AsyncSequence.Element) -> (@out Bool);
  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  v11 = (uint64_t *)(a2 + *(int *)(type metadata accessor for AsyncDropWhileSequence.Iterator(0, v5, v6, a4) + 36));
  v12 = *v11;
  _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOy(v7);
  result = _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe(v12);
  *v11 = (uint64_t)v10;
  v11[1] = (uint64_t)v9;
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed @async (@in_guaranteed A.AsyncSequence.Element) -> (@out Bool)(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t);

  v6 = (uint64_t (*)(uint64_t, uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = thunk for @escaping @callee_guaranteed @async (@in_guaranteed A.AsyncSequence.Element) -> (@out Bool);
  return v6(v2 + 24, a1);
}

uint64_t thunk for @escaping @callee_guaranteed @async (@in_guaranteed A.AsyncSequence.Element) -> (@out Bool)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *v0;
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(_QWORD))(v3 + 8))(*(unsigned __int8 *)(v1 + 24));
}

uint64_t AsyncDropWhileSequence.Iterator.predicate.getter(uint64_t a1)
{
  uint64_t v1;

  v1 = specialized AsyncFilterSequence.isIncluded.getter(a1);
  _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOy(v1);
  return v1;
}

uint64_t AsyncDropWhileSequence.Iterator.predicate.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t result;

  v6 = (uint64_t *)(v3 + *(int *)(a3 + 36));
  result = _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe(*v6);
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*AsyncDropWhileSequence.Iterator.predicate.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t AsyncDropWhileSequence.Iterator.init(_:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  _QWORD *v10;
  uint64_t AssociatedTypeWitness;
  uint64_t result;

  v10 = (_QWORD *)(a6 + *(int *)(type metadata accessor for AsyncDropWhileSequence.Iterator(0, a4, a5, a4) + 36));
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a6, a1, AssociatedTypeWitness);
  *v10 = a2;
  v10[1] = a3;
  return result;
}

uint64_t AsyncDropWhileSequence.Iterator.next()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v3[5] = *(_QWORD *)(a2 + 24);
  v3[6] = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3[7] = AssociatedTypeWitness;
  v5 = type metadata accessor for Optional();
  v3[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[9] = v6;
  v3[10] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3[11] = v7;
  v3[12] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(AsyncDropWhileSequence.Iterator.next(), 0, 0);
}

uint64_t AsyncDropWhileSequence.Iterator.next()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedConformanceWitness;
  int *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int *v9;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);

  v1 = v0[4];
  v2 = *(int *)(v0[3] + 36);
  v3 = *(_QWORD *)(v1 + v2);
  if (v3)
  {
    v0[13] = v3;
    v0[14] = *(_QWORD *)(v1 + v2 + 8);
    swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v5 = *(int **)(AssociatedConformanceWitness + 32);
    _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOy(v3);
    v6 = swift_checkMetadataState();
    v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v5 + *v5);
    v7 = (_QWORD *)swift_task_alloc(v5[1]);
    v0[15] = v7;
    *v7 = v0;
    v7[1] = AsyncDropWhileSequence.Iterator.next();
    v8 = v0[10];
  }
  else
  {
    swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v9 = *(int **)(AssociatedConformanceWitness + 32);
    v6 = swift_checkMetadataState();
    v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v9 + *v9);
    v10 = (_QWORD *)swift_task_alloc(v9[1]);
    v0[19] = v10;
    *v10 = v0;
    v10[1] = AsyncDropWhileSequence.Iterator.next();
    v8 = v0[2];
  }
  return v12(v8, v6, AssociatedConformanceWitness);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 120);
  *(_QWORD *)(*v1 + 128) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe(*(_QWORD *)(v2 + 104));
    v4 = AsyncDropWhileSequence.Iterator.next();
  }
  else
  {
    v4 = AsyncDropWhileSequence.Iterator.next();
  }
  return swift_task_switch(v4, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  _QWORD *v11;
  uint64_t (*v12)(_QWORD);

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 56);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    v5 = *(_QWORD *)(v0 + 64);
    v4 = *(_QWORD *)(v0 + 72);
    _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe(*(_QWORD *)(v0 + 104));
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v5);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 56))(*(_QWORD *)(v0 + 16), 1, 1, *(_QWORD *)(v0 + 56));
    v6 = *(_QWORD *)(v0 + 80);
    swift_task_dealloc(*(_QWORD *)(v0 + 96));
    swift_task_dealloc(v6);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v8 = *(int **)(v0 + 104);
    v9 = *(_QWORD *)(v0 + 96);
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    *(_QWORD *)(v0 + 136) = v10;
    v10(v9, v1, v3);
    v12 = (uint64_t (*)(_QWORD))((char *)v8 + *v8);
    v11 = (_QWORD *)swift_task_alloc(v8[1]);
    *(_QWORD *)(v0 + 144) = v11;
    *v11 = v0;
    v11[1] = AsyncDropWhileSequence.Iterator.next();
    return v12(*(_QWORD *)(v0 + 96));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedConformanceWitness;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int *v17;
  _QWORD *v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  if ((*(_BYTE *)(v0 + 160) & 1) != 0)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 56));
    v4 = *(int *)(v3 + 36);
    v5 = *(_QWORD *)(v2 + v4);
    if (v5)
    {
      *(_QWORD *)(v0 + 104) = v5;
      *(_QWORD *)(v0 + 112) = *(_QWORD *)(*(_QWORD *)(v0 + 32) + v4 + 8);
      swift_getAssociatedTypeWitness();
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v7 = *(int **)(AssociatedConformanceWitness + 32);
      _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOy(v5);
      v8 = swift_checkMetadataState();
      v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v7 + *v7);
      v9 = (_QWORD *)swift_task_alloc(v7[1]);
      *(_QWORD *)(v0 + 120) = v9;
      *v9 = v0;
      v9[1] = AsyncDropWhileSequence.Iterator.next();
      v10 = *(_QWORD *)(v0 + 80);
    }
    else
    {
      swift_getAssociatedTypeWitness();
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v17 = *(int **)(AssociatedConformanceWitness + 32);
      v8 = swift_checkMetadataState();
      v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v17 + *v17);
      v18 = (_QWORD *)swift_task_alloc(v17[1]);
      *(_QWORD *)(v0 + 152) = v18;
      *v18 = v0;
      v18[1] = AsyncDropWhileSequence.Iterator.next();
      v10 = *(_QWORD *)(v0 + 16);
    }
    return v19(v10, v8, AssociatedConformanceWitness);
  }
  else
  {
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 136);
    v12 = *(_QWORD *)(v0 + 96);
    v13 = *(_QWORD *)(v0 + 16);
    v14 = (uint64_t *)(v2 + *(int *)(v3 + 36));
    _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe(*v14);
    *v14 = 0;
    v14[1] = 0;
    v11(v13, v12, v1);
    (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 56))(*(_QWORD *)(v0 + 16), 0, 1, *(_QWORD *)(v0 + 56));
    v15 = *(_QWORD *)(v0 + 80);
    swift_task_dealloc(*(_QWORD *)(v0 + 96));
    swift_task_dealloc(v15);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = *v0;
  v5 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 152));
  v2 = *(_QWORD *)(v1 + 96);
  v3 = *(_QWORD *)(v1 + 80);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AsyncDropWhileSequence.Iterator.next()(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  *(_BYTE *)(*(_QWORD *)v1 + 160) = a1;
  swift_task_dealloc(v2);
  _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe(v3);
  return swift_task_switch(AsyncDropWhileSequence.Iterator.next(), 0, 0);
}

uint64_t _ss22AsyncDropWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;

  v6[6] = v5;
  v6[7] = a5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  v6[8] = *(_QWORD *)(a4 + 24);
  v6[9] = *(_QWORD *)(a4 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[10] = AssociatedTypeWitness;
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6[11] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[12] = swift_task_alloc(v11);
  v6[13] = swift_task_alloc(v11);
  v12 = swift_getAssociatedTypeWitness();
  v6[14] = v12;
  v13 = type metadata accessor for Optional();
  v6[15] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v6[16] = v14;
  v6[17] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(v12 - 8);
  v6[18] = v15;
  v6[19] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    ObjectType = swift_getObjectType();
    v17 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(ObjectType, a3);
    v19 = v18;
  }
  else
  {
    v17 = 0;
    v19 = 0;
  }
  v6[20] = v17;
  v6[21] = v19;
  return swift_task_switch(_ss22AsyncDropWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY0_, v17, v19);
}

uint64_t _ss22AsyncDropWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY0_()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedConformanceWitness;
  int *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  _QWORD *v13;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = v0[6];
  v2 = *(int *)(v0[5] + 36);
  v3 = *(_QWORD *)(v1 + v2);
  if (v3)
  {
    v0[22] = v3;
    v0[23] = *(_QWORD *)(v1 + v2 + 8);
    swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v5 = *(int **)(AssociatedConformanceWitness + 40);
    _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOy(v3);
    v6 = swift_checkMetadataState();
    v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v5 + *v5);
    v7 = (_QWORD *)swift_task_alloc(v5[1]);
    v0[24] = v7;
    *v7 = v0;
    v7[1] = _ss22AsyncDropWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ1_;
    v8 = v0[17];
    v9 = v0[13];
    v10 = v0[3];
    v11 = v0[4];
  }
  else
  {
    swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v12 = *(int **)(AssociatedConformanceWitness + 40);
    v6 = swift_checkMetadataState();
    v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v12 + *v12);
    v13 = (_QWORD *)swift_task_alloc(v12[1]);
    v0[27] = v13;
    *v13 = v0;
    v13[1] = _ss22AsyncDropWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ5_;
    v9 = v0[12];
    v10 = v0[3];
    v11 = v0[4];
    v8 = v0[2];
  }
  return v15(v8, v10, v11, v9, v6, AssociatedConformanceWitness);
}

uint64_t _ss22AsyncDropWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ1_()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 192));
  if (v0)
  {
    _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe(v2[22]);
    v3 = (unsigned __int8 *)v2[20];
    v4 = v2[21];
    v5 = _ss22AsyncDropWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY6_;
  }
  else
  {
    v3 = (unsigned __int8 *)v2[20];
    v4 = v2[21];
    v5 = _ss22AsyncDropWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY2_;
  }
  return swift_task_switch(v5, v3, v4);
}

uint64_t _ss22AsyncDropWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY2_()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  _QWORD *v13;
  uint64_t (*v14)(_QWORD);

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 112);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    v5 = *(_QWORD *)(v0 + 120);
    v4 = *(_QWORD *)(v0 + 128);
    _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe(*(_QWORD *)(v0 + 176));
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v5);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 144) + 56))(*(_QWORD *)(v0 + 16), 1, 1, *(_QWORD *)(v0 + 112));
    v6 = *(_QWORD *)(v0 + 136);
    v8 = *(_QWORD *)(v0 + 96);
    v7 = *(_QWORD *)(v0 + 104);
    swift_task_dealloc(*(_QWORD *)(v0 + 152));
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v10 = *(int **)(v0 + 176);
    v11 = *(_QWORD *)(v0 + 152);
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    *(_QWORD *)(v0 + 200) = v12;
    v12(v11, v1, v3);
    v14 = (uint64_t (*)(_QWORD))((char *)v10 + *v10);
    v13 = (_QWORD *)swift_task_alloc(v10[1]);
    *(_QWORD *)(v0 + 208) = v13;
    *v13 = v0;
    v13[1] = _ss22AsyncDropWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ3_;
    return v14(*(_QWORD *)(v0 + 152));
  }
}

uint64_t _ss22AsyncDropWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ3_(char a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 208);
  v4 = *(_QWORD *)(*v1 + 176);
  *(_BYTE *)(*v1 + 224) = a1;
  swift_task_dealloc(v3);
  _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe(v4);
  return swift_task_switch(_ss22AsyncDropWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY4_, *(unsigned __int8 **)(v2 + 160), *(_QWORD *)(v2 + 168));
}

uint64_t _ss22AsyncDropWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY4_()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedConformanceWitness;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v22;
  _QWORD *v23;
  uint64_t (*v24)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  if ((*(_BYTE *)(v0 + 224) & 1) != 0)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 144) + 8))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 112));
    v4 = *(int *)(v3 + 36);
    v5 = *(_QWORD *)(v2 + v4);
    if (v5)
    {
      *(_QWORD *)(v0 + 176) = v5;
      *(_QWORD *)(v0 + 184) = *(_QWORD *)(*(_QWORD *)(v0 + 48) + v4 + 8);
      swift_getAssociatedTypeWitness();
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v7 = *(int **)(AssociatedConformanceWitness + 40);
      _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOy(v5);
      v8 = swift_checkMetadataState();
      v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v7 + *v7);
      v9 = (_QWORD *)swift_task_alloc(v7[1]);
      *(_QWORD *)(v0 + 192) = v9;
      *v9 = v0;
      v9[1] = _ss22AsyncDropWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ1_;
      v10 = *(_QWORD *)(v0 + 136);
      v11 = *(_QWORD *)(v0 + 104);
      v12 = *(_QWORD *)(v0 + 24);
      v13 = *(_QWORD *)(v0 + 32);
    }
    else
    {
      swift_getAssociatedTypeWitness();
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v22 = *(int **)(AssociatedConformanceWitness + 40);
      v8 = swift_checkMetadataState();
      v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v22 + *v22);
      v23 = (_QWORD *)swift_task_alloc(v22[1]);
      *(_QWORD *)(v0 + 216) = v23;
      *v23 = v0;
      v23[1] = _ss22AsyncDropWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ5_;
      v11 = *(_QWORD *)(v0 + 96);
      v12 = *(_QWORD *)(v0 + 24);
      v13 = *(_QWORD *)(v0 + 32);
      v10 = *(_QWORD *)(v0 + 16);
    }
    return v24(v10, v12, v13, v11, v8, AssociatedConformanceWitness);
  }
  else
  {
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 200);
    v15 = *(_QWORD *)(v0 + 152);
    v16 = *(_QWORD *)(v0 + 16);
    v17 = (uint64_t *)(v2 + *(int *)(v3 + 36));
    _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe(*v17);
    *v17 = 0;
    v17[1] = 0;
    v14(v16, v15, v1);
    (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 144) + 56))(*(_QWORD *)(v0 + 16), 0, 1, *(_QWORD *)(v0 + 112));
    v18 = *(_QWORD *)(v0 + 136);
    v20 = *(_QWORD *)(v0 + 96);
    v19 = *(_QWORD *)(v0 + 104);
    swift_task_dealloc(*(_QWORD *)(v0 + 152));
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t _ss22AsyncDropWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ5_()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 216);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (v0)
    return swift_task_switch(_ss22AsyncDropWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY7_, *(unsigned __int8 **)(v2 + 160), *(_QWORD *)(v2 + 168));
  v6 = *(_QWORD *)(v2 + 152);
  v7 = *(_QWORD *)(v2 + 136);
  v10 = v2 + 96;
  v9 = *(_QWORD *)(v2 + 96);
  v8 = *(_QWORD *)(v10 + 8);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t _ss22AsyncDropWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY6_()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 104);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 32))(*(_QWORD *)(v0 + 56), v3, *(_QWORD *)(v0 + 80));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _ss22AsyncDropWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY7_()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 104);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 32))(*(_QWORD *)(v0 + 56), v3, *(_QWORD *)(v0 + 80));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncDropWhileSequence<A>.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1EE06A12C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCompactMapSequence<A, B>.Iterator;
  return AsyncDropWhileSequence.Iterator.next()(a1, a2);
}

uint64_t _ss22AsyncDropWhileSequenceV8IteratorVyx_GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5[2] = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[3] = AssociatedTypeWitness;
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5[4] = v11;
  v12 = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5[5] = v12;
  v13 = (_QWORD *)swift_task_alloc(dword_1EE06A134);
  v5[6] = v13;
  *v13 = v5;
  v13[1] = _ss23AsyncCompactMapSequenceV8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return _ss22AsyncDropWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF(a1, a2, a3, a5, v12);
}

uint64_t AsyncDropWhileSequence.makeAsyncIterator()(uint64_t a1)
{
  return AsyncDropWhileSequence.makeAsyncIterator()(a1, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))AsyncDropWhileSequence.Iterator.init(_:predicate:));
}

uint64_t AsyncSequence.filter(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return AsyncSequence.drop(while:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AsyncFilterSequence, a5);
}

{
  return AsyncSequence.drop(while:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AsyncThrowingFilterSequence, a5);
}

uint64_t AsyncFilterSequence.init(_:isIncluded:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return AsyncDropWhileSequence.init(_:predicate:)(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AsyncFilterSequence, a6);
}

uint64_t AsyncFilterSequence.isIncluded.getter(uint64_t a1)
{
  uint64_t v1;

  v1 = specialized AsyncFilterSequence.isIncluded.getter(a1);
  swift_retain();
  return v1;
}

uint64_t (*AsyncFilterSequence.Iterator.baseIterator.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t AsyncFilterSequence.Iterator.init(_:isIncluded:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t result;
  _QWORD *v15;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a6, a1, AssociatedTypeWitness);
  result = type metadata accessor for AsyncFilterSequence.Iterator(0, a4, a5, v13);
  v15 = (_QWORD *)(a6 + *(int *)(result + 36));
  *v15 = a2;
  v15[1] = a3;
  return result;
}

uint64_t AsyncFilterSequence.Iterator.next()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedConformanceWitness;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  int *v13;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3[5] = AssociatedTypeWitness;
  v5 = type metadata accessor for Optional();
  v3[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[7] = v6;
  v3[8] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3[9] = v7;
  v3[10] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3[11] = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v3[12] = AssociatedConformanceWitness;
  v9 = *(int **)(AssociatedConformanceWitness + 32);
  v3[13] = v9;
  v10 = swift_checkMetadataState();
  v13 = (int *)((char *)v9 + *v9);
  v11 = (_QWORD *)swift_task_alloc(v9[1]);
  v3[14] = v11;
  *v11 = v3;
  v11[1] = AsyncFilterSequence.Iterator.next();
  return ((uint64_t (*)(_QWORD, uint64_t, _QWORD))v13)(v3[8], v10, v3[12]);
}

uint64_t AsyncFilterSequence.Iterator.next()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = AsyncFilterSequence.Iterator.next();
  else
    v3 = AsyncFilterSequence.Iterator.next();
  return swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  int **v11;
  int *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t (*v15)(_QWORD);

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 40);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(v1, *(_QWORD *)(v0 + 48));
    v4 = *(_QWORD *)(v0 + 80);
    v5 = *(_QWORD *)(v0 + 64);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 72) + 56))(*(_QWORD *)(v0 + 16), 1, 1, *(_QWORD *)(v0 + 40));
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 80);
    v9 = *(_QWORD *)(v0 + 24);
    v8 = *(_QWORD *)(v0 + 32);
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    *(_QWORD *)(v0 + 128) = v10;
    v10(v7, v1, v3);
    v11 = (int **)(v8 + *(int *)(v9 + 36));
    v12 = *v11;
    *(_QWORD *)(v0 + 136) = v11[1];
    v13 = v12[1];
    v15 = (uint64_t (*)(_QWORD))((char *)v12 + *v12);
    swift_retain();
    v14 = (_QWORD *)swift_task_alloc(v13);
    *(_QWORD *)(v0 + 144) = v14;
    *v14 = v0;
    v14[1] = AsyncFilterSequence.Iterator.next();
    return v15(*(_QWORD *)(v0 + 80));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v4;
  uint64_t v5;
  _QWORD *v6;
  int *v7;

  if (*(_BYTE *)(v0 + 152) == 1)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 128))(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 40));
    v1 = *(_QWORD *)(v0 + 80);
    v2 = *(_QWORD *)(v0 + 64);
    (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 72) + 56))(*(_QWORD *)(v0 + 16), 0, 1, *(_QWORD *)(v0 + 40));
    swift_task_dealloc(v1);
    swift_task_dealloc(v2);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 40));
    v4 = *(int **)(v0 + 104);
    v5 = swift_checkMetadataState();
    v7 = (int *)((char *)v4 + *v4);
    v6 = (_QWORD *)swift_task_alloc(v4[1]);
    *(_QWORD *)(v0 + 112) = v6;
    *v6 = v0;
    v6[1] = AsyncFilterSequence.Iterator.next();
    return ((uint64_t (*)(_QWORD, uint64_t, _QWORD))v7)(*(_QWORD *)(v0 + 64), v5, *(_QWORD *)(v0 + 96));
  }
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AsyncFilterSequence.Iterator.next()(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  *(_BYTE *)(*(_QWORD *)v1 + 152) = a1;
  swift_task_dealloc(v2);
  swift_release();
  return swift_task_switch(AsyncFilterSequence.Iterator.next(), 0, 0);
}

uint64_t _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedConformanceWitness;
  int *v14;
  uint64_t v15;
  _QWORD *v16;
  int *v18;

  v6[6] = v5;
  v6[7] = a5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[8] = AssociatedTypeWitness;
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6[9] = v8;
  v6[10] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = swift_getAssociatedTypeWitness();
  v6[11] = v9;
  v10 = type metadata accessor for Optional();
  v6[12] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v6[13] = v11;
  v6[14] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v9 - 8);
  v6[15] = v12;
  v6[16] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6[17] = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v6[18] = AssociatedConformanceWitness;
  v14 = *(int **)(AssociatedConformanceWitness + 40);
  v6[19] = v14;
  v15 = swift_checkMetadataState();
  v18 = (int *)((char *)v14 + *v14);
  v16 = (_QWORD *)swift_task_alloc(v14[1]);
  v6[20] = v16;
  *v16 = v6;
  v16[1] = _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ0_;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD))v18)(v6[14], v6[3], v6[4], v6[10], v15, v6[18]);
}

uint64_t _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ0_()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)();
  unsigned __int8 *v14;

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 160));
  v3 = v2[3];
  if (v0)
  {
    if (v3)
    {
      v4 = v2[4];
      ObjectType = swift_getObjectType();
      v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(ObjectType, v4);
      v8 = v7;
    }
    else
    {
      v6 = 0;
      v8 = 0;
    }
    v13 = _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY4_;
    v14 = (unsigned __int8 *)v6;
  }
  else
  {
    if (v3)
    {
      v9 = v2[4];
      v10 = swift_getObjectType();
      v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v9);
      v8 = v12;
    }
    else
    {
      v11 = 0;
      v8 = 0;
    }
    v2[21] = v11;
    v2[22] = v8;
    v13 = _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY1_;
    v14 = (unsigned __int8 *)v11;
  }
  return swift_task_switch(v13, v14, v8);
}

uint64_t _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY1_()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  int **v12;
  int *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t (*v16)(_QWORD);

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 88);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 104) + 8))(v1, *(_QWORD *)(v0 + 96));
    v4 = *(_QWORD *)(v0 + 128);
    v5 = *(_QWORD *)(v0 + 112);
    v6 = *(_QWORD *)(v0 + 80);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 120) + 56))(*(_QWORD *)(v0 + 16), 1, 1, *(_QWORD *)(v0 + 88));
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 128);
    v10 = *(_QWORD *)(v0 + 40);
    v9 = *(_QWORD *)(v0 + 48);
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    *(_QWORD *)(v0 + 184) = v11;
    v11(v8, v1, v3);
    v12 = (int **)(v9 + *(int *)(v10 + 36));
    v13 = *v12;
    *(_QWORD *)(v0 + 192) = v12[1];
    v14 = v13[1];
    v16 = (uint64_t (*)(_QWORD))((char *)v13 + *v13);
    swift_retain();
    v15 = (_QWORD *)swift_task_alloc(v14);
    *(_QWORD *)(v0 + 200) = v15;
    *v15 = v0;
    v15[1] = _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ2_;
    return v16(*(_QWORD *)(v0 + 128));
  }
}

uint64_t _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ2_(char a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 200);
  *(_BYTE *)(*v1 + 208) = a1;
  swift_task_dealloc(v3);
  swift_release();
  return swift_task_switch(_ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY3_, *(unsigned __int8 **)(v2 + 168), *(_QWORD *)(v2 + 176));
}

uint64_t _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY3_()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v5;
  uint64_t v6;
  _QWORD *v7;
  int *v8;

  if (*(_BYTE *)(v0 + 208) == 1)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 184))(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 88));
    v1 = *(_QWORD *)(v0 + 128);
    v2 = *(_QWORD *)(v0 + 112);
    v3 = *(_QWORD *)(v0 + 80);
    (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 120) + 56))(*(_QWORD *)(v0 + 16), 0, 1, *(_QWORD *)(v0 + 88));
    swift_task_dealloc(v1);
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 88));
    v5 = *(int **)(v0 + 152);
    v6 = swift_checkMetadataState();
    v8 = (int *)((char *)v5 + *v5);
    v7 = (_QWORD *)swift_task_alloc(v5[1]);
    *(_QWORD *)(v0 + 160) = v7;
    *v7 = v0;
    v7[1] = _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ0_;
    return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD))v8)(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 80), v6, *(_QWORD *)(v0 + 144));
  }
}

uint64_t _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY4_()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 80);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 72) + 32))(*(_QWORD *)(v0 + 56), v3, *(_QWORD *)(v0 + 64));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncFilterSequence<A>.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1EE06A13C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCompactMapSequence<A, B>.Iterator;
  return AsyncFilterSequence.Iterator.next()(a1, a2);
}

uint64_t _ss19AsyncFilterSequenceV8IteratorVyx_GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5[2] = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[3] = AssociatedTypeWitness;
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5[4] = v11;
  v12 = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5[5] = v12;
  v13 = (_QWORD *)swift_task_alloc(dword_1EE06A144);
  v5[6] = v13;
  *v13 = v5;
  v13[1] = _ss23AsyncCompactMapSequenceV8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF(a1, a2, a3, a5, v12);
}

uint64_t AsyncFilterSequence.makeAsyncIterator()(uint64_t a1)
{
  return AsyncDropWhileSequence.makeAsyncIterator()(a1, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))AsyncFilterSequence.Iterator.init(_:isIncluded:));
}

uint64_t AsyncDropWhileSequence.makeAsyncIterator()(uint64_t a1, uint64_t (*a2)(char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v20;

  v4 = v2;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v8 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v14 = (char *)&v20 - v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v11 + 40))(v6, v11);
  v15 = (uint64_t *)(v4 + *(int *)(a1 + 36));
  v16 = *v15;
  v17 = v15[1];
  v18 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8);
  swift_retain();
  v18(v4, a1);
  return a2(v14, v16, v17, v6, v11);
}

uint64_t AsyncSequence.flatMap<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return AsyncSequence.flatMap<A>(_:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for AsyncFlatMapSequence, a7);
}

{
  return AsyncSequence.flatMap<A>(_:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for AsyncThrowingFlatMapSequence, a7);
}

uint64_t AsyncFlatMapSequence.init(_:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  return AsyncFlatMapSequence.init(_:transform:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for AsyncFlatMapSequence, a8);
}

uint64_t (*AsyncFlatMapSequence.Iterator.baseIterator.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t AsyncFlatMapSequence.Iterator.transform.getter(uint64_t a1)
{
  uint64_t v1;

  v1 = specialized AsyncFlatMapSequence.Iterator.transform.getter(a1);
  swift_retain();
  return v1;
}

uint64_t (*AsyncFlatMapSequence.Iterator.currentIterator.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t AsyncFlatMapSequence.Iterator.finished.getter(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 60));
}

uint64_t AsyncFlatMapSequence.Iterator.finished.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + *(int *)(a2 + 60)) = result;
  return result;
}

uint64_t (*AsyncFlatMapSequence.Iterator.finished.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t AsyncFlatMapSequence.Iterator.init(_:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  return AsyncFlatMapSequence.Iterator.init(_:transform:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for AsyncFlatMapSequence.Iterator, a8);
}

uint64_t AsyncFlatMapSequence.Iterator.next()(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v5 = a2[3];
  v3[5] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[6] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[7] = swift_task_alloc(v7);
  v3[8] = swift_task_alloc(v7);
  v3[9] = a2[4];
  v3[10] = a2[2];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3[11] = AssociatedTypeWitness;
  v9 = type metadata accessor for Optional();
  v3[12] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v3[13] = v10;
  v3[14] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3[15] = v11;
  v3[16] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3[17] = a2[5];
  v12 = swift_getAssociatedTypeWitness();
  v3[18] = v12;
  v13 = type metadata accessor for Optional();
  v3[19] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v3[20] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[21] = swift_task_alloc(v15);
  v3[22] = swift_task_alloc(v15);
  v16 = *(_QWORD *)(v12 - 8);
  v3[23] = v16;
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[24] = swift_task_alloc(v17);
  v3[25] = swift_task_alloc(v17);
  v18 = swift_getAssociatedTypeWitness();
  v3[26] = v18;
  v19 = type metadata accessor for Optional();
  v3[27] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v3[28] = v20;
  v21 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[29] = swift_task_alloc(v21);
  v3[30] = swift_task_alloc(v21);
  v22 = *(_QWORD *)(v18 - 8);
  v3[31] = v22;
  v23 = (*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[32] = swift_task_alloc(v23);
  v3[33] = swift_task_alloc(v23);
  return swift_task_switch(AsyncFlatMapSequence.Iterator.next(), 0, 0);
}

uint64_t AsyncFlatMapSequence.Iterator.next()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedConformanceWitness;
  int *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  int *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t);

  if ((*(_BYTE *)(*(_QWORD *)(v0 + 32) + *(int *)(*(_QWORD *)(v0 + 24) + 60)) & 1) != 0)
  {
    v1 = *(_QWORD *)(v0 + 256);
    v2 = *(_QWORD *)(v0 + 264);
    v4 = *(_QWORD *)(v0 + 232);
    v3 = *(_QWORD *)(v0 + 240);
    v6 = *(_QWORD *)(v0 + 192);
    v5 = *(_QWORD *)(v0 + 200);
    v7 = *(_QWORD *)(v0 + 176);
    v8 = *(_QWORD *)(v0 + 168);
    v9 = *(_QWORD *)(v0 + 128);
    v26 = *(_QWORD *)(v0 + 112);
    v27 = *(_QWORD *)(v0 + 64);
    v28 = *(_QWORD *)(v0 + 56);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 184) + 56))(*(_QWORD *)(v0 + 16), 1, 1, *(_QWORD *)(v0 + 144));
    swift_task_dealloc(v2);
    swift_task_dealloc(v1);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 240);
    v12 = *(_QWORD *)(v0 + 248);
    v13 = *(_QWORD *)(v0 + 208);
    AsyncFlatMapSequence.Iterator.currentIterator.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v11, 1, v13) == 1)
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 224) + 8))(*(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 216));
      swift_getAssociatedTypeWitness();
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v15 = *(int **)(AssociatedConformanceWitness + 32);
      v16 = swift_checkMetadataState();
      v29 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v15 + *v15);
      v17 = (_QWORD *)swift_task_alloc(v15[1]);
      *(_QWORD *)(v0 + 296) = v17;
      *v17 = v0;
      v17[1] = AsyncFlatMapSequence.Iterator.next();
      v18 = *(_QWORD *)(v0 + 112);
      v19 = v16;
    }
    else
    {
      v20 = *(_QWORD *)(v0 + 264);
      v21 = *(_QWORD *)(v0 + 240);
      v22 = *(_QWORD *)(v0 + 208);
      v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 248) + 32);
      *(_QWORD *)(v0 + 272) = v23;
      v23(v20, v21, v22);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v24 = *(int **)(AssociatedConformanceWitness + 32);
      v29 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v24 + *v24);
      v25 = (_QWORD *)swift_task_alloc(v24[1]);
      *(_QWORD *)(v0 + 280) = v25;
      *v25 = v0;
      v25[1] = AsyncFlatMapSequence.Iterator.next();
      v19 = *(_QWORD *)(v0 + 208);
      v18 = *(_QWORD *)(v0 + 176);
    }
    return v29(v18, v19, AssociatedConformanceWitness);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 280);
  *(_QWORD *)(*(_QWORD *)v1 + 288) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v2[31] + 8))(v2[33], v2[26]);
    v4 = AsyncFlatMapSequence.Iterator.next();
  }
  else
  {
    v4 = AsyncFlatMapSequence.Iterator.next();
  }
  return swift_task_switch(v4, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  int *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t, uint64_t);
  int *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 144);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3);
  v5 = *(_QWORD *)(v0 + 24);
  if (v4 != 1)
  {
    v22 = *(_QWORD *)(v0 + 264);
    v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 272);
    v44 = *(_QWORD *)(v0 + 248);
    v23 = *(_QWORD *)(v0 + 232);
    v24 = *(_QWORD *)(v0 + 24);
    v26 = *(_QWORD *)(v0 + 200);
    v25 = *(_QWORD *)(v0 + 208);
    v48 = *(_QWORD *)(v0 + 16);
    v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    v27(v26, v1, v3);
    v21(v23, v22, v25);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v44 + 56))(v23, 0, 1, v25);
    AsyncFlatMapSequence.Iterator.currentIterator.setter(v23, v24);
    v27(v48, v26, v3);
    v11 = 0;
    goto LABEL_6;
  }
  v6 = *(_QWORD *)(v0 + 248);
  v7 = *(_QWORD *)(v0 + 232);
  v8 = *(_QWORD *)(v0 + 208);
  v10 = *(_QWORD *)(v0 + 152);
  v9 = *(_QWORD *)(v0 + 160);
  (*(void (**)(_QWORD, uint64_t))(v6 + 8))(*(_QWORD *)(v0 + 264), v8);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v1, v10);
  v11 = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v7, 1, 1, v8);
  AsyncFlatMapSequence.Iterator.currentIterator.setter(v7, v5);
  if ((*(_BYTE *)(*(_QWORD *)(v0 + 32) + *(int *)(*(_QWORD *)(v0 + 24) + 60)) & 1) != 0)
  {
LABEL_6:
    v28 = *(_QWORD *)(v0 + 256);
    v29 = *(_QWORD *)(v0 + 264);
    v31 = *(_QWORD *)(v0 + 232);
    v30 = *(_QWORD *)(v0 + 240);
    v33 = *(_QWORD *)(v0 + 192);
    v32 = *(_QWORD *)(v0 + 200);
    v34 = *(_QWORD *)(v0 + 176);
    v35 = *(_QWORD *)(v0 + 168);
    v43 = *(_QWORD *)(v0 + 128);
    v45 = *(_QWORD *)(v0 + 112);
    v46 = *(_QWORD *)(v0 + 64);
    v49 = *(_QWORD *)(v0 + 56);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 184) + 56))(*(_QWORD *)(v0 + 16), v11, 1, *(_QWORD *)(v0 + 144));
    swift_task_dealloc(v29);
    swift_task_dealloc(v28);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v43);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v49);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v12 = *(_QWORD *)(v0 + 240);
  v13 = *(_QWORD *)(v0 + 248);
  v14 = *(_QWORD *)(v0 + 208);
  AsyncFlatMapSequence.Iterator.currentIterator.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v12, 1, v14) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 224) + 8))(*(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 216));
    swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v16 = *(int **)(AssociatedConformanceWitness + 32);
    v17 = swift_checkMetadataState();
    v47 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v16 + *v16);
    v18 = (_QWORD *)swift_task_alloc(v16[1]);
    *(_QWORD *)(v0 + 296) = v18;
    *v18 = v0;
    v18[1] = AsyncFlatMapSequence.Iterator.next();
    v19 = *(_QWORD *)(v0 + 112);
    v20 = v17;
  }
  else
  {
    v37 = *(_QWORD *)(v0 + 264);
    v38 = *(_QWORD *)(v0 + 240);
    v39 = *(_QWORD *)(v0 + 208);
    v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 248) + 32);
    *(_QWORD *)(v0 + 272) = v40;
    v40(v37, v38, v39);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v41 = *(int **)(AssociatedConformanceWitness + 32);
    v47 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v41 + *v41);
    v42 = (_QWORD *)swift_task_alloc(v41[1]);
    *(_QWORD *)(v0 + 280) = v42;
    *v42 = v0;
    v42[1] = AsyncFlatMapSequence.Iterator.next();
    v20 = *(_QWORD *)(v0 + 208);
    v19 = *(_QWORD *)(v0 + 176);
  }
  return v47(v19, v20, AssociatedConformanceWitness);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 296);
  *(_QWORD *)(*(_QWORD *)v1 + 304) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = AsyncFlatMapSequence.Iterator.next();
  else
    v3 = AsyncFlatMapSequence.Iterator.next();
  return swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  int **v18;
  int *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 88);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    v5 = *(_QWORD *)(v0 + 24);
    v4 = *(_QWORD *)(v0 + 32);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 104) + 8))(v1, *(_QWORD *)(v0 + 96));
    *(_BYTE *)(v4 + *(int *)(v5 + 60)) = 1;
    v6 = *(_QWORD *)(v0 + 256);
    v7 = *(_QWORD *)(v0 + 264);
    v9 = *(_QWORD *)(v0 + 232);
    v8 = *(_QWORD *)(v0 + 240);
    v11 = *(_QWORD *)(v0 + 192);
    v10 = *(_QWORD *)(v0 + 200);
    v12 = *(_QWORD *)(v0 + 176);
    v13 = *(_QWORD *)(v0 + 168);
    v14 = *(_QWORD *)(v0 + 128);
    v22 = *(_QWORD *)(v0 + 112);
    v23 = *(_QWORD *)(v0 + 64);
    v24 = *(_QWORD *)(v0 + 56);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 184) + 56))(*(_QWORD *)(v0 + 16), 1, 1, *(_QWORD *)(v0 + 144));
    swift_task_dealloc(v7);
    swift_task_dealloc(v6);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v17 = *(_QWORD *)(v0 + 24);
    v16 = *(_QWORD *)(v0 + 32);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 128), v1, v3);
    v18 = (int **)(v16 + *(int *)(v17 + 52));
    v19 = *v18;
    *(_QWORD *)(v0 + 312) = v18[1];
    v20 = v19[1];
    v25 = (int *)((char *)v19 + *v19);
    swift_retain();
    v21 = (_QWORD *)swift_task_alloc(v20);
    *(_QWORD *)(v0 + 320) = v21;
    *v21 = v0;
    v21[1] = AsyncFlatMapSequence.Iterator.next();
    return ((uint64_t (*)(_QWORD, _QWORD))v25)(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 128));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 120);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 128);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 320));
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch(AsyncFlatMapSequence.Iterator.next(), 0, 0);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedConformanceWitness;
  int *v4;
  _QWORD *v5;
  int *v7;

  v1 = v0[17];
  v2 = v0[5];
  (*(void (**)(_QWORD, _QWORD, uint64_t))(v0[6] + 32))(v0[7], v0[8], v2);
  (*(void (**)(uint64_t, uint64_t))(v1 + 40))(v2, v1);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v4 = *(int **)(AssociatedConformanceWitness + 32);
  v7 = (int *)((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  v0[41] = v5;
  *v5 = v0;
  v5[1] = AsyncFlatMapSequence.Iterator.next();
  return ((uint64_t (*)(_QWORD, _QWORD, uint64_t))v7)(v0[21], v0[26], AssociatedConformanceWitness);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 328);
  *(_QWORD *)(*(_QWORD *)v1 + 336) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v2[31] + 8))(v2[32], v2[26]);
    v4 = AsyncFlatMapSequence.Iterator.next();
  }
  else
  {
    v4 = AsyncFlatMapSequence.Iterator.next();
  }
  return swift_task_switch(v4, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedConformanceWitness;
  int *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t);
  int *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;

  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 144);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v2, 1, v3);
  v6 = *(_QWORD *)(v0 + 248);
  v5 = *(_QWORD *)(v0 + 256);
  v7 = *(_QWORD *)(v0 + 232);
  v8 = *(_QWORD *)(v0 + 208);
  if (v4 != 1)
  {
    v22 = *(_QWORD *)(v0 + 192);
    v23 = *(_QWORD *)(v0 + 24);
    v44 = *(_QWORD *)(v0 + 16);
    v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32);
    v24(v22, v2, v3);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v7, v5, v8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v7, 0, 1, v8);
    AsyncFlatMapSequence.Iterator.currentIterator.setter(v7, v23);
    v24(v44, v22, v3);
    v12 = 0;
    goto LABEL_6;
  }
  v9 = *(_QWORD *)(v0 + 152);
  v10 = *(_QWORD *)(v0 + 160);
  v11 = *(_QWORD *)(v0 + 24);
  (*(void (**)(_QWORD, _QWORD))(v6 + 8))(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 208));
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v2, v9);
  v12 = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v7, 1, 1, v8);
  AsyncFlatMapSequence.Iterator.currentIterator.setter(v7, v11);
  if (*(_BYTE *)(*(_QWORD *)(v0 + 32) + *(int *)(*(_QWORD *)(v0 + 24) + 60)) == 1)
  {
LABEL_6:
    v26 = *(_QWORD *)(v0 + 256);
    v25 = *(_QWORD *)(v0 + 264);
    v28 = *(_QWORD *)(v0 + 232);
    v27 = *(_QWORD *)(v0 + 240);
    v30 = *(_QWORD *)(v0 + 192);
    v29 = *(_QWORD *)(v0 + 200);
    v31 = *(_QWORD *)(v0 + 176);
    v32 = *(_QWORD *)(v0 + 168);
    v40 = *(_QWORD *)(v0 + 128);
    v41 = *(_QWORD *)(v0 + 112);
    v42 = *(_QWORD *)(v0 + 64);
    v45 = *(_QWORD *)(v0 + 56);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 184) + 56))(*(_QWORD *)(v0 + 16), v12, 1, *(_QWORD *)(v0 + 144));
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v45);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v13 = *(_QWORD *)(v0 + 240);
  v14 = *(_QWORD *)(v0 + 248);
  v15 = *(_QWORD *)(v0 + 208);
  AsyncFlatMapSequence.Iterator.currentIterator.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v13, 1, v15) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 224) + 8))(*(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 216));
    swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v17 = *(int **)(AssociatedConformanceWitness + 32);
    v18 = swift_checkMetadataState();
    v43 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v17 + *v17);
    v19 = (_QWORD *)swift_task_alloc(v17[1]);
    *(_QWORD *)(v0 + 296) = v19;
    *v19 = v0;
    v19[1] = AsyncFlatMapSequence.Iterator.next();
    v20 = *(_QWORD *)(v0 + 112);
    v21 = v18;
  }
  else
  {
    v34 = *(_QWORD *)(v0 + 264);
    v35 = *(_QWORD *)(v0 + 240);
    v36 = *(_QWORD *)(v0 + 208);
    v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 248) + 32);
    *(_QWORD *)(v0 + 272) = v37;
    v37(v34, v35, v36);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v38 = *(int **)(AssociatedConformanceWitness + 32);
    v43 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v38 + *v38);
    v39 = (_QWORD *)swift_task_alloc(v38[1]);
    *(_QWORD *)(v0 + 280) = v39;
    *v39 = v0;
    v39[1] = AsyncFlatMapSequence.Iterator.next();
    v21 = *(_QWORD *)(v0 + 208);
    v20 = *(_QWORD *)(v0 + 176);
  }
  return v43(v20, v21, AssociatedConformanceWitness);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  *(_BYTE *)(*(_QWORD *)(v0 + 32) + *(int *)(*(_QWORD *)(v0 + 24) + 60)) = 1;
  swift_willThrow();
  v1 = *(_QWORD *)(v0 + 256);
  v3 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 240);
  v5 = *(_QWORD *)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 200);
  v7 = *(_QWORD *)(v0 + 168);
  v6 = *(_QWORD *)(v0 + 176);
  v8 = *(_QWORD *)(v0 + 128);
  v9 = *(_QWORD *)(v0 + 112);
  v11 = *(_QWORD *)(v0 + 64);
  v12 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 256);
  v3 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 240);
  v5 = *(_QWORD *)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 200);
  v7 = *(_QWORD *)(v0 + 168);
  v6 = *(_QWORD *)(v0 + 176);
  v8 = *(_QWORD *)(v0 + 128);
  v9 = *(_QWORD *)(v0 + 112);
  v11 = *(_QWORD *)(v0 + 64);
  v12 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  *(_BYTE *)(*(_QWORD *)(v0 + 32) + *(int *)(*(_QWORD *)(v0 + 24) + 60)) = 1;
  swift_willThrow();
  v1 = *(_QWORD *)(v0 + 256);
  v3 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 240);
  v5 = *(_QWORD *)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 200);
  v7 = *(_QWORD *)(v0 + 168);
  v6 = *(_QWORD *)(v0 + 176);
  v8 = *(_QWORD *)(v0 + 128);
  v9 = *(_QWORD *)(v0 + 112);
  v11 = *(_QWORD *)(v0 + 64);
  v12 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKF(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t ObjectType;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;

  v6[6] = v5;
  v6[7] = a5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  v9 = a4[3];
  v6[8] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[9] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[10] = swift_task_alloc(v11);
  v6[11] = swift_task_alloc(v11);
  v6[12] = a4[4];
  v6[13] = a4[2];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[14] = AssociatedTypeWitness;
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6[15] = v13;
  v6[16] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = swift_getAssociatedTypeWitness();
  v6[17] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v6[18] = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[19] = swift_task_alloc(v16);
  v6[20] = swift_task_alloc(v16);
  v17 = type metadata accessor for Optional();
  v6[21] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v6[22] = v18;
  v19 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[23] = swift_task_alloc(v19);
  v6[24] = swift_task_alloc(v19);
  v6[25] = a4[5];
  v20 = swift_getAssociatedTypeWitness();
  v6[26] = v20;
  v21 = *(_QWORD *)(v20 - 8);
  v6[27] = v21;
  v22 = (*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[28] = swift_task_alloc(v22);
  v6[29] = swift_task_alloc(v22);
  v23 = type metadata accessor for Optional();
  v6[30] = v23;
  v24 = *(_QWORD *)(v23 - 8);
  v6[31] = v24;
  v25 = (*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[32] = swift_task_alloc(v25);
  v6[33] = swift_task_alloc(v25);
  v6[34] = swift_task_alloc(v25);
  v6[35] = swift_task_alloc(v25);
  v26 = swift_getAssociatedTypeWitness();
  v6[36] = v26;
  v27 = *(_QWORD *)(v26 - 8);
  v6[37] = v27;
  v28 = (*(_QWORD *)(v27 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[38] = swift_task_alloc(v28);
  v6[39] = swift_task_alloc(v28);
  v6[40] = swift_task_alloc(v28);
  v6[41] = swift_task_alloc(v28);
  v6[42] = swift_task_alloc(v28);
  v6[43] = swift_task_alloc(v28);
  v29 = swift_getAssociatedTypeWitness();
  v6[44] = v29;
  v30 = type metadata accessor for Optional();
  v6[45] = v30;
  v31 = *(_QWORD *)(v30 - 8);
  v6[46] = v31;
  v32 = (*(_QWORD *)(v31 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[47] = swift_task_alloc(v32);
  v6[48] = swift_task_alloc(v32);
  v33 = *(_QWORD *)(v29 - 8);
  v6[49] = v33;
  v34 = (*(_QWORD *)(v33 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[50] = swift_task_alloc(v34);
  v6[51] = swift_task_alloc(v34);
  if (a2)
  {
    ObjectType = swift_getObjectType();
    v36 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(a3 + 8))(ObjectType);
    v38 = v37;
  }
  else
  {
    v36 = 0;
    v38 = 0;
  }
  v6[52] = v36;
  v6[53] = v38;
  return swift_task_switch(_ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTY0_, v36, v38);
}

uint64_t _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTY0_()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedConformanceWitness;
  int *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  int *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  if ((*(_BYTE *)(*(_QWORD *)(v0 + 48) + *(int *)(*(_QWORD *)(v0 + 40) + 60)) & 1) != 0)
  {
    v2 = *(_QWORD *)(v0 + 400);
    v1 = *(_QWORD *)(v0 + 408);
    v3 = *(_QWORD *)(v0 + 376);
    v4 = *(_QWORD *)(v0 + 384);
    v6 = *(_QWORD *)(v0 + 336);
    v5 = *(_QWORD *)(v0 + 344);
    v8 = *(_QWORD *)(v0 + 320);
    v7 = *(_QWORD *)(v0 + 328);
    v9 = *(_QWORD *)(v0 + 312);
    v29 = *(_QWORD *)(v0 + 304);
    v30 = *(_QWORD *)(v0 + 280);
    v31 = *(_QWORD *)(v0 + 272);
    v32 = *(_QWORD *)(v0 + 264);
    v33 = *(_QWORD *)(v0 + 256);
    v34 = *(_QWORD *)(v0 + 232);
    v35 = *(_QWORD *)(v0 + 224);
    v36 = *(_QWORD *)(v0 + 192);
    v37 = *(_QWORD *)(v0 + 184);
    v38 = *(_QWORD *)(v0 + 160);
    v39 = *(_QWORD *)(v0 + 152);
    v40 = *(_QWORD *)(v0 + 128);
    v41 = *(_QWORD *)(v0 + 88);
    v42 = *(_QWORD *)(v0 + 80);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 216) + 56))(*(_QWORD *)(v0 + 16), 1, 1, *(_QWORD *)(v0 + 208));
    swift_task_dealloc(v1);
    swift_task_dealloc(v2);
    swift_task_dealloc(v4);
    swift_task_dealloc(v3);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 384);
    v12 = *(_QWORD *)(v0 + 392);
    v13 = *(_QWORD *)(v0 + 352);
    AsyncFlatMapSequence.Iterator.currentIterator.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v11, 1, v13) == 1)
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 368) + 8))(*(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 360));
      swift_getAssociatedTypeWitness();
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      *(_QWORD *)(v0 + 448) = AssociatedConformanceWitness;
      v15 = *(int **)(AssociatedConformanceWitness + 40);
      v16 = swift_checkMetadataState();
      *(_QWORD *)(v0 + 456) = v16;
      v43 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v15 + *v15);
      v17 = (_QWORD *)swift_task_alloc(v15[1]);
      *(_QWORD *)(v0 + 464) = v17;
      *v17 = v0;
      v17[1] = _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTQ3_;
      v18 = *(_QWORD *)(v0 + 192);
      v19 = *(_QWORD *)(v0 + 160);
      v20 = *(_QWORD *)(v0 + 24);
      v21 = *(_QWORD *)(v0 + 32);
      v22 = v16;
    }
    else
    {
      v23 = *(_QWORD *)(v0 + 408);
      v24 = *(_QWORD *)(v0 + 384);
      v25 = *(_QWORD *)(v0 + 352);
      v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 392) + 32);
      *(_QWORD *)(v0 + 432) = v26;
      v26(v23, v24, v25);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v27 = *(int **)(AssociatedConformanceWitness + 40);
      v43 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v27 + *v27);
      v28 = (_QWORD *)swift_task_alloc(v27[1]);
      *(_QWORD *)(v0 + 440) = v28;
      *v28 = v0;
      v28[1] = _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTQ1_;
      v22 = *(_QWORD *)(v0 + 352);
      v19 = *(_QWORD *)(v0 + 336);
      v18 = *(_QWORD *)(v0 + 280);
      v20 = *(_QWORD *)(v0 + 24);
      v21 = *(_QWORD *)(v0 + 32);
    }
    return v43(v18, v20, v21, v19, v22, AssociatedConformanceWitness);
  }
}

uint64_t _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTQ1_()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 440));
  if (v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v2[49] + 8))(v2[51], v2[44]);
    v3 = (unsigned __int8 *)v2[52];
    v4 = v2[53];
    v5 = _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTY9_;
  }
  else
  {
    v3 = (unsigned __int8 *)v2[52];
    v4 = v2[53];
    v5 = _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTY2_;
  }
  return swift_task_switch(v5, v3, v4);
}

uint64_t _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTY2_()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedConformanceWitness;
  int *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t);
  int *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;

  v1 = *(_QWORD *)(v0 + 272);
  v2 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 216);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 248) + 32))(v1, *(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 240));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) != 1)
  {
    v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 432);
    v26 = *(_QWORD *)(v0 + 408);
    v27 = *(_QWORD *)(v0 + 392);
    v28 = *(_QWORD *)(v0 + 376);
    v29 = *(_QWORD *)(v0 + 352);
    v30 = *(_QWORD *)(v0 + 232);
    v31 = *(_QWORD *)(v0 + 208);
    v32 = *(_QWORD *)(v0 + 40);
    v64 = *(_QWORD *)(v0 + 16);
    v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 216) + 32);
    v33(v30, *(_QWORD *)(v0 + 272), v31);
    v25(v28, v26, v29);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v27 + 56))(v28, 0, 1, v29);
    AsyncFlatMapSequence.Iterator.currentIterator.setter(v28, v32);
    v33(v64, v30, v31);
    v12 = 0;
    goto LABEL_6;
  }
  v4 = *(_QWORD *)(v0 + 392);
  v5 = *(_QWORD *)(v0 + 376);
  v6 = *(_QWORD *)(v0 + 352);
  v7 = *(_QWORD *)(v0 + 272);
  v8 = *(_QWORD *)(v0 + 240);
  v9 = *(_QWORD *)(v0 + 248);
  v10 = *(_QWORD *)(v0 + 40);
  (*(void (**)(_QWORD, uint64_t))(v4 + 8))(*(_QWORD *)(v0 + 408), v6);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v12 = 1;
  v11(v5, 1, 1, v6);
  AsyncFlatMapSequence.Iterator.currentIterator.setter(v5, v10);
  if ((*(_BYTE *)(*(_QWORD *)(v0 + 48) + *(int *)(*(_QWORD *)(v0 + 40) + 60)) & 1) != 0)
  {
LABEL_6:
    v35 = *(_QWORD *)(v0 + 400);
    v34 = *(_QWORD *)(v0 + 408);
    v36 = *(_QWORD *)(v0 + 376);
    v37 = *(_QWORD *)(v0 + 384);
    v39 = *(_QWORD *)(v0 + 336);
    v38 = *(_QWORD *)(v0 + 344);
    v41 = *(_QWORD *)(v0 + 320);
    v40 = *(_QWORD *)(v0 + 328);
    v49 = *(_QWORD *)(v0 + 312);
    v50 = *(_QWORD *)(v0 + 304);
    v51 = *(_QWORD *)(v0 + 280);
    v52 = *(_QWORD *)(v0 + 272);
    v53 = *(_QWORD *)(v0 + 264);
    v54 = *(_QWORD *)(v0 + 256);
    v55 = *(_QWORD *)(v0 + 232);
    v56 = *(_QWORD *)(v0 + 224);
    v57 = *(_QWORD *)(v0 + 192);
    v58 = *(_QWORD *)(v0 + 184);
    v59 = *(_QWORD *)(v0 + 160);
    v60 = *(_QWORD *)(v0 + 152);
    v61 = *(_QWORD *)(v0 + 128);
    v62 = *(_QWORD *)(v0 + 88);
    v65 = *(_QWORD *)(v0 + 80);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 216) + 56))(*(_QWORD *)(v0 + 16), v12, 1, *(_QWORD *)(v0 + 208));
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v37);
    swift_task_dealloc(v36);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v65);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v13 = *(_QWORD *)(v0 + 384);
  v14 = *(_QWORD *)(v0 + 392);
  v15 = *(_QWORD *)(v0 + 352);
  AsyncFlatMapSequence.Iterator.currentIterator.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v13, 1, v15) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 368) + 8))(*(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 360));
    swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    *(_QWORD *)(v0 + 448) = AssociatedConformanceWitness;
    v17 = *(int **)(AssociatedConformanceWitness + 40);
    v18 = swift_checkMetadataState();
    *(_QWORD *)(v0 + 456) = v18;
    v63 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v17 + *v17);
    v19 = (_QWORD *)swift_task_alloc(v17[1]);
    *(_QWORD *)(v0 + 464) = v19;
    *v19 = v0;
    v19[1] = _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTQ3_;
    v20 = *(_QWORD *)(v0 + 192);
    v21 = *(_QWORD *)(v0 + 160);
    v22 = *(_QWORD *)(v0 + 24);
    v23 = *(_QWORD *)(v0 + 32);
    v24 = v18;
  }
  else
  {
    v43 = *(_QWORD *)(v0 + 408);
    v44 = *(_QWORD *)(v0 + 384);
    v45 = *(_QWORD *)(v0 + 352);
    v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 392) + 32);
    *(_QWORD *)(v0 + 432) = v46;
    v46(v43, v44, v45);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v47 = *(int **)(AssociatedConformanceWitness + 40);
    v63 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v47 + *v47);
    v48 = (_QWORD *)swift_task_alloc(v47[1]);
    *(_QWORD *)(v0 + 440) = v48;
    *v48 = v0;
    v48[1] = _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTQ1_;
    v24 = *(_QWORD *)(v0 + 352);
    v21 = *(_QWORD *)(v0 + 336);
    v20 = *(_QWORD *)(v0 + 280);
    v22 = *(_QWORD *)(v0 + 24);
    v23 = *(_QWORD *)(v0 + 32);
  }
  return v63(v20, v22, v23, v21, v24, AssociatedConformanceWitness);
}

uint64_t _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTQ3_()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 464));
  if (v0)
    v3 = _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTY10_;
  else
    v3 = _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTY4_;
  return swift_task_switch(v3, *(unsigned __int8 **)(v2 + 416), *(_QWORD *)(v2 + 424));
}

uint64_t _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTY4_()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  int **v18;
  int *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;

  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 120);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 32))(v1, *(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 168));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = *(_QWORD *)(v0 + 40);
    v5 = *(_QWORD *)(v0 + 48);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 8))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 168));
    *(_BYTE *)(v5 + *(int *)(v4 + 60)) = 1;
    v7 = *(_QWORD *)(v0 + 400);
    v6 = *(_QWORD *)(v0 + 408);
    v8 = *(_QWORD *)(v0 + 376);
    v9 = *(_QWORD *)(v0 + 384);
    v11 = *(_QWORD *)(v0 + 336);
    v10 = *(_QWORD *)(v0 + 344);
    v13 = *(_QWORD *)(v0 + 320);
    v12 = *(_QWORD *)(v0 + 328);
    v14 = *(_QWORD *)(v0 + 312);
    v22 = *(_QWORD *)(v0 + 304);
    v23 = *(_QWORD *)(v0 + 280);
    v24 = *(_QWORD *)(v0 + 272);
    v25 = *(_QWORD *)(v0 + 264);
    v26 = *(_QWORD *)(v0 + 256);
    v27 = *(_QWORD *)(v0 + 232);
    v28 = *(_QWORD *)(v0 + 224);
    v29 = *(_QWORD *)(v0 + 192);
    v30 = *(_QWORD *)(v0 + 184);
    v31 = *(_QWORD *)(v0 + 160);
    v32 = *(_QWORD *)(v0 + 152);
    v33 = *(_QWORD *)(v0 + 128);
    v34 = *(_QWORD *)(v0 + 88);
    v35 = *(_QWORD *)(v0 + 80);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 216) + 56))(*(_QWORD *)(v0 + 16), 1, 1, *(_QWORD *)(v0 + 208));
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v9);
    swift_task_dealloc(v8);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v16 = *(_QWORD *)(v0 + 40);
    v17 = *(_QWORD *)(v0 + 48);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 32))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 112));
    v18 = (int **)(v17 + *(int *)(v16 + 52));
    v19 = *v18;
    *(_QWORD *)(v0 + 472) = v18[1];
    v20 = v19[1];
    v36 = (int *)((char *)v19 + *v19);
    swift_retain();
    v21 = (_QWORD *)swift_task_alloc(v20);
    *(_QWORD *)(v0 + 480) = v21;
    *v21 = v0;
    v21[1] = _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTQ5_;
    return ((uint64_t (*)(_QWORD, _QWORD))v36)(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 128));
  }
}

uint64_t _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTQ5_()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *v0;
  v3 = *(_QWORD *)(*v0 + 120);
  v2 = *(_QWORD *)(*v0 + 128);
  v4 = *(_QWORD *)(*v0 + 112);
  swift_task_dealloc(*(_QWORD *)(*v0 + 480));
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return swift_task_switch(_ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTY6_, *(unsigned __int8 **)(v1 + 416), *(_QWORD *)(v1 + 424));
}

uint64_t _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTY6_()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedConformanceWitness;
  int *v4;
  _QWORD *v5;
  int *v7;

  v1 = v0[25];
  v2 = v0[8];
  (*(void (**)(_QWORD, _QWORD, uint64_t))(v0[9] + 32))(v0[10], v0[11], v2);
  (*(void (**)(uint64_t, uint64_t))(v1 + 40))(v2, v1);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v4 = *(int **)(AssociatedConformanceWitness + 40);
  v7 = (int *)((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  v0[61] = v5;
  *v5 = v0;
  v5[1] = _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTQ7_;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))v7)(v0[33], v0[3], v0[4], v0[40], v0[44], AssociatedConformanceWitness);
}

uint64_t _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTQ7_()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 488));
  if (v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v2[49] + 8))(v2[50], v2[44]);
    v3 = (unsigned __int8 *)v2[52];
    v4 = v2[53];
    v5 = _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTY11_;
  }
  else
  {
    v3 = (unsigned __int8 *)v2[52];
    v4 = v2[53];
    v5 = _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTY8_;
  }
  return swift_task_switch(v5, v3, v4);
}

uint64_t _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTY8_()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t AssociatedConformanceWitness;
  int *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t);
  int *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;

  v1 = *(_QWORD *)(v0 + 256);
  v2 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 216);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 248) + 32))(v1, *(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 240));
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  v6 = *(_QWORD *)(v0 + 392);
  v5 = *(_QWORD *)(v0 + 400);
  v7 = *(_QWORD *)(v0 + 376);
  v8 = *(_QWORD *)(v0 + 352);
  v9 = *(_QWORD *)(v0 + 256);
  if (v4 != 1)
  {
    v26 = *(_QWORD *)(v0 + 224);
    v27 = *(_QWORD *)(v0 + 208);
    v28 = *(_QWORD *)(v0 + 40);
    v60 = *(_QWORD *)(v0 + 16);
    v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 216) + 32);
    v29(v26, v9, v27);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v7, v5, v8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v7, 0, 1, v8);
    AsyncFlatMapSequence.Iterator.currentIterator.setter(v7, v28);
    v29(v60, v26, v27);
    v13 = 0;
    goto LABEL_6;
  }
  v10 = *(_QWORD *)(v0 + 240);
  v11 = *(_QWORD *)(v0 + 248);
  v12 = *(_QWORD *)(v0 + 40);
  (*(void (**)(_QWORD, _QWORD))(v6 + 8))(*(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 352));
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  v13 = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v7, 1, 1, v8);
  AsyncFlatMapSequence.Iterator.currentIterator.setter(v7, v12);
  if (*(_BYTE *)(*(_QWORD *)(v0 + 48) + *(int *)(*(_QWORD *)(v0 + 40) + 60)) == 1)
  {
LABEL_6:
    v31 = *(_QWORD *)(v0 + 400);
    v30 = *(_QWORD *)(v0 + 408);
    v32 = *(_QWORD *)(v0 + 376);
    v33 = *(_QWORD *)(v0 + 384);
    v35 = *(_QWORD *)(v0 + 336);
    v34 = *(_QWORD *)(v0 + 344);
    v37 = *(_QWORD *)(v0 + 320);
    v36 = *(_QWORD *)(v0 + 328);
    v45 = *(_QWORD *)(v0 + 312);
    v46 = *(_QWORD *)(v0 + 304);
    v47 = *(_QWORD *)(v0 + 280);
    v48 = *(_QWORD *)(v0 + 272);
    v49 = *(_QWORD *)(v0 + 264);
    v50 = *(_QWORD *)(v0 + 256);
    v51 = *(_QWORD *)(v0 + 232);
    v52 = *(_QWORD *)(v0 + 224);
    v53 = *(_QWORD *)(v0 + 192);
    v54 = *(_QWORD *)(v0 + 184);
    v55 = *(_QWORD *)(v0 + 160);
    v56 = *(_QWORD *)(v0 + 152);
    v57 = *(_QWORD *)(v0 + 128);
    v58 = *(_QWORD *)(v0 + 88);
    v61 = *(_QWORD *)(v0 + 80);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 216) + 56))(*(_QWORD *)(v0 + 16), v13, 1, *(_QWORD *)(v0 + 208));
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v33);
    swift_task_dealloc(v32);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v61);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v14 = *(_QWORD *)(v0 + 384);
  v15 = *(_QWORD *)(v0 + 392);
  v16 = *(_QWORD *)(v0 + 352);
  AsyncFlatMapSequence.Iterator.currentIterator.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v14, 1, v16) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 368) + 8))(*(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 360));
    swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    *(_QWORD *)(v0 + 448) = AssociatedConformanceWitness;
    v18 = *(int **)(AssociatedConformanceWitness + 40);
    v19 = swift_checkMetadataState();
    *(_QWORD *)(v0 + 456) = v19;
    v59 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v18 + *v18);
    v20 = (_QWORD *)swift_task_alloc(v18[1]);
    *(_QWORD *)(v0 + 464) = v20;
    *v20 = v0;
    v20[1] = _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTQ3_;
    v21 = *(_QWORD *)(v0 + 192);
    v22 = *(_QWORD *)(v0 + 160);
    v23 = *(_QWORD *)(v0 + 24);
    v24 = *(_QWORD *)(v0 + 32);
    v25 = v19;
  }
  else
  {
    v39 = *(_QWORD *)(v0 + 408);
    v40 = *(_QWORD *)(v0 + 384);
    v41 = *(_QWORD *)(v0 + 352);
    v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 392) + 32);
    *(_QWORD *)(v0 + 432) = v42;
    v42(v39, v40, v41);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v43 = *(int **)(AssociatedConformanceWitness + 40);
    v59 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v43 + *v43);
    v44 = (_QWORD *)swift_task_alloc(v43[1]);
    *(_QWORD *)(v0 + 440) = v44;
    *v44 = v0;
    v44[1] = _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTQ1_;
    v25 = *(_QWORD *)(v0 + 352);
    v22 = *(_QWORD *)(v0 + 336);
    v21 = *(_QWORD *)(v0 + 280);
    v23 = *(_QWORD *)(v0 + 24);
    v24 = *(_QWORD *)(v0 + 32);
  }
  return v59(v21, v23, v24, v22, v25, AssociatedConformanceWitness);
}

uint64_t _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTY9_()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = *(_QWORD *)(v0 + 344);
  v3 = *(_QWORD *)(v0 + 304);
  v2 = *(_QWORD *)(v0 + 312);
  v4 = *(_QWORD *)(v0 + 288);
  v5 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 48);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 296) + 32);
  v7(v1, *(_QWORD *)(v0 + 336), v4);
  v7(v2, v1, v4);
  *(_BYTE *)(v6 + *(int *)(v5 + 60)) = 1;
  v7(v3, v2, v4);
  swift_dynamicCast();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  swift_willThrowTypedImpl();
  v9 = *(_QWORD *)(v0 + 400);
  v8 = *(_QWORD *)(v0 + 408);
  v10 = *(_QWORD *)(v0 + 376);
  v11 = *(_QWORD *)(v0 + 384);
  v13 = *(_QWORD *)(v0 + 336);
  v12 = *(_QWORD *)(v0 + 344);
  v15 = *(_QWORD *)(v0 + 320);
  v14 = *(_QWORD *)(v0 + 328);
  v18 = *(_QWORD *)(v0 + 312);
  v19 = *(_QWORD *)(v0 + 304);
  v20 = *(_QWORD *)(v0 + 280);
  v21 = *(_QWORD *)(v0 + 272);
  v22 = *(_QWORD *)(v0 + 264);
  v23 = *(_QWORD *)(v0 + 256);
  v24 = *(_QWORD *)(v0 + 232);
  v25 = *(_QWORD *)(v0 + 224);
  v26 = *(_QWORD *)(v0 + 192);
  v27 = *(_QWORD *)(v0 + 184);
  v16 = *(_QWORD *)(v0 + 152);
  v28 = *(_QWORD *)(v0 + 160);
  v29 = *(_QWORD *)(v0 + 128);
  v30 = *(_QWORD *)(v0 + 88);
  v31 = *(_QWORD *)(v0 + 80);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 144) + 32))(*(_QWORD *)(v0 + 56), v16, *(_QWORD *)(v0 + 136));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v16);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTY10_()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v17 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 400);
  v1 = *(_QWORD *)(v0 + 408);
  v3 = *(_QWORD *)(v0 + 376);
  v4 = *(_QWORD *)(v0 + 384);
  v6 = *(_QWORD *)(v0 + 336);
  v5 = *(_QWORD *)(v0 + 344);
  v7 = *(_QWORD *)(v0 + 320);
  v8 = *(_QWORD *)(v0 + 328);
  v9 = *(_QWORD *)(v0 + 312);
  v11 = *(_QWORD *)(v0 + 304);
  v12 = *(_QWORD *)(v0 + 280);
  v13 = *(_QWORD *)(v0 + 272);
  v14 = *(_QWORD *)(v0 + 264);
  v15 = *(_QWORD *)(v0 + 256);
  v16 = *(_QWORD *)(v0 + 232);
  v18 = *(_QWORD *)(v0 + 224);
  v19 = *(_QWORD *)(v0 + 192);
  v20 = *(_QWORD *)(v0 + 184);
  v21 = *(_QWORD *)(v0 + 152);
  v22 = *(_QWORD *)(v0 + 128);
  v23 = *(_QWORD *)(v0 + 88);
  v24 = *(_QWORD *)(v0 + 80);
  (*(void (**)(_QWORD))(*(_QWORD *)(v0 + 144) + 32))(*(_QWORD *)(v0 + 56));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v8);
  swift_task_dealloc(v7);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v17);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTY11_()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = *(_QWORD *)(v0 + 328);
  v3 = *(_QWORD *)(v0 + 304);
  v2 = *(_QWORD *)(v0 + 312);
  v4 = *(_QWORD *)(v0 + 288);
  v5 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 48);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 296) + 32);
  v7(v1, *(_QWORD *)(v0 + 320), v4);
  v7(v2, v1, v4);
  *(_BYTE *)(v6 + *(int *)(v5 + 60)) = 1;
  v7(v3, v2, v4);
  swift_dynamicCast();
  swift_getAssociatedConformanceWitness();
  swift_willThrowTypedImpl();
  v9 = *(_QWORD *)(v0 + 400);
  v8 = *(_QWORD *)(v0 + 408);
  v10 = *(_QWORD *)(v0 + 376);
  v11 = *(_QWORD *)(v0 + 384);
  v13 = *(_QWORD *)(v0 + 336);
  v12 = *(_QWORD *)(v0 + 344);
  v15 = *(_QWORD *)(v0 + 320);
  v14 = *(_QWORD *)(v0 + 328);
  v18 = *(_QWORD *)(v0 + 312);
  v19 = *(_QWORD *)(v0 + 304);
  v20 = *(_QWORD *)(v0 + 280);
  v21 = *(_QWORD *)(v0 + 272);
  v22 = *(_QWORD *)(v0 + 264);
  v23 = *(_QWORD *)(v0 + 256);
  v24 = *(_QWORD *)(v0 + 232);
  v25 = *(_QWORD *)(v0 + 224);
  v26 = *(_QWORD *)(v0 + 192);
  v27 = *(_QWORD *)(v0 + 184);
  v16 = *(_QWORD *)(v0 + 152);
  v28 = *(_QWORD *)(v0 + 160);
  v29 = *(_QWORD *)(v0 + 128);
  v30 = *(_QWORD *)(v0 + 88);
  v31 = *(_QWORD *)(v0 + 80);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 144) + 32))(*(_QWORD *)(v0 + 56), v16, *(_QWORD *)(v0 + 136));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v16);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncFlatMapSequence<A, B>.Iterator(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1EE06A14C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCompactMapSequence<A, B>.Iterator;
  return AsyncFlatMapSequence.Iterator.next()(a1, a2);
}

uint64_t _ss20AsyncFlatMapSequenceV8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5[2] = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[3] = AssociatedTypeWitness;
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5[4] = v11;
  v12 = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5[5] = v12;
  v13 = (_QWORD *)swift_task_alloc(dword_1EE06A154);
  v5[6] = v13;
  *v13 = v5;
  v13[1] = _ss23AsyncCompactMapSequenceV8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKF(a1, a2, a3, a5, v12);
}

uint64_t AsyncFlatMapSequence.makeAsyncIterator()(uint64_t a1)
{
  return AsyncFlatMapSequence.makeAsyncIterator()(a1, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))AsyncFlatMapSequence.Iterator.init(_:transform:));
}

uint64_t _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v6[2] = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[3] = AssociatedTypeWitness;
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6[4] = v13;
  v14 = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6[5] = v14;
  v15 = (_QWORD *)swift_task_alloc(dword_1EE06A15C);
  v6[6] = v15;
  *v15 = v6;
  v15[1] = _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ0_;
  return _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF(a1, a2, a3, a5, a6, v14);
}

uint64_t _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ0_()
{
  uint64_t v0;
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (_QWORD *)*v1;
  v3 = *(_QWORD *)(*v1 + 48);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (v0)
  {
    v5 = v2[5];
    (*(void (**)(_QWORD, uint64_t, _QWORD))(v2[4] + 32))(v2[2], v5, v2[3]);
    swift_task_dealloc(v5);
  }
  else
  {
    swift_task_dealloc(v2[5]);
  }
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  int *v12;
  _QWORD *v13;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t);

  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  v6[3] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[8] = AssociatedTypeWitness;
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6[9] = v11;
  v6[10] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(int **)(a5 + 32);
  v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v12 + *v12);
  v13 = (_QWORD *)swift_task_alloc(v12[1]);
  v6[11] = v13;
  *v13 = v6;
  v13[1] = _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ0_;
  return v15(a1, a4, a5);
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ0_()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(*v1 + 88);
  v3 = *v1;
  *(_QWORD *)(v3 + 96) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    if (*(_QWORD *)(v3 + 24))
    {
      v4 = *(_QWORD *)(v3 + 32);
      ObjectType = swift_getObjectType();
      v6 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(ObjectType, v4);
      v8 = v7;
    }
    else
    {
      v6 = 0;
      v8 = 0;
    }
    return swift_task_switch(_sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY1_, v6, v8);
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v3 + 80));
    return (*(uint64_t (**)(void))(v3 + 8))();
  }
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY1_()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 72);
  v1 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 96);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_dynamicCast();
  swift_getAssociatedConformanceWitness();
  swift_willThrowTypedImpl();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v4, v1, v3);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AsyncSequence.map<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return AsyncSequence.compactMap<A>(_:)(a1, a2, a3, a4, a5, type metadata accessor for AsyncMapSequence, a6);
}

{
  return AsyncSequence.compactMap<A>(_:)(a1, a2, a3, a4, a5, type metadata accessor for AsyncThrowingMapSequence, a6);
}

uint64_t AsyncMapSequence.init(_:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return AsyncCompactMapSequence.init(_:transform:)(a1, a2, a3, a4, a5, a6, type metadata accessor for AsyncMapSequence, a7);
}

uint64_t AsyncMapSequence.base.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t (*AsyncMapSequence.Iterator.baseIterator.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t AsyncMapSequence.Iterator.transform.getter(uint64_t a1)
{
  uint64_t v1;

  v1 = specialized AsyncMapSequence.Iterator.transform.getter(a1);
  swift_retain();
  return v1;
}

uint64_t AsyncMapSequence.Iterator.init(_:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return AsyncCompactMapSequence.Iterator.init(_:transform:)(a1, a2, a3, a4, a5, a6, type metadata accessor for AsyncMapSequence.Iterator, a7);
}

uint64_t AsyncCompactMapSequence.Iterator.init(_:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(_QWORD, uint64_t, uint64_t, uint64_t)@<X6>, uint64_t a8@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t result;
  _QWORD *v18;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a8, a1, AssociatedTypeWitness);
  result = a7(0, a4, a5, a6);
  v18 = (_QWORD *)(a8 + *(int *)(result + 44));
  *v18 = a2;
  v18[1] = a3;
  return result;
}

uint64_t AsyncMapSequence.Iterator.next()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedConformanceWitness;
  int *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3[5] = AssociatedTypeWitness;
  v5 = type metadata accessor for Optional();
  v3[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[7] = v6;
  v7 = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3[8] = v7;
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3[9] = v8;
  v3[10] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v10 = *(int **)(AssociatedConformanceWitness + 32);
  v11 = swift_checkMetadataState();
  v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v10 + *v10);
  v12 = (_QWORD *)swift_task_alloc(v10[1]);
  v3[11] = v12;
  *v12 = v3;
  v12[1] = AsyncMapSequence.Iterator.next();
  return v14(v7, v11, AssociatedConformanceWitness);
}

uint64_t AsyncMapSequence.Iterator.next()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = AsyncMapSequence.Iterator.next();
  else
    v3 = AsyncMapSequence.Iterator.next();
  return swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  int **v9;
  int *v10;
  uint64_t v11;
  _QWORD *v12;
  int *v13;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 40);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(v1, *(_QWORD *)(v0 + 48));
    v4 = *(_QWORD *)(v0 + 80);
    v5 = *(_QWORD *)(v0 + 64);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) + 24) - 8) + 56))(*(_QWORD *)(v0 + 16), 1, 1);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 24);
    v7 = *(_QWORD *)(v0 + 32);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 80), v1, v3);
    v9 = (int **)(v7 + *(int *)(v8 + 44));
    v10 = *v9;
    *(_QWORD *)(v0 + 104) = v9[1];
    v11 = v10[1];
    v13 = (int *)((char *)v10 + *v10);
    swift_retain();
    v12 = (_QWORD *)swift_task_alloc(v11);
    *(_QWORD *)(v0 + 112) = v12;
    *v12 = v0;
    v12[1] = AsyncMapSequence.Iterator.next();
    return ((uint64_t (*)(_QWORD, _QWORD))v13)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 80));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 72);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 112));
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch(AsyncMapSequence.Iterator.next(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 64);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) + 24) - 8) + 56))(*(_QWORD *)(v0 + 16), 0, 1);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t AssociatedConformanceWitness;
  int *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v6[6] = v5;
  v6[7] = a5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[8] = AssociatedTypeWitness;
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6[9] = v10;
  v11 = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6[10] = v11;
  v12 = swift_getAssociatedTypeWitness();
  v6[11] = v12;
  v13 = type metadata accessor for Optional();
  v6[12] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v6[13] = v14;
  v15 = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6[14] = v15;
  v16 = *(_QWORD *)(v12 - 8);
  v6[15] = v16;
  v6[16] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v18 = *(int **)(AssociatedConformanceWitness + 40);
  v19 = swift_checkMetadataState();
  v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v18 + *v18);
  v20 = (_QWORD *)swift_task_alloc(v18[1]);
  v6[17] = v20;
  *v20 = v6;
  v20[1] = _ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFTQ0_;
  return v22(v15, a2, a3, v11, v19, AssociatedConformanceWitness);
}

uint64_t _ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFTQ0_()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)();
  unsigned __int8 *v14;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 136));
  if (v0)
  {
    if (v3)
    {
      v4 = v2[4];
      ObjectType = swift_getObjectType();
      v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(ObjectType, v4);
      v8 = v7;
    }
    else
    {
      v6 = 0;
      v8 = 0;
    }
    v13 = _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY4_;
    v14 = (unsigned __int8 *)v6;
  }
  else
  {
    if (v3)
    {
      v9 = v2[4];
      v10 = swift_getObjectType();
      v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v9);
      v8 = v12;
    }
    else
    {
      v11 = 0;
      v8 = 0;
    }
    v2[18] = v11;
    v2[19] = v8;
    v13 = _ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFTY1_;
    v14 = (unsigned __int8 *)v11;
  }
  return swift_task_switch(v13, v14, v8);
}

uint64_t _ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFTY1_()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int **v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  int *v14;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 88);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 104) + 8))(v1, *(_QWORD *)(v0 + 96));
    v4 = *(_QWORD *)(v0 + 128);
    v5 = *(_QWORD *)(v0 + 112);
    v6 = *(_QWORD *)(v0 + 80);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 40) + 24) - 8) + 56))(*(_QWORD *)(v0 + 16), 1, 1);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 40);
    v8 = *(_QWORD *)(v0 + 48);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 128), v1, v3);
    v10 = (int **)(v8 + *(int *)(v9 + 44));
    v11 = *v10;
    *(_QWORD *)(v0 + 160) = v10[1];
    v12 = v11[1];
    v14 = (int *)((char *)v11 + *v11);
    swift_retain();
    v13 = (_QWORD *)swift_task_alloc(v12);
    *(_QWORD *)(v0 + 168) = v13;
    *v13 = v0;
    v13[1] = _ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFTQ2_;
    return ((uint64_t (*)(_QWORD, _QWORD))v14)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 128));
  }
}

uint64_t _ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFTQ2_()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *v0;
  v3 = *(_QWORD *)(*v0 + 120);
  v2 = *(_QWORD *)(*v0 + 128);
  v4 = *(_QWORD *)(*v0 + 88);
  swift_task_dealloc(*(_QWORD *)(*v0 + 168));
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return swift_task_switch(_ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFTY3_, *(unsigned __int8 **)(v1 + 144), *(_QWORD *)(v1 + 152));
}

uint64_t _ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFTY3_()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 80);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 40) + 24) - 8) + 56))(*(_QWORD *)(v0 + 16), 0, 1);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncMapSequence<A, B>.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1EE06A164);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCompactMapSequence<A, B>.Iterator;
  return AsyncMapSequence.Iterator.next()(a1, a2);
}

uint64_t _ss16AsyncMapSequenceV8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5[2] = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[3] = AssociatedTypeWitness;
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5[4] = v11;
  v12 = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5[5] = v12;
  v13 = (_QWORD *)swift_task_alloc(dword_1EE06A16C);
  v5[6] = v13;
  *v13 = v5;
  v13[1] = _ss23AsyncCompactMapSequenceV8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return _ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKF(a1, a2, a3, a5, v12);
}

uint64_t AsyncMapSequence.makeAsyncIterator()(uint64_t a1)
{
  return AsyncCompactMapSequence.makeAsyncIterator()(a1, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))AsyncMapSequence.Iterator.init(_:transform:));
}

uint64_t AsyncCompactMapSequence.makeAsyncIterator()(uint64_t a1, uint64_t (*a2)(char *, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v20;

  v4 = v2;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v8 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v14 = (char *)&v20 - v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v11 + 40))(v6, v11);
  v15 = (uint64_t *)(v4 + *(int *)(a1 + 44));
  v16 = *v15;
  v17 = v15[1];
  v18 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8);
  swift_retain();
  v18(v4, a1);
  return a2(v14, v16, v17, v6, *(_QWORD *)(a1 + 24), v11);
}

uint64_t AsyncSequence.prefix(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t result;

  if (a1 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v5 = v4;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a4, v5, a2);
    result = type metadata accessor for AsyncPrefixSequence(0, a2, a3, v10);
    *(_QWORD *)(a4 + *(int *)(result + 36)) = a1;
  }
  return result;
}

uint64_t AsyncPrefixSequence.init(_:count:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return AsyncDropFirstSequence.init(_:dropping:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AsyncPrefixSequence, a5);
}

uint64_t AsyncDropFirstSequence.init(_:dropping:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(_QWORD, uint64_t, uint64_t)@<X4>, uint64_t a6@<X8>)
{
  uint64_t result;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a6, a1);
  result = a5(0, a3, a4);
  *(_QWORD *)(a6 + *(int *)(result + 36)) = a2;
  return result;
}

uint64_t AsyncPrefixSequence.count.getter(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 36));
}

uint64_t (*AsyncPrefixSequence.Iterator.baseIterator.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t AsyncPrefixSequence.Iterator.remaining.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + *(int *)(a2 + 36)) = result;
  return result;
}

uint64_t (*AsyncPrefixSequence.Iterator.remaining.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t AsyncPrefixSequence.Iterator.init(_:count:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return AsyncDropFirstSequence.Iterator.init(_:count:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AsyncPrefixSequence.Iterator, a5);
}

uint64_t AsyncDropFirstSequence.Iterator.init(_:count:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(_QWORD, uint64_t, uint64_t)@<X4>, uint64_t a6@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t result;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a6, a1, AssociatedTypeWitness);
  result = a5(0, a3, a4);
  *(_QWORD *)(a6 + *(int *)(result + 36)) = a2;
  return result;
}

uint64_t AsyncPrefixSequence.Iterator.next()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch(AsyncPrefixSequence.Iterator.next(), 0, 0);
}

uint64_t AsyncPrefixSequence.Iterator.next()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedConformanceWitness;
  int *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  int *v11;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(int *)(*(_QWORD *)(v0 + 24) + 36);
  v3 = *(_QWORD *)(v1 + v2);
  if (v3)
  {
    *(_QWORD *)(v1 + v2) = v3 - 1;
    swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v5 = *(int **)(AssociatedConformanceWitness + 32);
    v6 = swift_checkMetadataState();
    v11 = (int *)((char *)v5 + *v5);
    v7 = (_QWORD *)swift_task_alloc(v5[1]);
    *(_QWORD *)(v0 + 40) = v7;
    *v7 = v0;
    v7[1] = AsyncPrefixSequence.Iterator.next();
    return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v11)(*(_QWORD *)(v0 + 16), v6, AssociatedConformanceWitness);
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 16);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v9, 1, 1, AssociatedTypeWitness);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 40));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t _ss19AsyncPrefixSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t ObjectType;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v6[6] = v5;
  v6[7] = a5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  v6[8] = *(_QWORD *)(a4 + 24);
  v6[9] = *(_QWORD *)(a4 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[10] = AssociatedTypeWitness;
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6[11] = v10;
  v6[12] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    ObjectType = swift_getObjectType();
    v12 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(ObjectType, a3);
    v14 = v13;
  }
  else
  {
    v12 = 0;
    v14 = 0;
  }
  v6[13] = v12;
  v6[14] = v14;
  return swift_task_switch(_ss19AsyncPrefixSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY0_, v12, v14);
}

uint64_t _ss19AsyncPrefixSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY0_()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedConformanceWitness;
  int *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  int *v11;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(int *)(*(_QWORD *)(v0 + 40) + 36);
  v3 = *(_QWORD *)(v1 + v2);
  if (v3)
  {
    *(_QWORD *)(v1 + v2) = v3 - 1;
    swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v5 = *(int **)(AssociatedConformanceWitness + 40);
    v6 = swift_checkMetadataState();
    v11 = (int *)((char *)v5 + *v5);
    v7 = (_QWORD *)swift_task_alloc(v5[1]);
    *(_QWORD *)(v0 + 120) = v7;
    *v7 = v0;
    v7[1] = _ss19AsyncPrefixSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ1_;
    return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))v11)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 96), v6, AssociatedConformanceWitness);
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 16);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v9, 1, 1, AssociatedTypeWitness);
    swift_task_dealloc(*(_QWORD *)(v0 + 96));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t _ss19AsyncPrefixSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ1_()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 120);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (v0)
    return swift_task_switch(_ss19AsyncPrefixSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY2_, *(unsigned __int8 **)(v2 + 104), *(_QWORD *)(v2 + 112));
  swift_task_dealloc(*(_QWORD *)(v2 + 96));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t _ss19AsyncPrefixSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY2_()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 32))(*(_QWORD *)(v0 + 56), v1, *(_QWORD *)(v0 + 80));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncPrefixSequence<A>.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_1EE06A174);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCompactMapSequence<A, B>.Iterator;
  v6[3] = a2;
  v6[4] = v2;
  v6[2] = a1;
  return swift_task_switch(AsyncPrefixSequence.Iterator.next(), 0, 0);
}

uint64_t _ss19AsyncPrefixSequenceV8IteratorVyx_GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5[2] = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[3] = AssociatedTypeWitness;
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5[4] = v11;
  v12 = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5[5] = v12;
  v13 = (_QWORD *)swift_task_alloc(dword_1EE06A17C);
  v5[6] = v13;
  *v13 = v5;
  v13[1] = _ss23AsyncCompactMapSequenceV8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return _ss19AsyncPrefixSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF(a1, a2, a3, a5, v12);
}

uint64_t AsyncPrefixSequence.makeAsyncIterator()(uint64_t a1)
{
  return AsyncDropFirstSequence.makeAsyncIterator()(a1, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))AsyncPrefixSequence.Iterator.init(_:count:));
}

uint64_t AsyncDropFirstSequence.makeAsyncIterator()(uint64_t a1, uint64_t (*a2)(char *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;

  v4 = v2;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v8 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v14 = (char *)&v17 - v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v11 + 40))(v6, v11);
  v15 = *(_QWORD *)(v4 + *(int *)(a1 + 36));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v4, a1);
  return a2(v14, v15, v6, v11);
}

uint64_t AsyncSequence.prefix(while:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return AsyncSequence.prefix(while:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AsyncPrefixWhileSequence, a5);
}

{
  return AsyncSequence.prefix(while:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AsyncThrowingPrefixWhileSequence, a5);
}

uint64_t AsyncPrefixWhileSequence.init(_:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return AsyncDropWhileSequence.init(_:predicate:)(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AsyncPrefixWhileSequence, a6);
}

uint64_t AsyncPrefixWhileSequence.Iterator.predicateHasFailed.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t AsyncPrefixWhileSequence.Iterator.predicateHasFailed.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*AsyncPrefixWhileSequence.Iterator.predicateHasFailed.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t (*AsyncPrefixWhileSequence.Iterator.baseIterator.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t AsyncPrefixWhileSequence.Iterator.predicate.getter(uint64_t a1)
{
  uint64_t v1;

  v1 = specialized AsyncPrefixWhileSequence.Iterator.predicate.getter(a1);
  swift_retain();
  return v1;
}

uint64_t AsyncPrefixWhileSequence.Iterator.init(_:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _BYTE *a6@<X8>)
{
  return AsyncPrefixWhileSequence.Iterator.init(_:predicate:)(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AsyncPrefixWhileSequence.Iterator, a6);
}

uint64_t AsyncPrefixWhileSequence.Iterator.next()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v3[5] = *(_QWORD *)(a2 + 24);
  v3[6] = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3[7] = AssociatedTypeWitness;
  v5 = type metadata accessor for Optional();
  v3[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[9] = v6;
  v3[10] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3[11] = v7;
  v3[12] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(AsyncPrefixWhileSequence.Iterator.next(), 0, 0);
}

uint64_t AsyncPrefixWhileSequence.Iterator.next()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedConformanceWitness;
  int *v5;
  uint64_t v6;
  _QWORD *v7;
  int *v8;

  if ((**(_BYTE **)(v0 + 32) & 1) != 0)
  {
    v1 = *(_QWORD *)(v0 + 96);
    v2 = *(_QWORD *)(v0 + 80);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 56))(*(_QWORD *)(v0 + 16), 1, 1, *(_QWORD *)(v0 + 56));
    swift_task_dealloc(v1);
    swift_task_dealloc(v2);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v5 = *(int **)(AssociatedConformanceWitness + 32);
    v6 = swift_checkMetadataState();
    v8 = (int *)((char *)v5 + *v5);
    v7 = (_QWORD *)swift_task_alloc(v5[1]);
    *(_QWORD *)(v0 + 104) = v7;
    *v7 = v0;
    v7[1] = AsyncPrefixWhileSequence.Iterator.next();
    return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v8)(*(_QWORD *)(v0 + 80), v6, AssociatedConformanceWitness);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = AsyncPrefixWhileSequence.Iterator.next();
  else
    v3 = AsyncPrefixWhileSequence.Iterator.next();
  return swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  int **v11;
  int *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t (*v15)(_QWORD);

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 56);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(v1, *(_QWORD *)(v0 + 64));
    v4 = *(_QWORD *)(v0 + 96);
    v5 = *(_QWORD *)(v0 + 80);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 56))(*(_QWORD *)(v0 + 16), 1, 1, *(_QWORD *)(v0 + 56));
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 96);
    v9 = *(_QWORD *)(v0 + 24);
    v8 = *(_QWORD *)(v0 + 32);
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    *(_QWORD *)(v0 + 120) = v10;
    v10(v7, v1, v3);
    v11 = (int **)(v8 + *(int *)(v9 + 40));
    v12 = *v11;
    *(_QWORD *)(v0 + 128) = v11[1];
    v13 = v12[1];
    v15 = (uint64_t (*)(_QWORD))((char *)v12 + *v12);
    swift_retain();
    v14 = (_QWORD *)swift_task_alloc(v13);
    *(_QWORD *)(v0 + 136) = v14;
    *v14 = v0;
    v14[1] = AsyncPrefixWhileSequence.Iterator.next();
    return v15(*(_QWORD *)(v0 + 96));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(v0 + 144) == 1)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 120))(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 56));
    v1 = 0;
  }
  else
  {
    v2 = *(_BYTE **)(v0 + 32);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 56));
    v1 = 1;
    *v2 = 1;
  }
  v3 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 80);
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 56))(*(_QWORD *)(v0 + 16), v1, 1, *(_QWORD *)(v0 + 56));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AsyncPrefixWhileSequence.Iterator.next()(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  *(_BYTE *)(*(_QWORD *)v1 + 144) = a1;
  swift_task_dealloc(v2);
  swift_release();
  return swift_task_switch(AsyncPrefixWhileSequence.Iterator.next(), 0, 0);
}

uint64_t _ss24AsyncPrefixWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;

  v6[6] = v5;
  v6[7] = a5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  v6[8] = *(_QWORD *)(a4 + 24);
  v6[9] = *(_QWORD *)(a4 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[10] = AssociatedTypeWitness;
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6[11] = v10;
  v6[12] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = swift_getAssociatedTypeWitness();
  v6[13] = v11;
  v12 = type metadata accessor for Optional();
  v6[14] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v6[15] = v13;
  v6[16] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v11 - 8);
  v6[17] = v14;
  v6[18] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    ObjectType = swift_getObjectType();
    v16 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(ObjectType, a3);
    v18 = v17;
  }
  else
  {
    v16 = 0;
    v18 = 0;
  }
  v6[19] = v16;
  v6[20] = v18;
  return swift_task_switch(_ss24AsyncPrefixWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY0_, v16, v18);
}

uint64_t _ss24AsyncPrefixWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY0_()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedConformanceWitness;
  int *v6;
  uint64_t v7;
  _QWORD *v8;
  int *v9;

  if ((**(_BYTE **)(v0 + 48) & 1) != 0)
  {
    v1 = *(_QWORD *)(v0 + 144);
    v2 = *(_QWORD *)(v0 + 128);
    v3 = *(_QWORD *)(v0 + 96);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 136) + 56))(*(_QWORD *)(v0 + 16), 1, 1, *(_QWORD *)(v0 + 104));
    swift_task_dealloc(v1);
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v6 = *(int **)(AssociatedConformanceWitness + 40);
    v7 = swift_checkMetadataState();
    v9 = (int *)((char *)v6 + *v6);
    v8 = (_QWORD *)swift_task_alloc(v6[1]);
    *(_QWORD *)(v0 + 168) = v8;
    *v8 = v0;
    v8[1] = _ss24AsyncPrefixWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ1_;
    return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))v9)(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 96), v7, AssociatedConformanceWitness);
  }
}

uint64_t _ss24AsyncPrefixWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ1_()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 168));
  if (v0)
    v3 = _ss24AsyncPrefixWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY5_;
  else
    v3 = _ss24AsyncPrefixWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY2_;
  return swift_task_switch(v3, *(unsigned __int8 **)(v2 + 152), *(_QWORD *)(v2 + 160));
}

uint64_t _ss24AsyncPrefixWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY2_()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  int **v12;
  int *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t (*v16)(_QWORD);

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 104);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(v1, *(_QWORD *)(v0 + 112));
    v4 = *(_QWORD *)(v0 + 144);
    v5 = *(_QWORD *)(v0 + 128);
    v6 = *(_QWORD *)(v0 + 96);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 136) + 56))(*(_QWORD *)(v0 + 16), 1, 1, *(_QWORD *)(v0 + 104));
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 144);
    v10 = *(_QWORD *)(v0 + 40);
    v9 = *(_QWORD *)(v0 + 48);
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    *(_QWORD *)(v0 + 176) = v11;
    v11(v8, v1, v3);
    v12 = (int **)(v9 + *(int *)(v10 + 40));
    v13 = *v12;
    *(_QWORD *)(v0 + 184) = v12[1];
    v14 = v13[1];
    v16 = (uint64_t (*)(_QWORD))((char *)v13 + *v13);
    swift_retain();
    v15 = (_QWORD *)swift_task_alloc(v14);
    *(_QWORD *)(v0 + 192) = v15;
    *v15 = v0;
    v15[1] = _ss24AsyncPrefixWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ3_;
    return v16(*(_QWORD *)(v0 + 144));
  }
}

uint64_t _ss24AsyncPrefixWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ3_(char a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 192);
  *(_BYTE *)(*v1 + 200) = a1;
  swift_task_dealloc(v3);
  swift_release();
  return swift_task_switch(_ss24AsyncPrefixWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY4_, *(unsigned __int8 **)(v2 + 152), *(_QWORD *)(v2 + 160));
}

uint64_t _ss24AsyncPrefixWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY4_()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_BYTE *)(v0 + 200) == 1)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 176))(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 104));
    v1 = 0;
  }
  else
  {
    v2 = *(_BYTE **)(v0 + 48);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 136) + 8))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 104));
    v1 = 1;
    *v2 = 1;
  }
  v3 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 96);
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 136) + 56))(*(_QWORD *)(v0 + 16), v1, 1, *(_QWORD *)(v0 + 104));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _ss24AsyncPrefixWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY5_()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 96);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 32))(*(_QWORD *)(v0 + 56), v3, *(_QWORD *)(v0 + 80));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncPrefixWhileSequence<A>.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1EE06A184);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCompactMapSequence<A, B>.Iterator;
  return AsyncPrefixWhileSequence.Iterator.next()(a1, a2);
}

uint64_t _ss24AsyncPrefixWhileSequenceV8IteratorVyx_GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5[2] = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[3] = AssociatedTypeWitness;
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5[4] = v11;
  v12 = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5[5] = v12;
  v13 = (_QWORD *)swift_task_alloc(dword_1EE06A18C);
  v5[6] = v13;
  *v13 = v5;
  v13[1] = _ss23AsyncCompactMapSequenceV8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return _ss24AsyncPrefixWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF(a1, a2, a3, a5, v12);
}

uint64_t AsyncPrefixWhileSequence.makeAsyncIterator()(uint64_t a1)
{
  return AsyncDropWhileSequence.makeAsyncIterator()(a1, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))AsyncPrefixWhileSequence.Iterator.init(_:predicate:));
}

uint64_t AsyncSequence.reduce<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8[8] = a7;
  v8[9] = v7;
  v8[6] = a5;
  v8[7] = a6;
  v8[4] = a3;
  v8[5] = a4;
  v8[2] = a1;
  v8[3] = a2;
  v10 = *(_QWORD *)(a6 - 8);
  v8[10] = v10;
  v8[11] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8[12] = AssociatedTypeWitness;
  v12 = type metadata accessor for Optional();
  v8[13] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v8[14] = v13;
  v8[15] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8[16] = v14;
  v8[17] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(a5 - 8);
  v8[18] = v15;
  v8[19] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = swift_getAssociatedTypeWitness();
  v8[20] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v8[21] = v17;
  v8[22] = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(AsyncSequence.reduce<A>(_:_:), 0, 0);
}

uint64_t AsyncSequence.reduce<A>(_:_:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedConformanceWitness;
  int *v7;
  _QWORD *v8;
  int *v10;

  v1 = v0[19];
  v2 = v0[18];
  v3 = v0[9];
  v4 = v0[8];
  v5 = v0[6];
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[10] + 16))(v0[2], v0[3], v0[7]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v3, v5);
  (*(void (**)(uint64_t, uint64_t))(v4 + 40))(v5, v4);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v0[23] = AssociatedConformanceWitness;
  v7 = *(int **)(AssociatedConformanceWitness + 32);
  v0[24] = v7;
  v10 = (int *)((char *)v7 + *v7);
  v8 = (_QWORD *)swift_task_alloc(v7[1]);
  v0[25] = v8;
  *v8 = v0;
  v8[1] = AsyncSequence.reduce<A>(_:_:);
  return ((uint64_t (*)(_QWORD, _QWORD, uint64_t))v10)(v0[15], v0[20], AssociatedConformanceWitness);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 200));
  if (v0)
  {
    v2[29] = v0;
    v4 = v2[21];
    v3 = v2[22];
    v5 = v2[20];
    v6 = v2[10];
    v7 = v2[7];
    v8 = v2[2];
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v7);
    v9 = AsyncSequence.reduce<A>(_:_:);
  }
  else
  {
    v9 = AsyncSequence.reduce<A>(_:_:);
  }
  return swift_task_switch(v9, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v11;
  _QWORD *v12;
  int *v13;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 96);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    v4 = *(_QWORD *)(v0 + 176);
    v5 = *(_QWORD *)(v0 + 152);
    v6 = *(_QWORD *)(v0 + 136);
    v7 = *(_QWORD *)(v0 + 104);
    v8 = *(_QWORD *)(v0 + 112);
    v9 = *(_QWORD *)(v0 + 88);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 168) + 8))(v4, *(_QWORD *)(v0 + 160));
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v1, v7);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v1);
    swift_task_dealloc(v9);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v11 = *(int **)(v0 + 32);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 136), v1, v3);
    v13 = (int *)((char *)v11 + *v11);
    v12 = (_QWORD *)swift_task_alloc(v11[1]);
    *(_QWORD *)(v0 + 208) = v12;
    *v12 = v0;
    v12[1] = AsyncSequence.reduce<A>(_:_:);
    return ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v13)(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 136));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)();
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  *(_QWORD *)(*(_QWORD *)v1 + 216) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v5 = v2[21];
    v4 = v2[22];
    v6 = v2[20];
    v8 = v2[16];
    v7 = v2[17];
    v9 = v2[12];
    v10 = v2[10];
    v11 = v2[7];
    v12 = v2[2];
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v12, v11);
    v13 = AsyncSequence.reduce<A>(_:_:);
  }
  else
  {
    v14 = v2[10];
    v15 = v2[7];
    v16 = v2[2];
    (*(void (**)(_QWORD, _QWORD))(v2[16] + 8))(v2[17], v2[12]);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v16, v15);
    v13 = AsyncSequence.reduce<A>(_:_:);
  }
  return swift_task_switch(v13, 0, 0);
}

{
  _QWORD *v0;
  int *v1;
  _QWORD *v2;
  int *v4;

  v1 = (int *)v0[24];
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[10] + 32))(v0[2], v0[11], v0[7]);
  v4 = (int *)((char *)v1 + *v1);
  v2 = (_QWORD *)swift_task_alloc(v1[1]);
  v0[28] = v2;
  *v2 = v0;
  v2[1] = AsyncSequence.reduce<A>(_:_:);
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v4)(v0[15], v0[20], v0[23]);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 224));
  if (v0)
  {
    v2[29] = v0;
    v4 = v2[21];
    v3 = v2[22];
    v5 = v2[20];
    v6 = v2[10];
    v7 = v2[7];
    v8 = v2[2];
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v7);
    v9 = AsyncSequence.reduce<A>(_:_:);
  }
  else
  {
    v9 = AsyncSequence.reduce<A>(_:_:);
  }
  return swift_task_switch(v9, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AsyncSequence.reduce<A>(into:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8[8] = a7;
  v8[9] = v7;
  v8[6] = a5;
  v8[7] = a6;
  v8[4] = a3;
  v8[5] = a4;
  v8[2] = a1;
  v8[3] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8[10] = AssociatedTypeWitness;
  v11 = type metadata accessor for Optional();
  v8[11] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v8[12] = v12;
  v8[13] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8[14] = v13;
  v8[15] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a5 - 8);
  v8[16] = v14;
  v8[17] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_getAssociatedTypeWitness();
  v8[18] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v8[19] = v16;
  v8[20] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(AsyncSequence.reduce<A>(into:_:), 0, 0);
}

uint64_t AsyncSequence.reduce<A>(into:_:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedConformanceWitness;
  int *v4;
  _QWORD *v5;
  int *v7;

  v1 = v0[8];
  v2 = v0[6];
  (*(void (**)(_QWORD, _QWORD, uint64_t))(v0[16] + 16))(v0[17], v0[9], v2);
  (*(void (**)(uint64_t, uint64_t))(v1 + 40))(v2, v1);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v0[21] = AssociatedConformanceWitness;
  v4 = *(int **)(AssociatedConformanceWitness + 32);
  v0[22] = v4;
  v7 = (int *)((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  v0[23] = v5;
  *v5 = v0;
  v5[1] = AsyncSequence.reduce<A>(into:_:);
  return ((uint64_t (*)(_QWORD, _QWORD, uint64_t))v7)(v0[13], v0[18], AssociatedConformanceWitness);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 184));
  if (v0)
  {
    v2[27] = v0;
    v4 = v2[19];
    v3 = v2[20];
    v5 = v2[18];
    v6 = v2[7];
    v7 = v2[3];
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v7, v6);
    v8 = AsyncSequence.reduce<A>(into:_:);
  }
  else
  {
    v8 = AsyncSequence.reduce<A>(into:_:);
  }
  return swift_task_switch(v8, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v13;
  _QWORD *v14;
  int *v15;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 80);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    v4 = *(_QWORD *)(v0 + 160);
    v5 = *(_QWORD *)(v0 + 136);
    v6 = *(_QWORD *)(v0 + 120);
    v7 = *(_QWORD *)(v0 + 88);
    v8 = *(_QWORD *)(v0 + 96);
    v9 = *(_QWORD *)(v0 + 56);
    v11 = *(_QWORD *)(v0 + 16);
    v10 = *(_QWORD *)(v0 + 24);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 152) + 8))(v4, *(_QWORD *)(v0 + 144));
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v1, v7);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v11, v10, v9);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v1);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v13 = *(int **)(v0 + 32);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 120), v1, v3);
    v15 = (int *)((char *)v13 + *v13);
    v14 = (_QWORD *)swift_task_alloc(v13[1]);
    *(_QWORD *)(v0 + 192) = v14;
    *v14 = v0;
    v14[1] = AsyncSequence.reduce<A>(into:_:);
    return ((uint64_t (*)(_QWORD, _QWORD))v15)(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 120));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 192);
  *(_QWORD *)(*(_QWORD *)v1 + 200) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v5 = v2[19];
    v4 = v2[20];
    v6 = v2[18];
    v8 = v2[14];
    v7 = v2[15];
    v9 = v2[10];
    v10 = v2[7];
    v11 = v2[3];
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v11, v10);
    v12 = AsyncSequence.reduce<A>(into:_:);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v2[14] + 8))(v2[15], v2[10]);
    v12 = AsyncSequence.reduce<A>(into:_:);
  }
  return swift_task_switch(v12, 0, 0);
}

{
  _QWORD *v0;
  int *v1;
  _QWORD *v2;
  int *v4;

  v1 = (int *)v0[22];
  v4 = (int *)((char *)v1 + *v1);
  v2 = (_QWORD *)swift_task_alloc(v1[1]);
  v0[26] = v2;
  *v2 = v0;
  v2[1] = AsyncSequence.reduce<A>(into:_:);
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v4)(v0[13], v0[18], v0[21]);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 208));
  if (v0)
  {
    v2[27] = v0;
    v4 = v2[19];
    v3 = v2[20];
    v5 = v2[18];
    v6 = v2[7];
    v7 = v2[3];
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v7, v6);
    v8 = AsyncSequence.reduce<A>(into:_:);
  }
  else
  {
    v8 = AsyncSequence.reduce<A>(into:_:);
  }
  return swift_task_switch(v8, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _contains<A>(_:where:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[7] = AssociatedTypeWitness;
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5[8] = v8;
  v5[9] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Optional();
  v5[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a4 - 8);
  v5[11] = v10;
  v5[12] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = swift_getAssociatedTypeWitness();
  v5[13] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v5[14] = v12;
  v5[15] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(_contains<A>(_:where:), 0, 0);
}

uint64_t _contains<A>(_:where:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedConformanceWitness;
  int *v4;
  _QWORD *v5;
  int *v7;

  v2 = v0[5];
  v1 = v0[6];
  (*(void (**)(_QWORD, _QWORD, uint64_t))(v0[11] + 16))(v0[12], v0[2], v2);
  (*(void (**)(uint64_t, uint64_t))(v1 + 40))(v2, v1);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v0[16] = AssociatedConformanceWitness;
  v4 = *(int **)(AssociatedConformanceWitness + 32);
  v0[17] = v4;
  v7 = (int *)((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  v0[18] = v5;
  *v5 = v0;
  v5[1] = _contains<A>(_:where:);
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v7)(v0[10], v0[13], v0[16]);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  *(_QWORD *)(*(_QWORD *)v1 + 152) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v2[14] + 8))(v2[15], v2[13]);
    v4 = _contains<A>(_:where:);
  }
  else
  {
    v4 = _contains<A>(_:where:);
  }
  return swift_task_switch(v4, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v9;
  _QWORD *v10;
  uint64_t (*v11)(_QWORD);

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  *(_DWORD *)(v0 + 176) = v4;
  if (v4 == 1)
  {
    v5 = *(_QWORD *)(v0 + 120);
    v6 = *(_QWORD *)(v0 + 96);
    v7 = *(_QWORD *)(v0 + 72);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(v5, *(_QWORD *)(v0 + 104));
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v1);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(BOOL))(v0 + 8))(*(_DWORD *)(v0 + 176) != 1);
  }
  else
  {
    v9 = *(int **)(v0 + 24);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(*(_QWORD *)(v0 + 72), v1, v2);
    v11 = (uint64_t (*)(_QWORD))((char *)v9 + *v9);
    v10 = (_QWORD *)swift_task_alloc(v9[1]);
    *(_QWORD *)(v0 + 160) = v10;
    *v10 = v0;
    v10[1] = _contains<A>(_:where:);
    return v11(*(_QWORD *)(v0 + 72));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v6;
  _QWORD *v7;
  int *v8;

  if ((*(_BYTE *)(v0 + 180) & 1) != 0)
  {
    v1 = *(_QWORD *)(v0 + 120);
    v2 = *(_QWORD *)(v0 + 96);
    v4 = *(_QWORD *)(v0 + 72);
    v3 = *(_QWORD *)(v0 + 80);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(v1, *(_QWORD *)(v0 + 104));
    swift_task_dealloc(v1);
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    return (*(uint64_t (**)(BOOL))(v0 + 8))(*(_DWORD *)(v0 + 176) != 1);
  }
  else
  {
    v6 = *(int **)(v0 + 136);
    v8 = (int *)((char *)v6 + *v6);
    v7 = (_QWORD *)swift_task_alloc(v6[1]);
    *(_QWORD *)(v0 + 144) = v7;
    *v7 = v0;
    v7[1] = _contains<A>(_:where:);
    return ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v8)(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 128));
  }
}

uint64_t _contains<A>(_:where:)(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 160);
  *(_QWORD *)(*v2 + 168) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v7 = *(_QWORD *)(v4 + 112);
    v6 = *(_QWORD *)(v4 + 120);
    v8 = *(_QWORD *)(v4 + 104);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v4 + 64) + 8))(*(_QWORD *)(v4 + 72), *(_QWORD *)(v4 + 56));
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    v9 = _contains<A>(_:where:);
  }
  else
  {
    v11 = *(_QWORD *)(v4 + 64);
    v10 = *(_QWORD *)(v4 + 72);
    v12 = *(_QWORD *)(v4 + 56);
    *(_BYTE *)(v4 + 180) = a1 & 1;
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    v9 = _contains<A>(_:where:);
  }
  return swift_task_switch(v9, 0, 0);
}

uint64_t AsyncSequence.contains(where:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[7] = AssociatedTypeWitness;
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5[8] = v8;
  v5[9] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Optional();
  v5[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a3 - 8);
  v5[11] = v10;
  v5[12] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = swift_getAssociatedTypeWitness();
  v5[13] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v5[14] = v12;
  v5[15] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(AsyncSequence.contains(where:), 0, 0);
}

uint64_t AsyncSequence.contains(where:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedConformanceWitness;
  int *v4;
  _QWORD *v5;
  int *v7;

  v1 = v0[5];
  v2 = v0[4];
  (*(void (**)(_QWORD, _QWORD, uint64_t))(v0[11] + 16))(v0[12], v0[6], v2);
  (*(void (**)(uint64_t, uint64_t))(v1 + 40))(v2, v1);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v0[16] = AssociatedConformanceWitness;
  v4 = *(int **)(AssociatedConformanceWitness + 32);
  v0[17] = v4;
  v7 = (int *)((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  v0[18] = v5;
  *v5 = v0;
  v5[1] = AsyncSequence.contains(where:);
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v7)(v0[10], v0[13], v0[16]);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  *(_QWORD *)(*(_QWORD *)v1 + 152) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v2[14] + 8))(v2[15], v2[13]);
    v4 = AsyncSequence.contains(where:);
  }
  else
  {
    v4 = AsyncSequence.contains(where:);
  }
  return swift_task_switch(v4, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v9;
  _QWORD *v10;
  uint64_t (*v11)(_QWORD);

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  *(_DWORD *)(v0 + 176) = v4;
  if (v4 == 1)
  {
    v5 = *(_QWORD *)(v0 + 120);
    v6 = *(_QWORD *)(v0 + 96);
    v7 = *(_QWORD *)(v0 + 72);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(v5, *(_QWORD *)(v0 + 104));
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v1);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(BOOL))(v0 + 8))(*(_DWORD *)(v0 + 176) != 1);
  }
  else
  {
    v9 = *(int **)(v0 + 16);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(*(_QWORD *)(v0 + 72), v1, v2);
    v11 = (uint64_t (*)(_QWORD))((char *)v9 + *v9);
    v10 = (_QWORD *)swift_task_alloc(v9[1]);
    *(_QWORD *)(v0 + 160) = v10;
    *v10 = v0;
    v10[1] = AsyncSequence.contains(where:);
    return v11(*(_QWORD *)(v0 + 72));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v6;
  _QWORD *v7;
  int *v8;

  if ((*(_BYTE *)(v0 + 180) & 1) != 0)
  {
    v1 = *(_QWORD *)(v0 + 120);
    v2 = *(_QWORD *)(v0 + 96);
    v4 = *(_QWORD *)(v0 + 72);
    v3 = *(_QWORD *)(v0 + 80);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(v1, *(_QWORD *)(v0 + 104));
    swift_task_dealloc(v1);
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    return (*(uint64_t (**)(BOOL))(v0 + 8))(*(_DWORD *)(v0 + 176) != 1);
  }
  else
  {
    v6 = *(int **)(v0 + 136);
    v8 = (int *)((char *)v6 + *v6);
    v7 = (_QWORD *)swift_task_alloc(v6[1]);
    *(_QWORD *)(v0 + 144) = v7;
    *v7 = v0;
    v7[1] = AsyncSequence.contains(where:);
    return ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v8)(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 128));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t AsyncSequence.contains(where:)(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 160);
  *(_QWORD *)(*v2 + 168) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v7 = *(_QWORD *)(v4 + 112);
    v6 = *(_QWORD *)(v4 + 120);
    v8 = *(_QWORD *)(v4 + 104);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v4 + 64) + 8))(*(_QWORD *)(v4 + 72), *(_QWORD *)(v4 + 56));
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    v9 = AsyncSequence.contains(where:);
  }
  else
  {
    v11 = *(_QWORD *)(v4 + 64);
    v10 = *(_QWORD *)(v4 + 72);
    v12 = *(_QWORD *)(v4 + 56);
    *(_BYTE *)(v4 + 180) = a1 & 1;
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    v9 = AsyncSequence.contains(where:);
  }
  return swift_task_switch(v9, 0, 0);
}

uint64_t AsyncSequence.allSatisfy(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch(AsyncSequence.allSatisfy(_:), 0, 0);
}

uint64_t AsyncSequence.allSatisfy(_:)()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  _QWORD *v3;

  v1 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 56) = v1;
  v2 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v1 + 32) = v2;
  v3 = (_QWORD *)swift_task_alloc(dword_1EE06A1AC);
  *(_QWORD *)(v0 + 64) = v3;
  *v3 = v0;
  v3[1] = AsyncSequence.allSatisfy(_:);
  return AsyncSequence.contains(where:)((uint64_t)&async function pointer to partial apply for closure #1 in AsyncSequence.allSatisfy(_:), v1, *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t AsyncSequence.allSatisfy(_:)(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(*v2 + 64);
  v5 = *v2;
  *(_QWORD *)(v5 + 72) = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(AsyncSequence.allSatisfy(_:), 0, 0);
  swift_task_dealloc(*(_QWORD *)(v5 + 56));
  return (*(uint64_t (**)(BOOL))(v5 + 8))((a1 & 1) == 0);
}

uint64_t closure #1 in AsyncSequence.allSatisfy(_:)(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = closure #1 in AsyncSequence.allSatisfy(_:);
  return v6(a1);
}

uint64_t closure #1 in AsyncSequence.allSatisfy(_:)(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;

  v4 = *(_QWORD *)(*v2 + 16);
  v5 = *v2;
  swift_task_dealloc(v4);
  if (v1)
    v6 = 0;
  else
    v6 = (a1 & 1) == 0;
  return (*(uint64_t (**)(_BOOL8))(v5 + 8))(v6);
}

uint64_t AsyncSequence<>.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[7] = AssociatedTypeWitness;
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5[8] = v8;
  v5[9] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Optional();
  v5[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a2 - 8);
  v5[11] = v10;
  v5[12] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = swift_getAssociatedTypeWitness();
  v5[13] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v5[14] = v12;
  v5[15] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(AsyncSequence<>.contains(_:), 0, 0);
}

uint64_t AsyncSequence<>.contains(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedConformanceWitness;
  int *v4;
  _QWORD *v5;
  int *v7;

  v2 = v0[3];
  v1 = v0[4];
  (*(void (**)(_QWORD, _QWORD, uint64_t))(v0[11] + 16))(v0[12], v0[6], v2);
  (*(void (**)(uint64_t, uint64_t))(v1 + 40))(v2, v1);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v0[16] = AssociatedConformanceWitness;
  v4 = *(int **)(AssociatedConformanceWitness + 32);
  v0[17] = v4;
  v7 = (int *)((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  v0[18] = v5;
  *v5 = v0;
  v5[1] = AsyncSequence<>.contains(_:);
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v7)(v0[10], v0[13], v0[16]);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  *(_QWORD *)(*(_QWORD *)v1 + 152) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v2[14] + 8))(v2[15], v2[13]);
    v4 = AsyncSequence<>.contains(_:);
  }
  else
  {
    v4 = AsyncSequence<>.contains(_:);
  }
  return swift_task_switch(v4, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v11;
  _QWORD *v12;
  int *v13;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  if (v4 == 1)
    goto LABEL_4;
  v5 = *(_QWORD *)(v0 + 72);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v5, v1, v2);
  v6 = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) != 0)
  {
    v1 = *(_QWORD *)(v0 + 80);
LABEL_4:
    v7 = *(_QWORD *)(v0 + 120);
    v8 = *(_QWORD *)(v0 + 96);
    v9 = *(_QWORD *)(v0 + 72);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(v7, *(_QWORD *)(v0 + 104));
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v1);
    swift_task_dealloc(v9);
    return (*(uint64_t (**)(BOOL))(v0 + 8))(v4 != 1);
  }
  v11 = *(int **)(v0 + 136);
  v13 = (int *)((char *)v11 + *v11);
  v12 = (_QWORD *)swift_task_alloc(v11[1]);
  *(_QWORD *)(v0 + 144) = v12;
  *v12 = v0;
  v12[1] = AsyncSequence<>.contains(_:);
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v13)(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 128));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t _first<A>(_:where:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[8] = AssociatedTypeWitness;
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6[9] = v9;
  v6[10] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Optional();
  v6[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a5 - 8);
  v6[12] = v11;
  v6[13] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = swift_getAssociatedTypeWitness();
  v6[14] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v6[15] = v13;
  v6[16] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(_first<A>(_:where:), 0, 0);
}

uint64_t _first<A>(_:where:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedConformanceWitness;
  int *v4;
  _QWORD *v5;
  int *v7;

  v2 = v0[6];
  v1 = v0[7];
  (*(void (**)(_QWORD, _QWORD, uint64_t))(v0[12] + 16))(v0[13], v0[3], v2);
  (*(void (**)(uint64_t, uint64_t))(v1 + 40))(v2, v1);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v0[17] = AssociatedConformanceWitness;
  v4 = *(int **)(AssociatedConformanceWitness + 32);
  v0[18] = v4;
  v7 = (int *)((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  v0[19] = v5;
  *v5 = v0;
  v5[1] = _first<A>(_:where:);
  return ((uint64_t (*)(_QWORD, _QWORD, uint64_t))v7)(v0[11], v0[14], AssociatedConformanceWitness);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v3)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 152));
  if (v0)
  {
    v2[24] = v0;
    (*(void (**)(_QWORD, _QWORD))(v2[15] + 8))(v2[16], v2[14]);
    v3 = _first<A>(_:where:);
  }
  else
  {
    v3 = _first<A>(_:where:);
  }
  return swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int *v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  _QWORD *v12;
  uint64_t (*v13)(_QWORD);

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 112));
    v4 = *(_QWORD *)(v0 + 128);
    v5 = *(_QWORD *)(v0 + 104);
    v7 = *(_QWORD *)(v0 + 80);
    v6 = *(_QWORD *)(v0 + 88);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 72) + 56))(*(_QWORD *)(v0 + 16), 1, 1, *(_QWORD *)(v0 + 64));
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 80);
    v10 = *(int **)(v0 + 32);
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32);
    *(_QWORD *)(v0 + 160) = v11;
    v11(v9, v1, v2);
    v13 = (uint64_t (*)(_QWORD))((char *)v10 + *v10);
    v12 = (_QWORD *)swift_task_alloc(v10[1]);
    *(_QWORD *)(v0 + 168) = v12;
    *v12 = v0;
    v12[1] = _first<A>(_:where:);
    return v13(*(_QWORD *)(v0 + 80));
  }
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v10;
  _QWORD *v11;
  int *v12;

  if (*(_BYTE *)(v0 + 200) == 1)
  {
    v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 160);
    v2 = *(_QWORD *)(v0 + 80);
    v3 = *(_QWORD *)(v0 + 64);
    v4 = *(_QWORD *)(v0 + 16);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 112));
    v1(v4, v2, v3);
    v5 = *(_QWORD *)(v0 + 128);
    v6 = *(_QWORD *)(v0 + 104);
    v8 = *(_QWORD *)(v0 + 80);
    v7 = *(_QWORD *)(v0 + 88);
    (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 72) + 56))(*(_QWORD *)(v0 + 16), 0, 1, *(_QWORD *)(v0 + 64));
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v10 = *(int **)(v0 + 144);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
    v12 = (int *)((char *)v10 + *v10);
    v11 = (_QWORD *)swift_task_alloc(v10[1]);
    *(_QWORD *)(v0 + 184) = v11;
    *v11 = v0;
    v11[1] = _first<A>(_:where:);
    return ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v12)(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 136));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v3)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 184));
  if (v0)
  {
    v2[24] = v0;
    (*(void (**)(_QWORD, _QWORD))(v2[15] + 8))(v2[16], v2[14]);
    v3 = _first<A>(_:where:);
  }
  else
  {
    v3 = _first<A>(_:where:);
  }
  return swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _first<A>(_:where:)(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 168);
  *(_QWORD *)(*v2 + 176) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v7 = *(_QWORD *)(v4 + 120);
    v6 = *(_QWORD *)(v4 + 128);
    v8 = *(_QWORD *)(v4 + 112);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v4 + 72) + 8))(*(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 64));
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    v9 = _first<A>(_:where:);
  }
  else
  {
    *(_BYTE *)(v4 + 200) = a1 & 1;
    v9 = _first<A>(_:where:);
  }
  return swift_task_switch(v9, 0, 0);
}

uint64_t AsyncSequence.first(where:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[8] = AssociatedTypeWitness;
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6[9] = v9;
  v6[10] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Optional();
  v6[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a4 - 8);
  v6[12] = v11;
  v6[13] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = swift_getAssociatedTypeWitness();
  v6[14] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v6[15] = v13;
  v6[16] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(AsyncSequence.first(where:), 0, 0);
}

uint64_t AsyncSequence.first(where:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedConformanceWitness;
  int *v4;
  _QWORD *v5;
  int *v7;

  v1 = v0[6];
  v2 = v0[5];
  (*(void (**)(_QWORD, _QWORD, uint64_t))(v0[12] + 16))(v0[13], v0[7], v2);
  (*(void (**)(uint64_t, uint64_t))(v1 + 40))(v2, v1);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v0[17] = AssociatedConformanceWitness;
  v4 = *(int **)(AssociatedConformanceWitness + 32);
  v0[18] = v4;
  v7 = (int *)((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  v0[19] = v5;
  *v5 = v0;
  v5[1] = AsyncSequence.first(where:);
  return ((uint64_t (*)(_QWORD, _QWORD, uint64_t))v7)(v0[11], v0[14], AssociatedConformanceWitness);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v3)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 152));
  if (v0)
  {
    v2[20] = v0;
    (*(void (**)(_QWORD, _QWORD))(v2[15] + 8))(v2[16], v2[14]);
    v3 = AsyncSequence.first(where:);
  }
  else
  {
    v3 = AsyncSequence.first(where:);
  }
  return swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int *v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  _QWORD *v12;
  uint64_t (*v13)(_QWORD);

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 112));
    v4 = *(_QWORD *)(v0 + 128);
    v5 = *(_QWORD *)(v0 + 104);
    v7 = *(_QWORD *)(v0 + 80);
    v6 = *(_QWORD *)(v0 + 88);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 72) + 56))(*(_QWORD *)(v0 + 16), 1, 1, *(_QWORD *)(v0 + 64));
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 80);
    v10 = *(int **)(v0 + 24);
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32);
    *(_QWORD *)(v0 + 168) = v11;
    v11(v9, v1, v2);
    v13 = (uint64_t (*)(_QWORD))((char *)v10 + *v10);
    v12 = (_QWORD *)swift_task_alloc(v10[1]);
    *(_QWORD *)(v0 + 176) = v12;
    *v12 = v0;
    v12[1] = AsyncSequence.first(where:);
    return v13(*(_QWORD *)(v0 + 80));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v10;
  _QWORD *v11;
  int *v12;

  if (*(_BYTE *)(v0 + 200) == 1)
  {
    v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 168);
    v2 = *(_QWORD *)(v0 + 80);
    v3 = *(_QWORD *)(v0 + 64);
    v4 = *(_QWORD *)(v0 + 16);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 112));
    v1(v4, v2, v3);
    v5 = *(_QWORD *)(v0 + 128);
    v6 = *(_QWORD *)(v0 + 104);
    v8 = *(_QWORD *)(v0 + 80);
    v7 = *(_QWORD *)(v0 + 88);
    (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 72) + 56))(*(_QWORD *)(v0 + 16), 0, 1, *(_QWORD *)(v0 + 64));
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v10 = *(int **)(v0 + 144);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
    v12 = (int *)((char *)v10 + *v10);
    v11 = (_QWORD *)swift_task_alloc(v10[1]);
    *(_QWORD *)(v0 + 192) = v11;
    *v11 = v0;
    v11[1] = AsyncSequence.first(where:);
    return ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v12)(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 136));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v3)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 192));
  if (v0)
  {
    v2[20] = v0;
    (*(void (**)(_QWORD, _QWORD))(v2[15] + 8))(v2[16], v2[14]);
    v3 = AsyncSequence.first(where:);
  }
  else
  {
    v3 = AsyncSequence.first(where:);
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t AsyncSequence.first(where:)(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 176);
  *(_QWORD *)(*v2 + 184) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v7 = *(_QWORD *)(v4 + 120);
    v6 = *(_QWORD *)(v4 + 128);
    v8 = *(_QWORD *)(v4 + 112);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v4 + 72) + 8))(*(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 64));
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    v9 = AsyncSequence.first(where:);
  }
  else
  {
    *(_BYTE *)(v4 + 200) = a1 & 1;
    v9 = AsyncSequence.first(where:);
  }
  return swift_task_switch(v9, 0, 0);
}

uint64_t AsyncSequence.min(by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[8] = AssociatedTypeWitness;
  v9 = type metadata accessor for Optional();
  v6[9] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[10] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[11] = swift_task_alloc(v11);
  v6[12] = swift_task_alloc(v11);
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6[13] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[14] = swift_task_alloc(v13);
  v6[15] = swift_task_alloc(v13);
  v14 = *(_QWORD *)(a4 - 8);
  v6[16] = v14;
  v6[17] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_getAssociatedTypeWitness();
  v6[18] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v6[19] = v16;
  v6[20] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(AsyncSequence.min(by:), 0, 0);
}

uint64_t AsyncSequence.min(by:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedConformanceWitness;
  int *v4;
  _QWORD *v5;
  int *v7;

  v1 = v0[6];
  v2 = v0[5];
  (*(void (**)(_QWORD, _QWORD, uint64_t))(v0[16] + 16))(v0[17], v0[7], v2);
  (*(void (**)(uint64_t, uint64_t))(v1 + 40))(v2, v1);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v0[21] = AssociatedConformanceWitness;
  v4 = *(int **)(AssociatedConformanceWitness + 32);
  v0[22] = v4;
  v7 = (int *)((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  v0[23] = v5;
  *v5 = v0;
  v5[1] = AsyncSequence.min(by:);
  return ((uint64_t (*)(_QWORD, _QWORD, uint64_t))v7)(v0[12], v0[18], AssociatedConformanceWitness);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 184);
  *(_QWORD *)(*(_QWORD *)v1 + 192) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v2[19] + 8))(v2[20], v2[18]);
    v4 = AsyncSequence.min(by:);
  }
  else
  {
    v4 = AsyncSequence.min(by:);
  }
  return swift_task_switch(v4, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  _QWORD *v17;
  int *v18;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  *(_QWORD *)(v0 + 200) = v4;
  if (v4(v1, 1, v3) == 1)
  {
    v5 = *(_QWORD *)(v0 + 72);
    v6 = *(_QWORD *)(v0 + 80);
    v7 = *(_QWORD *)(v0 + 16);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 8))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 144));
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v5);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56))(v7, 1, 1, v3);
    v8 = *(_QWORD *)(v0 + 136);
    v10 = *(_QWORD *)(v0 + 112);
    v9 = *(_QWORD *)(v0 + 120);
    v12 = *(_QWORD *)(v0 + 88);
    v11 = *(_QWORD *)(v0 + 96);
    swift_task_dealloc(*(_QWORD *)(v0 + 160));
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v14 = *(int **)(v0 + 176);
    v15 = *(_QWORD *)(v0 + 120);
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    *(_QWORD *)(v0 + 208) = v16;
    v16(v15, v1, v3);
    v18 = (int *)((char *)v14 + *v14);
    v17 = (_QWORD *)swift_task_alloc(v14[1]);
    *(_QWORD *)(v0 + 216) = v17;
    *v17 = v0;
    v17[1] = AsyncSequence.min(by:);
    return ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v18)(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 168));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  void (*v3)(_QWORD, _QWORD);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 216));
  if (v0)
  {
    v3 = *(void (**)(_QWORD, _QWORD))(v2[13] + 8);
    v2[32] = v0;
    v5 = v2[19];
    v4 = v2[20];
    v6 = v2[18];
    v3(v2[15], v2[8]);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    v7 = AsyncSequence.min(by:);
  }
  else
  {
    v7 = AsyncSequence.min(by:);
  }
  return swift_task_switch(v7, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v15;
  _QWORD *v16;
  int *v17;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 64);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 200))(v1, 1, v2) == 1)
  {
    v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 208);
    v4 = *(_QWORD *)(v0 + 120);
    v5 = *(_QWORD *)(v0 + 104);
    v6 = *(_QWORD *)(v0 + 72);
    v7 = *(_QWORD *)(v0 + 80);
    v8 = *(_QWORD *)(v0 + 16);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 8))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 144));
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1, v6);
    v3(v8, v4, v2);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v2);
    v9 = *(_QWORD *)(v0 + 136);
    v11 = *(_QWORD *)(v0 + 112);
    v10 = *(_QWORD *)(v0 + 120);
    v13 = *(_QWORD *)(v0 + 88);
    v12 = *(_QWORD *)(v0 + 96);
    swift_task_dealloc(*(_QWORD *)(v0 + 160));
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v15 = *(int **)(v0 + 24);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v0 + 208))(*(_QWORD *)(v0 + 112), v1, v2);
    v17 = (int *)((char *)v15 + *v15);
    v16 = (_QWORD *)swift_task_alloc(v15[1]);
    *(_QWORD *)(v0 + 224) = v16;
    *v16 = v0;
    v16[1] = AsyncSequence.min(by:);
    return ((uint64_t (*)(_QWORD, _QWORD))v17)(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
  }
}

{
  uint64_t v0;
  int v1;
  void (*v2)(uint64_t, uint64_t);
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  _QWORD *v8;
  int *v10;

  v1 = *(unsigned __int8 *)(v0 + 264);
  v2 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 104) + 8);
  *(_QWORD *)(v0 + 240) = v2;
  if (v1 == 1)
  {
    v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 208);
    v4 = *(_QWORD *)(v0 + 112);
    v5 = *(_QWORD *)(v0 + 120);
    v6 = *(_QWORD *)(v0 + 64);
    v2(v5, v6);
    v3(v5, v4, v6);
  }
  else
  {
    v2(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 64));
  }
  v7 = *(int **)(v0 + 176);
  v10 = (int *)((char *)v7 + *v7);
  v8 = (_QWORD *)swift_task_alloc(v7[1]);
  *(_QWORD *)(v0 + 248) = v8;
  *v8 = v0;
  v8[1] = AsyncSequence.min(by:);
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v10)(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 168));
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  void (*v3)(_QWORD, _QWORD);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 248));
  if (v0)
  {
    v3 = (void (*)(_QWORD, _QWORD))v2[30];
    v2[32] = v0;
    v5 = v2[19];
    v4 = v2[20];
    v6 = v2[18];
    v3(v2[15], v2[8]);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    v7 = AsyncSequence.min(by:);
  }
  else
  {
    v7 = AsyncSequence.min(by:);
  }
  return swift_task_switch(v7, 0, 0);
}

uint64_t AsyncSequence.min(by:)(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t (*v14)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 224);
  *(_QWORD *)(*v2 + 232) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v7 = *(_QWORD *)(v4 + 152);
    v6 = *(_QWORD *)(v4 + 160);
    v8 = *(_QWORD *)(v4 + 144);
    v9 = *(_QWORD *)(v4 + 112);
    v10 = *(_QWORD *)(v4 + 120);
    v11 = *(_QWORD *)(v4 + 104);
    v12 = *(_QWORD *)(v4 + 64);
    v13 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v13(v9, v12);
    v13(v10, v12);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    v14 = AsyncSequence.min(by:);
  }
  else
  {
    *(_BYTE *)(v4 + 264) = a1 & 1;
    v14 = AsyncSequence.min(by:);
  }
  return swift_task_switch(v14, 0, 0);
}

uint64_t AsyncSequence.max(by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[8] = AssociatedTypeWitness;
  v9 = type metadata accessor for Optional();
  v6[9] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[10] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[11] = swift_task_alloc(v11);
  v6[12] = swift_task_alloc(v11);
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6[13] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[14] = swift_task_alloc(v13);
  v6[15] = swift_task_alloc(v13);
  v14 = *(_QWORD *)(a4 - 8);
  v6[16] = v14;
  v6[17] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_getAssociatedTypeWitness();
  v6[18] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v6[19] = v16;
  v6[20] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(AsyncSequence.max(by:), 0, 0);
}

uint64_t AsyncSequence.max(by:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedConformanceWitness;
  int *v4;
  _QWORD *v5;
  int *v7;

  v1 = v0[6];
  v2 = v0[5];
  (*(void (**)(_QWORD, _QWORD, uint64_t))(v0[16] + 16))(v0[17], v0[7], v2);
  (*(void (**)(uint64_t, uint64_t))(v1 + 40))(v2, v1);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v0[21] = AssociatedConformanceWitness;
  v4 = *(int **)(AssociatedConformanceWitness + 32);
  v0[22] = v4;
  v7 = (int *)((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  v0[23] = v5;
  *v5 = v0;
  v5[1] = AsyncSequence.max(by:);
  return ((uint64_t (*)(_QWORD, _QWORD, uint64_t))v7)(v0[12], v0[18], AssociatedConformanceWitness);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 184);
  *(_QWORD *)(*(_QWORD *)v1 + 192) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v2[19] + 8))(v2[20], v2[18]);
    v4 = AsyncSequence.max(by:);
  }
  else
  {
    v4 = AsyncSequence.max(by:);
  }
  return swift_task_switch(v4, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  _QWORD *v17;
  int *v18;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  *(_QWORD *)(v0 + 200) = v4;
  if (v4(v1, 1, v3) == 1)
  {
    v5 = *(_QWORD *)(v0 + 72);
    v6 = *(_QWORD *)(v0 + 80);
    v7 = *(_QWORD *)(v0 + 16);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 8))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 144));
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v5);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56))(v7, 1, 1, v3);
    v8 = *(_QWORD *)(v0 + 136);
    v10 = *(_QWORD *)(v0 + 112);
    v9 = *(_QWORD *)(v0 + 120);
    v12 = *(_QWORD *)(v0 + 88);
    v11 = *(_QWORD *)(v0 + 96);
    swift_task_dealloc(*(_QWORD *)(v0 + 160));
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v14 = *(int **)(v0 + 176);
    v15 = *(_QWORD *)(v0 + 120);
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    *(_QWORD *)(v0 + 208) = v16;
    v16(v15, v1, v3);
    v18 = (int *)((char *)v14 + *v14);
    v17 = (_QWORD *)swift_task_alloc(v14[1]);
    *(_QWORD *)(v0 + 216) = v17;
    *v17 = v0;
    v17[1] = AsyncSequence.max(by:);
    return ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v18)(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 168));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  void (*v3)(_QWORD, _QWORD);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 216));
  if (v0)
  {
    v3 = *(void (**)(_QWORD, _QWORD))(v2[13] + 8);
    v2[32] = v0;
    v5 = v2[19];
    v4 = v2[20];
    v6 = v2[18];
    v3(v2[15], v2[8]);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    v7 = AsyncSequence.max(by:);
  }
  else
  {
    v7 = AsyncSequence.max(by:);
  }
  return swift_task_switch(v7, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v15;
  _QWORD *v16;
  int *v17;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 64);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 200))(v1, 1, v2) == 1)
  {
    v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 208);
    v4 = *(_QWORD *)(v0 + 120);
    v5 = *(_QWORD *)(v0 + 104);
    v6 = *(_QWORD *)(v0 + 72);
    v7 = *(_QWORD *)(v0 + 80);
    v8 = *(_QWORD *)(v0 + 16);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 8))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 144));
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1, v6);
    v3(v8, v4, v2);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v2);
    v9 = *(_QWORD *)(v0 + 136);
    v11 = *(_QWORD *)(v0 + 112);
    v10 = *(_QWORD *)(v0 + 120);
    v13 = *(_QWORD *)(v0 + 88);
    v12 = *(_QWORD *)(v0 + 96);
    swift_task_dealloc(*(_QWORD *)(v0 + 160));
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v15 = *(int **)(v0 + 24);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v0 + 208))(*(_QWORD *)(v0 + 112), v1, v2);
    v17 = (int *)((char *)v15 + *v15);
    v16 = (_QWORD *)swift_task_alloc(v15[1]);
    *(_QWORD *)(v0 + 224) = v16;
    *v16 = v0;
    v16[1] = AsyncSequence.max(by:);
    return ((uint64_t (*)(_QWORD, _QWORD))v17)(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 112));
  }
}

{
  uint64_t v0;
  int v1;
  void (*v2)(uint64_t, uint64_t);
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  _QWORD *v8;
  int *v10;

  v1 = *(unsigned __int8 *)(v0 + 264);
  v2 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 104) + 8);
  *(_QWORD *)(v0 + 240) = v2;
  if (v1 == 1)
  {
    v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 208);
    v4 = *(_QWORD *)(v0 + 112);
    v5 = *(_QWORD *)(v0 + 120);
    v6 = *(_QWORD *)(v0 + 64);
    v2(v5, v6);
    v3(v5, v4, v6);
  }
  else
  {
    v2(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 64));
  }
  v7 = *(int **)(v0 + 176);
  v10 = (int *)((char *)v7 + *v7);
  v8 = (_QWORD *)swift_task_alloc(v7[1]);
  *(_QWORD *)(v0 + 248) = v8;
  *v8 = v0;
  v8[1] = AsyncSequence.max(by:);
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v10)(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 168));
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  void (*v3)(_QWORD, _QWORD);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 248));
  if (v0)
  {
    v3 = (void (*)(_QWORD, _QWORD))v2[30];
    v2[32] = v0;
    v5 = v2[19];
    v4 = v2[20];
    v6 = v2[18];
    v3(v2[15], v2[8]);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    v7 = AsyncSequence.max(by:);
  }
  else
  {
    v7 = AsyncSequence.max(by:);
  }
  return swift_task_switch(v7, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AsyncSequence.max(by:)(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t (*v14)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 224);
  *(_QWORD *)(*v2 + 232) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v7 = *(_QWORD *)(v4 + 152);
    v6 = *(_QWORD *)(v4 + 160);
    v8 = *(_QWORD *)(v4 + 144);
    v9 = *(_QWORD *)(v4 + 112);
    v10 = *(_QWORD *)(v4 + 120);
    v11 = *(_QWORD *)(v4 + 104);
    v12 = *(_QWORD *)(v4 + 64);
    v13 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v13(v9, v12);
    v13(v10, v12);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    v14 = AsyncSequence.max(by:);
  }
  else
  {
    *(_BYTE *)(v4 + 264) = a1 & 1;
    v14 = AsyncSequence.max(by:);
  }
  return swift_task_switch(v14, 0, 0);
}

uint64_t AsyncSequence<>.min()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch(AsyncSequence<>.min(), 0, 0);
}

uint64_t AsyncSequence<>.min()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;

  v1 = v0[4];
  v2 = v0[5];
  v3 = v0[3];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = (_QWORD *)swift_allocObject();
  v0[7] = (uint64_t)v5;
  v5[2] = v3;
  v5[3] = v1;
  v5[4] = v2;
  v5[5] = AssociatedTypeWitness;
  v6 = (_QWORD *)swift_task_alloc(64);
  v0[8] = (uint64_t)v6;
  v6[2] = v3;
  v6[3] = v1;
  v6[4] = v2;
  v6[5] = partial apply for implicit closure #1 in AsyncSequence<>.min();
  v6[6] = v5;
  v7 = (_QWORD *)swift_task_alloc(dword_1EE06A1E4);
  v0[9] = (uint64_t)v7;
  *v7 = v0;
  v7[1] = AsyncSequence<>.min();
  return AsyncSequence.min(by:)(v0[2], (uint64_t)&async function pointer to partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.AsyncSequence.Element, @in_guaranteed A.AsyncSequence.Element) -> (@unowned Bool), (uint64_t)v6, v0[3], v0[4]);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *(_QWORD *)(*v1 + 72);
  v3 = *v1;
  *(_QWORD *)(v3 + 80) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(AsyncSequence<>.min(), 0, 0);
  v5 = *(_QWORD *)(v3 + 64);
  swift_release();
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed A.AsyncSequence.Element, @in_guaranteed A.AsyncSequence.Element) -> (@unowned Bool)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3;
  char v4;

  v4 = a3();
  return thunk for @escaping @callee_guaranteed (@in_guaranteed A.AsyncSequence.Element, @in_guaranteed A.AsyncSequence.Element) -> (@unowned Bool)(*(uint64_t (**)(uint64_t))(v3 + 8), v3, v4 & 1);
}

uint64_t AsyncSequence<>.max()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch(AsyncSequence<>.max(), 0, 0);
}

uint64_t AsyncSequence<>.max()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;

  v1 = v0[4];
  v2 = v0[5];
  v3 = v0[3];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = (_QWORD *)swift_allocObject();
  v0[7] = (uint64_t)v5;
  v5[2] = v3;
  v5[3] = v1;
  v5[4] = v2;
  v5[5] = AssociatedTypeWitness;
  v6 = (_QWORD *)swift_task_alloc(64);
  v0[8] = (uint64_t)v6;
  v6[2] = v3;
  v6[3] = v1;
  v6[4] = v2;
  v6[5] = partial apply for implicit closure #1 in AsyncSequence<>.min();
  v6[6] = v5;
  v7 = (_QWORD *)swift_task_alloc(dword_1EE06A1EC);
  v0[9] = (uint64_t)v7;
  *v7 = v0;
  v7[1] = AsyncSequence<>.max();
  return AsyncSequence.max(by:)(v0[2], (uint64_t)&thunk for @escaping @callee_guaranteed (@in_guaranteed A.AsyncSequence.Element, @in_guaranteed A.AsyncSequence.Element) -> (@unowned Bool)partial apply, (uint64_t)v6, v0[3], v0[4]);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *(_QWORD *)(*v1 + 72);
  v3 = *v1;
  *(_QWORD *)(v3 + 80) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(AsyncSequence<>.max(), 0, 0);
  v5 = *(_QWORD *)(v3 + 64);
  swift_release();
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_release();
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AsyncThrowingCompactMapSequence.init(_:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return AsyncCompactMapSequence.init(_:transform:)(a1, a2, a3, a4, a5, a6, type metadata accessor for AsyncThrowingCompactMapSequence, a7);
}

uint64_t (*AsyncThrowingCompactMapSequence.Iterator.baseIterator.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t (*AsyncThrowingCompactMapSequence.Iterator.finished.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t AsyncThrowingCompactMapSequence.Iterator.init(_:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return AsyncThrowingCompactMapSequence.Iterator.init(_:transform:)(a1, a2, a3, a4, a5, a6, type metadata accessor for AsyncThrowingCompactMapSequence.Iterator, a7);
}

uint64_t AsyncThrowingCompactMapSequence.Iterator.next()(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v3[5] = a2[3];
  v5 = type metadata accessor for Optional();
  v3[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[7] = v6;
  v3[8] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3[9] = a2[4];
  v3[10] = a2[2];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3[11] = AssociatedTypeWitness;
  v8 = type metadata accessor for Optional();
  v3[12] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[13] = v9;
  v3[14] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3[15] = v10;
  v3[16] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(AsyncThrowingCompactMapSequence.Iterator.next(), 0, 0);
}

uint64_t AsyncThrowingCompactMapSequence.Iterator.next()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedConformanceWitness;
  int *v5;
  uint64_t v6;
  _QWORD *v7;
  int *v8;

  if (*(_BYTE *)(*(_QWORD *)(v0 + 32) + *(int *)(*(_QWORD *)(v0 + 24) + 48)) == 1)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 40) - 8) + 56))(*(_QWORD *)(v0 + 16), 1, 1);
    v1 = *(_QWORD *)(v0 + 112);
    v2 = *(_QWORD *)(v0 + 64);
    swift_task_dealloc(*(_QWORD *)(v0 + 128));
    swift_task_dealloc(v1);
    swift_task_dealloc(v2);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 136) = swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    *(_QWORD *)(v0 + 144) = AssociatedConformanceWitness;
    v5 = *(int **)(AssociatedConformanceWitness + 32);
    *(_QWORD *)(v0 + 152) = v5;
    v6 = swift_checkMetadataState();
    v8 = (int *)((char *)v5 + *v5);
    v7 = (_QWORD *)swift_task_alloc(v5[1]);
    *(_QWORD *)(v0 + 160) = v7;
    *v7 = v0;
    v7[1] = AsyncThrowingCompactMapSequence.Iterator.next();
    return ((uint64_t (*)(_QWORD, uint64_t, _QWORD))v8)(*(_QWORD *)(v0 + 112), v6, *(_QWORD *)(v0 + 144));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  *(_QWORD *)(*(_QWORD *)v1 + 168) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = AsyncThrowingCompactMapSequence.Iterator.next();
  else
    v3 = AsyncThrowingCompactMapSequence.Iterator.next();
  return swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int **v13;
  int *v14;
  uint64_t v15;
  _QWORD *v16;
  int *v17;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 88);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    v5 = *(_QWORD *)(v0 + 32);
    v4 = *(_QWORD *)(v0 + 40);
    v6 = *(_QWORD *)(v0 + 16);
    v7 = *(_QWORD *)(v0 + 24);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 104) + 8))(v1, *(_QWORD *)(v0 + 96));
    *(_BYTE *)(v5 + *(int *)(v7 + 48)) = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v6, 1, 1, v4);
    v8 = *(_QWORD *)(v0 + 112);
    v9 = *(_QWORD *)(v0 + 64);
    swift_task_dealloc(*(_QWORD *)(v0 + 128));
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 24);
    v11 = *(_QWORD *)(v0 + 32);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 128), v1, v3);
    v13 = (int **)(v11 + *(int *)(v12 + 44));
    v14 = *v13;
    *(_QWORD *)(v0 + 176) = v13[1];
    v15 = v14[1];
    v17 = (int *)((char *)v14 + *v14);
    swift_retain();
    v16 = (_QWORD *)swift_task_alloc(v15);
    *(_QWORD *)(v0 + 184) = v16;
    *v16 = v0;
    v16[1] = AsyncThrowingCompactMapSequence.Iterator.next();
    return ((uint64_t (*)(_QWORD, _QWORD))v17)(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 128));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 184);
  *(_QWORD *)(*(_QWORD *)v1 + 192) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(_QWORD, _QWORD))(v2[15] + 8))(v2[16], v2[11]);
  swift_release();
  if (v0)
    v4 = AsyncThrowingCompactMapSequence.Iterator.next();
  else
    v4 = AsyncThrowingCompactMapSequence.Iterator.next();
  return swift_task_switch(v4, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v10;
  uint64_t v11;
  _QWORD *v12;
  int *v13;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) != 1)
  {
    v6 = *(_QWORD *)(v0 + 16);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v6, v1, v2);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v6, 0, 1, v2);
    goto LABEL_5;
  }
  v5 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(v1, *(_QWORD *)(v0 + 48));
  if (*(_BYTE *)(v4 + *(int *)(v5 + 48)) == 1)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v3 + 56))(*(_QWORD *)(v0 + 16), 1, 1, *(_QWORD *)(v0 + 40));
LABEL_5:
    v7 = *(_QWORD *)(v0 + 112);
    v8 = *(_QWORD *)(v0 + 64);
    swift_task_dealloc(*(_QWORD *)(v0 + 128));
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v10 = *(int **)(v0 + 152);
  v11 = swift_checkMetadataState();
  v13 = (int *)((char *)v10 + *v10);
  v12 = (_QWORD *)swift_task_alloc(v10[1]);
  *(_QWORD *)(v0 + 160) = v12;
  *v12 = v0;
  v12[1] = AsyncThrowingCompactMapSequence.Iterator.next();
  return ((uint64_t (*)(_QWORD, uint64_t, _QWORD))v13)(*(_QWORD *)(v0 + 112), v11, *(_QWORD *)(v0 + 144));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(*(_QWORD *)(v0 + 32) + *(int *)(*(_QWORD *)(v0 + 24) + 48)) = 1;
  swift_willThrow();
  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AsyncThrowingCompactMapSequence.Iterator.next(isolation:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjectType;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v5[7] = a4[3];
  v9 = type metadata accessor for Optional();
  v5[8] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[9] = v10;
  v5[10] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5[11] = a4[4];
  v5[12] = a4[2];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[13] = AssociatedTypeWitness;
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5[14] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[15] = swift_task_alloc(v13);
  v5[16] = swift_task_alloc(v13);
  v14 = swift_getAssociatedTypeWitness();
  v5[17] = v14;
  v15 = type metadata accessor for Optional();
  v5[18] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v5[19] = v16;
  v5[20] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v14 - 8);
  v5[21] = v17;
  v5[22] = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    ObjectType = swift_getObjectType();
    v19 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(ObjectType, a3);
    v21 = v20;
  }
  else
  {
    v19 = 0;
    v21 = 0;
  }
  v5[23] = v19;
  v5[24] = v21;
  return swift_task_switch(AsyncThrowingCompactMapSequence.Iterator.next(isolation:), v19, v21);
}

uint64_t AsyncThrowingCompactMapSequence.Iterator.next(isolation:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedConformanceWitness;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  int *v10;

  if (*(_BYTE *)(*(_QWORD *)(v0 + 48) + *(int *)(*(_QWORD *)(v0 + 40) + 48)) == 1)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 56) - 8) + 56))(*(_QWORD *)(v0 + 16), 1, 1);
    v1 = *(_QWORD *)(v0 + 160);
    v3 = *(_QWORD *)(v0 + 120);
    v2 = *(_QWORD *)(v0 + 128);
    v4 = *(_QWORD *)(v0 + 80);
    swift_task_dealloc(*(_QWORD *)(v0 + 176));
    swift_task_dealloc(v1);
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 200) = swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    *(_QWORD *)(v0 + 208) = AssociatedConformanceWitness;
    v7 = *(int **)(AssociatedConformanceWitness + 40);
    *(_QWORD *)(v0 + 216) = v7;
    v8 = swift_checkMetadataState();
    *(_QWORD *)(v0 + 224) = v8;
    v10 = (int *)((char *)v7 + *v7);
    v9 = (_QWORD *)swift_task_alloc(v7[1]);
    *(_QWORD *)(v0 + 232) = v9;
    *v9 = v0;
    v9[1] = AsyncThrowingCompactMapSequence.Iterator.next(isolation:);
    return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD))v10)(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 128), v8, *(_QWORD *)(v0 + 208));
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 232));
  if (v0)
    v3 = AsyncThrowingCompactMapSequence.Iterator.next(isolation:);
  else
    v3 = AsyncThrowingCompactMapSequence.Iterator.next(isolation:);
  return swift_task_switch(v3, *(unsigned __int8 **)(v2 + 184), *(_QWORD *)(v2 + 192));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  int **v15;
  int *v16;
  uint64_t v17;
  _QWORD *v18;
  int *v19;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 136);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    v5 = *(_QWORD *)(v0 + 48);
    v4 = *(_QWORD *)(v0 + 56);
    v6 = *(_QWORD *)(v0 + 40);
    v7 = *(_QWORD *)(v0 + 16);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 152) + 8))(v1, *(_QWORD *)(v0 + 144));
    *(_BYTE *)(v5 + *(int *)(v6 + 48)) = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v7, 1, 1, v4);
    v8 = *(_QWORD *)(v0 + 160);
    v10 = *(_QWORD *)(v0 + 120);
    v9 = *(_QWORD *)(v0 + 128);
    v11 = *(_QWORD *)(v0 + 80);
    swift_task_dealloc(*(_QWORD *)(v0 + 176));
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 40);
    v13 = *(_QWORD *)(v0 + 48);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 176), v1, v3);
    v15 = (int **)(v13 + *(int *)(v14 + 44));
    v16 = *v15;
    *(_QWORD *)(v0 + 240) = v15[1];
    v17 = v16[1];
    v19 = (int *)((char *)v16 + *v16);
    swift_retain();
    v18 = (_QWORD *)swift_task_alloc(v17);
    *(_QWORD *)(v0 + 248) = v18;
    *v18 = v0;
    v18[1] = AsyncThrowingCompactMapSequence.Iterator.next(isolation:);
    return ((uint64_t (*)(_QWORD, _QWORD))v19)(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 176));
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 248);
  *(_QWORD *)(*v1 + 256) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v2 + 168) + 8))(*(_QWORD *)(v2 + 176), *(_QWORD *)(v2 + 136));
  swift_release();
  if (v0)
    v4 = AsyncThrowingCompactMapSequence.Iterator.next(isolation:);
  else
    v4 = AsyncThrowingCompactMapSequence.Iterator.next(isolation:);
  return swift_task_switch(v4, *(unsigned __int8 **)(v2 + 184), *(_QWORD *)(v2 + 192));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v12;
  uint64_t v13;
  _QWORD *v14;
  int *v15;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) != 1)
  {
    v6 = *(_QWORD *)(v0 + 16);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v6, v1, v2);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v6, 0, 1, v2);
    goto LABEL_5;
  }
  v5 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 48);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(v1, *(_QWORD *)(v0 + 64));
  if (*(_BYTE *)(v4 + *(int *)(v5 + 48)) == 1)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v3 + 56))(*(_QWORD *)(v0 + 16), 1, 1, *(_QWORD *)(v0 + 56));
LABEL_5:
    v7 = *(_QWORD *)(v0 + 160);
    v9 = *(_QWORD *)(v0 + 120);
    v8 = *(_QWORD *)(v0 + 128);
    v10 = *(_QWORD *)(v0 + 80);
    swift_task_dealloc(*(_QWORD *)(v0 + 176));
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v12 = *(int **)(v0 + 216);
  v13 = swift_checkMetadataState();
  *(_QWORD *)(v0 + 224) = v13;
  v15 = (int *)((char *)v12 + *v12);
  v14 = (_QWORD *)swift_task_alloc(v12[1]);
  *(_QWORD *)(v0 + 232) = v14;
  *v14 = v0;
  v14[1] = AsyncThrowingCompactMapSequence.Iterator.next(isolation:);
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD))v15)(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 128), v13, *(_QWORD *)(v0 + 208));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 112) + 32);
  v3(v1, *(_QWORD *)(v0 + 128), v2);
  swift_getAssociatedConformanceWitness();
  swift_allocError();
  v3(v4, v1, v2);
  v5 = *(_QWORD *)(v0 + 160);
  v7 = *(_QWORD *)(v0 + 120);
  v6 = *(_QWORD *)(v0 + 128);
  v8 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(*(_QWORD *)(v0 + 48) + *(int *)(*(_QWORD *)(v0 + 40) + 48)) = 1;
  swift_willThrow();
  v1 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncThrowingCompactMapSequence<A, B>.Iterator(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1EE06A21C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCompactMapSequence<A, B>.Iterator;
  return AsyncThrowingCompactMapSequence.Iterator.next()(a1, a2);
}

uint64_t _ss31AsyncThrowingCompactMapSequenceV8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  _QWORD *v10;

  *(_QWORD *)(v5 + 16) = a4;
  v10 = (_QWORD *)swift_task_alloc(dword_1EE06A224);
  *(_QWORD *)(v5 + 24) = v10;
  *v10 = v5;
  v10[1] = _ss31AsyncThrowingCompactMapSequenceV8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return AsyncThrowingCompactMapSequence.Iterator.next(isolation:)(a1, a2, a3, a5);
}

uint64_t AsyncThrowingCompactMapSequence.makeAsyncIterator()(uint64_t a1)
{
  return AsyncCompactMapSequence.makeAsyncIterator()(a1, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))AsyncThrowingCompactMapSequence.Iterator.init(_:transform:));
}

uint64_t AsyncThrowingDropWhileSequence.init(_:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return AsyncDropWhileSequence.init(_:predicate:)(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AsyncThrowingDropWhileSequence, a6);
}

uint64_t (*AsyncThrowingDropWhileSequence.Iterator.baseIterator.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t (*AsyncThrowingDropWhileSequence.Iterator.finished.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t AsyncThrowingDropWhileSequence.Iterator.doneDropping.getter(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 44));
}

uint64_t AsyncThrowingDropWhileSequence.Iterator.doneDropping.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + *(int *)(a2 + 44)) = result;
  return result;
}

uint64_t (*AsyncThrowingDropWhileSequence.Iterator.doneDropping.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t AsyncThrowingDropWhileSequence.Iterator.init(_:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int *v10;
  uint64_t AssociatedTypeWitness;
  uint64_t result;
  _QWORD *v13;

  v10 = (int *)type metadata accessor for AsyncThrowingDropWhileSequence.Iterator(0, a4, a5, a4);
  *(_BYTE *)(a6 + v10[10]) = 0;
  *(_BYTE *)(a6 + v10[11]) = 0;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a6, a1, AssociatedTypeWitness);
  v13 = (_QWORD *)(a6 + v10[9]);
  *v13 = a2;
  v13[1] = a3;
  return result;
}

uint64_t AsyncThrowingDropWhileSequence.Iterator.next()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v3[5] = *(_QWORD *)(a2 + 24);
  v3[6] = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3[7] = AssociatedTypeWitness;
  v5 = type metadata accessor for Optional();
  v3[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[9] = v6;
  v3[10] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3[11] = v7;
  v3[12] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(AsyncThrowingDropWhileSequence.Iterator.next(), 0, 0);
}

uint64_t AsyncThrowingDropWhileSequence.Iterator.next()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  int *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);

  v2 = *(_QWORD *)(v0 + 24);
  v1 = *(_QWORD *)(v0 + 32);
  if ((*(_BYTE *)(v1 + *(int *)(v2 + 40)) & 1) != 0)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 56))(*(_QWORD *)(v0 + 16), 1, 1, *(_QWORD *)(v0 + 56));
    v3 = *(_QWORD *)(v0 + 80);
    swift_task_dealloc(*(_QWORD *)(v0 + 96));
    swift_task_dealloc(v3);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v5 = *(_BYTE *)(v1 + *(int *)(v2 + 44));
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if ((v5 & 1) != 0)
    {
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v8 = *(int **)(AssociatedConformanceWitness + 32);
      v9 = swift_checkMetadataState();
      v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
      v10 = (_QWORD *)swift_task_alloc(v8[1]);
      *(_QWORD *)(v0 + 176) = v10;
      *v10 = v0;
      v10[1] = AsyncThrowingDropWhileSequence.Iterator.next();
      v11 = *(_QWORD *)(v0 + 16);
      v12 = v9;
      v13 = AssociatedConformanceWitness;
    }
    else
    {
      *(_QWORD *)(v0 + 104) = AssociatedTypeWitness;
      v14 = swift_getAssociatedConformanceWitness();
      *(_QWORD *)(v0 + 112) = v14;
      v15 = *(int **)(v14 + 32);
      *(_QWORD *)(v0 + 120) = v15;
      v16 = swift_checkMetadataState();
      v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v15 + *v15);
      v17 = (_QWORD *)swift_task_alloc(v15[1]);
      *(_QWORD *)(v0 + 128) = v17;
      *v17 = v0;
      v17[1] = AsyncThrowingDropWhileSequence.Iterator.next();
      v13 = *(_QWORD *)(v0 + 112);
      v11 = *(_QWORD *)(v0 + 80);
      v12 = v16;
    }
    return v18(v11, v12, v13);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = AsyncThrowingDropWhileSequence.Iterator.next();
  else
    v3 = AsyncThrowingDropWhileSequence.Iterator.next();
  return swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  int **v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t (*v14)(_QWORD);

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 56);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(v1, *(_QWORD *)(v0 + 64));
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 56))(*(_QWORD *)(v0 + 16), 1, 1, *(_QWORD *)(v0 + 56));
    v4 = *(_QWORD *)(v0 + 80);
    swift_task_dealloc(*(_QWORD *)(v0 + 96));
    swift_task_dealloc(v4);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 96);
    v8 = *(_QWORD *)(v0 + 24);
    v7 = *(_QWORD *)(v0 + 32);
    v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    *(_QWORD *)(v0 + 144) = v9;
    v9(v6, v1, v3);
    v10 = (int **)(v7 + *(int *)(v8 + 36));
    v11 = *v10;
    *(_QWORD *)(v0 + 152) = v10[1];
    v12 = v11[1];
    v14 = (uint64_t (*)(_QWORD))((char *)v11 + *v11);
    swift_retain();
    v13 = (_QWORD *)swift_task_alloc(v12);
    *(_QWORD *)(v0 + 160) = v13;
    *v13 = v0;
    v13[1] = AsyncThrowingDropWhileSequence.Iterator.next();
    return v14(*(_QWORD *)(v0 + 96));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedConformanceWitness;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  if ((*(_BYTE *)(v0 + 184) & 1) == 0)
  {
    v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 144);
    v6 = *(_QWORD *)(v0 + 96);
    v7 = *(_QWORD *)(v0 + 16);
    *(_BYTE *)(v3 + *(int *)(v2 + 44)) = 1;
    v5(v7, v6, v1);
    v4 = 0;
    goto LABEL_5;
  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 56));
  if ((*(_BYTE *)(v3 + *(int *)(v2 + 40)) & 1) != 0)
  {
    v4 = 1;
LABEL_5:
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 56))(*(_QWORD *)(v0 + 16), v4, 1, *(_QWORD *)(v0 + 56));
    v8 = *(_QWORD *)(v0 + 80);
    swift_task_dealloc(*(_QWORD *)(v0 + 96));
    swift_task_dealloc(v8);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  if (*(_BYTE *)(*(_QWORD *)(v0 + 32) + *(int *)(*(_QWORD *)(v0 + 24) + 44)) == 1)
  {
    swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v11 = *(int **)(AssociatedConformanceWitness + 32);
    v12 = swift_checkMetadataState();
    v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v11 + *v11);
    v13 = (_QWORD *)swift_task_alloc(v11[1]);
    *(_QWORD *)(v0 + 176) = v13;
    *v13 = v0;
    v13[1] = AsyncThrowingDropWhileSequence.Iterator.next();
    v14 = *(_QWORD *)(v0 + 16);
    v15 = v12;
    v16 = AssociatedConformanceWitness;
  }
  else
  {
    v17 = *(int **)(v0 + 120);
    v18 = swift_checkMetadataState();
    v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v17 + *v17);
    v19 = (_QWORD *)swift_task_alloc(v17[1]);
    *(_QWORD *)(v0 + 128) = v19;
    *v19 = v0;
    v19[1] = AsyncThrowingDropWhileSequence.Iterator.next();
    v16 = *(_QWORD *)(v0 + 112);
    v14 = *(_QWORD *)(v0 + 80);
    v15 = v18;
  }
  return v20(v14, v15, v16);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = *v0;
  v5 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 176));
  v2 = *(_QWORD *)(v1 + 96);
  v3 = *(_QWORD *)(v1 + 80);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_BYTE *)(*(_QWORD *)(v0 + 32) + *(int *)(*(_QWORD *)(v0 + 24) + 40)) = 1;
  swift_willThrow();
  v1 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AsyncThrowingDropWhileSequence.Iterator.next()(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 160);
  *(_QWORD *)(*v2 + 168) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v7 = *(_QWORD *)(v4 + 88);
    v6 = *(_QWORD *)(v4 + 96);
    v8 = *(_QWORD *)(v4 + 56);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    v9 = AsyncThrowingDropWhileSequence.Iterator.next();
  }
  else
  {
    swift_release();
    *(_BYTE *)(v4 + 184) = a1 & 1;
    v9 = AsyncThrowingDropWhileSequence.Iterator.next();
  }
  return swift_task_switch(v9, 0, 0);
}

uint64_t AsyncThrowingDropWhileSequence.Iterator.next(isolation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v5[7] = *(_QWORD *)(a4 + 24);
  v5[8] = *(_QWORD *)(a4 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[9] = AssociatedTypeWitness;
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5[10] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[11] = swift_task_alloc(v10);
  v5[12] = swift_task_alloc(v10);
  v5[13] = swift_task_alloc(v10);
  v11 = swift_getAssociatedTypeWitness();
  v5[14] = v11;
  v12 = type metadata accessor for Optional();
  v5[15] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v5[16] = v13;
  v5[17] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v11 - 8);
  v5[18] = v14;
  v5[19] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    ObjectType = swift_getObjectType();
    v16 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(ObjectType, a3);
    v18 = v17;
  }
  else
  {
    v16 = 0;
    v18 = 0;
  }
  v5[20] = v16;
  v5[21] = v18;
  return swift_task_switch(AsyncThrowingDropWhileSequence.Iterator.next(isolation:), v16, v18);
}

uint64_t AsyncThrowingDropWhileSequence.Iterator.next(isolation:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t (*v24)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  if ((*(_BYTE *)(v1 + *(int *)(v2 + 40)) & 1) != 0)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 144) + 56))(*(_QWORD *)(v0 + 16), 1, 1, *(_QWORD *)(v0 + 112));
    v3 = *(_QWORD *)(v0 + 136);
    v5 = *(_QWORD *)(v0 + 96);
    v4 = *(_QWORD *)(v0 + 104);
    v6 = *(_QWORD *)(v0 + 88);
    swift_task_dealloc(*(_QWORD *)(v0 + 152));
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v8 = *(_BYTE *)(v1 + *(int *)(v2 + 44));
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if ((v8 & 1) != 0)
    {
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      *(_QWORD *)(v0 + 248) = AssociatedConformanceWitness;
      v11 = *(int **)(AssociatedConformanceWitness + 40);
      v12 = swift_checkMetadataState();
      *(_QWORD *)(v0 + 256) = v12;
      v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v11 + *v11);
      v13 = (_QWORD *)swift_task_alloc(v11[1]);
      *(_QWORD *)(v0 + 264) = v13;
      *v13 = v0;
      v13[1] = AsyncThrowingDropWhileSequence.Iterator.next(isolation:);
      v14 = *(_QWORD *)(v0 + 96);
      v15 = *(_QWORD *)(v0 + 24);
      v16 = *(_QWORD *)(v0 + 32);
      v17 = *(_QWORD *)(v0 + 16);
      v18 = v12;
      v19 = AssociatedConformanceWitness;
    }
    else
    {
      *(_QWORD *)(v0 + 176) = AssociatedTypeWitness;
      v20 = swift_getAssociatedConformanceWitness();
      *(_QWORD *)(v0 + 184) = v20;
      v21 = *(int **)(v20 + 40);
      *(_QWORD *)(v0 + 192) = v21;
      v22 = swift_checkMetadataState();
      *(_QWORD *)(v0 + 200) = v22;
      v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v21 + *v21);
      v23 = (_QWORD *)swift_task_alloc(v21[1]);
      *(_QWORD *)(v0 + 208) = v23;
      *v23 = v0;
      v23[1] = AsyncThrowingDropWhileSequence.Iterator.next(isolation:);
      v19 = *(_QWORD *)(v0 + 184);
      v17 = *(_QWORD *)(v0 + 136);
      v14 = *(_QWORD *)(v0 + 104);
      v15 = *(_QWORD *)(v0 + 24);
      v16 = *(_QWORD *)(v0 + 32);
      v18 = v22;
    }
    return v24(v17, v15, v16, v14, v18, v19);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 208));
  if (v0)
    v3 = AsyncThrowingDropWhileSequence.Iterator.next(isolation:);
  else
    v3 = AsyncThrowingDropWhileSequence.Iterator.next(isolation:);
  return swift_task_switch(v3, *(unsigned __int8 **)(v2 + 160), *(_QWORD *)(v2 + 168));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  int **v13;
  int *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t (*v17)(_QWORD);

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 112);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(v1, *(_QWORD *)(v0 + 120));
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 144) + 56))(*(_QWORD *)(v0 + 16), 1, 1, *(_QWORD *)(v0 + 112));
    v4 = *(_QWORD *)(v0 + 136);
    v6 = *(_QWORD *)(v0 + 96);
    v5 = *(_QWORD *)(v0 + 104);
    v7 = *(_QWORD *)(v0 + 88);
    swift_task_dealloc(*(_QWORD *)(v0 + 152));
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 152);
    v11 = *(_QWORD *)(v0 + 40);
    v10 = *(_QWORD *)(v0 + 48);
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    *(_QWORD *)(v0 + 216) = v12;
    v12(v9, v1, v3);
    v13 = (int **)(v10 + *(int *)(v11 + 36));
    v14 = *v13;
    *(_QWORD *)(v0 + 224) = v13[1];
    v15 = v14[1];
    v17 = (uint64_t (*)(_QWORD))((char *)v14 + *v14);
    swift_retain();
    v16 = (_QWORD *)swift_task_alloc(v15);
    *(_QWORD *)(v0 + 232) = v16;
    *v16 = v0;
    v16[1] = AsyncThrowingDropWhileSequence.Iterator.next(isolation:);
    return v17(*(_QWORD *)(v0 + 152));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedConformanceWitness;
  int *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);
  if ((*(_BYTE *)(v0 + 272) & 1) == 0)
  {
    v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 216);
    v6 = *(_QWORD *)(v0 + 152);
    v7 = *(_QWORD *)(v0 + 16);
    *(_BYTE *)(v3 + *(int *)(v2 + 44)) = 1;
    v5(v7, v6, v1);
    v4 = 0;
    goto LABEL_5;
  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 144) + 8))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 112));
  if ((*(_BYTE *)(v3 + *(int *)(v2 + 40)) & 1) != 0)
  {
    v4 = 1;
LABEL_5:
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 144) + 56))(*(_QWORD *)(v0 + 16), v4, 1, *(_QWORD *)(v0 + 112));
    v8 = *(_QWORD *)(v0 + 136);
    v10 = *(_QWORD *)(v0 + 96);
    v9 = *(_QWORD *)(v0 + 104);
    v11 = *(_QWORD *)(v0 + 88);
    swift_task_dealloc(*(_QWORD *)(v0 + 152));
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  if (*(_BYTE *)(*(_QWORD *)(v0 + 48) + *(int *)(*(_QWORD *)(v0 + 40) + 44)) == 1)
  {
    swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    *(_QWORD *)(v0 + 248) = AssociatedConformanceWitness;
    v14 = *(int **)(AssociatedConformanceWitness + 40);
    v15 = swift_checkMetadataState();
    *(_QWORD *)(v0 + 256) = v15;
    v26 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v14 + *v14);
    v16 = (_QWORD *)swift_task_alloc(v14[1]);
    *(_QWORD *)(v0 + 264) = v16;
    *v16 = v0;
    v16[1] = AsyncThrowingDropWhileSequence.Iterator.next(isolation:);
    v17 = *(_QWORD *)(v0 + 96);
    v18 = *(_QWORD *)(v0 + 24);
    v19 = *(_QWORD *)(v0 + 32);
    v20 = *(_QWORD *)(v0 + 16);
    v21 = v15;
    v22 = AssociatedConformanceWitness;
  }
  else
  {
    v23 = *(int **)(v0 + 192);
    v24 = swift_checkMetadataState();
    *(_QWORD *)(v0 + 200) = v24;
    v26 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v23 + *v23);
    v25 = (_QWORD *)swift_task_alloc(v23[1]);
    *(_QWORD *)(v0 + 208) = v25;
    *v25 = v0;
    v25[1] = AsyncThrowingDropWhileSequence.Iterator.next(isolation:);
    v22 = *(_QWORD *)(v0 + 184);
    v20 = *(_QWORD *)(v0 + 136);
    v17 = *(_QWORD *)(v0 + 104);
    v18 = *(_QWORD *)(v0 + 24);
    v19 = *(_QWORD *)(v0 + 32);
    v21 = v24;
  }
  return v26(v20, v18, v19, v17, v21, v22);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 264);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (v0)
    return swift_task_switch(AsyncThrowingDropWhileSequence.Iterator.next(isolation:), *(unsigned __int8 **)(v2 + 160), *(_QWORD *)(v2 + 168));
  v6 = *(_QWORD *)(v2 + 152);
  v7 = *(_QWORD *)(v2 + 136);
  v9 = *(_QWORD *)(v2 + 96);
  v8 = *(_QWORD *)(v2 + 104);
  v10 = *(_QWORD *)(v2 + 88);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 80) + 32);
  v3(v1, *(_QWORD *)(v0 + 104), v2);
  swift_getAssociatedConformanceWitness();
  swift_allocError();
  v3(v4, v1, v2);
  v5 = *(_QWORD *)(v0 + 136);
  v7 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 104);
  v8 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(*(_QWORD *)(v0 + 48) + *(int *)(*(_QWORD *)(v0 + 40) + 40)) = 1;
  swift_willThrow();
  v1 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 80) + 32);
  v3(v1, *(_QWORD *)(v0 + 96), v2);
  swift_getAssociatedConformanceWitness();
  swift_allocError();
  v3(v4, v1, v2);
  v5 = *(_QWORD *)(v0 + 136);
  v7 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 104);
  v8 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AsyncThrowingDropWhileSequence.Iterator.next(isolation:)(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t (*v11)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 232);
  *(_QWORD *)(*v2 + 240) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v7 = *(_QWORD *)(v4 + 144);
    v6 = *(_QWORD *)(v4 + 152);
    v8 = *(_QWORD *)(v4 + 112);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    v9 = *(unsigned __int8 **)(v4 + 160);
    v10 = *(_QWORD *)(v4 + 168);
    v11 = AsyncThrowingDropWhileSequence.Iterator.next(isolation:);
  }
  else
  {
    swift_release();
    *(_BYTE *)(v4 + 272) = a1 & 1;
    v9 = *(unsigned __int8 **)(v4 + 160);
    v10 = *(_QWORD *)(v4 + 168);
    v11 = AsyncThrowingDropWhileSequence.Iterator.next(isolation:);
  }
  return swift_task_switch(v11, v9, v10);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncThrowingDropWhileSequence<A>.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1EE06A22C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCompactMapSequence<A, B>.Iterator;
  return AsyncThrowingDropWhileSequence.Iterator.next()(a1, a2);
}

uint64_t _ss30AsyncThrowingDropWhileSequenceV8IteratorVyx_GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v10;

  *(_QWORD *)(v5 + 16) = a4;
  v10 = (_QWORD *)swift_task_alloc(dword_1EE06A234);
  *(_QWORD *)(v5 + 24) = v10;
  *v10 = v5;
  v10[1] = _ss31AsyncThrowingCompactMapSequenceV8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return AsyncThrowingDropWhileSequence.Iterator.next(isolation:)(a1, a2, a3, a5);
}

uint64_t AsyncThrowingDropWhileSequence.makeAsyncIterator()(uint64_t a1)
{
  return AsyncDropWhileSequence.makeAsyncIterator()(a1, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))AsyncThrowingDropWhileSequence.Iterator.init(_:predicate:));
}

uint64_t AsyncSequence.drop(while:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(_QWORD, uint64_t, uint64_t)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  _QWORD *v13;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a6, v6);
  v13 = (_QWORD *)(a6 + *(int *)(a5(0, a3, a4) + 36));
  *v13 = a1;
  v13[1] = a2;
  return swift_retain();
}

uint64_t AsyncThrowingFilterSequence.init(_:isIncluded:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return AsyncDropWhileSequence.init(_:predicate:)(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AsyncThrowingFilterSequence, a6);
}

uint64_t AsyncDropFirstSequence.Iterator.baseIterator.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, v1, AssociatedTypeWitness);
}

uint64_t AsyncDropFirstSequence.Iterator.baseIterator.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 40))(v1, a1, AssociatedTypeWitness);
}

uint64_t (*AsyncThrowingFilterSequence.Iterator.baseIterator.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t AsyncThrowingFilterSequence.Iterator.finished.getter(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 40));
}

uint64_t AsyncThrowingFilterSequence.Iterator.finished.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + *(int *)(a2 + 40)) = result;
  return result;
}

uint64_t (*AsyncThrowingFilterSequence.Iterator.finished.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t AsyncThrowingFilterSequence.Iterator.init(_:isIncluded:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t result;
  _QWORD *v13;

  v10 = type metadata accessor for AsyncThrowingFilterSequence.Iterator(0, a4, a5, a4);
  *(_BYTE *)(a6 + *(int *)(v10 + 40)) = 0;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a6, a1, AssociatedTypeWitness);
  v13 = (_QWORD *)(a6 + *(int *)(v10 + 36));
  *v13 = a2;
  v13[1] = a3;
  return result;
}

uint64_t AsyncThrowingFilterSequence.Iterator.next()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v3[5] = *(_QWORD *)(a2 + 24);
  v3[6] = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3[7] = AssociatedTypeWitness;
  v5 = type metadata accessor for Optional();
  v3[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[9] = v6;
  v3[10] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3[11] = v7;
  v3[12] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(AsyncThrowingFilterSequence.Iterator.next(), 0, 0);
}

uint64_t AsyncThrowingFilterSequence.Iterator.next()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedConformanceWitness;
  int *v5;
  uint64_t v6;
  _QWORD *v7;
  int *v8;

  if ((*(_BYTE *)(*(_QWORD *)(v0 + 32) + *(int *)(*(_QWORD *)(v0 + 24) + 40)) & 1) != 0)
  {
    v1 = *(_QWORD *)(v0 + 96);
    v2 = *(_QWORD *)(v0 + 80);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 56))(*(_QWORD *)(v0 + 16), 1, 1, *(_QWORD *)(v0 + 56));
    swift_task_dealloc(v1);
    swift_task_dealloc(v2);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 104) = swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    *(_QWORD *)(v0 + 112) = AssociatedConformanceWitness;
    v5 = *(int **)(AssociatedConformanceWitness + 32);
    *(_QWORD *)(v0 + 120) = v5;
    v6 = swift_checkMetadataState();
    v8 = (int *)((char *)v5 + *v5);
    v7 = (_QWORD *)swift_task_alloc(v5[1]);
    *(_QWORD *)(v0 + 128) = v7;
    *v7 = v0;
    v7[1] = AsyncThrowingFilterSequence.Iterator.next();
    return ((uint64_t (*)(_QWORD, uint64_t, _QWORD))v8)(*(_QWORD *)(v0 + 80), v6, *(_QWORD *)(v0 + 112));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = AsyncThrowingDropWhileSequence.Iterator.next();
  else
    v3 = AsyncThrowingFilterSequence.Iterator.next();
  return swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  int **v11;
  int *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t (*v15)(_QWORD);

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 56);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(v1, *(_QWORD *)(v0 + 64));
    v4 = *(_QWORD *)(v0 + 96);
    v5 = *(_QWORD *)(v0 + 80);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 56))(*(_QWORD *)(v0 + 16), 1, 1, *(_QWORD *)(v0 + 56));
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 96);
    v9 = *(_QWORD *)(v0 + 24);
    v8 = *(_QWORD *)(v0 + 32);
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    *(_QWORD *)(v0 + 144) = v10;
    v10(v7, v1, v3);
    v11 = (int **)(v8 + *(int *)(v9 + 36));
    v12 = *v11;
    *(_QWORD *)(v0 + 152) = v11[1];
    v13 = v12[1];
    v15 = (uint64_t (*)(_QWORD))((char *)v12 + *v12);
    swift_retain();
    v14 = (_QWORD *)swift_task_alloc(v13);
    *(_QWORD *)(v0 + 160) = v14;
    *v14 = v0;
    v14[1] = AsyncThrowingFilterSequence.Iterator.next();
    return v15(*(_QWORD *)(v0 + 96));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  int *v10;

  if ((*(_BYTE *)(v0 + 176) & 1) != 0)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 144))(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 56));
    v1 = 0;
LABEL_5:
    v4 = *(_QWORD *)(v0 + 96);
    v5 = *(_QWORD *)(v0 + 80);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 56))(*(_QWORD *)(v0 + 16), v1, 1, *(_QWORD *)(v0 + 56));
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 56));
  if (*(_BYTE *)(v3 + *(int *)(v2 + 40)) == 1)
  {
    v1 = 1;
    goto LABEL_5;
  }
  v7 = *(int **)(v0 + 120);
  v8 = swift_checkMetadataState();
  v10 = (int *)((char *)v7 + *v7);
  v9 = (_QWORD *)swift_task_alloc(v7[1]);
  *(_QWORD *)(v0 + 128) = v9;
  *v9 = v0;
  v9[1] = AsyncThrowingFilterSequence.Iterator.next();
  return ((uint64_t (*)(_QWORD, uint64_t, _QWORD))v10)(*(_QWORD *)(v0 + 80), v8, *(_QWORD *)(v0 + 112));
}

uint64_t AsyncThrowingFilterSequence.Iterator.next()(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 160);
  *(_QWORD *)(*v2 + 168) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v7 = *(_QWORD *)(v4 + 88);
    v6 = *(_QWORD *)(v4 + 96);
    v8 = *(_QWORD *)(v4 + 56);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    v9 = AsyncThrowingDropWhileSequence.Iterator.next();
  }
  else
  {
    swift_release();
    *(_BYTE *)(v4 + 176) = a1 & 1;
    v9 = AsyncThrowingFilterSequence.Iterator.next();
  }
  return swift_task_switch(v9, 0, 0);
}

uint64_t AsyncThrowingFilterSequence.Iterator.next(isolation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v5[7] = *(_QWORD *)(a4 + 24);
  v5[8] = *(_QWORD *)(a4 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[9] = AssociatedTypeWitness;
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5[10] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[11] = swift_task_alloc(v10);
  v5[12] = swift_task_alloc(v10);
  v11 = swift_getAssociatedTypeWitness();
  v5[13] = v11;
  v12 = type metadata accessor for Optional();
  v5[14] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v5[15] = v13;
  v5[16] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v11 - 8);
  v5[17] = v14;
  v5[18] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    ObjectType = swift_getObjectType();
    v16 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(ObjectType, a3);
    v18 = v17;
  }
  else
  {
    v16 = 0;
    v18 = 0;
  }
  v5[19] = v16;
  v5[20] = v18;
  return swift_task_switch(AsyncThrowingFilterSequence.Iterator.next(isolation:), v16, v18);
}

uint64_t AsyncThrowingFilterSequence.Iterator.next(isolation:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedConformanceWitness;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  int *v10;

  if ((*(_BYTE *)(*(_QWORD *)(v0 + 48) + *(int *)(*(_QWORD *)(v0 + 40) + 40)) & 1) != 0)
  {
    v1 = *(_QWORD *)(v0 + 144);
    v2 = *(_QWORD *)(v0 + 128);
    v3 = *(_QWORD *)(v0 + 96);
    v4 = *(_QWORD *)(v0 + 88);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 136) + 56))(*(_QWORD *)(v0 + 16), 1, 1, *(_QWORD *)(v0 + 104));
    swift_task_dealloc(v1);
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 168) = swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    *(_QWORD *)(v0 + 176) = AssociatedConformanceWitness;
    v7 = *(int **)(AssociatedConformanceWitness + 40);
    *(_QWORD *)(v0 + 184) = v7;
    v8 = swift_checkMetadataState();
    *(_QWORD *)(v0 + 192) = v8;
    v10 = (int *)((char *)v7 + *v7);
    v9 = (_QWORD *)swift_task_alloc(v7[1]);
    *(_QWORD *)(v0 + 200) = v9;
    *v9 = v0;
    v9[1] = AsyncThrowingFilterSequence.Iterator.next(isolation:);
    return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD))v10)(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 96), v8, *(_QWORD *)(v0 + 176));
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 200));
  if (v0)
    v3 = AsyncThrowingFilterSequence.Iterator.next(isolation:);
  else
    v3 = AsyncThrowingFilterSequence.Iterator.next(isolation:);
  return swift_task_switch(v3, *(unsigned __int8 **)(v2 + 152), *(_QWORD *)(v2 + 160));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  int **v13;
  int *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t (*v17)(_QWORD);

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 104);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(v1, *(_QWORD *)(v0 + 112));
    v4 = *(_QWORD *)(v0 + 144);
    v5 = *(_QWORD *)(v0 + 128);
    v6 = *(_QWORD *)(v0 + 96);
    v7 = *(_QWORD *)(v0 + 88);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 136) + 56))(*(_QWORD *)(v0 + 16), 1, 1, *(_QWORD *)(v0 + 104));
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 144);
    v11 = *(_QWORD *)(v0 + 40);
    v10 = *(_QWORD *)(v0 + 48);
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    *(_QWORD *)(v0 + 208) = v12;
    v12(v9, v1, v3);
    v13 = (int **)(v10 + *(int *)(v11 + 36));
    v14 = *v13;
    *(_QWORD *)(v0 + 216) = v13[1];
    v15 = v14[1];
    v17 = (uint64_t (*)(_QWORD))((char *)v14 + *v14);
    swift_retain();
    v16 = (_QWORD *)swift_task_alloc(v15);
    *(_QWORD *)(v0 + 224) = v16;
    *v16 = v0;
    v16[1] = AsyncThrowingFilterSequence.Iterator.next(isolation:);
    return v17(*(_QWORD *)(v0 + 144));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  int *v12;

  if ((*(_BYTE *)(v0 + 240) & 1) != 0)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 208))(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 104));
    v1 = 0;
LABEL_5:
    v4 = *(_QWORD *)(v0 + 144);
    v5 = *(_QWORD *)(v0 + 128);
    v6 = *(_QWORD *)(v0 + 96);
    v7 = *(_QWORD *)(v0 + 88);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 136) + 56))(*(_QWORD *)(v0 + 16), v1, 1, *(_QWORD *)(v0 + 104));
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 136) + 8))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 104));
  if (*(_BYTE *)(v3 + *(int *)(v2 + 40)) == 1)
  {
    v1 = 1;
    goto LABEL_5;
  }
  v9 = *(int **)(v0 + 184);
  v10 = swift_checkMetadataState();
  *(_QWORD *)(v0 + 192) = v10;
  v12 = (int *)((char *)v9 + *v9);
  v11 = (_QWORD *)swift_task_alloc(v9[1]);
  *(_QWORD *)(v0 + 200) = v11;
  *v11 = v0;
  v11[1] = AsyncThrowingFilterSequence.Iterator.next(isolation:);
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD))v12)(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 96), v10, *(_QWORD *)(v0 + 176));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 80) + 32);
  v3(v1, *(_QWORD *)(v0 + 96), v2);
  swift_getAssociatedConformanceWitness();
  swift_allocError();
  v3(v4, v1, v2);
  v5 = *(_QWORD *)(v0 + 128);
  v7 = *(_QWORD *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(*(_QWORD *)(v0 + 48) + *(int *)(*(_QWORD *)(v0 + 40) + 40)) = 1;
  swift_willThrow();
  v1 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AsyncThrowingFilterSequence.Iterator.next(isolation:)(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t (*v11)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 224);
  *(_QWORD *)(*v2 + 232) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v7 = *(_QWORD *)(v4 + 136);
    v6 = *(_QWORD *)(v4 + 144);
    v8 = *(_QWORD *)(v4 + 104);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    v9 = *(unsigned __int8 **)(v4 + 152);
    v10 = *(_QWORD *)(v4 + 160);
    v11 = AsyncThrowingFilterSequence.Iterator.next(isolation:);
  }
  else
  {
    swift_release();
    *(_BYTE *)(v4 + 240) = a1 & 1;
    v9 = *(unsigned __int8 **)(v4 + 152);
    v10 = *(_QWORD *)(v4 + 160);
    v11 = AsyncThrowingFilterSequence.Iterator.next(isolation:);
  }
  return swift_task_switch(v11, v9, v10);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncThrowingFilterSequence<A>.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1EE06A23C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCompactMapSequence<A, B>.Iterator;
  return AsyncThrowingFilterSequence.Iterator.next()(a1, a2);
}

uint64_t _ss27AsyncThrowingFilterSequenceV8IteratorVyx_GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v10;

  *(_QWORD *)(v5 + 16) = a4;
  v10 = (_QWORD *)swift_task_alloc(dword_1EE06A244);
  *(_QWORD *)(v5 + 24) = v10;
  *v10 = v5;
  v10[1] = _ss31AsyncThrowingCompactMapSequenceV8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return AsyncThrowingFilterSequence.Iterator.next(isolation:)(a1, a2, a3, a5);
}

uint64_t AsyncThrowingFilterSequence.makeAsyncIterator()(uint64_t a1)
{
  return AsyncDropWhileSequence.makeAsyncIterator()(a1, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))AsyncThrowingFilterSequence.Iterator.init(_:isIncluded:));
}

uint64_t AsyncSequence.flatMap<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(_QWORD, _QWORD *)@<X6>, uint64_t a8@<X8>)
{
  uint64_t v8;
  _QWORD *v17;
  _QWORD v19[4];

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a8, v8);
  v19[0] = a3;
  v19[1] = a4;
  v19[2] = a5;
  v19[3] = a6;
  v17 = (_QWORD *)(a8 + *(int *)(a7(0, v19) + 52));
  *v17 = a1;
  v17[1] = a2;
  return swift_retain();
}

uint64_t AsyncThrowingFlatMapSequence.init(_:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  return AsyncFlatMapSequence.init(_:transform:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for AsyncThrowingFlatMapSequence, a8);
}

uint64_t AsyncFlatMapSequence.init(_:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t (*a8)(_QWORD, _QWORD *)@<X7>, uint64_t a9@<X8>)
{
  uint64_t result;
  _QWORD *v18;
  _QWORD v19[4];

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a9, a1, a4);
  v19[0] = a4;
  v19[1] = a5;
  v19[2] = a6;
  v19[3] = a7;
  result = a8(0, v19);
  v18 = (_QWORD *)(a9 + *(int *)(result + 52));
  *v18 = a2;
  v18[1] = a3;
  return result;
}

uint64_t (*AsyncThrowingFlatMapSequence.Iterator.baseIterator.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t AsyncFlatMapSequence.Iterator.currentIterator.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 56);
  swift_getAssociatedTypeWitness();
  v5 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t AsyncFlatMapSequence.Iterator.currentIterator.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 56);
  swift_getAssociatedTypeWitness();
  v5 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*AsyncThrowingFlatMapSequence.Iterator.currentIterator.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t (*AsyncThrowingFlatMapSequence.Iterator.finished.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t AsyncThrowingFlatMapSequence.Iterator.init(_:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  return AsyncFlatMapSequence.Iterator.init(_:transform:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for AsyncThrowingFlatMapSequence.Iterator, a8);
}

uint64_t AsyncFlatMapSequence.Iterator.init(_:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t (*a8)(_QWORD, _QWORD *)@<X7>, uint64_t a9@<X8>)
{
  int *v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t result;
  _QWORD *v16;
  _QWORD v19[4];

  v19[0] = a4;
  v19[1] = a5;
  v19[2] = a6;
  v19[3] = a7;
  v11 = (int *)a8(0, v19);
  v12 = a9 + v11[14];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v12, 1, 1, AssociatedTypeWitness);
  *(_BYTE *)(a9 + v11[15]) = 0;
  v14 = swift_getAssociatedTypeWitness();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a9, a1, v14);
  v16 = (_QWORD *)(a9 + v11[13]);
  *v16 = a2;
  v16[1] = a3;
  return result;
}

uint64_t AsyncThrowingFlatMapSequence.Iterator.next()(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v5 = a2[3];
  v3[5] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[6] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[7] = swift_task_alloc(v7);
  v3[8] = swift_task_alloc(v7);
  v3[9] = swift_task_alloc(v7);
  v3[10] = a2[4];
  v3[11] = a2[2];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3[12] = AssociatedTypeWitness;
  v9 = type metadata accessor for Optional();
  v3[13] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v3[14] = v10;
  v3[15] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3[16] = v11;
  v3[17] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3[18] = a2[5];
  v12 = swift_getAssociatedTypeWitness();
  v3[19] = v12;
  v13 = type metadata accessor for Optional();
  v3[20] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v3[21] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[22] = swift_task_alloc(v15);
  v3[23] = swift_task_alloc(v15);
  v16 = *(_QWORD *)(v12 - 8);
  v3[24] = v16;
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[25] = swift_task_alloc(v17);
  v3[26] = swift_task_alloc(v17);
  v18 = swift_getAssociatedTypeWitness();
  v3[27] = v18;
  v19 = type metadata accessor for Optional();
  v3[28] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v3[29] = v20;
  v21 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[30] = swift_task_alloc(v21);
  v3[31] = swift_task_alloc(v21);
  v22 = *(_QWORD *)(v18 - 8);
  v3[32] = v22;
  v23 = (*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[33] = swift_task_alloc(v23);
  v3[34] = swift_task_alloc(v23);
  return swift_task_switch(AsyncThrowingFlatMapSequence.Iterator.next(), 0, 0);
}

uint64_t AsyncThrowingFlatMapSequence.Iterator.next()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedConformanceWitness;
  int *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  int *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t, uint64_t);

  if ((*(_BYTE *)(*(_QWORD *)(v0 + 32) + *(int *)(*(_QWORD *)(v0 + 24) + 60)) & 1) != 0)
  {
    v2 = *(_QWORD *)(v0 + 264);
    v1 = *(_QWORD *)(v0 + 272);
    v4 = *(_QWORD *)(v0 + 240);
    v3 = *(_QWORD *)(v0 + 248);
    v6 = *(_QWORD *)(v0 + 200);
    v5 = *(_QWORD *)(v0 + 208);
    v7 = *(_QWORD *)(v0 + 184);
    v8 = *(_QWORD *)(v0 + 176);
    v9 = *(_QWORD *)(v0 + 136);
    v26 = *(_QWORD *)(v0 + 120);
    v27 = *(_QWORD *)(v0 + 72);
    v28 = *(_QWORD *)(v0 + 64);
    v29 = *(_QWORD *)(v0 + 56);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 192) + 56))(*(_QWORD *)(v0 + 16), 1, 1, *(_QWORD *)(v0 + 152));
    swift_task_dealloc(v1);
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 248);
    v12 = *(_QWORD *)(v0 + 256);
    v13 = *(_QWORD *)(v0 + 216);
    AsyncFlatMapSequence.Iterator.currentIterator.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v11, 1, v13) == 1)
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 232) + 8))(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 224));
      swift_getAssociatedTypeWitness();
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v15 = *(int **)(AssociatedConformanceWitness + 32);
      v16 = swift_checkMetadataState();
      v30 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v15 + *v15);
      v17 = (_QWORD *)swift_task_alloc(v15[1]);
      *(_QWORD *)(v0 + 304) = v17;
      *v17 = v0;
      v17[1] = AsyncThrowingFlatMapSequence.Iterator.next();
      v18 = *(_QWORD *)(v0 + 120);
      v19 = v16;
    }
    else
    {
      v20 = *(_QWORD *)(v0 + 272);
      v21 = *(_QWORD *)(v0 + 248);
      v22 = *(_QWORD *)(v0 + 216);
      v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 256) + 32);
      *(_QWORD *)(v0 + 280) = v23;
      v23(v20, v21, v22);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v24 = *(int **)(AssociatedConformanceWitness + 32);
      v30 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v24 + *v24);
      v25 = (_QWORD *)swift_task_alloc(v24[1]);
      *(_QWORD *)(v0 + 288) = v25;
      *v25 = v0;
      v25[1] = AsyncThrowingFlatMapSequence.Iterator.next();
      v19 = *(_QWORD *)(v0 + 216);
      v18 = *(_QWORD *)(v0 + 184);
    }
    return v30(v18, v19, AssociatedConformanceWitness);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 288);
  *(_QWORD *)(*(_QWORD *)v1 + 296) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v2[32] + 8))(v2[34], v2[27]);
    v4 = AsyncThrowingFlatMapSequence.Iterator.next();
  }
  else
  {
    v4 = AsyncThrowingFlatMapSequence.Iterator.next();
  }
  return swift_task_switch(v4, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  int *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t, uint64_t);
  int *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;

  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 152);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3);
  v5 = *(_QWORD *)(v0 + 24);
  if (v4 != 1)
  {
    v22 = *(_QWORD *)(v0 + 272);
    v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 280);
    v45 = *(_QWORD *)(v0 + 256);
    v23 = *(_QWORD *)(v0 + 240);
    v24 = *(_QWORD *)(v0 + 24);
    v26 = *(_QWORD *)(v0 + 208);
    v25 = *(_QWORD *)(v0 + 216);
    v49 = *(_QWORD *)(v0 + 16);
    v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    v27(v26, v1, v3);
    v21(v23, v22, v25);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v45 + 56))(v23, 0, 1, v25);
    AsyncFlatMapSequence.Iterator.currentIterator.setter(v23, v24);
    v27(v49, v26, v3);
    v11 = 0;
    goto LABEL_6;
  }
  v6 = *(_QWORD *)(v0 + 256);
  v7 = *(_QWORD *)(v0 + 240);
  v8 = *(_QWORD *)(v0 + 216);
  v10 = *(_QWORD *)(v0 + 160);
  v9 = *(_QWORD *)(v0 + 168);
  (*(void (**)(_QWORD, uint64_t))(v6 + 8))(*(_QWORD *)(v0 + 272), v8);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v1, v10);
  v11 = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v7, 1, 1, v8);
  AsyncFlatMapSequence.Iterator.currentIterator.setter(v7, v5);
  if ((*(_BYTE *)(*(_QWORD *)(v0 + 32) + *(int *)(*(_QWORD *)(v0 + 24) + 60)) & 1) != 0)
  {
LABEL_6:
    v29 = *(_QWORD *)(v0 + 264);
    v28 = *(_QWORD *)(v0 + 272);
    v31 = *(_QWORD *)(v0 + 240);
    v30 = *(_QWORD *)(v0 + 248);
    v33 = *(_QWORD *)(v0 + 200);
    v32 = *(_QWORD *)(v0 + 208);
    v34 = *(_QWORD *)(v0 + 184);
    v35 = *(_QWORD *)(v0 + 176);
    v43 = *(_QWORD *)(v0 + 136);
    v44 = *(_QWORD *)(v0 + 120);
    v46 = *(_QWORD *)(v0 + 72);
    v47 = *(_QWORD *)(v0 + 64);
    v50 = *(_QWORD *)(v0 + 56);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 192) + 56))(*(_QWORD *)(v0 + 16), v11, 1, *(_QWORD *)(v0 + 152));
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v50);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v12 = *(_QWORD *)(v0 + 248);
  v13 = *(_QWORD *)(v0 + 256);
  v14 = *(_QWORD *)(v0 + 216);
  AsyncFlatMapSequence.Iterator.currentIterator.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v12, 1, v14) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 232) + 8))(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 224));
    swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v16 = *(int **)(AssociatedConformanceWitness + 32);
    v17 = swift_checkMetadataState();
    v48 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v16 + *v16);
    v18 = (_QWORD *)swift_task_alloc(v16[1]);
    *(_QWORD *)(v0 + 304) = v18;
    *v18 = v0;
    v18[1] = AsyncThrowingFlatMapSequence.Iterator.next();
    v19 = *(_QWORD *)(v0 + 120);
    v20 = v17;
  }
  else
  {
    v37 = *(_QWORD *)(v0 + 272);
    v38 = *(_QWORD *)(v0 + 248);
    v39 = *(_QWORD *)(v0 + 216);
    v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 256) + 32);
    *(_QWORD *)(v0 + 280) = v40;
    v40(v37, v38, v39);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v41 = *(int **)(AssociatedConformanceWitness + 32);
    v48 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v41 + *v41);
    v42 = (_QWORD *)swift_task_alloc(v41[1]);
    *(_QWORD *)(v0 + 288) = v42;
    *v42 = v0;
    v42[1] = AsyncThrowingFlatMapSequence.Iterator.next();
    v20 = *(_QWORD *)(v0 + 216);
    v19 = *(_QWORD *)(v0 + 184);
  }
  return v48(v19, v20, AssociatedConformanceWitness);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 304);
  *(_QWORD *)(*(_QWORD *)v1 + 312) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = AsyncThrowingFlatMapSequence.Iterator.next();
  else
    v3 = AsyncThrowingFlatMapSequence.Iterator.next();
  return swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  int **v16;
  int *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 96);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(v1, *(_QWORD *)(v0 + 104));
    v5 = *(_QWORD *)(v0 + 264);
    v4 = *(_QWORD *)(v0 + 272);
    v7 = *(_QWORD *)(v0 + 240);
    v6 = *(_QWORD *)(v0 + 248);
    v9 = *(_QWORD *)(v0 + 200);
    v8 = *(_QWORD *)(v0 + 208);
    v10 = *(_QWORD *)(v0 + 184);
    v11 = *(_QWORD *)(v0 + 176);
    v12 = *(_QWORD *)(v0 + 136);
    v20 = *(_QWORD *)(v0 + 120);
    v21 = *(_QWORD *)(v0 + 72);
    v22 = *(_QWORD *)(v0 + 64);
    v23 = *(_QWORD *)(v0 + 56);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 192) + 56))(*(_QWORD *)(v0 + 16), 1, 1, *(_QWORD *)(v0 + 152));
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 24);
    v14 = *(_QWORD *)(v0 + 32);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 136), v1, v3);
    v16 = (int **)(v14 + *(int *)(v15 + 52));
    v17 = *v16;
    *(_QWORD *)(v0 + 320) = v16[1];
    v18 = v17[1];
    v24 = (int *)((char *)v17 + *v17);
    swift_retain();
    v19 = (_QWORD *)swift_task_alloc(v18);
    *(_QWORD *)(v0 + 328) = v19;
    *v19 = v0;
    v19[1] = AsyncThrowingFlatMapSequence.Iterator.next();
    return ((uint64_t (*)(_QWORD, _QWORD))v24)(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 136));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 328);
  *(_QWORD *)(*(_QWORD *)v1 + 336) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(_QWORD, _QWORD))(v2[16] + 8))(v2[17], v2[12]);
  swift_release();
  if (v0)
    v4 = AsyncThrowingFlatMapSequence.Iterator.next();
  else
    v4 = AsyncThrowingFlatMapSequence.Iterator.next();
  return swift_task_switch(v4, 0, 0);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedConformanceWitness;
  int *v7;
  _QWORD *v8;
  int *v10;

  v1 = v0[18];
  v2 = v0[9];
  v4 = v0[6];
  v3 = v0[7];
  v5 = v0[5];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 32))(v2, v0[8], v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v5);
  (*(void (**)(uint64_t, uint64_t))(v1 + 40))(v5, v1);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v7 = *(int **)(AssociatedConformanceWitness + 32);
  v10 = (int *)((char *)v7 + *v7);
  v8 = (_QWORD *)swift_task_alloc(v7[1]);
  v0[43] = v8;
  *v8 = v0;
  v8[1] = AsyncThrowingFlatMapSequence.Iterator.next();
  return ((uint64_t (*)(_QWORD, _QWORD, uint64_t))v10)(v0[22], v0[27], AssociatedConformanceWitness);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 344);
  *(_QWORD *)(*(_QWORD *)v1 + 352) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v2[32] + 8))(v2[33], v2[27]);
    v4 = AsyncThrowingFlatMapSequence.Iterator.next();
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v2[6] + 8))(v2[9], v2[5]);
    v4 = AsyncThrowingFlatMapSequence.Iterator.next();
  }
  return swift_task_switch(v4, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedConformanceWitness;
  int *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t);
  int *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 152);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v2, 1, v3);
  v6 = *(_QWORD *)(v0 + 256);
  v5 = *(_QWORD *)(v0 + 264);
  v7 = *(_QWORD *)(v0 + 240);
  v8 = *(_QWORD *)(v0 + 216);
  if (v4 != 1)
  {
    v22 = *(_QWORD *)(v0 + 200);
    v23 = *(_QWORD *)(v0 + 24);
    v45 = *(_QWORD *)(v0 + 16);
    v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32);
    v24(v22, v2, v3);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v7, v5, v8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v7, 0, 1, v8);
    AsyncFlatMapSequence.Iterator.currentIterator.setter(v7, v23);
    v24(v45, v22, v3);
    v12 = 0;
    goto LABEL_6;
  }
  v9 = *(_QWORD *)(v0 + 160);
  v10 = *(_QWORD *)(v0 + 168);
  v11 = *(_QWORD *)(v0 + 24);
  (*(void (**)(_QWORD, _QWORD))(v6 + 8))(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 216));
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v2, v9);
  v12 = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v7, 1, 1, v8);
  AsyncFlatMapSequence.Iterator.currentIterator.setter(v7, v11);
  if (*(_BYTE *)(*(_QWORD *)(v0 + 32) + *(int *)(*(_QWORD *)(v0 + 24) + 60)) == 1)
  {
LABEL_6:
    v26 = *(_QWORD *)(v0 + 264);
    v25 = *(_QWORD *)(v0 + 272);
    v28 = *(_QWORD *)(v0 + 240);
    v27 = *(_QWORD *)(v0 + 248);
    v30 = *(_QWORD *)(v0 + 200);
    v29 = *(_QWORD *)(v0 + 208);
    v31 = *(_QWORD *)(v0 + 184);
    v32 = *(_QWORD *)(v0 + 176);
    v40 = *(_QWORD *)(v0 + 136);
    v41 = *(_QWORD *)(v0 + 120);
    v42 = *(_QWORD *)(v0 + 72);
    v43 = *(_QWORD *)(v0 + 64);
    v46 = *(_QWORD *)(v0 + 56);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 192) + 56))(*(_QWORD *)(v0 + 16), v12, 1, *(_QWORD *)(v0 + 152));
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v46);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v13 = *(_QWORD *)(v0 + 248);
  v14 = *(_QWORD *)(v0 + 256);
  v15 = *(_QWORD *)(v0 + 216);
  AsyncFlatMapSequence.Iterator.currentIterator.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v13, 1, v15) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 232) + 8))(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 224));
    swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v17 = *(int **)(AssociatedConformanceWitness + 32);
    v18 = swift_checkMetadataState();
    v44 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v17 + *v17);
    v19 = (_QWORD *)swift_task_alloc(v17[1]);
    *(_QWORD *)(v0 + 304) = v19;
    *v19 = v0;
    v19[1] = AsyncThrowingFlatMapSequence.Iterator.next();
    v20 = *(_QWORD *)(v0 + 120);
    v21 = v18;
  }
  else
  {
    v34 = *(_QWORD *)(v0 + 272);
    v35 = *(_QWORD *)(v0 + 248);
    v36 = *(_QWORD *)(v0 + 216);
    v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 256) + 32);
    *(_QWORD *)(v0 + 280) = v37;
    v37(v34, v35, v36);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v38 = *(int **)(AssociatedConformanceWitness + 32);
    v44 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v38 + *v38);
    v39 = (_QWORD *)swift_task_alloc(v38[1]);
    *(_QWORD *)(v0 + 288) = v39;
    *v39 = v0;
    v39[1] = AsyncThrowingFlatMapSequence.Iterator.next();
    v21 = *(_QWORD *)(v0 + 216);
    v20 = *(_QWORD *)(v0 + 184);
  }
  return v44(v20, v21, AssociatedConformanceWitness);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_BYTE *)(*(_QWORD *)(v0 + 32) + *(int *)(*(_QWORD *)(v0 + 24) + 60)) = 1;
  swift_willThrow();
  v1 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 248);
  v5 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 208);
  v7 = *(_QWORD *)(v0 + 176);
  v6 = *(_QWORD *)(v0 + 184);
  v8 = *(_QWORD *)(v0 + 136);
  v9 = *(_QWORD *)(v0 + 120);
  v11 = *(_QWORD *)(v0 + 72);
  v12 = *(_QWORD *)(v0 + 64);
  v13 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 272));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 248);
  v5 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 208);
  v7 = *(_QWORD *)(v0 + 176);
  v6 = *(_QWORD *)(v0 + 184);
  v8 = *(_QWORD *)(v0 + 136);
  v9 = *(_QWORD *)(v0 + 120);
  v11 = *(_QWORD *)(v0 + 72);
  v12 = *(_QWORD *)(v0 + 64);
  v13 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 272));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 336);
  v2 = *(_QWORD *)(v0 + 256);
  v3 = *(_QWORD *)(v0 + 240);
  v4 = *(_QWORD *)(v0 + 216);
  v5 = *(_QWORD *)(v0 + 24);
  *(_BYTE *)(*(_QWORD *)(v0 + 32) + *(int *)(v5 + 60)) = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56))(v3, 1, 1, v4);
  AsyncFlatMapSequence.Iterator.currentIterator.setter(v3, v5);
  swift_willThrow();
  if (!v1)
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 48) + 8))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 40));
  v6 = *(_QWORD *)(v0 + 264);
  v8 = *(_QWORD *)(v0 + 240);
  v7 = *(_QWORD *)(v0 + 248);
  v10 = *(_QWORD *)(v0 + 200);
  v9 = *(_QWORD *)(v0 + 208);
  v12 = *(_QWORD *)(v0 + 176);
  v11 = *(_QWORD *)(v0 + 184);
  v13 = *(_QWORD *)(v0 + 136);
  v14 = *(_QWORD *)(v0 + 120);
  v16 = *(_QWORD *)(v0 + 72);
  v17 = *(_QWORD *)(v0 + 64);
  v18 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 272));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 336);
  v2 = *(_QWORD *)(v0 + 256);
  v3 = *(_QWORD *)(v0 + 240);
  v4 = *(_QWORD *)(v0 + 216);
  v5 = *(_QWORD *)(v0 + 24);
  *(_BYTE *)(*(_QWORD *)(v0 + 32) + *(int *)(v5 + 60)) = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56))(v3, 1, 1, v4);
  AsyncFlatMapSequence.Iterator.currentIterator.setter(v3, v5);
  swift_willThrow();
  if (!v1)
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 48) + 8))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 40));
  v6 = *(_QWORD *)(v0 + 264);
  v8 = *(_QWORD *)(v0 + 240);
  v7 = *(_QWORD *)(v0 + 248);
  v10 = *(_QWORD *)(v0 + 200);
  v9 = *(_QWORD *)(v0 + 208);
  v12 = *(_QWORD *)(v0 + 176);
  v11 = *(_QWORD *)(v0 + 184);
  v13 = *(_QWORD *)(v0 + 136);
  v14 = *(_QWORD *)(v0 + 120);
  v16 = *(_QWORD *)(v0 + 72);
  v17 = *(_QWORD *)(v0 + 64);
  v18 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 272));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AsyncThrowingFlatMapSequence.Iterator.next(isolation:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t ObjectType;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v9 = a4[3];
  v5[7] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[8] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[9] = swift_task_alloc(v11);
  v5[10] = swift_task_alloc(v11);
  v5[11] = swift_task_alloc(v11);
  v5[12] = a4[4];
  v5[13] = a4[2];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[14] = AssociatedTypeWitness;
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5[15] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[16] = swift_task_alloc(v14);
  v5[17] = swift_task_alloc(v14);
  v15 = swift_getAssociatedTypeWitness();
  v5[18] = v15;
  v16 = type metadata accessor for Optional();
  v5[19] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v5[20] = v17;
  v5[21] = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(v15 - 8);
  v5[22] = v18;
  v5[23] = swift_task_alloc((*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5[24] = a4[5];
  v19 = swift_getAssociatedTypeWitness();
  v5[25] = v19;
  v20 = type metadata accessor for Optional();
  v5[26] = v20;
  v21 = *(_QWORD *)(v20 - 8);
  v5[27] = v21;
  v22 = (*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[28] = swift_task_alloc(v22);
  v5[29] = swift_task_alloc(v22);
  v23 = *(_QWORD *)(v19 - 8);
  v5[30] = v23;
  v24 = (*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[31] = swift_task_alloc(v24);
  v5[32] = swift_task_alloc(v24);
  v25 = swift_getAssociatedTypeWitness();
  v5[33] = v25;
  v26 = *(_QWORD *)(v25 - 8);
  v5[34] = v26;
  v27 = (*(_QWORD *)(v26 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[35] = swift_task_alloc(v27);
  v5[36] = swift_task_alloc(v27);
  v5[37] = swift_task_alloc(v27);
  v5[38] = swift_task_alloc(v27);
  v28 = swift_getAssociatedTypeWitness();
  v5[39] = v28;
  v29 = type metadata accessor for Optional();
  v5[40] = v29;
  v30 = *(_QWORD *)(v29 - 8);
  v5[41] = v30;
  v31 = (*(_QWORD *)(v30 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[42] = swift_task_alloc(v31);
  v5[43] = swift_task_alloc(v31);
  v32 = *(_QWORD *)(v28 - 8);
  v5[44] = v32;
  v33 = (*(_QWORD *)(v32 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[45] = swift_task_alloc(v33);
  v5[46] = swift_task_alloc(v33);
  if (a2)
  {
    ObjectType = swift_getObjectType();
    v35 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(ObjectType, a3);
    v37 = v36;
  }
  else
  {
    v35 = 0;
    v37 = 0;
  }
  v5[47] = v35;
  v5[48] = v37;
  return swift_task_switch(AsyncThrowingFlatMapSequence.Iterator.next(isolation:), v35, v37);
}

uint64_t AsyncThrowingFlatMapSequence.Iterator.next(isolation:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedConformanceWitness;
  int *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  int *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  if ((*(_BYTE *)(*(_QWORD *)(v0 + 48) + *(int *)(*(_QWORD *)(v0 + 40) + 60)) & 1) != 0)
  {
    v2 = *(_QWORD *)(v0 + 360);
    v1 = *(_QWORD *)(v0 + 368);
    v4 = *(_QWORD *)(v0 + 336);
    v3 = *(_QWORD *)(v0 + 344);
    v6 = *(_QWORD *)(v0 + 296);
    v5 = *(_QWORD *)(v0 + 304);
    v8 = *(_QWORD *)(v0 + 280);
    v7 = *(_QWORD *)(v0 + 288);
    v9 = *(_QWORD *)(v0 + 256);
    v29 = *(_QWORD *)(v0 + 248);
    v30 = *(_QWORD *)(v0 + 232);
    v31 = *(_QWORD *)(v0 + 224);
    v32 = *(_QWORD *)(v0 + 184);
    v33 = *(_QWORD *)(v0 + 168);
    v34 = *(_QWORD *)(v0 + 136);
    v35 = *(_QWORD *)(v0 + 128);
    v36 = *(_QWORD *)(v0 + 88);
    v37 = *(_QWORD *)(v0 + 80);
    v38 = *(_QWORD *)(v0 + 72);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 240) + 56))(*(_QWORD *)(v0 + 16), 1, 1, *(_QWORD *)(v0 + 200));
    swift_task_dealloc(v1);
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 344);
    v12 = *(_QWORD *)(v0 + 352);
    v13 = *(_QWORD *)(v0 + 312);
    AsyncFlatMapSequence.Iterator.currentIterator.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v11, 1, v13) == 1)
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 328) + 8))(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 320));
      swift_getAssociatedTypeWitness();
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      *(_QWORD *)(v0 + 416) = AssociatedConformanceWitness;
      v15 = *(int **)(AssociatedConformanceWitness + 40);
      v16 = swift_checkMetadataState();
      *(_QWORD *)(v0 + 424) = v16;
      v39 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v15 + *v15);
      v17 = (_QWORD *)swift_task_alloc(v15[1]);
      *(_QWORD *)(v0 + 432) = v17;
      *v17 = v0;
      v17[1] = AsyncThrowingFlatMapSequence.Iterator.next(isolation:);
      v18 = *(_QWORD *)(v0 + 168);
      v19 = *(_QWORD *)(v0 + 136);
      v20 = *(_QWORD *)(v0 + 24);
      v21 = *(_QWORD *)(v0 + 32);
      v22 = v16;
    }
    else
    {
      v23 = *(_QWORD *)(v0 + 368);
      v24 = *(_QWORD *)(v0 + 344);
      v25 = *(_QWORD *)(v0 + 312);
      v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 352) + 32);
      *(_QWORD *)(v0 + 392) = v26;
      v26(v23, v24, v25);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      *(_QWORD *)(v0 + 400) = AssociatedConformanceWitness;
      v27 = *(int **)(AssociatedConformanceWitness + 40);
      v39 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v27 + *v27);
      v28 = (_QWORD *)swift_task_alloc(v27[1]);
      *(_QWORD *)(v0 + 408) = v28;
      *v28 = v0;
      v28[1] = AsyncThrowingFlatMapSequence.Iterator.next(isolation:);
      v22 = *(_QWORD *)(v0 + 312);
      v19 = *(_QWORD *)(v0 + 296);
      v18 = *(_QWORD *)(v0 + 232);
      v20 = *(_QWORD *)(v0 + 24);
      v21 = *(_QWORD *)(v0 + 32);
    }
    return v39(v18, v20, v21, v19, v22, AssociatedConformanceWitness);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 408));
  if (v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v2[44] + 8))(v2[46], v2[39]);
    v3 = (unsigned __int8 *)v2[47];
    v4 = v2[48];
    v5 = AsyncThrowingFlatMapSequence.Iterator.next(isolation:);
  }
  else
  {
    v3 = (unsigned __int8 *)v2[47];
    v4 = v2[48];
    v5 = AsyncThrowingFlatMapSequence.Iterator.next(isolation:);
  }
  return swift_task_switch(v5, v3, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  int *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t);
  int *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;

  v1 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 240);
  v3 = *(_QWORD *)(v0 + 200);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3);
  v5 = *(_QWORD *)(v0 + 40);
  if (v4 != 1)
  {
    v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 392);
    v25 = *(_QWORD *)(v0 + 368);
    v54 = *(_QWORD *)(v0 + 352);
    v26 = *(_QWORD *)(v0 + 336);
    v27 = *(_QWORD *)(v0 + 312);
    v28 = *(_QWORD *)(v0 + 40);
    v29 = *(_QWORD *)(v0 + 256);
    v58 = *(_QWORD *)(v0 + 16);
    v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    v30(v29, v1, v3);
    v24(v26, v25, v27);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v54 + 56))(v26, 0, 1, v27);
    AsyncFlatMapSequence.Iterator.currentIterator.setter(v26, v28);
    v30(v58, v29, v3);
    v11 = 0;
    goto LABEL_6;
  }
  v6 = *(_QWORD *)(v0 + 352);
  v7 = *(_QWORD *)(v0 + 336);
  v8 = *(_QWORD *)(v0 + 312);
  v10 = *(_QWORD *)(v0 + 208);
  v9 = *(_QWORD *)(v0 + 216);
  (*(void (**)(_QWORD, uint64_t))(v6 + 8))(*(_QWORD *)(v0 + 368), v8);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v1, v10);
  v11 = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v7, 1, 1, v8);
  AsyncFlatMapSequence.Iterator.currentIterator.setter(v7, v5);
  if ((*(_BYTE *)(*(_QWORD *)(v0 + 48) + *(int *)(*(_QWORD *)(v0 + 40) + 60)) & 1) != 0)
  {
LABEL_6:
    v32 = *(_QWORD *)(v0 + 360);
    v31 = *(_QWORD *)(v0 + 368);
    v34 = *(_QWORD *)(v0 + 336);
    v33 = *(_QWORD *)(v0 + 344);
    v36 = *(_QWORD *)(v0 + 296);
    v35 = *(_QWORD *)(v0 + 304);
    v37 = *(_QWORD *)(v0 + 280);
    v38 = *(_QWORD *)(v0 + 288);
    v46 = *(_QWORD *)(v0 + 256);
    v47 = *(_QWORD *)(v0 + 248);
    v48 = *(_QWORD *)(v0 + 232);
    v49 = *(_QWORD *)(v0 + 224);
    v50 = *(_QWORD *)(v0 + 184);
    v51 = *(_QWORD *)(v0 + 168);
    v52 = *(_QWORD *)(v0 + 136);
    v53 = *(_QWORD *)(v0 + 128);
    v55 = *(_QWORD *)(v0 + 88);
    v56 = *(_QWORD *)(v0 + 80);
    v59 = *(_QWORD *)(v0 + 72);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 240) + 56))(*(_QWORD *)(v0 + 16), v11, 1, *(_QWORD *)(v0 + 200));
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v38);
    swift_task_dealloc(v37);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v59);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v12 = *(_QWORD *)(v0 + 344);
  v13 = *(_QWORD *)(v0 + 352);
  v14 = *(_QWORD *)(v0 + 312);
  AsyncFlatMapSequence.Iterator.currentIterator.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v12, 1, v14) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 328) + 8))(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 320));
    swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    *(_QWORD *)(v0 + 416) = AssociatedConformanceWitness;
    v16 = *(int **)(AssociatedConformanceWitness + 40);
    v17 = swift_checkMetadataState();
    *(_QWORD *)(v0 + 424) = v17;
    v57 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v16 + *v16);
    v18 = (_QWORD *)swift_task_alloc(v16[1]);
    *(_QWORD *)(v0 + 432) = v18;
    *v18 = v0;
    v18[1] = AsyncThrowingFlatMapSequence.Iterator.next(isolation:);
    v19 = *(_QWORD *)(v0 + 168);
    v20 = *(_QWORD *)(v0 + 136);
    v21 = *(_QWORD *)(v0 + 24);
    v22 = *(_QWORD *)(v0 + 32);
    v23 = v17;
  }
  else
  {
    v40 = *(_QWORD *)(v0 + 368);
    v41 = *(_QWORD *)(v0 + 344);
    v42 = *(_QWORD *)(v0 + 312);
    v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 352) + 32);
    *(_QWORD *)(v0 + 392) = v43;
    v43(v40, v41, v42);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    *(_QWORD *)(v0 + 400) = AssociatedConformanceWitness;
    v44 = *(int **)(AssociatedConformanceWitness + 40);
    v57 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v44 + *v44);
    v45 = (_QWORD *)swift_task_alloc(v44[1]);
    *(_QWORD *)(v0 + 408) = v45;
    *v45 = v0;
    v45[1] = AsyncThrowingFlatMapSequence.Iterator.next(isolation:);
    v23 = *(_QWORD *)(v0 + 312);
    v20 = *(_QWORD *)(v0 + 296);
    v19 = *(_QWORD *)(v0 + 232);
    v21 = *(_QWORD *)(v0 + 24);
    v22 = *(_QWORD *)(v0 + 32);
  }
  return v57(v19, v21, v22, v20, v23, AssociatedConformanceWitness);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 432));
  if (v0)
    v3 = AsyncThrowingFlatMapSequence.Iterator.next(isolation:);
  else
    v3 = AsyncThrowingFlatMapSequence.Iterator.next(isolation:);
  return swift_task_switch(v3, *(unsigned __int8 **)(v2 + 376), *(_QWORD *)(v2 + 384));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  int **v16;
  int *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 144);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 160) + 8))(v1, *(_QWORD *)(v0 + 152));
    v5 = *(_QWORD *)(v0 + 360);
    v4 = *(_QWORD *)(v0 + 368);
    v7 = *(_QWORD *)(v0 + 336);
    v6 = *(_QWORD *)(v0 + 344);
    v9 = *(_QWORD *)(v0 + 296);
    v8 = *(_QWORD *)(v0 + 304);
    v11 = *(_QWORD *)(v0 + 280);
    v10 = *(_QWORD *)(v0 + 288);
    v12 = *(_QWORD *)(v0 + 256);
    v20 = *(_QWORD *)(v0 + 248);
    v21 = *(_QWORD *)(v0 + 232);
    v22 = *(_QWORD *)(v0 + 224);
    v23 = *(_QWORD *)(v0 + 184);
    v24 = *(_QWORD *)(v0 + 168);
    v25 = *(_QWORD *)(v0 + 136);
    v26 = *(_QWORD *)(v0 + 128);
    v27 = *(_QWORD *)(v0 + 88);
    v28 = *(_QWORD *)(v0 + 80);
    v29 = *(_QWORD *)(v0 + 72);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 240) + 56))(*(_QWORD *)(v0 + 16), 1, 1, *(_QWORD *)(v0 + 200));
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 40);
    v14 = *(_QWORD *)(v0 + 48);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 184), v1, v3);
    v16 = (int **)(v14 + *(int *)(v15 + 52));
    v17 = *v16;
    *(_QWORD *)(v0 + 440) = v16[1];
    v18 = v17[1];
    v30 = (int *)((char *)v17 + *v17);
    swift_retain();
    v19 = (_QWORD *)swift_task_alloc(v18);
    *(_QWORD *)(v0 + 448) = v19;
    *v19 = v0;
    v19[1] = AsyncThrowingFlatMapSequence.Iterator.next(isolation:);
    return ((uint64_t (*)(_QWORD, _QWORD))v30)(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 184));
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 448);
  *(_QWORD *)(*v1 + 456) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v2 + 176) + 8))(*(_QWORD *)(v2 + 184), *(_QWORD *)(v2 + 144));
  swift_release();
  if (v0)
    v4 = AsyncThrowingFlatMapSequence.Iterator.next(isolation:);
  else
    v4 = AsyncThrowingFlatMapSequence.Iterator.next(isolation:);
  return swift_task_switch(v4, *(unsigned __int8 **)(v2 + 376), *(_QWORD *)(v2 + 384));
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedConformanceWitness;
  int *v7;
  _QWORD *v8;
  int *v10;

  v1 = v0[24];
  v2 = v0[11];
  v4 = v0[8];
  v3 = v0[9];
  v5 = v0[7];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 32))(v2, v0[10], v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v5);
  (*(void (**)(uint64_t, uint64_t))(v1 + 40))(v5, v1);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v0[58] = AssociatedConformanceWitness;
  v7 = *(int **)(AssociatedConformanceWitness + 40);
  v10 = (int *)((char *)v7 + *v7);
  v8 = (_QWORD *)swift_task_alloc(v7[1]);
  v0[59] = v8;
  *v8 = v0;
  v8[1] = AsyncThrowingFlatMapSequence.Iterator.next(isolation:);
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))v10)(v0[28], v0[3], v0[4], v0[36], v0[39], AssociatedConformanceWitness);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 472));
  if (v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v2[44] + 8))(v2[45], v2[39]);
    v3 = (unsigned __int8 *)v2[47];
    v4 = v2[48];
    v5 = AsyncThrowingFlatMapSequence.Iterator.next(isolation:);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v2[8] + 8))(v2[11], v2[7]);
    v3 = (unsigned __int8 *)v2[47];
    v4 = v2[48];
    v5 = AsyncThrowingFlatMapSequence.Iterator.next(isolation:);
  }
  return swift_task_switch(v5, v3, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedConformanceWitness;
  int *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t, uint64_t);
  int *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;

  v1 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 200);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v2, 1, v3);
  v6 = *(_QWORD *)(v0 + 352);
  v5 = *(_QWORD *)(v0 + 360);
  v7 = *(_QWORD *)(v0 + 336);
  v8 = *(_QWORD *)(v0 + 312);
  if (v4 != 1)
  {
    v25 = *(_QWORD *)(v0 + 248);
    v26 = *(_QWORD *)(v0 + 40);
    v54 = *(_QWORD *)(v0 + 16);
    v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32);
    v27(v25, v2, v3);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v7, v5, v8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v7, 0, 1, v8);
    AsyncFlatMapSequence.Iterator.currentIterator.setter(v7, v26);
    v27(v54, v25, v3);
    v12 = 0;
    goto LABEL_6;
  }
  v9 = *(_QWORD *)(v0 + 208);
  v10 = *(_QWORD *)(v0 + 216);
  v11 = *(_QWORD *)(v0 + 40);
  (*(void (**)(_QWORD, _QWORD))(v6 + 8))(*(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 312));
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v2, v9);
  v12 = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v7, 1, 1, v8);
  AsyncFlatMapSequence.Iterator.currentIterator.setter(v7, v11);
  if (*(_BYTE *)(*(_QWORD *)(v0 + 48) + *(int *)(*(_QWORD *)(v0 + 40) + 60)) == 1)
  {
LABEL_6:
    v29 = *(_QWORD *)(v0 + 360);
    v28 = *(_QWORD *)(v0 + 368);
    v31 = *(_QWORD *)(v0 + 336);
    v30 = *(_QWORD *)(v0 + 344);
    v33 = *(_QWORD *)(v0 + 296);
    v32 = *(_QWORD *)(v0 + 304);
    v34 = *(_QWORD *)(v0 + 280);
    v35 = *(_QWORD *)(v0 + 288);
    v43 = *(_QWORD *)(v0 + 256);
    v44 = *(_QWORD *)(v0 + 248);
    v45 = *(_QWORD *)(v0 + 232);
    v46 = *(_QWORD *)(v0 + 224);
    v47 = *(_QWORD *)(v0 + 184);
    v48 = *(_QWORD *)(v0 + 168);
    v49 = *(_QWORD *)(v0 + 136);
    v50 = *(_QWORD *)(v0 + 128);
    v51 = *(_QWORD *)(v0 + 88);
    v52 = *(_QWORD *)(v0 + 80);
    v55 = *(_QWORD *)(v0 + 72);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 240) + 56))(*(_QWORD *)(v0 + 16), v12, 1, *(_QWORD *)(v0 + 200));
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v35);
    swift_task_dealloc(v34);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v55);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v13 = *(_QWORD *)(v0 + 344);
  v14 = *(_QWORD *)(v0 + 352);
  v15 = *(_QWORD *)(v0 + 312);
  AsyncFlatMapSequence.Iterator.currentIterator.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v13, 1, v15) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 328) + 8))(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 320));
    swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    *(_QWORD *)(v0 + 416) = AssociatedConformanceWitness;
    v17 = *(int **)(AssociatedConformanceWitness + 40);
    v18 = swift_checkMetadataState();
    *(_QWORD *)(v0 + 424) = v18;
    v53 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v17 + *v17);
    v19 = (_QWORD *)swift_task_alloc(v17[1]);
    *(_QWORD *)(v0 + 432) = v19;
    *v19 = v0;
    v19[1] = AsyncThrowingFlatMapSequence.Iterator.next(isolation:);
    v20 = *(_QWORD *)(v0 + 168);
    v21 = *(_QWORD *)(v0 + 136);
    v22 = *(_QWORD *)(v0 + 24);
    v23 = *(_QWORD *)(v0 + 32);
    v24 = v18;
  }
  else
  {
    v37 = *(_QWORD *)(v0 + 368);
    v38 = *(_QWORD *)(v0 + 344);
    v39 = *(_QWORD *)(v0 + 312);
    v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 352) + 32);
    *(_QWORD *)(v0 + 392) = v40;
    v40(v37, v38, v39);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    *(_QWORD *)(v0 + 400) = AssociatedConformanceWitness;
    v41 = *(int **)(AssociatedConformanceWitness + 40);
    v53 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v41 + *v41);
    v42 = (_QWORD *)swift_task_alloc(v41[1]);
    *(_QWORD *)(v0 + 408) = v42;
    *v42 = v0;
    v42[1] = AsyncThrowingFlatMapSequence.Iterator.next(isolation:);
    v24 = *(_QWORD *)(v0 + 312);
    v21 = *(_QWORD *)(v0 + 296);
    v20 = *(_QWORD *)(v0 + 232);
    v22 = *(_QWORD *)(v0 + 24);
    v23 = *(_QWORD *)(v0 + 32);
  }
  return v53(v20, v22, v23, v21, v24, AssociatedConformanceWitness);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *(_QWORD *)(v0 + 304);
  v2 = *(_QWORD *)(v0 + 280);
  v3 = *(_QWORD *)(v0 + 264);
  v5 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 48);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 272) + 32);
  v6(v1, *(_QWORD *)(v0 + 296), v3);
  v6(v2, v1, v3);
  *(_BYTE *)(v4 + *(int *)(v5 + 60)) = 1;
  swift_getAssociatedConformanceWitness();
  swift_allocError();
  v6(v7, v2, v3);
  swift_willThrow();
  v8 = *(_QWORD *)(v0 + 360);
  v9 = *(_QWORD *)(v0 + 336);
  v10 = *(_QWORD *)(v0 + 344);
  v12 = *(_QWORD *)(v0 + 296);
  v11 = *(_QWORD *)(v0 + 304);
  v14 = *(_QWORD *)(v0 + 280);
  v13 = *(_QWORD *)(v0 + 288);
  v16 = *(_QWORD *)(v0 + 248);
  v15 = *(_QWORD *)(v0 + 256);
  v18 = *(_QWORD *)(v0 + 232);
  v19 = *(_QWORD *)(v0 + 224);
  v20 = *(_QWORD *)(v0 + 184);
  v21 = *(_QWORD *)(v0 + 168);
  v22 = *(_QWORD *)(v0 + 136);
  v23 = *(_QWORD *)(v0 + 128);
  v24 = *(_QWORD *)(v0 + 88);
  v25 = *(_QWORD *)(v0 + 80);
  v26 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 368));
  swift_task_dealloc(v8);
  swift_task_dealloc(v10);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 120) + 32);
  v3(v1, *(_QWORD *)(v0 + 136), v2);
  swift_getAssociatedConformanceWitness();
  swift_allocError();
  v3(v4, v1, v2);
  v5 = *(_QWORD *)(v0 + 360);
  v6 = *(_QWORD *)(v0 + 336);
  v7 = *(_QWORD *)(v0 + 344);
  v9 = *(_QWORD *)(v0 + 296);
  v8 = *(_QWORD *)(v0 + 304);
  v11 = *(_QWORD *)(v0 + 280);
  v10 = *(_QWORD *)(v0 + 288);
  v13 = *(_QWORD *)(v0 + 248);
  v12 = *(_QWORD *)(v0 + 256);
  v15 = *(_QWORD *)(v0 + 232);
  v16 = *(_QWORD *)(v0 + 224);
  v17 = *(_QWORD *)(v0 + 184);
  v18 = *(_QWORD *)(v0 + 168);
  v19 = *(_QWORD *)(v0 + 136);
  v20 = *(_QWORD *)(v0 + 128);
  v21 = *(_QWORD *)(v0 + 88);
  v22 = *(_QWORD *)(v0 + 80);
  v23 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 368));
  swift_task_dealloc(v5);
  swift_task_dealloc(v7);
  swift_task_dealloc(v6);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 456);
  v2 = *(_QWORD *)(v0 + 352);
  v3 = *(_QWORD *)(v0 + 336);
  v4 = *(_QWORD *)(v0 + 312);
  v5 = *(_QWORD *)(v0 + 40);
  *(_BYTE *)(*(_QWORD *)(v0 + 48) + *(int *)(v5 + 60)) = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56))(v3, 1, 1, v4);
  AsyncFlatMapSequence.Iterator.currentIterator.setter(v3, v5);
  swift_willThrow();
  if (!v1)
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 56));
  v6 = *(_QWORD *)(v0 + 360);
  v7 = *(_QWORD *)(v0 + 336);
  v8 = *(_QWORD *)(v0 + 344);
  v10 = *(_QWORD *)(v0 + 296);
  v9 = *(_QWORD *)(v0 + 304);
  v12 = *(_QWORD *)(v0 + 280);
  v11 = *(_QWORD *)(v0 + 288);
  v13 = *(_QWORD *)(v0 + 248);
  v14 = *(_QWORD *)(v0 + 256);
  v16 = *(_QWORD *)(v0 + 232);
  v17 = *(_QWORD *)(v0 + 224);
  v18 = *(_QWORD *)(v0 + 184);
  v19 = *(_QWORD *)(v0 + 168);
  v20 = *(_QWORD *)(v0 + 136);
  v21 = *(_QWORD *)(v0 + 128);
  v22 = *(_QWORD *)(v0 + 88);
  v23 = *(_QWORD *)(v0 + 80);
  v24 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 368));
  swift_task_dealloc(v6);
  swift_task_dealloc(v8);
  swift_task_dealloc(v7);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v13);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = *(_QWORD *)(v0 + 280);
  v2 = *(_QWORD *)(v0 + 264);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 272) + 32);
  v3(v1, *(_QWORD *)(v0 + 288), v2);
  swift_getAssociatedConformanceWitness();
  swift_allocError();
  v3(v4, v1, v2);
  v5 = *(_QWORD *)(v0 + 456);
  v6 = *(_QWORD *)(v0 + 352);
  v7 = *(_QWORD *)(v0 + 336);
  v8 = *(_QWORD *)(v0 + 312);
  v9 = *(_QWORD *)(v0 + 40);
  *(_BYTE *)(*(_QWORD *)(v0 + 48) + *(int *)(v9 + 60)) = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v7, 1, 1, v8);
  AsyncFlatMapSequence.Iterator.currentIterator.setter(v7, v9);
  swift_willThrow();
  if (!v5)
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 56));
  v10 = *(_QWORD *)(v0 + 360);
  v11 = *(_QWORD *)(v0 + 336);
  v12 = *(_QWORD *)(v0 + 344);
  v14 = *(_QWORD *)(v0 + 296);
  v13 = *(_QWORD *)(v0 + 304);
  v16 = *(_QWORD *)(v0 + 280);
  v15 = *(_QWORD *)(v0 + 288);
  v18 = *(_QWORD *)(v0 + 248);
  v17 = *(_QWORD *)(v0 + 256);
  v20 = *(_QWORD *)(v0 + 232);
  v21 = *(_QWORD *)(v0 + 224);
  v22 = *(_QWORD *)(v0 + 184);
  v23 = *(_QWORD *)(v0 + 168);
  v24 = *(_QWORD *)(v0 + 136);
  v25 = *(_QWORD *)(v0 + 128);
  v26 = *(_QWORD *)(v0 + 88);
  v27 = *(_QWORD *)(v0 + 80);
  v28 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 368));
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v11);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncThrowingFlatMapSequence<A, B>.Iterator(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1EE06A24C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCompactMapSequence<A, B>.Iterator;
  return AsyncThrowingFlatMapSequence.Iterator.next()(a1, a2);
}

uint64_t _ss28AsyncThrowingFlatMapSequenceV8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  _QWORD *v10;

  *(_QWORD *)(v5 + 16) = a4;
  v10 = (_QWORD *)swift_task_alloc(dword_1EE06A254);
  *(_QWORD *)(v5 + 24) = v10;
  *v10 = v5;
  v10[1] = _ss31AsyncThrowingCompactMapSequenceV8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return AsyncThrowingFlatMapSequence.Iterator.next(isolation:)(a1, a2, a3, a5);
}

uint64_t AsyncThrowingFlatMapSequence.makeAsyncIterator()(uint64_t a1)
{
  return AsyncFlatMapSequence.makeAsyncIterator()(a1, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))AsyncThrowingFlatMapSequence.Iterator.init(_:transform:));
}

uint64_t AsyncFlatMapSequence.makeAsyncIterator()(uint64_t a1, uint64_t (*a2)(char *, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v20;

  v4 = v2;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v8 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v14 = (char *)&v20 - v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v11 + 40))(v6, v11);
  v15 = (uint64_t *)(v4 + *(int *)(a1 + 52));
  v16 = *v15;
  v17 = v15[1];
  v18 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8);
  swift_retain();
  v18(v4, a1);
  return a2(v14, v16, v17, v6, *(_QWORD *)(a1 + 24), v11, *(_QWORD *)(a1 + 40));
}

uint64_t AsyncSequence.compactMap<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(_QWORD, uint64_t, uint64_t, uint64_t)@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  _QWORD *v15;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a7, v7);
  v15 = (_QWORD *)(a7 + *(int *)(a6(0, a3, a4, a5) + 44));
  *v15 = a1;
  v15[1] = a2;
  return swift_retain();
}

uint64_t AsyncThrowingMapSequence.init(_:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return AsyncCompactMapSequence.init(_:transform:)(a1, a2, a3, a4, a5, a6, type metadata accessor for AsyncThrowingMapSequence, a7);
}

uint64_t AsyncCompactMapSequence.init(_:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(_QWORD, uint64_t, uint64_t, uint64_t)@<X6>, uint64_t a8@<X8>)
{
  uint64_t result;
  _QWORD *v16;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a8, a1, a4);
  result = a7(0, a4, a5, a6);
  v16 = (_QWORD *)(a8 + *(int *)(result + 44));
  *v16 = a2;
  v16[1] = a3;
  return result;
}

uint64_t AsyncCompactMapSequence.Iterator.baseIterator.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, v1, AssociatedTypeWitness);
}

uint64_t AsyncCompactMapSequence.Iterator.baseIterator.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 40))(v1, a1, AssociatedTypeWitness);
}

uint64_t (*AsyncThrowingMapSequence.Iterator.baseIterator.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t AsyncThrowingMapSequence.Iterator.finished.getter(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 48));
}

uint64_t AsyncThrowingMapSequence.Iterator.finished.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + *(int *)(a2 + 48)) = result;
  return result;
}

uint64_t (*AsyncThrowingMapSequence.Iterator.finished.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t AsyncThrowingMapSequence.Iterator.init(_:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return AsyncThrowingCompactMapSequence.Iterator.init(_:transform:)(a1, a2, a3, a4, a5, a6, type metadata accessor for AsyncThrowingMapSequence.Iterator, a7);
}

uint64_t AsyncThrowingCompactMapSequence.Iterator.init(_:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(_QWORD, uint64_t, uint64_t, uint64_t)@<X6>, uint64_t a8@<X8>)
{
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t result;
  _QWORD *v15;

  v12 = a7(0, a4, a5, a6);
  *(_BYTE *)(a8 + *(int *)(v12 + 48)) = 0;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a8, a1, AssociatedTypeWitness);
  v15 = (_QWORD *)(a8 + *(int *)(v12 + 44));
  *v15 = a2;
  v15[1] = a3;
  return result;
}

uint64_t AsyncThrowingMapSequence.Iterator.next()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v3[5] = *(_QWORD *)(a2 + 32);
  v3[6] = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3[7] = AssociatedTypeWitness;
  v5 = type metadata accessor for Optional();
  v3[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[9] = v6;
  v3[10] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3[11] = v7;
  v3[12] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(AsyncThrowingMapSequence.Iterator.next(), 0, 0);
}

uint64_t AsyncThrowingMapSequence.Iterator.next()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedConformanceWitness;
  int *v6;
  uint64_t v7;
  _QWORD *v8;
  int *v9;

  v1 = *(_QWORD *)(v0 + 24);
  if ((*(_BYTE *)(*(_QWORD *)(v0 + 32) + *(int *)(v1 + 48)) & 1) != 0)
  {
    v2 = *(_QWORD *)(v0 + 96);
    v3 = *(_QWORD *)(v0 + 80);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 24) - 8) + 56))(*(_QWORD *)(v0 + 16), 1, 1);
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v6 = *(int **)(AssociatedConformanceWitness + 32);
    v7 = swift_checkMetadataState();
    v9 = (int *)((char *)v6 + *v6);
    v8 = (_QWORD *)swift_task_alloc(v6[1]);
    *(_QWORD *)(v0 + 104) = v8;
    *v8 = v0;
    v8[1] = AsyncThrowingMapSequence.Iterator.next();
    return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v9)(*(_QWORD *)(v0 + 80), v7, AssociatedConformanceWitness);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = AsyncThrowingMapSequence.Iterator.next();
  else
    v3 = AsyncThrowingMapSequence.Iterator.next();
  return swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  int **v9;
  int *v10;
  uint64_t v11;
  _QWORD *v12;
  int *v13;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 56);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(v1, *(_QWORD *)(v0 + 64));
    v4 = *(_QWORD *)(v0 + 96);
    v5 = *(_QWORD *)(v0 + 80);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) + 24) - 8) + 56))(*(_QWORD *)(v0 + 16), 1, 1);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 24);
    v7 = *(_QWORD *)(v0 + 32);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 96), v1, v3);
    v9 = (int **)(v7 + *(int *)(v8 + 44));
    v10 = *v9;
    *(_QWORD *)(v0 + 120) = v9[1];
    v11 = v10[1];
    v13 = (int *)((char *)v10 + *v10);
    swift_retain();
    v12 = (_QWORD *)swift_task_alloc(v11);
    *(_QWORD *)(v0 + 128) = v12;
    *v12 = v0;
    v12[1] = AsyncThrowingMapSequence.Iterator.next();
    return ((uint64_t (*)(_QWORD, _QWORD))v13)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 96));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc(v3);
  v5 = v2[11];
  v4 = v2[12];
  v6 = v2[7];
  if (v0)
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    v7 = AsyncThrowingMapSequence.Iterator.next();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    swift_release();
    v7 = AsyncThrowingMapSequence.Iterator.next();
  }
  return swift_task_switch(v7, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 80);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) + 24) - 8) + 56))(*(_QWORD *)(v0 + 16), 0, 1);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_BYTE *)(*(_QWORD *)(v0 + 32) + *(int *)(*(_QWORD *)(v0 + 24) + 48)) = 1;
  swift_willThrow();
  v1 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AsyncThrowingMapSequence.Iterator.next(isolation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v5[7] = *(_QWORD *)(a4 + 32);
  v5[8] = *(_QWORD *)(a4 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[9] = AssociatedTypeWitness;
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5[10] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[11] = swift_task_alloc(v10);
  v5[12] = swift_task_alloc(v10);
  v11 = swift_getAssociatedTypeWitness();
  v5[13] = v11;
  v12 = type metadata accessor for Optional();
  v5[14] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v5[15] = v13;
  v5[16] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v11 - 8);
  v5[17] = v14;
  v5[18] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    ObjectType = swift_getObjectType();
    v16 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(ObjectType, a3);
    v18 = v17;
  }
  else
  {
    v16 = 0;
    v18 = 0;
  }
  v5[19] = v16;
  v5[20] = v18;
  return swift_task_switch(AsyncThrowingMapSequence.Iterator.next(isolation:), v16, v18);
}

uint64_t AsyncThrowingMapSequence.Iterator.next(isolation:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedConformanceWitness;
  int *v8;
  uint64_t v9;
  _QWORD *v10;
  int *v11;

  v1 = *(_QWORD *)(v0 + 40);
  if ((*(_BYTE *)(*(_QWORD *)(v0 + 48) + *(int *)(v1 + 48)) & 1) != 0)
  {
    v2 = *(_QWORD *)(v0 + 144);
    v3 = *(_QWORD *)(v0 + 128);
    v5 = *(_QWORD *)(v0 + 88);
    v4 = *(_QWORD *)(v0 + 96);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 24) - 8) + 56))(*(_QWORD *)(v0 + 16), 1, 1);
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    *(_QWORD *)(v0 + 168) = AssociatedConformanceWitness;
    v8 = *(int **)(AssociatedConformanceWitness + 40);
    v9 = swift_checkMetadataState();
    *(_QWORD *)(v0 + 176) = v9;
    v11 = (int *)((char *)v8 + *v8);
    v10 = (_QWORD *)swift_task_alloc(v8[1]);
    *(_QWORD *)(v0 + 184) = v10;
    *v10 = v0;
    v10[1] = AsyncThrowingMapSequence.Iterator.next(isolation:);
    return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))v11)(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 96), v9, AssociatedConformanceWitness);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 184));
  if (v0)
    v3 = AsyncThrowingMapSequence.Iterator.next(isolation:);
  else
    v3 = AsyncThrowingMapSequence.Iterator.next(isolation:);
  return swift_task_switch(v3, *(unsigned __int8 **)(v2 + 152), *(_QWORD *)(v2 + 160));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  int **v11;
  int *v12;
  uint64_t v13;
  _QWORD *v14;
  int *v15;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 104);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(v1, *(_QWORD *)(v0 + 112));
    v4 = *(_QWORD *)(v0 + 144);
    v5 = *(_QWORD *)(v0 + 128);
    v7 = *(_QWORD *)(v0 + 88);
    v6 = *(_QWORD *)(v0 + 96);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 40) + 24) - 8) + 56))(*(_QWORD *)(v0 + 16), 1, 1);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 40);
    v9 = *(_QWORD *)(v0 + 48);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 144), v1, v3);
    v11 = (int **)(v9 + *(int *)(v10 + 44));
    v12 = *v11;
    *(_QWORD *)(v0 + 192) = v11[1];
    v13 = v12[1];
    v15 = (int *)((char *)v12 + *v12);
    swift_retain();
    v14 = (_QWORD *)swift_task_alloc(v13);
    *(_QWORD *)(v0 + 200) = v14;
    *v14 = v0;
    v14[1] = AsyncThrowingMapSequence.Iterator.next(isolation:);
    return ((uint64_t (*)(_QWORD, _QWORD))v15)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 144));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t (*v9)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 200);
  *(_QWORD *)(*(_QWORD *)v1 + 208) = v0;
  swift_task_dealloc(v3);
  v5 = v2[17];
  v4 = v2[18];
  v6 = v2[13];
  if (v0)
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    v7 = (unsigned __int8 *)v2[19];
    v8 = v2[20];
    v9 = AsyncThrowingMapSequence.Iterator.next(isolation:);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v5 + 8))(v2[18], v2[13]);
    swift_release();
    v7 = (unsigned __int8 *)v2[19];
    v8 = v2[20];
    v9 = AsyncThrowingMapSequence.Iterator.next(isolation:);
  }
  return swift_task_switch(v9, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 96);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 40) + 24) - 8) + 56))(*(_QWORD *)(v0 + 16), 0, 1);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 80) + 32);
  v3(v1, *(_QWORD *)(v0 + 96), v2);
  swift_getAssociatedConformanceWitness();
  swift_allocError();
  v3(v4, v1, v2);
  v5 = *(_QWORD *)(v0 + 128);
  v7 = *(_QWORD *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(*(_QWORD *)(v0 + 48) + *(int *)(*(_QWORD *)(v0 + 40) + 48)) = 1;
  swift_willThrow();
  v1 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncThrowingMapSequence<A, B>.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1EE06A25C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCompactMapSequence<A, B>.Iterator;
  return AsyncThrowingMapSequence.Iterator.next()(a1, a2);
}

uint64_t _ss24AsyncThrowingMapSequenceV8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v10;

  *(_QWORD *)(v5 + 16) = a4;
  v10 = (_QWORD *)swift_task_alloc(dword_1EE06A264);
  *(_QWORD *)(v5 + 24) = v10;
  *v10 = v5;
  v10[1] = _ss24AsyncThrowingMapSequenceV8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return AsyncThrowingMapSequence.Iterator.next(isolation:)(a1, a2, a3, a5);
}

uint64_t _ss24AsyncThrowingMapSequenceV8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 24);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (v0)
    **(_QWORD **)(v2 + 16) = v0;
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t AsyncThrowingMapSequence.makeAsyncIterator()(uint64_t a1)
{
  return AsyncCompactMapSequence.makeAsyncIterator()(a1, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))AsyncThrowingMapSequence.Iterator.init(_:transform:));
}

uint64_t AsyncSequence.prefix(while:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(_QWORD, uint64_t, uint64_t)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  _QWORD *v13;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a6, v6);
  v13 = (_QWORD *)(a6 + *(int *)(a5(0, a3, a4) + 36));
  *v13 = a1;
  v13[1] = a2;
  return swift_retain();
}

uint64_t AsyncThrowingPrefixWhileSequence.init(_:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return AsyncDropWhileSequence.init(_:predicate:)(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AsyncThrowingPrefixWhileSequence, a6);
}

uint64_t AsyncDropWhileSequence.init(_:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(_QWORD, uint64_t, uint64_t)@<X5>, uint64_t a7@<X8>)
{
  uint64_t result;
  _QWORD *v14;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a7, a1, a4);
  result = a6(0, a4, a5);
  v14 = (_QWORD *)(a7 + *(int *)(result + 36));
  *v14 = a2;
  v14[1] = a3;
  return result;
}

uint64_t (*AsyncThrowingPrefixWhileSequence.Iterator.predicateHasFailed.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t AsyncPrefixWhileSequence.Iterator.baseIterator.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;

  v4 = v2 + *(int *)(a1 + 36);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a2, v4, AssociatedTypeWitness);
}

uint64_t AsyncPrefixWhileSequence.Iterator.baseIterator.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;

  v4 = v2 + *(int *)(a2 + 36);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 40))(v4, a1, AssociatedTypeWitness);
}

uint64_t (*AsyncThrowingPrefixWhileSequence.Iterator.baseIterator.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t AsyncThrowingPrefixWhileSequence.Iterator.init(_:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _BYTE *a6@<X8>)
{
  return AsyncPrefixWhileSequence.Iterator.init(_:predicate:)(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AsyncThrowingPrefixWhileSequence.Iterator, a6);
}

uint64_t AsyncPrefixWhileSequence.Iterator.init(_:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(_QWORD, uint64_t, uint64_t)@<X5>, _BYTE *a7@<X8>)
{
  uint64_t v11;
  _BYTE *v12;
  uint64_t AssociatedTypeWitness;
  uint64_t result;
  _QWORD *v15;

  *a7 = 0;
  v11 = a6(0, a4, a5);
  v12 = &a7[*(int *)(v11 + 36)];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v12, a1, AssociatedTypeWitness);
  v15 = &a7[*(int *)(v11 + 40)];
  *v15 = a2;
  v15[1] = a3;
  return result;
}

uint64_t AsyncThrowingPrefixWhileSequence.Iterator.next()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v3[5] = *(_QWORD *)(a2 + 24);
  v3[6] = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3[7] = AssociatedTypeWitness;
  v5 = type metadata accessor for Optional();
  v3[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[9] = v6;
  v3[10] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3[11] = v7;
  v3[12] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(AsyncThrowingPrefixWhileSequence.Iterator.next(), 0, 0);
}

uint64_t AsyncThrowingPrefixWhileSequence.Iterator.next()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedConformanceWitness;
  int *v5;
  uint64_t v6;
  _QWORD *v7;
  int *v8;

  if ((**(_BYTE **)(v0 + 32) & 1) != 0)
  {
    v1 = *(_QWORD *)(v0 + 96);
    v2 = *(_QWORD *)(v0 + 80);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 56))(*(_QWORD *)(v0 + 16), 1, 1, *(_QWORD *)(v0 + 56));
    swift_task_dealloc(v1);
    swift_task_dealloc(v2);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v5 = *(int **)(AssociatedConformanceWitness + 32);
    v6 = swift_checkMetadataState();
    v8 = (int *)((char *)v5 + *v5);
    v7 = (_QWORD *)swift_task_alloc(v5[1]);
    *(_QWORD *)(v0 + 104) = v7;
    *v7 = v0;
    v7[1] = AsyncThrowingPrefixWhileSequence.Iterator.next();
    return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v8)(*(_QWORD *)(v0 + 80), v6, AssociatedConformanceWitness);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = AsyncThrowingMapSequence.Iterator.next();
  else
    v3 = AsyncThrowingPrefixWhileSequence.Iterator.next();
  return swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  int **v11;
  int *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t (*v15)(_QWORD);

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 56);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(v1, *(_QWORD *)(v0 + 64));
    v4 = *(_QWORD *)(v0 + 96);
    v5 = *(_QWORD *)(v0 + 80);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 56))(*(_QWORD *)(v0 + 16), 1, 1, *(_QWORD *)(v0 + 56));
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 96);
    v9 = *(_QWORD *)(v0 + 24);
    v8 = *(_QWORD *)(v0 + 32);
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    *(_QWORD *)(v0 + 120) = v10;
    v10(v7, v1, v3);
    v11 = (int **)(v8 + *(int *)(v9 + 40));
    v12 = *v11;
    *(_QWORD *)(v0 + 128) = v11[1];
    v13 = v12[1];
    v15 = (uint64_t (*)(_QWORD))((char *)v12 + *v12);
    swift_retain();
    v14 = (_QWORD *)swift_task_alloc(v13);
    *(_QWORD *)(v0 + 136) = v14;
    *v14 = v0;
    v14[1] = AsyncThrowingPrefixWhileSequence.Iterator.next();
    return v15(*(_QWORD *)(v0 + 96));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(v0 + 152) == 1)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 120))(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 56));
    v1 = 0;
  }
  else
  {
    v2 = *(_BYTE **)(v0 + 32);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 56));
    v1 = 1;
    *v2 = 1;
  }
  v3 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 80);
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 56))(*(_QWORD *)(v0 + 16), v1, 1, *(_QWORD *)(v0 + 56));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  **(_BYTE **)(v0 + 32) = 1;
  swift_willThrow();
  v1 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AsyncThrowingPrefixWhileSequence.Iterator.next()(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 136);
  *(_QWORD *)(*v2 + 144) = v1;
  swift_task_dealloc(v5);
  swift_release();
  if (v1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v4 + 88) + 8))(*(_QWORD *)(v4 + 96), *(_QWORD *)(v4 + 56));
    v6 = AsyncThrowingPrefixWhileSequence.Iterator.next();
  }
  else
  {
    *(_BYTE *)(v4 + 152) = a1 & 1;
    v6 = AsyncThrowingPrefixWhileSequence.Iterator.next();
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t AsyncThrowingPrefixWhileSequence.Iterator.next(isolation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v5[7] = *(_QWORD *)(a4 + 24);
  v5[8] = *(_QWORD *)(a4 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[9] = AssociatedTypeWitness;
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5[10] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[11] = swift_task_alloc(v10);
  v5[12] = swift_task_alloc(v10);
  v11 = swift_getAssociatedTypeWitness();
  v5[13] = v11;
  v12 = type metadata accessor for Optional();
  v5[14] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v5[15] = v13;
  v5[16] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v11 - 8);
  v5[17] = v14;
  v5[18] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    ObjectType = swift_getObjectType();
    v16 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(ObjectType, a3);
    v18 = v17;
  }
  else
  {
    v16 = 0;
    v18 = 0;
  }
  v5[19] = v16;
  v5[20] = v18;
  return swift_task_switch(AsyncThrowingPrefixWhileSequence.Iterator.next(isolation:), v16, v18);
}

uint64_t AsyncThrowingPrefixWhileSequence.Iterator.next(isolation:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedConformanceWitness;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  int *v10;

  if ((**(_BYTE **)(v0 + 48) & 1) != 0)
  {
    v1 = *(_QWORD *)(v0 + 144);
    v2 = *(_QWORD *)(v0 + 128);
    v3 = *(_QWORD *)(v0 + 96);
    v4 = *(_QWORD *)(v0 + 88);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 136) + 56))(*(_QWORD *)(v0 + 16), 1, 1, *(_QWORD *)(v0 + 104));
    swift_task_dealloc(v1);
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    *(_QWORD *)(v0 + 168) = AssociatedConformanceWitness;
    v7 = *(int **)(AssociatedConformanceWitness + 40);
    v8 = swift_checkMetadataState();
    *(_QWORD *)(v0 + 176) = v8;
    v10 = (int *)((char *)v7 + *v7);
    v9 = (_QWORD *)swift_task_alloc(v7[1]);
    *(_QWORD *)(v0 + 184) = v9;
    *v9 = v0;
    v9[1] = AsyncThrowingPrefixWhileSequence.Iterator.next(isolation:);
    return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))v10)(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 96), v8, AssociatedConformanceWitness);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 184));
  if (v0)
    v3 = AsyncThrowingMapSequence.Iterator.next(isolation:);
  else
    v3 = AsyncThrowingPrefixWhileSequence.Iterator.next(isolation:);
  return swift_task_switch(v3, *(unsigned __int8 **)(v2 + 152), *(_QWORD *)(v2 + 160));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  int **v13;
  int *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t (*v17)(_QWORD);

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 104);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(v1, *(_QWORD *)(v0 + 112));
    v4 = *(_QWORD *)(v0 + 144);
    v5 = *(_QWORD *)(v0 + 128);
    v6 = *(_QWORD *)(v0 + 96);
    v7 = *(_QWORD *)(v0 + 88);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 136) + 56))(*(_QWORD *)(v0 + 16), 1, 1, *(_QWORD *)(v0 + 104));
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 144);
    v11 = *(_QWORD *)(v0 + 40);
    v10 = *(_QWORD *)(v0 + 48);
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    *(_QWORD *)(v0 + 192) = v12;
    v12(v9, v1, v3);
    v13 = (int **)(v10 + *(int *)(v11 + 40));
    v14 = *v13;
    *(_QWORD *)(v0 + 200) = v13[1];
    v15 = v14[1];
    v17 = (uint64_t (*)(_QWORD))((char *)v14 + *v14);
    swift_retain();
    v16 = (_QWORD *)swift_task_alloc(v15);
    *(_QWORD *)(v0 + 208) = v16;
    *v16 = v0;
    v16[1] = AsyncThrowingPrefixWhileSequence.Iterator.next(isolation:);
    return v17(*(_QWORD *)(v0 + 144));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_BYTE *)(v0 + 224) == 1)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 192))(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 104));
    v1 = 0;
  }
  else
  {
    v2 = *(_BYTE **)(v0 + 48);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 136) + 8))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 104));
    v1 = 1;
    *v2 = 1;
  }
  v3 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 88);
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 136) + 56))(*(_QWORD *)(v0 + 16), v1, 1, *(_QWORD *)(v0 + 104));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  **(_BYTE **)(v0 + 48) = 1;
  swift_willThrow();
  v1 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AsyncThrowingPrefixWhileSequence.Iterator.next(isolation:)(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t (*v8)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 208);
  *(_QWORD *)(*v2 + 216) = v1;
  swift_task_dealloc(v5);
  swift_release();
  if (v1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v4 + 136) + 8))(*(_QWORD *)(v4 + 144), *(_QWORD *)(v4 + 104));
    v6 = *(unsigned __int8 **)(v4 + 152);
    v7 = *(_QWORD *)(v4 + 160);
    v8 = AsyncThrowingPrefixWhileSequence.Iterator.next(isolation:);
  }
  else
  {
    *(_BYTE *)(v4 + 224) = a1 & 1;
    v6 = *(unsigned __int8 **)(v4 + 152);
    v7 = *(_QWORD *)(v4 + 160);
    v8 = AsyncThrowingPrefixWhileSequence.Iterator.next(isolation:);
  }
  return swift_task_switch(v8, v6, v7);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncThrowingPrefixWhileSequence<A>.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1EE06A26C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCompactMapSequence<A, B>.Iterator;
  return AsyncThrowingPrefixWhileSequence.Iterator.next()(a1, a2);
}

uint64_t _ss32AsyncThrowingPrefixWhileSequenceV8IteratorVyx_GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v10;

  *(_QWORD *)(v5 + 16) = a4;
  v10 = (_QWORD *)swift_task_alloc(dword_1EE06A274);
  *(_QWORD *)(v5 + 24) = v10;
  *v10 = v5;
  v10[1] = _ss31AsyncThrowingCompactMapSequenceV8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return AsyncThrowingPrefixWhileSequence.Iterator.next(isolation:)(a1, a2, a3, a5);
}

uint64_t AsyncThrowingPrefixWhileSequence.makeAsyncIterator()(uint64_t a1)
{
  return AsyncDropWhileSequence.makeAsyncIterator()(a1, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))AsyncThrowingPrefixWhileSequence.Iterator.init(_:predicate:));
}

uint64_t static GlobalActor.sharedUnownedExecutor.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(void))(a2 + 24))();
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v3 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 8);
  v4 = swift_checkMetadataState();
  v5 = v3(v4, AssociatedConformanceWitness);
  swift_unknownObjectRelease();
  return v5;
}

uint64_t _ss24globalConcurrentExecutorSch_pvg()
{
  type metadata accessor for _DefaultGlobalConcurrentExecutor();
  swift_initStaticObject();
  return swift_unknownObjectRetain();
}

uint64_t _getUndefinedTaskExecutor()()
{
  return 0;
}

uint64_t _ss32_DefaultGlobalConcurrentExecutorCSchsSch013asUnownedTaskD0s0fgD0VyFTW()
{
  return 0;
}

uint64_t one-time initialization function for shared()
{
  uint64_t result;

  type metadata accessor for MainActor();
  result = swift_initStaticObject();
  static MainActor.shared = result;
  return result;
}

uint64_t static MainActor.shared.getter()
{
  return swift_initStaticObject();
}

uint64_t MainActor.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t MainActor.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for static GlobalActor.shared.getter in conformance MainActor()
{
  return swift_initStaticObject();
}

uint64_t static MainActor.run<A>(resultType:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  unsigned __int8 *MainExecutor;
  uint64_t v6;

  v4[3] = a3;
  v4[4] = a4;
  v4[2] = a1;
  swift_initStaticObject();
  MainExecutor = (unsigned __int8 *)swift_task_getMainExecutor();
  return swift_task_switch(static MainActor.run<A>(resultType:body:), MainExecutor, v6);
}

uint64_t static MainActor.run<A>(resultType:body:)()
{
  uint64_t v0;

  (*(void (**)(void))(v0 + 24))();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t static MainActor.assumeIsolated<A>(_:file:line:)(void (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t MainExecutor;
  uint64_t v12;
  _QWORD *v13;
  uint64_t result;
  char isEscapingClosureAtFileLocation;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;

  if (one-time initialization token for shared != -1)
    swift_once();
  MainExecutor = swift_task_getMainExecutor();
  if ((swift_task_isCurrentExecutor(MainExecutor, v12) & 1) == 0)
    goto LABEL_8;
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = a7;
  v13[3] = a1;
  v13[4] = a2;
  a1();
  if (v7)
    return swift_release();
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
LABEL_8:
    _StringGuts.grow(_:)(66);
    v16._object = (void *)0x800000018D5BFD40;
    v16._countAndFlagsBits = 0xD00000000000003FLL;
    String.append(_:)(v16);
    v17._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._countAndFlagsBits = 46;
    v18._object = (void *)0xE100000000000000;
    String.append(_:)(v18);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

{
  return static MainActor.assumeIsolated<A>(_:file:line:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t UnownedJob.description.getter(uint64_t a1)
{
  Swift::String v1;
  Swift::String v2;

  if (!swift_task_getJobTaskId(a1))
    return 0xD000000000000013;
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(")", 1uLL, 1);
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  return 0x4A64656E776F6E55;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance UnownedJob()
{
  uint64_t *v0;

  return UnownedJob.description.getter(*v0);
}

uint64_t Job.description.getter(uint64_t a1)
{
  Swift::String v1;
  Swift::String v2;

  if (swift_task_getJobTaskId(a1))
  {
    v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v1);
    swift_bridgeObjectRelease();
    v2._countAndFlagsBits = 41;
    v2._object = (void *)0xE100000000000000;
    String.append(_:)(v2);
  }
  return 0x203A646928626F4ALL;
}

unint64_t ExecutorJob.description.getter(uint64_t a1)
{
  Swift::String v1;
  Swift::String v2;

  if (!swift_task_getJobTaskId(a1))
    return 0xD000000000000014;
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 41;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0xD000000000000010;
}

uint64_t JobPriority.rawValue.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*JobPriority.rawValue.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t TaskPriority.init(_:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = result;
  a2[1] = result == 0;
  return result;
}

uint64_t TaskPriority.init(rawValue:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = result;
  return result;
}

BOOL static JobPriority.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

BOOL static JobPriority.!= infix(_:_:)(char a1, char a2)
{
  return a1 != a2;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance JobPriority(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

BOOL static JobPriority.< infix(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  return a1 < a2;
}

BOOL static JobPriority.<= infix(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  return a2 >= a1;
}

BOOL static JobPriority.> infix(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  return a2 < a1;
}

BOOL static JobPriority.>= infix(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  return a1 >= a2;
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance JobPriority(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance JobPriority(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 >= *a1;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance JobPriority(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 >= *a2;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance JobPriority(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 < *a1;
}

uint64_t UnsafeContinuation.context.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*UnsafeContinuation.context.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t withUnsafeContinuation<A>(isolation:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t ObjectType;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;

  v5[11] = a4;
  v5[12] = a5;
  v5[10] = a1;
  if (a2)
  {
    ObjectType = swift_getObjectType();
    v8 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(ObjectType, a3);
    v10 = v9;
  }
  else
  {
    v8 = 0;
    v10 = 0;
  }
  return swift_task_switch(withUnsafeContinuation<A>(isolation:_:), v8, v10);
}

uint64_t withUnsafeContinuation<A>(isolation:_:)()
{
  _QWORD *v0;
  void (*v1)(swift *);
  swift *v2;

  v1 = (void (*)(swift *))v0[11];
  v0[7] = v0[10];
  v0[2] = v0;
  v0[3] = withCheckedContinuation<A>(isolation:function:_:);
  v2 = swift_continuation_init(v0 + 2, 0);
  v1(v2);
  return swift_continuation_await((uint64_t)(v0 + 2));
}

uint64_t withUnsafeThrowingContinuation<A>(isolation:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t ObjectType;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;

  v5[11] = a4;
  v5[12] = a5;
  v5[10] = a1;
  if (a2)
  {
    ObjectType = swift_getObjectType();
    v8 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(ObjectType, a3);
    v10 = v9;
  }
  else
  {
    v8 = 0;
    v10 = 0;
  }
  return swift_task_switch(withUnsafeThrowingContinuation<A>(isolation:_:), v8, v10);
}

uint64_t withUnsafeThrowingContinuation<A>(isolation:_:)()
{
  _QWORD *v0;
  void (*v1)(swift *);
  swift *v2;

  v1 = (void (*)(swift *))v0[11];
  v0[7] = v0[10];
  v0[2] = v0;
  v0[3] = withCheckedThrowingContinuation<A>(isolation:function:_:);
  v2 = swift_continuation_init(v0 + 2, 1uLL);
  v1(v2);
  return swift_continuation_await((uint64_t)(v0 + 2));
}

uint64_t static Task<>.yield()()
{
  return swift_task_switch(static Task<>.yield(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  swift *v2;
  uint64_t NullaryContinuationJob;
  unsigned __int8 v5;

  v1 = v0 + 16;
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = withCheckedContinuation<A>(isolation:function:_:);
  v2 = swift_continuation_init((_QWORD *)(v0 + 16), 0);
  static Task<>.currentPriority.getter(&v5);
  NullaryContinuationJob = swift_task_createNullaryContinuationJob(v5, (uint64_t)v2);
  swift_task_enqueueGlobal(NullaryContinuationJob);
  return swift_continuation_await(v1);
}

uint64_t withTaskCancellationHandler<A>(operation:onCancel:)(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t);

  *(_QWORD *)(v5 + 16) = swift_task_addCancellationHandler(a4, a5);
  v10 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v8 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v5 + 24) = v8;
  *v8 = v5;
  v8[1] = withTaskCancellationHandler<A>(operation:onCancel:);
  return v10(a1);
}

uint64_t withTaskCancellationHandler<A>(operation:onCancel:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*v0 + 16);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 24));
  swift_task_removeCancellationHandler(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

unint64_t Task.value.getter(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;

  return swift_task_future_wait_throwing(a1, a2, Task.value.getter, (_QWORD *)(v2 + 16));
}

uint64_t Task.value.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t Task.result.getter(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v8;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a1;
  v5[4] = a3;
  v8 = (_QWORD *)swift_task_alloc(dword_1EE06A294);
  v5[7] = v8;
  *v8 = v5;
  v8[1] = Task.result.getter;
  return swift_task_future_wait_throwing(a1, a2, Task.value.getter, v8 + 2);
}

uint64_t Task.result.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = Task.result.getter;
  else
    v3 = Task.result.getter;
  return swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;

  type metadata accessor for Result();
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 64);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_dynamicCast();
  type metadata accessor for Result();
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t Task<>.value.getter(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;

  return swift_task_future_wait(a1, a2, Task.value.getter, (_QWORD *)(v2 + 16));
}

void Task.hash(into:)(int a1, Swift::UInt a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int Task.hashValue.getter(Swift::UInt a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Task<A, B>()
{
  Swift::UInt *v0;

  return Task.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance Task<A, B>(int a1)
{
  Swift::UInt *v1;

  Task.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Task<A, B>()
{
  Swift::UInt *v0;
  char v2;

  Hasher.init(_seed:)();
  Task.hash(into:)((int)&v2, *v0);
  return Hasher._finalize()();
}

BOOL static Task.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Task<A, B>(uint64_t *a1, uint64_t *a2)
{
  return static Task.== infix(_:_:)(*a1, *a2);
}

swift::AsyncTask *static Task<>.startOnMainActor(priority:_:)(unsigned __int8 *a1, int *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  swift::AsyncTask *v5;

  if (a1[1])
    v4 = 3072;
  else
    v4 = *a1 | 0xC00;
  v5 = (swift::AsyncTask *)swift_task_create(v4, 0, a4, a2, a3);
  swift_task_startOnMainActor(v5);
  return v5;
}

swift::AsyncTask *static Task<>.startOnMainActor(priority:_:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  _QWORD *v8;
  swift::AsyncTask *v9;

  if (a1[1])
    v7 = 3072;
  else
    v7 = *a1 | 0xC00;
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = a4;
  v8[3] = a2;
  v8[4] = a3;
  v9 = (swift::AsyncTask *)swift_task_create(v7, 0, a4, (int *)&async function pointer to partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A), (uint64_t)v8);
  swift_task_startOnMainActor(v9);
  return v9;
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A)(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A);
  return v6(a1);
}

uint64_t TaskPriority.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t TaskPriority.rawValue.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*TaskPriority.rawValue.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

void static TaskPriority.low.getter(_BYTE *a1@<X8>)
{
  *a1 = 17;
}

void static TaskPriority.userInitiated.getter(_BYTE *a1@<X8>)
{
  *a1 = 25;
}

void static TaskPriority.background.getter(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

void static TaskPriority.default.getter(_BYTE *a1@<X8>)
{
  *a1 = 21;
}

unsigned __int8 *protocol witness for RawRepresentable.init(rawValue:) in conformance TaskPriority@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance TaskPriority(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

BOOL static TaskPriority.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

BOOL static TaskPriority.!= infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 != *a2;
}

BOOL static TaskPriority.< infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

BOOL static TaskPriority.<= infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 >= *a1;
}

BOOL static TaskPriority.> infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 < *a1;
}

BOOL static TaskPriority.>= infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 >= *a2;
}

unint64_t TaskPriority.description.getter()
{
  _BYTE *v0;
  unint64_t result;
  Swift::String v2;
  Swift::String v3;

  result = 0xD000000000000010;
  switch(((*v0 - 9) >> 2) | ((*v0 - 9) << 6))
  {
    case 0:
      result = 0xD000000000000017;
      break;
    case 2:
      return result;
    case 3:
      result = 0xD000000000000013;
      break;
    case 4:
      result = 0xD000000000000011;
      break;
    default:
      _StringGuts.grow(_:)(16);
      swift_bridgeObjectRelease();
      v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v2);
      swift_bridgeObjectRelease();
      v3._countAndFlagsBits = 41;
      v3._object = (void *)0xE100000000000000;
      String.append(_:)(v3);
      result = 0xD000000000000017;
      break;
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance TaskPriority()
{
  lazy protocol witness table accessor for type TaskPriority and conformance TaskPriority();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TaskPriority()
{
  lazy protocol witness table accessor for type TaskPriority and conformance TaskPriority();
  return RawRepresentable<>.encode(to:)();
}

unint64_t static Task<>.currentPriority.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v2;
  char v3;
  unint64_t result;

  if (swift_task_getCurrent())
  {
    v2 = swift_retain();
    v3 = swift_task_currentPriority(v2);
    result = swift_release();
LABEL_5:
    *a1 = v3;
    return result;
  }
  result = swift_task_getCurrentThreadPriority();
  if ((result & 0x8000000000000000) == 0)
  {
    v3 = result;
    if (result < 0x100)
      goto LABEL_5;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t UnsafeCurrentTask.priority.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t *v1;
  uint64_t result;

  result = swift_task_currentPriority(*v1);
  *a1 = result;
  return result;
}

uint64_t withUnsafeCurrentTask<A>(body:)(void (*a1)(uint64_t *))
{
  uint64_t Current;
  uint64_t v4;

  Current = swift_task_getCurrent();
  if (Current)
  {
    v4 = Current;
    swift_retain();
    a1(&v4);
    return swift_release();
  }
  else
  {
    v4 = 0;
    return ((uint64_t (*)(uint64_t *))a1)(&v4);
  }
}

uint64_t static Task<>.basePriority.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  char v5;

  result = swift_task_getCurrent();
  v3 = result;
  if (result)
  {
    v4 = swift_retain();
    v5 = swift_task_basePriority(v4);
    result = swift_release();
  }
  else
  {
    v5 = 0;
  }
  *a1 = v5;
  a1[1] = v3 == 0;
  return result;
}

uint64_t withUnsafeCurrentTask<A>(body:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[5] = a2;
  v3[6] = a3;
  v3[4] = a1;
  return swift_task_switch(withUnsafeCurrentTask<A>(body:), 0, 0);
}

uint64_t withUnsafeCurrentTask<A>(body:)()
{
  _QWORD *v0;
  uint64_t Current;
  int *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  int *v9;

  Current = swift_task_getCurrent();
  v0[7] = Current;
  v2 = (int *)v0[5];
  if (Current)
  {
    v0[3] = Current;
    v3 = v2[1];
    v9 = (int *)((char *)v2 + *v2);
    swift_retain();
    v4 = (_QWORD *)swift_task_alloc(v3);
    v0[8] = v4;
    *v4 = v0;
    v4[1] = withUnsafeCurrentTask<A>(body:);
    v5 = v0[4];
    v6 = v0 + 3;
  }
  else
  {
    v0[2] = 0;
    v9 = (int *)((char *)v2 + *v2);
    v7 = (_QWORD *)swift_task_alloc(v2[1]);
    v0[10] = v7;
    *v7 = v0;
    v7[1] = withUnsafeCurrentTask<A>(body:);
    v5 = v0[4];
    v6 = v0 + 2;
  }
  return ((uint64_t (*)(uint64_t, _QWORD *))v9)(v5, v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 64);
  v3 = *v1;
  *(_QWORD *)(v3 + 72) = v0;
  swift_task_dealloc(v2);
  swift_release();
  if (v0)
    return swift_task_switch(withUnsafeCurrentTask<A>(body:), 0, 0);
  else
    return (*(uint64_t (**)(void))(v3 + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 80);
  v3 = *v1;
  *(_QWORD *)(v3 + 88) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(withUnsafeCurrentTask<A>(body:), 0, 0);
  else
    return (*(uint64_t (**)(void))(v3 + 8))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t UnsafeCurrentTask.isCancelled.getter()
{
  uint64_t *v0;

  return swift_task_isCancelled(*v0);
}

uint64_t UnsafeCurrentTask.basePriority.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t *v1;
  uint64_t result;

  result = swift_task_basePriority(*v1);
  *a1 = result;
  return result;
}

Swift::Void __swiftcall UnsafeCurrentTask.cancel()()
{
  swift::AsyncTask **v0;

  swift_task_cancel(*v0);
}

void UnsafeCurrentTask.hash(into:)()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int UnsafeCurrentTask.hashValue.getter()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance UnsafeCurrentTask()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance UnsafeCurrentTask()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance UnsafeCurrentTask()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL static UnsafeCurrentTask.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance UnsafeCurrentTask(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t _getGenericSerialExecutor()()
{
  return 0;
}

void _runAsyncMain(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)swift_allocObject();
  v4[2] = 0;
  v4[3] = 0;
  v4[4] = a1;
  v4[5] = a2;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = &async function pointer to partial apply for closure #1 in _runAsyncMain(_:);
  *(_QWORD *)(v5 + 24) = v4;
  swift_retain();
  swift_task_create(0x1000uLL, 0, MEMORY[0x1E0DEE9C0] + 8, (int *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATu, v5);
  swift_release();
  swift_task_asyncMainDrainQueue();
}

uint64_t closure #1 in _runAsyncMain(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unsigned __int8 *MainExecutor;
  uint64_t v7;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  type metadata accessor for MainActor();
  swift_initStaticObject();
  MainExecutor = (unsigned __int8 *)swift_task_getMainExecutor();
  return swift_task_switch(closure #1 in _runAsyncMain(_:), MainExecutor, v7);
}

uint64_t closure #1 in _runAsyncMain(_:)()
{
  uint64_t v0;
  int *v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v1 = *(int **)(v0 + 16);
  v4 = (uint64_t (*)(void))((char *)v1 + *v1);
  v2 = (_QWORD *)swift_task_alloc(v1[1]);
  *(_QWORD *)(v0 + 32) = v2;
  *v2 = v0;
  v2[1] = closure #1 in _runAsyncMain(_:);
  return v4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  *(_QWORD *)(*(_QWORD *)v1 + 40) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = closure #1 in _runAsyncMain(_:);
  else
    v3 = (uint64_t (*)(void))closure #1 in _runAsyncMain(_:);
  return swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_errorInMain();
  MEMORY[0x18D78FECC](v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void closure #1 in _runAsyncMain(_:)()
{
  exit(0);
}

uint64_t _ss26withTaskExecutorPreference_9isolation9operationxSch_pSg_ScA_pSgYixyYaq_YKXEtYaq_YKs5ErrorR_r0_lF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v10;
  unint64_t v11;
  uint64_t ObjectType;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v7[7] = v17;
  v7[8] = v18;
  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  v10 = *(_QWORD *)(v17 - 8);
  v7[9] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[10] = swift_task_alloc(v11);
  v7[11] = swift_task_alloc(v11);
  if (a4)
  {
    ObjectType = swift_getObjectType();
    v13 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t))(a5 + 8))(ObjectType, a5);
    v15 = v14;
  }
  else
  {
    v13 = 0;
    v15 = 0;
  }
  v7[12] = v13;
  v7[13] = v15;
  return swift_task_switch(_ss26withTaskExecutorPreference_9isolation9operationxSch_pSg_ScA_pSgYixyYaq_YKXEtYaq_YKs5ErrorR_r0_lFTY0_, v13, v15);
}

uint64_t _ss26withTaskExecutorPreference_9isolation9operationxSch_pSg_ScA_pSgYixyYaq_YKXEtYaq_YKs5ErrorR_r0_lFTY0_()
{
  _QWORD *v0;
  int *v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int *v10;

  v1 = (int *)v0[5];
  if (v0[3])
  {
    v2 = v0[4];
    ObjectType = swift_getObjectType();
    v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 40))(ObjectType, v2);
    v0[14] = swift_task_pushTaskExecutorPreference(v4, v5);
    v10 = (int *)((char *)v1 + *v1);
    v6 = (_QWORD *)swift_task_alloc(v1[1]);
    v0[15] = v6;
    *v6 = v0;
    v6[1] = _ss26withTaskExecutorPreference_9isolation9operationxSch_pSg_ScA_pSgYixyYaq_YKXEtYaq_YKs5ErrorR_r0_lFTQ1_;
    v7 = v0[11];
  }
  else
  {
    v10 = (int *)((char *)v1 + *v1);
    v8 = (_QWORD *)swift_task_alloc(v1[1]);
    v0[16] = v8;
    *v8 = v0;
    v8[1] = _ss26withTaskExecutorPreference_9isolation9operationxSch_pSg_ScA_pSgYixyYaq_YKXEtYaq_YKs5ErrorR_r0_lFTQ3_;
    v7 = v0[10];
  }
  return ((uint64_t (*)(_QWORD, uint64_t))v10)(v0[2], v7);
}

uint64_t _ss26withTaskExecutorPreference_9isolation9operationxSch_pSg_ScA_pSgYixyYaq_YKXEtYaq_YKs5ErrorR_r0_lFTQ1_()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 120));
  if (v0)
    v3 = _ss26withTaskExecutorPreference_9isolation9operationxSch_pSg_ScA_pSgYixyYaq_YKXEtYaq_YKs5ErrorR_r0_lFTY5_;
  else
    v3 = _ss26withTaskExecutorPreference_9isolation9operationxSch_pSg_ScA_pSgYixyYaq_YKXEtYaq_YKs5ErrorR_r0_lFTY2_;
  return swift_task_switch(v3, *(unsigned __int8 **)(v2 + 96), *(_QWORD *)(v2 + 104));
}

uint64_t _ss26withTaskExecutorPreference_9isolation9operationxSch_pSg_ScA_pSgYixyYaq_YKXEtYaq_YKs5ErrorR_r0_lFTY2_()
{
  uint64_t v0;
  uint64_t v1;

  swift_task_popTaskExecutorPreference(*(_QWORD *)(v0 + 112));
  v1 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _ss26withTaskExecutorPreference_9isolation9operationxSch_pSg_ScA_pSgYixyYaq_YKXEtYaq_YKs5ErrorR_r0_lFTQ3_()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 128);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (v0)
    return swift_task_switch(_ss26withTaskExecutorPreference_9isolation9operationxSch_pSg_ScA_pSgYixyYaq_YKXEtYaq_YKs5ErrorR_r0_lFTY4_, *(unsigned __int8 **)(v2 + 96), *(_QWORD *)(v2 + 104));
  v6 = *(_QWORD *)(v2 + 80);
  swift_task_dealloc(*(_QWORD *)(v2 + 88));
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t _ss26withTaskExecutorPreference_9isolation9operationxSch_pSg_ScA_pSgYixyYaq_YKXEtYaq_YKs5ErrorR_r0_lFTY4_()
{
  uint64_t v0;
  uint64_t v1;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 32))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 56));
  v1 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _ss26withTaskExecutorPreference_9isolation9operationxSch_pSg_ScA_pSgYixyYaq_YKXEtYaq_YKs5ErrorR_r0_lFTY5_()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 112);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 32))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 56));
  swift_task_popTaskExecutorPreference(v1);
  v2 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _ss26withTaskExecutorPreference_9operationxSch_pSg_xyYaYbKXEtYaKs8SendableRzlF(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  _QWORD *v4;
  uint64_t ObjectType;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (*v12)();
  uint64_t (*v14)(uint64_t);

  if (a2)
  {
    ObjectType = swift_getObjectType();
    v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 40))(ObjectType, a3);
    v4[2] = swift_task_pushTaskExecutorPreference(v9, v10);
    v14 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
    v11 = (_QWORD *)swift_task_alloc(a4[1]);
    v4[3] = v11;
    v12 = _ss26withTaskExecutorPreference_9operationxSch_pSg_xyYaYbKXEtYaKs8SendableRzlFTQ0_;
  }
  else
  {
    v14 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
    v11 = (_QWORD *)swift_task_alloc(a4[1]);
    v4[4] = v11;
    v12 = _ss26withTaskExecutorPreference_9operationxSch_pSg_xyYaYbKXEtYaKs8SendableRzlFTQ1_;
  }
  *v11 = v4;
  v11[1] = v12;
  return v14(a1);
}

uint64_t _ss26withTaskExecutorPreference_9operationxSch_pSg_xyYaYbKXEtYaKs8SendableRzlFTQ0_()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*v0 + 16);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 24));
  swift_task_popTaskExecutorPreference(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t _ss26withTaskExecutorPreference_9operationxSch_pSg_xyYaYbKXEtYaKs8SendableRzlFTQ1_()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 32));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t withTaskCancellationHandler<A>(operation:onCancel:isolation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t ObjectType;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;

  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  if (a6)
  {
    ObjectType = swift_getObjectType();
    v10 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t))(a7 + 8))(ObjectType, a7);
    v12 = v11;
  }
  else
  {
    v10 = 0;
    v12 = 0;
  }
  v7[7] = v10;
  v7[8] = v12;
  return swift_task_switch(withTaskCancellationHandler<A>(operation:onCancel:isolation:), v10, v12);
}

uint64_t withTaskCancellationHandler<A>(operation:onCancel:isolation:)()
{
  _QWORD *v0;
  int *v1;
  _QWORD *v2;
  uint64_t (*v4)(_QWORD);

  v1 = (int *)v0[3];
  v0[9] = swift_task_addCancellationHandler(v0[5], v0[6]);
  v4 = (uint64_t (*)(_QWORD))((char *)v1 + *v1);
  v2 = (_QWORD *)swift_task_alloc(v1[1]);
  v0[10] = v2;
  *v2 = v0;
  v2[1] = withTaskCancellationHandler<A>(operation:onCancel:isolation:);
  return v4(v0[2]);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 80);
  *(_QWORD *)(*v1 + 88) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = withTaskCancellationHandler<A>(operation:onCancel:isolation:);
  else
    v4 = withTaskCancellationHandler<A>(operation:onCancel:isolation:);
  return swift_task_switch(v4, *(unsigned __int8 **)(v2 + 56), *(_QWORD *)(v2 + 64));
}

{
  uint64_t v0;

  swift_task_removeCancellationHandler(*(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_task_removeCancellationHandler(*(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t static Task<>.isCancelled.getter()
{
  uint64_t result;
  uint64_t v1;
  char isCancelled;

  result = swift_task_getCurrent();
  if (result)
  {
    v1 = swift_retain();
    isCancelled = swift_task_isCancelled(v1);
    swift_release();
    return isCancelled & 1;
  }
  return result;
}

uint64_t static Task<>.checkCancellation()()
{
  uint64_t result;
  uint64_t v1;
  char isCancelled;

  result = swift_task_getCurrent();
  if (result)
  {
    v1 = swift_retain();
    isCancelled = swift_task_isCancelled(v1);
    result = swift_release();
    if ((isCancelled & 1) != 0)
    {
      lazy protocol witness table accessor for type CancellationError and conformance CancellationError();
      swift_allocError();
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t TaskGroup.awaitAllRemainingTasks()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *(_QWORD *)(a1 + 16);
  v3 = type metadata accessor for Optional();
  v2[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[6] = v4;
  v2[7] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (_QWORD *)swift_task_alloc(dword_1EE06A304);
  v2[8] = v5;
  *v5 = v2;
  v5[1] = TaskGroup.awaitAllRemainingTasks();
  v6 = v2[3];
  v5[7] = v2[7];
  v5[8] = v6;
  v5[9] = 0;
  v5[10] = 0;
  return swift_task_switch(TaskGroup.next(isolation:), 0, 0);
}

uint64_t TaskGroup.awaitAllRemainingTasks()()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 64));
  return swift_task_switch(TaskGroup.awaitAllRemainingTasks(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  int v2;
  _QWORD *v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 32) - 8) + 48))(v1, 1);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 48) + 8))(v1, *(_QWORD *)(v0 + 40));
  if (v2 == 1)
  {
    swift_task_dealloc(v1);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v4 = (_QWORD *)swift_task_alloc(dword_1EE06A304);
    *(_QWORD *)(v0 + 64) = v4;
    *v4 = v0;
    v4[1] = TaskGroup.awaitAllRemainingTasks();
    v5 = *(_QWORD *)(v0 + 24);
    v4[7] = *(_QWORD *)(v0 + 56);
    v4[8] = v5;
    v4[9] = 0;
    v4[10] = 0;
    return swift_task_switch(TaskGroup.next(isolation:), 0, 0);
  }
}

uint64_t withTaskGroup<A, B>(of:returning:isolation:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t ObjectType;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;

  v8[37] = a7;
  v8[38] = a8;
  v8[35] = a1;
  v8[36] = a6;
  if (a4)
  {
    ObjectType = swift_getObjectType();
    v11 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t))(a5 + 8))(ObjectType, a5);
    v13 = v12;
  }
  else
  {
    v11 = 0;
    v13 = 0;
  }
  v8[39] = v11;
  v8[40] = v13;
  return swift_task_switch(withTaskGroup<A, B>(of:returning:isolation:body:), v11, v13);
}

uint64_t withTaskGroup<A, B>(of:returning:isolation:body:)()
{
  _QWORD *v0;
  int *v1;
  _QWORD *v2;
  int *v4;

  v1 = (int *)v0[36];
  swift_taskGroup_initialize((uint64_t)(v0 + 2), v0[38]);
  v0[34] = v0 + 2;
  v4 = (int *)((char *)v1 + *v1);
  v2 = (_QWORD *)swift_task_alloc(v1[1]);
  v0[41] = v2;
  *v2 = v0;
  v2[1] = withTaskGroup<A, B>(of:returning:isolation:body:);
  return ((uint64_t (*)(_QWORD, _QWORD *))v4)(v0[35], v0 + 34);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 304);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 328));
  v4 = (_QWORD *)swift_task_alloc(dword_1EE06A2FC);
  *(_QWORD *)(v1 + 336) = v4;
  v7 = type metadata accessor for TaskGroup(0, v2, v5, v6);
  *v4 = v3;
  v4[1] = withTaskGroup<A, B>(of:returning:isolation:body:);
  return TaskGroup.awaitAllRemainingTasks()(v7);
}

{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 336));
  return swift_task_switch(withTaskGroup<A, B>(of:returning:isolation:body:), *(unsigned __int8 **)(v1 + 312), *(_QWORD *)(v1 + 320));
}

{
  uint64_t v0;

  swift_taskGroup_destroy(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t withTaskGroup<A, B>(of:returning:body:)(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v9;
  int *v11;

  v6[35] = a6;
  swift_taskGroup_initialize((uint64_t)(v6 + 2), a6);
  v6[34] = v6 + 2;
  v11 = (int *)((char *)a4 + *a4);
  v9 = (_QWORD *)swift_task_alloc(a4[1]);
  v6[36] = v9;
  *v9 = v6;
  v9[1] = withTaskGroup<A, B>(of:returning:body:);
  return ((uint64_t (*)(uint64_t, _QWORD *))v11)(a1, v6 + 34);
}

uint64_t withTaskGroup<A, B>(of:returning:body:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 280);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 288));
  v4 = (_QWORD *)swift_task_alloc(dword_1EE06A2FC);
  *(_QWORD *)(v1 + 296) = v4;
  v7 = type metadata accessor for TaskGroup(0, v2, v5, v6);
  *v4 = v3;
  v4[1] = withTaskGroup<A, B>(of:returning:body:);
  return TaskGroup.awaitAllRemainingTasks()(v7);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *v0 + 16;
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 296));
  swift_taskGroup_destroy(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t ThrowingTaskGroup.awaitAllRemainingTasks()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1EE06A324);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCompactMapSequence<A, B>.Iterator;
  return ThrowingTaskGroup.awaitAllRemainingTasks(isolation:)(0, 0, a1);
}

uint64_t withThrowingTaskGroup<A, B>(of:returning:isolation:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t ObjectType;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;

  v8[37] = a7;
  v8[38] = a8;
  v8[35] = a1;
  v8[36] = a6;
  if (a4)
  {
    ObjectType = swift_getObjectType();
    v11 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t))(a5 + 8))(ObjectType, a5);
    v13 = v12;
  }
  else
  {
    v11 = 0;
    v13 = 0;
  }
  v8[39] = v11;
  v8[40] = v13;
  return swift_task_switch(withThrowingTaskGroup<A, B>(of:returning:isolation:body:), v11, v13);
}

uint64_t withThrowingTaskGroup<A, B>(of:returning:isolation:body:)()
{
  _QWORD *v0;
  int *v1;
  _QWORD *v2;
  int *v4;

  v1 = (int *)v0[36];
  swift_taskGroup_initialize((uint64_t)(v0 + 2), v0[38]);
  v0[41] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  v0[34] = v0 + 2;
  v4 = (int *)((char *)v1 + *v1);
  v2 = (_QWORD *)swift_task_alloc(v1[1]);
  v0[42] = v2;
  *v2 = v0;
  v2[1] = withThrowingTaskGroup<A, B>(of:returning:isolation:body:);
  return ((uint64_t (*)(_QWORD, _QWORD *))v4)(v0[35], v0 + 34);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = *(_QWORD *)(*v1 + 336);
  v3 = *v1;
  *(_QWORD *)(v3 + 344) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(withThrowingTaskGroup<A, B>(of:returning:isolation:body:), *(unsigned __int8 **)(v3 + 312), *(_QWORD *)(v3 + 320));
  v5 = *(_QWORD *)(v3 + 328);
  v6 = *(_QWORD *)(v3 + 304);
  v7 = (_QWORD *)swift_task_alloc(dword_1EE06A31C);
  *(_QWORD *)(v3 + 352) = v7;
  v8 = type metadata accessor for ThrowingTaskGroup(0, v6, v5, MEMORY[0x1E0DEDB38]);
  *v7 = v3;
  v7[1] = withThrowingTaskGroup<A, B>(of:returning:isolation:body:);
  v9 = (_QWORD *)swift_task_alloc(dword_1EE06A324);
  v7[2] = v9;
  *v9 = v7;
  v9[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCompactMapSequence<A, B>.Iterator;
  return ThrowingTaskGroup.awaitAllRemainingTasks(isolation:)(0, 0, v8);
}

{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 352));
  return swift_task_switch(withThrowingTaskGroup<A, B>(of:returning:isolation:body:), *(unsigned __int8 **)(v1 + 312), *(_QWORD *)(v1 + 320));
}

{
  uint64_t v0;

  swift_taskGroup_destroy(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[41];
  v2 = v0[38];
  swift_taskGroup_cancelAll(v0[34]);
  v3 = (_QWORD *)swift_task_alloc(dword_1EE06A31C);
  v0[45] = (uint64_t)v3;
  v4 = type metadata accessor for ThrowingTaskGroup(0, v2, v1, MEMORY[0x1E0DEDB38]);
  *v3 = v0;
  v3[1] = withThrowingTaskGroup<A, B>(of:returning:isolation:body:);
  v5 = (_QWORD *)swift_task_alloc(dword_1EE06A324);
  v3[2] = v5;
  *v5 = v3;
  v5[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCompactMapSequence<A, B>.Iterator;
  return ThrowingTaskGroup.awaitAllRemainingTasks(isolation:)(0, 0, v4);
}

{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 360));
  return swift_task_switch(withThrowingTaskGroup<A, B>(of:returning:isolation:body:), *(unsigned __int8 **)(v1 + 312), *(_QWORD *)(v1 + 320));
}

{
  uint64_t v0;

  swift_taskGroup_destroy(v0 + 16);
  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t withThrowingTaskGroup<A, B>(of:returning:body:)(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v9;
  int *v11;

  v6[35] = a6;
  swift_taskGroup_initialize((uint64_t)(v6 + 2), a6);
  v6[36] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  v6[34] = v6 + 2;
  v11 = (int *)((char *)a4 + *a4);
  v9 = (_QWORD *)swift_task_alloc(a4[1]);
  v6[37] = v9;
  *v9 = v6;
  v9[1] = withThrowingTaskGroup<A, B>(of:returning:body:);
  return ((uint64_t (*)(uint64_t, _QWORD *))v11)(a1, v6 + 34);
}

uint64_t withThrowingTaskGroup<A, B>(of:returning:body:)()
{
  uint64_t v0;
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)();
  _QWORD *v10;

  v2 = *v1;
  v3 = (*v1)[37];
  v4 = *v1;
  (*v1)[38] = v0;
  swift_task_dealloc(v3);
  v5 = v2[35];
  v6 = v2[36];
  if (v0)
  {
    swift_taskGroup_cancelAll(v2[34]);
    v7 = (_QWORD *)swift_task_alloc(dword_1EE06A31C);
    v2[40] = (uint64_t)v7;
    v8 = type metadata accessor for ThrowingTaskGroup(0, v5, v6, MEMORY[0x1E0DEDB38]);
    v9 = withThrowingTaskGroup<A, B>(of:returning:body:);
  }
  else
  {
    v7 = (_QWORD *)swift_task_alloc(dword_1EE06A31C);
    v2[39] = (uint64_t)v7;
    v8 = type metadata accessor for ThrowingTaskGroup(0, v5, v6, MEMORY[0x1E0DEDB38]);
    v9 = withThrowingTaskGroup<A, B>(of:returning:body:);
  }
  *v7 = v4;
  v7[1] = v9;
  v10 = (_QWORD *)swift_task_alloc(dword_1EE06A324);
  v7[2] = v10;
  *v10 = v7;
  v10[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCompactMapSequence<A, B>.Iterator;
  return ThrowingTaskGroup.awaitAllRemainingTasks(isolation:)(0, 0, v8);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *v0 + 16;
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 312));
  swift_taskGroup_destroy(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *v0;
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 320));
  swift_taskGroup_destroy(v1 + 16);
  swift_willThrow();
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t TaskGroup.next(isolation:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t ObjectType;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;

  v4[7] = a1;
  v4[8] = v3;
  if (a2)
  {
    ObjectType = swift_getObjectType();
    v7 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(ObjectType, a3);
    v9 = v8;
  }
  else
  {
    v7 = 0;
    v9 = 0;
  }
  v4[9] = v7;
  v4[10] = v9;
  return swift_task_switch(TaskGroup.next(isolation:), v7, v9);
}

uint64_t TaskGroup.next(isolation:)()
{
  uint64_t v0;

  return swift_taskGroup_wait_next_throwing(*(_QWORD *)(v0 + 56), **(_QWORD **)(v0 + 64), (uint64_t)TaskGroup.next(isolation:), (_QWORD *)(v0 + 16));
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 88) = v0;
  if (v0)
    return swift_task_switch(TaskGroup.next(isolation:), *(unsigned __int8 **)(v1 + 72), *(_QWORD *)(v1 + 80));
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

{
  return swift_unexpectedError();
}

uint64_t TaskGroup.next()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 56) = a1;
  *(_QWORD *)(v2 + 64) = v1;
  return swift_task_switch(TaskGroup.next(), 0, 0);
}

uint64_t TaskGroup.next()()
{
  uint64_t v0;

  return swift_taskGroup_wait_next_throwing(*(_QWORD *)(v0 + 56), **(_QWORD **)(v0 + 64), (uint64_t)TaskGroup.next(), (_QWORD *)(v0 + 16));
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 72) = v0;
  if (v0)
    return swift_task_switch(TaskGroup.next(), 0, 0);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

{
  return swift_unexpectedError();
}

uint64_t TaskGroup.awaitAllRemainingTasks(isolation:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v4[6] = *(_QWORD *)(a3 + 16);
  v5 = type metadata accessor for Optional();
  v4[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[8] = v6;
  v4[9] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (_QWORD *)swift_task_alloc(dword_1EE06A304);
  v4[10] = (uint64_t)v7;
  *v7 = v4;
  v7[1] = TaskGroup.awaitAllRemainingTasks(isolation:);
  return TaskGroup.next(isolation:)(v4[9], v4[2], v4[3]);
}

uint64_t TaskGroup.awaitAllRemainingTasks(isolation:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 16);
  swift_task_dealloc(*(_QWORD *)(*v0 + 80));
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 24);
    ObjectType = swift_getObjectType();
    v5 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(ObjectType, v3);
    v7 = v6;
  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  return swift_task_switch(TaskGroup.awaitAllRemainingTasks(isolation:), v5, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 72);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 48) - 8) + 48))(v1, 1) == 1)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(v1, *(_QWORD *)(v0 + 56));
    swift_task_dealloc(v1);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(v1, *(_QWORD *)(v0 + 56));
    v3 = (_QWORD *)swift_task_alloc(dword_1EE06A304);
    *(_QWORD *)(v0 + 80) = v3;
    *v3 = v0;
    v3[1] = TaskGroup.awaitAllRemainingTasks(isolation:);
    return TaskGroup.next(isolation:)(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  }
}

uint64_t ThrowingTaskGroup.awaitAllRemainingTasks(isolation:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v4[6] = *(_QWORD *)(a3 + 16);
  v5 = type metadata accessor for Optional();
  v4[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[8] = v6;
  v4[9] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (_QWORD *)swift_task_alloc(dword_1EE06A34C);
  v4[10] = (uint64_t)v7;
  *v7 = v4;
  v7[1] = ThrowingTaskGroup.awaitAllRemainingTasks(isolation:);
  return ThrowingTaskGroup.next(isolation:)(v4[9], v4[2], v4[3]);
}

uint64_t ThrowingTaskGroup.awaitAllRemainingTasks(isolation:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 80));
  v3 = *(_QWORD *)(v2 + 16);
  if (v0)
  {
    MEMORY[0x18D78FECC](v0);
    if (v3)
    {
      v4 = *(_QWORD *)(v2 + 24);
      ObjectType = swift_getObjectType();
      v6 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(ObjectType, v4);
      v8 = v7;
    }
    else
    {
      v6 = 0;
      v8 = 0;
    }
    v12 = ThrowingTaskGroup.awaitAllRemainingTasks(isolation:);
  }
  else
  {
    if (v3)
    {
      v9 = *(_QWORD *)(v2 + 24);
      v10 = swift_getObjectType();
      v6 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v9);
      v8 = v11;
    }
    else
    {
      v6 = 0;
      v8 = 0;
    }
    v12 = ThrowingTaskGroup.awaitAllRemainingTasks(isolation:);
  }
  return swift_task_switch(v12, v6, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 72);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 48) - 8) + 48))(v1, 1) == 1)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(v1, *(_QWORD *)(v0 + 56));
    swift_task_dealloc(v1);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(v1, *(_QWORD *)(v0 + 56));
    v3 = (_QWORD *)swift_task_alloc(dword_1EE06A34C);
    *(_QWORD *)(v0 + 80) = v3;
    *v3 = v0;
    v3[1] = ThrowingTaskGroup.awaitAllRemainingTasks(isolation:);
    return ThrowingTaskGroup.next(isolation:)(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  }
}

{
  uint64_t *v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1EE06A34C);
  v0[10] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = ThrowingTaskGroup.awaitAllRemainingTasks(isolation:);
  return ThrowingTaskGroup.next(isolation:)(v0[9], v0[2], v0[3]);
}

uint64_t ThrowingTaskGroup.next(isolation:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v4 + 56) = a1;
  *(_QWORD *)(v4 + 64) = v3;
  if (a2)
  {
    ObjectType = swift_getObjectType();
    v7 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(ObjectType, a3);
    v9 = v8;
  }
  else
  {
    v7 = 0;
    v9 = 0;
  }
  return swift_task_switch(ThrowingTaskGroup.next(isolation:), v7, v9);
}

uint64_t ThrowingTaskGroup.next(isolation:)()
{
  uint64_t v0;

  return swift_taskGroup_wait_next_throwing(*(_QWORD *)(v0 + 56), **(_QWORD **)(v0 + 64), (uint64_t)Task.value.getter, (_QWORD *)(v0 + 16));
}

uint64_t ThrowingTaskGroup._waitForAll()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;

  v3 = (_QWORD *)swift_task_alloc(dword_1EE06A31C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A);
  v4 = (_QWORD *)swift_task_alloc(dword_1EE06A324);
  v3[2] = v4;
  *v4 = v3;
  v4[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCompactMapSequence<A, B>.Iterator;
  return ThrowingTaskGroup.awaitAllRemainingTasks(isolation:)(0, 0, a1);
}

uint64_t ThrowingTaskGroup.next()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 56) = a1;
  *(_QWORD *)(v2 + 64) = v1;
  return swift_task_switch(ThrowingTaskGroup.next(), 0, 0);
}

uint64_t ThrowingTaskGroup.next()()
{
  uint64_t v0;

  return swift_taskGroup_wait_next_throwing(*(_QWORD *)(v0 + 56), **(_QWORD **)(v0 + 64), (uint64_t)ThrowingTaskGroup.next(), (_QWORD *)(v0 + 16));
}

uint64_t ThrowingTaskGroup.nextResult()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  v4 = *(_QWORD *)(a2 + 16);
  v3[11] = v4;
  v5 = type metadata accessor for Optional();
  v3[12] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[13] = v6;
  v3[14] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v4 - 8);
  v3[15] = v7;
  v3[16] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(ThrowingTaskGroup.nextResult(), 0, 0);
}

uint64_t ThrowingTaskGroup.nextResult()()
{
  uint64_t v0;

  return swift_taskGroup_wait_next_throwing(*(_QWORD *)(v0 + 112), **(_QWORD **)(v0 + 80), (uint64_t)ThrowingTaskGroup.nextResult(), (_QWORD *)(v0 + 16));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  *(_QWORD *)(v1 + 136) = v0;
  if (v0)
    v2 = ThrowingTaskGroup.nextResult();
  else
    v2 = ThrowingTaskGroup.nextResult();
  return swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 88);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    v4 = *(_QWORD *)(v0 + 64);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 104) + 8))(v1, *(_QWORD *)(v0 + 96));
    v5 = type metadata accessor for Result();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 128);
    v7 = *(_QWORD *)(v0 + 64);
    v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    v8(v6, v1, v3);
    v8(v7, v6, v3);
    v9 = type metadata accessor for Result();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v7, 0, 1, v9);
  }
  v10 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 64);
  *(_QWORD *)(v0 + 56) = *(_QWORD *)(v0 + 136);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_dynamicCast();
  v2 = type metadata accessor for Result();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 0, 1, v2);
  v3 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t TaskGroup.makeAsyncIterator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t TaskGroup.Iterator.group.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t TaskGroup.Iterator.group.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*TaskGroup.Iterator.group.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t TaskGroup.Iterator.finished.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t TaskGroup.Iterator.finished.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = result;
  return result;
}

uint64_t (*TaskGroup.Iterator.finished.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t TaskGroup.Iterator.next()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[2] = a1;
  v3[3] = v2;
  v3[4] = *(_QWORD *)(a2 + 16);
  v4 = type metadata accessor for Optional();
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v3[7] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(TaskGroup.Iterator.next(), 0, 0);
}

uint64_t TaskGroup.Iterator.next()()
{
  uint64_t v0;
  _QWORD *v2;
  uint64_t v3;

  if ((*(_BYTE *)(*(_QWORD *)(v0 + 24) + 8) & 1) != 0)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 32) - 8) + 56))(*(_QWORD *)(v0 + 16), 1, 1);
    swift_task_dealloc(*(_QWORD *)(v0 + 56));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v2 = (_QWORD *)swift_task_alloc(dword_1EE06A304);
    *(_QWORD *)(v0 + 64) = v2;
    *v2 = v0;
    v2[1] = TaskGroup.Iterator.next();
    v3 = *(_QWORD *)(v0 + 24);
    v2[7] = *(_QWORD *)(v0 + 56);
    v2[8] = v3;
    v2[9] = 0;
    v2[10] = 0;
    return swift_task_switch(TaskGroup.next(isolation:), 0, 0);
  }
}

{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 64));
  return swift_task_switch(TaskGroup.Iterator.next(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = *(_QWORD *)(v0 + 16);
    v5 = *(_QWORD *)(v0 + 24);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 48) + 8))(v1, *(_QWORD *)(v0 + 40));
    *(_BYTE *)(v5 + 8) = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v4, 1, 1, v2);
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 16);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v6, v1, v2);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v6, 0, 1, v2);
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t TaskGroup.Iterator.next(isolation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;

  v5[4] = a3;
  v5[5] = v4;
  v5[2] = a1;
  v5[3] = a2;
  v5[6] = *(_QWORD *)(a4 + 16);
  v8 = type metadata accessor for Optional();
  v5[7] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[8] = v9;
  v5[9] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    ObjectType = swift_getObjectType();
    v11 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(ObjectType, a3);
    v13 = v12;
  }
  else
  {
    v11 = 0;
    v13 = 0;
  }
  v5[10] = v11;
  v5[11] = v13;
  return swift_task_switch(TaskGroup.Iterator.next(isolation:), v11, v13);
}

uint64_t TaskGroup.Iterator.next(isolation:)()
{
  uint64_t v0;
  _QWORD *v2;

  if ((*(_BYTE *)(*(_QWORD *)(v0 + 40) + 8) & 1) != 0)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 48) - 8) + 56))(*(_QWORD *)(v0 + 16), 1, 1);
    swift_task_dealloc(*(_QWORD *)(v0 + 72));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v2 = (_QWORD *)swift_task_alloc(dword_1EE06A304);
    *(_QWORD *)(v0 + 96) = v2;
    *v2 = v0;
    v2[1] = TaskGroup.Iterator.next(isolation:);
    return TaskGroup.next(isolation:)(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  }
}

{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 96));
  return swift_task_switch(TaskGroup.Iterator.next(isolation:), *(unsigned __int8 **)(v1 + 80), *(_QWORD *)(v1 + 88));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = *(_QWORD *)(v0 + 40);
    v5 = *(_QWORD *)(v0 + 16);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(v1, *(_QWORD *)(v0 + 56));
    *(_BYTE *)(v4 + 8) = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v5, 1, 1, v2);
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 16);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v6, v1, v2);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v6, 0, 1, v2);
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Void __swiftcall TaskGroup.Iterator.cancel()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 8) = 1;
  swift_taskGroup_cancelAll(*(_QWORD *)v0);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance TaskGroup<A>.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1EE06A36C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for AsyncIteratorProtocol.next() in conformance TaskGroup<A>.Iterator;
  return TaskGroup.Iterator.next()(a1, a2);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance TaskGroup<A>.Iterator()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t _sScG8IteratorVyx_GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v10;

  v10 = (_QWORD *)swift_task_alloc(dword_1EE06A374);
  *(_QWORD *)(v5 + 16) = v10;
  *v10 = v5;
  v10[1] = thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A);
  return TaskGroup.Iterator.next(isolation:)(a1, a2, a3, a5);
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance TaskGroup<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return TaskGroup.makeAsyncIterator()(*v1, a1);
}

uint64_t ThrowingTaskGroup.makeAsyncIterator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t ThrowingTaskGroup.Iterator.group.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t (*ThrowingTaskGroup.Iterator.group.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t (*ThrowingTaskGroup.Iterator.finished.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t ThrowingTaskGroup.Iterator.next()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v3[5] = *(_QWORD *)(a2 + 16);
  v4 = type metadata accessor for Optional();
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v3[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(ThrowingTaskGroup.Iterator.next(), 0, 0);
}

uint64_t ThrowingTaskGroup.Iterator.next()()
{
  uint64_t v0;
  _QWORD *v2;
  uint64_t v3;

  if ((*(_BYTE *)(*(_QWORD *)(v0 + 32) + 8) & 1) != 0)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 40) - 8) + 56))(*(_QWORD *)(v0 + 16), 1, 1);
    swift_task_dealloc(*(_QWORD *)(v0 + 64));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v2 = (_QWORD *)swift_task_alloc(dword_1EE06A34C);
    *(_QWORD *)(v0 + 72) = v2;
    *v2 = v0;
    v2[1] = ThrowingTaskGroup.Iterator.next();
    v3 = *(_QWORD *)(v0 + 32);
    v2[7] = *(_QWORD *)(v0 + 64);
    v2[8] = v3;
    return swift_task_switch(ThrowingTaskGroup.next(isolation:), 0, 0);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = ThrowingTaskGroup.Iterator.next();
  else
    v3 = ThrowingTaskGroup.Iterator.next();
  return swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = *(_QWORD *)(v0 + 32);
    v5 = *(_QWORD *)(v0 + 16);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(v1, *(_QWORD *)(v0 + 48));
    *(_BYTE *)(v4 + 8) = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v5, 1, 1, v2);
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 16);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v6, v1, v2);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v6, 0, 1, v2);
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  *(_BYTE *)(*(_QWORD *)(v0 + 32) + 8) = 1;
  swift_willThrow();
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;

  v6[7] = v5;
  v6[8] = a5;
  v6[5] = a3;
  v6[6] = a4;
  v6[3] = a1;
  v6[4] = a2;
  v10 = *(_QWORD *)(a4 + 24);
  v6[9] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v6[10] = v11;
  v6[11] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6[12] = *(_QWORD *)(a4 + 16);
  v12 = type metadata accessor for Optional();
  v6[13] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v6[14] = v13;
  v6[15] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    ObjectType = swift_getObjectType();
    v15 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(ObjectType, a3);
    v17 = v16;
  }
  else
  {
    v15 = 0;
    v17 = 0;
  }
  v6[16] = v15;
  v6[17] = v17;
  return swift_task_switch(_sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTY0_, v15, v17);
}

uint64_t _sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTY0_()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;

  if ((*(_BYTE *)(*(_QWORD *)(v0 + 56) + 8) & 1) != 0)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 96) - 8) + 56))(*(_QWORD *)(v0 + 24), 1, 1);
    v1 = *(_QWORD *)(v0 + 88);
    swift_task_dealloc(*(_QWORD *)(v0 + 120));
    swift_task_dealloc(v1);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 48);
    v4 = (_QWORD *)swift_task_alloc(dword_1EE06A34C);
    *(_QWORD *)(v0 + 144) = v4;
    *(_QWORD *)(v0 + 152) = *(_QWORD *)(v3 + 32);
    *v4 = v0;
    v4[1] = _sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTQ1_;
    return ThrowingTaskGroup.next(isolation:)(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  }
}

uint64_t _sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTQ1_()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 144);
  *(_QWORD *)(*v1 + 160) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = _sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTY3_;
  else
    v4 = _sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTY2_;
  return swift_task_switch(v4, *(unsigned __int8 **)(v2 + 128), *(_QWORD *)(v2 + 136));
}

uint64_t _sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTY2_()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = *(_QWORD *)(v0 + 56);
    v5 = *(_QWORD *)(v0 + 24);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(v1, *(_QWORD *)(v0 + 104));
    *(_BYTE *)(v4 + 8) = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v5, 1, 1, v2);
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 24);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v6, v1, v2);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v6, 0, 1, v2);
  }
  v7 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTY3_()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 72);
  *(_BYTE *)(*(_QWORD *)(v0 + 56) + 8) = 1;
  *(_QWORD *)(v0 + 16) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_dynamicCast();
  swift_willThrowTypedImpl();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v6, v3, v5);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Void __swiftcall ThrowingTaskGroup.Iterator.cancel()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 8) = 1;
  swift_taskGroup_cancelAll(*(_QWORD *)v0);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance ThrowingTaskGroup<A, B>.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1EE06A37C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCompactMapSequence<A, B>.Iterator;
  return ThrowingTaskGroup.Iterator.next()(a1, a2);
}

uint64_t _sScg8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5[2] = a4;
  v10 = *(_QWORD *)(a5 + 24);
  v5[3] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v5[4] = v11;
  v12 = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5[5] = v12;
  v13 = (_QWORD *)swift_task_alloc(dword_1EE06A384);
  v5[6] = v13;
  *v13 = v5;
  v13[1] = _ss23AsyncCompactMapSequenceV8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return _sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(a1, a2, a3, a5, v12);
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance ThrowingTaskGroup<A, B>@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return ThrowingTaskGroup.makeAsyncIterator()(*v1, a1);
}

uint64_t DiscardingTaskGroup.awaitAllRemainingTasks()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = v0;
  return swift_task_switch((uint64_t (*)(void))DiscardingTaskGroup.awaitAllRemainingTasks(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  *(_QWORD *)(v1 + 64) = v0;
  if (v0)
    v2 = DiscardingTaskGroup.awaitAllRemainingTasks();
  else
    v2 = DiscardingTaskGroup.awaitAllRemainingTasks();
  return swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void DiscardingTaskGroup.awaitAllRemainingTasks()()
{
  uint64_t v0;

  swift_taskGroup_waitAll(v0 + 72, **(_QWORD **)(v0 + 56), 0, (uint64_t)DiscardingTaskGroup.awaitAllRemainingTasks(), (_QWORD *)(v0 + 16));
}

uint64_t withDiscardingTaskGroup<A>(returning:isolation:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v10;
  uint64_t ObjectType;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v7[42] = a6;
  v7[43] = a7;
  v7[40] = a1;
  v7[41] = a5;
  v10 = *(_QWORD *)(a7 - 8);
  v7[44] = v10;
  v7[45] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    ObjectType = swift_getObjectType();
    v12 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(ObjectType, a4);
    v14 = v13;
  }
  else
  {
    v12 = 0;
    v14 = 0;
  }
  v7[46] = v12;
  v7[47] = v14;
  return swift_task_switch(withDiscardingTaskGroup<A>(returning:isolation:body:), v12, v14);
}

uint64_t withDiscardingTaskGroup<A>(returning:isolation:body:)()
{
  _QWORD *v0;
  int *v1;
  _QWORD *v2;
  int *v4;

  v1 = (int *)v0[41];
  swift_taskGroup_initializeWithFlags(256, (uint64_t)(v0 + 2), v0[43]);
  v0[39] = v0 + 2;
  v4 = (int *)((char *)v1 + *v1);
  v2 = (_QWORD *)swift_task_alloc(v1[1]);
  v0[48] = v2;
  *v2 = v0;
  v2[1] = withDiscardingTaskGroup<A>(returning:isolation:body:);
  return ((uint64_t (*)(_QWORD, _QWORD *))v4)(v0[45], v0 + 39);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  *(_QWORD *)(v1 + 392) = v0;
  if (v0)
    v2 = withDiscardingTaskGroup<A>(returning:isolation:body:);
  else
    v2 = withDiscardingTaskGroup<A>(returning:isolation:body:);
  return swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;

  return swift_task_switch(withDiscardingTaskGroup<A>(returning:isolation:body:), *(unsigned __int8 **)(v0 + 368), *(_QWORD *)(v0 + 376));
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 360);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 352) + 32))(*(_QWORD *)(v0 + 320), v1, *(_QWORD *)(v0 + 344));
  swift_taskGroup_destroy(v0 + 16);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  return swift_task_switch(withDiscardingTaskGroup<A>(returning:isolation:body:), *(unsigned __int8 **)(v0 + 368), *(_QWORD *)(v0 + 376));
}

{
  return swift_unexpectedError();
}

void withDiscardingTaskGroup<A>(returning:isolation:body:)()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 384));
  swift_taskGroup_waitAll(v1 + 400, *(_QWORD *)(v1 + 312), 0, (uint64_t)withDiscardingTaskGroup<A>(returning:isolation:body:), (_QWORD *)(v1 + 272));
}

uint64_t withDiscardingTaskGroup<A>(returning:body:)(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int *v12;

  v5[40] = a1;
  v5[41] = a5;
  v8 = *(_QWORD *)(a5 - 8);
  v5[42] = v8;
  v9 = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5[43] = v9;
  swift_taskGroup_initializeWithFlags(256, (uint64_t)(v5 + 2), a5);
  v5[39] = v5 + 2;
  v12 = (int *)((char *)a3 + *a3);
  v10 = (_QWORD *)swift_task_alloc(a3[1]);
  v5[44] = v10;
  *v10 = v5;
  v10[1] = withDiscardingTaskGroup<A>(returning:body:);
  return ((uint64_t (*)(uint64_t, _QWORD *))v12)(v9, v5 + 39);
}

void withDiscardingTaskGroup<A>(returning:body:)()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 352));
  swift_taskGroup_waitAll(v1 + 368, *(_QWORD *)(v1 + 312), 0, (uint64_t)withDiscardingTaskGroup<A>(returning:body:), (_QWORD *)(v1 + 272));
}

uint64_t withDiscardingTaskGroup<A>(returning:body:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  *(_QWORD *)(v1 + 360) = v0;
  if (v0)
    v2 = withDiscardingTaskGroup<A>(returning:body:);
  else
    v2 = withDiscardingTaskGroup<A>(returning:body:);
  return swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 344);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 336) + 32))(*(_QWORD *)(v0 + 320), v1, *(_QWORD *)(v0 + 328));
  swift_taskGroup_destroy(v0 + 16);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  return swift_unexpectedError();
}

uint64_t ThrowingDiscardingTaskGroup.awaitAllRemainingTasks(bodyError:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 56) = a1;
  *(_QWORD *)(v2 + 64) = v1;
  return swift_task_switch((uint64_t (*)(void))ThrowingDiscardingTaskGroup.awaitAllRemainingTasks(bodyError:), 0, 0);
}

void ThrowingDiscardingTaskGroup.awaitAllRemainingTasks(bodyError:)()
{
  uint64_t v0;

  swift_taskGroup_waitAll(v0 + 80, **(_QWORD **)(v0 + 64), *(_QWORD *)(v0 + 56), (uint64_t)ThrowingDiscardingTaskGroup.awaitAllRemainingTasks(bodyError:), (_QWORD *)(v0 + 16));
}

uint64_t ThrowingDiscardingTaskGroup.awaitAllRemainingTasks(bodyError:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  *(_QWORD *)(v1 + 72) = v0;
  if (v0)
    v2 = ThrowingDiscardingTaskGroup.awaitAllRemainingTasks(bodyError:);
  else
    v2 = DiscardingTaskGroup.awaitAllRemainingTasks();
  return swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t withThrowingDiscardingTaskGroup<A>(returning:isolation:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v10;
  unint64_t v11;
  uint64_t ObjectType;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;

  v7[47] = a6;
  v7[48] = a7;
  v7[45] = a1;
  v7[46] = a5;
  v10 = *(_QWORD *)(a7 - 8);
  v7[49] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[50] = swift_task_alloc(v11);
  v7[51] = swift_task_alloc(v11);
  if (a3)
  {
    ObjectType = swift_getObjectType();
    v13 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(ObjectType, a4);
    v15 = v14;
  }
  else
  {
    v13 = 0;
    v15 = 0;
  }
  v7[52] = v13;
  v7[53] = v15;
  return swift_task_switch(withThrowingDiscardingTaskGroup<A>(returning:isolation:body:), v13, v15);
}

uint64_t withThrowingDiscardingTaskGroup<A>(returning:isolation:body:)()
{
  _QWORD *v0;
  int *v1;
  _QWORD *v2;
  int *v4;

  v1 = (int *)v0[46];
  swift_taskGroup_initializeWithFlags(256, (uint64_t)(v0 + 2), v0[48]);
  v0[39] = v0 + 2;
  v4 = (int *)((char *)v1 + *v1);
  v2 = (_QWORD *)swift_task_alloc(v1[1]);
  v0[54] = v2;
  *v2 = v0;
  v2[1] = withThrowingDiscardingTaskGroup<A>(returning:isolation:body:);
  return ((uint64_t (*)(_QWORD, _QWORD *))v4)(v0[50], v0 + 39);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 432);
  *(_QWORD *)(*v1 + 440) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = withThrowingDiscardingTaskGroup<A>(returning:isolation:body:);
  else
    v4 = withThrowingDiscardingTaskGroup<A>(returning:isolation:body:);
  return swift_task_switch((uint64_t (*)(void))v4, *(unsigned __int8 **)(v2 + 416), *(_QWORD *)(v2 + 424));
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v2)();

  v1[57] = v0;
  if (v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v1[49] + 8))(v1[51], v1[48]);
    v2 = withThrowingDiscardingTaskGroup<A>(returning:isolation:body:);
  }
  else
  {
    v2 = withThrowingDiscardingTaskGroup<A>(returning:isolation:body:);
  }
  return swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;

  return swift_task_switch(withThrowingDiscardingTaskGroup<A>(returning:isolation:body:), *(unsigned __int8 **)(v0 + 416), *(_QWORD *)(v0 + 424));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 400);
  v1 = *(_QWORD *)(v0 + 408);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(v0 + 448))(*(_QWORD *)(v0 + 360), v1, *(_QWORD *)(v0 + 384));
  swift_taskGroup_destroy(v0 + 16);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  return swift_task_switch(withThrowingDiscardingTaskGroup<A>(returning:isolation:body:), *(unsigned __int8 **)(v0 + 416), *(_QWORD *)(v0 + 424));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 400);
  v1 = *(_QWORD *)(v0 + 408);
  swift_taskGroup_destroy(v0 + 16);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  *(_QWORD *)(v1 + 464) = v0;
  v2 = *(_QWORD *)(v1 + 440);
  MEMORY[0x18D78FECC](v2);
  if (v0)
  {
    MEMORY[0x18D78FECC](v2);
    v3 = withThrowingDiscardingTaskGroup<A>(returning:isolation:body:);
  }
  else
  {
    v3 = withThrowingDiscardingTaskGroup<A>(returning:isolation:body:);
  }
  return swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;

  return swift_task_switch(withThrowingDiscardingTaskGroup<A>(returning:isolation:body:), *(unsigned __int8 **)(v0 + 416), *(_QWORD *)(v0 + 424));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_willThrow();
  v2 = *(_QWORD *)(v0 + 400);
  v1 = *(_QWORD *)(v0 + 408);
  swift_taskGroup_destroy(v0 + 16);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  return swift_task_switch(withThrowingDiscardingTaskGroup<A>(returning:isolation:body:), *(unsigned __int8 **)(v0 + 416), *(_QWORD *)(v0 + 424));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 400);
  v1 = *(_QWORD *)(v0 + 408);
  swift_taskGroup_destroy(v0 + 16);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void withThrowingDiscardingTaskGroup<A>(returning:isolation:body:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);

  v2 = v0[50];
  v1 = v0[51];
  v3 = v0[48];
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[49] + 32);
  v0[56] = (uint64_t)v4;
  v4(v1, v2, v3);
  swift_taskGroup_waitAll((uint64_t)v0 + 473, v0[39], 0, (uint64_t)withThrowingDiscardingTaskGroup<A>(returning:isolation:body:), v0 + 40);
}

{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[55];
  swift_taskGroup_cancelAll(v0[39]);
  MEMORY[0x18D78FED8](v1);
  swift_taskGroup_waitAll((uint64_t)(v0 + 59), v0[39], v1, (uint64_t)withThrowingDiscardingTaskGroup<A>(returning:isolation:body:), v0 + 34);
}

uint64_t withThrowingDiscardingTaskGroup<A>(returning:body:)(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int *v13;

  v5[45] = a1;
  v5[46] = a5;
  v8 = *(_QWORD *)(a5 - 8);
  v5[47] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = swift_task_alloc(v9);
  v5[48] = v10;
  v5[49] = swift_task_alloc(v9);
  swift_taskGroup_initializeWithFlags(256, (uint64_t)(v5 + 2), a5);
  v5[39] = v5 + 2;
  v13 = (int *)((char *)a3 + *a3);
  v11 = (_QWORD *)swift_task_alloc(a3[1]);
  v5[50] = v11;
  *v11 = v5;
  v11[1] = withThrowingDiscardingTaskGroup<A>(returning:body:);
  return ((uint64_t (*)(uint64_t, _QWORD *))v13)(v10, v5 + 39);
}

void withThrowingDiscardingTaskGroup<A>(returning:body:)()
{
  uint64_t v0;
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);

  v2 = *v1;
  v3 = (*v1)[50];
  (*v1)[51] = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_taskGroup_cancelAll(v2[39]);
    MEMORY[0x18D78FED8](v0);
    v4 = v2[39];
    v5 = withThrowingDiscardingTaskGroup<A>(returning:body:);
    v6 = (uint64_t)(v2 + 55);
    v7 = v0;
    v8 = v2 + 34;
  }
  else
  {
    v10 = v2[48];
    v9 = v2[49];
    v11 = v2[46];
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2[47] + 32);
    v2[52] = (uint64_t)v12;
    v12(v9, v10, v11);
    v4 = v2[39];
    v5 = withThrowingDiscardingTaskGroup<A>(returning:body:);
    v6 = (uint64_t)v2 + 441;
    v7 = 0;
    v8 = v2 + 40;
  }
  swift_taskGroup_waitAll(v6, v4, v7, (uint64_t)v5, v8);
}

uint64_t withThrowingDiscardingTaskGroup<A>(returning:body:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v2)();

  v1[53] = v0;
  if (v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v1[47] + 8))(v1[49], v1[46]);
    v2 = withThrowingDiscardingTaskGroup<A>(returning:body:);
  }
  else
  {
    v2 = withThrowingDiscardingTaskGroup<A>(returning:body:);
  }
  return swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 384);
  v1 = *(_QWORD *)(v0 + 392);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(v0 + 416))(*(_QWORD *)(v0 + 360), v1, *(_QWORD *)(v0 + 368));
  swift_taskGroup_destroy(v0 + 16);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 384);
  v1 = *(_QWORD *)(v0 + 392);
  swift_taskGroup_destroy(v0 + 16);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  *(_QWORD *)(v1 + 432) = v0;
  v2 = *(_QWORD *)(v1 + 408);
  MEMORY[0x18D78FECC](v2);
  if (v0)
  {
    MEMORY[0x18D78FECC](v2);
    v3 = withThrowingDiscardingTaskGroup<A>(returning:body:);
  }
  else
  {
    v3 = withThrowingDiscardingTaskGroup<A>(returning:body:);
  }
  return swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_willThrow();
  v2 = *(_QWORD *)(v0 + 384);
  v1 = *(_QWORD *)(v0 + 392);
  swift_taskGroup_destroy(v0 + 16);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 384);
  v1 = *(_QWORD *)(v0 + 392);
  swift_taskGroup_destroy(v0 + 16);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t TaskLocal.__allocating_init(wrappedValue:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 80) - 8) + 32))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 88), a1);
  return v2;
}

uint64_t TaskLocal.init(wrappedValue:)(uint64_t a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 80) - 8) + 32))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 88), a1);
  return v1;
}

uint64_t TaskLocal.get()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v3 = *(_QWORD *)v1;
  v4 = swift_task_localValueGet(v1);
  if (v4)
    v5 = v4;
  else
    v5 = (_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 88));
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 16))(a1, v5);
}

uint64_t TaskLocal.withValue<A>(_:operation:isolation:file:line:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v9[11] = v20;
  v9[12] = v8;
  v9[9] = a8;
  v9[10] = v19;
  v9[7] = a6;
  v9[8] = a7;
  v9[5] = a4;
  v9[6] = a5;
  v9[3] = a2;
  v9[4] = a3;
  v9[2] = a1;
  v12 = *(_QWORD *)(*(_QWORD *)v8 + 80);
  v9[13] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v9[14] = v13;
  v9[15] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a5)
  {
    ObjectType = swift_getObjectType();
    v15 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t))(a6 + 8))(ObjectType, a6);
    v17 = v16;
  }
  else
  {
    v15 = 0;
    v17 = 0;
  }
  v9[16] = v15;
  v9[17] = v17;
  return swift_task_switch(TaskLocal.withValue<A>(_:operation:isolation:file:line:), v15, v17);
}

uint64_t TaskLocal.withValue<A>(_:operation:isolation:file:line:)()
{
  uint64_t *v0;
  _QWORD *v1;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v0[14] + 16))(v0[15], v0[3], v0[13]);
  v1 = (_QWORD *)swift_task_alloc(dword_1EE06A3C4);
  v0[18] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = TaskLocal.withValue<A>(_:operation:isolation:file:line:);
  return TaskLocal.withValueImpl<A>(_:operation:isolation:file:line:)(v0[2], v0[15], v0[4], v0[5], v0[6], v0[7]);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 144);
  v3 = *v1;
  *(_QWORD *)(v3 + 152) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(TaskLocal.withValue<A>(_:operation:isolation:file:line:), *(unsigned __int8 **)(v3 + 128), *(_QWORD *)(v3 + 136));
  swift_task_dealloc(*(_QWORD *)(v3 + 120));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t TaskLocal.withValueImpl<A>(_:operation:isolation:file:line:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t ObjectType;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;

  v7[5] = a4;
  v7[6] = v6;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  v7[7] = *v6;
  if (a5)
  {
    ObjectType = swift_getObjectType();
    v10 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t))(a6 + 8))(ObjectType, a6);
    v12 = v11;
  }
  else
  {
    v10 = 0;
    v12 = 0;
  }
  v7[8] = v10;
  v7[9] = v12;
  return swift_task_switch(TaskLocal.withValueImpl<A>(_:operation:isolation:file:line:), v10, v12);
}

uint64_t TaskLocal.withValueImpl<A>(_:operation:isolation:file:line:)()
{
  _QWORD *v0;
  int *v1;
  _QWORD *v2;
  uint64_t (*v4)(_QWORD);

  v1 = (int *)v0[4];
  swift_task_localValuePush(v0[6], v0[3], *(_QWORD *)(v0[7] + 80));
  v4 = (uint64_t (*)(_QWORD))((char *)v1 + *v1);
  v2 = (_QWORD *)swift_task_alloc(v1[1]);
  v0[10] = v2;
  *v2 = v0;
  v2[1] = TaskLocal.withValueImpl<A>(_:operation:isolation:file:line:);
  return v4(v0[2]);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 80);
  *(_QWORD *)(*v1 + 88) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = TaskLocal.withValueImpl<A>(_:operation:isolation:file:line:);
  else
    v4 = TaskLocal.withValueImpl<A>(_:operation:isolation:file:line:);
  return swift_task_switch(v4, *(unsigned __int8 **)(v2 + 64), *(_QWORD *)(v2 + 72));
}

{
  uint64_t v0;

  swift_task_localValuePop();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_task_localValuePop();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t TaskLocal.withValue<A>(_:operation:file:line:)(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t);

  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 80) - 8);
  v8 = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v4 + 16) = v8;
  (*(void (**)(void))(v7 + 16))();
  v9 = (_QWORD *)swift_task_alloc(dword_1EE06A3D4);
  *(_QWORD *)(v4 + 24) = v9;
  *v9 = v4;
  v9[1] = withCheckedThrowingContinuation<A>(function:_:);
  swift_task_localValuePush(v3, v8, *(_QWORD *)(*(_QWORD *)v3 + 80));
  v12 = (uint64_t (*)(uint64_t))((char *)a3 + *a3);
  v10 = (_QWORD *)swift_task_alloc(a3[1]);
  v9[2] = v10;
  *v10 = v9;
  v10[1] = TaskLocal.withValueImpl<A>(_:operation:file:line:);
  return v12(a1);
}

uint64_t TaskLocal.withValueImpl<A>(_:operation:file:line:)(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t);

  swift_task_localValuePush(v3, a2, *(_QWORD *)(*(_QWORD *)v3 + 80));
  v9 = (uint64_t (*)(uint64_t))((char *)a3 + *a3);
  v7 = (_QWORD *)swift_task_alloc(a3[1]);
  *(_QWORD *)(v4 + 16) = v7;
  *v7 = v4;
  v7[1] = TaskLocal.withValueImpl<A>(_:operation:file:line:);
  return v9(a1);
}

uint64_t TaskLocal.withValueImpl<A>(_:operation:file:line:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  swift_task_localValuePop();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void TaskLocal.withValue<A>(_:operation:file:line:)(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 80);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v7 + 16))(v6);
  v8 = swift_task_localValuePush(v2, (uint64_t)v6, v4);
  a2(v8);
  swift_task_localValuePop();
}

uint64_t TaskLocal.projectedValue.getter()
{
  protocol witness for SerialExecutor.asUnownedSerialExecutor() in conformance DispatchQueueShim();
  return swift_retain();
}

uint64_t key path getter for TaskLocal.projectedValue : <A>TaskLocal<A>@<X0>(uint64_t *a1@<X8>)
{
  *a1 = protocol witness for SerialExecutor.asUnownedSerialExecutor() in conformance DispatchQueueShim();
  return swift_retain();
}

void key path setter for TaskLocal.projectedValue : <A>TaskLocal<A>()
{
  swift_retain();
  specialized TaskLocal.projectedValue.setter();
}

void (*TaskLocal.projectedValue.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *a1 = v1;
  a1[1] = v1;
  swift_retain();
  return TaskLocal.projectedValue.modify;
}

void TaskLocal.projectedValue.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    swift_retain();
    specialized TaskLocal.projectedValue.setter();
  }
  specialized TaskLocal.projectedValue.setter();
}

uint64_t TaskLocal.description.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;

  _StringGuts.grow(_:)(20);
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 0x746C756166656428;
  v1._object = (void *)0xEF203A65756C6156;
  String.append(_:)(v1);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v2._countAndFlagsBits = 41;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TaskLocal<A>()
{
  return TaskLocal.description.getter();
}

Swift::Void __swiftcall _checkIllegalTaskLocalBindingWithinWithTaskGroup(file:line:)(Swift::String file, Swift::UInt line)
{
  void *object;
  uint64_t countAndFlagsBits;
  swift::concurrency::trace *v5;
  _QWORD v6[8];

  object = file._object;
  countAndFlagsBits = file._countAndFlagsBits;
  v5 = swift_task_hasTaskGroupStatusRecord();
  if ((v5 & 1) != 0)
  {
    MEMORY[0x1E0C80A78](v5);
    v6[2] = countAndFlagsBits;
    v6[3] = object;
    v6[4] = line;
    specialized String.withCString<A>(_:)((uint64_t (*)(_QWORD *))partial apply for closure #1 in _checkIllegalTaskLocalBindingWithinWithTaskGroup(file:line:), (uint64_t)v6, countAndFlagsBits, (uint64_t)object);
  }
}

uint64_t specialized String.withCString<A>(_:)(uint64_t (*a1)(_QWORD *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  _QWORD v8[2];

  if ((a4 & 0x1000000000000000) != 0 || !(a4 & 0x2000000000000000 | a3 & 0x1000000000000000))
    return _StringGuts._slowWithCString<A>(_:)();
  if ((a4 & 0x2000000000000000) != 0)
  {
    v8[0] = a3;
    v8[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    v5 = v8;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    v5 = (_QWORD *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v5 = (_QWORD *)_StringObject.sharedUTF8.getter();
    if (v7 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
  }
  return a1(v5);
}

uint64_t static Task<>.sleep(_:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 80) = a1;
  return swift_task_switch(static Task<>.sleep(_:), 0, 0);
}

uint64_t static Task<>.sleep(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  swift *v3;
  _BYTE *NullaryContinuationJob;
  unsigned __int8 v6;

  v1 = (uint64_t)(v0 + 2);
  v2 = v0[10];
  v0[2] = v0;
  v0[3] = withCheckedContinuation<A>(isolation:function:_:);
  v3 = swift_continuation_init(v0 + 2, 0);
  static Task<>.currentPriority.getter(&v6);
  NullaryContinuationJob = (_BYTE *)swift_task_createNullaryContinuationJob(v6, (uint64_t)v3);
  swift_task_enqueueGlobalWithDelay(v2, NullaryContinuationJob);
  return swift_continuation_await(v1);
}

uint64_t static Task<>.sleep(nanoseconds:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 80) = a1;
  return swift_task_switch(static Task<>.sleep(nanoseconds:), 0, 0);
}

uint64_t static Task<>.sleep(nanoseconds:)()
{
  uint64_t v0;
  unint64_t *v1;
  uint64_t v2;

  v1 = (unint64_t *)swift_slowAlloc();
  *(_QWORD *)(v0 + 88) = v1;
  atomic_store(0, v1);
  v2 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 96) = v2;
  *(_QWORD *)(v2 + 16) = v1;
  return swift_task_switch(static Task<>.sleep(nanoseconds:), 0, 0);
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 104) = swift_task_addCancellationHandler((uint64_t)partial apply for closure #2 in static Task<>.sleep(nanoseconds:), *(_QWORD *)(v0 + 96));
  return swift_task_switch(static Task<>.sleep(nanoseconds:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t *v2;
  swift *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  unint64_t *v14;
  unint64_t v16;

  v1 = v0 + 16;
  v2 = *(unint64_t **)(v0 + 88);
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = static Task<>.sleep(nanoseconds:);
  v3 = swift_continuation_init((_QWORD *)(v0 + 16), 1uLL);
  v4 = atomic_load(v2);
  v5 = v4 & 3;
  if ((v4 & 3) == 0)
  {
    if (v4 > 3)
      goto LABEL_17;
    v6 = *(unint64_t **)(v0 + 88);
    while (!__ldaxr(v6))
    {
      if (!__stlxr((unint64_t)v3, v6))
      {
LABEL_8:
        v10 = v0 + 80;
        v9 = *(_QWORD *)(v0 + 80);
        v8 = *(_QWORD *)(v10 + 8);
        v11 = swift_allocObject();
        *(_QWORD *)(v11 + 16) = v8;
        v12 = (_BYTE *)swift_task_create(0, 0, MEMORY[0x1E0DEE9C0] + 8, (int *)&async function pointer to partial apply for closure #1 in closure #1 in closure #1 in static Task<>.sleep(nanoseconds:), v11);
        swift_task_enqueueGlobalWithDelay(v9, v12);
        return swift_continuation_await(v1);
      }
    }
    while (1)
    {
      __clrex();
      v16 = atomic_load(*(unint64_t **)(v0 + 88));
      v5 = v16 & 3;
      if ((v16 & 3) != 0)
        break;
      if (v16 > 3)
        goto LABEL_17;
      v14 = *(unint64_t **)(v0 + 88);
      while (!__ldaxr(v14))
      {
        if (!__stlxr((unint64_t)v3, v14))
          goto LABEL_8;
      }
    }
  }
  if (v5 != 3)
  {
    while (1)
    {
LABEL_17:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  swift_continuation_throwingResume(v3);
  return swift_continuation_await(v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 112) = v1;
  if (v1)
  {
    swift_willThrow();
    v2 = static Task<>.sleep(nanoseconds:);
  }
  else
  {
    v2 = static Task<>.sleep(nanoseconds:);
  }
  return swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  swift_task_removeCancellationHandler(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v1);
  return swift_task_switch((uint64_t (*)(void))static Task<>.sleep(nanoseconds:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  swift_task_removeCancellationHandler(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v1);
  return swift_task_switch(static Task<>.sleep(nanoseconds:), 0, 0);
}

{
  uint64_t v0;

  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void static Task<>.sleep(nanoseconds:)()
{
  uint64_t v0;
  char v1;

  v1 = atomic_load(*(unint64_t **)(v0 + 88));
  __asm { BR              X10 }
}

uint64_t sub_18D58C898()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t sub_18D58C8F4()
{
  uint64_t v0;

  MEMORY[0x18D790034](*(_QWORD *)(v0 + 88), -1, -1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in closure #1 in static Task<>.sleep(nanoseconds:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a2;
  return swift_task_switch(closure #1 in closure #1 in closure #1 in static Task<>.sleep(nanoseconds:), 0, 0);
}

uint64_t closure #1 in closure #1 in closure #1 in static Task<>.sleep(nanoseconds:)()
{
  uint64_t v0;

  specialized static Task<>.onSleepWake(_:)(*(unint64_t **)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AsyncStream._Storage.State.init(limit:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 8);
  v5 = type metadata accessor for Optional();
  type metadata accessor for UnsafeContinuation(0, v5, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDD18]);
  v6 = Array.init()();
  result = _Deque._Storage.init()();
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 8) = result;
  *(_QWORD *)(a2 + 16) = v3;
  *(_BYTE *)(a2 + 24) = v4;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) = 0;
  return result;
}

uint64_t AsyncStream._Storage.deinit()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(char *);
  uint64_t v3;
  char v5;

  v1 = v0;
  v2 = *(void (**)(char *))(v0 + 48);
  if (v2)
  {
    v5 = 1;
    swift_retain();
    v2(&v5);
    _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe((uint64_t)v2);
    v3 = *(_QWORD *)(v0 + 48);
  }
  else
  {
    v3 = 0;
  }
  swift_release();
  swift_bridgeObjectRelease();
  _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe(v3);
  return v1;
}

uint64_t AsyncStream._Storage.__deallocating_deinit()
{
  AsyncStream._Storage.deinit();
  return swift_deallocClassInstance();
}

uint64_t AsyncStream._Storage.getOnTermination()()
{
  uint64_t v0;
  uint64_t v1;

  _swift_async_stream_lock_lock((os_unfair_lock_t)(v0 + 72));
  v1 = *(_QWORD *)(v0 + 48);
  _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOy(v1);
  _swift_async_stream_lock_unlock((os_unfair_lock_t)(v0 + 72));
  return v1;
}

uint64_t AsyncStream._Storage.setOnTermination(_:)(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v9)();
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[8];
  uint64_t v17[2];

  v5 = *(_QWORD *)&v2->_os_unfair_lock_opaque;
  _swift_async_stream_lock_lock(v2 + 18);
  v6 = *(_QWORD *)&v2[12]._os_unfair_lock_opaque;
  v7 = *(_QWORD *)&v2[14]._os_unfair_lock_opaque;
  if (v6)
  {
    v8 = (_QWORD *)swift_allocObject();
    v8[2] = *(_QWORD *)(v5 + 80);
    v8[3] = v6;
    v8[4] = v7;
    v9 = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed AsyncStream<A>.Continuation.Termination) -> ()partial apply;
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  v17[0] = (uint64_t)v9;
  v17[1] = (uint64_t)v8;
  MEMORY[0x1E0C80A78](v8);
  v16[2] = v2;
  v16[3] = a1;
  v16[4] = a2;
  _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOy(v6);
  type metadata accessor for AsyncStream.Continuation.Termination(255, *(_QWORD *)(v5 + 80), v10, v11);
  v12 = MEMORY[0x1E0DEE9C0] + 8;
  swift_getFunctionTypeMetadata1();
  v13 = type metadata accessor for Optional();
  _ss20withExtendedLifetimeyq0_x_q0_yq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v17, (uint64_t)partial apply for closure #1 in AsyncStream._Storage.setOnTermination(_:), (uint64_t)v16, v13, MEMORY[0x1E0DEDCE8], v12, MEMORY[0x1E0DEDD18], v14);
  return _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe(v17[0]);
}

uint64_t _ss20withExtendedLifetimeyq0_x_q0_yq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t (*v14)(char *);
  uint64_t result;
  uint64_t v16;

  v11 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78]();
  v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = v14(v13);
  if (v8)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v13, a5);
  return result;
}

void AsyncStream._Storage.cancel@Sendable ()()
{
  uint64_t v0;
  void (*v1)(char *);
  char v2;

  _swift_async_stream_lock_lock((os_unfair_lock_t)(v0 + 72));
  v1 = *(void (**)(char *))(v0 + 48);
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 56) = 0;
  _swift_async_stream_lock_unlock((os_unfair_lock_t)(v0 + 72));
  if (v1)
  {
    v2 = 1;
    v1(&v2);
    _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe((uint64_t)v1);
  }
  AsyncStream._Storage.finish()();
}

Swift::Void __swiftcall AsyncStream._Storage.finish()()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void (*v11)(uint64_t *);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  swift::AsyncTask *v22;
  uint64_t v23;
  swift::AsyncTask *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t *);
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = v0;
  v2 = (os_unfair_lock_s *)(v0 + 72);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v4 = type metadata accessor for Optional();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v29 = (char *)&v24 - v7;
  v28 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  _swift_async_stream_lock_lock((os_unfair_lock_t)(v0 + 72));
  v10 = *(_QWORD *)(v0 + 16);
  v11 = *(void (**)(uint64_t *))(v0 + 48);
  v30 = *(_QWORD *)(v0 + 56);
  v31 = v10;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 56) = 0;
  *(_BYTE *)(v0 + 64) = 1;
  type metadata accessor for UnsafeContinuation(255, v4, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDD18]);
  v12 = type metadata accessor for Array();
  MEMORY[0x18D78FF74](MEMORY[0x1E0DEAF50], v12);
  Collection.first.getter();
  if (v32)
  {
    v24 = (swift::AsyncTask *)v32;
    v25 = v5;
    v26 = v4;
    v27 = v11;
    v13 = *(_QWORD *)(v0 + 24);
    swift_retain();
    _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, v13, (uint64_t)&type metadata for _DequeBufferHeader, v3, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v23);
    v14 = v32;
    swift_release();
    if (v14 >= 1)
    {
      MEMORY[0x18D78FF74](MEMORY[0x1E0DEAF58], v12);
      RangeReplaceableCollection.removeFirst()();
      v17 = type metadata accessor for _Deque(0, v3, v15, v16);
      _Deque.removeFirst()(v17);
      _swift_async_stream_lock_unlock(v2);
      v18 = (uint64_t)v27;
      if (v27)
      {
        LOBYTE(v32) = 0;
        v27(&v32);
        _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe(v18);
      }
      v20 = v28;
      v19 = v29;
      (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v29, v9, v3);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v19, 0, 1, v3);
LABEL_12:
      v22 = v24;
      (*(void (**)(_QWORD, char *, uint64_t))(v25 + 32))(*(_QWORD *)(*((_QWORD *)v24 + 8) + 40), v19, v26);
      swift_continuation_resume(v22);
      return;
    }
    if (*(_BYTE *)(v1 + 64) == 1)
    {
      MEMORY[0x18D78FF74](MEMORY[0x1E0DEAF58], v12);
      RangeReplaceableCollection.removeFirst()();
      _swift_async_stream_lock_unlock(v2);
      v21 = (uint64_t)v27;
      if (v27)
      {
        LOBYTE(v32) = 0;
        v27(&v32);
        _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe(v21);
      }
      v19 = v29;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 56))(v29, 1, 1, v3);
      goto LABEL_12;
    }
    _swift_async_stream_lock_unlock(v2);
    v11 = v27;
    if (v27)
      goto LABEL_14;
  }
  else
  {
    _swift_async_stream_lock_unlock(v2);
    if (v11)
    {
LABEL_14:
      LOBYTE(v32) = 0;
      v11(&v32);
      _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe((uint64_t)v11);
    }
  }
}

void specialized AsyncStream._Storage.yield(_:)(uint64_t a1@<X8>)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  swift::AsyncTask *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  char v34;
  char v35;
  uint64_t v36;

  v3 = (os_unfair_lock_s *)(v1 + 72);
  _swift_async_stream_lock_lock((os_unfair_lock_t)(v1 + 72));
  v4 = (uint64_t *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = *(unsigned __int8 *)(v1 + 40);
  v7 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + 24);
  if (*(_QWORD *)(*(_QWORD *)(v1 + 16) + 16))
  {
    v8 = (swift::AsyncTask *)specialized RangeReplaceableCollection.removeFirst()();
    if (v7 <= 0)
    {
      if ((*(_BYTE *)(v1 + 64) & 1) != 0)
      {
        v36 = 0;
        _swift_async_stream_lock_unlock(v3);
        v34 = 1;
        outlined init with take of ()?((uint64_t)&v34, *(_QWORD *)(*((_QWORD *)v8 + 8) + 40));
        swift_continuation_resume(v8);
        v9 = 2;
      }
      else
      {
        if (v6 > 1)
          v36 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v36 = v5;
        _swift_async_stream_lock_unlock(v3);
        v35 = 0;
        outlined init with take of ()?((uint64_t)&v35, *(_QWORD *)(*((_QWORD *)v8 + 8) + 40));
        swift_continuation_resume(v8);
        v9 = 0;
      }
      goto LABEL_64;
    }
    if ((*(_BYTE *)(v1 + 64) & 1) != 0)
    {
      v36 = 0;
      v9 = 2;
LABEL_54:
      specialized _Deque.removeFirst()();
      _swift_async_stream_lock_unlock(v3);
      v33 = 0;
      outlined init with take of ()?((uint64_t)&v33, *(_QWORD *)(*((_QWORD *)v8 + 8) + 40));
      swift_continuation_resume(v8);
LABEL_64:
      *(_QWORD *)a1 = v36;
      *(_BYTE *)(a1 + 8) = v9;
      return;
    }
    if (v6)
    {
      if (v6 != 1)
      {
        v18 = *(_QWORD *)(*v4 + 24);
        v19 = v18 + 1;
        if (!__OFADD__(v18, 1))
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v21 = *v4;
          if (*(_QWORD *)(*v4 + 16) < v19 || (isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            specialized _Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(v19, 0);
            v21 = *v4;
          }
          specialized _Deque._UnsafeHandle.uncheckedAppend(_:)((uint64_t *)(v21 + 16));
          v9 = 0;
          v36 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_54;
        }
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
        goto LABEL_68;
      }
      if (v7 < v5)
      {
        v10 = *(_QWORD *)(*v4 + 24);
        v11 = v10 + 1;
        if (!__OFADD__(v10, 1))
        {
LABEL_27:
          v16 = swift_isUniquelyReferenced_nonNull_native();
          v17 = *v4;
          if (*(_QWORD *)(*v4 + 16) < v11 || (v16 & 1) == 0)
          {
            specialized _Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(v11, 0);
            v17 = *v4;
          }
          specialized _Deque._UnsafeHandle.uncheckedAppend(_:)((uint64_t *)(v17 + 16));
          v9 = 0;
          v36 = v5 + ~v7;
          goto LABEL_54;
        }
        __break(1u);
        goto LABEL_15;
      }
      specialized _Deque.removeFirst()();
      v25 = *(_QWORD *)(*v4 + 24);
      v26 = v25 + 1;
      if (__OFADD__(v25, 1))
      {
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
        goto LABEL_70;
      }
      v27 = swift_isUniquelyReferenced_nonNull_native();
      v28 = *v4;
      if (*(_QWORD *)(*v4 + 16) < v26 || (v27 & 1) == 0)
      {
        specialized _Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(v26, 0);
        v28 = *v4;
      }
      specialized _Deque._UnsafeHandle.uncheckedAppend(_:)((uint64_t *)(v28 + 16));
    }
    else
    {
      if (v7 < v5)
      {
        v15 = *(_QWORD *)(*v4 + 24);
        v11 = v15 + 1;
        if (!__OFADD__(v15, 1))
          goto LABEL_27;
        goto LABEL_67;
      }
      v36 = 0;
    }
    v9 = 1;
    goto LABEL_54;
  }
  if ((*(_BYTE *)(v1 + 64) & 1) != 0)
  {
    v36 = 0;
    v9 = 2;
LABEL_63:
    _swift_async_stream_lock_unlock(v3);
    goto LABEL_64;
  }
LABEL_15:
  if (!v6)
  {
    if (v7 >= v5)
    {
LABEL_61:
      v36 = 0;
LABEL_62:
      v9 = 1;
      goto LABEL_63;
    }
    v22 = v7 + 1;
    if (__OFSUB__(v5, v7 + 1))
    {
LABEL_70:
      __break(1u);
      goto LABEL_71;
    }
    v36 = v5 - (v7 + 1);
    v23 = swift_isUniquelyReferenced_nonNull_native();
    v24 = *v4;
    if (*(_QWORD *)(*v4 + 16) <= v7)
      goto LABEL_43;
LABEL_42:
    if ((v23 & 1) != 0)
    {
LABEL_44:
      specialized _Deque._UnsafeHandle.uncheckedAppend(_:)((uint64_t *)(v24 + 16));
      v9 = 0;
      goto LABEL_63;
    }
LABEL_43:
    specialized _Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(v22, 0);
    v24 = *v4;
    goto LABEL_44;
  }
  if (v6 != 1)
  {
    v36 = 0x7FFFFFFFFFFFFFFFLL;
    v22 = v7 + 1;
    if (!__OFADD__(v7, 1))
    {
      v23 = swift_isUniquelyReferenced_nonNull_native();
      v24 = *v4;
      if (*(_QWORD *)(*v4 + 16) < v22)
        goto LABEL_43;
      goto LABEL_42;
    }
    goto LABEL_66;
  }
  if (v7 < v5)
  {
    v12 = v7 + 1;
    v13 = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v4;
    if (*(_QWORD *)(*v4 + 16) <= v7 || (v13 & 1) == 0)
    {
      specialized _Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(v7 + 1, 0);
      v14 = *v4;
    }
    specialized _Deque._UnsafeHandle.uncheckedAppend(_:)((uint64_t *)(v14 + 16));
    if (!__OFSUB__(v5, v12))
    {
      v9 = 0;
      v36 = v5 - v12;
      goto LABEL_63;
    }
    goto LABEL_69;
  }
  if (v7 < 1)
    goto LABEL_61;
  specialized _Deque.removeFirst()();
  v29 = *(_QWORD *)(*v4 + 24);
  v30 = v29 + 1;
  if (!__OFADD__(v29, 1))
  {
    v31 = swift_isUniquelyReferenced_nonNull_native();
    v32 = *v4;
    if (*(_QWORD *)(*v4 + 16) < v30 || (v31 & 1) == 0)
    {
      specialized _Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(v30, 0);
      v32 = *v4;
    }
    specialized _Deque._UnsafeHandle.uncheckedAppend(_:)((uint64_t *)(v32 + 16));
    goto LABEL_62;
  }
LABEL_71:
  __break(1u);
}

void AsyncStream._Storage.yield(_:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  swift::AsyncTask *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t *, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t *v80;
  os_unfair_lock_t v81;
  uint64_t v82;
  uint64_t v83;
  swift::AsyncTask *v84;

  v3 = v2;
  v82 = a1;
  v80 = a2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 80);
  v5 = type metadata accessor for Optional();
  v77 = *(_QWORD *)(v5 - 8);
  v6 = MEMORY[0x1E0C80A78](v5);
  v78 = (char *)&v74 - v7;
  v83 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v6);
  v75 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = (os_unfair_lock_t)(v2 + 72);
  _swift_async_stream_lock_lock((os_unfair_lock_t)(v2 + 72));
  v76 = *(_QWORD *)(v2 + 32);
  v9 = *(unsigned __int8 *)(v2 + 40);
  v10 = *(_QWORD *)(v2 + 24);
  swift_retain();
  v11 = MEMORY[0x1E0DEDCE8];
  v12 = MEMORY[0x1E0DEDD18];
  _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, v10, (uint64_t)&type metadata for _DequeBufferHeader, v4, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v73);
  v13 = (uint64_t)v84;
  swift_release();
  v84 = *(swift::AsyncTask **)(v3 + 16);
  v79 = v5;
  type metadata accessor for UnsafeContinuation(255, v5, v11, v12);
  v14 = type metadata accessor for Array();
  MEMORY[0x18D78FF74](MEMORY[0x1E0DEAF50], v14);
  if ((Collection.isEmpty.getter() & 1) == 0)
  {
    MEMORY[0x18D78FF74](MEMORY[0x1E0DEAF58], v14);
    RangeReplaceableCollection.removeFirst()();
    v21 = v84;
    if (v13 < 1)
    {
      if (*(_BYTE *)(v3 + 64))
      {
        v31 = v83;
        (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v82, v4);
        type metadata accessor for AsyncStream.Continuation.YieldResult(0, v4, v32, v33);
        swift_storeEnumTagMultiPayload();
        _swift_async_stream_lock_unlock(v81);
        v34 = v78;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56))(v78, 1, 1, v4);
LABEL_38:
        (*(void (**)(_QWORD, char *, uint64_t))(v77 + 32))(*(_QWORD *)(*((_QWORD *)v21 + 8) + 40), v34, v79);
        swift_continuation_resume(v21);
        return;
      }
      if (v9 > 1)
      {
        v42 = 0x7FFFFFFFFFFFFFFFLL;
        v22 = v83;
      }
      else
      {
        v22 = v83;
        v42 = v76;
      }
      *v80 = v42;
      type metadata accessor for AsyncStream.Continuation.YieldResult(0, v4, v19, v20);
      swift_storeEnumTagMultiPayload();
      _swift_async_stream_lock_unlock(v81);
      v34 = v78;
      (*(void (**)(char *, uint64_t, uint64_t))(v22 + 32))(v78, v82, v4);
LABEL_37:
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v34, 0, 1, v4);
      goto LABEL_38;
    }
    if ((*(_BYTE *)(v3 + 64) & 1) != 0)
    {
      v22 = v83;
      (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v82, v4);
      type metadata accessor for AsyncStream.Continuation.YieldResult(0, v4, v23, v24);
    }
    else
    {
      if (v9)
      {
        if (v9 == 1)
        {
          v35 = type metadata accessor for _Deque(0, v4, v19, v20);
          v36 = v35;
          v22 = v83;
          if (v13 >= v76)
          {
            _Deque.removeFirst()(v35);
            type metadata accessor for AsyncStream.Continuation.YieldResult(0, v4, v66, v67);
            swift_storeEnumTagMultiPayload();
            v68 = v82;
            _Deque.append(_:)(v82, v36);
            (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v68, v4);
            goto LABEL_31;
          }
          v37 = v76;
          v38 = v82;
          _Deque.append(_:)(v82, v35);
          (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v38, v4);
          v41 = v37 + ~v13;
        }
        else
        {
          v55 = type metadata accessor for _Deque(0, v4, v19, v20);
          v56 = v82;
          _Deque.append(_:)(v82, v55);
          v22 = v83;
          (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v56, v4);
          v41 = 0x7FFFFFFFFFFFFFFFLL;
        }
      }
      else
      {
        v52 = v76;
        if (v13 >= v76)
        {
          v22 = v83;
          (*(void (**)(uint64_t *, uint64_t, uint64_t))(v83 + 32))(v80, v82, v4);
          type metadata accessor for AsyncStream.Continuation.YieldResult(0, v4, v69, v70);
          goto LABEL_30;
        }
        v53 = type metadata accessor for _Deque(0, v4, v19, v20);
        v54 = v82;
        _Deque.append(_:)(v82, v53);
        v22 = v83;
        (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v54, v4);
        v41 = v52 + ~v13;
      }
      *v80 = v41;
      type metadata accessor for AsyncStream.Continuation.YieldResult(0, v4, v39, v40);
    }
LABEL_30:
    swift_storeEnumTagMultiPayload();
LABEL_31:
    v59 = type metadata accessor for _Deque(0, v4, v57, v58);
    v60 = v75;
    _Deque.removeFirst()(v59);
    _swift_async_stream_lock_unlock(v81);
    v34 = v78;
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v78, v60, v4);
    goto LABEL_37;
  }
  if ((*(_BYTE *)(v3 + 64) & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v82, v4);
    type metadata accessor for AsyncStream.Continuation.YieldResult(0, v4, v17, v18);
LABEL_4:
    swift_storeEnumTagMultiPayload();
LABEL_25:
    _swift_async_stream_lock_unlock(v81);
    return;
  }
  if (v9)
  {
    if (v9 != 1)
    {
      *v80 = 0x7FFFFFFFFFFFFFFFLL;
      type metadata accessor for AsyncStream.Continuation.YieldResult(0, v4, v15, v16);
      swift_storeEnumTagMultiPayload();
      v50 = type metadata accessor for _Deque(0, v4, v48, v49);
      v51 = v82;
      _Deque.append(_:)(v82, v50);
      (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v51, v4);
      goto LABEL_25;
    }
    v25 = v76;
    v26 = v83;
    if (v13 < v76)
    {
      v27 = type metadata accessor for _Deque(0, v4, v15, v16);
      v28 = v82;
      _Deque.append(_:)(v82, v27);
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v28, v4);
      if (!__OFSUB__(v25, v13 + 1))
      {
        *v80 = v25 - (v13 + 1);
        type metadata accessor for AsyncStream.Continuation.YieldResult(0, v4, v29, v30);
        goto LABEL_4;
      }
      __break(1u);
      goto LABEL_44;
    }
    if (v13 >= 1)
    {
      v61 = type metadata accessor for _Deque(0, v4, v15, v16);
      _Deque.removeFirst()(v61);
      type metadata accessor for AsyncStream.Continuation.YieldResult(0, v4, v62, v63);
      swift_storeEnumTagMultiPayload();
      v64 = v82;
      _Deque.append(_:)(v82, v61);
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v64, v4);
      goto LABEL_25;
    }
    v65 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v83 + 32);
LABEL_42:
    v65(v80, v82, v4);
    type metadata accessor for AsyncStream.Continuation.YieldResult(0, v4, v71, v72);
    goto LABEL_4;
  }
  if (v13 >= v76)
  {
    v65 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v83 + 32);
    goto LABEL_42;
  }
  v43 = v83;
  if (!__OFSUB__(v76, v13 + 1))
  {
    *v80 = v76 - (v13 + 1);
    type metadata accessor for AsyncStream.Continuation.YieldResult(0, v4, v15, v16);
    swift_storeEnumTagMultiPayload();
    v46 = type metadata accessor for _Deque(0, v4, v44, v45);
    v47 = v82;
    _Deque.append(_:)(v82, v46);
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v47, v4);
    goto LABEL_25;
  }
LABEL_44:
  __break(1u);
}

uint64_t _Deque.count.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, a1, (uint64_t)&type metadata for _DequeBufferHeader, a2, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v3);
  return v4;
}

uint64_t specialized RangeReplaceableCollection.removeFirst()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (*(_QWORD *)(*(_QWORD *)v0 + 16))
  {
    v1 = *(_QWORD *)(*(_QWORD *)v0 + 32);
    specialized RangeReplaceableCollection.removeFirst(_:)(1uLL);
    return v1;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t _Deque.append(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 16);
  result = _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, *v2, (uint64_t)&type metadata for _DequeBufferHeader, v4, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v11);
  if (__OFADD__(v13, 1))
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for _Deque._Storage(0, v4, v6, v7);
    _Deque._Storage.ensureUnique(minimumCapacity:linearGrowth:)(v13 + 1, 0);
    MEMORY[0x1E0C80A78](v8);
    v11 = v4;
    v12 = a1;
    return _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in _Deque.append(_:), (uint64_t)&v10, v9, v4, MEMORY[0x1E0DEE9C0] + 8, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
  }
  return result;
}

uint64_t specialized _Deque.removeFirst()()
{
  uint64_t *v0;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10[2];
  uint64_t v11;
  _BYTE v12[24];
  uint64_t v13[2];
  char v14;

  if (!*(_QWORD *)(*v0 + 24))
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_15;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v2 = *v0;
  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    v3 = *v0;
    return specialized _Deque._UnsafeHandle.uncheckedRemoveFirst()((uint64_t *)(v3 + 16));
  }
  v4 = *(_QWORD *)(v2 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DequeBuffer<()>);
  v3 = swift_allocObject();
  v5 = *(_OWORD *)(v2 + 24);
  *(_QWORD *)(v3 + 16) = v4;
  v6 = (uint64_t *)(v3 + 16);
  *(_OWORD *)(v3 + 24) = v5;
  swift_getObjectType();
  _swift_getObjCClassInstanceExtents();
  if (v7 < 0)
    goto LABEL_15;
  if (v7 != 16)
  {
    _swift_getObjCClassInstanceExtents();
    if ((v8 & 0x8000000000000000) == 0)
    {
      if (v8 != 40)
        goto LABEL_16;
      goto LABEL_8;
    }
LABEL_15:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_16;
  }
LABEL_8:
  if ((_swift_objcClassUsesNativeSwiftReferenceCounting() & 1) != 0)
  {
    if (*(uint64_t *)(v2 + 24) >= 1)
    {
      specialized _Deque._UnsafeHandle.segments()((_QWORD *)(v2 + 16), v2 + 40, (uint64_t)v10);
      specialized _Deque._UnsafeHandle.initialize(at:from:)(*(_QWORD *)(v2 + 32), v10[0], v10[1], v6, v3 + 40, 200, (void (*)(uint64_t, uint64_t, uint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
      outlined init with take of UnsafeBufferPointer<()>?((uint64_t)&v11, (uint64_t)v12, &demangling cache variable for type metadata for UnsafeBufferPointer<()>?);
      outlined init with take of UnsafeBufferPointer<()>?((uint64_t)v12, (uint64_t)v13, &demangling cache variable for type metadata for UnsafeBufferPointer<()>?);
      if ((v14 & 1) == 0)
        specialized _Deque._UnsafeHandle.initialize(at:from:)(0, v13[0], v13[1], v6, v3 + 40, 200, (void (*)(uint64_t, uint64_t, uint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
    }
    swift_release();
    *v0 = v3;
    return specialized _Deque._UnsafeHandle.uncheckedRemoveFirst()((uint64_t *)(v3 + 16));
  }
LABEL_16:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _Deque.removeFirst()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[6];

  v9[4] = *v1;
  MEMORY[0x18D78FF74](&protocol conformance descriptor for _Deque<A>, a1);
  if ((Collection.isEmpty.getter() & 1) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 16);
    type metadata accessor for _Deque._Storage(0, v5, v3, v4);
    _Deque._Storage.ensureUnique()();
    MEMORY[0x1E0C80A78](v6);
    v9[2] = v5;
    return _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in _Deque.removeFirst(), (uint64_t)v9, v7, v5, v5, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
  }
  return result;
}

void AsyncStream._Storage.next(_:)(swift::AsyncTask *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  swift::AsyncTask *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  os_unfair_lock_s *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  os_unfair_lock_t v26;
  uint64_t v27;
  uint64_t v28;
  swift::AsyncTask *v29;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v4 = type metadata accessor for Optional();
  v27 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v25 - v6;
  v8 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v5);
  v25 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = (os_unfair_lock_t)(v1 + 72);
  _swift_async_stream_lock_lock((os_unfair_lock_t)(v1 + 72));
  v29 = a1;
  v10 = MEMORY[0x1E0DEDCE8];
  v11 = MEMORY[0x1E0DEDD18];
  v28 = v4;
  type metadata accessor for UnsafeContinuation(255, v4, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDD18]);
  v12 = type metadata accessor for Array();
  Array.append(_:)();
  v13 = *(_QWORD *)(v1 + 24);
  swift_retain();
  _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, v13, (uint64_t)&type metadata for _DequeBufferHeader, v3, v10, MEMORY[0x1E0DEB418], v11, v24);
  v14 = (uint64_t)v29;
  swift_release();
  if (v14 >= 1)
  {
    MEMORY[0x18D78FF74](MEMORY[0x1E0DEAF58], v12);
    RangeReplaceableCollection.removeFirst()();
    v15 = v29;
    v18 = type metadata accessor for _Deque(0, v3, v16, v17);
    v19 = v25;
    _Deque.removeFirst()(v18);
    _swift_async_stream_lock_unlock(v26);
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v7, v19, v3);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v7, 0, 1, v3);
    (*(void (**)(_QWORD, char *, uint64_t))(v27 + 32))(*(_QWORD *)(*((_QWORD *)v15 + 8) + 40), v7, v28);
LABEL_5:
    swift_continuation_resume(v15);
    return;
  }
  v21 = v26;
  v20 = v27;
  v22 = v7;
  v23 = v28;
  if (*(_BYTE *)(v1 + 64) == 1)
  {
    MEMORY[0x18D78FF74](MEMORY[0x1E0DEAF58], v12);
    RangeReplaceableCollection.removeFirst()();
    v15 = v29;
    _swift_async_stream_lock_unlock(v21);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v22, 1, 1, v3);
    (*(void (**)(_QWORD, char *, uint64_t))(v20 + 32))(*(_QWORD *)(*((_QWORD *)v15 + 8) + 40), v22, v23);
    goto LABEL_5;
  }
  _swift_async_stream_lock_unlock(v26);
}

uint64_t AsyncStream._Storage.next()(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  return swift_task_switch(AsyncStream._Storage.next(), 0, 0);
}

uint64_t AsyncStream._Storage.next()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = v0[3];
  v0[5] = v1;
  swift_retain();
  v2 = swift_task_alloc(32);
  v0[6] = v2;
  *(_QWORD *)(v2 + 16) = partial apply for implicit closure #2 in implicit closure #1 in AsyncStream._Storage.next();
  *(_QWORD *)(v2 + 24) = v1;
  v3 = (_QWORD *)swift_task_alloc(dword_1EE06A2F4);
  v0[7] = v3;
  type metadata accessor for Optional();
  *v3 = v0;
  v3[1] = AsyncStream._Storage.next();
  v4 = v0[2];
  v3[4] = v0[3];
  v3[5] = partial apply for implicit closure #1 in static GlobalActor.assertIsolated(_:file:line:);
  v3[2] = v4;
  v3[3] = &async function pointer to partial apply for closure #1 in AsyncStream._Storage.next();
  v3[7] = 0;
  v3[8] = 0;
  v3[6] = v2;
  return swift_task_switch(withTaskCancellationHandler<A>(operation:onCancel:isolation:), 0, 0);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*v0 + 48);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 56));
  swift_release();
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t closure #1 in AsyncStream._Storage.next()(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;

  v2[2] = a1;
  v2[3] = a2;
  v2[4] = *a2;
  return swift_task_switch(closure #1 in AsyncStream._Storage.next(), 0, 0);
}

uint64_t closure #1 in AsyncStream._Storage.next()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  char *v4;

  v4 = (char *)&async function pointer to withUnsafeContinuation<A>(isolation:_:)
     + async function pointer to withUnsafeContinuation<A>(isolation:_:);
  v1 = (_QWORD *)swift_task_alloc(unk_1EE06AFA4);
  v0[5] = v1;
  v2 = type metadata accessor for Optional();
  *v1 = v0;
  v1[1] = closure #1 in AsyncStream._Storage.next();
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t (*)(), _QWORD, uint64_t))v4)(v0[2], 0, 0, partial apply for closure #1 in closure #1 in AsyncStream._Storage.next(), v0[3], v2);
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 40));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t static AsyncStream._Storage.create(limit:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  char v19;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  protocol witness for static Equatable.== infix(_:_:) in conformance ContinuousClock.Instant.CodingKeys();
  v4 = swift_allocObject();
  *(_QWORD *)&v10 = v2;
  BYTE8(v10) = v3;
  v5 = *(_QWORD *)(v1 + 80);
  AsyncStream._Storage.State.init(limit:)((uint64_t *)&v10, (uint64_t)&v15);
  v10 = v15;
  v11 = v16;
  v12 = v17;
  v13 = v18;
  v14 = v19;
  v8 = type metadata accessor for AsyncStream._Storage.State(0, v5, v6, v7);
  (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v4 + 16, &v10, v8);
  _swift_async_stream_lock_init((_DWORD *)(v4 + 72));
  return v4;
}

uint64_t AsyncThrowingStream._Storage.State.init(limit:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v9 = *a1;
  v10 = *((_BYTE *)a1 + 8);
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = _Deque._Storage.init()();
  v11 = type metadata accessor for AsyncThrowingStream._Storage.State(0, a2, a3, a4);
  *(_QWORD *)(a5 + 32) = 0;
  *(_QWORD *)(a5 + 40) = 0;
  v12 = a5 + *(int *)(v11 + 56);
  v13 = type metadata accessor for AsyncThrowingStream._Storage.Terminal(0, a2, a3, a4);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  *(_QWORD *)(a5 + 16) = v9;
  *(_BYTE *)(a5 + 24) = v10;
  return result;
}

_QWORD *AsyncThrowingStream._Storage.deinit()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  void (*v11)(char *);
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v1 = v0;
  v2 = (_QWORD *)*v0;
  v3 = v2[10];
  v4 = v2[11];
  v5 = v2[12];
  v6 = type metadata accessor for AsyncThrowingStream.Continuation.Termination(0, v3, v4, v5);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v15 - v8;
  v10 = (char *)v1 + v2[13];
  v11 = (void (*)(char *))*((_QWORD *)v10 + 4);
  if (v11)
  {
    v12 = type metadata accessor for Optional();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v9, 1, 1, v12);
    swift_retain();
    v11(v9);
    _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe((uint64_t)v11);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  v13 = type metadata accessor for AsyncThrowingStream._Storage.State(0, v3, v4, v5);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v10, v13);
  return v1;
}

uint64_t AsyncThrowingStream._Storage.__deallocating_deinit()
{
  AsyncThrowingStream._Storage.deinit();
  return swift_deallocClassInstance();
}

void AsyncThrowingStream._Storage.unlock()()
{
  uint64_t v0;

  _swift_async_stream_lock_unlock((os_unfair_lock_t)(v0
                                                   + ((*(unsigned int *)(*(_QWORD *)v0 + 48) + 7) & 0x1FFFFFFF8)));
}

uint64_t AsyncThrowingStream._Storage.getOnTermination()()
{
  uint64_t v0;
  uint64_t v1;

  _swift_async_stream_lock_lock((os_unfair_lock_t)(v0 + ((*(unsigned int *)(*(_QWORD *)v0 + 48) + 7) & 0x1FFFFFFF8)));
  v1 = *(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 104) + 32);
  _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOy(v1);
  _swift_async_stream_lock_unlock((os_unfair_lock_t)(v0
                                                   + ((*(unsigned int *)(*(_QWORD *)v0 + 48) + 7) & 0x1FFFFFFF8)));
  return v1;
}

uint64_t AsyncThrowingStream._Storage.setOnTermination(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t **v2;
  uint64_t *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[8];
  uint64_t v16[2];

  v5 = *v2;
  _swift_async_stream_lock_lock((os_unfair_lock_t)((char *)v2 + ((*((unsigned int *)*v2 + 12) + 7) & 0x1FFFFFFF8)));
  v6 = (char *)v2 + (*v2)[13];
  v7 = *((_QWORD *)v6 + 4);
  v8 = *((_QWORD *)v6 + 5);
  if (v7)
  {
    v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = *((_OWORD *)v5 + 5);
    *(_QWORD *)(v9 + 32) = v5[12];
    *(_QWORD *)(v9 + 40) = v7;
    *(_QWORD *)(v9 + 48) = v8;
    v10 = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed AsyncThrowingStream<A, B>.Continuation.Termination) -> ()partial apply;
  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  v16[0] = (uint64_t)v10;
  v16[1] = v9;
  MEMORY[0x1E0C80A78](v9);
  v15[2] = v2;
  v15[3] = a1;
  v15[4] = a2;
  _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOy(v7);
  type metadata accessor for AsyncThrowingStream.Continuation.Termination(255, v5[10], v5[11], v5[12]);
  v11 = MEMORY[0x1E0DEE9C0] + 8;
  swift_getFunctionTypeMetadata1();
  v12 = type metadata accessor for Optional();
  _ss20withExtendedLifetimeyq0_x_q0_yq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v16, (uint64_t)partial apply for closure #1 in AsyncThrowingStream._Storage.setOnTermination(_:), (uint64_t)v15, v12, MEMORY[0x1E0DEDCE8], v11, MEMORY[0x1E0DEDD18], v13);
  return _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe(v16[0]);
}

void AsyncThrowingStream._Storage.cancel@Sendable ()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *);
  uint64_t v14;

  v1 = v0;
  v2 = *v0;
  v3 = *(_QWORD *)(*v0 + 88);
  v4 = type metadata accessor for Optional();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v14 - v6;
  v8 = type metadata accessor for AsyncThrowingStream.Continuation.Termination(0, *(_QWORD *)(v2 + 80), v3, *(_QWORD *)(v2 + 96));
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v14 - v10;
  _swift_async_stream_lock_lock((os_unfair_lock_t)((char *)v1 + ((*(unsigned int *)(v2 + 48) + 7) & 0x1FFFFFFF8)));
  v12 = (uint64_t)v1 + *(_QWORD *)(*v1 + 104);
  v13 = *(void (**)(char *))(v12 + 32);
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 0;
  _swift_async_stream_lock_unlock((os_unfair_lock_t)((char *)v1 + ((*(unsigned int *)(*v1 + 48) + 7) & 0x1FFFFFFF8)));
  if (v13)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v11, 1, 1, v4);
    v13(v11);
    _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe((uint64_t)v13);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v7, 1, 1, v3);
  AsyncThrowingStream._Storage.finish(throwing:)((uint64_t)v7);
}

void AsyncThrowingStream._Storage.finish(throwing:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unsigned int (*v34)(char *, uint64_t, uint64_t);
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  swift::AsyncTask *v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *);
  uint64_t v53;
  uint64_t v54;
  char *v55;
  void (*v56)(char *);
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  swift::AsyncTask *v66;
  void (*v67)(char *, char *, uint64_t);
  char *v68;
  void (*v69)(char *);
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  void (*v77)(char *, char *, uint64_t);
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD v85[2];
  char *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  unsigned int (*v90)(char *, uint64_t, uint64_t);
  void (*v91)(char *, char *, uint64_t);
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(char *);
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;

  v2 = v1;
  v109 = a1;
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 80);
  v5 = *(_QWORD *)(*v1 + 88);
  v6 = *(_QWORD *)(*v1 + 96);
  v7 = type metadata accessor for AsyncThrowingStream._Storage.Terminal(0, v4, v5, v6);
  v110 = *(_QWORD *)(v7 - 8);
  v8 = MEMORY[0x1E0C80A78](v7);
  v89 = (char *)v85 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v88 = (char *)v85 - v10;
  v11 = type metadata accessor for Optional();
  v97 = *(_QWORD *)(v11 - 8);
  v98 = v11;
  MEMORY[0x1E0C80A78](v11);
  v96 = (char *)v85 - v12;
  v13 = type metadata accessor for AsyncThrowingStream.Continuation.Termination(0, v4, v5, v6);
  v101 = *(_QWORD *)(v13 - 8);
  v102 = v13;
  v14 = MEMORY[0x1E0C80A78](v13);
  v100 = (char *)v85 - v15;
  v95 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v14);
  v94 = (uint64_t)v85 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Optional();
  v107 = *(_QWORD *)(v17 - 8);
  v108 = v17;
  v18 = MEMORY[0x1E0C80A78](v17);
  v20 = (char *)v85 - v19;
  v99 = *(_QWORD *)(v5 - 8);
  v21 = MEMORY[0x1E0C80A78](v18);
  v86 = (char *)v85 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v93 = (char *)v85 - v23;
  v24 = type metadata accessor for Optional();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = MEMORY[0x1E0C80A78](v24);
  v92 = (char *)v85 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26);
  v29 = (char *)v85 - v28;
  _swift_async_stream_lock_lock((os_unfair_lock_t)((char *)v2 + ((*(unsigned int *)(v3 + 48) + 7) & 0x1FFFFFFF8)));
  v30 = (uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 104));
  v105 = (void (*)(char *))v30[4];
  v106 = v2;
  v31 = v30[5];
  v103 = v4;
  v87 = v6;
  v32 = type metadata accessor for AsyncThrowingStream._Storage.State(0, v4, v5, v6);
  v30[4] = 0;
  v30[5] = 0;
  v33 = (char *)v30 + *(int *)(v32 + 56);
  v91 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
  v91(v29, v33, v24);
  v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v110 + 48);
  v104 = v7;
  v90 = v34;
  LODWORD(v4) = v34(v29, 1, v7);
  v35 = *(void (**)(char *, uint64_t))(v25 + 8);
  v35(v29, v24);
  if ((_DWORD)v4 == 1)
  {
    v37 = v107;
    v36 = v108;
    (*(void (**)(char *, uint64_t, uint64_t))(v107 + 16))(v20, v109, v108);
    v38 = v99;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v99 + 48))(v20, 1, v5) == 1)
    {
      (*(void (**)(char *, uint64_t))(v37 + 8))(v20, v36);
      v35(v33, v24);
      v39 = 1;
    }
    else
    {
      v40 = *(void (**)(char *, char *, uint64_t))(v38 + 32);
      v41 = v93;
      v40(v93, v20, v5);
      v35(v33, v24);
      v40(v33, v41, v5);
      v39 = 0;
    }
    v42 = v104;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56))(v33, v39, 1, v5);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v110 + 56))(v33, 0, 1, v42);
  }
  v93 = (char *)v35;
  v43 = *v30;
  if (!*v30)
  {
    _swift_async_stream_lock_unlock((os_unfair_lock_t)((char *)v106
                                                     + ((*(unsigned int *)(*v106 + 48) + 7) & 0x1FFFFFFF8)));
    v56 = v105;
    if (v105)
      goto LABEL_14;
    goto LABEL_15;
  }
  v85[1] = v31;
  v44 = v30[1];
  swift_retain();
  v45 = v103;
  _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, v44, (uint64_t)&type metadata for _DequeBufferHeader, v103, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v84);
  v46 = v111;
  swift_release();
  if (v46 >= 1)
  {
    v49 = (swift::AsyncTask *)v43;
    *v30 = 0;
    v50 = type metadata accessor for _Deque(0, v45, v47, v48);
    v51 = v94;
    _Deque.removeFirst()(v50);
    _swift_async_stream_lock_unlock((os_unfair_lock_t)((char *)v106
                                                     + ((*(unsigned int *)(*v106 + 48) + 7) & 0x1FFFFFFF8)));
    v52 = v105;
    if (v105)
    {
      v54 = v107;
      v53 = v108;
      v55 = v100;
      (*(void (**)(char *, uint64_t, uint64_t))(v107 + 32))(v100, v109, v108);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v55, 0, 1, v53);
      v52(v55);
      _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe((uint64_t)v52);
      (*(void (**)(char *, uint64_t))(v101 + 8))(v55, v102);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v109, v108);
    }
    v63 = v97;
    v62 = v98;
    v65 = v95;
    v64 = v96;
    (*(void (**)(char *, uint64_t, uint64_t))(v95 + 32))(v96, v51, v45);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v64, 0, 1, v45);
    (*(void (**)(_QWORD, char *, uint64_t))(v63 + 32))(*(_QWORD *)(*((_QWORD *)v49 + 8) + 40), v64, v62);
    v66 = v49;
    goto LABEL_18;
  }
  v57 = v92;
  v91(v92, v33, v24);
  v58 = v104;
  if (v90(v57, 1, v104) == 1)
  {
    ((void (*)(char *, uint64_t))v93)(v57, v24);
    _swift_async_stream_lock_unlock((os_unfair_lock_t)((char *)v106
                                                     + ((*(unsigned int *)(*v106 + 48) + 7) & 0x1FFFFFFF8)));
    v56 = v105;
    if (v105)
    {
LABEL_14:
      v60 = v107;
      v59 = v108;
      v61 = v100;
      (*(void (**)(char *, uint64_t, uint64_t))(v107 + 32))(v100, v109, v108);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v61, 0, 1, v59);
      v56(v61);
      _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe((uint64_t)v56);
      (*(void (**)(char *, uint64_t))(v101 + 8))(v61, v102);
      return;
    }
LABEL_15:
    (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v109, v108);
    return;
  }
  v94 = v43;
  v67 = *(void (**)(char *, char *, uint64_t))(v110 + 32);
  v68 = v88;
  v67(v88, v57, v58);
  *v30 = 0;
  _swift_async_stream_lock_unlock((os_unfair_lock_t)((char *)v106
                                                   + ((*(unsigned int *)(*v106 + 48) + 7) & 0x1FFFFFFF8)));
  v69 = v105;
  if (v105)
  {
    v71 = v107;
    v70 = v108;
    v72 = v100;
    (*(void (**)(char *, uint64_t, uint64_t))(v107 + 32))(v100, v109, v108);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v71 + 56))(v72, 0, 1, v70);
    v69(v72);
    _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe((uint64_t)v69);
    (*(void (**)(char *, uint64_t))(v101 + 8))(v72, v102);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v109, v108);
  }
  v73 = v89;
  v67(v89, v68, v58);
  v74 = v99;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v99 + 48))(v73, 1, v5) == 1)
  {
    v75 = v96;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v95 + 56))(v96, 1, 1, v103);
    v76 = v94;
    (*(void (**)(_QWORD, char *, uint64_t))(v97 + 32))(*(_QWORD *)(*(_QWORD *)(v94 + 64) + 40), v75, v98);
    v66 = (swift::AsyncTask *)v76;
LABEL_18:
    swift_continuation_throwingResume(v66);
    return;
  }
  v77 = *(void (**)(char *, char *, uint64_t))(v74 + 32);
  v78 = v86;
  v77(v86, v73, v5);
  v79 = swift_allocError();
  v77(v80, v78, v5);
  v111 = v79;
  v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  v82 = swift_allocError();
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v81 - 8) + 32))(v83, &v111, v81);
  swift_continuation_throwingResumeWithError(v94, v82);
}

void AsyncThrowingStream._Storage.yield(_:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  void (*v35)(char *, char *, uint64_t);
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  void (*v65)(uint64_t, char *, uint64_t);
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(char *, char *, uint64_t);
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  swift::AsyncTask *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t *v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;

  v113 = a2;
  v114 = a1;
  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 88);
  v100 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v98 = (char *)&v96 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v3 + 80);
  v117 = *(_QWORD *)(v3 + 96);
  v7 = type metadata accessor for AsyncThrowingStream._Storage.Terminal(0, v6, v4, v117);
  v115 = *(_QWORD *)(v7 - 8);
  v8 = MEMORY[0x1E0C80A78](v7);
  v99 = (char *)&v96 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v102 = (uint64_t)&v96 - v10;
  v110 = type metadata accessor for Optional();
  v108 = *(_QWORD *)(v110 - 8);
  v11 = MEMORY[0x1E0C80A78](v110);
  v109 = (char *)&v96 - v12;
  v118 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v11);
  v105 = (char *)&v96 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = v7;
  v14 = type metadata accessor for Optional();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v96 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v16);
  v101 = (char *)&v96 - v20;
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v96 - v21;
  _swift_async_stream_lock_lock((os_unfair_lock_t)((char *)v2 + ((*(unsigned int *)(v3 + 48) + 7) & 0x1FFFFFFF8)));
  v23 = *(_QWORD *)(*v2 + 104);
  v112 = v2;
  v107 = *(uint64_t *)((char *)v2 + v23 + 16);
  v106 = *((unsigned __int8 *)v2 + v23 + 24);
  v24 = (uint64_t *)((char *)v2 + v23);
  v25 = *(uint64_t *)((char *)v2 + v23 + 8);
  v111 = v24 + 1;
  swift_retain();
  _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, v25, (uint64_t)&type metadata for _DequeBufferHeader, v6, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v95);
  v26 = v119;
  swift_release();
  v27 = *v24;
  if (!*v24)
  {
    v48 = v117;
    v49 = type metadata accessor for AsyncThrowingStream._Storage.State(0, v6, v4, v117);
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v18, (char *)v24 + *(int *)(v49 + 56), v14);
    v50 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v115 + 48))(v18, 1, v116);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    v53 = v48;
    if (v50 != 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v114, v6);
      type metadata accessor for AsyncThrowingStream.Continuation.YieldResult(0, v6, v4, v48);
LABEL_20:
      swift_storeEnumTagMultiPayload();
LABEL_33:
      _swift_async_stream_lock_unlock((os_unfair_lock_t)((char *)v112
                                                       + ((*(unsigned int *)(*v112 + 48) + 7) & 0x1FFFFFFF8)));
      return;
    }
    v54 = v118;
    if (v106)
    {
      v55 = v107;
      if (v106 == 1)
      {
        if (v26 < v107)
        {
          v56 = type metadata accessor for _Deque(0, v6, v51, v52);
          v57 = v114;
          _Deque.append(_:)(v114, v56);
          (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v57, v6);
          if (__OFSUB__(v55, v26 + 1))
          {
            __break(1u);
            return;
          }
          *v113 = v55 - (v26 + 1);
          type metadata accessor for AsyncThrowingStream.Continuation.YieldResult(0, v6, v4, v53);
          goto LABEL_20;
        }
        if (v26 >= 1)
        {
          v93 = type metadata accessor for _Deque(0, v6, v51, v52);
          _Deque.removeFirst()(v93);
          type metadata accessor for AsyncThrowingStream.Continuation.YieldResult(0, v6, v4, v53);
          swift_storeEnumTagMultiPayload();
          v94 = v114;
          _Deque.append(_:)(v114, v93);
          (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v94, v6);
          goto LABEL_33;
        }
        goto LABEL_45;
      }
    }
    else
    {
      if (v26 >= v107)
      {
LABEL_45:
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(v118 + 32))(v113, v114, v6);
        type metadata accessor for AsyncThrowingStream.Continuation.YieldResult(0, v6, v4, v53);
        goto LABEL_20;
      }
      v74 = v107 - (v26 + 1);
      if (!__OFSUB__(v107, v26 + 1))
      {
LABEL_32:
        *v113 = v74;
        type metadata accessor for AsyncThrowingStream.Continuation.YieldResult(0, v6, v4, v53);
        swift_storeEnumTagMultiPayload();
        v77 = type metadata accessor for _Deque(0, v6, v75, v76);
        v78 = v114;
        _Deque.append(_:)(v114, v77);
        (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v78, v6);
        goto LABEL_33;
      }
      __break(1u);
    }
    v74 = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_32;
  }
  v29 = v115;
  v28 = v116;
  v103 = v6;
  v104 = v27;
  v30 = v6;
  v31 = v4;
  v32 = v4;
  v33 = v117;
  v34 = (char *)v24 + *(int *)(type metadata accessor for AsyncThrowingStream._Storage.State(0, v30, v32, v117) + 56);
  v35 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  if (v26 >= 1)
  {
    v102 = v26;
    v97 = v24;
    v35(v22, v34, v14);
    v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48))(v22, 1, v28);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v22, v14);
    if (v36 == 1)
    {
      v39 = v103;
      v40 = v118;
      if (v106)
      {
        v41 = v107;
        if (v106 == 1)
        {
          v42 = type metadata accessor for _Deque(0, v103, v37, v38);
          v43 = v42;
          if (v102 >= v41)
          {
            _Deque.removeFirst()(v42);
            type metadata accessor for AsyncThrowingStream.Continuation.YieldResult(0, v39, v31, v33);
            swift_storeEnumTagMultiPayload();
            v89 = v114;
            _Deque.append(_:)(v114, v43);
            (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v89, v39);
          }
          else
          {
            v44 = v114;
            v45 = v102;
            _Deque.append(_:)(v114, v42);
            (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v44, v39);
            *v113 = v41 + ~v45;
            type metadata accessor for AsyncThrowingStream.Continuation.YieldResult(0, v39, v31, v33);
            swift_storeEnumTagMultiPayload();
          }
          goto LABEL_38;
        }
        v69 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else
      {
        if (v102 >= v107)
        {
          (*(void (**)(uint64_t *, uint64_t, uint64_t))(v118 + 32))(v113, v114, v103);
          type metadata accessor for AsyncThrowingStream.Continuation.YieldResult(0, v39, v31, v33);
          swift_storeEnumTagMultiPayload();
          goto LABEL_38;
        }
        v69 = v107 + ~v102;
      }
      *v113 = v69;
      type metadata accessor for AsyncThrowingStream.Continuation.YieldResult(0, v39, v31, v33);
      swift_storeEnumTagMultiPayload();
      v72 = type metadata accessor for _Deque(0, v39, v70, v71);
      v73 = v114;
      _Deque.append(_:)(v114, v72);
      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v73, v39);
    }
    else
    {
      v40 = v118;
      v39 = v103;
      (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v114, v103);
      type metadata accessor for AsyncThrowingStream.Continuation.YieldResult(0, v39, v31, v33);
      swift_storeEnumTagMultiPayload();
    }
LABEL_38:
    *v97 = 0;
    v90 = type metadata accessor for _Deque(0, v39, v46, v47);
    v91 = v105;
    _Deque.removeFirst()(v90);
    _swift_async_stream_lock_unlock((os_unfair_lock_t)((char *)v112
                                                     + ((*(unsigned int *)(*v112 + 48) + 7) & 0x1FFFFFFF8)));
    v68 = v109;
    (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v109, v91, v39);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v68, 0, 1, v39);
    goto LABEL_39;
  }
  v58 = v101;
  v35(v101, v34, v14);
  v59 = v28;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v58, 1, v28) == 1)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v58, v14);
    v60 = v103;
    v61 = v118;
    if (v106)
    {
      v62 = v107;
      if (v106 != 1)
        v62 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      v62 = v107;
    }
    *v113 = v62;
    type metadata accessor for AsyncThrowingStream.Continuation.YieldResult(0, v60, v31, v33);
    swift_storeEnumTagMultiPayload();
    *v24 = 0;
    _swift_async_stream_lock_unlock((os_unfair_lock_t)((char *)v112
                                                     + ((*(unsigned int *)(*v112 + 48) + 7) & 0x1FFFFFFF8)));
    v86 = v109;
    (*(void (**)(char *, uint64_t, uint64_t))(v61 + 32))(v109, v114, v60);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v61 + 56))(v86, 0, 1, v60);
    v87 = v104;
    (*(void (**)(_QWORD, char *, uint64_t))(v108 + 32))(*(_QWORD *)(*(_QWORD *)(v104 + 64) + 40), v86, v110);
    v88 = (swift::AsyncTask *)v87;
    goto LABEL_40;
  }
  v97 = v24;
  v63 = v58;
  v64 = v103;
  (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v114, v103);
  v65 = *(void (**)(uint64_t, char *, uint64_t))(v29 + 32);
  v65(v102, v63, v59);
  type metadata accessor for AsyncThrowingStream.Continuation.YieldResult(0, v64, v31, v33);
  swift_storeEnumTagMultiPayload();
  *v97 = 0;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v34, v14);
  v66 = v100;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v100 + 56))(v34, 1, 1, v31);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v34, 0, 1, v59);
  _swift_async_stream_lock_unlock((os_unfair_lock_t)((char *)v112
                                                   + ((*(unsigned int *)(*v112 + 48) + 7) & 0x1FFFFFFF8)));
  v67 = v99;
  v65((uint64_t)v99, (char *)v102, v59);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v67, 1, v31) != 1)
  {
    v79 = *(void (**)(char *, char *, uint64_t))(v66 + 32);
    v80 = v98;
    v79(v98, v67, v31);
    v81 = swift_allocError();
    v79(v82, v80, v31);
    v119 = v81;
    v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v84 = swift_allocError();
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v83 - 8) + 32))(v85, &v119, v83);
    swift_continuation_throwingResumeWithError(v104, v84);
    return;
  }
  v68 = v109;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v118 + 56))(v109, 1, 1, v64);
LABEL_39:
  v92 = v104;
  (*(void (**)(_QWORD, char *, uint64_t))(v108 + 32))(*(_QWORD *)(*(_QWORD *)(v104 + 64) + 40), v68, v110);
  v88 = (swift::AsyncTask *)v92;
LABEL_40:
  swift_continuation_throwingResume(v88);
}

void AsyncThrowingStream._Storage.next(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  swift::AsyncTask **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  swift::AsyncTask *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  char *v35;
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  swift::AsyncTask *v57;
  uint64_t v58;

  v2 = v1;
  v57 = (swift::AsyncTask *)a1;
  v3 = *v1;
  v47 = *(_QWORD *)(*(_QWORD *)(v3 + 88) - 8);
  MEMORY[0x1E0C80A78](a1);
  v45 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v3 + 80);
  v52 = *(_QWORD *)(v3 + 96);
  v53 = v6;
  v7 = type metadata accessor for AsyncThrowingStream._Storage.Terminal(255, v5, v6, v52);
  v50 = type metadata accessor for Optional();
  v48 = *(_QWORD *)(v50 - 8);
  v8 = MEMORY[0x1E0C80A78](v50);
  v10 = (char *)&v44 - v9;
  v49 = *(_QWORD *)(v7 - 8);
  v11 = MEMORY[0x1E0C80A78](v8);
  v46 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v51 = (char *)&v44 - v13;
  v14 = type metadata accessor for Optional();
  v55 = *(_QWORD *)(v14 - 8);
  v56 = v14;
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v44 - v16;
  v54 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  _swift_async_stream_lock_lock((os_unfair_lock_t)((char *)v2 + ((*(unsigned int *)(v3 + 48) + 7) & 0x1FFFFFFF8)));
  v20 = (swift::AsyncTask **)((char *)v2 + *(_QWORD *)(*v2 + 104));
  if (*v20)
  {
    AsyncThrowingStream._Storage.unlock()();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v21 = (uint64_t)v20[1];
    swift_retain();
    _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, v21, (uint64_t)&type metadata for _DequeBufferHeader, v5, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v43);
    v22 = v58;
    swift_release();
    if (v22 >= 1)
    {
      v25 = type metadata accessor for _Deque(0, v5, v23, v24);
      _Deque.removeFirst()(v25);
      _swift_async_stream_lock_unlock((os_unfair_lock_t)((char *)v2
                                                       + ((*(unsigned int *)(*v2 + 48) + 7) & 0x1FFFFFFF8)));
      v26 = v54;
      (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v17, v19, v5);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v17, 0, 1, v5);
LABEL_4:
      v27 = v57;
      (*(void (**)(_QWORD, char *, uint64_t))(v55 + 32))(*(_QWORD *)(*((_QWORD *)v57 + 8) + 40), v17, v56);
      swift_continuation_throwingResume(v27);
      return;
    }
    v28 = (char *)v20 + *(int *)(type metadata accessor for AsyncThrowingStream._Storage.State(0, v5, v53, v52) + 56);
    v29 = v48;
    v30 = v50;
    (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v10, v28, v50);
    v31 = v49;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v10, 1, v7) == 1)
    {
      (*(void (**)(char *, uint64_t))(v29 + 8))(v10, v30);
      *v20 = v57;
      _swift_async_stream_lock_unlock((os_unfair_lock_t)((char *)v2
                                                       + ((*(unsigned int *)(*v2 + 48) + 7) & 0x1FFFFFFF8)));
    }
    else
    {
      v32 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
      v32(v51, v10, v7);
      (*(void (**)(char *, uint64_t))(v29 + 8))(v28, v30);
      v33 = v47;
      v34 = v53;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56))(v28, 1, 1, v53);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v7);
      _swift_async_stream_lock_unlock((os_unfair_lock_t)((char *)v2
                                                       + ((*(unsigned int *)(*v2 + 48) + 7) & 0x1FFFFFFF8)));
      v35 = v46;
      v32(v46, v51, v7);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v35, 1, v34) == 1)
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v54 + 56))(v17, 1, 1, v5);
        goto LABEL_4;
      }
      v36 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
      v37 = v45;
      v36(v45, v35, v34);
      v38 = swift_allocError();
      v36(v39, v37, v34);
      v58 = v38;
      v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v41 = swift_allocError();
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v40 - 8) + 32))(v42, &v58, v40);
      swift_continuation_throwingResumeWithError((uint64_t)v57, v41);
    }
  }
}

uint64_t AsyncThrowingStream._Storage.next()(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  return swift_task_switch(AsyncThrowingStream._Storage.next(), 0, 0);
}

uint64_t AsyncThrowingStream._Storage.next()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = v0[3];
  swift_retain();
  v2 = swift_task_alloc(32);
  v0[5] = v2;
  *(_QWORD *)(v2 + 16) = partial apply for implicit closure #2 in implicit closure #1 in AsyncThrowingStream._Storage.next();
  *(_QWORD *)(v2 + 24) = v1;
  v3 = (_QWORD *)swift_task_alloc(dword_1EE06A2F4);
  v0[6] = v3;
  type metadata accessor for Optional();
  *v3 = v0;
  v3[1] = AsyncThrowingStream._Storage.next();
  v4 = v0[2];
  v3[4] = v0[3];
  v3[5] = partial apply for implicit closure #1 in static GlobalActor.preconditionIsolated(_:file:line:);
  v3[2] = v4;
  v3[3] = &async function pointer to partial apply for closure #1 in AsyncThrowingStream._Storage.next();
  v3[7] = 0;
  v3[8] = 0;
  v3[6] = v2;
  return swift_task_switch(withTaskCancellationHandler<A>(operation:onCancel:isolation:), 0, 0);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *(_QWORD *)(*v1 + 48);
  v3 = *v1;
  *(_QWORD *)(v3 + 56) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(AsyncThrowingStream._Storage.next(), 0, 0);
  v5 = *(_QWORD *)(v3 + 40);
  swift_release();
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_release();
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in AsyncThrowingStream._Storage.next()(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;

  v2[2] = a1;
  v2[3] = a2;
  v2[4] = *a2;
  return swift_task_switch(closure #1 in AsyncThrowingStream._Storage.next(), 0, 0);
}

uint64_t closure #1 in AsyncThrowingStream._Storage.next()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  char *v4;

  v4 = (char *)&async function pointer to withUnsafeThrowingContinuation<A>(isolation:_:)
     + async function pointer to withUnsafeThrowingContinuation<A>(isolation:_:);
  v1 = (_QWORD *)swift_task_alloc(unk_1EE06AF3C);
  v0[5] = v1;
  v2 = type metadata accessor for Optional();
  *v1 = v0;
  v1[1] = closure #1 in AsyncThrowingStream._Storage.next();
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t (*)(), _QWORD, uint64_t))v4)(v0[2], 0, 0, partial apply for closure #1 in closure #1 in AsyncThrowingStream._Storage.next(), v0[3], v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 40);
  v3 = *v1;
  *(_QWORD *)(v3 + 48) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(closure #1 in AsyncThrowingStream._Storage.next(), 0, 0);
  else
    return (*(uint64_t (**)(void))(v3 + 8))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t static AsyncThrowingStream._Storage.create(limit:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  char v16;

  v3 = v1[10];
  v4 = v1[11];
  v5 = v1[12];
  v6 = type metadata accessor for AsyncThrowingStream._Storage.State(0, v3, v4, v5);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v15 - v8;
  v10 = *(_QWORD *)a1;
  v11 = *(_BYTE *)(a1 + 8);
  protocol witness for static Equatable.== infix(_:_:) in conformance ContinuousClock.Instant.CodingKeys();
  v12 = swift_allocObject();
  v13 = v12 + *(_QWORD *)(*(_QWORD *)v12 + 104);
  v15 = v10;
  v16 = v11;
  AsyncThrowingStream._Storage.State.init(limit:)(&v15, v3, v4, v5, (uint64_t)v9);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v13, v9, v6);
  _swift_async_stream_lock_init((_DWORD *)(v12 + ((*(unsigned int *)(*(_QWORD *)v12 + 48) + 7) & 0x1FFFFFFF8)));
  return v12;
}

void _AsyncStreamCriticalStorage.value.getter(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  _swift_async_stream_lock_lock((os_unfair_lock_t)((char *)v1 + ((*(unsigned int *)(*v1 + 48) + 7) & 0x1FFFFFFF8)));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 16))(a1, (uint64_t)v1 + *(_QWORD *)(*v1 + 88));
  _swift_async_stream_lock_unlock((os_unfair_lock_t)((char *)v1 + ((*(unsigned int *)(*v1 + 48) + 7) & 0x1FFFFFFF8)));
}

uint64_t static _AsyncStreamCriticalStorage.create(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = *(_QWORD *)(v1 + 80);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  protocol witness for static Equatable.== infix(_:_:) in conformance ContinuousClock.Instant.CodingKeys();
  v7 = swift_allocObject();
  v8 = v7 + *(_QWORD *)(*(_QWORD *)v7 + 88);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v8, v6, v3);
  _swift_async_stream_lock_init((_DWORD *)(v7 + ((*(unsigned int *)(*(_QWORD *)v7 + 48) + 7) & 0x1FFFFFFF8)));
  return v7;
}

uint64_t TaskLocal.deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 88));
  return v0;
}

uint64_t TaskLocal.__deallocating_deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 88));
  return swift_deallocClassInstance();
}

BOOL static AsyncStream.Continuation.Termination.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void AsyncStream.Continuation.Termination.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int AsyncStream.Continuation.Termination.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AsyncStream<A>.Continuation.Termination()
{
  Hasher.init(_seed:)();
  AsyncStream.Continuation.Termination.hash(into:)();
  return Hasher._finalize()();
}

void AsyncStream.Continuation.yield(_:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  AsyncStream._Storage.yield(_:)(a1, a2);
}

Swift::Void __swiftcall AsyncStream.Continuation.finish()()
{
  AsyncStream._Storage.finish()();
}

uint64_t AsyncStream.Continuation.onTermination.getter()
{
  return AsyncStream._Storage.getOnTermination()();
}

_QWORD *key path getter for AsyncStream.Continuation.onTermination : <A>AsyncStream<A>.Continuation@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t (**a3)()@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)();

  v4 = *(_QWORD *)(a2 + a1 - 8);
  result = (_QWORD *)AsyncStream.Continuation.onTermination.getter();
  if (result)
  {
    v7 = result;
    v8 = v6;
    result = (_QWORD *)swift_allocObject();
    result[2] = v4;
    result[3] = v7;
    result[4] = v8;
    v9 = partial apply for thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed AsyncStream<A>.Continuation.Termination) -> (@out ());
  }
  else
  {
    v9 = 0;
  }
  *a3 = v9;
  a3[1] = (uint64_t (*)())result;
  return result;
}

uint64_t key path setter for AsyncStream.Continuation.onTermination : <A>AsyncStream<A>.Continuation(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v8)();
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a4 + a3 - 8);
  v5 = *a1;
  v6 = a1[1];
  if (*a1)
  {
    v7 = (_QWORD *)swift_allocObject();
    v7[2] = v4;
    v7[3] = v5;
    v7[4] = v6;
    v8 = partial apply for thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed AsyncStream<A>.Continuation.Termination) -> (@out ());
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOy(v5);
  type metadata accessor for AsyncStream.Continuation(0, v4, v9, v10);
  specialized AsyncStream.Continuation.onTermination.setter((uint64_t)v8, (uint64_t)v7);
  return _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe((uint64_t)v8);
}

uint64_t AsyncStream.Continuation.onTermination.setter(uint64_t a1, uint64_t a2)
{
  specialized AsyncStream.Continuation.onTermination.setter(a1, a2);
  return _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe(a1);
}

uint64_t (*AsyncStream.Continuation.onTermination.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t *v1;
  uint64_t v3;

  a1[2] = *v1;
  *a1 = AsyncStream._Storage.getOnTermination()();
  a1[1] = v3;
  return AsyncStream.Continuation.onTermination.modify;
}

uint64_t AsyncStream.Continuation.onTermination.modify(uint64_t *a1, char a2)
{
  return AsyncStream.Continuation.onTermination.modify(a1, a2, (void (*)(uint64_t, uint64_t))AsyncStream._Storage.setOnTermination(_:), (void (*)(uint64_t, uint64_t))_sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOy, (void (*)(uint64_t, uint64_t))_sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe);
}

uint64_t AsyncStream._Context.__deallocating_deinit()
{
  AsyncStream._Context.deinit(AsyncStream._Storage.cancel@Sendable ());
  return swift_deallocClassInstance();
}

uint64_t AsyncStream.init(_:bufferingPolicy:_:)@<X0>(uint64_t a1@<X1>, void (*a2)(uint64_t *)@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t result;
  uint64_t v15;
  char v16;

  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  type metadata accessor for AsyncStream._Storage(0, a4, (uint64_t)a2, a3);
  v15 = v8;
  v16 = v9;
  v10 = static AsyncStream._Storage.create(limit:)(&v15);
  type metadata accessor for AsyncStream._Context(0, a4, v11, v12);
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = v10;
  v13[3] = &async function pointer to partial apply for implicit closure #2 in implicit closure #1 in AsyncStream.init(_:bufferingPolicy:_:);
  v13[4] = v10;
  swift_retain();
  v15 = v10;
  swift_retain();
  a2(&v15);
  result = swift_release();
  *a5 = v13;
  return result;
}

uint64_t implicit closure #2 in implicit closure #1 in AsyncStream.init(_:bufferingPolicy:_:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1EE06AF8C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCompactMapSequence<A, B>.Iterator;
  v5[2] = a1;
  v5[3] = a2;
  v5[4] = *a2;
  return swift_task_switch(AsyncStream._Storage.next(), 0, 0);
}

_QWORD *AsyncStream.init(unfolding:onCancel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *result;
  _QWORD v20[2];

  type metadata accessor for Optional();
  swift_getFunctionTypeMetadata0();
  v12 = type metadata accessor for Optional();
  type metadata accessor for _AsyncStreamCriticalStorage(0, v12, v13, v14);
  v20[0] = a1;
  v20[1] = a2;
  v15 = static _AsyncStreamCriticalStorage.create(_:)((uint64_t)v20);
  swift_release();
  type metadata accessor for AsyncStream._Context(0, a5, v16, v17);
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = a5;
  v18[3] = v15;
  v18[4] = a3;
  v18[5] = a4;
  result = (_QWORD *)swift_allocObject();
  result[2] = 0;
  result[3] = &async function pointer to partial apply for closure #1 in AsyncStream.init(unfolding:onCancel:);
  result[4] = v18;
  *a6 = result;
  return result;
}

uint64_t closure #1 in AsyncStream.init(unfolding:onCancel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch(closure #1 in AsyncStream.init(unfolding:onCancel:), 0, 0);
}

uint64_t closure #1 in AsyncStream.init(unfolding:onCancel:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = v0[5];
  v1 = v0[6];
  v4 = v0[3];
  v3 = v0[4];
  v5 = swift_task_alloc(32);
  v0[7] = v5;
  *(_QWORD *)(v5 + 16) = v1;
  *(_QWORD *)(v5 + 24) = v4;
  v6 = (_QWORD *)swift_task_alloc(48);
  v0[8] = v6;
  v6[2] = v1;
  v6[3] = v4;
  v6[4] = v3;
  v6[5] = v2;
  v7 = (_QWORD *)swift_task_alloc(dword_1EE06A2F4);
  v0[9] = v7;
  type metadata accessor for Optional();
  *v7 = v0;
  v7[1] = closure #1 in AsyncStream.init(unfolding:onCancel:);
  v8 = v0[2];
  v7[4] = v5;
  v7[5] = partial apply for closure #2 in closure #1 in AsyncStream.init(unfolding:onCancel:);
  v7[2] = v8;
  v7[3] = &async function pointer to partial apply for closure #1 in closure #1 in AsyncStream.init(unfolding:onCancel:);
  v7[6] = v6;
  v7[7] = 0;
  v7[8] = 0;
  return swift_task_switch(withTaskCancellationHandler<A>(operation:onCancel:isolation:), 0, 0);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v1 = *(_QWORD *)(*v0 + 64);
  v2 = *(_QWORD *)(*v0 + 56);
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 72));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t closure #1 in closure #1 in AsyncStream.init(unfolding:onCancel:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  v4 = type metadata accessor for Optional();
  v3[9] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[10] = v5;
  v3[11] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(closure #1 in closure #1 in AsyncStream.init(unfolding:onCancel:), 0, 0);
}

uint64_t closure #1 in closure #1 in AsyncStream.init(unfolding:onCancel:)()
{
  uint64_t v0;
  int *v1;
  _QWORD *v2;
  void (*v4)(_QWORD, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t (*v6)(_QWORD);

  _AsyncStreamCriticalStorage.value.getter(v0 + 16);
  v1 = *(int **)(v0 + 16);
  *(_QWORD *)(v0 + 96) = v1;
  if (v1)
  {
    *(_QWORD *)(v0 + 104) = *(_QWORD *)(v0 + 24);
    v6 = (uint64_t (*)(_QWORD))((char *)v1 + *v1);
    v2 = (_QWORD *)swift_task_alloc(v1[1]);
    *(_QWORD *)(v0 + 112) = v2;
    *v2 = v0;
    v2[1] = closure #1 in closure #1 in AsyncStream.init(unfolding:onCancel:);
    return v6(*(_QWORD *)(v0 + 88));
  }
  else
  {
    v4 = *(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 64) - 8) + 56);
    v4(*(_QWORD *)(v0 + 88), 1, 1);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
    *(_QWORD *)(v0 + 40) = 0;
    *(_QWORD *)(v0 + 32) = 0;
    specialized _AsyncStreamCriticalStorage.value.setter(v0 + 32);
    v5 = *(_QWORD *)(v0 + 88);
    ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))v4)(*(_QWORD *)(v0 + 48), 1, 1, *(_QWORD *)(v0 + 64));
    swift_task_dealloc(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 96);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 112));
  _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe(v1);
  return swift_task_switch(closure #1 in closure #1 in AsyncStream.init(unfolding:onCancel:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(v1, *(_QWORD *)(v0 + 72));
    *(_QWORD *)(v0 + 32) = 0;
    *(_QWORD *)(v0 + 40) = 0;
    specialized _AsyncStreamCriticalStorage.value.setter(v0 + 32);
    v4 = 1;
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(*(_QWORD *)(v0 + 48), v1, v2);
    v4 = 0;
  }
  v5 = *(_QWORD *)(v0 + 88);
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v3 + 56))(*(_QWORD *)(v0 + 48), v4, 1, *(_QWORD *)(v0 + 64));
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AsyncStream.Iterator.next()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch(AsyncStream.Iterator.next(), 0, 0);
}

uint64_t AsyncStream.Iterator.next()()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD);

  v1 = **(_QWORD **)(v0 + 24);
  v2 = *(int **)(v1 + 24);
  *(_QWORD *)(v0 + 32) = *(_QWORD *)(v1 + 32);
  v3 = v2[1];
  v6 = (uint64_t (*)(_QWORD))((char *)v2 + *v2);
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc(v3);
  *(_QWORD *)(v0 + 40) = v4;
  *v4 = v0;
  v4[1] = AsyncStream.Iterator.next();
  return v6(*(_QWORD *)(v0 + 16));
}

uint64_t AsyncStream.Iterator.next(isolation:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = v3;
  if (a2)
  {
    ObjectType = swift_getObjectType();
    v7 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(ObjectType, a3);
    v9 = v8;
  }
  else
  {
    v7 = 0;
    v9 = 0;
  }
  return swift_task_switch(AsyncStream.Iterator.next(isolation:), v7, v9);
}

uint64_t AsyncStream.Iterator.next(isolation:)()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD);

  v1 = **(_QWORD **)(v0 + 24);
  v2 = *(int **)(v1 + 24);
  *(_QWORD *)(v0 + 32) = *(_QWORD *)(v1 + 32);
  v3 = v2[1];
  v6 = (uint64_t (*)(_QWORD))((char *)v2 + *v2);
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc(v3);
  *(_QWORD *)(v0 + 40) = v4;
  *v4 = v0;
  v4[1] = AsyncStream.Iterator.next(isolation:);
  return v6(*(_QWORD *)(v0 + 16));
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 40));
  swift_release();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncStream<A>.Iterator(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_1EE06A3FC);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A);
  v4[2] = a1;
  v4[3] = v1;
  return swift_task_switch(AsyncStream.Iterator.next(), 0, 0);
}

uint64_t _sScS8IteratorVyx_GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_1EE06A404);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A);
  return AsyncStream.Iterator.next(isolation:)(a1, a2, a3);
}

uint64_t AsyncStream.makeAsyncIterator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_retain();
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance AsyncStream<A>@<X0>(_QWORD *a1@<X8>)
{
  AsyncStream.makeAsyncIterator()(a1);
  return swift_release();
}

void AsyncStream.Continuation.yield(with:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Result();
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v13 - v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v13 - v10, a1, v9);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    _diagnoseUnexpectedEnumCase<A>(type:)();
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
    AsyncStream._Storage.yield(_:)((uint64_t)v8, a3);
  }
}

void AsyncStream.Continuation.yield<A>()(uint64_t a1@<X8>)
{
  specialized AsyncStream._Storage.yield(_:)(a1);
}

uint64_t static AsyncStream.makeStream(of:bufferingPolicy:)(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v7;
  char v8;
  uint64_t result;
  _BYTE v10[16];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;

  v7 = *a4;
  v8 = *((_BYTE *)a4 + 8);
  v16 = 0;
  v13 = v7;
  v14 = v8;
  v11 = a5;
  v12 = &v16;
  result = AsyncStream.init(_:bufferingPolicy:_:)((uint64_t)&v13, (void (*)(uint64_t *))partial apply for closure #1 in static AsyncStream.makeStream(of:bufferingPolicy:), (uint64_t)v10, a5, &v15);
  *a1 = v15;
  if (v16)
  {
    *a2 = v16;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void AsyncThrowingStream.Continuation.yield(_:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  AsyncThrowingStream._Storage.yield(_:)(a1, a2);
}

void AsyncThrowingStream.Continuation.finish(throwing:)(uint64_t a1)
{
  AsyncThrowingStream._Storage.finish(throwing:)(a1);
}

uint64_t AsyncThrowingStream.Continuation.onTermination.getter()
{
  return AsyncThrowingStream._Storage.getOnTermination()();
}

uint64_t key path getter for AsyncThrowingStream.Continuation.onTermination : <A, B>AsyncThrowingStream<A, B>.Continuation@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t (**a3)()@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  __int128 v10;

  v10 = *(_OWORD *)(a2 + a1 - 24);
  v4 = *(_QWORD *)(a2 + a1 - 8);
  result = AsyncThrowingStream.Continuation.onTermination.getter();
  if (result)
  {
    v7 = result;
    v8 = v6;
    result = swift_allocObject();
    *(_OWORD *)(result + 16) = v10;
    *(_QWORD *)(result + 32) = v4;
    *(_QWORD *)(result + 40) = v7;
    *(_QWORD *)(result + 48) = v8;
    v9 = partial apply for thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed AsyncThrowingStream<A, B>.Continuation.Termination) -> (@out ());
  }
  else
  {
    v9 = 0;
  }
  *a3 = v9;
  a3[1] = (uint64_t (*)())result;
  return result;
}

uint64_t key path setter for AsyncThrowingStream.Continuation.onTermination : <A, B>AsyncThrowingStream<A, B>.Continuation(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v10)();

  v4 = *(_QWORD *)(a4 + a3 - 24);
  v5 = *(_QWORD *)(a4 + a3 - 16);
  v6 = *(_QWORD *)(a4 + a3 - 8);
  v7 = *a1;
  v8 = a1[1];
  if (*a1)
  {
    v9 = (_QWORD *)swift_allocObject();
    v9[2] = v4;
    v9[3] = v5;
    v9[4] = v6;
    v9[5] = v7;
    v10 = partial apply for thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed AsyncThrowingStream<A, B>.Continuation.Termination) -> (@out ());
    v9[6] = v8;
  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOy(v7);
  type metadata accessor for AsyncThrowingStream.Continuation(0, v4, v5, v6);
  specialized AsyncThrowingStream.Continuation.onTermination.setter((uint64_t)v10, (uint64_t)v9);
  return _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe((uint64_t)v10);
}

uint64_t AsyncThrowingStream.Continuation.onTermination.setter(uint64_t a1, uint64_t a2)
{
  specialized AsyncThrowingStream.Continuation.onTermination.setter(a1, a2);
  return _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe(a1);
}

uint64_t (*AsyncThrowingStream.Continuation.onTermination.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t *v1;
  uint64_t v3;

  a1[2] = *v1;
  *a1 = AsyncThrowingStream._Storage.getOnTermination()();
  a1[1] = v3;
  return AsyncThrowingStream.Continuation.onTermination.modify;
}

uint64_t AsyncThrowingStream.Continuation.onTermination.modify(uint64_t *a1, char a2)
{
  return AsyncStream.Continuation.onTermination.modify(a1, a2, (void (*)(uint64_t, uint64_t))AsyncThrowingStream._Storage.setOnTermination(_:), (void (*)(uint64_t, uint64_t))_sScs12ContinuationV11TerminationOyxq___Gs5ErrorR_Ri_zRi0_zr0_lyxq_Iseghn_SgsAFR_r0_lWOy, (void (*)(uint64_t, uint64_t))_sScs12ContinuationV11TerminationOyxq___Gs5ErrorR_Ri_zRi0_zr0_lyxq_Iseghn_SgsAFR_r0_lWOe);
}

uint64_t AsyncStream.Continuation.onTermination.modify(uint64_t *a1, char a2, void (*a3)(uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *a1;
  v7 = a1[1];
  v8 = *a1;
  if ((a2 & 1) != 0)
  {
    a4(v8, v7);
    a3(v6, v7);
    a5(v6, v7);
  }
  else
  {
    a3(v8, v7);
  }
  return ((uint64_t (*)(uint64_t, uint64_t))a5)(v6, v7);
}

_QWORD *AsyncStream._Context.__allocating_init(storage:produce:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  result = (_QWORD *)swift_allocObject();
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  return result;
}

uint64_t AsyncStream._Context.deinit(void (*a1)(void))
{
  uint64_t v1;

  if (*(_QWORD *)(v1 + 16))
  {
    a1();
    swift_release();
  }
  swift_release();
  return v1;
}

uint64_t AsyncThrowingStream._Context.__deallocating_deinit()
{
  AsyncStream._Context.deinit(AsyncThrowingStream._Storage.cancel@Sendable ());
  return swift_deallocClassInstance();
}

uint64_t AsyncThrowingStream.init<>(_:bufferingPolicy:_:)@<X0>(uint64_t a1@<X1>, void (*a2)(uint64_t *)@<X2>, uint64_t a3@<X4>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t result;
  uint64_t v15;
  char v16;

  v7 = *(_QWORD *)a1;
  v8 = *(_BYTE *)(a1 + 8);
  v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  v10 = MEMORY[0x1E0DEDB38];
  type metadata accessor for AsyncThrowingStream._Storage(0, a3, v9, MEMORY[0x1E0DEDB38]);
  v15 = v7;
  v16 = v8;
  v11 = static AsyncThrowingStream._Storage.create(limit:)((uint64_t)&v15);
  type metadata accessor for AsyncThrowingStream._Context(0, a3, v9, v10);
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = a3;
  v12[3] = &async function pointer to partial apply for implicit closure #2 in implicit closure #1 in AsyncThrowingStream.init<>(_:bufferingPolicy:_:);
  v12[4] = v11;
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = v11;
  v13[3] = &async function pointer to partial apply for thunk for @escaping @callee_guaranteed @async () -> (@out A?, @error @owned Error);
  v13[4] = v12;
  swift_retain();
  v15 = v11;
  swift_retain();
  a2(&v15);
  result = swift_release();
  *a4 = v13;
  return result;
}

uint64_t implicit closure #2 in implicit closure #1 in AsyncThrowingStream.init<>(_:bufferingPolicy:_:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1EE06AF24);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCompactMapSequence<A, B>.Iterator;
  v5[2] = a1;
  v5[3] = a2;
  v5[4] = *a2;
  return swift_task_switch(AsyncThrowingStream._Storage.next(), 0, 0);
}

uint64_t thunk for @escaping @callee_guaranteed @async () -> (@out A?, @error @owned Error)(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t);

  *(_QWORD *)(v5 + 16) = a5;
  v9 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v7 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v5 + 24) = v7;
  *v7 = v5;
  v7[1] = _ss31AsyncThrowingCompactMapSequenceV8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return v9(a1);
}

_QWORD *AsyncThrowingStream.init<>(unfolding:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *result;
  _QWORD v15[2];

  type metadata accessor for Optional();
  swift_getFunctionTypeMetadata0();
  v8 = type metadata accessor for Optional();
  type metadata accessor for _AsyncStreamCriticalStorage(0, v8, v9, v10);
  v15[0] = a1;
  v15[1] = a2;
  v11 = static _AsyncStreamCriticalStorage.create(_:)((uint64_t)v15);
  swift_release();
  v12 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  type metadata accessor for AsyncThrowingStream._Context(0, a3, v12, MEMORY[0x1E0DEDB38]);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a3;
  *(_QWORD *)(v13 + 24) = v11;
  result = (_QWORD *)swift_allocObject();
  result[2] = 0;
  result[3] = &async function pointer to partial apply for closure #1 in AsyncThrowingStream.init<>(unfolding:);
  result[4] = v13;
  *a4 = result;
  return result;
}

uint64_t closure #1 in AsyncThrowingStream.init<>(unfolding:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch(closure #1 in AsyncThrowingStream.init<>(unfolding:), 0, 0);
}

uint64_t closure #1 in AsyncThrowingStream.init<>(unfolding:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = v0[3];
  v1 = v0[4];
  v3 = swift_task_alloc(32);
  v0[6] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = swift_task_alloc(32);
  v0[7] = v4;
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = v2;
  v5 = (_QWORD *)swift_task_alloc(dword_1EE06A2F4);
  v0[8] = v5;
  type metadata accessor for Optional();
  *v5 = v0;
  v5[1] = closure #1 in AsyncThrowingStream.init<>(unfolding:);
  v6 = v0[2];
  v5[4] = v3;
  v5[5] = partial apply for closure #2 in closure #1 in AsyncThrowingStream.init<>(unfolding:);
  v5[2] = v6;
  v5[3] = &async function pointer to partial apply for closure #1 in closure #1 in AsyncThrowingStream.init<>(unfolding:);
  v5[6] = v4;
  v5[7] = 0;
  v5[8] = 0;
  return swift_task_switch(withTaskCancellationHandler<A>(operation:onCancel:isolation:), 0, 0);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *(_QWORD *)(*v1 + 64);
  v3 = *v1;
  *(_QWORD *)(v3 + 72) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(closure #1 in AsyncThrowingStream.init<>(unfolding:), 0, 0);
  v5 = *(_QWORD *)(v3 + 48);
  swift_task_dealloc(*(_QWORD *)(v3 + 56));
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD **)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  swift_task_dealloc(v2);
  *v3 = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in AsyncThrowingStream.init<>(unfolding:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  v4 = type metadata accessor for Optional();
  v3[9] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[10] = v5;
  v3[11] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(closure #1 in closure #1 in AsyncThrowingStream.init<>(unfolding:), 0, 0);
}

uint64_t closure #1 in closure #1 in AsyncThrowingStream.init<>(unfolding:)()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  _QWORD *v3;
  void (*v5)(_QWORD, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t (*v7)(_QWORD);

  _AsyncStreamCriticalStorage.value.getter(v0 + 16);
  v1 = *(int **)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v0 + 96) = v1;
  *(_QWORD *)(v0 + 104) = v2;
  if (v1)
  {
    v7 = (uint64_t (*)(_QWORD))((char *)v1 + *v1);
    v3 = (_QWORD *)swift_task_alloc(v1[1]);
    *(_QWORD *)(v0 + 112) = v3;
    *v3 = v0;
    v3[1] = closure #1 in closure #1 in AsyncThrowingStream.init<>(unfolding:);
    return v7(*(_QWORD *)(v0 + 88));
  }
  else
  {
    v5 = *(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 64) - 8) + 56);
    v5(*(_QWORD *)(v0 + 88), 1, 1);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
    *(_QWORD *)(v0 + 40) = 0;
    *(_QWORD *)(v0 + 32) = 0;
    specialized _AsyncStreamCriticalStorage.value.setter(v0 + 32);
    v6 = *(_QWORD *)(v0 + 88);
    ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))v5)(*(_QWORD *)(v0 + 48), 1, 1, *(_QWORD *)(v0 + 64));
    swift_task_dealloc(v6);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = closure #1 in closure #1 in AsyncThrowingStream.init<>(unfolding:);
  else
    v3 = closure #1 in closure #1 in AsyncThrowingStream.init<>(unfolding:);
  return swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 64);
  _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe(*(_QWORD *)(v0 + 96));
  v3 = *(_QWORD *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
    *(_QWORD *)(v0 + 32) = 0;
    *(_QWORD *)(v0 + 40) = 0;
    specialized _AsyncStreamCriticalStorage.value.setter(v0 + 32);
    v4 = 1;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v3 + 32))(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 64));
    v4 = 0;
  }
  v5 = *(_QWORD *)(v0 + 88);
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v3 + 56))(*(_QWORD *)(v0 + 48), v4, 1, *(_QWORD *)(v0 + 64));
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 88);
  _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AsyncThrowingStream.Iterator.next()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = *(_QWORD *)(a2 + 24);
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[7] = swift_task_alloc(v6);
  v3[8] = swift_task_alloc(v6);
  return swift_task_switch(AsyncThrowingStream.Iterator.next(), 0, 0);
}

uint64_t AsyncThrowingStream.Iterator.next()()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  _QWORD *v4;
  int *v6;

  v1 = **(_QWORD **)(v0 + 32);
  v2 = *(int **)(v1 + 24);
  *(_QWORD *)(v0 + 72) = *(_QWORD *)(v1 + 32);
  v3 = v2[1];
  v6 = (int *)((char *)v2 + *v2);
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc(v3);
  *(_QWORD *)(v0 + 80) = v4;
  *v4 = v0;
  v4[1] = AsyncThrowingStream.Iterator.next();
  return ((uint64_t (*)(_QWORD, _QWORD))v6)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 64));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 80);
  v4 = *v1;
  swift_task_dealloc(v3);
  swift_release();
  if (v0)
    return swift_task_switch(AsyncThrowingStream.Iterator.next(), 0, 0);
  v6 = *(_QWORD *)(v2 + 56);
  swift_task_dealloc(*(_QWORD *)(v2 + 64));
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 48) + 32);
  v4(v1, v2, v3);
  swift_allocError();
  v4(v5, v1, v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v6[3] = v5;
  v6[4] = a5;
  v6[2] = a1;
  v9 = *(_QWORD *)(a4 + 24);
  v6[5] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[6] = v10;
  v6[7] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    ObjectType = swift_getObjectType();
    v12 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(ObjectType, a3);
    v14 = v13;
  }
  else
  {
    v12 = 0;
    v14 = 0;
  }
  v6[8] = v12;
  v6[9] = v14;
  return swift_task_switch(_sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTY0_, v12, v14);
}

uint64_t _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTY0_()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  _QWORD *v4;
  int *v6;

  v1 = **(_QWORD **)(v0 + 24);
  v2 = *(int **)(v1 + 24);
  *(_QWORD *)(v0 + 80) = *(_QWORD *)(v1 + 32);
  v3 = v2[1];
  v6 = (int *)((char *)v2 + *v2);
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc(v3);
  *(_QWORD *)(v0 + 88) = v4;
  *v4 = v0;
  v4[1] = _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTQ1_;
  return ((uint64_t (*)(_QWORD, _QWORD))v6)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 56));
}

uint64_t _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTQ1_()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 88);
  v4 = *v1;
  swift_task_dealloc(v3);
  swift_release();
  if (v0)
    return swift_task_switch(_sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTY2_, *(unsigned __int8 **)(v2 + 64), *(_QWORD *)(v2 + 72));
  swift_task_dealloc(*(_QWORD *)(v2 + 56));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTY2_()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 48) + 32))(*(_QWORD *)(v0 + 32), v1, *(_QWORD *)(v0 + 40));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncThrowingStream<A, B>.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1EE06A42C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCompactMapSequence<A, B>.Iterator;
  return AsyncThrowingStream.Iterator.next()(a1, a2);
}

uint64_t _sScs8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5[2] = a4;
  v10 = *(_QWORD *)(a5 + 24);
  v5[3] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v5[4] = v11;
  v12 = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5[5] = v12;
  v13 = (_QWORD *)swift_task_alloc(dword_1EE06A434);
  v5[6] = v13;
  *v13 = v5;
  v13[1] = _ss23AsyncCompactMapSequenceV8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(a1, a2, a3, a5, v12);
}

void AsyncThrowingStream.Continuation.yield<>(with:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v9 + 24);
  v11 = type metadata accessor for Result();
  MEMORY[0x1E0C80A78](v11);
  v13 = (uint64_t *)((char *)&v15 - v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v15 - v12, a1, v11);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v16 = *v13;
    AsyncThrowingStream._Storage.finish(throwing:)((uint64_t)&v16);
    type metadata accessor for AsyncThrowingStream.Continuation.YieldResult(0, v5, v10, MEMORY[0x1E0DEDB38]);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v6 + 32))(v8, v13, v5);
    AsyncThrowingStream._Storage.yield(_:)((uint64_t)v8, a3);
  }
}

void AsyncThrowingStream.Continuation.yield<>()(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  AsyncThrowingStream._Storage.yield(_:)(a1, a2);
}

uint64_t static AsyncThrowingStream.makeStream<>(of:throwing:bufferingPolicy:)(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v7;
  char v8;
  uint64_t result;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v7 = *a4;
  v8 = *((_BYTE *)a4 + 8);
  v13 = 0;
  v10 = v7;
  v11 = v8;
  result = AsyncThrowingStream.init<>(_:bufferingPolicy:_:)((uint64_t)&v10, (void (*)(uint64_t *))partial apply for closure #1 in static AsyncStream.makeStream(of:bufferingPolicy:), a5, &v12);
  *a1 = v12;
  if (v13)
  {
    *a2 = v13;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void _DequeBuffer.deinit()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v0[3];
  v1 = v0[4];
  if (__OFADD__(v1, v2))
  {
    __break(1u);
  }
  else
  {
    v3 = v0[2];
    if (v3 >= v1 + v2)
    {
LABEL_5:
      UnsafeMutablePointer.deinitialize(count:)();
      goto LABEL_9;
    }
    v4 = v3 - v1;
    if (!__OFSUB__(v3, v1))
    {
      UnsafeMutablePointer.deinitialize(count:)();
      if (!__OFSUB__(v2, v4))
        goto LABEL_5;
LABEL_8:
      __break(1u);
LABEL_9:
      JUMPOUT(0x18D78F800);
    }
  }
  __break(1u);
  goto LABEL_8;
}

void _DequeBuffer.__deallocating_deinit()
{
  _DequeBuffer.deinit();
}

uint64_t sub_18D592A28()
{
  return swift_deallocClassInstance();
}

uint64_t _DequeBuffer.description.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  _QWORD v4[2];

  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  strcpy((char *)v4, "_DequeStorage<");
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 62;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  v2._countAndFlagsBits = _DequeBufferHeader.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  return v4[0];
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _DequeBuffer<A>()
{
  return _DequeBuffer.description.getter();
}

_QWORD *one-time initialization function for _emptyDequeStorage()
{
  _QWORD *result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DequeBuffer<()>);
  result = (_QWORD *)swift_allocObject();
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  _emptyDequeStorage = (uint64_t)result;
  return result;
}

uint64_t _DequeBufferHeader.description.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v7;

  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 0x3A746E756F63202CLL;
  v1._object = (void *)0xE900000000000020;
  String.append(_:)(v1);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", startSlot: ", 0xDuLL, 1);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("@", 1uLL, 1);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(")", 1uLL, 1);
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  return 0x7469636170616328;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _DequeBufferHeader()
{
  return _DequeBufferHeader.description.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _DequeSlot()
{
  Swift::String v0;

  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 64;
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance _DequeSlot(_QWORD *a1, _QWORD *a2)
{
  return *a1 < *a2;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance _DequeSlot(_QWORD *a1, _QWORD *a2)
{
  return *a2 >= *a1;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance _DequeSlot(_QWORD *a1, _QWORD *a2)
{
  return *a1 >= *a2;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance _DequeSlot(_QWORD *a1, _QWORD *a2)
{
  return *a2 < *a1;
}

uint64_t specialized _UnsafeWrappedBuffer.init(first:count:second:count:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (a2 < 0 || a4 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a2)
  {
    *(_QWORD *)a5 = result;
    *(_QWORD *)(a5 + 8) = a2;
    *(_QWORD *)(a5 + 16) = a3;
    *(_QWORD *)(a5 + 24) = a4;
    *(_BYTE *)(a5 + 32) = 0;
    return result;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _UnsafeWrappedBuffer.init(first:count:second:count:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v2 = UnsafeBufferPointer.init(start:count:)();
  v4 = v3;
  result = UnsafeBufferPointer.init(start:count:)();
  if (v4 <= 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *(_QWORD *)a1 = v2;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = result;
    *(_QWORD *)(a1 + 24) = v6;
    *(_BYTE *)(a1 + 32) = 0;
  }
  return result;
}

uint64_t _UnsafeMutableWrappedBuffer.init(_:_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v6;

  if (a2 > 0 || (a5 & 1) != 0)
  {
    if (a4)
      v6 = a3;
    else
      v6 = 0;
    if ((a5 & 1) != 0)
      v6 = a3;
    *(_QWORD *)a6 = result;
    *(_QWORD *)(a6 + 8) = a2;
    *(_QWORD *)(a6 + 16) = v6;
    *(_QWORD *)(a6 + 24) = a4;
    *(_BYTE *)(a6 + 32) = a5 & 1 | (a4 == 0);
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t _UnsafeMutableWrappedBuffer.init(first:count:second:count:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v2 = UnsafeMutableBufferPointer.init(start:count:)();
  v4 = v3;
  result = UnsafeMutableBufferPointer.init(start:count:)();
  if (v4 <= 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (v6)
      v7 = result;
    else
      v7 = 0;
    *(_QWORD *)a1 = v2;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v6;
    *(_BYTE *)(a1 + 32) = v6 == 0;
  }
  return result;
}

uint64_t specialized _UnsafeMutableWrappedBuffer.init(mutating:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  _BYTE v11[8];
  uint64_t v12;

  v10 = *a1;
  outlined init with take of UnsafeBufferPointer<()>?((uint64_t)&v10, (uint64_t)v11, &demangling cache variable for type metadata for UnsafePointer<()>?);
  result = outlined init with take of UnsafeBufferPointer<()>?((uint64_t)v11, (uint64_t)&v12, &demangling cache variable for type metadata for UnsafePointer<()>?);
  v5 = *((_QWORD *)&v10 + 1);
  v6 = *((unsigned __int8 *)a1 + 32);
  if (*((uint64_t *)&v10 + 1) <= 0 && v6 == 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v9 = *((_QWORD *)a1 + 2);
    v8 = *((_QWORD *)a1 + 3);
    if (!v8)
      v6 = 1;
    if (v6)
    {
      v8 = 0;
      v9 = 0;
    }
    *(_QWORD *)a2 = v12;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v9;
    *(_QWORD *)(a2 + 24) = v8;
    *(_BYTE *)(a2 + 32) = v6;
  }
  return result;
}

double _UnsafeMutableWrappedBuffer.init(mutating:)@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_BYTE *, _QWORD *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  double result;
  __int128 v14;
  _QWORD v15[5];
  uint64_t v16[2];
  char v17;
  _OWORD v18[2];
  char v19;
  _QWORD v20[3];

  v6 = MEMORY[0x18D78F77C](*a1, a1[1], a2);
  v8 = v7;
  type metadata accessor for UnsafeBufferPointer();
  v9 = type metadata accessor for Optional();
  v10 = *(void (**)(_BYTE *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v20, a1 + 2, v9);
  v10(v18, v20, v9);
  v15[2] = a2;
  v11 = type metadata accessor for UnsafeMutableBufferPointer();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in _UnsafeMutableWrappedBuffer.init(mutating:), (uint64_t)v15, MEMORY[0x1E0DEDCE8], v11, v12, (uint64_t)v16);
  _UnsafeMutableWrappedBuffer.init(_:_:)(v6, v8, v16[0], v16[1], v17, (uint64_t)v18);
  result = *(double *)v18;
  v14 = v18[1];
  *(_OWORD *)a3 = v18[0];
  *(_OWORD *)(a3 + 16) = v14;
  *(_BYTE *)(a3 + 32) = v19;
  return result;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *);
  uint64_t v28;

  v25 = a5;
  v26 = a2;
  v28 = a4;
  v27 = a1;
  v24 = a3;
  v9 = *(_QWORD *)(a3 - 8);
  v10 = ((uint64_t (*)(void))MEMORY[0x1E0C80A78])();
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 + 16);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v10);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v21 + 16))(v20, v6);
  v22 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1, v14) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v20, v14);
    v27(v18, v12);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    if (v7)
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v25, v12, v24);
    v22 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(a6, v22, 1);
}

uint64_t _UnsafeMutableWrappedBuffer.count.getter()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(_BYTE *, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _BYTE v6[24];
  _BYTE v7[8];
  uint64_t v8;
  char v9;

  type metadata accessor for UnsafeMutableBufferPointer();
  v1 = type metadata accessor for Optional();
  v2 = *(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32);
  v2(v6, v0 + 16, v1);
  v2(v7, (uint64_t)v6, v1);
  if (v9)
    v3 = 0;
  else
    v3 = v8;
  v4 = *(_QWORD *)(v0 + 8);
  result = v4 + v3;
  if (__OFADD__(v4, v3))
    __break(1u);
  return result;
}

Swift::Void __swiftcall _UnsafeMutableWrappedBuffer.deinitialize()()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t *, uint64_t, uint64_t);
  _BYTE v3[24];
  uint64_t v4;
  char v5;

  UnsafeMutableBufferPointer._deinitializeAll()();
  type metadata accessor for UnsafeMutableBufferPointer();
  v1 = type metadata accessor for Optional();
  v2 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32);
  v2((uint64_t *)v3, v0 + 16, v1);
  v2(&v4, (uint64_t)v3, v1);
  if ((v5 & 1) == 0)
    UnsafeMutableBufferPointer._deinitializeAll()();
}

Swift::Void __swiftcall UnsafeMutableBufferPointer._deinitializeAll()()
{
  uint64_t v0;

  if (v0 >= 1)
  {
    if (UnsafeBufferPointer.baseAddress.getter())
    {
      UnsafeMutablePointer.deinitialize(count:)();
    }
    else
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
}

uint64_t _UnsafeMutableWrappedBuffer.initialize<A>(fromPrefixOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(uint64_t *, uint64_t, uint64_t);
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  char *v35;
  uint64_t v36[3];
  uint64_t v37;
  uint64_t v38;
  char v39;

  v32 = a3;
  v33 = a4;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = type metadata accessor for Optional();
  v27 = *(_QWORD *)(v6 - 8);
  v28 = v6;
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v26 - v8;
  v10 = *(_QWORD *)(v5 - 8);
  v11 = MEMORY[0x1E0C80A78](v7);
  v31 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v35 = (char *)&v26 - v13;
  v34 = 0;
  v14 = 0;
  v15 = *(_QWORD *)(v4 + 8);
  v29 = v15;
  v30 = v4 + 16;
  do
  {
    if (v14 == v15)
    {
      v16 = v35;
      if ((v34 & 1) != 0)
      {
        v14 = v15;
        goto LABEL_16;
      }
      type metadata accessor for UnsafeMutableBufferPointer();
      v17 = type metadata accessor for Optional();
      v18 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32);
      v18(v36, v30, v17);
      v18(&v37, (uint64_t)v36, v17);
      if ((v39 & 1) != 0 || v38 < 1)
        return v15;
      v14 = 0;
      v34 = 1;
      v15 = v38;
    }
    else
    {
      v16 = v35;
    }
    dispatch thunk of IteratorProtocol.next()();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v5) == 1)
      goto LABEL_13;
    v19 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v19(v16, v9, v5);
    v20 = UnsafeBufferPointer.baseAddress.getter();
    if (!v20)
      goto LABEL_19;
    v21 = v16;
    v22 = v20 + *(_QWORD *)(v10 + 72) * v14;
    v23 = v31;
    v19(v31, v21, v5);
    v19((char *)v22, v23, v5);
  }
  while (!__OFADD__(v14++, 1));
  __break(1u);
LABEL_13:
  (*(void (**)(char *, uint64_t))(v27 + 8))(v9, v28);
  v15 = v14;
  if ((v34 & 1) == 0)
    return v15;
LABEL_16:
  v15 = v29 + v14;
  if (!__OFADD__(v29, v14))
    return v15;
  __break(1u);
LABEL_19:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _UnsafeMutableWrappedBuffer.initialize<A>(fromSequencePrefix:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(uint64_t *, uint64_t, uint64_t);
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t AssociatedConformanceWitness;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  void (*v40)(char *, char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t AssociatedTypeWitness;
  char *v59;
  uint64_t v60[3];
  uint64_t v61;
  uint64_t v62;
  char v63;
  _BYTE v64[32];

  v52 = a1;
  v49 = a3;
  v9 = *(_QWORD *)(a3 + 16);
  v47 = type metadata accessor for Optional();
  v46 = *(_QWORD *)(v47 - 8);
  v10 = MEMORY[0x1E0C80A78](v47);
  v57 = (char *)&v44 - v11;
  v48 = *(_QWORD *)(v9 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v56 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v55 = (char *)&v44 - v14;
  v53 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v50 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v15 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v59 = (char *)&v44 - v16;
  v17 = *(_QWORD *)(a4 - 8);
  v18 = MEMORY[0x1E0C80A78](v15);
  v51 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v44 - v20;
  type metadata accessor for UnsafeMutableBufferPointer();
  v22 = type metadata accessor for Optional();
  v23 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32);
  v24 = a4;
  v23(v60, v5 + 16, v22);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v54 = a2;
  v25(v21, (uint64_t)a2, v24);
  v23((uint64_t *)v64, (uint64_t)v60, v22);
  if (v64[16] == 1)
  {
    v26 = *(void (**)(char *, uint64_t))(v17 + 8);
    v26(v21, v24);
  }
  else
  {
    v45 = *(_QWORD *)(v5 + 8);
    v27 = dispatch thunk of Sequence.underestimatedCount.getter();
    v26 = *(void (**)(char *, uint64_t))(v17 + 8);
    v26(v21, v24);
    if (v45 < v27)
    {
      v28 = v52;
      dispatch thunk of Sequence.makeIterator()();
      v29 = AssociatedTypeWitness;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      return _UnsafeMutableWrappedBuffer.initialize<A>(fromPrefixOf:)(v28, v49, v29, AssociatedConformanceWitness);
    }
  }
  v25(v51, (uint64_t)v54, v24);
  v32 = *(_QWORD *)(v5 + 8);
  v31 = dispatch thunk of Sequence._copyContents(initializing:)();
  if (v31 != v32 || (v23(&v61, (uint64_t)v60, v22), v31 = v32, (v63 & 1) != 0))
  {
    v26(v54, v24);
LABEL_16:
    (*(void (**)(uint64_t, char *, uint64_t))(v50 + 32))(v52, v59, AssociatedTypeWitness);
    return v31;
  }
  v33 = v62;
  if (v62 < 1)
  {
    v33 = 0;
    v26(v54, v24);
LABEL_15:
    v31 = v32 + v33;
    if (!__OFADD__(v32, v33))
      goto LABEL_16;
  }
  else
  {
    v49 = v32;
    v51 = (char *)v26;
    v53 = v24;
    swift_getAssociatedConformanceWitness();
    v34 = 0;
    v35 = v48;
    v36 = v55;
    v37 = v56;
    while (1)
    {
      v38 = v57;
      dispatch thunk of IteratorProtocol.next()();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v38, 1, v9) == 1)
        break;
      v39 = v38;
      v40 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
      v40(v36, v39, v9);
      v41 = UnsafeBufferPointer.baseAddress.getter();
      if (!v41)
        goto LABEL_21;
      v42 = v41 + *(_QWORD *)(v35 + 72) * v34;
      v40(v37, v36, v9);
      v40((char *)v42, v37, v9);
      if (v33 == ++v34)
      {
        v32 = v49;
        ((void (*)(char *, uint64_t))v51)(v54, v53);
        goto LABEL_15;
      }
    }
    ((void (*)(char *, uint64_t))v51)(v54, v53);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v38, v47);
    v31 = v49 + v34;
    if (!__OFADD__(v49, v34))
      goto LABEL_16;
  }
  __break(1u);
LABEL_21:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _UnsafeMutableWrappedBuffer.initialize<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  char *v44;
  char *v45;
  void (*v46)(char *, char *, uint64_t);
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t);
  char *v62;
  char *v63;
  void (*v64)(char *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79[3];
  _QWORD v80[2];
  char v81;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v11 = type metadata accessor for PartialRangeFrom();
  v74 = *(_QWORD *)(v11 - 8);
  v75 = v11;
  MEMORY[0x1E0C80A78](v11);
  v72 = (char *)&v56 - v12;
  v73 = swift_getAssociatedTypeWitness();
  v70 = *(_QWORD *)(v73 - 8);
  MEMORY[0x1E0C80A78](v73);
  v71 = (char *)&v56 - v13;
  v64 = (void (*)(char *, uint64_t))AssociatedConformanceWitness;
  v14 = type metadata accessor for PartialRangeUpTo();
  v65 = *(_QWORD *)(v14 - 8);
  v66 = v14;
  v15 = MEMORY[0x1E0C80A78](v14);
  v63 = (char *)&v56 - v16;
  v77 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  v69 = (char *)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v62 = (char *)&v56 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v56 - v22;
  v24 = MEMORY[0x1E0C80A78](v21);
  v68 = (char *)&v56 - v25;
  v26 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v24);
  v28 = (char *)&v56 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 16);
  v78 = a1;
  v29(v28, a1, a3);
  v30 = a2;
  v31 = v4;
  v32 = _UnsafeMutableWrappedBuffer.count.getter();
  v76 = a4;
  if (v32 == dispatch thunk of Collection.count.getter())
  {
    v33 = *(void (**)(char *, uint64_t))(v26 + 8);
    v33(v28, a3);
    v34 = *(_QWORD *)(v30 + 16);
    type metadata accessor for UnsafeMutableBufferPointer();
    v35 = type metadata accessor for Optional();
    v36 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v35 - 8) + 32);
    v36(v79, v4 + 2, v35);
    v36(v80, v79, v35);
    if ((v81 & 1) != 0)
    {
      v37 = v78;
      UnsafeMutableBufferPointer._initialize<A>(from:)(v78, *v31, v31[1], v34, a3, v76);
      return ((uint64_t (*)(uint64_t, uint64_t))v33)(v37, a3);
    }
    v67 = v34;
    v61 = (void (*)(uint64_t, uint64_t))v33;
    v60 = v80[0];
    v59 = v80[1];
    v39 = v78;
    dispatch thunk of Collection.startIndex.getter();
    v40 = v4[1];
    v58 = *v4;
    v41 = v68;
    v57 = v40;
    dispatch thunk of Collection.index(_:offsetBy:)();
    v42 = v77;
    v43 = *(void (**)(char *, uint64_t))(v77 + 8);
    v44 = v23;
    v45 = v41;
    v43(v44, AssociatedTypeWitness);
    v46 = *(void (**)(char *, char *, uint64_t))(v42 + 16);
    v47 = v62;
    v46(v62, v45, AssociatedTypeWitness);
    v56 = *((_QWORD *)v64 + 1);
    if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
    {
      v64 = v43;
      v43(v47, AssociatedTypeWitness);
      v48 = v63;
      v46(v63, v45, AssociatedTypeWitness);
      v49 = v66;
      MEMORY[0x18D78FF74](MEMORY[0x1E0DEC940], v66);
      v50 = (uint64_t)v71;
      Collection.subscript.getter();
      (*(void (**)(char *, uint64_t))(v65 + 8))(v48, v49);
      v51 = v45;
      v52 = v73;
      v66 = swift_getAssociatedConformanceWitness();
      UnsafeMutableBufferPointer._initialize<A>(from:)(v50, v58, v57, v67, v52, v66);
      v70 = *(_QWORD *)(v70 + 8);
      ((void (*)(uint64_t, uint64_t))v70)(v50, v52);
      v53 = v69;
      v46(v69, v51, AssociatedTypeWitness);
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
      {
        v64(v53, AssociatedTypeWitness);
        v54 = v72;
        (*(void (**)(char *, char *, uint64_t))(v77 + 32))(v72, v51, AssociatedTypeWitness);
        v55 = v75;
        MEMORY[0x18D78FF74](MEMORY[0x1E0DEC928], v75);
        Collection.subscript.getter();
        v61(v39, a3);
        (*(void (**)(char *, uint64_t))(v74 + 8))(v54, v55);
        UnsafeMutableBufferPointer._initialize<A>(from:)(v50, v60, v59, v67, v52, v66);
        return ((uint64_t (*)(uint64_t, uint64_t))v70)(v50, v52);
      }
    }
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t UnsafeMutableBufferPointer._initialize<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;

  v26 = a6;
  v27 = a3;
  v28 = a2;
  v30 = a4;
  v8 = type metadata accessor for Optional();
  v32 = *(_QWORD *)(v8 - 8);
  v33 = v8;
  MEMORY[0x1E0C80A78](v8);
  v31 = (char *)&v26 - v9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v29 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v26 - v12;
  v14 = *(_QWORD *)(a5 - 8);
  v15 = MEMORY[0x1E0C80A78](v11);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v26 - v18;
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v21 = a1;
  v22 = a1;
  v23 = v27;
  v20((char *)&v26 - v18, v22, a5);
  if (dispatch thunk of Collection.count.getter() == v23)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v19, a5);
    v20(v17, v21, a5);
    if (dispatch thunk of Sequence._copyContents(initializing:)() == v23)
    {
      swift_getAssociatedConformanceWitness();
      v24 = v31;
      dispatch thunk of IteratorProtocol.next()();
      if ((*(unsigned int (**)(char *, uint64_t))(*(_QWORD *)(v30 - 8) + 48))(v24, 1) == 1)
      {
        (*(void (**)(char *, uint64_t))(v29 + 8))(v13, AssociatedTypeWitness);
        return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v24, v33);
      }
      (*(void (**)(char *, uint64_t))(v32 + 8))(v24, v33);
    }
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _UnsafeMutableWrappedBuffer.assign<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;

  v8 = *(_QWORD *)(a3 - 8);
  v9 = MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v17 - v12;
  v14 = *(void (**)(char *, uint64_t))(v8 + 16);
  v14((char *)&v17 - v12, a1);
  v18 = a4;
  v15 = dispatch thunk of Collection.count.getter();
  if (v15 == _UnsafeMutableWrappedBuffer.count.getter())
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, a3);
    _UnsafeMutableWrappedBuffer.deinitialize()();
    ((void (*)(char *, uint64_t, uint64_t))v14)(v11, a1, a3);
    return _UnsafeMutableWrappedBuffer.initialize<A>(from:)((uint64_t)v11, a2, a3, v18);
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t Sequence._withContiguousStorageIfAvailable_SR14663<A>(_:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  swift_getAssociatedTypeWitness();
  if (type metadata accessor for Array() == a1 && (_isBridgedVerbatimToObjectiveC<A>(_:)() & 1) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a3, 1, 1, a2);
  else
    return dispatch thunk of Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t _Deque._Storage.description.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;

  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 0x61726F74535F2E3ELL;
  v1._object = (void *)0xEA00000000006567;
  String.append(_:)(v1);
  v2._countAndFlagsBits = _DequeBufferHeader.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  return 0x3C6575716544;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _Deque<A>._Storage()
{
  return _Deque._Storage.description.getter();
}

uint64_t _Deque._Storage.init()()
{
  if (one-time initialization token for _emptyDequeStorage != -1)
    swift_once();
  swift_retain();
  return ManagedBufferPointer.init(unsafeBufferObject:)();
}

uint64_t _Deque._Storage.init(minimumCapacity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for _DequeBuffer(0, a2, a3, a4);
  static ManagedBuffer.create(minimumCapacity:makingHeaderWith:)();
  return ManagedBufferPointer.init(unsafeBufferObject:)();
}

_QWORD *closure #1 in _Deque._Storage.capacity.getter@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, char *);
  uint64_t result;
  uint64_t v19;

  v11 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(unsigned __int8 *)(*(_QWORD *)(v14 - 8) + 80);
  result = v17(v16 + ((v15 + 16) & ~v15), v13);
  if (v9)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a9, v13, a6);
  return result;
}

uint64_t closure #1 in _Deque._Storage.count.getter@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(result + 8);
  return result;
}

uint64_t _ss20ManagedBufferPointerVsRi__rlE25withUnsafeMutablePointersyqd_0_qd_0_SpyxG_Spyq_Gtqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(unint64_t, uint64_t, char *);
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;

  v11 = *(_QWORD *)(a6 - 8);
  result = MEMORY[0x1E0C80A78](a1);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = *(_QWORD *)(v19 + 64);
  v22 = v20 + v21;
  if (__OFADD__(v20, v21))
  {
    __break(1u);
    goto LABEL_7;
  }
  v23 = *(unsigned __int8 *)(*(_QWORD *)(v14 - 8) + 80) + 1;
  v24 = __CFADD__(v22, v23);
  v25 = v22 + v23;
  if (v24)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  result = v15(v13 + v20, v13 + ((v25 - 1) & -v23), (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v9)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a9, v17, a6);
  return result;
}

uint64_t _Deque._Storage.read<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  _BYTE v12[16];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v13 = a4;
  v14 = a5;
  v15 = a1;
  v16 = a2;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  return _ss20ManagedBufferPointerVsRi__rlE25withUnsafeMutablePointersyqd_0_qd_0_SpyxG_Spyq_Gtqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF(a6, (uint64_t)v12, a3, (uint64_t)&type metadata for _DequeBufferHeader, a4, v10, a5, MEMORY[0x1E0DEDB38], (uint64_t)&v17);
}

Swift::Void __swiftcall _Deque._Storage.ensureUnique()()
{
  uint64_t v0;

  v0 = type metadata accessor for ManagedBufferPointer();
  if ((MEMORY[0x18D78F878](v0) & 1) == 0)
    _Deque._Storage._makeUniqueCopy()();
}

Swift::Void __swiftcall _Deque._Storage._makeUniqueCopy()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  v4 = *(_QWORD *)(v0 + 16);
  _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in _Deque._Storage._makeUniqueCopy(), (uint64_t)&v3, v2, v4, v0, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
  swift_release();
  *v1 = v5;
}

uint64_t _Deque._UnsafeHandle.copyElements()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[12];

  type metadata accessor for _DequeBuffer(0, a3, a3, a4);
  v10[8] = a1;
  v10[9] = a2;
  static ManagedBuffer.create(minimumCapacity:makingHeaderWith:)();
  v7 = ManagedBufferPointer.init(unsafeBufferObject:)();
  v8 = v7;
  if (*(uint64_t *)(a1 + 8) >= 1)
  {
    MEMORY[0x1E0C80A78](v7);
    v10[2] = a3;
    v10[3] = a1;
    v10[4] = a2;
    _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #2 in _Deque._UnsafeHandle.copyElements(), (uint64_t)v10, v8, a3, MEMORY[0x1E0DEE9C0] + 8, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
  }
  return v8;
}

Swift::Int __swiftcall _Deque._Storage._growCapacity(to:linearly:)(Swift::Int to, Swift::Bool linearly)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  double v6;
  Swift::Int result;
  uint64_t v8;
  uint64_t v9;

  if (linearly)
  {
    _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.capacity.getter, 0, v2, (uint64_t)&type metadata for _DequeBufferHeader, v3, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v8);
    v5 = v9;
  }
  else
  {
    _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.capacity.getter, 0, v2, (uint64_t)&type metadata for _DequeBufferHeader, v3, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v8);
    v6 = ceil((double)v9 * 1.5);
    if ((~*(_QWORD *)&v6 & 0x7FF0000000000000) == 0 || v6 <= -9.22337204e18 || v6 >= 9.22337204e18)
    {
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    v5 = (uint64_t)v6;
  }
  if (v5 <= to)
    return to;
  else
    return v5;
}

Swift::Void __swiftcall _Deque._Storage.ensureUnique(minimumCapacity:linearGrowth:)(Swift::Int minimumCapacity, Swift::Bool linearGrowth)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  Swift::Int v10;

  v6 = *(_QWORD *)(v2 + 16);
  v7 = type metadata accessor for ManagedBufferPointer();
  v8 = MEMORY[0x18D78F878](v7);
  _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.capacity.getter, 0, *v3, (uint64_t)&type metadata for _DequeBufferHeader, v6, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v9);
  if (v10 < minimumCapacity || (v8 & 1) == 0)
    _Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(minimumCapacity, linearGrowth);
}

uint64_t specialized _Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  double v22;
  uint64_t v23;
  uint64_t v24[2];
  uint64_t v25;
  _BYTE v26[24];
  uint64_t v27[2];
  char v28;

  v5 = *(_QWORD *)(*v2 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (v5 < a1)
  {
    v7 = *v2;
    v8 = (uint64_t *)(*v2 + 16);
    v9 = *v8;
    if (isUniquelyReferenced_nonNull_native)
    {
      if ((a2 & 1) != 0)
      {
LABEL_8:
        if (v9 <= a1)
          v11 = a1;
        else
          v11 = v9;
        v12 = specialized _Deque._UnsafeHandle.moveElements(minimumCapacity:)(v11, v8, v7 + 40);
LABEL_31:
        *v2 = v12;
        return swift_release();
      }
      v10 = ceil((double)v9 * 1.5);
      if ((~*(_QWORD *)&v10 & 0x7FF0000000000000) != 0 && v10 > -9.22337204e18 && v10 < 9.22337204e18)
      {
        v9 = (uint64_t)v10;
        goto LABEL_8;
      }
      goto LABEL_35;
    }
    if ((a2 & 1) != 0)
    {
LABEL_27:
      if (v9 <= a1)
        v23 = a1;
      else
        v23 = v9;
      v12 = specialized _Deque._UnsafeHandle.copyElements(minimumCapacity:)(v23, v8, v7 + 40);
      goto LABEL_31;
    }
    v22 = ceil((double)v9 * 1.5);
    if ((~*(_QWORD *)&v22 & 0x7FF0000000000000) != 0 && v22 > -9.22337204e18 && v22 < 9.22337204e18)
    {
      v9 = (uint64_t)v22;
      goto LABEL_27;
    }
LABEL_35:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (isUniquelyReferenced_nonNull_native)
    goto LABEL_33;
  v13 = *v2;
  v14 = (uint64_t *)(*v2 + 16);
  v15 = *v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DequeBuffer<()>);
  v16 = swift_allocObject();
  v17 = *(_OWORD *)(v13 + 24);
  *(_QWORD *)(v16 + 16) = v15;
  v18 = (uint64_t *)(v16 + 16);
  *(_OWORD *)(v16 + 24) = v17;
  swift_getObjectType();
  _swift_getObjCClassInstanceExtents();
  if (v19 < 0)
    goto LABEL_32;
  if (v19 == 16)
    goto LABEL_17;
  _swift_getObjCClassInstanceExtents();
  if (v20 < 0)
  {
LABEL_32:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_33:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_34;
  }
  if (v20 != 40)
  {
LABEL_34:
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_35;
  }
LABEL_17:
  if ((_swift_objcClassUsesNativeSwiftReferenceCounting() & 1) == 0)
    goto LABEL_34;
  if (*(uint64_t *)(v13 + 24) >= 1)
  {
    specialized _Deque._UnsafeHandle.segments()(v14, v13 + 40, (uint64_t)v24);
    specialized _Deque._UnsafeHandle.initialize(at:from:)(*(_QWORD *)(v13 + 32), v24[0], v24[1], v18, v16 + 40, 200, (void (*)(uint64_t, uint64_t, uint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
    outlined init with take of UnsafeBufferPointer<()>?((uint64_t)&v25, (uint64_t)v26, &demangling cache variable for type metadata for UnsafeBufferPointer<()>?);
    outlined init with take of UnsafeBufferPointer<()>?((uint64_t)v26, (uint64_t)v27, &demangling cache variable for type metadata for UnsafeBufferPointer<()>?);
    if ((v28 & 1) == 0)
      specialized _Deque._UnsafeHandle.initialize(at:from:)(0, v27[0], v27[1], v18, v16 + 40, 200, (void (*)(uint64_t, uint64_t, uint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
  }
  *v2 = v16;
  return swift_release();
}

Swift::Void __swiftcall _Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(Swift::Int minimumCapacity, Swift::Bool linearGrowth)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  Swift::Int v12;
  void *v13;
  uint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;

  v4 = v2;
  v7 = *(_QWORD *)(v2 + 16);
  _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.capacity.getter, 0, *v3, (uint64_t)&type metadata for _DequeBufferHeader, v7, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v17);
  v8 = type metadata accessor for ManagedBufferPointer();
  v9 = MEMORY[0x18D78F878](v8);
  v10 = v9;
  if (v19 < minimumCapacity)
  {
    v11 = *v3;
    v12 = _Deque._Storage._growCapacity(to:linearly:)(minimumCapacity, linearGrowth);
    v17 = v7;
    v18 = MEMORY[0x1E0C80A78](v12);
    if ((v10 & 1) != 0)
      v13 = partial apply for closure #2 in _Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:);
    else
      v13 = partial apply for closure #3 in _Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:);
    v14 = v11;
    goto LABEL_8;
  }
  if ((v9 & 1) == 0)
  {
    MEMORY[0x1E0C80A78](v9);
    v17 = v7;
    v13 = partial apply for closure #1 in _Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:);
LABEL_8:
    _Deque._Storage.read<A>(_:)((uint64_t)v13, (uint64_t)&v16, v14, v7, v4, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
    v15 = v19;
    swift_release();
    *v3 = v15;
    return;
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized _Deque._UnsafeHandle.moveElements(minimumCapacity:)(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  __int128 v11[2];
  uint64_t v12[2];
  uint64_t v13;
  _BYTE v14[24];
  uint64_t v15[2];
  char v16;

  v3 = a2[1];
  if (v3 > a1)
    goto LABEL_13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DequeBuffer<()>);
  v6 = (uint64_t *)swift_allocObject();
  v6[2] = _swift_stdlib_malloc_size(v6) - 40;
  v6[3] = v3;
  v6[4] = 0;
  swift_getObjectType();
  _swift_getObjCClassInstanceExtents();
  if (v7 < 0)
    goto LABEL_12;
  if (v7 == 16)
    goto LABEL_6;
  _swift_getObjCClassInstanceExtents();
  if (v8 < 0)
  {
LABEL_12:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_13:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_14;
  }
  if (v8 != 40)
  {
LABEL_14:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_6:
  if ((_swift_objcClassUsesNativeSwiftReferenceCounting() & 1) == 0)
    goto LABEL_14;
  if (v3 > 0)
  {
    specialized _Deque._UnsafeHandle.segments()(a2, a3, (uint64_t)v11);
    specialized _UnsafeMutableWrappedBuffer.init(mutating:)(v11, (uint64_t)v12);
    v9 = specialized _Deque._UnsafeHandle.initialize(at:from:)(0, v12[0], v12[1], v6 + 2, (uint64_t)(v6 + 5), 211, (void (*)(uint64_t, uint64_t, uint64_t))specialized UnsafeMutablePointer.moveInitialize(from:count:));
    outlined init with take of UnsafeBufferPointer<()>?((uint64_t)&v13, (uint64_t)v14, &demangling cache variable for type metadata for UnsafeMutableBufferPointer<()>?);
    outlined init with take of UnsafeBufferPointer<()>?((uint64_t)v14, (uint64_t)v15, &demangling cache variable for type metadata for UnsafeMutableBufferPointer<()>?);
    if ((v16 & 1) == 0)
      specialized _Deque._UnsafeHandle.initialize(at:from:)(v9, v15[0], v15[1], v6 + 2, (uint64_t)(v6 + 5), 211, (void (*)(uint64_t, uint64_t, uint64_t))specialized UnsafeMutablePointer.moveInitialize(from:count:));
    a2[1] = 0;
  }
  return (uint64_t)v6;
}

uint64_t _Deque._UnsafeHandle.moveElements(minimumCapacity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _QWORD v12[4];
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4 > a1)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v8 = type metadata accessor for _DequeBuffer(0, a4, a3, a4);
    MEMORY[0x1E0C80A78](v8);
    v13 = v4;
    static ManagedBuffer.create(minimumCapacity:makingHeaderWith:)();
    v9 = ManagedBufferPointer.init(unsafeBufferObject:)();
    v10 = v9;
    if (v4 >= 1)
    {
      MEMORY[0x1E0C80A78](v9);
      v12[2] = a4;
      v12[3] = a2;
      v13 = a3;
      _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #2 in _Deque._UnsafeHandle.moveElements(minimumCapacity:), (uint64_t)v12, v10, a4, MEMORY[0x1E0DEE9C0] + 8, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
      *(_QWORD *)(a2 + 8) = 0;
    }
    return v10;
  }
  return result;
}

uint64_t specialized _Deque._UnsafeHandle.copyElements(minimumCapacity:)(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13[2];
  uint64_t v14;
  _BYTE v15[24];
  uint64_t v16[2];
  char v17;

  if (a2[1] > a1)
    goto LABEL_14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DequeBuffer<()>);
  v5 = (uint64_t *)swift_allocObject();
  v6 = _swift_stdlib_malloc_size(v5);
  v7 = a2[1];
  v5[2] = v6 - 40;
  v5[3] = v7;
  v5[4] = 0;
  swift_getObjectType();
  _swift_getObjCClassInstanceExtents();
  if (v8 < 0)
  {
LABEL_13:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_15;
  }
  if (v8 != 16)
  {
    _swift_getObjCClassInstanceExtents();
    if ((v9 & 0x8000000000000000) == 0)
    {
      if (v9 != 40)
        goto LABEL_15;
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_6:
  if ((_swift_objcClassUsesNativeSwiftReferenceCounting() & 1) != 0)
  {
    v10 = a2[1];
    if (v10 <= 0)
      return (uint64_t)v5;
    if (v5[3] == v10 && !v5[4])
    {
      specialized _Deque._UnsafeHandle.segments()(a2, a3, (uint64_t)v13);
      v11 = specialized _Deque._UnsafeHandle.initialize(at:from:)(0, v13[0], v13[1], v5 + 2, (uint64_t)(v5 + 5), 200, (void (*)(uint64_t, uint64_t, uint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
      outlined init with take of UnsafeBufferPointer<()>?((uint64_t)&v14, (uint64_t)v15, &demangling cache variable for type metadata for UnsafeBufferPointer<()>?);
      outlined init with take of UnsafeBufferPointer<()>?((uint64_t)v15, (uint64_t)v16, &demangling cache variable for type metadata for UnsafeBufferPointer<()>?);
      if ((v17 & 1) == 0)
        specialized _Deque._UnsafeHandle.initialize(at:from:)(v11, v16[0], v16[1], v5 + 2, (uint64_t)(v5 + 5), 200, (void (*)(uint64_t, uint64_t, uint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
      return (uint64_t)v5;
    }
    goto LABEL_14;
  }
LABEL_15:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _Deque._UnsafeHandle.copyElements(minimumCapacity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[4];
  uint64_t v12;
  uint64_t v13;

  if (*(_QWORD *)(a2 + 8) > a1)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v7 = type metadata accessor for _DequeBuffer(0, a4, a3, a4);
    MEMORY[0x1E0C80A78](v7);
    v12 = a2;
    v13 = a3;
    static ManagedBuffer.create(minimumCapacity:makingHeaderWith:)();
    v8 = ManagedBufferPointer.init(unsafeBufferObject:)();
    v9 = v8;
    if (*(uint64_t *)(a2 + 8) >= 1)
    {
      MEMORY[0x1E0C80A78](v8);
      v11[2] = a4;
      v11[3] = a2;
      v12 = a3;
      _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #2 in _Deque._UnsafeHandle.copyElements(minimumCapacity:), (uint64_t)v11, v9, a4, MEMORY[0x1E0DEE9C0] + 8, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
    }
    return v9;
  }
  return result;
}

uint64_t _Deque._UnsafeHandle.ptr(at:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if ((a1 & 0x8000000000000000) == 0 && *a2 >= a1)
    return a3 + *(_QWORD *)(*(_QWORD *)(a4 - 8) + 72) * a1;
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _Deque._UnsafeHandle.buffer(for:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;

  if (*a3 >= a2)
  {
    if (!__OFSUB__(a2, a1))
      return UnsafeBufferPointer.init(start:count:)();
    __break(1u);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _Deque._UnsafeHandle.limSlot.getter(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t specialized _Deque._UnsafeHandle.slot(after:)(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  if (*a2 <= a1)
    goto LABEL_7;
  result = a1 + 1;
  if (result >= *a2)
    return 0;
  if (a1 <= -2)
  {
LABEL_7:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

Swift::_DequeSlot __swiftcall _Deque._UnsafeHandle.slot(before:)(Swift::_DequeSlot before)
{
  uint64_t *v1;
  uint64_t v2;
  BOOL v3;
  Swift::_DequeSlot result;

  v2 = *v1;
  if (*v1 <= before.position)
    goto LABEL_10;
  if (!before.position)
  {
    if (v2 > 0)
      return (Swift::_DequeSlot)(v2 - 1);
LABEL_10:
    result.position = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v3 = __OFSUB__(before.position, 1);
  result.position = before.position - 1;
  if (v3)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (result.position < 0)
    goto LABEL_10;
  return result;
}

uint64_t specialized _Deque._UnsafeHandle.slot(_:offsetBy:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t result;
  BOOL v5;
  uint64_t v6;

  v3 = *a3;
  if (*a3 < a1)
    goto LABEL_15;
  v5 = __OFADD__(a1, a2);
  result = a1 + a2;
  if (v5)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (a2 < 0)
  {
    if ((result & 0x8000000000000000) == 0)
      return result;
    v5 = __OFADD__(result, v3);
    result += v3;
    if (v5)
      goto LABEL_14;
LABEL_10:
    if ((result & 0x8000000000000000) == 0)
      return result;
LABEL_15:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v5 = __OFSUB__(result, v3);
  v6 = result - v3;
  if (v6 < 0 != v5)
    goto LABEL_10;
  if (v5)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  result = v6;
  if (v6 < 0)
    goto LABEL_15;
  return result;
}

Swift::_DequeSlot __swiftcall _Deque._UnsafeHandle.slot(forOffset:)(Swift::Int forOffset)
{
  Swift::Int *v1;
  Swift::Int v2;
  Swift::_DequeSlot result;
  BOOL v4;
  Swift::Int v5;

  if (forOffset < 0)
    goto LABEL_9;
  v2 = *v1;
  if (*v1 < forOffset)
    goto LABEL_9;
  result.position = v1[2] + forOffset;
  v4 = __OFSUB__(result.position, v2);
  v5 = result.position - v2;
  if (v5 < 0 != v4)
  {
    if ((result.position & 0x8000000000000000) == 0)
      return result;
LABEL_9:
    result.position = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  result.position = v5;
  if (v5 < 0)
    goto LABEL_9;
  return result;
}

_QWORD *specialized _Deque._UnsafeHandle.segments()@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  char v17;

  v5 = result[2];
  v6 = *result - v5;
  if (__OFSUB__(*result, v5))
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v7 = result[1];
  v9 = v5 < 0 || *result < v5;
  if (v6 < v7)
  {
    if (!v9)
    {
      if (!__OFSUB__(v7, v6))
      {
        result = (_QWORD *)specialized _UnsafeWrappedBuffer.init(first:count:second:count:)(a2 + v5, v6, a2, v7 - v6, (uint64_t)&v14);
        v10 = v14;
        v11 = v15;
        v12 = v16;
        v13 = v17;
LABEL_15:
        *(_QWORD *)a3 = v10;
        *(_OWORD *)(a3 + 8) = v11;
        *(_QWORD *)(a3 + 24) = v12;
        *(_BYTE *)(a3 + 32) = v13;
        return result;
      }
      goto LABEL_17;
    }
LABEL_18:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_19;
  }
  if (v9)
    goto LABEL_18;
  if ((v7 & 0x8000000000000000) == 0)
  {
    v12 = 0;
    v10 = a2 + v5;
    v11 = (unint64_t)result[1];
    v13 = 1;
    goto LABEL_15;
  }
LABEL_19:
  result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _Deque._UnsafeHandle.segments()@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  char v19;

  v6 = *a1;
  result = a1[2];
  v8 = v6 - result;
  if (__OFSUB__(v6, result))
  {
    __break(1u);
  }
  else
  {
    v11 = a1[1];
    _Deque._UnsafeHandle.ptr(at:)(result, a1, a2, a3);
    if (v8 >= v11)
    {
      result = UnsafeBufferPointer.init(start:count:)();
      v13 = 0;
      v14 = 1;
      LOBYTE(v16) = 1;
      v12 = v15;
      goto LABEL_6;
    }
    result = _Deque._UnsafeHandle.ptr(at:)(0, a1, a2, a3);
    if (!__OFSUB__(a1[1], v8))
    {
      _UnsafeWrappedBuffer.init(first:count:second:count:)((uint64_t)&v16);
      v12 = v17;
      v13 = v18;
      v14 = v19;
      result = v16;
LABEL_6:
      *(_QWORD *)a4 = result;
      *(_OWORD *)(a4 + 8) = v12;
      *(_QWORD *)(a4 + 24) = v13;
      *(_BYTE *)(a4 + 32) = v14;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t _Deque._UnsafeHandle.segments(forOffsets:)@<X0>(Swift::Int a1@<X0>, Swift::Int a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  Swift::_DequeSlot v12;
  Swift::_DequeSlot v13;
  BOOL v14;
  Swift::Int v15;
  unint64_t position;
  __int128 v17;
  uint64_t v18;
  char v19;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;

  if ((a1 & 0x8000000000000000) == 0 && a3[1] >= a2)
  {
    v12.position = _Deque._UnsafeHandle.slot(forOffset:)(a1).position;
    v13.position = _Deque._UnsafeHandle.slot(forOffset:)(a2).position;
    v14 = __OFSUB__(a2, a1);
    v15 = a2 - a1;
    if (v14)
    {
      __break(1u);
    }
    else
    {
      position = v13.position;
      _Deque._UnsafeHandle.ptr(at:)(v12.position, a3, a4, a5);
      if (!v15 || v12.position < position)
      {
        result = UnsafeBufferPointer.init(start:count:)();
        v18 = 0;
        v19 = 1;
        LOBYTE(v22) = 1;
        v17 = v21;
        goto LABEL_9;
      }
      if (!__OFSUB__(*a3, v12.position))
      {
        _Deque._UnsafeHandle.ptr(at:)(0, a3, a4, a5);
        _UnsafeWrappedBuffer.init(first:count:second:count:)((uint64_t)&v22);
        v17 = v23;
        v18 = v24;
        v19 = v25;
        result = v22;
LABEL_9:
        *(_QWORD *)a6 = result;
        *(_OWORD *)(a6 + 8) = v17;
        *(_QWORD *)(a6 + 24) = v18;
        *(_BYTE *)(a6 + 32) = v19;
        return result;
      }
    }
    __break(1u);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _Deque._UnsafeHandle.availableSegments()@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v8 = specialized _Deque._UnsafeHandle.slot(_:offsetBy:)(a1[2], a1[1], a1);
  v9 = v8;
  if (a1[1] >= *a1)
  {
    _Deque._UnsafeHandle.ptr(at:)(v8, a1, a2, a3);
    result = UnsafeMutableBufferPointer.init(start:count:)();
    v13 = result;
    v15 = v19;
    v16 = 0;
    v17 = 0;
    v18 = 1;
    goto LABEL_11;
  }
  v10 = a1[2];
  if (v8 < v10)
  {
    v11 = _Deque._UnsafeHandle.buffer(for:)(v8, v10, a1);
    result = MEMORY[0x18D78F77C](v11);
    v13 = result;
    v15 = v14;
    v16 = 0;
    v17 = 0;
    v18 = 1;
LABEL_11:
    *(_QWORD *)a4 = v13;
    *(_QWORD *)(a4 + 8) = v15;
    *(_QWORD *)(a4 + 16) = v16;
    *(_QWORD *)(a4 + 24) = v17;
    *(_BYTE *)(a4 + 32) = v18;
    return result;
  }
  v20 = _Deque._UnsafeHandle.limSlot.getter(a1);
  if (v20 < v9
    || (v21 = _Deque._UnsafeHandle.buffer(for:)(v9, v20, a1),
        v22 = MEMORY[0x18D78F77C](v21),
        v15 = v23,
        v24 = a1[2],
        v24 < 0))
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v13 = v22;
    v25 = _Deque._UnsafeHandle.buffer(for:)(0, v24, a1);
    result = MEMORY[0x18D78F77C](v25);
    if (v15 > 0)
    {
      v18 = v17 == 0;
      if (v17)
        v16 = result;
      else
        v16 = 0;
      goto LABEL_11;
    }
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(char *__src, size_t __n, char *__dst)
{
  void *result;

  if ((__n & 0x8000000000000000) == 0 && (&__dst[__n] <= __src || &__src[__n] <= __dst))
    return memcpy(__dst, __src, __n);
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _Deque._UnsafeHandle.initialize(at:from:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;

  v7 = result + a3;
  if (__OFADD__(result, a3))
  {
    __break(1u);
    goto LABEL_13;
  }
  if (*a4 < v7)
    goto LABEL_13;
  if (a3 < 1)
    return result;
  if (result < 0 || *a4 < result)
    goto LABEL_13;
  if (!a2)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_13;
  }
  a7(a2, a3, a5 + result);
  result = v7;
  if (v7 < 0)
  {
LABEL_13:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t _Deque._UnsafeHandle.initialize(at:from:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t, uint64_t, uint64_t), void (*a9)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  uint64_t v14;
  uint64_t v15;

  v9 = result + a3;
  if (__OFADD__(result, a3))
  {
    __break(1u);
    goto LABEL_10;
  }
  if (*a4 < v9)
    goto LABEL_10;
  if (a3 < 1)
    return result;
  v14 = _Deque._UnsafeHandle.ptr(at:)(result, a4, a5, a6);
  v15 = a8(a2, a3, a6);
  if (!v15)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_10;
  }
  a9(v15, a3, v14, a6);
  result = v9;
  if (v9 < 0)
  {
LABEL_10:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[8 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 8 * a2);
  }
  return __src;
}

Swift::tuple_source__DequeSlot_target__DequeSlot __swiftcall _Deque._UnsafeHandle.move(from:to:count:)(Swift::_DequeSlot from, Swift::_DequeSlot to, Swift::Int count)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int position;
  uint64_t *v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  Swift::Int v13;
  Swift::tuple_source__DequeSlot_target__DequeSlot result;

  if (count < 0)
    goto LABEL_11;
  position = from.position;
  if (__OFADD__(from.position, count))
  {
    __break(1u);
    goto LABEL_10;
  }
  v8 = v3;
  if (*v3 < from.position + count)
  {
LABEL_11:
    v12 = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_12;
  }
  v9 = to.position;
  if (__OFADD__(to.position, count))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (*v3 < to.position + count)
    goto LABEL_11;
  if (count)
  {
    v10 = v5;
    v11 = v4;
    _Deque._UnsafeHandle.ptr(at:)(to.position, v3, v4, v5);
    _Deque._UnsafeHandle.ptr(at:)(position, v8, v11, v10);
    UnsafeMutablePointer.moveInitialize(from:count:)();
    position = specialized _Deque._UnsafeHandle.slot(_:offsetBy:)(position, count, v8);
    v9 = specialized _Deque._UnsafeHandle.slot(_:offsetBy:)(v9, count, v8);
  }
  v12 = position;
  v13 = v9;
LABEL_12:
  result.target.position = v13;
  result.source.position = v12;
  return result;
}

uint64_t _Deque._UnsafeHandle.uncheckedReplaceInPlace<A>(inOffsets:with:)(Swift::Int a1, Swift::Int a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[40];
  _QWORD v27[5];

  v16 = *(_QWORD *)(a7 - 8);
  MEMORY[0x1E0C80A78](a1);
  v18 = &v26[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (*(_QWORD *)(v19 + 8) < v20)
    goto LABEL_8;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v16 + 16))(v18, a3, a7);
  v21 = dispatch thunk of Collection.count.getter();
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v21 != a2 - a1)
  {
LABEL_8:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  result = (*(uint64_t (**)(_BYTE *, uint64_t))(v16 + 8))(v18, a7);
  if (a1 != a2)
  {
    _Deque._UnsafeHandle.segments(forOffsets:)(a1, a2, a4, a5, a6, (uint64_t)v27);
    _UnsafeMutableWrappedBuffer.init(mutating:)(v27, a6, (uint64_t)v26);
    v25 = type metadata accessor for _UnsafeMutableWrappedBuffer(0, a6, v23, v24);
    return _UnsafeMutableWrappedBuffer.assign<A>(from:)(a3, v25, a7, a8);
  }
  return result;
}

uint64_t specialized _Deque._UnsafeHandle.uncheckedAppend(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1[1];
  if (v1 >= *a1
    || (result = specialized _Deque._UnsafeHandle.slot(_:offsetBy:)(a1[2], v1, a1), result < 0)
    || *a1 < result)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    a1[1] = v1 + 1;
  }
  return result;
}

uint64_t _Deque._UnsafeHandle.uncheckedAppend(_:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;

  v8 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v11 + 8);
  if (v12 < *a2)
  {
    v13 = specialized _Deque._UnsafeHandle.slot(_:offsetBy:)(a2[2], v12, a2);
    v14 = _Deque._UnsafeHandle.ptr(at:)(v13, a2, a3, a4);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a4);
    result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(v14, v10, a4);
    v16 = a2[1];
    v17 = __OFADD__(v16, 1);
    v18 = v16 + 1;
    if (!v17)
    {
      a2[1] = v18;
      return result;
    }
    __break(1u);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int _Deque._UnsafeHandle.uncheckedAppend(contentsOf:)(uint64_t a1, uint64_t a2, Swift::Int *a3, uint64_t a4, uint64_t a5)
{
  Swift::Int result;
  BOOL v8;
  Swift::Int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[40];
  _QWORD v17[5];

  result = a3[1];
  v8 = __OFADD__(result, a2);
  v9 = result + a2;
  if (v8)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (*a3 < v9)
  {
LABEL_8:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_9;
  }
  if (a2 < 1)
    return result;
  a3[1] = v9;
  if (v9 < result)
  {
LABEL_9:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  _Deque._UnsafeHandle.segments(forOffsets:)(result, v9, a3, a4, a5, (uint64_t)v17);
  _UnsafeMutableWrappedBuffer.init(mutating:)(v17, a5, (uint64_t)v16);
  v17[0] = a1;
  v17[1] = a2;
  v13 = type metadata accessor for _UnsafeMutableWrappedBuffer(0, a5, v11, v12);
  v14 = type metadata accessor for UnsafeBufferPointer();
  v15 = MEMORY[0x18D78FF74](MEMORY[0x1E0DEA5E8], v14);
  return _UnsafeMutableWrappedBuffer.initialize<A>(from:)((uint64_t)v17, v13, v14, v15);
}

uint64_t _Deque._UnsafeHandle.uncheckedPrepend(_:)(uint64_t a1, Swift::_DequeSlot *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  Swift::Int position;
  uint64_t v13;
  uint64_t result;
  Swift::Int v15;
  BOOL v16;
  Swift::Int v17;
  uint64_t v18;

  v8 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v11[1] < *v11)
  {
    position = _Deque._UnsafeHandle.slot(before:)(a2[2]).position;
    v13 = _Deque._UnsafeHandle.ptr(at:)(position, a2, a3, a4);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a4);
    result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(v13, v10, a4);
    a2[2].position = position;
    v15 = a2[1].position;
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (!v16)
    {
      a2[1].position = v17;
      return result;
    }
    __break(1u);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _Deque._UnsafeHandle.mutableWrappedBuffer(between:and:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t result;
  uint64_t v13;
  char v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  char v20;

  if (*a3 >= a1 && *a3 >= a2)
  {
    _Deque._UnsafeHandle.ptr(at:)(a1, a3, a4, a5);
    if (a1 >= a2)
    {
      if (!__OFSUB__(*a3, a1))
      {
        _Deque._UnsafeHandle.ptr(at:)(0, a3, a4, a5);
        _UnsafeMutableWrappedBuffer.init(first:count:second:count:)((uint64_t)&v17);
        v16 = v18;
        v13 = v19;
        v14 = v20;
        result = v17;
        goto LABEL_8;
      }
    }
    else
    {
      if (!__OFSUB__(a2, a1))
      {
        result = UnsafeMutableBufferPointer.init(start:count:)();
        v13 = 0;
        v14 = 1;
        LOBYTE(v17) = 1;
        v16 = v15;
LABEL_8:
        *(_QWORD *)a6 = result;
        *(_OWORD *)(a6 + 8) = v16;
        *(_QWORD *)(a6 + 24) = v13;
        *(_BYTE *)(a6 + 32) = v14;
        return result;
      }
      __break(1u);
    }
    __break(1u);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _Deque._UnsafeHandle.uncheckedInsert<A>(contentsOf:count:atOffset:)(uint64_t a1, uint64_t a2, Swift::Int a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  _BYTE v27[40];

  v16 = *(_QWORD *)(a7 - 8);
  MEMORY[0x1E0C80A78](a1);
  v18 = &v27[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (*(_QWORD *)(v19 + 8) >= v20
    && ((*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a1, a7),
        dispatch thunk of Collection.count.getter() == a2))
  {
    v21 = *(void (**)(char *, uint64_t))(v16 + 8);
    v21(v18, a7);
    if (a2 < 1)
    {
      return ((uint64_t (*)(uint64_t, uint64_t))v21)(a1, a7);
    }
    else
    {
      _Deque._UnsafeHandle.openGap(ofSize:atOffset:)(a2, a3, a4, a5, a6, (uint64_t)v27);
      v24 = type metadata accessor for _UnsafeMutableWrappedBuffer(0, a6, v22, v23);
      return _UnsafeMutableWrappedBuffer.initialize<A>(from:)(a1, v24, a7, a8);
    }
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

double _Deque._UnsafeHandle.openGap(ofSize:atOffset:)@<D0>(uint64_t a1@<X0>, Swift::Int a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  Swift::Int v9;
  uint64_t v13;
  Swift::_DequeSlot v14;
  Swift::_DequeSlot v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  unint64_t v19;
  uint64_t v20;
  Swift::_DequeSlot v21;
  Swift::Int v22;
  uint64_t v23;
  uint64_t v24;
  Swift::Int v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  Swift::_DequeSlot v31;
  uint64_t v32;
  Swift::Int position;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  Swift::Int v38;
  Swift::Int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  double result;
  __int128 v45;
  _OWORD v47[2];
  char v48;

  if (a2 < 0)
    goto LABEL_64;
  v8 = a3[1];
  v9 = v8 - a2;
  if (v8 < a2)
    goto LABEL_64;
  if (__OFADD__(v8, a1))
  {
    __break(1u);
    goto LABEL_56;
  }
  if (*a3 < v8 + a1 || a1 <= 0)
    goto LABEL_64;
  v13 = a3[2];
  if (v9 <= a2)
  {
    v23 = specialized _Deque._UnsafeHandle.slot(_:offsetBy:)(v13, v8, a3);
    v24 = a3[1];
    if (!__OFADD__(v24, a1))
    {
      v13 = v23;
      v25 = specialized _Deque._UnsafeHandle.slot(_:offsetBy:)(a3[2], v24 + a1, a3);
      v15.position = _Deque._UnsafeHandle.slot(forOffset:)(a2).position;
      v26 = specialized _Deque._UnsafeHandle.slot(_:offsetBy:)(v15.position, a1, a3);
      v14.position = v26;
      v27 = *a3;
      v28 = v13;
      if (v13 || (v28 = *a3, (v27 & 0x8000000000000000) == 0))
      {
        v29 = v25;
        if (v25 || (v29 = *a3, (v27 & 0x8000000000000000) == 0))
        {
          if (v28 >= v15.position)
          {
            if (v29 < v26)
            {
              v34 = _Deque._UnsafeHandle.limSlot.getter(a3) - a1;
              if (v34 < 0)
                goto LABEL_64;
              _Deque._UnsafeHandle.move(from:to:count:)((Swift::_DequeSlot)v34, 0, v25);
              v35 = __OFSUB__(v9, v25);
              v9 -= v25;
              if (v35)
              {
                __break(1u);
LABEL_37:
                if (v13 < v14.position)
                  goto LABEL_64;
                if (__OFSUB__(v17, v13))
                  goto LABEL_61;
                _Deque._UnsafeHandle.move(from:to:count:)((Swift::_DequeSlot)v13, v14, v17 - v13);
                v32 = _Deque._UnsafeHandle.limSlot.getter(a3) - a1;
                if (v32 < 0)
                  goto LABEL_64;
                v31.position = 0;
                position = v15.position;
                goto LABEL_42;
              }
            }
          }
          else if (v29 >= v26)
          {
            v40 = v13;
            if (!v13)
            {
              v40 = *a3;
              if (v27 < 0)
                goto LABEL_64;
            }
            if (v40 >= a3[2])
              goto LABEL_64;
            _Deque._UnsafeHandle.move(from:to:count:)(0, (Swift::_DequeSlot)a1, v13);
            v9 = *a3 - v15.position;
            if (__OFSUB__(*a3, v15.position))
            {
LABEL_63:
              __break(1u);
              goto LABEL_64;
            }
          }
          else
          {
            _Deque._UnsafeHandle.move(from:to:count:)(0, (Swift::_DequeSlot)a1, v13);
            v30 = _Deque._UnsafeHandle.limSlot.getter(a3) - a1;
            if (v30 < 0)
              goto LABEL_64;
            _Deque._UnsafeHandle.move(from:to:count:)((Swift::_DequeSlot)v30, 0, a1);
            v17 = v9 - a1;
            if (__OFSUB__(v9, a1))
              goto LABEL_62;
            v9 = v17 - v13;
            if (__OFSUB__(v17, v13))
            {
              __break(1u);
              goto LABEL_28;
            }
          }
          _Deque._UnsafeHandle.move(from:to:count:)(v15, v14, v9);
          v41 = a3[1];
          v35 = __OFADD__(v41, a1);
          v42 = v41 + a1;
          if (v35)
          {
LABEL_58:
            __break(1u);
            goto LABEL_59;
          }
          a3[1] = v42;
          if (v14.position || (v14.position = *a3, (*a3 & 0x8000000000000000) == 0))
          {
            v38 = v15.position;
            v39 = v14.position;
            goto LABEL_54;
          }
        }
      }
      while (1)
      {
LABEL_64:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
    }
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  v14.position = specialized _Deque._UnsafeHandle.slot(_:offsetBy:)(v13, -a1, a3);
  v15.position = _Deque._UnsafeHandle.slot(forOffset:)(a2).position;
  v16 = specialized _Deque._UnsafeHandle.slot(_:offsetBy:)(v15.position, -a1, a3);
  v9 = v16;
  v17 = *a3;
  v18 = v15.position;
  if (!v15.position)
  {
    v18 = *a3;
    if (v17 < 0)
      goto LABEL_64;
  }
  v19 = v16;
  if (!v16)
  {
    v19 = *a3;
    if (v17 < 0)
      goto LABEL_64;
  }
  if (v18 < v13)
  {
    if (v19 < v14.position)
    {
      if (__OFSUB__(v17, v13))
      {
LABEL_59:
        __break(1u);
        goto LABEL_60;
      }
      _Deque._UnsafeHandle.move(from:to:count:)((Swift::_DequeSlot)v13, v14, v17 - v13);
      v20 = _Deque._UnsafeHandle.limSlot.getter(a3) - a1;
      if (v20 < 0)
        goto LABEL_64;
      v21.position = 0;
      v22 = a1;
      goto LABEL_31;
    }
    goto LABEL_37;
  }
LABEL_28:
  if (v19 < v14.position)
  {
    v22 = v17 - v14.position;
    if (__OFSUB__(v17, v14.position))
    {
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
      goto LABEL_63;
    }
    v21.position = v13;
    v20 = v14.position;
LABEL_31:
    _Deque._UnsafeHandle.move(from:to:count:)(v21, (Swift::_DequeSlot)v20, v22);
    v31.position = a1;
    v32 = 0;
    position = v9;
    goto LABEL_42;
  }
  v31.position = v13;
  v32 = v14.position;
  position = a2;
LABEL_42:
  _Deque._UnsafeHandle.move(from:to:count:)(v31, (Swift::_DequeSlot)v32, position);
  a3[2] = v14.position;
  v36 = a3[1];
  v35 = __OFADD__(v36, a1);
  v37 = v36 + a1;
  if (v35)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  a3[1] = v37;
  if (!v15.position)
  {
    v15.position = *a3;
    if (*a3 < 0)
      goto LABEL_64;
  }
  v38 = v9;
  v39 = v15.position;
LABEL_54:
  _Deque._UnsafeHandle.mutableWrappedBuffer(between:and:)(v38, v39, a3, a4, a5, (uint64_t)v47);
  v43 = v48;
  result = *(double *)v47;
  v45 = v47[1];
  *(_OWORD *)a6 = v47[0];
  *(_OWORD *)(a6 + 16) = v45;
  *(_BYTE *)(a6 + 32) = v43;
  return result;
}

uint64_t specialized _Deque._UnsafeHandle.uncheckedRemoveFirst()(uint64_t *a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  if (a1[1] >= 1)
  {
    v2 = a1[2];
    if ((v2 & 0x8000000000000000) == 0 && *a1 >= v2)
    {
      result = specialized _Deque._UnsafeHandle.slot(after:)(v2, a1);
      a1[2] = result;
      v4 = a1[1];
      v5 = __OFSUB__(v4, 1);
      v6 = v4 - 1;
      if (!v5)
      {
        a1[1] = v6;
        return result;
      }
      __break(1u);
    }
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _Deque._UnsafeHandle.uncheckedRemoveFirst()(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  if (a1[1] > 0)
  {
    _Deque._UnsafeHandle.ptr(at:)(a1[2], a1, a2, a3);
    UnsafeMutablePointer.move()();
    result = specialized _Deque._UnsafeHandle.slot(after:)(a1[2], a1);
    a1[2] = result;
    v5 = a1[1];
    v6 = __OFSUB__(v5, 1);
    v7 = v5 - 1;
    if (!v6)
    {
      a1[1] = v7;
      return result;
    }
    __break(1u);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _Deque._UnsafeHandle.uncheckedRemoveLast()(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  Swift::_DequeSlot v7;
  uint64_t result;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v3 = a1[1];
  if (v3 > 0)
  {
    v7.position = _Deque._UnsafeHandle.slot(forOffset:)(v3 - 1).position;
    _Deque._UnsafeHandle.ptr(at:)(v7.position, a1, a2, a3);
    result = UnsafeMutablePointer.move()();
    v9 = a1[1];
    v10 = __OFSUB__(v9, 1);
    v11 = v9 - 1;
    if (!v10)
    {
      a1[1] = v11;
      return result;
    }
    __break(1u);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Void __swiftcall _Deque._UnsafeHandle.uncheckedRemoveFirst(_:)(Swift::Int a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _BYTE v12[40];
  _QWORD v13[5];

  if (v1[1] < a1)
    goto LABEL_7;
  if (a1 < 1)
    return;
  v5 = v3;
  v6 = v1;
  _Deque._UnsafeHandle.segments(forOffsets:)(0, a1, v1, v2, v3, (uint64_t)v13);
  _UnsafeMutableWrappedBuffer.init(mutating:)(v13, v5, (uint64_t)v12);
  type metadata accessor for _UnsafeMutableWrappedBuffer(0, v5, v7, v8);
  _UnsafeMutableWrappedBuffer.deinitialize()();
  v6[2] = specialized _Deque._UnsafeHandle.slot(_:offsetBy:)(v6[2], a1, v6);
  v9 = v6[1];
  v10 = __OFSUB__(v9, a1);
  v11 = v9 - a1;
  if (v10)
  {
    __break(1u);
LABEL_7:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  v6[1] = v11;
}

Swift::Void __swiftcall _Deque._UnsafeHandle.uncheckedRemoveLast(_:)(Swift::Int a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  Swift::Int v6;
  BOOL v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  _BYTE v14[40];
  _QWORD v15[5];

  v4 = v1;
  v6 = v1[1];
  v7 = __OFSUB__(v6, a1);
  v8 = v6 - a1;
  if (v8 < 0 != v7)
    goto LABEL_8;
  if (a1 < 1)
    return;
  if (v6 < v8)
  {
LABEL_9:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  v9 = v3;
  _Deque._UnsafeHandle.segments(forOffsets:)(v8, v6, v4, v2, v3, (uint64_t)v15);
  _UnsafeMutableWrappedBuffer.init(mutating:)(v15, v9, (uint64_t)v14);
  type metadata accessor for _UnsafeMutableWrappedBuffer(0, v9, v10, v11);
  _UnsafeMutableWrappedBuffer.deinitialize()();
  v12 = v4[1];
  v7 = __OFSUB__(v12, a1);
  v13 = v12 - a1;
  if (v7)
  {
    __break(1u);
LABEL_8:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_9;
  }
  v4[1] = v13;
}

Swift::Void __swiftcall _Deque._UnsafeHandle.uncheckedRemoveAll()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[5];

  v3 = v0 + 1;
  if (v0[1] >= 1)
  {
    v4 = v2;
    _Deque._UnsafeHandle.segments()(v0, v1, v2, (uint64_t)v8);
    _UnsafeMutableWrappedBuffer.init(mutating:)(v8, v4, (uint64_t)&v7);
    type metadata accessor for _UnsafeMutableWrappedBuffer(0, v4, v5, v6);
    _UnsafeMutableWrappedBuffer.deinitialize()();
    *v3 = 0;
    v3[1] = 0;
  }
}

unint64_t _Deque._UnsafeHandle.uncheckedRemove(offsets:)(unint64_t a1, Swift::Int a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  _BYTE v12[40];
  _QWORD v13[5];

  if ((a1 & 0x8000000000000000) != 0 || a3[1] < a2)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    _Deque._UnsafeHandle.segments(forOffsets:)(a1, a2, a3, a4, a5, (uint64_t)v13);
    _UnsafeMutableWrappedBuffer.init(mutating:)(v13, a5, (uint64_t)v12);
    type metadata accessor for _UnsafeMutableWrappedBuffer(0, a5, v9, v10);
    _UnsafeMutableWrappedBuffer.deinitialize()();
    return _Deque._UnsafeHandle.closeGap(offsets:)(a1, a2, a3);
  }
  return result;
}

unint64_t _Deque._UnsafeHandle.closeGap(offsets:)(unint64_t forOffset, Swift::Int a2, uint64_t *a3)
{
  int64_t v5;
  uint64_t v6;
  Swift::_DequeSlot v7;
  Swift::_DequeSlot v8;
  uint64_t v9;
  BOOL v10;
  int64_t v11;
  unint64_t position;
  uint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  unint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  Swift::Int v26;
  Swift::Int v27;
  Swift::Int v28;
  Swift::_DequeSlot v29;
  Swift::Int v30;
  Swift::Int v31;
  BOOL v32;
  Swift::Int v33;
  Swift::_DequeSlot v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  if ((forOffset & 0x8000000000000000) != 0 || a3[1] < a2)
    goto LABEL_61;
  v5 = forOffset;
  v6 = a2 - forOffset;
  if (__OFSUB__(a2, forOffset))
  {
    __break(1u);
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  if (v6 < 1)
    return forOffset;
  v7.position = _Deque._UnsafeHandle.slot(forOffset:)(forOffset).position;
  v8.position = _Deque._UnsafeHandle.slot(forOffset:)(a2).position;
  v9 = a3[1];
  v10 = __OFSUB__(v9, a2);
  v11 = v9 - a2;
  if (v10)
    goto LABEL_54;
  position = v8.position;
  v13 = a3[2];
  if (v11 > v5)
  {
    forOffset = specialized _Deque._UnsafeHandle.slot(_:offsetBy:)(a3[2], v6, a3);
    v11 = forOffset;
    v14 = *a3;
    v15 = v7.position;
    if (v7.position || (v15 = *a3, (v14 & 0x8000000000000000) == 0))
    {
      v16 = position;
      if (position || (v16 = *a3, (v14 & 0x8000000000000000) == 0))
      {
        if (!v5)
        {
LABEL_43:
          a3[2] = v11;
          v35 = a3[1];
          v10 = __OFSUB__(v35, v6);
          v36 = v35 - v6;
          if (!v10)
            goto LABEL_51;
          __break(1u);
          goto LABEL_46;
        }
        if (v13 >= v15)
        {
          if (v16 >= forOffset)
          {
            if ((uint64_t)(position - v7.position) >= 0)
            {
              _Deque._UnsafeHandle.move(from:to:count:)(0, (Swift::_DequeSlot)(position - v7.position), v7.position);
              v29.position = a3[2];
              v30 = v5 - v7.position;
              goto LABEL_41;
            }
          }
          else
          {
            _Deque._UnsafeHandle.move(from:to:count:)(0, (Swift::_DequeSlot)v6, v7.position);
            v17 = _Deque._UnsafeHandle.limSlot.getter(a3) - v6;
            if (v17 >= 0)
            {
              v18 = v6;
              goto LABEL_31;
            }
          }
        }
        else
        {
          if (v16 >= forOffset)
          {
            v29.position = v13;
            v34.position = v11;
            v30 = v5;
LABEL_42:
            forOffset = _Deque._UnsafeHandle.move(from:to:count:)(v29, v34, v30).source.position;
            goto LABEL_43;
          }
          v17 = _Deque._UnsafeHandle.limSlot.getter(a3) - v6;
          if (v17 >= 0)
          {
            v18 = position;
LABEL_31:
            _Deque._UnsafeHandle.move(from:to:count:)((Swift::_DequeSlot)v17, 0, v18);
            v29.position = a3[2];
            v30 = v5 - position;
LABEL_41:
            v34.position = v11;
            goto LABEL_42;
          }
        }
      }
    }
    while (1)
    {
LABEL_61:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  v19 = specialized _Deque._UnsafeHandle.slot(_:offsetBy:)(a3[2], v9, a3);
  v20 = a3[1];
  if (__OFSUB__(v20, v6))
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  forOffset = _Deque._UnsafeHandle.slot(forOffset:)(v20 - v6).position;
  v21 = forOffset;
  v22 = *a3;
  v23 = v19;
  if (!v19)
  {
    v23 = *a3;
    if (v22 < 0)
      goto LABEL_61;
  }
  v24 = forOffset;
  if (!forOffset)
  {
    v24 = *a3;
    if (v22 < 0)
      goto LABEL_61;
  }
  if (!v11)
    goto LABEL_50;
  if (position >= v23)
  {
    v31 = v22 - position;
    v32 = __OFSUB__(v22, position);
    if (v24 >= v7.position)
    {
      if (v32)
      {
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
        goto LABEL_61;
      }
      v28 = _Deque._UnsafeHandle.move(from:to:count:)((Swift::_DequeSlot)position, v7, v31).target.position;
      v26 = 0;
      v27 = v19;
    }
    else
    {
      if (v32)
      {
LABEL_58:
        __break(1u);
        goto LABEL_59;
      }
      v33 = _Deque._UnsafeHandle.move(from:to:count:)((Swift::_DequeSlot)position, v7, v31).target.position;
      v26 = _Deque._UnsafeHandle.move(from:to:count:)(0, (Swift::_DequeSlot)v33, v6).source.position;
      v28 = 0;
      v27 = v21;
    }
    goto LABEL_49;
  }
  if (v24 < v7.position)
  {
    v25 = v22 - v7.position;
    if (__OFSUB__(v22, v7.position))
    {
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }
    if (v25 >= v11)
      goto LABEL_61;
    v26 = _Deque._UnsafeHandle.move(from:to:count:)((Swift::_DequeSlot)position, v7, v22 - v7.position).source.position;
    v27 = v11 - v25;
    if (__OFSUB__(v11, v25))
      goto LABEL_60;
    v28 = 0;
    goto LABEL_49;
  }
LABEL_46:
  v26 = position;
  v28 = v7.position;
  v27 = v11;
LABEL_49:
  forOffset = _Deque._UnsafeHandle.move(from:to:count:)((Swift::_DequeSlot)v26, (Swift::_DequeSlot)v28, v27).source.position;
LABEL_50:
  v37 = a3[1];
  v10 = __OFSUB__(v37, v6);
  v36 = v37 - v6;
  if (v10)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
LABEL_51:
  a3[1] = v36;
  return forOffset;
}

uint64_t _Deque<A>.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  _QWORD v21[5];
  _BYTE v22[24];
  uint64_t v23;
  uint64_t v24;

  v21[1] = a4;
  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)v21 - v11;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v13 = v7;
  dispatch thunk of Encoder.unkeyedContainer()();
  v21[2] = _Deque.makeIterator()(a2, a3);
  v21[3] = v14;
  v21[4] = v15;
  v17 = type metadata accessor for _Deque.Iterator(0, a3, v15, v16);
  _Deque.Iterator.next()(v17, (uint64_t)v12);
  v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v18(v12, 1, a3) != 1)
  {
    v21[0] = *(_QWORD *)(v13 + 32);
    do
    {
      ((void (*)(char *, char *, uint64_t))v21[0])(v9, v12, a3);
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v22, v23);
      v19 = v24;
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v9, a3);
      if (v19)
        break;
      v24 = 0;
      _Deque.Iterator.next()(v17, (uint64_t)v12);
    }
    while (v18(v12, 1, a3) != 1);
  }
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
}

uint64_t _Deque.makeIterator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = swift_retain();
  v6 = specialized _Deque.Iterator.init(_base:)(v3, a2, v4, v5);
  swift_release();
  return v6;
}

uint64_t _Deque.Iterator.next()@<X0>(_BOOL8 a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = a1;
  v5 = *(_QWORD *)(v2 + 8);
  v6 = *(_QWORD *)(v2 + 16);
  if (v5 == v6)
  {
    a1 = _Deque.Iterator._swapSegment()();
    if (!a1)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 16) - 8) + 56))(a2, 1, 1);
    v5 = *(_QWORD *)(v2 + 8);
    v6 = *(_QWORD *)(v2 + 16);
  }
  if (v5 >= v6)
  {
    LODWORD(v13) = 0;
    v12 = 79;
  }
  else
  {
    if (v5 > -2)
    {
      *(_QWORD *)(v2 + 8) = v5 + 1;
      MEMORY[0x1E0C80A78](a1);
      v7 = *(_QWORD *)(v3 + 16);
      v12 = v7;
      v13 = v8;
      _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in _Deque.Iterator.next(), (uint64_t)&v11, v9, v7, v7, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a2, 0, 1, v7);
    }
    LODWORD(v13) = 0;
    v12 = 21;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <A> _Deque<A>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return _Deque<A>.encode(to:)(a1, *v3, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8));
}

_QWORD *_Deque<A>.init(from:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;

  v22 = a3;
  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v23[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = _Deque._Storage.init()();
  v9 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v3)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v23, v24);
    v10 = dispatch thunk of UnkeyedDecodingContainer.count.getter();
    if ((v13 & 1) == 0)
    {
      v14 = v10;
      v15 = type metadata accessor for _Deque(0, a2, v11, v12);
      type metadata accessor for _Deque._Storage(0, *(_QWORD *)(v15 + 16), v16, v17);
      _Deque._Storage.ensureUnique(minimumCapacity:linearGrowth:)(v14, 1);
    }
    while (1)
    {
      __swift_project_boxed_opaque_existential_1(v23, v24);
      if ((dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter() & 1) != 0)
        break;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v23, v24);
      dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
      v20 = type metadata accessor for _Deque(0, a2, v18, v19);
      _Deque.append(_:)((uint64_t)v8, v20);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a2);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    v9 = (_QWORD *)v25;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v9;
}

Swift::Void __swiftcall _Deque.reserveCapacity(_:)(Swift::Int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for _Deque._Storage(0, *(_QWORD *)(v1 + 16), v2, v3);
  _Deque._Storage.ensureUnique(minimumCapacity:linearGrowth:)(a1, 1);
}

_QWORD *protocol witness for Decodable.init(from:) in conformance <A> _Deque<A>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  _QWORD *result;

  result = _Deque<A>.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8));
  if (!v4)
    *a4 = result;
  return result;
}

Swift::Bool __swiftcall _Deque.Iterator._swapSegment()()
{
  uint64_t *v0;
  uint64_t v1;
  Swift::Bool result;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  Swift::Bool v6;

  if (v0[1] == v0[2])
  {
    v1 = *v0;
    v4 = *(_QWORD *)(((uint64_t (*)())MEMORY[0x1E0C80A78])() + 16);
    v5 = v0;
    swift_retain();
    _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in _Deque.Iterator._swapSegment(), (uint64_t)&v3, v1, v4, MEMORY[0x1E0DEAFA0], (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
    swift_release();
    return v6;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void UnsafeMutableBufferPointer._initialize(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a4)
  {
LABEL_8:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  if (a2 >= 1)
  {
    if (UnsafeBufferPointer.baseAddress.getter() && UnsafeBufferPointer.baseAddress.getter())
    {
      UnsafeMutablePointer.initialize(from:count:)();
      return;
    }
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_8;
  }
}

uint64_t ContiguousArray.init(unsafeUninitializedCapacity:initializingWith:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  Array.init(_unsafeUninitializedCapacity:initializingWith:)();
  if (!v0)
  {
    swift_bridgeObjectRetain();
    v1 = _ArrayBuffer.requestNativeBuffer()();
    swift_bridgeObjectRelease();
    if (!v1)
    {
      v2 = type metadata accessor for Array();
      MEMORY[0x18D78FF74](MEMORY[0x1E0DEAF50], v2);
      v1 = _copyCollectionToContiguousArray<A>(_:)();
    }
    swift_bridgeObjectRelease();
  }
  return v1;
}

uint64_t _Deque.withContiguousStorageIfAvailable<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  _QWORD v9[6];

  v9[2] = a4;
  v9[3] = a5;
  v9[4] = a1;
  v9[5] = a2;
  v7 = type metadata accessor for Optional();
  return _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in _Deque.withContiguousStorageIfAvailable<A>(_:), (uint64_t)v9, a3, a4, v7, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
}

uint64_t protocol witness for Sequence.makeIterator() in conformance _Deque<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = _Deque.makeIterator()(*v2, *(_QWORD *)(a1 + 16));
  v6 = v5;
  v8 = v7;
  result = swift_release();
  *a2 = v4;
  a2[1] = v6;
  a2[2] = v8;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance _Deque<A>(uint64_t a1)
{
  MEMORY[0x18D78FF74](&protocol conformance descriptor for _Deque<A>, a1);
  return Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._customContainsEquatableElement(_:) in conformance _Deque<A>()
{
  return 2;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance _Deque<A>(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = specialized _Deque._copyToContiguousArray()(*v1, *(_QWORD *)(a1 + 16));
  swift_release();
  return v2;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance _Deque<A>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = specialized _Deque._copyContents(initializing:)(a2, a3, *v4, *(_QWORD *)(a4 + 16));
  v8 = v7;
  v10 = v9;
  v12 = v11;
  swift_release();
  *a1 = v6;
  a1[1] = v8;
  a1[2] = v10;
  return v12;
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance _Deque<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return _Deque.withContiguousStorageIfAvailable<A>(_:)(a1, a2, *v4, *(_QWORD *)(a4 + 16), a3);
}

uint64_t _Deque.indices.getter(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, a1, (uint64_t)&type metadata for _DequeBufferHeader, a2, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v3);
  if ((v4 & 0x8000000000000000) == 0)
    return 0;
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _Deque.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 < 0
    || (v6 = _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, a2, (uint64_t)&type metadata for _DequeBufferHeader, a3, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v9), v11 <= a1))
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    MEMORY[0x1E0C80A78](v6);
    v9 = a3;
    v10 = a1;
    return _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in _Deque.subscript.getter, (uint64_t)&v8, a2, a3, a3, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
  }
  return result;
}

void (*_Deque.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t *v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*result)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v7 = malloc(0x38uLL);
  *a1 = v7;
  v8 = *(_QWORD *)(a3 + 16);
  v7[2] = v3;
  v7[3] = v8;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v10 = malloc(*(_QWORD *)(*(_QWORD *)(TupleTypeMetadata2 - 8) + 64));
  v7[4] = v10;
  v11 = *(_QWORD *)(v8 - 8);
  v7[5] = v11;
  v12 = malloc(*(_QWORD *)(v11 + 64));
  v7[6] = v12;
  if (a2 < 0
    || (v13 = v12,
        _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, *v3, (uint64_t)&type metadata for _DequeBufferHeader, v8, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v21), *v7 <= a2))
  {
    result = (void (*)(uint64_t))_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for _Deque._Storage(0, v8, v14, v15);
    _Deque._Storage.ensureUnique()();
    MEMORY[0x1E0C80A78](v16);
    v21 = v8;
    v22 = a2;
    _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in _Deque.subscript.modify, (uint64_t)&v20, v17, v8, TupleTypeMetadata2, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
    v18 = (char *)v10 + *(int *)(TupleTypeMetadata2 + 48);
    v7[1] = *v10;
    (*(void (**)(void *, char *, uint64_t))(v11 + 32))(v13, v18, v8);
    return _Deque.subscript.modify;
  }
  return result;
}

void _Deque.subscript.modify(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v1 = *(void **)a1;
  v2 = *(_QWORD *)a1 + 8;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v3 = *(void **)(*(_QWORD *)a1 + 48);
  v5 = *(void **)(*(_QWORD *)a1 + 32);
  v7 = **(_QWORD **)(*(_QWORD *)a1 + 16);
  v9 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v6 = v9;
  v10 = v2;
  v11 = v3;
  swift_retain();
  _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in $defer #1 <A>() in _Deque.subscript.modify, (uint64_t)&v8, v7, v9, MEMORY[0x1E0DEE9C0] + 8, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
  swift_release();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v6);
  free(v3);
  free(v5);
  free(v1);
}

uint64_t _Deque.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  if (a1 < 0
    || (_ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, a3, (uint64_t)&type metadata for _DequeBufferHeader, a4, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v10), v11 < a2))
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v8 = type metadata accessor for _Deque(0, a4, v6, v7);
    swift_retain();
    MEMORY[0x18D78FF74](&protocol conformance descriptor for _Deque<A>, v8);
    Slice.init(base:bounds:)();
    return v11;
  }
  return result;
}

_QWORD *protocol witness for BidirectionalCollection.index(before:) in conformance _Deque<A>@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (__OFSUB__(*result, 1))
    __break(1u);
  else
    *a2 = *result - 1;
  return result;
}

_QWORD *protocol witness for BidirectionalCollection.formIndex(before:) in conformance _Deque<A>(_QWORD *result)
{
  if (__OFSUB__(*result, 1))
    __break(1u);
  else
    --*result;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance _Deque<A>(_QWORD *a1, _QWORD *a2)
{
  BOOL v2;
  uint64_t result;

  v2 = __OFSUB__(*a2, *a1);
  result = *a2 - *a1;
  if (v2)
    __break(1u);
  return result;
}

void protocol witness for Collection.startIndex.getter in conformance _Deque<A>(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t protocol witness for Collection.endIndex.getter in conformance _Deque<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;

  result = _Deque.count.getter(*v2, *(_QWORD *)(a1 + 16));
  *a2 = result;
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance _Deque<A>(uint64_t **a1, uint64_t *a2, uint64_t a3))()
{
  uint64_t *v3;
  uint64_t *v7;

  v7 = (uint64_t *)malloc(0x28uLL);
  *a1 = v7;
  v7[4] = (uint64_t)_Deque.subscript.read(v7, *a2, *v3, *(_QWORD *)(a3 + 16));
  return protocol witness for Collection.subscript.read in conformance _Deque<A>;
}

void (*_Deque.subscript.read(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4))(_QWORD *a1)
{
  uint64_t v7;

  v7 = *(_QWORD *)(a4 - 8);
  *a1 = a4;
  a1[1] = v7;
  a1[2] = (uint64_t)malloc(*(_QWORD *)(v7 + 64));
  _Deque.subscript.getter(a2, a3, a4);
  return _Deque.subscript.read;
}

void _Deque.subscript.read(_QWORD *a1)
{
  void *v1;

  v1 = (void *)a1[2];
  (*(void (**)(void *, _QWORD))(a1[1] + 8))(v1, *a1);
  free(v1);
}

uint64_t protocol witness for Collection.subscript.getter in conformance _Deque<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = _Deque.subscript.getter(*a1, a1[1], *v3, *(_QWORD *)(a2 + 16));
  *a3 = result;
  a3[1] = v6;
  a3[2] = v7;
  return result;
}

uint64_t protocol witness for Collection.indices.getter in conformance _Deque<A>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;
  uint64_t v5;

  result = _Deque.indices.getter(*v2, *(_QWORD *)(a1 + 16));
  *a2 = 0;
  a2[1] = v5;
  return result;
}

uint64_t protocol witness for Collection.count.getter in conformance _Deque<A>(uint64_t a1)
{
  uint64_t *v1;

  return _Deque.count.getter(*v1, *(_QWORD *)(a1 + 16));
}

void protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance _Deque<A>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

_QWORD *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance _Deque<A>@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  if (__OFADD__(*result, a2))
    __break(1u);
  else
    *a3 = *result + a2;
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance _Deque<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  char v6;

  result = specialized _Deque.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance _Deque<A>(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized Collection._failEarlyRangeCheck(_:bounds:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x1E0DEA3C0], 714);
}

{
  return specialized Collection._failEarlyRangeCheck(_:bounds:)(a1, a2, a3, a4, MEMORY[0x1E0DEA4B0], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x1E0DEA3D0], 722);
}

_QWORD *protocol witness for Collection.index(after:) in conformance _Deque<A>@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (__OFADD__(*result, 1))
    __break(1u);
  else
    *a2 = *result + 1;
  return result;
}

_QWORD *protocol witness for Collection.formIndex(after:) in conformance _Deque<A>(_QWORD *result)
{
  if (__OFADD__(*result, 1))
    __break(1u);
  else
    ++*result;
  return result;
}

Swift::Void __swiftcall _Deque.swapAt(_:_:)(Swift::Int a1, Swift::Int a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  Swift::Int v13;
  int v14;
  Swift::Int v15;

  if (a1 < 0
    || (v6 = *v3,
        v7 = *(_QWORD *)(v2 + 16),
        _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, *v3, (uint64_t)&type metadata for _DequeBufferHeader, v7, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v13), v15 <= a1))
  {
    v14 = 0;
  }
  else
  {
    if ((a2 & 0x8000000000000000) == 0)
    {
      _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, v6, (uint64_t)&type metadata for _DequeBufferHeader, v7, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v13);
      if (v15 > a2)
      {
        type metadata accessor for _Deque._Storage(0, v7, v8, v9);
        _Deque._Storage.ensureUnique()();
        MEMORY[0x1E0C80A78](v10);
        v12[2] = v7;
        v12[3] = a1;
        v13 = a2;
        _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in _Deque.swapAt(_:_:), (uint64_t)v12, v11, v7, MEMORY[0x1E0DEE9C0] + 8, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
        return;
      }
    }
    v14 = 0;
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t _Deque.withContiguousMutableStorageIfAvailable<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[6];

  v8 = *(_QWORD *)(a3 + 16);
  type metadata accessor for _Deque._Storage(0, v8, a3, a4);
  _Deque._Storage.ensureUnique()();
  v9 = *v4;
  v12[2] = v8;
  v12[3] = a4;
  v12[4] = a1;
  v12[5] = a2;
  v10 = type metadata accessor for Optional();
  return _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in _Deque.withContiguousMutableStorageIfAvailable<A>(_:), (uint64_t)v12, v9, v8, v10, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
}

uint64_t $defer #1 <A><A1>() in closure #1 in _Deque.withContiguousMutableStorageIfAvailable<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;

  v5 = UnsafeBufferPointer.baseAddress.getter();
  result = UnsafeBufferPointer.baseAddress.getter();
  if (v5)
  {
    if (!result || v5 != result)
      goto LABEL_7;
LABEL_6:
    if (*(_QWORD *)(a1 + 8) == a3)
      return result;
    goto LABEL_7;
  }
  if (!result)
    goto LABEL_6;
LABEL_7:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _Deque._withUnsafeMutableBufferPointerIfSupported<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _Deque.withContiguousMutableStorageIfAvailable<A>(_:)(a1, a2, a3, a4);
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance _Deque<A>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  specialized _Deque.subscript.setter(a1, *a2, a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 8))(a1);
}

uint64_t (*protocol witness for MutableCollection.subscript.modify in conformance _Deque<A>(_QWORD *a1, uint64_t *a2, uint64_t a3))()
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = _Deque.subscript.modify(v6, *a2, a3);
  return protocol witness for Collection.subscript.read in conformance _Deque<A>;
}

void protocol witness for Collection.subscript.read in conformance _Deque<A>(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance _Deque<A>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  specialized _Deque.subscript.setter(*a1, a1[1], a1[2], *a2, a2[1], a3);
  return swift_release();
}

void (*protocol witness for MutableCollection.subscript.modify in conformance _Deque<A>(_QWORD *a1, uint64_t *a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t *v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[3] = v3;
  v7[4] = a3;
  v8 = *a2;
  v9 = a2[1];
  v7[5] = *a2;
  v7[6] = v9;
  *v7 = _Deque.subscript.getter(v8, v9, *v3, *(_QWORD *)(a3 + 16));
  v7[1] = v10;
  v7[2] = v11;
  return protocol witness for MutableCollection.subscript.modify in conformance _Deque<A>;
}

void protocol witness for MutableCollection.subscript.modify in conformance _Deque<A>(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a1;
  v3 = **a1;
  v4 = (*a1)[1];
  v6 = (*a1)[5];
  v5 = (*a1)[6];
  v7 = (*a1)[4];
  v8 = (*a1)[2];
  if ((a2 & 1) != 0)
  {
    swift_retain();
    specialized _Deque.subscript.setter(v3, v4, v8, v6, v5, v7);
    swift_release();
  }
  else
  {
    specialized _Deque.subscript.setter(**a1, v4, v8, v6, v5, v7);
  }
  swift_release();
  free(v2);
}

uint64_t protocol witness for MutableCollection.partition(by:) in conformance _Deque<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D78FF74](&protocol conformance descriptor for _Deque<A>, a3);
  return MutableCollection<>.partition(by:)();
}

void protocol witness for MutableCollection.swapAt(_:_:) in conformance _Deque<A>(Swift::Int *a1, Swift::Int *a2)
{
  _Deque.swapAt(_:_:)(*a1, *a2);
}

uint64_t protocol witness for MutableCollection._withUnsafeMutableBufferPointerIfSupported<A>(_:) in conformance _Deque<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _Deque._withUnsafeMutableBufferPointerIfSupported<A>(_:)(a1, a2, a4, a3);
}

uint64_t protocol witness for MutableCollection.withContiguousMutableStorageIfAvailable<A>(_:) in conformance _Deque<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _Deque.withContiguousMutableStorageIfAvailable<A>(_:)(a1, a2, a4, a3);
}

unint64_t closure #1 in _Deque.replaceSubrange<A>(_:with:)(uint64_t *a1, uint64_t a2, uint64_t a3, Swift::Int a4, Swift::Int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  Swift::Int v33;
  Swift::Int v34;
  uint64_t v35;
  uint64_t *v36;
  unint64_t result;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  Swift::Int v43;
  BOOL v44;
  Swift::Int v45;
  uint64_t v46;
  Swift::Int v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  Swift::Int v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  Swift::Int v63;
  uint64_t v64;

  v56 = a8;
  v57 = a1;
  v63 = a5;
  v64 = a7;
  v62 = a6;
  v47 = a4;
  v58 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v16 = type metadata accessor for PartialRangeFrom();
  v52 = *(_QWORD *)(v16 - 8);
  v53 = v16;
  MEMORY[0x1E0C80A78](v16);
  v51 = (char *)&v46 - v17;
  v60 = a12;
  v61 = a13;
  v59 = swift_getAssociatedTypeWitness();
  v54 = *(_QWORD *)(v59 - 8);
  v18 = MEMORY[0x1E0C80A78](v59);
  v20 = (char *)&v46 - v19;
  v21 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v22 = MEMORY[0x1E0C80A78](v18);
  v50 = (char *)&v46 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v46 - v24;
  v26 = type metadata accessor for PartialRangeUpTo();
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26);
  v29 = (char *)&v46 - v28;
  v55 = a3;
  if (v63 < a3)
    goto LABEL_15;
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  v30(v25, v64, AssociatedTypeWitness);
  v49 = *(_QWORD *)(AssociatedConformanceWitness + 8);
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    goto LABEL_15;
  v48 = *(void (**)(char *, uint64_t))(v21 + 8);
  v48(v25, AssociatedTypeWitness);
  v30(v29, v64, AssociatedTypeWitness);
  MEMORY[0x18D78FF74](MEMORY[0x1E0DEC940], v26);
  Collection.subscript.getter();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v26);
  v31 = v59;
  v32 = swift_getAssociatedConformanceWitness();
  v33 = v55;
  v34 = v63;
  v36 = v57;
  v35 = v58;
  v55 = a11;
  _Deque._UnsafeHandle.uncheckedReplaceInPlace<A>(inOffsets:with:)(v33, v63, (uint64_t)v20, v57, v58, a11, v31, v32);
  result = (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v20, v31);
  v38 = v56;
  if (v56 < 0)
  {
    v43 = v47 - v34;
    if (v47 >= v34)
    {
      if (__OFSUB__(v47, v34))
      {
        __break(1u);
      }
      else
      {
        v44 = __OFADD__(a9, v43);
        v45 = a9 + v43;
        if (!v44)
        {
          if (v45 != a10)
          {
LABEL_16:
            result = _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            return result;
          }
          return _Deque._UnsafeHandle.uncheckedRemove(offsets:)(v34, v47, v36, v35, v55);
        }
      }
      __break(1u);
    }
LABEL_15:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_16;
  }
  if (v56)
  {
    v54 = v32;
    v39 = v50;
    v40 = v64;
    v30(v50, v64, AssociatedTypeWitness);
    if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
    {
      v48(v39, AssociatedTypeWitness);
      v41 = v51;
      v30(v51, v40, AssociatedTypeWitness);
      v42 = v53;
      MEMORY[0x18D78FF74](MEMORY[0x1E0DEC928], v53);
      Collection.subscript.getter();
      (*(void (**)(char *, uint64_t))(v52 + 8))(v41, v42);
      return _Deque._UnsafeHandle.uncheckedInsert<A>(contentsOf:count:atOffset:)((uint64_t)v20, v38, v34, v36, v35, v55, v59, v54);
    }
    goto LABEL_15;
  }
  return result;
}

Swift::Int _Deque.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  Swift::Int result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  Swift::Int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  unsigned int (*v43)(char *, uint64_t, uint64_t);
  uint64_t *AssociatedConformanceWitness;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t AssociatedTypeWitness;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;

  v5 = v4;
  v9 = *(_QWORD *)(a2 + 16);
  v10 = type metadata accessor for Optional();
  v40 = *(_QWORD *)(v10 - 8);
  v41 = v10;
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v38 - v12;
  v48 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v39 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v17 = (char *)&v38 - v16;
  v50 = v9;
  v51 = a3;
  v52 = a4;
  v53 = v5;
  v18 = a1;
  result = Sequence._withContiguousStorageIfAvailable_SR14663<A>(_:)(a3, MEMORY[0x1E0DEE9C0] + 8, (uint64_t)&v54);
  if (v54 == 1)
  {
    v46 = 0;
    v20 = dispatch thunk of Sequence.underestimatedCount.getter();
    v47 = a3;
    v21 = *v5;
    swift_retain();
    _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, v21, (uint64_t)&type metadata for _DequeBufferHeader, v9, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], (uint64_t)v36);
    v22 = v54;
    result = swift_release();
    v25 = __OFADD__(v22, v20);
    v26 = v22 + v20;
    if (v25)
    {
LABEL_10:
      __break(1u);
      return result;
    }
    v45 = type metadata accessor for _Deque._Storage(0, v9, v23, v24);
    _Deque._Storage.ensureUnique(minimumCapacity:linearGrowth:)(v26, 1);
    v43 = (unsigned int (*)(char *, uint64_t, uint64_t))*v5;
    v27 = (uint64_t)v43;
    AssociatedConformanceWitness = &v38;
    MEMORY[0x1E0C80A78](v28);
    v29 = v47;
    *(&v38 - 4) = v9;
    *(&v38 - 3) = v29;
    v36 = (char *)a4;
    v37 = v18;
    swift_retain();
    _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #2 in _Deque.append<A>(contentsOf:), (uint64_t)(&v38 - 6), v27, v9, AssociatedTypeWitness, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
    swift_release();
    v46 = a4;
    AssociatedConformanceWitness = (uint64_t *)swift_getAssociatedConformanceWitness();
    dispatch thunk of IteratorProtocol.next()();
    v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48);
    if (v43(v13, 1, v9) != 1)
    {
      v42 = *(void (**)(char *, char *, uint64_t))(v48 + 32);
      v30 = MEMORY[0x1E0DEE9C0] + 8;
      while (1)
      {
        v42(v15, v13, v9);
        v31 = *v5;
        swift_retain();
        _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, v31, (uint64_t)&type metadata for _DequeBufferHeader, v9, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], (uint64_t)v36);
        v32 = v54;
        swift_release();
        result = v32 + 1;
        if (__OFADD__(v32, 1))
          break;
        _Deque._Storage.ensureUnique(minimumCapacity:linearGrowth:)(result, 0);
        v33 = *v5;
        MEMORY[0x1E0C80A78](v34);
        v35 = v47;
        *(&v38 - 6) = v9;
        *(&v38 - 5) = v35;
        *(&v38 - 4) = v46;
        *(&v38 - 3) = (uint64_t)v15;
        v36 = v17;
        swift_retain();
        _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #3 in _Deque.append<A>(contentsOf:), (uint64_t)(&v38 - 8), v33, v9, v30, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
        swift_release();
        (*(void (**)(char *, uint64_t))(v48 + 8))(v15, v9);
        dispatch thunk of IteratorProtocol.next()();
        if (v43(v13, 1, v9) == 1)
          goto LABEL_7;
      }
      __break(1u);
      goto LABEL_10;
    }
LABEL_7:
    (*(void (**)(char *, uint64_t))(v40 + 8))(v13, v41);
    return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v17, AssociatedTypeWitness);
  }
  return result;
}

uint64_t _Deque.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _QWORD v15[10];

  v8 = dispatch thunk of Collection.count.getter();
  if (v8 < 1)
  {
    v14 = _Deque._Storage.init()();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
    return v14;
  }
  else
  {
    v11 = v8;
    v12 = _Deque._Storage.init(minimumCapacity:)(v8, a2, v9, v10);
    MEMORY[0x1E0C80A78](v12);
    v15[2] = a2;
    v15[3] = a3;
    v15[4] = a4;
    v15[5] = v11;
    v15[6] = a1;
    _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in _Deque.init<A>(_:), (uint64_t)v15, v12, a2, MEMORY[0x1E0DEE9C0] + 8, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
    return v12;
  }
}

uint64_t closure #1 in _Deque.init<A>(_:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  _QWORD v18[2];
  char v19;

  if (a1[2] || a3 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v13 = _Deque._UnsafeHandle.buffer(for:)(0, a3, a1);
    v14 = MEMORY[0x18D78F77C](v13);
    v16 = v15;
    v18[1] = v18;
    MEMORY[0x1E0C80A78](v14);
    result = Sequence._withContiguousStorageIfAvailable_SR14663<A>(_:)(a6, MEMORY[0x1E0DEE9C0] + 8, (uint64_t)&v19);
    if (v19 == 1)
      result = UnsafeMutableBufferPointer._initialize<A>(from:)(a4, v14, v16, a5, a6, a7);
    a1[1] = a3;
  }
  return result;
}

uint64_t closure #1 in _Deque.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[6];
  uint64_t v19;
  uint64_t v20;

  v12 = *a3;
  swift_retain();
  _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, v12, (uint64_t)&type metadata for _DequeBufferHeader, a4, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v19);
  result = swift_release();
  if (__OFADD__(v20, a2))
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for _Deque._Storage(0, a4, v14, v15);
    _Deque._Storage.ensureUnique(minimumCapacity:linearGrowth:)(v20 + a2, 0);
    v16 = *a3;
    MEMORY[0x1E0C80A78](v17);
    v18[2] = a4;
    v18[3] = a5;
    v18[4] = a6;
    v18[5] = a1;
    v19 = a2;
    swift_retain();
    _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in closure #1 in _Deque.append<A>(contentsOf:), (uint64_t)v18, v16, a4, MEMORY[0x1E0DEE9C0] + 8, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
    return swift_release();
  }
  return result;
}

uint64_t closure #2 in _Deque.append<A>(contentsOf:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _BYTE v26[40];

  v12 = *(_QWORD *)(a4 - 8);
  v13 = (uint64_t *)MEMORY[0x1E0C80A78](a1);
  v15 = &v26[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  _Deque._UnsafeHandle.availableSegments()(v13, v16, v17, (uint64_t)v26);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a2, a4);
  v20 = type metadata accessor for _UnsafeMutableWrappedBuffer(0, a3, v18, v19);
  result = _UnsafeMutableWrappedBuffer.initialize<A>(fromSequencePrefix:)(a6, v15, v20, a4, a5);
  v22 = *(_QWORD *)(a1 + 8);
  v23 = __OFADD__(v22, result);
  v24 = v22 + result;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(a1 + 8) = v24;
  return result;
}

uint64_t _Deque.insert(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  _QWORD v14[4];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;

  if ((a2 & 0x8000000000000000) == 0)
  {
    v6 = *v3;
    v7 = *(_QWORD *)(a3 + 16);
    swift_retain();
    _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, v6, (uint64_t)&type metadata for _DequeBufferHeader, v7, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v15);
    swift_release();
    if (v17 >= a2)
    {
      v8 = *v3;
      swift_retain();
      _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, v8, (uint64_t)&type metadata for _DequeBufferHeader, v7, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v15);
      swift_release();
      if (!__OFADD__(v17, 1))
      {
        type metadata accessor for _Deque._Storage(0, v7, v9, v10);
        _Deque._Storage.ensureUnique(minimumCapacity:linearGrowth:)(v17 + 1, 0);
        v11 = *v3;
        MEMORY[0x1E0C80A78](v12);
        v14[2] = v7;
        v14[3] = a2;
        v15 = a1;
        v16 = v3;
        swift_retain();
        _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in _Deque.insert(_:at:), (uint64_t)v14, v11, v7, MEMORY[0x1E0DEE9C0] + 8, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
        return swift_release();
      }
      __break(1u);
    }
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in _Deque.insert(_:at:)(Swift::_DequeSlot *a1, uint64_t a2, Swift::Int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[6];

  v11 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!v15)
    return _Deque._UnsafeHandle.uncheckedPrepend(_:)(a4, a1, a2, a6);
  v16 = *v12;
  swift_retain();
  _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, v16, (uint64_t)&type metadata for _DequeBufferHeader, a6, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v21);
  v17 = v22[0];
  swift_release();
  if (v17 == a3)
    return _Deque._UnsafeHandle.uncheckedAppend(_:)(a4, &a1->position, a2, a6);
  _Deque._UnsafeHandle.openGap(ofSize:atOffset:)(1, a3, &a1->position, a2, a6, (uint64_t)v22);
  if (v22[1] != 1)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_10;
  }
  v19 = UnsafeBufferPointer.baseAddress.getter();
  if (!v19)
  {
LABEL_10:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v20 = v19;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a4, a6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(v20, v14, a6);
}

uint64_t closure #1 in _Deque.insert<A>(contentsOf:at:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, Swift::Int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  MEMORY[0x1E0C80A78](a1);
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v16, v18, v19);
  return _Deque._UnsafeHandle.uncheckedInsert<A>(contentsOf:count:atOffset:)((uint64_t)v16, a4, a5, a1, a2, a6, a7, a8);
}

uint64_t _Deque.remove(at:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[4];
  uint64_t v12;
  uint64_t v13;

  if (a1 < 0
    || (v4 = *v2,
        v5 = *(_QWORD *)(a2 + 16),
        swift_retain(),
        _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, v4, (uint64_t)&type metadata for _DequeBufferHeader, v5, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v12), swift_release(), v13 <= a1))
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for _Deque._Storage(0, v5, v6, v7);
    _Deque._Storage.ensureUnique()();
    v8 = *v2;
    MEMORY[0x1E0C80A78](v9);
    v11[2] = v5;
    v11[3] = v2;
    v12 = a1;
    swift_retain();
    _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in _Deque.remove(at:), (uint64_t)v11, v8, v5, v5, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
    return swift_release();
  }
  return result;
}

uint64_t _Deque.removeSubrange(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _QWORD v12[4];
  uint64_t v13;
  uint64_t v14;

  if (a1 < 0
    || (v6 = *(_QWORD *)(a3 + 16),
        _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, *v3, (uint64_t)&type metadata for _DequeBufferHeader, v6, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v13), v14 < a2))
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for _Deque._Storage(0, v6, v7, v8);
    _Deque._Storage.ensureUnique()();
    MEMORY[0x1E0C80A78](v9);
    v12[2] = v6;
    v12[3] = a1;
    v13 = a2;
    return _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in _Deque.removeSubrange(_:), (uint64_t)v12, v10, v6, MEMORY[0x1E0DEE9C0] + 8, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
  }
  return result;
}

uint64_t _Deque._customRemoveLast()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[6];

  v11[4] = *v2;
  MEMORY[0x18D78FF74](&protocol conformance descriptor for _Deque<A>, a1);
  if ((Collection.isEmpty.getter() & 1) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 16);
    type metadata accessor for _Deque._Storage(0, v7, v5, v6);
    _Deque._Storage.ensureUnique()();
    MEMORY[0x1E0C80A78](v8);
    v11[2] = v7;
    _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in _Deque._customRemoveLast(), (uint64_t)v11, v9, v7, v7, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a2, 0, 1, v7);
  }
  return result;
}

Swift::Bool __swiftcall _Deque._customRemoveLast(_:)(Swift::Int a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Bool result;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  Swift::Int v13;

  if (a1 < 0)
  {
    LODWORD(v12) = 0;
    v11 = 798;
  }
  else
  {
    v4 = *(_QWORD *)(v1 + 16);
    _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, *v2, (uint64_t)&type metadata for _DequeBufferHeader, v4, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v11);
    if (v13 >= a1)
    {
      type metadata accessor for _Deque._Storage(0, v4, v5, v6);
      _Deque._Storage.ensureUnique()();
      MEMORY[0x1E0C80A78](v7);
      v11 = v4;
      v12 = a1;
      _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in _Deque._customRemoveLast(_:), (uint64_t)&v10, v8, v4, MEMORY[0x1E0DEE9C0] + 8, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
      return 1;
    }
    LODWORD(v12) = 0;
    v11 = 799;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Void __swiftcall _Deque.removeFirst(_:)(Swift::Int a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  Swift::Int v12;

  if (a1 < 0)
  {
    LODWORD(v11) = 0;
    v10 = 829;
  }
  else
  {
    v4 = *(_QWORD *)(v1 + 16);
    _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, *v2, (uint64_t)&type metadata for _DequeBufferHeader, v4, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v10);
    if (v12 >= a1)
    {
      type metadata accessor for _Deque._Storage(0, v4, v5, v6);
      _Deque._Storage.ensureUnique()();
      MEMORY[0x1E0C80A78](v7);
      v10 = v4;
      v11 = a1;
      _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in _Deque.removeFirst(_:), (uint64_t)&v9, v8, v4, MEMORY[0x1E0DEE9C0] + 8, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
      return;
    }
    LODWORD(v11) = 0;
    v10 = 830;
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall _Deque.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[6];

  if (keepingCapacity)
  {
    v5 = *(_QWORD *)(v1 + 16);
    type metadata accessor for _Deque._Storage(0, v5, v2, v3);
    _Deque._Storage.ensureUnique()();
    MEMORY[0x1E0C80A78](v6);
    v8[2] = v5;
    _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in _Deque.removeAll(keepingCapacity:), (uint64_t)v8, v7, v5, MEMORY[0x1E0DEE9C0] + 8, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
  }
  else
  {
    swift_release();
    *v4 = _Deque._Storage.init()();
  }
}

uint64_t protocol witness for RangeReplaceableCollection.init() in conformance _Deque<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = _Deque.init()(*(_QWORD *)(a1 + 16));
  *a2 = result;
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.replaceSubrange<A>(_:with:) in conformance _Deque<A>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  specialized _Deque.replaceSubrange<A>(_:with:)(*a1, a1[1], a2, a5, a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a2, a3);
}

uint64_t protocol witness for RangeReplaceableCollection.init(repeating:count:) in conformance _Deque<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v7 = *(_QWORD *)(a3 + 16);
  v8 = specialized _Deque.init(repeating:count:)(a1, a2, v7, a4);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
  *a5 = v8;
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.init<A>(_:) in conformance _Deque<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v8;
  uint64_t result;

  v8 = specialized _Deque.init<A>(_:)(a1, *(_QWORD *)(a4 + 16), a2, a3);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  *a5 = v8;
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.append(_:) in conformance _Deque<A>(uint64_t a1, uint64_t a2)
{
  _Deque.append(_:)(a1, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(a1);
}

uint64_t protocol witness for RangeReplaceableCollection.append<A>(contentsOf:) in conformance _Deque<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _Deque.append<A>(contentsOf:)(a1, a4, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
}

uint64_t protocol witness for RangeReplaceableCollection.insert(_:at:) in conformance _Deque<A>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _Deque.insert(_:at:)(a1, *a2, a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 8))(a1);
}

uint64_t protocol witness for RangeReplaceableCollection.insert<A>(contentsOf:at:) in conformance _Deque<A>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  specialized _Deque.insert<A>(contentsOf:at:)(a1, *a2, a5, a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
}

uint64_t protocol witness for RangeReplaceableCollection.remove(at:) in conformance _Deque<A>(uint64_t *a1, uint64_t a2)
{
  return _Deque.remove(at:)(*a1, a2);
}

uint64_t protocol witness for RangeReplaceableCollection.removeSubrange(_:) in conformance _Deque<A>(uint64_t *a1, uint64_t a2)
{
  return _Deque.removeSubrange(_:)(*a1, a1[1], a2);
}

uint64_t protocol witness for RangeReplaceableCollection._customRemoveLast(_:) in conformance _Deque<A>(Swift::Int a1)
{
  _Deque._customRemoveLast(_:)(a1);
  return 1;
}

uint64_t protocol witness for RangeReplaceableCollection.removeAll(where:) in conformance _Deque<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D78FF74](&protocol conformance descriptor for _Deque<A>, a3);
  return RangeReplaceableCollection<>.removeAll(where:)();
}

uint64_t _Deque.debugDescription.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  Swift::String v10;
  Swift::String v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  Swift::String v17;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t *boxed_opaque_existential_0;
  Swift::String v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;

  v4 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v23 - v8;
  v24 = 0x3C6575716544;
  v25 = 0xE600000000000000;
  v10._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 5974078;
  v11._object = (void *)0xE300000000000000;
  String.append(_:)(v11);
  v27 = v24;
  v28 = v25;
  v24 = _Deque.makeIterator()(a1, a2);
  v25 = v12;
  v26 = v13;
  v15 = type metadata accessor for _Deque.Iterator(0, a2, v13, v14);
  _Deque.Iterator.next()(v15, (uint64_t)v9);
  v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
  if (v16(v9, 1, a2) != 1)
  {
    v19 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    v19(v6, v9, a2);
    v23 = xmmword_18D5BEBE0;
    while (1)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
      v20 = swift_allocObject();
      *(_OWORD *)(v20 + 16) = v23;
      *(_QWORD *)(v20 + 56) = a2;
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v20 + 32));
      v19((char *)boxed_opaque_existential_0, v6, a2);
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, 1);
      debugPrint<A>(_:separator:terminator:to:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _Deque.Iterator.next()(v15, (uint64_t)v9);
      if (v16(v9, 1, a2) == 1)
        break;
      v19(v6, v9, a2);
      v22 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", ", 2uLL, 1);
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
    }
  }
  swift_release();
  v17._countAndFlagsBits = 10589;
  v17._object = (void *)0xE200000000000000;
  String.append(_:)(v17);
  return v27;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _Deque<A>(uint64_t a1)
{
  uint64_t *v1;

  return _Deque.debugDescription.getter(*v1, *(_QWORD *)(a1 + 16));
}

uint64_t _Deque.customMirror.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];

  v4 = type metadata accessor for Mirror.AncestorRepresentation();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[0] = a1;
  v18[1] = a1;
  v11 = *MEMORY[0x1E0DEDF98];
  v12 = type metadata accessor for Mirror.DisplayStyle();
  v13 = *(_QWORD *)(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 104))(v10, v11, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  v16 = type metadata accessor for _Deque(0, a2, v14, v15);
  MEMORY[0x18D78FF74](&protocol conformance descriptor for _Deque<A>, v16);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0DEDFE8], v4);
  swift_retain_n();
  return Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance _Deque<A>(uint64_t a1)
{
  uint64_t *v1;

  return _Deque.customMirror.getter(*v1, *(_QWORD *)(a1 + 16));
}

uint64_t _Deque.description.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  Swift::String v15;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  uint64_t *boxed_opaque_existential_0;
  Swift::String v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v4 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v21 - v8;
  v25 = 91;
  v26 = 0xE100000000000000;
  v22 = _Deque.makeIterator()(a1, a2);
  v23 = v10;
  v24 = v11;
  v13 = type metadata accessor for _Deque.Iterator(0, a2, v11, v12);
  _Deque.Iterator.next()(v13, (uint64_t)v9);
  v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
  if (v14(v9, 1, a2) != 1)
  {
    v17 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    v17(v6, v9, a2);
    v21 = xmmword_18D5BEBE0;
    while (1)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
      v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = v21;
      *(_QWORD *)(v18 + 56) = a2;
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v18 + 32));
      v17((char *)boxed_opaque_existential_0, v6, a2);
      print<A>(_:separator:terminator:to:)();
      swift_bridgeObjectRelease();
      _Deque.Iterator.next()(v13, (uint64_t)v9);
      if (v14(v9, 1, a2) == 1)
        break;
      v17(v6, v9, a2);
      v20 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", ", 2uLL, 1);
      String.append(_:)(v20);
      swift_bridgeObjectRelease();
    }
  }
  swift_release();
  v15._countAndFlagsBits = 93;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  return v25;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _Deque<A>(uint64_t a1)
{
  uint64_t *v1;

  return _Deque.description.getter(*v1, *(_QWORD *)(a1 + 16));
}

uint64_t static _Deque<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = type metadata accessor for _Deque(0, a3, a3, a4);
  MEMORY[0x18D78FF74](&protocol conformance descriptor for _Deque<A>, v4);
  return Sequence<>.elementsEqual<A>(_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <A> _Deque<A>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static _Deque<A>.== infix(_:_:)(*a1, *a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8));
}

uint64_t _Deque.init(arrayLiteral:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = a1;
  v3 = type metadata accessor for Array();
  v4 = MEMORY[0x18D78FF74](MEMORY[0x1E0DEAF50], v3);
  return _Deque.init<A>(_:)((uint64_t)&v6, a2, v3, v4);
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance _Deque<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = _Deque.init(arrayLiteral:)(a1, *(_QWORD *)(a2 + 16));
  *a3 = result;
  return result;
}

uint64_t _Deque<A>.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::UInt v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  void (*v16)(char *, char *, uint64_t);
  uint64_t v18;
  Swift::UInt v19[4];

  v5 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v19 - v9;
  _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, a2, (uint64_t)&type metadata for _DequeBufferHeader, a3, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v18);
  Hasher._combine(_:)(v19[0]);
  v19[0] = _Deque.makeIterator()(a2, a3);
  v19[1] = v11;
  v19[2] = v12;
  v14 = type metadata accessor for _Deque.Iterator(0, a3, v12, v13);
  _Deque.Iterator.next()(v14, (uint64_t)v10);
  v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v15(v10, 1, a3) != 1)
  {
    v16 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
    do
    {
      v16(v7, v10, a3);
      dispatch thunk of Hashable.hash(into:)();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, a3);
      _Deque.Iterator.next()(v14, (uint64_t)v10);
    }
    while (v15(v10, 1, a3) != 1);
  }
  return swift_release();
}

Swift::Int _Deque<A>.hashValue.getter(uint64_t a1, uint64_t a2)
{
  _BYTE v5[72];

  Hasher.init(_seed:)();
  _Deque<A>.hash(into:)((uint64_t)v5, a1, a2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <A> _Deque<A>(uint64_t a1)
{
  uint64_t *v1;

  return _Deque<A>.hashValue.getter(*v1, *(_QWORD *)(a1 + 16));
}

uint64_t protocol witness for Hashable.hash(into:) in conformance <A> _Deque<A>(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return _Deque<A>.hash(into:)(a1, *v2, *(_QWORD *)(a2 + 16));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <A> _Deque<A>(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _BYTE v5[72];

  Hasher.init(_seed:)();
  _Deque<A>.hash(into:)((uint64_t)v5, *v2, *(_QWORD *)(a2 + 16));
  return Hasher._finalize()();
}

uint64_t Clock.measure(_:)@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t AssociatedConformanceWitness;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t);
  uint64_t v24;

  v22 = a4;
  v23 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v20 - v12;
  v14 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 32);
  v21 = v4;
  v15 = v14(a2, a3);
  v16 = v24;
  v23(v15);
  if (v16)
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, AssociatedTypeWitness);
  v14(a2, a3);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  MEMORY[0x18D78F818](v11, AssociatedTypeWitness, AssociatedConformanceWitness);
  v19 = *(void (**)(char *, uint64_t))(v8 + 8);
  v19(v11, AssociatedTypeWitness);
  return ((uint64_t (*)(char *, uint64_t))v19)(v13, AssociatedTypeWitness);
}

uint64_t Clock.measure(_:)(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  _QWORD *v14;
  uint64_t (*v16)(void);

  v6[4] = a5;
  v6[5] = v5;
  v6[2] = a1;
  v6[3] = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[6] = AssociatedTypeWitness;
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6[7] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[8] = swift_task_alloc(v12);
  v6[9] = swift_task_alloc(v12);
  v13 = *(void (**)(uint64_t, uint64_t))(a5 + 32);
  v6[10] = v13;
  v13(a4, a5);
  v16 = (uint64_t (*)(void))((char *)a2 + *a2);
  v14 = (_QWORD *)swift_task_alloc(a2[1]);
  v6[11] = v14;
  *v14 = v6;
  v14[1] = Clock.measure(_:);
  return v16();
}

uint64_t Clock.measure(_:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedConformanceWitness;
  void (*v10)(uint64_t, uint64_t);

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 88);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (v0)
  {
    v6 = *(_QWORD *)(v2 + 64);
    v5 = *(_QWORD *)(v2 + 72);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 + 56) + 8))(v5, *(_QWORD *)(v2 + 48));
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 72);
    v7 = *(_QWORD *)(v2 + 56);
    v6 = *(_QWORD *)(v2 + 64);
    v8 = *(_QWORD *)(v2 + 48);
    (*(void (**)(_QWORD, _QWORD))(v2 + 80))(*(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    MEMORY[0x18D78F818](v6, v8, AssociatedConformanceWitness);
    v10 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v10(v6, v8);
    v10(v5, v8);
  }
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ContinuousClock.Instant.CodingKeys()
{
  return 1;
}

void protocol witness for Hashable.hash(into:) in conformance ContinuousClock.Instant.CodingKeys()
{
  Hasher._combine(_:)(0);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ContinuousClock.Instant.CodingKeys()
{
  return 0x65756C61765FLL;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance ContinuousClock.Instant.CodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance ContinuousClock.Instant.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ContinuousClock.Instant.CodingKeys()
{
  lazy protocol witness table accessor for type ContinuousClock.Instant.CodingKeys and conformance ContinuousClock.Instant.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ContinuousClock.Instant.CodingKeys()
{
  lazy protocol witness table accessor for type ContinuousClock.Instant.CodingKeys and conformance ContinuousClock.Instant.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t ContinuousClock.Instant.encode(to:)(_QWORD *a1)
{
  return ContinuousClock.Instant.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<ContinuousClock.Instant.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type ContinuousClock.Instant.CodingKeys and conformance ContinuousClock.Instant.CodingKeys);
}

uint64_t ContinuousClock.Instant.init(from:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return ContinuousClock.Instant.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<ContinuousClock.Instant.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type ContinuousClock.Instant.CodingKeys and conformance ContinuousClock.Instant.CodingKeys, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ContinuousClock.Instant@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return ContinuousClock.Instant.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ContinuousClock.Instant(_QWORD *a1)
{
  return ContinuousClock.Instant.encode(to:)(a1);
}

uint64_t ContinuousClock.now.getter@<X0>(char *a1@<X3>, uint64_t *a2@<X8>)
{
  return ContinuousClock.now.getter((const char *)1, a1, a2);
}

uint64_t static ContinuousClock.now.getter@<X0>(char *a1@<X3>, uint64_t *a2@<X8>)
{
  return ContinuousClock.now.getter((const char *)1, a1, a2);
}

uint64_t ContinuousClock.minimumResolution.getter(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  return ContinuousClock.minimumResolution.getter((const char *)1, a2, a3, a4);
}

uint64_t ContinuousClock.sleep(until:tolerance:)(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;

  *(_BYTE *)(v4 + 56) = a4;
  *(_QWORD *)(v4 + 16) = a2;
  *(_QWORD *)(v4 + 24) = a3;
  *(_OWORD *)(v4 + 32) = *a1;
  return swift_task_switch(ContinuousClock.sleep(until:tolerance:), 0, 0);
}

uint64_t ContinuousClock.sleep(until:tolerance:)()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v1 = *(_BYTE *)(v0 + 56);
  v2 = Duration.components.getter();
  v4 = v3 / 1000000000;
  v5 = swift_task_alloc(dword_1EE06A45C);
  *(_QWORD *)(v0 + 48) = v5;
  *(_QWORD *)v5 = v0;
  *(_QWORD *)(v5 + 8) = ContinuousClock.sleep(until:tolerance:);
  v6 = *(_OWORD *)(v0 + 16);
  *(_BYTE *)(v5 + 145) = 0;
  *(_BYTE *)(v5 + 144) = v1 & 1;
  *(_OWORD *)(v5 + 96) = v6;
  *(_QWORD *)(v5 + 80) = v2;
  *(_QWORD *)(v5 + 88) = v4;
  return swift_task_switch(static Task<>._sleep(until:_:tolerance:clock:), 0, 0);
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 48));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t static Task<>._sleep(until:_:tolerance:clock:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  uint64_t v6;

  *(_BYTE *)(v6 + 145) = a6;
  *(_BYTE *)(v6 + 144) = a5;
  *(_QWORD *)(v6 + 96) = a3;
  *(_QWORD *)(v6 + 104) = a4;
  *(_QWORD *)(v6 + 80) = a1;
  *(_QWORD *)(v6 + 88) = a2;
  return swift_task_switch(static Task<>._sleep(until:_:tolerance:clock:), 0, 0);
}

uint64_t static Task<>._sleep(until:_:tolerance:clock:)()
{
  uint64_t v0;
  unint64_t *v1;
  uint64_t v2;

  v1 = (unint64_t *)swift_slowAlloc();
  *(_QWORD *)(v0 + 112) = v1;
  atomic_store(0, v1);
  v2 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 120) = v2;
  *(_QWORD *)(v2 + 16) = v1;
  return swift_task_switch(static Task<>._sleep(until:_:tolerance:clock:), 0, 0);
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 128) = swift_task_addCancellationHandler((uint64_t)partial apply for closure #2 in static Task<>.sleep(nanoseconds:), *(_QWORD *)(v0 + 120));
  return swift_task_switch(static Task<>._sleep(until:_:tolerance:clock:), 0, 0);
}

{
  uint64_t v0;
  unint64_t *v1;
  char v2;
  swift *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v16;

  v1 = *(unint64_t **)(v0 + 112);
  v2 = *(_BYTE *)(v0 + 144);
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = static Task<>._sleep(until:_:tolerance:clock:);
  v3 = swift_continuation_init((_QWORD *)(v0 + 16), 1uLL);
  v4 = atomic_load(v1);
  v5 = v4 & 3;
  if ((v4 & 3) != 0)
    goto LABEL_2;
  if (v4 > 3)
    goto LABEL_20;
  v6 = *(unint64_t **)(v0 + 112);
  do
  {
    if (__ldaxr(v6))
    {
      while (1)
      {
        __clrex();
        v16 = atomic_load(*(unint64_t **)(v0 + 112));
        v5 = v16 & 3;
        if ((v16 & 3) != 0)
          break;
        if (v16 > 3)
          goto LABEL_20;
        v14 = *(unint64_t **)(v0 + 112);
        while (!__ldaxr(v14))
        {
          if (!__stlxr((unint64_t)v3, v14))
            goto LABEL_8;
        }
      }
LABEL_2:
      if (v5 == 3)
      {
        swift_continuation_throwingResume(v3);
        return swift_continuation_await(v0 + 16);
      }
      while (1)
      {
LABEL_20:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
    }
  }
  while (__stlxr((unint64_t)v3, v6));
LABEL_8:
  v8 = *(_QWORD *)(v0 + 112);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v8;
  v10 = (_QWORD *)swift_task_create(0, 0, MEMORY[0x1E0DEE9C0] + 8, (int *)&async function pointer to partial apply for closure #1 in closure #1 in closure #1 in static Task<>._sleep(until:_:tolerance:clock:), v9);
  if ((v2 & 1) != 0)
  {
    v11 = 0;
    v13 = -1;
  }
  else
  {
    v11 = (const char *)Duration.components.getter();
    v13 = v12 / 1000000000;
  }
  swift_task_enqueueGlobalWithDeadline(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), v11, (char *)v13, (*(_BYTE *)(v0 + 145) & 1u) + 1, v10);
  return swift_continuation_await(v0 + 16);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 136) = v1;
  if (v1)
  {
    swift_willThrow();
    v2 = static Task<>._sleep(until:_:tolerance:clock:);
  }
  else
  {
    v2 = static Task<>._sleep(until:_:tolerance:clock:);
  }
  return swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 120);
  swift_task_removeCancellationHandler(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v1);
  return swift_task_switch((uint64_t (*)(void))static Task<>._sleep(until:_:tolerance:clock:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 120);
  swift_task_removeCancellationHandler(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v1);
  return swift_task_switch(static Task<>._sleep(until:_:tolerance:clock:), 0, 0);
}

{
  uint64_t v0;

  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void static Task<>._sleep(until:_:tolerance:clock:)()
{
  uint64_t v0;
  char v1;

  v1 = atomic_load(*(unint64_t **)(v0 + 112));
  __asm { BR              X10 }
}

uint64_t sub_18D59CE68()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t sub_18D59CEC4()
{
  uint64_t v0;

  MEMORY[0x18D790034](*(_QWORD *)(v0 + 112), -1, -1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t protocol witness for Clock.now.getter in conformance ContinuousClock@<X0>(char *a1@<X3>, uint64_t *a2@<X8>)
{
  return protocol witness for Clock.now.getter in conformance ContinuousClock((const char *)1, a1, a2);
}

uint64_t protocol witness for Clock.minimumResolution.getter in conformance ContinuousClock@<X0>(char *a1@<X3>, uint64_t *a2@<X8>)
{
  return protocol witness for Clock.minimumResolution.getter in conformance ContinuousClock((const char *)1, a1, a2);
}

uint64_t protocol witness for Clock.sleep(until:tolerance:) in conformance ContinuousClock(__int128 *a1, __int128 *a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = *a2;
  *(_BYTE *)(v2 + 56) = *((_BYTE *)a2 + 16);
  v4 = *a1;
  *(_OWORD *)(v2 + 16) = v3;
  *(_OWORD *)(v2 + 32) = v4;
  return swift_task_switch(protocol witness for Clock.sleep(until:tolerance:) in conformance ContinuousClock, 0, 0);
}

uint64_t protocol witness for Clock.sleep(until:tolerance:) in conformance ContinuousClock()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v1 = *(_BYTE *)(v0 + 56);
  v2 = Duration.components.getter();
  v4 = v3 / 1000000000;
  v5 = swift_task_alloc(dword_1EE06A45C);
  *(_QWORD *)(v0 + 48) = v5;
  *(_QWORD *)v5 = v0;
  *(_QWORD *)(v5 + 8) = ContinuousClock.sleep(until:tolerance:);
  v6 = *(_OWORD *)(v0 + 16);
  *(_BYTE *)(v5 + 145) = 0;
  *(_BYTE *)(v5 + 144) = v1;
  *(_OWORD *)(v5 + 96) = v6;
  *(_QWORD *)(v5 + 80) = v2;
  *(_QWORD *)(v5 + 88) = v4;
  return swift_task_switch(static Task<>._sleep(until:_:tolerance:clock:), 0, 0);
}

uint64_t static ContinuousClock.Instant.now.getter@<X0>(char *a1@<X3>, uint64_t *a2@<X8>)
{
  return ContinuousClock.now.getter((const char *)1, a1, a2);
}

void ContinuousClock.Instant.duration(to:)()
{
  JUMPOUT(0x18D78FA1CLL);
}

uint64_t ContinuousClock.Instant.hash(into:)()
{
  return Duration.hash(into:)();
}

uint64_t static ContinuousClock.Instant.== infix(_:_:)()
{
  return static Duration.== infix(_:_:)();
}

uint64_t static ContinuousClock.Instant.< infix(_:_:)()
{
  return static Duration.< infix(_:_:)();
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance ContinuousClock.Instant()
{
  return static Duration.< infix(_:_:)();
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance ContinuousClock.Instant()
{
  return (static Duration.< infix(_:_:)() & 1) == 0;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance ContinuousClock.Instant()
{
  return (static Duration.< infix(_:_:)() & 1) == 0;
}

uint64_t protocol witness for static Comparable.> infix(_:_:) in conformance ContinuousClock.Instant()
{
  return static Duration.< infix(_:_:)();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ContinuousClock.Instant()
{
  return Duration.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ContinuousClock.Instant()
{
  return static Duration.== infix(_:_:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ContinuousClock.Instant.CodingKeys()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ContinuousClock.Instant.CodingKeys()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ContinuousClock.Instant.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x65756C61765FLL && a2 == 0xE600000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SuspendingClock.Instant.CodingKeys()
{
  lazy protocol witness table accessor for type SuspendingClock.Instant.CodingKeys and conformance SuspendingClock.Instant.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SuspendingClock.Instant.CodingKeys()
{
  lazy protocol witness table accessor for type SuspendingClock.Instant.CodingKeys and conformance SuspendingClock.Instant.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t SuspendingClock.Instant.encode(to:)(_QWORD *a1)
{
  return ContinuousClock.Instant.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<SuspendingClock.Instant.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type SuspendingClock.Instant.CodingKeys and conformance SuspendingClock.Instant.CodingKeys);
}

uint64_t ContinuousClock.Instant.encode(to:)(_QWORD *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v11)(void);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v11 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v12 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v3;
  v9 = v3[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v11();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v13 = v8;
  v14 = v9;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v7, v5);
}

uint64_t SuspendingClock.Instant.init(from:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return ContinuousClock.Instant.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<SuspendingClock.Instant.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type SuspendingClock.Instant.CodingKeys and conformance SuspendingClock.Instant.CodingKeys, a2);
}

uint64_t ContinuousClock.Instant.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _OWORD *v10;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  uint64_t v15;

  v13 = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v15 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v4)
  {
    v10 = v13;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v9, v7);
    *v10 = v14;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance SuspendingClock.Instant@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return SuspendingClock.Instant.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SuspendingClock.Instant(_QWORD *a1)
{
  return SuspendingClock.Instant.encode(to:)(a1);
}

uint64_t SuspendingClock.now.getter@<X0>(char *a1@<X3>, uint64_t *a2@<X8>)
{
  return ContinuousClock.now.getter((const char *)2, a1, a2);
}

uint64_t ContinuousClock.now.getter@<X0>(const char *a1@<X0>, char *a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  __darwin_time_t v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v6 = 0;
  v7[0] = 0;
  swift_get_time(v7, (uint64_t *)&v6, a1, a2);
  result = specialized Duration.init(_seconds:nanoseconds:)(v7[0], v6);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t static SuspendingClock.now.getter@<X0>(char *a1@<X3>, uint64_t *a2@<X8>)
{
  return ContinuousClock.now.getter((const char *)2, a1, a2);
}

uint64_t SuspendingClock.minimumResolution.getter(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  return ContinuousClock.minimumResolution.getter((const char *)2, a2, a3, a4);
}

uint64_t ContinuousClock.minimumResolution.getter(const char *a1, uint64_t a2, uint64_t a3, char *a4)
{
  unint64_t v5;
  __darwin_time_t v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v5 = 0;
  v6[0] = 0;
  swift_get_clock_res(v6, (uint64_t *)&v5, a1, a4);
  return specialized Duration.init(_seconds:nanoseconds:)(v6[0], v5);
}

uint64_t SuspendingClock.sleep(until:tolerance:)(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;

  *(_BYTE *)(v4 + 56) = a4;
  *(_QWORD *)(v4 + 16) = a2;
  *(_QWORD *)(v4 + 24) = a3;
  *(_OWORD *)(v4 + 32) = *a1;
  return swift_task_switch(SuspendingClock.sleep(until:tolerance:), 0, 0);
}

uint64_t SuspendingClock.sleep(until:tolerance:)()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v1 = *(_BYTE *)(v0 + 56);
  v2 = Duration.components.getter();
  v4 = v3 / 1000000000;
  v5 = swift_task_alloc(dword_1EE06A45C);
  *(_QWORD *)(v0 + 48) = v5;
  *(_QWORD *)v5 = v0;
  *(_QWORD *)(v5 + 8) = SuspendingClock.sleep(until:tolerance:);
  v6 = *(_OWORD *)(v0 + 16);
  *(_BYTE *)(v5 + 145) = 1;
  *(_BYTE *)(v5 + 144) = v1 & 1;
  *(_OWORD *)(v5 + 96) = v6;
  *(_QWORD *)(v5 + 80) = v2;
  *(_QWORD *)(v5 + 88) = v4;
  return swift_task_switch(static Task<>._sleep(until:_:tolerance:clock:), 0, 0);
}

uint64_t protocol witness for Clock.now.getter in conformance SuspendingClock@<X0>(char *a1@<X3>, uint64_t *a2@<X8>)
{
  return protocol witness for Clock.now.getter in conformance ContinuousClock((const char *)2, a1, a2);
}

uint64_t protocol witness for Clock.now.getter in conformance ContinuousClock@<X0>(const char *a1@<X2>, char *a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  __darwin_time_t v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v6 = 0;
  v7[0] = 0;
  swift_get_time(v7, (uint64_t *)&v6, a1, a2);
  result = specialized Duration.init(_seconds:nanoseconds:)(v7[0], v6);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t protocol witness for Clock.minimumResolution.getter in conformance SuspendingClock@<X0>(char *a1@<X3>, uint64_t *a2@<X8>)
{
  return protocol witness for Clock.minimumResolution.getter in conformance ContinuousClock((const char *)2, a1, a2);
}

uint64_t protocol witness for Clock.minimumResolution.getter in conformance ContinuousClock@<X0>(const char *a1@<X2>, char *a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  __darwin_time_t v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v6 = 0;
  v7[0] = 0;
  swift_get_clock_res(v7, (uint64_t *)&v6, a1, a2);
  result = specialized Duration.init(_seconds:nanoseconds:)(v7[0], v6);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t protocol witness for Clock.sleep(until:tolerance:) in conformance SuspendingClock(__int128 *a1, __int128 *a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v3 = *a2;
  *(_BYTE *)(v2 + 56) = *((_BYTE *)a2 + 16);
  v4 = *a1;
  *(_OWORD *)(v2 + 16) = v3;
  *(_OWORD *)(v2 + 32) = v4;
  return swift_task_switch(protocol witness for Clock.sleep(until:tolerance:) in conformance SuspendingClock, 0, 0);
}

uint64_t protocol witness for Clock.sleep(until:tolerance:) in conformance SuspendingClock()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v1 = *(_BYTE *)(v0 + 56);
  v2 = Duration.components.getter();
  v4 = v3 / 1000000000;
  v5 = swift_task_alloc(dword_1EE06A45C);
  *(_QWORD *)(v0 + 48) = v5;
  *(_QWORD *)v5 = v0;
  *(_QWORD *)(v5 + 8) = SuspendingClock.sleep(until:tolerance:);
  v6 = *(_OWORD *)(v0 + 16);
  *(_BYTE *)(v5 + 145) = 1;
  *(_BYTE *)(v5 + 144) = v1;
  *(_OWORD *)(v5 + 96) = v6;
  *(_QWORD *)(v5 + 80) = v2;
  *(_QWORD *)(v5 + 88) = v4;
  return swift_task_switch(static Task<>._sleep(until:_:tolerance:clock:), 0, 0);
}

uint64_t static SuspendingClock.Instant.now.getter@<X0>(char *a1@<X3>, uint64_t *a2@<X8>)
{
  return ContinuousClock.now.getter((const char *)2, a1, a2);
}

uint64_t ContinuousClock.Instant.advanced(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t result;
  uint64_t v6;

  result = MEMORY[0x18D78FA10](*v3, v3[1], a1, a2);
  *a3 = result;
  a3[1] = v6;
  return result;
}

uint64_t static SuspendingClock.Instant.+ infix(_:_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;
  uint64_t v6;

  result = MEMORY[0x18D78FA10](*a1, a1[1], a2, a3);
  *a4 = result;
  a4[1] = v6;
  return result;
}

uint64_t static SuspendingClock.Instant.+= infix(_:_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  result = MEMORY[0x18D78FA10](*a1, a1[1], a2, a3);
  *a1 = result;
  a1[1] = v5;
  return result;
}

uint64_t static SuspendingClock.Instant.- infix(_:_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v3 = *a1;
  v4 = a1[1];
  v5 = static Duration.zero.getter();
  v6 = MEMORY[0x18D78FA1C](v5);
  result = MEMORY[0x18D78FA10](v3, v4, v6, v7);
  *a2 = result;
  a2[1] = v9;
  return result;
}

uint64_t static SuspendingClock.Instant.-= infix(_:_:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v2 = *a1;
  v3 = a1[1];
  v4 = static Duration.zero.getter();
  v5 = MEMORY[0x18D78FA1C](v4);
  result = MEMORY[0x18D78FA10](v2, v3, v5, v6);
  *a1 = result;
  a1[1] = v8;
  return result;
}

void static SuspendingClock.Instant.- infix(_:_:)()
{
  JUMPOUT(0x18D78FA1CLL);
}

Swift::Int ContinuousClock.Instant.hashValue.getter()
{
  Hasher.init(_seed:)();
  Duration.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for InstantProtocol.advanced(by:) in conformance ContinuousClock.Instant@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  uint64_t result;
  uint64_t v5;

  result = MEMORY[0x18D78FA10](*v2, v2[1], *a1, a1[1]);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t protocol witness for InstantProtocol.duration(to:) in conformance ContinuousClock.Instant@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  uint64_t result;
  uint64_t v5;

  result = MEMORY[0x18D78FA1C](*a1, a1[1], *v2, v2[1]);
  *a2 = result;
  a2[1] = v5;
  return result;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ContinuousClock.Instant()
{
  Hasher.init(_seed:)();
  Duration.hash(into:)();
  return Hasher._finalize()();
}

uint64_t closure #1 in closure #1 in closure #1 in static Task<>._sleep(until:_:tolerance:clock:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a2;
  return swift_task_switch(closure #1 in closure #1 in closure #1 in static Task<>._sleep(until:_:tolerance:clock:), 0, 0);
}

uint64_t static Task<>.sleep<A>(until:tolerance:clock:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int *v10;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);

  v10 = *(int **)(a5 + 48);
  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v10 + *v10);
  v11 = (_QWORD *)swift_task_alloc(v10[1]);
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = static Task<>.sleep<A>(until:tolerance:clock:);
  return v13(a1, a2, a4, a5);
}

uint64_t static Task<>.sleep<A>(until:tolerance:clock:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t closure #1 in $defer #1 <A>() in _Deque.subscript.modify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v7 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = _Deque._UnsafeHandle.ptr(at:)(*v10, v11, v13, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a4, a5);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(v14, v9, a5);
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *(_QWORD *)(a4 + 24);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *(_QWORD *)(a4 + 16);
    if (v7 <= v8)
      v9 = *(_QWORD *)(a4 + 16);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UnsafeContinuation<()?, Never>>);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
      v13 = v10 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (char *)MEMORY[0x1E0DEE9D8];
      v13 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v8, v13);
        *(_QWORD *)(a4 + 16) = 0;
LABEL_18:
        swift_bridgeObjectRelease();
        return v10;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, a4);
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

unint64_t specialized RangeReplaceableCollection.removeFirst(_:)(unint64_t result)
{
  uint64_t v1;

  if (result)
  {
    if ((result & 0x8000000000000000) != 0 || *(_QWORD *)(*(_QWORD *)v1 + 16) < result)
    {
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    else
    {
      return (unint64_t)specialized Array.replaceSubrange<A>(_:with:)(0, result);
    }
  }
  return result;
}

void specialized SerialExecutor.checkIsolated()()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(60);
  v0._object = (void *)0x800000018D5BF2D0;
  v0._countAndFlagsBits = 0xD00000000000003ALL;
  String.append(_:)(v0);
  v1._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t partial apply for implicit closure #1 in static GlobalActor.assertIsolated(_:file:line:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t type metadata accessor for AsyncCompactMapSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncCompactMapSequence);
}

uint64_t type metadata accessor for AsyncCompactMapSequence.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncCompactMapSequence.Iterator);
}

uint64_t type metadata accessor for AsyncDropFirstSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncDropFirstSequence);
}

uint64_t type metadata accessor for AsyncDropFirstSequence.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncDropFirstSequence.Iterator);
}

uint64_t type metadata accessor for AsyncDropWhileSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncDropWhileSequence);
}

uint64_t type metadata accessor for AsyncDropWhileSequence.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncDropWhileSequence.Iterator);
}

uint64_t type metadata accessor for AsyncFilterSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncFilterSequence);
}

uint64_t specialized AsyncFilterSequence.isIncluded.getter(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 36));
}

uint64_t specialized AsyncPrefixWhileSequence.Iterator.predicate.getter(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 40));
}

uint64_t specialized AsyncFlatMapSequence.Iterator.transform.getter(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 52));
}

uint64_t type metadata accessor for AsyncFilterSequence.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncFilterSequence.Iterator);
}

void type metadata accessor for AsyncFlatMapSequence()
{
  JUMPOUT(0x18D78FF2CLL);
}

void type metadata accessor for AsyncFlatMapSequence.Iterator()
{
  JUMPOUT(0x18D78FF2CLL);
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x18D78FF50]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t type metadata accessor for AsyncMapSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncMapSequence);
}

uint64_t specialized AsyncMapSequence.Iterator.transform.getter(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 44));
}

uint64_t type metadata accessor for AsyncMapSequence.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncMapSequence.Iterator);
}

uint64_t type metadata accessor for AsyncPrefixSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncPrefixSequence);
}

uint64_t type metadata accessor for AsyncPrefixSequence.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncPrefixSequence.Iterator);
}

uint64_t type metadata accessor for AsyncPrefixWhileSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncPrefixWhileSequence);
}

uint64_t type metadata accessor for AsyncPrefixWhileSequence.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncPrefixWhileSequence.Iterator);
}

uint64_t partial apply for closure #1 in AsyncSequence.allSatisfy(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 32);
  v5 = (_QWORD *)swift_task_alloc(dword_1EE06A1BC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = partial apply for closure #1 in AsyncSequence.allSatisfy(_:);
  return ((uint64_t (*)(uint64_t, int *))((char *)&async function pointer to closure #1 in AsyncSequence.allSatisfy(_:)
                                                 + async function pointer to closure #1 in AsyncSequence.allSatisfy(_:)))(a1, v4);
}

uint64_t sub_18D59E370()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.AsyncSequence.Element, @in_guaranteed A.AsyncSequence.Element) -> (@unowned Bool)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v6)(void);
  _QWORD *v7;

  v6 = *(uint64_t (**)(void))(v2 + 40);
  v7 = (_QWORD *)swift_task_alloc(dword_1EE06A1FC);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = partial apply for closure #1 in AsyncSequence.allSatisfy(_:);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void)))((char *)&async function pointer to thunk for @escaping @callee_guaranteed (@in_guaranteed A.AsyncSequence.Element, @in_guaranteed A.AsyncSequence.Element) -> (@unowned Bool)
                                                                      + async function pointer to thunk for @escaping @callee_guaranteed (@in_guaranteed A.AsyncSequence.Element, @in_guaranteed A.AsyncSequence.Element) -> (@unowned Bool)))(a1, a2, v6);
}

uint64_t sub_18D59E41C()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in AsyncSequence<>.min()()
{
  swift_getAssociatedTypeWitness();
  return dispatch thunk of static Comparable.< infix(_:_:)() & 1;
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed A.AsyncSequence.Element, @in_guaranteed A.AsyncSequence.Element) -> (@unowned Bool)partial apply(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v6)(void);
  _QWORD *v7;

  v6 = *(uint64_t (**)(void))(v2 + 40);
  v7 = (_QWORD *)swift_task_alloc(dword_1EE06A1FC);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = thunk for @escaping @callee_guaranteed (@in_guaranteed A.AsyncSequence.Element, @in_guaranteed A.AsyncSequence.Element) -> (@unowned Bool)partial apply;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void)))((char *)&async function pointer to thunk for @escaping @callee_guaranteed (@in_guaranteed A.AsyncSequence.Element, @in_guaranteed A.AsyncSequence.Element) -> (@unowned Bool)
                                                                      + async function pointer to thunk for @escaping @callee_guaranteed (@in_guaranteed A.AsyncSequence.Element, @in_guaranteed A.AsyncSequence.Element) -> (@unowned Bool)))(a1, a2, v6);
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed A.AsyncSequence.Element, @in_guaranteed A.AsyncSequence.Element) -> (@unowned Bool)partial apply(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 16));
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t type metadata accessor for AsyncThrowingCompactMapSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncThrowingCompactMapSequence);
}

uint64_t type metadata accessor for AsyncThrowingCompactMapSequence.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncThrowingCompactMapSequence.Iterator);
}

uint64_t type metadata accessor for AsyncThrowingDropWhileSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncThrowingDropWhileSequence);
}

uint64_t type metadata accessor for AsyncThrowingDropWhileSequence.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncThrowingDropWhileSequence.Iterator);
}

uint64_t type metadata accessor for AsyncThrowingFilterSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncThrowingFilterSequence);
}

uint64_t type metadata accessor for AsyncThrowingFilterSequence.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncThrowingFilterSequence.Iterator);
}

void type metadata accessor for AsyncThrowingFlatMapSequence()
{
  JUMPOUT(0x18D78FF2CLL);
}

void type metadata accessor for AsyncThrowingFlatMapSequence.Iterator()
{
  JUMPOUT(0x18D78FF2CLL);
}

uint64_t type metadata accessor for AsyncThrowingMapSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncThrowingMapSequence);
}

uint64_t type metadata accessor for AsyncThrowingMapSequence.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncThrowingMapSequence.Iterator);
}

uint64_t type metadata accessor for AsyncThrowingPrefixWhileSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncThrowingPrefixWhileSequence);
}

uint64_t type metadata accessor for AsyncThrowingPrefixWhileSequence.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncThrowingPrefixWhileSequence.Iterator);
}

uint64_t type metadata accessor for _DefaultGlobalConcurrentExecutor()
{
  return objc_opt_self();
}

uint64_t sub_18D59E624()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 24);
  v5 = (_QWORD *)swift_task_alloc(dword_1EE06A2AC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCompactMapSequence<A, B>.Iterator;
  return ((uint64_t (*)(uint64_t, int *))((char *)&async function pointer to thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A)
                                                 + async function pointer to thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A)))(a1, v4);
}

uint64_t sub_18D59E6C8()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in _runAsyncMain(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = (_QWORD *)swift_task_alloc(dword_1EE06A2C4);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCompactMapSequence<A, B>.Iterator;
  return closure #1 in _runAsyncMain(_:)((uint64_t)v4, v5, v6, v2, v3);
}

uint64_t sub_18D59E744()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1EE06A2D4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCompactMapSequence<A, B>.Iterator;
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu))(a1, v4);
}

unint64_t lazy protocol witness table accessor for type CancellationError and conformance CancellationError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CancellationError and conformance CancellationError;
  if (!lazy protocol witness table cache variable for type CancellationError and conformance CancellationError)
  {
    result = MEMORY[0x18D78FF74](&protocol conformance descriptor for CancellationError, &type metadata for CancellationError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError);
  }
  return result;
}

uint64_t type metadata accessor for TaskGroup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TaskGroup);
}

uint64_t type metadata accessor for ThrowingTaskGroup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ThrowingTaskGroup);
}

uint64_t specialized _Deque.Iterator.init(_base:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD v8[6];

  v8[2] = a2;
  v8[3] = a1;
  v6 = type metadata accessor for _Deque.Iterator(0, a2, a3, a4);
  _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in _Deque.Iterator.init(_base:), (uint64_t)v8, a1, a2, v6, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
  return v8[5];
}

void specialized TaskLocal.projectedValue.setter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;

  _StringGuts.grow(_:)(72);
  v0._object = (void *)0x800000018D5BFCF0;
  v0._countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v0);
  v1._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0xD00000000000002DLL;
  v2._object = (void *)0x800000018D5BFD10;
  String.append(_:)(v2);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t partial apply for closure #1 in _checkIllegalTaskLocalBindingWithinWithTaskGroup(file:line:)(const unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v3;
  const char *v4;

  v3 = *(_QWORD *)(v1 + 32);
  v4 = (const char *)String.count.getter();
  return swift_task_reportIllegalTaskLocalBindingWithinWithTaskGroup(a1, v4, 1, v3);
}

void specialized static Task<>.onSleepWake(_:)(unint64_t *a1)
{
  unint64_t v1;
  unint64_t v2;
  swift::AsyncTask *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v1 = atomic_load(a1);
  v2 = v1 & 3;
  if ((v1 & 3) == 0)
  {
    v3 = (swift::AsyncTask *)(v1 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v1 & 0xFFFFFFFFFFFFFFFCLL) == 0)
      goto LABEL_15;
    while (1)
    {
      v4 = __ldaxr(a1);
      if ((swift::AsyncTask *)v4 != v3)
        break;
      if (!__stlxr(1uLL, a1))
      {
LABEL_14:
        swift_continuation_throwingResume(v3);
        return;
      }
    }
    while (1)
    {
      __clrex();
      v5 = atomic_load(a1);
      v2 = v5 & 3;
      if ((v5 & 3) != 0)
        break;
      v3 = (swift::AsyncTask *)(v5 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v5 & 0xFFFFFFFFFFFFFFFCLL) == 0)
        goto LABEL_15;
      while (1)
      {
        v6 = __ldaxr(a1);
        if ((swift::AsyncTask *)v6 != v3)
          break;
        if (!__stlxr(1uLL, a1))
          goto LABEL_14;
      }
    }
  }
  if (v2 == 2)
    JUMPOUT(0x18D790034);
  if (v2 != 3)
  {
    while (1)
    {
LABEL_15:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
}

uint64_t specialized _Deque.index(_:offsetBy:limitedBy:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;

  v3 = a3 - result;
  if (__OFSUB__(a3, result))
  {
    __break(1u);
    goto LABEL_12;
  }
  if (a2 >= 1)
  {
    if (v3 < 0 || v3 >= (unint64_t)a2)
      goto LABEL_9;
    return 0;
  }
  if (v3 <= 0 && v3 > a2)
    return 0;
LABEL_9:
  v4 = __OFADD__(result, a2);
  result += a2;
  if (v4)
LABEL_12:
    __break(1u);
  return result;
}

uint64_t specialized _Deque.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t (*v34)(char *, uint64_t);
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;

  v7 = v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v51 = *(uint64_t **)(AssociatedTypeWitness - 8);
  v15 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v50 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v43 - v17;
  if (a1 < 0)
    goto LABEL_15;
  v19 = *(_QWORD *)(a4 + 16);
  _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, *v7, (uint64_t)&type metadata for _DequeBufferHeader, v19, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v42);
  if (v53 < a2)
    goto LABEL_15;
  v52 = a1;
  v20 = __OFSUB__(a2, a1);
  v21 = a2 - a1;
  if (v20)
  {
    __break(1u);
    goto LABEL_12;
  }
  v48 = a2;
  v49 = AssociatedTypeWitness;
  v47 = a3;
  v22 = dispatch thunk of Collection.count.getter();
  v23 = v22 - v21;
  if (__OFSUB__(v22, v21))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v24 = v22;
  _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, *v7, (uint64_t)&type metadata for _DequeBufferHeader, v19, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v42);
  v27 = v53 + v23;
  if (!__OFADD__(v53, v23))
  {
    v28 = a5;
    v29 = a6;
    v46 = v19;
    type metadata accessor for _Deque._Storage(0, v19, v25, v26);
    _Deque._Storage.ensureUnique(minimumCapacity:linearGrowth:)(v27, 0);
    if (v24 >= v21)
      v30 = v21;
    else
      v30 = v24;
    v31 = v52;
    if (!__OFADD__(v52, v30))
    {
      v44 = v52 + v30;
      v45 = v23;
      v32 = v50;
      v33 = v47;
      dispatch thunk of Collection.startIndex.getter();
      dispatch thunk of Collection.index(_:offsetBy:)();
      v34 = (uint64_t (*)(char *, uint64_t))v51[1];
      v35 = v32;
      v36 = v49;
      v37 = v34(v35, v49);
      v51 = &v43;
      MEMORY[0x1E0C80A78](v37);
      v38 = v46;
      *(&v43 - 12) = v46;
      *(&v43 - 11) = v28;
      *(&v43 - 10) = v29;
      *(&v43 - 9) = v31;
      v39 = v44;
      *(&v43 - 8) = v48;
      *(&v43 - 7) = v39;
      *(&v43 - 6) = v33;
      *(&v43 - 5) = (uint64_t)v18;
      *(&v43 - 4) = v45;
      *(&v43 - 3) = v30;
      v42 = v21;
      _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in _Deque.replaceSubrange<A>(_:with:), (uint64_t)(&v43 - 14), v40, v38, MEMORY[0x1E0DEE9C0] + 8, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
      return v34(v18, v36);
    }
    goto LABEL_14;
  }
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
LABEL_15:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *result;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (a1 < 0)
    goto LABEL_23;
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
    goto LABEL_23;
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_19;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || v9 > *(_QWORD *)(v4 + 24) >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v11, 1, v4);
    v4 = (uint64_t)result;
  }
  if (v7 < 0)
    goto LABEL_24;
  if (!v7)
  {
LABEL_17:
    *v2 = v4;
    return result;
  }
  v12 = *(_QWORD *)(v4 + 16);
  if (!__OFSUB__(v12, a2))
  {
    result = specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v4 + 32 + 8 * a2), v12 - a2, (char *)(v4 + 32 + 8 * a1));
    v13 = *(_QWORD *)(v4 + 16);
    v14 = __OFADD__(v13, v8);
    v15 = v13 - v7;
    if (!v14)
    {
      *(_QWORD *)(v4 + 16) = v15;
      goto LABEL_17;
    }
    goto LABEL_22;
  }
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_24:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _AsyncStreamCriticalStorage.value.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[16];
  uint64_t v11;
  uint64_t v12;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  _swift_async_stream_lock_lock((os_unfair_lock_t)(v1 + ((*(unsigned int *)(v7 + 48) + 7) & 0x1FFFFFFF8)));
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 16))(v6, v1 + *(_QWORD *)(*(_QWORD *)v1 + 88), v3);
  v11 = v1;
  v12 = a1;
  _ss20withExtendedLifetimeyq0_x_q0_yq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v6, (uint64_t)partial apply for closure #1 in _AsyncStreamCriticalStorage.value.setter, (uint64_t)v10, v3, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v8);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t specialized AsyncStream.Continuation.onTermination.setter(uint64_t a1, uint64_t a2)
{
  return AsyncStream._Storage.setOnTermination(_:)(a1, a2);
}

uint64_t _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOy(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

uint64_t type metadata accessor for AsyncStream._Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncStream._Storage);
}

uint64_t type metadata accessor for AsyncStream._Context(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncStream._Context);
}

uint64_t type metadata accessor for _AsyncStreamCriticalStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _AsyncStreamCriticalStorage);
}

uint64_t sub_18D59F2B4()
{
  uint64_t v0;

  swift_release();
  if (*(_QWORD *)(v0 + 32))
    swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AsyncStream.init(unfolding:onCancel:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;

  v4 = *(_QWORD *)(v1 + 16);
  v8 = *(_OWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 40);
  v6 = swift_task_alloc(dword_1EE06A3EC);
  *(_QWORD *)(v2 + 16) = v6;
  *(_QWORD *)v6 = v2;
  *(_QWORD *)(v6 + 8) = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCompactMapSequence<A, B>.Iterator;
  *(_QWORD *)(v6 + 40) = v5;
  *(_QWORD *)(v6 + 48) = v4;
  *(_OWORD *)(v6 + 24) = v8;
  *(_QWORD *)(v6 + 16) = a1;
  return swift_task_switch(closure #1 in AsyncStream.init(unfolding:onCancel:), 0, 0);
}

uint64_t specialized AsyncThrowingStream.Continuation.onTermination.setter(uint64_t a1, uint64_t a2)
{
  return AsyncThrowingStream._Storage.setOnTermination(_:)(a1, a2);
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x18D78FF5C](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t type metadata accessor for AsyncThrowingStream._Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncThrowingStream._Storage);
}

uint64_t type metadata accessor for AsyncThrowingStream._Context(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncThrowingStream._Context);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed @async () -> (@out A?, @error @owned Error)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;

  v6 = v2[2];
  v7 = (int *)v2[3];
  v8 = v2[4];
  v9 = (_QWORD *)swift_task_alloc(dword_1EE06A40C);
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCompactMapSequence<A, B>.Iterator;
  return ((uint64_t (*)(uint64_t, int *, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to thunk for @escaping @callee_guaranteed @async () -> (@out A?, @error @owned Error)
                                                                            + async function pointer to thunk for @escaping @callee_guaranteed @async () -> (@out A?, @error @owned Error)))(a1, v7, v8, v6, a2);
}

uint64_t partial apply for closure #1 in AsyncThrowingStream.init<>(unfolding:)(uint64_t a1, uint64_t a2)
{
  int8x16_t *v2;
  uint64_t v3;
  uint64_t v6;
  int8x16_t v7;

  v6 = swift_task_alloc(dword_1EE06A41C);
  v7 = v2[1];
  *(_QWORD *)(v3 + 16) = v6;
  *(_QWORD *)v6 = v3;
  *(_QWORD *)(v6 + 8) = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCompactMapSequence<A, B>.Iterator;
  *(_QWORD *)(v6 + 40) = a2;
  *(int8x16_t *)(v6 + 24) = vextq_s8(v7, v7, 8uLL);
  *(_QWORD *)(v6 + 16) = a1;
  return swift_task_switch(closure #1 in AsyncThrowingStream.init<>(unfolding:), 0, 0);
}

uint64_t type metadata accessor for AsyncThrowingStream.Continuation.YieldResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncThrowingStream.Continuation.YieldResult);
}

uint64_t partial apply for closure #1 in static AsyncStream.makeStream(of:bufferingPolicy:)(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = *(_QWORD **)(v1 + 24);
  swift_release();
  *v3 = *a1;
  return swift_retain();
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t lazy protocol witness table accessor for type ContinuousClock.Instant.CodingKeys and conformance ContinuousClock.Instant.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContinuousClock.Instant.CodingKeys and conformance ContinuousClock.Instant.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContinuousClock.Instant.CodingKeys and conformance ContinuousClock.Instant.CodingKeys)
  {
    result = MEMORY[0x18D78FF74](&protocol conformance descriptor for ContinuousClock.Instant.CodingKeys, &unk_1E25FFB08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContinuousClock.Instant.CodingKeys and conformance ContinuousClock.Instant.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContinuousClock.Instant.CodingKeys and conformance ContinuousClock.Instant.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContinuousClock.Instant.CodingKeys and conformance ContinuousClock.Instant.CodingKeys)
  {
    result = MEMORY[0x18D78FF74](&protocol conformance descriptor for ContinuousClock.Instant.CodingKeys, &unk_1E25FFB08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContinuousClock.Instant.CodingKeys and conformance ContinuousClock.Instant.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContinuousClock.Instant.CodingKeys and conformance ContinuousClock.Instant.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContinuousClock.Instant.CodingKeys and conformance ContinuousClock.Instant.CodingKeys)
  {
    result = MEMORY[0x18D78FF74](&protocol conformance descriptor for ContinuousClock.Instant.CodingKeys, &unk_1E25FFB08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContinuousClock.Instant.CodingKeys and conformance ContinuousClock.Instant.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContinuousClock.Instant.CodingKeys and conformance ContinuousClock.Instant.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContinuousClock.Instant.CodingKeys and conformance ContinuousClock.Instant.CodingKeys)
  {
    result = MEMORY[0x18D78FF74](&protocol conformance descriptor for ContinuousClock.Instant.CodingKeys, &unk_1E25FFB08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContinuousClock.Instant.CodingKeys and conformance ContinuousClock.Instant.CodingKeys);
  }
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t specialized _Deque._copyContents(initializing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t TupleTypeMetadata2;
  _QWORD v8[9];

  v8[2] = a4;
  v8[3] = a1;
  v8[4] = a2;
  v8[5] = a3;
  type metadata accessor for _Deque.Iterator(255, a4, a3, a4);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in _Deque._copyContents(initializing:), (uint64_t)v8, a3, a4, TupleTypeMetadata2, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
  return v8[8];
}

uint64_t specialized _Deque.Iterator.init(_base:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD v8[8];

  v8[2] = a3;
  v8[3] = a2;
  v8[4] = a1;
  v6 = type metadata accessor for _Deque.Iterator(0, a3, a3, a4);
  _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in _Deque.Iterator.init(_base:from:), (uint64_t)v8, a1, a3, v6, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
  return v8[7];
}

uint64_t specialized _Deque._copyToContiguousArray()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, a1, (uint64_t)&type metadata for _DequeBufferHeader, a2, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v3);
  return ContiguousArray.init(unsafeUninitializedCapacity:initializingWith:)();
}

uint64_t specialized _Deque.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _QWORD v12[4];
  uint64_t v13;
  uint64_t v14;

  if (a2 < 0
    || (v6 = *(_QWORD *)(a3 + 16),
        _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, *v3, (uint64_t)&type metadata for _DequeBufferHeader, v6, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v13), v14 <= a2))
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for _Deque._Storage(0, v6, v7, v8);
    _Deque._Storage.ensureUnique()();
    MEMORY[0x1E0C80A78](v9);
    v12[2] = v6;
    v12[3] = a2;
    v13 = a1;
    return _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in _Deque.subscript.setter, (uint64_t)v12, v10, v6, MEMORY[0x1E0DEE9C0] + 8, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
  }
  return result;
}

uint64_t specialized _Deque.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  _QWORD v17[4];

  if (a4 < 0
    || (_ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, *v6, (uint64_t)&type metadata for _DequeBufferHeader, *(_QWORD *)(a6 + 16), MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v16), v17[0] < a5))
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v17[0] = a1;
    v17[1] = a2;
    v17[2] = a3;
    MEMORY[0x18D78FF74](&protocol conformance descriptor for _Deque<A>, a6);
    v13 = type metadata accessor for Slice();
    v14 = MEMORY[0x18D78FF74](MEMORY[0x1E0DEDE48], v13);
    return specialized _Deque.replaceSubrange<A>(_:with:)(a4, a5, (uint64_t)v17, a6, v13, v14);
  }
  return result;
}

uint64_t specialized Collection._failEarlyRangeCheck(_:bounds:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t), uint64_t (*a6)(char *, char *, uint64_t, uint64_t), uint64_t a7)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  void (*v23)(char *, uint64_t, uint64_t);
  void (*v24)(char *, char *, uint64_t);
  char *v25;
  char v26;
  void (*v27)(char *, uint64_t);
  void (*v28)(char *, uint64_t);
  uint64_t result;
  _QWORD v30[2];
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t (*v34)(char *, char *, uint64_t, uint64_t);

  v30[1] = a7;
  v33 = a2;
  v34 = a6;
  v32 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)v30 - v13;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v16 = a5(0, AssociatedTypeWitness, AssociatedConformanceWitness);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x1E0C80A78](v16);
  v20 = (char *)v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)v30 - v21;
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v23((char *)v30 - v21, v33, v16);
  v33 = v9;
  v24 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v24(v14, v32, AssociatedTypeWitness);
  v31 = AssociatedConformanceWitness;
  LOBYTE(AssociatedConformanceWitness) = dispatch thunk of static Comparable.<= infix(_:_:)();
  v32 = v12;
  v24(v12, v14, AssociatedTypeWitness);
  v23(v20, (uint64_t)v22, v16);
  if ((AssociatedConformanceWitness & 1) != 0)
  {
    v25 = v32;
    v26 = v34(v32, &v20[*(int *)(v16 + 36)], AssociatedTypeWitness, v31);
    v27 = *(void (**)(char *, uint64_t))(v17 + 8);
    v27(v20, v16);
    v28 = *(void (**)(char *, uint64_t))(v33 + 8);
    v28(v25, AssociatedTypeWitness);
    if ((v26 & 1) != 0)
    {
      v28(v14, AssociatedTypeWitness);
      return ((uint64_t (*)(char *, uint64_t))v27)(v22, v16);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v32, AssociatedTypeWitness);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Collection._failEarlyRangeCheck(_:bounds:)(char *a1, char *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, char *, uint64_t);
  char v17;
  void (*v18)(char *, uint64_t);
  uint64_t result;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  char *v22;

  v22 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v3 = type metadata accessor for Range();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v5);
  v10 = (char *)&v21 - v9;
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v21 - v12;
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v21 - v14;
  v16 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  v16((char *)&v21 - v14, a2, v3);
  v16(v13, v22, v3);
  LOBYTE(a2) = dispatch thunk of static Comparable.<= infix(_:_:)();
  v16(v10, v13, v3);
  v16(v7, v15, v3);
  if ((a2 & 1) != 0)
  {
    v17 = dispatch thunk of static Comparable.<= infix(_:_:)();
    v18 = *(void (**)(char *, uint64_t))(v4 + 8);
    v18(v7, v3);
    v18(v10, v3);
    if ((v17 & 1) != 0)
    {
      v18(v13, v3);
      return ((uint64_t (*)(char *, uint64_t))v18)(v15, v3);
    }
  }
  else
  {
    v20 = *(void (**)(char *, uint64_t))(v4 + 8);
    v20(v7, v3);
    v20(v10, v3);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _Deque.init(repeating:count:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t result;
  _QWORD v9[5];

  if (a2 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v7 = _Deque._Storage.init(minimumCapacity:)(a2, a3, a3, a4);
    MEMORY[0x1E0C80A78](v7);
    v9[2] = a3;
    v9[3] = a2;
    v9[4] = a1;
    swift_retain();
    _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in _Deque.init(repeating:count:), (uint64_t)v9, v7, a3, MEMORY[0x1E0DEE9C0] + 8, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
    swift_release();
    return v7;
  }
  return result;
}

uint64_t specialized _Deque.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v12 = _Deque._Storage.init()();
  v10 = type metadata accessor for _Deque(0, a2, v8, v9);
  _Deque.append<A>(contentsOf:)(a1, v10, a3, a4);
  return v12;
}

uint64_t specialized _Deque.insert<A>(contentsOf:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _QWORD v17[6];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if ((a2 & 0x8000000000000000) == 0)
  {
    v10 = *(_QWORD *)(a3 + 16);
    _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, *v5, (uint64_t)&type metadata for _DequeBufferHeader, v10, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v18);
    if (v20 >= a2)
    {
      v11 = dispatch thunk of Collection.count.getter();
      _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, *v5, (uint64_t)&type metadata for _DequeBufferHeader, v10, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v18);
      if (!__OFADD__(v20, v11))
      {
        type metadata accessor for _Deque._Storage(0, v10, v12, v13);
        _Deque._Storage.ensureUnique(minimumCapacity:linearGrowth:)(v20 + v11, 0);
        MEMORY[0x1E0C80A78](v14);
        v17[2] = v10;
        v17[3] = a4;
        v17[4] = a5;
        v17[5] = a1;
        v18 = v11;
        v19 = a2;
        return _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in _Deque.insert<A>(contentsOf:at:), (uint64_t)v17, v15, v10, MEMORY[0x1E0DEE9C0] + 8, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
      }
      __break(1u);
    }
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Duration.init(_seconds:nanoseconds:)(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if ((a2 & 0x8000000000000000) == 0)
  {
    if (is_mul_ok(a2, 0x3B9ACA00uLL))
      return 1000000000000000000 * a1 + 1000000000 * a2;
    __break(1u);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type SuspendingClock.Instant.CodingKeys and conformance SuspendingClock.Instant.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SuspendingClock.Instant.CodingKeys and conformance SuspendingClock.Instant.CodingKeys;
  if (!lazy protocol witness table cache variable for type SuspendingClock.Instant.CodingKeys and conformance SuspendingClock.Instant.CodingKeys)
  {
    result = MEMORY[0x18D78FF74](&protocol conformance descriptor for SuspendingClock.Instant.CodingKeys, &unk_1E25FFA70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SuspendingClock.Instant.CodingKeys and conformance SuspendingClock.Instant.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SuspendingClock.Instant.CodingKeys and conformance SuspendingClock.Instant.CodingKeys;
  if (!lazy protocol witness table cache variable for type SuspendingClock.Instant.CodingKeys and conformance SuspendingClock.Instant.CodingKeys)
  {
    result = MEMORY[0x18D78FF74](&protocol conformance descriptor for SuspendingClock.Instant.CodingKeys, &unk_1E25FFA70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SuspendingClock.Instant.CodingKeys and conformance SuspendingClock.Instant.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SuspendingClock.Instant.CodingKeys and conformance SuspendingClock.Instant.CodingKeys;
  if (!lazy protocol witness table cache variable for type SuspendingClock.Instant.CodingKeys and conformance SuspendingClock.Instant.CodingKeys)
  {
    result = MEMORY[0x18D78FF74](&protocol conformance descriptor for SuspendingClock.Instant.CodingKeys, &unk_1E25FFA70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SuspendingClock.Instant.CodingKeys and conformance SuspendingClock.Instant.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SuspendingClock.Instant.CodingKeys and conformance SuspendingClock.Instant.CodingKeys;
  if (!lazy protocol witness table cache variable for type SuspendingClock.Instant.CodingKeys and conformance SuspendingClock.Instant.CodingKeys)
  {
    result = MEMORY[0x18D78FF74](&protocol conformance descriptor for SuspendingClock.Instant.CodingKeys, &unk_1E25FFA70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SuspendingClock.Instant.CodingKeys and conformance SuspendingClock.Instant.CodingKeys);
  }
  return result;
}

void associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in AsyncCompactMapSequence<A, B>()
{
  JUMPOUT(0x18D78FF74);
}

void associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in AsyncDropFirstSequence<A>()
{
  JUMPOUT(0x18D78FF74);
}

void associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in AsyncDropWhileSequence<A>()
{
  JUMPOUT(0x18D78FF74);
}

void associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in AsyncFilterSequence<A>()
{
  JUMPOUT(0x18D78FF74);
}

void associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in AsyncFlatMapSequence<A, B>()
{
  JUMPOUT(0x18D78FF74);
}

uint64_t associated type witness table accessor for AsyncIteratorProtocol.Failure : Error in AsyncCompactMapSequence<A, B>.Iterator()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return swift_getAssociatedConformanceWitness();
}

void associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in AsyncMapSequence<A, B>()
{
  JUMPOUT(0x18D78FF74);
}

void associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in AsyncPrefixSequence<A>()
{
  JUMPOUT(0x18D78FF74);
}

uint64_t associated type witness table accessor for AsyncIteratorProtocol.Failure : Error in AsyncDropFirstSequence<A>.Iterator()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return swift_getAssociatedConformanceWitness();
}

void associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in AsyncPrefixWhileSequence<A>()
{
  JUMPOUT(0x18D78FF74);
}

uint64_t associated type witness table accessor for AsyncIteratorProtocol.Failure : Error in AsyncThrowingCompactMapSequence<A, B>.Iterator()
{
  return MEMORY[0x1E0DEDB38];
}

void associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in AsyncThrowingCompactMapSequence<A, B>()
{
  JUMPOUT(0x18D78FF74);
}

void associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in AsyncThrowingDropWhileSequence<A>()
{
  JUMPOUT(0x18D78FF74);
}

void associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in AsyncThrowingFilterSequence<A>()
{
  JUMPOUT(0x18D78FF74);
}

void associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in AsyncThrowingFlatMapSequence<A, B>()
{
  JUMPOUT(0x18D78FF74);
}

void associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in AsyncThrowingMapSequence<A, B>()
{
  JUMPOUT(0x18D78FF74);
}

void associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in AsyncThrowingPrefixWhileSequence<A>()
{
  JUMPOUT(0x18D78FF74);
}

_UNKNOWN **associated type witness table accessor for GlobalActor.ActorType : Actor in MainActor()
{
  return &protocol witness table for MainActor;
}

unint64_t lazy protocol witness table accessor for type JobPriority and conformance JobPriority()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type JobPriority and conformance JobPriority;
  if (!lazy protocol witness table cache variable for type JobPriority and conformance JobPriority)
  {
    result = MEMORY[0x18D78FF74](&protocol conformance descriptor for JobPriority, &type metadata for JobPriority);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JobPriority and conformance JobPriority);
  }
  return result;
}

void base witness table accessor for Equatable in Task<A, B>()
{
  JUMPOUT(0x18D78FF74);
}

unint64_t lazy protocol witness table accessor for type TaskPriority and conformance TaskPriority()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskPriority and conformance TaskPriority;
  if (!lazy protocol witness table cache variable for type TaskPriority and conformance TaskPriority)
  {
    result = MEMORY[0x18D78FF74](&protocol conformance descriptor for TaskPriority, &type metadata for TaskPriority);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskPriority and conformance TaskPriority);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaskPriority and conformance TaskPriority;
  if (!lazy protocol witness table cache variable for type TaskPriority and conformance TaskPriority)
  {
    result = MEMORY[0x18D78FF74](&protocol conformance descriptor for TaskPriority, &type metadata for TaskPriority);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskPriority and conformance TaskPriority);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnsafeCurrentTask and conformance UnsafeCurrentTask()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnsafeCurrentTask and conformance UnsafeCurrentTask;
  if (!lazy protocol witness table cache variable for type UnsafeCurrentTask and conformance UnsafeCurrentTask)
  {
    result = MEMORY[0x18D78FF74](&protocol conformance descriptor for UnsafeCurrentTask, &type metadata for UnsafeCurrentTask);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsafeCurrentTask and conformance UnsafeCurrentTask);
  }
  return result;
}

uint64_t associated type witness table accessor for AsyncIteratorProtocol.Failure : Error in TaskGroup<A>.Iterator()
{
  return MEMORY[0x1E0DEDD18];
}

void associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in TaskGroup<A>()
{
  JUMPOUT(0x18D78FF74);
}

uint64_t associated type witness table accessor for AsyncIteratorProtocol.Failure : Error in ThrowingTaskGroup<A, B>.Iterator(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 32);
}

void associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in ThrowingTaskGroup<A, B>()
{
  JUMPOUT(0x18D78FF74);
}

void base witness table accessor for Equatable in AsyncStream<A>.Continuation.Termination()
{
  JUMPOUT(0x18D78FF74);
}

void associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in AsyncStream<A>()
{
  JUMPOUT(0x18D78FF74);
}

void associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in AsyncThrowingStream<A, B>()
{
  JUMPOUT(0x18D78FF74);
}

unint64_t lazy protocol witness table accessor for type ContinuousClock.Instant and conformance ContinuousClock.Instant()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContinuousClock.Instant and conformance ContinuousClock.Instant;
  if (!lazy protocol witness table cache variable for type ContinuousClock.Instant and conformance ContinuousClock.Instant)
  {
    result = MEMORY[0x18D78FF74](&protocol conformance descriptor for ContinuousClock.Instant, &type metadata for ContinuousClock.Instant);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContinuousClock.Instant and conformance ContinuousClock.Instant);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContinuousClock.Instant and conformance ContinuousClock.Instant;
  if (!lazy protocol witness table cache variable for type ContinuousClock.Instant and conformance ContinuousClock.Instant)
  {
    result = MEMORY[0x18D78FF74](&protocol conformance descriptor for ContinuousClock.Instant, &type metadata for ContinuousClock.Instant);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContinuousClock.Instant and conformance ContinuousClock.Instant);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContinuousClock.Instant and conformance ContinuousClock.Instant;
  if (!lazy protocol witness table cache variable for type ContinuousClock.Instant and conformance ContinuousClock.Instant)
  {
    result = MEMORY[0x18D78FF74](&protocol conformance descriptor for ContinuousClock.Instant, &type metadata for ContinuousClock.Instant);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContinuousClock.Instant and conformance ContinuousClock.Instant);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContinuousClock.Instant and conformance ContinuousClock.Instant;
  if (!lazy protocol witness table cache variable for type ContinuousClock.Instant and conformance ContinuousClock.Instant)
  {
    result = MEMORY[0x18D78FF74](&protocol conformance descriptor for ContinuousClock.Instant, &type metadata for ContinuousClock.Instant);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContinuousClock.Instant and conformance ContinuousClock.Instant);
  }
  return result;
}

uint64_t associated type witness table accessor for InstantProtocol.Duration : DurationProtocol in ContinuousClock.Instant()
{
  return MEMORY[0x1E0DEE800];
}

unint64_t lazy protocol witness table accessor for type SuspendingClock.Instant and conformance SuspendingClock.Instant()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SuspendingClock.Instant and conformance SuspendingClock.Instant;
  if (!lazy protocol witness table cache variable for type SuspendingClock.Instant and conformance SuspendingClock.Instant)
  {
    result = MEMORY[0x18D78FF74](&protocol conformance descriptor for SuspendingClock.Instant, &type metadata for SuspendingClock.Instant);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SuspendingClock.Instant and conformance SuspendingClock.Instant);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SuspendingClock.Instant and conformance SuspendingClock.Instant;
  if (!lazy protocol witness table cache variable for type SuspendingClock.Instant and conformance SuspendingClock.Instant)
  {
    result = MEMORY[0x18D78FF74](&protocol conformance descriptor for SuspendingClock.Instant, &type metadata for SuspendingClock.Instant);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SuspendingClock.Instant and conformance SuspendingClock.Instant);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SuspendingClock.Instant and conformance SuspendingClock.Instant;
  if (!lazy protocol witness table cache variable for type SuspendingClock.Instant and conformance SuspendingClock.Instant)
  {
    result = MEMORY[0x18D78FF74](&protocol conformance descriptor for SuspendingClock.Instant, &type metadata for SuspendingClock.Instant);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SuspendingClock.Instant and conformance SuspendingClock.Instant);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SuspendingClock.Instant and conformance SuspendingClock.Instant;
  if (!lazy protocol witness table cache variable for type SuspendingClock.Instant and conformance SuspendingClock.Instant)
  {
    result = MEMORY[0x18D78FF74](&protocol conformance descriptor for SuspendingClock.Instant, &type metadata for SuspendingClock.Instant);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SuspendingClock.Instant and conformance SuspendingClock.Instant);
  }
  return result;
}

uint64_t sub_18D5A0870()
{
  return 16;
}

__n128 sub_18D5A087C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_18D5A0888()
{
  return 8;
}

_QWORD *sub_18D5A0894(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_18D5A08A0()
{
  return 8;
}

uint64_t sub_18D5A08AC()
{
  return 24;
}

__n128 sub_18D5A08B8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t type metadata instantiation function for CheckedContinuation()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for CheckedContinuation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CheckedContinuation);
}

uint64_t dispatch thunk of Executor.enqueue(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of SerialExecutor.enqueue(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of SerialExecutor.asUnownedSerialExecutor()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of SerialExecutor.isSameExclusiveExecutionContext(other:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of SerialExecutor.checkIsolated()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

ValueMetadata *type metadata accessor for UnownedSerialExecutor()
{
  return &type metadata for UnownedSerialExecutor;
}

uint64_t getEnumTagSinglePayload for UnownedSerialExecutor(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UnownedSerialExecutor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      *(_QWORD *)(result + 8) = 0;
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for UnownedTaskExecutor()
{
  return &type metadata for UnownedTaskExecutor;
}

uint64_t type metadata accessor for DispatchQueueShim()
{
  return objc_opt_self();
}

uint64_t destroy for AsyncCompactMapSequence.Iterator(uint64_t a1)
{
  return destroy for AsyncCompactMapSequence.Iterator(a1);
}

{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
  return swift_release();
}

uint64_t type metadata instantiation function for AsyncDropFirstSequence()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for AsyncDropFirstSequence()
{
  return type metadata completion function for AsyncDropFirstSequence();
}

{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for AsyncDropFirstSequence.Iterator()
{
  return type metadata completion function for AsyncDropFirstSequence.Iterator();
}

{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for AsyncDropWhileSequence()
{
  return type metadata completion function for AsyncDropFirstSequence();
}

uint64_t type metadata completion function for AsyncDropWhileSequence.Iterator()
{
  return type metadata completion function for AsyncDropFirstSequence.Iterator();
}

uint64_t *initializeBufferWithCopyOfBuffer for AsyncDropWhileSequence.Iterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    v10 = ((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)v11 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)v10 = *(_OWORD *)v11;
      return a1;
    }
    v12 = *(_QWORD *)(v11 + 8);
    *(_QWORD *)v10 = *(_QWORD *)v11;
    *(_QWORD *)(v10 + 8) = v12;
  }
  swift_retain();
  return a1;
}

uint64_t destroy for AsyncDropWhileSequence.Iterator(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t result;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
  if (*(_QWORD *)((a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
    return swift_release();
  return result;
}

uint64_t initializeWithCopy for AsyncDropWhileSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v8 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v7 = *(_OWORD *)v8;
  }
  else
  {
    v9 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v7 = *(_QWORD *)v8;
    *(_QWORD *)(v7 + 8) = v9;
    swift_retain();
  }
  return a1;
}

uint64_t assignWithCopy for AsyncDropWhileSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (unint64_t *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = *v8;
  if (*v7 < 0xFFFFFFFFuLL)
  {
    if (v9 >= 0xFFFFFFFF)
    {
      v11 = v8[1];
      *v7 = v9;
      v7[1] = v11;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)v7 = *(_OWORD *)v8;
    return a1;
  }
  if (v9 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  v10 = v8[1];
  *v7 = v9;
  v7[1] = v10;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for AsyncDropWhileSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (uint64_t *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = *v8;
  if ((unint64_t)*v8 < 0xFFFFFFFF)
  {
    *(_OWORD *)v7 = *(_OWORD *)v8;
  }
  else
  {
    v10 = v8[1];
    *(_QWORD *)v7 = v9;
    *(_QWORD *)(v7 + 8) = v10;
  }
  return a1;
}

uint64_t assignWithTake for AsyncDropWhileSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (unint64_t *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = *v8;
  if (*v7 < 0xFFFFFFFFuLL)
  {
    if (v9 >= 0xFFFFFFFF)
    {
      v11 = v8[1];
      *v7 = v9;
      v7[1] = v11;
      return a1;
    }
LABEL_7:
    *(_OWORD *)v7 = *(_OWORD *)v8;
    return a1;
  }
  if (v9 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  v10 = v8[1];
  *v7 = v9;
  v7[1] = v10;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncDropWhileSequence.Iterator(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 < a2)
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    __asm { BR              X15 }
  }
  if (v5 >= 0x7FFFFFFE)
    return (*(uint64_t (**)(uint64_t))(v4 + 48))(a1);
  v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  if ((v12 + 1) >= 2)
    return v12;
  else
    return 0;
}

void storeEnumTagSinglePayload for AsyncDropWhileSequence.Iterator(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) <= 0x7FFFFFFEu)
    v7 = 2147483646;
  else
    v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v10 = 0u;
    if (a2 <= v7)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v8 = a3 - v7 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v7)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v11 = ~v7 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_18D5A116C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18D5A11F4);
}

void sub_18D5A1174()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x18D5A117CLL);
  JUMPOUT(0x18D5A11F4);
}

void sub_18D5A11C8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18D5A11F4);
}

void sub_18D5A11D0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18D5A11F4);
}

uint64_t sub_18D5A11D8@<X0>(unsigned int a1@<W2>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v4 + v6) = 0;
  if (!(_DWORD)v5)
    goto LABEL_6;
  if (a1 < 0x7FFFFFFE)
  {
    if (v5 > 0x7FFFFFFE)
      JUMPOUT(0x18D5A11E4);
    *(_QWORD *)((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) = v5;
LABEL_6:
    JUMPOUT(0x18D5A11F4);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(v4, v5);
}

uint64_t type metadata completion function for AsyncFilterSequence.Iterator()
{
  return type metadata completion function for AsyncDropFirstSequence.Iterator();
}

uint64_t *initializeBufferWithCopyOfBuffer for AsyncFilterSequence.Iterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    v10 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = v10[1];
    v12 = (_QWORD *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v12 = *v10;
    v12[1] = v11;
  }
  swift_retain();
  return a1;
}

uint64_t destroy for AsyncFilterSequence.Iterator(uint64_t a1)
{
  return destroy for AsyncFilterSequence.Iterator(a1);
}

{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
  return swift_release();
}

uint64_t initializeWithCopy for AsyncFilterSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AsyncFilterSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for AsyncFilterSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
  *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for AsyncFilterSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
  *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncFilterSequence.Iterator(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 < a2)
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    __asm { BR              X15 }
  }
  if (v5 >= 0x7FFFFFFF)
    return (*(uint64_t (**)(uint64_t))(v4 + 48))(a1);
  v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  return (v12 + 1);
}

void storeEnumTagSinglePayload for AsyncFilterSequence.Iterator(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) <= 0x7FFFFFFFu)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v10 = 0u;
    if (a2 <= v7)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v8 = a3 - v7 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v7)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v11 = ~v7 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_18D5A1754()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18D5A17D0);
}

void sub_18D5A175C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x18D5A1764);
  JUMPOUT(0x18D5A17D0);
}

void sub_18D5A17A8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18D5A17D0);
}

void sub_18D5A17B0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18D5A17D0);
}

uint64_t sub_18D5A17B8@<X0>(unsigned int a1@<W2>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v3 + v5) = 0;
  if (!(_DWORD)v4)
    JUMPOUT(0x18D5A17D0);
  if (a1 < 0x7FFFFFFF)
  {
    if ((v4 & 0x80000000) == 0)
      JUMPOUT(0x18D5A17CCLL);
    JUMPOUT(0x18D5A17C4);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(v3, v4);
}

uint64_t type metadata instantiation function for AsyncFlatMapSequence()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata instantiation function for AsyncFlatMapSequence.Iterator()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for AsyncFlatMapSequence.Iterator()
{
  return type metadata completion function for AsyncFlatMapSequence.Iterator();
}

{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AsyncFlatMapSequence.Iterator(uint64_t *a1, uint64_t *a2)
{
  return initializeBufferWithCopyOfBuffer for AsyncFlatMapSequence.Iterator(a1, a2);
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  unsigned int (*v19)(const void *, uint64_t, uint64_t);
  uint64_t v20;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  if (*(_DWORD *)(v8 + 84))
    v10 = *(_QWORD *)(v8 + 64);
  else
    v10 = *(_QWORD *)(v8 + 64) + 1;
  v11 = v9 | *(_DWORD *)(v5 + 80) & 0xF8;
  if (((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0
    || (((v9 + ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & ~v9) + v10 + 1 <= 0x18 ? (v12 = v11 > 7) : (v12 = 1), v12))
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + (((v11 | 7) + 16) & ~(unint64_t)(v11 | 7)));
    swift_retain();
  }
  else
  {
    v13 = v7;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    v14 = (_QWORD *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v15 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v16 = v15[1];
    *v14 = *v15;
    v14[1] = v16;
    v17 = (void *)(((unint64_t)v14 + v9 + 16) & ~v9);
    v18 = (const void *)(((unint64_t)v15 + v9 + 16) & ~v9);
    v19 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
    swift_retain();
    if (v19(v18, 1, v13))
    {
      memcpy(v17, v18, v10);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v17, v18, v13);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v17, 0, 1, v13);
    }
    *((_BYTE *)v17 + v10) = *((_BYTE *)v18 + v10);
  }
  return a1;
}

uint64_t destroy for AsyncFlatMapSequence.Iterator(uint64_t a1)
{
  return destroy for AsyncFlatMapSequence.Iterator(a1);
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
  v4 = (a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  v5 = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v4 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v7, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v6 + 8))(v7, v5);
  return result;
}

uint64_t initializeWithCopy for AsyncFlatMapSequence.Iterator(uint64_t a1, uint64_t a2)
{
  return initializeWithCopy for AsyncFlatMapSequence.Iterator(a1, a2);
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  unsigned int (*v15)(const void *, uint64_t, uint64_t);
  int v16;
  uint64_t v17;
  size_t v18;
  uint64_t v19;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  v10 = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (void *)(((unint64_t)v7 + v12 + 16) & ~v12);
  v14 = (const void *)(((unint64_t)v8 + v12 + 16) & ~v12);
  v15 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  swift_retain();
  if (v15(v14, 1, v10))
  {
    v16 = *(_DWORD *)(v11 + 84);
    v17 = *(_QWORD *)(v11 + 64);
    if (v16)
      v18 = *(_QWORD *)(v11 + 64);
    else
      v18 = v17 + 1;
    memcpy(v13, v14, v18);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v13, v14, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
    v16 = *(_DWORD *)(v11 + 84);
    v17 = *(_QWORD *)(v11 + 64);
  }
  if (v16)
    v19 = v17;
  else
    v19 = v17 + 1;
  *((_BYTE *)v13 + v19) = *((_BYTE *)v14 + v19);
  return a1;
}

uint64_t assignWithCopy for AsyncFlatMapSequence.Iterator(uint64_t a1, uint64_t a2)
{
  return assignWithCopy for AsyncFlatMapSequence.Iterator(a1, a2);
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t (*v15)(void *, uint64_t, uint64_t);
  int v16;
  size_t v17;
  uint64_t v18;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  v10 = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (void *)(((unint64_t)v7 + v12 + 16) & ~v12);
  v14 = (void *)(((unint64_t)v8 + v12 + 16) & ~v12);
  v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  LODWORD(a2) = v15(v13, 1, v10);
  v16 = v15(v14, 1, v10);
  if ((_DWORD)a2)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v13, v14, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 24))(v13, v14, v10);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v13, v10);
  }
  if (*(_DWORD *)(v11 + 84))
    v17 = *(_QWORD *)(v11 + 64);
  else
    v17 = *(_QWORD *)(v11 + 64) + 1;
  memcpy(v13, v14, v17);
LABEL_10:
  if (*(_DWORD *)(v11 + 84))
    v18 = *(_QWORD *)(v11 + 64);
  else
    v18 = *(_QWORD *)(v11 + 64) + 1;
  *((_BYTE *)v13 + v18) = *((_BYTE *)v14 + v18);
  return a1;
}

uint64_t initializeWithTake for AsyncFlatMapSequence.Iterator(uint64_t a1, uint64_t a2)
{
  return initializeWithTake for AsyncFlatMapSequence.Iterator(a1, a2);
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  int v14;
  size_t v15;
  size_t v16;
  size_t v17;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (void *)(((unint64_t)v7 + v11 + 16) & ~v11);
  v13 = (const void *)(((unint64_t)v8 + v11 + 16) & ~v11);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v13, 1, v9))
  {
    v14 = *(_DWORD *)(v10 + 84);
    v15 = *(_QWORD *)(v10 + 64);
    if (v14)
      v16 = v15;
    else
      v16 = v15 + 1;
    memcpy(v12, v13, v16);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v12, v13, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v12, 0, 1, v9);
    v14 = *(_DWORD *)(v10 + 84);
    v15 = *(_QWORD *)(v10 + 64);
  }
  if (v14)
    v17 = v15;
  else
    v17 = v15 + 1;
  *((_BYTE *)v12 + v17) = *((_BYTE *)v13 + v17);
  return a1;
}

uint64_t assignWithTake for AsyncFlatMapSequence.Iterator(uint64_t a1, uint64_t a2)
{
  return assignWithTake for AsyncFlatMapSequence.Iterator(a1, a2);
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t (*v14)(void *, uint64_t, uint64_t);
  int v15;
  size_t v16;
  uint64_t v17;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  swift_release();
  v9 = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (void *)(((unint64_t)v7 + v11 + 16) & ~v11);
  v13 = (void *)(((unint64_t)v8 + v11 + 16) & ~v11);
  v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  LODWORD(v8) = v14(v12, 1, v9);
  v15 = v14(v13, 1, v9);
  if ((_DWORD)v8)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v12, v13, v9);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v12, 0, 1, v9);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v12, v13, v9);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  }
  if (*(_DWORD *)(v10 + 84))
    v16 = *(_QWORD *)(v10 + 64);
  else
    v16 = *(_QWORD *)(v10 + 64) + 1;
  memcpy(v12, v13, v16);
LABEL_10:
  if (*(_DWORD *)(v10 + 84))
    v17 = *(_QWORD *)(v10 + 64);
  else
    v17 = *(_QWORD *)(v10 + 64) + 1;
  *((_BYTE *)v12 + v17) = *((_BYTE *)v13 + v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncFlatMapSequence.Iterator(uint64_t a1, unsigned int a2)
{
  return getEnumTagSinglePayload for AsyncFlatMapSequence.Iterator(a1, a2);
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  unint64_t *v21;
  unint64_t v22;
  unsigned int v23;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  v7 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (!v8)
    v9 = 0;
  if (v6 <= v9)
    v10 = v9;
  else
    v10 = v6;
  if (v10 <= 0x7FFFFFFF)
    v11 = 0x7FFFFFFF;
  else
    v11 = v10;
  if (v8)
    v12 = 1;
  else
    v12 = 2;
  if (!a2)
    return 0;
  v13 = *(_QWORD *)(v5 + 64);
  v14 = *(unsigned __int8 *)(v7 + 80);
  if (a2 <= v11)
    goto LABEL_31;
  v15 = v12 + *(_QWORD *)(v7 + 64) + ((v14 + ((v13 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & ~v14);
  v16 = 8 * v15;
  if (v15 > 3)
    goto LABEL_15;
  v18 = ((a2 - v11 + ~(-1 << v16)) >> v16) + 1;
  if (HIWORD(v18))
  {
    v17 = *(_DWORD *)(a1 + v15);
    if (v17)
      goto LABEL_22;
LABEL_31:
    if ((_DWORD)v6 == v11)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, v6, AssociatedTypeWitness);
    v21 = (unint64_t *)((a1 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((v10 & 0x80000000) == 0)
    {
      v22 = *v21;
      if (v22 >= 0xFFFFFFFF)
        LODWORD(v22) = -1;
      return (v22 + 1);
    }
    if (v8 >= 2)
    {
      v23 = (*(uint64_t (**)(unint64_t))(v7 + 48))(((unint64_t)v21 + v14 + 16) & ~v14);
      if (v23 >= 2)
        return v23 - 1;
      else
        return 0;
    }
    return 0;
  }
  if (v18 > 0xFF)
  {
    v17 = *(unsigned __int16 *)(a1 + v15);
    if (*(_WORD *)(a1 + v15))
      goto LABEL_22;
    goto LABEL_31;
  }
  if (v18 < 2)
    goto LABEL_31;
LABEL_15:
  v17 = *(unsigned __int8 *)(a1 + v15);
  if (!*(_BYTE *)(a1 + v15))
    goto LABEL_31;
LABEL_22:
  v19 = (v17 - 1) << v16;
  if (v15 > 3)
    v19 = 0;
  if ((_DWORD)v15)
  {
    if (v15 <= 3)
      v20 = v15;
    else
      v20 = 4;
    __asm { BR              X12 }
  }
  return v11 + v19 + 1;
}

void storeEnumTagSinglePayload for AsyncFlatMapSequence.Iterator(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  storeEnumTagSinglePayload for AsyncFlatMapSequence.Iterator(a1, a2, a3);
}

{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  size_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = 0u;
  v9 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v10 = *(_DWORD *)(v9 + 84);
  v11 = v10 - 1;
  if (!v10)
    v11 = 0;
  if (v7 > v11)
    v11 = v7;
  if (v11 <= 0x7FFFFFFF)
    v12 = 0x7FFFFFFF;
  else
    v12 = v11;
  v13 = 1;
  if (!v10)
    v13 = 2;
  v14 = v13
      + *(_QWORD *)(v9 + 64)
      + ((*(unsigned __int8 *)(v9 + 80) + ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  if (a3 > v12)
  {
    if (v14 > 3)
    {
      v8 = 1u;
      if (v12 >= a2)
LABEL_26:
        __asm { BR              X16 }
LABEL_19:
      v16 = ~v12 + a2;
      if (v14 < 4)
      {
        if ((_DWORD)v14)
        {
          v17 = v16 & ~(-1 << (8 * v14));
          bzero(a1, v14);
          if ((_DWORD)v14 == 3)
          {
            *(_WORD *)a1 = v17;
            a1[2] = BYTE2(v17);
          }
          else if ((_DWORD)v14 == 2)
          {
            *(_WORD *)a1 = v17;
          }
          else
          {
            *a1 = v17;
          }
        }
      }
      else
      {
        bzero(a1, v14);
        *(_DWORD *)a1 = v16;
      }
      __asm { BR              X10 }
    }
    v15 = ((a3 - v12 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
    if (HIWORD(v15))
    {
      v8 = 4u;
      if (v12 >= a2)
        goto LABEL_26;
      goto LABEL_19;
    }
    if (v15 >= 0x100)
      v8 = 2;
    else
      v8 = v15 > 1;
  }
  if (v12 >= a2)
    goto LABEL_26;
  goto LABEL_19;
}

uint64_t dispatch thunk of AsyncIteratorProtocol.next()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int *v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v7 = *(int **)(a3 + 32);
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v7 + *v7);
  v8 = (_QWORD *)swift_task_alloc(v7[1]);
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = static Task<>.sleep<A>(until:tolerance:clock:);
  return v10(a1, a2, a3);
}

uint64_t _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int *v13;
  _QWORD *v14;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v13 = *(int **)(a6 + 40);
  v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v13 + *v13);
  v14 = (_QWORD *)swift_task_alloc(v13[1]);
  *(_QWORD *)(v6 + 16) = v14;
  *v14 = v6;
  v14[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCompactMapSequence<A, B>.Iterator;
  return v16(a1, a2, a3, a4, a5, a6);
}

uint64_t type metadata completion function for AsyncCompactMapSequence.Iterator()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AsyncCompactMapSequence.Iterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    v10 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = v10[1];
    v12 = (_QWORD *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v12 = *v10;
    v12[1] = v11;
  }
  swift_retain();
  return a1;
}

uint64_t initializeWithCopy for AsyncCompactMapSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AsyncCompactMapSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for AsyncCompactMapSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
  *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for AsyncCompactMapSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
  *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncCompactMapSequence.Iterator(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 < a2)
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    __asm { BR              X15 }
  }
  if (v5 >= 0x7FFFFFFF)
    return (*(uint64_t (**)(uint64_t))(v4 + 48))(a1);
  v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  return (v12 + 1);
}

void storeEnumTagSinglePayload for AsyncCompactMapSequence.Iterator(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) <= 0x7FFFFFFFu)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v10 = 0u;
    if (a2 <= v7)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v8 = a3 - v7 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v7)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v11 = ~v7 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_18D5A1F74()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18D5A1FF0);
}

void sub_18D5A1F7C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x18D5A1F84);
  JUMPOUT(0x18D5A1FF0);
}

void sub_18D5A1FC8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18D5A1FF0);
}

void sub_18D5A1FD0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18D5A1FF0);
}

uint64_t sub_18D5A1FD8@<X0>(unsigned int a1@<W2>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v3 + v5) = 0;
  if (!(_DWORD)v4)
    JUMPOUT(0x18D5A1FF0);
  if (a1 < 0x7FFFFFFF)
  {
    if ((v4 & 0x80000000) == 0)
      JUMPOUT(0x18D5A1FECLL);
    JUMPOUT(0x18D5A1FE4);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(v3, v4);
}

uint64_t *initializeBufferWithCopyOfBuffer for AsyncDropFirstSequence(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t destroy for AsyncPrefixSequence(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
}

uint64_t initializeWithCopy for AsyncDropFirstSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithCopy for AsyncDropFirstSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for AsyncDropFirstSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for AsyncDropFirstSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncDropFirstSequence(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 >= a2)
  {
    if (v5)
      return (*(uint64_t (**)(void))(v4 + 48))();
    return 0;
  }
  if (((((*(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
    v6 = 2;
  else
    v6 = a2 - v5 + 1;
  if (v6 >= 0x10000)
    v7 = 4;
  else
    v7 = 2;
  if (v6 < 0x100)
    v7 = 1;
  if (v6 >= 2)
    v8 = v7;
  else
    v8 = 0;
  return ((uint64_t (*)(void))((char *)&loc_18D5A22A8 + 4 * byte_18D5BC64A[v8]))();
}

void storeEnumTagSinglePayload for AsyncDropFirstSequence(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v11 = 0u;
    if (a2 <= v7)
      goto LABEL_14;
  }
  else
  {
    v8 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v9 = v8 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_14:
      __asm { BR              X11 }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_18D5A23E8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_18D5A23F0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18D5A23F8);
}

void sub_18D5A2414()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_18D5A241C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_18D5A2424(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v4 + v5) = 0;
  if (!a2)
    JUMPOUT(0x18D5A242CLL);
  return (*(uint64_t (**)(uint64_t))(v3 + 56))(v4);
}

uint64_t *initializeBufferWithCopyOfBuffer for AsyncDropFirstSequence.Iterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    *(_QWORD *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
  }
  return a1;
}

uint64_t destroy for AsyncDropFirstSequence.Iterator(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

uint64_t initializeWithCopy for AsyncDropFirstSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithCopy for AsyncDropFirstSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for AsyncDropFirstSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for AsyncDropFirstSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncDropFirstSequence.Iterator(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (!a2)
    return 0;
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (v6 < a2)
  {
    if (((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v7 = 2;
    else
      v7 = a2 - v6 + 1;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    __asm { BR              X13 }
  }
  if ((_DWORD)v6)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, v6, AssociatedTypeWitness);
  else
    return 0;
}

void storeEnumTagSinglePayload for AsyncDropFirstSequence.Iterator(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v10 = 0u;
    if (a2 <= v7)
      goto LABEL_14;
  }
  else
  {
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v8 = a3 - v7 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v7)
LABEL_14:
      __asm { BR              X11 }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v11 = ~v7 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_18D5A29C8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_18D5A29D0()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x18D5A29D8);
}

void sub_18D5A29F8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_18D5A2A00()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_18D5A2A08@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v2 + v4) = 0;
  if (!(_DWORD)v3)
    JUMPOUT(0x18D5A2A10);
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 56))(v2, v3);
}

uint64_t type metadata completion function for AsyncPrefixWhileSequence.Iterator()
{
  return type metadata completion function for AsyncPrefixWhileSequence.Iterator();
}

{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AsyncPrefixWhileSequence.Iterator(uint64_t *a1, uint64_t *a2)
{
  return initializeBufferWithCopyOfBuffer for AsyncPrefixWhileSequence.Iterator(a1, a2);
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64) + 7;
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v7 + ((v6 + 1) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
  }
  else
  {
    v11 = ~v6;
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v12 = (char *)a1 + v6;
    v13 = (char *)a2 + v6;
    v14 = (unint64_t)(v12 + 1) & v11;
    v15 = (unint64_t)(v13 + 1) & v11;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v14, v15, AssociatedTypeWitness);
    v16 = (_QWORD *)((v7 + v15) & 0xFFFFFFFFFFFFFFF8);
    v17 = v16[1];
    v18 = (_QWORD *)((v7 + v14) & 0xFFFFFFFFFFFFFFF8);
    *v18 = *v16;
    v18[1] = v17;
  }
  swift_retain();
  return a1;
}

uint64_t destroy for AsyncPrefixWhileSequence.Iterator(uint64_t a1)
{
  return destroy for AsyncPrefixWhileSequence.Iterator(a1);
}

{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80), AssociatedTypeWitness);
  return swift_release();
}

_BYTE *initializeWithCopy for AsyncPrefixWhileSequence.Iterator(_BYTE *a1, _BYTE *a2)
{
  return initializeWithCopy for AsyncPrefixWhileSequence.Iterator(a1, a2);
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  *a1 = *a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (unint64_t)&a1[v6 + 1] & ~v6;
  v8 = (unint64_t)&a2[v6 + 1] & ~v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v7, v8, AssociatedTypeWitness);
  v9 = *(_QWORD *)(v5 + 64) + 7;
  v10 = (_QWORD *)((v9 + v7) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_QWORD *)((v9 + v8) & 0xFFFFFFFFFFFFFFF8);
  v12 = v11[1];
  *v10 = *v11;
  v10[1] = v12;
  swift_retain();
  return a1;
}

_BYTE *assignWithCopy for AsyncPrefixWhileSequence.Iterator(_BYTE *a1, _BYTE *a2)
{
  return assignWithCopy for AsyncPrefixWhileSequence.Iterator(a1, a2);
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  *a1 = *a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (unint64_t)&a1[v6 + 1] & ~v6;
  v8 = (unint64_t)&a2[v6 + 1] & ~v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(v7, v8, AssociatedTypeWitness);
  v9 = *(_QWORD *)(v5 + 64) + 7;
  v10 = (_QWORD *)((v9 + v7) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_QWORD *)((v9 + v8) & 0xFFFFFFFFFFFFFFF8);
  v12 = v11[1];
  *v10 = *v11;
  v10[1] = v12;
  swift_retain();
  swift_release();
  return a1;
}

_BYTE *initializeWithTake for AsyncPrefixWhileSequence.Iterator(_BYTE *a1, _BYTE *a2)
{
  return initializeWithTake for AsyncPrefixWhileSequence.Iterator(a1, a2);
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = *a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (unint64_t)&a1[v6 + 1] & ~v6;
  v8 = (unint64_t)&a2[v6 + 1] & ~v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v7, v8, AssociatedTypeWitness);
  *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + v7) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + v8) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_BYTE *assignWithTake for AsyncPrefixWhileSequence.Iterator(_BYTE *a1, _BYTE *a2)
{
  return assignWithTake for AsyncPrefixWhileSequence.Iterator(a1, a2);
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = *a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (unint64_t)&a1[v6 + 1] & ~v6;
  v8 = (unint64_t)&a2[v6 + 1] & ~v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(v7, v8, AssociatedTypeWitness);
  *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + v7) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + v8) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncPrefixWhileSequence.Iterator(uint64_t a1, unsigned int a2)
{
  return getEnumTagSinglePayload for AsyncPrefixWhileSequence.Iterator(a1, a2);
}

{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  if (v6 < a2)
  {
    if (((((v8 + ((v7 + 1) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v9 = 2;
    else
      v9 = a2 - v6 + 1;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    __asm { BR              X16 }
  }
  v13 = (a1 + v7 + 1) & ~v7;
  if (v5 >= 0x7FFFFFFF)
    return (*(uint64_t (**)(uint64_t))(v4 + 48))(v13);
  v14 = *(_QWORD *)((v8 + v13) & 0xFFFFFFFFFFFFF8);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

void storeEnumTagSinglePayload for AsyncPrefixWhileSequence.Iterator(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  storeEnumTagSinglePayload for AsyncPrefixWhileSequence.Iterator(a1, a2, a3);
}

{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) <= 0x7FFFFFFFu)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v10 = 0u;
    if (a2 <= v7)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v6 + 64) + 7 + ((*(unsigned __int8 *)(v6 + 80) + 1) & ~*(unsigned __int8 *)(v6 + 80))) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v8 = a3 - v7 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v7)
LABEL_17:
      __asm { BR              X14 }
  }
  if (((*(_DWORD *)(v6 + 64) + 7 + ((*(unsigned __int8 *)(v6 + 80) + 1) & ~*(unsigned __int8 *)(v6 + 80))) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v11 = ~v7 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64)+ 7+ ((*(unsigned __int8 *)(v6 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & 0xFFFFFFFFFFFFFFF8)+ 16);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

uint64_t dispatch thunk of AsyncSequence.makeAsyncIterator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t destroy for AsyncThrowingCompactMapSequence.Iterator(uint64_t a1)
{
  return destroy for AsyncCompactMapSequence.Iterator(a1);
}

uint64_t type metadata completion function for AsyncThrowingDropWhileSequence.Iterator()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AsyncThrowingDropWhileSequence.Iterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 18 > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    v10 = ((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v12 = *(_QWORD *)(v11 + 8);
    *(_QWORD *)v10 = *(_QWORD *)v11;
    *(_QWORD *)(v10 + 8) = v12;
    *(_BYTE *)(v10 + 16) = *(_BYTE *)(v11 + 16);
    *(_BYTE *)(v10 + 17) = *(_BYTE *)(v11 + 17);
  }
  swift_retain();
  return a1;
}

uint64_t destroy for AsyncThrowingDropWhileSequence.Iterator(uint64_t a1)
{
  return destroy for AsyncFilterSequence.Iterator(a1);
}

uint64_t initializeWithCopy for AsyncThrowingDropWhileSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(v8 + 8);
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_QWORD *)(v7 + 8) = v9;
  *(_BYTE *)(v7 + 16) = *(_BYTE *)(v8 + 16);
  *(_BYTE *)(v7 + 17) = *(_BYTE *)(v8 + 17);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AsyncThrowingDropWhileSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(v8 + 8);
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_QWORD *)(v7 + 8) = v9;
  swift_retain();
  swift_release();
  *(_BYTE *)(v7 + 16) = *(_BYTE *)(v8 + 16);
  *(_BYTE *)(v7 + 17) = *(_BYTE *)(v8 + 17);
  return a1;
}

uint64_t initializeWithTake for AsyncThrowingDropWhileSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v7 = *(_OWORD *)v8;
  *(_BYTE *)(v7 + 16) = *(_BYTE *)(v8 + 16);
  *(_BYTE *)(v7 + 17) = *(_BYTE *)(v8 + 17);
  return a1;
}

uint64_t assignWithTake for AsyncThrowingDropWhileSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v7 = *(_OWORD *)v8;
  swift_release();
  *(_BYTE *)(v7 + 16) = *(_BYTE *)(v8 + 16);
  *(_BYTE *)(v7 + 17) = *(_BYTE *)(v8 + 17);
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncThrowingDropWhileSequence.Iterator(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v13;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 < a2)
  {
    v8 = ((v7 + 7) & 0xFFFFFFF8) + 18;
    if (v8 <= 3)
      v9 = ((a2 - v6 + 0xFFFF) >> (8 * v8)) + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    __asm { BR              X15 }
  }
  if (v5 >= 0x7FFFFFFF)
    return (*(uint64_t (**)(uint64_t))(v4 + 48))(a1);
  v13 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
  if (v13 >= 0xFFFFFFFF)
    LODWORD(v13) = -1;
  return (v13 + 1);
}

void storeEnumTagSinglePayload for AsyncThrowingDropWhileSequence.Iterator(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) <= 0x7FFFFFFFu)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 18;
  if (v7 >= a3)
  {
    v11 = 0u;
    if (v7 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v8 <= 3)
      v9 = ((a3 - v7 + 0xFFFF) >> (8 * v8)) + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (v7 >= a2)
LABEL_17:
      __asm { BR              X12 }
  }
  v12 = ~v7 + a2;
  bzero(a1, v8);
  if (v8 > 3)
    *a1 = v12;
  else
    *(_WORD *)a1 = v12;
  __asm { BR              X11 }
}

void sub_18D5A3164(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + v2) = a1;
  JUMPOUT(0x18D5A31E0);
}

void sub_18D5A316C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x18D5A3174);
  JUMPOUT(0x18D5A31E0);
}

void sub_18D5A31B8(__int16 a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_WORD *)(v1 + v2) = a1;
  JUMPOUT(0x18D5A31E0);
}

void sub_18D5A31C0(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = a1;
  JUMPOUT(0x18D5A31E0);
}

uint64_t sub_18D5A31C8@<X0>(unsigned int a1@<W2>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v3 + v5) = 0;
  if (!(_DWORD)v4)
    JUMPOUT(0x18D5A31E0);
  if (a1 < 0x7FFFFFFF)
  {
    if ((v4 & 0x80000000) == 0)
      JUMPOUT(0x18D5A31DCLL);
    JUMPOUT(0x18D5A31D4);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(v3, v4);
}

uint64_t type metadata completion function for AsyncThrowingFilterSequence.Iterator()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AsyncThrowingFilterSequence.Iterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 17 > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    v10 = ((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v12 = *(_QWORD *)(v11 + 8);
    *(_QWORD *)v10 = *(_QWORD *)v11;
    *(_QWORD *)(v10 + 8) = v12;
    *(_BYTE *)(v10 + 16) = *(_BYTE *)(v11 + 16);
  }
  swift_retain();
  return a1;
}

uint64_t initializeWithCopy for AsyncThrowingFilterSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(v8 + 8);
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_QWORD *)(v7 + 8) = v9;
  *(_BYTE *)(v7 + 16) = *(_BYTE *)(v8 + 16);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AsyncThrowingFilterSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(v8 + 8);
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_QWORD *)(v7 + 8) = v9;
  swift_retain();
  swift_release();
  *(_BYTE *)(v7 + 16) = *(_BYTE *)(v8 + 16);
  return a1;
}

uint64_t initializeWithTake for AsyncThrowingFilterSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v7 = *(_OWORD *)v8;
  *(_BYTE *)(v7 + 16) = *(_BYTE *)(v8 + 16);
  return a1;
}

uint64_t assignWithTake for AsyncThrowingFilterSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v7 = *(_OWORD *)v8;
  swift_release();
  *(_BYTE *)(v7 + 16) = *(_BYTE *)(v8 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncThrowingFilterSequence.Iterator(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v13;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 < a2)
  {
    v8 = ((v7 + 7) & 0xFFFFFFF8) + 17;
    if (v8 < 4)
      v9 = ((a2 - v6 + 255) >> (8 * v8)) + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    __asm { BR              X15 }
  }
  if (v5 >= 0x7FFFFFFF)
    return (*(uint64_t (**)(uint64_t))(v4 + 48))(a1);
  v13 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
  if (v13 >= 0xFFFFFFFF)
    LODWORD(v13) = -1;
  return (v13 + 1);
}

void storeEnumTagSinglePayload for AsyncThrowingFilterSequence.Iterator(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) <= 0x7FFFFFFFu)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 17;
  if (v7 >= a3)
  {
    v11 = 0u;
    if (v7 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v8 <= 3)
      v9 = ((a3 - v7 + 255) >> (8 * v8)) + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (v7 >= a2)
LABEL_17:
      __asm { BR              X12 }
  }
  v12 = ~v7 + a2;
  v13 = (~(_BYTE)v7 + a2);
  if (v8 >= 4)
    v14 = v12;
  else
    v14 = v13;
  bzero(a1, v8);
  if ((_DWORD)v8 == 1)
    *a1 = v14;
  else
    *(_DWORD *)a1 = v14;
  __asm { BR              X10 }
}

void sub_18D5A3890()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
  JUMPOUT(0x18D5A390CLL);
}

void sub_18D5A3898()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x18D5A38A0);
  JUMPOUT(0x18D5A390CLL);
}

void sub_18D5A38E4()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
  JUMPOUT(0x18D5A390CLL);
}

void sub_18D5A38EC()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = v1;
  JUMPOUT(0x18D5A390CLL);
}

uint64_t sub_18D5A38F4@<X0>(unsigned int a1@<W2>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v3 + v5) = 0;
  if (!(_DWORD)v4)
    JUMPOUT(0x18D5A390CLL);
  if (a1 < 0x7FFFFFFF)
  {
    if ((v4 & 0x80000000) == 0)
      JUMPOUT(0x18D5A3908);
    JUMPOUT(0x18D5A3900);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(v3, v4);
}

uint64_t type metadata completion function for AsyncFlatMapSequence()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for AsyncThrowingFlatMapSequence.Iterator()
{
  return type metadata completion function for AsyncFlatMapSequence.Iterator();
}

uint64_t *initializeBufferWithCopyOfBuffer for AsyncThrowingFlatMapSequence.Iterator(uint64_t *a1, uint64_t *a2)
{
  return initializeBufferWithCopyOfBuffer for AsyncFlatMapSequence.Iterator(a1, a2);
}

uint64_t destroy for AsyncThrowingFlatMapSequence.Iterator(uint64_t a1)
{
  return destroy for AsyncFlatMapSequence.Iterator(a1);
}

uint64_t initializeWithCopy for AsyncThrowingFlatMapSequence.Iterator(uint64_t a1, uint64_t a2)
{
  return initializeWithCopy for AsyncFlatMapSequence.Iterator(a1, a2);
}

uint64_t assignWithCopy for AsyncThrowingFlatMapSequence.Iterator(uint64_t a1, uint64_t a2)
{
  return assignWithCopy for AsyncFlatMapSequence.Iterator(a1, a2);
}

uint64_t initializeWithTake for AsyncThrowingFlatMapSequence.Iterator(uint64_t a1, uint64_t a2)
{
  return initializeWithTake for AsyncFlatMapSequence.Iterator(a1, a2);
}

uint64_t assignWithTake for AsyncThrowingFlatMapSequence.Iterator(uint64_t a1, uint64_t a2)
{
  return assignWithTake for AsyncFlatMapSequence.Iterator(a1, a2);
}

uint64_t getEnumTagSinglePayload for AsyncThrowingFlatMapSequence.Iterator(uint64_t a1, unsigned int a2)
{
  return getEnumTagSinglePayload for AsyncFlatMapSequence.Iterator(a1, a2);
}

void storeEnumTagSinglePayload for AsyncThrowingFlatMapSequence.Iterator(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  storeEnumTagSinglePayload for AsyncFlatMapSequence.Iterator(a1, a2, a3);
}

void sub_18D5A4830()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
  JUMPOUT(0x18D5A4854);
}

void sub_18D5A4838()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
  JUMPOUT(0x18D5A4854);
}

void sub_18D5A4840()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = v1;
  JUMPOUT(0x18D5A4854);
}

uint64_t type metadata completion function for AsyncCompactMapSequence()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for AsyncThrowingCompactMapSequence.Iterator()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AsyncThrowingCompactMapSequence.Iterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 17 > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    v10 = ((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v12 = *(_QWORD *)(v11 + 8);
    *(_QWORD *)v10 = *(_QWORD *)v11;
    *(_QWORD *)(v10 + 8) = v12;
    *(_BYTE *)(v10 + 16) = *(_BYTE *)(v11 + 16);
  }
  swift_retain();
  return a1;
}

uint64_t initializeWithCopy for AsyncThrowingCompactMapSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(v8 + 8);
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_QWORD *)(v7 + 8) = v9;
  *(_BYTE *)(v7 + 16) = *(_BYTE *)(v8 + 16);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AsyncThrowingCompactMapSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(v8 + 8);
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_QWORD *)(v7 + 8) = v9;
  swift_retain();
  swift_release();
  *(_BYTE *)(v7 + 16) = *(_BYTE *)(v8 + 16);
  return a1;
}

uint64_t initializeWithTake for AsyncThrowingCompactMapSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v7 = *(_OWORD *)v8;
  *(_BYTE *)(v7 + 16) = *(_BYTE *)(v8 + 16);
  return a1;
}

uint64_t assignWithTake for AsyncThrowingCompactMapSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v7 = *(_OWORD *)v8;
  swift_release();
  *(_BYTE *)(v7 + 16) = *(_BYTE *)(v8 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncThrowingCompactMapSequence.Iterator(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v13;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 < a2)
  {
    v8 = ((v7 + 7) & 0xFFFFFFF8) + 17;
    if (v8 < 4)
      v9 = ((a2 - v6 + 255) >> (8 * v8)) + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    __asm { BR              X15 }
  }
  if (v5 >= 0x7FFFFFFF)
    return (*(uint64_t (**)(uint64_t))(v4 + 48))(a1);
  v13 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
  if (v13 >= 0xFFFFFFFF)
    LODWORD(v13) = -1;
  return (v13 + 1);
}

void storeEnumTagSinglePayload for AsyncThrowingCompactMapSequence.Iterator(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) <= 0x7FFFFFFFu)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 17;
  if (v7 >= a3)
  {
    v11 = 0u;
    if (v7 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v8 <= 3)
      v9 = ((a3 - v7 + 255) >> (8 * v8)) + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (v7 >= a2)
LABEL_17:
      __asm { BR              X12 }
  }
  v12 = ~v7 + a2;
  v13 = (~(_BYTE)v7 + a2);
  if (v8 >= 4)
    v14 = v12;
  else
    v14 = v13;
  bzero(a1, v8);
  if ((_DWORD)v8 == 1)
    *a1 = v14;
  else
    *(_DWORD *)a1 = v14;
  __asm { BR              X10 }
}

void sub_18D5A4FA8()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
  JUMPOUT(0x18D5A5024);
}

void sub_18D5A4FB0()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x18D5A4FB8);
  JUMPOUT(0x18D5A5024);
}

void sub_18D5A4FFC()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
  JUMPOUT(0x18D5A5024);
}

void sub_18D5A5004()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = v1;
  JUMPOUT(0x18D5A5024);
}

uint64_t sub_18D5A500C@<X0>(unsigned int a1@<W2>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v3 + v5) = 0;
  if (!(_DWORD)v4)
    JUMPOUT(0x18D5A5024);
  if (a1 < 0x7FFFFFFF)
  {
    if ((v4 & 0x80000000) == 0)
      JUMPOUT(0x18D5A5020);
    JUMPOUT(0x18D5A5018);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(v3, v4);
}

uint64_t *initializeBufferWithCopyOfBuffer for AsyncCompactMapSequence(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = v10[1];
    v12 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v12 = *v10;
    v12[1] = v11;
  }
  swift_retain();
  return v4;
}

uint64_t destroy for AsyncCompactMapSequence(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  return swift_release();
}

uint64_t initializeWithCopy for AsyncCompactMapSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AsyncCompactMapSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for AsyncCompactMapSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for AsyncCompactMapSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncCompactMapSequence(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18D5A53A4 + 4 * byte_18D5BC6A3[v10]))();
  }
}

void storeEnumTagSinglePayload for AsyncCompactMapSequence(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_18D5A551C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18D5A5594);
}

void sub_18D5A5524(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18D5A552CLL);
  JUMPOUT(0x18D5A5594);
}

void sub_18D5A556C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18D5A5594);
}

void sub_18D5A5574()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18D5A5594);
}

uint64_t sub_18D5A557C(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x18D5A5594);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x18D5A5590);
    JUMPOUT(0x18D5A5588);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t type metadata completion function for AsyncThrowingPrefixWhileSequence.Iterator()
{
  return type metadata completion function for AsyncPrefixWhileSequence.Iterator();
}

uint64_t *initializeBufferWithCopyOfBuffer for AsyncThrowingPrefixWhileSequence.Iterator(uint64_t *a1, uint64_t *a2)
{
  return initializeBufferWithCopyOfBuffer for AsyncPrefixWhileSequence.Iterator(a1, a2);
}

uint64_t destroy for AsyncThrowingPrefixWhileSequence.Iterator(uint64_t a1)
{
  return destroy for AsyncPrefixWhileSequence.Iterator(a1);
}

_BYTE *initializeWithCopy for AsyncThrowingPrefixWhileSequence.Iterator(_BYTE *a1, _BYTE *a2)
{
  return initializeWithCopy for AsyncPrefixWhileSequence.Iterator(a1, a2);
}

_BYTE *assignWithCopy for AsyncThrowingPrefixWhileSequence.Iterator(_BYTE *a1, _BYTE *a2)
{
  return assignWithCopy for AsyncPrefixWhileSequence.Iterator(a1, a2);
}

_BYTE *initializeWithTake for AsyncThrowingPrefixWhileSequence.Iterator(_BYTE *a1, _BYTE *a2)
{
  return initializeWithTake for AsyncPrefixWhileSequence.Iterator(a1, a2);
}

_BYTE *assignWithTake for AsyncThrowingPrefixWhileSequence.Iterator(_BYTE *a1, _BYTE *a2)
{
  return assignWithTake for AsyncPrefixWhileSequence.Iterator(a1, a2);
}

uint64_t getEnumTagSinglePayload for AsyncThrowingPrefixWhileSequence.Iterator(uint64_t a1, unsigned int a2)
{
  return getEnumTagSinglePayload for AsyncPrefixWhileSequence.Iterator(a1, a2);
}

void storeEnumTagSinglePayload for AsyncThrowingPrefixWhileSequence.Iterator(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  storeEnumTagSinglePayload for AsyncPrefixWhileSequence.Iterator(a1, a2, a3);
}

void sub_18D5A5D04()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18D5A5D84);
}

void sub_18D5A5D0C()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = 0;
  if (v0)
    JUMPOUT(0x18D5A5D14);
  JUMPOUT(0x18D5A5D84);
}

void sub_18D5A5D5C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18D5A5D84);
}

void sub_18D5A5D64()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18D5A5D84);
}

uint64_t sub_18D5A5D6C@<X0>(unsigned int a1@<W2>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!(_DWORD)v5)
    JUMPOUT(0x18D5A5D84);
  if (a1 < 0x7FFFFFFF)
  {
    if ((v5 & 0x80000000) == 0)
      JUMPOUT(0x18D5A5D80);
    JUMPOUT(0x18D5A5D78);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))((v6 + v3 + 1) & v4, v5);
}

uint64_t dispatch thunk of static GlobalActor.shared.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static GlobalActor.sharedUnownedExecutor.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t type metadata accessor for MainActor()
{
  return objc_opt_self();
}

uint64_t method lookup function for MainActor()
{
  return swift_lookUpClassMethod();
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

ValueMetadata *type metadata accessor for UnownedJob()
{
  return &type metadata for UnownedJob;
}

void *type metadata accessor for Job()
{
  return &type metadata for Job;
}

void *type metadata accessor for ExecutorJob()
{
  return &type metadata for ExecutorJob;
}

ValueMetadata *type metadata accessor for JobPriority()
{
  return &type metadata for JobPriority;
}

uint64_t getEnumTagSinglePayload for UnownedJob(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 8))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UnownedJob(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 8) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for UnsafeContinuation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UnsafeContinuation);
}

uint64_t type metadata accessor for Task(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Task);
}

ValueMetadata *type metadata accessor for TaskPriority()
{
  return &type metadata for TaskPriority;
}

ValueMetadata *type metadata accessor for UnsafeCurrentTask()
{
  return &type metadata for UnsafeCurrentTask;
}

ValueMetadata *type metadata accessor for CancellationError()
{
  return &type metadata for CancellationError;
}

uint64_t type metadata instantiation function for TaskGroup()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t type metadata accessor for TaskGroup.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TaskGroup.Iterator);
}

uint64_t getEnumTagSinglePayload for TaskGroup.Iterator(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TaskGroup.Iterator(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

uint64_t type metadata accessor for ThrowingTaskGroup.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ThrowingTaskGroup.Iterator);
}

ValueMetadata *type metadata accessor for DiscardingTaskGroup()
{
  return &type metadata for DiscardingTaskGroup;
}

uint64_t getEnumTagSinglePayload for TaskGroup(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 2);
  if (*(_QWORD *)a1)
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for TaskGroup(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_QWORD *)result = a2 - 2;
    if (a3 >= 2)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = 0;
  }
  return result;
}

uint64_t type metadata accessor for ThrowingDiscardingTaskGroup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ThrowingDiscardingTaskGroup);
}

uint64_t type metadata accessor for TaskLocal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TaskLocal);
}

uint64_t method lookup function for TaskLocal()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TaskLocal.__allocating_init(wrappedValue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t type metadata completion function for AsyncStream._Storage()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata completion function for AsyncThrowingStream._Storage(uint64_t *a1)
{
  uint64_t result;
  unint64_t v2;

  result = type metadata accessor for AsyncThrowingStream._Storage.State(319, a1[10], a1[11], a1[12]);
  if (v2 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for AsyncThrowingStream._Storage.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncThrowingStream._Storage.State);
}

uint64_t type metadata completion function for TaskLocal()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for AsyncStream(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncStream);
}

uint64_t type metadata accessor for AsyncStream.Continuation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncStream.Continuation);
}

uint64_t type metadata instantiation function for AsyncStream.Continuation.Termination()
{
  return swift_allocateGenericValueMetadata();
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for AsyncStream.Continuation.Termination(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AsyncStream.Continuation.Termination(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_18D5A62D4 + 4 * byte_18D5BC6C6[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18D5A6308 + 4 * byte_18D5BC6C1[v4]))();
}

uint64_t sub_18D5A6308(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18D5A6310(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18D5A6318);
  return result;
}

uint64_t sub_18D5A6324(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18D5A632CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_18D5A6330(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18D5A6338(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for AsyncStream.Continuation.Termination(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for AsyncStream.Continuation.Termination(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

uint64_t type metadata accessor for AsyncStream.Continuation.Termination(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncStream.Continuation.Termination);
}

uint64_t type metadata accessor for AsyncStream.Continuation.YieldResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncStream.Continuation.YieldResult);
}

uint64_t getEnumTag for AsyncStream.Continuation.BufferingPolicy(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t destructiveInjectEnumTag for AsyncStream.Continuation.BufferingPolicy(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

uint64_t type metadata accessor for AsyncStream.Continuation.BufferingPolicy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncStream.Continuation.BufferingPolicy);
}

uint64_t type metadata completion function for AsyncStream._Context()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for AsyncStream.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncStream.Iterator);
}

uint64_t type metadata accessor for AsyncThrowingStream(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncThrowingStream);
}

uint64_t type metadata accessor for AsyncThrowingStream.Continuation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncThrowingStream.Continuation);
}

uint64_t type metadata completion function for AsyncThrowingStream.Continuation.Termination()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AsyncThrowingStream.Continuation.Termination(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v13;
  int v14;
  int v15;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7)
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v6 + 64) + 1;
  if (v7 >= 2)
    v9 = v8;
  else
    v9 = v8 + 1;
  v10 = *(_DWORD *)(v6 + 80);
  if (v10 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v9 > 0x18)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v10 + 16) & ~v10));
    swift_retain();
  }
  else
  {
    if (v7 > 1)
    {
      if ((*(unsigned int (**)(uint64_t *, _QWORD, _QWORD))(v6 + 48))(a2, *(unsigned int *)(v6 + 84), *(_QWORD *)(a3 + 24)) >= 2)
      {
LABEL_32:
        memcpy(a1, a2, v9);
        return a1;
      }
    }
    else if (*((_BYTE *)a2 + v8))
    {
      v14 = (*((unsigned __int8 *)a2 + v8) - 1) << (8 * v8);
      if (v8 > 3)
        v14 = 0;
      if ((_DWORD)v8)
      {
        if (v8 <= 3)
          v15 = v8;
        else
          v15 = 4;
        __asm { BR              X11 }
      }
      if (v14 != -1)
        goto LABEL_32;
    }
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
    {
      memcpy(a1, a2, v8);
      if (v7 > 1)
        return a1;
      goto LABEL_30;
    }
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    if (v7 <= 1)
LABEL_30:
      *((_BYTE *)a1 + v8) = 0;
  }
  return a1;
}

uint64_t destroy for AsyncThrowingStream.Continuation.Termination(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;

  v2 = result;
  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v4 + 64) + 1;
  if (v5 > 1)
  {
    result = (*(uint64_t (**)(uint64_t))(v4 + 48))(result);
    if (result >= 2)
      return result;
    goto LABEL_15;
  }
  if (!*(_BYTE *)(result + v6))
    goto LABEL_15;
  v7 = (*(unsigned __int8 *)(result + v6) - 1) << (8 * v6);
  if (v6 > 3)
    v7 = 0;
  if ((_DWORD)v6)
  {
    if (v6 > 3)
      LODWORD(v6) = 4;
    __asm { BR              X11 }
  }
  if (v7 == -1)
  {
LABEL_15:
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  }
  return result;
}

void *initializeWithCopy for AsyncThrowingStream.Continuation.Termination(void *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  int v9;
  int v10;
  size_t v11;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7)
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v6 + 64) + 1;
  if (v7 <= 1)
  {
    if (a2[v8])
    {
      v9 = (a2[v8] - 1) << (8 * v8);
      if (v8 > 3)
        v9 = 0;
      if ((_DWORD)v8)
      {
        if (v8 <= 3)
          v10 = v8;
        else
          v10 = 4;
        __asm { BR              X11 }
      }
      if (v9 != -1)
        goto LABEL_20;
    }
LABEL_14:
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
    {
      memcpy(a1, a2, v8);
      if (v7 > 1)
        return a1;
    }
    else
    {
      (*(void (**)(void *, _BYTE *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      if (v7 > 1)
        return a1;
    }
    *((_BYTE *)a1 + v8) = 0;
    return a1;
  }
  if ((*(unsigned int (**)(_BYTE *, _QWORD, _QWORD))(v6 + 48))(a2, *(unsigned int *)(v6 + 84), *(_QWORD *)(a3 + 24)) < 2)goto LABEL_14;
LABEL_20:
  if (v7 >= 2)
    v11 = v8;
  else
    v11 = v8 + 1;
  memcpy(a1, a2, v11);
  return a1;
}

unsigned __int8 *assignWithCopy for AsyncThrowingStream.Continuation.Termination(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char v9;
  int v10;
  int v11;
  uint64_t (*v12)(unsigned __int8 *, uint64_t, uint64_t);
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t (*v17)(unsigned __int8 *, uint64_t, uint64_t);
  int v18;
  int v19;
  size_t v20;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  if ((_DWORD)v7)
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v6 + 64) + 1;
  if (v7 > 1)
  {
    v12 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48);
    v13 = v12(a1, *(unsigned int *)(v6 + 84), *(_QWORD *)(a3 + 24));
    v14 = v12(a2, v7, v5);
    if (v13 >= 2)
    {
      if (v14 >= 2)
        goto LABEL_41;
LABEL_45:
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
      {
        memcpy(a1, a2, v8);
        if (v7 > 1)
          return a1;
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
        (*(void (**)(unsigned __int8 *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
        if (v7 > 1)
          return a1;
      }
      a1[v8] = 0;
      return a1;
    }
    if (v14 >= 2)
    {
LABEL_31:
      if (!v12(a1, 1, v5))
        (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
      goto LABEL_41;
    }
LABEL_33:
    v17 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48);
    v18 = v17(a1, 1, v5);
    v19 = v17(a2, 1, v5);
    if (v18)
    {
      if (!v19)
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
        (*(void (**)(unsigned __int8 *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
        return a1;
      }
    }
    else
    {
      if (!v19)
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 24))(a1, a2, v5);
        return a1;
      }
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    memcpy(a1, a2, v8);
    return a1;
  }
  v9 = 8 * v8;
  if (!a1[v8])
    goto LABEL_29;
  v10 = (a1[v8] - 1) << v9;
  if (v8 > 3)
    v10 = 0;
  if ((_DWORD)v8)
  {
    if (v8 <= 3)
      v11 = v8;
    else
      v11 = 4;
    __asm { BR              X12 }
  }
  if (v10 == -1)
  {
LABEL_29:
    if (a2[v8])
    {
      v15 = (a2[v8] - 1) << v9;
      if (v8 > 3)
        v15 = 0;
      if ((_DWORD)v8)
      {
        if (v8 <= 3)
          v16 = v8;
        else
          v16 = 4;
        __asm { BR              X11 }
      }
      if (v15 != -1)
      {
        v12 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48);
        goto LABEL_31;
      }
    }
    goto LABEL_33;
  }
  if (!a2[v8] || (a2[v8] - 1) << v9 == -1)
    goto LABEL_45;
LABEL_41:
  if (v7 >= 2)
    v20 = v8;
  else
    v20 = v8 + 1;
  memcpy(a1, a2, v20);
  return a1;
}

void *initializeWithTake for AsyncThrowingStream.Continuation.Termination(void *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  int v9;
  int v10;
  size_t v11;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7)
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v6 + 64) + 1;
  if (v7 <= 1)
  {
    if (a2[v8])
    {
      v9 = (a2[v8] - 1) << (8 * v8);
      if (v8 > 3)
        v9 = 0;
      if ((_DWORD)v8)
      {
        if (v8 <= 3)
          v10 = v8;
        else
          v10 = 4;
        __asm { BR              X11 }
      }
      if (v9 != -1)
        goto LABEL_20;
    }
LABEL_14:
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
    {
      memcpy(a1, a2, v8);
      if (v7 > 1)
        return a1;
    }
    else
    {
      (*(void (**)(void *, _BYTE *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      if (v7 > 1)
        return a1;
    }
    *((_BYTE *)a1 + v8) = 0;
    return a1;
  }
  if ((*(unsigned int (**)(_BYTE *, _QWORD, _QWORD))(v6 + 48))(a2, *(unsigned int *)(v6 + 84), *(_QWORD *)(a3 + 24)) < 2)goto LABEL_14;
LABEL_20:
  if (v7 >= 2)
    v11 = v8;
  else
    v11 = v8 + 1;
  memcpy(a1, a2, v11);
  return a1;
}

unsigned __int8 *assignWithTake for AsyncThrowingStream.Continuation.Termination(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char v9;
  int v10;
  int v11;
  uint64_t (*v12)(unsigned __int8 *, uint64_t, uint64_t);
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t (*v17)(unsigned __int8 *, uint64_t, uint64_t);
  int v18;
  int v19;
  size_t v20;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  if ((_DWORD)v7)
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v6 + 64) + 1;
  if (v7 > 1)
  {
    v12 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48);
    v13 = v12(a1, *(unsigned int *)(v6 + 84), *(_QWORD *)(a3 + 24));
    v14 = v12(a2, v7, v5);
    if (v13 >= 2)
    {
      if (v14 >= 2)
        goto LABEL_41;
LABEL_45:
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
      {
        memcpy(a1, a2, v8);
        if (v7 > 1)
          return a1;
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
        (*(void (**)(unsigned __int8 *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
        if (v7 > 1)
          return a1;
      }
      a1[v8] = 0;
      return a1;
    }
    if (v14 >= 2)
    {
LABEL_31:
      if (!v12(a1, 1, v5))
        (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
      goto LABEL_41;
    }
LABEL_33:
    v17 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48);
    v18 = v17(a1, 1, v5);
    v19 = v17(a2, 1, v5);
    if (v18)
    {
      if (!v19)
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
        (*(void (**)(unsigned __int8 *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
        return a1;
      }
    }
    else
    {
      if (!v19)
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 40))(a1, a2, v5);
        return a1;
      }
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    memcpy(a1, a2, v8);
    return a1;
  }
  v9 = 8 * v8;
  if (!a1[v8])
    goto LABEL_29;
  v10 = (a1[v8] - 1) << v9;
  if (v8 > 3)
    v10 = 0;
  if ((_DWORD)v8)
  {
    if (v8 <= 3)
      v11 = v8;
    else
      v11 = 4;
    __asm { BR              X12 }
  }
  if (v10 == -1)
  {
LABEL_29:
    if (a2[v8])
    {
      v15 = (a2[v8] - 1) << v9;
      if (v8 > 3)
        v15 = 0;
      if ((_DWORD)v8)
      {
        if (v8 <= 3)
          v16 = v8;
        else
          v16 = 4;
        __asm { BR              X11 }
      }
      if (v15 != -1)
      {
        v12 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48);
        goto LABEL_31;
      }
    }
    goto LABEL_33;
  }
  if (!a2[v8] || (a2[v8] - 1) << v9 == -1)
    goto LABEL_45;
LABEL_41:
  if (v7 >= 2)
    v20 = v8;
  else
    v20 = v8 + 1;
  memcpy(a1, a2, v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncThrowingStream.Continuation.Termination(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  char v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  BOOL v16;
  uint64_t result;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  v7 = v6 - 1;
  v8 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v8;
  if (v5 < 2)
  {
    v7 = 0;
    ++v8;
  }
  if (!a2)
    return 0;
  v9 = a2 - v7;
  if (a2 <= v7)
    goto LABEL_26;
  v10 = 8 * v8;
  if (v8 > 3)
    goto LABEL_10;
  v12 = ((v9 + ~(-1 << v10)) >> v10) + 1;
  if (HIWORD(v12))
  {
    v11 = *(_DWORD *)(a1 + v8);
    if (v11)
      goto LABEL_17;
  }
  else
  {
    if (v12 <= 0xFF)
    {
      if (v12 < 2)
        goto LABEL_26;
LABEL_10:
      v11 = *(unsigned __int8 *)(a1 + v8);
      if (!*(_BYTE *)(a1 + v8))
        goto LABEL_26;
LABEL_17:
      v13 = (v11 - 1) << v10;
      if (v8 > 3)
        v13 = 0;
      if ((_DWORD)v8)
      {
        if (v8 <= 3)
          v14 = v8;
        else
          v14 = 4;
        __asm { BR              X12 }
      }
      return v7 + v13 + 1;
    }
    v11 = *(unsigned __int16 *)(a1 + v8);
    if (*(_WORD *)(a1 + v8))
      goto LABEL_17;
  }
LABEL_26:
  if (!v7)
    return 0;
  if (v5 < 2)
    return 0;
  v15 = (*(uint64_t (**)(void))(v4 + 48))();
  v16 = v15 >= 2;
  result = v15 - 2;
  if ((_DWORD)result == 0 || !v16)
    return 0;
  return result;
}

void storeEnumTagSinglePayload for AsyncThrowingStream.Continuation.Termination(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  size_t v11;
  size_t v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  v10 = v9 - 1;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v11;
  if (v8 >= 2)
  {
    v12 = v11;
  }
  else
  {
    v10 = 0;
    v12 = v11 + 1;
  }
  v13 = a3 >= v10;
  v14 = a3 - v10;
  if (v14 != 0 && v13)
  {
    if (v12 > 3)
    {
      v6 = 1u;
      if (v10 < a2)
        goto LABEL_19;
      goto LABEL_26;
    }
    v15 = ((v14 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      v6 = 4u;
      if (v10 < a2)
      {
LABEL_19:
        v16 = ~v10 + a2;
        if (v12 < 4)
        {
          if ((_DWORD)v12)
          {
            v17 = v16 & ~(-1 << (8 * v12));
            bzero(a1, v12);
            if ((_DWORD)v12 == 3)
            {
              *a1 = v17;
              *((_BYTE *)a1 + 2) = BYTE2(v17);
            }
            else if ((_DWORD)v12 == 2)
            {
              *a1 = v17;
            }
            else
            {
              *(_BYTE *)a1 = v17;
            }
          }
        }
        else
        {
          bzero(a1, v12);
          *(_DWORD *)a1 = v16;
        }
        __asm { BR              X10 }
      }
LABEL_26:
      __asm { BR              X13 }
    }
    if (v15 >= 0x100)
      v6 = 2;
    else
      v6 = v15 > 1;
  }
  if (v10 < a2)
    goto LABEL_19;
  goto LABEL_26;
}

void sub_18D5A7494()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_18D5A749C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_18D5A74BC()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_18D5A74CC()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_18D5A74D4()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

uint64_t getEnumTag for AsyncThrowingStream.Continuation.Termination(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  v3 = *(_DWORD *)(v2 + 84);
  v4 = *(_QWORD *)(v2 + 64);
  if (!v3)
    ++v4;
  if (v3 > 1)
  {
    v6 = (*(uint64_t (**)(void))(v2 + 48))();
    if (v6 >= 2)
      return v6 - 1;
    else
      return 0;
  }
  else if (*(_BYTE *)(a1 + v4))
  {
    v5 = (*(unsigned __int8 *)(a1 + v4) - 1) << (8 * v4);
    if (v4 > 3)
      v5 = 0;
    if ((_DWORD)v4)
    {
      if (v4 > 3)
        LODWORD(v4) = 4;
      __asm { BR              X11 }
    }
    return (v5 + 1);
  }
  else
  {
    return 0;
  }
}

void destructiveInjectEnumTag for AsyncThrowingStream.Continuation.Termination(unsigned int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  int v10;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (v5)
  {
    v7 = *(_QWORD *)(v4 + 64);
  }
  else
  {
    v6 = 0;
    v7 = *(_QWORD *)(v4 + 64) + 1;
  }
  if (v6 < a2)
  {
    v8 = ~v6 + a2;
    if (v7 >= 4)
    {
      bzero(a1, v7);
      *a1 = v8;
      LOBYTE(v9) = 1;
      if (v5 > 1)
        return;
LABEL_19:
      *((_BYTE *)a1 + v7) = v9;
      return;
    }
    v9 = (v8 >> (8 * v7)) + 1;
    if ((_DWORD)v7)
    {
      v10 = v8 & ~(-1 << (8 * v7));
      bzero(a1, v7);
      if ((_DWORD)v7 != 3)
      {
        if ((_DWORD)v7 == 2)
        {
          *(_WORD *)a1 = v10;
          if (v5 > 1)
            return;
        }
        else
        {
          *(_BYTE *)a1 = v10;
          if (v5 > 1)
            return;
        }
        goto LABEL_19;
      }
      *(_WORD *)a1 = v10;
      *((_BYTE *)a1 + 2) = BYTE2(v10);
    }
    if (v5 > 1)
      return;
    goto LABEL_19;
  }
  if (v5 > 1)
  {
    if (a2)
      (*(void (**)(unsigned int *, _QWORD, _QWORD))(v4 + 56))(a1, a2 + 1, *(unsigned int *)(v4 + 84));
  }
  else
  {
    *((_BYTE *)a1 + v7) = 0;
  }
}

uint64_t type metadata accessor for AsyncThrowingStream.Continuation.Termination(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncThrowingStream.Continuation.Termination);
}

uint64_t type metadata completion function for AsyncStream.Continuation.YieldResult()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AsyncStream.Continuation.YieldResult(uint64_t *__dst, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;

  v3 = __dst;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    v9 = *((unsigned __int8 *)a2 + v5);
    if (v9 >= 2)
    {
      if (v5 <= 3)
        v10 = v5;
      else
        v10 = 4;
      __asm { BR              X14 }
    }
    if (v9 == 1)
    {
      (*(void (**)(uint64_t *))(v4 + 16))(__dst);
      *((_BYTE *)v3 + v5) = 1;
    }
    else
    {
      *__dst = *a2;
      *((_BYTE *)__dst + v5) = 0;
    }
  }
  return v3;
}

uint64_t destroy for AsyncStream.Continuation.YieldResult(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  if (v3 <= 8)
    v3 = 8;
  v4 = *(unsigned __int8 *)(result + v3);
  if (v4 < 2)
  {
    if (v4 == 1)
      return (*(uint64_t (**)(void))(v2 + 8))();
  }
  else
  {
    if (v3 <= 3)
      v5 = v3;
    else
      v5 = 4;
    return ((uint64_t (*)(void))((char *)&loc_18D5A78CC + 4 * byte_18D5BC70E[v5]))();
  }
  return result;
}

_BYTE *initializeWithCopy for AsyncStream.Continuation.YieldResult(_BYTE *__dst, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    (*(void (**)(_BYTE *))(v4 + 16))(__dst);
    __dst[v5] = 1;
  }
  else
  {
    *(_QWORD *)__dst = *a2;
    __dst[v5] = 0;
  }
  return __dst;
}

unsigned __int8 *assignWithCopy for AsyncStream.Continuation.YieldResult(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  if (__dst != __src)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 8uLL)
      v7 = 8;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = __dst[v7];
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X11 }
    }
    if (v8 == 1)
      (*(void (**)(unsigned __int8 *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
    v10 = __src[v7];
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
      __dst[v7] = 1;
    }
    else
    {
      *(_QWORD *)__dst = *(_QWORD *)__src;
      __dst[v7] = 0;
    }
  }
  return __dst;
}

_BYTE *initializeWithTake for AsyncStream.Continuation.YieldResult(_BYTE *__dst, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    (*(void (**)(_BYTE *))(v4 + 32))(__dst);
    __dst[v5] = 1;
  }
  else
  {
    *(_QWORD *)__dst = *a2;
    __dst[v5] = 0;
  }
  return __dst;
}

unsigned __int8 *assignWithTake for AsyncStream.Continuation.YieldResult(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  if (__dst != __src)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 8uLL)
      v7 = 8;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = __dst[v7];
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X11 }
    }
    if (v8 == 1)
      (*(void (**)(unsigned __int8 *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
    v10 = __src[v7];
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
      __dst[v7] = 1;
    }
    else
    {
      *(_QWORD *)__dst = *(_QWORD *)__src;
      __dst[v7] = 0;
    }
  }
  return __dst;
}

uint64_t getEnumTagSinglePayload for AsyncStream.Continuation.YieldResult(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = 8;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) > 8uLL)
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 253) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 3)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 254);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18D5A7EE4 + 4 * byte_18D5BC731[(v4 - 1)]))();
}

void storeEnumTagSinglePayload for AsyncStream.Continuation.YieldResult(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (v5 <= 8)
    v5 = 8;
  v6 = v5 + 1;
  if (a3 < 0xFE)
  {
    v7 = 0u;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 253) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v8 = a2 - 254;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t getEnumTag for AsyncStream.Continuation.YieldResult(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 8;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64) > 8uLL)
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 2u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_18D5A8120 + 4 * byte_18D5BC73F[v3]))();
}

void destructiveInjectEnumTag for AsyncStream.Continuation.YieldResult(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  size_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) <= 8uLL)
    v4 = 8;
  else
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (a2 > 1)
  {
    v5 = a2 - 2;
    if (v4 < 4)
    {
      v6 = v5 >> (8 * v4);
      v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 2;
      bzero(a1, v4);
      if ((_DWORD)v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if ((_DWORD)v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 2;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

uint64_t getEnumTagSinglePayload for AsyncStream.Continuation.BufferingPolicy(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AsyncStream.Continuation.BufferingPolicy(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t type metadata accessor for AsyncThrowingStream.Continuation.BufferingPolicy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncThrowingStream.Continuation.BufferingPolicy);
}

uint64_t type metadata completion function for AsyncThrowingStream._Context()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for AsyncThrowingStream.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncThrowingStream.Iterator);
}

uint64_t type metadata completion function for _DequeBuffer()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for _DequeBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _DequeBuffer);
}

uint64_t dispatch thunk of Clock.now.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of Clock.sleep(until:tolerance:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int *v9;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);

  v9 = *(int **)(a4 + 48);
  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v9 + *v9);
  v10 = (_QWORD *)swift_task_alloc(v9[1]);
  *(_QWORD *)(v4 + 16) = v10;
  *v10 = v4;
  v10[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCompactMapSequence<A, B>.Iterator;
  return v12(a1, a2, a3, a4);
}

ValueMetadata *type metadata accessor for ContinuousClock()
{
  return &type metadata for ContinuousClock;
}

uint64_t getEnumTagSinglePayload for ContinuousClock.Instant(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ContinuousClock.Instant(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ContinuousClock.Instant()
{
  return &type metadata for ContinuousClock.Instant;
}

ValueMetadata *type metadata accessor for SuspendingClock()
{
  return &type metadata for SuspendingClock;
}

ValueMetadata *type metadata accessor for SuspendingClock.Instant()
{
  return &type metadata for SuspendingClock.Instant;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for _DequeBufferHeader(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for _DequeBufferHeader(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for _DequeBufferHeader()
{
  return &type metadata for _DequeBufferHeader;
}

uint64_t type metadata completion function for AsyncThrowingStream._Storage.State(uint64_t *a1)
{
  uint64_t result;
  unint64_t v2;

  type metadata accessor for AsyncThrowingStream._Storage.Terminal(255, a1[2], a1[3], a1[4]);
  result = type metadata accessor for Optional();
  if (v2 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AsyncThrowingStream._Storage.State(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  size_t v10;
  int v11;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  void *v27;
  unsigned __int8 *v28;
  int v29;
  int v30;
  size_t __n;

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(unsigned int *)(v5 + 84);
  v8 = v6;
  if ((_DWORD)v7)
    v9 = *(_QWORD *)(v5 + 64);
  else
    v9 = *(_QWORD *)(v5 + 64) + 1;
  if (v7 >= 2)
    v10 = v9;
  else
    v10 = v9 + 1;
  v11 = v6 & 0x100000;
  if (v8 > 7 || v11 != 0 || v10 + ((v8 + 48) & ~v8) > 0x18)
  {
    v14 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v14 + ((v8 & 0xF8 ^ 0x1F8) & (v8 + 16)));
    swift_retain();
  }
  else
  {
    __n = v10;
    v16 = *a2;
    v15 = (unint64_t)a2 + 15;
    *a1 = v16;
    v17 = ~v8;
    v18 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v18 = *(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF8);
    v19 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
    v20 = ((v15 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
    v21 = *(_QWORD *)v20;
    *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
    *(_QWORD *)v19 = v21;
    v22 = ((unint64_t)v18 + 31) & 0xFFFFFFFFFFFFFFF8;
    v23 = (unint64_t *)(((v15 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
    v24 = *v23;
    swift_retain();
    if (v24 < 0xFFFFFFFF)
    {
      *(_OWORD *)v22 = *(_OWORD *)v23;
    }
    else
    {
      v25 = v23[1];
      *(_QWORD *)v22 = v24;
      *(_QWORD *)(v22 + 8) = v25;
      swift_retain();
    }
    v26 = (char *)v23 + v8;
    v27 = (void *)((v22 + v8 + 16) & v17);
    v28 = (unsigned __int8 *)((unint64_t)(v26 + 16) & v17);
    if (v7 > 1)
    {
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v5 + 48))(v28, v7, v4) >= 2)
      {
LABEL_35:
        memcpy(v27, v28, __n);
        return v3;
      }
    }
    else if (v28[v9])
    {
      v29 = (v28[v9] - 1) << (8 * v9);
      if (v9 > 3)
        v29 = 0;
      if ((_DWORD)v9)
      {
        if (v9 <= 3)
          v30 = v9;
        else
          v30 = 4;
        __asm { BR              X11 }
      }
      if (v29 != -1)
        goto LABEL_35;
    }
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v5 + 48))(v28, 1, v4))
    {
      memcpy(v27, v28, v9);
      if (v7 > 1)
        return v3;
      goto LABEL_33;
    }
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16))(v27, v28, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v27, 0, 1, v4);
    if (v7 <= 1)
LABEL_33:
      *((_BYTE *)v27 + v9) = 0;
  }
  return v3;
}

uint64_t destroy for AsyncThrowingStream._Storage.State(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;

  v3 = (a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  result = swift_release();
  v5 = (_QWORD *)((v3 + 31) & 0xFFFFFFFFFFFFFFF8);
  if (*v5 >= 0xFFFFFFFFuLL)
    result = swift_release();
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = ((unint64_t)v5 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_DWORD *)(v7 + 84);
  if (v9)
    v10 = *(_QWORD *)(v7 + 64);
  else
    v10 = *(_QWORD *)(v7 + 64) + 1;
  if (v9 > 1)
  {
    result = (*(uint64_t (**)(unint64_t))(v7 + 48))(v8);
    if (result >= 2)
      return result;
    goto LABEL_17;
  }
  if (!*(_BYTE *)(v8 + v10))
    goto LABEL_17;
  v11 = (*(unsigned __int8 *)(v8 + v10) - 1) << (8 * v10);
  if (v10 > 3)
    v11 = 0;
  if ((_DWORD)v10)
  {
    if (v10 > 3)
      LODWORD(v10) = 4;
    __asm { BR              X11 }
  }
  if (v11 == -1)
  {
LABEL_17:
    result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(v8, 1, v6);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(unint64_t, uint64_t))(v7 + 8))(v8, v6);
  }
  return result;
}

_QWORD *initializeWithCopy for AsyncThrowingStream._Storage.State(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  size_t v21;
  int v22;
  int v23;
  size_t v24;

  v6 = *a2;
  v5 = (unint64_t)a2 + 15;
  *a1 = v6;
  v7 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
  v8 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v9 = ((v5 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = v10;
  v11 = ((unint64_t)v7 + 31) & 0xFFFFFFFFFFFFFFF8;
  v12 = (unint64_t *)(((v5 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
  v13 = *v12;
  swift_retain();
  if (v13 < 0xFFFFFFFF)
  {
    *(_OWORD *)v11 = *(_OWORD *)v12;
  }
  else
  {
    v14 = v12[1];
    *(_QWORD *)v11 = v13;
    *(_QWORD *)(v11 + 8) = v14;
    swift_retain();
  }
  v15 = *(_QWORD *)(a3 + 24);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  v18 = (void *)((v11 + v17 + 16) & ~v17);
  v19 = (_BYTE *)(((unint64_t)v12 + v17 + 16) & ~v17);
  v20 = *(_DWORD *)(v16 + 84);
  if (v20)
    v21 = *(_QWORD *)(v16 + 64);
  else
    v21 = *(_QWORD *)(v16 + 64) + 1;
  if (v20 <= 1)
  {
    if (v19[v21])
    {
      v22 = (v19[v21] - 1) << (8 * v21);
      if (v21 > 3)
        v22 = 0;
      if ((_DWORD)v21)
      {
        if (v21 <= 3)
          v23 = v21;
        else
          v23 = 4;
        __asm { BR              X11 }
      }
      if (v22 != -1)
        goto LABEL_23;
    }
LABEL_17:
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v16 + 48))(v19, 1, v15))
    {
      memcpy(v18, v19, v21);
      if (v20 > 1)
        return a1;
    }
    else
    {
      (*(void (**)(void *, _BYTE *, uint64_t))(v16 + 16))(v18, v19, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v18, 0, 1, v15);
      if (v20 > 1)
        return a1;
    }
    *((_BYTE *)v18 + v21) = 0;
    return a1;
  }
  if ((*(unsigned int (**)(_BYTE *, _QWORD, uint64_t))(v16 + 48))(v19, *(unsigned int *)(v16 + 84), v15) < 2)
    goto LABEL_17;
LABEL_23:
  if (v20 >= 2)
    v24 = v21;
  else
    v24 = v21 + 1;
  memcpy(v18, v19, v24);
  return a1;
}

_QWORD *assignWithCopy for AsyncThrowingStream._Storage.State(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  size_t v23;
  char v24;
  int v25;
  int v26;
  uint64_t (*v27)(unsigned __int8 *, uint64_t, uint64_t);
  unsigned int v28;
  unsigned int v29;
  int v30;
  int v31;
  uint64_t (*v32)(unsigned __int8 *, uint64_t, uint64_t);
  int v33;
  int v34;
  size_t v35;

  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = (unint64_t)v5 + 31;
  v7 = (((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8) + 15;
  *(_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8) = *v5;
  v8 = (((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8) + 31;
  swift_retain();
  swift_release();
  v9 = v7 & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  *(_QWORD *)v9 = v11;
  v12 = (_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  v13 = (unint64_t *)(v6 & 0xFFFFFFFFFFFFFFF8);
  v14 = *v13;
  if (*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFuLL)
  {
    if (v14 >= 0xFFFFFFFF)
    {
      v16 = v13[1];
      *v12 = v14;
      v12[1] = v16;
      swift_retain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v14 >= 0xFFFFFFFF)
    {
      v15 = v13[1];
      *v12 = v14;
      v12[1] = v15;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  *(_OWORD *)v12 = *(_OWORD *)v13;
LABEL_8:
  v17 = *(_QWORD *)(a3 + 24);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(unsigned __int8 *)(v18 + 80);
  v20 = (unsigned __int8 *)(((unint64_t)v12 + v19 + 16) & ~v19);
  v21 = (unsigned __int8 *)(((unint64_t)v13 + v19 + 16) & ~v19);
  v22 = *(unsigned int *)(v18 + 84);
  if ((_DWORD)v22)
    v23 = *(_QWORD *)(v18 + 64);
  else
    v23 = *(_QWORD *)(v18 + 64) + 1;
  if (v22 > 1)
  {
    v27 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v18 + 48);
    v28 = v27(v20, *(unsigned int *)(v18 + 84), v17);
    v29 = v27(v21, v22, v17);
    if (v28 >= 2)
    {
      if (v29 >= 2)
        goto LABEL_48;
LABEL_52:
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v18 + 48))(v21, 1, v17))
      {
        memcpy(v20, v21, v23);
        if (v22 > 1)
          return a1;
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v18 + 16))(v20, v21, v17);
        (*(void (**)(unsigned __int8 *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v20, 0, 1, v17);
        if (v22 > 1)
          return a1;
      }
      v20[v23] = 0;
      return a1;
    }
    if (v29 >= 2)
    {
LABEL_38:
      if (!v27(v20, 1, v17))
        (*(void (**)(unsigned __int8 *, uint64_t))(v18 + 8))(v20, v17);
      goto LABEL_48;
    }
LABEL_40:
    v32 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v18 + 48);
    v33 = v32(v20, 1, v17);
    v34 = v32(v21, 1, v17);
    if (v33)
    {
      if (!v34)
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v18 + 16))(v20, v21, v17);
        (*(void (**)(unsigned __int8 *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v20, 0, 1, v17);
        return a1;
      }
    }
    else
    {
      if (!v34)
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v18 + 24))(v20, v21, v17);
        return a1;
      }
      (*(void (**)(unsigned __int8 *, uint64_t))(v18 + 8))(v20, v17);
    }
    memcpy(v20, v21, v23);
    return a1;
  }
  v24 = 8 * v23;
  if (!v20[v23])
    goto LABEL_36;
  v25 = (v20[v23] - 1) << v24;
  if (v23 > 3)
    v25 = 0;
  if ((_DWORD)v23)
  {
    if (v23 <= 3)
      v26 = v23;
    else
      v26 = 4;
    __asm { BR              X12 }
  }
  if (v25 == -1)
  {
LABEL_36:
    if (v21[v23])
    {
      v30 = (v21[v23] - 1) << v24;
      if (v23 > 3)
        v30 = 0;
      if ((_DWORD)v23)
      {
        if (v23 <= 3)
          v31 = v23;
        else
          v31 = 4;
        __asm { BR              X11 }
      }
      if (v30 != -1)
      {
        v27 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v18 + 48);
        goto LABEL_38;
      }
    }
    goto LABEL_40;
  }
  if (!v21[v23] || (v21[v23] - 1) << v24 == -1)
    goto LABEL_52;
LABEL_48:
  if (v22 >= 2)
    v35 = v23;
  else
    v35 = v23 + 1;
  memcpy(v20, v21, v35);
  return a1;
}

_QWORD *initializeWithTake for AsyncThrowingStream._Storage.State(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _BYTE *v18;
  unsigned int v19;
  size_t v20;
  int v21;
  int v22;
  size_t v23;

  v5 = *a2;
  v4 = (unint64_t)a2 + 15;
  *a1 = v5;
  v6 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
  v7 = ((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = ((v4 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)v8;
  *(_BYTE *)(v7 + 8) = *(_BYTE *)(v8 + 8);
  *(_QWORD *)v7 = v9;
  v10 = ((unint64_t)v6 + 31) & 0xFFFFFFFFFFFFFFF8;
  v11 = ((v4 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v11 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v10 = *(_OWORD *)v11;
  }
  else
  {
    v12 = *(_QWORD *)(v11 + 8);
    *(_QWORD *)v10 = *(_QWORD *)v11;
    *(_QWORD *)(v10 + 8) = v12;
  }
  v13 = *(_QWORD *)(a3 + 24);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = v11 + v15;
  v17 = (void *)((v10 + v15 + 16) & ~v15);
  v18 = (_BYTE *)((v16 + 16) & ~v15);
  v19 = *(_DWORD *)(v14 + 84);
  if (v19)
    v20 = *(_QWORD *)(v14 + 64);
  else
    v20 = *(_QWORD *)(v14 + 64) + 1;
  if (v19 <= 1)
  {
    if (v18[v20])
    {
      v21 = (v18[v20] - 1) << (8 * v20);
      if (v20 > 3)
        v21 = 0;
      if ((_DWORD)v20)
      {
        if (v20 <= 3)
          v22 = v20;
        else
          v22 = 4;
        __asm { BR              X11 }
      }
      if (v21 != -1)
        goto LABEL_23;
    }
LABEL_17:
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v18, 1, v13))
    {
      memcpy(v17, v18, v20);
      if (v19 > 1)
        return a1;
    }
    else
    {
      (*(void (**)(void *, _BYTE *, uint64_t))(v14 + 32))(v17, v18, v13);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v17, 0, 1, v13);
      if (v19 > 1)
        return a1;
    }
    *((_BYTE *)v17 + v20) = 0;
    return a1;
  }
  if ((*(unsigned int (**)(uint64_t, _QWORD, _QWORD))(v14 + 48))((v16 + 16) & ~v15, *(unsigned int *)(v14 + 84), *(_QWORD *)(a3 + 24)) < 2)goto LABEL_17;
LABEL_23:
  if (v19 >= 2)
    v23 = v20;
  else
    v23 = v20 + 1;
  memcpy(v17, v18, v23);
  return a1;
}

_QWORD *assignWithTake for AsyncThrowingStream._Storage.State(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  size_t v21;
  char v22;
  int v23;
  int v24;
  uint64_t (*v25)(unsigned __int8 *, uint64_t, uint64_t);
  unsigned int v26;
  unsigned int v27;
  int v28;
  int v29;
  uint64_t (*v30)(unsigned __int8 *, uint64_t, uint64_t);
  int v31;
  int v32;
  size_t v33;

  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *v5;
  swift_release();
  v7 = ((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = ((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)v8;
  *(_BYTE *)(v7 + 8) = *(_BYTE *)(v8 + 8);
  *(_QWORD *)v7 = v9;
  v10 = (_QWORD *)(((unint64_t)v6 + 31) & 0xFFFFFFFFFFFFFFF8);
  v11 = (unint64_t *)(((unint64_t)v5 + 31) & 0xFFFFFFFFFFFFFFF8);
  v12 = *v11;
  if (*v10 < 0xFFFFFFFFuLL)
  {
    if (v12 >= 0xFFFFFFFF)
    {
      v14 = v11[1];
      *v10 = v12;
      v10[1] = v14;
      goto LABEL_8;
    }
  }
  else
  {
    if (v12 >= 0xFFFFFFFF)
    {
      v13 = v11[1];
      *v10 = v12;
      v10[1] = v13;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  *(_OWORD *)v10 = *(_OWORD *)v11;
LABEL_8:
  v15 = *(_QWORD *)(a3 + 24);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  v18 = (unsigned __int8 *)(((unint64_t)v10 + v17 + 16) & ~v17);
  v19 = (unsigned __int8 *)(((unint64_t)v11 + v17 + 16) & ~v17);
  v20 = *(unsigned int *)(v16 + 84);
  if ((_DWORD)v20)
    v21 = *(_QWORD *)(v16 + 64);
  else
    v21 = *(_QWORD *)(v16 + 64) + 1;
  if (v20 > 1)
  {
    v25 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v16 + 48);
    v26 = v25(v18, *(unsigned int *)(v16 + 84), v15);
    v27 = v25(v19, v20, v15);
    if (v26 >= 2)
    {
      if (v27 >= 2)
        goto LABEL_48;
LABEL_52:
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v16 + 48))(v19, 1, v15))
      {
        memcpy(v18, v19, v21);
        if (v20 > 1)
          return a1;
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v16 + 32))(v18, v19, v15);
        (*(void (**)(unsigned __int8 *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v18, 0, 1, v15);
        if (v20 > 1)
          return a1;
      }
      v18[v21] = 0;
      return a1;
    }
    if (v27 >= 2)
    {
LABEL_38:
      if (!v25(v18, 1, v15))
        (*(void (**)(unsigned __int8 *, uint64_t))(v16 + 8))(v18, v15);
      goto LABEL_48;
    }
LABEL_40:
    v30 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v16 + 48);
    v31 = v30(v18, 1, v15);
    v32 = v30(v19, 1, v15);
    if (v31)
    {
      if (!v32)
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v16 + 32))(v18, v19, v15);
        (*(void (**)(unsigned __int8 *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v18, 0, 1, v15);
        return a1;
      }
    }
    else
    {
      if (!v32)
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v16 + 40))(v18, v19, v15);
        return a1;
      }
      (*(void (**)(unsigned __int8 *, uint64_t))(v16 + 8))(v18, v15);
    }
    memcpy(v18, v19, v21);
    return a1;
  }
  v22 = 8 * v21;
  if (!v18[v21])
    goto LABEL_36;
  v23 = (v18[v21] - 1) << v22;
  if (v21 > 3)
    v23 = 0;
  if ((_DWORD)v21)
  {
    if (v21 <= 3)
      v24 = v21;
    else
      v24 = 4;
    __asm { BR              X12 }
  }
  if (v23 == -1)
  {
LABEL_36:
    if (v19[v21])
    {
      v28 = (v19[v21] - 1) << v22;
      if (v21 > 3)
        v28 = 0;
      if ((_DWORD)v21)
      {
        if (v21 <= 3)
          v29 = v21;
        else
          v29 = 4;
        __asm { BR              X11 }
      }
      if (v28 != -1)
      {
        v25 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v16 + 48);
        goto LABEL_38;
      }
    }
    goto LABEL_40;
  }
  if (!v19[v21] || (v19[v21] - 1) << v22 == -1)
    goto LABEL_52;
LABEL_48:
  if (v20 >= 2)
    v33 = v21;
  else
    v33 = v21 + 1;
  memcpy(v18, v19, v33);
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncThrowingStream._Storage.State(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char v15;
  int v16;
  unsigned int v17;
  int v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t result;
  unsigned int v22;
  BOOL v23;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  v7 = v6 - 1;
  v8 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v8;
  if (v5 >= 2)
    v9 = v7;
  else
    v9 = 0;
  if (v5 >= 2)
    v10 = v8;
  else
    v10 = v8 + 1;
  if (v9 <= 0x7FFFFFFF)
    v11 = 0x7FFFFFFF;
  else
    v11 = v9;
  if (!a2)
    return 0;
  v12 = *(unsigned __int8 *)(v4 + 80);
  v13 = a2 - v11;
  if (a2 <= v11)
    goto LABEL_31;
  v14 = v10 + ((v12 + 48) & ~v12);
  v15 = 8 * v14;
  if (v14 > 3)
    goto LABEL_17;
  v17 = ((v13 + ~(-1 << v15)) >> v15) + 1;
  if (HIWORD(v17))
  {
    v16 = *(_DWORD *)(a1 + v14);
    if (v16)
      goto LABEL_24;
LABEL_31:
    v19 = (unint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v9 & 0x80000000) == 0)
    {
      v20 = *v19;
      if (v20 >= 0xFFFFFFFF)
        LODWORD(v20) = -1;
      return (v20 + 1);
    }
    if (v5 >= 2)
    {
      v22 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                   + v12
                                                                   + 32) & ~v12);
      v23 = v22 >= 2;
      result = v22 - 2;
      if ((_DWORD)result != 0 && v23)
        return result;
    }
    return 0;
  }
  if (v17 > 0xFF)
  {
    v16 = *(unsigned __int16 *)(a1 + v14);
    if (*(_WORD *)(a1 + v14))
      goto LABEL_24;
    goto LABEL_31;
  }
  if (v17 < 2)
    goto LABEL_31;
LABEL_17:
  v16 = *(unsigned __int8 *)(a1 + v14);
  if (!*(_BYTE *)(a1 + v14))
    goto LABEL_31;
LABEL_24:
  v18 = (v16 - 1) << v15;
  if (v14 > 3)
    v18 = 0;
  if ((_DWORD)v14)
  {
    if (v14 > 3)
      LODWORD(v14) = 4;
    __asm { BR              X12 }
  }
  return v11 + v18 + 1;
}

void storeEnumTagSinglePayload for AsyncThrowingStream._Storage.State(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  size_t v14;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  v10 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v10;
  if (v8 >= 2)
    v11 = v9 - 1;
  else
    v11 = 0;
  if (v8 >= 2)
    v12 = v10;
  else
    v12 = v10 + 1;
  if (v11 <= 0x7FFFFFFF)
    v13 = 0x7FFFFFFF;
  else
    v13 = v11;
  v14 = ((*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)) + v12;
  v15 = a3 >= v13;
  v16 = a3 - v13;
  if (v16 != 0 && v15)
  {
    if (v14 > 3)
    {
      v6 = 1u;
      if (v13 < a2)
        goto LABEL_25;
      goto LABEL_19;
    }
    v17 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
    if (HIWORD(v17))
    {
      v6 = 4u;
      if (v13 < a2)
      {
LABEL_25:
        v18 = ~v13 + a2;
        if (v14 < 4)
        {
          if ((_DWORD)v14)
          {
            v19 = v18 & ~(-1 << (8 * v14));
            bzero(a1, v14);
            if ((_DWORD)v14 == 3)
            {
              *a1 = v19;
              *((_BYTE *)a1 + 2) = BYTE2(v19);
            }
            else if ((_DWORD)v14 == 2)
            {
              *a1 = v19;
            }
            else
            {
              *(_BYTE *)a1 = v19;
            }
          }
        }
        else
        {
          bzero(a1, v14);
          *(_DWORD *)a1 = v18;
        }
        __asm { BR              X10 }
      }
LABEL_19:
      __asm { BR              X17 }
    }
    if (v17 >= 0x100)
      v6 = 2;
    else
      v6 = v17 > 1;
  }
  if (v13 < a2)
    goto LABEL_25;
  goto LABEL_19;
}

void sub_18D5A9A70()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x18D5A9A30);
}

void sub_18D5A9A80()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x18D5A9A30);
}

void sub_18D5A9A88()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x18D5A9A30);
}

uint64_t type metadata accessor for AsyncThrowingStream._Storage.Terminal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncThrowingStream._Storage.Terminal);
}

uint64_t type metadata completion function for AsyncThrowingStream._Storage.Terminal()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AsyncThrowingStream._Storage.Terminal(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v6 + 64) + 1;
  if (*(_DWORD *)(v6 + 80) > 7u || (v7 & 0x100000) != 0 || v8 > 0x18)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v7 + 16) & ~(unint64_t)v7));
    swift_retain();
  }
  else if ((*(unsigned int (**)(uint64_t *, uint64_t, _QWORD))(v6 + 48))(a2, 1, *(_QWORD *)(a3 + 24)))
  {
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

uint64_t destroy for AsyncThrowingStream._Storage.Terminal(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return result;
}

void *initializeWithCopy for AsyncThrowingStream._Storage.Terminal(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *assignWithCopy for AsyncThrowingStream._Storage.Terminal(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
  return a1;
}

void *initializeWithTake for AsyncThrowingStream._Storage.Terminal(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *assignWithTake for AsyncThrowingStream._Storage.Terminal(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncThrowingStream._Storage.Terminal(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v7;
  if (!a2)
    return 0;
  v8 = a2 - v6;
  if (a2 > v6)
  {
    v9 = 8 * v7;
    if (v7 > 3)
      goto LABEL_8;
    v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v7);
      if (v10)
        goto LABEL_15;
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2)
          goto LABEL_24;
LABEL_8:
        v10 = *(unsigned __int8 *)(a1 + v7);
        if (!*(_BYTE *)(a1 + v7))
          goto LABEL_24;
LABEL_15:
        v12 = (v10 - 1) << v9;
        if (v7 > 3)
          v12 = 0;
        if ((_DWORD)v7)
        {
          if (v7 <= 3)
            v13 = v7;
          else
            v13 = 4;
          __asm { BR              X12 }
        }
        return v6 + v12 + 1;
      }
      v10 = *(unsigned __int16 *)(a1 + v7);
      if (*(_WORD *)(a1 + v7))
        goto LABEL_15;
    }
  }
LABEL_24:
  if (v5 < 2)
    return 0;
  v14 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v14 >= 2)
    return v14 - 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for AsyncThrowingStream._Storage.Terminal(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  size_t v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (v8)
  {
    v10 = *(_QWORD *)(v7 + 64);
  }
  else
  {
    v9 = 0;
    v10 = *(_QWORD *)(v7 + 64) + 1;
  }
  v11 = a3 >= v9;
  v12 = a3 - v9;
  if (v12 != 0 && v11)
  {
    if (v10 > 3)
    {
      v6 = 1u;
      if (v9 < a2)
        goto LABEL_14;
      goto LABEL_21;
    }
    v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v6 = 4u;
      if (v9 < a2)
      {
LABEL_14:
        v14 = ~v9 + a2;
        if (v10 < 4)
        {
          if ((_DWORD)v10)
          {
            v15 = v14 & ~(-1 << (8 * v10));
            bzero(a1, v10);
            if ((_DWORD)v10 == 3)
            {
              *a1 = v15;
              *((_BYTE *)a1 + 2) = BYTE2(v15);
            }
            else if ((_DWORD)v10 == 2)
            {
              *a1 = v15;
            }
            else
            {
              *(_BYTE *)a1 = v15;
            }
          }
        }
        else
        {
          bzero(a1, v10);
          *(_DWORD *)a1 = v14;
        }
        __asm { BR              X10 }
      }
LABEL_21:
      __asm { BR              X11 }
    }
    if (v13 >= 0x100)
      v6 = 2;
    else
      v6 = v13 > 1;
  }
  if (v9 < a2)
    goto LABEL_14;
  goto LABEL_21;
}

void sub_18D5AA204()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_18D5AA20C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

uint64_t getEnumTag for AsyncThrowingStream._Storage.Terminal(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 48))(a1, 1);
}

uint64_t destructiveInjectEnumTag for AsyncThrowingStream._Storage.Terminal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 56))(a1, a2, 1);
}

uint64_t initializeBufferWithCopyOfBuffer for AsyncStream._Storage.State(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for AsyncStream._Storage.State(uint64_t a1)
{
  uint64_t result;

  swift_bridgeObjectRelease();
  result = swift_release();
  if (*(_QWORD *)(a1 + 32))
    return swift_release();
  return result;
}

uint64_t initializeWithCopy for AsyncStream._Storage.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = (_OWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_retain();
  if (v5)
  {
    v7 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v7;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *v6;
  }
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t assignWithCopy for AsyncStream._Storage.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  v6 = *(_QWORD *)(a2 + 32);
  if (!v5)
  {
    if (v6)
    {
      v8 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 32) = v6;
      *(_QWORD *)(a1 + 40) = v8;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    goto LABEL_8;
  }
  if (!v6)
  {
    swift_release();
    goto LABEL_7;
  }
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  swift_retain();
  swift_release();
LABEL_8:
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AsyncStream._Storage.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  if (!v5)
  {
    if (v4)
    {
      v7 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 32) = v4;
      *(_QWORD *)(a1 + 40) = v7;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    goto LABEL_8;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v6;
  swift_release();
LABEL_8:
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncStream._Storage.State(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 49))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AsyncStream._Storage.State(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 49) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for AsyncStream._Storage.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncStream._Storage.State);
}

uint64_t getEnumTag for SuspendingClock.Instant.CodingKeys()
{
  return 0;
}

void *type metadata accessor for SuspendingClock.Instant.CodingKeys()
{
  return &unk_1E25FFA70;
}

uint64_t getEnumTagSinglePayload for SuspendingClock.Instant.CodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for SuspendingClock.Instant.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_18D5AA63C + 4 * byte_18D5BC790[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_18D5AA65C + 4 * byte_18D5BC795[v4]))();
}

_BYTE *sub_18D5AA63C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_18D5AA65C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_18D5AA664(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_18D5AA66C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_18D5AA674(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_18D5AA67C(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for ContinuousClock.Instant.CodingKeys()
{
  return &unk_1E25FFB08;
}

uint64_t base witness table accessor for Equatable in <A> _Deque<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 8);
  return MEMORY[0x18D78FF74](&protocol conformance descriptor for <A> _Deque<A>, a1, &v4);
}

void base witness table accessor for Collection in _Deque<A>()
{
  JUMPOUT(0x18D78FF74);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RangeReplaceableCollection in _Deque<A>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x18D78FF74](&protocol conformance descriptor for _Deque<A>);
  return MEMORY[0x18D78FF74](MEMORY[0x1E0DEDE50], a1, &v3);
}

uint64_t associated type witness table accessor for Collection.SubSequence : MutableCollection in _Deque<A>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x18D78FF74](&protocol conformance descriptor for _Deque<A>);
  return MEMORY[0x18D78FF74](MEMORY[0x1E0DEDE30], a1, &v3);
}

void base witness table accessor for Sequence in _Deque<A>()
{
  JUMPOUT(0x18D78FF74);
}

uint64_t associated type witness table accessor for Collection.Index : Comparable in _Deque<A>()
{
  return MEMORY[0x1E0DEB430];
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in _Deque<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return associated type witness table accessor for Collection.Indices : Collection in _Deque<A>(a1, a2, a3, MEMORY[0x1E0DEB8C0]);
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    result = MEMORY[0x18D78FF74](MEMORY[0x1E0DEB440], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

void associated type witness table accessor for Collection.SubSequence : Collection in _Deque<A>()
{
  JUMPOUT(0x18D78FF74);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in _Deque<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return associated type witness table accessor for Collection.Indices : Collection in _Deque<A>(a1, a2, a3, MEMORY[0x1E0DEB890]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in _Deque<A>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x18D78FF74](&protocol conformance descriptor for _Deque<A>);
  return MEMORY[0x18D78FF74](MEMORY[0x1E0DEDE28], a1, &v3);
}

void base witness table accessor for BidirectionalCollection in _Deque<A>()
{
  JUMPOUT(0x18D78FF74);
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in _Deque<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return associated type witness table accessor for Collection.Indices : Collection in _Deque<A>(a1, a2, a3, MEMORY[0x1E0DEB8B8]);
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in _Deque<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  _QWORD v8[2];

  v6 = lazy protocol witness table accessor for type Int and conformance Int();
  v8[0] = MEMORY[0x1E0DEB458];
  v8[1] = v6;
  return MEMORY[0x18D78FF74](a4, a1, v8);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in _Deque<A>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x18D78FF74](&protocol conformance descriptor for _Deque<A>);
  return MEMORY[0x18D78FF74](MEMORY[0x1E0DEDE40], a1, &v3);
}

void associated type witness table accessor for Sequence.Iterator : IteratorProtocol in _Deque<A>()
{
  JUMPOUT(0x18D78FF74);
}

unint64_t lazy protocol witness table accessor for type _DequeSlot and conformance _DequeSlot()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _DequeSlot and conformance _DequeSlot;
  if (!lazy protocol witness table cache variable for type _DequeSlot and conformance _DequeSlot)
  {
    result = MEMORY[0x18D78FF74](&protocol conformance descriptor for _DequeSlot, &type metadata for _DequeSlot);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DequeSlot and conformance _DequeSlot);
  }
  return result;
}

uint64_t type metadata accessor for _Deque.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _Deque.Iterator);
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t partial apply for closure #1 in _Deque.Iterator.next()@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(v3 + 16);
  v6 = _Deque._UnsafeHandle.ptr(at:)(*(_QWORD *)(v3 + 24), a1, a2, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t partial apply for closure #1 in _Deque.Iterator._swapSegment()@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  char v6;

  v4 = *(_QWORD *)(v2 + 24);
  result = specialized _Deque._UnsafeHandle.slot(_:offsetBy:)(a1[2], a1[1], a1);
  if (result && result != *(_QWORD *)(v4 + 8))
  {
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = result;
    v6 = 1;
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t partial apply for closure #1 in _Deque._Storage.read<A>(_:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return partial apply for closure #1 in _Deque._Storage.read<A>(_:)(a1, a2, a3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v3 + 32))();
  if (v4)
    *a3 = v4;
  return result;
}

uint64_t partial apply for closure #1 in _Deque.Iterator.init(_base:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = a1[2];
  v5 = a1[1] + v4;
  if (v5 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 24);
    v7 = _Deque._UnsafeHandle.limSlot.getter(a1);
    if (v7 >= v5)
      v8 = v5;
    else
      v8 = v7;
    *a2 = v6;
    a2[1] = v4;
    a2[2] = v8;
    return swift_retain();
  }
  return result;
}

uint64_t type metadata accessor for _Deque(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _Deque);
}

uint64_t type metadata accessor for _Deque._Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _Deque._Storage);
}

uint64_t partial apply for closure #1 in _Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;

  result = _Deque._UnsafeHandle.copyElements()(a1, a2, *(_QWORD *)(v4 + 16), a3);
  *a4 = result;
  return result;
}

uint64_t partial apply for closure #3 in _Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return partial apply for closure #3 in _Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(a1, a2, _Deque._UnsafeHandle.copyElements(minimumCapacity:), a3);
}

uint64_t partial apply for closure #2 in _Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return partial apply for closure #3 in _Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(a1, a2, _Deque._UnsafeHandle.moveElements(minimumCapacity:), a3);
}

uint64_t partial apply for closure #3 in _Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(_QWORD, uint64_t, uint64_t, _QWORD)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;

  result = a3(*(_QWORD *)(v4 + 24), a1, a2, *(_QWORD *)(v4 + 16));
  *a4 = result;
  return result;
}

uint64_t partial apply for closure #1 in _Deque._UnsafeHandle.moveElements(minimumCapacity:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(v1 + 16);
  result = ManagedBuffer.capacity.getter();
  *a1 = result;
  a1[1] = v3;
  a1[2] = 0;
  return result;
}

uint64_t partial apply for closure #2 in _Deque._UnsafeHandle.moveElements(minimumCapacity:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t *, uint64_t *, uint64_t);
  uint64_t result;
  uint64_t v11[2];
  uint64_t v12;
  uint64_t v13[3];
  uint64_t v14[2];
  char v15;

  v5 = *(_QWORD *)(v2 + 16);
  _Deque._UnsafeHandle.segments()(*(uint64_t **)(v2 + 24), *(_QWORD *)(v2 + 32), v5, (uint64_t)v14);
  _UnsafeMutableWrappedBuffer.init(mutating:)(v14, v5, (uint64_t)v11);
  v6 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEB8F0];
  v7 = _Deque._UnsafeHandle.initialize(at:from:)(0, v11[0], v11[1], a1, a2, v5, 211, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEB980], (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEB8F0]);
  type metadata accessor for UnsafeMutableBufferPointer();
  v8 = type metadata accessor for Optional();
  v9 = *(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 32);
  v9(v13, &v12, v8);
  result = v9(v14, v13, v8);
  if ((v15 & 1) == 0)
    return _Deque._UnsafeHandle.initialize(at:from:)(v7, v14[0], v14[1], a1, a2, v5, 211, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEB980], v6);
  return result;
}

uint64_t partial apply for closure #1 in _UnsafeMutableWrappedBuffer.init(mutating:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = MEMORY[0x18D78F77C](*a1, a1[1], *(_QWORD *)(v2 + 16));
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t partial apply for closure #1 in _Deque._UnsafeHandle.copyElements(minimumCapacity:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *(_QWORD *)(v1 + 16);
  result = ManagedBuffer.capacity.getter();
  v5 = *(_QWORD *)(v3 + 8);
  *a1 = result;
  a1[1] = v5;
  a1[2] = 0;
  return result;
}

uint64_t partial apply for closure #2 in _Deque._UnsafeHandle.copyElements(minimumCapacity:)(uint64_t *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t *v4;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t *, uint64_t *, uint64_t);
  uint64_t result;
  uint64_t v12[2];
  uint64_t v13;
  uint64_t v14[3];
  uint64_t v15[2];
  char v16;

  v4 = (uint64_t *)v2[3];
  if (a1[1] != v4[1] || a1[2])
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v6 = v2[2];
    _Deque._UnsafeHandle.segments()(v4, v2[4], v6, (uint64_t)v12);
    v7 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEB8D0];
    v8 = _Deque._UnsafeHandle.initialize(at:from:)(0, v12[0], v12[1], a1, a2, v6, 200, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEA578], (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEB8D0]);
    type metadata accessor for UnsafeBufferPointer();
    v9 = type metadata accessor for Optional();
    v10 = *(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
    v10(v14, &v13, v9);
    result = v10(v15, v14, v9);
    if ((v16 & 1) == 0)
      return _Deque._UnsafeHandle.initialize(at:from:)(v8, v15[0], v15[1], a1, a2, v6, 200, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEA578], v7);
  }
  return result;
}

__n128 partial apply for closure #1 in _Deque._UnsafeHandle.copyElements()@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  __n128 *v2;
  unint64_t v3;
  __n128 result;

  v2 = *(__n128 **)(v1 + 16);
  v3 = v2[1].n128_u64[0];
  result = *v2;
  *a1 = *v2;
  a1[1].n128_u64[0] = v3;
  return result;
}

uint64_t partial apply for closure #2 in _Deque._UnsafeHandle.copyElements()(uint64_t *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t *v6;
  void (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t (*v9)(uint64_t *, uint64_t *, uint64_t);
  uint64_t result;
  uint64_t v11[2];
  uint64_t v12;
  uint64_t v13[3];
  uint64_t v14[2];
  char v15;

  v5 = v2[2];
  v6 = (uint64_t *)v2[3];
  _Deque._UnsafeHandle.segments()(v6, v2[4], v5, (uint64_t)v11);
  v7 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEB8D0];
  _Deque._UnsafeHandle.initialize(at:from:)(v6[2], v11[0], v11[1], a1, a2, v5, 200, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEA578], (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEB8D0]);
  type metadata accessor for UnsafeBufferPointer();
  v8 = type metadata accessor for Optional();
  v9 = *(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 32);
  v9(v13, &v12, v8);
  result = v9(v14, v13, v8);
  if ((v15 & 1) == 0)
    return _Deque._UnsafeHandle.initialize(at:from:)(0, v14[0], v14[1], a1, a2, v5, 200, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEA578], v7);
  return result;
}

uint64_t partial apply for closure #1 in _Deque.append(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  return _Deque._UnsafeHandle.uncheckedAppend(_:)(*(_QWORD *)(v2 + 24), a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t partial apply for closure #1 in _Deque.withContiguousStorageIfAvailable<A>(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t result;

  v6 = a1[2];
  v7 = a1[1] + v6;
  if (v7 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(v2 + 24);
  if (*a1 < v7)
  {
    v9 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a2, v9, 1, v8);
  }
  if (v7 < v6)
  {
LABEL_10:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v10 = *(uint64_t (**)(uint64_t))(v2 + 32);
  v11 = _Deque._UnsafeHandle.buffer(for:)(v6, v7, a1);
  result = v10(v11);
  if (v3)
    return result;
  v9 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a2, v9, 1, v8);
}

uint64_t partial apply for closure #1 in _Deque._copyContents(initializing:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[3];
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;

  v5 = v3[2];
  v4 = v3[3];
  v6 = v3[4];
  _Deque._UnsafeHandle.segments()(a1, a2, v5, (uint64_t)&v41);
  v7 = v42;
  v48 = v41;
  if (v42 >= v6)
    v8 = v6;
  else
    v8 = v42;
  v45 = v4;
  v46 = v6;
  v44[0] = v8;
  v9 = type metadata accessor for UnsafeMutableBufferPointer();
  swift_getCanonicalSpecializedMetadata();
  MEMORY[0x18D78FF74](MEMORY[0x1E0DEB9E0], v9);
  lazy protocol witness table accessor for type PartialRangeUpTo<Int> and conformance PartialRangeUpTo<A>();
  MutableCollection.subscript.getter();
  v10 = UnsafeMutableBufferPointer.init(rebasing:)();
  v12 = v11;
  v45 = v48;
  v46 = v7;
  v13 = type metadata accessor for UnsafeBufferPointer();
  MEMORY[0x18D78FF74](MEMORY[0x1E0DEA5E8], v13);
  Collection.prefix(_:)();
  v14 = UnsafeBufferPointer.init(rebasing:)();
  UnsafeMutableBufferPointer._initialize(from:)(v14, v15, v10, v12);
  if (v7 >= v6
    || (v16 = type metadata accessor for Optional(),
        v17 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 32),
        v17(v44, &v43, v16),
        v17(&v45, v44, v16),
        (v47 & 1) != 0))
  {
    v18 = swift_retain();
    v20 = specialized _Deque.Iterator.init(_base:from:)(v18, v8, v5, v19);
    v22 = v21;
    v24 = v23;
    result = swift_release();
    *a3 = v20;
    a3[1] = v22;
    a3[2] = v24;
    a3[3] = v8;
    return result;
  }
  v26 = v6 - v8;
  if (__OFSUB__(v6, v8))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v26 >= v46)
    v26 = v46;
  v27 = v8 + v26;
  if (__OFADD__(v8, v26))
    goto LABEL_14;
  v48 = v26;
  if (v27 >= v8)
  {
    UnsafeMutableBufferPointer.subscript.getter();
    v28 = UnsafeMutableBufferPointer.init(rebasing:)();
    v30 = v29;
    Collection.prefix(_:)();
    v31 = UnsafeBufferPointer.init(rebasing:)();
    UnsafeMutableBufferPointer._initialize(from:)(v31, v32, v28, v30);
    v33 = swift_retain();
    v35 = specialized _Deque.Iterator.init(_base:from:)(v33, v27, v5, v34);
    v37 = v36;
    v39 = v38;
    result = swift_release();
    *a3 = v35;
    a3[1] = v37;
    a3[2] = v39;
    a3[3] = v27;
    return result;
  }
LABEL_15:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type PartialRangeUpTo<Int> and conformance PartialRangeUpTo<A>()
{
  unint64_t result;
  uint64_t CanonicalSpecializedMetadata;

  result = lazy protocol witness table cache variable for type PartialRangeUpTo<Int> and conformance PartialRangeUpTo<A>;
  if (!lazy protocol witness table cache variable for type PartialRangeUpTo<Int> and conformance PartialRangeUpTo<A>)
  {
    CanonicalSpecializedMetadata = swift_getCanonicalSpecializedMetadata();
    result = MEMORY[0x18D78FF74](MEMORY[0x1E0DEC940], CanonicalSpecializedMetadata);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PartialRangeUpTo<Int> and conformance PartialRangeUpTo<A>);
  }
  return result;
}

uint64_t partial apply for closure #1 in _Deque.Iterator.init(_base:from:)@<X0>(uint64_t *a1@<X0>, Swift::_DequeSlot *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int v6;
  Swift::_DequeSlot v7;
  unint64_t position;
  uint64_t v9;
  uint64_t result;

  v3 = *(_QWORD *)(v2 + 24);
  if (v3 < 0 || a1[1] < v3)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 32);
    v7.position = _Deque._UnsafeHandle.slot(forOffset:)(*(_QWORD *)(v2 + 24)).position;
    position = v7.position;
    v9 = a1[1];
    if (v9 != v3)
    {
      v7.position = specialized _Deque._UnsafeHandle.slot(_:offsetBy:)(a1[2], v9, a1);
      if (position >= v7.position)
        v7.position = _Deque._UnsafeHandle.limSlot.getter(a1);
    }
    a2->position = v6;
    a2[1].position = position;
    a2[2].position = v7.position;
    return swift_retain();
  }
  return result;
}

uint64_t partial apply for closure #1 in _Deque._copyToContiguousArray()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(v2 + 24);
  v6 = *(_QWORD *)(v2 + 16);
  v7 = a1;
  v8 = a2;
  return _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in closure #1 in _Deque._copyToContiguousArray(), (uint64_t)&v5, v3, v6, MEMORY[0x1E0DEE9C0] + 8, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
}

void partial apply for closure #1 in closure #1 in _Deque._copyToContiguousArray()(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  _OWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24[4];
  uint64_t v25;

  v3 = (_OWORD *)v2[3];
  v4 = (_QWORD *)v2[4];
  _Deque._UnsafeHandle.segments()(a1, a2, v2[2], (uint64_t)&v21);
  v6 = v21;
  v5 = v22;
  *(_OWORD *)v24 = *v3;
  v25 = v22;
  v7 = type metadata accessor for UnsafeMutableBufferPointer();
  swift_getCanonicalSpecializedMetadata();
  MEMORY[0x18D78FF74](MEMORY[0x1E0DEB9E0], v7);
  lazy protocol witness table accessor for type PartialRangeUpTo<Int> and conformance PartialRangeUpTo<A>();
  MutableCollection.subscript.getter();
  v8 = UnsafeMutableBufferPointer.init(rebasing:)();
  UnsafeMutableBufferPointer._initialize(from:)(v6, v5, v8, v9);
  v10 = *v4 + v5;
  if (__OFADD__(*v4, v5))
  {
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  *v4 = v10;
  type metadata accessor for UnsafeBufferPointer();
  v11 = type metadata accessor for Optional();
  v12 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
  v12(v24, &v23, v11);
  v12(&v18, v24, v11);
  if ((v20 & 1) != 0)
    goto LABEL_7;
  v13 = v19;
  if (__OFADD__(v5, v19))
    goto LABEL_10;
  if (v5 + v19 < v5)
  {
LABEL_13:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  v14 = v18;
  UnsafeMutableBufferPointer.subscript.getter();
  v15 = UnsafeMutableBufferPointer.init(rebasing:)();
  UnsafeMutableBufferPointer._initialize(from:)(v14, v13, v15, v16);
  v10 = *v4 + v13;
  if (__OFADD__(*v4, v13))
    goto LABEL_11;
  *v4 = v10;
LABEL_7:
  if (v10 != a1[1])
  {
LABEL_12:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_13;
  }
}

uint64_t partial apply for closure #1 in _Deque.subscript.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  Swift::_DequeSlot v8;
  uint64_t v9;

  v7 = *(_QWORD *)(v3 + 16);
  v8.position = _Deque._UnsafeHandle.slot(forOffset:)(*(_QWORD *)(v3 + 24)).position;
  v9 = _Deque._UnsafeHandle.ptr(at:)(v8.position, a1, a2, v7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a3, v9, v7);
}

uint64_t partial apply for closure #1 in _Deque.withContiguousMutableStorageIfAvailable<A>(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  void (*v10)(_QWORD *);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  v6 = a1[2];
  v7 = a1[1] + v6;
  if (v7 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_10:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v8 = *(_QWORD *)(v2 + 24);
  if (*a1 < v7)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v8 - 8) + 56))(a2, 1, 1, *(_QWORD *)(v2 + 24));
  if (v7 < v6)
    goto LABEL_10;
  v10 = *(void (**)(_QWORD *))(v2 + 32);
  v11 = _Deque._UnsafeHandle.buffer(for:)(v6, v7, a1);
  v12 = MEMORY[0x18D78F77C](v11);
  v14 = v13;
  v15[0] = v12;
  v15[1] = v13;
  v10(v15);
  if (!v3)
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a2, 0, 1, v8);
  return $defer #1 <A><A1>() in closure #1 in _Deque.withContiguousMutableStorageIfAvailable<A>(_:)((uint64_t)v15, v12, v14);
}

void partial apply for closure #1 in _Deque.swapAt(_:_:)()
{
  uint64_t v0;
  Swift::Int v1;
  Swift::Int v2;
  Swift::Int position;
  Swift::Int v4;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  position = _Deque._UnsafeHandle.slot(forOffset:)(v1).position;
  v4 = _Deque._UnsafeHandle.slot(forOffset:)(v2).position;
  UnsafeMutableBufferPointer.init(start:count:)();
  UnsafeMutableBufferPointer.swapAt(_:_:)(position, v4);
}

unint64_t partial apply for closure #1 in _Deque.replaceSubrange<A>(_:with:)(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;

  return closure #1 in _Deque.replaceSubrange<A>(_:with:)(a1, a2, v2[5], v2[6], v2[7], v2[8], v2[9], v2[10], v2[11], v2[12], v2[2], v2[3], v2[4]);
}

uint64_t type metadata accessor for _UnsafeMutableWrappedBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _UnsafeMutableWrappedBuffer);
}

uint64_t partial apply for closure #1 in _Deque.subscript.modify@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, Swift::Int *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  Swift::Int position;

  v7 = *(_QWORD *)(v3 + 16);
  position = _Deque._UnsafeHandle.slot(forOffset:)(*(_QWORD *)(v3 + 24)).position;
  swift_getTupleTypeMetadata2();
  *a3 = position;
  _Deque._UnsafeHandle.ptr(at:)(position, a1, a2, v7);
  return UnsafeMutablePointer.move()();
}

uint64_t partial apply for closure #1 in $defer #1 <A>() in _Deque.subscript.modify(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return closure #1 in $defer #1 <A>() in _Deque.subscript.modify(a1, a2, v2[3], v2[4], v2[2]);
}

uint64_t partial apply for closure #1 in _Deque.subscript.setter(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  Swift::Int v5;
  uint64_t v6;
  uint64_t v7;
  Swift::_DequeSlot v8;
  uint64_t v9;

  v6 = v2[2];
  v5 = v2[3];
  v7 = v2[4];
  v8.position = _Deque._UnsafeHandle.slot(forOffset:)(v5).position;
  v9 = _Deque._UnsafeHandle.ptr(at:)(v8.position, a1, a2, v6);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(v9, v7, v6);
}

void partial apply for closure #1 in _Deque.removeAll(keepingCapacity:)()
{
  _Deque._UnsafeHandle.uncheckedRemoveAll()();
}

void partial apply for closure #1 in _Deque.removeFirst(_:)()
{
  uint64_t v0;

  _Deque._UnsafeHandle.uncheckedRemoveFirst(_:)(*(_QWORD *)(v0 + 24));
}

uint64_t partial apply for closure #1 in _Deque.removeFirst()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  return _Deque._UnsafeHandle.uncheckedRemoveFirst()(a1, a2, *(_QWORD *)(v2 + 16));
}

void partial apply for closure #1 in _Deque._customRemoveLast(_:)()
{
  uint64_t v0;

  _Deque._UnsafeHandle.uncheckedRemoveLast(_:)(*(_QWORD *)(v0 + 24));
}

uint64_t partial apply for closure #1 in _Deque._customRemoveLast()(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  return _Deque._UnsafeHandle.uncheckedRemoveLast()(a1, a2, *(_QWORD *)(v2 + 16));
}

unint64_t partial apply for closure #1 in _Deque.removeSubrange(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  return _Deque._UnsafeHandle.uncheckedRemove(offsets:)(*(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), a1, a2, *(_QWORD *)(v2 + 16));
}

unint64_t partial apply for closure #1 in _Deque.remove(at:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  int64_t v6;
  Swift::Int v7;
  unint64_t result;

  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 32);
  _Deque.subscript.getter(v6, **(_QWORD **)(v2 + 24), v5);
  v7 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
  }
  else if (v7 >= v6)
  {
    return _Deque._UnsafeHandle.uncheckedRemove(offsets:)(v6, v7, a1, a2, v5);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in _Deque.insert<A>(contentsOf:at:)(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;

  return closure #1 in _Deque.insert<A>(contentsOf:at:)(a1, a2, v2[5], v2[6], v2[7], v2[2], v2[3], v2[4]);
}

uint64_t partial apply for closure #1 in _Deque.insert(_:at:)(Swift::_DequeSlot *a1, uint64_t a2)
{
  uint64_t *v2;

  return closure #1 in _Deque.insert(_:at:)(a1, a2, v2[3], v2[4], v2[5], v2[2]);
}

uint64_t partial apply for closure #1 in _Deque.append<A>(contentsOf:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in _Deque.append<A>(contentsOf:)(a1, a2, *(uint64_t **)(v2 + 40), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t partial apply for closure #2 in _Deque.append<A>(contentsOf:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return closure #2 in _Deque.append<A>(contentsOf:)(a1, v2[5], v2[2], v2[3], v2[4], a2);
}

uint64_t partial apply for closure #3 in _Deque.append<A>(contentsOf:)(uint64_t *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _BYTE v16[40];

  v5 = v2[2];
  v6 = v2[6];
  _Deque._UnsafeHandle.uncheckedAppend(_:)(v2[5], a1, a2, v5);
  _Deque._UnsafeHandle.availableSegments()(a1, a2, v5, (uint64_t)v16);
  v9 = type metadata accessor for _UnsafeMutableWrappedBuffer(0, v5, v7, v8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  result = _UnsafeMutableWrappedBuffer.initialize<A>(fromPrefixOf:)(v6, v9, AssociatedTypeWitness, AssociatedConformanceWitness);
  v13 = a1[1];
  v14 = __OFADD__(v13, result);
  v15 = v13 + result;
  if (v14)
    __break(1u);
  else
    a1[1] = v15;
  return result;
}

Swift::Int partial apply for closure #1 in closure #1 in _Deque.append<A>(contentsOf:)(Swift::Int *a1, uint64_t a2)
{
  uint64_t *v2;

  return _Deque._UnsafeHandle.uncheckedAppend(contentsOf:)(v2[5], v2[6], a1, a2, v2[2]);
}

_QWORD *partial apply for closure #1 in _Deque.init(repeating:count:)(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  if (result[2])
  {
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v3 = result;
    v4 = *(_QWORD *)(v2 + 24);
    if (v4 >= 1)
    {
      _Deque._UnsafeHandle.ptr(at:)(0, result, a2, *(_QWORD *)(v2 + 16));
      result = (_QWORD *)UnsafeMutablePointer.initialize(repeating:count:)();
    }
    v3[1] = v4;
  }
  return result;
}

uint64_t partial apply for closure #1 in _Deque._Storage.init(minimumCapacity:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = ManagedBuffer.capacity.getter();
  a1[1] = 0;
  a1[2] = 0;
  *a1 = result;
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_0(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t partial apply for closure #1 in _Deque.init<A>(_:)(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;

  return closure #1 in _Deque.init<A>(_:)(a1, a2, v2[5], v2[6], v2[2], v2[3], v2[4]);
}

void partial apply for closure #1 in closure #1 in _Deque.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  UnsafeMutableBufferPointer._initialize(from:)(a1, a2, *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
}

uint64_t sub_18D5AC370()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed AsyncThrowingStream<A, B>.Continuation.Termination) -> (@out ())()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 40))();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed AsyncStream<A>.Continuation.Termination) -> (@out ())()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t sub_18D5AC3D4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed @async (@in_guaranteed A.AsyncSequence.Element) -> (@out Bool)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 32);
  v5 = (_QWORD *)swift_task_alloc(dword_1EE06AECC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = partial apply for thunk for @escaping @callee_guaranteed @async (@in_guaranteed A.AsyncSequence.Element) -> (@out Bool);
  return ((uint64_t (*)(uint64_t, int *))((char *)&async function pointer to thunk for @escaping @callee_guaranteed @async (@in_guaranteed A.AsyncSequence.Element) -> (@out Bool)
                                                 + async function pointer to thunk for @escaping @callee_guaranteed @async (@in_guaranteed A.AsyncSequence.Element) -> (@out Bool)))(a1, v4);
}

{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 16));
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed @async (@in_guaranteed A.AsyncSequence.Element) -> (@unowned Bool)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;

  v6 = *(int **)(v2 + 32);
  v7 = (_QWORD *)swift_task_alloc(dword_1EE06AEDC);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = static Task<>.sleep<A>(until:tolerance:clock:);
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&async function pointer to thunk for @escaping @callee_guaranteed @async (@in_guaranteed A.AsyncSequence.Element) -> (@unowned Bool)
                                                          + async function pointer to thunk for @escaping @callee_guaranteed @async (@in_guaranteed A.AsyncSequence.Element) -> (@unowned Bool)))(a1, a2, v6);
}

void partial apply for closure #2 in static Task<>.sleep(nanoseconds:)()
{
  uint64_t v0;
  unint64_t *v1;
  unint64_t i;
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  v1 = *(unint64_t **)(v0 + 16);
  for (i = atomic_load(v1); (i & 3) == 0; i = atomic_load(v1))
  {
    v3 = i & 0xFFFFFFFFFFFFFFFCLL;
    if ((i & 0xFFFFFFFFFFFFFFFCLL) != 0)
    {
      while (1)
      {
        v4 = __ldaxr(v1);
        if (v4 != v3)
          break;
        if (!__stlxr(2uLL, v1))
        {
          lazy protocol witness table accessor for type CancellationError and conformance CancellationError();
          v6 = swift_allocError();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
          v7 = swift_allocError();
          *v8 = v6;
          swift_continuation_throwingResumeWithError(v3, v7);
          return;
        }
      }
    }
    else
    {
      while (!__ldaxr(v1))
      {
        if (!__stlxr(3uLL, v1))
          return;
      }
    }
    __clrex();
  }
}

uint64_t sub_18D5AC670()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in static Task<>._sleep(until:_:tolerance:clock:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc(dword_1EE06AEF4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCompactMapSequence<A, B>.Iterator;
  v3[2] = v2;
  return swift_task_switch(closure #1 in closure #1 in closure #1 in static Task<>._sleep(until:_:tolerance:clock:), 0, 0);
}

uint64_t partial apply for closure #1 in closure #1 in AsyncThrowingStream.init<>(unfolding:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_1EE06AF04);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCompactMapSequence<A, B>.Iterator;
  return closure #1 in closure #1 in AsyncThrowingStream.init<>(unfolding:)(a1, v4, v5);
}

uint64_t partial apply for closure #2 in closure #1 in AsyncThrowingStream.init<>(unfolding:)()
{
  _QWORD v1[2];

  v1[0] = 0;
  v1[1] = 0;
  return specialized _AsyncStreamCriticalStorage.value.setter((uint64_t)v1);
}

void partial apply for closure #1 in _AsyncStreamCriticalStorage.value.setter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 80) - 8) + 24))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 88), *(_QWORD *)(v0 + 24));
  _swift_async_stream_lock_unlock((os_unfair_lock_t)(v1
                                                   + ((*(unsigned int *)(*(_QWORD *)v1 + 48) + 7) & 0x1FFFFFFF8)));
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in AsyncThrowingStream.init<>(_:bufferingPolicy:_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_1EE06AF14);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCompactMapSequence<A, B>.Iterator;
  return implicit closure #2 in implicit closure #1 in AsyncThrowingStream.init<>(_:bufferingPolicy:_:)(a1, v1);
}

uint64_t partial apply for closure #1 in AsyncThrowingStream._Storage.next()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_1EE06AF2C);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCompactMapSequence<A, B>.Iterator;
  v4[2] = a1;
  v4[3] = v1;
  v4[4] = *v1;
  return swift_task_switch(closure #1 in AsyncThrowingStream._Storage.next(), 0, 0);
}

void partial apply for closure #1 in AsyncThrowingStream._Storage.setOnTermination(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v0[2];
  v1 = v0[3];
  v3 = v0[4];
  v4 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 104);
  v5 = *(_QWORD *)(v4 + 32);
  *(_QWORD *)(v4 + 32) = v1;
  *(_QWORD *)(v4 + 40) = v3;
  _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOy(v1);
  _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe(v5);
  _swift_async_stream_lock_unlock((os_unfair_lock_t)(v2
                                                   + ((*(unsigned int *)(*(_QWORD *)v2 + 48) + 7) & 0x1FFFFFFF8)));
}

uint64_t outlined init with take of ()?(uint64_t a1, uint64_t a2)
{
  uint64_t CanonicalSpecializedMetadata;

  CanonicalSpecializedMetadata = swift_getCanonicalSpecializedMetadata();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CanonicalSpecializedMetadata - 8) + 32))(a2, a1, CanonicalSpecializedMetadata);
  return a2;
}

uint64_t outlined init with take of UnsafeBufferPointer<()>?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for closure #1 in closure #1 in AsyncStream.init(unfolding:onCancel:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_1EE06AF6C);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCompactMapSequence<A, B>.Iterator;
  return closure #1 in closure #1 in AsyncStream.init(unfolding:onCancel:)(a1, v4, v5);
}

uint64_t partial apply for closure #2 in closure #1 in AsyncStream.init(unfolding:onCancel:)()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t result;
  _QWORD v3[2];

  v1 = *(uint64_t (**)(uint64_t))(v0 + 32);
  v3[0] = 0;
  v3[1] = 0;
  result = specialized _AsyncStreamCriticalStorage.value.setter((uint64_t)v3);
  if (v1)
    return v1(result);
  return result;
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in AsyncStream.init(_:bufferingPolicy:_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_1EE06AF7C);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCompactMapSequence<A, B>.Iterator;
  return implicit closure #2 in implicit closure #1 in AsyncStream.init(_:bufferingPolicy:_:)(a1, v1);
}

uint64_t partial apply for closure #1 in AsyncStream._Storage.next()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_1EE06AF94);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCompactMapSequence<A, B>.Iterator;
  v4[2] = a1;
  v4[3] = v1;
  v4[4] = *v1;
  return swift_task_switch(closure #1 in AsyncStream._Storage.next(), 0, 0);
}

void partial apply for closure #1 in AsyncStream._Storage.setOnTermination(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v0[2];
  v1 = v0[3];
  v3 = v0[4];
  v4 = *(_QWORD *)(v2 + 48);
  *(_QWORD *)(v2 + 48) = v1;
  *(_QWORD *)(v2 + 56) = v3;
  _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOy(v1);
  _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe(v4);
  _swift_async_stream_lock_unlock((os_unfair_lock_t)(v2 + 72));
}

uint64_t sub_18D5ACB58()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in static Task<>.sleep(nanoseconds:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc(dword_1EE06AFAC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCompactMapSequence<A, B>.Iterator;
  v3[2] = v2;
  return swift_task_switch(closure #1 in closure #1 in closure #1 in static Task<>.sleep(nanoseconds:), 0, 0);
}

uint64_t sub_18D5ACBC8()
{
  return swift_deallocObject();
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed A.AsyncSequence.Element, @in_guaranteed A.AsyncSequence.Element) -> (@unowned Bool)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t sub_18D5ACBEC()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed A) -> (@out A1, @error @owned Error)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 40))();
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x18D78FF2C](a1, v6, a5);
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for _UnsafeMutableWrappedBuffer(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for _UnsafeMutableWrappedBuffer(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 33) = v3;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for _Deque.Iterator(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t destroy for _Deque.Iterator()
{
  return swift_release();
}

_QWORD *assignWithCopy for _Deque.Iterator(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for _Deque.Iterator(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for _Deque.Iterator(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _Deque.Iterator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _DequeSlot()
{
  return &type metadata for _DequeSlot;
}

uint64_t *initializeBufferWithCopyOfBuffer for Optional(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v6 + 64) + 1;
  if (*(_DWORD *)(v6 + 80) > 7u || (v7 & 0x100000) != 0 || v8 > 0x18)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v7 + 16) & ~(unint64_t)v7));
    swift_retain();
  }
  else if ((*(unsigned int (**)(uint64_t *, uint64_t, _QWORD))(v6 + 48))(a2, 1, *(_QWORD *)(a3 + 16)))
  {
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

uint64_t destroy for Optional(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return result;
}

void *initializeWithCopy for Optional(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *assignWithCopy for Optional(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
  return a1;
}

void *initializeWithTake for Optional(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *assignWithTake for Optional(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for Optional(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v7;
  if (!a2)
    return 0;
  v8 = a2 - v6;
  if (a2 > v6)
  {
    v9 = 8 * v7;
    if (v7 > 3)
      goto LABEL_8;
    v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v7);
      if (v10)
        goto LABEL_15;
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2)
          goto LABEL_24;
LABEL_8:
        v10 = *(unsigned __int8 *)(a1 + v7);
        if (!*(_BYTE *)(a1 + v7))
          goto LABEL_24;
LABEL_15:
        v12 = (v10 - 1) << v9;
        if (v7 > 3)
          v12 = 0;
        if ((_DWORD)v7)
        {
          if (v7 <= 3)
            v13 = v7;
          else
            v13 = 4;
          __asm { BR              X12 }
        }
        return v6 + v12 + 1;
      }
      v10 = *(unsigned __int16 *)(a1 + v7);
      if (*(_WORD *)(a1 + v7))
        goto LABEL_15;
    }
  }
LABEL_24:
  if (v5 < 2)
    return 0;
  v14 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v14 >= 2)
    return v14 - 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for Optional(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  size_t v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (v8)
  {
    v10 = *(_QWORD *)(v7 + 64);
  }
  else
  {
    v9 = 0;
    v10 = *(_QWORD *)(v7 + 64) + 1;
  }
  v11 = a3 >= v9;
  v12 = a3 - v9;
  if (v12 != 0 && v11)
  {
    if (v10 > 3)
    {
      v6 = 1u;
      if (v9 < a2)
        goto LABEL_14;
      goto LABEL_21;
    }
    v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v6 = 4u;
      if (v9 < a2)
      {
LABEL_14:
        v14 = ~v9 + a2;
        if (v10 < 4)
        {
          if ((_DWORD)v10)
          {
            v15 = v14 & ~(-1 << (8 * v10));
            bzero(a1, v10);
            if ((_DWORD)v10 == 3)
            {
              *a1 = v15;
              *((_BYTE *)a1 + 2) = BYTE2(v15);
            }
            else if ((_DWORD)v10 == 2)
            {
              *a1 = v15;
            }
            else
            {
              *(_BYTE *)a1 = v15;
            }
          }
        }
        else
        {
          bzero(a1, v10);
          *(_DWORD *)a1 = v14;
        }
        __asm { BR              X10 }
      }
LABEL_21:
      __asm { BR              X11 }
    }
    if (v13 >= 0x100)
      v6 = 2;
    else
      v6 = v13 > 1;
  }
  if (v9 < a2)
    goto LABEL_14;
  goto LABEL_21;
}

void sub_18D5AD51C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_18D5AD524()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

uint64_t getEnumTag for Optional(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 48))(a1, 1);
}

uint64_t destructiveInjectEnumTag for Optional(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 56))(a1, a2, 1);
}

uint64_t partial apply for closure #1 in _Deque._Storage._makeUniqueCopy()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  return partial apply for closure #1 in _Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(a1, a2, a3, a4);
}

uint64_t swift::getOverride_task_enqueue(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 8);
  else
    return 0;
}

uint64_t swift::getOverride_job_run(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 16);
  else
    return 0;
}

uint64_t swift::getOverride_job_run_on_task_executor(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 24);
  else
    return 0;
}

uint64_t swift::getOverride_job_run_on_serial_and_task_executor(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 32);
  else
    return 0;
}

uint64_t swift::getOverride_task_getCurrentExecutor(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 40);
  else
    return 0;
}

uint64_t swift::getOverride_task_isCurrentExecutor(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 48);
  else
    return 0;
}

uint64_t swift::getOverride_task_switch(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 56);
  else
    return 0;
}

uint64_t swift::getOverride_task_create_common(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 64);
  else
    return 0;
}

uint64_t swift::getOverride_task_future_wait(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 72);
  else
    return 0;
}

uint64_t swift::getOverride_task_future_wait_throwing(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 80);
  else
    return 0;
}

uint64_t swift::getOverride_continuation_resume(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 88);
  else
    return 0;
}

uint64_t swift::getOverride_continuation_throwingResume(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 96);
  else
    return 0;
}

uint64_t swift::getOverride_continuation_throwingResumeWithError(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 104);
  else
    return 0;
}

uint64_t swift::getOverride_task_addCancellationHandler(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 112);
  else
    return 0;
}

uint64_t swift::getOverride_task_removeCancellationHandler(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 120);
  else
    return 0;
}

uint64_t swift::getOverride_task_createNullaryContinuationJob(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 128);
  else
    return 0;
}

uint64_t swift::getOverride_task_asyncMainDrainQueue(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 136);
  else
    return 0;
}

uint64_t swift::getOverride_task_suspend(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 144);
  else
    return 0;
}

uint64_t swift::getOverride_task_enqueueTaskOnExecutor(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 152);
  else
    return 0;
}

uint64_t swift::getOverride_continuation_init(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 160);
  else
    return 0;
}

uint64_t swift::getOverride_continuation_await(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 168);
  else
    return 0;
}

uint64_t swift::getOverride_asyncLet_wait(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 176);
  else
    return 0;
}

uint64_t swift::getOverride_asyncLet_wait_throwing(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 184);
  else
    return 0;
}

uint64_t swift::getOverride_asyncLet_end(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 192);
  else
    return 0;
}

uint64_t swift::getOverride_asyncLet_get(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 200);
  else
    return 0;
}

uint64_t swift::getOverride_asyncLet_get_throwing(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 208);
  else
    return 0;
}

uint64_t swift::getOverride_asyncLet_consume(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 216);
  else
    return 0;
}

uint64_t swift::getOverride_asyncLet_consume_throwing(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 224);
  else
    return 0;
}

uint64_t swift::getOverride_asyncLet_finish(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 232);
  else
    return 0;
}

uint64_t swift::getOverride_taskGroup_initialize(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 240);
  else
    return 0;
}

uint64_t swift::getOverride_taskGroup_initializeWithFlags(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 248);
  else
    return 0;
}

uint64_t swift::getOverride_taskGroup_attachChild(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 256);
  else
    return 0;
}

uint64_t swift::getOverride_taskGroup_destroy(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 264);
  else
    return 0;
}

uint64_t swift::getOverride_taskGroup_wait_next_throwing(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 272);
  else
    return 0;
}

uint64_t swift::getOverride_taskGroup_isEmpty(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 280);
  else
    return 0;
}

uint64_t swift::getOverride_taskGroup_isCancelled(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 288);
  else
    return 0;
}

uint64_t swift::getOverride_taskGroup_cancelAll(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 296);
  else
    return 0;
}

uint64_t swift::getOverride_taskGroup_addPending(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 304);
  else
    return 0;
}

uint64_t swift::getOverride_taskGroup_waitAll(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 312);
  else
    return 0;
}

uint64_t swift::getOverride_task_reportIllegalTaskLocalBindingWithinWithTaskGroup(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 320);
  else
    return 0;
}

uint64_t swift::getOverride_task_localValuePush(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 328);
  else
    return 0;
}

uint64_t swift::getOverride_task_localValueGet(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 336);
  else
    return 0;
}

uint64_t swift::getOverride_task_localValuePop(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 344);
  else
    return 0;
}

uint64_t swift::getOverride_task_localsCopyTo(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 352);
  else
    return 0;
}

uint64_t swift::getOverride_task_hasTaskGroupStatusRecord(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 360);
  else
    return 0;
}

uint64_t swift::getOverride_task_cancel(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 368);
  else
    return 0;
}

uint64_t swift::getOverride_task_cancel_group_child_tasks(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 376);
  else
    return 0;
}

uint64_t swift::getOverride_task_escalate(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 384);
  else
    return 0;
}

uint64_t swift::getOverride_task_getPreferredTaskExecutor(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 392);
  else
    return 0;
}

uint64_t swift::getOverride_task_pushTaskExecutorPreference(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 400);
  else
    return 0;
}

uint64_t swift::getOverride_task_popTaskExecutorPreference(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 408);
  else
    return 0;
}

uint64_t swift::getOverride_task_startOnMainActor(swift *this)
{
  swift_once();
  if (getOverrideSectionPtr(void)::OverrideSectionPtr)
    return *(_QWORD *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 416);
  else
    return 0;
}

uint8_t *getOverrideSectionPtr(void)::$_0::__invoke()
{
  mach_header_64 *v0;
  uint8_t *result;
  unint64_t size;

  size = 0;
  v0 = _NSGetMachExecuteHeader();
  result = getsectiondata(v0, "__DATA", "__s60async_hook", &size);
  if (!result || size <= 0x1A7)
    result = 0;
  getOverrideSectionPtr(void)::OverrideSectionPtr = (uint64_t)result;
  return result;
}

void swift::runJobInEstablishedExecutorContext(uint64_t a1)
{
  void *v2;
  _QWORD *StatusReg;
  uint64_t v4;
  unint64_t v5;
  os_signpost_id_t v6;
  os_signpost_id_t v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  int v11;
  unint64_t v12;

  if (*MEMORY[0x1E0DEEA60])
    ((void (*)(uint64_t))*MEMORY[0x1E0DEEA60])(a1);
  v2 = (void *)MEMORY[0x18D78FD58]();
  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (!a1 || *(_BYTE *)(a1 + 32))
  {
    v9 = StatusReg[104];
    v10 = *(void **)(a1 + 40);
    if ((void *)StatusReg[28] != v10)
      v10 = (void *)voucher_adopt();
    *(_QWORD *)(a1 + 40) = -1;
    if (*(_BYTE *)(v9 + 48))
    {
      if ((unint64_t)v10 + 1 >= 2)
        os_release(v10);
    }
    else
    {
      *(_QWORD *)(v9 + 40) = v10;
      *(_BYTE *)(v9 + 48) = 1;
    }
    (*(void (**)(uint64_t))(a1 + 56))(a1);
  }
  else
  {
    v4 = StatusReg[103];
    StatusReg[103] = a1;
    swift::AsyncTask::flagAsRunning((swift::AsyncTask *)a1);
    v5 = swift::concurrency::trace::job_run_begin((swift::AsyncTask *)a1);
    v7 = v6;
    (*(void (**)(void))(a1 + 56))();
    if (v7 != -1 && _os_trace_lazy_init_completed_4swift())
    {
      if (swift::concurrency::trace::LogsToken != -1)
        dispatch_once_f(&swift::concurrency::trace::LogsToken, 0, (dispatch_function_t)swift::concurrency::trace::setupLogs);
      if (swift::concurrency::trace::TracingEnabled)
      {
        if (v7)
        {
          v8 = swift::concurrency::trace::TaskLog;
          if (os_signpost_enabled((os_log_t)swift::concurrency::trace::TaskLog))
          {
            v11 = 134217984;
            v12 = v5;
            _os_signpost_emit_with_name_impl(&dword_18D56B000, v8, OS_SIGNPOST_INTERVAL_END, v7, "job_run", "task=%llx", (uint8_t *)&v11, 0xCu);
          }
        }
      }
    }
    if (v4)
      StatusReg[103] = v4;
  }
  objc_autoreleasePoolPop(v2);
  if (*MEMORY[0x1E0DEEA68])
    ((void (*)(uint64_t))*MEMORY[0x1E0DEEA68])(a1);
}

uint64_t swift::AsyncTask::flagAsRunning(swift::AsyncTask *this)
{
  unint64_t current_override_qos_floor;
  char v3;
  unint64_t v4;
  unsigned __int128 *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int128 v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned __int128 v12;
  int v13;
  swift::AsyncTask *v14;
  const char *v15;
  char *v16;
  unint64_t StatusReg;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  _QWORD v23[3];
  unsigned __int128 v24;
  int v25;
  unint64_t v26;

  current_override_qos_floor = dispatch_thread_get_current_override_qos_floor();
  v3 = current_override_qos_floor;
  v26 = current_override_qos_floor;
  v4 = HIDWORD(current_override_qos_floor);
  v25 = HIDWORD(current_override_qos_floor);
  v5 = (unsigned __int128 *)((char *)this + 96);
  do
  {
    v8 = __ldxp(v5);
    v7 = *((_QWORD *)&v8 + 1);
    v6 = v8;
  }
  while (__stxp(v8, v5));
  v24 = v8;
  if ((v8 & 0x4000) != 0)
  {
    v14 = (swift::AsyncTask *)*((_QWORD *)this + 20);
    v23[0] = &v24;
    v23[1] = &v26;
    v23[2] = &v25;
    swift::removeStatusRecord(this, (uint64_t)v14, (unsigned int *)&v24, (void (*)(uint64_t, unint64_t, uint64_t, unsigned __int128 *))__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift::AsyncTask::flagAsRunning(void)::{lambda(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)#1}>, (uint64_t)v23);
    swift::_swift_task_dealloc_specific(this, v14, v15, v16);
    *((_QWORD *)this + 20) = 0;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v18 = *(_QWORD *)(StatusReg + 832);
    v19 = (void *)*((_QWORD *)this + 5);
    if (*(void **)(StatusReg + 224) != v19)
      v19 = (void *)voucher_adopt();
    *((_QWORD *)this + 5) = -1;
    if (*(_BYTE *)(v18 + 48))
    {
      if ((unint64_t)v19 + 1 >= 2)
        os_release(v19);
    }
    else
    {
      *(_QWORD *)(v18 + 40) = v19;
      *(_BYTE *)(v18 + 48) = 1;
    }
    return swift_task_enterThreadLocalContext();
  }
  else
  {
    v9 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v10 = v8;
    if ((current_override_qos_floor & 1) != 0)
    {
LABEL_5:
      if (v4 < v10)
      {
        dispatch_thread_override_self();
        LODWORD(v4) = v10;
      }
    }
    while (1)
    {
      v11 = *(_DWORD *)(v9 + 24) & 0xFFFFFFFC;
      do
      {
        while (1)
        {
          v12 = __ldxp(v5);
          v13 = (_QWORD)v12 != v6;
          if (*((_QWORD *)&v12 + 1) != v7)
            ++v13;
          if (!v13)
            break;
          if (!__stxp(v12, v5))
            goto LABEL_14;
        }
      }
      while (__stxp(__PAIR128__(v7, v10 & 0xFFFFEBFF | ((unint64_t)(v11 >> 2) << 34)), v5));
LABEL_14:
      if (!((unint64_t)v12 ^ v6 | *((_QWORD *)&v12 + 1) ^ v7))
        break;
      v7 = *((_QWORD *)&v12 + 1);
      v6 = v12;
      v10 = v12;
      if ((v3 & 1) != 0)
        goto LABEL_5;
    }
    swift::concurrency::trace::task_status_changed(this, (swift::AsyncTask *)v10, (v10 >> 8) & 1, 0, 1, v11 != 0, 0);
    v20 = *(_QWORD *)(v9 + 832);
    v21 = (void *)*((_QWORD *)this + 5);
    if (*(void **)(v9 + 224) != v21)
      v21 = (void *)voucher_adopt();
    *((_QWORD *)this + 5) = -1;
    if (*(_BYTE *)(v20 + 48))
    {
      if ((unint64_t)v21 + 1 >= 2)
        os_release(v21);
    }
    else
    {
      *(_QWORD *)(v20 + 40) = v21;
      *(_BYTE *)(v20 + 48) = 1;
    }
    return swift_task_enterThreadLocalContext();
  }
}

unint64_t swift::concurrency::trace::job_run_begin(swift::AsyncTask *a1)
{
  unint64_t TaskId;
  os_signpost_id_t v3;
  NSObject *v4;
  int v6;
  unint64_t v7;

  TaskId = 0;
  if (a1 && !*((_BYTE *)a1 + 32))
  {
    if (!_os_trace_lazy_init_completed_4swift())
      return 0;
    if (swift::concurrency::trace::LogsToken != -1)
      dispatch_once_f(&swift::concurrency::trace::LogsToken, 0, (dispatch_function_t)swift::concurrency::trace::setupLogs);
    if (swift::concurrency::trace::TracingEnabled)
    {
      v3 = os_signpost_id_generate((os_log_t)swift::concurrency::trace::TaskLog);
      TaskId = swift::AsyncTask::getTaskId(a1);
      if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v4 = swift::concurrency::trace::TaskLog;
        if (os_signpost_enabled((os_log_t)swift::concurrency::trace::TaskLog))
        {
          v6 = 134217984;
          v7 = TaskId;
          _os_signpost_emit_with_name_impl(&dword_18D56B000, v4, OS_SIGNPOST_INTERVAL_BEGIN, v3, "job_run", "task=%llx", (uint8_t *)&v6, 0xCu);
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return TaskId;
}

uint64_t `anonymous namespace'::ExecutorTrackingInfo::current(_anonymous_namespace_::ExecutorTrackingInfo *this)
{
  return *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 832);
}

uint64_t swift::restoreTaskVoucher(swift *this, swift::AsyncTask *a2)
{
  unint64_t StatusReg;
  uint64_t v4;
  uint64_t result;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v4 = *(_QWORD *)(StatusReg + 832);
  result = *(_QWORD *)(v4 + 40);
  if (*(_QWORD *)(StatusReg + 224) != result)
    result = voucher_adopt();
  *((_QWORD *)this + 5) = result;
  if (*(_BYTE *)(v4 + 48))
    *(_BYTE *)(v4 + 48) = 0;
  return result;
}

uint64_t swift_task_getCurrent()
{
  return *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 824);
}

uint64_t swift::_swift_task_clearCurrent(swift *this)
{
  unint64_t StatusReg;
  uint64_t result;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  result = *(_QWORD *)(StatusReg + 824);
  *(_QWORD *)(StatusReg + 824) = 0;
  return result;
}

uint64_t swift::_swift_task_setCurrent(uint64_t a1)
{
  unint64_t StatusReg;
  uint64_t v2;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v2 = *(_QWORD *)(StatusReg + 824);
  *(_QWORD *)(StatusReg + 824) = a1;
  return v2;
}

uint64_t swift_task_getCurrentThreadPriority()
{
  return qos_class_self();
}

uint64_t swift_bincompat_useLegacyNonCrashingExecutorChecks(void)
{
  uint64_t v0;
  const char *IsCurrentExecutorLegacyModeOverride;
  const char *v2;

  v0 = swift_bincompat_useLegacyNonCrashingExecutorChecks();
  IsCurrentExecutorLegacyModeOverride = (const char *)concurrencyIsCurrentExecutorLegacyModeOverride();
  if (IsCurrentExecutorLegacyModeOverride)
  {
    v2 = IsCurrentExecutorLegacyModeOverride;
    if (!strcmp(IsCurrentExecutorLegacyModeOverride, "nocrash") || !strcmp(v2, "legacy"))
    {
      return 1;
    }
    else if (!strcmp(v2, "crash") || !strcmp(v2, "swift6"))
    {
      return 0;
    }
  }
  return v0;
}

void swift_task_reportUnexpectedExecutor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BOOL4 v9;
  _BOOL4 isMainExecutor;
  const char *v11;
  const char *v12;
  const char *v13;
  const char *v14;
  int shouldReportFatalErrorsToDebugger;
  char *v16;
  FILE **v17;
  _OWORD v18[5];
  uint64_t v19;
  char *v20;
  _QWORD v21[2];

  v21[0] = a5;
  v21[1] = a6;
  if (swift_task_reportUnexpectedExecutor::logLevelToken != -1)
    dispatch_once_f(&swift_task_reportUnexpectedExecutor::logLevelToken, 0, (dispatch_function_t)checkUnexpectedExecutorLogLevel);
  if (unexpectedExecutorLogLevel)
  {
    v9 = unexpectedExecutorLogLevel == 2;
    isMainExecutor = swift::SerialExecutorRef::isMainExecutor((swift::SerialExecutorRef *)v21);
    v12 = "actor-isolated function";
    if (isMainExecutor)
      v12 = "@MainActor function";
    v13 = "the same actor";
    if (isMainExecutor)
      v13 = "the main thread";
    v20 = 0;
    v14 = "warning";
    if (v9)
      v14 = "error";
    swift_asprintf(&v20, v11, v14, v12, a2, a1, a4, v13);
    shouldReportFatalErrorsToDebugger = _swift_shouldReportFatalErrorsToDebugger();
    v16 = v20;
    if (shouldReportFatalErrorsToDebugger)
    {
      memset(&v18[2], 0, 48);
      v19 = 0;
      v18[0] = *(_OWORD *)((char *)&_s14descr1E26003D1CMn.AccessFunction + 3);
      v18[1] = *(_OWORD *)((char *)&_s14descr1E26003D1CMn.MetadataPositiveSizeInWords + 3);
      MEMORY[0x18D78FB60](v9, v20, v18);
    }
    v17 = (FILE **)MEMORY[0x1E0C80C10];
    fputs(v16, (FILE *)*MEMORY[0x1E0C80C10]);
    fflush(*v17);
    asl_log(0, 0, 3, "%s", v16);
    free(v16);
    if (v9)
      abort();
  }
}

const char *checkUnexpectedExecutorLogLevel(void *a1)
{
  const char *result;
  int v2;
  int v3;

  result = getenv("SWIFT_UNEXPECTED_EXECUTOR_LOG_LEVEL");
  if (result)
  {
    result = (const char *)strtol(result, 0, 0);
    if ((unint64_t)result <= 2)
    {
      v2 = (int)result;
      result = (const char *)swift_bincompat_useLegacyNonCrashingExecutorChecks();
      if ((_DWORD)result)
        v3 = v2;
      else
        v3 = 2;
      unexpectedExecutorLogLevel = v3;
    }
  }
  return result;
}

void swift_asprintf(char **a1, const char *a2, ...)
{
  int v3;
  size_t v4;
  char *v5;
  char *v6;
  va_list va;

  va_start(va, a2);
  v3 = vsnprintf(0, 0, "%s: data race detected: %s at %.*s:%d was not called on %s\n", va);
  *a1 = 0;
  if ((v3 & 0x80000000) == 0)
  {
    v4 = (v3 + 1);
    v5 = (char *)malloc_type_malloc(v4, 0x887381A9uLL);
    if (v5)
    {
      v6 = v5;
      if (vsnprintf(v5, v4, "%s: data race detected: %s at %.*s:%d was not called on %s\n", va) < 0)
        free(v6);
      else
        *a1 = v6;
    }
  }
}

{
  int v3;
  size_t v4;
  char *v5;
  char *v6;
  va_list va;

  va_start(va, a2);
  v3 = vsnprintf(0, 0, "error: %sTaskGroup: detected pending task count overflow, in task group %p! Status: %s", va);
  *a1 = 0;
  if ((v3 & 0x80000000) == 0)
  {
    v4 = (v3 + 1);
    v5 = (char *)malloc_type_malloc(v4, 0x887381A9uLL);
    if (v5)
    {
      v6 = v5;
      if (vsnprintf(v5, v4, "error: %sTaskGroup: detected pending task count overflow, in task group %p! Status: %s", va) < 0)free(v6);
      else
        *a1 = v6;
    }
  }
}

{
  int v3;
  size_t v4;
  char *v5;
  char *v6;
  va_list va;

  va_start(va, a2);
  v3 = vsnprintf(0, 0, "error: task-local: detected illegal task-local value binding at %.*s:%d.\nTask-local values must only be set in a structured-context, such as: around any (synchronous or asynchronous function invocation), around an 'async let' declaration, or around a 'with(Throwing)TaskGroup(...){ ... }' invocation. Notably, binding a task-local value is illegal *within the body* of a withTaskGroup invocation.\n\nThe following example is illegal:\n\n    await withTaskGroup(...) { group in \n        await <task-local>.withValue(1234) {\n            group.addTask { ... }\n        }\n    }\n\nAnd should be replaced by, either: setting the value for the entire group:\n\n    // bind task-local for all tasks spawned within the group\n    await <task-local>.withValue(1234) {\n"
         "        await withTaskGroup(...) { group in\n"
         "            group.addTask { ... }\n"
         "        }\n"
         "    }\n"
         "\n"
         "or, inside the specific task-group child task:\n"
         "\n"
         "    // bind-task-local for only specific child-task\n"
         "    await withTaskGroup(...) { group in\n"
         "        group.addTask {\n"
         "            await <task-local>.withValue(1234) {\n"
         "                ... \n"
         "            }\n"
         "        }\n"
         "\n"
         "        group.addTask { ... }\n"
         "    }\n",
         va);
  *a1 = 0;
  if ((v3 & 0x80000000) == 0)
  {
    v4 = (v3 + 1);
    v5 = (char *)malloc_type_malloc(v4, 0x887381A9uLL);
    if (v5)
    {
      v6 = v5;
      if (vsnprintf(v5, v4, "error: task-local: detected illegal task-local value binding at %.*s:%d.\nTask-local values must only be set in a structured-context, such as: around any (synchronous or asynchronous function invocation), around an 'async let' declaration, or around a 'with(Throwing)TaskGroup(...){ ... }' invocation. Notably, binding a task-local value is illegal *within the body* of a withTaskGroup invocation.\n\nThe following example is illegal:\n\n    await withTaskGroup(...) { group in \n        await <task-local>.withValue(1234) {\n            group.addTask { ... }\n        }\n    }\n\nAnd should be replaced by, either: setting the value for the entire group:\n\n    // bind task-local for all tasks spawned within the group\n"
             "    await <task-local>.withValue(1234) {\n"
             "        await withTaskGroup(...) { group in\n"
             "            group.addTask { ... }\n"
             "        }\n"
             "    }\n"
             "\n"
             "or, inside the specific task-group child task:\n"
             "\n"
             "    // bind-task-local for only specific child-task\n"
             "    await withTaskGroup(...) { group in\n"
             "        group.addTask {\n"
             "            await <task-local>.withValue(1234) {\n"
             "                ... \n"
             "            }\n"
             "        }\n"
             "\n"
             "        group.addTask { ... }\n"
             "    }\n",
             va) < 0)
        free(v6);
      else
        *a1 = v6;
    }
  }
}

void swift_defaultActor_initialize(const void *a1)
{
  unsigned __int128 *v1;

  *((_BYTE *)a1 + 16) = 0;
  v1 = (unsigned __int128 *)((char *)a1 + 32);
  do
    __ldxp(v1);
  while (__stxp(0, v1));
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  swift::concurrency::trace::actor_create(a1);
}

uint64_t swift_defaultActor_destroy(uint64_t result)
{
  unsigned __int128 *v1;
  unsigned __int128 v2;

  v1 = (unsigned __int128 *)(result + 32);
  do
    v2 = __ldaxp(v1);
  while (__stxp(v2, v1));
  return result;
}

void swift_defaultActor_enqueue(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned __int128 *v8;
  uint64_t v9;
  unsigned int v10;
  signed __int128 v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int128 v18;
  int v19;
  _BOOL4 v20;
  int v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t PreferredTaskExecutor;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t ObjectType;
  int v45;
  unsigned __int8 *v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;

  v4 = *(unsigned __int8 *)(a1 + 33);
  swift::concurrency::trace::actor_enqueue(a2, (swift::AsyncTask *)a1);
  v5 = *(_QWORD *)a2;
  do
  {
    v6 = *(_QWORD *)(v5 + 64);
    if (v6 && (*(_BYTE *)(v6 + 3) & 1) != 0)
      break;
    v5 = *(_QWORD *)(v5 + 8);
    if (!v5)
      break;
  }
  while ((*(_BYTE *)(v5 + 32) & 2) != 0);
  v7 = a2[16];
  v8 = (unsigned __int128 *)(a2 + 32);
  do
  {
    v11 = __ldxp(v8);
    v9 = *((_QWORD *)&v11 + 1);
    v10 = v11;
  }
  while (__stxp(v11, v8));
  v12 = v4 << 8;
  v13 = v11 >> 32;
  while (1)
  {
    v14 = v10 | (unint64_t)(v13 << 32);
    *(_QWORD *)(a1 + 16) = v9;
    v15 = v12 | v10 & 0xFFFF00FF | 0x10;
    if (v4 <= BYTE1(v10))
      v15 = v10;
    else
      v13 = v13;
    v16 = (v10 & 7) != 0 ? v13 : 0;
    v17 = (v10 & 7) != 0 ? v15 : v12 | v10 & 0xFFFF00E8 | 1;
    do
    {
      while (1)
      {
        v18 = __ldxp(v8);
        v19 = (_QWORD)v18 != v14;
        if (*((_QWORD *)&v18 + 1) != v9)
          ++v19;
        if (!v19)
          break;
        if (!__stlxp(v18, v8))
          goto LABEL_24;
      }
    }
    while (__stlxp(__PAIR128__(a1, v17 | (unint64_t)(v16 << 32)), v8));
LABEL_24:
    if (!((unint64_t)v18 ^ v14 | *((_QWORD *)&v18 + 1) ^ v9))
      break;
    v13 = DWORD1(v18);
    v10 = v18;
    v9 = *((_QWORD *)&v18 + 1);
  }
  v20 = v7 != 0;
  v21 = v17 & 7;
  if ((v17 & 4) != 0)
    v22 = -1;
  else
    v22 = v17 & 7;
  swift::concurrency::trace::actor_state_changed(a2, a1, v22, v20, (v17 >> 4) & 1, BYTE1(v17));
  if ((v10 & 7) == 1 || v21 != 1)
  {
    v30 = BYTE1(v10);
    if ((_DWORD)v30 != BYTE1(v17))
    {
      if (v21 == 2)
      {
        dispatch_lock_override_start_with_debounce();
      }
      else
      {
        if (_os_trace_lazy_init_completed_4swift())
        {
          if (swift::concurrency::trace::LogsToken != -1)
            dispatch_once_f(&swift::concurrency::trace::LogsToken, 0, (dispatch_function_t)swift::concurrency::trace::setupLogs);
          if (swift::concurrency::trace::TracingEnabled)
          {
            v34 = swift::concurrency::trace::PotentialPriorityInversionLog;
            if (os_signpost_enabled((os_log_t)swift::concurrency::trace::PotentialPriorityInversionLog))
            {
              v45 = 134218496;
              v46 = a2;
              v47 = 2048;
              v48 = v30;
              v49 = 2048;
              v50 = BYTE1(v17);
              _os_signpost_emit_with_name_impl(&dword_18D56B000, v34, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "scheduled_actor_inversion", " enableTelemetry=YES actor=%p oldPriority=%zu newPriority=%zu", (uint8_t *)&v45, 0x20u);
            }
          }
        }
        swift_retain();
        if (*(_BYTE *)(a1 + 32))
        {
          PreferredTaskExecutor = 0;
          v41 = 0;
        }
        else
        {
          PreferredTaskExecutor = swift::AsyncTask::getPreferredTaskExecutor((swift::AsyncTask *)a1, 0, v35, v36, v37, v38, v39);
          v41 = v42 & 0xFFFFFFFFFFFFFFF8;
        }
        v43 = operator new();
        *(_QWORD *)v43 = &unk_1ECE20648;
        *(_QWORD *)(v43 + 8) = 3;
        *(_DWORD *)(v43 + 32) = (BYTE1(v17) << 8) | 0xC1;
        *(_QWORD *)(v43 + 44) = 0;
        *(_QWORD *)(v43 + 36) = 0;
        *(_DWORD *)(v43 + 52) = 0;
        *(_QWORD *)(v43 + 40) = voucher_copy();
        *(_QWORD *)(v43 + 64) = a2;
        if (PreferredTaskExecutor)
        {
          ObjectType = swift_getObjectType();
          _swift_task_enqueueOnTaskExecutor(v43, PreferredTaskExecutor, ObjectType, v41);
        }
        else
        {
          swift_task_enqueueGlobal(v43);
        }
      }
    }
  }
  else
  {
    if (*(_BYTE *)(a1 + 32))
    {
      v28 = 0;
      v29 = 0;
    }
    else
    {
      v28 = swift::AsyncTask::getPreferredTaskExecutor((swift::AsyncTask *)a1, 0, v23, v24, v25, v26, v27);
      v29 = v31 & 0xFFFFFFFFFFFFFFF8;
    }
    v32 = operator new();
    *(_QWORD *)v32 = &unk_1ECE20648;
    *(_QWORD *)(v32 + 8) = 3;
    *(_DWORD *)(v32 + 32) = v17 & 0xFF00 | 0xC1;
    *(_QWORD *)(v32 + 44) = 0;
    *(_QWORD *)(v32 + 36) = 0;
    *(_DWORD *)(v32 + 52) = 0;
    *(_QWORD *)(v32 + 40) = voucher_copy();
    *(_QWORD *)(v32 + 64) = a2;
    if (v28)
    {
      v33 = swift_getObjectType();
      _swift_task_enqueueOnTaskExecutor(v32, v28, v33, v29);
    }
    else
    {
      swift_task_enqueueGlobal(v32);
    }
  }
}

_anonymous_namespace_::DefaultActorImpl *swift_defaultActor_deallocate(_anonymous_namespace_::DefaultActorImpl *result)
{
  unsigned __int128 *v1;
  unint64_t v2;
  unsigned __int128 v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int128 v8;
  int v9;

  v1 = (unsigned __int128 *)((char *)result + 32);
  do
  {
    v3 = __ldxp(v1);
    v2 = *((_QWORD *)&v3 + 1);
  }
  while (__stxp(v3, v1));
  if ((v3 & 7) != 2)
  v4 = v3;
  v5 = DWORD1(v3);
  while (1)
  {
    v6 = v4 & 0xFFFFFFF8 | 3 | ((unint64_t)v5 << 32);
    v7 = v4 | (v5 << 32);
    do
    {
      while (1)
      {
        v8 = __ldxp(v1);
        v4 = v8;
        v9 = (_QWORD)v8 != v7;
        if (*((_QWORD *)&v8 + 1) != v2)
          ++v9;
        if (!v9)
          break;
        if (!__stxp(v8, v1))
          goto LABEL_12;
      }
    }
    while (__stxp(__PAIR128__(v2, v6), v1));
LABEL_12:
    if ((_QWORD)v8 == v7 && *((_QWORD *)&v8 + 1) == v2)
      return result;
    v5 = DWORD1(v8);
    v2 = *((_QWORD *)&v8 + 1);
    if ((v8 & 7) != 2)
  }
}

_anonymous_namespace_::DefaultActorImpl *swift_defaultActor_deallocateResilient(_anonymous_namespace_::DefaultActorImpl *result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int128 *v3;
  unint64_t v4;
  unsigned __int128 v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int128 v10;
  int v11;

  v1 = *(_QWORD *)result;
  while (1)
  {
    v2 = *(_QWORD *)(v1 + 64);
    if (v2)
    {
      if ((*(_BYTE *)(v2 + 3) & 1) != 0)
        break;
    }
    v1 = *(_QWORD *)(v1 + 8);
    if (!v1 || (*(_BYTE *)(v1 + 32) & 2) == 0)
      return (_anonymous_namespace_::DefaultActorImpl *)swift_deallocObject();
  }
  v3 = (unsigned __int128 *)((char *)result + 32);
  do
  {
    v5 = __ldxp(v3);
    v4 = *((_QWORD *)&v5 + 1);
  }
  while (__stxp(v5, v3));
  if ((v5 & 7) != 2)
  v6 = v5;
  v7 = DWORD1(v5);
  while (1)
  {
    v8 = v6 & 0xFFFFFFF8 | 3 | ((unint64_t)v7 << 32);
    v9 = v6 | (v7 << 32);
    do
    {
      while (1)
      {
        v10 = __ldxp(v3);
        v6 = v10;
        v11 = (_QWORD)v10 != v9;
        if (*((_QWORD *)&v10 + 1) != v4)
          ++v11;
        if (!v11)
          break;
        if (!__stxp(v10, v3))
          goto LABEL_18;
      }
    }
    while (__stxp(__PAIR128__(v4, v8), v3));
LABEL_18:
    if ((_QWORD)v10 == v9 && *((_QWORD *)&v10 + 1) == v4)
      return result;
    v7 = DWORD1(v10);
    v4 = *((_QWORD *)&v10 + 1);
    if ((v10 & 7) != 2)
  }
}

void swift::swift_executor_escalate(unsigned __int8 *a1, uint64_t a2, swift::AsyncTask *a3, unint64_t a4)
{
  swift::AsyncTask *v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned __int128 *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned __int128 v13;
  unint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  unint64_t v19;
  unsigned __int128 v20;
  int v21;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t PreferredTaskExecutor;
  uint64_t v30;
  uint64_t v31;
  _BOOL4 v32;
  int v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t ObjectType;
  int v38;
  int v39;

  if (a1 && !a2)
  {
    v5 = a3;
    v7 = *(_QWORD *)a1;
    do
    {
      v8 = *(_QWORD *)(v7 + 64);
      if (v8 && (*(_BYTE *)(v8 + 3) & 1) != 0)
        break;
      v7 = *(_QWORD *)(v7 + 8);
      if (!v7)
        break;
    }
    while ((*(_BYTE *)(v7 + 32) & 2) != 0);
    v9 = a1[16];
    v10 = (unsigned __int128 *)(a1 + 32);
    do
    {
      v13 = __ldxp(v10);
      v11 = *((_QWORD *)&v13 + 1);
      v12 = v13;
    }
    while (__stxp(v13, v10));
    if ((v13 & 7) != 0)
    {
      v14 = DWORD1(v13);
      v15 = (_DWORD)a4 << 8;
      v38 = (a4 << 8) | 0xC1;
      v39 = v9;
      do
      {
        v17 = v15 | v12 & 0xFFFF00FF | 0x10;
        if ((_DWORD)v17 == v12 || BYTE1(v12) >= a4)
          break;
        v19 = v12 | ((unint64_t)v14 << 32);
        do
        {
          while (1)
          {
            v20 = __ldxp(v10);
            v21 = (_QWORD)v20 != v19;
            if (*((_QWORD *)&v20 + 1) != v11)
              ++v21;
            if (!v21)
              break;
            if (!__stxp(v20, v10))
              goto LABEL_24;
          }
        }
        while (__stxp(__PAIR128__(v11, v17 | (v14 << 32)), v10));
LABEL_24:
        if ((_QWORD)v20 == v19 && *((_QWORD *)&v20 + 1) == v11)
        {
          v16 = v12 & 7;
          v23 = 0;
          switch(v12 & 7)
          {
            case 0u:
              goto LABEL_35;
            case 1u:
              swift::concurrency::trace::actor_state_changed(a1, v11, 1, v9 != 0, 1, a4);
              swift_retain();
              PreferredTaskExecutor = 0;
              if (v5)
              {
                v30 = 0;
                if (!*((_BYTE *)v5 + 32))
                {
                  PreferredTaskExecutor = swift::AsyncTask::getPreferredTaskExecutor(v5, 0, v24, v25, v26, v27, v28);
                  v30 = v31;
                }
              }
              else
              {
                v30 = 0;
              }
              v36 = operator new();
              *(_QWORD *)v36 = &unk_1ECE20648;
              *(_QWORD *)(v36 + 8) = 3;
              *(_DWORD *)(v36 + 32) = v38;
              *(_QWORD *)(v36 + 44) = 0;
              *(_QWORD *)(v36 + 36) = 0;
              *(_DWORD *)(v36 + 52) = 0;
              *(_QWORD *)(v36 + 40) = voucher_copy();
              *(_QWORD *)(v36 + 64) = a1;
              if (PreferredTaskExecutor)
              {
                ObjectType = swift_getObjectType();
                _swift_task_enqueueOnTaskExecutor(v36, PreferredTaskExecutor, ObjectType, v30 & 0xFFFFFFFFFFFFFFF8);
              }
              else
              {
                swift_task_enqueueGlobal(v36);
              }
              v16 = 1;
              v5 = a3;
              v9 = v39;
              break;
            case 2u:
              v16 = 1;
              swift::concurrency::trace::actor_state_changed(a1, v11, 2, v9 != 0, 1, a4);
              dispatch_lock_override_start_with_debounce();
              break;
            case 3u:
              v23 = 3;
LABEL_35:
              v32 = v9 != 0;
              v33 = a4;
              v34 = a1;
              v35 = v11;
              goto LABEL_37;
            default:
              v32 = v9 != 0;
              v33 = a4;
              v34 = a1;
              v35 = v11;
              v23 = 255;
LABEL_37:
              swift::concurrency::trace::actor_state_changed(v34, v35, v23, v32, 1, v33);
              break;
          }
        }
        else
        {
          v14 = DWORD1(v20);
          v16 = v20 & 7;
          v11 = *((_QWORD *)&v20 + 1);
          v12 = v20;
        }
      }
      while (v16);
    }
  }
}

void swift_task_enqueue(swift::AsyncTask *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_once();
  if (swift_task_enqueue::Override)
    swift_task_enqueue::Override(a1, a2, a3, swift_task_enqueueImpl);
  else
    swift_task_enqueueImpl(a1, a2, a3, v6, 0, v7, v8);
}

void swift_task_enqueueImpl(swift::AsyncTask *this, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t ObjectType;
  uint64_t PreferredTaskExecutor;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*MEMORY[0x1E0DEEA68])
    ((void (*)(swift::AsyncTask *))*MEMORY[0x1E0DEEA68])(this);
  if (a2)
  {
    if (a3)
    {
      ObjectType = swift_getObjectType();
      _swift_task_enqueueOnExecutor((uint64_t)this, (uint64_t)a2, ObjectType, a3 & 0xFFFFFFFFFFFFFFF8);
    }
    else
    {
      swift_defaultActor_enqueue((uint64_t)this, a2);
    }
  }
  else if (this
         && !*((_BYTE *)this + 32)
         && (PreferredTaskExecutor = swift::AsyncTask::getPreferredTaskExecutor(this, 0, a3, a4, a5, a6, a7)) != 0)
  {
    v13 = PreferredTaskExecutor;
    v14 = v12;
    v15 = swift_getObjectType();
    _swift_task_enqueueOnTaskExecutor(this, v13, v15, v14 & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    swift_task_enqueueGlobal((uint64_t)this);
  }
}

void swift_job_run(swift::AsyncTask *a1, _anonymous_namespace_::DefaultActorImpl *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_once();
  if (swift_job_run::Override)
    swift_job_run::Override(a1, a2, a3, swift_job_runImpl);
  else
    swift_job_runImpl(a1, a2, a3, v6, 0, v7, v8);
}

void swift_job_runImpl(swift::AsyncTask *this, _anonymous_namespace_::DefaultActorImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t PreferredTaskExecutor;
  uint64_t v11;
  unint64_t StatusReg;
  void *v13;
  _anonymous_namespace_::DefaultActorImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void *v19;
  char v20;
  uint64_t v21;

  v18 = 1;
  LOBYTE(v19) = 0;
  v20 = 0;
  PreferredTaskExecutor = 0;
  if (a2)
  {
    v11 = 0;
    v18 = 0;
  }
  else if (this)
  {
    v11 = 0;
    if (!*((_BYTE *)this + 32))
      PreferredTaskExecutor = swift::AsyncTask::getPreferredTaskExecutor(this, 0, a3, a4, a5, a6, a7);
  }
  else
  {
    v11 = 0;
  }
  v14 = a2;
  v15 = a3;
  v16 = PreferredTaskExecutor;
  v17 = v11;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v21 = *(_QWORD *)(StatusReg + 832);
  *(_QWORD *)(StatusReg + 832) = &v14;
  swift::runJobInEstablishedExecutorContext((uint64_t)this);
  if (v20)
  {
    v13 = v19;
    if (*(void **)(StatusReg + 224) != v19)
      v13 = (void *)voucher_adopt();
    if ((unint64_t)v13 + 1 >= 2)
    {
      os_release(v13);
      if (!v20)
        goto LABEL_13;
      goto LABEL_12;
    }
    if (v20)
LABEL_12:
      v20 = 0;
  }
LABEL_13:
  *(_QWORD *)(StatusReg + 832) = v21;
  if (v18 && v14 && !v15)
}

void swift_job_run_on_task_executor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_once();
  if (swift_job_run_on_task_executor::Override)
  {
    swift_job_run_on_task_executor::Override(a1, a2, a3, swift_job_run_on_task_executorImpl);
  }
  else
  {
    swift_once();
    if (swift_job_run_on_serial_and_task_executor::Override)
      swift_job_run_on_serial_and_task_executor::Override(a1, 0, 0, a2, a3, swift_job_run_on_serial_and_task_executorImpl);
    else
      swift_job_run_on_serial_and_task_executorImpl(a1, 0, 0, a2, a3);
  }
}

void swift_job_run_on_task_executorImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_once();
  if (swift_job_run_on_serial_and_task_executor::Override)
    swift_job_run_on_serial_and_task_executor::Override(a1, 0, 0, a2, a3, swift_job_run_on_serial_and_task_executorImpl);
  else
    swift_job_run_on_serial_and_task_executorImpl(a1, 0, 0, a2, a3);
}

void swift_job_run_on_serial_and_task_executor(uint64_t a1, _anonymous_namespace_::DefaultActorImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_once();
  if (swift_job_run_on_serial_and_task_executor::Override)
    swift_job_run_on_serial_and_task_executor::Override(a1, a2, a3, a4, a5, swift_job_run_on_serial_and_task_executorImpl);
  else
    swift_job_run_on_serial_and_task_executorImpl(a1, a2, a3, a4, a5);
}

void swift_job_run_on_serial_and_task_executorImpl(uint64_t a1, _anonymous_namespace_::DefaultActorImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t StatusReg;
  void *v6;
  _anonymous_namespace_::DefaultActorImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  void *v12;
  char v13;
  uint64_t v14;

  LOBYTE(v12) = 0;
  v13 = 0;
  v11 = 0;
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = a5;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v14 = *(_QWORD *)(StatusReg + 832);
  *(_QWORD *)(StatusReg + 832) = &v7;
  swift::runJobInEstablishedExecutorContext(a1);
  if (v13)
  {
    v6 = v12;
    if (*(void **)(StatusReg + 224) != v12)
      v6 = (void *)voucher_adopt();
    if ((unint64_t)v6 + 1 >= 2)
    {
      os_release(v6);
      if (!v13)
        goto LABEL_7;
      goto LABEL_6;
    }
    if (v13)
LABEL_6:
      v13 = 0;
  }
LABEL_7:
  *(_QWORD *)(StatusReg + 832) = v14;
  if (v11 && v7 && !v8)
}

uint64_t swift_task_getCurrentExecutor()
{
  uint64_t v1;

  swift_once();
  if (swift_task_getCurrentExecutor::Override)
    return swift_task_getCurrentExecutor::Override(swift_task_getCurrentExecutorImpl);
  v1 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 832);
  if (v1)
    return *(_QWORD *)v1;
  else
    return 0;
}

uint64_t swift_task_getCurrentExecutorImpl(void)
{
  uint64_t v0;

  v0 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 832);
  if (v0)
    return *(_QWORD *)v0;
  else
    return 0;
}

uint64_t swift_task_isCurrentExecutor(uint64_t a1, uint64_t a2)
{
  swift_once();
  if (swift_task_isCurrentExecutor::Override)
    return swift_task_isCurrentExecutor::Override(a1, a2, swift_task_isCurrentExecutorImpl);
  else
    return swift_task_isCurrentExecutorImpl(a1, a2);
}

BOOL swift_task_isCurrentExecutorImpl(uint64_t a1, uint64_t a2)
{
  __int128 *v3;
  const char *v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v10 = a1;
  v11 = a2;
  v3 = *(__int128 **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 832);
  if (swift_task_isCurrentExecutorImpl(swift::SerialExecutorRef)::checkModeToken != -1)
  {
    dispatch_once_f(&swift_task_isCurrentExecutorImpl(swift::SerialExecutorRef)::checkModeToken, 0, (dispatch_function_t)checkIsCurrentExecutorMode);
    if (v3)
      goto LABEL_3;
LABEL_20:
    if (swift::SerialExecutorRef::isMainExecutor((swift::SerialExecutorRef *)&v10) && pthread_main_np())
      return 1;
    if (!isCurrentExecutorMode)
      goto LABEL_18;
    return 0;
  }
  if (!v3)
    goto LABEL_20;
LABEL_3:
  v9 = *v3;
  if ((_QWORD)v9 == a1
    || swift::SerialExecutorRef::isMainExecutor((swift::SerialExecutorRef *)&v9)
    && swift::SerialExecutorRef::isMainExecutor((swift::SerialExecutorRef *)&v10))
  {
    return 1;
  }
  if (isCurrentExecutorMode != 1)
  {
LABEL_11:
    if ((v11 & 7) == 1)
    {
      if ((_QWORD)v9)
      {
        if (*((_QWORD *)&v9 + 1))
        {
          if (v10)
          {
            if ((swift_compareWitnessTables() & 1) != 0)
            {
              v6 = v9;
              v7 = v10;
              ObjectType = swift_getObjectType();
              if ((_task_serialExecutor_isSameExclusiveExecutionContext(v6, v7, ObjectType, v11 & 0xFFFFFFFFFFFFFFF8) & 1) != 0)
                return 1;
            }
          }
        }
      }
    }
    if (!isCurrentExecutorMode)
    {
LABEL_18:
      swift_task_checkIsolated(v10, v11, v4);
      return 1;
    }
    return 0;
  }
  if (!swift::SerialExecutorRef::isMainExecutor((swift::SerialExecutorRef *)&v10)
    || (result = swift::SerialExecutorRef::isMainExecutor((swift::SerialExecutorRef *)&v9)))
  {
    if (swift::SerialExecutorRef::isMainExecutor((swift::SerialExecutorRef *)&v10)
      || !swift::SerialExecutorRef::isMainExecutor((swift::SerialExecutorRef *)&v9))
    {
      goto LABEL_11;
    }
    return 0;
  }
  return result;
}

uint64_t swift_task_switch(uint64_t (*a1)(void), unsigned __int8 *a2, uint64_t a3)
{
  swift_once();
  if (swift_task_switch::Override)
    return swift_task_switch::Override(a1, a2, a3, swift_task_switchImpl);
  else
    return swift_task_switchImpl(a1, a2, a3);
}

uint64_t swift_task_switchImpl(uint64_t (*a1)(void), unsigned __int8 *a2, uint64_t a3)
{
  _anonymous_namespace_::DefaultActorImpl *ActiveExecutor;
  uint64_t v4;
  uint64_t TaskExecutor;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  swift *v16;
  uint64_t PreferredTaskExecutor;
  uint64_t v18;
  uint64_t v19;
  _anonymous_namespace_::DefaultActorImpl *v20;
  uint64_t v21;
  _anonymous_namespace_::DefaultActorImpl **v22;
  uint64_t (**Current)(void);
  uint64_t (*v24)(void);
  uint64_t (*v25)(void);
  _anonymous_namespace_::DefaultActorImpl *v26;
  uint64_t v27;

  v26 = (_anonymous_namespace_::DefaultActorImpl *)a2;
  v27 = a3;
  v24 = a1;
  Current = (uint64_t (**)(void))swift_task_getCurrent();
  if (v22)
  else
    ActiveExecutor = (_anonymous_namespace_::DefaultActorImpl *)_ss32_DefaultGlobalConcurrentExecutorCSchsSch013asUnownedTaskD0s0fgD0VyFTW();
  v21 = v4;
  v20 = ActiveExecutor;
  if (v22)
  else
    TaskExecutor = _ss32_DefaultGlobalConcurrentExecutorCSchsSch013asUnownedTaskD0s0fgD0VyFTW();
  v19 = v6;
  v18 = TaskExecutor;
  PreferredTaskExecutor = swift::AsyncTask::getPreferredTaskExecutor((swift::AsyncTask *)Current, 0, v7, v8, v9, v10, v11);
  if (!mustSwitchToRun((uint64_t)v20, v21, (uint64_t)v26, v27, v18, v19, PreferredTaskExecutor))
    return v24();
  Current[8] = v25;
  Current[7] = v24;
  if (swift::TaskExecutorRef::isUndefined((swift::TaskExecutorRef *)&v18)
    && canGiveUpThreadForSwitch((uint64_t)v22, (uint64_t)v20, v21)
    && (UnownedSerialExecutor.executor.modify(), tryAssumeThreadForSwitch(v26, v27, PreferredTaskExecutor)))
  {
    giveUpThreadForSwitch(v20);
    return runOnAssumedThread(Current, v26, v27, v22, v13, v14, v15);
  }
  else
  {
    swift::AsyncTask::flagAsAndEnqueueOnExecutor((uint64_t)Current, (unsigned __int8 *)v26, v27);
    return swift::_swift_task_clearCurrent(v16);
  }
}

void swift_nonDefaultDistributedActor_initialize(const void *a1)
{
  *((_BYTE *)a1 + 16) = 0;
  swift::concurrency::trace::actor_create(a1);
}

_OWORD *swift_distributedActor_remote_initialize(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;
  unsigned __int128 *v5;

  v1 = a1;
  v2 = *a1;
  if (*a1 > 0x7FFuLL)
    LODWORD(v2) = 0;
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == 773)
      v1 = (_QWORD *)a1[1];
    else
      v1 = 0;
  }
  v3 = (_OWORD *)swift_allocObject();
  bzero(v3 + 1, *((unsigned int *)v1 + 12) - 16);
  while (1)
  {
    v4 = v1[8];
    if (v4)
    {
      if ((*(_BYTE *)(v4 + 3) & 1) != 0)
        break;
    }
    v1 = (_QWORD *)v1[1];
    if (!v1 || (v1[4] & 2) == 0)
    {
      *((_BYTE *)v3 + 16) = 1;
      goto LABEL_16;
    }
  }
  *((_BYTE *)v3 + 16) = 1;
  v5 = v3 + 2;
  do
    __ldxp(v5);
  while (__stxp(0, v5));
  v3[5] = 0u;
  v3[6] = 0u;
  v3[4] = 0u;
LABEL_16:
  swift::concurrency::trace::actor_create(v3);
  return v3;
}

uint64_t swift_distributed_actor_is_remote(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  do
  {
    v2 = *(_QWORD *)(v1 + 64);
    if (v2 && (*(_BYTE *)(v2 + 3) & 1) != 0)
      break;
    v1 = *(_QWORD *)(v1 + 8);
    if (!v1)
      break;
  }
  while ((*(_BYTE *)(v1 + 32) & 2) != 0);
  return *((unsigned __int8 *)a1 + 16);
}

void swift::concurrency::trace::task_status_changed(swift::concurrency::trace *this, swift::AsyncTask *a2, int a3, int a4, int a5, int a6, int a7)
{
  int v12;
  os_signpost_id_t v14;
  os_signpost_id_t v15;
  NSObject *v16;
  int v17;
  unint64_t TaskId;
  __int16 v19;
  uint64_t ResumeFunctionForLogging;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;

  v12 = (int)a2;
  if (_os_trace_lazy_init_completed_4swift())
  {
    if (swift::concurrency::trace::LogsToken != -1)
      dispatch_once_f(&swift::concurrency::trace::LogsToken, 0, (dispatch_function_t)swift::concurrency::trace::setupLogs);
    if (swift::concurrency::trace::TracingEnabled)
    {
      v14 = os_signpost_id_make_with_pointer((os_log_t)swift::concurrency::trace::TaskLog, this);
      if (v14 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v15 = v14;
        v16 = swift::concurrency::trace::TaskLog;
        if (os_signpost_enabled((os_log_t)swift::concurrency::trace::TaskLog))
        {
          v17 = 134219520;
          TaskId = swift::AsyncTask::getTaskId(this);
          v19 = 2048;
          ResumeFunctionForLogging = swift::AsyncTask::getResumeFunctionForLogging(this, a5);
          v21 = 1024;
          v22 = v12;
          v23 = 1024;
          v24 = a3;
          v25 = 1024;
          v26 = a4;
          v27 = 1024;
          v28 = a6;
          v29 = 1024;
          v30 = a7;
          _os_signpost_emit_with_name_impl(&dword_18D56B000, v16, OS_SIGNPOST_EVENT, v15, "task_status_changed", "task=%llx resumefn=%p maxPriority=%u, isCancelled=%{BOOL}d isEscalated=%{BOOL}d, isRunning=%{BOOL}d, isEnqueued=%{BOOL}d", (uint8_t *)&v17, 0x34u);
        }
      }
    }
  }
}

unsigned __int8 **__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift::AsyncTask::flagAsRunning(void)::{lambda(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)#1}>(unsigned __int8 **result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  unsigned __int8 **v5;
  unsigned int v6;

  if ((*result[1] & 1) != 0)
  {
    v5 = result;
    v6 = **result;
    if (*(_DWORD *)result[2] < v6)
    {
      result = (unsigned __int8 **)dispatch_thread_override_self();
      *(_DWORD *)v5[2] = v6;
    }
  }
  *a4 = *(_DWORD *)a4 & 0xFFFFABFF | ((unint64_t)((*(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24) & 0xFFFFFFFC) >> 2) << 34);
  return result;
}

void swift::concurrency::trace::actor_create(const void *a1)
{
  uint64_t TypeName;
  int v3;
  int v4;
  os_signpost_id_t v5;
  os_signpost_id_t v6;
  NSObject *v7;
  int v8;
  const void *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  uint64_t v13;

  if (_os_trace_lazy_init_completed_4swift())
  {
    if (swift::concurrency::trace::LogsToken != -1)
      dispatch_once_f(&swift::concurrency::trace::LogsToken, 0, (dispatch_function_t)swift::concurrency::trace::setupLogs);
    if (swift::concurrency::trace::TracingEnabled)
    {
      if (os_signpost_enabled((os_log_t)swift::concurrency::trace::ActorLog))
      {
        swift_getObjectType();
        TypeName = swift_getTypeName();
        v4 = v3;
        v5 = os_signpost_id_make_with_pointer((os_log_t)swift::concurrency::trace::ActorLog, a1);
        if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v6 = v5;
          v7 = swift::concurrency::trace::ActorLog;
          if (os_signpost_enabled((os_log_t)swift::concurrency::trace::ActorLog))
          {
            v8 = 134218498;
            v9 = a1;
            v10 = 1040;
            v11 = v4;
            v12 = 2080;
            v13 = TypeName;
            _os_signpost_emit_with_name_impl(&dword_18D56B000, v7, OS_SIGNPOST_INTERVAL_BEGIN, v6, "actor_lifetime", "actor=%p typeName:%.*s", (uint8_t *)&v8, 0x1Cu);
          }
        }
      }
    }
  }
}

void swift::concurrency::trace::actor_enqueue(const void *a1, swift::AsyncTask *a2)
{
  os_signpost_id_t v4;
  os_signpost_id_t v5;
  NSObject *v6;
  int v7;
  const void *v8;
  __int16 v9;
  unint64_t TaskId;

  if (a2 && !*((_BYTE *)a2 + 32) && _os_trace_lazy_init_completed_4swift())
  {
    if (swift::concurrency::trace::LogsToken != -1)
      dispatch_once_f(&swift::concurrency::trace::LogsToken, 0, (dispatch_function_t)swift::concurrency::trace::setupLogs);
    if (swift::concurrency::trace::TracingEnabled)
    {
      v4 = os_signpost_id_make_with_pointer((os_log_t)swift::concurrency::trace::ActorLog, a1);
      if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v5 = v4;
        v6 = swift::concurrency::trace::ActorLog;
        if (os_signpost_enabled((os_log_t)swift::concurrency::trace::ActorLog))
        {
          v7 = 134218240;
          v8 = a1;
          v9 = 2048;
          TaskId = swift::AsyncTask::getTaskId(a2);
          _os_signpost_emit_with_name_impl(&dword_18D56B000, v6, OS_SIGNPOST_EVENT, v5, "actor_enqueue", "actor=%p task=%llx", (uint8_t *)&v7, 0x16u);
        }
      }
    }
  }
}

void swift::concurrency::trace::actor_state_changed(const void *a1, uint64_t a2, int a3, int a4, int a5, int a6)
{
  os_signpost_id_t v12;
  os_signpost_id_t v13;
  NSObject *v14;
  int v15;
  const void *v16;
  __int16 v17;
  _BOOL4 v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;

  if (_os_trace_lazy_init_completed_4swift())
  {
    if (swift::concurrency::trace::LogsToken != -1)
      dispatch_once_f(&swift::concurrency::trace::LogsToken, 0, (dispatch_function_t)swift::concurrency::trace::setupLogs);
    if (swift::concurrency::trace::TracingEnabled)
    {
      v12 = os_signpost_id_make_with_pointer((os_log_t)swift::concurrency::trace::ActorLog, a1);
      if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v13 = v12;
        v14 = swift::concurrency::trace::ActorLog;
        if (os_signpost_enabled((os_log_t)swift::concurrency::trace::ActorLog))
        {
          v15 = 134219264;
          v16 = a1;
          v17 = 1024;
          v18 = a2 != 0;
          v19 = 1024;
          v20 = a3;
          v21 = 1024;
          v22 = a4;
          v23 = 1024;
          v24 = a5;
          v25 = 1024;
          v26 = a6;
          _os_signpost_emit_with_name_impl(&dword_18D56B000, v14, OS_SIGNPOST_EVENT, v13, "actor_state_changed", "actor=%p needsPreprocessing=%d state=%u isDistributedRemote=%{BOOL}d isPriorityEscalated=%{BOOL}d, maxPriority=%u", (uint8_t *)&v15, 0x2Au);
        }
      }
    }
  }
}

uint64_t `anonymous namespace'::ProcessOutOfLineJob::process(uint64_t a1)
{
  _anonymous_namespace_::DefaultActorImpl *v2;
  void *v3;
  unint64_t StatusReg;
  _anonymous_namespace_::DefaultActorImpl *v5;
  void (**v6)(_anonymous_namespace_::DefaultActorImpl *);
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  NSObject *v10;
  int i;
  os_signpost_id_t v12;
  os_signpost_id_t v13;
  NSObject *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned __int128 *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned __int128 v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int128 v39;
  int v40;
  void *v41;
  unint64_t v43;
  __int128 v44;
  __int128 v45;
  char v46;
  void *v47;
  char v48;
  uint64_t v49;
  uint8_t buf[4];
  _anonymous_namespace_::DefaultActorImpl *v51;
  __int16 v52;
  int v53;

  v2 = *(_anonymous_namespace_::DefaultActorImpl **)(a1 + 64);
  v3 = *(void **)(a1 + 40);
  if ((unint64_t)v3 + 1 >= 2)
    os_release(v3);
  MEMORY[0x18D78FAD0](a1, 0x10E0C408EAE15EALL);
  swift_retain();
  v44 = 0u;
  v45 = 0u;
  v46 = 1;
  LOBYTE(v47) = 0;
  v48 = 0;
    return swift_release();
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v44 = (unint64_t)v2;
  v45 = 0uLL;
  v49 = *(_QWORD *)(StatusReg + 832);
  v43 = StatusReg;
  *(_QWORD *)(StatusReg + 832) = &v44;
  v5 = v2;
  v6 = (void (**)(_anonymous_namespace_::DefaultActorImpl *))MEMORY[0x1E0DEEA60];
  while (1)
  {
LABEL_8:
    v8 = (uint64_t *)((char *)v5 + 64);
    v9 = *((_QWORD *)v5 + 8);
    if (_os_trace_lazy_init_completed_4swift())
    {
      if (swift::concurrency::trace::LogsToken != -1)
        dispatch_once_f(&swift::concurrency::trace::LogsToken, 0, (dispatch_function_t)swift::concurrency::trace::setupLogs);
      if (swift::concurrency::trace::TracingEnabled)
      {
        v10 = swift::concurrency::trace::ActorLog;
        if (os_signpost_enabled((os_log_t)swift::concurrency::trace::ActorLog))
        {
          for (i = 0; v9; v9 = *(_QWORD *)(v9 + 16))
          {
            if (!*(_BYTE *)(v9 + 32))
              ++i;
          }
          v12 = os_signpost_id_make_with_pointer(v10, v5);
          if (v12 - 1 < 0xFFFFFFFFFFFFFFFELL)
          {
            v13 = v12;
            v14 = swift::concurrency::trace::ActorLog;
            if (os_signpost_enabled((os_log_t)swift::concurrency::trace::ActorLog))
            {
              *(_DWORD *)buf = 134218240;
              v51 = v5;
              v52 = 1024;
              v53 = i;
              _os_signpost_emit_with_name_impl(&dword_18D56B000, v14, OS_SIGNPOST_EVENT, v13, "actor_job_queue", "actor=%p jobCount=%u", buf, 0x12u);
            }
          }
        }
      }
    }
    v15 = *v8;
    if (*v8)
      break;
      goto LABEL_73;
LABEL_52:
    v29 = *(_QWORD *)v5;
    do
    {
      v30 = *(_QWORD *)(v29 + 64);
      if (v30 && (*(_BYTE *)(v30 + 3) & 1) != 0)
        break;
      v29 = *(_QWORD *)(v29 + 8);
      if (!v29)
        break;
    }
    while ((*(_BYTE *)(v29 + 32) & 2) != 0);
    v31 = *((unsigned __int8 *)v5 + 16);
    v32 = (unsigned __int128 *)((char *)v5 + 32);
    do
    {
      v35 = __ldxp(v32);
      v34 = *((_QWORD *)&v35 + 1);
      v33 = v35;
    }
    while (__stxp(v35, v32));
    if (*v6)
      (*v6)(v5);
    if (*((_QWORD *)&v35 + 1))
    {
      v36 = DWORD1(v35);
      while (1)
      {
        v37 = HIDWORD(v36);
        v38 = v33 | (v36 << 32);
        do
        {
          while (1)
          {
            v39 = __ldxp(v32);
            v40 = (_QWORD)v39 != v38;
            if (*((_QWORD *)&v39 + 1) != v34)
              ++v40;
            if (!v40)
              break;
            if (!__stxp(v39, v32))
              goto LABEL_70;
          }
        }
        while (__stxp(__PAIR128__(v37, v38), v32));
LABEL_70:
        if (!((unint64_t)v39 ^ v38 | *((_QWORD *)&v39 + 1) ^ v34))
          break;
        v36 = DWORD1(v39);
        v34 = *((_QWORD *)&v39 + 1);
        v33 = v39;
        if (!*((_QWORD *)&v39 + 1))
          goto LABEL_8;
      }
      v7 = v33 & 7;
      if ((v33 & 4) != 0)
        v7 = -1;
      swift::concurrency::trace::actor_state_changed(v5, 0, v7, v31 != 0, (v33 >> 4) & 1, BYTE1(v33));
    }
  }
  v16 = *(unsigned __int8 *)(v15 + 33);
  if (v16 > 9)
    v17 = 3;
  else
    v17 = 4;
  if (v16 > 0x11)
    v17 = 2;
  if (v16 > 0x15)
    v17 = 1;
  if (v16 <= 0x19)
    v18 = v17;
  else
    v18 = 0;
  v19 = *(_QWORD *)(v15 + 16);
  *v8 = v19;
  if (!v19)
    goto LABEL_47;
  v20 = *(unsigned __int8 *)(v19 + 33);
  if (v20 > 0x19)
  {
    if (!v18)
      goto LABEL_48;
LABEL_47:
    v8[v18 + 1] = 0;
    goto LABEL_48;
  }
  if (v20 <= 0x15)
  {
    if (v20 > 9)
      v21 = 3;
    else
      v21 = 4;
    if (v20 <= 0x11)
      v22 = v21;
    else
      v22 = 2;
    if (v18 != v22)
      goto LABEL_47;
  }
  else if (v18 != 1)
  {
    goto LABEL_47;
  }
LABEL_48:
  swift::concurrency::trace::actor_dequeue(v5, (swift::AsyncTask *)v15);
  if (!*(_BYTE *)(v15 + 32))
  {
    *(_QWORD *)&v45 = swift::AsyncTask::getPreferredTaskExecutor((swift::AsyncTask *)v15, 0, v23, v24, v25, v26, v27);
    *((_QWORD *)&v45 + 1) = v28;
  }
  swift::runJobInEstablishedExecutorContext(v15);
  v5 = (_anonymous_namespace_::DefaultActorImpl *)v44;
  if ((_QWORD)v44 && !*((_QWORD *)&v44 + 1))
    goto LABEL_52;
LABEL_73:
  if (v48)
  {
    v41 = v47;
    if (*(void **)(v43 + 224) != v47)
      v41 = (void *)voucher_adopt();
    if ((unint64_t)v41 + 1 >= 2)
    {
      os_release(v41);
      if (v48)
LABEL_78:
        v48 = 0;
    }
    else if (v48)
    {
      goto LABEL_78;
    }
  }
  *(_QWORD *)(v43 + 832) = v49;
  return swift_release();
}

uint64_t `anonymous namespace'::DefaultActorImpl::tryLock(_anonymous_namespace_::DefaultActorImpl *this, int a2)
{
  unint64_t current_override_qos_floor;
  char v5;
  unint64_t v6;
  unsigned __int128 *v7;
  unint64_t StatusReg;
  int v9;
  uint64_t v10;
  unsigned int v11;
  signed __int128 v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned __int128 v18;
  int v19;

  current_override_qos_floor = dispatch_thread_get_current_override_qos_floor();
  v5 = current_override_qos_floor;
  v6 = HIDWORD(current_override_qos_floor);
  v7 = (unsigned __int128 *)((char *)this + 32);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_2:
  v9 = *((unsigned __int8 *)this + 16);
  do
  {
    v12 = __ldxp(v7);
    v10 = *((_QWORD *)&v12 + 1);
    v11 = v12;
  }
  while (__stxp(v12, v7));
  v13 = v12 >> 32;
  v14 = v12 & 7;
  if (!a2)
    goto LABEL_9;
  while (v14 == 1)
  {
    if ((v5 & 1) != 0 && v6 < BYTE1(v11))
    {
      dispatch_thread_override_self();
      LODWORD(v6) = BYTE1(v11);
      goto LABEL_2;
    }
    while (1)
    {
      if (a2)
        v15 = 0;
      else
        v15 = v10;
      v16 = v11 & 0xFFFFFFE8 | 2 | ((unint64_t)(*(_QWORD *)(StatusReg + 24) >> 2) << 34);
      v17 = v11 | (unint64_t)(v13 << 32);
      do
      {
        while (1)
        {
          v18 = __ldaxp(v7);
          v19 = (_QWORD)v18 != v17;
          if (*((_QWORD *)&v18 + 1) != v10)
            ++v19;
          if (!v19)
            break;
          if (!__stxp(v18, v7))
            goto LABEL_20;
        }
      }
      while (__stxp(__PAIR128__(v15, v16), v7));
LABEL_20:
      if (!((unint64_t)v18 ^ v17 | *((_QWORD *)&v18 + 1) ^ v10))
      {
        if (*MEMORY[0x1E0DEEA60])
          ((void (*)(_anonymous_namespace_::DefaultActorImpl *))*MEMORY[0x1E0DEEA60])(this);
        swift::concurrency::trace::actor_state_changed(this, v15, 2, v9 != 0, 0, BYTE1(v11));
        if (a2)
        return 1;
      }
      v13 = DWORD1(v18);
      v10 = *((_QWORD *)&v18 + 1);
      v11 = v18;
      v14 = v18 & 7;
      if (a2)
        break;
LABEL_9:
      if ((v14 - 1) < 2)
        return 0;
    }
  }
  swift_release();
  return 0;
}

uint64_t `anonymous namespace'::DefaultActorImpl::unlock(_anonymous_namespace_::DefaultActorImpl *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned __int128 *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int128 v10;
  void (**v11)(_anonymous_namespace_::DefaultActorImpl *);
  uint64_t v12;
  unsigned int v14;
  unint64_t v15;
  unsigned __int128 v16;
  int v17;
  int v19;
  uint64_t v20;

  v4 = *(_QWORD *)this;
  do
  {
    v5 = *(_QWORD *)(v4 + 64);
    if (v5 && (*(_BYTE *)(v5 + 3) & 1) != 0)
      break;
    v4 = *(_QWORD *)(v4 + 8);
    if (!v4)
      break;
  }
  while ((*(_BYTE *)(v4 + 32) & 2) != 0);
  v6 = *((unsigned __int8 *)this + 16);
  v7 = (unsigned __int128 *)((char *)this + 32);
  do
  {
    v10 = __ldxp(v7);
    v8 = *((_QWORD *)&v10 + 1);
    v9 = v10;
  }
  while (__stxp(v10, v7));
  v11 = (void (**)(_anonymous_namespace_::DefaultActorImpl *))MEMORY[0x1E0DEEA68];
  if (*MEMORY[0x1E0DEEA68])
    ((void (*)(_anonymous_namespace_::DefaultActorImpl *))*MEMORY[0x1E0DEEA68])(this);
  if ((v10 & 7) == 3)
  {
    LOBYTE(v12) = v10;
LABEL_29:
    if ((v12 & 0x10) != 0)
      dispatch_lock_override_end();
  }
  else
  {
    v12 = v10;
    while (1)
    {
      if (!*((_QWORD *)this + 8) && v8 == 0)
      {
        v14 = v9 & 0xFFFF00E8;
      }
      else
      {
        if (!a2)
          return 0;
        v14 = v9 & 0xFFFFFFE8 | 1;
      }
      v15 = v12 & 0xFFFFFFFF00000000 | v9;
      do
      {
        while (1)
        {
          v16 = __ldxp(v7);
          v12 = v16;
          v17 = (_QWORD)v16 != v15;
          if (*((_QWORD *)&v16 + 1) != v8)
            ++v17;
          if (!v17)
            break;
          if (!__stlxp(v16, v7))
            goto LABEL_27;
        }
      }
      while (__stlxp(__PAIR128__(v8, v14), v7));
LABEL_27:
      if (!((unint64_t)v16 ^ v15 | *((_QWORD *)&v16 + 1) ^ v8))
        break;
      v8 = *((_QWORD *)&v16 + 1);
      v9 = v16;
      if ((v16 & 7) == 3)
        goto LABEL_29;
    }
    if (*v11)
      (*v11)(this);
    switch(v14 & 7)
    {
      case 0u:
        v19 = 0;
        goto LABEL_43;
      case 1u:
        swift::concurrency::trace::actor_state_changed(this, v8, 1, v6 != 0, 0, BYTE1(v14));
        v20 = operator new();
        *(_QWORD *)v20 = &unk_1ECE20648;
        *(_QWORD *)(v20 + 8) = 3;
        *(_DWORD *)(v20 + 32) = v14 & 0xFF00 | 0xC1;
        *(_QWORD *)(v20 + 44) = 0;
        *(_QWORD *)(v20 + 36) = 0;
        *(_DWORD *)(v20 + 52) = 0;
        *(_QWORD *)(v20 + 40) = voucher_copy();
        *(_QWORD *)(v20 + 64) = this;
        swift_task_enqueueGlobal(v20);
        if ((v9 & 0x10) != 0)
          goto LABEL_44;
        return 1;
      case 2u:
        v19 = 2;
        goto LABEL_43;
      case 3u:
        v19 = 3;
        goto LABEL_43;
      default:
        v19 = 255;
LABEL_43:
        swift::concurrency::trace::actor_state_changed(this, v8, v19, v6 != 0, 0, BYTE1(v14));
        if ((v9 & 0x10) != 0)
LABEL_44:
          dispatch_lock_override_end();
        break;
    }
  }
  return 1;
}

uint64_t `anonymous namespace'::ExecutorTrackingInfo::getActiveExecutor(_anonymous_namespace_::ExecutorTrackingInfo *this)
{
  return *(_QWORD *)this;
}

uint64_t `anonymous namespace'::DefaultActorImpl::handleUnprioritizedJobs(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _BOOL4 v13;
  int v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  if (a2)
  {
    v2 = 0;
    do
    {
      v3 = v2;
      v2 = a2;
      a2 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(v2 + 16) = v3;
    }
    while (a2);
    v4 = (uint64_t *)(result + 64);
    v5 = *(unsigned __int8 *)(v2 + 33);
    if (v5 > 9)
      v6 = 3;
    else
      v6 = 4;
    if (v5 > 0x11)
      v6 = 2;
    if (v5 > 0x15)
      v6 = 1;
    if (v5 <= 0x19)
      v7 = v6;
    else
      v7 = 0;
    do
    {
      v8 = *(_QWORD *)(v2 + 16);
      v9 = v2;
      if (v8)
      {
        while (1)
        {
          v10 = v8;
          v11 = *(unsigned __int8 *)(v8 + 33);
          if (v11 <= 0x19)
          {
            LODWORD(v12) = v11 > 9 ? 3 : 4;
            if (v11 > 0x11)
              LODWORD(v12) = 2;
            v12 = v11 <= 0x15 ? v12 : 1;
          }
          else
          {
            v12 = 0;
          }
          v13 = v12 == v7;
          if ((_DWORD)v12 != (_DWORD)v7)
            break;
          v8 = *(_QWORD *)(v10 + 16);
          v9 = v10;
          if (!v8)
          {
            v9 = v10;
            v12 = v7;
            v10 = 0;
            break;
          }
        }
        v14 = v7;
        if ((v7 & 0x80000000) == 0)
          goto LABEL_33;
      }
      else
      {
        v10 = 0;
        v12 = 0x80000000;
        v13 = 1;
        v9 = v2;
        v14 = v7;
        if ((v7 & 0x80000000) == 0)
        {
LABEL_33:
          while (1)
          {
            v15 = &v4[v14];
            v18 = v15[1];
            v16 = v15 + 1;
            v17 = v18;
            if (v18)
              break;
            if (v14-- <= 0)
              goto LABEL_14;
          }
          *(_QWORD *)(v9 + 16) = *(_QWORD *)(v17 + 16);
          result = *v16;
          *(_QWORD *)(*v16 + 16) = v2;
          goto LABEL_15;
        }
      }
LABEL_14:
      result = *v4;
      *(_QWORD *)(v9 + 16) = *v4;
      *v4 = v2;
LABEL_15:
      v4[(int)v7 + 1] = v9;
      v2 = v10;
      v7 = v12;
    }
    while (!v13);
  }
  return result;
}

void swift::concurrency::trace::actor_dequeue(const void *a1, swift::AsyncTask *a2)
{
  os_signpost_id_t v4;
  os_signpost_id_t v5;
  NSObject *v6;
  int v7;
  const void *v8;
  __int16 v9;
  unint64_t TaskId;

  if (a2 && !*((_BYTE *)a2 + 32) && _os_trace_lazy_init_completed_4swift())
  {
    if (swift::concurrency::trace::LogsToken != -1)
      dispatch_once_f(&swift::concurrency::trace::LogsToken, 0, (dispatch_function_t)swift::concurrency::trace::setupLogs);
    if (swift::concurrency::trace::TracingEnabled)
    {
      v4 = os_signpost_id_make_with_pointer((os_log_t)swift::concurrency::trace::ActorLog, a1);
      if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v5 = v4;
        v6 = swift::concurrency::trace::ActorLog;
        if (os_signpost_enabled((os_log_t)swift::concurrency::trace::ActorLog))
        {
          v7 = 134218240;
          v8 = a1;
          v9 = 2048;
          TaskId = swift::AsyncTask::getTaskId(a2);
          _os_signpost_emit_with_name_impl(&dword_18D56B000, v6, OS_SIGNPOST_EVENT, v5, "actor_dequeue", "actor=%p task=%llx", (uint8_t *)&v7, 0x16u);
        }
      }
    }
  }
}

uint64_t `anonymous namespace'::DefaultActorImpl::deallocateUnconditional(_anonymous_namespace_::DefaultActorImpl *this)
{
  os_signpost_id_t v2;
  os_signpost_id_t v3;
  NSObject *v4;
  int v6;
  _anonymous_namespace_::DefaultActorImpl *v7;

  if (_os_trace_lazy_init_completed_4swift())
  {
    if (swift::concurrency::trace::LogsToken != -1)
      dispatch_once_f(&swift::concurrency::trace::LogsToken, 0, (dispatch_function_t)swift::concurrency::trace::setupLogs);
    if (swift::concurrency::trace::TracingEnabled)
    {
      v2 = os_signpost_id_make_with_pointer((os_log_t)swift::concurrency::trace::ActorLog, this);
      if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v3 = v2;
        v4 = swift::concurrency::trace::ActorLog;
        if (os_signpost_enabled((os_log_t)swift::concurrency::trace::ActorLog))
        {
          v6 = 134217984;
          v7 = this;
          _os_signpost_emit_with_name_impl(&dword_18D56B000, v4, OS_SIGNPOST_EVENT, v3, "actor_deallocate", "actor=%p", (uint8_t *)&v6, 0xCu);
        }
      }
    }
  }
  return swift_deallocClassInstance();
}

BOOL swift::TaskExecutorRef::isUndefined(swift::TaskExecutorRef *this)
{
  return *(_QWORD *)this == 0;
}

void *swift_task_enqueue::$_0::__invoke(swift_task_enqueue::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_task_enqueue(this);
  swift_task_enqueue::Override = result;
  return result;
}

void *swift_job_run::$_0::__invoke(swift_job_run::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_job_run(this);
  swift_job_run::Override = result;
  return result;
}

void *swift_job_run_on_task_executor::$_0::__invoke(swift_job_run_on_task_executor::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_job_run_on_task_executor(this);
  swift_job_run_on_task_executor::Override = result;
  return result;
}

void *swift_job_run_on_serial_and_task_executor::$_0::__invoke(swift_job_run_on_serial_and_task_executor::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_job_run_on_serial_and_task_executor(this);
  swift_job_run_on_serial_and_task_executor::Override = result;
  return result;
}

void *swift_task_getCurrentExecutor::$_0::__invoke(swift_task_getCurrentExecutor::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_task_getCurrentExecutor(this);
  swift_task_getCurrentExecutor::Override = result;
  return result;
}

void *swift_task_isCurrentExecutor::$_0::__invoke(swift_task_isCurrentExecutor::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_task_isCurrentExecutor(this);
  swift_task_isCurrentExecutor::Override = result;
  return result;
}

uint64_t checkIsCurrentExecutorMode(void *a1)
{
  uint64_t result;

  result = swift_bincompat_useLegacyNonCrashingExecutorChecks();
  isCurrentExecutorMode = result;
  return result;
}

void *swift_task_switch::$_0::__invoke(swift_task_switch::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_task_switch(this);
  swift_task_switch::Override = result;
  return result;
}

uint64_t `anonymous namespace'::ExecutorTrackingInfo::getTaskExecutor(_anonymous_namespace_::ExecutorTrackingInfo *this)
{
  return *((_QWORD *)this + 2);
}

BOOL mustSwitchToRun(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return a1 != a3 || a5 != a7;
}

BOOL canGiveUpThreadForSwitch(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && !*(_BYTE *)(a1 + 32))
    return 0;
  return !a2 || a3 == 0;
}

uint64_t tryAssumeThreadForSwitch(_anonymous_namespace_::DefaultActorImpl *a1, uint64_t a2, uint64_t a3)
{
  if (!a1)
    return a3 == 0;
  if (a2)
    return 0;
}

_anonymous_namespace_::DefaultActorImpl *giveUpThreadForSwitch(_anonymous_namespace_::DefaultActorImpl *result)
{
  if (result)
  return result;
}

uint64_t runOnAssumedThread(uint64_t (**a1)(void), _anonymous_namespace_::DefaultActorImpl *a2, uint64_t a3, _anonymous_namespace_::DefaultActorImpl **a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _anonymous_namespace_::DefaultActorImpl *v11;
  uint64_t result;
  uint64_t PreferredTaskExecutor;
  uint64_t v14;
  unint64_t StatusReg;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[4];
  char v24;
  char v25;
  char v26;
  uint64_t v27;

  if (a4)
  {
    *a4 = a2;
    a4[1] = (_anonymous_namespace_::DefaultActorImpl *)a3;
    a4[2] = (_anonymous_namespace_::DefaultActorImpl *)swift::AsyncTask::getPreferredTaskExecutor((swift::AsyncTask *)a1, 0, a3, (uint64_t)a4, a5, a6, a7);
    a4[3] = v11;
    return a1[7]();
  }
  else
  {
    v24 = 1;
    v25 = 0;
    v26 = 0;
    PreferredTaskExecutor = swift::AsyncTask::getPreferredTaskExecutor((swift::AsyncTask *)a1, 0, a3, 0, a5, a6, a7);
    v23[0] = a2;
    v23[1] = a3;
    v23[2] = PreferredTaskExecutor;
    v23[3] = v14;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v27 = *(_QWORD *)(StatusReg + 832);
    v16 = v27;
    *(_QWORD *)(StatusReg + 832) = v23;
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a1[7])(PreferredTaskExecutor, v14, v17, v18, v19, v20, v21, v22);
    *(_QWORD *)(StatusReg + 832) = v16;
    if (a2)
    {
      if (!a3)
    }
  }
  return result;
}

void swift::AsyncTask::flagAsAndEnqueueOnExecutor(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unsigned __int128 *v6;
  unsigned __int128 v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t StatusReg;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  swift::AsyncTask *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  _QWORD v22[2];
  uint64_t v23;
  unsigned __int128 v24;
  unsigned __int8 *v25;
  uint64_t v26;

  v25 = a2;
  v26 = a3;
  v6 = (unsigned __int128 *)(a1 + 96);
  do
    v7 = __ldxp(v6);
  while (__stxp(v7, v6));
  v24 = v7;
  if ((v7 & 0xFFFFFFFC00004000) == 0x4000)
  {
    v8 = *(_QWORD *)(a1 + 160);
    v22[0] = &v23;
    v22[1] = &v25;
    v23 = v8;
    swift::updateStatusRecord((swift::concurrency::trace *)a1, v8, (uint64_t)__swift::__runtime::llvm::function_ref<void ()(void)>::callback_fn<swift::AsyncTask::flagAsAndEnqueueOnExecutor(swift::SerialExecutorRef)::{lambda(void)#1}>, (uint64_t)v22, (uint64_t *)&v24, (void (*)(uint64_t, unint64_t, uint64_t, unsigned __int128 *))__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift::AsyncTask::flagAsAndEnqueueOnExecutor(swift::SerialExecutorRef)::{lambda(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)#1}>, (uint64_t)&v21);
  }
  else
  {
    v9 = swift::_swift_task_alloc_specific((swift *)a1, (swift::AsyncTask *)0x30);
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(_DWORD *)(v9 + 32) = 4;
    *(_QWORD *)(v9 + 40) = a1;
    *(_QWORD *)(v9 + 16) = a2;
    *(_QWORD *)(v9 + 24) = a3;
    *(_QWORD *)(a1 + 160) = v9;
    swift::addStatusRecord((swift::concurrency::trace *)a1, v9, (unsigned int *)&v24, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t *))__swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift::AsyncTask::flagAsAndEnqueueOnExecutor(swift::SerialExecutorRef)::{lambda(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)#2}>, (uint64_t)v22);
    if (DWORD1(v24) >= 4)
    {
      if ((v24 & 0x400) != 0)
        dispatch_lock_override_end();
      swift_task_exitThreadLocalContext();
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      v11 = *(_QWORD *)(StatusReg + 832);
      v12 = *(_QWORD *)(v11 + 40);
      if (*(_QWORD *)(StatusReg + 224) != v12)
        v12 = voucher_adopt();
      *(_QWORD *)(a1 + 40) = v12;
      if (*(_BYTE *)(v11 + 48))
        *(_BYTE *)(v11 + 48) = 0;
    }
  }
  v13 = *(_DWORD *)(a1 + 32);
  v14 = (swift::AsyncTask *)v24;
  *(_BYTE *)(a1 + 33) = v24;
  swift::concurrency::trace::task_flags_changed((swift::concurrency::trace *)a1, v14, HIBYTE(v13) & 1, (v13 >> 25) & 1, (v13 >> 26) & 1, (v13 >> 28) & 1);
  v15 = v25;
  v16 = v26;
  swift_once();
  if (swift_task_enqueue::Override)
    swift_task_enqueue::Override(a1, v15, v16, swift_task_enqueueImpl);
  else
    swift_task_enqueueImpl((swift::AsyncTask *)a1, v15, v16, v17, v18, v19, v20);
}

void swift::concurrency::trace::task_flags_changed(swift::concurrency::trace *this, swift::AsyncTask *a2, int a3, int a4, int a5, int a6)
{
  int v10;
  os_signpost_id_t v12;
  os_signpost_id_t v13;
  NSObject *v14;
  int v15;
  unint64_t TaskId;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;

  v10 = (int)a2;
  if (_os_trace_lazy_init_completed_4swift())
  {
    if (swift::concurrency::trace::LogsToken != -1)
      dispatch_once_f(&swift::concurrency::trace::LogsToken, 0, (dispatch_function_t)swift::concurrency::trace::setupLogs);
    if (swift::concurrency::trace::TracingEnabled)
    {
      v12 = os_signpost_id_make_with_pointer((os_log_t)swift::concurrency::trace::TaskLog, this);
      if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v13 = v12;
        v14 = swift::concurrency::trace::TaskLog;
        if (os_signpost_enabled((os_log_t)swift::concurrency::trace::TaskLog))
        {
          v15 = 134219264;
          TaskId = swift::AsyncTask::getTaskId(this);
          v17 = 1024;
          v18 = v10;
          v19 = 1024;
          v20 = a3;
          v21 = 1024;
          v22 = a4;
          v23 = 1024;
          v24 = a5;
          v25 = 1024;
          v26 = a6;
          _os_signpost_emit_with_name_impl(&dword_18D56B000, v14, OS_SIGNPOST_EVENT, v13, "task_flags_changed", "task=%llx jobPriority=%u isChildTask=%{BOOL}d, isFuture=%{BOOL}d isGroupChildTask=%{BOOL}d isAsyncLetTask=%{BOOL}d", (uint8_t *)&v15, 0x2Au);
        }
      }
    }
  }
}

__n128 __swift::__runtime::llvm::function_ref<void ()(void)>::callback_fn<swift::AsyncTask::flagAsAndEnqueueOnExecutor(swift::SerialExecutorRef)::{lambda(void)#1}>(uint64_t a1)
{
  __n128 *v1;
  __n128 *v2;
  __n128 result;

  v1 = *(__n128 **)(a1 + 8);
  v2 = **(__n128 ***)a1;
  v2[2].n128_u32[0] = 4;
  result = *v1;
  v2[1] = *v1;
  return result;
}

void __swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift::AsyncTask::flagAsAndEnqueueOnExecutor(swift::SerialExecutorRef)::{lambda(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)a4 = *(_DWORD *)a4 & 0xFFFFEBFF | 0x1000 | ((unint64_t)*(unsigned int *)(a4 + 4) << 32);
}

uint64_t __swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift::AsyncTask::flagAsAndEnqueueOnExecutor(swift::SerialExecutorRef)::{lambda(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)#2}>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)a4 = *(_DWORD *)a4 & 0xFFFFABFF | 0x5000 | ((unint64_t)(*(_DWORD *)(a4 + 4) & 3) << 32);
  return 1;
}

uint64_t _GLOBAL__sub_I_Actor_cpp()
{
  uint64_t result;
  int v1;

  result = swift_bincompat_useLegacyNonCrashingExecutorChecks();
  if ((_DWORD)result)
    v1 = 1;
  else
    v1 = 2;
  unexpectedExecutorLogLevel = v1;
  return result;
}

uint64_t swift::asyncLet_addImpl(unint64_t this, swift::AsyncTask *a2, swift::AsyncLet *a3)
{
  uint64_t v3;
  unint64_t *v5;
  unint64_t v6;

  *(_QWORD *)a2 = 1;
  *((_QWORD *)a2 + 1) = 0;
  v3 = 8;
  if (!(_DWORD)a3)
    v3 = 0;
  *((_QWORD *)a2 + 2) = this;
  *((_QWORD *)a2 + 3) = v3 | this & 0xFFFFFFFFFFFFFFF3;
  v5 = &v6;
  v6 = this;
  return swift::addStatusRecordToSelf((unint64_t)a2, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t *))__swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift::asyncLet_addImpl(swift::AsyncTask *,swift::AsyncLet *,BOOL)::$_0>, (uint64_t)&v5);
}

uint64_t swift_asyncLet_start(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[1] = a2;
  v6[2] = a1;
  v6[0] = 2;
  return swift_task_create(0x1000uLL, (unsigned __int8 *)v6, a3, a4, a5);
}

uint64_t swift_asyncLet_begin(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  _QWORD v7[4];

  v7[2] = a1;
  v7[3] = a6;
  v7[0] = 3;
  v7[1] = a2;
  return swift_task_create(0x1000uLL, (unsigned __int8 *)v7, a3, a4, a5);
}

uint64_t swift::AsyncLet::getPreallocatedSpace(swift::AsyncLet *this)
{
  return (uint64_t)this + 80;
}

uint64_t swift::AsyncLet::getSizeOfPreallocatedSpace(swift::AsyncLet *this)
{
  return 560;
}

unint64_t swift_asyncLet_wait(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), _QWORD *a4)
{
  swift_once();
  if (swift_asyncLet_wait::Override)
    return swift_asyncLet_wait::Override(a1, a2, a3, a4, swift_asyncLet_waitImpl);
  else
    return swift_task_future_wait(a1, (unsigned int *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF0), a3, a4);
}

unint64_t swift_asyncLet_waitImpl(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), _QWORD *a4)
{
  return swift_task_future_wait(a1, (unsigned int *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF0), a3, a4);
}

unint64_t swift_asyncLet_wait_throwing(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  _QWORD *v4;

  swift_once();
  if (swift_asyncLet_wait_throwing::Override)
    return swift_asyncLet_wait_throwing::Override(a1, a2, a3, a4, swift_asyncLet_wait_throwingImpl);
  else
    return swift_task_future_wait_throwing(a1, (unsigned int *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF0), a3, v4);
}

unint64_t swift_asyncLet_wait_throwingImpl(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  _QWORD *v3;

  return swift_task_future_wait_throwing(a1, (unsigned int *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF0), a3, v3);
}

void swift_asyncLet_end(uint64_t a1)
{
  swift::AsyncTask *v2;
  uint64_t v3;
  swift *Current;
  const char *v5;
  char *v6;

  swift_once();
  if (swift_asyncLet_end::Override)
  {
    swift_asyncLet_end::Override(a1, swift_asyncLet_endImpl);
  }
  else
  {
    v2 = (swift::AsyncTask *)(*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFF0);
    swift_task_cancel(v2);
    swift::removeStatusRecordFromSelf(a1, 0, v3);
    Current = (swift *)swift_task_getCurrent();
    swift::_swift_task_dealloc_specific(Current, v2, v5, v6);
  }
}

void swift_asyncLet_endImpl(swift::AsyncLet *a1)
{
  swift::AsyncTask *v2;
  uint64_t v3;
  swift *Current;
  const char *v5;
  char *v6;

  v2 = (swift::AsyncTask *)(*((_QWORD *)a1 + 3) & 0xFFFFFFFFFFFFFFF0);
  swift_task_cancel(v2);
  swift::removeStatusRecordFromSelf((uint64_t)a1, 0, v3);
  Current = (swift *)swift_task_getCurrent();
  swift::_swift_task_dealloc_specific(Current, v2, v5, v6);
}

unint64_t swift_asyncLet_get(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), _QWORD *a4)
{
  uint64_t v7;
  uint64_t v9;

  v7 = swift_once();
  if (swift_asyncLet_get::Override)
    return swift_asyncLet_get::Override(a1, a2, a3, a4, swift_asyncLet_getImpl);
  v9 = *(_QWORD *)(a1 + 24);
  if ((v9 & 4) != 0)
    return ((uint64_t (*)(uint64_t))a3)(v7);
  *(_QWORD *)(a1 + 24) = v9 | 4;
  return swift_task_future_wait(a2, (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF0), a3, a4);
}

unint64_t swift_asyncLet_getImpl(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), _QWORD *a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 24);
  if ((v4 & 4) != 0)
    return a3();
  *(_QWORD *)(a1 + 24) = v4 | 4;
  return swift_task_future_wait(a2, (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF0), a3, a4);
}

unint64_t swift_asyncLet_get_throwing(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), _QWORD *a4)
{
  uint64_t v4;
  uint64_t v9;

  swift_once();
  if (swift_asyncLet_get_throwing::Override)
    return swift_asyncLet_get_throwing::Override(a1, a2, a3, a4, swift_asyncLet_get_throwingImpl);
  v9 = *(_QWORD *)(a1 + 24);
  if ((v9 & 4) != 0)
    return a3();
  *a4 = v4;
  a4[1] = a3;
  a4[2] = a1;
  return swift_task_future_wait_throwing(a2, (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF0), _asyncLet_get_throwing_continuation, (_QWORD *)(a1 + 32));
}

unint64_t swift_asyncLet_get_throwingImpl(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 24);
  if ((v5 & 4) != 0)
    return a3();
  *a4 = v4;
  a4[1] = a3;
  a4[2] = a1;
  return swift_task_future_wait_throwing(a2, (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF0), _asyncLet_get_throwing_continuation, (_QWORD *)(a1 + 32));
}

unint64_t swift_asyncLet_consume(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), _QWORD *a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v11;

  swift_once();
  if (swift_asyncLet_consume::Override)
    return swift_asyncLet_consume::Override(a1, a2, a3, a4, swift_asyncLet_consumeImpl);
  v11 = *(_QWORD *)(a1 + 24);
  if ((v11 & 4) != 0)
    return asyncLet_finish_after_task_completion(a1, a3, v9);
  *a4 = v4;
  a4[1] = a3;
  a4[2] = a1;
  return swift_task_future_wait(a2, (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))_asyncLet_consume_continuation, (_QWORD *)(a1 + 32));
}

unint64_t swift_asyncLet_consumeImpl(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 24);
  if ((v5 & 4) != 0)
    return asyncLet_finish_after_task_completion(a1, a3, (uint64_t)a3);
  *a4 = v4;
  a4[1] = a3;
  a4[2] = a1;
  return swift_task_future_wait(a2, (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))_asyncLet_consume_continuation, (_QWORD *)(a1 + 32));
}

unint64_t swift_asyncLet_consume_throwing(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), _QWORD *a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v11;

  swift_once();
  if (swift_asyncLet_consume_throwing::Override)
    return swift_asyncLet_consume_throwing::Override(a1, a2, a3, a4, swift_asyncLet_consume_throwingImpl);
  v11 = *(_QWORD *)(a1 + 24);
  if ((v11 & 4) != 0)
    return asyncLet_finish_after_task_completion(a1, a3, v9);
  *a4 = v4;
  a4[1] = a3;
  a4[2] = a1;
  return swift_task_future_wait_throwing(a2, (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))_asyncLet_consume_throwing_continuation, (_QWORD *)(a1 + 32));
}

unint64_t swift_asyncLet_consume_throwingImpl(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 24);
  if ((v5 & 4) != 0)
    return asyncLet_finish_after_task_completion(a1, a3, (uint64_t)a3);
  *a4 = v4;
  a4[1] = a3;
  a4[2] = a1;
  return swift_task_future_wait_throwing(a2, (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))_asyncLet_consume_throwing_continuation, (_QWORD *)(a1 + 32));
}

unint64_t swift_asyncLet_finish(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), _QWORD *a4)
{
  uint64_t v4;
  uint64_t v10;
  swift::AsyncTask *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  swift_once();
  if (swift_asyncLet_finish::Override)
    return swift_asyncLet_finish::Override(a1, a2, a3, a4, swift_asyncLet_finishImpl);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (swift::AsyncTask *)(v10 & 0xFFFFFFFFFFFFFFF0);
  if ((v10 & 4) != 0)
  {
    v12 = *(unsigned int *)((v10 & 0xFFFFFFFFFFFFFFF0) + 0x20);
    v13 = 208;
    if ((v12 & 0x1000000) == 0)
      v13 = 192;
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)((char *)v11 + v13 + ((v12 >> 23) & 8) + 8) - 8) + 8))(a2);
    return asyncLet_finish_after_task_completion(a1, a3, v14);
  }
  else
  {
    swift_task_cancel(v11);
    *a4 = v4;
    a4[1] = a3;
    a4[2] = a1;
    a4[3] = a2;
    return swift_task_future_wait_throwing(a2, (unsigned int *)(*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFF0), _asyncLet_finish_continuation, (_QWORD *)(a1 + 32));
  }
}

unint64_t swift_asyncLet_finishImpl(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), _QWORD *a4)
{
  uint64_t v4;
  uint64_t v8;
  swift::AsyncTask *v9;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8 = *(_QWORD *)(a1 + 24);
  v9 = (swift::AsyncTask *)(v8 & 0xFFFFFFFFFFFFFFF0);
  if ((v8 & 4) != 0)
  {
    v12 = *(unsigned int *)((v8 & 0xFFFFFFFFFFFFFFF0) + 0x20);
    v13 = 208;
    if ((v12 & 0x1000000) == 0)
      v13 = 192;
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)((char *)v9 + v13 + ((v12 >> 23) & 8) + 8) - 8) + 8))(a2);
    return asyncLet_finish_after_task_completion(a1, a3, v14);
  }
  else
  {
    swift_task_cancel(v9);
    *a4 = v4;
    a4[1] = a3;
    a4[2] = a1;
    a4[3] = a2;
    return swift_task_future_wait_throwing(a2, (unsigned int *)(*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFF0), _asyncLet_finish_continuation, (_QWORD *)(a1 + 32));
  }
}

void *swift_asyncLet_wait::$_0::__invoke(swift_asyncLet_wait::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_asyncLet_wait(this);
  swift_asyncLet_wait::Override = result;
  return result;
}

void *swift_asyncLet_wait_throwing::$_0::__invoke(swift_asyncLet_wait_throwing::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_asyncLet_wait_throwing(this);
  swift_asyncLet_wait_throwing::Override = result;
  return result;
}

void *swift_asyncLet_end::$_0::__invoke(swift_asyncLet_end::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_asyncLet_end(this);
  swift_asyncLet_end::Override = result;
  return result;
}

void *swift_asyncLet_get::$_0::__invoke(swift_asyncLet_get::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_asyncLet_get(this);
  swift_asyncLet_get::Override = result;
  return result;
}

void *swift_asyncLet_get_throwing::$_0::__invoke(swift_asyncLet_get_throwing::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_asyncLet_get_throwing(this);
  swift_asyncLet_get_throwing::Override = result;
  return result;
}

uint64_t _asyncLet_get_throwing_continuation()
{
  uint64_t v0;
  uint64_t v1;

  if (!v0)
    *(_QWORD *)(*(_QWORD *)(v1 + 16) + 24) |= 4uLL;
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void *swift_asyncLet_consume::$_0::__invoke(swift_asyncLet_consume::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_asyncLet_consume(this);
  swift_asyncLet_consume::Override = result;
  return result;
}

uint64_t asyncLet_finish_after_task_completion(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  swift::AsyncTask *v4;

  v4 = (swift::AsyncTask *)(*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFF0);
  swift::removeStatusRecordFromSelf(a1, 0, a3);
  swift::AsyncTask::~AsyncTask(v4);
  if ((*(_BYTE *)(a1 + 24) & 8) != 0)
    swift_task_dealloc((uint64_t)v4);
  return a2();
}

uint64_t _asyncLet_consume_continuation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return asyncLet_finish_after_task_completion(*(_QWORD *)(v3 + 16), *(uint64_t (**)(void))(v3 + 8), a3);
}

void *swift_asyncLet_consume_throwing::$_0::__invoke(swift_asyncLet_consume_throwing::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_asyncLet_consume_throwing(this);
  swift_asyncLet_consume_throwing::Override = result;
  return result;
}

uint64_t _asyncLet_consume_throwing_continuation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return asyncLet_finish_after_task_completion(*(_QWORD *)(v3 + 16), *(uint64_t (**)(void))(v3 + 8), a3);
}

void *swift_asyncLet_finish::$_0::__invoke(swift_asyncLet_finish::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_asyncLet_finish(this);
  swift_asyncLet_finish::Override = result;
  return result;
}

uint64_t _asyncLet_finish_continuation()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v2 = v0;
  v3 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    MEMORY[0x18D78FECC]();
  }
  else
  {
    v5 = *(unsigned int *)((*(_QWORD *)(v3 + 24) & 0xFFFFFFFFFFFFFFF0) + 0x20);
    v6 = 208;
    if ((v5 & 0x1000000) == 0)
      v6 = 192;
    (*(void (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)((((*(_QWORD *)(v3 + 24) & 0xFFFFFFFFFFFFFFF0) + v6) | (v5 >> 23) & 8)
                                                           + 8)
                                               - 8)
                                   + 8))(*(_QWORD *)(v1 + 24));
  }
  return asyncLet_finish_after_task_completion(v3, *(uint64_t (**)(void))(v1 + 8), v4);
}

uint64_t __swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift::asyncLet_addImpl(swift::AsyncTask *,swift::AsyncLet *,BOOL)::$_0>(uint64_t **a1, __int16 a2, int a3)
{
  swift::updateNewChildWithParentAndGroupState(**a1, a2, a3, 0);
  return 1;
}

uint64_t swift_get_time(__darwin_time_t *a1, uint64_t *a2, const char *a3, char *a4)
{
  clockid_t v6;
  uint64_t result;
  uint64_t tv_nsec;
  timespec __tp;

  if ((_DWORD)a3 == 2)
  {
    v6 = _CLOCK_UPTIME_RAW;
  }
  else
  {
    if ((_DWORD)a3 != 1)
      swift::swift_Concurrency_fatalError(0, "Fatal error: invalid clock ID %d\n", a3, a4, a3);
    v6 = _CLOCK_MONOTONIC_RAW;
  }
  result = clock_gettime(v6, &__tp);
  tv_nsec = __tp.tv_nsec;
  *a1 = __tp.tv_sec;
  *a2 = tv_nsec;
  return result;
}

uint64_t swift_get_clock_res(__darwin_time_t *a1, uint64_t *a2, const char *a3, char *a4)
{
  clockid_t v6;
  uint64_t result;
  uint64_t tv_nsec;
  timespec __res;

  if ((_DWORD)a3 == 2)
  {
    v6 = _CLOCK_UPTIME_RAW;
  }
  else
  {
    if ((_DWORD)a3 != 1)
      swift::swift_Concurrency_fatalError(0, "Fatal error: invalid clock ID %d\n", a3, a4, a3);
    v6 = _CLOCK_MONOTONIC_RAW;
  }
  result = clock_getres(v6, &__res);
  tv_nsec = __res.tv_nsec;
  *a1 = __res.tv_sec;
  *a2 = tv_nsec;
  return result;
}

uint64_t swift_task_enqueueOnDispatchQueue(_QWORD *a1, dispatch_queue_s *a2)
{
  qos_class_t v2;

  v2 = *((unsigned __int8 *)a1 + 33);
  a1[3] = a2;
  return dispatchEnqueueFunc(a2, a1, v2);
}

uint64_t swift_task_enqueueGlobal(uint64_t a1)
{
  char *v2;
  intptr_t v4;
  dispatch_queue_s *global_queue;

  if (*MEMORY[0x1E0DEEA68])
    ((void (*)(uint64_t))*MEMORY[0x1E0DEEA68])(a1);
  swift::concurrency::trace::job_enqueue_global((_BYTE *)a1);
  if (swift_task_enqueueGlobal_hook)
    return swift_task_enqueueGlobal_hook(a1, swift_task_enqueueGlobalImpl);
  v4 = *(unsigned __int8 *)(a1 + 33);
  if (v4 >= 0x22)
    swift::swift_Concurrency_fatalError(0, "invalid job priority %#zx", 0, v2, *(unsigned __int8 *)(a1 + 33));
  global_queue = (dispatch_queue_s *)globalQueueCache[v4];
  if (!global_queue)
  {
    if (!concurrencyEnableCooperativeQueues()
      || (global_queue = (dispatch_queue_s *)dispatch_get_global_queue(v4, 4uLL)) == 0)
    {
      global_queue = (dispatch_queue_s *)dispatch_get_global_queue(v4, 0);
    }
    globalQueueCache[v4] = global_queue;
  }
  *(_QWORD *)(a1 + 24) = 1;
  return dispatchEnqueueFunc(global_queue, (void *)a1, (qos_class_t)v4);
}

void swift::concurrency::trace::job_enqueue_global(_BYTE *a1)
{
  os_signpost_id_t v2;
  os_signpost_id_t v3;
  NSObject *v4;
  int v5;
  unint64_t TaskId;

  if (a1 && !a1[32] && _os_trace_lazy_init_completed_4swift())
  {
    if (swift::concurrency::trace::LogsToken != -1)
      dispatch_once_f(&swift::concurrency::trace::LogsToken, 0, (dispatch_function_t)swift::concurrency::trace::setupLogs);
    if (swift::concurrency::trace::TracingEnabled)
    {
      v2 = os_signpost_id_make_with_pointer((os_log_t)swift::concurrency::trace::TaskLog, a1);
      if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v3 = v2;
        v4 = swift::concurrency::trace::TaskLog;
        if (os_signpost_enabled((os_log_t)swift::concurrency::trace::TaskLog))
        {
          v5 = 134217984;
          TaskId = swift::AsyncTask::getTaskId((swift::AsyncTask *)a1);
          _os_signpost_emit_with_name_impl(&dword_18D56B000, v4, OS_SIGNPOST_EVENT, v3, "job_enqueue_global", "task=%llx", (uint8_t *)&v5, 0xCu);
        }
      }
    }
  }
}

uint64_t swift_task_enqueueGlobalImpl(_QWORD *a1, uint64_t a2, const char *a3, char *a4)
{
  intptr_t v4;
  dispatch_queue_s *global_queue;

  v4 = *((unsigned __int8 *)a1 + 33);
  if (v4 >= 0x22)
    swift::swift_Concurrency_fatalError(0, "invalid job priority %#zx", a3, a4, *((unsigned __int8 *)a1 + 33));
  global_queue = (dispatch_queue_s *)globalQueueCache[v4];
  if (!global_queue)
  {
    if (!concurrencyEnableCooperativeQueues()
      || (global_queue = (dispatch_queue_s *)dispatch_get_global_queue(v4, 4uLL)) == 0)
    {
      global_queue = (dispatch_queue_s *)dispatch_get_global_queue(v4, 0);
    }
    globalQueueCache[v4] = global_queue;
  }
  a1[3] = 1;
  return dispatchEnqueueFunc(global_queue, a1, (qos_class_t)v4);
}

void swift_task_enqueueGlobalWithDelay(uint64_t a1, _BYTE *a2)
{
  const char *v4;

  swift::concurrency::trace::job_enqueue_global_with_delay(a1, a2);
  if (swift_task_enqueueGlobalWithDelay_hook)
    swift_task_enqueueGlobalWithDelay_hook(a1, a2, swift_task_enqueueGlobalWithDelayImpl);
  else
    swift_task_enqueueGlobalWithDelayImpl(a1, (uint64_t)a2, v4, 0);
}

void swift::concurrency::trace::job_enqueue_global_with_delay(uint64_t a1, _BYTE *a2)
{
  os_signpost_id_t v4;
  os_signpost_id_t v5;
  NSObject *v6;
  int v7;
  unint64_t TaskId;
  __int16 v9;
  uint64_t v10;

  if (a2 && !a2[32] && _os_trace_lazy_init_completed_4swift())
  {
    if (swift::concurrency::trace::LogsToken != -1)
      dispatch_once_f(&swift::concurrency::trace::LogsToken, 0, (dispatch_function_t)swift::concurrency::trace::setupLogs);
    if (swift::concurrency::trace::TracingEnabled)
    {
      v4 = os_signpost_id_make_with_pointer((os_log_t)swift::concurrency::trace::TaskLog, a2);
      if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v5 = v4;
        v6 = swift::concurrency::trace::TaskLog;
        if (os_signpost_enabled((os_log_t)swift::concurrency::trace::TaskLog))
        {
          v7 = 134218240;
          TaskId = swift::AsyncTask::getTaskId((swift::AsyncTask *)a2);
          v9 = 2048;
          v10 = a1;
          _os_signpost_emit_with_name_impl(&dword_18D56B000, v6, OS_SIGNPOST_EVENT, v5, "job_enqueue_global_with_delay", "task=%llx delay=%llu", (uint8_t *)&v7, 0x16u);
        }
      }
    }
  }
}

void swift_task_enqueueGlobalWithDelayImpl(int64_t delta, uint64_t a2, const char *a3, char *a4)
{
  intptr_t v4;
  NSObject *global_queue;
  dispatch_time_t v8;

  v4 = *(unsigned __int8 *)(a2 + 33);
  if (v4 >= 0x22)
    swift::swift_Concurrency_fatalError(0, "invalid job priority %#zx", a3, a4, *(unsigned __int8 *)(a2 + 33));
  global_queue = globalQueueCache[v4];
  if (!global_queue)
  {
    if (!concurrencyEnableCooperativeQueues()
      || (global_queue = dispatch_get_global_queue(v4, 4uLL)) == 0)
    {
      global_queue = dispatch_get_global_queue(v4, 0);
    }
    globalQueueCache[v4] = global_queue;
  }
  *(_QWORD *)(a2 + 24) = 1;
  v8 = dispatch_time(0, delta);
  dispatch_after_f(v8, global_queue, (void *)a2, (dispatch_function_t)__swift_run_job);
}

void swift_task_enqueueGlobalWithDeadline(uint64_t a1, uint64_t a2, const char *a3, char *a4, uint64_t a5, _QWORD *a6)
{
  if (swift_task_enqueueGlobalWithDeadline_hook)
    swift_task_enqueueGlobalWithDeadline_hook(a1, a2, a3, a4, a5, a6, swift_task_enqueueGlobalWithDeadlineImpl);
  else
    swift_task_enqueueGlobalWithDeadlineImpl(a1, a2, a3, a4, a5, a6);
}

void swift_task_enqueueGlobalWithDeadlineImpl(uint64_t a1, uint64_t a2, const char *a3, char *a4, int a5, _QWORD *context)
{
  intptr_t v6;
  NSObject *global_queue;
  unint64_t v14;
  dispatch_time_t v15;
  uint64_t v16;
  NSObject *v17;
  _QWORD *v18;

  v6 = *((unsigned __int8 *)context + 33);
  if (v6 >= 0x22)
    swift::swift_Concurrency_fatalError(0, "invalid job priority %#zx", a3, a4, *((unsigned __int8 *)context + 33));
  global_queue = globalQueueCache[v6];
  if (!global_queue)
  {
    if (!concurrencyEnableCooperativeQueues()
      || (global_queue = dispatch_get_global_queue(v6, 4uLL)) == 0)
    {
      global_queue = dispatch_get_global_queue(v6, 0);
    }
    globalQueueCache[v6] = global_queue;
  }
  context[3] = 1;
  v14 = a2 + 1000000000 * a1;
  if (!v14)
  {
LABEL_10:
    if (a5 == 2)
      v15 = v14;
    else
      v15 = v14 | 0x8000000000000000;
    if (a4 == (char *)-1)
      goto LABEL_6;
    goto LABEL_14;
  }
  if (v14 <= 0x7FFFFFFFFFFFFFFELL)
  {
    if (v14 < 0x5555555555555555)
      v14 = 3 * v14 / 0x7D;
    else
      v14 = 3 * (v14 / 0x7D);
    goto LABEL_10;
  }
  v15 = -1;
  if (a4 == (char *)-1)
  {
LABEL_6:
    dispatch_after_f(v15, global_queue, context, (dispatch_function_t)__swift_run_job);
    return;
  }
LABEL_14:
  v16 = (uint64_t)&a4[1000000000 * (_QWORD)a3];
  v17 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, global_queue);
  dispatch_source_set_timer(v17, v15, 0xFFFFFFFFFFFFFFFFLL, v16);
  v18 = (_QWORD *)swift::_swift_task_alloc_specific((swift *)context, (swift::AsyncTask *)0x10);
  *v18 = v17;
  v18[1] = context;
  dispatch_set_context(v17, v18);
  dispatch_source_set_event_handler_f(v17, (dispatch_function_t)_swift_run_job_leeway);
  dispatch_activate(v17);
}

void swift_task_checkIsolated(uint64_t a1, uint64_t a2, const char *a3)
{
  uint64_t ObjectType;

  if (swift_task_checkIsolated_hook)
  {
    swift_task_checkIsolated_hook(a1, a2, swift_task_checkIsolatedImpl);
  }
  else if (a1 == MEMORY[0x1E0C80D38])
  {
    dispatch_assert_queue_V2(MEMORY[0x1E0C80D38]);
  }
  else
  {
    if (!a1 || !a2)
      swift::swift_Concurrency_fatalError(0, "Incorrect actor executor assumption", a3, 0);
    ObjectType = swift_getObjectType();
    _task_serialExecutor_checkIsolated(a1, ObjectType, a2 & 0xFFFFFFFFFFFFFFF8);
  }
}

void swift_task_checkIsolatedImpl(uint64_t a1, uint64_t a2, const char *a3, char *a4)
{
  uint64_t ObjectType;

  if (a1 == MEMORY[0x1E0C80D38])
  {
    dispatch_assert_queue_V2(MEMORY[0x1E0C80D38]);
  }
  else
  {
    if (!a1 || !a2)
      swift::swift_Concurrency_fatalError(0, "Incorrect actor executor assumption", a3, a4);
    ObjectType = swift_getObjectType();
    _task_serialExecutor_checkIsolated(a1, ObjectType, a2 & 0xFFFFFFFFFFFFFFF8);
  }
}

uint64_t swift_task_isOnExecutor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ExecutorRef;
  uint64_t v5;

  if (swift_task_isOnExecutor_hook)
    return swift_task_isOnExecutor_hook(a1, a2, a3, swift_task_isOnExecutorImpl);
  ExecutorRef = _task_serialExecutor_getExecutorRef(a1, a2, a3);
  return swift_task_isCurrentExecutor(ExecutorRef, v5);
}

uint64_t swift_task_isOnExecutorImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ExecutorRef;
  uint64_t v4;

  ExecutorRef = _task_serialExecutor_getExecutorRef(a1, a2, a3);
  return swift_task_isCurrentExecutor(ExecutorRef, v4);
}

BOOL swift_executor_isComplexEquality(uint64_t a1, char a2)
{
  return (a2 & 7) == 1;
}

unint64_t swift_task_getJobTaskId(uint64_t a1)
{
  if (!a1 || *(_BYTE *)(a1 + 32))
    return *(unsigned int *)(a1 + 36);
  else
    return swift::AsyncTask::getTaskId((swift::AsyncTask *)a1);
}

uint64_t swift_task_enqueueMainExecutor(uint64_t a1)
{
  qos_class_t v3;
  dispatch_queue_s *v4;

  swift::concurrency::trace::job_enqueue_main_executor((_BYTE *)a1);
  if (swift_task_enqueueMainExecutor_hook)
    return swift_task_enqueueMainExecutor_hook(a1, swift_task_enqueueMainExecutorImpl);
  v3 = *(unsigned __int8 *)(a1 + 33);
  v4 = (dispatch_queue_s *)MEMORY[0x1E0C80D38];
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0C80D38];
  return dispatchEnqueueFunc(v4, (void *)a1, v3);
}

void swift::concurrency::trace::job_enqueue_main_executor(_BYTE *a1)
{
  os_signpost_id_t v2;
  os_signpost_id_t v3;
  NSObject *v4;
  int v5;
  unint64_t TaskId;

  if (a1 && !a1[32] && _os_trace_lazy_init_completed_4swift())
  {
    if (swift::concurrency::trace::LogsToken != -1)
      dispatch_once_f(&swift::concurrency::trace::LogsToken, 0, (dispatch_function_t)swift::concurrency::trace::setupLogs);
    if (swift::concurrency::trace::TracingEnabled)
    {
      v2 = os_signpost_id_make_with_pointer((os_log_t)swift::concurrency::trace::TaskLog, a1);
      if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v3 = v2;
        v4 = swift::concurrency::trace::TaskLog;
        if (os_signpost_enabled((os_log_t)swift::concurrency::trace::TaskLog))
        {
          v5 = 134217984;
          TaskId = swift::AsyncTask::getTaskId((swift::AsyncTask *)a1);
          _os_signpost_emit_with_name_impl(&dword_18D56B000, v4, OS_SIGNPOST_EVENT, v3, "job_enqueue_main_executor", "task=%llx", (uint8_t *)&v5, 0xCu);
        }
      }
    }
  }
}

uint64_t swift_task_enqueueMainExecutorImpl(_QWORD *a1)
{
  qos_class_t v2;
  dispatch_queue_s *v3;

  v2 = *((unsigned __int8 *)a1 + 33);
  v3 = (dispatch_queue_s *)MEMORY[0x1E0C80D38];
  a1[3] = MEMORY[0x1E0C80D38];
  return dispatchEnqueueFunc(v3, a1, v2);
}

uint64_t swift_task_getMainExecutor()
{
  return MEMORY[0x1E0C80D38];
}

BOOL swift::SerialExecutorRef::isMainExecutor(swift::SerialExecutorRef *this)
{
  return *(_QWORD *)this == MEMORY[0x1E0C80D38];
}

uint64_t initializeDispatchEnqueueFunc(dispatch_queue_s *a1, void *a2, uint64_t a3)
{
  void (*v6)(NSObject *, void *, qos_class_t);

  if (concurrencyEnableJobDispatchIntegration())
    v6 = (void (*)(NSObject *, void *, qos_class_t))MEMORY[0x1E0C82C20];
  else
    v6 = dispatchEnqueueDispatchAsync;
  dispatchEnqueueFunc = (uint64_t (*)(dispatch_queue_s *, void *, qos_class_t))v6;
  return ((uint64_t (*)(dispatch_queue_s *, void *, uint64_t))v6)(a1, a2, a3);
}

void dispatchEnqueueDispatchAsync(NSObject *a1, void *a2, qos_class_t a3)
{
  dispatch_async_f(a1, a2, (dispatch_function_t)__swift_run_job);
}

uint64_t __swift_run_job(void *a1)
{
  return (*(uint64_t (**)(void *, _QWORD, _QWORD))(*(_QWORD *)a1 + 48))(a1, 0, 0);
}

uint64_t _swift_run_job_leeway(uint64_t a1)
{
  const char *v2;
  char *v3;
  _BYTE *v4;
  swift *v5;

  dispatch_release(*(dispatch_object_t *)a1);
  v4 = *(_BYTE **)(a1 + 8);
  if (v4[32])
    v5 = 0;
  else
    v5 = *(swift **)(a1 + 8);
  swift::_swift_task_dealloc_specific(v5, (swift::AsyncTask *)a1, v2, v3);
  return (*(uint64_t (**)(_BYTE *, _QWORD, _QWORD))(*(_QWORD *)v4 + 48))(v4, 0, 0);
}

void swift::swift_Concurrency_fatalErrorv(swift *this, const char *a2, va_list a3, char *a4)
{
  vfprintf((FILE *)*MEMORY[0x1E0C80C10], a2, a3);
  abort();
}

void swift::swift_Concurrency_fatalError(swift *this, const char *a2, const char *a3, char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  swift::swift_Concurrency_fatalErrorv(this, a2, va, a4);
}

uint64_t setupStandardConcurrencyDescriptors(void)
{
  return _swift_registerConcurrencyStandardTypeDescriptors();
}

unint64_t swift::AsyncTask::waitFuture(swift::AsyncTask *a1, swift::AsyncTask *this, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unsigned __int128 *v18;
  unint64_t v19;
  unsigned __int128 v20;
  swift::AsyncTask *v21;
  swift *v22;
  unint64_t v23;
  void (**v25)(swift::AsyncTask *);
  unint64_t v26;
  unint64_t *v27;
  unsigned __int128 v28;
  unint64_t v29;

  v8 = *((unsigned int *)a1 + 8);
  v9 = 208;
  if ((v8 & 0x1000000) == 0)
    v9 = 192;
  v10 = (unint64_t *)((char *)a1 + v9 + ((v8 >> 23) & 8));
  v11 = atomic_load(v10);
  v12 = v11 & 3;
  if (v12 - 1 < 2)
  {
    v13 = 0;
    goto LABEL_5;
  }
  if ((v11 & 3) == 0)
  {
    if (*MEMORY[0x1E0DEEA68])
      ((void (*)(swift::AsyncTask *))*MEMORY[0x1E0DEEA68])(this);
    swift::concurrency::trace::task_wait(this, a1, 0);
  }
  v18 = (unsigned __int128 *)((char *)this + 96);
  a3[2] = 0;
  a3[3] = a6;
  *a3 = a5;
  a3[1] = a4;
  v19 = swift::_swift_task_alloc_specific(this, (swift::AsyncTask *)0x30);
  *(_QWORD *)v19 = 0;
  *(_QWORD *)(v19 + 8) = 0;
  *(_DWORD *)(v19 + 32) = 1;
  *(_QWORD *)(v19 + 40) = this;
  *(_QWORD *)(v19 + 16) = a1;
  *((_QWORD *)this + 20) = v19;
  v29 = v19;
  do
    v20 = __ldxp(v18);
  while (__stxp(v20, v18));
  v28 = v20;
  v27 = &v29;
  swift::addStatusRecord(this, v19, (unsigned int *)&v28, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t *))__swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift::AsyncTask::flagAsSuspended(swift::TaskDependencyStatusRecord *)::{lambda(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)#1}>, (uint64_t)&v27);
  if ((v28 & 0x400) != 0)
    dispatch_lock_override_end();
  swift_task_exitThreadLocalContext();
  v22 = (swift *)swift::restoreTaskVoucher(this, v21);
  *((_QWORD *)this + 2) = v11 & 0xFFFFFFFFFFFFFFFCLL;
  v23 = __ldaxr(v10);
  if (v23 == v11)
  {
    if (!__stlxr((unint64_t)this, v10))
    {
LABEL_22:
      swift::_swift_task_clearCurrent(v22);
      return 0;
    }
  }
  else
  {
    __clrex();
  }
  v25 = (void (**)(swift::AsyncTask *))MEMORY[0x1E0DEEA68];
  while (1)
  {
    v12 = v23 & 3;
    if ((v23 & 3) != 0)
      break;
    if (*v25)
      (*v25)(this);
    swift::concurrency::trace::task_wait(this, a1, 0);
LABEL_32:
    *((_QWORD *)this + 2) = v23 & 0xFFFFFFFFFFFFFFFCLL;
    v26 = __ldaxr(v10);
    if (v26 == v23)
    {
      if (!__stlxr((unint64_t)this, v10))
        goto LABEL_22;
    }
    else
    {
      __clrex();
    }
    v23 = v26;
  }
  if (v12 - 1 > 1)
    goto LABEL_32;
  v13 = 1;
LABEL_5:
  if (*MEMORY[0x1E0DEEA60])
    ((void (*)(swift::AsyncTask *))*MEMORY[0x1E0DEEA60])(a1);
  if (v13)
    swift::AsyncTask::flagAsRunning(this);
  return v12;
}

void swift::concurrency::trace::task_wait(swift::concurrency::trace *this, swift::AsyncTask *a2, swift::AsyncTask *a3)
{
  os_signpost_id_t v6;
  os_signpost_id_t v7;
  unint64_t v8;
  NSObject *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  __int16 v13;
  unint64_t v14;
  __int16 v15;
  swift::AsyncTask *v16;

  if (_os_trace_lazy_init_completed_4swift())
  {
    if (swift::concurrency::trace::LogsToken != -1)
      dispatch_once_f(&swift::concurrency::trace::LogsToken, 0, (dispatch_function_t)swift::concurrency::trace::setupLogs);
    if (swift::concurrency::trace::TracingEnabled)
    {
      v6 = os_signpost_id_make_with_pointer((os_log_t)swift::concurrency::trace::TaskLog, this);
      v7 = v6;
      if (a2)
        v8 = (unint64_t)*((unsigned int *)a2 + 9) << *((_DWORD *)a2 + 36);
      else
        v8 = 0;
      if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v9 = swift::concurrency::trace::TaskLog;
        if (os_signpost_enabled((os_log_t)swift::concurrency::trace::TaskLog))
        {
          v10 = (unint64_t)*((unsigned int *)this + 9) << *((_DWORD *)this + 36);
          v11 = 134218496;
          v12 = v10;
          v13 = 2048;
          v14 = v8;
          v15 = 2048;
          v16 = a3;
          _os_signpost_emit_with_name_impl(&dword_18D56B000, v9, OS_SIGNPOST_INTERVAL_BEGIN, v7, "task_wait", "task=%llx waitingOnTask=%llx status=0x%lx", (uint8_t *)&v11, 0x20u);
        }
      }
    }
  }
}

void swift::NullaryContinuationJob::process(uint64_t a1)
{
  swift::AsyncTask *v2;
  void *v3;

  v2 = *(swift::AsyncTask **)(a1 + 72);
  v3 = *(void **)(a1 + 40);
  if ((unint64_t)v3 + 1 >= 2)
    os_release(v3);
  MEMORY[0x18D78FAD0](a1, 0x10E0C40265EA900);
  *(_QWORD *)(*((_QWORD *)v2 + 8) + 32) = 0;
  swift_once();
  if (swift_continuation_resume::Override)
    swift_continuation_resume::Override(v2, swift_continuation_resumeImpl);
  else
    swift_continuation_resumeImpl(v2);
}

void swift_continuation_resume(swift::AsyncTask *a1)
{
  swift_once();
  if (swift_continuation_resume::Override)
    swift_continuation_resume::Override(a1, swift_continuation_resumeImpl);
  else
    swift_continuation_resumeImpl(a1);
}

void swift::AsyncTask::completeFuture(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  unint64_t v12;
  void (**v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t);
  os_signpost_id_t v17;
  os_signpost_id_t v18;
  NSObject *v19;
  unint64_t v20;
  uint8_t buf[4];
  unint64_t v22;

  v3 = *(unsigned int *)(a1 + 32);
  v4 = 208;
  if ((v3 & 0x1000000) == 0)
    v4 = 192;
  v5 = (unint64_t *)(a1 + v4 + ((v3 >> 23) & 8));
  v6 = *(_QWORD *)(a2 - 8);
  v5[2] = v6;
  if (v6)
    v7 = 2;
  else
    v7 = 1;
  if (*MEMORY[0x1E0DEEA68])
    ((void (*)(uint64_t))*MEMORY[0x1E0DEEA68])(a1);
  do
    v8 = __ldaxr(v5);
  while (__stlxr(v7, v5));
  v9 = *(_DWORD *)(a1 + 32);
  if ((v9 & 0x4000000) != 0)
  {
    v10 = (v9 & 0x1000000) == 0;
    v11 = 208;
    if (v10)
      v11 = 192;
    swift::TaskGroup::offer(*(_QWORD *)(a1 + v11));
  }
  v12 = v8 & 0xFFFFFFFFFFFFFFFCLL;
  if ((v8 & 0xFFFFFFFFFFFFFFFCLL) != 0)
  {
    v13 = (void (**)(uint64_t))MEMORY[0x1E0DEEA60];
    while (1)
    {
      v14 = v12;
      v12 = *(_QWORD *)(v12 + 16);
      v15 = *(_QWORD *)(v14 + 64);
      if (!v6)
        break;
      *(_QWORD *)(v15 + 16) = v5[2];
      MEMORY[0x18D78FED8]();
      v16 = *v13;
      if (*v13)
        goto LABEL_18;
LABEL_19:
      v17 = os_signpost_id_make_with_pointer((os_log_t)swift::concurrency::trace::TaskLog, (const void *)v14);
      if (v17 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v18 = v17;
        v19 = swift::concurrency::trace::TaskLog;
        if (os_signpost_enabled((os_log_t)swift::concurrency::trace::TaskLog))
        {
          v20 = (unint64_t)*(unsigned int *)(v14 + 36) << *(_DWORD *)(v14 + 144);
          *(_DWORD *)buf = 134217984;
          v22 = v20;
          _os_signpost_emit_with_name_impl(&dword_18D56B000, v19, OS_SIGNPOST_INTERVAL_END, v18, "task_wait", "task=%llx", buf, 0xCu);
        }
      }
      swift::AsyncTask::flagAsAndEnqueueOnExecutor(v14, 0, 0);
      if (!v12)
        return;
    }
    (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)(v5[1] - 8) + 16))(*(_QWORD *)(v15 + 24), ((unint64_t)v5 + *(unsigned __int8 *)(*(_QWORD *)(v5[1] - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5[1] - 8) + 80));
    v16 = *v13;
    if (!*v13)
      goto LABEL_19;
LABEL_18:
    v16(v14);
    goto LABEL_19;
  }
}

void swift::AsyncTask::~AsyncTask(swift::AsyncTask *this, uint64_t a2, const char *a3, char *a4)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  char v8;
  uint64_t v9;
  os_signpost_id_t v10;
  os_signpost_id_t v11;
  NSObject *v12;
  unint64_t v13;
  void *v14;
  int v15;
  unint64_t v16;

  v5 = *((unsigned int *)this + 8);
  if ((v5 & 0x2000000) != 0)
  {
    v6 = 208;
    if ((v5 & 0x1000000) == 0)
      v6 = 192;
    v7 = (unint64_t *)((char *)this + v6 + ((v5 >> 23) & 8));
    v8 = atomic_load(v7);
    v9 = v8 & 3;
    switch(v9)
    {
      case 1:
        (*(void (**)(unint64_t))(*(_QWORD *)(v7[1] - 8) + 8))(((unint64_t)v7
                                                                                 + *(unsigned __int8 *)(*(_QWORD *)(v7[1] - 8) + 80)
                                                                                 + 24) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v7[1] - 8) + 80));
        break;
      case 2:
        MEMORY[0x18D78FECC](v7[2]);
        break;
      case 0:
        abort();
    }
  }
  swift::StackAllocator<984ul,&swift::TaskAllocatorSlabMetadata>::~StackAllocator((uint64_t)this + 112, a2, a3, a4);
  if (_os_trace_lazy_init_completed_4swift())
  {
    if (swift::concurrency::trace::LogsToken != -1)
      dispatch_once_f(&swift::concurrency::trace::LogsToken, 0, (dispatch_function_t)swift::concurrency::trace::setupLogs);
    if (swift::concurrency::trace::TracingEnabled)
    {
      v10 = os_signpost_id_make_with_pointer((os_log_t)swift::concurrency::trace::TaskLog, this);
      if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v11 = v10;
        v12 = swift::concurrency::trace::TaskLog;
        if (os_signpost_enabled((os_log_t)swift::concurrency::trace::TaskLog))
        {
          v13 = (unint64_t)*((unsigned int *)this + 9) << *((_DWORD *)this + 36);
          v15 = 134217984;
          v16 = v13;
          _os_signpost_emit_with_name_impl(&dword_18D56B000, v12, OS_SIGNPOST_INTERVAL_END, v11, "task_lifetime", "task=%llx", (uint8_t *)&v15, 0xCu);
        }
      }
    }
  }
  v14 = (void *)*((_QWORD *)this + 5);
  if ((unint64_t)v14 + 1 >= 2)
    os_release(v14);
}

unint64_t swift::AsyncTask::getTaskId(swift::AsyncTask *this)
{
  return (unint64_t)*((unsigned int *)this + 9) << *((_DWORD *)this + 36);
}

void jobInvoke(swift::AsyncTask *a1, void *a2)
{
  unint64_t v2;
  _UNKNOWN **v3;
  _anonymous_namespace_::DefaultActorImpl *v4;

  v2 = *((_QWORD *)a1 + 3);
  if (v2 >= 2)
    v3 = &protocol witness table for DispatchQueueShim;
  else
    v3 = 0;
  if (v2 >= 2)
    v4 = (_anonymous_namespace_::DefaultActorImpl *)*((_QWORD *)a1 + 3);
  else
    v4 = 0;
  swift_job_run(a1, v4, (uint64_t)v3);
}

void destroyTask(uint64_t a1, uint64_t a2, const char *a3, char *a4)
{
  swift::AsyncTask *v4;
  void *v5;

  swift::AsyncTask::~AsyncTask(v4, a2, a3, a4);
  free(v5);
}

uint64_t non_future_adapter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 - 24))();
}

uint64_t future_adapter()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 - 24))(*(_QWORD *)(v0 - 32));
}

uint64_t task_wait_throwing_resume_adapter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t task_future_wait_resume_adapter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t swift::AsyncTask::getResumeFunctionForLogging(swift::AsyncTask *this, int a2)
{
  uint64_t (*v2)();
  BOOL v3;
  uint64_t v4;

  v2 = (uint64_t (*)())*((_QWORD *)this + 7);
  v3 = v2 == non_future_adapter || v2 == future_adapter;
  v4 = *((_QWORD *)this + 7);
  if (v3)
    v4 = *(_QWORD *)(*((_QWORD *)this + 8) - 24);
  if (a2)
  {
    if (v2 == task_wait_throwing_resume_adapter || v2 == task_future_wait_resume_adapter)
      return *(_QWORD *)(*((_QWORD *)this + 8) + 8);
  }
  return v4;
}

uint64_t swift_task_currentPriority(uint64_t a1)
{
  unsigned __int128 *v1;
  unsigned __int128 v2;

  v1 = (unsigned __int128 *)(a1 + 96);
  do
    v2 = __ldxp(v1);
  while (__stxp(v2, v1));
  return v2;
}

uint64_t swift_task_basePriority(uint64_t a1)
{
  return *(_QWORD *)(a1 + 152);
}

uint64_t swift_concurrency_jobPriority(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 33);
}

uint64_t swift_task_create(unint64_t a1, unsigned __int8 *a2, uint64_t a3, int *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = a4[1];
  v10 = (uint64_t)a4 + *a4;
  swift_once();
  if (swift_task_create_common::Override)
    return swift_task_create_common::Override(a1, a2, a3, v10, a5, v9, swift_task_create_commonImpl);
  else
    return swift_task_create_commonImpl(a1, a2, a3, v10, a5, v9);
}

uint64_t swift_task_create_common(unint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  swift_once();
  if (swift_task_create_common::Override)
    return swift_task_create_common::Override(a1, a2, a3, a4, a5, a6, swift_task_create_commonImpl);
  else
    return swift_task_create_commonImpl(a1, a2, a3, a4, a5, a6);
}

unint64_t swift_task_future_wait_throwingImpl(uint64_t a1, unsigned int *a2, uint64_t (*a3)(void), _QWORD *a4)
{
  uint64_t v4;
  swift::AsyncTask *Current;
  unint64_t result;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  Current = (swift::AsyncTask *)swift_task_getCurrent();
  *((_QWORD *)Current + 7) = task_wait_throwing_resume_adapter;
  *((_QWORD *)Current + 8) = a4;
  result = swift::AsyncTask::waitFuture((swift::AsyncTask *)a2, Current, a4, (uint64_t)a3, v4, a1);
  if (result == 2)
  {
    v13 = a2[8];
    v14 = 52;
    if ((v13 & 0x1000000) == 0)
      v14 = 48;
    MEMORY[0x18D78FED8](*(_QWORD *)((char *)&a2[v14 + 4] + ((v13 >> 23) & 8)));
  }
  else
  {
    if (result != 1)
      return result;
    v10 = a2[8];
    v11 = 52;
    if ((v10 & 0x1000000) == 0)
      v11 = 48;
    v12 = (uint64_t)&a2[v11] + ((v10 >> 23) & 8);
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)(*(_QWORD *)(v12 + 8) - 8) + 16))(a1, (v12 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) - 8) + 80));
  }
  return a3();
}

uint64_t swift_task_getJobFlags(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

unint64_t swift_task_isCancelled(uint64_t a1)
{
  unsigned __int128 *v1;
  unsigned __int128 v2;

  v1 = (unsigned __int128 *)(a1 + 96);
  do
    v2 = __ldxp(v1);
  while (__stxp(v2, v1));
  return ((unint64_t)v2 >> 8) & 1;
}

uint64_t swift_continuation_logFailedCheck()
{
  return swift_reportError();
}

uint64_t swift_task_create_commonImpl(unint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  int v9;
  unsigned __int8 *v10;
  uint64_t TaskExecutorRef;
  char v12;
  swift::TaskGroup *v13;
  swift::AsyncLet *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  int v19;
  uint64_t Current;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned __int128 *v28;
  int v29;
  uint64_t CurrentThreadPriority;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t PreallocatedSpace;
  int v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t (*v41)();
  int v42;
  unsigned __int8 *v43;
  uint64_t PreferredTaskExecutor;
  uint64_t v45;
  _BOOL4 v46;
  _QWORD *v47;
  unint64_t v48;
  BOOL v49;
  BOOL v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  void *v56;
  unsigned int v57;
  unint64_t v58;
  unsigned __int128 *v59;
  unsigned __int128 *v60;
  unsigned __int128 v61;
  uint64_t v62;
  char v63;
  unsigned int v64;
  BOOL v66;
  char v67;
  size_t size;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v74;
  uint64_t v76;
  unsigned __int8 *v77;
  int v78;
  char v80;
  uint64_t v81;

  v7 = a3;
  v9 = ((_DWORD)a1 << 16) & 0x1000000;
  if (a2)
  {
    v10 = a2;
    v76 = 0;
    v77 = 0;
    a2 = 0;
    TaskExecutorRef = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v80 = 0;
    v15 = 0;
    do
    {
      switch(*v10)
      {
        case 0u:
          v76 = *((_QWORD *)v10 + 3);
          v77 = (unsigned __int8 *)*((_QWORD *)v10 + 2);
          break;
        case 1u:
          v13 = (swift::TaskGroup *)*((_QWORD *)v10 + 2);
          v9 |= 0x4000000u;
          break;
        case 2u:
          v14 = (swift::AsyncLet *)*((_QWORD *)v10 + 2);
          v9 |= 0x11000000u;
          break;
        case 3u:
          v14 = (swift::AsyncLet *)*((_QWORD *)v10 + 2);
          v9 |= 0x11000000u;
          v80 = 1;
          break;
        case 4u:
          abort();
        case 5u:
          v12 = 0;
          TaskExecutorRef = *((_QWORD *)v10 + 2);
          a2 = (unsigned __int8 *)*((_QWORD *)v10 + 3);
          v9 |= 0x20000000u;
          break;
        case 6u:
          v16 = *((_QWORD *)v10 + 2);
          ObjectType = swift_getObjectType();
          v18 = v16;
          v7 = a3;
          TaskExecutorRef = _task_taskExecutor_getTaskExecutorRef(v18, ObjectType, *((_QWORD *)v10 + 3));
          v9 |= 0x20000000u;
          v12 = 1;
          break;
        default:
          if (*v10 == 255)
            v15 = v10;
          break;
      }
      v10 = (unsigned __int8 *)*((_QWORD *)v10 + 1);
    }
    while (v10);
  }
  else
  {
    v15 = 0;
    v80 = 0;
    v14 = 0;
    v13 = 0;
    v12 = 0;
    TaskExecutorRef = 0;
    v76 = 0;
    v77 = 0;
  }
  v72 = a4;
  v69 = (uint64_t)a2;
  v70 = TaskExecutorRef;
  v67 = v12;
  if (v7)
    v19 = v9 | 0x2000000;
  else
    v19 = v9;
  Current = swift_task_getCurrent();
  v26 = v19;
  v27 = Current;
  if ((v19 & 0x1000000) != 0)
    v28 = (unsigned __int128 *)Current;
  else
    v28 = 0;
  v29 = v19;
  if ((a1 & 0x2000) != 0 && v13)
  {
    swift_taskGroup_addPending(v13, 1);
    v26 = v19;
  }
  if ((a1 & 0x200) != 0)
  {
    CurrentThreadPriority = swift_task_getCurrentThreadPriority();
  }
  else
  {
    CurrentThreadPriority = a1;
    v31 = v26 & 0x14000000;
    if ((a1 & 0x400) != 0 || v31)
    {
      if (v31)
      {
        if (!(_BYTE)a1)
        {
          if (*((_QWORD *)v28 + 19) == 33)
            CurrentThreadPriority = 25;
          else
            CurrentThreadPriority = *((_QWORD *)v28 + 19);
        }
      }
      else if (!(_BYTE)a1)
      {
        CurrentThreadPriority = v27 ? *(_QWORD *)(v27 + 152) : swift_task_getCurrentThreadPriority();
        if (CurrentThreadPriority == 33)
          CurrentThreadPriority = 25;
      }
    }
  }
  if (CurrentThreadPriority)
    v32 = CurrentThreadPriority;
  else
    v32 = 21;
  v33 = 208;
  if (!v28)
    v33 = 192;
  if (v13)
    v33 |= 8uLL;
  if (v7)
    v34 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64)
        + ((*(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80) + v33 + 24) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80))
        + 32;
  else
    v34 = v33 + 24;
  v35 = (v34 + 15) & 0xFFFFFFFFFFFFFFF0;
  v36 = v35 + a6;
  v71 = v32;
  size = v35 + a6;
  if (v14)
  {
    if (((swift::AsyncLet::getSizeOfPreallocatedSpace((swift::AsyncLet *)CurrentThreadPriority) >= v36) & v80) != 0)
    {
      PreallocatedSpace = swift::AsyncLet::getPreallocatedSpace(v14);
      v74 = swift::AsyncLet::getSizeOfPreallocatedSpace((swift::AsyncLet *)PreallocatedSpace) - (v35 + a6);
      v80 = 1;
      goto LABEL_52;
    }
    PreallocatedSpace = swift::_swift_task_alloc_specific((swift *)v28, (swift::AsyncTask *)(v36 + 512));
    v80 = 0;
    goto LABEL_50;
  }
  if (!v15 || (PreallocatedSpace = *((_QWORD *)v15 + 2)) == 0)
  {
    PreallocatedSpace = (uint64_t)malloc_type_malloc(size, 0xF2CDECDCuLL);
LABEL_50:
    v38 = 512;
    goto LABEL_51;
  }
  v38 = *((_DWORD *)v15 + 6) - size;
LABEL_51:
  v74 = v38;
LABEL_52:
  v39 = (_QWORD *)(PreallocatedSpace + v35);
  v40 = (a1 >> 14) & 1;
  if (!v7)
    LODWORD(v40) = 1;
  if ((_DWORD)v40)
    v41 = non_future_adapter;
  else
    v41 = future_adapter;
  *(v39 - 3) = v72;
  *(v39 - 2) = a5;
  v42 = v29;
  if ((v29 & 0x20000000) != 0 || !v28)
  {
    v43 = v77;
  }
  else
  {
    v43 = v77;
    PreferredTaskExecutor = swift::AsyncTask::getPreferredTaskExecutor((swift::AsyncTask *)v28, 0, v21, v22, v23, v24, v25);
    v42 = v29;
    if (PreferredTaskExecutor)
    {
      v42 = v29 | 0x20000000;
      v69 = v45;
      v70 = PreferredTaskExecutor;
    }
  }
  v46 = (a1 & 0x600) != 0;
  if ((v42 & 0x14000000) != 0)
    v46 = 1;
  *(_QWORD *)PreallocatedSpace = &unk_1ECE20698;
  v47 = (_QWORD *)(PreallocatedSpace + 36);
  v78 = v42;
  if (v14)
  {
    *(_QWORD *)(PreallocatedSpace + 8) = 0x80000004FFFFFFFFLL;
    *(_DWORD *)(PreallocatedSpace + 32) = v42;
    *v47 = 0;
    *(_QWORD *)(PreallocatedSpace + 44) = 0;
    *(_DWORD *)(PreallocatedSpace + 52) = 0;
    *(_QWORD *)(PreallocatedSpace + 56) = v41;
    if (v46)
      *(_QWORD *)(PreallocatedSpace + 40) = voucher_copy();
    *(_QWORD *)(PreallocatedSpace + 64) = v39;
    do
    {
      v48 = __ldxr(&swift::AsyncTask::setTaskId(void)::NextId);
      if (__stxr(v48 + 1, &swift::AsyncTask::setTaskId(void)::NextId))
        v49 = 1;
      else
        v49 = (_DWORD)v48 == 0;
    }
    while (v49);
  }
  else
  {
    *(_QWORD *)(PreallocatedSpace + 8) = 3;
    *(_DWORD *)(PreallocatedSpace + 32) = v42;
    *v47 = 0;
    *(_QWORD *)(PreallocatedSpace + 44) = 0;
    *(_DWORD *)(PreallocatedSpace + 52) = 0;
    *(_QWORD *)(PreallocatedSpace + 56) = v41;
    if (v46)
      *(_QWORD *)(PreallocatedSpace + 40) = voucher_copy();
    *(_QWORD *)(PreallocatedSpace + 64) = v39;
    do
    {
      v48 = __ldxr(&swift::AsyncTask::setTaskId(void)::NextId);
      if (__stxr(v48 + 1, &swift::AsyncTask::setTaskId(void)::NextId))
        v50 = 1;
      else
        v50 = (_DWORD)v48 == 0;
    }
    while (v50);
  }
  *(_DWORD *)(PreallocatedSpace + 36) = v48;
  *(_DWORD *)(PreallocatedSpace + 144) = HIDWORD(v48);
  if (v28)
  {
    *(_QWORD *)(PreallocatedSpace + 192) = v28;
    *(_QWORD *)(PreallocatedSpace + 200) = 0;
  }
  if (v13)
  {
    v51 = 208;
    if ((*(_DWORD *)(PreallocatedSpace + 32) & 0x1000000) == 0)
      v51 = 192;
    *(_QWORD *)(PreallocatedSpace + v51) = v13;
  }
  if (a3)
  {
    v52 = *(unsigned int *)(PreallocatedSpace + 32);
    v53 = 208;
    if ((v52 & 0x1000000) == 0)
      v53 = 192;
    v54 = (_QWORD *)(PreallocatedSpace + v53 + ((v52 >> 23) & 8));
    *v54 = 0;
    v54[1] = a3;
    v54[2] = 0;
    v55 = *(unsigned __int8 *)(*(_QWORD *)(a3 - 8) + 80);
    *(v39 - 4) = ((unint64_t)v54 + v55 + 24) & ~v55;
  }
  v56 = completeTaskWithClosure;
  if (!a5)
    v56 = completeTaskAndRelease;
  if (v14)
    v56 = completeTask;
  if (v15)
    v56 = completeInlineTask;
  v39[1] = v56;
  if (v14)
  {
    v57 = v74;
    if (!v74)
    {
LABEL_105:
      *(_QWORD *)(PreallocatedSpace + 112) = 0;
      *(_QWORD *)(PreallocatedSpace + 120) = 0;
      *(_DWORD *)(PreallocatedSpace + 128) = 0;
      *(_QWORD *)(PreallocatedSpace + 136) = 0;
      *(_QWORD *)(PreallocatedSpace + 80) = 0;
      *(_QWORD *)(PreallocatedSpace + 88) = 0;
      goto LABEL_106;
    }
  }
  else
  {
    v57 = v74;
    if (!v15 || !*((_QWORD *)v15 + 2) || !v74)
      goto LABEL_105;
  }
  *(_QWORD *)(PreallocatedSpace + 112) = 0;
  *(_QWORD *)(PreallocatedSpace + 120) = 0;
  *(_DWORD *)(PreallocatedSpace + 128) = 0;
  *(_QWORD *)(PreallocatedSpace + 80) = 0;
  *(_QWORD *)(PreallocatedSpace + 88) = 0;
  if (v57 >= 0x21)
  {
    v58 = (PreallocatedSpace + size + 15) & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)v58 = &swift::TaskAllocatorSlabMetadata;
    *(_QWORD *)(v58 + 8) = 0;
    *(_DWORD *)(v58 + 16) = PreallocatedSpace + size + v57 - v58 - 32;
    *(_DWORD *)(v58 + 20) = 0;
    *(_QWORD *)(PreallocatedSpace + 120) = v58;
    *(_DWORD *)(PreallocatedSpace + 128) = 1;
  }
  *(_QWORD *)(PreallocatedSpace + 136) = 0;
LABEL_106:
  *(_QWORD *)(PreallocatedSpace + 152) = v71;
  *(_QWORD *)(PreallocatedSpace + 160) = 0;
  v59 = (unsigned __int128 *)(PreallocatedSpace + 96);
  do
    __ldxp(v59);
  while (__stxp(v71, v59));
  if (v28)
  {
    if (v13 && (swift::TaskGroup::isCancelled(v13) & 1) != 0)
      goto LABEL_114;
    v60 = v28 + 6;
    do
      v61 = __ldxp(v60);
    while (__stxp(v61, v60));
    if ((v61 & 0x100) != 0)
LABEL_114:
      swift_task_cancel((swift::AsyncTask *)PreallocatedSpace);
    if (v13
      && (v81 = *((_QWORD *)v28 + 17),
          v62 = swift::TaskLocal::Storage::peekHeadLinkType((swift::TaskLocal::Storage *)&v81),
          v63)
      && v62 == 2)
    {
      swift::TaskLocal::Storage::copyToOnlyOnlyFromCurrentGroup((swift::TaskLocal::Storage *)&v81, (swift::AsyncTask *)PreallocatedSpace);
    }
    else
    {
      swift::TaskLocal::Storage::initializeLinkParent((swift::TaskLocal::Storage *)(PreallocatedSpace + 136), (swift::AsyncTask *)PreallocatedSpace, (swift::AsyncTask *)v28);
    }
  }
  v64 = *(_DWORD *)(PreallocatedSpace + 32);
  *v39 = 0;
  swift::concurrency::trace::task_create((uint64_t (**)())PreallocatedSpace, (unint64_t)v28, v13, v14, (swift::AsyncLet *)BYTE1(v64), HIBYTE(v64) & 1, (v64 >> 25) & 1, (v64 >> 26) & 1, (v64 & 0x10000000) != 0, v66);
  if (v13)
    swift_taskGroup_attachChild((uint64_t)v13, PreallocatedSpace);
  if ((a1 & 0x400) != 0)
    swift_task_localsCopyTo((swift::AsyncTask *)PreallocatedSpace);
  if (v14)
    swift::asyncLet_addImpl(PreallocatedSpace, v14, (swift::AsyncLet *)((v80 & 1) == 0));
  if ((v78 & 0x20000000) != 0)
    swift::AsyncTask::pushInitialTaskExecutorPreference((swift *)PreallocatedSpace, v70, v69, v67 & 1);
  if ((a1 & 0x1000) != 0)
  {
    swift_retain();
    swift::AsyncTask::flagAsAndEnqueueOnExecutor(PreallocatedSpace, v43, v76);
  }
  return PreallocatedSpace;
}

unint64_t swift_task_future_wait(uint64_t a1, unsigned int *a2, uint64_t (*a3)(void), _QWORD *a4)
{
  swift_once();
  if (swift_task_future_wait::Override)
    return swift_task_future_wait::Override(a1, a2, a3, a4, swift_task_future_waitImpl);
  else
    return swift_task_future_waitImpl(a1, a2, a3, a4);
}

unint64_t swift_task_future_waitImpl(uint64_t a1, unsigned int *a2, uint64_t (*a3)(void), _QWORD *a4)
{
  uint64_t v4;
  swift::AsyncTask *Current;
  unint64_t result;
  const char *v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  Current = (swift::AsyncTask *)swift_task_getCurrent();
  *((_QWORD *)Current + 7) = task_future_wait_resume_adapter;
  *((_QWORD *)Current + 8) = a4;
  result = swift::AsyncTask::waitFuture((swift::AsyncTask *)a2, Current, a4, (uint64_t)a3, v4, a1);
  if (result == 1)
  {
    v12 = a2[8];
    v13 = 52;
    if ((v12 & 0x1000000) == 0)
      v13 = 48;
    v14 = (uint64_t)&a2[v13] + ((v12 >> 23) & 8);
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)(*(_QWORD *)(v14 + 8) - 8) + 16))(a1, (v14 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v14 + 8) - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v14 + 8) - 8) + 80));
    return a3();
  }
  else if (result == 2)
  {
    swift::swift_Concurrency_fatalError(0, "future reported an error, but wait cannot throw", v10, v11);
  }
  return result;
}

unint64_t swift_task_future_wait_throwing(uint64_t a1, unsigned int *a2, uint64_t (*a3)(void), _QWORD *a4)
{
  swift_once();
  if (swift_task_future_wait_throwing::Override)
    return swift_task_future_wait_throwing::Override(a1, a2, a3, a4, swift_task_future_wait_throwingImpl);
  else
    return swift_task_future_wait_throwingImpl(a1, a2, a3, a4);
}

void swift_continuation_resumeImpl(swift::AsyncTask *a1)
{
  const void *v2;
  os_signpost_id_t v3;
  os_signpost_id_t v4;
  NSObject *v5;
  int v6;
  const void *v7;
  __int16 v8;
  int v9;

  v2 = (const void *)*((_QWORD *)a1 + 8);
  if (_os_trace_lazy_init_completed_4swift())
  {
    if (swift::concurrency::trace::LogsToken != -1)
      dispatch_once_f(&swift::concurrency::trace::LogsToken, 0, (dispatch_function_t)swift::concurrency::trace::setupLogs);
    if (swift::concurrency::trace::TracingEnabled)
    {
      v3 = os_signpost_id_make_with_pointer((os_log_t)swift::concurrency::trace::TaskLog, v2);
      if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v4 = v3;
        v5 = swift::concurrency::trace::TaskLog;
        if (os_signpost_enabled((os_log_t)swift::concurrency::trace::TaskLog))
        {
          v6 = 134218240;
          v7 = v2;
          v8 = 1024;
          v9 = 0;
          _os_signpost_emit_with_name_impl(&dword_18D56B000, v5, OS_SIGNPOST_INTERVAL_END, v4, "task_continuation", "context=%p error=%{BOOL}d", (uint8_t *)&v6, 0x12u);
        }
      }
    }
  }
  resumeTaskAfterContinuation((uint64_t)a1, (uint64_t)v2);
}

void swift_continuation_throwingResume(swift::AsyncTask *a1)
{
  swift_once();
  if (swift_continuation_throwingResume::Override)
    swift_continuation_throwingResume::Override(a1, swift_continuation_throwingResumeImpl);
  else
    swift_continuation_throwingResumeImpl(a1);
}

void swift_continuation_throwingResumeImpl(swift::AsyncTask *a1)
{
  const void *v2;
  os_signpost_id_t v3;
  os_signpost_id_t v4;
  NSObject *v5;
  int v6;
  const void *v7;
  __int16 v8;
  int v9;

  v2 = (const void *)*((_QWORD *)a1 + 8);
  if (_os_trace_lazy_init_completed_4swift())
  {
    if (swift::concurrency::trace::LogsToken != -1)
      dispatch_once_f(&swift::concurrency::trace::LogsToken, 0, (dispatch_function_t)swift::concurrency::trace::setupLogs);
    if (swift::concurrency::trace::TracingEnabled)
    {
      v3 = os_signpost_id_make_with_pointer((os_log_t)swift::concurrency::trace::TaskLog, v2);
      if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v4 = v3;
        v5 = swift::concurrency::trace::TaskLog;
        if (os_signpost_enabled((os_log_t)swift::concurrency::trace::TaskLog))
        {
          v6 = 134218240;
          v7 = v2;
          v8 = 1024;
          v9 = 0;
          _os_signpost_emit_with_name_impl(&dword_18D56B000, v5, OS_SIGNPOST_INTERVAL_END, v4, "task_continuation", "context=%p error=%{BOOL}d", (uint8_t *)&v6, 0x12u);
        }
      }
    }
  }
  resumeTaskAfterContinuation((uint64_t)a1, (uint64_t)v2);
}

void swift_continuation_throwingResumeWithError(uint64_t a1, uint64_t a2)
{
  swift_once();
  if (swift_continuation_throwingResumeWithError::Override)
    swift_continuation_throwingResumeWithError::Override(a1, a2, swift_continuation_throwingResumeWithErrorImpl);
  else
    swift_continuation_throwingResumeWithErrorImpl(a1, a2);
}

void swift_continuation_throwingResumeWithErrorImpl(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  os_signpost_id_t v5;
  os_signpost_id_t v6;
  NSObject *v7;
  int v8;
  _QWORD *v9;
  __int16 v10;
  int v11;

  v4 = *(_QWORD **)(a1 + 64);
  if (_os_trace_lazy_init_completed_4swift())
  {
    if (swift::concurrency::trace::LogsToken != -1)
      dispatch_once_f(&swift::concurrency::trace::LogsToken, 0, (dispatch_function_t)swift::concurrency::trace::setupLogs);
    if (swift::concurrency::trace::TracingEnabled)
    {
      v5 = os_signpost_id_make_with_pointer((os_log_t)swift::concurrency::trace::TaskLog, v4);
      if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v6 = v5;
        v7 = swift::concurrency::trace::TaskLog;
        if (os_signpost_enabled((os_log_t)swift::concurrency::trace::TaskLog))
        {
          v8 = 134218240;
          v9 = v4;
          v10 = 1024;
          v11 = 1;
          _os_signpost_emit_with_name_impl(&dword_18D56B000, v7, OS_SIGNPOST_INTERVAL_END, v6, "task_continuation", "context=%p error=%{BOOL}d", (uint8_t *)&v8, 0x12u);
        }
      }
    }
  }
  v4[4] = a2;
  resumeTaskAfterContinuation(a1, (uint64_t)v4);
}

uint64_t swift_task_addCancellationHandler(uint64_t a1, uint64_t a2)
{
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  char v8;

  swift_once();
  if (swift_task_addCancellationHandler::Override)
    return swift_task_addCancellationHandler::Override(a1, a2, swift_task_addCancellationHandlerImpl);
  v5 = (_QWORD *)swift_task_alloc(32);
  *v5 = 3;
  v5[1] = 0;
  v5[2] = a1;
  v5[3] = a2;
  v8 = 0;
  v7 = &v8;
  v6 = swift::addStatusRecordToSelf((unint64_t)v5, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t *))__swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift_task_addCancellationHandlerImpl(void({swiftcall}*)(void * {swift_context}),void *)::$_0>, (uint64_t)&v7);
  if (v8)
    ((void (*)(uint64_t))v5[2])(v6);
  return (uint64_t)v5;
}

_QWORD *swift_task_addCancellationHandlerImpl(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  char *v7;
  char v8;

  v4 = (_QWORD *)swift_task_alloc(32);
  *v4 = 3;
  v4[1] = 0;
  v4[2] = a1;
  v4[3] = a2;
  v8 = 0;
  v7 = &v8;
  v5 = swift::addStatusRecordToSelf((unint64_t)v4, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t *))__swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift_task_addCancellationHandlerImpl(void({swiftcall}*)(void * {swift_context}),void *)::$_0>, (uint64_t)&v7);
  if (v8)
    ((void (*)(uint64_t))v4[2])(v5);
  return v4;
}

void swift_task_removeCancellationHandler(uint64_t a1)
{
  swift_once();
  if (swift_task_removeCancellationHandler::Override)
  {
    swift_task_removeCancellationHandler::Override(a1, swift_task_removeCancellationHandlerImpl);
  }
  else
  {
    swift::removeStatusRecordFromSelf(a1, 0, 0);
    swift_task_dealloc(a1);
  }
}

void swift_task_removeCancellationHandlerImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift::removeStatusRecordFromSelf(a1, 0, a3);
  swift_task_dealloc(a1);
}

uint64_t swift_task_createNullaryContinuationJob(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t Current;

  swift_once();
  if (swift_task_createNullaryContinuationJob::Override)
    return swift_task_createNullaryContinuationJob::Override(a1, a2, swift_task_createNullaryContinuationJobImpl);
  v5 = operator new();
  Current = swift_task_getCurrent();
  *(_QWORD *)v5 = &unk_1ECE20648;
  *(_QWORD *)(v5 + 8) = 3;
  *(_DWORD *)(v5 + 32) = ((_DWORD)a1 << 8) | 0xC3;
  *(_QWORD *)(v5 + 44) = 0;
  *(_QWORD *)(v5 + 36) = 0;
  *(_DWORD *)(v5 + 52) = 0;
  *(_QWORD *)(v5 + 56) = swift::NullaryContinuationJob::process;
  *(_QWORD *)(v5 + 40) = voucher_copy();
  *(_QWORD *)(v5 + 64) = Current;
  *(_QWORD *)(v5 + 72) = a2;
  return v5;
}

uint64_t swift_task_createNullaryContinuationJobImpl(int a1, swift::AsyncTask *a2)
{
  uint64_t v4;
  uint64_t Current;

  v4 = operator new();
  Current = swift_task_getCurrent();
  *(_QWORD *)v4 = &unk_1ECE20648;
  *(_QWORD *)(v4 + 8) = 3;
  *(_DWORD *)(v4 + 32) = (a1 << 8) | 0xC3;
  *(_QWORD *)(v4 + 44) = 0;
  *(_QWORD *)(v4 + 36) = 0;
  *(_DWORD *)(v4 + 52) = 0;
  *(_QWORD *)(v4 + 56) = swift::NullaryContinuationJob::process;
  *(_QWORD *)(v4 + 40) = voucher_copy();
  *(_QWORD *)(v4 + 64) = Current;
  *(_QWORD *)(v4 + 72) = a2;
  return v4;
}

void swift_task_asyncMainDrainQueue()
{
  swift_once();
  if (!swift_task_asyncMainDrainQueue_hook)
  {
    if (swift_task_asyncMainDrainQueue::Override)
      swift_task_asyncMainDrainQueue::Override(swift_task_asyncMainDrainQueueImpl);
    swift_task_asyncMainDrainQueueImpl();
  }
  swift_task_asyncMainDrainQueue_hook(swift_task_asyncMainDrainQueueImpl, swift_task_asyncMainDrainQueue::Override);
  abort();
}

void swift_task_asyncMainDrainQueueImpl(void)
{
  void (*v0)(void);

  v0 = (void (*)(void))dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFRunLoopRun");
  if (!v0)
    dispatch_main();
  v0();
  exit(0);
}

unsigned __int128 *swift_task_suspend()
{
  swift_once();
  if (swift_task_suspend::Override)
    return (unsigned __int128 *)swift_task_suspend::Override(swift_task_suspendImpl);
  else
    return swift_task_suspendImpl();
}

unsigned __int128 *swift_task_suspendImpl(void)
{
  unsigned __int128 *Current;
  unint64_t v1;
  unsigned __int128 *v2;
  unsigned __int128 v3;
  swift::AsyncTask *v4;
  swift *v5;
  unint64_t *v7;
  unsigned __int128 v8;
  unint64_t v9;

  Current = (unsigned __int128 *)swift_task_getCurrent();
  v1 = swift::_swift_task_alloc_specific((swift *)Current, (swift::AsyncTask *)0x30);
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)v1 = 0;
  *(_DWORD *)(v1 + 32) = 2;
  *(_QWORD *)(v1 + 40) = Current;
  *((_QWORD *)Current + 20) = v1;
  v2 = Current + 6;
  v9 = v1;
  do
    v3 = __ldxp(v2);
  while (__stxp(v3, v2));
  v8 = v3;
  v7 = &v9;
  swift::addStatusRecord((swift::concurrency::trace *)Current, v1, (unsigned int *)&v8, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t *))__swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift::AsyncTask::flagAsSuspended(swift::TaskDependencyStatusRecord *)::{lambda(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)#1}>, (uint64_t)&v7);
  if ((v8 & 0x400) != 0)
    dispatch_lock_override_end();
  swift_task_exitThreadLocalContext();
  v5 = (swift *)swift::restoreTaskVoucher((swift *)Current, v4);
  swift::_swift_task_clearCurrent(v5);
  return Current;
}

void swift_task_enqueueTaskOnExecutor(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  swift_once();
  if (swift_task_enqueueTaskOnExecutor::Override)
    swift_task_enqueueTaskOnExecutor::Override(a1, a2, a3, &swift_task_enqueueTaskOnExecutorImpl);
  else
    swift::AsyncTask::flagAsAndEnqueueOnExecutor(a1, a2, a3);
}

swift *swift_continuation_init(_QWORD *a1, unint64_t a2)
{
  swift_once();
  if (swift_continuation_init::Override)
    return (swift *)swift_continuation_init::Override(a1, a2, swift_continuation_initImpl);
  else
    return swift_continuation_initImpl(a1, a2);
}

swift *swift_continuation_initImpl(_QWORD *a1, unint64_t a2)
{
  char v4;
  const char *v5;
  char *v6;
  char v7;
  swift *Current;
  swift *v9;
  unint64_t v10;
  unsigned __int128 *v11;
  unsigned __int128 v12;
  swift::AsyncTask *v13;
  swift *v14;
  os_signpost_id_t v15;
  os_signpost_id_t v16;
  NSObject *v17;
  unint64_t v18;
  unint64_t *v20;
  unint64_t v21;
  uint8_t buf[32];

  *(_QWORD *)buf = a1;
  v4 = continuationChecking::CurrentState;
  if (!continuationChecking::CurrentState)
  {
    if (concurrencyValidateUncheckedContinuations())
      v4 = 1;
    else
      v4 = 2;
    continuationChecking::CurrentState = v4;
  }
  if (v4 == 1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&continuationChecking::ActiveContinuationsLock);
    if (qword_1EE06ED00 != -1)
      dispatch_once_f(&qword_1EE06ED00, continuationChecking::ActiveContinuations, (dispatch_function_t)swift::Lazy<std::unordered_set<swift::ContinuationAsyncContext *>>::defaultInitCallback);
    std::__hash_table<swift::ContinuationAsyncContext *,std::hash<swift::ContinuationAsyncContext *>,std::equal_to<swift::ContinuationAsyncContext *>,std::allocator<swift::ContinuationAsyncContext *>>::__emplace_unique_key_args<swift::ContinuationAsyncContext *,swift::ContinuationAsyncContext * const&>((uint64_t)continuationChecking::ActiveContinuations, buf, buf);
    if (!v7)
      swift::swift_Concurrency_fatalError(0, "Initializing continuation context %p that was already initialized.\n", v5, v6, *(_QWORD *)buf);
    os_unfair_lock_unlock((os_unfair_lock_t)&continuationChecking::ActiveContinuationsLock);
  }
  a1[2] = a2 & 1 | (2 * ((a2 >> 3) & 1));
  a1[4] = 0;
  if ((a2 & 2) == 0)
  {
    a1[6] = 0;
    a1[7] = 0;
  }
  a1[3] = (a2 >> 2) & 1;
  Current = (swift *)swift_task_getCurrent();
  v9 = Current;
  if ((a2 & 4) != 0)
  {
    v10 = swift::_swift_task_alloc_specific(Current, (swift::AsyncTask *)0x30);
    *(_QWORD *)v10 = 0;
    *(_QWORD *)(v10 + 8) = 0;
    *(_DWORD *)(v10 + 32) = 2;
    *(_QWORD *)(v10 + 40) = v9;
    *(_QWORD *)(v10 + 16) = a1;
    *((_QWORD *)v9 + 20) = v10;
    v11 = (unsigned __int128 *)((char *)v9 + 96);
    v21 = v10;
    do
      v12 = __ldxp(v11);
    while (__stxp(v12, v11));
    *(_OWORD *)buf = v12;
    v20 = &v21;
    swift::addStatusRecord(v9, v10, (unsigned int *)buf, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t *))__swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift::AsyncTask::flagAsSuspended(swift::TaskDependencyStatusRecord *)::{lambda(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)#1}>, (uint64_t)&v20);
    if ((*(_WORD *)buf & 0x400) != 0)
      dispatch_lock_override_end();
    swift_task_exitThreadLocalContext();
    v14 = (swift *)swift::restoreTaskVoucher(v9, v13);
    swift::_swift_task_clearCurrent(v14);
  }
  *((_QWORD *)v9 + 8) = a1;
  *((_QWORD *)v9 + 7) = a1[1];
  if (_os_trace_lazy_init_completed_4swift())
  {
    if (swift::concurrency::trace::LogsToken != -1)
      dispatch_once_f(&swift::concurrency::trace::LogsToken, 0, (dispatch_function_t)swift::concurrency::trace::setupLogs);
    if (swift::concurrency::trace::TracingEnabled)
    {
      v15 = os_signpost_id_make_with_pointer((os_log_t)swift::concurrency::trace::TaskLog, a1);
      if (v15 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v16 = v15;
        v17 = swift::concurrency::trace::TaskLog;
        if (os_signpost_enabled((os_log_t)swift::concurrency::trace::TaskLog))
        {
          v18 = (unint64_t)*((unsigned int *)v9 + 9) << *((_DWORD *)v9 + 36);
          *(_DWORD *)buf = 134218240;
          *(_QWORD *)&buf[4] = v18;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = a1;
          _os_signpost_emit_with_name_impl(&dword_18D56B000, v17, OS_SIGNPOST_INTERVAL_BEGIN, v16, "task_continuation", "task=%llx context=%p", buf, 0x16u);
        }
      }
    }
  }
  return v9;
}

uint64_t swift_continuation_await(uint64_t a1)
{
  swift_once();
  if (swift_continuation_await::Override)
    return swift_continuation_await::Override(a1, swift_continuation_awaitImpl);
  else
    return swift_continuation_awaitImpl(a1);
}

uint64_t swift_continuation_awaitImpl(uint64_t a1)
{
  os_signpost_id_t v2;
  os_signpost_id_t v3;
  NSObject *v4;
  unint64_t *v5;
  unint64_t v6;
  unsigned __int128 *Current;
  unint64_t v8;
  unsigned __int128 *v9;
  unsigned __int128 v10;
  swift::AsyncTask *v11;
  swift *v12;
  unint64_t v13;
  uint64_t (*v15)(void);
  unint64_t *v16;
  uint8_t buf[24];
  unint64_t v18;

  if (_os_trace_lazy_init_completed_4swift())
  {
    if (swift::concurrency::trace::LogsToken != -1)
      dispatch_once_f(&swift::concurrency::trace::LogsToken, 0, (dispatch_function_t)swift::concurrency::trace::setupLogs);
    if (swift::concurrency::trace::TracingEnabled)
    {
      v2 = os_signpost_id_make_with_pointer((os_log_t)swift::concurrency::trace::TaskLog, (const void *)a1);
      if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v3 = v2;
        v4 = swift::concurrency::trace::TaskLog;
        if (os_signpost_enabled((os_log_t)swift::concurrency::trace::TaskLog))
        {
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)&buf[4] = a1;
          _os_signpost_emit_with_name_impl(&dword_18D56B000, v4, OS_SIGNPOST_EVENT, v3, "task_continuation_await", "context=%p", buf, 0xCu);
        }
      }
    }
  }
  v5 = (unint64_t *)(a1 + 24);
  v6 = atomic_load((unint64_t *)(a1 + 24));
  if (v6 != 2)
  {
    Current = (unsigned __int128 *)swift_task_getCurrent();
    v8 = swift::_swift_task_alloc_specific((swift *)Current, (swift::AsyncTask *)0x30);
    *(_QWORD *)v8 = 0;
    *(_QWORD *)(v8 + 8) = 0;
    *(_DWORD *)(v8 + 32) = 2;
    *(_QWORD *)(v8 + 40) = Current;
    *(_QWORD *)(v8 + 16) = a1;
    *((_QWORD *)Current + 20) = v8;
    v9 = Current + 6;
    v18 = v8;
    do
      v10 = __ldxp(v9);
    while (__stxp(v10, v9));
    *(_OWORD *)buf = v10;
    v16 = &v18;
    swift::addStatusRecord((swift::concurrency::trace *)Current, v8, (unsigned int *)buf, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t *))__swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift::AsyncTask::flagAsSuspended(swift::TaskDependencyStatusRecord *)::{lambda(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)#1}>, (uint64_t)&v16);
    if ((*(_WORD *)buf & 0x400) != 0)
      dispatch_lock_override_end();
    swift_task_exitThreadLocalContext();
    v12 = (swift *)swift::restoreTaskVoucher((swift *)Current, v11);
    while (1)
    {
      v13 = __ldaxr(v5);
      if (v13 != v6)
        break;
      if (!__stlxr(1uLL, v5))
        return swift::_swift_task_clearCurrent(v12);
    }
    __clrex();
    swift::AsyncTask::flagAsRunning((swift::AsyncTask *)Current);
  }
  v15 = *(uint64_t (**)(void))(a1 + 8);
  if ((*(_BYTE *)(a1 + 16) & 2) != 0)
    return swift_task_switch(v15, *(unsigned __int8 **)(a1 + 48), *(_QWORD *)(a1 + 56));
  else
    return v15();
}

uint64_t swift_task_startOnMainActor(swift::AsyncTask *a1)
{
  swift_once();
  if (swift_task_startOnMainActor::Override)
    return swift_task_startOnMainActor::Override(a1, swift_task_startOnMainActorImpl);
  else
    return swift_task_startOnMainActorImpl(a1);
}

uint64_t swift_task_startOnMainActorImpl(swift::AsyncTask *a1)
{
  uint64_t v2;
  _anonymous_namespace_::DefaultActorImpl *MainExecutor;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  char *v7;

  v2 = swift::_swift_task_clearCurrent(a1);
  MainExecutor = (_anonymous_namespace_::DefaultActorImpl *)swift_task_getMainExecutor();
  v5 = v4;
  if ((swift_task_isCurrentExecutor((uint64_t)MainExecutor, v4) & 1) == 0)
    swift::swift_Concurrency_fatalError(0, "Not on the main executor", v6, v7);
  swift_retain();
  swift_job_run(a1, MainExecutor, v5);
  return swift::_swift_task_setCurrent(v2);
}

uint64_t __swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift::AsyncTask::flagAsSuspended(swift::TaskDependencyStatusRecord *)::{lambda(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)#1}>(uint64_t **a1, uint64_t a2, uint64_t a3, int *a4)
{
  int v4;

  v4 = *a4;
  *(_QWORD *)a4 = *a4 & 0xFFFFBBFF | 0x4000 | ((unint64_t)(a4[1] & 3) << 32);
  swift::TaskDependencyStatusRecord::performEscalationAction(**a1, v4);
  return 1;
}

uint64_t swift::StackAllocator<984ul,&swift::TaskAllocatorSlabMetadata>::~StackAllocator(uint64_t a1, uint64_t a2, const char *a3, char *a4)
{
  int v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;

  if (*(_QWORD *)a1)
    swift::swift_Concurrency_fatalError(0, "not all allocations are deallocated", a3, a4);
  v5 = *(_DWORD *)(a1 + 16);
  if ((v5 & 1) != 0)
  {
    memset_s(*(void **)(a1 + 8), 8uLL, 0, 8uLL);
    v5 = *(_DWORD *)(a1 + 16);
  }
  v6 = (_QWORD *)(a1 + 8);
  if ((v5 & 1) != 0)
    v6 = (_QWORD *)(*v6 + 8);
  v7 = (_QWORD *)*v6;
  *v6 = 0;
  if (v7)
  {
    do
    {
      v8 = (_QWORD *)v7[1];
      memset_s(v7, 8uLL, 0, 8uLL);
      free(v7);
      *(_DWORD *)(a1 + 16) -= 2;
      v7 = v8;
    }
    while (v8);
  }
  return a1;
}

void *swift_task_create_common::$_0::__invoke(swift_task_create_common::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_task_create_common(this);
  swift_task_create_common::Override = result;
  return result;
}

void completeInlineTask(swift *a1)
{
  uint64_t v1;
  swift::AsyncTask **v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (swift::AsyncTask **)swift::_swift_task_clearCurrent(a1);
  completeTaskImpl(v2, v1, 0, v3, v4, v5, v6);
}

void completeTask(swift *a1)
{
  const char *v1;
  uint64_t v2;
  swift::AsyncTask **v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = (swift::AsyncTask **)swift::_swift_task_clearCurrent(a1);
  completeTaskImpl(v3, v2, v1, v4, v5, v6, v7);
}

uint64_t completeTaskWithClosure()
{
  const char *v0;
  uint64_t v1;
  swift *v2;
  swift::AsyncTask **v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (swift *)swift_release();
  v3 = (swift::AsyncTask **)swift::_swift_task_clearCurrent(v2);
  completeTaskImpl(v3, v1, v0, v4, v5, v6, v7);
  return swift_release();
}

uint64_t completeTaskAndRelease(swift *a1)
{
  const char *v1;
  uint64_t v2;
  swift::AsyncTask **v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = (swift::AsyncTask **)swift::_swift_task_clearCurrent(a1);
  completeTaskImpl(v3, v2, v1, v4, v5, v6, v7);
  return swift_release();
}

void swift::concurrency::trace::task_create(uint64_t (**this)(), unint64_t a2, swift::AsyncTask *a3, swift::TaskGroup *a4, swift::AsyncLet *a5, int a6, int a7, int a8, BOOL a9, BOOL a10)
{
  int v13;
  os_signpost_id_t v18;
  os_signpost_id_t v19;
  NSObject *v20;
  uint64_t (*v21)();
  uint64_t (*v22)();
  unint64_t v23;
  int v24;
  unint64_t v25;
  __int16 v26;
  uint64_t (*v27)();
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  _BOOL4 v37;
  __int16 v38;
  unint64_t v39;
  __int16 v40;
  swift::AsyncTask *v41;
  __int16 v42;
  swift::TaskGroup *v43;

  v13 = (int)a5;
  if (_os_trace_lazy_init_completed_4swift())
  {
    if (swift::concurrency::trace::LogsToken != -1)
      dispatch_once_f(&swift::concurrency::trace::LogsToken, 0, (dispatch_function_t)swift::concurrency::trace::setupLogs);
    if (swift::concurrency::trace::TracingEnabled)
    {
      v18 = os_signpost_id_make_with_pointer((os_log_t)swift::concurrency::trace::TaskLog, this);
      v19 = v18;
      if (a2)
        a2 = (unint64_t)*(unsigned int *)(a2 + 36) << *(_DWORD *)(a2 + 144);
      if (v18 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v20 = swift::concurrency::trace::TaskLog;
        if (os_signpost_enabled((os_log_t)swift::concurrency::trace::TaskLog))
        {
          v21 = this[7];
          if (v21 == non_future_adapter || (v22 = this[7], v21 == future_adapter))
            v22 = (uint64_t (*)())*((_QWORD *)this[8] - 3);
          v23 = (unint64_t)*((unsigned int *)this + 9) << *((_DWORD *)this + 36);
          if (v21 == task_wait_throwing_resume_adapter || v21 == task_future_wait_resume_adapter)
            v22 = (uint64_t (*)())*((_QWORD *)this[8] + 1);
          v24 = 134220288;
          v25 = v23;
          v26 = 2048;
          v27 = v22;
          v28 = 1024;
          v29 = v13;
          v30 = 1024;
          v31 = a6;
          v32 = 1024;
          v33 = a7;
          v34 = 1024;
          v35 = a8;
          v36 = 1024;
          v37 = a9;
          v38 = 2048;
          v39 = a2;
          v40 = 2048;
          v41 = a3;
          v42 = 2048;
          v43 = a4;
          _os_signpost_emit_with_name_impl(&dword_18D56B000, v20, OS_SIGNPOST_INTERVAL_BEGIN, v19, "task_lifetime", "task=%llx resumefn=%p jobPriority=%u isChildTask=%{BOOL}d, isFuture=%{BOOL}d isGroupChildTask=%{BOOL}d isAsyncLetTask=%{BOOL}d parent=%llx group=%p asyncLet=%p", (uint8_t *)&v24, 0x52u);
        }
      }
    }
  }
}

void completeTaskImpl(swift::AsyncTask **this, uint64_t a2, const char *a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned __int128 *v9;
  __int16 v10;
  unsigned __int128 v11;
  uint64_t v12;
  unint64_t v13;
  unsigned __int128 v14;
  int v15;
  BOOL v17;
  unsigned __int128 v18;
  int v19;

  *(_QWORD *)(a2 - 8) = a3;
  if ((*((_BYTE *)this + 35) & 0x20) != 0)
    swift::AsyncTask::dropInitialTaskExecutorPreferenceRecord((swift::AsyncTask *)this, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7);
  v9 = (unsigned __int128 *)(this + 12);
  do
  {
    v11 = __ldxp(v9);
    v10 = v11;
  }
  while (__stxp(v11, v9));
  do
  {
    while (1)
    {
      v14 = __ldxp(v9);
      v13 = *((_QWORD *)&v14 + 1);
      v12 = v14;
      v15 = (_QWORD)v14 != (_QWORD)v11;
      if (*((_QWORD *)&v14 + 1) != *((_QWORD *)&v11 + 1))
        ++v15;
      if (!v15)
        break;
      if (!__stxp(v14, v9))
        goto LABEL_11;
    }
  }
  while (__stxp(__PAIR128__(*((unint64_t *)&v11 + 1), v11 & 0x300000000 | v11 & 0xFFFFCBFF | 0x2000), v9));
LABEL_11:
  if ((_QWORD)v14 != (_QWORD)v11 || *((_QWORD *)&v14 + 1) != *((_QWORD *)&v11 + 1))
  {
    while (1)
    {
      while (1)
      {
        v18 = __ldxp(v9);
        v19 = (_QWORD)v18 != v12;
        if (*((_QWORD *)&v18 + 1) != v13)
          ++v19;
        if (v19)
          break;
        if (!__stxp(__PAIR128__(v13, v12 & 0x300000000 | (unint64_t)(v12 & 0xFFFFCBFF | 0x2000)), v9))
          goto LABEL_20;
      }
      if (!__stxp(v18, v9))
      {
LABEL_20:
        v17 = (_QWORD)v18 == v12 && *((_QWORD *)&v18 + 1) == v13;
        v10 = v12;
        v13 = *((_QWORD *)&v18 + 1);
        v12 = v18;
        if (v17)
          break;
      }
    }
  }
  if ((v10 & 0x400) != 0)
    dispatch_lock_override_end();
  swift::TaskLocal::Storage::destroy(this + 17, (swift::AsyncTask *)this, a3, a4);
  if ((*((_BYTE *)this + 35) & 2) != 0)
    swift::AsyncTask::completeFuture((uint64_t)this, a2);
}

void *swift_task_future_wait::$_0::__invoke(swift_task_future_wait::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_task_future_wait(this);
  swift_task_future_wait::Override = result;
  return result;
}

void *swift_task_future_wait_throwing::$_0::__invoke(swift_task_future_wait_throwing::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_task_future_wait_throwing(this);
  swift_task_future_wait_throwing::Override = result;
  return result;
}

void *swift_continuation_resume::$_0::__invoke(swift_continuation_resume::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_continuation_resume(this);
  swift_continuation_resume::Override = result;
  return result;
}

void resumeTaskAfterContinuation(uint64_t a1, uint64_t a2)
{
  char v4;
  const char *v5;
  char *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v10;

  v10 = a2;
  v4 = continuationChecking::CurrentState;
  if (!continuationChecking::CurrentState)
  {
    if (concurrencyValidateUncheckedContinuations())
      v4 = 1;
    else
      v4 = 2;
    continuationChecking::CurrentState = v4;
  }
  if (v4 == 1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&continuationChecking::ActiveContinuationsLock);
    if (qword_1EE06ED00 != -1)
      dispatch_once_f(&qword_1EE06ED00, continuationChecking::ActiveContinuations, (dispatch_function_t)swift::Lazy<std::unordered_set<swift::ContinuationAsyncContext *>>::defaultInitCallback);
    if (!std::__hash_table<swift::ContinuationAsyncContext *,std::hash<swift::ContinuationAsyncContext *>,std::equal_to<swift::ContinuationAsyncContext *>,std::allocator<swift::ContinuationAsyncContext *>>::__erase_unique<swift::ContinuationAsyncContext *>(continuationChecking::ActiveContinuations, &v10))swift::swift_Concurrency_fatalError(0, "Resuming continuation context %p that was not awaited (may have already been resumed).\n", v5, v6, v10);
    os_unfair_lock_unlock((os_unfair_lock_t)&continuationChecking::ActiveContinuationsLock);
  }
  v7 = (unint64_t *)(a2 + 24);
  v8 = atomic_load((unint64_t *)(a2 + 24));
  if (*MEMORY[0x1E0DEEA68])
    ((void (*)(uint64_t))*MEMORY[0x1E0DEEA68])(a1);
  if (!v8)
  {
    while (!__ldaxr(v7))
    {
      if (!__stlxr(2uLL, v7))
        return;
    }
    __clrex();
  }
  swift::AsyncTask::flagAsAndEnqueueOnExecutor(a1, *(unsigned __int8 **)(a2 + 48), *(_QWORD *)(a2 + 56));
}

double swift::Lazy<std::unordered_set<swift::ContinuationAsyncContext *>>::defaultInitCallback(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  return result;
}

uint64_t std::__hash_table<swift::ContinuationAsyncContext *,std::hash<swift::ContinuationAsyncContext *>,std::equal_to<swift::ContinuationAsyncContext *>,std::allocator<swift::ContinuationAsyncContext *>>::__erase_unique<swift::ContinuationAsyncContext *>(_QWORD *a1, uint64_t *a2)
{
  int8x8_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  void *v13;
  void *__p;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = HIDWORD(*a2);
  v5 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v4);
  v6 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) ^ ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) >> 47));
  v7 = (uint8x8_t)vcnt_s8(v2);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = v6;
    if (v6 >= *(_QWORD *)&v2)
      v8 = v6 % *(_QWORD *)&v2;
  }
  else
  {
    v8 = v6 & (*(_QWORD *)&v2 - 1);
  }
  v9 = *(_QWORD ***)(*a1 + 8 * v8);
  if (!v9)
    return 0;
  v10 = *v9;
  if (!*v9)
    return 0;
  while (1)
  {
    v11 = v10[1];
    if (v11 == v6)
      break;
    if (v7.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v2)
        v11 %= *(_QWORD *)&v2;
    }
    else
    {
      v11 &= *(_QWORD *)&v2 - 1;
    }
    if (v11 != v8)
      return 0;
LABEL_10:
    v10 = (_QWORD *)*v10;
    if (!v10)
      return 0;
  }
  if (v10[2] != v3)
    goto LABEL_10;
  std::__hash_table<swift::ContinuationAsyncContext *,std::hash<swift::ContinuationAsyncContext *>,std::equal_to<swift::ContinuationAsyncContext *>,std::allocator<swift::ContinuationAsyncContext *>>::remove(a1, v10, (uint64_t)&__p);
  v13 = __p;
  __p = 0;
  if (v13)
    operator delete(v13);
  return 1;
}

_QWORD *std::__hash_table<swift::ContinuationAsyncContext *,std::hash<swift::ContinuationAsyncContext *>,std::equal_to<swift::ContinuationAsyncContext *>,std::allocator<swift::ContinuationAsyncContext *>>::remove@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void *swift_continuation_throwingResume::$_0::__invoke(swift_continuation_throwingResume::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_continuation_throwingResume(this);
  swift_continuation_throwingResume::Override = result;
  return result;
}

void *swift_continuation_throwingResumeWithError::$_0::__invoke(swift_continuation_throwingResumeWithError::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_continuation_throwingResumeWithError(this);
  swift_continuation_throwingResumeWithError::Override = result;
  return result;
}

void *swift_task_addCancellationHandler::$_0::__invoke(swift_task_addCancellationHandler::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_task_addCancellationHandler(this);
  swift_task_addCancellationHandler::Override = result;
  return result;
}

uint64_t __swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift_task_addCancellationHandlerImpl(void({swiftcall}*)(void * {swift_context}),void *)::$_0>(_BYTE **a1, __int16 a2)
{
  if ((a2 & 0x100) != 0)
    **a1 = 1;
  return 1;
}

void *swift_task_removeCancellationHandler::$_0::__invoke(swift_task_removeCancellationHandler::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_task_removeCancellationHandler(this);
  swift_task_removeCancellationHandler::Override = result;
  return result;
}

void *swift_task_createNullaryContinuationJob::$_0::__invoke(swift_task_createNullaryContinuationJob::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_task_createNullaryContinuationJob(this);
  swift_task_createNullaryContinuationJob::Override = result;
  return result;
}

void *swift_task_asyncMainDrainQueue::$_0::__invoke(swift_task_asyncMainDrainQueue::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_task_asyncMainDrainQueue(this);
  swift_task_asyncMainDrainQueue::Override = result;
  return result;
}

void *swift_task_suspend::$_0::__invoke(swift_task_suspend::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_task_suspend(this);
  swift_task_suspend::Override = result;
  return result;
}

void *swift_task_enqueueTaskOnExecutor::$_0::__invoke(swift_task_enqueueTaskOnExecutor::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_task_enqueueTaskOnExecutor(this);
  swift_task_enqueueTaskOnExecutor::Override = result;
  return result;
}

void *swift_continuation_init::$_0::__invoke(swift_continuation_init::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_continuation_init(this);
  swift_continuation_init::Override = result;
  return result;
}

_QWORD *std::__hash_table<swift::ContinuationAsyncContext *,std::hash<swift::ContinuationAsyncContext *>,std::equal_to<swift::ContinuationAsyncContext *>,std::allocator<swift::ContinuationAsyncContext *>>::__emplace_unique_key_args<swift::ContinuationAsyncContext *,swift::ContinuationAsyncContext * const&>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v6 = HIDWORD(*a2);
  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v6);
  v8 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v8;
  i[2] = *a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v9)
      goto LABEL_41;
    if (prime < v9)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < v9)
LABEL_41:
        std::__hash_table<swift::ContinuationAsyncContext *,std::hash<swift::ContinuationAsyncContext *>,std::equal_to<swift::ContinuationAsyncContext *>,std::allocator<swift::ContinuationAsyncContext *>>::__do_rehash<true>(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *i = *v24;
LABEL_55:
    *v24 = i;
    goto LABEL_56;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v23 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v25 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9)
        v25 %= v9;
    }
    else
    {
      v25 &= v9 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_55;
  }
LABEL_56:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void std::__throw_bad_array_new_length[abi:nn180100]()
{
  abort();
}

void std::__hash_table<swift::ContinuationAsyncContext *,std::hash<swift::ContinuationAsyncContext *>,std::equal_to<swift::ContinuationAsyncContext *>,std::allocator<swift::ContinuationAsyncContext *>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v13 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v13 >= a2)
              v13 %= a2;
          }
          else
          {
            v13 &= a2 - 1;
          }
          if (v13 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
              goto LABEL_19;
            }
            *v7 = *v11;
            v12 = 8 * v13;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + v12);
            **(_QWORD **)(*(_QWORD *)a1 + v12) = v11;
            v11 = v7;
          }
          v13 = v8;
LABEL_19:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v13;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void *swift_continuation_await::$_0::__invoke(swift_continuation_await::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_continuation_await(this);
  swift_continuation_await::Override = result;
  return result;
}

void *swift_task_startOnMainActor::$_0::__invoke(swift_task_startOnMainActor::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_task_startOnMainActor(this);
  swift_task_startOnMainActor::Override = result;
  return result;
}

uint64_t swift_task_alloc(uint64_t a1)
{
  uint64_t Current;
  uint64_t *v3;
  unsigned __int8 v4;
  unint64_t v5;
  uint64_t *SlabForAllocation;
  uint64_t v7;
  char *v8;
  _QWORD *v10;

  Current = swift_task_getCurrent();
  if (Current)
  {
    v3 = (uint64_t *)(Current + 112);
  }
  else
  {
    if ((v4 & 1) != 0)
    {
      v3 = &allocator(swift::AsyncTask *)::global;
    }
    else
    {
      v3 = &allocator(swift::AsyncTask *)::global;
      {
        v10 = (_QWORD *)((unint64_t)&algn_1EE06ED28[7] & 0xFFFFFFFFFFFFFFF0);
        allocator(swift::AsyncTask *)::global = 0;
        *v10 = &swift::TaskAllocatorSlabMetadata;
        v10[1] = 0;
        v10[2] = &allocator(swift::AsyncTask *)::global
               - ((unint64_t)&algn_1EE06ED28[7] & 0xFFFFFFFFFFFFFFF0)
               + 504;
        qword_1EE06ED10 = (unint64_t)&algn_1EE06ED28[7] & 0xFFFFFFFFFFFFFFF0;
        dword_1EE06ED18 = 1;
      }
    }
  }
  v5 = (a1 + 15) & 0xFFFFFFFFFFFFFFF0;
  SlabForAllocation = swift::StackAllocator<984ul,&swift::TaskAllocatorSlabMetadata>::getSlabForAllocation(v3, v5);
  v7 = *((unsigned int *)SlabForAllocation + 5);
  v8 = (char *)SlabForAllocation + v7;
  *((_QWORD *)v8 + 4) = *v3;
  *((_QWORD *)v8 + 5) = SlabForAllocation;
  *((_DWORD *)SlabForAllocation + 5) = v5 + v7 + 16;
  *v3 = (uint64_t)SlabForAllocation + v7 + 32;
  return (uint64_t)SlabForAllocation + v7 + 48;
}

uint64_t swift::_swift_task_alloc_specific(swift *this, swift::AsyncTask *a2)
{
  uint64_t *v2;
  unsigned __int8 v3;
  unsigned int v4;
  uint64_t *SlabForAllocation;
  uint64_t v6;
  char *v7;
  swift::AsyncTask *v9;
  _QWORD *v10;

  if (this)
  {
    v2 = (uint64_t *)((char *)this + 112);
  }
  else
  {
    if ((v3 & 1) != 0)
    {
      v2 = &allocator(swift::AsyncTask *)::global;
    }
    else
    {
      v9 = a2;
      v2 = &allocator(swift::AsyncTask *)::global;
      {
        v10 = (_QWORD *)((unint64_t)&algn_1EE06ED28[7] & 0xFFFFFFFFFFFFFFF0);
        allocator(swift::AsyncTask *)::global = 0;
        *v10 = &swift::TaskAllocatorSlabMetadata;
        v10[1] = 0;
        v10[2] = &allocator(swift::AsyncTask *)::global
               - ((unint64_t)&algn_1EE06ED28[7] & 0xFFFFFFFFFFFFFFF0)
               + 504;
        qword_1EE06ED10 = (unint64_t)&algn_1EE06ED28[7] & 0xFFFFFFFFFFFFFFF0;
        dword_1EE06ED18 = 1;
      }
      a2 = v9;
    }
  }
  v4 = ((_DWORD)a2 + 15) & 0xFFFFFFF0;
  SlabForAllocation = swift::StackAllocator<984ul,&swift::TaskAllocatorSlabMetadata>::getSlabForAllocation(v2, ((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *((unsigned int *)SlabForAllocation + 5);
  v7 = (char *)SlabForAllocation + v6;
  *((_QWORD *)v7 + 4) = *v2;
  *((_QWORD *)v7 + 5) = SlabForAllocation;
  *((_DWORD *)SlabForAllocation + 5) = v4 + v6 + 16;
  *v2 = (uint64_t)SlabForAllocation + v6 + 32;
  return (uint64_t)SlabForAllocation + v6 + 48;
}

void swift_task_dealloc(uint64_t a1)
{
  uint64_t Current;
  const char *v3;
  char *v4;
  uint64_t *v5;
  unsigned __int8 v6;
  uint64_t *v7;
  BOOL v8;
  uint64_t v9;
  _QWORD *v10;

  Current = swift_task_getCurrent();
  if (Current)
  {
    v5 = (uint64_t *)(Current + 112);
  }
  else
  {
    if ((v6 & 1) != 0)
    {
      v5 = &allocator(swift::AsyncTask *)::global;
    }
    else
    {
      v5 = &allocator(swift::AsyncTask *)::global;
      {
        v10 = (_QWORD *)((unint64_t)&algn_1EE06ED28[7] & 0xFFFFFFFFFFFFFFF0);
        allocator(swift::AsyncTask *)::global = 0;
        *v10 = &swift::TaskAllocatorSlabMetadata;
        v10[1] = 0;
        v10[2] = &allocator(swift::AsyncTask *)::global
               - ((unint64_t)&algn_1EE06ED28[7] & 0xFFFFFFFFFFFFFFF0)
               + 504;
        qword_1EE06ED10 = (unint64_t)&algn_1EE06ED28[7] & 0xFFFFFFFFFFFFFFF0;
        dword_1EE06ED18 = 1;
      }
    }
  }
  v7 = (uint64_t *)*v5;
  if (*v5)
    v8 = *v5 + 16 == a1;
  else
    v8 = 0;
  if (!v8)
    swift::swift_Concurrency_fatalError(0, "freed pointer was not the last allocation", v3, v4);
  v9 = *v7;
  *(_DWORD *)(v7[1] + 20) = (_DWORD)v7 - v7[1] - 32;
  *v5 = v9;
}

void swift::_swift_task_dealloc_specific(swift *this, swift::AsyncTask *a2, const char *a3, char *a4)
{
  uint64_t *v4;
  unsigned __int8 v5;
  uint64_t *v6;
  BOOL v7;
  uint64_t v8;
  _QWORD *v9;
  swift::AsyncTask *v10;

  if (this)
  {
    v4 = (uint64_t *)((char *)this + 112);
  }
  else
  {
    if ((v5 & 1) != 0)
    {
      v4 = &allocator(swift::AsyncTask *)::global;
    }
    else
    {
      v10 = a2;
      v4 = &allocator(swift::AsyncTask *)::global;
      {
        v9 = (_QWORD *)((unint64_t)&algn_1EE06ED28[7] & 0xFFFFFFFFFFFFFFF0);
        allocator(swift::AsyncTask *)::global = 0;
        *v9 = &swift::TaskAllocatorSlabMetadata;
        v9[1] = 0;
        v9[2] = &allocator(swift::AsyncTask *)::global
              - ((unint64_t)&algn_1EE06ED28[7] & 0xFFFFFFFFFFFFFFF0)
              + 504;
        qword_1EE06ED10 = (unint64_t)&algn_1EE06ED28[7] & 0xFFFFFFFFFFFFFFF0;
        dword_1EE06ED18 = 1;
      }
      a2 = v10;
    }
  }
  v6 = (uint64_t *)*v4;
  if (*v4)
    v7 = *v4 + 16 == (_QWORD)a2;
  else
    v7 = 0;
  if (!v7)
    swift::swift_Concurrency_fatalError(0, "freed pointer was not the last allocation", a3, a4);
  v8 = *v6;
  *(_DWORD *)(v6[1] + 20) = (_DWORD)v6 - v6[1] - 32;
  *v4 = v8;
}

uint64_t *swift::StackAllocator<984ul,&swift::TaskAllocatorSlabMetadata>::getSlabForAllocation(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;

  v2 = a2;
  v4 = (uint64_t *)*a1;
  if (!*a1)
    v4 = a1;
  v5 = (uint64_t *)v4[1];
  if (v5)
  {
    if (a2 + 16 + *((unsigned int *)v5 + 5) <= *((unsigned int *)v5 + 4))
      return v5;
    v6 = v5[1];
    if (v6)
    {
      if (a2 + 16 + *(unsigned int *)(v6 + 20) <= *(unsigned int *)(v6 + 16))
        return (uint64_t *)v5[1];
      v7 = 0;
      v5[1] = 0;
      do
      {
        v8 = *(_QWORD *)(v6 + 8);
        v7 += *(unsigned int *)(v6 + 16);
        memset_s((void *)v6, 8uLL, 0, 8uLL);
        free((void *)v6);
        *((_DWORD *)a1 + 4) -= 2;
        v6 = v8;
      }
      while (v8);
      if (v7 > v2)
        v2 = v7;
    }
  }
  if (v2 + 16 <= 0x3D8)
    v9 = 984;
  else
    v9 = v2 + 16;
  v10 = malloc_type_malloc(v9 + 32, 0xAB27EE5uLL);
  if (v5)
    v11 = v5;
  else
    v11 = a1;
  *v10 = &swift::TaskAllocatorSlabMetadata;
  v10[1] = 0;
  *((_DWORD *)v10 + 4) = v9;
  *((_DWORD *)v10 + 5) = 0;
  v11[1] = (uint64_t)v10;
  *((_DWORD *)a1 + 4) += 2;
  return v10;
}

uint64_t swift::addStatusRecord(swift::concurrency::trace *a1, unint64_t a2, unsigned int *a3, uint64_t (*a4)(uint64_t, _QWORD, _QWORD, unint64_t *), uint64_t a5)
{
  unsigned int v10;
  void (**v11)(swift::concurrency::trace *);
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int128 *v17;
  unsigned __int128 v18;
  int v19;
  unint64_t v21;
  unint64_t v22;

  v10 = *a3;
  v11 = (void (**)(swift::concurrency::trace *))MEMORY[0x1E0DEEA68];
  if ((*a3 & 0x200) != 0)
  {
LABEL_2:
    waitForStatusRecordUnlockIfNotSelfLocked((uint64_t)a1, a3);
    v10 = *a3;
  }
  while (1)
  {
    *(_QWORD *)(a2 + 8) = *((_QWORD *)a3 + 1);
    v21 = v10 | ((unint64_t)a3[1] << 32);
    v22 = a2;
    v12 = a4(a5, *(_QWORD *)a3, *((_QWORD *)a3 + 1), &v21);
    if (!(_DWORD)v12)
      return v12;
    if (*v11)
      (*v11)(a1);
    v14 = v21;
    v13 = v22;
    v16 = *(_QWORD *)a3;
    v15 = *((_QWORD *)a3 + 1);
    v17 = (unsigned __int128 *)((char *)a1 + 96);
    do
    {
      while (1)
      {
        v18 = __ldxp(v17);
        v10 = v18;
        v19 = (_QWORD)v18 != v16;
        if (*((_QWORD *)&v18 + 1) != v15)
          ++v19;
        if (!v19)
          break;
        if (!__stlxp(v18, v17))
          goto LABEL_13;
      }
    }
    while (__stlxp(__PAIR128__(v13, v14), v17));
LABEL_13:
    if (!((unint64_t)v18 ^ v16 | *((_QWORD *)&v18 + 1) ^ v15))
    {
      swift::concurrency::trace::task_status_changed(a1, (swift::AsyncTask *)v21, (v21 >> 8) & 1, (v21 >> 10) & 1, 0, HIDWORD(v21) > 3, (v21 >> 12) & 1);
      return v12;
    }
    *(_OWORD *)a3 = v18;
    if ((v18 & 0x200) != 0)
      goto LABEL_2;
  }
}

uint64_t waitForStatusRecordUnlockIfNotSelfLocked(uint64_t a1, unsigned int *a2)
{
  unsigned __int128 *v4;
  void (**v5)(uint64_t);
  unsigned int v6;
  unsigned __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _opaque_pthread_t *v10;
  unsigned int v11;
  unsigned __int128 v12;
  uint64_t v13;

  v4 = (unsigned __int128 *)(a1 + 96);
  v5 = (void (**)(uint64_t))MEMORY[0x1E0DEEA60];
  do
  {
    os_unfair_lock_lock((os_unfair_lock_t)&StatusRecordLockLock);
    do
    {
      v7 = __ldxp(v4);
      v6 = v7;
    }
    while (__stxp(v7, v4));
    *(_OWORD *)a2 = v7;
    if (*v5)
    {
      (*v5)(a1);
      v6 = *a2;
    }
    if ((v6 & 0x200) == 0
      || ((v8 = *((_QWORD *)a2 + 1)) != 0 ? (v9 = v8 - 16) : (v9 = 0),
          v10 = pthread_self(),
          pthread_equal(*(pthread_t *)(v9 + 32), v10)))
    {
      v13 = (v6 >> 9) & 1;
      os_unfair_lock_unlock((os_unfair_lock_t)&StatusRecordLockLock);
      return v13;
    }
    ++*(_QWORD *)(v8 - 16);
    os_unfair_lock_unlock((os_unfair_lock_t)&StatusRecordLockLock);
    os_unfair_lock_lock((os_unfair_lock_t)(v8 - 8));
    os_unfair_lock_unlock((os_unfair_lock_t)(v8 - 8));
    os_unfair_lock_lock((os_unfair_lock_t)&StatusRecordLockLock);
    if (*(_QWORD *)(v8 - 16) == 1)
      MEMORY[0x18D790034](v8 - 16, 40, 7);
    else
      --*(_QWORD *)(v8 - 16);
    os_unfair_lock_unlock((os_unfair_lock_t)&StatusRecordLockLock);
    do
    {
      v12 = __ldxp(v4);
      LOWORD(v11) = v12;
    }
    while (__stxp(v12, v4));
    *(_OWORD *)a2 = v12;
    if (*v5)
    {
      (*v5)(a1);
      v11 = *a2;
    }
  }
  while ((v11 & 0x200) != 0);
  return 0;
}

uint64_t swift::addStatusRecordToSelf(unint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, unint64_t *), uint64_t a3)
{
  swift::concurrency::trace *Current;
  unsigned __int128 *v7;
  unsigned __int128 v8;
  unsigned __int128 v10;

  Current = (swift::concurrency::trace *)swift_task_getCurrent();
  v7 = (unsigned __int128 *)((char *)Current + 96);
  do
    v8 = __ldxp(v7);
  while (__stxp(v8, v7));
  v10 = v8;
  return swift::addStatusRecord(Current, a1, (unsigned int *)&v10, a2, a3) & 1;
}

void swift::removeStatusRecord(swift::concurrency::trace *this, uint64_t a2, unsigned int *a3, void (*a4)(uint64_t, unint64_t, uint64_t, unsigned __int128 *), uint64_t a5)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int128 *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int128 v20;
  int v21;
  unint64_t v23;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int128 *v28;
  unsigned __int128 v29;
  int v30;
  unsigned __int128 *v31;
  void (**v32)(swift::concurrency::trace *);
  int v33;
  unsigned __int128 v34;
  uint64_t v35;
  uint64_t v36;
  _opaque_pthread_t *v37;
  const char *v38;
  char *v39;
  int v40;
  unsigned __int128 v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int128 v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;

  v52 = a2;
  v10 = *a3;
  if ((*a3 & 0x200) == 0)
  {
LABEL_34:
    v50 = a5;
    v31 = (unsigned __int128 *)((char *)this + 96);
    v32 = (void (**)(swift::concurrency::trace *))MEMORY[0x1E0DEEA60];
    if ((v10 & 0x200) == 0)
      goto LABEL_56;
    do
    {
LABEL_39:
      os_unfair_lock_lock((os_unfair_lock_t)&StatusRecordLockLock);
      do
      {
        v34 = __ldxp(v31);
        LOWORD(v33) = v34;
      }
      while (__stxp(v34, v31));
      *(_OWORD *)a3 = v34;
      if (*v32)
      {
        (*v32)(this);
        v33 = *a3;
      }
      if ((v33 & 0x200) == 0)
      {
        os_unfair_lock_unlock((os_unfair_lock_t)&StatusRecordLockLock);
        break;
      }
      v35 = *((_QWORD *)a3 + 1);
      if (v35)
        v36 = v35 - 16;
      else
        v36 = 0;
      v37 = pthread_self();
      if (pthread_equal(*(pthread_t *)(v36 + 32), v37))
        swift::swift_Concurrency_fatalError(0, "Waiting on a status record lock that is owned by self", v38, v39);
      ++*(_QWORD *)(v35 - 16);
      os_unfair_lock_unlock((os_unfair_lock_t)&StatusRecordLockLock);
      os_unfair_lock_lock((os_unfair_lock_t)(v35 - 8));
      os_unfair_lock_unlock((os_unfair_lock_t)(v35 - 8));
      os_unfair_lock_lock((os_unfair_lock_t)&StatusRecordLockLock);
      if (*(_QWORD *)(v35 - 16) == 1)
        MEMORY[0x18D790034](v35 - 16, 40, 7);
      else
        --*(_QWORD *)(v35 - 16);
      os_unfair_lock_unlock((os_unfair_lock_t)&StatusRecordLockLock);
      do
      {
        v41 = __ldxp(v31);
        LOWORD(v40) = v41;
      }
      while (__stxp(v41, v31));
      *(_OWORD *)a3 = v41;
      if (*v32)
      {
        (*v32)(this);
        v40 = *a3;
      }
    }
    while ((v40 & 0x200) != 0);
LABEL_56:
    while (*((_QWORD *)a3 + 1) == a2)
    {
      v14 = *a3;
      v23 = a3[1];
      v42 = *(_QWORD *)(a2 + 8);
      v43 = v14 | (v23 << 32);
      *(_QWORD *)&v51 = v43;
      *((_QWORD *)&v51 + 1) = v42;
      if (a4)
      {
        a4(v50, *(_QWORD *)a3, *((_QWORD *)a3 + 1), (unsigned __int128 *)&v51);
        v42 = *((_QWORD *)&v51 + 1);
        v43 = v51;
        v23 = DWORD1(v51);
        LODWORD(v14) = v51;
      }
      v45 = *(_QWORD *)a3;
      v44 = *((_QWORD *)a3 + 1);
      do
      {
        while (1)
        {
          v46 = __ldxp(v31);
          v47 = (_QWORD)v46 != v45;
          if (*((_QWORD *)&v46 + 1) != v44)
            ++v47;
          if (!v47)
            break;
          if (!__stxp(v46, v31))
            goto LABEL_66;
        }
      }
      while (__stxp(__PAIR128__(v42, v43), v31));
LABEL_66:
      if (!((unint64_t)v46 ^ v45 | *((_QWORD *)&v46 + 1) ^ v44))
        goto LABEL_37;
      *(_OWORD *)a3 = v46;
      if ((v46 & 0x200) != 0)
        goto LABEL_39;
    }
    v48 = *(_QWORD *)a3;
    v49 = *((_QWORD *)a3 + 1);
    *(_QWORD *)&v51 = &v52;
    withStatusRecordLock(this, v48, v49, (void (*)(uint64_t, unint64_t, uint64_t))__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus)>::callback_fn<swift::removeStatusRecord(swift::AsyncTask *,swift::TaskStatusRecord *,swift::ActiveTaskStatus&,__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>)::$_0>, (uint64_t)&v51, a4, v50);
    return;
  }
  if ((waitForStatusRecordUnlockIfNotSelfLocked((uint64_t)this, a3) & 1) == 0)
  {
    v10 = *a3;
    goto LABEL_34;
  }
  v11 = *((_QWORD *)a3 + 1);
  while (v11)
  {
    v12 = v11;
    v11 = *(_QWORD *)(v11 + 8);
    if (v11 == a2)
    {
      *(_QWORD *)(v12 + 8) = *(_QWORD *)(a2 + 8);
      break;
    }
  }
  if (a4)
  {
    v51 = *(_OWORD *)a3;
    a4(a5, *(_QWORD *)a3, *((_QWORD *)a3 + 1), (unsigned __int128 *)&v51);
    v13 = (unsigned __int128 *)((char *)this + 96);
    v15 = *((_QWORD *)&v51 + 1);
    v14 = v51;
    v17 = *(_QWORD *)a3;
    v16 = *((_QWORD *)a3 + 1);
    do
    {
      while (1)
      {
        v20 = __ldxp(v13);
        v19 = *((_QWORD *)&v20 + 1);
        v18 = v20;
        v21 = (_QWORD)v20 != v17;
        if (*((_QWORD *)&v20 + 1) != v16)
          ++v21;
        if (!v21)
          break;
        if (!__stxp(v20, v13))
          goto LABEL_15;
      }
    }
    while (__stxp(__PAIR128__(v15, v14), v13));
LABEL_15:
    if ((_QWORD)v20 == v17 && *((_QWORD *)&v20 + 1) == v16)
    {
      v23 = HIDWORD(v14);
    }
    else
    {
      do
      {
        *(_QWORD *)a3 = v18;
        *((_QWORD *)a3 + 1) = v19;
        v51 = *(_OWORD *)a3;
        ((void (*)(uint64_t))a4)(a5);
        v25 = *((_QWORD *)&v51 + 1);
        v14 = v51;
        v27 = *(_QWORD *)a3;
        v26 = *((_QWORD *)a3 + 1);
        v28 = (unsigned __int128 *)((char *)this + 96);
        do
        {
          while (1)
          {
            v29 = __ldxp(v28);
            v19 = *((_QWORD *)&v29 + 1);
            v18 = v29;
            v30 = (_QWORD)v29 != v27;
            if (*((_QWORD *)&v29 + 1) != v26)
              ++v30;
            if (!v30)
              break;
            if (!__stxp(v29, v28))
              goto LABEL_21;
          }
        }
        while (__stxp(__PAIR128__(v25, v14), v28));
LABEL_21:
        ;
      }
      while ((_QWORD)v29 != v27 || *((_QWORD *)&v29 + 1) != v26);
      v23 = HIDWORD(v14);
    }
LABEL_37:
    swift::concurrency::trace::task_status_changed(this, (swift::AsyncTask *)v14, (v14 >> 8) & 1, (v14 >> 10) & 1, 0, v23 > 3, (v14 >> 12) & 1);
  }
}

void withStatusRecordLock(swift::concurrency::trace *this, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, unint64_t, uint64_t), uint64_t a5, void (*a6)(uint64_t, unint64_t, uint64_t, unsigned __int128 *), uint64_t a7)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  unsigned __int128 v17;
  unsigned __int128 *v18;
  unsigned __int128 v19;
  int v20;
  int v21;
  void (**v22)(swift::concurrency::trace *);
  uint64_t v23;
  uint64_t v24;
  unsigned __int128 v25;
  unsigned __int128 *v26;
  unsigned __int128 v27;
  int v28;
  unsigned __int128 v32;
  unsigned __int128 v33;

  v9 = a3;
  v11 = 0;
  *(_QWORD *)&v33 = a2;
  *((_QWORD *)&v33 + 1) = a3;
  if ((a2 & 0x200) != 0)
  {
LABEL_2:
    if ((waitForStatusRecordUnlockIfNotSelfLocked((uint64_t)this, (unsigned int *)&v33) & 1) == 0)
    {
      v9 = *((_QWORD *)&v33 + 1);
      goto LABEL_4;
    }
    v21 = 0;
    v12 = *((_QWORD *)&v33 + 1);
    v16 = v33;
    v13 = DWORD1(v33);
    LODWORD(v15) = v33;
  }
  else
  {
    while (1)
    {
LABEL_4:
      if (v11)
      {
        *(_QWORD *)(v11 + 24) = v9;
      }
      else
      {
        v11 = swift_slowAlloc();
        *(_QWORD *)v11 = 1;
        *(_DWORD *)(v11 + 8) = 0;
        *(_QWORD *)(v11 + 16) = 192;
        *(_QWORD *)(v11 + 24) = v9;
        *(_QWORD *)(v11 + 32) = pthread_self();
        os_unfair_lock_lock((os_unfair_lock_t)(v11 + 8));
      }
      v12 = v11 + 16;
      v14 = v33;
      v13 = DWORD1(v33);
      v15 = v33 | 0x200;
      v16 = v15 | ((unint64_t)DWORD1(v33) << 32);
      v17 = v33;
      v18 = (unsigned __int128 *)((char *)this + 96);
      do
      {
        while (1)
        {
          v19 = __ldaxp(v18);
          v9 = *((_QWORD *)&v19 + 1);
          v20 = (_QWORD)v19 != (_QWORD)v17;
          if (*((_QWORD *)&v19 + 1) != *((_QWORD *)&v17 + 1))
            ++v20;
          if (!v20)
            break;
          if (!__stlxp(v19, v18))
            goto LABEL_14;
        }
      }
      while (__stlxp(__PAIR128__(v12, v16), v18));
LABEL_14:
      if (v19 == v17)
        break;
      v33 = v19;
      if ((v19 & 0x200) != 0)
        goto LABEL_2;
    }
    if (*MEMORY[0x1E0DEEA60])
      ((void (*)(swift::concurrency::trace *))*MEMORY[0x1E0DEEA60])(this);
    if (*MEMORY[0x1E0DEEA68])
      ((void (*)(swift::concurrency::trace *))*MEMORY[0x1E0DEEA68])(this);
    *(_QWORD *)&v33 = v16;
    *((_QWORD *)&v33 + 1) = v11 + 16;
    swift::concurrency::trace::task_status_changed(this, (swift::AsyncTask *)v14, (v14 >> 8) & 1, (v14 >> 10) & 1, 0, v13 > 3, (v14 >> 12) & 1);
    v21 = 1;
  }
  a4(a5, v16, v12);
  v22 = (void (**)(swift::concurrency::trace *))MEMORY[0x1E0DEEA68];
  v23 = v12;
  while (1)
  {
    v32 = v33;
    if (v21)
    {
      v24 = *(_QWORD *)(v23 + 8);
      *(_QWORD *)&v32 = v15 & 0xFFFFFDFF | (v13 << 32);
      *((_QWORD *)&v32 + 1) = v24;
    }
    if (a6)
      a6(a7, v16, v12, &v32);
    if (*v22)
      (*v22)(this);
    v25 = v32;
    v26 = (unsigned __int128 *)((char *)this + 96);
    do
    {
      while (1)
      {
        v27 = __ldxp(v26);
        v23 = *((_QWORD *)&v27 + 1);
        LODWORD(v15) = v27;
        v28 = (_QWORD)v27 != v16;
        if (*((_QWORD *)&v27 + 1) != v12)
          ++v28;
        if (!v28)
          break;
        if (!__stlxp(v27, v26))
          goto LABEL_37;
      }
    }
    while (__stlxp(v25, v26));
LABEL_37:
    if ((_QWORD)v27 == v16 && *((_QWORD *)&v27 + 1) == v12)
      break;
    v33 = v27;
    v13 = DWORD1(v27);
    v12 = *((_QWORD *)&v27 + 1);
    v16 = v27;
  }
  swift::concurrency::trace::task_status_changed(this, (swift::AsyncTask *)v32, (v32 >> 8) & 1, (v32 >> 10) & 1, 0, DWORD1(v32) > 3, (v32 >> 12) & 1);
  if (v21)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&StatusRecordLockLock);
    os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 8));
    if (*(_QWORD *)v11 == 1)
      MEMORY[0x18D790034](v11, 40, 7);
    else
      --*(_QWORD *)v11;
    os_unfair_lock_unlock((os_unfair_lock_t)&StatusRecordLockLock);
  }
  else if (v11)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 8));
    MEMORY[0x18D790034](v11, 40, 7);
  }
}

void swift::removeStatusRecordWhere(swift::concurrency::trace *this, _QWORD *a2, unsigned int (*a3)(uint64_t, _QWORD, _QWORD, uint64_t), uint64_t a4, void (*a5)(_QWORD), uint64_t a6)
{
  uint64_t i;
  unsigned __int128 *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int128 v20;
  int v21;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int128 *v30;
  unsigned __int128 v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  _QWORD v36[2];

  v36[0] = a3;
  v36[1] = a4;
  if ((*((_BYTE *)a2 + 1) & 2) == 0
    || !waitForStatusRecordUnlockIfNotSelfLocked((uint64_t)this, (unsigned int *)a2))
  {
    goto LABEL_36;
  }
  for (i = a2[1]; i; i = *(_QWORD *)(i + 8))
  {
    if (a3(a4, *a2, a2[1], i))
    {
      v24 = a2[1];
      while (v24)
      {
        v25 = v24;
        v24 = *(_QWORD *)(v24 + 8);
        if (v24 == i)
        {
          *(_QWORD *)(v25 + 8) = *(_QWORD *)(i + 8);
          break;
        }
      }
    }
  }
  if (a5)
  {
    v35 = *(_OWORD *)a2;
    ((void (*)(uint64_t, _QWORD, _QWORD, __int128 *))a5)(a6, *a2, a2[1], &v35);
    v13 = (unsigned __int128 *)((char *)this + 96);
    v15 = *((_QWORD *)&v35 + 1);
    v14 = v35;
    v17 = *a2;
    v16 = a2[1];
    do
    {
      while (1)
      {
        v20 = __ldxp(v13);
        v19 = *((_QWORD *)&v20 + 1);
        v18 = v20;
        v21 = (_QWORD)v20 != v17;
        if (*((_QWORD *)&v20 + 1) != v16)
          ++v21;
        if (!v21)
          break;
        if (!__stxp(v20, v13))
          goto LABEL_12;
      }
    }
    while (__stxp(__PAIR128__(v15, v14), v13));
LABEL_12:
    if ((_QWORD)v20 == v17 && *((_QWORD *)&v20 + 1) == v16)
    {
      v23 = HIDWORD(v14);
    }
    else
    {
      do
      {
        *a2 = v18;
        a2[1] = v19;
        v35 = *(_OWORD *)a2;
        a5(a6);
        v27 = *((_QWORD *)&v35 + 1);
        v14 = v35;
        v29 = *a2;
        v28 = a2[1];
        v30 = (unsigned __int128 *)((char *)this + 96);
        do
        {
          while (1)
          {
            v31 = __ldxp(v30);
            v19 = *((_QWORD *)&v31 + 1);
            v18 = v31;
            v32 = (_QWORD)v31 != v29;
            if (*((_QWORD *)&v31 + 1) != v28)
              ++v32;
            if (!v32)
              break;
            if (!__stxp(v31, v30))
              goto LABEL_24;
          }
        }
        while (__stxp(__PAIR128__(v27, v14), v30));
LABEL_24:
        ;
      }
      while ((_QWORD)v31 != v29 || *((_QWORD *)&v31 + 1) != v28);
      v23 = HIDWORD(v14);
    }
    swift::concurrency::trace::task_status_changed(this, (swift::AsyncTask *)v14, (v14 >> 8) & 1, (v14 >> 10) & 1, 0, v23 > 3, (v14 >> 12) & 1);
  }
  else
  {
LABEL_36:
    v33 = *a2;
    v34 = a2[1];
    *(_QWORD *)&v35 = v36;
    withStatusRecordLock(this, v33, v34, (void (*)(uint64_t, unint64_t, uint64_t))__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus)>::callback_fn<swift::removeStatusRecordWhere(swift::AsyncTask *,swift::ActiveTaskStatus&,__swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::TaskStatusRecord *)>,__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>)::$_0>, (uint64_t)&v35, (void (*)(uint64_t, unint64_t, uint64_t, unsigned __int128 *))a5, a6);
  }
}

void swift::removeStatusRecordFromSelf(uint64_t a1, void (*a2)(uint64_t, unint64_t, uint64_t, unsigned __int128 *), uint64_t a3)
{
  swift::concurrency::trace *Current;
  unsigned __int128 *v7;
  unsigned __int128 v8;
  unsigned __int128 v9;

  Current = (swift::concurrency::trace *)swift_task_getCurrent();
  v7 = (unsigned __int128 *)((char *)Current + 96);
  do
    v8 = __ldxp(v7);
  while (__stxp(v8, v7));
  v9 = v8;
  swift::removeStatusRecord(Current, a1, (unsigned int *)&v9, a2, a3);
}

void swift::updateStatusRecord(swift::concurrency::trace *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void (*a6)(uint64_t, unint64_t, uint64_t, unsigned __int128 *), uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD v10[2];

  v10[0] = a3;
  v10[1] = a4;
  v7 = *a5;
  v8 = a5[1];
  v9 = v10;
  withStatusRecordLock(a1, v7, v8, (void (*)(uint64_t, unint64_t, uint64_t))__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus)>::callback_fn<swift::updateStatusRecord(swift::AsyncTask *,swift::TaskStatusRecord *,__swift::__runtime::llvm::function_ref<void ()(void)>,swift::ActiveTaskStatus&,__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>)::$_0>, (uint64_t)&v9, a6, a7);
}

uint64_t swift::AsyncTask::getPreferredTaskExecutor(swift::AsyncTask *this, BOOL a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned __int128 *v7;
  unsigned __int128 v8;
  unsigned __int128 *v10;
  unsigned __int128 v11;
  _QWORD *v12;
  _QWORD v13[2];
  _QWORD *v14;

  if ((*((_BYTE *)this + 35) & 0x20) == 0)
  {
    v7 = (unsigned __int128 *)((char *)this + 96);
    do
      v8 = __ldxp(v7);
    while (__stxp(v8, v7));
    if ((v8 & 0x8000) == 0)
      return 0;
  }
  v13[0] = 0;
  v13[1] = 0;
  v12 = v13;
  v10 = (unsigned __int128 *)((char *)this + 96);
  do
    v11 = __ldxp(v10);
  while (__stxp(v11, v10));
  v14 = &v12;
  withStatusRecordLock(this, v11, *((uint64_t *)&v11 + 1), (void (*)(uint64_t, unint64_t, uint64_t))__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus)>::callback_fn<BOOL withStatusRecordLock<swift::AsyncTask::getPreferredTaskExecutor(BOOL)::$_0>(swift::AsyncTask*,swift::AsyncTask::getPreferredTaskExecutor(BOOL)::$_0 &&,__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>)::{lambda(swift::ActiveTaskStatus)#1}>, (uint64_t)&v14, 0, a7);
  return v13[0];
}

uint64_t swift::AsyncTask::pushInitialTaskExecutorPreference(swift *a1, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t v8;
  unsigned __int128 *v9;
  unsigned __int128 v10;
  char v12;
  unsigned __int128 v13;

  v8 = swift::_swift_task_alloc_specific(a1, (swift::AsyncTask *)0x28);
  *(_QWORD *)v8 = 5;
  *(_QWORD *)(v8 + 8) = 0;
  *(_BYTE *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = a2;
  *(_QWORD *)(v8 + 32) = a3;
  if (a4)
    *(_BYTE *)(v8 + 16) = 1;
  v9 = (unsigned __int128 *)((char *)a1 + 96);
  do
    v10 = __ldxp(v9);
  while (__stxp(v10, v9));
  v13 = v10;
  return swift::addStatusRecord(a1, v8, (unsigned int *)&v13, __swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift::AsyncTask::pushInitialTaskExecutorPreference(swift::TaskExecutorRef,BOOL)::$_0>, (uint64_t)&v12);
}

uint64_t swift::AsyncTask::dropInitialTaskExecutorPreferenceRecord(swift::AsyncTask *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned __int128 *v7;
  unsigned __int128 v8;
  _QWORD v10[2];
  uint64_t v11;
  _QWORD *v12;

  v10[1] = this;
  v11 = 0;
  v10[0] = &v11;
  v7 = (unsigned __int128 *)((char *)this + 96);
  do
    v8 = __ldxp(v7);
  while (__stxp(v8, v7));
  v12 = v10;
  withStatusRecordLock(this, v8, *((uint64_t *)&v8 + 1), (void (*)(uint64_t, unint64_t, uint64_t))__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus)>::callback_fn<BOOL withStatusRecordLock<swift::AsyncTask::dropInitialTaskExecutorPreferenceRecord(void)::$_0>(swift::AsyncTask*,swift::AsyncTask::dropInitialTaskExecutorPreferenceRecord(void)::$_0 &&,__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>)::{lambda(swift::ActiveTaskStatus)#1}>, (uint64_t)&v12, 0, a7);
  return swift_unknownObjectRelease();
}

uint64_t swift::updateNewChildWithParentAndGroupState(uint64_t result, __int16 a2, int a3, swift::TaskGroup *this)
{
  unsigned __int8 v4;
  unsigned __int128 *v5;
  int v6;
  unsigned __int128 v7;
  int v8;
  unint64_t v9;

  v4 = a2;
  v5 = (unsigned __int128 *)(result + 96);
  do
  {
    v7 = __ldxp(v5);
    v6 = v7;
  }
  while (__stxp(v7, v5));
  if ((a2 & 0x100) != 0 || this && (result = swift::TaskGroup::isCancelled(this), (_DWORD)result))
    v6 = v7 | 0x100;
  v8 = v4;
  if (v4 == 33)
    v8 = 25;
  v9 = v6 & 0xFFFFFF00 | v8;
  do
    __ldxp(v5);
  while (__stxp(__PAIR128__(*((unint64_t *)&v7 + 1), v9), v5));
  return result;
}

void swift::_swift_taskGroup_detachChild(swift *this, swift::TaskGroup *a2, swift::AsyncTask *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  swift::concurrency::trace *v7;
  unsigned __int128 *v8;
  unsigned __int128 v9;
  _QWORD v10[2];
  swift::TaskGroup *v11;
  swift *v12;
  _QWORD *v13;

  v12 = this;
  v7 = (swift::concurrency::trace *)*((_QWORD *)a2 + 24);
  v10[0] = &v12;
  v10[1] = &v11;
  v11 = a2;
  v8 = (unsigned __int128 *)((char *)v7 + 96);
  do
    v9 = __ldxp(v8);
  while (__stxp(v9, v8));
  v13 = v10;
  withStatusRecordLock(v7, v9, *((uint64_t *)&v9 + 1), (void (*)(uint64_t, unint64_t, uint64_t))__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus)>::callback_fn<BOOL withStatusRecordLock<swift::_swift_taskGroup_detachChild(swift::TaskGroup *,swift::AsyncTask *)::$_0>(swift::AsyncTask *,swift::_swift_taskGroup_detachChild(swift::TaskGroup *,swift::AsyncTask *)::$_0 &&,__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>)::{lambda(swift::ActiveTaskStatus)#1}>, (uint64_t)&v13, 0, a7);
}

void swift::TaskDependencyStatusRecord::performEscalationAction(uint64_t a1, unint64_t a2)
{
  int v3;
  swift::AsyncTask *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_DWORD *)(a1 + 32);
  if (v3 == 4)
  {
    swift::swift_executor_escalate(*(unsigned __int8 **)(a1 + 16), *(_QWORD *)(a1 + 24), *(swift::AsyncTask **)(a1 + 40), a2);
  }
  else if (v3 == 1)
  {
    v4 = *(swift::AsyncTask **)(a1 + 16);
    swift_once();
    if (swift_task_escalate::Override)
      swift_task_escalate::Override(v4, a2, swift_task_escalateImpl);
    else
      swift_task_escalateImpl(v4, a2, v5, 0, v6, v7, v8);
  }
}

uint64_t swift_task_escalate(swift::AsyncTask *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_once();
  if (swift_task_escalate::Override)
    return swift_task_escalate::Override(a1, a2, swift_task_escalateImpl);
  else
    return swift_task_escalateImpl(a1, a2, v4, 0, v5, v6, v7);
}

void swift_taskGroup_attachChild(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  swift::concurrency::trace *v5;
  unsigned __int128 *v6;
  unsigned __int128 v7;
  _QWORD v8[2];
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  swift_once();
  if (swift_taskGroup_attachChild::Override)
  {
    swift_taskGroup_attachChild::Override(a1, a2, swift_taskGroup_attachChildImpl);
  }
  else
  {
    v9 = a2;
    v10 = a1;
    v5 = *(swift::concurrency::trace **)(a2 + 192);
    v8[0] = &v10;
    v8[1] = &v9;
    v6 = (unsigned __int128 *)((char *)v5 + 96);
    do
      v7 = __ldxp(v6);
    while (__stxp(v7, v6));
    v11 = v8;
    withStatusRecordLock(v5, v7, *((uint64_t *)&v7 + 1), (void (*)(uint64_t, unint64_t, uint64_t))__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus)>::callback_fn<BOOL withStatusRecordLock<swift_taskGroup_attachChildImpl(swift::TaskGroup *,swift::AsyncTask *)::$_0>(swift::AsyncTask *,swift_taskGroup_attachChildImpl(swift::TaskGroup *,swift::AsyncTask *)::$_0 &&,__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>)::{lambda(swift::ActiveTaskStatus)#1}>, (uint64_t)&v11, 0, v4);
  }
}

void swift_taskGroup_attachChildImpl(swift::TaskGroup *a1, swift::AsyncTask *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  swift::concurrency::trace *v7;
  unsigned __int128 *v8;
  unsigned __int128 v9;
  _QWORD v10[2];
  swift::AsyncTask *v11;
  swift::TaskGroup *v12;
  _QWORD *v13;

  v12 = a1;
  v7 = (swift::concurrency::trace *)*((_QWORD *)a2 + 24);
  v10[0] = &v12;
  v10[1] = &v11;
  v11 = a2;
  v8 = (unsigned __int128 *)((char *)v7 + 96);
  do
    v9 = __ldxp(v8);
  while (__stxp(v9, v8));
  v13 = v10;
  withStatusRecordLock(v7, v9, *((uint64_t *)&v9 + 1), (void (*)(uint64_t, unint64_t, uint64_t))__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus)>::callback_fn<BOOL withStatusRecordLock<swift_taskGroup_attachChildImpl(swift::TaskGroup *,swift::AsyncTask *)::$_0>(swift::AsyncTask *,swift_taskGroup_attachChildImpl(swift::TaskGroup *,swift::AsyncTask *)::$_0 &&,__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>)::{lambda(swift::ActiveTaskStatus)#1}>, (uint64_t)&v13, 0, a7);
}

swift::concurrency::trace *swift_task_hasTaskGroupStatusRecord()
{
  swift::concurrency::trace *result;
  uint64_t v1;
  unsigned __int128 *v2;
  unsigned __int128 v3;
  char *v4;
  char v5;
  char **v6;

  swift_once();
  if (swift_task_hasTaskGroupStatusRecord::Override)
    return (swift::concurrency::trace *)swift_task_hasTaskGroupStatusRecord::Override(swift_task_hasTaskGroupStatusRecordImpl);
  result = (swift::concurrency::trace *)swift_task_getCurrent();
  if (result)
  {
    v5 = 0;
    v4 = &v5;
    v2 = (unsigned __int128 *)((char *)result + 96);
    do
      v3 = __ldxp(v2);
    while (__stxp(v3, v2));
    v6 = &v4;
    withStatusRecordLock(result, v3, *((uint64_t *)&v3 + 1), (void (*)(uint64_t, unint64_t, uint64_t))__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus)>::callback_fn<BOOL withStatusRecordLock<swift_task_hasTaskGroupStatusRecordImpl(void)::$_0>(swift::AsyncTask *,swift_task_hasTaskGroupStatusRecordImpl(void)::$_0 &&,__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>)::{lambda(swift::ActiveTaskStatus)#1}>, (uint64_t)&v6, 0, v1);
    return (swift::concurrency::trace *)(v5 != 0);
  }
  return result;
}

swift::concurrency::trace *swift_task_hasTaskGroupStatusRecordImpl(void)
{
  swift::concurrency::trace *result;
  uint64_t v1;
  unsigned __int128 *v2;
  unsigned __int128 v3;
  char *v4;
  char v5;
  char **v6;

  result = (swift::concurrency::trace *)swift_task_getCurrent();
  if (result)
  {
    v5 = 0;
    v4 = &v5;
    v2 = (unsigned __int128 *)((char *)result + 96);
    do
      v3 = __ldxp(v2);
    while (__stxp(v3, v2));
    v6 = &v4;
    withStatusRecordLock(result, v3, *((uint64_t *)&v3 + 1), (void (*)(uint64_t, unint64_t, uint64_t))__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus)>::callback_fn<BOOL withStatusRecordLock<swift_task_hasTaskGroupStatusRecordImpl(void)::$_0>(swift::AsyncTask *,swift_task_hasTaskGroupStatusRecordImpl(void)::$_0 &&,__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>)::{lambda(swift::ActiveTaskStatus)#1}>, (uint64_t)&v6, 0, v1);
    return (swift::concurrency::trace *)(v5 != 0);
  }
  return result;
}

void swift_task_cancel(swift::AsyncTask *a1)
{
  swift_once();
  if (swift_task_cancel::Override)
    swift_task_cancel::Override(a1, swift_task_cancelImpl);
  else
    swift_task_cancelImpl(a1);
}

void swift_task_cancelImpl(swift::AsyncTask *this)
{
  unsigned __int128 *v2;
  uint64_t v3;
  unsigned int v4;
  unsigned __int128 v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int128 v8;
  int v9;
  uint64_t v11;
  char v12;

  v2 = (unsigned __int128 *)((char *)this + 96);
  do
  {
    v5 = __ldxp(v2);
    v3 = *((_QWORD *)&v5 + 1);
    v4 = v5;
  }
  while (__stxp(v5, v2));
  if ((v5 & 0x100) == 0)
  {
    v6 = DWORD1(v5);
    while (1)
    {
      v7 = v4 | (v6 << 32);
      do
      {
        while (1)
        {
          v8 = __ldxp(v2);
          v9 = (_QWORD)v8 != v7;
          if (*((_QWORD *)&v8 + 1) != v3)
            ++v9;
          if (!v9)
            break;
          if (!__stxp(v8, v2))
            goto LABEL_12;
        }
      }
      while (__stxp(__PAIR128__(v3, v4 | 0x100 | ((unint64_t)v6 << 32)), v2));
LABEL_12:
      if ((_QWORD)v8 == v7 && *((_QWORD *)&v8 + 1) == v3)
        break;
      v6 = DWORD1(v8);
      v3 = *((_QWORD *)&v8 + 1);
      v4 = v8;
      if ((v8 & 0x100) != 0)
        return;
    }
    if (*MEMORY[0x1E0DEEA60])
      ((void (*)(swift::AsyncTask *))*MEMORY[0x1E0DEEA60])(this);
    swift::concurrency::trace::task_status_changed(this, (swift::AsyncTask *)v4, 1, (v4 >> 10) & 1, 0, v6 > 3, (v4 >> 12) & 1);
    if (v3)
      withStatusRecordLock(this, v4 | 0x100 | ((unint64_t)v6 << 32), v3, (void (*)(uint64_t, unint64_t, uint64_t))__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus)>::callback_fn<swift_task_cancelImpl(swift::AsyncTask *)::$_0>, (uint64_t)&v12, 0, v11);
  }
}

uint64_t swift_task_escalateImpl(swift::AsyncTask *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned __int128 *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned __int128 v11;
  uint64_t result;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unsigned __int128 v17;
  int v18;
  NSObject *v20;
  unint64_t v21;
  _BYTE buf[12];
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;

  v21 = a2;
  v8 = (unsigned __int128 *)((char *)a1 + 96);
  do
  {
    v11 = __ldxp(v8);
    v9 = *((_QWORD *)&v11 + 1);
    v10 = v11;
  }
  while (__stxp(v11, v8));
  result = v11;
  if (v11 < a2)
  {
    v13 = DWORD1(v11);
    while (1)
    {
      if (v13 > 3 || (v10 & 0x1000) != 0)
      {
        v15 = v10 & 0xFFFFFF00 | a2 | 0x400;
        v14 = v13;
      }
      else
      {
        if ((v10 & 0x2000) != 0)
          return result;
        v14 = 0;
        v15 = v10 & 0xFFFFFF00 | a2;
      }
      v16 = v10 | (v13 << 32);
      do
      {
        while (1)
        {
          v17 = __ldxp(v8);
          v18 = (_QWORD)v17 != v16;
          if (*((_QWORD *)&v17 + 1) != v9)
            ++v18;
          if (!v18)
            break;
          if (!__stxp(v17, v8))
            goto LABEL_17;
        }
      }
      while (__stxp(__PAIR128__(v9, v15 | (v14 << 32)), v8));
LABEL_17:
      if ((_QWORD)v17 == v16 && *((_QWORD *)&v17 + 1) == v9)
        break;
      result = v17;
      v9 = *((_QWORD *)&v17 + 1);
      v13 = DWORD1(v17);
      v10 = v17;
      if (v17 >= a2)
        return result;
    }
    if (*MEMORY[0x1E0DEEA60])
      ((void (*)(swift::AsyncTask *))*MEMORY[0x1E0DEEA60])(a1);
    if (v14 < 4)
    {
      if ((v15 & 0x1000) != 0 && _os_trace_lazy_init_completed_4swift())
      {
        if (swift::concurrency::trace::LogsToken != -1)
          dispatch_once_f(&swift::concurrency::trace::LogsToken, 0, (dispatch_function_t)swift::concurrency::trace::setupLogs);
        if (swift::concurrency::trace::TracingEnabled)
        {
          v20 = swift::concurrency::trace::PotentialPriorityInversionLog;
          if (os_signpost_enabled((os_log_t)swift::concurrency::trace::PotentialPriorityInversionLog))
          {
            *(_DWORD *)buf = 134218496;
            *(_QWORD *)&buf[4] = swift::AsyncTask::getTaskId(a1);
            v23 = 2048;
            v24 = v10;
            v25 = 2048;
            v26 = v15;
            _os_signpost_emit_with_name_impl(&dword_18D56B000, v20, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "enqueued_task_inversion", " enableTelemetry=YES task=%llx oldPriority=%zu newPriority=%zu", buf, 0x20u);
          }
        }
      }
    }
    else
    {
      dispatch_lock_override_start_with_debounce();
    }
    if (v9)
    {
      *(_QWORD *)buf = &v21;
      withStatusRecordLock(a1, v15 | (v14 << 32), v9, (void (*)(uint64_t, unint64_t, uint64_t))__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus)>::callback_fn<swift_task_escalateImpl(swift::AsyncTask *,swift::JobPriority)::$_0>, (uint64_t)buf, 0, a7);
    }
    return v15;
  }
  return result;
}

unsigned __int128 *swift_task_getPreferredTaskExecutor()
{
  unsigned __int128 *result;
  uint64_t v1;
  unsigned __int128 *v2;
  unsigned __int128 v3;
  unsigned __int128 *v4;
  unsigned __int128 v5;
  _QWORD *v6;
  _QWORD v7[2];
  _QWORD *v8;

  swift_once();
  if (swift_task_getPreferredTaskExecutor::Override)
    return (unsigned __int128 *)swift_task_getPreferredTaskExecutor::Override(swift_task_getPreferredTaskExecutorImpl);
  result = (unsigned __int128 *)swift_task_getCurrent();
  if (result)
  {
    if ((*((_BYTE *)result + 35) & 0x20) != 0)
      goto LABEL_9;
    v2 = result + 6;
    do
      v3 = __ldxp(v2);
    while (__stxp(v3, v2));
    if ((v3 & 0x8000) != 0)
    {
LABEL_9:
      v7[0] = 0;
      v7[1] = 0;
      v6 = v7;
      v4 = result + 6;
      do
        v5 = __ldxp(v4);
      while (__stxp(v5, v4));
      v8 = &v6;
      withStatusRecordLock((swift::concurrency::trace *)result, v5, *((uint64_t *)&v5 + 1), (void (*)(uint64_t, unint64_t, uint64_t))__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus)>::callback_fn<BOOL withStatusRecordLock<swift::AsyncTask::getPreferredTaskExecutor(BOOL)::$_0>(swift::AsyncTask*,swift::AsyncTask::getPreferredTaskExecutor(BOOL)::$_0 &&,__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>)::{lambda(swift::ActiveTaskStatus)#1}>, (uint64_t)&v8, 0, v1);
      return (unsigned __int128 *)v7[0];
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unsigned __int128 *swift_task_getPreferredTaskExecutorImpl(void)
{
  unsigned __int128 *result;
  uint64_t v1;
  unsigned __int128 *v2;
  unsigned __int128 v3;
  unsigned __int128 *v4;
  unsigned __int128 v5;
  _QWORD *v6;
  _QWORD v7[2];
  _QWORD *v8;

  result = (unsigned __int128 *)swift_task_getCurrent();
  if (result)
  {
    if ((*((_BYTE *)result + 35) & 0x20) != 0)
      goto LABEL_7;
    v2 = result + 6;
    do
      v3 = __ldxp(v2);
    while (__stxp(v3, v2));
    if ((v3 & 0x8000) != 0)
    {
LABEL_7:
      v7[0] = 0;
      v7[1] = 0;
      v6 = v7;
      v4 = result + 6;
      do
        v5 = __ldxp(v4);
      while (__stxp(v5, v4));
      v8 = &v6;
      withStatusRecordLock((swift::concurrency::trace *)result, v5, *((uint64_t *)&v5 + 1), (void (*)(uint64_t, unint64_t, uint64_t))__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus)>::callback_fn<BOOL withStatusRecordLock<swift::AsyncTask::getPreferredTaskExecutor(BOOL)::$_0>(swift::AsyncTask*,swift::AsyncTask::getPreferredTaskExecutor(BOOL)::$_0 &&,__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>)::{lambda(swift::ActiveTaskStatus)#1}>, (uint64_t)&v8, 0, v1);
      return (unsigned __int128 *)v7[0];
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t swift_task_pushTaskExecutorPreference(uint64_t a1, uint64_t a2)
{
  swift *Current;
  swift::concurrency::trace *v6;
  uint64_t v7;
  unsigned __int128 *v8;
  uint64_t v9;
  unint64_t v10;
  unsigned __int128 v11;
  unsigned int v12;
  void (**v13)(swift::concurrency::trace *);
  unint64_t i;
  uint64_t v15;
  uint64_t v16;
  unsigned __int128 v17;
  int v18;
  unsigned __int128 v20;

  swift_once();
  if (swift_task_pushTaskExecutorPreference::Override)
    return swift_task_pushTaskExecutorPreference::Override(a1, a2, swift_task_pushTaskExecutorPreferenceImpl);
  Current = (swift *)swift_task_getCurrent();
  if (!Current)
    return 0;
  v6 = Current;
  v7 = swift::_swift_task_alloc_specific(Current, (swift::AsyncTask *)0x28);
  *(_QWORD *)v7 = 5;
  *(_QWORD *)(v7 + 8) = 0;
  *(_BYTE *)(v7 + 16) = 0;
  v8 = (unsigned __int128 *)((char *)v6 + 96);
  *(_QWORD *)(v7 + 24) = a1;
  *(_QWORD *)(v7 + 32) = a2;
  do
  {
    v11 = __ldxp(v8);
    v9 = *((_QWORD *)&v11 + 1);
    v10 = v11;
  }
  while (__stxp(v11, v8));
  v20 = v11;
  v12 = v11;
  v13 = (void (**)(swift::concurrency::trace *))MEMORY[0x1E0DEEA68];
  if ((v11 & 0x200) != 0)
    goto LABEL_8;
LABEL_7:
  for (i = HIDWORD(v10); ; i = DWORD1(v20))
  {
    *(_QWORD *)(v7 + 8) = v9;
    if (*v13)
      (*v13)(v6);
    v15 = *((_QWORD *)&v20 + 1);
    v16 = v20;
    do
    {
      while (1)
      {
        v17 = __ldxp(v8);
        v9 = *((_QWORD *)&v17 + 1);
        v10 = v17;
        v18 = (_QWORD)v17 != v16;
        if (*((_QWORD *)&v17 + 1) != v15)
          ++v18;
        if (!v18)
          break;
        if (!__stlxp(v17, v8))
          goto LABEL_18;
      }
    }
    while (__stlxp(__PAIR128__(v7, v12 | 0x8000 | (i << 32)), v8));
LABEL_18:
    if ((_QWORD)v17 == v16 && *((_QWORD *)&v17 + 1) == v15)
      break;
    v20 = v17;
    v12 = v17;
    if ((v17 & 0x200) == 0)
      goto LABEL_7;
LABEL_8:
    waitForStatusRecordUnlockIfNotSelfLocked((uint64_t)v6, (unsigned int *)&v20);
    v9 = *((_QWORD *)&v20 + 1);
    v12 = v20;
  }
  swift::concurrency::trace::task_status_changed(v6, (swift::AsyncTask *)v12, (v12 >> 8) & 1, (v12 >> 10) & 1, 0, i > 3, (v12 >> 12) & 1);
  return v7;
}

unint64_t swift_task_pushTaskExecutorPreferenceImpl(uint64_t a1, uint64_t a2)
{
  swift *Current;
  swift::concurrency::trace *v5;
  unint64_t v6;
  unsigned __int128 *v7;
  unsigned __int128 v8;
  char v10;
  unsigned __int128 v11;

  Current = (swift *)swift_task_getCurrent();
  if (!Current)
    return 0;
  v5 = Current;
  v6 = swift::_swift_task_alloc_specific(Current, (swift::AsyncTask *)0x28);
  *(_QWORD *)v6 = 5;
  *(_QWORD *)(v6 + 8) = 0;
  *(_BYTE *)(v6 + 16) = 0;
  v7 = (unsigned __int128 *)((char *)v5 + 96);
  *(_QWORD *)(v6 + 24) = a1;
  *(_QWORD *)(v6 + 32) = a2;
  do
    v8 = __ldxp(v7);
  while (__stxp(v8, v7));
  v11 = v8;
  swift::addStatusRecord(v5, v6, (unsigned int *)&v11, __swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift_task_pushTaskExecutorPreferenceImpl(swift::TaskExecutorRef)::$_0>, (uint64_t)&v10);
  return v6;
}

void swift_task_popTaskExecutorPreference(uint64_t a1)
{
  uint64_t Current;
  swift::concurrency::trace *v3;
  unsigned __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int128 v7;
  uint64_t v8;
  int *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned __int128 v22;
  int v23;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  unsigned __int128 v28;
  int v29;
  int *v30;
  int *v31;
  uint64_t *v32;
  int v33;
  uint64_t v34;
  unsigned __int128 v35;
  _QWORD *v36;
  _QWORD v37[2];

  swift_once();
  if (swift_task_popTaskExecutorPreference::Override)
  {
    swift_task_popTaskExecutorPreference::Override(a1, swift_task_popTaskExecutorPreferenceImpl);
    return;
  }
  v34 = a1;
  v33 = 0;
  Current = swift_task_getCurrent();
  if (Current)
  {
    v3 = (swift::concurrency::trace *)Current;
    v31 = &v33;
    v32 = &v34;
    v30 = &v33;
    v4 = (unsigned __int128 *)(Current + 96);
    do
    {
      v7 = __ldxp(v4);
      v6 = *((_QWORD *)&v7 + 1);
      v5 = v7;
    }
    while (__stxp(v7, v4));
    v35 = v7;
    v37[0] = __swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::TaskStatusRecord *)>::callback_fn<swift_task_popTaskExecutorPreferenceImpl(swift::TaskExecutorPreferenceStatusRecord *)::$_0>;
    v37[1] = &v31;
    if ((v7 & 0x200) != 0)
    {
      if ((waitForStatusRecordUnlockIfNotSelfLocked(Current, (unsigned int *)&v35) & 1) != 0)
      {
        v8 = *((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
        {
          v9 = v31;
          v10 = v32;
          v11 = *((_QWORD *)&v35 + 1);
          v12 = v35;
          v13 = v35;
          v14 = DWORD1(v35);
          do
          {
            if (*(_BYTE *)v8 == 5)
            {
              v15 = (*v9)++;
              if (!v15 && *v10 == v8)
              {
                v16 = v11;
                while (v16)
                {
                  v17 = v16;
                  v16 = *(_QWORD *)(v16 + 8);
                  if (v16 == v8)
                  {
                    *(_QWORD *)(v17 + 8) = *(_QWORD *)(v8 + 8);
                    break;
                  }
                }
              }
            }
            v8 = *(_QWORD *)(v8 + 8);
          }
          while (v8);
          v18 = v11;
        }
        else
        {
          v18 = 0;
          v13 = v35;
          v14 = DWORD1(v35);
          v12 = v35;
          v11 = 0;
        }
        LODWORD(v19) = v13 & 0xFFFF7FFF;
        if (*v30 == 1)
          v19 = v19;
        else
          v19 = v13;
        do
        {
          while (1)
          {
            v22 = __ldxp(v4);
            v20 = *((_QWORD *)&v22 + 1);
            v21 = v22;
            v23 = (_QWORD)v22 != v12;
            if (*((_QWORD *)&v22 + 1) != v11)
              ++v23;
            if (!v23)
              break;
            if (!__stxp(v22, v4))
              goto LABEL_31;
          }
        }
        while (__stxp(__PAIR128__(v18, v19 | (v14 << 32)), v4));
LABEL_31:
        if ((_QWORD)v22 != v12 || *((_QWORD *)&v22 + 1) != v11)
        {
          do
          {
            v26 = v21;
            if (*v30 == 1)
              v19 = v21 & 0xFFFF7FFF;
            else
              v19 = v21;
            v27 = v21 & 0xFFFFFFFF00000000 | v19;
            do
            {
              while (1)
              {
                v28 = __ldxp(v4);
                v21 = v28;
                v29 = (_QWORD)v28 != v26;
                if (*((_QWORD *)&v28 + 1) != v20)
                  ++v29;
                if (!v29)
                  break;
                if (!__stxp(v28, v4))
                  goto LABEL_37;
              }
            }
            while (__stxp(__PAIR128__(v20, v27), v4));
LABEL_37:
            v25 = (_QWORD)v28 == v26 && *((_QWORD *)&v28 + 1) == v20;
            v20 = *((_QWORD *)&v28 + 1);
          }
          while (!v25);
          v14 = HIDWORD(v26);
        }
        swift::concurrency::trace::task_status_changed(v3, (swift::AsyncTask *)v19, (v19 >> 8) & 1, (v19 >> 10) & 1, 0, v14 > 3, (v19 >> 12) & 1);
        goto LABEL_54;
      }
      v6 = *((_QWORD *)&v35 + 1);
      v5 = v35;
    }
    v36 = v37;
    withStatusRecordLock(v3, v5, v6, (void (*)(uint64_t, unint64_t, uint64_t))__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus)>::callback_fn<swift::removeStatusRecordWhere(swift::AsyncTask *,swift::ActiveTaskStatus&,__swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::TaskStatusRecord *)>,__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>)::$_0>, (uint64_t)&v36, (void (*)(uint64_t, unint64_t, uint64_t, unsigned __int128 *))__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift_task_popTaskExecutorPreferenceImpl(swift::TaskExecutorPreferenceStatusRecord *)::$_1>, (uint64_t)&v30);
LABEL_54:
    swift_task_dealloc(v34);
  }
}

void swift_task_popTaskExecutorPreferenceImpl(uint64_t a1)
{
  swift::concurrency::trace *Current;
  unsigned __int128 *v2;
  unsigned __int128 v3;
  int *v4;
  _QWORD v5[2];
  int v6;
  uint64_t v7;
  unsigned __int128 v8;

  v7 = a1;
  v6 = 0;
  Current = (swift::concurrency::trace *)swift_task_getCurrent();
  if (Current)
  {
    v5[0] = &v6;
    v5[1] = &v7;
    v4 = &v6;
    v2 = (unsigned __int128 *)((char *)Current + 96);
    do
      v3 = __ldxp(v2);
    while (__stxp(v3, v2));
    v8 = v3;
    swift::removeStatusRecordWhere(Current, &v8, (unsigned int (*)(uint64_t, _QWORD, _QWORD, uint64_t))__swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::TaskStatusRecord *)>::callback_fn<swift_task_popTaskExecutorPreferenceImpl(swift::TaskExecutorPreferenceStatusRecord *)::$_0>, (uint64_t)v5, (void (*)(_QWORD))__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift_task_popTaskExecutorPreferenceImpl(swift::TaskExecutorPreferenceStatusRecord *)::$_1>, (uint64_t)&v4);
    swift_task_dealloc(v7);
  }
}

void *swift_taskGroup_attachChild::$_0::__invoke(swift_taskGroup_attachChild::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_taskGroup_attachChild(this);
  swift_taskGroup_attachChild::Override = result;
  return result;
}

swift::TaskGroup *__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus)>::callback_fn<BOOL withStatusRecordLock<swift_taskGroup_attachChildImpl(swift::TaskGroup *,swift::AsyncTask *)::$_0>(swift::AsyncTask *,swift_taskGroup_attachChildImpl(swift::TaskGroup *,swift::AsyncTask *)::$_0 &&,__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>)::{lambda(swift::ActiveTaskStatus)#1}>(swift::TaskGroup ****a1, __int16 a2)
{
  swift::TaskGroup ***v3;
  swift::TaskGroup *result;
  unsigned __int128 *v5;
  int v6;
  unsigned __int128 v7;
  int v8;
  unint64_t v9;

  v3 = *a1;
  swift::TaskGroup::addChildTask(***a1, *(*a1)[1]);
  result = **v3;
  v5 = (unsigned __int128 *)((char *)*v3[1] + 96);
  do
  {
    v7 = __ldxp(v5);
    v6 = v7;
  }
  while (__stxp(v7, v5));
  if ((a2 & 0x100) != 0
    || result && (result = (swift::TaskGroup *)swift::TaskGroup::isCancelled(result), (_DWORD)result))
  {
    v6 = v7 | 0x100;
  }
  v8 = a2;
  if (a2 == 33)
    v8 = 25;
  v9 = v6 & 0xFFFFFF00 | v8;
  do
    __ldxp(v5);
  while (__stxp(__PAIR128__(*((unint64_t *)&v7 + 1), v9), v5));
  return result;
}

void *swift_task_hasTaskGroupStatusRecord::$_0::__invoke(swift_task_hasTaskGroupStatusRecord::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_task_hasTaskGroupStatusRecord(this);
  swift_task_hasTaskGroupStatusRecord::Override = result;
  return result;
}

_BYTE ***__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus)>::callback_fn<BOOL withStatusRecordLock<swift_task_hasTaskGroupStatusRecordImpl(void)::$_0>(swift::AsyncTask *,swift_task_hasTaskGroupStatusRecordImpl(void)::$_0 &&,__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>)::{lambda(swift::ActiveTaskStatus)#1}>(_BYTE ***result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    while (*(_BYTE *)a3 != 2)
    {
      a3 = *(_QWORD *)(a3 + 8);
      if (!a3)
        return result;
    }
    ***result = 1;
  }
  return result;
}

void *swift_task_cancel::$_0::__invoke(swift_task_cancel::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_task_cancel(this);
  swift_task_cancel::Override = result;
  return result;
}

void __swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus)>::callback_fn<swift_task_cancelImpl(swift::AsyncTask *)::$_0>(int a1, int a2, swift::TaskGroupTaskStatusRecord *this)
{
  swift::TaskGroupTaskStatusRecord *v3;
  uint64_t Group;
  swift::TaskGroup *v5;
  int v6;
  swift::AsyncTask *i;

  if (this)
  {
    v3 = this;
    do
    {
      v6 = *(unsigned __int8 *)v3;
      switch(v6)
      {
        case 3:
          (*((void (**)(void))v3 + 2))();
          break;
        case 2:
          Group = swift::TaskGroupTaskStatusRecord::getGroup(v3);
          swift::_swift_taskGroup_cancelAllChildren(Group, v5);
          break;
        case 1:
          for (i = (swift::AsyncTask *)*((_QWORD *)v3 + 2); i; i = (swift::AsyncTask *)*((_QWORD *)i + 25))
          {
            swift_once();
            if (swift_task_cancel::Override)
              ((void (*)(swift::AsyncTask *, uint64_t (*)(swift::AsyncTask *)))swift_task_cancel::Override)(i, swift_task_cancelImpl);
            else
              swift_task_cancelImpl(i);
          }
          break;
      }
      v3 = (swift::TaskGroupTaskStatusRecord *)*((_QWORD *)v3 + 1);
    }
    while (v3);
  }
}

void *swift_task_escalate::$_0::__invoke(swift_task_escalate::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_task_escalate(this);
  swift_task_escalate::Override = result;
  return result;
}

void __swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus)>::callback_fn<swift_task_escalateImpl(swift::AsyncTask *,swift::JobPriority)::$_0>(unint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t j;
  uint64_t i;

  if (a3)
  {
    v3 = a3;
    do
    {
      v5 = **a1;
      switch(*(_BYTE *)v3)
      {
        case 0:
          v6 = *(_DWORD *)(v3 + 32);
          if (v6 == 4)
          {
            swift::swift_executor_escalate(*(unsigned __int8 **)(v3 + 16), *(_QWORD *)(v3 + 24), *(swift::AsyncTask **)(v3 + 40), **a1);
          }
          else if (v6 == 1)
          {
            v7 = *(_QWORD *)(v3 + 16);
            swift_once();
            if (swift_task_escalate::Override)
              ((void (*)(uint64_t, unint64_t, uint64_t (*)(_QWORD, _QWORD)))swift_task_escalate::Override)(v7, v5, swift_task_escalateImpl);
            else
              swift_task_escalateImpl(v7, v5);
          }
          break;
        case 1:
          for (i = *(_QWORD *)(v3 + 16); i; i = *(_QWORD *)(i + 200))
          {
            swift_once();
            if (swift_task_escalate::Override)
              ((void (*)(uint64_t, unint64_t, uint64_t (*)(_QWORD, _QWORD)))swift_task_escalate::Override)(i, v5, swift_task_escalateImpl);
            else
              swift_task_escalateImpl(i, v5);
          }
          break;
        case 2:
          for (j = *(_QWORD *)(v3 + 16); j; j = *(_QWORD *)(j + 200))
          {
            swift_once();
            if (swift_task_escalate::Override)
              ((void (*)(uint64_t, unint64_t, uint64_t (*)(_QWORD, _QWORD)))swift_task_escalate::Override)(j, v5, swift_task_escalateImpl);
            else
              swift_task_escalateImpl(j, v5);
          }
          break;
        case 4:
          (*(void (**)(_QWORD, unint64_t))(v3 + 16))(*(_QWORD *)(v3 + 24), **a1);
          break;
        default:
          break;
      }
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3);
  }
}

void *swift_task_getPreferredTaskExecutor::$_0::__invoke(swift_task_getPreferredTaskExecutor::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_task_getPreferredTaskExecutor(this);
  swift_task_getPreferredTaskExecutor::Override = result;
  return result;
}

void *swift_task_pushTaskExecutorPreference::$_0::__invoke(swift_task_pushTaskExecutorPreference::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_task_pushTaskExecutorPreference(this);
  swift_task_pushTaskExecutorPreference::Override = result;
  return result;
}

uint64_t __swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift_task_pushTaskExecutorPreferenceImpl(swift::TaskExecutorRef)::$_0>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  *a4 |= 0x8000uLL;
  return 1;
}

void *swift_task_popTaskExecutorPreference::$_0::__invoke(swift_task_popTaskExecutorPreference::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_task_popTaskExecutorPreference(this);
  swift_task_popTaskExecutorPreference::Override = result;
  return result;
}

BOOL __swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::TaskStatusRecord *)>::callback_fn<swift_task_popTaskExecutorPreferenceImpl(swift::TaskExecutorPreferenceStatusRecord *)::$_0>(int **a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  int v4;

  if (*a4 == 5 && (v4 = **a1, **a1 = v4 + 1, !v4))
    return *(_QWORD *)a1[1] == (_QWORD)a4;
  else
    return 0;
}

_DWORD **__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift_task_popTaskExecutorPreferenceImpl(swift::TaskExecutorPreferenceStatusRecord *)::$_1>(_DWORD **result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (**result == 1)
    *(_QWORD *)a4 = *(_DWORD *)a4 & 0xFFFF7FFF | ((unint64_t)*(unsigned int *)(a4 + 4) << 32);
  return result;
}

uint64_t **__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus)>::callback_fn<swift::removeStatusRecord(swift::AsyncTask *,swift::TaskStatusRecord *,swift::ActiveTaskStatus&,__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>)::$_0>(uint64_t **result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = **result;
  while (a3)
  {
    v4 = a3;
    a3 = *(_QWORD *)(a3 + 8);
    if (a3 == v3)
    {
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(v3 + 8);
      return result;
    }
  }
  return result;
}

uint64_t __swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus)>::callback_fn<swift::removeStatusRecordWhere(swift::AsyncTask *,swift::ActiveTaskStatus&,__swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::TaskStatusRecord *)>,__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>)::$_0>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a3)
  {
    v5 = result;
    v6 = a3;
    do
    {
      result = (**(uint64_t (***)(_QWORD, uint64_t, uint64_t, uint64_t))v5)(*(_QWORD *)(*(_QWORD *)v5 + 8), a2, a3, v6);
      if ((_DWORD)result)
      {
        v7 = a3;
        while (v7)
        {
          v8 = v7;
          v7 = *(_QWORD *)(v7 + 8);
          if (v7 == v6)
          {
            *(_QWORD *)(v8 + 8) = *(_QWORD *)(v6 + 8);
            break;
          }
        }
      }
      v6 = *(_QWORD *)(v6 + 8);
    }
    while (v6);
  }
  return result;
}

uint64_t __swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus)>::callback_fn<swift::updateStatusRecord(swift::AsyncTask *,swift::TaskStatusRecord *,__swift::__runtime::llvm::function_ref<void ()(void)>,swift::ActiveTaskStatus&,__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>)::$_0>(uint64_t a1)
{
  return (**(uint64_t (***)(_QWORD))a1)(*(_QWORD *)(*(_QWORD *)a1 + 8));
}

__n128 __swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus)>::callback_fn<BOOL withStatusRecordLock<swift::AsyncTask::getPreferredTaskExecutor(BOOL)::$_0>(swift::AsyncTask*,swift::AsyncTask::getPreferredTaskExecutor(BOOL)::$_0 &&,__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>)::{lambda(swift::ActiveTaskStatus)#1}>(__n128 ***a1, uint64_t a2, uint64_t a3)
{
  __n128 result;

  if (a3)
  {
    while (*(_BYTE *)a3 != 5)
    {
      a3 = *(_QWORD *)(a3 + 8);
      if (!a3)
        return result;
    }
    result = *(__n128 *)(a3 + 24);
    ***a1 = result;
  }
  return result;
}

uint64_t __swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift::AsyncTask::pushInitialTaskExecutorPreference(swift::TaskExecutorRef,BOOL)::$_0>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  *a4 |= 0x8000uLL;
  return 1;
}

void __swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus)>::callback_fn<BOOL withStatusRecordLock<swift::AsyncTask::dropInitialTaskExecutorPreferenceRecord(void)::$_0>(swift::AsyncTask*,swift::AsyncTask::dropInitialTaskExecutorPreferenceRecord(void)::$_0 &&,__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>)::{lambda(swift::ActiveTaskStatus)#1}>(uint64_t a1, int a2, swift::AsyncTask *a3, char *a4)
{
  _QWORD **v4;
  swift *v5;
  swift::AsyncTask *v6;
  swift::AsyncTask *v7;

  if (a3)
  {
    v4 = *(_QWORD ***)a1;
    v5 = *(swift **)(*(_QWORD *)a1 + 8);
    v6 = a3;
    while (*(_BYTE *)v6 != 5)
    {
      v6 = (swift::AsyncTask *)*((_QWORD *)v6 + 1);
      if (!v6)
        return;
    }
    if ((*((_BYTE *)v6 + 16) & 1) != 0)
      **v4 = *((_QWORD *)v6 + 3);
    while (a3)
    {
      v7 = a3;
      a3 = (swift::AsyncTask *)*((_QWORD *)a3 + 1);
      if (a3 == v6)
      {
        *((_QWORD *)v7 + 1) = *((_QWORD *)v6 + 1);
        break;
      }
    }
    swift::_swift_task_dealloc_specific(v5, v6, (const char *)a3, a4);
  }
}

uint64_t __swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus)>::callback_fn<BOOL withStatusRecordLock<swift::_swift_taskGroup_detachChild(swift::TaskGroup *,swift::AsyncTask *)::$_0>(swift::AsyncTask *,swift::_swift_taskGroup_detachChild(swift::TaskGroup *,swift::AsyncTask *)::$_0 &&,__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>)::{lambda(swift::ActiveTaskStatus)#1}>(uint64_t ***a1)
{
  return swift::TaskGroup::removeChildTask(***a1, (swift::AsyncTask *)*(*a1)[1]);
}

uint64_t swift::TaskGroupTaskStatusRecord::getGroup(swift::TaskGroupTaskStatusRecord *this)
{
  return (uint64_t)this - 8;
}

_QWORD *swift::TaskGroup::addChildTask(swift::TaskGroup *this, swift::AsyncTask *a2)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v3 = *((_QWORD *)this + 3);
  v4 = *((_QWORD *)this + 4);
  result = (_QWORD *)((char *)this + 24);
  result[1] = a2;
  v5 = (_QWORD *)(v4 + 200);
  if (v3)
    v6 = v5;
  else
    v6 = result;
  *v6 = a2;
  return result;
}

uint64_t swift::TaskGroup::removeChildTask(uint64_t this, swift::AsyncTask *a2)
{
  swift::AsyncTask *v2;
  swift::AsyncTask *v3;
  uint64_t v4;

  v2 = *(swift::AsyncTask **)(this + 24);
  if (v2 == a2)
  {
    v4 = *((_QWORD *)a2 + 25);
    *(_QWORD *)(this + 24) = v4;
    if (!v4)
      *(_QWORD *)(this + 32) = 0;
  }
  else
  {
    while (v2)
    {
      v3 = v2;
      v2 = (swift::AsyncTask *)*((_QWORD *)v2 + 25);
      if (v2 == a2)
      {
        *((_QWORD *)v3 + 25) = *((_QWORD *)a2 + 25);
        if (*(swift::AsyncTask **)(this + 32) == a2)
          *(_QWORD *)(this + 32) = v3;
        return this;
      }
    }
  }
  return this;
}

uint64_t swift::TaskGroup::isCancelled(swift::TaskGroup *this)
{
  return *((_QWORD *)this + 6) >> 63;
}

uint64_t swift::TaskGroup::offer(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
}

uint64_t swift::_swift_taskGroup_cancelAllChildren(uint64_t this, swift::TaskGroup *a2)
{
  uint64_t i;

  for (i = *(_QWORD *)(this + 24); i; i = *(_QWORD *)(i + 200))
    this = swift_task_cancel(i, a2);
  return this;
}

uint64_t swift_taskGroup_initialize(uint64_t a1, uint64_t a2)
{
  uint64_t *v5;
  uint64_t v6;

  swift_once();
  if (swift_taskGroup_initialize::Override)
    return swift_taskGroup_initialize::Override(a1, a2, swift_taskGroup_initializeImpl);
  swift_once();
  if (swift_taskGroup_initializeWithFlags::Override)
    return swift_taskGroup_initializeWithFlags::Override(0, a1, a2, swift_taskGroup_initializeWithFlagsImpl);
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 8) = 2;
  *(_QWORD *)(a1 + 112) = a2;
  *(_QWORD *)a1 = &off_1E2600598;
  v5 = &v6;
  v6 = a1;
  return swift::addStatusRecordToSelf(a1 + 8, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t *))__swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift_taskGroup_initializeWithFlagsImpl(unsigned long,swift::TaskGroup *,swift::TargetMetadata<swift::InProcess> const*)::$_0>, (uint64_t)&v5);
}

uint64_t swift_taskGroup_initializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t *v5;
  uint64_t v6;

  swift_once();
  if (swift_taskGroup_initializeWithFlags::Override)
    return swift_taskGroup_initializeWithFlags::Override(0, a1, a2, swift_taskGroup_initializeWithFlagsImpl);
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 8) = 2;
  *(_QWORD *)(a1 + 112) = a2;
  *(_QWORD *)a1 = &off_1E2600598;
  v5 = &v6;
  v6 = a1;
  return swift::addStatusRecordToSelf(a1 + 8, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t *))__swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift_taskGroup_initializeWithFlagsImpl(unsigned long,swift::TaskGroup *,swift::TargetMetadata<swift::InProcess> const*)::$_0>, (uint64_t)&v5);
}

uint64_t swift_taskGroup_initializeWithFlags(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (**v7)(_anonymous_namespace_::DiscardingTaskGroup *__hidden);
  uint64_t *v8;
  uint64_t v9;

  swift_once();
  if (swift_taskGroup_initializeWithFlags::Override)
    return swift_taskGroup_initializeWithFlags::Override(a1, a2, a3, swift_taskGroup_initializeWithFlagsImpl);
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 40) = 0;
  v7 = &off_1E2600518;
  *(_QWORD *)(a2 + 8) = 2;
  if ((a1 & 0x100) == 0)
    v7 = &off_1E2600598;
  *(_QWORD *)(a2 + 112) = a3;
  *(_QWORD *)a2 = v7;
  v8 = &v9;
  v9 = a2;
  return swift::addStatusRecordToSelf(a2 + 8, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t *))__swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift_taskGroup_initializeWithFlagsImpl(unsigned long,swift::TaskGroup *,swift::TargetMetadata<swift::InProcess> const*)::$_0>, (uint64_t)&v8);
}

uint64_t swift_taskGroup_initializeWithFlagsImpl(__int16 a1, uint64_t a2, uint64_t a3)
{
  void (**v3)(_anonymous_namespace_::DiscardingTaskGroup *__hidden);
  uint64_t *v5;
  uint64_t v6;

  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v3 = &off_1E2600518;
  *(_DWORD *)(a2 + 40) = 0;
  if ((a1 & 0x100) == 0)
    v3 = &off_1E2600598;
  *(_QWORD *)(a2 + 112) = a3;
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = 2;
  v5 = &v6;
  v6 = a2;
  return swift::addStatusRecordToSelf(a2 + 8, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t *))__swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift_taskGroup_initializeWithFlagsImpl(unsigned long,swift::TaskGroup *,swift::TargetMetadata<swift::InProcess> const*)::$_0>, (uint64_t)&v5);
}

uint64_t swift_taskGroup_destroy(uint64_t a1)
{
  swift_once();
  if (swift_taskGroup_destroy::Override)
    return swift_taskGroup_destroy::Override(a1, swift_taskGroup_destroyImpl);
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t swift_taskGroup_destroyImpl(swift::TaskGroup *a1)
{
  return (*(uint64_t (**)(swift::TaskGroup *))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t swift_taskGroup_wait_next_throwing(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  swift_once();
  if (swift_taskGroup_wait_next_throwing::Override)
    return swift_taskGroup_wait_next_throwing::Override(a1, a2, a3, a4, swift_taskGroup_wait_next_throwingImpl);
  else
    return swift_taskGroup_wait_next_throwingImpl(a1, a2, a3, a4);
}

uint64_t swift_taskGroup_wait_next_throwingImpl(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  unsigned __int128 *Current;
  os_unfair_lock_s *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  const char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void **v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  swift::AsyncTask *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v42;
  unsigned __int128 *v43;
  unsigned __int128 v44;
  swift::AsyncTask *v45;
  unint64_t v46;
  swift *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unsigned __int128 v54;
  unint64_t v55;

  Current = (unsigned __int128 *)swift_task_getCurrent();
  *((_QWORD *)Current + 7) = task_group_wait_resume_adapter;
  *((_QWORD *)Current + 8) = a4;
  *a4 = v4;
  a4[1] = a3;
  a4[2] = 0;
  a4[3] = a1;
  v10 = (os_unfair_lock_s *)(a2 + 40);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 40));
  v11 = (unint64_t *)(a2 + 48);
  do
  {
    v12 = __ldaxr(v11);
    v13 = v12 | 0x4000000000000000;
  }
  while (__stxr(v12 | 0x4000000000000000, v11));
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  v15 = 0x7FFFFFFFLL;
  if (v14)
    v15 = 0x3FFFFFFFFFFFFFFFLL;
  if ((v15 & v12) == 0)
  {
    do
      v39 = __ldxr(v11);
    while (__stlxr(v39 & 0xBFFFFFFFFFFFFFFFLL, v11));
    goto LABEL_24;
  }
  v16 = (unint64_t *)(a2 + 56);
  v17 = atomic_load((unint64_t *)(a2 + 56));
  if ((v12 & 0x3FFFFFFF80000000) != 0)
  {
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    v21 = 0xBFFFFFFF7FFFFFFFLL;
    if (v18)
      v21 = 0xBFFFFFFFFFFFFFFFLL;
    v22 = v21 + v13;
    do
    {
      v23 = __ldaxr(v11);
      if (v23 != v13)
      {
        __clrex();
        goto LABEL_27;
      }
    }
    while (__stlxr(v22, v11));
    v24 = *(_QWORD *)(a2 + 104);
    if (v24)
    {
      v25 = *(void ***)(a2 + 72);
      v26 = (*(_QWORD **)((char *)v25 + ((*(_QWORD *)(a2 + 96) >> 6) & 0x3FFFFFFFFFFFFF8)))[*(_QWORD *)(a2 + 96) & 0x1FFLL];
      v27 = *(_QWORD *)(a2 + 96) + 1;
      *(_QWORD *)(a2 + 96) = v27;
      *(_QWORD *)(a2 + 104) = v24 - 1;
      if (v27 >= 0x400)
      {
        operator delete(*v25);
        *(_QWORD *)(a2 + 72) += 8;
        *(_QWORD *)(a2 + 96) -= 512;
      }
      v28 = v26 & 3;
      if (v28 == 1)
        swift::swift_Concurrency_fatalError(0, "accumulating task group should never use raw-errors!", v19, v20);
      v29 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
      v30 = v29[8];
      v31 = 52;
      if ((v30 & 0x1000000) == 0)
        v31 = 48;
      if (v28)
      {
        v32 = (uint64_t)&v29[v31] + ((v30 >> 23) & 8);
        if (v28 == 3)
        {
          v33 = *(_QWORD *)(v32 + 16);
          if (*MEMORY[0x1E0DEEA60])
            ((void (*)(unsigned int *))*MEMORY[0x1E0DEEA60])(v29);
          os_unfair_lock_unlock((os_unfair_lock_t)(a2 + 40));
          a4[2] = v33;
          MEMORY[0x18D78FED8](v33);
        }
        else
        {
          v49 = *(_QWORD *)(v32 + 8);
          v50 = *(unsigned __int8 *)(*(_QWORD *)(v49 - 8) + 80);
          v51 = (v50 + v32 + 24) & ~v50;
          if (*MEMORY[0x1E0DEEA60])
            ((void (*)(unsigned int *))*MEMORY[0x1E0DEEA60])(v29);
          os_unfair_lock_unlock((os_unfair_lock_t)(a2 + 40));
          v52 = a4[3];
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v52, v51, v49);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v52, 0, 1, v49);
        }
        swift::_swift_taskGroup_detachChild((swift *)a2, (swift::TaskGroup *)v29, v34, v35, v36, v37, v38);
        swift_release();
        return (*((uint64_t (**)(void))Current + 7))();
      }
    }
LABEL_24:
    v40 = *(_QWORD *)(a2 + 112);
    os_unfair_lock_unlock(v10);
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(a4[3], 1, 1, v40);
    return (*((uint64_t (**)(void))Current + 7))();
  }
LABEL_27:
  if (*MEMORY[0x1E0DEEA68])
    ((void (*)(unsigned __int128 *))*MEMORY[0x1E0DEEA68])(Current);
  v42 = swift::_swift_task_alloc_specific((swift *)Current, (swift::AsyncTask *)0x30);
  *(_QWORD *)v42 = 0;
  *(_QWORD *)(v42 + 8) = 0;
  *(_DWORD *)(v42 + 32) = 3;
  *(_QWORD *)(v42 + 40) = Current;
  *(_QWORD *)(v42 + 16) = a2;
  *((_QWORD *)Current + 20) = v42;
  v43 = Current + 6;
  v55 = v42;
  do
    v44 = __ldxp(v43);
  while (__stxp(v44, v43));
  v54 = v44;
  v53 = &v55;
  swift::addStatusRecord((swift::concurrency::trace *)Current, v42, (unsigned int *)&v54, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t *))__swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift::AsyncTask::flagAsSuspended(swift::TaskDependencyStatusRecord *)::{lambda(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)#1}>, (uint64_t)&v53);
  if ((v54 & 0x400) != 0)
    dispatch_lock_override_end();
  swift_task_exitThreadLocalContext();
  swift::restoreTaskVoucher((swift *)Current, v45);
  v46 = __ldaxr(v16);
  if (v46 != v17)
  {
    __clrex();
    while (1)
    {
LABEL_41:
      v48 = __ldaxr(v16);
      if (v48 == v46)
      {
        if (!__stlxr((unint64_t)Current, v16))
          goto LABEL_38;
      }
      else
      {
        __clrex();
      }
      v46 = v48;
    }
  }
  if (__stlxr((unint64_t)Current, v16))
    goto LABEL_41;
LABEL_38:
  os_unfair_lock_unlock((os_unfair_lock_t)(a2 + 40));
  return swift::_swift_task_clearCurrent(v47);
}

uint64_t swift_taskGroup_isEmpty(_QWORD *a1)
{
  uint64_t v3;
  int v4;
  uint64_t v5;

  swift_once();
  if (swift_taskGroup_isEmpty::Override)
    return swift_taskGroup_isEmpty::Override(a1, swift_taskGroup_isEmptyImpl);
  v3 = a1[6];
  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  v5 = 0x7FFFFFFFLL;
  if (v4)
    v5 = 0x3FFFFFFFFFFFFFFFLL;
  return (v5 & v3) == 0;
}

BOOL swift_taskGroup_isEmptyImpl(swift::TaskGroup *a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  v1 = *((_QWORD *)a1 + 6);
  v2 = (*(uint64_t (**)(swift::TaskGroup *))(*(_QWORD *)a1 + 24))(a1);
  v3 = 0x7FFFFFFFLL;
  if (v2)
    v3 = 0x3FFFFFFFFFFFFFFFLL;
  return (v3 & v1) == 0;
}

uint64_t swift_taskGroup_isCancelled(uint64_t a1)
{
  swift_once();
  if (swift_taskGroup_isCancelled::Override)
    return swift_taskGroup_isCancelled::Override(a1, swift_taskGroup_isCancelledImpl);
  else
    return *(_QWORD *)(a1 + 48) >> 63;
}

uint64_t swift_taskGroup_isCancelledImpl(swift::TaskGroup *a1)
{
  return *((_QWORD *)a1 + 6) >> 63;
}

void swift_taskGroup_cancelAll(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  swift::AsyncTask *i;

  swift_once();
  if (swift_taskGroup_cancelAll::Override)
  {
    swift_taskGroup_cancelAll::Override(a1, swift_taskGroup_cancelAllImpl);
  }
  else
  {
    v2 = (unint64_t *)(a1 + 48);
    do
      v3 = __ldxr(v2);
    while (__stxr(v3 | 0x8000000000000000, v2));
    if ((v3 & 0x8000000000000000) == 0)
    {
      for (i = *(swift::AsyncTask **)(a1 + 24); i; i = (swift::AsyncTask *)*((_QWORD *)i + 25))
        swift_task_cancel(i);
    }
  }
}

void swift_taskGroup_cancelAllImpl(swift::TaskGroup *a1)
{
  unint64_t *v1;
  unint64_t v2;
  swift::AsyncTask *i;

  v1 = (unint64_t *)((char *)a1 + 48);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 | 0x8000000000000000, v1));
  if ((v2 & 0x8000000000000000) == 0)
  {
    for (i = (swift::AsyncTask *)*((_QWORD *)a1 + 3); i; i = (swift::AsyncTask *)*((_QWORD *)i + 25))
      swift_task_cancel(i);
  }
}

uint64_t swift_taskGroup_addPending(swift::TaskGroup *a1, char a2)
{
  swift_once();
  if (swift_taskGroup_addPending::Override)
    return swift_taskGroup_addPending::Override(a1, a2 & 1, swift_taskGroup_addPendingImpl);
  else
    return swift_taskGroup_addPendingImpl(a1, a2 & 1);
}

BOOL swift_taskGroup_addPendingImpl(swift::TaskGroup *a1, char a2)
{
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  const char *v12;
  const std::string::value_type *v13;
  const std::string::value_type *v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  int v17;
  uint64_t v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  _OWORD *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t i;
  std::string *v25;
  std::string *v26;
  std::string::size_type v27;
  const std::string::value_type *v28;
  std::string::size_type v29;
  const char *v30;
  std::string *v31;
  int shouldReportFatalErrorsToDebugger;
  char *v33;
  size_t v34;
  _BYTE v35[32];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  std::string v40;
  char *v41;
  std::string v42;

  v4 = (unint64_t *)((char *)a1 + 48);
  do
  {
    v5 = __ldxr(v4);
    v6 = v5 + 1;
  }
  while (__stxr(v5 + 1, v4));
  if ((*(unsigned int (**)(swift::TaskGroup *))(*(_QWORD *)a1 + 24))(a1))
    v7 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v7 = 0x7FFFFFFFLL;
  v8 = v7 & v6;
  if ((*(unsigned int (**)(swift::TaskGroup *))(*(_QWORD *)a1 + 24))(a1))
    v9 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v9 = 0x7FFFFFFFLL;
  if (v8 == v9)
  {
    if ((*(unsigned int (**)(swift::TaskGroup *))(*(_QWORD *)a1 + 24))(a1))
      v12 = "Discarding";
    else
      v12 = "";
    memset(&v40, 0, sizeof(v40));
    std::string::append(&v40, "TaskGroupStatus{ ");
    std::string::append(&v40, "C:");
    if (v6 >= 0)
      v13 = "n";
    else
      v13 = "y";
    std::string::append(&v40, v13);
    std::string::append(&v40, " W:");
    if ((v6 & 0x4000000000000000) != 0)
      v14 = "y";
    else
      v14 = "n";
    std::string::append(&v40, v14);
    if (((*(uint64_t (**)(swift::TaskGroup *))(*(_QWORD *)a1 + 24))(a1) & 1) == 0)
    {
      std::string::append(&v40, " R:");
      std::to_string((std::string *)v35, ((unint64_t)v6 >> 31) & 0x7FFFFFFF);
      v15 = v35[23] >= 0 ? v35 : *(const std::string::value_type **)v35;
      v16 = v35[23] >= 0 ? v35[23] : *(_QWORD *)&v35[8];
      std::string::append(&v40, v15, v16);
      if ((v35[23] & 0x80000000) != 0)
        operator delete(*(void **)v35);
    }
    std::string::append(&v40, " P:");
    v17 = (*(uint64_t (**)(swift::TaskGroup *))(*(_QWORD *)a1 + 24))(a1);
    v18 = 0x7FFFFFFFLL;
    if (v17)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    std::to_string((std::string *)v35, v18 & v6);
    if (v35[23] >= 0)
      v19 = v35;
    else
      v19 = *(const std::string::value_type **)v35;
    if (v35[23] >= 0)
      v20 = v35[23];
    else
      v20 = *(_QWORD *)&v35[8];
    std::string::append(&v40, v19, v20);
    if ((v35[23] & 0x80000000) != 0)
      operator delete(*(void **)v35);
    v21 = operator new(0x48uLL);
    v22 = 0;
    v42.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
    *(_OWORD *)&v42.__r_.__value_.__r.__words[1] = xmmword_18D5BEC50;
    *(_QWORD *)&v23 = 0x3030303030303030;
    *((_QWORD *)&v23 + 1) = 0x3030303030303030;
    *v21 = v23;
    v21[1] = v23;
    v21[2] = v23;
    v21[3] = v23;
    *((_BYTE *)v21 + 64) = 0;
    for (i = 63; ; --i)
    {
      if ((((unint64_t)v6 >> v22) & 1) != 0)
      {
        if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v25 = &v42;
        else
          v25 = (std::string *)v42.__r_.__value_.__r.__words[0];
        v25->__r_.__value_.__s.__data_[i] = 49;
      }
      if (++v22 == 64)
      {
        v26 = std::string::insert(&v42, 0, " ");
        v27 = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)v35 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        *(_QWORD *)&v35[16] = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        if (v35[23] >= 0)
          v28 = v35;
        else
          v28 = *(const std::string::value_type **)v35;
        if (v35[23] >= 0)
          v29 = v35[23];
        else
          v29 = *(_QWORD *)&v35[8];
        std::string::append(&v40, v28, v29);
        if ((v35[23] & 0x80000000) != 0)
          operator delete(*(void **)v35);
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v42.__r_.__value_.__l.__data_);
        v41 = 0;
        std::string::append(&v40, " }");
        if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v31 = &v40;
        else
          v31 = (std::string *)v40.__r_.__value_.__r.__words[0];
        swift_asprintf(&v41, v30, v12, a1, v31);
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v40.__r_.__value_.__l.__data_);
        shouldReportFatalErrorsToDebugger = _swift_shouldReportFatalErrorsToDebugger();
        v33 = v41;
        if (shouldReportFatalErrorsToDebugger)
        {
          v36 = xmmword_1E26005E8;
          v37 = unk_1E26005F8;
          v38 = xmmword_1E2600608;
          v39 = 0;
          *(_OWORD *)v35 = xmmword_1E26005C8;
          *(_OWORD *)&v35[16] = *(_OWORD *)&off_1E26005D8;
          MEMORY[0x18D78FB60](1, v41, v35);
        }
        v34 = strlen(v33);
        write(2, v33, v34);
        asl_log(0, 0, 3, "%s", v33);
        free(v33);
        abort();
      }
    }
  }
  if ((a2 & 1) == 0 && v6 < 0)
  {
    do
    {
      v10 = __ldxr(v4);
      v6 = v10 - 1;
    }
    while (__stxr(v10 - 1, v4));
  }
  return v6 >= 0;
}

void swift_taskGroup_waitAll(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  swift_once();
  if (swift_taskGroup_waitAll::Override)
    swift_taskGroup_waitAll::Override(a1, a2, a3, a4, a5, swift_taskGroup_waitAllImpl);
  else
    swift_taskGroup_waitAllImpl(a1, a2, a3, a4, a5);
}

void swift_taskGroup_waitAllImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  unsigned __int128 *Current;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unsigned __int128 *v20;
  unsigned __int128 v21;
  swift::AsyncTask *v22;
  swift *v23;
  unint64_t v24;
  uint64_t v25;
  void **v26;
  uint64_t v27;
  unint64_t v28;
  swift::TaskGroup *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  swift::AsyncTask *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unsigned __int128 v43;
  unint64_t v44;

  Current = (unsigned __int128 *)swift_task_getCurrent();
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 40));
  *((_QWORD *)Current + 7) = task_group_wait_resume_adapter;
  *((_QWORD *)Current + 8) = a5;
  *a5 = v5;
  a5[1] = a4;
  a5[2] = 0;
  a5[3] = a1;
  v12 = *(_QWORD *)(a2 + 112);
  v13 = (unint64_t *)(a2 + 48);
  v14 = atomic_load((unint64_t *)(a2 + 48));
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  v16 = 0x7FFFFFFFLL;
  if (v15)
    v16 = 0x3FFFFFFFFFFFFFFFLL;
  if ((v16 & v14) == 0)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
    {
      v25 = *(_QWORD *)(a2 + 104);
      if (v25)
      {
        v26 = *(void ***)(a2 + 72);
        v27 = (*(_QWORD **)((char *)v26 + ((*(_QWORD *)(a2 + 96) >> 6) & 0x3FFFFFFFFFFFFF8)))[*(_QWORD *)(a2 + 96) & 0x1FFLL];
        v28 = *(_QWORD *)(a2 + 96) + 1;
        *(_QWORD *)(a2 + 96) = v28;
        *(_QWORD *)(a2 + 104) = v25 - 1;
        if (v28 >= 0x400)
        {
          operator delete(*v26);
          *(_QWORD *)(a2 + 72) += 8;
          *(_QWORD *)(a2 + 96) -= 512;
        }
        if ((v27 & 3) == 1)
        {
          v29 = 0;
          v33 = v27 & 0xFFFFFFFFFFFFFFFCLL;
          goto LABEL_38;
        }
        if ((v27 & 3) == 3)
        {
          v29 = (swift::TaskGroup *)(v27 & 0xFFFFFFFFFFFFFFFCLL);
          v30 = *(unsigned int *)((v27 & 0xFFFFFFFFFFFFFFFCLL) + 32);
          v31 = 208;
          if ((v30 & 0x1000000) == 0)
            v31 = 192;
          v32 = (uint64_t)v29 + v31 + ((v30 >> 23) & 8);
          v12 = *(_QWORD *)(v32 + 8);
          v33 = *(_QWORD *)(v32 + 16);
LABEL_38:
          v36 = 3;
          if (!a3)
          {
LABEL_39:
            if (v36)
            {
              a5[2] = v33;
              MEMORY[0x18D78FED8](v33);
            }
            else
            {
              (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a5[3], 1, 1, v12);
            }
            goto LABEL_42;
          }
LABEL_36:
          a5[2] = a3;
          MEMORY[0x18D78FED8](a3, v33);
LABEL_42:
          if (v29)
          {
            swift::_swift_taskGroup_detachChild((swift *)a2, v29, v37, v38, v39, v40, v41);
            swift_release();
          }
          os_unfair_lock_unlock((os_unfair_lock_t)(a2 + 40));
          (*((void (**)(void))Current + 7))();
          return;
        }
      }
    }
    v33 = 0;
    v29 = 0;
    v36 = 0;
    if (!a3)
      goto LABEL_39;
    goto LABEL_36;
  }
  if (a3 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) && !*(_QWORD *)(a2 + 104))
  v17 = (unint64_t *)(a2 + 56);
  v18 = atomic_load((unint64_t *)(a2 + 56));
  if (*MEMORY[0x1E0DEEA68])
    ((void (*)(unsigned __int128 *))*MEMORY[0x1E0DEEA68])(Current);
  v19 = swift::_swift_task_alloc_specific((swift *)Current, (swift::AsyncTask *)0x30);
  *(_QWORD *)v19 = 0;
  *(_QWORD *)(v19 + 8) = 0;
  *(_DWORD *)(v19 + 32) = 3;
  *(_QWORD *)(v19 + 40) = Current;
  *(_QWORD *)(v19 + 16) = a2;
  *((_QWORD *)Current + 20) = v19;
  v20 = Current + 6;
  v44 = v19;
  do
    v21 = __ldxp(v20);
  while (__stxp(v21, v20));
  v43 = v21;
  v42 = &v44;
  swift::addStatusRecord((swift::concurrency::trace *)Current, v19, (unsigned int *)&v43, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t *))__swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift::AsyncTask::flagAsSuspended(swift::TaskDependencyStatusRecord *)::{lambda(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)#1}>, (uint64_t)&v42);
  if ((v43 & 0x400) != 0)
    dispatch_lock_override_end();
  swift_task_exitThreadLocalContext();
  v23 = (swift *)swift::restoreTaskVoucher((swift *)Current, v22);
  v24 = __ldaxr(v17);
  if (v24 != v18)
  {
    __clrex();
    while (1)
    {
LABEL_32:
      v35 = __ldaxr(v17);
      if (v35 == v24)
      {
        if (!__stlxr((unint64_t)Current, v17))
          goto LABEL_28;
      }
      else
      {
        __clrex();
      }
      v24 = v35;
    }
  }
  if (__stlxr((unint64_t)Current, v17))
    goto LABEL_32;
  do
LABEL_28:
    v34 = __ldxr(v13);
  while (__stlxr(v34 | 0x4000000000000000, v13));
  swift::_swift_task_clearCurrent(v23);
  os_unfair_lock_unlock((os_unfair_lock_t)(a2 + 40));
}

void swift_task_cancel_group_child_tasks(uint64_t a1)
{
  swift::AsyncTask *i;

  swift_once();
  if (swift_task_cancel_group_child_tasks::Override)
  {
    swift_task_cancel_group_child_tasks::Override(a1, swift_task_cancel_group_child_tasksImpl);
  }
  else
  {
    for (i = *(swift::AsyncTask **)(a1 + 24); i; i = (swift::AsyncTask *)*((_QWORD *)i + 25))
      swift_task_cancel(i);
  }
}

void swift_task_cancel_group_child_tasksImpl(swift::TaskGroup *a1)
{
  swift::AsyncTask *i;

  for (i = (swift::AsyncTask *)*((_QWORD *)a1 + 3); i; i = (swift::AsyncTask *)*((_QWORD *)i + 25))
    swift_task_cancel(i);
}

void *swift_taskGroup_initialize::$_0::__invoke(swift_taskGroup_initialize::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_taskGroup_initialize(this);
  swift_taskGroup_initialize::Override = result;
  return result;
}

void *swift_taskGroup_initializeWithFlags::$_0::__invoke(swift_taskGroup_initializeWithFlags::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_taskGroup_initializeWithFlags(this);
  swift_taskGroup_initializeWithFlags::Override = result;
  return result;
}

void `anonymous namespace'::DiscardingTaskGroup::~DiscardingTaskGroup(_anonymous_namespace_::DiscardingTaskGroup *this)
{
  JUMPOUT(0x18D78FAD0);
}

uint64_t `anonymous namespace'::DiscardingTaskGroup::destroy(_anonymous_namespace_::DiscardingTaskGroup *this, uint64_t a2, uint64_t a3)
{
  swift::removeStatusRecordFromSelf((uint64_t)this + 8, 0, a3);
  return (**(uint64_t (***)(_anonymous_namespace_::DiscardingTaskGroup *))this)(this);
}

uint64_t `anonymous namespace'::DiscardingTaskGroup::isDiscardingResults(_anonymous_namespace_::DiscardingTaskGroup *this)
{
  return 1;
}

void `anonymous namespace'::DiscardingTaskGroup::offer(unint64_t *a1, unsigned int *a2, uint64_t a3)
{
  os_unfair_lock_s *v6;
  swift::AsyncTask *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  swift::AsyncTask *i;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  void **v27;
  uint64_t v28;
  unint64_t v29;
  const char *v30;
  char *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  void **v35;
  unint64_t v36;
  const char *v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  swift::AsyncTask *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  swift::AsyncTask *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;

  v6 = (os_unfair_lock_s *)(a1 + 5);
  os_unfair_lock_lock((os_unfair_lock_t)a1 + 10);
  v12 = a1 + 6;
  v13 = atomic_load(a1 + 6);
  v60 = v13;
  v14 = *(_QWORD *)(a3 - 8);
  do
  {
    v15 = __ldxr(v12);
    v16 = v15 - 1;
  }
  while (__stlxr(v15 - 1, v12));
  if (v14)
  {
    do
      v17 = __ldxr(v12);
    while (__stxr(v17 | 0x8000000000000000, v12));
    if ((v17 & 0x8000000000000000) == 0)
    {
      for (i = (swift::AsyncTask *)a1[3]; i; i = (swift::AsyncTask *)*((_QWORD *)i + 25))
        swift_task_cancel(i);
    }
    if ((v16 & 0x4000000000000000) == 0)
      goto LABEL_61;
    v19 = (*(uint64_t (**)(unint64_t *))(*a1 + 24))(a1);
    v20 = 0x7FFFFFFFLL;
    if (v19)
      v20 = 0x3FFFFFFFFFFFFFFFLL;
    if ((v20 & v16) != 0)
    {
LABEL_61:
      if (!a1[13])
      {
        (*(void (**)(unint64_t *, unsigned int *, uint64_t))(*a1 + 40))(a1, a2, 1);
LABEL_19:
        os_unfair_lock_unlock(v6);
        return;
      }
LABEL_18:
      swift::_swift_taskGroup_detachChild((swift *)a1, (swift::TaskGroup *)a2, v7, (uint64_t)v8, v9, v10, v11);
      goto LABEL_19;
    }
    v23 = a1 + 7;
    v24 = atomic_load(a1 + 7);
    do
    {
      v25 = __ldaxr(v23);
      if (v25 != v24)
        goto LABEL_57;
    }
    while (__stlxr(0, v23));
    v26 = a1[13];
    if (v26)
    {
      v27 = (void **)a1[9];
      v28 = (*(_QWORD **)((char *)v27 + ((a1[12] >> 6) & 0x3FFFFFFFFFFFFF8)))[a1[12] & 0x1FF];
      v29 = a1[12] + 1;
      a1[12] = v29;
      a1[13] = v26 - 1;
      if (v29 >= 0x400)
      {
        operator delete(*v27);
        a1[9] += 8;
        a1[12] -= 512;
      }
      swift::_swift_taskGroup_detachChild((swift *)a1, (swift::TaskGroup *)a2, v7, (uint64_t)v8, v9, v10, v11);
      if ((v28 & 3) != 3)
      {
        if ((v28 & 3) != 1)
          swift::swift_Concurrency_fatalError(0, "only errors can be stored by a discarding task group, yet it wasn't an error! 1", v30, v31);
LABEL_37:
        *(_QWORD *)(*(_QWORD *)(v24 + 64) + 16) = v28 & 0xFFFFFFFFFFFFFFFCLL;
        MEMORY[0x18D78FED8]();
        goto LABEL_49;
      }
      v46 = *(unsigned int *)((v28 & 0xFFFFFFFFFFFFFFFCLL) + 32);
      v47 = 208;
      if ((v46 & 0x1000000) == 0)
        v47 = 192;
      *(_QWORD *)(*(_QWORD *)(v24 + 64) + 16) = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFFFFCLL) + v47 + ((v46 >> 23) & 8) + 16);
      MEMORY[0x18D78FED8]();
      swift::_swift_taskGroup_detachChild((swift *)a1, (swift::TaskGroup *)(v28 & 0xFFFFFFFFFFFFFFFCLL), v48, v49, v50, v51, v52);
      if ((*(unsigned int (**)(unint64_t *))(*a1 + 24))(a1))
        swift_release();
LABEL_49:
      if (*MEMORY[0x1E0DEEA60])
        ((void (*)(uint64_t))*MEMORY[0x1E0DEEA60])(v24);
      os_unfair_lock_unlock(v6);
      if (v24)
      {
        v58 = v24;
LABEL_53:
        swift::AsyncTask::flagAsAndEnqueueOnExecutor(v58, 0, 0);
        return;
      }
      return;
    }
    swift::_swift_taskGroup_detachChild((swift *)a1, (swift::TaskGroup *)a2, v7, (uint64_t)v8, v9, v10, v11);
    v39 = a2[8];
    v40 = 52;
    if ((v39 & 0x1000000) == 0)
      v40 = 48;
    *(_QWORD *)(*(_QWORD *)(v24 + 64) + 16) = *(_QWORD *)((char *)&a2[v40 + 4] + ((v39 >> 23) & 8));
    MEMORY[0x18D78FED8]();
LABEL_48:
    swift::_swift_taskGroup_detachChild((swift *)a1, (swift::TaskGroup *)a2, v41, v42, v43, v44, v45);
    (*(void (**)(unint64_t *))(*a1 + 24))(a1);
    goto LABEL_49;
  }
  if ((v16 & 0x4000000000000000) == 0)
    goto LABEL_18;
  v21 = (*(uint64_t (**)(unint64_t *))(*a1 + 24))(a1);
  v22 = 0x7FFFFFFFLL;
  if (v21)
    v22 = 0x3FFFFFFFFFFFFFFFLL;
  if ((v22 & v16) != 0)
    goto LABEL_18;
  v32 = a1 + 7;
  v24 = atomic_load(a1 + 7);
  do
  {
    v33 = __ldaxr(v32);
    if (v33 != v24)
    {
LABEL_57:
      __clrex();
      swift::swift_Concurrency_fatalError(0, "Failed to claim waitingTask!", (const char *)v7, v8);
    }
  }
  while (__stlxr(0, v32));
  v34 = a1[13];
  if (!v34)
  {
    v53 = a2[8];
    v54 = 52;
    if ((v53 & 0x1000000) == 0)
      v54 = 48;
    v55 = (uint64_t)&a2[v54] + ((v53 >> 23) & 8);
    v56 = *(_QWORD *)(v55 + 8);
    v57 = *(_QWORD *)(*(_QWORD *)(v24 + 64) + 24);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 16))(v57, (v55 + *(unsigned __int8 *)(*(_QWORD *)(v56 - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v56 - 8) + 80), v56);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v57, 0, 1, v56);
    goto LABEL_48;
  }
  v35 = (void **)a1[9];
  v28 = (*(_QWORD **)((char *)v35 + ((a1[12] >> 6) & 0x3FFFFFFFFFFFFF8)))[a1[12] & 0x1FF];
  v36 = a1[12] + 1;
  a1[12] = v36;
  a1[13] = v34 - 1;
  if (v36 >= 0x400)
  {
    operator delete(*v35);
    a1[9] += 8;
    a1[12] -= 512;
  }
  swift::_swift_taskGroup_detachChild((swift *)a1, (swift::TaskGroup *)a2, v7, (uint64_t)v8, v9, v10, v11);
  if ((v28 & 3) != 3)
  {
    if ((v28 & 3) != 1)
      swift::swift_Concurrency_fatalError(0, "only errors can be stored by a discarding task group, yet it wasn't an error! 2", v37, v38);
    goto LABEL_37;
  }
  os_unfair_lock_unlock(v6);
  if (v59)
  {
    v58 = v59;
    goto LABEL_53;
  }
}

void `anonymous namespace'::DiscardingTaskGroup::enqueueCompletedTask(_anonymous_namespace_::DiscardingTaskGroup *this, unint64_t a2, int a3)
{
  char *v4;

  if (a3)
  {
    v4 = (char *)this + 64;
    swift_retain();
  }
}

void `anonymous namespace'::TaskGroupBase::~TaskGroupBase(_anonymous_namespace_::TaskGroupBase *this)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  *(_QWORD *)this = off_1E2600558;
  v2 = (void **)*((_QWORD *)this + 9);
  v3 = (void **)*((_QWORD *)this + 10);
  *((_QWORD *)this + 13) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)*((_QWORD *)this + 10);
      v2 = (void **)(*((_QWORD *)this + 9) + 8);
      *((_QWORD *)this + 9) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 512;
LABEL_7:
    *((_QWORD *)this + 12) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *((_QWORD *)this + 9);
    v8 = *((_QWORD *)this + 10);
    if (v8 != v9)
      *((_QWORD *)this + 10) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  v10 = (void *)*((_QWORD *)this + 8);
  if (v10)
    operator delete(v10);
}

uint64_t `anonymous namespace'::TaskGroupBase::prepareWaitingTaskWithTask(swift *a1, uint64_t a2, unsigned int *a3, unint64_t *a4, int a5, char a6, int a7)
{
  unint64_t *v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  swift::AsyncTask *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;

  if ((a6 & 1) == 0)
  {
    v13 = (unint64_t *)((char *)a1 + 48);
    v14 = (*(uint64_t (**)(swift *))(*(_QWORD *)a1 + 24))(a1);
    v15 = 0xBFFFFFFF7FFFFFFFLL;
    if (v14)
      v15 = 0xBFFFFFFFFFFFFFFFLL;
    v16 = *a4;
    v17 = v15 + *a4;
    while (1)
    {
      v18 = __ldxr(v13);
      if (v18 != v16)
        break;
      if (!__stxr(v17, v13))
        goto LABEL_9;
    }
    __clrex();
    *a4 = v18;
  }
LABEL_9:
  v19 = a3[8];
  v20 = 52;
  if ((v19 & 0x1000000) == 0)
    v20 = 48;
  v21 = (uint64_t)&a3[v20] + ((v19 >> 23) & 8);
  if (a5)
  {
    *(_QWORD *)(*(_QWORD *)(a2 + 64) + 16) = *(_QWORD *)(v21 + 16);
    MEMORY[0x18D78FED8]();
  }
  else
  {
    v27 = *(_QWORD *)(v21 + 8);
    v28 = *(_QWORD *)(*(_QWORD *)(a2 + 64) + 24);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v28, (*(unsigned __int8 *)(*(_QWORD *)(v27 - 8) + 80) + v21 + 24) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v27 - 8) + 80), v27);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v28, 0, 1, v27);
  }
  swift::_swift_taskGroup_detachChild(a1, (swift::TaskGroup *)a3, v22, v23, v24, v25, v26);
  if ((*(unsigned int (**)(swift *))(*(_QWORD *)a1 + 24))(a1))
    v29 = a7 == 0;
  else
    v29 = 1;
  if (!v29 && a5 != 0)
    swift_release();
  if (*MEMORY[0x1E0DEEA60])
    ((void (*)(uint64_t))*MEMORY[0x1E0DEEA60])(a2);
  return a2;
}

void `anonymous namespace'::NaiveTaskGroupQueue<`anonymous namespace'::TaskGroupBase::ReadyQueueItem>::enqueue(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  void *v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  int64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  BOOL v39;
  int64_t v40;
  unint64_t v41;
  char *v42;
  unint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  int64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  __int128 *v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  unint64_t v76;
  uint64_t v77;
  __int128 *v78;
  _OWORD *v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  int64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  __int128 *v96;
  _OWORD *v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  int64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  __int128 *v113;
  _OWORD *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  unint64_t v118;

  v2 = a2;
  v4 = *(char **)(a1 + 16);
  v5 = *(char **)(a1 + 8);
  v6 = v4 - v5;
  if (v4 == v5)
    v7 = 0;
  else
    v7 = ((v4 - v5) << 6) - 1;
  v8 = *(_QWORD *)(a1 + 32);
  if (v7 != *(_QWORD *)(a1 + 40) + v8)
    goto LABEL_108;
  v9 = v8 >= 0x200;
  v10 = v8 - 512;
  if (v9)
  {
    *(_QWORD *)(a1 + 32) = v10;
    v11 = v5 + 8;
    v12 = *(_QWORD *)v5;
    *(_QWORD *)(a1 + 8) = v5 + 8;
    if (v4 != *(char **)(a1 + 24))
    {
LABEL_8:
      *(_QWORD *)v4 = v12;
LABEL_107:
      *(_QWORD *)(a1 + 16) += 8;
      goto LABEL_108;
    }
    v26 = *(char **)a1;
    if ((unint64_t)v11 > *(_QWORD *)a1)
    {
      v27 = (uint64_t)&v11[-*(_QWORD *)a1] >> 3;
      if (v27 >= -1)
        v28 = v27 + 1;
      else
        v28 = v27 + 2;
      v29 = v28 >> 1;
      v30 = -v29;
      v31 = &v11[-8 * v29];
      v32 = v4 - v11;
      if (v4 != v11)
      {
        memmove(&v11[-8 * v29], v11, v4 - v11);
        v4 = *(char **)(a1 + 8);
      }
      *(_QWORD *)(a1 + 8) = &v4[8 * v30];
      *(_QWORD *)(a1 + 16) = &v31[v32];
      *(_QWORD *)&v31[v32] = v12;
      goto LABEL_107;
    }
    v34 = (v4 - v26) >> 2;
    if (v4 == v26)
      v34 = 1;
    if (v34 >> 61)
      goto LABEL_109;
    v35 = v34 >> 2;
    v36 = 8 * v34;
    v37 = (char *)operator new(8 * v34);
    v38 = &v37[8 * v35];
    v40 = v4 - v11;
    v39 = v4 == v11;
    v4 = v38;
    if (!v39)
    {
      v4 = &v38[v40 & 0xFFFFFFFFFFFFFFF8];
      v41 = v40 - 8;
      if ((unint64_t)(v40 - 8) < 0x38)
      {
        v42 = &v37[8 * v35];
        do
        {
LABEL_90:
          v100 = *(_QWORD *)v11;
          v11 += 8;
          *(_QWORD *)v42 = v100;
          v42 += 8;
        }
        while (v42 != v4);
        goto LABEL_91;
      }
      v93 = &v37[8 * v35];
      v42 = v93;
      if ((unint64_t)(v93 - v11) < 0x20)
        goto LABEL_90;
      v94 = (v41 >> 3) + 1;
      v95 = 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
      v42 = &v38[v95];
      v11 += v95;
      v96 = (__int128 *)(v5 + 24);
      v97 = v93 + 16;
      v98 = v94 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v99 = *v96;
        *(v97 - 1) = *(v96 - 1);
        *v97 = v99;
        v96 += 2;
        v97 += 2;
        v98 -= 4;
      }
      while (v98);
      if (v94 != (v94 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_90;
    }
LABEL_91:
    *(_QWORD *)a1 = v37;
    *(_QWORD *)(a1 + 8) = v38;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = &v37[v36];
    if (v26)
    {
      operator delete(v26);
      v4 = *(char **)(a1 + 16);
    }
    goto LABEL_8;
  }
  v13 = v6 >> 3;
  v14 = *(char **)(a1 + 24);
  v15 = *(char **)a1;
  v16 = (uint64_t)&v14[-*(_QWORD *)a1];
  if (v6 >> 3 < (unint64_t)(v16 >> 3))
  {
    v17 = operator new(0x1000uLL);
    v18 = v17;
    if (v14 != v4)
    {
      *(_QWORD *)v4 = v17;
      goto LABEL_107;
    }
    if (v5 == v15)
    {
      v68 = (v14 - v5) >> 2;
      if (v4 == v5)
        v68 = 1;
      if (v68 >> 61)
        goto LABEL_109;
      v69 = (v68 + 3) >> 2;
      v70 = 8 * v68;
      v71 = (char *)operator new(8 * v68);
      v33 = &v71[8 * v69];
      v72 = v33;
      if (v4 != v5)
      {
        v72 = &v33[8 * v13];
        v73 = &v71[8 * v69];
        v74 = v5;
        if ((unint64_t)(v6 - 8) < 0x38)
          goto LABEL_112;
        v75 = &v71[8 * v69];
        v73 = v75;
        v74 = v5;
        if ((unint64_t)(v75 - v5) < 0x20)
          goto LABEL_112;
        v76 = ((unint64_t)(v6 - 8) >> 3) + 1;
        v77 = 8 * (v76 & 0x3FFFFFFFFFFFFFFCLL);
        v73 = &v33[v77];
        v74 = &v5[v77];
        v78 = (__int128 *)(v5 + 16);
        v79 = v75 + 16;
        v80 = v76 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v81 = *v78;
          *(v79 - 1) = *(v78 - 1);
          *v79 = v81;
          v78 += 2;
          v79 += 2;
          v80 -= 4;
        }
        while (v80);
        if (v76 != (v76 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_112:
          do
          {
            v82 = *(_QWORD *)v74;
            v74 += 8;
            *(_QWORD *)v73 = v82;
            v73 += 8;
          }
          while (v73 != v72);
        }
      }
      *(_QWORD *)a1 = v71;
      *(_QWORD *)(a1 + 8) = v33;
      *(_QWORD *)(a1 + 16) = v72;
      *(_QWORD *)(a1 + 24) = &v71[v70];
      if (v5)
      {
        operator delete(v5);
        v33 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v33 = v5;
    }
    *((_QWORD *)v33 - 1) = v18;
    v83 = *(char **)(a1 + 8);
    v84 = *(char **)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v83 - 8;
    v85 = *((_QWORD *)v83 - 1);
    *(_QWORD *)(a1 + 8) = v83;
    if (v84 != *(char **)(a1 + 24))
    {
LABEL_106:
      *(_QWORD *)v84 = v85;
      goto LABEL_107;
    }
    v86 = *(char **)a1;
    if ((unint64_t)v83 > *(_QWORD *)a1)
    {
      v87 = (uint64_t)&v83[-*(_QWORD *)a1] >> 3;
      if (v87 >= -1)
        v88 = v87 + 1;
      else
        v88 = v87 + 2;
      v89 = v88 >> 1;
      v90 = -v89;
      v91 = &v83[-8 * v89];
      v92 = v84 - v83;
      if (v84 != v83)
      {
        memmove(&v83[-8 * v89], v83, v84 - v83);
        v83 = *(char **)(a1 + 8);
      }
      v84 = &v91[v92];
      *(_QWORD *)(a1 + 8) = &v83[8 * v90];
      *(_QWORD *)(a1 + 16) = &v91[v92];
      goto LABEL_106;
    }
    v101 = (v84 - v86) >> 2;
    if (v84 == v86)
      v101 = 1;
    if (!(v101 >> 61))
    {
      v102 = v101 >> 2;
      v103 = 8 * v101;
      v104 = (char *)operator new(8 * v101);
      v105 = &v104[8 * v102];
      v106 = v84 - v83;
      v39 = v84 == v83;
      v84 = v105;
      if (v39)
        goto LABEL_104;
      v84 = &v105[v106 & 0xFFFFFFFFFFFFFFF8];
      v107 = v106 - 8;
      if ((unint64_t)(v106 - 8) >= 0x38)
      {
        v109 = &v104[8 * v102];
        v108 = v109;
        if ((unint64_t)(v109 - v83) >= 0x20)
        {
          v110 = (v107 >> 3) + 1;
          v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
          v108 = &v105[v111];
          v112 = &v83[v111];
          v113 = (__int128 *)(v83 + 16);
          v114 = v109 + 16;
          v115 = v110 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v116 = *v113;
            *(v114 - 1) = *(v113 - 1);
            *v114 = v116;
            v113 += 2;
            v114 += 2;
            v115 -= 4;
          }
          while (v115);
          v83 = v112;
          if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_104:
            *(_QWORD *)a1 = v104;
            *(_QWORD *)(a1 + 8) = v105;
            *(_QWORD *)(a1 + 16) = v84;
            *(_QWORD *)(a1 + 24) = &v104[v103];
            if (v86)
            {
              operator delete(v86);
              v84 = *(char **)(a1 + 16);
            }
            goto LABEL_106;
          }
        }
      }
      else
      {
        v108 = &v104[8 * v102];
      }
      do
      {
        v117 = *(_QWORD *)v83;
        v83 += 8;
        *(_QWORD *)v108 = v117;
        v108 += 8;
      }
      while (v108 != v84);
      goto LABEL_104;
    }
LABEL_109:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v19 = v16 >> 2;
  if (v14 == v15)
    v20 = 1;
  else
    v20 = v19;
  if (v20 >> 61)
    goto LABEL_109;
  v21 = (char *)operator new(8 * v20);
  v22 = &v21[8 * v13];
  v23 = &v21[8 * v20];
  v24 = operator new(0x1000uLL);
  if (v13 == v20)
  {
    if (v6 < 1)
    {
      if (v4 == v5)
        v43 = 1;
      else
        v43 = v6 >> 2;
      if (v43 >> 61)
        goto LABEL_109;
      v44 = (char *)operator new(8 * v43);
      v22 = &v44[8 * (v43 >> 2)];
      v23 = &v44[8 * v43];
      operator delete(v21);
      v5 = *(char **)(a1 + 8);
      v4 = *(char **)(a1 + 16);
      v21 = v44;
    }
    else
    {
      v25 = v13 + 2;
      if (v13 >= -1)
        v25 = v13 + 1;
      v22 -= 8 * (v25 >> 1);
    }
  }
  *(_QWORD *)v22 = v24;
  v45 = v22 + 8;
  if (v4 != v5)
  {
    while (1)
    {
      if (v22 == v21)
      {
        if (v45 >= v23)
        {
          v53 = (v23 - v22) >> 2;
          if (v23 == v22)
            v53 = 1;
          if (v53 >> 61)
            goto LABEL_109;
          v54 = (v53 + 3) >> 2;
          v55 = 8 * v53;
          v56 = (char *)operator new(8 * v53);
          v21 = v56;
          v49 = &v56[8 * v54];
          v47 = v49;
          v57 = v45 - v22;
          if (v45 != v22)
          {
            v47 = &v49[v57 & 0xFFFFFFFFFFFFFFF8];
            v58 = v57 - 8;
            v59 = &v56[8 * v54];
            v60 = v22;
            if (v58 < 0x38)
              goto LABEL_113;
            v59 = &v56[8 * v54];
            v60 = v22;
            if ((unint64_t)(v59 - v22) < 0x20)
              goto LABEL_113;
            v61 = (v58 >> 3) + 1;
            v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
            v59 = &v49[v62];
            v60 = &v22[v62];
            v63 = (__int128 *)(v22 + 16);
            v64 = &v56[8 * v54 + 16];
            v65 = v61 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v66 = *v63;
              *((_OWORD *)v64 - 1) = *(v63 - 1);
              *(_OWORD *)v64 = v66;
              v63 += 2;
              v64 += 32;
              v65 -= 4;
            }
            while (v65);
            if (v61 != (v61 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_113:
              do
              {
                v67 = *(_QWORD *)v60;
                v60 += 8;
                *(_QWORD *)v59 = v67;
                v59 += 8;
              }
              while (v59 != v47);
            }
          }
          v23 = &v56[v55];
          operator delete(v22);
        }
        else
        {
          v51 = (v23 - v45) >> 3;
          if (v51 >= -1)
            v52 = v51 + 1;
          else
            v52 = v51 + 2;
          v47 = &v45[8 * (v52 >> 1)];
          v49 = &v22[8 * (v52 >> 1)];
          if (v45 == v22)
          {
            v21 = v45;
          }
          else
          {
            memmove(&v22[8 * (v52 >> 1)], v22, v45 - v22);
            v21 = v22;
          }
        }
      }
      else
      {
        v49 = v22;
        v47 = v45;
      }
      v50 = *((_QWORD *)v4 - 1);
      v4 -= 8;
      *((_QWORD *)v49 - 1) = v50;
      v46 = v49 - 8;
      v45 = v47;
      v22 = v46;
      if (v4 == *(char **)(a1 + 8))
        goto LABEL_43;
    }
  }
  v46 = v22;
  v47 = v22 + 8;
LABEL_43:
  v48 = *(char **)a1;
  *(_QWORD *)a1 = v21;
  *(_QWORD *)(a1 + 8) = v46;
  *(_QWORD *)(a1 + 16) = v47;
  *(_QWORD *)(a1 + 24) = v23;
  v2 = a2;
  if (v48)
    operator delete(v48);
LABEL_108:
  v118 = *(_QWORD *)(a1 + 40) + *(_QWORD *)(a1 + 32);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + ((v118 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v118 & 0x1FF)) = v2;
  ++*(_QWORD *)(a1 + 40);
}

void `anonymous namespace'::AccumulatingTaskGroup::~AccumulatingTaskGroup(_anonymous_namespace_::AccumulatingTaskGroup *this)
{
  JUMPOUT(0x18D78FAD0);
}

uint64_t `anonymous namespace'::AccumulatingTaskGroup::destroy(_anonymous_namespace_::AccumulatingTaskGroup *this, uint64_t a2, uint64_t a3)
{
  swift::removeStatusRecordFromSelf((uint64_t)this + 8, 0, a3);
  return (**(uint64_t (***)(_anonymous_namespace_::AccumulatingTaskGroup *))this)(this);
}

uint64_t `anonymous namespace'::AccumulatingTaskGroup::isDiscardingResults(_anonymous_namespace_::AccumulatingTaskGroup *this)
{
  return 0;
}

void `anonymous namespace'::AccumulatingTaskGroup::offer(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  os_unfair_lock_s *v6;
  const char *v7;
  char *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v6 = (os_unfair_lock_s *)(a1 + 40);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
  v16 = 0;
  v9 = (unint64_t *)(a1 + 48);
  do
    v10 = __ldaxr(v9);
  while (__stxr(v10 + 0x80000000, v9));
  v16 = v10 + 0x80000000;
  v11 = *(_QWORD *)(a3 - 8);
  if (((v10 + 0x80000000) & 0x4000000000000000) != 0)
  {
    v12 = (unint64_t *)(a1 + 56);
    v13 = atomic_load((unint64_t *)(a1 + 56));
    do
    {
      v14 = __ldaxr(v12);
      if (v14 != v13)
      {
        __clrex();
        swift::swift_Concurrency_fatalError(0, "Failed to claim waitingTask!", v7, v8);
      }
    }
    while (__stlxr(0, v12));
    os_unfair_lock_unlock(v6);
    if (v15)
      swift::AsyncTask::flagAsAndEnqueueOnExecutor(v15, 0, 0);
  }
  else
  {
    (*(void (**)(uint64_t, unsigned int *, BOOL))(*(_QWORD *)a1 + 40))(a1, a2, v11 != 0);
    os_unfair_lock_unlock(v6);
  }
}

void `anonymous namespace'::AccumulatingTaskGroup::enqueueCompletedTask(_anonymous_namespace_::AccumulatingTaskGroup *this, unint64_t a2, int a3)
{
  uint64_t v6;

  swift_retain();
  v6 = 2;
  if (a3)
    v6 = 3;
}

uint64_t __swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift_taskGroup_initializeWithFlagsImpl(unsigned long,swift::TaskGroup *,swift::TargetMetadata<swift::InProcess> const*)::$_0>(_QWORD **a1, __int16 a2)
{
  unint64_t *v2;
  unint64_t v3;

  if ((a2 & 0x100) != 0)
  {
    v2 = (unint64_t *)(**a1 + 48);
    do
      v3 = __ldxr(v2);
    while (__stxr(v3 | 0x8000000000000000, v2));
  }
  return 1;
}

void *swift_taskGroup_destroy::$_0::__invoke(swift_taskGroup_destroy::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_taskGroup_destroy(this);
  swift_taskGroup_destroy::Override = result;
  return result;
}

void *swift_taskGroup_wait_next_throwing::$_0::__invoke(swift_taskGroup_wait_next_throwing::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_taskGroup_wait_next_throwing(this);
  swift_taskGroup_wait_next_throwing::Override = result;
  return result;
}

uint64_t task_group_wait_resume_adapter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void *swift_taskGroup_isEmpty::$_0::__invoke(swift_taskGroup_isEmpty::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_taskGroup_isEmpty(this);
  swift_taskGroup_isEmpty::Override = result;
  return result;
}

void *swift_taskGroup_isCancelled::$_0::__invoke(swift_taskGroup_isCancelled::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_taskGroup_isCancelled(this);
  swift_taskGroup_isCancelled::Override = result;
  return result;
}

void *swift_taskGroup_cancelAll::$_0::__invoke(swift_taskGroup_cancelAll::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_taskGroup_cancelAll(this);
  swift_taskGroup_cancelAll::Override = result;
  return result;
}

void *swift_taskGroup_addPending::$_0::__invoke(swift_taskGroup_addPending::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_taskGroup_addPending(this);
  swift_taskGroup_addPending::Override = result;
  return result;
}

void *swift_taskGroup_waitAll::$_0::__invoke(swift_taskGroup_waitAll::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_taskGroup_waitAll(this);
  swift_taskGroup_waitAll::Override = result;
  return result;
}

void *swift_task_cancel_group_child_tasks::$_0::__invoke(swift_task_cancel_group_child_tasks::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_task_cancel_group_child_tasks(this);
  swift_task_cancel_group_child_tasks::Override = result;
  return result;
}

_QWORD *swift::TaskLocal::Storage::initializeLinkParent(swift::TaskLocal::Storage *this, swift::AsyncTask *a2, swift::AsyncTask *a3)
{
  _QWORD *result;
  unint64_t v6;
  uint64_t v7;

  result = (_QWORD *)swift::_swift_task_alloc_specific(a2, (swift::AsyncTask *)0x18);
  result[1] = 0;
  result[2] = 0;
  *result = 0;
  v6 = *((_QWORD *)a3 + 17);
  if (v6)
  {
    if (*(_QWORD *)(v6 + 16))
    {
LABEL_5:
      *result = v6 | 1;
      goto LABEL_6;
    }
    v7 = *(_QWORD *)v6;
    if ((v7 & 3) == 1)
    {
      v6 = v7 & 0xFFFFFFFFFFFFFFFCLL;
      goto LABEL_5;
    }
  }
LABEL_6:
  *(_QWORD *)this = result;
  return result;
}

_QWORD *swift::TaskLocal::Item::copyTo(swift::TaskLocal::Item *this, swift::AsyncTask *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;

  v2 = *((_QWORD *)this + 2);
  if (!v2)
    return 0;
  v5 = *((_QWORD *)this + 1);
  v6 = *(_QWORD *)(v2 - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  if (a2)
  {
    v9 = (_QWORD *)swift::_swift_task_alloc_specific(a2, (swift::AsyncTask *)(v7 + v8));
    *v9 = 0;
    v9[1] = v5;
    v9[2] = v2;
    v10 = (_QWORD *)((char *)a2 + 136);
  }
  else
  {
    v9 = malloc_type_malloc(v7 + v8, 0xDF00BA84uLL);
    *v9 = 0;
    v9[1] = v5;
    v9[2] = v2;
    v10 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 840);
  }
  *v9 = *v10;
  v11 = *((_QWORD *)this + 2);
  v12 = *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80);
  v13 = (char *)v9 + ((v12 + 24) & ~v12);
  if (v11)
  {
    v14 = *(_QWORD *)(v11 - 8);
    v15 = (*(unsigned __int8 *)(v14 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  }
  else
  {
    v14 = MEMORY[0xFFFFFFFFFFFFFFF8];
    v15 = 24;
  }
  (*(void (**)(char *, char *))(v14 + 16))(v13, (char *)this + v15);
  *((_QWORD *)a2 + 17) = v9;
  return v9;
}

void swift::TaskLocal::Storage::destroy(swift::AsyncTask **this, swift::AsyncTask *a2, const char *a3, char *a4)
{
  swift::AsyncTask *v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = *this;
  *this = 0;
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = *(_QWORD *)v4;
        if ((*(_QWORD *)v4 & 3) != 0)
          break;
        v7 = *((_QWORD *)v4 + 2);
        if (v7)
          (*(void (**)(unint64_t))(*(_QWORD *)(v7 - 8) + 8))((unint64_t)v4+ ((*(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80)));
        v8 = v6 & 0xFFFFFFFFFFFFFFFCLL;
        if (a2)
          swift::_swift_task_dealloc_specific(a2, v4, a3, a4);
        else
          free(v4);
        v4 = (swift::AsyncTask *)v8;
        if (!v8)
          return;
      }
      if ((*(_QWORD *)v4 & 3uLL) - 1 < 2)
        break;
      if (!v4)
        return;
    }
    v9 = *((_QWORD *)v4 + 2);
    if (v9)
      (*(void (**)(unint64_t))(*(_QWORD *)(v9 - 8) + 8))((unint64_t)v4+ ((*(unsigned __int8 *)(*(_QWORD *)(v9 - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v9 - 8) + 80)));
    if (a2)
      swift::_swift_task_dealloc_specific(a2, v4, a3, a4);
    else
      free(v4);
  }
}

uint64_t swift::TaskLocal::Storage::pushValue(char **a1, swift *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 v10;
  size_t v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;

  v10 = swift_task_hasTaskGroupStatusRecord();
  if (a5)
  {
    v11 = ((*(unsigned __int8 *)(*(_QWORD *)(a5 - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a5 - 8) + 80))
        + *(_QWORD *)(*(_QWORD *)(a5 - 8) + 64);
    if (a2)
    {
LABEL_3:
      v12 = (char *)swift::_swift_task_alloc_specific(a2, (swift::AsyncTask *)v11);
      *(_QWORD *)v12 = 0;
      *((_QWORD *)v12 + 1) = a3;
      *((_QWORD *)v12 + 2) = a5;
      v13 = (uint64_t *)((char *)a2 + 136);
      goto LABEL_6;
    }
  }
  else
  {
    v11 = 24;
    if (a2)
      goto LABEL_3;
  }
  v12 = (char *)malloc_type_malloc(v11, 0xDF00BA84uLL);
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = a3;
  *((_QWORD *)v12 + 2) = a5;
  v13 = *(uint64_t **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 840);
LABEL_6:
  v14 = *v13;
  v15 = 2;
  if ((v10 & 1) == 0)
    v15 = 0;
  *(_QWORD *)v12 = v15 | v14;
  if (a5)
  {
    v16 = *(_QWORD *)(a5 - 8);
    v17 = (*(unsigned __int8 *)(v16 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  }
  else
  {
    v16 = MEMORY[0xFFFFFFFFFFFFFFF8];
    v17 = 24;
  }
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 32))(&v12[v17], a4, a5);
  *a1 = v12;
  return result;
}

uint64_t swift::TaskLocal::Storage::peekHeadLinkType(swift::TaskLocal::Storage *this)
{
  if (*(_QWORD *)this)
    return **(_QWORD **)this & 3;
  else
    return 0;
}

void swift::TaskLocal::Storage::copyTo(swift::TaskLocal::Item **this, swift::AsyncTask *a2)
{
  swift::TaskLocal::Item *v2;
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t **v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t v14;

  v13 = 0;
  v14 = 0;
  v12 = &v13;
  v2 = *this;
  if (*this)
  {
    do
    {
      v5 = v13;
      v6 = *((_QWORD *)v2 + 1);
      v7 = &v13;
      v8 = &v13;
      if (v13)
      {
        while (1)
        {
          while (1)
          {
            v8 = (uint64_t **)v5;
            v9 = v5[4];
            if (v6 >= v9)
              break;
            v5 = *v8;
            v7 = v8;
            if (!*v8)
              goto LABEL_13;
          }
          if (v9 >= v6)
            break;
          v5 = v8[1];
          if (!v5)
          {
            v7 = v8 + 1;
            goto LABEL_13;
          }
        }
      }
      else
      {
LABEL_13:
        v10 = (uint64_t *)operator new(0x28uLL);
        v10[4] = v6;
        *v10 = 0;
        v10[1] = 0;
        v10[2] = (uint64_t)v8;
        *v7 = v10;
        if (*v12)
        {
          v12 = (uint64_t **)*v12;
          v4 = *v7;
        }
        else
        {
          v4 = v10;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v13, v4);
        ++v14;
        swift::TaskLocal::Item::copyTo(v2, a2);
      }
      v2 = (swift::TaskLocal::Item *)(*(_QWORD *)v2 & 0xFFFFFFFFFFFFFFFCLL);
    }
    while (v2);
    v11 = v13;
  }
  else
  {
    v11 = 0;
  }
  std::__tree<swift::HeapObject const*>::destroy((uint64_t)&v12, v11);
}

void swift::TaskLocal::Storage::copyToOnlyOnlyFromCurrentGroup(swift::TaskLocal::Storage *this, swift::AsyncTask *a2)
{
  unint64_t v2;
  unint64_t *v4;
  unint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t **v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t **v16;
  uint64_t *v17;
  uint64_t v18;

  v17 = 0;
  v18 = 0;
  v16 = &v17;
  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    goto LABEL_22;
  v4 = 0;
  while (1)
  {
    v6 = v17;
    v7 = *(_QWORD *)(v2 + 8);
    v8 = &v17;
    v9 = &v17;
    if (v17)
    {
      while (1)
      {
        while (1)
        {
          v9 = (uint64_t **)v6;
          v10 = v6[4];
          if (v7 >= v10)
            break;
          v6 = *v9;
          v8 = v9;
          if (!*v9)
            goto LABEL_14;
        }
        if (v10 >= v7)
          goto LABEL_6;
        v6 = v9[1];
        if (!v6)
        {
          v8 = v9 + 1;
          break;
        }
      }
    }
LABEL_14:
    v11 = (uint64_t *)operator new(0x28uLL);
    v11[4] = v7;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = (uint64_t)v9;
    *v8 = v11;
    if (*v16)
    {
      v16 = (uint64_t **)*v16;
      v12 = *v8;
    }
    else
    {
      v12 = v11;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v17, v12);
    ++v18;
    v13 = *(_QWORD *)v2 & 3;
    if (v13 != 2)
    {
      if (v4)
        break;
    }
    v5 = swift::TaskLocal::Item::copyTo((swift::TaskLocal::Item *)v2, a2);
    if (!v4)
      v4 = v5;
    if (!v5)
      goto LABEL_22;
LABEL_6:
    v2 = *(_QWORD *)v2 & 0xFFFFFFFFFFFFFFFCLL;
    if (!v2)
      goto LABEL_22;
  }
  v14 = v13 == 0;
  v15 = 1;
  if (v14)
    v15 = 2;
  *v4 = v15 | v2;
LABEL_22:
  std::__tree<swift::HeapObject const*>::destroy((uint64_t)&v16, v17);
}

uint64_t swift_task_reportIllegalTaskLocalBindingWithinWithTaskGroup(const unsigned __int8 *a1, const char *a2, char a3, uint64_t a4)
{
  swift_once();
  if (!swift_task_reportIllegalTaskLocalBindingWithinWithTaskGroup::Override)
    swift_task_reportIllegalTaskLocalBindingWithinWithTaskGroupImpl(a1, a2, 0, a4);
  return swift_task_reportIllegalTaskLocalBindingWithinWithTaskGroup::Override(a1, a2, a3 & 1, a4, swift_task_reportIllegalTaskLocalBindingWithinWithTaskGroupImpl);
}

void swift_task_reportIllegalTaskLocalBindingWithinWithTaskGroupImpl(const unsigned __int8 *a1, const char *a2, BOOL a3, uint64_t a4)
{
  int shouldReportFatalErrorsToDebugger;
  char *v5;
  FILE **v6;
  _OWORD v7[5];
  uint64_t v8;
  char *v9;

  v9 = 0;
  swift_asprintf(&v9, a2, a2, a1, a4);
  shouldReportFatalErrorsToDebugger = _swift_shouldReportFatalErrorsToDebugger();
  v5 = v9;
  if (shouldReportFatalErrorsToDebugger)
  {
    memset(&v7[2], 0, 48);
    v8 = 0;
    v7[0] = xmmword_1E2600620;
    v7[1] = *(_OWORD *)&off_1E2600630;
    MEMORY[0x18D78FB60](1, v9, v7);
  }
  v6 = (FILE **)MEMORY[0x1E0C80C10];
  fputs(v5, (FILE *)*MEMORY[0x1E0C80C10]);
  fflush(*v6);
  asl_log(0, 0, 3, "%s", v5);
  free(v5);
  abort();
}

uint64_t swift_task_localValuePush(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_once();
  if (swift_task_localValuePush::Override)
    return swift_task_localValuePush::Override(a1, a2, a3, swift_task_localValuePushImpl);
  else
    return swift_task_localValuePushImpl(a1, a2, a3);
}

uint64_t swift_task_localValuePushImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char **Current;
  uint64_t result;
  unint64_t StatusReg;
  _QWORD *v9;
  unsigned __int8 v10;
  size_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  Current = (char **)swift_task_getCurrent();
  if (Current)
    return swift::TaskLocal::Storage::pushValue(Current + 17, (swift *)Current, a1, a2, a3);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v9 = *(_QWORD **)(StatusReg + 840);
  if (!v9)
  {
    v9 = malloc_type_malloc(8uLL, 0x2004093837F09uLL);
    *v9 = 0;
    *(_QWORD *)(StatusReg + 840) = v9;
  }
  v10 = swift_task_hasTaskGroupStatusRecord();
  if (a3)
    v11 = ((*(unsigned __int8 *)(*(_QWORD *)(a3 - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a3 - 8) + 80))
        + *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64);
  else
    v11 = 24;
  v12 = malloc_type_malloc(v11, 0xDF00BA84uLL);
  v13 = v12;
  v12[1] = a1;
  v12[2] = a3;
  v14 = 2;
  if ((v10 & 1) == 0)
    v14 = 0;
  *v12 = v14 | **(_QWORD **)(StatusReg + 840);
  if (a3)
  {
    v15 = *(_QWORD *)(a3 - 8);
    v16 = (*(unsigned __int8 *)(v15 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  }
  else
  {
    v15 = MEMORY[0xFFFFFFFFFFFFFFF8];
    v16 = 24;
  }
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 32))((char *)v12 + v16, a2, a3);
  *v9 = v13;
  return result;
}

_QWORD *swift_task_localValueGet(uint64_t a1)
{
  swift_once();
  if (swift_task_localValueGet::Override)
    return (_QWORD *)swift_task_localValueGet::Override(a1, swift_task_localValueGetImpl);
  else
    return swift_task_localValueGetImpl(a1);
}

_QWORD *swift_task_localValueGetImpl(uint64_t a1)
{
  uint64_t Current;
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v6;
  uint64_t v7;

  Current = swift_task_getCurrent();
  if (!Current)
  {
    v4 = *(_QWORD ***)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 840);
    if (v4)
    {
      v3 = *v4;
      if (v3)
      {
        while (v3[1] != a1)
        {
          v3 = (_QWORD *)(*v3 & 0xFFFFFFFFFFFFFFFCLL);
          if (!v3)
            return 0;
        }
        goto LABEL_11;
      }
    }
    return 0;
  }
  v3 = *(_QWORD **)(Current + 136);
  if (!v3)
    return 0;
  while (v3[1] != a1)
  {
    v3 = (_QWORD *)(*v3 & 0xFFFFFFFFFFFFFFFCLL);
    if (!v3)
      return 0;
  }
LABEL_11:
  v6 = v3[2];
  if (!v6)
    return v3 + 3;
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80);
  return (_QWORD *)((char *)v3 + ((v7 + 24) & ~v7));
}

void swift_task_localValuePop()
{
  swift_once();
  if (swift_task_localValuePop::Override)
    swift_task_localValuePop::Override(swift_task_localValuePopImpl);
  else
    swift_task_localValuePopImpl();
}

void swift_task_localValuePopImpl(void)
{
  uint64_t Current;
  const char *v1;
  char *v2;
  swift *v3;
  swift::AsyncTask *v4;
  uint64_t v5;
  unint64_t StatusReg;
  unint64_t *v7;
  _QWORD *v8;
  uint64_t v9;

  Current = swift_task_getCurrent();
  if (Current)
  {
    v3 = (swift *)Current;
    v4 = *(swift::AsyncTask **)(Current + 136);
    *(_QWORD *)(Current + 136) = *(_QWORD *)v4 & 0xFFFFFFFFFFFFFFFCLL;
    v5 = *((_QWORD *)v4 + 2);
    if (v5)
      (*(void (**)(unint64_t))(*(_QWORD *)(v5 - 8) + 8))((unint64_t)v4+ ((*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80)));
    swift::_swift_task_dealloc_specific(v3, v4, v1, v2);
  }
  else
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v7 = *(unint64_t **)(StatusReg + 840);
    if (v7)
    {
      v8 = (_QWORD *)*v7;
      *v7 = *(_QWORD *)*v7 & 0xFFFFFFFFFFFFFFFCLL;
      v9 = v8[2];
      if (v9)
        (*(void (**)(unint64_t))(*(_QWORD *)(v9 - 8) + 8))((unint64_t)v8+ ((*(unsigned __int8 *)(*(_QWORD *)(v9 - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v9 - 8) + 80)));
      free(v8);
      if (!*v7)
      {
        *(_QWORD *)(StatusReg + 840) = 0;
        free(v7);
      }
    }
  }
}

void swift_task_localsCopyTo(swift::AsyncTask *a1)
{
  uint64_t Current;
  swift::TaskLocal::Item **v3;

  swift_once();
  if (swift_task_localsCopyTo::Override)
  {
    swift_task_localsCopyTo::Override(a1, swift_task_localsCopyToImpl);
    return;
  }
  Current = swift_task_getCurrent();
  if (Current)
  {
    v3 = (swift::TaskLocal::Item **)(Current + 136);
  }
  else
  {
    v3 = *(swift::TaskLocal::Item ***)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 840);
    if (!v3)
      return;
  }
  swift::TaskLocal::Storage::copyTo(v3, a1);
}

void swift_task_localsCopyToImpl(swift::AsyncTask *a1)
{
  uint64_t Current;
  swift::TaskLocal::Item **v3;

  Current = swift_task_getCurrent();
  if (Current)
  {
    v3 = (swift::TaskLocal::Item **)(Current + 136);
  }
  else
  {
    v3 = *(swift::TaskLocal::Item ***)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 840);
    if (!v3)
      return;
  }
  swift::TaskLocal::Storage::copyTo(v3, a1);
}

void *swift_task_reportIllegalTaskLocalBindingWithinWithTaskGroup::$_0::__invoke(swift_task_reportIllegalTaskLocalBindingWithinWithTaskGroup::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_task_reportIllegalTaskLocalBindingWithinWithTaskGroup(this);
  swift_task_reportIllegalTaskLocalBindingWithinWithTaskGroup::Override = result;
  return result;
}

void *swift_task_localValuePush::$_0::__invoke(swift_task_localValuePush::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_task_localValuePush(this);
  swift_task_localValuePush::Override = result;
  return result;
}

void *swift_task_localValueGet::$_0::__invoke(swift_task_localValueGet::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_task_localValueGet(this);
  swift_task_localValueGet::Override = result;
  return result;
}

void *swift_task_localValuePop::$_0::__invoke(swift_task_localValuePop::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_task_localValuePop(this);
  swift_task_localValuePop::Override = result;
  return result;
}

void *swift_task_localsCopyTo::$_0::__invoke(swift_task_localsCopyTo::$_0 *this, void *a2)
{
  void *result;

  result = (void *)swift::getOverride_task_localsCopyTo(this);
  swift_task_localsCopyTo::Override = result;
  return result;
}

void std::__tree<swift::HeapObject const*>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<swift::HeapObject const*>::destroy(a1, *a2);
    std::__tree<swift::HeapObject const*>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t *std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = a2[2];
      if (*(_BYTE *)(v2 + 24))
        break;
      v3 = *(uint64_t **)(v2 + 16);
      v4 = *v3;
      if (*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if (*(uint64_t **)v2 == a2)
          {
            v9 = (uint64_t *)a2[2];
          }
          else
          {
            v9 = *(uint64_t **)(v2 + 8);
            v10 = *v9;
            *(_QWORD *)(v2 + 8) = *v9;
            if (v10)
            {
              *(_QWORD *)(v10 + 16) = v2;
              v3 = *(uint64_t **)(v2 + 16);
            }
            v9[2] = (uint64_t)v3;
            *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = v9;
            *v9 = v2;
            *(_QWORD *)(v2 + 16) = v9;
            v3 = (uint64_t *)v9[2];
            v2 = *v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v14 = *(_QWORD *)(v2 + 8);
          *v3 = v14;
          if (v14)
            *(_QWORD *)(v14 + 16) = v3;
          *(_QWORD *)(v2 + 16) = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          *(_QWORD *)(v2 + 8) = v3;
          v3[2] = v2;
          return result;
        }
      }
      else if (!v4 || (v6 = *(unsigned __int8 *)(v4 + 24), v5 = (_BYTE *)(v4 + 24), v6))
      {
        if (*(uint64_t **)v2 == a2)
        {
          v11 = a2[1];
          *(_QWORD *)v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = *(uint64_t **)(v2 + 16);
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = a2;
          a2[1] = v2;
          *(_QWORD *)(v2 + 16) = a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v12 = (uint64_t *)v3[1];
        v13 = *v12;
        v3[1] = *v12;
        if (v13)
          *(_QWORD *)(v13 + 16) = v3;
        v12[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v12;
        *v12 = (uint64_t)v3;
        v3[2] = (uint64_t)v12;
        return result;
      }
      *(_BYTE *)(v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

os_log_t swift::concurrency::trace::setupLogs(swift::concurrency::trace *this, void *a2)
{
  const char *v2;
  os_log_t result;

  v2 = (const char *)*MEMORY[0x1E0C80BA8];
  if (!*MEMORY[0x1E0C80BA8]
    || (result = (os_log_t)strcmp((const char *)*MEMORY[0x1E0C80BA8], "logd"), (_DWORD)result)
    && (result = (os_log_t)strcmp(v2, "diagnosticd"), (_DWORD)result)
    && (result = (os_log_t)strcmp(v2, "notifyd"), (_DWORD)result)
    && (result = (os_log_t)strcmp(v2, "xpcproxy"), (_DWORD)result)
    && (result = (os_log_t)strcmp(v2, "logd_helper"), (_DWORD)result))
  {
    swift::concurrency::trace::TracingEnabled = 1;
    swift::concurrency::trace::ActorLog = (uint64_t)os_log_create("com.apple.swift.concurrency", "Actor");
    swift::concurrency::trace::TaskLog = (uint64_t)os_log_create("com.apple.swift.concurrency", "Task");
    result = os_log_create("com.apple.swift.concurrency", "PotentialPriorityInversion");
    swift::concurrency::trace::PotentialPriorityInversionLog = (uint64_t)result;
  }
  else
  {
    swift::concurrency::trace::TracingEnabled = 0;
  }
  return result;
}

_DWORD *_swift_async_stream_lock_init(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t Array.init()()
{
  return MEMORY[0x1E0DE9D70]();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return MEMORY[0x1E0DEA1C0]();
}

uint64_t dispatch thunk of static Comparable.< infix(_:_:)()
{
  return MEMORY[0x1E0DEA3C0]();
}

uint64_t dispatch thunk of static Comparable.<= infix(_:_:)()
{
  return MEMORY[0x1E0DEA3D0]();
}

uint64_t MutableCollection.subscript.getter()
{
  return MEMORY[0x1E0DEA448]();
}

uint64_t MutableCollection<>.partition(by:)()
{
  return MEMORY[0x1E0DEA460]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x1E0DEA568]();
}

uint64_t UnsafeBufferPointer.baseAddress.getter()
{
  return MEMORY[0x1E0DEA578]();
}

uint64_t UnsafeBufferPointer.init(start:count:)()
{
  return MEMORY[0x1E0DEA588]();
}

uint64_t UnsafeBufferPointer.init(rebasing:)()
{
  return MEMORY[0x1E0DEA5B0]();
}

uint64_t type metadata accessor for UnsafeBufferPointer()
{
  return MEMORY[0x1E0DEA5B8]();
}

uint64_t String.utf8CString.getter()
{
  return MEMORY[0x1E0DEA630]();
}

Swift::String __swiftcall String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(Builtin::RawPointer _builtinStringLiteral, Builtin::Word utf8CodeUnitCount, Builtin::Int1 isASCII)
{
  uint64_t v3;
  void *v4;
  Swift::String result;

  v3 = MEMORY[0x1E0DEA718](_builtinStringLiteral, utf8CodeUnitCount, isASCII);
  result._object = v4;
  result._countAndFlagsBits = v3;
  return result;
}

uint64_t String.count.getter()
{
  return MEMORY[0x1E0DEA7B8]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
  MEMORY[0x1E0DEA800](a1._countAndFlagsBits, a1._object);
}

uint64_t dispatch thunk of Sequence.makeIterator()()
{
  return MEMORY[0x1E0DEAA58]();
}

uint64_t dispatch thunk of Sequence._copyContents(initializing:)()
{
  return MEMORY[0x1E0DEAA60]();
}

uint64_t dispatch thunk of Sequence.underestimatedCount.getter()
{
  return MEMORY[0x1E0DEAA68]();
}

uint64_t dispatch thunk of Sequence.withContiguousStorageIfAvailable<A>(_:)()
{
  return MEMORY[0x1E0DEAA80]();
}

uint64_t Sequence<>.elementsEqual<A>(_:)()
{
  return MEMORY[0x1E0DEAB90]();
}

uint64_t RawRepresentable<>.encode(to:)()
{
  return MEMORY[0x1E0DEACE0]();
}

uint64_t RawRepresentable<>.init(from:)()
{
  return MEMORY[0x1E0DEAD58]();
}

uint64_t Array.init(_unsafeUninitializedCapacity:initializingWith:)()
{
  return MEMORY[0x1E0DEAE30]();
}

uint64_t Array.append(_:)()
{
  return MEMORY[0x1E0DEAE80]();
}

uint64_t type metadata accessor for Array()
{
  return MEMORY[0x1E0DEAEC8]();
}

uint64_t dispatch thunk of Collection.startIndex.getter()
{
  return MEMORY[0x1E0DEB528]();
}

uint64_t dispatch thunk of Collection.count.getter()
{
  return MEMORY[0x1E0DEB560]();
}

uint64_t dispatch thunk of Collection.index(_:offsetBy:)()
{
  return MEMORY[0x1E0DEB580]();
}

uint64_t Collection.underestimatedCount.getter()
{
  return MEMORY[0x1E0DEB5E8]();
}

uint64_t Collection.first.getter()
{
  return MEMORY[0x1E0DEB620]();
}

uint64_t Collection.prefix(_:)()
{
  return MEMORY[0x1E0DEB648]();
}

uint64_t Collection.isEmpty.getter()
{
  return MEMORY[0x1E0DEB660]();
}

uint64_t Collection.subscript.getter()
{
  return MEMORY[0x1E0DEB690]();
}

uint64_t RangeReplaceableCollection.removeFirst()()
{
  return MEMORY[0x1E0DEB738]();
}

uint64_t RangeReplaceableCollection<>.removeAll(where:)()
{
  return MEMORY[0x1E0DEB810]();
}

uint64_t type metadata accessor for Range()
{
  return MEMORY[0x1E0DEB848]();
}

uint64_t UnsafeMutablePointer.initialize(from:count:)()
{
  return MEMORY[0x1E0DEB8D0]();
}

uint64_t UnsafeMutablePointer.initialize(repeating:count:)()
{
  return MEMORY[0x1E0DEB8D8]();
}

uint64_t UnsafeMutablePointer.deinitialize(count:)()
{
  return MEMORY[0x1E0DEB8E8]();
}

uint64_t UnsafeMutablePointer.moveInitialize(from:count:)()
{
  return MEMORY[0x1E0DEB8F0]();
}

uint64_t UnsafeMutablePointer.move()()
{
  return MEMORY[0x1E0DEB8F8]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x1E0DEB940]();
}

uint64_t UnsafeMutableBufferPointer.baseAddress.getter()
{
  return MEMORY[0x1E0DEB980]();
}

uint64_t UnsafeMutableBufferPointer.init(start:count:)()
{
  return MEMORY[0x1E0DEB988]();
}

Swift::Void __swiftcall UnsafeMutableBufferPointer.swapAt(_:_:)(Swift::Int a1, Swift::Int a2)
{
  MEMORY[0x1E0DEB998](a1, a2);
}

uint64_t UnsafeMutableBufferPointer.init(mutating:)()
{
  return MEMORY[0x1E0DEB9B0]();
}

uint64_t UnsafeMutableBufferPointer.init(rebasing:)()
{
  return MEMORY[0x1E0DEB9B8]();
}

uint64_t type metadata accessor for UnsafeMutableBufferPointer()
{
  return MEMORY[0x1E0DEB9C0]();
}

uint64_t UnsafeMutableBufferPointer.subscript.getter()
{
  return MEMORY[0x1E0DEB9D0]();
}

uint64_t dispatch thunk of IteratorProtocol.next()()
{
  return MEMORY[0x1E0DEBB68]();
}

uint64_t debugPrint<A>(_:separator:terminator:to:)()
{
  return MEMORY[0x1E0DEC148]();
}

uint64_t _StringGuts._slowWithCString<A>(_:)()
{
  return MEMORY[0x1E0DEC280]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
  MEMORY[0x1E0DEC2A8](a1);
}

uint64_t _ArrayBuffer.requestNativeBuffer()()
{
  return MEMORY[0x1E0DEC3B8]();
}

uint64_t static ManagedBuffer.create(minimumCapacity:makingHeaderWith:)()
{
  return MEMORY[0x1E0DEC508]();
}

uint64_t ManagedBuffer.capacity.getter()
{
  return MEMORY[0x1E0DEC510]();
}

uint64_t ManagedBuffer.deinit()
{
  return MEMORY[0x1E0DEC530]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x1E0DEC588]();
}

uint64_t dispatch thunk of InstantProtocol.duration(to:)()
{
  return MEMORY[0x1E0DEC7D8]();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return MEMORY[0x1E0DEC8E0]();
}

uint64_t type metadata accessor for PartialRangeFrom()
{
  return MEMORY[0x1E0DEC910]();
}

uint64_t type metadata accessor for PartialRangeUpTo()
{
  return MEMORY[0x1E0DEC930]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x1E0DECBE0]();
}

{
  return MEMORY[0x1E0DECBE8]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x1E0DECD70]();
}

uint64_t ManagedBufferPointer.init(unsafeBufferObject:)()
{
  return MEMORY[0x1E0DECE40]();
}

Swift::Bool __swiftcall ManagedBufferPointer.isUniqueReference()()
{
  return MEMORY[0x1E0DECE48]();
}

uint64_t type metadata accessor for ManagedBufferPointer()
{
  return MEMORY[0x1E0DECE50]();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return MEMORY[0x1E0DECFF0]();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return MEMORY[0x1E0DED120]();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x1E0DED1D0]();
}

uint64_t dispatch thunk of UnkeyedDecodingContainer.count.getter()
{
  return MEMORY[0x1E0DED258]();
}

uint64_t dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)()
{
  return MEMORY[0x1E0DED290]();
}

uint64_t dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter()
{
  return MEMORY[0x1E0DED2B8]();
}

uint64_t dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)()
{
  return MEMORY[0x1E0DED3D0]();
}

uint64_t DefaultStringInterpolation.appendInterpolation<A>(_:)()
{
  return MEMORY[0x1E0DED548]();
}

uint64_t _diagnoseUnexpectedEnumCase<A>(type:)()
{
  return MEMORY[0x1E0DED5F8]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x1E0DED600]();
}

uint64_t _isBridgedVerbatimToObjectiveC<A>(_:)()
{
  return MEMORY[0x1E0DED9A0]();
}

uint64_t _copyCollectionToContiguousArray<A>(_:)()
{
  return MEMORY[0x1E0DED9C0]();
}

uint64_t Error._getEmbeddedNSError()()
{
  return MEMORY[0x1E0DEDB10]();
}

uint64_t Error._code.getter()
{
  return MEMORY[0x1E0DEDB18]();
}

uint64_t Error._domain.getter()
{
  return MEMORY[0x1E0DEDB20]();
}

uint64_t Error._userInfo.getter()
{
  return MEMORY[0x1E0DEDB28]();
}

uint64_t Slice.init(base:bounds:)()
{
  return MEMORY[0x1E0DEDDE8]();
}

uint64_t type metadata accessor for Slice()
{
  return MEMORY[0x1E0DEDE10]();
}

uint64_t print<A>(_:separator:terminator:to:)()
{
  return MEMORY[0x1E0DEDED0]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x1E0DEDEF8]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
  MEMORY[0x1E0DEDF10](a1);
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x1E0DEDF40]();
}

uint64_t type metadata accessor for Mirror.DisplayStyle()
{
  return MEMORY[0x1E0DEDFC8]();
}

uint64_t type metadata accessor for Mirror.AncestorRepresentation()
{
  return MEMORY[0x1E0DEDFF0]();
}

uint64_t Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)()
{
  return MEMORY[0x1E0DEE010]();
}

uint64_t type metadata accessor for Result()
{
  return MEMORY[0x1E0DEE030]();
}

uint64_t dispatch thunk of Decoder.unkeyedContainer()()
{
  return MEMORY[0x1E0DEE228]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x1E0DEE240]();
}

uint64_t dispatch thunk of Encoder.unkeyedContainer()()
{
  return MEMORY[0x1E0DEE258]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x1E0DEE270]();
}

uint64_t Duration.components.getter()
{
  return MEMORY[0x1E0DEE750]();
}

uint64_t static Duration.< infix(_:_:)()
{
  return MEMORY[0x1E0DEE780]();
}

uint64_t static Duration.+ infix(_:_:)()
{
  return MEMORY[0x1E0DEE798]();
}

uint64_t static Duration.- infix(_:_:)()
{
  return MEMORY[0x1E0DEE7A0]();
}

uint64_t static Duration.== infix(_:_:)()
{
  return MEMORY[0x1E0DEE7A8]();
}

uint64_t Duration.hash(into:)()
{
  return MEMORY[0x1E0DEE7B8]();
}

uint64_t static Duration.zero.getter()
{
  return MEMORY[0x1E0DEE7C0]();
}

uint64_t CodingKey.description.getter()
{
  return MEMORY[0x1E0DEE8E0]();
}

uint64_t CodingKey.debugDescription.getter()
{
  return MEMORY[0x1E0DEE8E8]();
}

uint64_t _typeName(_:qualified:)()
{
  return MEMORY[0x1E0DEE978]();
}

mach_header_64 *_NSGetMachExecuteHeader(void)
{
  return (mach_header_64 *)MEMORY[0x1E0C809E0]();
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1E0DE43E8](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1E0DE4420](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4428](this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1E0DE4468](this, __pos, __s);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x1E0DE4D60](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x1E0DE4D80](retstr, __val);
}

void operator delete(void *__p)
{
  off_1E25FD958(__p);
}

uint64_t operator delete()
{
  return off_1E25FD960();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1E25FD968(__sz);
}

uint64_t operator new()
{
  return off_1E25FD970();
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1E0C80A98](lpfunc, obj, lpdso_handle);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1E0DE50B8](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x1E0DE50C0](a1);
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C810D0](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

uint64_t _os_trace_lazy_init_completed_4swift()
{
  return MEMORY[0x1E0C81128]();
}

uint64_t _swift_getObjCClassInstanceExtents()
{
  return MEMORY[0x1E0DEE9F0]();
}

uint64_t _swift_objcClassUsesNativeSwiftReferenceCounting()
{
  return MEMORY[0x1E0DEEA08]();
}

uint64_t _swift_registerConcurrencyStandardTypeDescriptors()
{
  return MEMORY[0x1E0DEEA10]();
}

uint64_t _swift_reportToDebugger()
{
  return MEMORY[0x1E0DEEA18]();
}

uint64_t _swift_shouldReportFatalErrorsToDebugger()
{
  return MEMORY[0x1E0DEEA20]();
}

void abort(void)
{
  MEMORY[0x1E0C813A8]();
}

int asl_log(asl_object_t client, asl_object_t msg, int level, const char *format, ...)
{
  return MEMORY[0x1E0C815D0](client, msg, *(_QWORD *)&level, format);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

int clock_getres(clockid_t __clock_id, timespec *__res)
{
  return MEMORY[0x1E0C82660](*(_QWORD *)&__clock_id, __res);
}

int clock_gettime(clockid_t __clock_id, timespec *__tp)
{
  return MEMORY[0x1E0C82668](*(_QWORD *)&__clock_id, __tp);
}

uint64_t concurrencyEnableCooperativeQueues()
{
  return MEMORY[0x1E0DEEA70]();
}

uint64_t concurrencyEnableJobDispatchIntegration()
{
  return MEMORY[0x1E0DEEA78]();
}

uint64_t concurrencyIsCurrentExecutorLegacyModeOverride()
{
  return MEMORY[0x1E0DEEA80]();
}

uint64_t concurrencyValidateUncheckedContinuations()
{
  return MEMORY[0x1E0DEEA88]();
}

void dispatch_activate(dispatch_object_t object)
{
  MEMORY[0x1E0C82BC0](object);
}

void dispatch_after_f(dispatch_time_t when, dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x1E0C82BD0](when, queue, context, work);
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
  MEMORY[0x1E0C82BE8](queue);
}

void dispatch_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x1E0C82C18](queue, context, work);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

uint64_t dispatch_lock_override_end()
{
  return MEMORY[0x1E0C82DA8]();
}

uint64_t dispatch_lock_override_start_with_debounce()
{
  return MEMORY[0x1E0C82DB0]();
}

void dispatch_main(void)
{
  MEMORY[0x1E0C82DF0]();
}

void dispatch_once_f(dispatch_once_t *predicate, void *context, dispatch_function_t function)
{
  MEMORY[0x1E0C82E10](predicate, context, function);
}

void dispatch_release(dispatch_object_t object)
{
  MEMORY[0x1E0C82E98](object);
}

void dispatch_set_context(dispatch_object_t object, void *context)
{
  MEMORY[0x1E0C82EE0](object, context);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1E0C82F20](type, handle, mask, queue);
}

void dispatch_source_set_event_handler_f(dispatch_source_t source, dispatch_function_t handler)
{
  MEMORY[0x1E0C82F60](source, handler);
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
  MEMORY[0x1E0C82F78](source, start, interval, leeway);
}

uint64_t dispatch_thread_get_current_override_qos_floor()
{
  return MEMORY[0x1E0C82FA8]();
}

uint64_t dispatch_thread_override_self()
{
  return MEMORY[0x1E0C82FB0]();
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

void exit(int a1)
{
  MEMORY[0x1E0C83278](*(_QWORD *)&a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x1E0C83370](a1);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x1E0C83490](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1E0C83660](a1);
}

uint8_t *__cdecl getsectiondata(const mach_header_64 *mhp, const char *segname, const char *sectname, unint64_t *size)
{
  return (uint8_t *)MEMORY[0x1E0C837E0](mhp, segname, sectname, size);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1E0C83E68](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1E0C83EE0](ptr);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

errno_t memset_s(void *__s, rsize_t __smax, int __c, rsize_t __n)
{
  return MEMORY[0x1E0C840D0](__s, __smax, *(_QWORD *)&__c, __n);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x1E0DE7D58]();
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

void os_release(void *object)
{
  MEMORY[0x1E0C84910](object);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1E0C84920](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1E0C84928](log);
}

os_signpost_id_t os_signpost_id_make_with_pointer(os_log_t log, const void *ptr)
{
  return MEMORY[0x1E0C84930](log, ptr);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C84998](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C849B0](lock);
}

int pthread_equal(pthread_t a1, pthread_t a2)
{
  return MEMORY[0x1E0C84D80](a1, a2);
}

int pthread_main_np(void)
{
  return MEMORY[0x1E0C84E08]();
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x1E0C84ED8]();
}

qos_class_t qos_class_self(void)
{
  return MEMORY[0x1E0C84F80]();
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C85658](__str, __endptr, *(_QWORD *)&__base);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x1E0DEEA98]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x1E0DEEAA8]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1E0DEEAB0]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x1E0DEEAB8]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x1E0DEEAC0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1E0DEEAD8]();
}

uint64_t swift_bincompat_useLegacyNonCrashingExecutorChecks()
{
  return MEMORY[0x1E0DEEB00]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1E0DEEB08]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1E0DEEB18]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x1E0DEEB28]();
}

uint64_t swift_compareWitnessTables()
{
  return MEMORY[0x1E0DEEB30]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x1E0DEEB50]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x1E0DEEB60]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1E0DEEB80]();
}

uint64_t swift_errorInMain()
{
  return MEMORY[0x1E0DEEBE8]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1E0DEEBF0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1E0DEEBF8]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x1E0DEEC00]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x1E0DEEC08]();
}

uint64_t swift_getCanonicalSpecializedMetadata()
{
  return MEMORY[0x1E0DEEC30]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x1E0DEEC40]();
}

uint64_t swift_getFunctionTypeMetadata0()
{
  return MEMORY[0x1E0DEEC90]();
}

uint64_t swift_getFunctionTypeMetadata1()
{
  return MEMORY[0x1E0DEEC98]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x1E0DEECB0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1E0DEECE0]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x1E0DEED20]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1E0DEED38]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1E0DEED40]();
}

uint64_t swift_getTypeName()
{
  return MEMORY[0x1E0DEED48]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1E0DEED50]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x1E0DEED58]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x1E0DEED60]();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return MEMORY[0x1E0DEED70]();
}

uint64_t swift_initStaticObject()
{
  return MEMORY[0x1E0DEED80]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x1E0DEED88]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x1E0DEED98]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1E0DEEDD0]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x1E0DEEDE0]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x1E0DEEDE8]();
}

uint64_t swift_once()
{
  return MEMORY[0x1E0DEEE00]();
}

uint64_t swift_release()
{
  return MEMORY[0x1E0DEEE30]();
}

uint64_t swift_reportError()
{
  return MEMORY[0x1E0DEEE40]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1E0DEEE48]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x1E0DEEE50]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1E0DEEE78]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1E0DEEE80]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x1E0DEEE98]();
}

uint64_t swift_task_enterThreadLocalContext()
{
  return MEMORY[0x1E0DEEEA8]();
}

uint64_t swift_task_exitThreadLocalContext()
{
  return MEMORY[0x1E0DEEEB0]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x1E0DEEEB8]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1E0DEEEC0]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1E0DEEED0]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1E0DEEFC0]();
}

uint64_t swift_willThrowTypedImpl()
{
  return MEMORY[0x1E0DEEFC8]();
}

int vfprintf(FILE *a1, const char *a2, va_list a3)
{
  return MEMORY[0x1E0C85A68](a1, a2, a3);
}

uint64_t voucher_adopt()
{
  return MEMORY[0x1E0C85B10]();
}

uint64_t voucher_copy()
{
  return MEMORY[0x1E0C85B18]();
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x1E0C85B98](__str, __size, __format, a4);
}

