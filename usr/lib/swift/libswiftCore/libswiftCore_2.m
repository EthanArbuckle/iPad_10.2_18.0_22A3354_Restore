uint64_t closure #1 in _parseInteger<A, B>(ascii:radix:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (a2 <= 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
  v10 = *a1;
  if (v10 == 43)
  {
    v18 = specialized Collection.subscript.getter(1, (uint64_t)a1, a2);
    a1 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v18, v19, v20, v21);
    v15 = a6;
LABEL_7:
    v16 = a3;
    v17 = 0;
    return _parseIntegerDigits<A>(ascii:radix:isNegative:)(a1, a2, v16, v17, a4, a5, v15);
  }
  if (v10 != 45)
  {
    v15 = a6;
    goto LABEL_7;
  }
  v11 = specialized Collection.subscript.getter(1, (uint64_t)a1, a2);
  a1 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v11, v12, v13, v14);
  v15 = a6;
  v16 = a3;
  v17 = 1;
  return _parseIntegerDigits<A>(ascii:radix:isNegative:)(a1, a2, v16, v17, a4, a5, v15);
}

uint64_t FixedWidthInteger.init<A>(_:radix:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, Class *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  const char *v10;
  unint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(Class *, const char *);
  uint64_t v38;
  uint64_t v39;
  unint64_t AssociatedConformanceWitness;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;

  v71 = a4;
  v72 = a1;
  v70 = a5;
  v7 = (uint64_t)*(a3 - 1);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = v10;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v10, (uint64_t)a3, (uint64_t)&protocol requirements base descriptor for StringProtocol, associated type descriptor for StringProtocol.UTF8View);
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v14 = (char *)&v59 - v13;
  v17 = type metadata accessor for Optional((const char *)0xFF, a2, v15, v16);
  v20 = type metadata accessor for Optional(0, v17, v18, v19);
  v21 = MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v59 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1E0C80A78](v21);
  v26 = (char *)&v59 - v25;
  v27 = MEMORY[0x1E0C80A78](v24);
  v28 = MEMORY[0x1E0C80A78](v27);
  if ((unint64_t)(v31 - 37) <= 0xFFFFFFFFFFFFFFDCLL)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Radix not in range 2...36", 25, 2, "Swift/IntegerParsing.swift", 26, 2, 0x80uLL, 0);
  v61 = v12;
  v62 = (uint64_t)&v59 - v30;
  v63 = v29;
  v64 = v28;
  v65 = v33;
  v66 = v32;
  v68 = v7;
  v69 = v31;
  v67 = v9;
  v34 = a2;
  v35 = v71;
  if (((*(uint64_t (**)(Class *))(*(_QWORD *)(*((_QWORD *)v73 + 1) + 8) + 104))(a3) & 1) != 0)
  {
    (*(void (**)(uint64_t, Class *))(v68 + 8))(v72, a3);
    v52 = *(_QWORD *)(a2 - 8);
  }
  else
  {
    v36 = (uint64_t)v73;
    v37 = (uint64_t (*)(Class *, const char *))*((_QWORD *)v73 + 15);
    v60 = v23;
    v38 = v72;
    v39 = v37(a3, v73);
    v59 = (uint64_t)&v59;
    MEMORY[0x1E0C80A78](v39);
    *(&v59 - 6) = a2;
    *(&v59 - 5) = (uint64_t)a3;
    v56 = v35;
    v57 = v36;
    v58 = v69;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v36, (uint64_t)a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for StringProtocol, (uint64_t)&associated conformance descriptor for StringProtocol.StringProtocol.UTF8View: Collection);
    v41 = v17;
    (*(void (**)(uint64_t (*)@<X0>(unsigned __int8 *@<X0>, uint64_t@<X1>, uint64_t@<X8>), uint64_t *, uint64_t, unint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 8) + 72))(partial apply for closure #1 in FixedWidthInteger.init<A>(_:radix:), &v59 - 8, v17, AssociatedTypeWitness);
    (*(void (**)(char *, unint64_t))(v61 + 8))(v14, AssociatedTypeWitness);
    v43 = (uint64_t)v67;
    v42 = v68;
    v44 = v38;
    v45 = v60;
    (*(void (**)(char *, uint64_t, Class *))(v68 + 32))(v67, v44, a3);
    v47 = v63;
    v46 = v64;
    (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v45, v26, v64);
    v48 = v66;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v45, 1, v41) == 1)
    {
      v49 = v62;
      _parseInteger<A, B>(ascii:radix:)(v43, v69, a3, v34, (uint64_t)v73, v71, v62);
      (*(void (**)(uint64_t, Class *))(v42 + 8))(v43, a3);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v45, v46);
      v50 = *(void (**)(uint64_t, char *, uint64_t))(v48 + 32);
    }
    else
    {
      (*(void (**)(uint64_t, Class *))(v42 + 8))(v43, a3);
      v50 = *(void (**)(uint64_t, char *, uint64_t))(v48 + 32);
      v49 = v62;
      v50(v62, v45, v41);
    }
    v51 = v65;
    v50(v65, (char *)v49, v41);
    v52 = *(_QWORD *)(v34 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v51, 1, v34) != 1)
    {
      v54 = v70;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 32))(v70, v51, v34);
      v53 = 0;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 56))(v54, v53, 1, v34);
    }
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v51, v41);
  }
  v53 = 1;
  v54 = v70;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 56))(v54, v53, 1, v34);
}

uint64_t specialized closure #1 in _parseInteger<A, B>(ascii:radix:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  unint64_t *TupleTypeMetadata2;
  uint64_t v12;
  uint64_t v13;
  unint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 *v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  void (*v56)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v57;
  unint64_t v58;
  unsigned __int8 *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  unsigned int v64;
  char v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  void (*v71)(char *, uint64_t);
  void (*v72)(char *, char *, uint64_t);
  char v73;
  char *v74;
  uint64_t v75;
  char *v76;
  unsigned __int8 *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  int v86;
  int v87;
  int v88;
  uint64_t v89;
  void (*v90)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v91;
  unint64_t AssociatedConformanceWitness;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  unsigned int v97;
  char v98;
  unint64_t v99;
  unsigned __int8 *v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  void (*v104)(char *, char *, uint64_t);
  char v105;
  char *v106;
  uint64_t (*v107)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v108;
  uint64_t v109;
  int v110;
  int v111;
  int v112;
  uint64_t v113;
  void (*v114)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v115;
  unint64_t v116;
  unsigned __int8 *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  char v122;
  unint64_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  char v127;
  uint64_t v128;
  void (*v129)(char *, uint64_t);
  void (*v130)(char *, char *, uint64_t);
  char v131;
  char *v132;
  char *v133;
  uint64_t v134;
  void (*v135)(char *, uint64_t);
  char *v136;
  int v138;
  int v139;
  char *v140;
  int v141;
  uint64_t v142;
  void (*v143)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unsigned __int8 *v144;
  char *v145;
  char *v146;
  char *v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;

  v145 = a6;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, a4, (uint64_t)&type metadata for Bool, 0, 0);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v147 = (char *)&v138 - v12;
  v148 = a5;
  v150 = *(_QWORD *)(a5 + 8);
  v13 = *(_QWORD *)(*(_QWORD *)(v150 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v13, a4, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v15 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v151 = *(_QWORD *)(a4 - 8);
  v16 = MEMORY[0x1E0C80A78](v15);
  v17 = MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v138 - v18;
  v20 = MEMORY[0x1E0C80A78](v17);
  MEMORY[0x1E0C80A78](v20);
  v22 = MEMORY[0x1E0C80A78]((char *)&v138 - v21);
  v24 = (char *)&v138 - v23;
  v25 = MEMORY[0x1E0C80A78](v22);
  v149 = (char *)&v138 - v26;
  v27 = MEMORY[0x1E0C80A78](v25);
  v146 = (char *)&v138 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v31 = (char *)&v138 - v30;
  v32 = MEMORY[0x1E0C80A78](v29);
  v34 = (char *)&v138 - v33;
  v35 = MEMORY[0x1E0C80A78](v32);
  v40 = a2;
  v42 = (char *)&v138 - v41;
  if (v40 <= 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
  v43 = *a1;
  if (v43 == 43)
  {
    v77 = v39;
    v144 = v38;
    v149 = v37;
    v78 = specialized Collection.subscript.getter(1, (uint64_t)a1, v40);
    v82 = specialized UnsafeBufferPointer.init(rebasing:)(v78, v79, v80, v81);
    if (v83)
    {
      v85 = (char *)v82;
      v142 = v83;
      v86 = a3 + 48;
      v87 = a3 + 55;
      v88 = a3 + 87;
      if (a3 <= 10)
        v88 = 97;
      v138 = v88;
      if (a3 <= 10)
        v87 = 65;
      v139 = v87;
      v152 = a3;
      v89 = v150;
      v90 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v150 + 96);
      if (a3 > 10)
        v86 = 58;
      v141 = v86;
      v91 = lazy protocol witness table accessor for type Int and conformance Int(v82, v83, v84);
      v143 = v90;
      v90(&v152, &type metadata for Int, v91, a4, v89);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v13, a4, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
      v93 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v13 + 24))(v77, a4, v13);
      if (!v85)
      {
LABEL_49:
        v75 = v151;
        (*(void (**)(char *, uint64_t))(v151 + 8))(v149, a4);
        v76 = v145;
        (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v145, v19, a4);
        goto LABEL_50;
      }
      v96 = v146;
      while (1)
      {
        v97 = *v85;
        if (v97 < 0x30 || v97 >= v141)
        {
          if (v97 < 0x41 || v97 >= v139)
          {
            if (v97 < 0x61 || v97 >= v138)
            {
              v134 = v151;
              v135 = *(void (**)(char *, uint64_t))(v151 + 8);
              v135(v19, a4);
              goto LABEL_81;
            }
            v140 = v85;
            v98 = v97 - 87;
          }
          else
          {
            v140 = v85;
            v98 = v97 - 55;
          }
          LOBYTE(v152) = v98;
        }
        else
        {
          v140 = v85;
          LOBYTE(v152) = v97 - 48;
        }
        v99 = lazy protocol witness table accessor for type UInt8 and conformance UInt8(v93, v94, v95);
        v100 = v144;
        v143(&v152, &type metadata for UInt8, v99, a4, v150);
        v101 = v148;
        v102 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v148 + 96))(v96, v149, a4, v148);
        v103 = v151;
        v71 = *(void (**)(char *, uint64_t))(v151 + 8);
        v71(v19, a4);
        v104 = *(void (**)(char *, char *, uint64_t))(v103 + 32);
        v104(v19, v96, a4);
        v105 = (*(uint64_t (**)(char *, unsigned __int8 *, uint64_t, uint64_t))(v101 + 80))(v96, v100, a4, v101);
        v71((char *)v100, a4);
        v71(v19, a4);
        v106 = v147;
        v104(v147, v96, a4);
        v93 = ((uint64_t (*)(char *, char *, uint64_t))v104)(v19, v106, a4);
        if ((v102 & 1) != 0 || (v105 & 1) != 0)
          break;
        v85 = v140 + 1;
        if (!--v142)
          goto LABEL_49;
      }
      v71(v19, a4);
      v133 = v149;
LABEL_76:
      v71(v133, a4);
    }
LABEL_77:
    v107 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v151 + 56);
    goto LABEL_83;
  }
  v144 = v39;
  if (v43 == 45)
  {
    v149 = v31;
    v44 = specialized Collection.subscript.getter(1, (uint64_t)a1, v40);
    v48 = specialized UnsafeBufferPointer.init(rebasing:)(v44, v45, v46, v47);
    if (v49)
    {
      v51 = (unsigned __int8 *)v48;
      v142 = v49;
      v52 = a3 + 48;
      v53 = a3 + 55;
      v54 = a3 + 87;
      if (a3 <= 10)
        v54 = 97;
      v138 = v54;
      if (a3 <= 10)
        v53 = 65;
      v139 = v53;
      v152 = a3;
      v55 = v150;
      v56 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v150 + 96);
      if (a3 > 10)
        v52 = 58;
      v141 = v52;
      v57 = lazy protocol witness table accessor for type Int and conformance Int(v48, v49, v50);
      v143 = v56;
      v56(&v152, &type metadata for Int, v57, a4, v55);
      v58 = swift_getAssociatedConformanceWitness(v13, a4, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v59 = v144;
      (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v58 + 8))(&unk_1816B7DA8, 256, AssociatedTypeWitness, v58);
      v60 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v13 + 24))(v59, a4, v13);
      if (v51)
      {
        v140 = v42;
        v63 = v146;
        do
        {
          v64 = *v51;
          if (v64 < 0x30 || v64 >= v141)
          {
            if (v64 < 0x41 || v64 >= v139)
            {
              if (v64 < 0x61 || v64 >= v138)
              {
                v134 = v151;
                v135 = *(void (**)(char *, uint64_t))(v151 + 8);
                v135(v34, a4);
                v136 = v42;
                goto LABEL_82;
              }
              v144 = v51;
              v65 = v64 - 87;
            }
            else
            {
              v144 = v51;
              v65 = v64 - 55;
            }
            LOBYTE(v152) = v65;
          }
          else
          {
            v144 = v51;
            LOBYTE(v152) = v64 - 48;
          }
          v66 = lazy protocol witness table accessor for type UInt8 and conformance UInt8(v60, v61, v62);
          v67 = v149;
          v143(&v152, &type metadata for UInt8, v66, a4, v150);
          v68 = v148;
          v69 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v148 + 96))(v63, v42, a4, v148);
          v70 = v151;
          v71 = *(void (**)(char *, uint64_t))(v151 + 8);
          v71(v34, a4);
          v72 = *(void (**)(char *, char *, uint64_t))(v70 + 32);
          v72(v34, v63, a4);
          v73 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v68 + 88))(v63, v67, a4, v68);
          v71(v67, a4);
          v71(v34, a4);
          v74 = v147;
          v72(v147, v63, a4);
          v60 = ((uint64_t (*)(char *, char *, uint64_t))v72)(v34, v74, a4);
          if ((v69 & 1) != 0 || (v73 & 1) != 0)
          {
            v71(v34, a4);
            v133 = v140;
            goto LABEL_76;
          }
          v51 = v144 + 1;
          --v142;
          v42 = v140;
        }
        while (v142);
      }
      v75 = v151;
      (*(void (**)(char *, uint64_t))(v151 + 8))(v42, a4);
      v76 = v145;
      (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v145, v34, a4);
LABEL_50:
      v107 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v75 + 56);
LABEL_51:
      v108 = v76;
      v109 = 0;
      return v107((uint64_t)v108, v109, 1, a4);
    }
    goto LABEL_77;
  }
  v142 = v40;
  v143 = (void (*)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))v35;
  v110 = a3 + 48;
  v111 = a3 + 55;
  v112 = a3 + 87;
  if (a3 <= 10)
    v112 = 97;
  v138 = v112;
  if (a3 <= 10)
    v111 = 65;
  v139 = v111;
  v152 = a3;
  v113 = v150;
  v114 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v150 + 96);
  if (a3 > 10)
    v110 = 58;
  v141 = v110;
  v115 = lazy protocol witness table accessor for type Int and conformance Int(v35, v36, v40);
  v114(&v152, &type metadata for Int, v115, a4, v113);
  v116 = swift_getAssociatedConformanceWitness(v13, a4, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  v117 = v144;
  (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v116 + 8))(&unk_1816B7DA8, 256, AssociatedTypeWitness, v116);
  v118 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v13 + 24))(v117, a4, v13);
  v140 = (char *)v114;
  while (1)
  {
    v121 = *a1;
    if (v121 < 0x30 || v121 >= v141)
      break;
    v144 = a1;
    LOBYTE(v152) = v121 - 48;
LABEL_69:
    v123 = lazy protocol witness table accessor for type UInt8 and conformance UInt8(v118, v119, v120);
    v124 = (char *)v143;
    v114(&v152, &type metadata for UInt8, v123, a4, v150);
    v125 = v148;
    v126 = v146;
    v127 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v148 + 96))(v146, v149, a4, v148);
    v128 = v151;
    v129 = *(void (**)(char *, uint64_t))(v151 + 8);
    v129(v24, a4);
    v130 = *(void (**)(char *, char *, uint64_t))(v128 + 32);
    v130(v24, v126, a4);
    v131 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v125 + 80))(v126, v124, a4, v125);
    v129(v124, a4);
    v129(v24, a4);
    v132 = v147;
    v130(v147, v126, a4);
    v118 = ((uint64_t (*)(char *, char *, uint64_t))v130)(v24, v132, a4);
    if ((v127 & 1) != 0 || (v131 & 1) != 0)
    {
      v129(v24, a4);
      v129(v149, a4);
      goto LABEL_77;
    }
    a1 = v144 + 1;
    --v142;
    v114 = (void (*)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))v140;
    if (!v142)
    {
      v129(v149, a4);
      v76 = v145;
      v130(v145, v24, a4);
      v107 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v151 + 56);
      goto LABEL_51;
    }
  }
  if (v121 >= 0x41 && v121 < v139)
  {
    v144 = a1;
    v122 = v121 - 55;
LABEL_68:
    LOBYTE(v152) = v122;
    goto LABEL_69;
  }
  if (v121 >= 0x61 && v121 < v138)
  {
    v144 = a1;
    v122 = v121 - 87;
    goto LABEL_68;
  }
  v134 = v151;
  v135 = *(void (**)(char *, uint64_t))(v151 + 8);
  v135(v24, a4);
LABEL_81:
  v136 = v149;
LABEL_82:
  v135(v136, a4);
  v107 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v134 + 56);
LABEL_83:
  v108 = v145;
  v109 = 1;
  return v107((uint64_t)v108, v109, 1, a4);
}

uint64_t closure #1 in FixedWidthInteger.init<A>(_:radix:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (a2 <= 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
  v10 = *a1;
  if (v10 == 43)
  {
    v18 = specialized Collection.subscript.getter(1, (uint64_t)a1, a2);
    a1 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v18, v19, v20, v21);
    v15 = a6;
LABEL_7:
    v16 = a3;
    v17 = 0;
    return _parseIntegerDigits<A>(ascii:radix:isNegative:)(a1, a2, v16, v17, a4, a5, v15);
  }
  if (v10 != 45)
  {
    v15 = a6;
    goto LABEL_7;
  }
  v11 = specialized Collection.subscript.getter(1, (uint64_t)a1, a2);
  a1 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v11, v12, v13, v14);
  v15 = a6;
  v16 = a3;
  v17 = 1;
  return _parseIntegerDigits<A>(ascii:radix:isNegative:)(a1, a2, v16, v17, a4, a5, v15);
}

Swift::UInt16 __swiftcall _ascii16(_:)(Swift::Unicode::Scalar a1)
{
  if (a1._value >= 0x10000)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xD7FuLL, 0);
  return a1._value;
}

BOOL static UInt32.>= infix(_:_:)(unsigned int a1, unsigned int a2)
{
  return a1 >= a2;
}

BOOL static UInt32.<= infix(_:_:)(unsigned int a1, unsigned int a2)
{
  return a2 >= a1;
}

uint64_t _asciiDigit<A, B>(codeUnit:radix:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  unsigned __int16 v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(__int16 *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v34;
  __int16 *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  unint64_t AssociatedConformanceWitness;
  char *v42;
  char v43;
  void (*v44)(char *, uint64_t);
  char *v45;
  unsigned __int16 v46;
  void (*v47)(unsigned __int16 *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v52;
  const char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int16 v57;
  unsigned __int16 v58;
  unsigned __int16 v59;

  v55 = a2;
  v56 = a7;
  v53 = *(const char **)(*(_QWORD *)(a6 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v53, a4, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v13 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v52 = (char *)&v52 - v14;
  v15 = *(_QWORD *)(a4 - 8);
  v16 = MEMORY[0x1E0C80A78](v13);
  v54 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v52 - v19;
  v21 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v18);
  v23 = (char *)&v52 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v23, a1, a3);
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a5 + 8) + 120))(a3);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, a3);
  if ((unsigned __int16)(v24 - 58) > 0xFFF5u)
  {
    v26 = -48;
LABEL_7:
    v25 = v15;
    goto LABEL_8;
  }
  if ((unsigned __int16)(v24 - 91) > 0xFFE5u)
  {
    v26 = -55;
    goto LABEL_7;
  }
  v25 = v15;
  if ((unsigned __int16)(v24 - 123) < 0xFFE6u)
    goto LABEL_21;
  v26 = -87;
LABEL_8:
  v27 = v26 + v24;
  v28 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 64))(a4, a6);
  v29 = v55;
  v30 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 128))(a4, a6);
  if ((v28 & 1) != 0)
  {
    if (v30 >= 17)
    {
      v57 = v27;
      v33 = *(void (**)(__int16 *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a6 + 96);
      v34 = lazy protocol witness table accessor for type UInt16 and conformance UInt16(v30, v31, v32);
      v35 = (__int16 *)&v57;
      goto LABEL_13;
    }
    v40 = v53;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v53, a4, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    v42 = v52;
    (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
    (*((void (**)(char *, uint64_t, const char *))v40 + 3))(v42, a4, v40);
    v43 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a6 + 32) + 8) + 40))(v29, v20, a4);
    v44 = *(void (**)(char *, uint64_t))(v25 + 8);
    v44(v20, a4);
    v45 = v54;
    (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v54, v29, a4);
    if ((v43 & 1) == 0)
    {
      v44(v45, a4);
      goto LABEL_21;
    }
    v46 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 120))(a4, a6);
    v37 = ((uint64_t (*)(char *, uint64_t))v44)(v45, a4);
    goto LABEL_18;
  }
  if (v30 <= 16)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v20, v29, a4);
    v46 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 120))(a4, a6);
    v37 = (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v20, a4);
LABEL_18:
    if (v27 < v46)
      goto LABEL_19;
LABEL_21:
    v50 = 1;
    v49 = v56;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56))(v49, v50, 1, a4);
  }
  v58 = v27;
  v33 = *(void (**)(__int16 *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a6 + 96);
  v34 = lazy protocol witness table accessor for type UInt16 and conformance UInt16(v30, v31, v32);
  v35 = (__int16 *)&v58;
LABEL_13:
  v33(v35, &type metadata for UInt16, v34, a4, a6);
  v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a6 + 32) + 8) + 16))(v20, v29, a4);
  v37 = (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v20, a4);
  if ((v36 & 1) == 0)
    goto LABEL_21;
LABEL_19:
  v59 = v27;
  v47 = *(void (**)(unsigned __int16 *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a6 + 96);
  v48 = lazy protocol witness table accessor for type UInt16 and conformance UInt16(v37, v38, v39);
  v49 = v56;
  v47(&v59, &type metadata for UInt16, v48, a4, a6);
  v50 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56))(v49, v50, 1, a4);
}

uint64_t UInt16.init(_builtinIntegerLiteral:)(unsigned __int16 *a1, unint64_t a2)
{
  if (a2 >> 9 <= 8 && (a2 & 1) == 0)
    return *a1;
  else
    return 0;
}

uint64_t _parseUnsignedASCII<A, B>(first:rest:radix:positive:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, const char *a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>, uint64_t a10)
{
  unint64_t *TupleTypeMetadata2;
  uint64_t v16;
  unint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  unsigned int (*v53)(char *, uint64_t, uint64_t);
  void (*v54)(char *, char *, uint64_t);
  void (*v55)(char *, uint64_t);
  char *v56;
  uint64_t v57;
  const char *v58;
  unint64_t AssociatedConformanceWitness;
  char *v60;
  char *v61;
  char *v62;
  char v63;
  void (*v64)(char *, uint64_t);
  char *v65;
  char *v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t);
  char *v69;
  void (*v71)(_QWORD, _QWORD, _QWORD);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  unsigned int v76;
  char *v77;
  char *v78;
  void (*v79)(char *, char *, uint64_t);
  uint64_t v80;
  char *v81;
  void (*v82)(char *, uint64_t);
  char *v83;
  char v84;
  char *v85;
  char *v86;
  char *v87;
  int v88;
  uint64_t (*v89)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v90;
  void (*v91)(uint64_t, uint64_t);
  char *v92;
  uint64_t v93;
  void (*v94)(_QWORD, _QWORD, _QWORD);
  uint64_t v95;
  void (*v96)(char *, uint64_t, uint64_t);
  uint64_t v97;
  void (*v98)(char *, char *, uint64_t);
  char *v99;
  uint64_t v100;
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  const char *v117;
  unint64_t v118;
  int v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  _QWORD *v125;

  v119 = a4;
  v115 = a2;
  v124 = a9;
  v125 = a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, a6, (uint64_t)&type metadata for Bool, 0, 0);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v106 = (char *)&v93 - v16;
  v116 = a5;
  v117 = a7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a7, a5, (uint64_t)&protocol requirements base descriptor for IteratorProtocol, associated type descriptor for IteratorProtocol.Element);
  v103 = type metadata accessor for Optional(0, AssociatedTypeWitness, v18, v19);
  v102 = *(_QWORD *)(v103 - 8);
  v20 = MEMORY[0x1E0C80A78](v103);
  v114 = (char *)&v93 - v21;
  v113 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v20);
  v109 = (char *)&v93 - v22;
  v112 = a8;
  v23 = *(_QWORD *)(a8 + 8);
  v101 = *(const char **)(*(_QWORD *)(v23 + 24) + 16);
  v24 = swift_getAssociatedTypeWitness(0, v101, a6, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v25 = MEMORY[0x1E0C80A78](v24);
  v100 = (uint64_t)&v93 - v26;
  v27 = *(_QWORD **)(a6 - 8);
  v28 = MEMORY[0x1E0C80A78](v25);
  v120 = (char *)&v93 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x1E0C80A78](v28);
  v105 = (char *)&v93 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v104 = (char *)&v93 - v33;
  v34 = MEMORY[0x1E0C80A78](v32);
  v111 = (char *)&v93 - v35;
  v36 = MEMORY[0x1E0C80A78](v34);
  v99 = (char *)&v93 - v37;
  MEMORY[0x1E0C80A78](v36);
  v123 = (char *)&v93 - v38;
  v41 = type metadata accessor for Optional(0, a6, v39, v40);
  v42 = *(_QWORD *)(v41 - 8);
  v43 = MEMORY[0x1E0C80A78](v41);
  v107 = (char *)&v93 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = MEMORY[0x1E0C80A78](v43);
  v121 = (uint64_t)&v93 - v46;
  v47 = MEMORY[0x1E0C80A78](v45);
  v49 = (char *)&v93 - v48;
  MEMORY[0x1E0C80A78](v47);
  v122 = a3;
  v118 = AssociatedTypeWitness;
  v50 = AssociatedTypeWitness;
  v52 = (char *)&v93 - v51;
  v110 = a10;
  v108 = v23;
  _asciiDigit<A, B>(codeUnit:radix:)((uint64_t)v125, a3, v50, a6, a10, v23, (uint64_t)&v93 - v51);
  v125 = v27;
  v53 = (unsigned int (*)(char *, uint64_t, uint64_t))v27[6];
  if (v53(v52, 1, a6) == 1)
  {
    (*(void (**)(char *, uint64_t))(v42 + 8))(v52, v41);
LABEL_21:
    v89 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v125[7];
    return v89((uint64_t)v124, 1, 1, a6);
  }
  v54 = *(void (**)(char *, char *, uint64_t))(v42 + 16);
  v54(v49, v52, v41);
  if (v53(v49, 1, a6) == 1)
  {
    v55 = *(void (**)(char *, uint64_t))(v42 + 8);
    v55(v52, v41);
    v55(v49, v41);
    goto LABEL_21;
  }
  v96 = (void (*)(char *, uint64_t, uint64_t))v54;
  v56 = v123;
  v98 = (void (*)(char *, char *, uint64_t))v125[4];
  v98(v123, v49, a6);
  v57 = v118;
  v97 = v41;
  if ((v119 & 1) == 0)
  {
    v58 = v101;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v101, a6, v24, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    v60 = (char *)v100;
    (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, v24, AssociatedConformanceWitness);
    v61 = v111;
    (*((void (**)(char *, uint64_t, const char *))v58 + 3))(v60, a6, v58);
    v62 = v99;
    v63 = (*(uint64_t (**)(char *, char *, uint64_t))(v112 + 88))(v99, v56, a6);
    v64 = (void (*)(char *, uint64_t))v125[1];
    v64(v61, a6);
    v64(v56, a6);
    if ((v63 & 1) != 0)
    {
      v64(v62, a6);
      (*(void (**)(char *, uint64_t))(v42 + 8))(v52, v97);
      goto LABEL_21;
    }
    v98(v56, v62, a6);
    v41 = v97;
  }
  v65 = (char *)*((_QWORD *)v117 + 2);
  v66 = v114;
  ((void (*)(uint64_t))v65)(v116);
  v67 = v113;
  v101 = *(const char **)(v113 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v101)(v66, 1, v57) != 1)
  {
    v99 = v65;
    v71 = *(void (**)(_QWORD, _QWORD, _QWORD))(v67 + 32);
    v72 = 10;
    if ((v119 & 1) == 0)
      v72 = 11;
    v100 = v72;
    v95 = v42;
    v94 = v71;
    while (1)
    {
      v73 = (uint64_t)v109;
      v71(v109, v66, v57);
      v74 = v121;
      _asciiDigit<A, B>(codeUnit:radix:)(v73, v122, v57, a6, v110, v108, v121);
      (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v73, v57);
      if (v53((char *)v74, 1, a6) == 1)
      {
        v90 = v125;
        ((void (*)(char *, uint64_t))v125[1])(v123, a6);
        v91 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
        v91(v74, v41);
        v92 = v52;
        goto LABEL_25;
      }
      v75 = v107;
      v96(v107, v74, v41);
      v76 = v53(v75, 1, a6);
      v77 = v123;
      if (v76 == 1)
        break;
      v78 = v104;
      v79 = v98;
      v98(v104, v75, a6);
      v80 = v112;
      v81 = v105;
      v119 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v112 + 96))(v105, v122, a6, v112);
      v82 = (void (*)(char *, uint64_t))v125[1];
      v82(v77, a6);
      v83 = v111;
      v84 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v80 + 8 * v100))(v111, v78, a6, v80);
      v82(v81, a6);
      v85 = v78;
      v42 = v95;
      v82(v85, a6);
      v86 = v106;
      v79(v106, v83, a6);
      v87 = v86;
      v41 = v97;
      v79(v120, v87, a6);
      v68 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
      v68(v121, v41);
      if ((v119 & 1) != 0 || (v84 & 1) != 0)
      {
        v82(v120, a6);
        v68((uint64_t)v52, v41);
        goto LABEL_21;
      }
      v56 = v123;
      v98(v123, v120, a6);
      v66 = v114;
      ((void (*)(uint64_t, const char *))v99)(v116, v117);
      v57 = v118;
      v88 = ((uint64_t (*)(char *, uint64_t, unint64_t))v101)(v66, 1, v118);
      v67 = v113;
      v71 = v94;
      if (v88 == 1)
        goto LABEL_10;
    }
    v90 = v125;
    ((void (*)(char *, uint64_t))v125[1])(v123, a6);
    v91 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
    v91(v74, v41);
    v91((uint64_t)v52, v41);
    v92 = v75;
LABEL_25:
    v91((uint64_t)v92, v41);
    v89 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v90[7];
    return v89((uint64_t)v124, 1, 1, a6);
  }
  v68 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
LABEL_10:
  v68((uint64_t)v52, v41);
  (*(void (**)(char *, uint64_t))(v102 + 8))(v66, v103);
  v69 = v124;
  v98(v124, v56, a6);
  return ((uint64_t (*)(char *, _QWORD, uint64_t, uint64_t))v125[7])(v69, 0, 1, a6);
}

uint64_t _parseASCII<A, B>(codeUnits:radix:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char *a8@<X8>)
{
  const char *v11;
  unint64_t AssociatedTypeWitness;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  void (*v40)(uint64_t, const char *);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  unsigned int (*v46)(char *, uint64_t, unint64_t *);
  void (*v47)(char *, char *, uint64_t);
  void (*v48)(char *, uint64_t);
  _QWORD *v50;
  uint64_t v51;
  uint64_t (*v52)(unint64_t *, uint64_t);
  char v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  void (*v62)(_WORD *, ValueMetadata *, unint64_t, unint64_t *, uint64_t);
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t (*v66)(_QWORD *, char *, unint64_t *);
  _QWORD *v67;
  char v68;
  void (*v69)(char *, uint64_t);
  void (*v70)(char *, _QWORD *, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  void (*v75)(char *, _QWORD *, unint64_t *);
  char *v76;
  __int16 v77;
  char *v78;
  uint64_t v79;
  void (*v80)(char *, _QWORD *, unint64_t *);
  char *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  __int16 v85;
  uint64_t v86;
  void (*v87)(_WORD *, ValueMetadata *, unint64_t, unint64_t *, uint64_t);
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t AssociatedConformanceWitness;
  char *v92;
  char *v93;
  _QWORD *v94;
  void (*v95)(char *, _QWORD *, uint64_t);
  char *v96;
  __int16 v97;
  uint64_t v98;
  void (*v99)(_WORD *, ValueMetadata *, unint64_t, unint64_t *, uint64_t);
  unint64_t v100;
  uint64_t (*v101)(_QWORD *, char *, unint64_t *);
  _QWORD *v102;
  const char *v103;
  char *v104;
  unsigned int (*v105)(char *, uint64_t, uint64_t);
  unsigned int v106;
  char *v107;
  void (*v108)(char *, uint64_t);
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t (*v112)(uint64_t, uint64_t);
  char v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(_WORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v118;
  char *v119;
  uint64_t (*v120)(_QWORD *, char *, uint64_t);
  char *v121;
  uint64_t v122;
  uint64_t (*v123)(uint64_t, uint64_t);
  char v124;
  uint64_t v125;
  char v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  char *v134;
  char *v135;
  __int16 v136;
  char *v137;
  void (*v138)(_WORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v139;
  char v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  char *v148;
  __int16 v149;
  void (*v150)(_WORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v151;
  char *v152;
  char v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  __int16 v161;
  void (*v162)(_WORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v163;
  char *v164;
  uint64_t (*v165)(_QWORD *, char *, uint64_t);
  char *v166;
  char *v167;
  void (*v168)(char *, uint64_t);
  uint64_t v169;
  void (*v170)(char *, char *, uint64_t);
  void (*v171)(char *, char *, unint64_t *);
  unsigned int (*v172)(char *, uint64_t, uint64_t);
  uint64_t (*v173)(unint64_t *, uint64_t);
  uint64_t (*v174)(uint64_t, uint64_t);
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  char *v181;
  char *v182;
  unint64_t v183;
  const char *v184;
  char *v185;
  void (*v186)(uint64_t, const char *);
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  const char *v191;
  char *v192;
  char *v193;
  char *v194;
  _QWORD *v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  _WORD v199[5];

  v189 = a2;
  v190 = a6;
  v197 = a8;
  v198 = a4;
  v188 = a7;
  v196 = *(_QWORD *)(a7 + 8);
  v11 = *(const char **)(*(_QWORD *)(v196 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)a5, a3, (uint64_t)&protocol requirements base descriptor for IteratorProtocol, associated type descriptor for IteratorProtocol.Element);
  v184 = v11;
  v183 = swift_getAssociatedTypeWitness(0, v11, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v183);
  v182 = (char *)&v169 - v13;
  v14 = swift_checkMetadataState(0, AssociatedTypeWitness);
  v15 = *(v14 - 1);
  v16 = MEMORY[0x1E0C80A78](v14);
  v179 = (char *)&v169 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16);
  v185 = (char *)&v169 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v180 = (char *)&v169 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v181 = (char *)&v169 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v194 = (char *)&v169 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v193 = (char *)&v169 - v27;
  MEMORY[0x1E0C80A78](v26);
  v195 = (uint64_t *)((char *)&v169 - v28);
  v31 = type metadata accessor for Optional(0, (uint64_t)v14, v29, v30);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = MEMORY[0x1E0C80A78](v31);
  v187 = (char *)&v169 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = MEMORY[0x1E0C80A78](v33);
  v192 = (char *)&v169 - v36;
  v37 = MEMORY[0x1E0C80A78](v35);
  v39 = (char *)&v169 - v38;
  MEMORY[0x1E0C80A78](v37);
  v40 = *(void (**)(uint64_t, const char *))(a5 + 16);
  v41 = a1;
  v42 = a3;
  v43 = a3;
  v45 = (char *)&v169 - v44;
  v191 = (const char *)a5;
  v186 = v40;
  v40(v43, (const char *)a5);
  v46 = *(unsigned int (**)(char *, uint64_t, unint64_t *))(v15 + 48);
  if (v46(v45, 1, v14) == 1)
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v45, v31);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v198 - 8) + 56))(v197, 1, 1);
  }
  v47 = *(void (**)(char *, char *, uint64_t))(v32 + 16);
  v47(v39, v45, v31);
  if (v46(v39, 1, v14) == 1)
  {
    v48 = *(void (**)(char *, uint64_t))(v32 + 8);
    v48(v45, v31);
    v48(v39, v31);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v198 - 8) + 56))(v197, 1, 1);
  }
  v170 = v47;
  v172 = (unsigned int (*)(char *, uint64_t, uint64_t))v46;
  v175 = v32;
  v177 = v31;
  v50 = v195;
  v171 = *(void (**)(char *, char *, unint64_t *))(v15 + 32);
  v171((char *)v195, v39, v14);
  v51 = v196;
  v52 = *(uint64_t (**)(unint64_t *, uint64_t))(v196 + 64);
  v53 = v52(v14, v196);
  v54 = (uint64_t)v14;
  v174 = (uint64_t (*)(uint64_t, uint64_t))v52;
  v176 = v45;
  v178 = v41;
  if ((v53 & 1) == 0)
  {
    v173 = *(uint64_t (**)(unint64_t *, uint64_t))(v51 + 128);
    v71 = v173(v14, v51);
    v74 = v50;
    v59 = v42;
    if (v71 >= 16)
    {
      v199[0] = 43;
      v87 = *(void (**)(_WORD *, ValueMetadata *, unint64_t, unint64_t *, uint64_t))(v196 + 96);
      v88 = lazy protocol witness table accessor for type UInt16 and conformance UInt16(v71, v72, v73);
      v76 = v193;
      v87(v199, &type metadata for UInt16, v88, v14, v196);
      v65 = v196;
      v68 = (*(uint64_t (**)(_QWORD *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v196 + 16) + 8)
                                                                            + 8))(v74, v76, v14);
      v69 = *(void (**)(char *, uint64_t))(v15 + 8);
      v69(v76, v54);
      v60 = v194;
      (*(void (**)(char *, _QWORD *, uint64_t))(v15 + 16))(v194, v74, v54);
      goto LABEL_22;
    }
    v75 = *(void (**)(char *, _QWORD *, unint64_t *))(v15 + 16);
    v76 = v193;
    v75(v193, v74, v14);
    v77 = (*(uint64_t (**)(unint64_t *, uint64_t))(v196 + 120))(v14, v196);
    v69 = *(void (**)(char *, uint64_t))(v15 + 8);
    v69(v76, v54);
    v60 = v194;
    v75(v194, v74, (unint64_t *)v54);
    v65 = v196;
    v78 = v197;
    v79 = v59;
    if (v77 != 43)
      goto LABEL_35;
    goto LABEL_23;
  }
  v55 = v52(v14, v51);
  v173 = *(uint64_t (**)(unint64_t *, uint64_t))(v51 + 128);
  v56 = v173(v14, v51);
  v59 = v42;
  if ((v55 & 1) == 0)
  {
    if (v56 >= 16)
    {
      v199[0] = 43;
      v98 = v196;
      v99 = *(void (**)(_WORD *, ValueMetadata *, unint64_t, unint64_t *, uint64_t))(v196 + 96);
      v100 = lazy protocol witness table accessor for type UInt16 and conformance UInt16(v56, v57, v58);
      v64 = v193;
      v99(v199, &type metadata for UInt16, v100, v14, v98);
      v65 = v98;
      v101 = *(uint64_t (**)(_QWORD *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v98 + 16) + 8)
                                                                            + 8);
      v67 = v195;
      v68 = v101(v195, v64, v14);
      v69 = *(void (**)(char *, uint64_t))(v15 + 8);
      v69(v64, v54);
      v70 = *(void (**)(char *, _QWORD *, uint64_t))(v15 + 16);
      v60 = v194;
      goto LABEL_21;
    }
    v80 = *(void (**)(char *, _QWORD *, unint64_t *))(v15 + 16);
    v81 = v193;
    v82 = v195;
    v80(v193, v195, v14);
    v83 = v196;
    v84 = v59;
    v85 = (*(uint64_t (**)(unint64_t *, uint64_t))(v196 + 120))(v14, v196);
    v69 = *(void (**)(char *, uint64_t))(v15 + 8);
    v69(v81, v54);
    v86 = v84;
    v60 = v194;
    v80(v194, v82, (unint64_t *)v54);
    v79 = v86;
    v65 = v83;
    v76 = v81;
    v78 = v197;
    if (v85 != 43)
      goto LABEL_35;
LABEL_23:
    v69(v60, v54);
    v103 = v191;
    goto LABEL_24;
  }
  v60 = v194;
  if (v56 > 16)
  {
    v199[0] = 43;
    v61 = v196;
    v62 = *(void (**)(_WORD *, ValueMetadata *, unint64_t, unint64_t *, uint64_t))(v196 + 96);
    v63 = lazy protocol witness table accessor for type UInt16 and conformance UInt16(v56, v57, v58);
    v64 = v193;
    v62(v199, &type metadata for UInt16, v63, v14, v61);
    v65 = v61;
    v66 = *(uint64_t (**)(_QWORD *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v61 + 16) + 8) + 8);
    v67 = v195;
    v68 = v66(v195, v64, v14);
    v69 = *(void (**)(char *, uint64_t))(v15 + 8);
    v69(v64, v54);
    v70 = *(void (**)(char *, _QWORD *, uint64_t))(v15 + 16);
LABEL_21:
    v102 = v67;
    v76 = v64;
    v70(v60, v102, v54);
LABEL_22:
    v78 = v197;
    v79 = v59;
    if ((v68 & 1) != 0)
      goto LABEL_23;
    goto LABEL_35;
  }
  v90 = v183;
  v89 = (uint64_t)v184;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v184, (uint64_t)v14, v183, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  v92 = v182;
  (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, v90, AssociatedConformanceWitness);
  v93 = v193;
  (*(void (**)(char *, unint64_t *, uint64_t))(v89 + 24))(v92, v14, v89);
  v94 = v195;
  v65 = v196;
  LOBYTE(v90) = (*(uint64_t (**)(_QWORD *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v196 + 32)
                                                                                            + 8)
                                                                                + 32))(v195, v93, v14);
  v69 = *(void (**)(char *, uint64_t))(v15 + 8);
  v69(v93, v54);
  v95 = *(void (**)(char *, _QWORD *, uint64_t))(v15 + 16);
  v96 = v181;
  v95(v181, v94, v54);
  v79 = v59;
  if ((v90 & 1) == 0)
  {
    v69(v96, v54);
    v95(v60, v94, v54);
    v78 = v197;
    v76 = v193;
    goto LABEL_35;
  }
  v97 = (*(uint64_t (**)(uint64_t, uint64_t))(v65 + 120))(v54, v65);
  v69(v96, v54);
  v95(v60, v94, v54);
  v78 = v197;
  v76 = v193;
  if (v97 == 43)
    goto LABEL_23;
LABEL_35:
  v123 = v174;
  if ((v174(v54, v65) & 1) == 0)
  {
    v127 = v194;
    v128 = v173((unint64_t *)v54, v65);
    if (v128 >= 16)
    {
      v199[0] = 45;
      goto LABEL_49;
    }
    v171(v76, v127, (unint64_t *)v54);
    goto LABEL_44;
  }
  v124 = v123(v54, v65);
  v125 = v65;
  v126 = v124;
  v127 = v194;
  v128 = v173((unint64_t *)v54, v125);
  if ((v126 & 1) == 0)
  {
    if (v128 >= 16)
      goto LABEL_48;
    v171(v76, v127, (unint64_t *)v54);
    v65 = v196;
LABEL_44:
    v136 = (*(uint64_t (**)(uint64_t, uint64_t))(v65 + 120))(v54, v65);
    v137 = v193;
    goto LABEL_45;
  }
  if (v128 > 16)
  {
LABEL_48:
    v199[0] = 45;
    v65 = v196;
LABEL_49:
    v138 = *(void (**)(_WORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v65 + 96);
    v139 = lazy protocol witness table accessor for type UInt16 and conformance UInt16(v128, v129, v130);
    v138(v199, &type metadata for UInt16, v139, v54, v65);
    v140 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v65 + 16) + 8) + 8))(v127, v76, v54);
    v69(v76, v54);
    v69(v127, v54);
    v103 = v191;
    if ((v140 & 1) != 0)
      goto LABEL_24;
LABEL_50:
    v141 = (char *)v195;
    _parseUnsignedASCII<A, B>(first:rest:radix:positive:)(v195, v178, v189, 1, v79, v198, v103, v190, v78, v188);
    v69(v141, v54);
    return (*(uint64_t (**)(char *, uint64_t))(v175 + 8))(v176, v177);
  }
  v131 = v183;
  v132 = (uint64_t)v184;
  v133 = swift_getAssociatedConformanceWitness((uint64_t)v184, v54, v183, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  v134 = v182;
  (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v133 + 8))(&unk_1816B7DA8, 256, v131, v133);
  (*(void (**)(char *, uint64_t, uint64_t))(v132 + 24))(v134, v54, v132);
  v65 = v196;
  LOBYTE(v131) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v196 + 32) + 8) + 32))(v127, v76, v54);
  v69(v76, v54);
  v135 = v180;
  v171(v180, v127, (unint64_t *)v54);
  if ((v131 & 1) == 0)
  {
    v69(v135, v54);
    v103 = v191;
    goto LABEL_50;
  }
  v136 = (*(uint64_t (**)(uint64_t, uint64_t))(v65 + 120))(v54, v65);
  v137 = v135;
LABEL_45:
  v69(v137, v54);
  v103 = v191;
  if (v136 != 45)
    goto LABEL_50;
LABEL_24:
  v104 = v192;
  v186(v79, v103);
  v105 = v172;
  v106 = v172(v104, 1, v54);
  v107 = v187;
  if (v106 == 1)
  {
    v69((char *)v195, v54);
    v108 = *(void (**)(char *, uint64_t))(v175 + 8);
    v109 = v177;
    v108(v192, v177);
    v110 = v176;
LABEL_28:
    v108(v110, v109);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v198 - 8) + 56))(v78, 1, 1);
  }
  v109 = v177;
  v170(v187, v192, v177);
  if (v105(v107, 1, v54) == 1)
  {
    v69((char *)v195, v54);
    v111 = v107;
    v108 = *(void (**)(char *, uint64_t))(v175 + 8);
    v108(v192, v109);
    v108(v176, v109);
    v110 = v111;
    goto LABEL_28;
  }
  v171(v185, v107, (unint64_t *)v54);
  v112 = v174;
  if ((v174(v54, v65) & 1) == 0)
  {
    v142 = (char *)v195;
    v143 = v173((unint64_t *)v54, v65);
    if (v143 >= 16)
    {
      v199[0] = 45;
      v150 = *(void (**)(_WORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v65 + 96);
      v151 = lazy protocol witness table accessor for type UInt16 and conformance UInt16(v143, v144, v145);
      v197 = (char *)v79;
      v152 = v193;
      v150(v199, &type metadata for UInt16, v151, v54, v65);
      v153 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v65 + 16) + 8) + 8))(v142, v152, v54);
      v79 = (uint64_t)v197;
      v69(v152, v54);
      v69(v142, v54);
      v122 = v177;
      if ((v153 & 1) == 0)
        goto LABEL_67;
      goto LABEL_64;
    }
    v146 = v193;
    v147 = v193;
    v148 = v142;
    goto LABEL_56;
  }
  v113 = v112(v54, v65);
  v114 = v173((unint64_t *)v54, v65);
  if ((v113 & 1) == 0)
  {
    if (v114 >= 16)
    {
      v199[0] = 45;
      v162 = *(void (**)(_WORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v65 + 96);
      v163 = lazy protocol witness table accessor for type UInt16 and conformance UInt16(v114, v115, v116);
      v197 = (char *)v79;
      v164 = v193;
      v162(v199, &type metadata for UInt16, v163, v54, v65);
      v165 = *(uint64_t (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v65 + 16) + 8) + 8);
      v166 = (char *)v195;
      LOBYTE(v162) = v165(v195, v164, v54);
      v79 = (uint64_t)v197;
      v69(v164, v54);
      v69(v166, v54);
      v122 = v177;
      if ((v162 & 1) != 0)
        goto LABEL_64;
      goto LABEL_67;
    }
    v146 = v193;
    v147 = v193;
    v148 = (char *)v195;
LABEL_56:
    v171(v147, v148, (unint64_t *)v54);
    v149 = (*(uint64_t (**)(uint64_t, uint64_t))(v65 + 120))(v54, v65);
    v69(v146, v54);
    v122 = v177;
    if (v149 != 45)
      goto LABEL_67;
    goto LABEL_64;
  }
  v197 = (char *)v79;
  if (v114 <= 16)
  {
    v155 = v183;
    v154 = (uint64_t)v184;
    v156 = swift_getAssociatedConformanceWitness((uint64_t)v184, v54, v183, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    v157 = v182;
    (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v156 + 8))(&unk_1816B7DA8, 256, v155, v156);
    v158 = v193;
    (*(void (**)(char *, uint64_t, uint64_t))(v154 + 24))(v157, v54, v154);
    v159 = (char *)v195;
    LOBYTE(v155) = (*(uint64_t (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v65 + 32) + 8) + 32))(v195, v158, v54);
    v69(v158, v54);
    v160 = v179;
    v171(v179, v159, (unint64_t *)v54);
    if ((v155 & 1) != 0)
    {
      v161 = (*(uint64_t (**)(uint64_t, uint64_t))(v65 + 120))(v54, v65);
      v69(v160, v54);
      v122 = v177;
      v79 = (uint64_t)v197;
      if (v161 != 45)
        goto LABEL_67;
      goto LABEL_64;
    }
    v69(v160, v54);
    v122 = v177;
    v79 = (uint64_t)v197;
LABEL_67:
    v167 = v185;
    _parseUnsignedASCII<A, B>(first:rest:radix:positive:)(v185, v178, v189, 1, v79, v198, v103, v190, v78, v188);
    goto LABEL_65;
  }
  v199[0] = 45;
  v117 = *(void (**)(_WORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v65 + 96);
  v118 = lazy protocol witness table accessor for type UInt16 and conformance UInt16(v114, v115, v116);
  v119 = v193;
  v117(v199, &type metadata for UInt16, v118, v54, v65);
  v120 = *(uint64_t (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v65 + 16) + 8) + 8);
  v121 = (char *)v195;
  LOBYTE(v117) = v120(v195, v119, v54);
  v69(v119, v54);
  v69(v121, v54);
  v122 = v177;
  v79 = (uint64_t)v197;
  if ((v117 & 1) == 0)
    goto LABEL_67;
LABEL_64:
  v167 = v185;
  _parseUnsignedASCII<A, B>(first:rest:radix:positive:)(v185, v178, v189, 0, v79, v198, v103, v190, v78, v188);
LABEL_65:
  v69(v167, v54);
  v168 = *(void (**)(char *, uint64_t))(v175 + 8);
  v168(v192, v122);
  return ((uint64_t (*)(char *, uint64_t))v168)(v176, v122);
}

uint64_t static FixedWidthInteger._parseASCIISlowPath<A, B>(codeUnits:radix:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X7>, char *a7@<X8>, uint64_t a8)
{
  return _parseASCII<A, B>(codeUnits:radix:)(a1, a2, a3, a4, a5, a6, a8, a7);
}

uint64_t ExpressibleByIntegerLiteral<>.init(integerLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t static AdditiveArithmetic.+= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(v9 + 24))(v6);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, a3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a1, v8, a3);
}

uint64_t static AdditiveArithmetic.-= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(v9 + 40))(v6);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, a3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a1, v8, a3);
}

uint64_t static AdditiveArithmetic<>.zero.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v6;
  char *v7;
  unint64_t AssociatedConformanceWitness;
  uint64_t v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a3, a1, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v7 = (char *)&v10 - v6;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a1, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(a3 + 24))(v7, a1, a3);
}

Swift::Void __swiftcall SignedNumeric.negate()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  unint64_t AssociatedConformanceWitness;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;

  v3 = v0;
  v4 = v2;
  v5 = *(_QWORD *)(v1 + 8);
  v6 = *(_QWORD *)(v5 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v6, v0, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v8 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = (char *)&v19 - v9;
  v11 = *(_QWORD *)(v3 - 8);
  v12 = MEMORY[0x1E0C80A78](v8);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v19 - v15;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v6, v3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 24))(v10, v3, v6);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 + 8) + 40))(v14, v2, v3);
  v18 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v18(v4, v3);
  v18((uint64_t)v14, v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v4, v16, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  unint64_t AssociatedConformanceWitness;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;

  v3 = v2;
  v4 = v0;
  v5 = *(_QWORD *)(v1 + 8);
  v6 = *(_QWORD *)(v5 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v6, v0, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v8 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = (char *)&v19 - v9;
  v11 = *(_QWORD *)(v4 - 8);
  v12 = MEMORY[0x1E0C80A78](v8);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v19 - v15;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v6, v4, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 24))(v10, v4, v6);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 + 8) + 40))(v14, v2, v4);
  v18 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v18(v3, v4);
  v18((uint64_t)v14, v4);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v3, v16, v4);
}

uint64_t static AdditiveArithmetic.+ prefix(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

uint64_t BinaryInteger._lowWord.getter(uint64_t a1, uint64_t a2)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t AssociatedConformanceWitness;
  uint64_t v12;
  char v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a2, a1, (uint64_t)&protocol requirements base descriptor for BinaryInteger, associated type descriptor for BinaryInteger.Words);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness(a2, a1, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for BinaryInteger, (uint64_t)&associated conformance descriptor for BinaryInteger.BinaryInteger.Words: RandomAccessCollection)+ 8)+ 8)+ 8);
  v6 = swift_getAssociatedTypeWitness(0, (const char *)v5, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v12 - v8;
  (*(void (**)(uint64_t, uint64_t))(a2 + 112))(a1, a2);
  (*(void (**)(unint64_t, uint64_t))(v5 + 32))(AssociatedTypeWitness, v5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v5, AssociatedTypeWitness, v6, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  (*(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t))(AssociatedConformanceWitness + 16))(&v12, v6, AssociatedConformanceWitness);
  (*(void (**)(char *, unint64_t))(v7 + 8))(v9, v6);
  if (v13)
    return 0;
  else
    return v12;
}

{
  unint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t AssociatedConformanceWitness;
  uint64_t v12;
  char v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a2, a1, (uint64_t)&protocol requirements base descriptor for BinaryInteger, associated type descriptor for BinaryInteger.Words);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness(a2, a1, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for BinaryInteger, (uint64_t)&associated conformance descriptor for BinaryInteger.BinaryInteger.Words: RandomAccessCollection)+ 8)+ 8)+ 8);
  v6 = swift_getAssociatedTypeWitness(0, (const char *)v5, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v12 - v8;
  (*(void (**)(uint64_t, uint64_t))(a2 + 112))(a1, a2);
  (*(void (**)(unint64_t, uint64_t))(v5 + 32))(AssociatedTypeWitness, v5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v5, AssociatedTypeWitness, v6, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  (*(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t))(AssociatedConformanceWitness + 16))(&v12, v6, AssociatedConformanceWitness);
  (*(void (**)(char *, unint64_t))(v7 + 8))(v9, v6);
  if (v13)
    return 0;
  else
    return v12;
}

Swift::Int __swiftcall BinaryInteger._binaryLogarithm()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  unint64_t AssociatedConformanceWitness;
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t (*v20)(uint64_t, _QWORD *);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, unint64_t *, ValueMetadata *, unint64_t, uint64_t, _QWORD *);
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t (*v36)(uint64_t, _QWORD *);
  unint64_t v37;

  v3 = v2;
  v4 = v1;
  v5 = v0;
  v6 = *(_QWORD *)(v1[3] + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v6, v0, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v8 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = (char *)&v34 - v9;
  v11 = *(_QWORD *)(v5 - 8);
  v12 = MEMORY[0x1E0C80A78](v8);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v34 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v34 - v15, v2, v5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v6, v5, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 24))(v10, v5, v6);
  v18 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v4[4] + 8) + 40))(v16, v14, v5);
  v19 = *(void (**)(char *, uint64_t))(v11 + 8);
  v19(v14, v5);
  if ((v18 & 1) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/Integers.swift", 20, 2, 0x4F7uLL, 0);
  v19(v16, v5);
  v20 = (uint64_t (*)(uint64_t, _QWORD *))v4[16];
  v21 = v20(v5, v4);
  v22 = v21 + 62;
  if (v21 - 1 >= 0)
    v22 = v21 - 1;
  v23 = v22 >> 6;
  v34 = v22 & 0xFFFFFFFFFFFFFFC0;
  v35 = (void (*)(char *, uint64_t))(v21 - 1);
  v24 = v21 - 1 - (v22 & 0xFFFFFFFFFFFFFFC0);
  v25 = v20(v5, v4);
  v37 = ~v24 + v25;
  v26 = (void (*)(uint64_t, unint64_t *, ValueMetadata *, unint64_t, uint64_t, _QWORD *))v4[30];
  v29 = lazy protocol witness table accessor for type Int and conformance Int(v25, v27, v28);
  v26(v3, &v37, &type metadata for Int, v29, v5, v4);
  v36 = (uint64_t (*)(uint64_t, _QWORD *))v4[15];
  v30 = v36(v5, v4);
  v19(v14, v5);
  if (!v30)
  {
    v31 = v34 - (_QWORD)v35;
    v35 = v19;
    v32 = v31 - 65;
    do
    {
      --v23;
      v37 = v20(v5, v4) + v32;
      v26(v3, &v37, &type metadata for Int, v29, v5, v4);
      v30 = v36(v5, v4);
      v35(v14, v5);
      v32 -= 64;
    }
    while (!v30);
  }
  return ((v23 << 6) | 0x3F) - __clz(v30);
}

uint64_t static BinaryInteger.& infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a5, a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 200))(a5, a2, a3, a4);
}

{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a5, a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 200))(a5, a2, a3, a4);
}

uint64_t static BinaryInteger.| infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a5, a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 216))(a5, a2, a3, a4);
}

{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a5, a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 216))(a5, a2, a3, a4);
}

uint64_t static BinaryInteger.^ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a5, a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 232))(a5, a2, a3, a4);
}

{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a5, a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 232))(a5, a2, a3, a4);
}

uint64_t static BinaryInteger.>> infix<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16))(a7, a1, a5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 248))(a7, a2, a3, a4, a5, a6);
}

{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a7, a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 248))(a7, a2, a4, a6, a3, a5);
}

uint64_t static BinaryInteger.<< infix<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16))(a7, a1, a5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 264))(a7, a2, a3, a4, a5, a6);
}

{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a7, a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 264))(a7, a2, a4, a6, a3, a5);
}

uint64_t specialized BinaryInteger.quotientAndRemainder(dividingBy:)(_OWORD *a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t result;
  unint64_t v11;

  if (!(a2 | a3))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/UInt128.swift", 19, 2, 0x112uLL, 0);
  result = __udivti3();
  *a1 = __PAIR128__(a5, a4) - __PAIR128__(v11, result) * __PAIR128__(a3, a2);
  return result;
}

uint64_t specialized BinaryInteger.quotientAndRemainder(dividingBy:)(int *a1, int a2, int a3)
{
  if (!a2)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 0x1FCAuLL, 0);
  if (a2 == -1 && a3 == 0x80000000)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 0x1FD1uLL, 0);
  *a1 = a3 % a2;
  return (a3 / a2);
}

uint64_t specialized BinaryInteger.quotientAndRemainder(dividingBy:)(_WORD *a1, __int16 a2, __int16 a3)
{
  if (!a2)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 0x13C4uLL, 0);
  if (a2 == -1 && (unsigned __int16)a3 == 0x8000)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 0x13CBuLL, 0);
  *a1 = a3 % a2;
  return (a3 / a2);
}

uint64_t specialized BinaryInteger.quotientAndRemainder(dividingBy:)(unint64_t *a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t v10;
  uint64_t result;
  unint64_t v12;
  unint64_t v13;

  if (!(a2 | a3))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/Int128.swift", 18, 2, 0x126uLL, 0);
  if ((a2 & a3) != 0xFFFFFFFFFFFFFFFFLL || (v10 = a4 | a5 ^ 0x8000000000000000) != 0)
  {
    result = __divti3();
    v12 = (__PAIR128__(a5, a4) - __PAIR128__(v13, result) * __PAIR128__(a3, a2)) >> 64;
    v10 = a4 - result * a2;
  }
  else
  {
    result = 0;
    v12 = 0;
  }
  *a1 = v10;
  a1[1] = v12;
  return result;
}

uint64_t specialized BinaryInteger.quotientAndRemainder(dividingBy:)(_BYTE *a1, char a2, char a3)
{
  if (!a2)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 0x7C3uLL, 0);
  if (a2 == -1 && a3 == 128)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 0x7CAuLL, 0);
  *a1 = a3 % a2;
  return (a3 / a2);
}

uint64_t specialized BinaryInteger.quotientAndRemainder(dividingBy:)(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  if (!a2)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, a4, 0);
  if (a2 == -1 && a3 == 0x8000000000000000)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, a5, 0);
  *a1 = a3 % a2;
  return a3 / a2;
}

uint64_t BinaryInteger.quotientAndRemainder(dividingBy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  v6 = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 152))(v6, a3, a4, a5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 168))(v6, a3, a4, a5);
}

BOOL specialized BinaryInteger.isMultiple(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  if (a1 | a2)
  {
    a3 = __umodti3();
    a4 = v4;
  }
  return (a3 | a4) == 0;
}

BOOL specialized BinaryInteger.isMultiple(of:)(unsigned __int8 a1, unsigned __int8 a2)
{
  unsigned int v2;

  v2 = a2;
  if (a1)
    v2 = a2 % a1;
  return v2 == 0;
}

BOOL specialized BinaryInteger.isMultiple(of:)(unsigned __int16 a1, unsigned __int16 a2)
{
  unsigned int v2;

  v2 = a2;
  if (a1)
    v2 = a2 % a1;
  return v2 == 0;
}

BOOL specialized BinaryInteger.isMultiple(of:)(unsigned int a1, unsigned int a2)
{
  if (a1)
    a2 %= a1;
  return a2 == 0;
}

uint64_t BinaryInteger.isMultiple(of:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  const char *v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  const char *v39;
  unint64_t AssociatedConformanceWitness;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(_BYTE *, uint64_t);
  uint64_t v45;
  void (*v46)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v47;
  char v48;
  uint64_t v49;
  void (*v50)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  unint64_t v58;
  const char *v59;
  unint64_t v60;
  _BYTE *v61;
  _BYTE *v62;
  char v63;
  uint64_t v64;
  void (*v65)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v66;
  _BYTE *v67;
  void (*v68)(uint64_t, uint64_t);
  _BYTE *v69;
  _BYTE *v70;
  unint64_t v71;
  _BYTE *v72;
  void (*v73)(_BYTE *, unint64_t *);
  uint64_t (*v74)(unint64_t *, unint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  void (*v79)(uint64_t *, ValueMetadata *, unint64_t, unint64_t *, unint64_t);
  unint64_t v80;
  unint64_t v81;
  _BYTE *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  _BYTE *v87;
  unint64_t v88;
  char v89;
  _BYTE *v90;
  void (*v91)(uint64_t *, ValueMetadata *, unint64_t, unint64_t *, unint64_t);
  unint64_t v92;
  unint64_t v93;
  _BYTE v95[4];
  int v96;
  _BYTE *v97;
  _BYTE *v98;
  unint64_t v99;
  const char *v100;
  _BYTE *v101;
  uint64_t v102;
  _BYTE *v103;
  unint64_t v104;
  const char *v105;
  uint64_t (*v106)(uint64_t, uint64_t);
  _BYTE *v107;
  _BYTE *v108;
  _BYTE *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;

  v6 = *(_QWORD *)(a3 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)v6, a2, (uint64_t)&protocol requirements base descriptor for Numeric, associated type descriptor for Numeric.Magnitude);
  v8 = *(const char **)(swift_getAssociatedConformanceWitness(v6, a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Numeric)+ 16);
  v99 = swift_getAssociatedTypeWitness(0, v8, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v99);
  v98 = &v95[-v9];
  v10 = swift_checkMetadataState(0, AssociatedTypeWitness);
  v110 = *(v10 - 1);
  v11 = MEMORY[0x1E0C80A78](v10);
  v101 = &v95[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = MEMORY[0x1E0C80A78](v11);
  v107 = &v95[-v14];
  v15 = MEMORY[0x1E0C80A78](v13);
  v108 = &v95[-v16];
  MEMORY[0x1E0C80A78](v15);
  v109 = &v95[-v17];
  v105 = *(const char **)(v6 + 16);
  v104 = swift_getAssociatedTypeWitness(0, v105, a2, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v18 = MEMORY[0x1E0C80A78](v104);
  v103 = &v95[-v19];
  v112 = *(_QWORD *)(a2 - 8);
  v20 = MEMORY[0x1E0C80A78](v18);
  v97 = &v95[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v22 = MEMORY[0x1E0C80A78](v20);
  v24 = &v95[-v23];
  MEMORY[0x1E0C80A78](v22);
  v26 = &v95[-v25];
  v27 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 64);
  v28 = v27(a2, a3);
  v100 = v8;
  if ((v28 & 1) != 0)
  {
    v106 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 128);
    v29 = v106(a2, a3);
    if (v29 < 64)
    {
      v32 = v112;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v112 + 16))(v26, a1, a2);
      goto LABEL_12;
    }
    v113 = 0;
    v46 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a3 + 96);
    v47 = lazy protocol witness table accessor for type Int and conformance Int(v29, v30, v31);
    v46(&v113, &type metadata for Int, v47, a2, a3);
    v48 = (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) + 8) + 8))(a1, v26, a2);
    goto LABEL_15;
  }
  v33 = v27(a2, a3);
  v34 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 128);
  v102 = a1;
  v106 = v34;
  v35 = v34(a2, a3);
  if ((v33 & 1) != 0)
  {
    if (v35 <= 64)
    {
      v38 = v104;
      v39 = v105;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v105, a2, v104, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v41 = v103;
      (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, v38, AssociatedConformanceWitness);
      (*((void (**)(_BYTE *, uint64_t, const char *))v39 + 3))(v41, a2, v39);
      v42 = v102;
      v96 = (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 32) + 8) + 32))(v102, v26, a2);
      v43 = v112;
      v44 = *(void (**)(_BYTE *, uint64_t))(v112 + 8);
      v44(v26, a2);
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v43 + 16))(v24, v42, a2);
      if ((v96 & 1) != 0)
      {
        v45 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 120))(a2, a3);
        v44(v24, a2);
        if (!v45)
          goto LABEL_16;
      }
      else
      {
        v44(v24, a2);
      }
LABEL_28:
      v68 = *(void (**)(uint64_t, uint64_t))(v6 + 56);
      v69 = v108;
      v68(a2, v6);
      v70 = v107;
      v68(a2, v6);
      v71 = swift_getAssociatedConformanceWitness(a3, a2, (uint64_t)v10, (uint64_t)&protocol requirements base descriptor for BinaryInteger, (uint64_t)&associated conformance descriptor for BinaryInteger.Numeric.Magnitude: BinaryInteger);
      v72 = v109;
      (*(void (**)(_BYTE *, _BYTE *, unint64_t *, unint64_t))(v71 + 168))(v69, v70, v10, v71);
      v73 = *(void (**)(_BYTE *, unint64_t *))(v110 + 8);
      v73(v70, v10);
      v73(v69, v10);
      v74 = *(uint64_t (**)(unint64_t *, unint64_t))(v71 + 64);
      if ((v74(v10, v71) & 1) != 0)
      {
        v75 = (*(uint64_t (**)(unint64_t *, unint64_t))(v71 + 128))(v10, v71);
        if (v75 < 64)
          goto LABEL_36;
      }
      else
      {
        v78 = v74(v10, v71);
        v75 = (*(uint64_t (**)(unint64_t *, unint64_t))(v71 + 128))(v10, v71);
        if ((v78 & 1) == 0)
        {
          if (v75 < 64)
          {
LABEL_36:
            v83 = (*(uint64_t (**)(unint64_t *, unint64_t))(v71 + 120))(v10, v71);
            v73(v72, v10);
            v63 = v83 == 0;
            return v63 & 1;
          }
          v113 = 0;
          v91 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, unint64_t *, unint64_t))(v71 + 96);
          v92 = lazy protocol witness table accessor for type Int and conformance Int(v75, v76, v77);
          v91(&v113, &type metadata for Int, v92, v10, v71);
          v93 = swift_getAssociatedConformanceWitness(v6, a2, (uint64_t)v10, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Comparable);
          v63 = (*(uint64_t (**)(_BYTE *, _BYTE *, unint64_t *))(*(_QWORD *)(v93 + 8) + 8))(v72, v69, v10);
          v73(v72, v10);
          v82 = v69;
LABEL_41:
          v73(v82, v10);
          return v63 & 1;
        }
        if (v75 <= 64)
        {
          v84 = v99;
          v85 = (uint64_t)v100;
          v86 = swift_getAssociatedConformanceWitness((uint64_t)v100, (uint64_t)v10, v99, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
          v87 = v98;
          (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v86 + 8))(&unk_1816B7DA8, 256, v84, v86);
          (*(void (**)(_BYTE *, unint64_t *, uint64_t))(v85 + 24))(v87, v10, v85);
          v88 = swift_getAssociatedConformanceWitness(v6, a2, (uint64_t)v10, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Comparable);
          v89 = (*(uint64_t (**)(_BYTE *, _BYTE *, unint64_t *, unint64_t))(v88 + 32))(v72, v69, v10, v88);
          v73(v69, v10);
          v90 = v101;
          (*(void (**)(_BYTE *, _BYTE *, unint64_t *))(v110 + 32))(v101, v72, v10);
          v63 = (v89 & 1) != 0
             && (*(uint64_t (**)(unint64_t *, unint64_t))(v71 + 120))(v10, v71) == 0;
          v82 = v90;
          goto LABEL_41;
        }
      }
      v113 = 0;
      v79 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, unint64_t *, unint64_t))(v71 + 96);
      v80 = lazy protocol witness table accessor for type Int and conformance Int(v75, v76, v77);
      v79(&v113, &type metadata for Int, v80, v10, v71);
      v81 = swift_getAssociatedConformanceWitness(v6, a2, (uint64_t)v10, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Comparable);
      v63 = (*(uint64_t (**)(_BYTE *, _BYTE *, unint64_t *))(*(_QWORD *)(v81 + 8) + 8))(v72, v69, v10);
      v73(v69, v10);
      v82 = v72;
      goto LABEL_41;
    }
    goto LABEL_14;
  }
  if (v35 >= 64)
  {
LABEL_14:
    v113 = 0;
    v50 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a3 + 96);
    v51 = lazy protocol witness table accessor for type Int and conformance Int(v35, v36, v37);
    v50(&v113, &type metadata for Int, v51, a2, a3);
    v48 = (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) + 8) + 8))(v102, v26, a2);
LABEL_15:
    v52 = v48;
    v44 = *(void (**)(_BYTE *, uint64_t))(v112 + 8);
    v44(v26, a2);
    if ((v52 & 1) != 0)
      goto LABEL_16;
    goto LABEL_28;
  }
  v32 = v112;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v112 + 16))(v26, v102, a2);
LABEL_12:
  v49 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 120))(a2, a3);
  v44 = *(void (**)(_BYTE *, uint64_t))(v32 + 8);
  v44(v26, a2);
  if (v49)
    goto LABEL_28;
LABEL_16:
  if ((v27(a2, a3) & 1) == 0)
  {
    v57 = v27(a2, a3);
    v53 = v111;
    v54 = v106(a2, a3);
    if ((v57 & 1) != 0)
    {
      if (v54 <= 64)
      {
        v58 = v104;
        v59 = v105;
        v60 = swift_getAssociatedConformanceWitness((uint64_t)v105, a2, v104, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
        v61 = v103;
        (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v60 + 8))(&unk_1816B7DA8, 256, v58, v60);
        (*((void (**)(_BYTE *, uint64_t, const char *))v59 + 3))(v61, a2, v59);
        LOBYTE(v58) = (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 32) + 8)
                                                                           + 32))(v53, v26, a2);
        v44(v26, a2);
        v62 = v97;
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(v112 + 16))(v97, v53, a2);
        v63 = (v58 & 1) != 0 && (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 120))(a2, a3) == 0;
        v67 = v62;
        goto LABEL_26;
      }
    }
    else if (v54 < 64)
    {
      goto LABEL_24;
    }
LABEL_25:
    v113 = 0;
    v65 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a3 + 96);
    v66 = lazy protocol witness table accessor for type Int and conformance Int(v54, v55, v56);
    v65(&v113, &type metadata for Int, v66, a2, a3);
    v63 = (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) + 8) + 8))(v53, v26, a2);
    v67 = v26;
LABEL_26:
    v44(v67, a2);
    return v63 & 1;
  }
  v53 = v111;
  v54 = v106(a2, a3);
  if (v54 >= 64)
    goto LABEL_25;
LABEL_24:
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v112 + 16))(v26, v53, a2);
  v64 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 120))(a2, a3);
  v44(v26, a2);
  v63 = v64 == 0;
  return v63 & 1;
}

BOOL specialized BinaryInteger.signum()(uint64_t a1, unint64_t a2)
{
  _BOOL8 v2;

  if (a2)
    v2 = (uint64_t)a2 > 0;
  else
    v2 = a1 != 0;
  return v2 - (a2 >> 63);
}

uint64_t BinaryInteger.signum()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t AssociatedConformanceWitness;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  char v20;
  void (*v21)(char *, uint64_t);
  uint64_t *v22;
  uint64_t v23;
  char v24;
  uint64_t *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  void (*v35)(void *, uint64_t, unint64_t, unint64_t);

  v32 = a3;
  v31 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(v31 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v5, a1, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v7 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v9 = (char *)&v30 - v8;
  v10 = *(_QWORD *)(a1 - 8);
  v11 = MEMORY[0x1E0C80A78](v7);
  v30 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v30 - v14;
  MEMORY[0x1E0C80A78](v13);
  v34 = (char *)&v30 - v16;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v5, a1, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  v35 = *(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8);
  v35(&unk_1816B7DA8, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 24);
  v18(v9, a1, v5);
  v19 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8);
  v20 = (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(v19 + 40))(v33, v15, a1, v19);
  v21 = *(void (**)(char *, uint64_t))(v10 + 8);
  v21(v15, a1);
  if ((v20 & 1) != 0)
  {
    v22 = &qword_1816B7DB0;
    v23 = 512;
  }
  else
  {
    v22 = (uint64_t *)&unk_1816B7DA8;
    v23 = 256;
  }
  v35(v22, v23, AssociatedTypeWitness, AssociatedConformanceWitness);
  v18(v9, a1, v5);
  v35(&unk_1816B7DA8, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
  v18(v9, a1, v5);
  v24 = (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(v19 + 16))(v33, v15, a1, v19);
  v21(v15, a1);
  if ((v24 & 1) != 0)
  {
    v25 = &qword_1816B7DB0;
    v26 = 512;
  }
  else
  {
    v25 = (uint64_t *)&unk_1816B7DA8;
    v26 = 256;
  }
  v35(v25, v26, AssociatedTypeWitness, AssociatedConformanceWitness);
  v27 = v30;
  v18(v9, a1, v5);
  v28 = v34;
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 + 8) + 40))(v34, v27, a1);
  v21(v27, a1);
  return ((uint64_t (*)(char *, uint64_t))v21)(v28, a1);
}

uint64_t BinaryInteger.init()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t AssociatedTypeWitness;
  uint64_t v5;
  char *v6;
  unint64_t AssociatedConformanceWitness;
  uint64_t v9;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v3, a1, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v6 = (char *)&v9 - v5;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v3, a1, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 24))(v6, a1, v3);
}

uint64_t specialized BinaryInteger._description(radix:uppercase:)(unint64_t a1, char a2, Swift::UInt64 a3, Swift::UInt64 a4)
{
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  Swift::UInt64 v10;
  size_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint8x8_t v20;
  uint64_t v21;
  unint64_t v22;
  __objc2_class **v23;
  Swift::UInt64 v24;
  unsigned __int8 v25;
  BOOL isUniquelyReferenced_nonNull_native;
  char v27;
  unint64_t v28;
  __objc2_class *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  size_t v34;
  unsigned int v35;
  char v37;
  uint64_t v38;
  Swift::UInt64 v39;
  __objc2_class **v40;
  Swift::tuple_high_UInt64_low_UInt64 v41;

  if (a1 - 37 <= 0xFFFFFFFFFFFFFFDCLL)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Radix must be between 2 and 36", 30, 2, "Swift/Integers.swift", 20, 2, 0x5E1uLL, 0);
  v4 = a4;
  v5 = a3;
  if (!(a4 | a3))
    return 48;
  v20 = (uint8x8_t)vcnt_s8((int8x8_t)a1);
  v20.i16[0] = vaddlv_u8(v20);
  v21 = v20.u32[0];
  v22 = __clz(__rbit64(a1));
  v37 = a1 - 1;
  v23 = &_swiftEmptyArrayStorage;
  do
  {
    if (v21 == 1)
    {
      if (v22 >= 0x40)
      {
        v24 = v4 >> (v22 & 0x3F);
        v4 = 0;
      }
      else if (v22)
      {
        v24 = (v4 << (-(char)v22 & 0x3F)) | (v5 >> v22);
        v4 >>= v22;
      }
      else
      {
        v24 = v5;
      }
      v25 = v5 & v37;
      v5 = v24;
      if (a1 < 0xB)
      {
LABEL_24:
        v27 = v25 + 48;
        if (swift_isUniquelyReferenced_nonNull_native((uint64_t)v23))
          goto LABEL_25;
        goto LABEL_30;
      }
    }
    else
    {
      v41.high = (Swift::UInt64)&v38;
      v41.low = v4;
      v4 = specialized _wideDivide22<A>(_:by:)((Swift::UInt64 *)&v40, &v39, v41, v5, 0, a1);
      v5 = (Swift::UInt64)v40;
      v25 = v38;
      if (a1 < 0xB)
        goto LABEL_24;
    }
    if (v25 < 0xAu)
      goto LABEL_24;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native((uint64_t)v23);
    if ((a2 & 1) != 0)
    {
      v27 = v25 + 55;
      if (isUniquelyReferenced_nonNull_native)
        goto LABEL_25;
    }
    else
    {
      v27 = v25 + 87;
      if (isUniquelyReferenced_nonNull_native)
        goto LABEL_25;
    }
LABEL_30:
    v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)&v23[2]->isa + 1, 1, (uint64_t)v23);
LABEL_25:
    v29 = v23[2];
    v28 = (unint64_t)v23[3];
    if ((unint64_t)v29 >= v28 >> 1)
      v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v28 > 1), (int64_t)&v29->isa + 1, 1, (uint64_t)v23);
    v23[2] = (__objc2_class *)((char *)&v29->isa + 1);
    *((_BYTE *)&v29->info + (_QWORD)v23) = v27;
  }
  while (v4 | v5);
  v40 = v23;
  specialized MutableCollection<>.reverse()();
  v10 = (Swift::UInt64)v40;
  v11 = (size_t)v40[2];
  if (!v11)
  {
    v6 = 0;
LABEL_46:
    swift_bridgeObjectRetain((unint64_t)v40, v7, v8, v9);
    goto LABEL_47;
  }
  if (v11 <= 0xF)
  {
    v30 = 8;
    if (v11 < 8)
      v30 = (uint64_t)v40[2];
    v6 = *((unsigned __int8 *)v40 + 32);
    if (v30 != 1)
    {
      v6 |= (unint64_t)*((unsigned __int8 *)v40 + 33) << 8;
      if (v30 != 2)
      {
        v6 |= (unint64_t)*((unsigned __int8 *)v40 + 34) << 16;
        if (v30 != 3)
        {
          v6 |= (unint64_t)*((unsigned __int8 *)v40 + 35) << 24;
          if (v30 != 4)
          {
            v6 |= (unint64_t)*((unsigned __int8 *)v40 + 36) << 32;
            if (v30 != 5)
            {
              v6 |= (unint64_t)*((unsigned __int8 *)v40 + 37) << 40;
              if (v30 != 6)
              {
                v6 |= (unint64_t)*((unsigned __int8 *)v40 + 38) << 48;
                if (v30 != 7)
                  v6 |= (unint64_t)*((unsigned __int8 *)v40 + 39) << 56;
              }
            }
          }
        }
      }
    }
    v31 = 0;
    if (v11 >= 9)
    {
      v32 = 0;
      v33 = (unsigned __int8 *)(v40 + 5);
      v34 = v11 - 8;
      do
      {
        if (v11 - 8 <= v11 - 9)
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Range.swift", 17, 2, 0x131uLL, 0);
        v35 = *v33++;
        v31 |= (unint64_t)v35 << v32;
        v32 += 8;
        --v34;
      }
      while (v34);
    }
    goto LABEL_46;
  }
  v12 = v11 | 0xF000000000000000;
  v13 = _allocateStringStorage(codeUnitCapacity:)((int64_t)v40[2]);
  v15 = v14;
  *(_QWORD *)(v13 + 16) = v14;
  *(_QWORD *)(v13 + 24) = v11 | 0xF000000000000000;
  swift_bridgeObjectRetain(v10, v14, v16, v17);
  if (v15 < 0)
  {
    *(_QWORD *)__StringStorage._breadcrumbsAddress.getter() = 0;
    v12 = *(_QWORD *)(v13 + 24);
  }
  *(_BYTE *)(v13 + 32 + (v12 & 0xFFFFFFFFFFFFLL)) = 0;
  specialized UnsafeMutablePointer.initialize(from:count:)((char *)(v10 + 32), v11, (char *)(v13 + 32));
  v6 = *(_QWORD *)(v13 + 24);
LABEL_47:
  swift_bridgeObjectRelease_n(v10, 2);
  return v6;
}

uint64_t specialized BinaryInteger._description(radix:uppercase:)(unint64_t a1, char a2, Swift::UInt64 a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;
  Swift::UInt64 v8;
  __objc2_class **v9;
  unint64_t v10;
  __objc2_class *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  Swift::UInt64 v15;
  size_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint8x8_t v25;
  uint64_t v26;
  unint64_t v27;
  Swift::UInt64 v28;
  unsigned __int8 v29;
  BOOL isUniquelyReferenced_nonNull_native;
  char v31;
  unint64_t v32;
  __objc2_class *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  size_t v38;
  unsigned int v39;
  char v42;
  uint64_t v43;
  Swift::UInt64 v44;
  __objc2_class **v45;
  Swift::tuple_high_UInt64_low_UInt64 v46;

  if (a1 - 37 <= 0xFFFFFFFFFFFFFFDCLL)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Radix must be between 2 and 36", 30, 2, "Swift/Integers.swift", 20, 2, 0x5E1uLL, 0);
  if (a4 | a3)
  {
    v6 = (unsigned __int128)-(__int128)__PAIR128__(v4, a3) >> 64;
    if (a4 >= 0)
      v7 = a3;
    else
      v7 = -(uint64_t)a3;
    if (a4 >= 0)
      v8 = a4;
    else
      v8 = v6;
    if (!(v8 | v7))
    {
      v9 = &_swiftEmptyArrayStorage;
LABEL_13:
      v45 = v9;
      if (a4 < 0)
      {
        if (!swift_isUniquelyReferenced_nonNull_native((uint64_t)v9))
          v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)&v9[2]->isa + 1, 1, (uint64_t)v9);
        v11 = v9[2];
        v10 = (unint64_t)v9[3];
        if ((unint64_t)v11 >= v10 >> 1)
          v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v10 > 1), (int64_t)&v11->isa + 1, 1, (uint64_t)v9);
        v9[2] = (__objc2_class *)((char *)&v11->isa + 1);
        *((_BYTE *)&v11->info + (_QWORD)v9) = 45;
        v45 = v9;
      }
      specialized MutableCollection<>.reverse()();
      v15 = (Swift::UInt64)v45;
      v16 = (size_t)v45[2];
      if (v16)
      {
        if (v16 > 0xF)
        {
          v17 = v16 | 0xF000000000000000;
          v18 = _allocateStringStorage(codeUnitCapacity:)((int64_t)v45[2]);
          v20 = v19;
          *(_QWORD *)(v18 + 16) = v19;
          *(_QWORD *)(v18 + 24) = v16 | 0xF000000000000000;
          swift_bridgeObjectRetain(v15, v19, v21, v22);
          if (v20 < 0)
          {
            *(_QWORD *)__StringStorage._breadcrumbsAddress.getter() = 0;
            v17 = *(_QWORD *)(v18 + 24);
          }
          *(_BYTE *)(v18 + 32 + (v17 & 0xFFFFFFFFFFFFLL)) = 0;
          specialized UnsafeMutablePointer.initialize(from:count:)((char *)(v15 + 32), v16, (char *)(v18 + 32));
          v5 = *(_QWORD *)(v18 + 24);
          goto LABEL_61;
        }
        v34 = 8;
        if (v16 < 8)
          v34 = (uint64_t)v45[2];
        v5 = *((unsigned __int8 *)v45 + 32);
        if (v34 != 1)
        {
          v5 |= (unint64_t)*((unsigned __int8 *)v45 + 33) << 8;
          if (v34 != 2)
          {
            v5 |= (unint64_t)*((unsigned __int8 *)v45 + 34) << 16;
            if (v34 != 3)
            {
              v5 |= (unint64_t)*((unsigned __int8 *)v45 + 35) << 24;
              if (v34 != 4)
              {
                v5 |= (unint64_t)*((unsigned __int8 *)v45 + 36) << 32;
                if (v34 != 5)
                {
                  v5 |= (unint64_t)*((unsigned __int8 *)v45 + 37) << 40;
                  if (v34 != 6)
                  {
                    v5 |= (unint64_t)*((unsigned __int8 *)v45 + 38) << 48;
                    if (v34 != 7)
                      v5 |= (unint64_t)*((unsigned __int8 *)v45 + 39) << 56;
                  }
                }
              }
            }
          }
        }
        v35 = 0;
        if (v16 >= 9)
        {
          v36 = 0;
          v37 = (unsigned __int8 *)(v45 + 5);
          v38 = v16 - 8;
          do
          {
            if (v16 - 8 <= v16 - 9)
              _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Range.swift", 17, 2, 0x131uLL, 0);
            v39 = *v37++;
            v35 |= (unint64_t)v39 << v36;
            v36 += 8;
            --v38;
          }
          while (v38);
        }
      }
      else
      {
        v5 = 0;
      }
      swift_bridgeObjectRetain((unint64_t)v45, v12, v13, v14);
LABEL_61:
      swift_bridgeObjectRelease_n(v15, 2);
      return v5;
    }
    v25 = (uint8x8_t)vcnt_s8((int8x8_t)a1);
    v25.i16[0] = vaddlv_u8(v25);
    v26 = v25.u32[0];
    v27 = __clz(__rbit64(a1));
    v42 = a1 - 1;
    v9 = &_swiftEmptyArrayStorage;
    while (1)
    {
      if (v26 == 1)
      {
        if (v27 >= 0x40)
        {
          v28 = v8 >> (v27 & 0x3F);
          v8 = 0;
        }
        else if (v27)
        {
          v28 = (v8 << (-(char)v27 & 0x3F)) | (v7 >> v27);
          v8 >>= v27;
        }
        else
        {
          v28 = v7;
        }
        v29 = v7 & v42;
        v7 = v28;
        if (a1 < 0xB)
        {
LABEL_38:
          v31 = v29 + 48;
          if (!swift_isUniquelyReferenced_nonNull_native((uint64_t)v9))
            goto LABEL_44;
          goto LABEL_39;
        }
      }
      else
      {
        v46.high = (Swift::UInt64)&v43;
        v46.low = v8;
        v8 = specialized _wideDivide22<A>(_:by:)((Swift::UInt64 *)&v45, &v44, v46, v7, 0, a1);
        v7 = (Swift::UInt64)v45;
        v29 = v43;
        if (a1 < 0xB)
          goto LABEL_38;
      }
      if (v29 < 0xAu)
        goto LABEL_38;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native((uint64_t)v9);
      if ((a2 & 1) != 0)
      {
        v31 = v29 + 55;
        if (!isUniquelyReferenced_nonNull_native)
          goto LABEL_44;
      }
      else
      {
        v31 = v29 + 87;
        if (!isUniquelyReferenced_nonNull_native)
LABEL_44:
          v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)&v9[2]->isa + 1, 1, (uint64_t)v9);
      }
LABEL_39:
      v33 = v9[2];
      v32 = (unint64_t)v9[3];
      if ((unint64_t)v33 >= v32 >> 1)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v32 > 1), (int64_t)&v33->isa + 1, 1, (uint64_t)v9);
      v9[2] = (__objc2_class *)((char *)&v33->isa + 1);
      *((_BYTE *)&v33->info + (_QWORD)v9) = v31;
      if (!(v8 | v7))
        goto LABEL_13;
    }
  }
  return 48;
}

uint64_t specialized BinaryInteger._description(radix:uppercase:)(unint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint8x8_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  char v10;
  __objc2_class **v11;
  unsigned __int8 v12;
  uint64_t v13;
  unint64_t v14;
  BOOL isUniquelyReferenced_nonNull_native;
  char v16;
  unint64_t v17;
  __objc2_class *v18;
  unint64_t v19;
  __objc2_class *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  size_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  size_t v36;
  unsigned int v37;
  unint64_t v41;

  if (a1 - 37 <= 0xFFFFFFFFFFFFFFDCLL)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Radix must be between 2 and 36", 30, 2, "Swift/Integers.swift", 20, 2, 0x5E1uLL, 0);
  if (!(a3 | a4))
    return 48;
  v5 = (uint8x8_t)vcnt_s8((int8x8_t)a1);
  v5.i16[0] = vaddlv_u8(v5);
  v6 = v5.u32[0];
  v8 = (__PAIR128__(a4 ^ (unint64_t)(a4 >> 63), a3 ^ (unint64_t)(a4 >> 63))
      - __PAIR128__(a4 >> 63, a4 >> 63)) >> 64;
  v7 = (a3 ^ (a4 >> 63)) - (a4 >> 63);
  v9 = __clz(__rbit64(a1));
  v10 = a1 - 1;
  v11 = &_swiftEmptyArrayStorage;
  do
  {
    if (v6 == 1)
    {
      v12 = v7 & v10;
      if ((v9 & 0x40) != 0)
        v7 = v8 >> v9;
      else
        v7 = ((2 * v8) << ~v9) | (v7 >> v9);
      if ((v9 & 0x40) != 0)
        v8 = 0;
      else
        v8 >>= v9;
      if (a1 < 0xB)
      {
LABEL_19:
        v16 = v12 + 48;
        if (swift_isUniquelyReferenced_nonNull_native((uint64_t)v11))
          goto LABEL_20;
        goto LABEL_25;
      }
    }
    else
    {
      v13 = __udivti3();
      v8 = v14;
      v12 = v7 - v13 * a1;
      v7 = v13;
      if (a1 < 0xB)
        goto LABEL_19;
    }
    if (v12 < 0xAu)
      goto LABEL_19;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native((uint64_t)v11);
    if ((a2 & 1) != 0)
    {
      v16 = v12 + 55;
      if (isUniquelyReferenced_nonNull_native)
        goto LABEL_20;
    }
    else
    {
      v16 = v12 + 87;
      if (isUniquelyReferenced_nonNull_native)
        goto LABEL_20;
    }
LABEL_25:
    v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)&v11[2]->isa + 1, 1, (uint64_t)v11);
LABEL_20:
    v18 = v11[2];
    v17 = (unint64_t)v11[3];
    if ((unint64_t)v18 >= v17 >> 1)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v17 > 1), (int64_t)&v18->isa + 1, 1, (uint64_t)v11);
    v11[2] = (__objc2_class *)((char *)&v18->isa + 1);
    *((_BYTE *)&v18->info + (_QWORD)v11) = v16;
  }
  while (v7 | v8);
  v41 = (unint64_t)v11;
  if (a4 < 0)
  {
    if (!swift_isUniquelyReferenced_nonNull_native((uint64_t)v11))
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)&v11[2]->isa + 1, 1, (uint64_t)v11);
    v20 = v11[2];
    v19 = (unint64_t)v11[3];
    if ((unint64_t)v20 >= v19 >> 1)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v19 > 1), (int64_t)&v20->isa + 1, 1, (uint64_t)v11);
    v11[2] = (__objc2_class *)((char *)&v20->isa + 1);
    *((_BYTE *)&v20->info + (_QWORD)v11) = 45;
    v41 = (unint64_t)v11;
  }
  specialized MutableCollection<>.reverse()();
  v24 = *(_QWORD *)(v41 + 16);
  if (!v24)
  {
    v31 = 0;
LABEL_53:
    swift_bridgeObjectRetain(v41, v21, v22, v23);
    goto LABEL_54;
  }
  if (v24 <= 0xF)
  {
    v32 = 8;
    if (v24 < 8)
      v32 = *(_QWORD *)(v41 + 16);
    v31 = *(unsigned __int8 *)(v41 + 32);
    if (v32 != 1)
    {
      v31 |= (unint64_t)*(unsigned __int8 *)(v41 + 33) << 8;
      if (v32 != 2)
      {
        v31 |= (unint64_t)*(unsigned __int8 *)(v41 + 34) << 16;
        if (v32 != 3)
        {
          v31 |= (unint64_t)*(unsigned __int8 *)(v41 + 35) << 24;
          if (v32 != 4)
          {
            v31 |= (unint64_t)*(unsigned __int8 *)(v41 + 36) << 32;
            if (v32 != 5)
            {
              v31 |= (unint64_t)*(unsigned __int8 *)(v41 + 37) << 40;
              if (v32 != 6)
              {
                v31 |= (unint64_t)*(unsigned __int8 *)(v41 + 38) << 48;
                if (v32 != 7)
                  v31 |= (unint64_t)*(unsigned __int8 *)(v41 + 39) << 56;
              }
            }
          }
        }
      }
    }
    v33 = 0;
    if (v24 >= 9)
    {
      v34 = 0;
      v35 = (unsigned __int8 *)(v41 + 40);
      v36 = v24 - 8;
      do
      {
        if (v24 - 8 <= v24 - 9)
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Range.swift", 17, 2, 0x131uLL, 0);
        v37 = *v35++;
        v33 |= (unint64_t)v37 << v34;
        v34 += 8;
        --v36;
      }
      while (v36);
    }
    goto LABEL_53;
  }
  v25 = v24 | 0xF000000000000000;
  v26 = _allocateStringStorage(codeUnitCapacity:)(*(_QWORD *)(v41 + 16));
  v28 = v27;
  *(_QWORD *)(v26 + 16) = v27;
  *(_QWORD *)(v26 + 24) = v24 | 0xF000000000000000;
  swift_bridgeObjectRetain(v41, v27, v29, v30);
  if (v28 < 0)
  {
    *(_QWORD *)__StringStorage._breadcrumbsAddress.getter() = 0;
    v25 = *(_QWORD *)(v26 + 24);
  }
  *(_BYTE *)(v26 + 32 + (v25 & 0xFFFFFFFFFFFFLL)) = 0;
  specialized UnsafeMutablePointer.initialize(from:count:)((char *)(v41 + 32), v24, (char *)(v26 + 32));
  v31 = *(_QWORD *)(v26 + 24);
LABEL_54:
  swift_bridgeObjectRelease_n(v41, 2);
  return v31;
}

uint64_t specialized BinaryInteger._description(radix:uppercase:)(unint64_t a1, char a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v8;
  uint64_t v9;
  char v10;
  __objc2_class **v11;
  unsigned __int8 v12;
  uint64_t v13;
  unint64_t v14;
  BOOL isUniquelyReferenced_nonNull_native;
  char v16;
  unint64_t v17;
  __objc2_class *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  size_t v22;
  unsigned __int8 *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  size_t v35;
  unsigned int v36;
  char v38;
  unint64_t v39;

  if (a1 - 37 <= 0xFFFFFFFFFFFFFFDCLL)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Radix must be between 2 and 36", 30, 2, "Swift/Integers.swift", 20, 2, 0x5E1uLL, 0);
  v4 = a4;
  v5 = a3;
  if (!(a3 | a4))
    return 48;
  v8 = (uint8x8_t)vcnt_s8((int8x8_t)a1);
  v8.i16[0] = vaddlv_u8(v8);
  v9 = v8.u32[0];
  v10 = __clz(__rbit64(a1));
  v38 = a1 - 1;
  v11 = &_swiftEmptyArrayStorage;
  do
  {
    if (v9 == 1)
    {
      v12 = v5 & v38;
      if ((v10 & 0x40) != 0)
        v5 = v4 >> v10;
      else
        v5 = ((2 * v4) << ~v10) | (v5 >> v10);
      if ((v10 & 0x40) != 0)
        v4 = 0;
      else
        v4 >>= v10;
      if (a1 < 0xB)
      {
LABEL_19:
        v16 = v12 + 48;
        if (swift_isUniquelyReferenced_nonNull_native((uint64_t)v11))
          goto LABEL_20;
        goto LABEL_25;
      }
    }
    else
    {
      v13 = __udivti3();
      v4 = v14;
      v12 = v5 - v13 * a1;
      v5 = v13;
      if (a1 < 0xB)
        goto LABEL_19;
    }
    if (v12 < 0xAu)
      goto LABEL_19;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native((uint64_t)v11);
    if ((a2 & 1) != 0)
    {
      v16 = v12 + 55;
      if (isUniquelyReferenced_nonNull_native)
        goto LABEL_20;
    }
    else
    {
      v16 = v12 + 87;
      if (isUniquelyReferenced_nonNull_native)
        goto LABEL_20;
    }
LABEL_25:
    v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)&v11[2]->isa + 1, 1, (uint64_t)v11);
LABEL_20:
    v18 = v11[2];
    v17 = (unint64_t)v11[3];
    if ((unint64_t)v18 >= v17 >> 1)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v17 > 1), (int64_t)&v18->isa + 1, 1, (uint64_t)v11);
    v11[2] = (__objc2_class *)((char *)&v18->isa + 1);
    *((_BYTE *)&v18->info + (_QWORD)v11) = v16;
  }
  while (v5 | v4);
  v39 = (unint64_t)v11;
  specialized MutableCollection<>.reverse()();
  v22 = (size_t)v11[2];
  if (!v22)
  {
    v30 = 0;
LABEL_47:
    swift_bridgeObjectRetain(v39, v19, v20, v21);
    goto LABEL_48;
  }
  v23 = (unsigned __int8 *)(v11 + 4);
  if (v22 <= 0xF)
  {
    v31 = 8;
    if (v22 < 8)
      v31 = *(_QWORD *)(v39 + 16);
    v30 = *v23;
    if (v31 != 1)
    {
      v30 |= (unint64_t)*(unsigned __int8 *)(v39 + 33) << 8;
      if (v31 != 2)
      {
        v30 |= (unint64_t)*(unsigned __int8 *)(v39 + 34) << 16;
        if (v31 != 3)
        {
          v30 |= (unint64_t)*(unsigned __int8 *)(v39 + 35) << 24;
          if (v31 != 4)
          {
            v30 |= (unint64_t)*(unsigned __int8 *)(v39 + 36) << 32;
            if (v31 != 5)
            {
              v30 |= (unint64_t)*(unsigned __int8 *)(v39 + 37) << 40;
              if (v31 != 6)
              {
                v30 |= (unint64_t)*(unsigned __int8 *)(v39 + 38) << 48;
                if (v31 != 7)
                  v30 |= (unint64_t)*(unsigned __int8 *)(v39 + 39) << 56;
              }
            }
          }
        }
      }
    }
    v32 = 0;
    if (v22 >= 9)
    {
      v33 = 0;
      v34 = (unsigned __int8 *)(v39 + 40);
      v35 = v22 - 8;
      do
      {
        if (v22 - 8 <= v22 - 9)
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Range.swift", 17, 2, 0x131uLL, 0);
        v36 = *v34++;
        v32 |= (unint64_t)v36 << v33;
        v33 += 8;
        --v35;
      }
      while (v35);
    }
    goto LABEL_47;
  }
  v24 = v22 | 0xF000000000000000;
  v25 = _allocateStringStorage(codeUnitCapacity:)(*(_QWORD *)(v39 + 16));
  v27 = v26;
  *(_QWORD *)(v25 + 16) = v26;
  *(_QWORD *)(v25 + 24) = v22 | 0xF000000000000000;
  swift_bridgeObjectRetain(v39, v26, v28, v29);
  if (v27 < 0)
  {
    *(_QWORD *)__StringStorage._breadcrumbsAddress.getter() = 0;
    v24 = *(_QWORD *)(v25 + 24);
  }
  *(_BYTE *)(v25 + 32 + (v24 & 0xFFFFFFFFFFFFLL)) = 0;
  specialized UnsafeMutablePointer.initialize(from:count:)((char *)(v39 + 32), v22, (char *)(v25 + 32));
  v30 = *(_QWORD *)(v25 + 24);
LABEL_48:
  swift_bridgeObjectRelease_n(v39, 2);
  return v30;
}

Swift::String __swiftcall BinaryInteger._description(radix:uppercase:)(Swift::Int radix, Swift::Bool uppercase)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void (*v41)(_QWORD, _QWORD, _QWORD);
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  unint64_t v48;
  int64_t v49;
  uint64_t v50;
  char v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  unint64_t countAndFlagsBits;
  void *object;
  uint8x8_t v58;
  uint64_t v59;
  unint64_t v60;
  void (*v61)(__objc2_class ***, ValueMetadata *);
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char v66;
  void (*v67)(uint64_t, _QWORD, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t);
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  Swift::String v78;
  void (*v79)(uint64_t, uint64_t);
  uint64_t (**v80)(uint64_t, _QWORD);
  int v81;
  char v82;
  uint64_t (*v83)(unint64_t, unint64_t);
  unint64_t *v84;
  char *v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  const char *v89;
  unint64_t v90;
  unint64_t v91;
  char *v92;
  unint64_t v93;
  char *v94;
  _QWORD *v95;
  char *v96;
  void (*v97)(char *, unint64_t);
  void (*v98)(char *, char *, unint64_t);
  char *v99;
  uint64_t v100;
  uint64_t (*v101)(char *, char *, unint64_t);
  char v102;
  uint64_t v103;
  uint64_t (*v104)(char *, char *, unint64_t);
  char v105;
  char *v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  char *v114;
  void (*v115)(char *, char *, unint64_t);
  unsigned __int8 v116;
  char v118;
  __objc2_class **v119;
  unint64_t v120;
  __objc2_class *v121;
  __objc2_class **v122;
  unint64_t v123;
  __objc2_class *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  __objc2_class **v128;
  size_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned __int8 *v138;
  size_t v139;
  unsigned int v140;
  unint64_t v141;
  uint64_t v142;
  void *v143;
  Swift::String result;
  unint64_t v145;
  void (*v146)(uint64_t, uint64_t, uint64_t);
  void (*v147)(void *, uint64_t, uint64_t, unint64_t);
  void (*v148)(uint64_t, uint64_t);
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  unint64_t v153;
  uint64_t v154;
  char *v155;
  unint64_t AssociatedConformanceWitness;
  uint64_t v157;
  unint64_t v158;
  char *v159;
  _BOOL4 v160;
  uint64_t (**i)(uint64_t, _QWORD);
  uint64_t v162;
  unint64_t v163;
  void (*v164)(_QWORD, _QWORD, _QWORD);
  char *v165;
  const char *v166;
  char *v167;
  unint64_t *TupleTypeMetadata2;
  char *v169;
  char *v170;
  __objc2_class **v171;
  char *v172;
  char *v173;
  char *v174;
  _QWORD *v175;
  unint64_t v176;
  __objc2_class **v177;

  v4 = v2;
  v160 = uppercase;
  v171 = (__objc2_class **)radix;
  i = (uint64_t (**)(uint64_t, _QWORD))v3;
  v5 = *(_QWORD *)(v3 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)v5, v2, (uint64_t)&protocol requirements base descriptor for Numeric, associated type descriptor for Numeric.Magnitude);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, AssociatedTypeWitness, AssociatedTypeWitness, 0, 0);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v167 = (char *)&v145 - v7;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v5, v4, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Numeric);
  v166 = *(const char **)(AssociatedConformanceWitness + 16);
  v158 = swift_getAssociatedTypeWitness(0, v166, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v8 = MEMORY[0x1E0C80A78](v158);
  v170 = (char *)&v145 - v9;
  v175 = *(_QWORD **)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v155 = (char *)&v145 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v159 = (char *)&v145 - v13;
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v145 - v15;
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v145 - v18;
  v20 = MEMORY[0x1E0C80A78](v17);
  v22 = (char *)&v145 - v21;
  v23 = MEMORY[0x1E0C80A78](v20);
  v25 = (char *)&v145 - v24;
  v26 = MEMORY[0x1E0C80A78](v23);
  v28 = (char *)&v145 - v27;
  MEMORY[0x1E0C80A78](v26);
  v30 = (char *)&v145 - v29;
  v31 = *(_QWORD *)(v5 + 16);
  v32 = swift_getAssociatedTypeWitness(0, (const char *)v31, v4, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v33 = MEMORY[0x1E0C80A78](v32);
  v34 = MEMORY[0x1E0C80A78](v33);
  v35 = MEMORY[0x1E0C80A78](v34);
  if ((unint64_t)v171 - 37 <= 0xFFFFFFFFFFFFFFDCLL)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Radix must be between 2 and 36", 30, 2, "Swift/Integers.swift", 20, 2, 0x5E1uLL, 0);
  v153 = v39;
  v150 = v38;
  v151 = v35;
  v154 = (uint64_t)&v145 - v36;
  v149 = v37;
  v165 = v28;
  v169 = v30;
  v172 = v22;
  v173 = v25;
  v152 = v19;
  v174 = v16;
  v157 = v5;
  v40 = (uint64_t)i;
  v41 = v164;
  if (i[16](v4, i) <= 64)
  {
    v51 = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 64))(v4, v40);
    v52 = v153;
    v53 = v154;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v153 + 16))(v154, v41, v4);
    v54 = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 120))(v4, v40);
    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v53, v4);
    v55 = v160;
    if ((v51 & 1) != 0)
    {
      countAndFlagsBits = _int64ToString(_:radix:uppercase:)(v54, (uint64_t)v171, v55, (uint64_t (*)(__int128 *, uint64_t, uint64_t, uint64_t, _QWORD))swift_int64ToString);
    }
    else
    {
      v78 = _uint64ToString(_:radix:uppercase:)(v54, (Swift::Int64)v171, v55);
      object = v78._object;
      countAndFlagsBits = v78._countAndFlagsBits;
    }
    v50 = countAndFlagsBits;
    v49 = (int64_t)object;
    goto LABEL_78;
  }
  v42 = v31;
  v43 = v151;
  v44 = swift_getAssociatedConformanceWitness(v31, v4, v151, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  v45 = v150;
  v147 = *(void (**)(void *, uint64_t, uint64_t, unint64_t))(v44 + 8);
  v147(&unk_1816B7DA8, 256, v43, v44);
  v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 24);
  v47 = v154;
  v146 = v46;
  v46(v45, v4, v42);
  LOBYTE(v43) = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v40 + 16) + 8) + 8))(v41, v47, v4);
  v48 = v153;
  v148 = *(void (**)(uint64_t, uint64_t))(v153 + 8);
  v148(v47, v4);
  if ((v43 & 1) != 0)
  {
    v49 = 0xE100000000000000;
    v50 = 48;
    goto LABEL_78;
  }
  v145 = v44;
  v58 = (uint8x8_t)vcnt_s8((int8x8_t)v171);
  v58.i16[0] = vaddlv_u8(v58);
  v162 = v58.u32[0];
  v177 = v171;
  v59 = v4;
  v60 = swift_getAssociatedConformanceWitness(v40, v4, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for BinaryInteger, (uint64_t)&associated conformance descriptor for BinaryInteger.Numeric.Magnitude: BinaryInteger);
  v61 = *(void (**)(__objc2_class ***, ValueMetadata *))(v60 + 88);
  v64 = lazy protocol witness table accessor for type Int and conformance Int(v60, v62, v63);
  v65 = v169;
  v163 = v64;
  v61(&v177, &type metadata for Int);
  v66 = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 64))(v59, v40);
  v67 = *(void (**)(uint64_t, _QWORD, uint64_t))(v48 + 16);
  v68 = v149;
  v67(v149, v41, v59);
  if ((v66 & 1) != 0)
  {
    v69 = v150;
    ((void (*)(void *, uint64_t))v147)(&unk_1816B7DA8, 256);
    v70 = v154;
    v146(v69, v59, v42);
    LODWORD(v151) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v40 + 32) + 8)
                                                                         + 16))(v68, v70, v59);
    v71 = v148;
    v148(v70, v59);
    v72 = v157;
    v73 = v159;
    v75 = v172;
    v74 = v173;
    v76 = v68;
    v77 = v165;
  }
  else
  {
    LODWORD(v151) = 0;
    v72 = v157;
    v73 = v159;
    v75 = v172;
    v74 = v173;
    v76 = v68;
    v77 = v165;
    v71 = v148;
  }
  v71(v76, v59);
  v79 = *(void (**)(uint64_t, uint64_t))(v72 + 56);
  v154 = v59;
  v79(v59, v72);
  v153 = __clz(__rbit64((unint64_t)v171));
  v177 = &_swiftEmptyArrayStorage;
  v80 = *(uint64_t (***)(uint64_t, _QWORD))(v60 + 64);
  v164 = (void (*)(_QWORD, _QWORD, _QWORD))v175[2];
  if (v160)
    v81 = 55;
  else
    v81 = 87;
  v160 = v81;
  for (i = v80; ; v80 = i)
  {
    v164(v74, v77, AssociatedTypeWitness);
    v82 = ((uint64_t (*)(unint64_t, unint64_t))v80)(AssociatedTypeWitness, v60);
    v83 = (uint64_t (*)(unint64_t, unint64_t))v80;
    v85 = v167;
    v84 = TupleTypeMetadata2;
    if ((v82 & 1) != 0)
    {
      if ((*(uint64_t (**)(unint64_t, unint64_t))(v60 + 128))(AssociatedTypeWitness, v60) >= 64)
      {
        v176 = 0;
        (*(void (**)(unint64_t *, ValueMetadata *, unint64_t, unint64_t, unint64_t))(v60 + 96))(&v176, &type metadata for Int, v163, AssociatedTypeWitness, v60);
        v101 = *(uint64_t (**)(char *, char *, unint64_t))(*(_QWORD *)(swift_getAssociatedConformanceWitness(v157, v154, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Comparable)+ 8)+ 8);
        v102 = v101(v74, v75, AssociatedTypeWitness);
        goto LABEL_31;
      }
      v86 = (*(uint64_t (**)(unint64_t, unint64_t))(v60 + 120))(AssociatedTypeWitness, v60);
      goto LABEL_28;
    }
    v87 = v83(AssociatedTypeWitness, v60);
    v88 = (*(uint64_t (**)(unint64_t, unint64_t))(v60 + 128))(AssociatedTypeWitness, v60);
    if ((v87 & 1) == 0)
      break;
    if (v88 > 64)
      goto LABEL_30;
    v89 = v166;
    v90 = v158;
    v91 = swift_getAssociatedConformanceWitness((uint64_t)v166, AssociatedTypeWitness, v158, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    v92 = v170;
    (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v91 + 8))(&unk_1816B7DA8, 256, v90, v91);
    (*((void (**)(char *, unint64_t, const char *))v89 + 3))(v92, AssociatedTypeWitness, v89);
    v93 = swift_getAssociatedConformanceWitness(v157, v154, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Comparable);
    v94 = v173;
    LOBYTE(v90) = (*(uint64_t (**)(char *, char *, unint64_t, unint64_t))(v93 + 32))(v173, v75, AssociatedTypeWitness, v93);
    v95 = v175;
    v96 = v75;
    v97 = (void (*)(char *, unint64_t))v175[1];
    v97(v96, AssociatedTypeWitness);
    v98 = (void (*)(char *, char *, unint64_t))v95[4];
    v99 = v152;
    v98(v152, v94, AssociatedTypeWitness);
    if ((v90 & 1) != 0)
    {
      v100 = (*(uint64_t (**)(unint64_t, unint64_t))(v60 + 120))(AssociatedTypeWitness, v60);
      v97(v99, AssociatedTypeWitness);
      v73 = v159;
      v65 = v169;
      if (!v100)
        goto LABEL_47;
    }
    else
    {
      v97(v99, AssociatedTypeWitness);
      v73 = v159;
      v65 = v169;
    }
LABEL_32:
    if (v162 == 1)
    {
      v107 = v65;
      v108 = v158;
      v176 = v153;
      (*(void (**)(char *, unint64_t *, ValueMetadata *, unint64_t, unint64_t, unint64_t))(v60 + 240))(v165, &v176, &type metadata for Int, v163, AssociatedTypeWitness, v60);
      v109 = swift_getAssociatedConformanceWitness((uint64_t)v89, AssociatedTypeWitness, v108, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      (*(void (**)(uint64_t *, uint64_t, uint64_t, unint64_t))(v109 + 8))(&qword_1816B7DB0, 512, v108, v109);
      v110 = v155;
      (*((void (**)(char *, unint64_t, const char *))v89 + 3))(v170, AssociatedTypeWitness, v89);
      v111 = v172;
      v112 = v107;
      v77 = v165;
      (*(void (**)(char *, char *, unint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 8) + 40))(v112, v110, AssociatedTypeWitness);
      v97(v110, AssociatedTypeWitness);
      v73 = v159;
      (*(void (**)(char *, char *, unint64_t, unint64_t))(v60 + 192))(v77, v111, AssociatedTypeWitness, v60);
      v97(v111, AssociatedTypeWitness);
    }
    else
    {
      (*(void (**)(char *, char *, char *, unint64_t, unint64_t))(v60 + 272))(v85, &v85[*((int *)v84 + 12)], v65, AssociatedTypeWitness, v60);
    }
    v97(v77, AssociatedTypeWitness);
    v113 = &v85[*((int *)v84 + 12)];
    v114 = v85;
    v115 = (void (*)(char *, char *, unint64_t))v175[4];
    v115(v174, v114, AssociatedTypeWitness);
    v115(v73, v113, AssociatedTypeWitness);
    v116 = (*(uint64_t (**)(unint64_t, unint64_t))(v60 + 120))(AssociatedTypeWitness, v60);
    v97(v73, AssociatedTypeWitness);
    if (v116 >= 0xAu && (unint64_t)v171 >= 0xB)
      v118 = v160;
    else
      v118 = 48;
    v119 = v177;
    if (!swift_isUniquelyReferenced_nonNull_native((uint64_t)v177))
      v119 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)&v119[2]->isa + 1, 1, (uint64_t)v119);
    v121 = v119[2];
    v120 = (unint64_t)v119[3];
    if ((unint64_t)v121 >= v120 >> 1)
      v119 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v120 > 1), (int64_t)&v121->isa + 1, 1, (uint64_t)v119);
    v119[2] = (__objc2_class *)((char *)&v121->isa + 1);
    *((_BYTE *)&v121->info + (_QWORD)v119) = v118 + v116;
    v177 = v119;
    v115(v77, v174, AssociatedTypeWitness);
    v75 = v172;
    v74 = v173;
    v65 = v169;
  }
  if (v88 < 64)
  {
    v74 = v173;
    v86 = (*(uint64_t (**)(unint64_t, unint64_t))(v60 + 120))(AssociatedTypeWitness, v60);
LABEL_28:
    v103 = v86;
    v97 = (void (*)(char *, unint64_t))v175[1];
    v97(v74, AssociatedTypeWitness);
    v89 = v166;
    if (!v103)
      goto LABEL_47;
    goto LABEL_32;
  }
LABEL_30:
  v176 = 0;
  (*(void (**)(unint64_t *, ValueMetadata *, unint64_t, unint64_t, unint64_t))(v60 + 96))(&v176, &type metadata for Int, v163, AssociatedTypeWitness, v60);
  v104 = *(uint64_t (**)(char *, char *, unint64_t))(*(_QWORD *)(swift_getAssociatedConformanceWitness(v157, v154, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Comparable)+ 8)+ 8);
  v74 = v173;
  v102 = v104(v173, v75, AssociatedTypeWitness);
LABEL_31:
  v105 = v102;
  v106 = v75;
  v97 = (void (*)(char *, unint64_t))v175[1];
  v97(v106, AssociatedTypeWitness);
  v97(v74, AssociatedTypeWitness);
  v89 = v166;
  if ((v105 & 1) == 0)
    goto LABEL_32;
LABEL_47:
  v97(v77, AssociatedTypeWitness);
  v97(v65, AssociatedTypeWitness);
  if ((v151 & 1) != 0)
  {
    v122 = v177;
    if (!swift_isUniquelyReferenced_nonNull_native((uint64_t)v177))
      v122 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)&v122[2]->isa + 1, 1, (uint64_t)v122);
    v124 = v122[2];
    v123 = (unint64_t)v122[3];
    if ((unint64_t)v124 >= v123 >> 1)
      v122 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v123 > 1), (int64_t)&v124->isa + 1, 1, (uint64_t)v122);
    v122[2] = (__objc2_class *)((char *)&v124->isa + 1);
    *((_BYTE *)&v124->info + (_QWORD)v122) = 45;
    v177 = v122;
  }
  specialized MutableCollection<>.reverse()();
  v128 = v177;
  v129 = (size_t)v177[2];
  if (!v129)
  {
    v50 = 0;
    v49 = 0xE000000000000000;
LABEL_76:
    swift_bridgeObjectRetain((unint64_t)v177, v125, v126, v127);
    goto LABEL_77;
  }
  if (v129 <= 0xF)
  {
    v135 = 8;
    if (v129 < 8)
      v135 = (uint64_t)v177[2];
    v50 = *((unsigned __int8 *)v177 + 32);
    if (v135 != 1)
    {
      v50 |= (unint64_t)*((unsigned __int8 *)v177 + 33) << 8;
      if (v135 != 2)
      {
        v50 |= (unint64_t)*((unsigned __int8 *)v177 + 34) << 16;
        if (v135 != 3)
        {
          v50 |= (unint64_t)*((unsigned __int8 *)v177 + 35) << 24;
          if (v135 != 4)
          {
            v50 |= (unint64_t)*((unsigned __int8 *)v177 + 36) << 32;
            if (v135 != 5)
            {
              v50 |= (unint64_t)*((unsigned __int8 *)v177 + 37) << 40;
              if (v135 != 6)
              {
                v50 |= (unint64_t)*((unsigned __int8 *)v177 + 38) << 48;
                if (v135 != 7)
                  v50 |= (unint64_t)*((unsigned __int8 *)v177 + 39) << 56;
              }
            }
          }
        }
      }
    }
    v136 = 0;
    if (v129 >= 9)
    {
      v137 = 0;
      v138 = (unsigned __int8 *)(v177 + 5);
      v139 = v129 - 8;
      do
      {
        if (v129 - 8 <= v129 - 9)
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Range.swift", 17, 2, 0x131uLL, 0);
        v140 = *v138++;
        v136 |= (unint64_t)v140 << v137;
        v137 += 8;
        --v139;
      }
      while (v139);
    }
    v141 = 0xA000000000000000;
    if (((v136 | v50) & 0x8080808080808080) == 0)
      v141 = 0xE000000000000000;
    v49 = v141 | (v129 << 56) | v136;
    goto LABEL_76;
  }
  v130 = v129 | 0xF000000000000000;
  v49 = _allocateStringStorage(codeUnitCapacity:)((int64_t)v177[2]);
  v132 = v131;
  *(_QWORD *)(v49 + 16) = v131;
  *(_QWORD *)(v49 + 24) = v129 | 0xF000000000000000;
  swift_bridgeObjectRetain((unint64_t)v128, v131, v133, v134);
  if (v132 < 0)
  {
    *(_QWORD *)__StringStorage._breadcrumbsAddress.getter() = 0;
    v130 = *(_QWORD *)(v49 + 24);
  }
  *(_BYTE *)(v49 + 32 + (v130 & 0xFFFFFFFFFFFFLL)) = 0;
  specialized UnsafeMutablePointer.initialize(from:count:)((char *)v128 + 32, v129, (char *)(v49 + 32));
  v50 = *(_QWORD *)(v49 + 24);
LABEL_77:
  swift_bridgeObjectRelease_n((uint64_t)v128, 2);
LABEL_78:
  v142 = v50;
  v143 = (void *)v49;
  result._object = v143;
  result._countAndFlagsBits = v142;
  return result;
}

Swift::String __swiftcall _uint64ToString(_:radix:uppercase:)(Swift::UInt64 _, Swift::Int64 radix, Swift::Bool uppercase)
{
  unint64_t v3;
  void *v4;
  Swift::String result;

  v3 = _int64ToString(_:radix:uppercase:)(_, radix, uppercase, (uint64_t (*)(__int128 *, uint64_t, uint64_t, uint64_t, _QWORD))swift_uint64ToString);
  result._object = v4;
  result._countAndFlagsBits = v3;
  return result;
}

unint64_t _int64ToString(_:radix:uppercase:)(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(__int128 *, uint64_t, uint64_t, uint64_t, _QWORD))
{
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unint64_t v23;
  unsigned int v24;
  __int128 __src;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (a2 < 10)
  {
    v29 = 0;
    v27 = 0u;
    v28 = 0u;
    __src = 0u;
    v26 = 0u;
    v4 = a4(&__src, 72, a1, a2, a3 & 1);
    if ((v4 & 0x8000000000000000) == 0)
    {
      v5 = v4;
      if (v4)
      {
        if ((unint64_t)v4 <= 0xF)
        {
          v6 = v4 - 8;
          v7 = 8;
          if (v4 < 8)
            v7 = v4;
          result = __src;
          if (v7 != 1)
          {
            result = __src | ((unint64_t)BYTE1(__src) << 8);
            if (v7 != 2)
            {
              result |= (unint64_t)BYTE2(__src) << 16;
              if (v7 != 3)
              {
                result |= (unint64_t)BYTE3(__src) << 24;
                if (v7 != 4)
                {
                  result |= (unint64_t)BYTE4(__src) << 32;
                  if (v7 != 5)
                  {
                    result |= (unint64_t)BYTE5(__src) << 40;
                    if (v7 != 6)
                    {
                      result |= (unint64_t)BYTE6(__src) << 48;
                      if (v7 != 7)
                        result |= (unint64_t)BYTE7(__src) << 56;
                    }
                  }
                }
              }
            }
          }
          v9 = 0;
          if (v5 >= 9)
          {
            v10 = 0;
            v11 = (unsigned __int8 *)&__src + 8;
            v12 = v6 & ~(v6 >> 63);
            while (v12 > v5 - 9)
            {
              v13 = *v11++;
              v9 |= (unint64_t)v13 << v10;
              v10 += 8;
              if (!--v6)
                return result;
            }
            goto LABEL_42;
          }
          return result;
        }
LABEL_23:
        v15 = v5 | 0xF000000000000000;
        v16 = _allocateStringStorage(codeUnitCapacity:)(v5);
        *(_QWORD *)(v16 + 16) = v17;
        *(_QWORD *)(v16 + 24) = v5 | 0xF000000000000000;
        if (v17 < 0)
        {
          *(_QWORD *)__StringStorage._breadcrumbsAddress.getter() = 0;
          v15 = *(_QWORD *)(v16 + 24);
        }
        *(_BYTE *)(v16 + 32 + (v15 & 0xFFFFFFFFFFFFLL)) = 0;
        specialized UnsafeMutablePointer.initialize(from:count:)((char *)&__src, v5, (char *)(v16 + 32));
        return *(_QWORD *)(v16 + 24);
      }
      return 0;
    }
LABEL_43:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  __src = 0u;
  v26 = 0u;
  v14 = a4(&__src, 32, a1, a2, a3 & 1);
  if (v14 < 0)
    goto LABEL_43;
  v5 = v14;
  if (!v14)
    return 0;
  if ((unint64_t)v14 > 0xF)
    goto LABEL_23;
  v18 = v14 - 8;
  v19 = 8;
  if (v14 < 8)
    v19 = v14;
  result = __src;
  if (v19 != 1)
  {
    result = __src | ((unint64_t)BYTE1(__src) << 8);
    if (v19 != 2)
    {
      result |= (unint64_t)BYTE2(__src) << 16;
      if (v19 != 3)
      {
        result |= (unint64_t)BYTE3(__src) << 24;
        if (v19 != 4)
        {
          result |= (unint64_t)BYTE4(__src) << 32;
          if (v19 != 5)
          {
            result |= (unint64_t)BYTE5(__src) << 40;
            if (v19 != 6)
            {
              result |= (unint64_t)BYTE6(__src) << 48;
              if (v19 != 7)
                result |= (unint64_t)BYTE7(__src) << 56;
            }
          }
        }
      }
    }
  }
  v20 = 0;
  if (v5 >= 9)
  {
    v21 = 0;
    v22 = (unsigned __int8 *)&__src + 8;
    v23 = v18 & ~(v18 >> 63);
    while (v23 > v5 - 9)
    {
      v24 = *v22++;
      v20 |= (unint64_t)v24 << v21;
      v21 += 8;
      if (!--v18)
        return result;
    }
LABEL_42:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Range.swift", 17, 2, 0x131uLL, 0);
  }
  return result;
}

uint64_t Int.nonzeroBitCount.getter(uint64_t a1)
{
  uint8x8_t v1;

  v1 = (uint8x8_t)vcnt_s8((int8x8_t)a1);
  v1.i16[0] = vaddlv_u8(v1);
  return v1.u32[0];
}

unint64_t Int.trailingZeroBitCount.getter(unint64_t a1)
{
  return __clz(__rbit64(a1));
}

void specialized MutableCollection<>.reverse()()
{
  uint64_t *v0;
  __objc2_class **v1;
  uint64_t v2;
  BOOL v3;
  BOOL isUniquelyReferenced_nonNull_native;
  unint64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  char v9;

  v1 = (__objc2_class **)*v0;
  v2 = *(_QWORD *)(*v0 + 16);
  if (v2)
    v3 = v2 == 1;
  else
    v3 = 1;
  if (!v3)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v0);
    *v0 = (uint64_t)v1;
    if (!isUniquelyReferenced_nonNull_native)
      v1 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v1);
    v5 = 0;
    *v0 = (uint64_t)v1;
    v6 = v2 + 31;
    do
    {
      if (v5 != v6 - 32)
      {
        v8 = (unint64_t)v1[2];
        if (v5 >= v8 || v6 - 32 >= v8)
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
        v9 = *((_BYTE *)v1 + v5 + 32);
        *((_BYTE *)v1 + v5 + 32) = *((_BYTE *)v1 + v6);
        *((_BYTE *)v1 + v6) = v9;
      }
      ++v5;
      v7 = v6 - 33;
      --v6;
    }
    while ((uint64_t)v5 < v7);
    *v0 = (uint64_t)v1;
  }
}

{
  uint64_t *v0;
  __objc2_class **v1;
  uint64_t v2;
  unint64_t v3;
  BOOL isUniquelyReferenced_nonNull_native;
  _WORD *v5;
  _WORD *v6;
  uint64_t v7;
  unint64_t v9;
  __int16 v10;
  int v11;
  __int16 v12;

  v1 = (__objc2_class **)*v0;
  v2 = *(_QWORD *)(*v0 + 16);
  if (v2)
  {
    v3 = v2 - 1;
    if (v2 != 1)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v0);
      *v0 = (uint64_t)v1;
      if (!isUniquelyReferenced_nonNull_native)
        v1 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v1);
      *v0 = (uint64_t)v1;
      v5 = (_WORD *)&v1[v2 + 3] + 2;
      v6 = (_WORD *)v1 + 18;
      v7 = 1;
      do
      {
        if (v7 - 1 != v3)
        {
          v9 = (unint64_t)v1[2];
          if (v7 - 1 >= v9 || v3 >= v9)
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
          v10 = *v6;
          v11 = *((_DWORD *)v6 - 1);
          v12 = *v5;
          *((_DWORD *)v6 - 1) = *((_DWORD *)v5 - 1);
          *v6 = v12;
          *((_DWORD *)v5 - 1) = v11;
          *v5 = v10;
        }
        --v3;
        v5 -= 4;
        v6 += 4;
      }
      while (v7++ < (uint64_t)v3);
      *v0 = (uint64_t)v1;
    }
  }
}

uint64_t MutableCollection<>.reverse()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t result;
  uint64_t v17;
  unint64_t AssociatedConformanceWitness;
  unint64_t v19;
  uint64_t (*v20)(char *, char *, unint64_t, unint64_t);
  void (*v21)(char *, char *, uint64_t, uint64_t);
  void (*v22)(char *, uint64_t, uint64_t);
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t (*v24)(char *, unint64_t);
  uint64_t v25;
  void (*v26)(char *, unint64_t);
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v28 = a3;
  v30 = a2;
  v4 = *(_QWORD *)(a2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v4, a1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v7);
  v12 = (char *)&v25 - v11;
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v25 - v13;
  v15 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 104);
  v29 = v4;
  result = v15(a1, v4);
  if ((result & 1) == 0)
  {
    v17 = v29;
    (*(void (**)(uint64_t, uint64_t))(v29 + 64))(a1, v29);
    (*(void (**)(uint64_t, uint64_t))(v17 + 72))(a1, v17);
    (*(void (**)(char *, uint64_t))(v30 + 32))(v9, a1);
    v26 = *(void (**)(char *, unint64_t))(v6 + 8);
    v26(v9, AssociatedTypeWitness);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v17, a1, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
    v19 = AssociatedTypeWitness;
    v20 = *(uint64_t (**)(char *, char *, unint64_t, unint64_t))(AssociatedConformanceWitness
                                                                                       + 16);
    v27 = AssociatedConformanceWitness;
    if ((((uint64_t (*)(char *, char *, unint64_t))v20)(v14, v12, v19) & 1) != 0)
    {
      v21 = *(void (**)(char *, char *, uint64_t, uint64_t))(v28 + 64);
      v22 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 192);
      v23 = *(void (**)(char *, uint64_t, uint64_t))(v30 + 40);
      do
      {
        v21(v14, v12, a1, v28);
        v22(v14, a1, v29);
        v23(v12, a1, v30);
      }
      while ((v20(v14, v12, v19, v27) & 1) != 0);
    }
    v24 = (uint64_t (*)(char *, unint64_t))v26;
    v26(v12, v19);
    return v24(v14, v19);
  }
  return result;
}

uint64_t BinaryInteger.distance(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t (*v70)(uint64_t, uint64_t);
  char v71;
  const char *v72;
  unint64_t v73;
  void (*v74)(char *, uint64_t, const char *);
  char *v75;
  uint64_t (*v76)(uint64_t (*)(uint64_t, unint64_t), char *, uint64_t, char *);
  void (*v77)(char *, uint64_t);
  uint64_t v78;
  int v79;
  uint64_t v80;
  void (*v81)(uint64_t, uint64_t);
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(char *, uint64_t);
  unint64_t v88;
  char v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t (*v96)(uint64_t, unint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char v103;
  void (*v104)(uint64_t (*)(uint64_t, unint64_t), uint64_t, uint64_t);
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _BOOL4 v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  void (*v114)(char *, uint64_t, uint64_t);
  char *v115;
  uint64_t (*v116)(uint64_t, uint64_t);
  uint64_t v117;
  char *v118;
  uint64_t (*v119)(uint64_t, uint64_t);
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t (*v125)(uint64_t, uint64_t);
  char *v126;
  uint64_t v127;
  uint64_t (*v128)(uint64_t, uint64_t);
  char v129;
  uint64_t v130;
  void (*v131)(char *, uint64_t, uint64_t);
  _BOOL4 v132;
  char *v133;
  uint64_t v134;
  char *v135;
  uint64_t (*v136)(uint64_t, uint64_t);
  uint64_t (*v137)(uint64_t, uint64_t);
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void (*v150)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v151;
  char v152;
  char *v153;
  void (*v154)(char *, uint64_t);
  char *v155;
  uint64_t (*v156)(uint64_t, uint64_t);
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  void (*v170)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v171;
  char v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  char v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  void (*v180)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v181;
  char *v182;
  char v183;
  uint64_t v184;
  uint64_t v185;
  char v186;
  char v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  char v194;
  uint64_t v195;
  uint64_t v196;
  char v197;
  uint64_t v198;
  char v199;
  uint64_t v200;
  char v201;
  uint64_t v202;
  char *v203;
  char *v204;
  char *v205;
  char *v206;
  char v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  void (*v211)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v212;
  char *v213;
  char v214;
  char v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  void (*v219)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v220;
  char *v221;
  char *v222;
  char v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  unint64_t v229;
  uint64_t v230;
  BOOL v231;
  uint64_t v232;
  void (*v233)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  char *v237;
  uint64_t v238;
  void (*v239)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  char *v243;
  uint64_t v244;
  char *v245;
  uint64_t v246;
  void (*v247)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  char *v251;
  char v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  void (*v257)(int64_t *, ValueMetadata *, unint64_t, uint64_t, unint64_t);
  unint64_t v258;
  uint64_t v259;
  unint64_t v260;
  char *v261;
  char v262;
  char *v263;
  char v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  void (*v268)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v269;
  char *v270;
  char v271;
  void (*v272)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v273;
  char *v274;
  char v275;
  void (*v276)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v277;
  char *v278;
  char v279;
  char *v280;
  uint64_t v281;
  char *v282;
  uint64_t v283;
  BOOL v284;
  unint64_t v285;
  char *v286;
  uint64_t v287;
  unint64_t v288;
  void (*v289)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v290;
  char *v291;
  char v292;
  char *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  char *v298;
  char *v299;
  int64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unint64_t v305;
  char *v306;
  char *v307;
  char *v308;
  void (*v309)(char *, uint64_t);
  char *v310;
  int64_t v311;
  uint64_t v312;
  int64_t v313;
  char *v314;
  uint64_t v315;
  BOOL v316;
  const char *v317;
  unint64_t v318;
  unint64_t v319;
  char *v320;
  unint64_t v321;
  uint64_t v322;
  char *v323;
  int64_t v324;
  uint64_t v325;
  char *v326;
  char *v327;
  char v328;
  char *v329;
  int64_t v330;
  uint64_t v331;
  uint64_t v332;
  char *v333;
  char *v334;
  unint64_t v335;
  const char *v336;
  char *v337;
  char *v338;
  char *v339;
  char *v340;
  char *v341;
  char *v342;
  char *v343;
  unint64_t AssociatedConformanceWitness;
  char *v345;
  char *v346;
  char *v347;
  uint64_t (*v348)(char *, char *, uint64_t, char *);
  char *v349;
  char *v350;
  char *v351;
  char *v352;
  unint64_t *v353;
  char *v354;
  char *v355;
  char *v356;
  char *v357;
  char *v358;
  uint64_t v359;
  char *v360;
  unint64_t v361;
  const char *v362;
  char *v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t (*v367)(uint64_t, uint64_t);
  uint64_t v368;
  uint64_t (*v369)(uint64_t, unint64_t);
  uint64_t (*v370)(uint64_t, unint64_t);
  uint64_t v371;
  int64_t v372;

  v370 = (uint64_t (*)(_QWORD, _QWORD))a1;
  v4 = a2;
  v5 = *(_QWORD *)(a3 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)v5, a2, (uint64_t)&protocol requirements base descriptor for Numeric, associated type descriptor for Numeric.Magnitude);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v5, v4, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Numeric);
  v336 = *(const char **)(AssociatedConformanceWitness + 16);
  v335 = swift_getAssociatedTypeWitness(0, v336, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v335);
  v334 = (char *)&v332 - v7;
  v353 = swift_checkMetadataState(0, AssociatedTypeWitness);
  v359 = *(v353 - 1);
  v8 = MEMORY[0x1E0C80A78](v353);
  v337 = (char *)&v332 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v351 = (char *)&v332 - v11;
  v12 = MEMORY[0x1E0C80A78](v10);
  v350 = (char *)&v332 - v13;
  v14 = MEMORY[0x1E0C80A78](v12);
  v356 = (char *)&v332 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v343 = (char *)&v332 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v357 = (char *)&v332 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v361 = (unint64_t)&v332 - v21;
  MEMORY[0x1E0C80A78](v20);
  v352 = (char *)&v332 - v22;
  v23 = *(const char **)(v5 + 16);
  v24 = swift_getAssociatedTypeWitness(0, v23, v4, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v25 = MEMORY[0x1E0C80A78](v24);
  v27 = (char *)&v332 - v26;
  v368 = *(_QWORD *)(v4 - 8);
  v28 = MEMORY[0x1E0C80A78](v25);
  v333 = (char *)&v332 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x1E0C80A78](v28);
  v349 = (char *)&v332 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v347 = (char *)&v332 - v33;
  v34 = MEMORY[0x1E0C80A78](v32);
  v354 = (char *)&v332 - v35;
  v36 = MEMORY[0x1E0C80A78](v34);
  v342 = (char *)&v332 - v37;
  v38 = MEMORY[0x1E0C80A78](v36);
  v358 = (char *)&v332 - v39;
  v40 = MEMORY[0x1E0C80A78](v38);
  v339 = (char *)&v332 - v41;
  v42 = MEMORY[0x1E0C80A78](v40);
  v348 = (uint64_t (*)(char *, char *, uint64_t, char *))((char *)&v332 - v43);
  v44 = MEMORY[0x1E0C80A78](v42);
  v341 = (char *)&v332 - v45;
  v46 = MEMORY[0x1E0C80A78](v44);
  v360 = (char *)&v332 - v47;
  v48 = MEMORY[0x1E0C80A78](v46);
  v50 = (char *)&v332 - v49;
  v51 = MEMORY[0x1E0C80A78](v48);
  v365 = (uint64_t)&v332 - v52;
  v53 = MEMORY[0x1E0C80A78](v51);
  v338 = (char *)&v332 - v54;
  v55 = MEMORY[0x1E0C80A78](v53);
  v340 = (char *)&v332 - v56;
  v57 = MEMORY[0x1E0C80A78](v55);
  v346 = (char *)&v332 - v58;
  v59 = MEMORY[0x1E0C80A78](v57);
  v345 = (char *)&v332 - v60;
  v61 = MEMORY[0x1E0C80A78](v59);
  v63 = (char *)&v332 - v62;
  v64 = MEMORY[0x1E0C80A78](v61);
  v355 = (char *)&v332 - v65;
  v66 = MEMORY[0x1E0C80A78](v64);
  v68 = (char *)&v332 - v67;
  MEMORY[0x1E0C80A78](v66);
  v364 = (uint64_t)&v332 - v69;
  v70 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 64);
  v366 = a3;
  v367 = v70;
  v71 = v70(v4, a3);
  v362 = v23;
  v363 = v63;
  if ((v71 & 1) == 0)
  {
    v361 = v24;
    v101 = v366;
    v102 = *(char **)(*(_QWORD *)(v366 + 32) + 8);
    v103 = (*((uint64_t (**)(uint64_t (*)(uint64_t, unint64_t), uint64_t (*)(_QWORD, _QWORD), uint64_t, char *))v102
            + 5))(v369, v370, v4, v102);
    v104 = *(void (**)(uint64_t (*)(uint64_t, unint64_t), uint64_t, uint64_t))(*(_QWORD *)(v5 + 8) + 40);
    if ((v103 & 1) != 0)
    {
      v365 = (uint64_t)v102;
      v105 = v364;
      v104(v369, (uint64_t)v370, v4);
      v106 = v367(v4, v101);
      v107 = v101;
      v108 = v368;
      v101 = *(_QWORD *)(v368 + 16);
      ((void (*)(char *, uint64_t, uint64_t))v101)(v68, v105, v4);
      v109 = v107;
      v110 = (v106 & 1) != 0 && (*(uint64_t (**)(uint64_t, uint64_t))(v107 + 128))(v4, v107) > 64;
      v102 = *(char **)(v108 + 8);
      ((void (*)(char *, uint64_t))v102)(v68, v4);
      v135 = v355;
      ((void (*)(char *, uint64_t, uint64_t))v101)(v355, v364, v4);
      if (!v110)
      {
        ((void (*)(char *, uint64_t))v102)(v135, v4);
        v137 = *(uint64_t (**)(uint64_t, uint64_t))(v109 + 128);
        v143 = v364;
        v141 = v4;
        v144 = v345;
        goto LABEL_45;
      }
      v372 = 0x8000000000000000;
      v136 = v367;
      if ((v367(v4, v109) & 1) != 0)
      {
        v137 = *(uint64_t (**)(uint64_t, uint64_t))(v109 + 128);
        v138 = v137(v4, v109);
        v141 = v4;
        if (v138 >= 64)
        {
          v272 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v109 + 96);
          v273 = lazy protocol witness table accessor for type Int and conformance Int(v138, v139, v140);
          v274 = v363;
          v272(&v372, &type metadata for Int, v273, v4, v109);
          v275 = (*(uint64_t (**)(char *, char *, uint64_t))(v365 + 16))(v135, v274, v4);
          ((void (*)(char *, uint64_t))v102)(v274, v4);
          ((void (*)(char *, uint64_t))v102)(v135, v4);
          v143 = v364;
          v144 = v345;
          if ((v275 & 1) != 0)
            goto LABEL_124;
        }
        else
        {
          v142 = (*(uint64_t (**)(uint64_t, uint64_t))(v109 + 120))(v4, v109);
          ((void (*)(char *, uint64_t))v102)(v135, v4);
          v143 = v364;
          v144 = v345;
          if (v142 < v372)
            goto LABEL_124;
        }
        goto LABEL_45;
      }
      v207 = v136(v4, v109);
      v137 = *(uint64_t (**)(uint64_t, uint64_t))(v109 + 128);
      v370 = (uint64_t (*)(_QWORD, _QWORD))v4;
      v208 = v137(v4, v109);
      if ((v207 & 1) != 0)
      {
        if (v208 <= 64)
        {
          v293 = v135;
          v294 = v361;
          v295 = (uint64_t)v362;
          v296 = (uint64_t)v370;
          v297 = swift_getAssociatedConformanceWitness((uint64_t)v362, (uint64_t)v370, v361, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
          (*(void (**)(void *, uint64_t, uint64_t, unint64_t))(v297 + 8))(&unk_1816B7DA8, 256, v294, v297);
          v4 = (uint64_t)v363;
          v298 = v27;
          v141 = v296;
          (*(void (**)(char *, uint64_t, uint64_t))(v295 + 24))(v298, v296, v295);
          LOBYTE(v294) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v365 + 16))(v293, v4, v296);
          ((void (*)(uint64_t, uint64_t))v102)(v4, v296);
          v299 = v338;
          (*(void (**)(char *, char *, uint64_t))(v368 + 32))(v338, v293, v296);
          if ((v294 & 1) != 0)
          {
            v355 = v102;
            ((void (*)(char *, uint64_t))v102)(v299, v296);
            goto LABEL_168;
          }
          v300 = v372;
          v109 = v366;
          v301 = (*(uint64_t (**)(uint64_t, uint64_t))(v366 + 120))(v141, v366);
          ((void (*)(char *, uint64_t))v102)(v299, v141);
          v284 = v301 < v300;
          v143 = v364;
          v144 = v345;
          if (!v284)
            goto LABEL_45;
        }
        else
        {
          v109 = v366;
          v211 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v366 + 96);
          v212 = lazy protocol witness table accessor for type Int and conformance Int(v208, v209, v210);
          v213 = v363;
          v141 = (uint64_t)v370;
          v211(&v372, &type metadata for Int, v212, (uint64_t)v370, v109);
          v214 = (*(uint64_t (**)(char *, char *, uint64_t))(v365 + 16))(v135, v213, v141);
          ((void (*)(char *, uint64_t))v102)(v213, v141);
          ((void (*)(char *, uint64_t))v102)(v135, v141);
          v143 = v364;
          v144 = v345;
          if ((v214 & 1) == 0)
            goto LABEL_45;
        }
      }
      else
      {
        v144 = v345;
        if (v208 >= 64)
        {
          v141 = (uint64_t)v370;
          ((void (*)(char *, uint64_t (*)(uint64_t, unint64_t)))v102)(v355, v370);
          v109 = v366;
          v143 = v364;
          goto LABEL_45;
        }
        v109 = v366;
        v280 = v355;
        v141 = (uint64_t)v370;
        v281 = (*(uint64_t (**)(uint64_t, uint64_t))(v366 + 120))((uint64_t)v370, v366);
        ((void (*)(char *, uint64_t))v102)(v280, v141);
        v143 = v364;
        if (v281 >= v372)
        {
LABEL_45:
          v163 = v137(v141, v109);
          ((void (*)(char *, uint64_t, uint64_t))v101)(v144, v143, v141);
          if (v163 >= 65)
          {
            v164 = v109;
            ((void (*)(char *, uint64_t))v102)(v144, v141);
            v165 = v346;
            ((void (*)(char *, uint64_t, uint64_t))v101)(v346, v143, v141);
LABEL_47:
            v372 = 0x7FFFFFFFFFFFFFFFLL;
            v166 = v367(v141, v164);
            v167 = v137(v141, v164);
            if ((v166 & 1) != 0)
            {
              if (v167 > 64)
              {
                v170 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v164 + 96);
                v171 = lazy protocol witness table accessor for type Int and conformance Int(v167, v168, v169);
                v4 = (uint64_t)v363;
                v170(&v372, &type metadata for Int, v171, v141, v164);
                v172 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v365 + 16))(v4, v165, v141);
                ((void (*)(uint64_t, uint64_t))v102)(v4, v141);
                v173 = (uint64_t)v165;
                goto LABEL_108;
              }
            }
            else if (v167 > 63)
            {
              v371 = 0x7FFFFFFFFFFFFFFFLL;
              v4 = (uint64_t)v363;
              v238 = (*(uint64_t (**)(char *, char *, uint64_t))(v368 + 32))(v363, v165, v141);
              v239 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v164 + 96);
              v242 = lazy protocol witness table accessor for type Int and conformance Int(v238, v240, v241);
              v243 = v340;
              v239(&v371, &type metadata for Int, v242, v141, v164);
              v172 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v365 + 16))(v243, v4, v141);
              ((void (*)(char *, uint64_t))v102)(v243, v141);
              v173 = v4;
LABEL_108:
              ((void (*)(uint64_t, uint64_t))v102)(v173, v141);
              if ((v172 & 1) == 0)
                goto LABEL_109;
LABEL_124:
              v370 = (uint64_t (*)(_QWORD, _QWORD))v141;
              v355 = v102;
              ((void (*)(uint64_t, uint64_t))v102)(v364, v141);
              goto LABEL_169;
            }
            v204 = v363;
            (*(void (**)(char *, char *, uint64_t))(v368 + 32))(v363, v165, v141);
            (*(void (**)(uint64_t, uint64_t))(v164 + 120))(v141, v164);
            v205 = v204;
LABEL_95:
            ((void (*)(char *, uint64_t))v102)(v205, v141);
LABEL_109:
            v244 = (*(uint64_t (**)(uint64_t, uint64_t))(v164 + 120))(v141, v164);
            ((void (*)(uint64_t, uint64_t))v102)(v143, v141);
            v231 = __OFSUB__(0, v244);
            v230 = -v244;
            if (!v231)
              return v230;
            __break(1u);
            goto LABEL_112;
          }
          v198 = v137(v141, v109);
          ((void (*)(char *, uint64_t))v102)(v144, v141);
          if (v198 == 64)
          {
            v164 = v109;
            v199 = v367(v141, v109);
            v165 = v346;
            ((void (*)(char *, uint64_t, uint64_t))v101)(v346, v143, v141);
            if ((v199 & 1) == 0)
              goto LABEL_47;
          }
          else
          {
            v164 = v109;
            v165 = v346;
            ((void (*)(char *, uint64_t, uint64_t))v101)(v346, v143, v141);
          }
          v205 = v165;
          goto LABEL_95;
        }
      }
      v355 = v102;
      ((void (*)(uint64_t, uint64_t (*)(uint64_t, unint64_t)))v102)(v364, v370);
      goto LABEL_169;
    }
    v127 = v365;
    v104(v370, (uint64_t)v369, v4);
    v128 = v367;
    v129 = v367(v4, v101);
    v130 = v368;
    v131 = *(void (**)(char *, uint64_t, uint64_t))(v368 + 16);
    v131(v50, v127, v4);
    v132 = (v129 & 1) != 0 && (*(uint64_t (**)(uint64_t, uint64_t))(v101 + 128))(v4, v101) > 64;
    v154 = *(void (**)(char *, uint64_t))(v130 + 8);
    v154(v50, v4);
    v155 = v360;
    v131(v360, v365, v4);
    if (v132)
    {
      v355 = (char *)v154;
      v372 = 0x8000000000000000;
      if ((v128(v4, v101) & 1) != 0)
      {
        v156 = *(uint64_t (**)(uint64_t, uint64_t))(v101 + 128);
        v157 = v360;
        v158 = v156(v4, v101);
        v141 = v4;
        if (v158 >= 64)
        {
          v276 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v101 + 96);
          v277 = lazy protocol witness table accessor for type Int and conformance Int(v158, v159, v160);
          v278 = v363;
          v276(&v372, &type metadata for Int, v277, v141, v101);
          v279 = (*((uint64_t (**)(char *, char *, uint64_t, char *))v102 + 2))(v157, v278, v141, v102);
          v137 = (uint64_t (*)(uint64_t, uint64_t))v355;
          ((void (*)(char *, uint64_t))v355)(v278, v141);
          v137((uint64_t)v157, v141);
          v162 = v365;
          v4 = (uint64_t)v348;
          if ((v279 & 1) != 0)
          {
LABEL_126:
            v370 = (uint64_t (*)(_QWORD, _QWORD))v141;
            goto LABEL_167;
          }
        }
        else
        {
          v161 = (*(uint64_t (**)(uint64_t, uint64_t))(v101 + 120))(v4, v101);
          v137 = (uint64_t (*)(uint64_t, uint64_t))v355;
          ((void (*)(char *, uint64_t))v355)(v157, v4);
          v162 = v365;
          v4 = (uint64_t)v348;
          if (v161 < v372)
            goto LABEL_126;
        }
LABEL_52:
        v174 = v156(v141, v101);
        v175 = v341;
        v131(v341, v162, v141);
        if (v174 >= 65)
        {
          v137((uint64_t)v175, v141);
          v131((char *)v4, v162, v141);
LABEL_54:
          v372 = 0x7FFFFFFFFFFFFFFFLL;
          v176 = v367(v141, v101);
          v177 = v156(v141, v101);
          if ((v176 & 1) != 0)
          {
            if (v177 > 64)
            {
              v180 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v101 + 96);
              v181 = lazy protocol witness table accessor for type Int and conformance Int(v177, v178, v179);
              v182 = v363;
              v180(&v372, &type metadata for Int, v181, v141, v101);
              v183 = (*((uint64_t (**)(char *, uint64_t, uint64_t, char *))v102 + 2))(v182, v4, v141, v102);
              v137((uint64_t)v182, v141);
              v184 = v4;
LABEL_113:
              v137(v184, v141);
              v162 = v365;
              if ((v183 & 1) == 0)
                goto LABEL_114;
              v370 = (uint64_t (*)(_QWORD, _QWORD))v141;
              v355 = (char *)v137;
LABEL_167:
              v364 = v162;
              goto LABEL_168;
            }
          }
          else if (v177 > 63)
          {
LABEL_112:
            v371 = 0x7FFFFFFFFFFFFFFFLL;
            v245 = v363;
            v246 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v368 + 32))(v363, v4, v141);
            v247 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v101 + 96);
            v250 = lazy protocol witness table accessor for type Int and conformance Int(v246, v248, v249);
            v251 = v340;
            v247(&v371, &type metadata for Int, v250, v141, v101);
            v183 = (*((uint64_t (**)(char *, char *, uint64_t, char *))v102 + 2))(v251, v245, v141, v102);
            v137((uint64_t)v251, v141);
            v184 = (uint64_t)v245;
            goto LABEL_113;
          }
          v206 = v363;
          (*(void (**)(char *, uint64_t, uint64_t))(v368 + 32))(v363, v4, v141);
          (*(void (**)(uint64_t, uint64_t))(v101 + 120))(v141, v101);
          v137((uint64_t)v206, v141);
          v162 = v365;
LABEL_114:
          v230 = (*(uint64_t (**)(uint64_t, uint64_t))(v101 + 120))(v141, v101);
          v137(v162, v141);
          return v230;
        }
        v200 = v156(v141, v101);
        v137((uint64_t)v175, v141);
        if (v200 == 64)
        {
          v201 = v367(v141, v101);
          v131((char *)v4, v162, v141);
          if ((v201 & 1) == 0)
            goto LABEL_54;
        }
        else
        {
          v131((char *)v4, v162, v141);
        }
        v137(v4, v141);
        goto LABEL_114;
      }
      v215 = v128(v4, v101);
      v156 = *(uint64_t (**)(uint64_t, uint64_t))(v101 + 128);
      v370 = (uint64_t (*)(_QWORD, _QWORD))v4;
      v216 = v156(v4, v101);
      if ((v215 & 1) != 0)
      {
        if (v216 > 64)
        {
          v219 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v101 + 96);
          v220 = lazy protocol witness table accessor for type Int and conformance Int(v216, v217, v218);
          v221 = v363;
          v141 = (uint64_t)v370;
          v219(&v372, &type metadata for Int, v220, (uint64_t)v370, v101);
          v222 = v360;
          v223 = (*((uint64_t (**)(char *, char *, uint64_t, char *))v102 + 2))(v360, v221, v141, v102);
          v137 = (uint64_t (*)(uint64_t, uint64_t))v355;
          ((void (*)(char *, uint64_t))v355)(v221, v141);
          v137((uint64_t)v222, v141);
          v162 = v365;
          v4 = (uint64_t)v348;
          if ((v223 & 1) != 0)
            goto LABEL_167;
          goto LABEL_52;
        }
        v302 = v361;
        v303 = (uint64_t)v362;
        v304 = (uint64_t)v370;
        v305 = swift_getAssociatedConformanceWitness((uint64_t)v362, (uint64_t)v370, v361, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
        (*(void (**)(void *, uint64_t, uint64_t, unint64_t))(v305 + 8))(&unk_1816B7DA8, 256, v302, v305);
        v306 = v363;
        v307 = v27;
        v141 = v304;
        (*(void (**)(char *, uint64_t, uint64_t))(v303 + 24))(v307, v304, v303);
        v308 = v360;
        LOBYTE(v302) = (*((uint64_t (**)(char *, char *, uint64_t, char *))v102 + 2))(v360, v306, v304, v102);
        v309 = (void (*)(char *, uint64_t))v355;
        ((void (*)(char *, uint64_t))v355)(v306, v304);
        v310 = v339;
        (*(void (**)(char *, char *, uint64_t))(v368 + 32))(v339, v308, v141);
        if ((v302 & 1) != 0)
        {
          v309(v310, v141);
          v364 = v365;
          goto LABEL_168;
        }
        v311 = v372;
        v312 = (*(uint64_t (**)(uint64_t, uint64_t))(v101 + 120))(v141, v101);
        v309(v310, v141);
        v284 = v312 < v311;
        v137 = (uint64_t (*)(uint64_t, uint64_t))v309;
LABEL_145:
        v162 = v365;
        v4 = (uint64_t)v348;
        if (v284)
          goto LABEL_167;
        goto LABEL_52;
      }
      if (v216 < 64)
      {
        v282 = v360;
        v141 = (uint64_t)v370;
        v283 = (*(uint64_t (**)(uint64_t, uint64_t))(v101 + 120))((uint64_t)v370, v101);
        v137 = (uint64_t (*)(uint64_t, uint64_t))v355;
        ((void (*)(char *, uint64_t))v355)(v282, v141);
        v284 = v283 < v372;
        goto LABEL_145;
      }
      v141 = (uint64_t)v370;
      v137 = (uint64_t (*)(uint64_t, uint64_t))v355;
      ((void (*)(char *, uint64_t (*)(uint64_t, unint64_t)))v355)(v360, v370);
      v162 = v365;
    }
    else
    {
      v154(v155, v4);
      v156 = *(uint64_t (**)(uint64_t, uint64_t))(v101 + 128);
      v137 = (uint64_t (*)(uint64_t, uint64_t))v154;
      v162 = v365;
      v141 = v4;
    }
    v4 = (uint64_t)v348;
    goto LABEL_52;
  }
  v364 = v5;
  v72 = v23;
  v73 = swift_getAssociatedConformanceWitness((uint64_t)v23, v4, v24, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  v360 = *(char **)(v73 + 8);
  ((void (*)(void *, uint64_t, unint64_t, unint64_t))v360)(&unk_1816B7DA8, 256, v24, v73);
  v74 = (void (*)(char *, uint64_t, const char *))*((_QWORD *)v72 + 3);
  v74(v27, v4, v72);
  v75 = *(char **)(*(_QWORD *)(v366 + 32) + 8);
  v76 = (uint64_t (*)(uint64_t (*)(uint64_t, unint64_t), char *, uint64_t, char *))*((_QWORD *)v75 + 2);
  LODWORD(v365) = v76(v369, v63, v4, v75);
  v77 = *(void (**)(char *, uint64_t))(v368 + 8);
  v77(v63, v4);
  v345 = (char *)v73;
  ((void (*)(void *, uint64_t, unint64_t, unint64_t))v360)(&unk_1816B7DA8, 256, v24, v73);
  v78 = (uint64_t)v362;
  v341 = (char *)v74;
  v74(v27, v4, v362);
  v346 = v75;
  v348 = (uint64_t (*)(char *, char *, uint64_t, char *))v76;
  v79 = v76(v370, v63, v4, v75);
  v355 = (char *)v77;
  v77(v63, v4);
  if (((v365 ^ v79) & 1) == 0)
  {
    v111 = (uint64_t)v358;
    (*(void (**)(uint64_t (*)(uint64_t, unint64_t), uint64_t (*)(uint64_t, unint64_t), uint64_t))(*(_QWORD *)(v364 + 8) + 40))(v370, v369, v4);
    v112 = v366;
    v113 = v367(v4, v366);
    v114 = *(void (**)(char *, uint64_t, uint64_t))(v368 + 16);
    v115 = v342;
    v114(v342, v111, v4);
    if ((v113 & 1) != 0)
    {
      v361 = v24;
      v116 = *(uint64_t (**)(uint64_t, uint64_t))(v112 + 128);
      v117 = v116(v4, v112);
      v90 = v112;
      v87 = (void (*)(char *, uint64_t))v355;
      ((void (*)(char *, uint64_t))v355)(v115, v4);
      v118 = v354;
      v114(v354, v111, v4);
      if (v117 >= 65)
      {
        v372 = 0x8000000000000000;
        v119 = v367;
        if ((v367(v4, v90) & 1) != 0)
        {
          v120 = v116(v4, v90);
          v123 = v118;
          v92 = v349;
          v84 = v4;
          if (v120 >= 64)
          {
            v289 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v90 + 96);
            v290 = lazy protocol witness table accessor for type Int and conformance Int(v120, v121, v122);
            v291 = v363;
            v289(&v372, &type metadata for Int, v290, v84, v90);
            v292 = v348(v123, v291, v84, v346);
            v87 = (void (*)(char *, uint64_t))v355;
            ((void (*)(char *, uint64_t))v355)(v291, v84);
            v87(v123, v84);
            v125 = v367;
            v111 = (uint64_t)v358;
            v126 = v347;
            if ((v292 & 1) != 0)
              goto LABEL_138;
          }
          else
          {
            v124 = (*(uint64_t (**)(uint64_t, uint64_t))(v90 + 120))(v4, v90);
            v87 = (void (*)(char *, uint64_t))v355;
            ((void (*)(char *, uint64_t))v355)(v123, v4);
            v125 = v367;
            v111 = (uint64_t)v358;
            v126 = v347;
            if (v124 < v372)
              goto LABEL_138;
          }
LABEL_33:
          v145 = v116(v84, v90);
          v114(v126, v111, v84);
          if (v145 >= 65)
          {
            v87(v126, v84);
            v114(v92, v111, v84);
LABEL_35:
            v372 = 0x7FFFFFFFFFFFFFFFLL;
            v146 = v125(v84, v90);
            v147 = v116(v84, v90);
            if ((v146 & 1) != 0)
            {
              v133 = v363;
              if (v147 > 64)
              {
                v150 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v90 + 96);
                v151 = lazy protocol witness table accessor for type Int and conformance Int(v147, v148, v149);
                v150(&v372, &type metadata for Int, v151, v84, v90);
                v152 = v348(v133, v92, v84, v346);
                v87(v133, v84);
                v153 = v92;
                goto LABEL_105;
              }
            }
            else
            {
              v133 = v363;
              if (v147 > 63)
              {
LABEL_104:
                v371 = 0x7FFFFFFFFFFFFFFFLL;
                v232 = (*(uint64_t (**)(char *, char *, uint64_t))(v368 + 32))(v133, v92, v84);
                v233 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v90 + 96);
                v236 = lazy protocol witness table accessor for type Int and conformance Int(v232, v234, v235);
                v237 = v340;
                v233(&v371, &type metadata for Int, v236, v84, v90);
                v152 = v348(v237, v133, v84, v346);
                v87(v237, v84);
                v153 = v133;
LABEL_105:
                v87(v153, v84);
                if ((v152 & 1) == 0)
                  goto LABEL_106;
LABEL_138:
                v370 = (uint64_t (*)(_QWORD, _QWORD))v84;
                v364 = v111;
LABEL_168:
                ((void (*)(uint64_t, uint64_t (*)(uint64_t, unint64_t)))v355)(v364, v370);
LABEL_169:
                _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Distance is not representable in Int", 36, 2, "Swift/Integers.swift", 20, 2, 0x64AuLL, 0);
              }
            }
            (*(void (**)(char *, char *, uint64_t))(v368 + 32))(v133, v92, v84);
            (*(void (**)(uint64_t, uint64_t))(v90 + 120))(v84, v90);
            v203 = v133;
LABEL_92:
            v87(v203, v84);
LABEL_106:
            v230 = (*(uint64_t (**)(uint64_t, uint64_t))(v90 + 120))(v84, v90);
            v87((char *)v111, v84);
            return v230;
          }
          v196 = v116(v84, v90);
          v87(v126, v84);
          if (v196 == 64)
          {
            v197 = v125(v84, v90);
            v114(v92, v111, v84);
            if ((v197 & 1) == 0)
              goto LABEL_35;
          }
          else
          {
            v114(v92, v111, v84);
          }
          v203 = v92;
          goto LABEL_92;
        }
        v264 = v119(v4, v90);
        v370 = (uint64_t (*)(_QWORD, _QWORD))v4;
        v265 = v116(v4, v90);
        if ((v264 & 1) != 0)
        {
          if (v265 > 64)
          {
            v268 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v90 + 96);
            v269 = lazy protocol witness table accessor for type Int and conformance Int(v265, v266, v267);
            v270 = v363;
            v84 = (uint64_t)v370;
            v268(&v372, &type metadata for Int, v269, (uint64_t)v370, v90);
            v271 = v348(v118, v270, v84, v346);
            v87 = (void (*)(char *, uint64_t))v355;
            ((void (*)(char *, uint64_t))v355)(v270, v84);
            v87(v118, v84);
            v125 = v367;
            v111 = (uint64_t)v358;
            v92 = v349;
            v126 = v347;
            if ((v271 & 1) == 0)
              goto LABEL_33;
            goto LABEL_165;
          }
          ((void (*)(void *, uint64_t))v360)(&unk_1816B7DA8, 256);
          v326 = v363;
          v327 = v27;
          v84 = (uint64_t)v370;
          ((void (*)(char *, uint64_t (*)(uint64_t, unint64_t), uint64_t))v341)(v327, v370, v78);
          v328 = v348(v118, v326, v84, v346);
          v87 = (void (*)(char *, uint64_t))v355;
          ((void (*)(char *, uint64_t))v355)(v326, v84);
          v329 = v333;
          (*(void (**)(char *, char *, uint64_t))(v368 + 32))(v333, v118, v84);
          v111 = (uint64_t)v358;
          if ((v328 & 1) != 0)
          {
            v87(v329, v84);
            v364 = v111;
            goto LABEL_168;
          }
          v330 = v372;
          v331 = (*(uint64_t (**)(uint64_t, uint64_t))(v90 + 120))(v84, v90);
          v87(v329, v84);
          v316 = v331 < v330;
          v125 = v367;
          v92 = v349;
LABEL_163:
          v126 = v347;
          if (!v316)
            goto LABEL_33;
LABEL_165:
          v364 = v111;
          goto LABEL_168;
        }
        v111 = (uint64_t)v358;
        v92 = v349;
        if (v265 < 64)
        {
          v314 = v354;
          v84 = (uint64_t)v370;
          v315 = (*(uint64_t (**)(uint64_t, uint64_t))(v90 + 120))((uint64_t)v370, v90);
          v87 = (void (*)(char *, uint64_t))v355;
          ((void (*)(char *, uint64_t))v355)(v314, v84);
          v316 = v315 < v372;
          v125 = v367;
          goto LABEL_163;
        }
        v87 = (void (*)(char *, uint64_t))v355;
        v84 = (uint64_t)v370;
        ((void (*)(char *, uint64_t (*)(uint64_t, unint64_t)))v355)(v354, v370);
        v125 = v367;
LABEL_32:
        v126 = v347;
        goto LABEL_33;
      }
    }
    else
    {
      v90 = v112;
      v87 = (void (*)(char *, uint64_t))v355;
      ((void (*)(char *, uint64_t))v355)(v115, v4);
      v118 = v354;
      v114(v354, v111, v4);
    }
    v87(v118, v4);
    v116 = *(uint64_t (**)(uint64_t, uint64_t))(v90 + 128);
    v125 = v367;
    v92 = v349;
    v84 = v4;
    goto LABEL_32;
  }
  v80 = v364;
  v81 = *(void (**)(uint64_t, uint64_t))(v364 + 56);
  v82 = v361;
  v81(v4, v364);
  v83 = v357;
  v81(v4, v80);
  v85 = (uint64_t)v352;
  v84 = (uint64_t)v353;
  (*(void (**)(uint64_t, char *, unint64_t *))(*(_QWORD *)(AssociatedConformanceWitness + 8) + 24))(v82, v83, v353);
  v86 = v359;
  v87 = *(void (**)(char *, uint64_t))(v359 + 8);
  v87(v83, v84);
  v87((char *)v82, v84);
  v88 = swift_getAssociatedConformanceWitness(v366, v4, v84, (uint64_t)&protocol requirements base descriptor for BinaryInteger, (uint64_t)&associated conformance descriptor for BinaryInteger.Numeric.Magnitude: BinaryInteger);
  v369 = *(uint64_t (**)(uint64_t, unint64_t))(v88 + 64);
  v89 = v369(v84, v88);
  v90 = *(_QWORD *)(v86 + 16);
  v91 = v343;
  ((void (*)(char *, uint64_t, uint64_t))v90)(v343, v85, v84);
  v370 = (uint64_t (*)(_QWORD, _QWORD))v4;
  if ((v89 & 1) == 0)
  {
    v87(v91, v84);
    v94 = v356;
    ((void (*)(char *, uint64_t, uint64_t))v90)(v356, v85, v84);
    v95 = v350;
    goto LABEL_20;
  }
  v92 = *(char **)(v88 + 128);
  v93 = ((uint64_t (*)(uint64_t, unint64_t))v92)(v84, v88);
  v87(v91, v84);
  v94 = v356;
  ((void (*)(char *, uint64_t, uint64_t))v90)(v356, v85, v84);
  v95 = v350;
  if (v93 < 65)
  {
LABEL_20:
    v87(v94, v84);
    v92 = *(char **)(v88 + 128);
    goto LABEL_21;
  }
  v372 = 0x8000000000000000;
  v96 = v369;
  if ((v369(v84, v88) & 1) != 0)
  {
    v97 = ((uint64_t (*)(uint64_t, unint64_t))v92)(v84, v88);
    if (v97 < 64)
    {
      v100 = (*(uint64_t (**)(uint64_t, unint64_t))(v88 + 120))(v84, v88);
      goto LABEL_151;
    }
    v368 = *(_QWORD *)(v88 + 96);
    v285 = lazy protocol witness table accessor for type Int and conformance Int(v97, v98, v99);
    v286 = v94;
    v287 = v361;
    ((void (*)(int64_t *, ValueMetadata *, unint64_t, uint64_t, unint64_t))v368)(&v372, &type metadata for Int, v285, v84, v88);
    v288 = swift_getAssociatedConformanceWitness(v364, (uint64_t)v370, v84, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Comparable);
    v262 = (*(uint64_t (**)(char *, uint64_t, uint64_t, unint64_t))(v288 + 16))(v286, v287, v84, v288);
    v87((char *)v287, v84);
    v263 = v286;
    goto LABEL_135;
  }
  v253 = v96(v84, v88);
  v254 = ((uint64_t (*)(uint64_t, unint64_t))v92)(v84, v88);
  if ((v253 & 1) == 0)
  {
    if (v254 < 64)
    {
      v94 = v356;
      v100 = (*(uint64_t (**)(uint64_t, unint64_t))(v88 + 120))(v84, v88);
LABEL_151:
      v313 = v100;
      v87(v94, v84);
      v133 = (char *)v369;
      if (v313 < v372)
        goto LABEL_159;
      goto LABEL_22;
    }
    v87(v356, v84);
LABEL_21:
    v133 = (char *)v369;
    goto LABEL_22;
  }
  if (v254 > 64)
  {
    v257 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, uint64_t, unint64_t))(v88 + 96);
    v258 = lazy protocol witness table accessor for type Int and conformance Int(v254, v255, v256);
    v259 = v361;
    v257(&v372, &type metadata for Int, v258, v84, v88);
    v260 = swift_getAssociatedConformanceWitness(v364, (uint64_t)v370, v84, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Comparable);
    v261 = v356;
    v262 = (*(uint64_t (**)(char *, uint64_t, uint64_t, unint64_t))(v260 + 16))(v356, v259, v84, v260);
    v87((char *)v259, v84);
    v263 = v261;
LABEL_135:
    v87(v263, v84);
    v133 = (char *)v369;
    if ((v262 & 1) != 0)
      goto LABEL_159;
    goto LABEL_22;
  }
  v317 = v336;
  v318 = v335;
  v319 = swift_getAssociatedConformanceWitness((uint64_t)v336, v84, v335, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  v320 = v334;
  (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v319 + 8))(&unk_1816B7DA8, 256, v318, v319);
  (*((void (**)(char *, uint64_t, const char *))v317 + 3))(v320, v84, v317);
  v321 = swift_getAssociatedConformanceWitness(v364, (uint64_t)v370, v84, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Comparable);
  v322 = v361;
  LOBYTE(v318) = (*(uint64_t (**)(char *, unint64_t, uint64_t, unint64_t))(v321 + 16))(v356, v361, v84, v321);
  v87((char *)v322, v84);
  v323 = v337;
  (*(void (**)(char *, char *, uint64_t))(v359 + 32))(v337, v356, v84);
  if ((v318 & 1) != 0)
  {
    v355 = (char *)v87;
    v87(v323, v84);
    goto LABEL_160;
  }
  v324 = v372;
  v325 = (*(uint64_t (**)(uint64_t, unint64_t))(v88 + 120))(v84, v88);
  v87(v323, v84);
  v284 = v325 < v324;
  v133 = (char *)v369;
  if (v284)
    goto LABEL_159;
LABEL_22:
  v134 = ((uint64_t (*)(uint64_t, unint64_t))v92)(v84, v88);
  ((void (*)(char *, uint64_t, uint64_t))v90)(v95, v85, v84);
  if (v134 < 65)
  {
    v185 = ((uint64_t (*)(uint64_t, unint64_t))v92)(v84, v88);
    v87(v95, v84);
    if (v185 == 64)
    {
      v186 = ((uint64_t (*)(uint64_t, unint64_t))v133)(v84, v88);
      v111 = (uint64_t)v351;
      ((void (*)(char *, uint64_t, uint64_t))v90)(v351, v85, v84);
      if ((v186 & 1) == 0)
        goto LABEL_59;
    }
    else
    {
      v111 = (uint64_t)v351;
      ((void (*)(char *, uint64_t, uint64_t))v90)(v351, v85, v84);
    }
    v87((char *)v111, v84);
    goto LABEL_100;
  }
  v87(v95, v84);
  v111 = (uint64_t)v351;
  ((void (*)(char *, uint64_t, uint64_t))v90)(v351, v85, v84);
LABEL_59:
  v372 = 0x7FFFFFFFFFFFFFFFLL;
  v187 = ((uint64_t (*)(uint64_t, unint64_t))v133)(v84, v88);
  v188 = ((uint64_t (*)(uint64_t, unint64_t))v92)(v84, v88);
  if ((v187 & 1) != 0)
  {
    if (v188 > 64)
    {
      v133 = *(char **)(v88 + 96);
      v191 = lazy protocol witness table accessor for type Int and conformance Int(v188, v189, v190);
      v192 = v361;
      ((void (*)(int64_t *, ValueMetadata *, unint64_t, uint64_t, unint64_t))v133)(&v372, &type metadata for Int, v191, v84, v88);
      v193 = swift_getAssociatedConformanceWitness(v364, (uint64_t)v370, v84, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Comparable);
      v194 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v193 + 16))(v192, v111, v84, v193);
      v87((char *)v192, v84);
      v195 = v111;
      goto LABEL_99;
    }
  }
  else if (v188 > 63)
  {
    v371 = 0x7FFFFFFFFFFFFFFFLL;
    v224 = v361;
    v225 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v359 + 32))(v361, v111, v84);
    v133 = *(char **)(v88 + 96);
    v228 = lazy protocol witness table accessor for type Int and conformance Int(v225, v226, v227);
    v111 = (uint64_t)v357;
    ((void (*)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, unint64_t))v133)(&v371, &type metadata for Int, v228, v84, v88);
    v229 = swift_getAssociatedConformanceWitness(v364, (uint64_t)v370, v84, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Comparable);
    v194 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v229 + 16))(v111, v224, v84, v229);
    v87((char *)v111, v84);
    v195 = v224;
LABEL_99:
    v87((char *)v195, v84);
    if ((v194 & 1) == 0)
      goto LABEL_100;
LABEL_159:
    v355 = (char *)v87;
LABEL_160:
    v370 = (uint64_t (*)(_QWORD, _QWORD))v84;
    v364 = v85;
    goto LABEL_168;
  }
  v202 = v361;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v359 + 32))(v361, v111, v84);
  v133 = (char *)(*(uint64_t (**)(uint64_t, unint64_t))(v88 + 120))(v84, v88);
  v87((char *)v202, v84);
  if (v372 < (uint64_t)v133)
    goto LABEL_159;
LABEL_100:
  v230 = (*(uint64_t (**)(uint64_t, unint64_t))(v88 + 120))(v84, v88);
  v87((char *)v85, v84);
  if ((v365 & 1) == 0)
  {
    v231 = __OFSUB__(0, v230);
    v230 = -v230;
    if (v231)
    {
      __break(1u);
      goto LABEL_104;
    }
  }
  return v230;
}

uint64_t SignedInteger<>.init<A>(exactly:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t (*v53)(uint64_t, uint64_t);
  uint64_t (*v54)(_QWORD, _QWORD);
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t (*v58)(uint64_t, uint64_t);
  char *v59;
  uint64_t (*v60)(uint64_t, uint64_t);
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t (*v72)(uint64_t, char *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  char v75;
  char *v76;
  void (*v77)(char *, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t (*v84)(uint64_t, uint64_t);
  uint64_t (*v85)(uint64_t, uint64_t);
  uint64_t v86;
  char *v87;
  char *v88;
  void (*v89)(char *, uint64_t, uint64_t);
  unsigned int (*v90)(uint64_t, uint64_t);
  char *v91;
  uint64_t (*v92)(uint64_t, uint64_t);
  int v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char v99;
  void (*v100)(char *, uint64_t);
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  char *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  char *v116;
  uint64_t (*v117)(char *, char *, uint64_t);
  char *v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char v126;
  void (*v127)(char *, uint64_t);
  unint64_t v128;
  const char *v129;
  unint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  void (*v134)(char *, uint64_t);
  void (*v135)(char *, char *, uint64_t);
  char *v136;
  char *v137;
  void (*v138)(uint64_t, uint64_t);
  const char *v139;
  unint64_t v140;
  unint64_t v141;
  char *v142;
  char *v143;
  char *v144;
  char *v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  char *v150;
  void (*v151)(char *, uint64_t);
  char *v152;
  void (*v153)(char *, uint64_t);
  uint64_t v154;
  char *v155;
  char v156;
  uint64_t v157;
  char *v158;
  char *v159;
  const char *v160;
  unint64_t v161;
  unint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  void (*v167)(char *, uint64_t);
  char *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  unint64_t v172;
  const char *v173;
  unint64_t AssociatedConformanceWitness;
  char *v175;
  char *v176;
  uint64_t v177;
  void (*v178)(char *, uint64_t);
  void (*v179)(char *, char *, uint64_t);
  char *v180;
  uint64_t v181;
  char *v182;
  uint64_t (*v183)(char *, char *, uint64_t);
  char *v184;
  char v185;
  void (*v186)(char *, uint64_t);
  char *v187;
  char v188;
  void (*v189)(char *, uint64_t);
  char *v190;
  char *v191;
  char *v192;
  uint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  char *v198;
  char *v199;
  char *v200;
  unint64_t v201;
  const char *v202;
  char *v203;
  unint64_t AssociatedTypeWitness;
  const char *v205;
  char *v206;
  uint64_t v207;
  char *v208;
  char *v209;
  char *v210;
  char *v211;
  uint64_t (*v212)(uint64_t, uint64_t);
  uint64_t (*v213)(_QWORD, _QWORD);
  uint64_t v214;
  void (*v215)(char *, uint64_t, uint64_t);
  uint64_t v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  void (*v220)(char *, uint64_t);
  char *v221;
  uint64_t v222;

  v219 = a4;
  v221 = a1;
  v214 = a6;
  v217 = *(_QWORD *)(a4 + 8);
  v205 = *(const char **)(*(_QWORD *)(v217 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v205, a2, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v203 = (char *)&v191 - v9;
  v202 = *(const char **)(*(_QWORD *)(a5 + 24) + 16);
  v201 = swift_getAssociatedTypeWitness(0, v202, a3, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v10 = MEMORY[0x1E0C80A78](v201);
  v200 = (char *)&v191 - v11;
  v213 = (uint64_t (*)(_QWORD, _QWORD))a2;
  v216 = *(_QWORD *)(a2 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v199 = (char *)&v191 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  v198 = (char *)&v191 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v209 = (char *)&v191 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v194 = (char *)&v191 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v195 = (char *)&v191 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v208 = (char *)&v191 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v206 = (char *)&v191 - v25;
  v26 = *(_QWORD *)(a3 - 8);
  v27 = MEMORY[0x1E0C80A78](v24);
  v196 = (char *)&v191 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x1E0C80A78](v27);
  v197 = (char *)&v191 - v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v218 = (char *)&v191 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v211 = (char *)&v191 - v34;
  v35 = MEMORY[0x1E0C80A78](v33);
  v37 = (char *)&v191 - v36;
  v38 = MEMORY[0x1E0C80A78](v35);
  v40 = (char *)&v191 - v39;
  v41 = MEMORY[0x1E0C80A78](v38);
  v210 = (char *)&v191 - v42;
  v43 = MEMORY[0x1E0C80A78](v41);
  v45 = (char *)&v191 - v44;
  MEMORY[0x1E0C80A78](v43);
  v47 = (char *)&v191 - v46;
  v48 = a5;
  v212 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 64);
  v49 = v212(a3, a5);
  v50 = v26;
  v51 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 16);
  v51(v47, (uint64_t)v221, a3);
  v52 = v219;
  v207 = v50;
  v215 = v51;
  v222 = v48;
  if ((v49 & 1) == 0)
  {
    v77 = *(void (**)(char *, uint64_t))(v50 + 8);
    v77(v47, a3);
    v51(v45, (uint64_t)v221, a3);
    v61 = (uint64_t)v213;
    v56 = v45;
LABEL_10:
    v64 = a3;
    v77(v56, a3);
    v58 = *(uint64_t (**)(uint64_t, uint64_t))(v222 + 128);
    v79 = v217;
    goto LABEL_11;
  }
  v191 = v40;
  v192 = v37;
  v53 = *(uint64_t (**)(uint64_t, uint64_t))(v48 + 128);
  v193 = v53(a3, v48);
  v220 = *(void (**)(char *, uint64_t))(v50 + 8);
  v220(v47, a3);
  v54 = v213;
  v55 = (*(uint64_t (**)(_QWORD, uint64_t))(v52 + 56))(v213, v52);
  v51(v45, (uint64_t)v221, a3);
  v56 = v45;
  if (v55 >= v193)
  {
    v77 = v220;
    v61 = (uint64_t)v54;
    goto LABEL_10;
  }
  v57 = v52;
  v193 = (uint64_t)v45;
  v58 = v53;
  v59 = v206;
  (*(void (**)(uint64_t (*)(_QWORD, _QWORD), uint64_t))(v57 + 72))(v54, v57);
  v60 = v212;
  v61 = (uint64_t)v54;
  v62 = v212(a3, v222);
  v63 = v217;
  v64 = a3;
  if (((v62 ^ (*(unsigned int (**)(uint64_t, uint64_t))(v217 + 64))(v61, v217)) & 1) == 0)
  {
    v123 = v193;
    v124 = v58(v64, v222);
    if (v124 >= (*(uint64_t (**)(uint64_t, uint64_t))(v63 + 128))(v61, v63))
    {
      v154 = v222;
      v155 = v210;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v222 + 96))(v59, v61, v63, v64, v222);
      v156 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v154 + 32) + 8) + 16))(v123, v155, v64);
      v77 = v220;
      v220(v155, v64);
      v77((char *)v123, v64);
      v79 = v63;
      v80 = v214;
      if ((v156 & 1) != 0)
        goto LABEL_32;
      goto LABEL_11;
    }
    v125 = v208;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v63 + 96))(v123, v64, v222, v61, v63);
    v126 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v63 + 32) + 8) + 16))(v125, v59, v61);
    v127 = *(void (**)(char *, uint64_t))(v216 + 8);
    v127(v125, v61);
    v127(v59, v61);
    v79 = v63;
    v80 = v214;
    goto LABEL_44;
  }
  v65 = v222;
  v66 = v60(a3, v222);
  v67 = v58(a3, v65);
  v68 = (*(uint64_t (**)(uint64_t, uint64_t))(v63 + 128))(v61, v63);
  if ((v66 & 1) == 0)
  {
    if (v67 >= v68)
    {
      v172 = AssociatedTypeWitness;
      v173 = v205;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v205, v61, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v175 = v203;
      (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, v172, AssociatedConformanceWitness);
      v176 = v208;
      (*((void (**)(char *, uint64_t, const char *))v173 + 3))(v175, v61, v173);
      v79 = v217;
      LOBYTE(v172) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v217 + 32) + 8)
                                                                        + 40))(v59, v176, v61);
      v177 = v216;
      v178 = *(void (**)(char *, uint64_t))(v216 + 8);
      v178(v176, v61);
      (*(void (**)(char *, uint64_t, uint64_t))(v207 + 32))(v192, v193, v64);
      v179 = *(void (**)(char *, char *, uint64_t))(v177 + 32);
      v180 = v194;
      v179(v194, v59, v61);
      v80 = v214;
      v77 = v220;
      if ((v172 & 1) != 0)
      {
        v181 = v222;
        v182 = v210;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v222 + 96))(v180, v61, v79, v64, v222);
        v183 = *(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v181 + 32) + 8) + 16);
        v184 = v192;
        v185 = v183(v192, v182, v64);
        v77(v182, v64);
        v77(v184, v64);
        if ((v185 & 1) != 0)
          goto LABEL_32;
      }
      else
      {
        v178(v180, v61);
        v77(v192, v64);
      }
      goto LABEL_11;
    }
    v79 = v217;
    v152 = v208;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v217 + 96))(v193, v64, v222, v61, v217);
    v126 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v79 + 32) + 8) + 16))(v152, v59, v61);
    v153 = *(void (**)(char *, uint64_t))(v216 + 8);
    v153(v152, v61);
    v153(v59, v61);
    v80 = v214;
LABEL_44:
    v77 = v220;
    if ((v126 & 1) != 0)
      goto LABEL_32;
    goto LABEL_11;
  }
  if (v68 >= v67)
  {
    v160 = v202;
    v161 = v201;
    v162 = swift_getAssociatedConformanceWitness((uint64_t)v202, a3, v201, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    v163 = v200;
    (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v162 + 8))(&unk_1816B7DA8, 256, v161, v162);
    v164 = v210;
    (*((void (**)(char *, uint64_t, const char *))v160 + 3))(v163, a3, v160);
    v165 = a3;
    v166 = v193;
    LOBYTE(v161) = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v222 + 32) + 8) + 16))(v193, v164, a3);
    v167 = v220;
    v220(v164, v165);
    v168 = v191;
    v169 = v166;
    v64 = v165;
    (*(void (**)(char *, uint64_t, uint64_t))(v207 + 32))(v191, v169, v165);
    v170 = v216;
    v171 = v195;
    (*(void (**)(char *, char *, uint64_t))(v216 + 32))(v195, v59, v61);
    v80 = v214;
    if ((v161 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t))(v170 + 8))(v171, v61);
      v167(v168, v64);
      v167(v221, v64);
      goto LABEL_33;
    }
    v186 = v167;
    v79 = v217;
    v187 = v208;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v217 + 96))(v168, v64, v222, v61, v217);
    v188 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v79 + 32) + 8) + 16))(v187, v171, v61);
    v189 = *(void (**)(char *, uint64_t))(v170 + 8);
    v190 = v187;
    v80 = v214;
    v189(v190, v61);
    v189(v171, v61);
    v77 = v186;
    if ((v188 & 1) != 0)
      goto LABEL_32;
  }
  else
  {
    v69 = v222;
    v70 = v210;
    v71 = v217;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v222 + 96))(v59, v61, v217, v64, v222);
    v72 = *(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v69 + 32) + 8) + 16);
    v73 = v64;
    v74 = v193;
    v75 = v72(v193, v70, v73);
    v76 = v70;
    v77 = v220;
    v220(v76, v73);
    v78 = v74;
    v64 = v73;
    v79 = v71;
    v77((char *)v78, v64);
    v80 = v214;
    if ((v75 & 1) != 0)
      goto LABEL_32;
  }
LABEL_11:
  v220 = v77;
  v81 = v221;
  v82 = v58(v64, v222);
  v83 = v219;
  v84 = *(uint64_t (**)(uint64_t, uint64_t))(v219 + 56);
  v85 = v58;
  v86 = v84(v61, v219);
  v87 = v211;
  v88 = v81;
  v89 = v215;
  v215(v211, (uint64_t)v88, v64);
  if (v86 < v82)
  {
    v213 = v85;
    v220(v87, v64);
    v89(v218, (uint64_t)v221, v64);
    v90 = (unsigned int (*)(uint64_t, uint64_t))v212;
    goto LABEL_13;
  }
  v102 = v221;
  v103 = v222;
  v104 = v85(v64, v222);
  v220(v87, v64);
  if (v104 != v84(v61, v83))
  {
    v106 = v218;
    v215(v218, (uint64_t)v102, v64);
    v79 = v217;
LABEL_23:
    v220(v106, v64);
LABEL_24:
    v80 = v214;
LABEL_34:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v79 + 96))(v221, v64, v222, v61, v79);
    v121 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v216 + 56))(v80, v121, 1, v61);
  }
  v213 = v85;
  v90 = (unsigned int (*)(uint64_t, uint64_t))v212;
  v105 = v212(v64, v103);
  v106 = v218;
  v215(v218, (uint64_t)v102, v64);
  v79 = v217;
  if ((v105 & 1) != 0)
    goto LABEL_23;
LABEL_13:
  v91 = v209;
  (*(void (**)(uint64_t))(v219 + 64))(v61);
  v92 = *(uint64_t (**)(uint64_t, uint64_t))(v79 + 64);
  v93 = v92(v61, v79);
  if (((v93 ^ v90(v64, v222)) & 1) == 0)
  {
    v107 = (*(uint64_t (**)(uint64_t, uint64_t))(v79 + 128))(v61, v79);
    v108 = v218;
    v109 = v91;
    if (v107 >= v213(v64, v222))
    {
      v119 = v210;
      (*(void (**)(char *, char *, uint64_t))(v207 + 32))(v210, v108, v64);
      v120 = v208;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v79 + 96))(v119, v64, v222, v61, v79);
      v99 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v79 + 32) + 8) + 16))(v91, v120, v61);
      v100 = *(void (**)(char *, uint64_t))(v216 + 8);
      v100(v120, v61);
      v101 = v91;
      goto LABEL_30;
    }
    v110 = v222;
    v111 = v210;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v222 + 96))(v109, v61, v79, v64, v222);
    v99 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v110 + 32) + 8) + 16))(v111, v108, v64);
    v112 = v111;
    v113 = v64;
    v114 = v108;
    goto LABEL_27;
  }
  v94 = v92(v61, v79);
  v95 = (*(uint64_t (**)(uint64_t, uint64_t))(v79 + 128))(v61, v79);
  v96 = v213(v64, v222);
  if ((v94 & 1) != 0)
  {
    if (v96 < v95)
    {
      v97 = v210;
      (*(void (**)(char *, char *, uint64_t))(v207 + 32))(v210, v218, v64);
      v98 = v208;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v79 + 96))(v97, v64, v222, v61, v79);
      v99 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v79 + 32) + 8) + 16))(v91, v98, v61);
      v100 = *(void (**)(char *, uint64_t))(v216 + 8);
      v100(v98, v61);
      v101 = v91;
LABEL_30:
      v100(v101, v61);
      v77 = v220;
      goto LABEL_31;
    }
    v128 = AssociatedTypeWitness;
    v129 = v205;
    v130 = swift_getAssociatedConformanceWitness((uint64_t)v205, v61, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    v131 = v203;
    (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v130 + 8))(&unk_1816B7DA8, 256, v128, v130);
    v132 = v208;
    (*((void (**)(char *, uint64_t, const char *))v129 + 3))(v131, v61, v129);
    LOBYTE(v128) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v79 + 32) + 8) + 16))(v91, v132, v61);
    v133 = v216;
    v134 = *(void (**)(char *, uint64_t))(v216 + 8);
    v134(v132, v61);
    v135 = *(void (**)(char *, char *, uint64_t))(v133 + 32);
    v136 = v198;
    v135(v198, v91, v61);
    v137 = v197;
    (*(void (**)(char *, char *, uint64_t))(v207 + 32))(v197, v218, v64);
    if ((v128 & 1) != 0)
    {
      v138 = (void (*)(uint64_t, uint64_t))v220;
      v220(v137, v64);
      v134(v136, v61);
      v80 = v214;
      v138((uint64_t)v221, v64);
      goto LABEL_33;
    }
    v157 = v222;
    v158 = v136;
    v159 = v210;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v222 + 96))(v158, v61, v79, v64, v222);
    v99 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v157 + 32) + 8) + 16))(v159, v137, v64);
    v77 = v220;
    v220(v159, v64);
    v118 = v137;
LABEL_28:
    v77(v118, v64);
    goto LABEL_31;
  }
  if (v95 < v96)
  {
    v115 = v222;
    v116 = v210;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v222 + 96))(v91, v61, v79, v64, v222);
    v117 = *(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v115 + 32) + 8) + 16);
    v114 = v218;
    v99 = v117(v116, v218, v64);
    v112 = v116;
    v113 = v64;
LABEL_27:
    v77 = v220;
    v220(v112, v113);
    v118 = v114;
    goto LABEL_28;
  }
  v139 = v202;
  v140 = v201;
  v141 = swift_getAssociatedConformanceWitness((uint64_t)v202, v64, v201, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  v142 = v200;
  (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v141 + 8))(&unk_1816B7DA8, 256, v140, v141);
  v143 = v210;
  (*((void (**)(char *, uint64_t, const char *))v139 + 3))(v142, v64, v139);
  v144 = v218;
  LOBYTE(v140) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v222 + 32) + 8) + 40))(v218, v143, v64);
  v145 = v143;
  v77 = v220;
  v220(v145, v64);
  v146 = v216;
  v147 = v199;
  (*(void (**)(char *, char *, uint64_t))(v216 + 32))(v199, v91, v61);
  v148 = v196;
  (*(void (**)(char *, char *, uint64_t))(v207 + 32))(v196, v144, v64);
  if ((v140 & 1) == 0)
  {
    v77(v148, v64);
    (*(void (**)(char *, uint64_t))(v146 + 8))(v147, v61);
    goto LABEL_24;
  }
  v149 = v146;
  v150 = v208;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v79 + 96))(v148, v64, v222, v61, v79);
  v99 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v79 + 32) + 8) + 16))(v147, v150, v61);
  v151 = *(void (**)(char *, uint64_t))(v149 + 8);
  v151(v150, v61);
  v151(v147, v61);
LABEL_31:
  v80 = v214;
  if ((v99 & 1) == 0)
    goto LABEL_34;
LABEL_32:
  v77(v221, v64);
LABEL_33:
  v121 = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v216 + 56))(v80, v121, 1, v61);
}

uint64_t BinaryInteger.advanced(by:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v23;
  void (*v24)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v25;
  ValueMetadata *v26;
  void (*v27)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v7 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 64))(v11, v10);
  if ((v12 & 1) == 0)
  {
    if (a1 < 0)
    {
      v30 = -a1;
      v27 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a3 + 88);
      v28 = lazy protocol witness table accessor for type UInt and conformance UInt(v12, v13, v14);
      v27(&v30, &type metadata for UInt, v28, a2, a3);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) + 40))(v3, v9, a2);
      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, a2);
    }
    v30 = a1;
    v24 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a3 + 88);
    v25 = lazy protocol witness table accessor for type UInt and conformance UInt(v12, v13, v14);
    v26 = &type metadata for UInt;
LABEL_8:
    v24(&v30, v26, v25, a2, a3);
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) + 24))(v3, v9, a2);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, a2);
  }
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 128))(a2, a3);
  if (v15 > 63)
  {
    v30 = a1;
    v24 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a3 + 96);
    v25 = lazy protocol witness table accessor for type Int and conformance Int(v15, v16, v17);
    v26 = &type metadata for Int;
    goto LABEL_8;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v3, a2);
  v18 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 120))(a2, a3);
  result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, a2);
  if (__OFADD__(v18, a1))
  {
    __break(1u);
  }
  else
  {
    v30 = v18 + a1;
    v22 = *(uint64_t (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a3 + 88);
    v23 = lazy protocol witness table accessor for type Int and conformance Int(result, v20, v21);
    return v22(&v30, &type metadata for Int, v23, a2, a3);
  }
  return result;
}

uint64_t FixedWidthInteger.bitWidth.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

BOOL static BinaryInteger.!= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ((*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a4 + 16) + 8) + 8))() & 1) == 0;
}

BOOL static BinaryInteger.<= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 8) + 16))(a2, a1) & 1) == 0;
}

BOOL static BinaryInteger.>= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ((*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 8) + 16))() & 1) == 0;
}

uint64_t static BinaryInteger.> infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 8) + 16))(a2, a1) & 1;
}

uint64_t specialized FixedWidthInteger.multipliedFullWidth(by:)(_OWORD *a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  v5 = (a5 * (unsigned __int128)a2) >> 64;
  if (__CFADD__((a4 * (unsigned __int128)a2) >> 64, a5 * a2))
    ++v5;
  if (__CFADD__((__PAIR128__(a5, a4) * a2) >> 64, a4 * a3))
    v6 = ((a4 * (unsigned __int128)a3) >> 64) + 1;
  else
    v6 = (a4 * (unsigned __int128)a3) >> 64;
  *a1 = __PAIR128__(a3, a2) * __PAIR128__(a5, a4);
  return v5 + a5 * a3 + v6;
}

uint64_t specialized FixedWidthInteger.multipliedFullWidth(by:)(_OWORD *a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  *a1 = __PAIR128__(a3, a2) * __PAIR128__(a5, a4);
  return (a5 >> 63) * a2
       + __CFADD__((a4 * (unsigned __int128)a2) >> 64, a5 * a2)
       + (((unint64_t)a5 * (unsigned __int128)a2) >> 64)
       + a5 * a3
       + a4 * (a3 >> 63)
       + __CFADD__((__PAIR128__(a5, a4) * a2) >> 64, a4 * a3)
       + ((a4 * (unsigned __int128)(unint64_t)a3) >> 64);
}

uint64_t FixedWidthInteger.multipliedFullWidth(by:)(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5)
{
  void (*v5)(_QWORD, _QWORD);
  void (*v6)(_QWORD, _QWORD);
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, unint64_t *, const char *);
  uint64_t v40;
  char *v41;
  void (*v42)(char *, unint64_t *, const char *);
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, unint64_t *, const char *);
  uint64_t v46;
  void (*v47)(void (*)(char *, unint64_t *, const char *), uint64_t, _QWORD *, uint64_t, uint64_t);
  _QWORD *v48;
  char *v49;
  char *v50;
  void (*v51)(char *, uint64_t);
  void (*v52)(char *, unint64_t *, const char *);
  uint64_t v53;
  void (*v54)(char *, unint64_t *, const char *);
  void (*v55)(void (*)(char *, unint64_t *, const char *), uint64_t, _QWORD *, uint64_t, uint64_t);
  void (*v56)(_QWORD, _QWORD);
  void (*v57)(char *, unint64_t *, const char *);
  void (*v58)(char *, unint64_t *, const char *);
  uint64_t v59;
  char *v60;
  char *v61;
  void (*v62)(char *, unint64_t *, const char *);
  void (*v63)(char *, unint64_t *, const char *);
  uint64_t v64;
  char *v65;
  void (*v66)(void (*)(char *, unint64_t *, const char *), void (*)(char *, unint64_t *, const char *), uint64_t, _QWORD *);
  void (*v67)(char *, unint64_t *, const char *);
  void (*v68)(char *, unint64_t *, const char *);
  uint64_t v69;
  uint64_t v70;
  void (*v71)(void (*)(char *, unint64_t *, const char *), uint64_t);
  void (*v72)(char *, unint64_t *, const char *);
  void (*v73)(char *, unint64_t *, const char *);
  void (*v74)(char *, unint64_t *, const char *);
  char *v75;
  char *v76;
  void (*v77)(char *, unint64_t *, const char *);
  uint64_t v78;
  void (*v79)(char *, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  void (*v85)(void (*)(char *, unint64_t *, const char *), uint64_t *, ValueMetadata *, unint64_t, uint64_t, _QWORD *);
  unint64_t v86;
  void (*v87)(char *, unint64_t *, const char *);
  uint64_t v88;
  char *v89;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(void (*)(char *, unint64_t *, const char *), void (*)(char *, unint64_t *, const char *), uint64_t, _QWORD *);
  void (*v94)(_QWORD, uint64_t, unint64_t);
  void (*v95)(char *, unint64_t *, const char *);
  void (*v96)(char *, unint64_t *, const char *);
  void (*v97)(char *, unint64_t *, const char *);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(void (*)(char *, unint64_t *, const char *), uint64_t, _QWORD *, uint64_t, uint64_t);
  char *v102;
  uint64_t v103;
  void (*v104)(char *, char *, uint64_t, _QWORD *);
  char *v105;
  void (*v106)(char *, unint64_t *, const char *);
  char *v107;
  uint64_t v108;
  uint64_t *v109;
  unint64_t AssociatedConformanceWitness;
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t *v114;
  uint64_t v115;
  _QWORD *v116;
  void (*v117)(char *, unint64_t *, const char *);
  uint64_t v118;

  v6 = v5;
  v100 = a2;
  v98 = a1;
  v115 = a5[1];
  v116 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(v115 + 24), a4, (uint64_t)&protocol requirements base descriptor for Numeric, associated type descriptor for Numeric.Magnitude);
  v103 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = v103;
  v11 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v99 = (uint64_t)&v91 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v106 = (void (*)(char *, unint64_t *, const char *))((char *)&v91 - v14);
  v15 = MEMORY[0x1E0C80A78](v13);
  v117 = (void (*)(char *, unint64_t *, const char *))((char *)&v91 - v16);
  v17 = MEMORY[0x1E0C80A78](v15);
  v109 = (uint64_t *)((char *)&v91 - v18);
  v19 = MEMORY[0x1E0C80A78](v17);
  v108 = (uint64_t)&v91 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v91 - v22;
  v112 = *(_QWORD *)(a4 - 8);
  v24 = MEMORY[0x1E0C80A78](v21);
  v97 = (void (*)(char *, unint64_t *, const char *))((char *)&v91
                                                                      - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  v26 = MEMORY[0x1E0C80A78](v24);
  v96 = (void (*)(char *, unint64_t *, const char *))((char *)&v91 - v27);
  v28 = MEMORY[0x1E0C80A78](v26);
  v95 = (void (*)(char *, unint64_t *, const char *))((char *)&v91 - v29);
  v30 = MEMORY[0x1E0C80A78](v28);
  v32 = (char *)&v91 - v31;
  v33 = MEMORY[0x1E0C80A78](v30);
  v113 = (char *)&v91 - v34;
  v35 = MEMORY[0x1E0C80A78](v33);
  v114 = (uint64_t *)((char *)&v91 - v36);
  v37 = MEMORY[0x1E0C80A78](v35);
  v39 = (void (*)(char *, unint64_t *, const char *))((char *)&v91 - v38);
  v105 = (char *)&v91 - v38;
  MEMORY[0x1E0C80A78](v37);
  v41 = (char *)&v91 - v40;
  v107 = (char *)&v91 - v40;
  v111 = v23;
  split #1 <A><A1>(_:) in FixedWidthInteger.multipliedFullWidth(by:)((void (*)(char *, unint64_t *, const char *))((char *)&v91 - v40), (uint64_t)v23, v6, a4, a4, (uint64_t)a5, (uint64_t)a5);
  v42 = v39;
  v43 = v108;
  split #1 <A><A1>(_:) in FixedWidthInteger.multipliedFullWidth(by:)(v42, v108, (void (*)(_QWORD, _QWORD))v116, a4, a4, (uint64_t)a5, (uint64_t)a5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)a5, a4, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for FixedWidthInteger, (uint64_t)&associated conformance descriptor for FixedWidthInteger.Numeric.Magnitude: FixedWidthInteger);
  v44 = AssociatedTypeWitness;
  (*(void (**)(char *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 232))(v23, v43, AssociatedTypeWitness, AssociatedConformanceWitness);
  v94 = *(void (**)(_QWORD, uint64_t, unint64_t))(v10 + 16);
  v45 = v117;
  v94(v117, v43, AssociatedTypeWitness);
  v46 = v115;
  v101 = *(void (**)(void (*)(char *, unint64_t *, const char *), uint64_t, _QWORD *, uint64_t, uint64_t))(v115 + 88);
  v47 = v101;
  v48 = (_QWORD *)swift_getAssociatedConformanceWitness(v115, a4, v44, (uint64_t)&protocol requirements base descriptor for BinaryInteger, (uint64_t)&associated conformance descriptor for BinaryInteger.Numeric.Magnitude: BinaryInteger);
  v116 = v48;
  v47(v45, v44, v48, a4, v46);
  v104 = (void (*)(char *, char *, uint64_t, _QWORD *))a5[29];
  v49 = v113;
  v50 = v32;
  v104(v41, v32, a4, a5);
  v51 = *(void (**)(char *, uint64_t))(v112 + 8);
  v51(v32, a4);
  v52 = v117;
  v53 = (uint64_t)v106;
  split #1 <A><A1>(_:) in FixedWidthInteger.multipliedFullWidth(by:)(v117, (uint64_t)v106, (void (*)(_QWORD, _QWORD))v109, a4, v44, (uint64_t)a5, AssociatedConformanceWitness);
  v103 = *(_QWORD *)(v103 + 8);
  ((void (*)(uint64_t, uint64_t))v103)(v53, v44);
  v102 = v50;
  v54 = v52;
  v55 = v101;
  v101(v54, v44, v48, a4, v46);
  v93 = (void (*)(void (*)(char *, unint64_t *, const char *), void (*)(char *, unint64_t *, const char *), uint64_t, _QWORD *))a5[10];
  v56 = (void (*)(_QWORD, _QWORD))v114;
  v93((void (*)(char *, unint64_t *, const char *))v114, (void (*)(char *, unint64_t *, const char *))v50, a4, a5);
  v51(v50, a4);
  v51(v49, a4);
  v57 = v117;
  v92 = v44;
  v94(v117, (uint64_t)v111, v44);
  v58 = v95;
  v59 = v115;
  v55(v57, v44, v116, a4, v115);
  v60 = v102;
  v61 = v105;
  v104((char *)v58, v105, a4, a5);
  v51((char *)v58, a4);
  v62 = v96;
  v63 = v117;
  split #1 <A><A1>(_:) in FixedWidthInteger.multipliedFullWidth(by:)(v96, (uint64_t)v117, v56, a4, a4, (uint64_t)a5, (uint64_t)a5);
  v51((char *)v62, a4);
  v64 = v92;
  v101(v63, v92, v116, a4, v59);
  v65 = v60;
  v66 = v93;
  v93((void (*)(char *, unint64_t *, const char *))v113, v58, a4, a5);
  v51((char *)v58, a4);
  v51(v65, a4);
  v104(v107, v61, a4, a5);
  v67 = v97;
  v68 = v117;
  split #1 <A><A1>(_:) in FixedWidthInteger.multipliedFullWidth(by:)(v97, (uint64_t)v117, (void (*)(_QWORD, _QWORD))v114, a4, a4, (uint64_t)a5, (uint64_t)a5);
  v69 = v64;
  v70 = v64;
  v71 = (void (*)(void (*)(char *, unint64_t *, const char *), uint64_t))v103;
  ((void (*)(void (*)(char *, unint64_t *, const char *), uint64_t))v103)(v68, v69);
  v66(v58, v67, a4, a5);
  v51((char *)v67, a4);
  v51((char *)v62, a4);
  v72 = v62;
  v73 = v62;
  v74 = v117;
  v75 = v113;
  split #1 <A><A1>(_:) in FixedWidthInteger.multipliedFullWidth(by:)(v72, (uint64_t)v117, (void (*)(_QWORD, _QWORD))v113, a4, a4, (uint64_t)a5, (uint64_t)a5);
  v71(v74, v70);
  v76 = v102;
  v66((void (*)(char *, unint64_t *, const char *))v102, v73, a4, a5);
  v51((char *)v73, a4);
  v51((char *)v58, a4);
  (*(void (**)(uint64_t, char *, uint64_t))(v112 + 16))(v98, v76, a4);
  v77 = v106;
  split #1 <A><A1>(_:) in FixedWidthInteger.multipliedFullWidth(by:)(v58, (uint64_t)v106, (void (*)(_QWORD, _QWORD))v75, a4, a4, (uint64_t)a5, (uint64_t)a5);
  v51((char *)v58, a4);
  v78 = (*(uint64_t (**)(uint64_t))(v115 + 128))(a4);
  v51(v76, a4);
  v51(v75, a4);
  v51((char *)v114, a4);
  v79 = (void (*)(char *, uint64_t))v103;
  ((void (*)(uint64_t, uint64_t))v103)(v108, v70);
  v51(v105, a4);
  v79(v111, v70);
  v80 = ((uint64_t (*)(char *, uint64_t))v51)(v107, a4);
  if (v78 >= 0)
    v83 = v78;
  else
    v83 = v78 + 1;
  v118 = v83 >> 1;
  v84 = v116;
  v85 = (void (*)(void (*)(char *, unint64_t *, const char *), uint64_t *, ValueMetadata *, unint64_t, uint64_t, _QWORD *))v116[32];
  v86 = lazy protocol witness table accessor for type Int and conformance Int(v80, v81, v82);
  v87 = v117;
  v85(v77, &v118, &type metadata for Int, v86, v70, v84);
  v79((char *)v77, v70);
  v88 = v99;
  v89 = (char *)v109;
  split #1 <A><A1>(_:) in FixedWidthInteger.multipliedFullWidth(by:)(v77, v99, (void (*)(_QWORD, _QWORD))v109, a4, v70, (uint64_t)a5, AssociatedConformanceWitness);
  v79((char *)v77, v70);
  v79(v89, v70);
  ((void (*)(void (*)(char *, unint64_t *, const char *), uint64_t, uint64_t, _QWORD *))v84[26])(v87, v88, v70, v84);
  v79((char *)v88, v70);
  return ((uint64_t (*)(void (*)(char *, unint64_t *, const char *), uint64_t))v79)(v87, v70);
}

uint64_t FixedWidthInteger.init(bigEndian:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return FixedWidthInteger.init(bigEndian:)(a1, a2, a3);
}

{
  (*(void (**)(uint64_t, uint64_t))(a3 + 192))(a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
}

uint64_t FixedWidthInteger.bigEndian.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 192))();
}

uint64_t static FixedWidthInteger.&>> infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a5, a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 208))(a5, a2, a3, a4);
}

{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a5, a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 208))(a5, a2, a3, a4);
}

uint64_t static FixedWidthInteger.&>>= infix(_:_:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v7 = *(_QWORD *)(a3 - 8);
  v8 = MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v18 - v12;
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v18 - v14;
  (*(void (**)(char *))(v7 + 16))(v10);
  (*(void (**)(char *, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(a4 + 8) + 96))(v10, a3, *(_QWORD *)(a4 + 8), a3, *(_QWORD *)(a4 + 8));
  (*(void (**)(char *, char *, uint64_t, uint64_t))(a4 + 200))(a1, v13, a3, a4);
  v16 = *(void (**)(char *, uint64_t))(v7 + 8);
  v16(a1, a3);
  v16(v13, a3);
  return (*(uint64_t (**)(char *, char *, uint64_t))(v7 + 32))(a1, v15, a3);
}

uint64_t static FixedWidthInteger.&>>= infix<A>(_:_:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v24;

  v11 = MEMORY[0x1E0C80A78](a1);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v11);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v24 - v19;
  (*(void (**)(char *))(v21 + 16))(v13);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 + 8) + 96))(v13, a4, a6, a3);
  (*(void (**)(char *, char *, uint64_t, uint64_t))(a5 + 200))(a1, v18, a3, a5);
  v22 = *(void (**)(char *, uint64_t))(v15 + 8);
  v22(a1, a3);
  v22(v18, a3);
  return (*(uint64_t (**)(char *, char *, uint64_t))(v15 + 32))(a1, v20, a3);
}

uint64_t static FixedWidthInteger.&<< infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a5, a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 224))(a5, a2, a3, a4);
}

{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a5, a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 224))(a5, a2, a3, a4);
}

uint64_t static FixedWidthInteger.&<<= infix(_:_:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v7 = *(_QWORD *)(a3 - 8);
  v8 = MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v18 - v12;
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v18 - v14;
  (*(void (**)(char *))(v7 + 16))(v10);
  (*(void (**)(char *, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(a4 + 8) + 96))(v10, a3, *(_QWORD *)(a4 + 8), a3, *(_QWORD *)(a4 + 8));
  (*(void (**)(char *, char *, uint64_t, uint64_t))(a4 + 216))(a1, v13, a3, a4);
  v16 = *(void (**)(char *, uint64_t))(v7 + 8);
  v16(a1, a3);
  v16(v13, a3);
  return (*(uint64_t (**)(char *, char *, uint64_t))(v7 + 32))(a1, v15, a3);
}

uint64_t static FixedWidthInteger.&<<= infix<A>(_:_:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v24;

  v11 = MEMORY[0x1E0C80A78](a1);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v11);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v24 - v19;
  (*(void (**)(char *))(v21 + 16))(v13);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 + 8) + 96))(v13, a4, a6, a3);
  (*(void (**)(char *, char *, uint64_t, uint64_t))(a5 + 216))(a1, v18, a3, a5);
  v22 = *(void (**)(char *, uint64_t))(v15 + 8);
  v22(a1, a3);
  v22(v18, a3);
  return (*(uint64_t (**)(char *, char *, uint64_t))(v15 + 32))(a1, v20, a3);
}

uint64_t split #1 <A><A1>(_:) in FixedWidthInteger.multipliedFullWidth(by:)(void (*a1)(char *, unint64_t *, const char *), uint64_t a2, void (*a3)(_QWORD, _QWORD), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  const char *v10;
  unint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(void (*)(_QWORD, _QWORD), uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  void (*v33)(_QWORD, _QWORD);
  unint64_t AssociatedConformanceWitness;
  void (*v35)(char *, uint64_t, uint64_t, unint64_t *, unint64_t);
  unint64_t v36;
  const char *v37;
  unint64_t v38;
  char *v39;
  char *v40;
  unint64_t v41;
  char *v42;
  void (*v43)(char *, unint64_t *);
  char *v44;
  char *v45;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  void (*v53)(char *, unint64_t *, const char *);
  void (*v54)(_QWORD, _QWORD);
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  const char *v61;
  uint64_t v62;

  v53 = a1;
  v54 = a3;
  v59 = a2;
  v9 = *(_QWORD *)(a7 + 8);
  v10 = *(const char **)(v9 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v10, a5, (uint64_t)&protocol requirements base descriptor for Numeric, associated type descriptor for Numeric.Magnitude);
  v61 = *(const char **)(swift_getAssociatedConformanceWitness((uint64_t)v10, a5, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Numeric)+ 16);
  v60 = swift_getAssociatedTypeWitness(0, v61, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v12 = MEMORY[0x1E0C80A78](v60);
  v56 = (char *)&v47 - v13;
  v14 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = swift_checkMetadataState(0, AssociatedTypeWitness);
  v57 = *(v17 - 1);
  v18 = MEMORY[0x1E0C80A78](v17);
  v52 = (char *)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v47 - v21;
  v23 = MEMORY[0x1E0C80A78](v20);
  v55 = (char *)&v47 - v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v58 = (char *)&v47 - v26;
  MEMORY[0x1E0C80A78](v25);
  v50 = a7;
  v51 = (char *)&v47 - v27;
  v28 = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 56))(a5, a7);
  if (v28 >= 0)
    v31 = v28;
  else
    v31 = v28 + 1;
  v49 = v31 >> 1;
  v62 = v31 >> 1;
  v32 = *(void (**)(void (*)(_QWORD, _QWORD), uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v9 + 240);
  v48 = lazy protocol witness table accessor for type Int and conformance Int(v28, v29, v30);
  v33 = v54;
  v32(v54, &v62, &type metadata for Int, v48, a5, v9);
  (*(void (**)(char *, void (*)(_QWORD, _QWORD), uint64_t))(v14 + 16))(v16, v33, a5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v9, a5, (uint64_t)v17, (uint64_t)&protocol requirements base descriptor for BinaryInteger, (uint64_t)&associated conformance descriptor for BinaryInteger.Numeric.Magnitude: BinaryInteger);
  v35 = *(void (**)(char *, uint64_t, uint64_t, unint64_t *, unint64_t))(AssociatedConformanceWitness
                                                                                              + 96);
  v35(v16, a5, v9, v17, AssociatedConformanceWitness);
  v36 = v60;
  v37 = v61;
  v38 = swift_getAssociatedConformanceWitness((uint64_t)v61, (uint64_t)v17, v60, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  v54 = *(void (**)(_QWORD, _QWORD))(v38 + 8);
  v39 = v56;
  ((void (*)(uint64_t *, uint64_t, unint64_t, unint64_t))v54)(&qword_1816B7DB0, 512, v36, v38);
  v53 = (void (*)(char *, unint64_t *, const char *))*((_QWORD *)v37 + 3);
  v53(v39, v17, v37);
  v62 = v49;
  v40 = v52;
  v35((char *)&v62, (uint64_t)&type metadata for Int, v48, v17, AssociatedConformanceWitness);
  v41 = swift_getAssociatedConformanceWitness(v50, a5, (uint64_t)v17, (uint64_t)&protocol requirements base descriptor for FixedWidthInteger, (uint64_t)&associated conformance descriptor for FixedWidthInteger.Numeric.Magnitude: FixedWidthInteger);
  v42 = v55;
  (*(void (**)(char *, char *, unint64_t *, unint64_t))(v41 + 216))(v22, v40, v17, v41);
  v43 = *(void (**)(char *, unint64_t *))(v57 + 8);
  v43(v40, v17);
  v43(v22, v17);
  v54(&qword_1816B7DB0, 512);
  v53(v39, v17, v61);
  v44 = v58;
  (*(void (**)(char *, char *, unint64_t *, unint64_t))(v41 + 88))(v58, v22, v17, v41);
  v43(v22, v17);
  v43(v42, v17);
  v45 = v51;
  (*(void (**)(char *, char *, unint64_t *, unint64_t))(AssociatedConformanceWitness + 192))(v51, v44, v17, AssociatedConformanceWitness);
  v43(v44, v17);
  return ((uint64_t (*)(char *, unint64_t *))v43)(v45, v17);
}

uint64_t static FixedWidthInteger.&>> infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;

  v11 = MEMORY[0x1E0C80A78](a1);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v11);
  v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v18 + 16))(v13);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 + 8) + 96))(v13, a4, a6, a3);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(a5 + 200))(a1, v17, a3, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, a3);
}

uint64_t specialized RandomNumberGenerator.next<A>(upperBound:)(unint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t __buf;

  if (!a1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "upperBound cannot be zero.", 26, 2, "Swift/Random.swift", 18, 2, 0x6AuLL, 0);
  __buf = 0;
  swift_stdlib_random(&__buf, 8uLL);
  result = (__buf * (unsigned __int128)a1) >> 64;
  if (__buf * a1 < a1)
  {
    v3 = -(uint64_t)a1 % a1;
    if (v3 > __buf * a1)
    {
      do
      {
        __buf = 0;
        swift_stdlib_random(&__buf, 8uLL);
      }
      while (v3 > __buf * a1);
      return (__buf * (unsigned __int128)a1) >> 64;
    }
  }
  return result;
}

uint64_t specialized RandomNumberGenerator.next<A>(upperBound:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;

  if (!a1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "upperBound cannot be zero.", 26, 2, "Swift/Random.swift", 18, 2, 0x6AuLL, 0);
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 8);
  v7 = v6(a2, a3);
  v8 = v7 * a1;
  result = ((unint64_t)v7 * (unsigned __int128)a1) >> 64;
  if (v8 < a1)
  {
    v10 = -(uint64_t)a1 % a1;
    if (v10 > v8)
    {
      do
        v11 = v6(a2, a3);
      while (v10 > v11 * a1);
      return ((unint64_t)v11 * (unsigned __int128)a1) >> 64;
    }
  }
  return result;
}

uint64_t specialized RandomNumberGenerator.next<A>(upperBound:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t (*v53)(uint64_t, uint64_t);
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char *v59;
  const char *v60;
  unint64_t v61;
  unint64_t AssociatedConformanceWitness;
  char *v63;
  void (*v64)(char *, uint64_t);
  uint64_t v65;
  char *v66;
  char *v67;
  unint64_t *v68;
  void (*v69)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  unint64_t v76;
  uint64_t (*v77)(unint64_t *, unint64_t);
  char *v78;
  int v79;
  int v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  unint64_t v85;
  char v86;
  uint64_t v87;
  char *v88;
  char v89;
  char v90;
  unint64_t v91;
  void (*v92)(char *, unint64_t *);
  const char *v93;
  unint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  void (*v102)(char *, unint64_t *);
  void (*v103)(char *, char *, unint64_t *);
  char *v104;
  char *v105;
  const char *v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  void (*v111)(char *, uint64_t);
  char *v112;
  char *v113;
  char *v114;
  unint64_t v115;
  char *v116;
  void (*v117)(char *, unint64_t *);
  void (*v118)(char *, uint64_t);
  unint64_t *v119;
  uint64_t v120;
  char *v121;
  const char *v122;
  unint64_t v123;
  unint64_t v124;
  char *v125;
  char *v126;
  char *v127;
  char *v128;
  const char *v129;
  uint64_t v130;
  char *v131;
  void (*v132)(char *, uint64_t);
  char *v133;
  uint64_t v134;
  char *v135;
  unint64_t v136;
  char v137;
  void (*v138)(char *, unint64_t *);
  void (*v139)(char *, uint64_t);
  char *v140;
  uint64_t (*v141)(unint64_t *, unint64_t);
  int v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char v148;
  char *v149;
  uint64_t v150;
  const char *v151;
  unint64_t v152;
  unint64_t v153;
  char *v154;
  char *v155;
  char *v156;
  unint64_t v157;
  void (*v158)(char *, unint64_t *);
  char *v159;
  char *v160;
  char *v161;
  char v162;
  char *v163;
  char *v164;
  uint64_t v165;
  unint64_t v166;
  char v167;
  char *v168;
  void (*v169)(char *, unint64_t *);
  uint64_t v170;
  uint64_t v171;
  char *v172;
  char *v173;
  char *v174;
  char *v175;
  char *v177;
  char *v178;
  char *v179;
  char *v180;
  char *v181;
  char *v182;
  char *v183;
  uint64_t v184;
  char *v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  unint64_t v190;
  const char *v191;
  unint64_t *TupleTypeMetadata2;
  char *v193;
  unint64_t v194;
  const char *v195;
  uint64_t v196;
  uint64_t v197;
  void (*v198)(char *, char *, uint64_t);
  void (*v199)(void);
  char *v200;
  uint64_t (*v201)(unint64_t *, unint64_t);
  uint64_t (*v202)(unint64_t *, unint64_t);
  void (*v203)(char *, char *, unint64_t *);
  char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t (*v207)(uint64_t, uint64_t);
  uint64_t (*v208)(uint64_t, uint64_t);
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  char *v214;
  char *v215;
  uint64_t v216;

  v179 = a4;
  v209 = a3;
  v6 = *(_QWORD *)(a3 + 8);
  v7 = *(_QWORD *)(v6 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)v7, a2, (uint64_t)&protocol requirements base descriptor for Numeric, associated type descriptor for Numeric.Magnitude);
  v191 = *(const char **)(swift_getAssociatedConformanceWitness(v7, a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Numeric)+ 16);
  v190 = swift_getAssociatedTypeWitness(0, v191, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v190);
  v189 = (char *)&v177 - v9;
  v197 = v7;
  v195 = *(const char **)(v7 + 16);
  v194 = swift_getAssociatedTypeWitness(0, v195, a2, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v194);
  v193 = (char *)&v177 - v10;
  v11 = swift_checkMetadataState(0, AssociatedTypeWitness);
  v196 = *(v11 - 1);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v177 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v12);
  v182 = (char *)&v177 - v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v188 = (char *)&v177 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v187 = (char *)&v177 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v215 = (char *)&v177 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v213 = (char *)&v177 - v24;
  MEMORY[0x1E0C80A78](v23);
  v200 = (char *)&v177 - v25;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, a2, (uint64_t)v11, "high low ", 0);
  v184 = *(TupleTypeMetadata2 - 1);
  v26 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v211 = (char *)&v177 - v27;
  v28 = MEMORY[0x1E0C80A78](v26);
  v214 = (char *)&v177 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x1E0C80A78](v28);
  v32 = (char *)&v177 - v31;
  v33 = MEMORY[0x1E0C80A78](v30);
  v181 = (char *)&v177 - v34;
  v35 = MEMORY[0x1E0C80A78](v33);
  v186 = (char *)&v177 - v36;
  v37 = MEMORY[0x1E0C80A78](v35);
  v185 = (char *)&v177 - v38;
  v39 = MEMORY[0x1E0C80A78](v37);
  v41 = (char *)&v177 - v40;
  v42 = MEMORY[0x1E0C80A78](v39);
  v212 = (char *)&v177 - v43;
  v44 = MEMORY[0x1E0C80A78](v42);
  v205 = (uint64_t)&v177 - v45;
  v46 = MEMORY[0x1E0C80A78](v44);
  v48 = (char *)&v177 - v47;
  MEMORY[0x1E0C80A78](v46);
  v50 = (char *)&v177 - v49;
  v206 = v51;
  v52 = *(void (**)(char *, char *, uint64_t))(v51 + 16);
  v210 = a1;
  v198 = v52;
  v52((char *)&v177 - v49, a1, a2);
  v53 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 64);
  v54 = v53(a2, v6);
  v208 = v53;
  v178 = v41;
  v183 = v14;
  v177 = v32;
  if ((v54 & 1) != 0)
  {
    v207 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 128);
    v55 = v207(a2, v6);
    if (v55 >= 64)
    {
LABEL_12:
      v216 = 0;
      v69 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 96);
      v70 = lazy protocol witness table accessor for type Int and conformance Int(v55, v56, v57);
      v69(&v216, &type metadata for Int, v70, a2, v6);
      v71 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v6 + 16) + 8) + 8))(v50, v48, a2);
      v64 = *(void (**)(char *, uint64_t))(v206 + 8);
      v64(v48, a2);
      v67 = v210;
      v68 = TupleTypeMetadata2;
      if ((v71 & 1) == 0)
        goto LABEL_13;
LABEL_57:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "upperBound cannot be zero.", 26, 2, "Swift/Random.swift", 18, 2, 0x6AuLL, 0);
    }
    goto LABEL_9;
  }
  v58 = v53(a2, v6);
  v207 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 128);
  v55 = v207(a2, v6);
  if ((v58 & 1) == 0)
  {
    if (v55 >= 64)
      goto LABEL_12;
LABEL_9:
    v198(v48, v50, a2);
    v65 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 120))(a2, v6);
    v64 = *(void (**)(char *, uint64_t))(v206 + 8);
    v66 = v48;
LABEL_10:
    v64(v66, a2);
    v67 = v210;
    v68 = TupleTypeMetadata2;
    if (v65)
      goto LABEL_13;
    goto LABEL_57;
  }
  if (v55 > 64)
    goto LABEL_12;
  v59 = v214;
  v60 = v195;
  v61 = v194;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v195, a2, v194, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  v63 = v193;
  (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, v61, AssociatedConformanceWitness);
  (*((void (**)(char *, uint64_t, const char *))v60 + 3))(v63, a2, v60);
  LOBYTE(v61) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8) + 32))(v50, v48, a2);
  v64 = *(void (**)(char *, uint64_t))(v206 + 8);
  v64(v48, a2);
  v198(v59, v50, a2);
  if ((v61 & 1) != 0)
  {
    v65 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 120))(a2, v6);
    v66 = v59;
    goto LABEL_10;
  }
  v64(v59, a2);
  v67 = v210;
  v68 = TupleTypeMetadata2;
LABEL_13:
  v64(v50, a2);
  v72 = v205;
  v73 = v209;
  specialized static FixedWidthInteger._random<A>(using:)(a2, v209, v205);
  v74 = &v211[*((int *)v68 + 12)];
  v199 = *(void (**)(void))(v73 + 120);
  v199();
  v214 = (char *)v64;
  v64((char *)v72, a2);
  v75 = v200;
  v203 = *(void (**)(char *, char *, unint64_t *))(v196 + 16);
  v204 = v74;
  v203(v200, v74, v11);
  v76 = swift_getAssociatedConformanceWitness(v6, a2, (uint64_t)v11, (uint64_t)&protocol requirements base descriptor for BinaryInteger, (uint64_t)&associated conformance descriptor for BinaryInteger.Numeric.Magnitude: BinaryInteger);
  v77 = *(uint64_t (**)(unint64_t *, unint64_t))(v76 + 64);
  v78 = v67;
  v79 = v77(v11, v76);
  v80 = v208(a2, v6);
  v202 = v77;
  if (((v79 ^ v80) & 1) == 0)
  {
    v201 = *(uint64_t (**)(unint64_t *, unint64_t))(v76 + 128);
    v87 = v201(v11, v76);
    v88 = v78;
    if (v87 >= v207(a2, v6))
    {
      v198(v48, v78, a2);
      v84 = v213;
      (*(void (**)(char *, uint64_t, uint64_t, unint64_t *, unint64_t))(v76 + 96))(v48, a2, v6, v11, v76);
      v91 = swift_getAssociatedConformanceWitness(v197, a2, (uint64_t)v11, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Comparable);
      v86 = (*(uint64_t (**)(char *, char *, unint64_t *, unint64_t))(v91 + 16))(v75, v84, v11, v91);
      goto LABEL_23;
    }
    (*(void (**)(char *, unint64_t *, unint64_t, uint64_t, uint64_t))(v6 + 96))(v75, v11, v76, a2, v6);
    v89 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8) + 16))(v48, v78, a2);
    goto LABEL_21;
  }
  v81 = v77(v11, v76);
  v201 = *(uint64_t (**)(unint64_t *, unint64_t))(v76 + 128);
  v82 = v201(v11, v76);
  v83 = v207(a2, v6);
  if ((v81 & 1) == 0)
  {
    if (v82 >= v83)
    {
      v106 = v195;
      v107 = v194;
      v108 = swift_getAssociatedConformanceWitness((uint64_t)v195, a2, v194, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v109 = v193;
      (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v108 + 8))(&unk_1816B7DA8, 256, v107, v108);
      (*((void (**)(char *, uint64_t, const char *))v106 + 3))(v109, a2, v106);
      v110 = v210;
      LOBYTE(v107) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8) + 40))(v210, v48, a2);
      v111 = (void (*)(char *, uint64_t))v214;
      ((void (*)(char *, uint64_t))v214)(v48, a2);
      v112 = v183;
      (*(void (**)(char *, char *, unint64_t *))(v196 + 32))(v183, v200, v11);
      v113 = v177;
      v198(v177, v110, a2);
      if ((v107 & 1) == 0)
      {
        v111(v113, a2);
        (*(void (**)(char *, unint64_t *))(v196 + 8))(v112, v11);
        goto LABEL_55;
      }
      v114 = v213;
      (*(void (**)(char *, uint64_t, uint64_t, unint64_t *, unint64_t))(v76 + 96))(v113, a2, v6, v11, v76);
      v115 = swift_getAssociatedConformanceWitness(v197, a2, (uint64_t)v11, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Comparable);
      v116 = v114;
      v90 = (*(uint64_t (**)(char *, char *, unint64_t *, unint64_t))(v115 + 16))(v112, v114, v11, v115);
      v117 = *(void (**)(char *, unint64_t *))(v196 + 8);
      v117(v116, v11);
      v117(v112, v11);
      goto LABEL_30;
    }
    (*(void (**)(char *, unint64_t *, unint64_t, uint64_t, uint64_t))(v6 + 96))(v75, v11, v76, a2, v6);
    v88 = v210;
    v89 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8) + 16))(v48, v210, a2);
LABEL_21:
    v90 = v89;
    ((void (*)(char *, uint64_t))v214)(v48, a2);
    goto LABEL_31;
  }
  if (v83 < v82)
  {
    v78 = v210;
    v198(v48, v210, a2);
    v84 = v213;
    (*(void (**)(char *, uint64_t, uint64_t, unint64_t *, unint64_t))(v76 + 96))(v48, a2, v6, v11, v76);
    v85 = swift_getAssociatedConformanceWitness(v197, a2, (uint64_t)v11, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Comparable);
    v75 = v200;
    v86 = (*(uint64_t (**)(char *, char *, unint64_t *, unint64_t))(v85 + 16))(v200, v84, v11, v85);
LABEL_23:
    v90 = v86;
    v92 = *(void (**)(char *, unint64_t *))(v196 + 8);
    v92(v84, v11);
    v92(v75, v11);
    v88 = v78;
    goto LABEL_31;
  }
  v93 = v191;
  v94 = v190;
  v95 = swift_getAssociatedConformanceWitness((uint64_t)v191, (uint64_t)v11, v190, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  v96 = v189;
  (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v95 + 8))(&unk_1816B7DA8, 256, v94, v95);
  v97 = v213;
  v98 = v96;
  v99 = v196;
  (*((void (**)(char *, unint64_t *, const char *))v93 + 3))(v98, v11, v93);
  v100 = swift_getAssociatedConformanceWitness(v197, a2, (uint64_t)v11, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Comparable);
  v101 = v200;
  LOBYTE(v94) = (*(uint64_t (**)(char *, char *, unint64_t *, unint64_t))(v100 + 16))(v200, v97, v11, v100);
  v102 = *(void (**)(char *, unint64_t *))(v99 + 8);
  v102(v97, v11);
  v103 = *(void (**)(char *, char *, unint64_t *))(v99 + 32);
  v104 = v182;
  v103(v182, v101, v11);
  v105 = v181;
  v198(v181, v210, a2);
  if ((v94 & 1) == 0)
  {
    (*(void (**)(char *, unint64_t *, unint64_t, uint64_t, uint64_t))(v6 + 96))(v104, v11, v76, a2, v6);
    v90 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8) + 16))(v48, v105, a2);
    v118 = (void (*)(char *, uint64_t))v214;
    ((void (*)(char *, uint64_t))v214)(v48, a2);
    v118(v105, a2);
LABEL_30:
    v88 = v210;
LABEL_31:
    v119 = TupleTypeMetadata2;
    v120 = v184;
    if ((v90 & 1) == 0)
      goto LABEL_56;
    goto LABEL_32;
  }
  ((void (*)(char *, uint64_t))v214)(v105, a2);
  v102(v104, v11);
  v88 = v210;
LABEL_32:
  v121 = v88;
  v122 = v195;
  v123 = v194;
  v124 = swift_getAssociatedConformanceWitness((uint64_t)v195, a2, v194, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  v125 = *(char **)(v124 + 8);
  v126 = v193;
  v183 = (char *)v124;
  v182 = v125;
  ((void (*)(void *, uint64_t, unint64_t))v125)(&unk_1816B7DA8, 256, v123);
  v127 = (char *)*((_QWORD *)v122 + 3);
  v128 = v178;
  v129 = v122;
  v130 = v196;
  v181 = v127;
  ((void (*)(char *, uint64_t, const char *))v127)(v126, a2, v129);
  (*(void (**)(char *, char *, uint64_t))(v209 + 88))(v48, v121, a2);
  v131 = v128;
  v132 = (void (*)(char *, uint64_t))v214;
  ((void (*)(char *, uint64_t))v214)(v131, a2);
  (*(void (**)(char *, char *, uint64_t, uint64_t))(v6 + 168))(v48, v121, a2, v6);
  v132(v48, a2);
  v200 = (char *)v6;
  v133 = v204;
  v180 = v48;
  while (1)
  {
    v140 = v215;
    v203(v215, v133, v11);
    v141 = v202;
    v142 = v202(v11, v76);
    if (((v142 ^ v208(a2, v6)) & 1) == 0)
    {
      v146 = v201(v11, v76);
      v144 = v212;
      if (v146 >= v207(a2, v6))
      {
        v198(v48, v144, a2);
        v134 = v6;
        v135 = v213;
        (*(void (**)(char *, uint64_t, uint64_t, unint64_t *, unint64_t))(v76 + 96))(v48, a2, v134, v11, v76);
        goto LABEL_34;
      }
LABEL_43:
      (*(void (**)(char *, unint64_t *, unint64_t, uint64_t, uint64_t))(v6 + 96))(v140, v11, v76, a2, v6);
      v148 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8) + 16))(v48, v144, a2);
      v149 = v48;
      v150 = a2;
      v139 = (void (*)(char *, uint64_t))v214;
LABEL_44:
      v139(v149, v150);
      v135 = v213;
      if ((v148 & 1) == 0)
        goto LABEL_54;
      goto LABEL_50;
    }
    if ((v141(v11, v76) & 1) != 0)
    {
      v140 = v215;
      v143 = v201(v11, v76);
      v144 = v212;
      if (v207(a2, v6) < v143)
      {
        v145 = v6;
        v198(v48, v144, a2);
        v135 = v213;
        (*(void (**)(char *, uint64_t, uint64_t, unint64_t *, unint64_t))(v76 + 96))(v48, a2, v145, v11, v76);
LABEL_34:
        v136 = swift_getAssociatedConformanceWitness(v197, a2, (uint64_t)v11, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Comparable);
        v137 = (*(uint64_t (**)(char *, char *, unint64_t *, unint64_t))(v136 + 16))(v140, v135, v11, v136);
        v138 = *(void (**)(char *, unint64_t *))(v130 + 8);
        v138(v135, v11);
        v138(v140, v11);
        v139 = (void (*)(char *, uint64_t))v214;
        if ((v137 & 1) == 0)
          goto LABEL_54;
        goto LABEL_50;
      }
      v151 = v191;
      v152 = v190;
      v153 = swift_getAssociatedConformanceWitness((uint64_t)v191, (uint64_t)v11, v190, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v154 = v189;
      (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v153 + 8))(&unk_1816B7DA8, 256, v152, v153);
      v155 = v213;
      v156 = v154;
      v130 = v196;
      (*((void (**)(char *, unint64_t *, const char *))v151 + 3))(v156, v11, v151);
      v157 = swift_getAssociatedConformanceWitness(v197, a2, (uint64_t)v11, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Comparable);
      LOBYTE(v152) = (*(uint64_t (**)(char *, char *, unint64_t *, unint64_t))(v157 + 16))(v140, v155, v11, v157);
      v158 = *(void (**)(char *, unint64_t *))(v130 + 8);
      v158(v155, v11);
      v159 = v187;
      (*(void (**)(char *, char *, unint64_t *))(v130 + 32))(v187, v140, v11);
      v160 = v185;
      v198(v185, v144, a2);
      if ((v152 & 1) != 0)
      {
        v139 = (void (*)(char *, uint64_t))v214;
        ((void (*)(char *, uint64_t))v214)(v160, a2);
        v158(v159, v11);
        v135 = v213;
        v48 = v180;
        goto LABEL_50;
      }
      v172 = v200;
      v173 = v159;
      v48 = v180;
      (*((void (**)(char *, unint64_t *, unint64_t, uint64_t, char *))v200 + 12))(v173, v11, v76, a2, v200);
      v148 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*((_QWORD *)v172 + 4) + 8) + 16))(v48, v160, a2);
      v139 = (void (*)(char *, uint64_t))v214;
      ((void (*)(char *, uint64_t))v214)(v48, a2);
      v149 = v160;
      v150 = a2;
      goto LABEL_44;
    }
    v140 = v215;
    v147 = v201(v11, v76);
    v144 = v212;
    if (v147 < v207(a2, v6))
      goto LABEL_43;
    v161 = v193;
    ((void (*)(void *, uint64_t))v182)(&unk_1816B7DA8, 256);
    ((void (*)(char *, uint64_t, const char *))v181)(v161, a2, v195);
    v162 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8) + 40))(v144, v48, a2);
    ((void (*)(char *, uint64_t))v214)(v48, a2);
    v163 = v188;
    (*(void (**)(char *, char *, unint64_t *))(v130 + 32))(v188, v140, v11);
    v164 = v186;
    v198(v186, v144, a2);
    if ((v162 & 1) == 0)
      break;
    v165 = v6;
    v135 = v213;
    (*(void (**)(char *, uint64_t, uint64_t, unint64_t *, unint64_t))(v76 + 96))(v164, a2, v165, v11, v76);
    v166 = swift_getAssociatedConformanceWitness(v197, a2, (uint64_t)v11, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Comparable);
    v167 = (*(uint64_t (**)(char *, char *, unint64_t *, unint64_t))(v166 + 16))(v163, v135, v11, v166);
    v168 = v163;
    v169 = *(void (**)(char *, unint64_t *))(v130 + 8);
    v169(v135, v11);
    v169(v168, v11);
    v144 = v212;
    v139 = (void (*)(char *, uint64_t))v214;
    if ((v167 & 1) == 0)
      goto LABEL_54;
LABEL_50:
    v170 = v205;
    v171 = v209;
    specialized static FixedWidthInteger._random<A>(using:)(a2, v209, v205);
    ((void (*)(char *, char *, char *, uint64_t, uint64_t))v199)(v48, v135, v210, a2, v171);
    v139((char *)v170, a2);
    (*(void (**)(char *, char *, uint64_t))(v206 + 40))(v211, v48, a2);
    v133 = v204;
    (*(void (**)(char *, char *, unint64_t *))(v130 + 40))(v204, v135, v11);
    v6 = (uint64_t)v200;
  }
  v174 = v164;
  v139 = (void (*)(char *, uint64_t))v214;
  ((void (*)(char *, uint64_t))v214)(v174, a2);
  (*(void (**)(char *, unint64_t *))(v130 + 8))(v163, v11);
  v144 = v212;
LABEL_54:
  v139(v144, a2);
LABEL_55:
  v119 = TupleTypeMetadata2;
  v120 = v184;
LABEL_56:
  v175 = v211;
  v198(v179, v211, a2);
  return (*(uint64_t (**)(char *, unint64_t *))(v120 + 8))(v175, v119);
}

uint64_t RandomNumberGenerator.next<A>(upperBound:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  unsigned int (*v54)(uint64_t, uint64_t);
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  char *v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  void (*v69)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v70;
  char v71;
  uint64_t v72;
  void (*v73)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v74;
  char v75;
  uint64_t v76;
  const char *v77;
  unint64_t v78;
  unint64_t AssociatedConformanceWitness;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  void (*v85)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t (*v94)(unint64_t *, unint64_t);
  uint64_t v95;
  unsigned int (*v96)(uint64_t, uint64_t);
  unsigned int v97;
  char v98;
  uint64_t v99;
  char *v100;
  char *v101;
  unint64_t v102;
  char v103;
  void (*v104)(char *, unint64_t *);
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t (*v111)(char *, uint64_t, uint64_t);
  char v112;
  unint64_t v113;
  void (*v114)(char *, unint64_t *);
  const char *v115;
  unint64_t v116;
  unint64_t v117;
  char *v118;
  char *v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  void (*v125)(char *, uint64_t);
  char *v126;
  uint64_t v127;
  char v128;
  void (*v129)(char *, uint64_t);
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t (*v135)(unint64_t *, unint64_t);
  int v136;
  uint64_t v137;
  const char *v138;
  unint64_t v139;
  unint64_t v140;
  char *v141;
  char *v142;
  unint64_t v143;
  char *v144;
  uint64_t v145;
  void (*v146)(char *, unint64_t *);
  char *v147;
  char *v148;
  uint64_t v149;
  unint64_t v150;
  char *v151;
  char v152;
  void (*v153)(char *, unint64_t *);
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char v158;
  char *v159;
  char *v160;
  char *v161;
  unint64_t v162;
  char *v163;
  void (*v164)(char *, unint64_t *);
  char *v165;
  uint64_t v166;
  const char *v167;
  unint64_t v168;
  unint64_t v169;
  char *v170;
  char *v171;
  unint64_t v172;
  uint64_t v173;
  void (*v174)(char *, unint64_t *);
  char *v175;
  char *v176;
  const char *v177;
  unint64_t v178;
  unint64_t v179;
  char *v180;
  char *v181;
  void (*v182)(char *, uint64_t);
  uint64_t v183;
  char *v184;
  char *v185;
  char *v186;
  unint64_t v187;
  char *v188;
  char v189;
  void (*v190)(char *, unint64_t *);
  char *v191;
  uint64_t v192;
  char *v193;
  char v194;
  void (*v195)(char *, uint64_t);
  char *v196;
  uint64_t v198;
  char *v199;
  char *v200;
  char *v201;
  uint64_t v202;
  char *v203;
  char *v204;
  char *v205;
  char *v206;
  char *v207;
  char *v208;
  char *v209;
  unint64_t *TupleTypeMetadata2;
  char *v211;
  unint64_t v212;
  const char *v213;
  char *v214;
  unint64_t v215;
  const char *v216;
  char *v217;
  char *v218;
  char *v219;
  uint64_t v220;
  void (*v221)(char *, char *, uint64_t);
  void (*v222)(char *, char *, uint64_t, uint64_t, uint64_t);
  unint64_t v223;
  uint64_t (*v224)(unint64_t *, unint64_t);
  uint64_t (*v225)(unint64_t *, unint64_t);
  void (*v226)(char *, char *, unint64_t *);
  char *v227;
  unsigned int (*v228)(uint64_t, uint64_t);
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t (*v234)(uint64_t);
  uint64_t v235;
  char *v236;
  char *v237;
  char *v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;

  v231 = a4;
  v230 = a2;
  v203 = a6;
  v235 = a5;
  v8 = *(_QWORD *)(a5 + 8);
  v9 = *(_QWORD *)(v8 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)v9, a3, (uint64_t)&protocol requirements base descriptor for Numeric, associated type descriptor for Numeric.Magnitude);
  v213 = *(const char **)(swift_getAssociatedConformanceWitness(v9, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Numeric)+ 16);
  v212 = swift_getAssociatedTypeWitness(0, v213, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v212);
  v211 = (char *)&v198 - v11;
  v12 = swift_checkMetadataState(0, AssociatedTypeWitness);
  v239 = *(v12 - 1);
  v13 = MEMORY[0x1E0C80A78](v12);
  v209 = (char *)&v198 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v217 = (char *)&v198 - v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v240 = (char *)&v198 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v205 = (char *)&v198 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v204 = (char *)&v198 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v25 = (char *)&v198 - v24;
  MEMORY[0x1E0C80A78](v23);
  v206 = (char *)&v198 - v26;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, a3, (uint64_t)v12, "high low ", 0);
  v202 = *(TupleTypeMetadata2 - 1);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v236 = (char *)&v198 - v27;
  v220 = v9;
  v216 = *(const char **)(v9 + 16);
  v215 = swift_getAssociatedTypeWitness(0, v216, a3, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v28 = MEMORY[0x1E0C80A78](v215);
  v214 = (char *)&v198 - v29;
  v30 = MEMORY[0x1E0C80A78](v28);
  v208 = (char *)&v198 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = MEMORY[0x1E0C80A78](v30);
  v207 = (char *)&v198 - v33;
  v34 = MEMORY[0x1E0C80A78](v32);
  v36 = (char *)&v198 - v35;
  v37 = MEMORY[0x1E0C80A78](v34);
  v219 = (char *)&v198 - v38;
  v39 = MEMORY[0x1E0C80A78](v37);
  v199 = (char *)&v198 - v40;
  v41 = MEMORY[0x1E0C80A78](v39);
  v200 = (char *)&v198 - v42;
  v43 = MEMORY[0x1E0C80A78](v41);
  v229 = (uint64_t)&v198 - v44;
  v45 = MEMORY[0x1E0C80A78](v43);
  v238 = (char *)&v198 - v46;
  v47 = MEMORY[0x1E0C80A78](v45);
  v49 = (char *)&v198 - v48;
  MEMORY[0x1E0C80A78](v47);
  v51 = (char *)&v198 - v50;
  v233 = v52;
  v53 = *(void (**)(char *, char *, uint64_t))(v52 + 16);
  v237 = a1;
  v221 = v53;
  v53((char *)&v198 - v50, a1, a3);
  v54 = *(unsigned int (**)(uint64_t, uint64_t))(v8 + 64);
  v241 = v8;
  v55 = v54(a3, v8);
  v228 = v54;
  v201 = v36;
  if ((v55 & 1) != 0)
  {
    v234 = *(uint64_t (**)(uint64_t))(v241 + 128);
    v56 = v234(a3);
    if (v56 < 64)
    {
      v221(v49, v51, a3);
      v59 = (*(uint64_t (**)(uint64_t))(v241 + 120))(a3);
      v60 = *(void (**)(char *, uint64_t))(v233 + 8);
      v60(v49, a3);
      v61 = v236;
      if (!v59)
        goto LABEL_19;
      goto LABEL_21;
    }
    v242 = 0;
    v72 = v241;
    v73 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v241 + 96);
    v74 = lazy protocol witness table accessor for type Int and conformance Int(v56, v57, v58);
    v73(&v242, &type metadata for Int, v74, a3, v72);
    v75 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v72 + 16) + 8) + 8))(v51, v49, a3);
    v60 = *(void (**)(char *, uint64_t))(v233 + 8);
    v60(v49, a3);
    v61 = v236;
    if ((v75 & 1) != 0)
LABEL_19:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "upperBound cannot be zero.", 26, 2, "Swift/Random.swift", 18, 2, 0x6AuLL, 0);
  }
  else
  {
    v62 = v241;
    v63 = v54(a3, v241);
    v234 = *(uint64_t (**)(uint64_t))(v62 + 128);
    v64 = ((uint64_t (*)(uint64_t, uint64_t))v234)(a3, v62);
    if ((v63 & 1) != 0)
    {
      v67 = v236;
      if (v64 <= 64)
      {
        v77 = v216;
        v78 = v215;
        AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v216, a3, v215, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
        v80 = v214;
        (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, v78, AssociatedConformanceWitness);
        (*((void (**)(char *, uint64_t, const char *))v77 + 3))(v80, a3, v77);
        LOBYTE(v78) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v241 + 32) + 8)
                                                                         + 32))(v51, v49, a3);
        v60 = *(void (**)(char *, uint64_t))(v233 + 8);
        v60(v49, a3);
        v81 = v238;
        v221(v238, v51, a3);
        if ((v78 & 1) != 0)
        {
          v82 = (*(uint64_t (**)(uint64_t))(v241 + 120))(a3);
          v60(v81, a3);
          v61 = v67;
          if (!v82)
            goto LABEL_19;
        }
        else
        {
          v60(v81, a3);
          v61 = v67;
        }
      }
      else
      {
        v242 = 0;
        v68 = v241;
        v69 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v241 + 96);
        v70 = lazy protocol witness table accessor for type Int and conformance Int(v64, v65, v66);
        v69(&v242, &type metadata for Int, v70, a3, v68);
        v71 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v68 + 16) + 8) + 8))(v51, v49, a3);
        v60 = *(void (**)(char *, uint64_t))(v233 + 8);
        v60(v49, a3);
        v61 = v67;
        if ((v71 & 1) != 0)
          goto LABEL_19;
      }
    }
    else
    {
      v61 = v236;
      if (v64 < 64)
      {
        v221(v49, v51, a3);
        v76 = (*(uint64_t (**)(uint64_t))(v241 + 120))(a3);
        v60 = *(void (**)(char *, uint64_t))(v233 + 8);
        v60(v49, a3);
        if (!v76)
          goto LABEL_19;
      }
      else
      {
        v242 = 0;
        v83 = v241;
        v84 = v236;
        v85 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v241 + 96);
        v86 = lazy protocol witness table accessor for type Int and conformance Int(v64, v65, v66);
        v85(&v242, &type metadata for Int, v86, a3, v83);
        v61 = v84;
        v87 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v83 + 16) + 8) + 8))(v51, v49, a3);
        v60 = *(void (**)(char *, uint64_t))(v233 + 8);
        v60(v49, a3);
        if ((v87 & 1) != 0)
          goto LABEL_19;
      }
    }
  }
LABEL_21:
  v60(v51, a3);
  v88 = v229;
  v89 = v235;
  static FixedWidthInteger._random<A>(using:)(v232, a3, v230, v235, v231, v229);
  v90 = &v61[*((int *)TupleTypeMetadata2 + 12)];
  v222 = *(void (**)(char *, char *, uint64_t, uint64_t, uint64_t))(v89 + 120);
  v222(v61, v90, (uint64_t)v237, a3, v89);
  v238 = (char *)v60;
  v60((char *)v88, a3);
  v91 = v206;
  v226 = *(void (**)(char *, char *, unint64_t *))(v239 + 16);
  v227 = v90;
  v226(v206, v90, v12);
  v92 = v241;
  v93 = swift_getAssociatedConformanceWitness(v241, a3, (uint64_t)v12, (uint64_t)&protocol requirements base descriptor for BinaryInteger, (uint64_t)&associated conformance descriptor for BinaryInteger.Numeric.Magnitude: BinaryInteger);
  v94 = *(uint64_t (**)(unint64_t *, unint64_t))(v93 + 64);
  LODWORD(v89) = v94(v12, v93);
  v95 = v92;
  v96 = v228;
  v97 = v228(a3, v95);
  v218 = v25;
  v225 = v94;
  if (((v89 ^ v97) & 1) != 0)
  {
    v98 = v94(v12, v93);
    v224 = *(uint64_t (**)(unint64_t *, unint64_t))(v93 + 128);
    v198 = v224(v12, v93);
    v99 = ((uint64_t (*)(uint64_t, uint64_t))v234)(a3, v241);
    v100 = v91;
    if ((v98 & 1) != 0)
    {
      if (v99 >= v198)
      {
        v223 = v93;
        v167 = v213;
        v168 = v212;
        v169 = swift_getAssociatedConformanceWitness((uint64_t)v213, (uint64_t)v12, v212, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
        v170 = v25;
        v171 = v211;
        (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v169 + 8))(&unk_1816B7DA8, 256, v168, v169);
        (*((void (**)(char *, unint64_t *, const char *))v167 + 3))(v171, v12, v167);
        v172 = swift_getAssociatedConformanceWitness(v220, a3, (uint64_t)v12, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Comparable);
        LOBYTE(v168) = (*(uint64_t (**)(char *, char *, unint64_t *, unint64_t))(v172 + 16))(v91, v170, v12, v172);
        v173 = v239;
        v174 = *(void (**)(char *, unint64_t *))(v239 + 8);
        v174(v170, v12);
        v175 = v204;
        (*(void (**)(char *, char *, unint64_t *))(v173 + 32))(v204, v91, v12);
        v176 = v200;
        v221(v200, v237, a3);
        if ((v168 & 1) != 0)
        {
          ((void (*)(char *, uint64_t))v238)(v176, a3);
          v174(v175, v12);
          v105 = v237;
          v25 = v218;
          v93 = v223;
        }
        else
        {
          v192 = v241;
          v193 = v175;
          v93 = v223;
          (*(void (**)(char *, unint64_t *, unint64_t, uint64_t, uint64_t))(v241 + 96))(v193, v12, v223, a3, v241);
          v194 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v192 + 32) + 8) + 16))(v49, v176, a3);
          v195 = (void (*)(char *, uint64_t))v238;
          ((void (*)(char *, uint64_t))v238)(v49, a3);
          v195(v176, a3);
          v105 = v237;
          v25 = v218;
          if ((v194 & 1) == 0)
            goto LABEL_62;
        }
      }
      else
      {
        v101 = v237;
        v221(v49, v237, a3);
        (*(void (**)(char *, uint64_t, uint64_t, unint64_t *, unint64_t))(v93 + 96))(v49, a3, v241, v12, v93);
        v102 = swift_getAssociatedConformanceWitness(v220, a3, (uint64_t)v12, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Comparable);
        v103 = (*(uint64_t (**)(char *, char *, unint64_t *, unint64_t))(v102 + 16))(v100, v25, v12, v102);
        v104 = *(void (**)(char *, unint64_t *))(v239 + 8);
        v104(v25, v12);
        v104(v100, v12);
        v105 = v101;
        if ((v103 & 1) == 0)
          goto LABEL_62;
      }
    }
    else if (v198 >= v99)
    {
      v223 = v93;
      v177 = v216;
      v178 = v215;
      v179 = swift_getAssociatedConformanceWitness((uint64_t)v216, a3, v215, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v180 = v214;
      (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v179 + 8))(&unk_1816B7DA8, 256, v178, v179);
      (*((void (**)(char *, uint64_t, const char *))v177 + 3))(v180, a3, v177);
      v181 = v237;
      LOBYTE(v178) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v241 + 32) + 8)
                                                                        + 40))(v237, v49, a3);
      v182 = (void (*)(char *, uint64_t))v238;
      ((void (*)(char *, uint64_t))v238)(v49, a3);
      v183 = v239;
      v184 = v205;
      (*(void (**)(char *, char *, unint64_t *))(v239 + 32))(v205, v100, v12);
      v185 = v199;
      v221(v199, v181, a3);
      if ((v178 & 1) == 0)
      {
        v182(v185, a3);
        (*(void (**)(char *, unint64_t *))(v183 + 8))(v184, v12);
        goto LABEL_62;
      }
      v186 = v218;
      (*(void (**)(char *, uint64_t, uint64_t, unint64_t *))(v223 + 96))(v185, a3, v241, v12);
      v187 = swift_getAssociatedConformanceWitness(v220, a3, (uint64_t)v12, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Comparable);
      v188 = v186;
      v189 = (*(uint64_t (**)(char *, char *, unint64_t *, unint64_t))(v187 + 16))(v184, v186, v12, v187);
      v190 = *(void (**)(char *, unint64_t *))(v183 + 8);
      v25 = v188;
      v190(v188, v12);
      v191 = v184;
      v93 = v223;
      v190(v191, v12);
      v105 = v237;
      if ((v189 & 1) == 0)
        goto LABEL_62;
    }
    else
    {
      v110 = v241;
      (*(void (**)(char *, unint64_t *, unint64_t, uint64_t, uint64_t))(v241 + 96))(v91, v12, v93, a3, v241);
      v111 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v110 + 32) + 8) + 16);
      v105 = v237;
      v112 = v111(v49, (uint64_t)v237, a3);
      ((void (*)(char *, uint64_t))v238)(v49, a3);
      if ((v112 & 1) == 0)
        goto LABEL_62;
    }
  }
  else
  {
    v224 = *(uint64_t (**)(unint64_t *, unint64_t))(v93 + 128);
    v106 = v224(v12, v93);
    v107 = v237;
    if (v106 >= ((uint64_t (*)(uint64_t, uint64_t))v234)(a3, v241))
    {
      v221(v49, v107, a3);
      (*(void (**)(char *, uint64_t, uint64_t, unint64_t *, unint64_t))(v93 + 96))(v49, a3, v241, v12, v93);
      v113 = swift_getAssociatedConformanceWitness(v220, a3, (uint64_t)v12, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Comparable);
      v109 = (*(uint64_t (**)(char *, char *, unint64_t *, unint64_t))(v113 + 16))(v91, v25, v12, v113);
      v114 = *(void (**)(char *, unint64_t *))(v239 + 8);
      v114(v25, v12);
      v114(v91, v12);
    }
    else
    {
      v108 = v241;
      (*(void (**)(char *, unint64_t *, unint64_t, uint64_t, uint64_t))(v241 + 96))(v91, v12, v93, a3, v241);
      v109 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v108 + 32) + 8) + 16))(v49, v107, a3);
      ((void (*)(char *, uint64_t))v238)(v49, a3);
    }
    v105 = v107;
    if ((v109 & 1) == 0)
      goto LABEL_62;
  }
  v223 = v93;
  v115 = v216;
  v116 = v215;
  v117 = swift_getAssociatedConformanceWitness((uint64_t)v216, a3, v215, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  v118 = *(char **)(v117 + 8);
  v119 = v214;
  v206 = (char *)v117;
  v205 = v118;
  ((void (*)(void *, uint64_t, unint64_t))v118)(&unk_1816B7DA8, 256, v116);
  v120 = v105;
  v121 = v201;
  v122 = v119;
  v123 = v219;
  v204 = (char *)*((_QWORD *)v115 + 3);
  ((void (*)(char *, uint64_t, const char *))v204)(v122, a3, v115);
  (*(void (**)(char *, char *, uint64_t))(v235 + 88))(v49, v120, a3);
  v124 = v121;
  v125 = (void (*)(char *, uint64_t))v238;
  ((void (*)(char *, uint64_t))v238)(v124, a3);
  (*(void (**)(char *, char *, uint64_t))(v241 + 168))(v49, v120, a3);
  v125(v49, a3);
  v126 = v227;
  while (1)
  {
    v226(v240, v126, v12);
    v134 = v223;
    v135 = v225;
    v136 = v225(v12, v223);
    if (((v136 ^ v96(a3, v241)) & 1) == 0)
    {
      v149 = v224(v12, v134);
      if (v149 < ((uint64_t (*)(uint64_t, uint64_t))v234)(a3, v241))
      {
        v127 = v241;
        (*(void (**)(char *, unint64_t *, unint64_t, uint64_t, uint64_t))(v241 + 96))(v240, v12, v134, a3, v241);
        v128 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v127 + 32) + 8) + 16))(v49, v123, a3);
        v129 = (void (*)(char *, uint64_t))v238;
        ((void (*)(char *, uint64_t))v238)(v49, a3);
        v130 = v239;
        goto LABEL_35;
      }
LABEL_43:
      v221(v49, v123, a3);
      (*(void (**)(char *, uint64_t, uint64_t, unint64_t *, unint64_t))(v134 + 96))(v49, a3, v241, v12, v134);
      v150 = swift_getAssociatedConformanceWitness(v220, a3, (uint64_t)v12, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Comparable);
      v151 = v240;
      v152 = (*(uint64_t (**)(char *, char *, unint64_t *, unint64_t))(v150 + 16))(v240, v25, v12, v150);
      v130 = v239;
      v153 = *(void (**)(char *, unint64_t *))(v239 + 8);
      v153(v25, v12);
      v154 = v151;
      v123 = v219;
      v153(v154, v12);
      v131 = v49;
      goto LABEL_48;
    }
    if ((v135(v12, v134) & 1) != 0)
    {
      v137 = v224(v12, v134);
      if (((uint64_t (*)(uint64_t, uint64_t))v234)(a3, v241) >= v137)
      {
        v138 = v213;
        v139 = v212;
        v140 = swift_getAssociatedConformanceWitness((uint64_t)v213, (uint64_t)v12, v212, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
        v141 = v25;
        v142 = v211;
        (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v140 + 8))(&unk_1816B7DA8, 256, v139, v140);
        (*((void (**)(char *, unint64_t *, const char *))v138 + 3))(v142, v12, v138);
        v143 = swift_getAssociatedConformanceWitness(v220, a3, (uint64_t)v12, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Comparable);
        v144 = v240;
        LOBYTE(v139) = (*(uint64_t (**)(char *, char *, unint64_t *, unint64_t))(v143 + 16))(v240, v141, v12, v143);
        v145 = v239;
        v146 = *(void (**)(char *, unint64_t *))(v239 + 8);
        v147 = v141;
        v123 = v219;
        v146(v147, v12);
        (*(void (**)(char *, char *, unint64_t *))(v145 + 32))(v217, v144, v12);
        v148 = v207;
        v221(v207, v123, a3);
        if ((v139 & 1) != 0)
        {
          v129 = (void (*)(char *, uint64_t))v238;
          ((void (*)(char *, uint64_t))v238)(v148, a3);
          v146(v217, v12);
          v130 = v239;
          v25 = v218;
          v131 = v49;
          goto LABEL_36;
        }
        v166 = v241;
        (*(void (**)(char *, unint64_t *, unint64_t, uint64_t, uint64_t))(v241 + 96))(v217, v12, v134, a3, v241);
        v128 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v166 + 32) + 8) + 16))(v49, v148, a3);
        v129 = (void (*)(char *, uint64_t))v238;
        ((void (*)(char *, uint64_t))v238)(v49, a3);
        v129(v148, a3);
        goto LABEL_51;
      }
      goto LABEL_43;
    }
    v155 = v224(v12, v134);
    if (v155 < ((uint64_t (*)(uint64_t, uint64_t))v234)(a3, v241))
    {
      v156 = v241;
      (*(void (**)(char *, unint64_t *, unint64_t, uint64_t, uint64_t))(v241 + 96))(v240, v12, v134, a3, v241);
      v128 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v156 + 32) + 8) + 16))(v49, v123, a3);
      v129 = (void (*)(char *, uint64_t))v238;
      ((void (*)(char *, uint64_t))v238)(v49, a3);
LABEL_51:
      v130 = v239;
      v25 = v218;
LABEL_35:
      v131 = v49;
      if ((v128 & 1) == 0)
        goto LABEL_61;
      goto LABEL_36;
    }
    v157 = v214;
    ((void (*)(void *, uint64_t))v205)(&unk_1816B7DA8, 256);
    ((void (*)(char *, uint64_t, const char *))v204)(v157, a3, v216);
    v158 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v241 + 32) + 8) + 40))(v123, v49, a3);
    ((void (*)(char *, uint64_t))v238)(v49, a3);
    v130 = v239;
    v159 = v209;
    (*(void (**)(char *, char *, unint64_t *))(v239 + 32))(v209, v240, v12);
    v160 = v208;
    v221(v208, v123, a3);
    if ((v158 & 1) == 0)
      break;
    v161 = v160;
    v25 = v218;
    (*(void (**)(char *, uint64_t, uint64_t, unint64_t *, unint64_t))(v134 + 96))(v161, a3, v241, v12, v134);
    v162 = swift_getAssociatedConformanceWitness(v220, a3, (uint64_t)v12, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Comparable);
    v152 = (*(uint64_t (**)(char *, char *, unint64_t *, unint64_t))(v162 + 16))(v159, v25, v12, v162);
    v131 = v49;
    v163 = v159;
    v164 = *(void (**)(char *, unint64_t *))(v130 + 8);
    v164(v25, v12);
    v165 = v163;
    v123 = v219;
    v164(v165, v12);
LABEL_48:
    v129 = (void (*)(char *, uint64_t))v238;
    if ((v152 & 1) == 0)
      goto LABEL_61;
LABEL_36:
    v132 = v229;
    v133 = v235;
    static FixedWidthInteger._random<A>(using:)(v232, a3, v230, v235, v231, v229);
    v222(v131, v25, (uint64_t)v237, a3, v133);
    v129((char *)v132, a3);
    (*(void (**)(char *, char *, uint64_t))(v233 + 40))(v236, v131, a3);
    v126 = v227;
    (*(void (**)(char *, char *, unint64_t *))(v130 + 40))(v227, v25, v12);
    v49 = v131;
    v96 = v228;
  }
  v129 = (void (*)(char *, uint64_t))v238;
  ((void (*)(char *, uint64_t))v238)(v160, a3);
  (*(void (**)(char *, unint64_t *))(v130 + 8))(v159, v12);
LABEL_61:
  v129(v123, a3);
LABEL_62:
  v196 = v236;
  v221(v203, v236, a3);
  return (*(uint64_t (**)(char *, unint64_t *))(v202 + 8))(v196, TupleTypeMetadata2);
}

uint64_t static FixedWidthInteger.random(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return specialized static FixedWidthInteger.random<A>(in:using:)(a1, a2, a2, a3);
}

uint64_t specialized static FixedWidthInteger.random<A>(in:using:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  const char *v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void (*v30)(char *, unint64_t *);
  const char *v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  void (*v40)(char *, uint64_t, uint64_t, unint64_t *, unint64_t);
  char *v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  const char *v45;
  unint64_t AssociatedConformanceWitness;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v52 = a2;
  v53 = a5;
  v8 = *(_QWORD *)(a4 + 8);
  v9 = *(const char **)(v8 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v9, a3, (uint64_t)&protocol requirements base descriptor for Numeric, associated type descriptor for Numeric.Magnitude);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v9, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Numeric);
  v45 = *(const char **)(AssociatedConformanceWitness + 16);
  v43 = swift_getAssociatedTypeWitness(0, v45, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v11 = MEMORY[0x1E0C80A78](v43);
  v42 = (char *)&v40 - v12;
  v44 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_checkMetadataState(0, AssociatedTypeWitness);
  v51 = *(v15 - 1);
  v16 = MEMORY[0x1E0C80A78](v15);
  v48 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16);
  v47 = (char *)&v40 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v40 - v21;
  MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v40 - v23;
  type metadata accessor for ClosedRange(0, a3, *(_QWORD *)(*(_QWORD *)(v8 + 32) + 8), v25);
  v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(a4 + 88);
  v49 = a1;
  v26(v14, a1, a3, a4);
  v27 = swift_getAssociatedConformanceWitness(v8, a3, (uint64_t)v15, (uint64_t)&protocol requirements base descriptor for BinaryInteger, (uint64_t)&associated conformance descriptor for BinaryInteger.Numeric.Magnitude: BinaryInteger);
  v40 = *(void (**)(char *, uint64_t, uint64_t, unint64_t *, unint64_t))(v27 + 96);
  v41 = v14;
  v40(v14, a3, v8, v15, v27);
  v50 = a4;
  v28 = swift_getAssociatedConformanceWitness(a4, a3, (uint64_t)v15, (uint64_t)&protocol requirements base descriptor for FixedWidthInteger, (uint64_t)&associated conformance descriptor for FixedWidthInteger.Numeric.Magnitude: FixedWidthInteger);
  (*(void (**)(unint64_t *, unint64_t))(v28 + 64))(v15, v28);
  v29 = swift_getAssociatedConformanceWitness((uint64_t)v9, a3, (uint64_t)v15, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Comparable);
  LOBYTE(AssociatedTypeWitness) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(v29 + 8)
                                                                                                + 8))(v24, v22, v15);
  v30 = *(void (**)(char *, unint64_t *))(v51 + 8);
  v30(v22, v15);
  if ((AssociatedTypeWitness & 1) != 0)
  {
    v30(v24, v15);
    specialized static FixedWidthInteger._random<A>(using:)((uint64_t)v15, v28, (uint64_t)v22);
  }
  else
  {
    v51 = v27;
    v31 = v45;
    v32 = v43;
    v33 = swift_getAssociatedConformanceWitness((uint64_t)v45, (uint64_t)v15, v43, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    v34 = v42;
    (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(v33 + 8))(&qword_1816B7DB0, 512, v32, v33);
    (*((void (**)(char *, unint64_t *, const char *))v31 + 3))(v34, v15, v31);
    (*(void (**)(char *, char *, unint64_t *))(*(_QWORD *)(AssociatedConformanceWitness + 8) + 32))(v24, v22, v15);
    v30(v22, v15);
    v35 = v41;
    (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v41, v49, a3);
    v36 = v47;
    v40(v35, a3, v8, v15, v51);
    swift_getAssociatedConformanceWitness(v50, a3, (uint64_t)v15, (uint64_t)&protocol requirements base descriptor for FixedWidthInteger, (uint64_t)&associated conformance descriptor for FixedWidthInteger.Numeric.Magnitude: UnsignedInteger);
    v37 = v48;
    specialized RandomNumberGenerator.next<A>(upperBound:)(v24, (uint64_t)v15, v28, v48);
    v30(v24, v15);
    (*(void (**)(char *, char *, unint64_t *, unint64_t))(v28 + 80))(v22, v37, v15, v28);
    v30(v37, v15);
    v38 = v36;
    v27 = v51;
    v30(v38, v15);
  }
  return (*(uint64_t (**)(char *, unint64_t *, unint64_t, uint64_t, uint64_t))(v8 + 96))(v22, v15, v27, a3, v8);
}

uint64_t static FixedWidthInteger.random<A>(in:using:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  const char *v11;
  unint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t, unint64_t *, unint64_t);
  unint64_t v31;
  unint64_t v32;
  void (*v33)(char *, unint64_t *);
  uint64_t v34;
  const char *v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t, unint64_t *, unint64_t);
  char *v46;
  unint64_t v47;
  uint64_t v48;
  const char *v49;
  unint64_t AssociatedConformanceWitness;
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v57 = a2;
  v58 = a6;
  v56 = a4;
  v59 = a7;
  v10 = *(_QWORD *)(a5 + 8);
  v11 = *(const char **)(v10 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v11, a3, (uint64_t)&protocol requirements base descriptor for Numeric, associated type descriptor for Numeric.Magnitude);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v11, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Numeric);
  v49 = *(const char **)(AssociatedConformanceWitness + 16);
  v47 = swift_getAssociatedTypeWitness(0, v49, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v13 = MEMORY[0x1E0C80A78](v47);
  v46 = (char *)&v44 - v14;
  v48 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = swift_checkMetadataState(0, AssociatedTypeWitness);
  v54 = *(v17 - 1);
  v18 = MEMORY[0x1E0C80A78](v17);
  v52 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v18);
  v51 = (char *)&v44 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v44 - v23;
  MEMORY[0x1E0C80A78](v22);
  v26 = (char *)&v44 - v25;
  type metadata accessor for ClosedRange(0, a3, *(_QWORD *)(*(_QWORD *)(v10 + 32) + 8), v27);
  v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(a5 + 88);
  v53 = a1;
  v28(v16, a1, a3, a5);
  v29 = swift_getAssociatedConformanceWitness(v10, a3, (uint64_t)v17, (uint64_t)&protocol requirements base descriptor for BinaryInteger, (uint64_t)&associated conformance descriptor for BinaryInteger.Numeric.Magnitude: BinaryInteger);
  v30 = *(void (**)(char *, uint64_t, uint64_t, unint64_t *, unint64_t))(v29 + 96);
  v55 = v10;
  v45 = v30;
  v30(v16, a3, v10, v17, v29);
  v31 = swift_getAssociatedConformanceWitness(a5, a3, (uint64_t)v17, (uint64_t)&protocol requirements base descriptor for FixedWidthInteger, (uint64_t)&associated conformance descriptor for FixedWidthInteger.Numeric.Magnitude: FixedWidthInteger);
  (*(void (**)(unint64_t *, unint64_t))(v31 + 64))(v17, v31);
  v32 = swift_getAssociatedConformanceWitness((uint64_t)v11, a3, (uint64_t)v17, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Comparable);
  LOBYTE(AssociatedTypeWitness) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(v32 + 8)
                                                                                                + 8))(v26, v24, v17);
  v33 = *(void (**)(char *, unint64_t *))(v54 + 8);
  v33(v24, v17);
  if ((AssociatedTypeWitness & 1) != 0)
  {
    v33(v26, v17);
    static FixedWidthInteger._random<A>(using:)(v57, (uint64_t)v17, v56, v31, v58, (uint64_t)v24);
    v34 = v55;
  }
  else
  {
    v54 = v29;
    v35 = v49;
    v36 = v47;
    v37 = swift_getAssociatedConformanceWitness((uint64_t)v49, (uint64_t)v17, v47, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    v38 = v46;
    (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(v37 + 8))(&qword_1816B7DB0, 512, v36, v37);
    (*((void (**)(char *, unint64_t *, const char *))v35 + 3))(v38, v17, v35);
    (*(void (**)(char *, char *, unint64_t *))(*(_QWORD *)(AssociatedConformanceWitness + 8) + 32))(v26, v24, v17);
    v33(v24, v17);
    (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v16, v53, a3);
    v39 = v51;
    v40 = v55;
    v45(v16, a3, v55, v17, v54);
    v41 = v52;
    RandomNumberGenerator.next<A>(upperBound:)(v26, v56, (uint64_t)v17, v58, v31, v52);
    v33(v26, v17);
    (*(void (**)(char *, char *, unint64_t *, unint64_t))(v31 + 80))(v24, v41, v17, v31);
    v33(v41, v17);
    v42 = v39;
    v29 = v54;
    v33(v42, v17);
    v34 = v40;
  }
  return (*(uint64_t (**)(char *, unint64_t *, unint64_t, uint64_t))(v34 + 96))(v24, v17, v29, a3);
}

uint64_t RandomNumberGenerator.next<A>()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;

  return static FixedWidthInteger._random<A>(using:)(v5, a2, a1, a4, a3, a5);
}

uint64_t static FixedWidthInteger.random(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return specialized static FixedWidthInteger.random<A>(in:using:)(a1, a2, a2, a3, a4);
}

uint64_t static FixedWidthInteger._nonMaskingRightShiftGeneric<A>(_:_:)(uint64_t a1, void (*a2)(char *, uint64_t, uint64_t), uint64_t a3, void (*a4)(char *, uint64_t), char *a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t (*v47)(uint64_t, char *);
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(_QWORD *, uint64_t);
  char v51;
  void (*v52)(char *, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, _QWORD *);
  char *v59;
  BOOL v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t);
  unint64_t v66;
  char v67;
  void (*v68)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t);
  unint64_t v69;
  char v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t (*v74)(_QWORD, _QWORD);
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t (*v79)(_QWORD, _QWORD);
  void (*v80)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t);
  unint64_t v81;
  void (*v82)(char *, uint64_t, uint64_t);
  char v83;
  char *v84;
  void (*v85)(char *, uint64_t, uint64_t);
  void (*v86)(char *, uint64_t, uint64_t);
  uint64_t v87;
  const char *v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  void (*v92)(char *, uint64_t, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t);
  unint64_t v97;
  char v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t (*v105)(_QWORD, _QWORD);
  void (*v106)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t);
  unint64_t v107;
  char v108;
  void (*v109)(char *, _QWORD *);
  char *v110;
  char v111;
  void (*v112)(char *, uint64_t, uint64_t);
  char *v113;
  uint64_t (*v114)(_QWORD *, uint64_t);
  uint64_t v115;
  void (*v116)(char *, uint64_t, uint64_t);
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  void (*v126)(char *, _QWORD *);
  char *v127;
  void (*v128)(char *, uint64_t, uint64_t);
  char v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void (*v133)(uint64_t *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t);
  unint64_t v134;
  uint64_t *v135;
  char *v136;
  char v137;
  char *v138;
  char *v139;
  uint64_t v140;
  void (*v141)(char *, uint64_t, uint64_t);
  char v142;
  const char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void (*v147)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v148;
  char *v149;
  char *v150;
  unint64_t v151;
  unint64_t v152;
  char *v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  void (*v159)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  char *v163;
  void (*v164)(char *, char *, uint64_t, char *);
  uint64_t v165;
  uint64_t (*v166)(uint64_t, uint64_t, uint64_t);
  char v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t (*v172)(_QWORD, _QWORD);
  void (*v173)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t);
  unint64_t v174;
  char *v175;
  char v176;
  uint64_t (*v177)(_QWORD, _QWORD);
  void (*v178)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t);
  unint64_t v179;
  char v180;
  char *v181;
  uint64_t v182;
  const char *v183;
  unint64_t v184;
  unint64_t AssociatedConformanceWitness;
  char *v186;
  char *v187;
  char v188;
  void (*v189)(char *, uint64_t, uint64_t);
  void (*v190)(char *, _QWORD *);
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  void (*v196)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  char *v203;
  char *v204;
  char *v205;
  char *v206;
  unint64_t v207;
  const char *v208;
  char *v209;
  char *v210;
  uint64_t (*v211)(_QWORD, _QWORD);
  char *v212;
  void (*v213)(char *, _QWORD *);
  uint64_t (*v214)(_QWORD *, uint64_t);
  char *v215;
  uint64_t v216;
  char *v217;
  unint64_t AssociatedTypeWitness;
  uint64_t v219;
  const char *v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  char *v224;
  char *v225;
  char *v226;
  uint64_t v227;
  char *v228;
  void (*v229)(char *, uint64_t, uint64_t);
  uint64_t (*v230)(uint64_t, char *);
  uint64_t v231;
  _QWORD v232[2];

  v229 = a2;
  v227 = a1;
  v221 = *((_QWORD *)a5 + 1);
  v220 = *(const char **)(*(_QWORD *)(v221 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v220, a3, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v10 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v217 = (char *)&v202 - v11;
  v219 = *(_QWORD *)(a3 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v225 = (char *)&v202 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  v224 = (char *)&v202 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v226 = (char *)&v202 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v228 = (char *)&v202 - v19;
  MEMORY[0x1E0C80A78](v18);
  v21 = (uint64_t)&v202 - v20;
  v208 = *(const char **)(*(_QWORD *)(a6 + 24) + 16);
  v207 = swift_getAssociatedTypeWitness(0, v208, (uint64_t)a4, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v22 = MEMORY[0x1E0C80A78](v207);
  v206 = (char *)&v202 - v23;
  v24 = *((_QWORD *)a4 - 1);
  v25 = MEMORY[0x1E0C80A78](v22);
  v203 = (char *)&v202 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v25);
  v209 = (char *)&v202 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v212 = (char *)&v202 - v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v204 = (char *)&v202 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v210 = (char *)&v202 - v34;
  v35 = MEMORY[0x1E0C80A78](v33);
  v215 = (char *)&v202 - v36;
  v37 = MEMORY[0x1E0C80A78](v35);
  v205 = (char *)&v202 - v38;
  v39 = MEMORY[0x1E0C80A78](v37);
  v41 = (char *)&v202 - v40;
  v42 = MEMORY[0x1E0C80A78](v39);
  v44 = (char *)&v202 - v43;
  MEMORY[0x1E0C80A78](v42);
  v46 = (char *)&v202 - v45;
  v47 = (uint64_t (*)(uint64_t, char *))*((_QWORD *)a5 + 7);
  v223 = a5;
  v230 = v47;
  v48 = v47(a3, a5);
  v49 = -v48;
  if (__OFSUB__(0, v48))
  {
    __break(1u);
    goto LABEL_82;
  }
  v222 = (uint64_t)v46;
  v50 = *(uint64_t (**)(_QWORD *, uint64_t))(a6 + 64);
  v51 = v50(a4, a6);
  v216 = v21;
  v211 = (uint64_t (*)(_QWORD, _QWORD))v50;
  if ((v51 & 1) == 0)
  {
    v61 = v50(a4, a6);
    v214 = *(uint64_t (**)(_QWORD *, uint64_t))(a6 + 128);
    v62 = v214(a4, a6);
    if ((v61 & 1) == 0)
    {
      v56 = v222;
      v44 = v223;
      if (v62 >= 64)
      {
        v93 = (*(uint64_t (**)(char *, _QWORD, void (*)(char *, uint64_t)))(v24 + 16))(v41, v229, a4);
        if (v49 <= 0)
        {
          v58 = *(void (**)(char *, _QWORD *))(v24 + 8);
          v58(v41, a4);
        }
        else
        {
          v232[0] = v49;
          v96 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(a6 + 96);
          v97 = lazy protocol witness table accessor for type Int and conformance Int(v93, v94, v95);
          v96(v232, &type metadata for Int, v97, a4, a6);
          v98 = (*(uint64_t (**)(char *, uint64_t, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(a6 + 32) + 8)
                                                                                                 + 16))(v41, v56, a4);
          v58 = *(void (**)(char *, _QWORD *))(v24 + 8);
          v58((char *)v56, a4);
          v58(v41, a4);
          v71 = v225;
          if ((v98 & 1) != 0)
            goto LABEL_28;
        }
LABEL_16:
        v213 = v58;
        v73 = v230(a3, v44);
        v74 = v211;
        v75 = v211(a4, a6);
        v76 = v214(a4, a6);
        if ((v75 & 1) != 0)
        {
          if (v76 > 64)
          {
            v232[0] = v73;
            v79 = v74;
            v80 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(a6 + 96);
            v81 = lazy protocol witness table accessor for type Int and conformance Int(v76, v77, v78);
            v80(v232, &type metadata for Int, v81, a4, a6);
            v74 = v79;
            v82 = v229;
            v83 = (*(uint64_t (**)(uint64_t, _QWORD, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(a6 + 32) + 8) + 16))(v56, v229, a4);
            v213((char *)v56, a4);
            v84 = v212;
            if ((v83 & 1) == 0)
            {
              v85 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
              goto LABEL_32;
            }
            goto LABEL_52;
          }
        }
        else if (v76 > 63)
        {
          v85 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
          v101 = v205;
          v102 = ((uint64_t (*)(char *, _QWORD, void (*)(char *, uint64_t)))v85)(v205, v229, a4);
          v84 = v212;
          if (v73 < 0)
          {
            v213(v101, a4);
            goto LABEL_52;
          }
          v232[0] = v73;
          v105 = v74;
          v106 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(a6 + 96);
          v107 = lazy protocol witness table accessor for type Int and conformance Int(v102, v103, v104);
          v106(v232, &type metadata for Int, v107, a4, a6);
          v74 = v105;
          v108 = (*(uint64_t (**)(uint64_t, char *, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(a6 + 32) + 8)
                                                                                                  + 16))(v56, v101, a4);
          v109 = v213;
          v213((char *)v56, a4);
          v109(v101, a4);
          v82 = v229;
          if ((v108 & 1) != 0)
          {
LABEL_52:
            v44 = v223;
            v222 = v230(a3, v223);
LABEL_57:
            v100 = v228;
            v71 = v225;
            goto LABEL_58;
          }
LABEL_32:
          v110 = v215;
          v85(v215, (uint64_t)v82, (uint64_t)a4);
          v111 = v74(a4, a6);
          v112 = v85;
          v113 = v210;
          v229 = v112;
          v112(v210, (uint64_t)v110, (uint64_t)a4);
          if ((v111 & 1) != 0)
          {
            v114 = v214;
            v115 = v214(a4, a6);
            v213(v113, a4);
            v116 = v229;
            if (v115 < 65)
              goto LABEL_40;
            v117 = v204;
            v229(v204, (uint64_t)v215, (uint64_t)a4);
            v232[0] = 0x8000000000000000;
            if ((v74(a4, a6) & 1) != 0)
            {
              v118 = v214(a4, a6);
              if (v118 < 64)
              {
                v116((char *)v56, (uint64_t)v117, (uint64_t)a4);
                v121 = (*(uint64_t (**)(_QWORD *, uint64_t))(a6 + 120))(a4, a6);
                v213((char *)v56, a4);
                v122 = v117;
                v114 = v214;
                if (v121 < v232[0])
                  goto LABEL_91;
                goto LABEL_39;
              }
              v177 = v74;
              v178 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(a6 + 96);
              v179 = lazy protocol witness table accessor for type Int and conformance Int(v118, v119, v120);
              v178(v232, &type metadata for Int, v179, a4, a6);
              v74 = v177;
              v56 = v222;
              v180 = (*(uint64_t (**)(char *, uint64_t, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(a6 + 32) + 8) + 16))(v117, v222, a4);
              v213((char *)v56, a4);
              v122 = v117;
              v114 = v214;
              if ((v180 & 1) != 0)
LABEL_91:
                _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent a signed value", 43, 2, "Swift/Integers.swift", 20, 2, 0xE61uLL, 0);
            }
            else
            {
              v168 = v74(a4, a6);
              v114 = v214;
              v169 = v214(a4, a6);
              if ((v168 & 1) != 0)
              {
                if (v169 <= 64)
                {
                  v183 = v208;
                  v184 = v207;
                  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v208, (uint64_t)a4, v207, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                  v186 = v206;
                  (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness
                                                                                              + 8))(&unk_1816B7DA8, 256, v184, AssociatedConformanceWitness);
                  (*((void (**)(char *, void (*)(char *, uint64_t), const char *))v183 + 3))(v186, a4, v183);
                  v187 = v204;
                  v188 = (*(uint64_t (**)(char *, uint64_t, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(a6 + 32) + 8) + 16))(v204, v56, a4);
                  v189 = v116;
                  v190 = v213;
                  v213((char *)v56, a4);
                  v191 = v203;
                  v189(v203, (uint64_t)v187, (uint64_t)a4);
                  v84 = v212;
                  if ((v188 & 1) != 0)
                  {
                    v190(v191, a4);
                    goto LABEL_91;
                  }
                  v192 = v232[0];
                  v193 = (*(uint64_t (**)(_QWORD *, uint64_t))(a6 + 120))(a4, a6);
                  v190(v191, a4);
                  v60 = v193 < v192;
                  v74 = v211;
                  v122 = v204;
                  v116 = v229;
                  if (v60)
                    goto LABEL_91;
                }
                else
                {
                  v172 = v74;
                  v173 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(a6 + 96);
                  v174 = lazy protocol witness table accessor for type Int and conformance Int(v169, v170, v171);
                  v173(v232, &type metadata for Int, v174, a4, a6);
                  v74 = v172;
                  v175 = v204;
                  v176 = (*(uint64_t (**)(char *, uint64_t, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(a6 + 32) + 8) + 16))(v204, v56, a4);
                  v213((char *)v56, a4);
                  v122 = v175;
                  v84 = v212;
                  if ((v176 & 1) != 0)
                    goto LABEL_91;
                }
              }
              else if (v169 < 64)
              {
                v181 = v204;
                v116((char *)v56, (uint64_t)v204, (uint64_t)a4);
                v182 = (*(uint64_t (**)(_QWORD *, uint64_t))(a6 + 120))(a4, a6);
                v213((char *)v56, a4);
                v122 = v181;
                v84 = v212;
                if (v182 < v232[0])
                  goto LABEL_91;
              }
              else
              {
                v84 = v212;
                v122 = v204;
              }
            }
          }
          else
          {
            v122 = v113;
            v114 = v214;
            v116 = v229;
          }
LABEL_39:
          v213(v122, a4);
LABEL_40:
          v123 = v215;
          v124 = v114(a4, a6);
          v116(v84, (uint64_t)v123, (uint64_t)a4);
          if (v124 < 65)
          {
            v125 = v114(a4, a6);
            v126 = v213;
            v213(v84, a4);
            if (v125 != 64 || (v74(a4, a6) & 1) != 0)
              goto LABEL_56;
          }
          else
          {
            v213(v84, a4);
          }
          v127 = v209;
          v128 = v229;
          v229(v209, (uint64_t)v215, (uint64_t)a4);
          v232[0] = 0x7FFFFFFFFFFFFFFFLL;
          v129 = v74(a4, a6);
          v130 = v114(a4, a6);
          if ((v129 & 1) != 0)
          {
            if (v130 > 64)
            {
              v133 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(a6 + 96);
              v134 = lazy protocol witness table accessor for type Int and conformance Int(v130, v131, v132);
              v135 = v232;
LABEL_54:
              v133(v135, &type metadata for Int, v134, a4, a6);
              v137 = (*(uint64_t (**)(uint64_t, char *, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(a6 + 32) + 8) + 16))(v56, v127, a4);
              v138 = v127;
              v126 = v213;
              v213((char *)v56, a4);
              if ((v137 & 1) != 0)
                goto LABEL_89;
              v126(v138, a4);
              goto LABEL_56;
            }
          }
          else if (v130 > 63)
          {
            v231 = 0x7FFFFFFFFFFFFFFFLL;
            v133 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(a6 + 96);
            v134 = lazy protocol witness table accessor for type Int and conformance Int(v130, v131, v132);
            v135 = &v231;
            goto LABEL_54;
          }
          v128((char *)v56, (uint64_t)v127, (uint64_t)a4);
          (*(void (**)(_QWORD *, uint64_t))(a6 + 120))(a4, a6);
          v136 = v127;
          v126 = v213;
          v213((char *)v56, a4);
          v126(v136, a4);
LABEL_56:
          v139 = v215;
          v222 = (*(uint64_t (**)(_QWORD *, uint64_t))(a6 + 120))(a4, a6);
          v126(v139, a4);
          v44 = v223;
          goto LABEL_57;
        }
        v85 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
        v86 = v229;
        v85((char *)v56, (uint64_t)v229, (uint64_t)a4);
        v87 = (*(uint64_t (**)(_QWORD *, uint64_t))(a6 + 120))(a4, a6);
        v213((char *)v56, a4);
        v60 = v73 < v87;
        v82 = v86;
        v84 = v212;
        if (v60)
          goto LABEL_52;
        goto LABEL_32;
      }
      (*(void (**)(uint64_t, _QWORD, void (*)(char *, uint64_t)))(v24 + 16))(v222, v229, a4);
      v72 = (*(uint64_t (**)(_QWORD *, uint64_t))(a6 + 120))(a4, a6);
      v58 = *(void (**)(char *, _QWORD *))(v24 + 8);
      v58((char *)v56, a4);
      v60 = v72 < v49;
      goto LABEL_15;
    }
    v56 = v222;
    if (v62 <= 64)
    {
      v88 = v208;
      v89 = v207;
      v90 = swift_getAssociatedConformanceWitness((uint64_t)v208, (uint64_t)a4, v207, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v91 = v206;
      (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v90 + 8))(&unk_1816B7DA8, 256, v89, v90);
      (*((void (**)(char *, void (*)(char *, uint64_t), const char *))v88 + 3))(v91, a4, v88);
      v92 = v229;
      LOBYTE(v89) = (*(uint64_t (**)(_QWORD, uint64_t, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(a6 + 32) + 8) + 16))(v229, v56, a4);
      v58 = *(void (**)(char *, _QWORD *))(v24 + 8);
      v58((char *)v56, a4);
      (*(void (**)(char *, _QWORD, void (*)(char *, uint64_t)))(v24 + 16))(v44, v92, a4);
      if ((v89 & 1) != 0)
      {
        v58(v44, a4);
        v44 = v223;
        v71 = v225;
        goto LABEL_28;
      }
      v57 = (*(uint64_t (**)(_QWORD *, uint64_t))(a6 + 120))(a4, a6);
      v59 = v44;
      goto LABEL_5;
    }
    v232[0] = v49;
    v65 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(a6 + 96);
    v66 = lazy protocol witness table accessor for type Int and conformance Int(v62, v63, v64);
    v65(v232, &type metadata for Int, v66, a4, a6);
    v67 = (*(uint64_t (**)(_QWORD, uint64_t, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(a6 + 32) + 8)
                                                                                           + 16))(v229, v56, a4);
LABEL_10:
    v70 = v67;
    v58 = *(void (**)(char *, _QWORD *))(v24 + 8);
    v58((char *)v56, a4);
    v44 = v223;
    v71 = v225;
    if ((v70 & 1) == 0)
      goto LABEL_16;
    goto LABEL_28;
  }
  v52 = v229;
  v214 = *(uint64_t (**)(_QWORD *, uint64_t))(a6 + 128);
  v53 = v214(a4, a6);
  if (v53 >= 64)
  {
    v232[0] = v49;
    v68 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(a6 + 96);
    v69 = lazy protocol witness table accessor for type Int and conformance Int(v53, v54, v55);
    v56 = v222;
    v68(v232, &type metadata for Int, v69, a4, a6);
    v67 = (*(uint64_t (**)(_QWORD, uint64_t, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(a6 + 32) + 8)
                                                                                           + 16))(v52, v56, a4);
    goto LABEL_10;
  }
  v56 = v222;
  (*(void (**)(uint64_t, _QWORD, void (*)(char *, uint64_t)))(v24 + 16))(v222, v52, a4);
  v57 = (*(uint64_t (**)(_QWORD *, uint64_t))(a6 + 120))(a4, a6);
  v58 = *(void (**)(char *, _QWORD *))(v24 + 8);
  v59 = (char *)v56;
LABEL_5:
  v58(v59, a4);
  v60 = v57 < v49;
  v44 = v223;
LABEL_15:
  v71 = v225;
  if (!v60)
    goto LABEL_16;
LABEL_28:
  v99 = v230(a3, v44);
  if (__OFSUB__(0, v99))
  {
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
  }
  v222 = -v99;
  v100 = v228;
LABEL_58:
  v140 = v219;
  v141 = *(void (**)(char *, uint64_t, uint64_t))(v219 + 32);
  v141(v100, v227, a3);
  a6 = v221;
  v142 = (*(uint64_t (**)(uint64_t, uint64_t))(v221 + 64))(a3, v221);
  v143 = v220;
  v229 = v141;
  if ((v142 & 1) != 0)
  {
    v144 = v230(a3, v44);
    if (!__OFSUB__(v144, 1))
    {
      v232[0] = v144 - 1;
      v147 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a6 + 96);
      v148 = lazy protocol witness table accessor for type Int and conformance Int(v144, v145, v146);
      v149 = v224;
      v147(v232, &type metadata for Int, v148, a3, a6);
      (*((void (**)(char *, char *, uint64_t, char *))v44 + 25))(v100, v149, a3, v44);
      v150 = v149;
      v49 = (uint64_t)v225;
      (*(void (**)(char *, uint64_t))(v140 + 8))(v150, a3);
      v151 = AssociatedTypeWitness;
      v152 = swift_getAssociatedConformanceWitness((uint64_t)v143, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v153 = v217;
      goto LABEL_62;
    }
    goto LABEL_88;
  }
  v154 = (uint64_t)v71;
  v155 = AssociatedTypeWitness;
  v152 = swift_getAssociatedConformanceWitness((uint64_t)v220, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  v153 = v217;
  (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v152 + 8))(&unk_1816B7DA8, 256, v155, v152);
  (*((void (**)(char *, uint64_t, const char *))v143 + 3))(v153, a3, v143);
  v151 = v155;
  v49 = v154;
LABEL_62:
  (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v152 + 8))(&unk_1816B7DA8, 256, v151, v152);
  (*((void (**)(char *, uint64_t, const char *))v143 + 3))(v153, a3, v143);
  a4 = *(void (**)(char *, uint64_t))(v140 + 8);
  v21 = v222;
  if (v222 < 0)
  {
LABEL_82:
    a4(v226, a3);
    v194 = v230(a3, v44);
    v157 = v228;
    if (__OFSUB__(0, v194))
    {
      __break(1u);
    }
    else if (-v194 < v21)
    {
      v195 = ((uint64_t (*)(uint64_t, uint64_t))a4)(v49, a3);
      v232[0] = -v21;
      v196 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a6 + 96);
      v199 = lazy protocol witness table accessor for type Int and conformance Int(v195, v197, v198);
      v163 = v224;
      v196(v232, &type metadata for Int, v199, a3, a6);
      v164 = (void (*)(char *, char *, uint64_t, char *))*((_QWORD *)v44 + 27);
      goto LABEL_65;
    }
    a4(v157, a3);
    v201 = (char *)v49;
    v165 = v216;
    v200 = v216;
LABEL_86:
    v166 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v229;
    v229((char *)v200, (uint64_t)v201, a3);
    return v166(v227, v165, a3);
  }
  a4((char *)v49, a3);
  v156 = v230(a3, v44);
  v157 = v228;
  if (v21 >= v156)
  {
    a4(v228, a3);
    v165 = v216;
    v200 = v216;
    v201 = v226;
    goto LABEL_86;
  }
  v158 = ((uint64_t (*)(char *, uint64_t))a4)(v226, a3);
  v232[0] = v21;
  v159 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a6 + 96);
  v162 = lazy protocol witness table accessor for type Int and conformance Int(v158, v160, v161);
  v163 = v224;
  v159(v232, &type metadata for Int, v162, a3, a6);
  v164 = (void (*)(char *, char *, uint64_t, char *))*((_QWORD *)v44 + 25);
LABEL_65:
  v165 = v216;
  v164(v157, v163, a3, v44);
  a4(v163, a3);
  a4(v157, a3);
  v166 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v229;
  return v166(v227, v165, a3);
}

uint64_t static FixedWidthInteger.>>= infix<A>(_:_:)(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void (*v8)(char *, uint64_t);
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(_QWORD *, uint64_t);
  char v51;
  void (*v52)(_QWORD, _QWORD, _QWORD);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  void (*v59)(char *, _QWORD *);
  BOOL v60;
  uint64_t v61;
  char v62;
  void (*v63)(_QWORD, _QWORD, _QWORD);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t);
  unint64_t v68;
  char *v69;
  char v70;
  void (*v71)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t);
  unint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(_QWORD *, uint64_t);
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t);
  unint64_t v84;
  char *v85;
  char *v86;
  char v87;
  uint64_t (*v88)(char *, char *, void (*)(char *, uint64_t));
  const char *v89;
  unint64_t v90;
  unint64_t AssociatedConformanceWitness;
  void (*v92)(_QWORD, _QWORD, _QWORD);
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t);
  unint64_t v101;
  char *v102;
  char v103;
  char *v104;
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void (*v111)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t);
  unint64_t v112;
  char *v113;
  char v114;
  void (*v115)(char *, _QWORD *);
  char *v116;
  char v117;
  char *v118;
  uint64_t (*v119)(_QWORD *, uint64_t);
  uint64_t v120;
  void (*v121)(char *, _QWORD *);
  char *v122;
  char *v123;
  uint64_t (*v124)(_QWORD *, uint64_t);
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  void (*v130)(char *, _QWORD *);
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void (*v139)(uint64_t *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t);
  unint64_t v140;
  uint64_t *v141;
  char *v142;
  char *v143;
  uint64_t v144;
  char *v145;
  char *v146;
  char v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void (*v154)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v155;
  char *v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  char *v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  void (*v164)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  char *v168;
  char *v169;
  char *v170;
  uint64_t (*v171)(uint64_t, char *, uint64_t);
  char v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  void (*v177)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t);
  unint64_t v178;
  char *v179;
  char *v180;
  char v181;
  void (*v182)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t);
  unint64_t v183;
  char *v184;
  char v185;
  char *v186;
  void (*v187)(char *, _QWORD *);
  char *v188;
  char *v189;
  uint64_t v190;
  char *v191;
  void (**v192)(char *, void (*)(char *, uint64_t), const char *);
  unint64_t v193;
  unint64_t v194;
  char *v195;
  char *v196;
  char *v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  void (*v203)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  char *v207;
  char *v208;
  char *v209;
  char *v210;
  char *v211;
  char *v212;
  unint64_t AssociatedTypeWitness;
  char *v214;
  char *v215;
  void (*v216)(char *, _QWORD *);
  char *v217;
  char *v218;
  uint64_t (*v219)(_QWORD *, uint64_t);
  uint64_t (*v220)(_QWORD *, uint64_t);
  char *v221;
  const char *v222;
  char *v223;
  char *v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  char *v230;
  char *v231;
  char *v232;
  void (*v233)(_QWORD, _QWORD, _QWORD);
  char *v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  _QWORD v239[2];

  v6 = a6;
  v8 = (void (*)(char *, uint64_t))a4;
  v233 = a2;
  v236 = a1;
  v214 = *(char **)(*(_QWORD *)(a6 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v214, a4, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v212 = (char *)&v209 - v10;
  v227 = *(_QWORD *)(a5 + 8);
  v11 = *(const char **)(*(_QWORD *)(v227 + 24) + 16);
  v225 = swift_getAssociatedTypeWitness(0, v11, a3, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v12 = MEMORY[0x1E0C80A78](v225);
  v224 = (char *)&v209 - v13;
  v226 = *(_QWORD *)(a3 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v230 = (char *)&v209 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v229 = (char *)&v209 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v234 = (char *)&v209 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v235 = (char *)&v209 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v223 = (char *)&v209 - v23;
  v24 = *((_QWORD *)v8 - 1);
  v25 = MEMORY[0x1E0C80A78](v22);
  v27 = (uint64_t)&v209 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x1E0C80A78](v25);
  v30 = (char *)&v209 - v29;
  v31 = MEMORY[0x1E0C80A78](v28);
  v211 = (char *)&v209 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v35 = (char *)&v209 - v34;
  v36 = MEMORY[0x1E0C80A78](v33);
  v218 = (char *)&v209 - v37;
  v38 = MEMORY[0x1E0C80A78](v36);
  v217 = (char *)&v209 - v39;
  v40 = MEMORY[0x1E0C80A78](v38);
  v210 = (char *)&v209 - v41;
  v42 = MEMORY[0x1E0C80A78](v40);
  v215 = (char *)&v209 - v43;
  v44 = MEMORY[0x1E0C80A78](v42);
  v221 = (char *)&v209 - v45;
  MEMORY[0x1E0C80A78](v44);
  v232 = (char *)&v209 - v46;
  v47 = *(char **)(a5 + 56);
  v237 = a5;
  v231 = v47;
  v48 = ((uint64_t (*)(uint64_t, uint64_t))v47)(a3, a5);
  v49 = -v48;
  if (__OFSUB__(0, v48))
  {
    __break(1u);
    goto LABEL_85;
  }
  v209 = v35;
  v50 = *(uint64_t (**)(_QWORD *, uint64_t))(v6 + 64);
  v51 = v50(v8, v6);
  v228 = v24;
  v222 = v11;
  v219 = v50;
  if ((v51 & 1) != 0)
  {
    v52 = v233;
    v220 = *(uint64_t (**)(_QWORD *, uint64_t))(v6 + 128);
    v53 = v220(v8, v6);
    if (v53 < 64)
    {
      v56 = v228;
      v57 = v232;
      (*(void (**)(char *, _QWORD, void (*)(char *, uint64_t)))(v228 + 16))(v232, v52, v8);
      v58 = (*(uint64_t (**)(_QWORD *, uint64_t))(v6 + 120))(v8, v6);
      v59 = *(void (**)(char *, _QWORD *))(v56 + 8);
      v59(v57, v8);
      v60 = v58 < v49;
      v61 = v237;
      goto LABEL_14;
    }
    v239[0] = v49;
    v71 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(v6 + 96);
    v72 = lazy protocol witness table accessor for type Int and conformance Int(v53, v54, v55);
    v69 = v232;
    v71(v239, &type metadata for Int, v72, v8, v6);
    v70 = (*(uint64_t (**)(_QWORD, char *, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8)
                                                                                          + 16))(v52, v69, v8);
    goto LABEL_9;
  }
  v62 = v50(v8, v6);
  v63 = v233;
  v220 = *(uint64_t (**)(_QWORD *, uint64_t))(v6 + 128);
  v64 = v220(v8, v6);
  if ((v62 & 1) == 0)
  {
    v73 = v237;
    if (v64 < 64)
    {
      v74 = v232;
      (*(void (**)(char *, _QWORD, void (*)(char *, uint64_t)))(v24 + 16))(v232, v63, v8);
      v75 = (*(uint64_t (**)(_QWORD *, uint64_t))(v6 + 120))(v8, v6);
      v59 = *(void (**)(char *, _QWORD *))(v24 + 8);
      v59(v74, v8);
      v60 = v75 < v49;
      v61 = v73;
LABEL_14:
      v30 = v231;
      if (!v60)
        goto LABEL_15;
      goto LABEL_50;
    }
    v97 = (*(uint64_t (**)(uint64_t, _QWORD, void (*)(char *, uint64_t)))(v24 + 16))(v27, v63, v8);
    if (v49 <= 0)
    {
      v59 = *(void (**)(char *, _QWORD *))(v24 + 8);
      v59((char *)v27, v8);
      v61 = v73;
      v30 = v231;
      goto LABEL_15;
    }
    v239[0] = v49;
    v100 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(v6 + 96);
    v101 = lazy protocol witness table accessor for type Int and conformance Int(v97, v98, v99);
    v102 = v232;
    v100(v239, &type metadata for Int, v101, v8, v6);
    v103 = (*(uint64_t (**)(uint64_t, char *, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8)
                                                                                            + 16))(v27, v102, v8);
    v104 = v102;
    v59 = *(void (**)(char *, _QWORD *))(v24 + 8);
    v59(v104, v8);
    v59((char *)v27, v8);
    v61 = v73;
    v30 = v231;
    if ((v103 & 1) == 0)
      goto LABEL_15;
LABEL_50:
    v96 = ((uint64_t (*)(uint64_t, uint64_t))v30)(a3, v61);
    goto LABEL_51;
  }
  if (v64 > 64)
  {
    v239[0] = v49;
    v67 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(v6 + 96);
    v68 = lazy protocol witness table accessor for type Int and conformance Int(v64, v65, v66);
    v69 = v232;
    v67(v239, &type metadata for Int, v68, v8, v6);
    v70 = (*(uint64_t (**)(_QWORD, char *, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8)
                                                                                          + 16))(v63, v69, v8);
LABEL_9:
    v59 = *(void (**)(char *, _QWORD *))(v228 + 8);
    v59(v69, v8);
    v61 = v237;
    v30 = v231;
    if ((v70 & 1) == 0)
      goto LABEL_15;
    goto LABEL_50;
  }
  v89 = v214;
  v90 = AssociatedTypeWitness;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v214, (uint64_t)v8, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  v92 = v63;
  v93 = v212;
  (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, v90, AssociatedConformanceWitness);
  v94 = v232;
  (*((void (**)(char *, void (*)(char *, uint64_t), const char *))v89 + 3))(v93, v8, v89);
  LOBYTE(v90) = (*(uint64_t (**)(_QWORD, char *, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8)
                                                                                                + 16))(v92, v94, v8);
  v95 = v228;
  v59 = *(void (**)(char *, _QWORD *))(v228 + 8);
  v59(v94, v8);
  (*(void (**)(char *, _QWORD, void (*)(char *, uint64_t)))(v95 + 16))(v30, v92, v8);
  if ((v90 & 1) == 0)
  {
    v144 = (*(uint64_t (**)(_QWORD *, uint64_t))(v6 + 120))(v8, v6);
    v59(v30, v8);
    v60 = v144 < v49;
    v61 = v237;
    v30 = v231;
    if (!v60)
    {
LABEL_15:
      v216 = v59;
      v76 = ((uint64_t (*)(uint64_t, uint64_t))v30)(a3, v61);
      v77 = v219;
      v78 = v219(v8, v6);
      v79 = v220(v8, v6);
      if ((v78 & 1) != 0)
      {
        v82 = v228;
        if (v79 > 64)
        {
          v239[0] = v76;
          v83 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(v6 + 96);
          v84 = lazy protocol witness table accessor for type Int and conformance Int(v79, v80, v81);
          v85 = v232;
          v83(v239, &type metadata for Int, v84, v8, v6);
          v86 = v233;
          v87 = (*(uint64_t (**)(char *, _QWORD, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8)
                                                                                                + 16))(v85, v233, v8);
          v216(v85, v8);
          if ((v87 & 1) == 0)
          {
            v88 = *(uint64_t (**)(char *, char *, void (*)(char *, uint64_t)))(v82 + 16);
            goto LABEL_31;
          }
          goto LABEL_55;
        }
        v88 = *(uint64_t (**)(char *, char *, void (*)(char *, uint64_t)))(v228 + 16);
      }
      else
      {
        if (v79 > 63)
        {
          v88 = *(uint64_t (**)(char *, char *, void (*)(char *, uint64_t)))(v228 + 16);
          v107 = v211;
          v108 = v88(v211, (char *)v233, v8);
          if (v76 < 0)
          {
            v216(v107, v8);
            goto LABEL_55;
          }
          v239[0] = v76;
          v111 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(v6 + 96);
          v112 = lazy protocol witness table accessor for type Int and conformance Int(v108, v109, v110);
          v113 = v232;
          v111(v239, &type metadata for Int, v112, v8, v6);
          v114 = (*(uint64_t (**)(char *, char *, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8)
                                                                                                 + 16))(v113, v107, v8);
          v115 = v216;
          v216(v113, v8);
          v115(v107, v8);
          v86 = v233;
          if ((v114 & 1) != 0)
          {
LABEL_55:
            v27 = ((uint64_t (*)(uint64_t, uint64_t))v30)(a3, v237);
LABEL_60:
            v145 = v235;
            v35 = v230;
            goto LABEL_61;
          }
LABEL_31:
          v116 = v221;
          v88(v221, (char *)v86, v8);
          v117 = v77(v8, v6);
          v118 = v215;
          v88(v215, v116, v8);
          if ((v117 & 1) != 0)
          {
            v119 = v220;
            v120 = v220(v8, v6);
            v121 = v216;
            v216(v118, v8);
            v122 = v217;
            if (v120 < 65)
              goto LABEL_39;
            v123 = v210;
            v88(v210, v221, v8);
            v239[0] = 0x8000000000000000;
            v124 = v219;
            if ((v219(v8, v6) & 1) != 0)
            {
              v125 = v220(v8, v6);
              if (v125 < 64)
              {
                v128 = v232;
                v88(v232, v123, v8);
                v129 = (*(uint64_t (**)(_QWORD *, uint64_t))(v6 + 120))(v8, v6);
                v130 = v216;
                v216(v128, v8);
                v119 = v220;
                v131 = v123;
                v121 = v130;
                if (v129 < v239[0])
                  goto LABEL_94;
                goto LABEL_38;
              }
              v182 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(v6 + 96);
              v183 = lazy protocol witness table accessor for type Int and conformance Int(v125, v126, v127);
              v184 = v232;
              v182(v239, &type metadata for Int, v183, v8, v6);
              v185 = (*(uint64_t (**)(char *, char *, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8) + 16))(v123, v184, v8);
              v186 = v184;
              v122 = v217;
              v187 = v216;
              v216(v186, v8);
              v119 = v220;
              v131 = v123;
              v121 = v187;
              if ((v185 & 1) != 0)
LABEL_94:
                _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent a signed value", 43, 2, "Swift/Integers.swift", 20, 2, 0xE61uLL, 0);
            }
            else
            {
              v173 = v124(v8, v6);
              v119 = v220;
              v174 = v220(v8, v6);
              if ((v173 & 1) != 0)
              {
                v121 = v216;
                if (v174 <= 64)
                {
                  v192 = (void (**)(char *, void (*)(char *, uint64_t), const char *))v214;
                  v193 = AssociatedTypeWitness;
                  v194 = swift_getAssociatedConformanceWitness((uint64_t)v214, (uint64_t)v8, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                  v195 = v212;
                  (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v194 + 8))(&unk_1816B7DA8, 256, v193, v194);
                  v196 = v232;
                  v192[3](v195, v8, (const char *)v192);
                  v197 = v210;
                  LOBYTE(v192) = (*(uint64_t (**)(char *, char *, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8) + 16))(v210, v196, v8);
                  v121(v196, v8);
                  v198 = v209;
                  v88(v209, v197, v8);
                  if ((v192 & 1) != 0)
                  {
                    v121(v198, v8);
                    goto LABEL_94;
                  }
                  v199 = v239[0];
                  v200 = (*(uint64_t (**)(_QWORD *, uint64_t))(v6 + 120))(v8, v6);
                  v121(v198, v8);
                  v60 = v200 < v199;
                  v122 = v217;
                  v119 = v220;
                  v131 = v210;
                  if (v60)
                    goto LABEL_94;
                }
                else
                {
                  v177 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(v6 + 96);
                  v178 = lazy protocol witness table accessor for type Int and conformance Int(v174, v175, v176);
                  v179 = v232;
                  v177(v239, &type metadata for Int, v178, v8, v6);
                  v180 = v210;
                  v181 = (*(uint64_t (**)(char *, char *, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8) + 16))(v210, v179, v8);
                  v121(v179, v8);
                  v131 = v180;
                  v122 = v217;
                  v119 = v220;
                  if ((v181 & 1) != 0)
                    goto LABEL_94;
                }
              }
              else
              {
                v121 = v216;
                if (v174 < 64)
                {
                  v188 = v232;
                  v189 = v210;
                  v88(v232, v210, v8);
                  v190 = (*(uint64_t (**)(_QWORD *, uint64_t))(v6 + 120))(v8, v6);
                  v191 = v188;
                  v119 = v220;
                  v121(v191, v8);
                  v131 = v189;
                  v122 = v217;
                  if (v190 < v239[0])
                    goto LABEL_94;
                }
                else
                {
                  v122 = v217;
                  v131 = v210;
                }
              }
            }
          }
          else
          {
            v131 = v118;
            v122 = v217;
            v119 = v220;
            v121 = v216;
          }
LABEL_38:
          v121(v131, v8);
LABEL_39:
          v132 = v221;
          v133 = v119(v8, v6);
          v88(v122, v132, v8);
          if (v133 < 65)
          {
            v134 = v119(v8, v6);
            v121(v122, v8);
            if (v134 != 64 || (v219(v8, v6) & 1) != 0)
              goto LABEL_59;
          }
          else
          {
            v121(v122, v8);
          }
          v88(v218, v221, v8);
          v239[0] = 0x7FFFFFFFFFFFFFFFLL;
          v135 = v219(v8, v6);
          v136 = v119(v8, v6);
          if ((v135 & 1) != 0)
          {
            if (v136 > 64)
            {
              v139 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(v6 + 96);
              v140 = lazy protocol witness table accessor for type Int and conformance Int(v136, v137, v138);
              v141 = v239;
              goto LABEL_57;
            }
          }
          else if (v136 > 63)
          {
            v238 = 0x7FFFFFFFFFFFFFFFLL;
            v139 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(v6 + 96);
            v140 = lazy protocol witness table accessor for type Int and conformance Int(v136, v137, v138);
            v141 = &v238;
LABEL_57:
            v146 = v232;
            v139(v141, &type metadata for Int, v140, v8, v6);
            v143 = v218;
            v147 = (*(uint64_t (**)(char *, char *, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8) + 16))(v146, v218, v8);
            v121(v146, v8);
            if ((v147 & 1) != 0)
              goto LABEL_92;
            goto LABEL_58;
          }
          v142 = v232;
          v143 = v218;
          v88(v232, v218, v8);
          (*(void (**)(_QWORD *, uint64_t))(v6 + 120))(v8, v6);
          v121(v142, v8);
LABEL_58:
          v121(v143, v8);
LABEL_59:
          v148 = v221;
          v27 = (*(uint64_t (**)(_QWORD *, uint64_t))(v6 + 120))(v8, v6);
          v121(v148, v8);
          goto LABEL_60;
        }
        v88 = *(uint64_t (**)(char *, char *, void (*)(char *, uint64_t)))(v228 + 16);
      }
      v105 = v232;
      v86 = v233;
      v88(v232, (char *)v233, v8);
      v106 = (*(uint64_t (**)(_QWORD *, uint64_t))(v6 + 120))(v8, v6);
      v216(v105, v8);
      if (v76 < v106)
        goto LABEL_55;
      goto LABEL_31;
    }
    goto LABEL_50;
  }
  v59(v30, v8);
  v30 = v231;
  v96 = ((uint64_t (*)(uint64_t, uint64_t))v231)(a3, v237);
LABEL_51:
  v27 = -v96;
  v35 = v230;
  if (__OFSUB__(0, v96))
  {
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
  }
  v145 = v235;
LABEL_61:
  v149 = v226;
  v233 = *(void (**)(_QWORD, _QWORD, _QWORD))(v226 + 32);
  v233(v145, v236, a3);
  v6 = v227;
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v227 + 64))(a3, v227) & 1) != 0)
  {
    v150 = v237;
    v151 = ((uint64_t (*)(uint64_t, uint64_t))v30)(a3, v237);
    if (!__OFSUB__(v151, 1))
    {
      v239[0] = v151 - 1;
      v154 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 96);
      v155 = lazy protocol witness table accessor for type Int and conformance Int(v151, v152, v153);
      v156 = v229;
      v154(v239, &type metadata for Int, v155, a3, v6);
      (*(void (**)(char *, char *, uint64_t, uint64_t))(v150 + 200))(v145, v156, a3, v150);
      v35 = v230;
      (*(void (**)(char *, uint64_t))(v149 + 8))(v156, a3);
      v157 = (uint64_t)v222;
      v158 = v225;
      v159 = swift_getAssociatedConformanceWitness((uint64_t)v222, a3, v225, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v160 = v224;
      goto LABEL_65;
    }
    goto LABEL_91;
  }
  v157 = (uint64_t)v222;
  v161 = v225;
  v159 = swift_getAssociatedConformanceWitness((uint64_t)v222, a3, v225, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  v160 = v224;
  (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v159 + 8))(&unk_1816B7DA8, 256, v161, v159);
  (*(void (**)(char *, uint64_t, uint64_t))(v157 + 24))(v160, a3, v157);
  v158 = v161;
  v30 = v231;
LABEL_65:
  (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v159 + 8))(&unk_1816B7DA8, 256, v158, v159);
  (*(void (**)(char *, uint64_t, uint64_t))(v157 + 24))(v160, a3, v157);
  v8 = *(void (**)(char *, uint64_t))(v149 + 8);
  if (v27 < 0)
  {
LABEL_85:
    v8(v234, a3);
    v201 = ((uint64_t (*)(uint64_t, uint64_t))v30)(a3, v237);
    if (__OFSUB__(0, v201))
    {
      __break(1u);
    }
    else if (-v201 < v27)
    {
      v202 = ((uint64_t (*)(char *, uint64_t))v8)(v35, a3);
      v239[0] = -v27;
      v203 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 96);
      v206 = lazy protocol witness table accessor for type Int and conformance Int(v202, v204, v205);
      v168 = v229;
      v203(v239, &type metadata for Int, v206, a3, v6);
      v169 = v223;
      v170 = v235;
      (*(void (**)(char *, char *, uint64_t, uint64_t))(v237 + 216))(v235, v168, a3, v237);
      goto LABEL_68;
    }
    v8(v235, a3);
    v169 = v223;
    v207 = v223;
    v208 = v35;
LABEL_89:
    v171 = (uint64_t (*)(uint64_t, char *, uint64_t))v233;
    v233(v207, v208, a3);
    return v171(v236, v169, a3);
  }
  v8(v35, a3);
  v162 = v237;
  if (v27 >= ((uint64_t (*)(uint64_t, uint64_t))v30)(a3, v237))
  {
    v8(v235, a3);
    v169 = v223;
    v207 = v223;
    v208 = v234;
    goto LABEL_89;
  }
  v163 = ((uint64_t (*)(char *, uint64_t))v8)(v234, a3);
  v239[0] = v27;
  v164 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 96);
  v167 = lazy protocol witness table accessor for type Int and conformance Int(v163, v165, v166);
  v168 = v229;
  v164(v239, &type metadata for Int, v167, a3, v6);
  v169 = v223;
  v170 = v235;
  (*(void (**)(char *, char *, uint64_t, uint64_t))(v162 + 200))(v235, v168, a3, v162);
LABEL_68:
  v8(v168, a3);
  v8(v170, a3);
  v171 = (uint64_t (*)(uint64_t, char *, uint64_t))v233;
  return v171(v236, v169, a3);
}

uint64_t static FixedWidthInteger._nonMaskingRightShift(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v28;
  char *v29;
  unint64_t AssociatedConformanceWitness;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;

  v50 = a2;
  v51 = a1;
  v47 = a5;
  v7 = *(_QWORD *)(a4 + 8);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v8, a3, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v10 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v46 - v11;
  v49 = *(char **)(a3 - 8);
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v46 - v17;
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v46 - v19;
  v21 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 64);
  v48 = v7;
  v22 = v21(a3, v7);
  v46 = v18;
  v52 = v20;
  if ((v22 & 1) != 0)
  {
    v23 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 56))(a3, a4);
    if (__OFSUB__(v23, 1))
    {
      __break(1u);
      goto LABEL_16;
    }
    v53 = v23 - 1;
    v26 = v48;
    v27 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v48 + 96);
    v28 = lazy protocol witness table accessor for type Int and conformance Int(v23, v24, v25);
    v27(&v53, &type metadata for Int, v28, a3, v26);
    (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(a4 + 200))(v51, v18, a3, a4);
    v29 = v18;
    v18 = v49;
    (*((void (**)(char *, uint64_t))v49 + 1))(v29, a3);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v8, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  }
  else
  {
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v8, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 24))(v12, a3, v8);
    v26 = v48;
    v18 = v49;
  }
  (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 24))(v12, a3, v8);
  v31 = (void (*)(char *, uint64_t))*((_QWORD *)v18 + 1);
  v32 = v50;
  if (v50 < 0)
  {
    v31(v52, a3);
    v40 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 56))(a3, a4);
    v12 = v47;
    if (!__OFSUB__(0, v40))
    {
      if (-v40 < v32)
      {
        v41 = ((uint64_t (*)(char *, uint64_t))v31)(v15, a3);
        v53 = -v32;
        v42 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v26 + 96);
        v45 = lazy protocol witness table accessor for type Int and conformance Int(v41, v43, v44);
        v38 = v46;
        v42(&v53, &type metadata for Int, v45, a3, v26);
        (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(a4 + 216))(v51, v38, a3, a4);
        return ((uint64_t (*)(char *, uint64_t))v31)(v38, a3);
      }
      return (*((uint64_t (**)(char *, char *, uint64_t))v18 + 4))(v12, v15, a3);
    }
LABEL_16:
    __break(1u);
    return (*((uint64_t (**)(char *, char *, uint64_t))v18 + 4))(v12, v15, a3);
  }
  v31(v15, a3);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(a4 + 56))(a3, a4) > v32)
  {
    v33 = ((uint64_t (*)(char *, uint64_t))v31)(v52, a3);
    v53 = v32;
    v34 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v26 + 96);
    v37 = lazy protocol witness table accessor for type Int and conformance Int(v33, v35, v36);
    v38 = v46;
    v34(&v53, &type metadata for Int, v37, a3, v26);
    (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(a4 + 200))(v51, v38, a3, a4);
    return ((uint64_t (*)(char *, uint64_t))v31)(v38, a3);
  }
  return (*((uint64_t (**)(char *, char *, uint64_t))v18 + 4))(v47, v52, a3);
}

uint64_t static FixedWidthInteger._nonMaskingLeftShiftGeneric<A>(_:_:)(uint64_t a1, void (*a2)(char *, uint64_t, uint64_t), uint64_t a3, void (*a4)(char *, uint64_t), char *a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t (*v47)(uint64_t, char *);
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(_QWORD *, uint64_t);
  char v51;
  void (*v52)(char *, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  void (*v58)(char *, _QWORD *);
  char *v59;
  BOOL v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t);
  unint64_t v66;
  char v67;
  void (*v68)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t);
  unint64_t v69;
  char v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t (*v74)(_QWORD, _QWORD);
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t (*v79)(_QWORD, _QWORD);
  void (*v80)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t);
  unint64_t v81;
  void (*v82)(char *, uint64_t, uint64_t);
  char v83;
  char *v84;
  void (*v85)(char *, uint64_t, uint64_t);
  void (*v86)(char *, uint64_t, uint64_t);
  uint64_t v87;
  const char *v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  void (*v92)(char *, uint64_t, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t);
  unint64_t v97;
  char v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t (*v105)(_QWORD, _QWORD);
  void (*v106)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t);
  unint64_t v107;
  char v108;
  void (*v109)(char *, _QWORD *);
  char *v110;
  char v111;
  void (*v112)(char *, uint64_t, uint64_t);
  char *v113;
  uint64_t (*v114)(_QWORD *, uint64_t);
  uint64_t v115;
  void (*v116)(char *, uint64_t, uint64_t);
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  void (*v126)(char *, _QWORD *);
  char *v127;
  void (*v128)(char *, uint64_t, uint64_t);
  char v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void (*v133)(uint64_t *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t);
  unint64_t v134;
  uint64_t *v135;
  char *v136;
  char v137;
  char *v138;
  char *v139;
  uint64_t v140;
  void (*v141)(char *, uint64_t, uint64_t);
  char v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void (*v146)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v147;
  char *v148;
  const char *v149;
  unint64_t v150;
  unint64_t v151;
  char *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  void (*v159)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  char *v163;
  void (*v164)(char *, char *, uint64_t, char *);
  uint64_t v165;
  uint64_t (*v166)(uint64_t, uint64_t, uint64_t);
  char v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t (*v172)(_QWORD, _QWORD);
  void (*v173)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t);
  unint64_t v174;
  char *v175;
  char v176;
  uint64_t (*v177)(_QWORD, _QWORD);
  void (*v178)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t);
  unint64_t v179;
  char v180;
  char *v181;
  uint64_t v182;
  const char *v183;
  unint64_t v184;
  unint64_t AssociatedConformanceWitness;
  char *v186;
  char *v187;
  char v188;
  void (*v189)(char *, uint64_t, uint64_t);
  void (*v190)(char *, _QWORD *);
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  void (*v196)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  char *v203;
  char *v204;
  char *v205;
  char *v206;
  unint64_t v207;
  const char *v208;
  char *v209;
  char *v210;
  uint64_t (*v211)(_QWORD, _QWORD);
  char *v212;
  void (*v213)(char *, _QWORD *);
  uint64_t (*v214)(_QWORD *, uint64_t);
  char *v215;
  uint64_t v216;
  char *v217;
  unint64_t AssociatedTypeWitness;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  char *v222;
  char *v223;
  const char *v224;
  char *v225;
  char *v226;
  char *v227;
  uint64_t v228;
  void (*v229)(char *, uint64_t, uint64_t);
  uint64_t (*v230)(uint64_t, char *);
  uint64_t v231;
  _QWORD v232[2];

  v228 = a1;
  v229 = a2;
  v220 = *((_QWORD *)a5 + 1);
  v224 = *(const char **)(*(_QWORD *)(v220 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v224, a3, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v10 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v217 = (char *)&v202 - v11;
  v219 = *(_QWORD *)(a3 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v226 = (char *)&v202 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  v223 = (char *)&v202 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v225 = (char *)&v202 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v227 = (char *)&v202 - v19;
  MEMORY[0x1E0C80A78](v18);
  v21 = (uint64_t)&v202 - v20;
  v208 = *(const char **)(*(_QWORD *)(a6 + 24) + 16);
  v207 = swift_getAssociatedTypeWitness(0, v208, (uint64_t)a4, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v22 = MEMORY[0x1E0C80A78](v207);
  v206 = (char *)&v202 - v23;
  v24 = *((_QWORD *)a4 - 1);
  v25 = MEMORY[0x1E0C80A78](v22);
  v203 = (char *)&v202 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v25);
  v209 = (char *)&v202 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v212 = (char *)&v202 - v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v204 = (char *)&v202 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v210 = (char *)&v202 - v34;
  v35 = MEMORY[0x1E0C80A78](v33);
  v215 = (char *)&v202 - v36;
  v37 = MEMORY[0x1E0C80A78](v35);
  v205 = (char *)&v202 - v38;
  v39 = MEMORY[0x1E0C80A78](v37);
  v41 = (char *)&v202 - v40;
  v42 = MEMORY[0x1E0C80A78](v39);
  v44 = (char *)&v202 - v43;
  MEMORY[0x1E0C80A78](v42);
  v46 = (char *)&v202 - v45;
  v47 = (uint64_t (*)(uint64_t, char *))*((_QWORD *)a5 + 7);
  v222 = a5;
  v230 = v47;
  v48 = v47(a3, a5);
  v49 = -v48;
  if (__OFSUB__(0, v48))
  {
    __break(1u);
    goto LABEL_82;
  }
  v221 = v46;
  v50 = *(uint64_t (**)(_QWORD *, uint64_t))(a6 + 64);
  v51 = v50(a4, a6);
  v216 = v21;
  v211 = (uint64_t (*)(_QWORD, _QWORD))v50;
  if ((v51 & 1) == 0)
  {
    v61 = v50(a4, a6);
    v214 = *(uint64_t (**)(_QWORD *, uint64_t))(a6 + 128);
    v62 = v214(a4, a6);
    if ((v61 & 1) == 0)
    {
      v56 = v221;
      v44 = v222;
      if (v62 >= 64)
      {
        v93 = (*(uint64_t (**)(char *, _QWORD, void (*)(char *, uint64_t)))(v24 + 16))(v41, v229, a4);
        if (v49 <= 0)
        {
          v58 = *(void (**)(char *, _QWORD *))(v24 + 8);
          v58(v41, a4);
        }
        else
        {
          v232[0] = v49;
          v96 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(a6 + 96);
          v97 = lazy protocol witness table accessor for type Int and conformance Int(v93, v94, v95);
          v96(v232, &type metadata for Int, v97, a4, a6);
          v98 = (*(uint64_t (**)(char *, char *, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(a6 + 32) + 8)
                                                                                                + 16))(v41, v56, a4);
          v58 = *(void (**)(char *, _QWORD *))(v24 + 8);
          v58(v56, a4);
          v58(v41, a4);
          v71 = v224;
          if ((v98 & 1) != 0)
            goto LABEL_28;
        }
LABEL_16:
        v213 = v58;
        v73 = v230(a3, v44);
        v74 = v211;
        v75 = v211(a4, a6);
        v76 = v214(a4, a6);
        if ((v75 & 1) != 0)
        {
          if (v76 > 64)
          {
            v232[0] = v73;
            v79 = v74;
            v80 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(a6 + 96);
            v81 = lazy protocol witness table accessor for type Int and conformance Int(v76, v77, v78);
            v80(v232, &type metadata for Int, v81, a4, a6);
            v74 = v79;
            v82 = v229;
            v83 = (*(uint64_t (**)(char *, _QWORD, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(a6 + 32) + 8)
                                                                                                  + 16))(v56, v229, a4);
            v213(v56, a4);
            v84 = v212;
            if ((v83 & 1) == 0)
            {
              v85 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
              goto LABEL_32;
            }
            goto LABEL_52;
          }
        }
        else if (v76 > 63)
        {
          v85 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
          v101 = v205;
          v102 = ((uint64_t (*)(char *, _QWORD, void (*)(char *, uint64_t)))v85)(v205, v229, a4);
          v84 = v212;
          if (v73 < 0)
          {
            v213(v101, a4);
            goto LABEL_52;
          }
          v232[0] = v73;
          v105 = v74;
          v106 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(a6 + 96);
          v107 = lazy protocol witness table accessor for type Int and conformance Int(v102, v103, v104);
          v106(v232, &type metadata for Int, v107, a4, a6);
          v74 = v105;
          v108 = (*(uint64_t (**)(char *, char *, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(a6 + 32) + 8)
                                                                                                 + 16))(v56, v101, a4);
          v109 = v213;
          v213(v56, a4);
          v109(v101, a4);
          v82 = v229;
          if ((v108 & 1) != 0)
          {
LABEL_52:
            v44 = v222;
            v21 = v230(a3, v222);
LABEL_57:
            v100 = v227;
            v71 = v224;
            goto LABEL_58;
          }
LABEL_32:
          v110 = v215;
          v85(v215, (uint64_t)v82, (uint64_t)a4);
          v111 = v74(a4, a6);
          v112 = v85;
          v113 = v210;
          v229 = v112;
          v112(v210, (uint64_t)v110, (uint64_t)a4);
          if ((v111 & 1) != 0)
          {
            v114 = v214;
            v115 = v214(a4, a6);
            v213(v113, a4);
            v116 = v229;
            if (v115 < 65)
              goto LABEL_40;
            v117 = v204;
            v229(v204, (uint64_t)v215, (uint64_t)a4);
            v232[0] = 0x8000000000000000;
            if ((v74(a4, a6) & 1) != 0)
            {
              v118 = v214(a4, a6);
              if (v118 < 64)
              {
                v116(v56, (uint64_t)v117, (uint64_t)a4);
                v121 = (*(uint64_t (**)(_QWORD *, uint64_t))(a6 + 120))(a4, a6);
                v213(v56, a4);
                v122 = v117;
                v114 = v214;
                if (v121 < v232[0])
                  goto LABEL_91;
                goto LABEL_39;
              }
              v177 = v74;
              v178 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(a6 + 96);
              v179 = lazy protocol witness table accessor for type Int and conformance Int(v118, v119, v120);
              v178(v232, &type metadata for Int, v179, a4, a6);
              v74 = v177;
              v56 = v221;
              v180 = (*(uint64_t (**)(char *, char *, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(a6 + 32) + 8) + 16))(v117, v221, a4);
              v213(v56, a4);
              v122 = v117;
              v114 = v214;
              if ((v180 & 1) != 0)
LABEL_91:
                _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent a signed value", 43, 2, "Swift/Integers.swift", 20, 2, 0xE61uLL, 0);
            }
            else
            {
              v168 = v74(a4, a6);
              v114 = v214;
              v169 = v214(a4, a6);
              if ((v168 & 1) != 0)
              {
                if (v169 <= 64)
                {
                  v183 = v208;
                  v184 = v207;
                  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v208, (uint64_t)a4, v207, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                  v186 = v206;
                  (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness
                                                                                              + 8))(&unk_1816B7DA8, 256, v184, AssociatedConformanceWitness);
                  (*((void (**)(char *, void (*)(char *, uint64_t), const char *))v183 + 3))(v186, a4, v183);
                  v187 = v204;
                  v188 = (*(uint64_t (**)(char *, char *, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(a6 + 32) + 8) + 16))(v204, v56, a4);
                  v189 = v116;
                  v190 = v213;
                  v213(v56, a4);
                  v191 = v203;
                  v189(v203, (uint64_t)v187, (uint64_t)a4);
                  v84 = v212;
                  if ((v188 & 1) != 0)
                  {
                    v190(v191, a4);
                    goto LABEL_91;
                  }
                  v192 = v232[0];
                  v193 = (*(uint64_t (**)(_QWORD *, uint64_t))(a6 + 120))(a4, a6);
                  v190(v191, a4);
                  v60 = v193 < v192;
                  v74 = v211;
                  v122 = v204;
                  v116 = v229;
                  if (v60)
                    goto LABEL_91;
                }
                else
                {
                  v172 = v74;
                  v173 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(a6 + 96);
                  v174 = lazy protocol witness table accessor for type Int and conformance Int(v169, v170, v171);
                  v173(v232, &type metadata for Int, v174, a4, a6);
                  v74 = v172;
                  v175 = v204;
                  v176 = (*(uint64_t (**)(char *, char *, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(a6 + 32) + 8) + 16))(v204, v56, a4);
                  v213(v56, a4);
                  v122 = v175;
                  v84 = v212;
                  if ((v176 & 1) != 0)
                    goto LABEL_91;
                }
              }
              else if (v169 < 64)
              {
                v181 = v204;
                v116(v56, (uint64_t)v204, (uint64_t)a4);
                v182 = (*(uint64_t (**)(_QWORD *, uint64_t))(a6 + 120))(a4, a6);
                v213(v56, a4);
                v122 = v181;
                v84 = v212;
                if (v182 < v232[0])
                  goto LABEL_91;
              }
              else
              {
                v84 = v212;
                v122 = v204;
              }
            }
          }
          else
          {
            v122 = v113;
            v114 = v214;
            v116 = v229;
          }
LABEL_39:
          v213(v122, a4);
LABEL_40:
          v123 = v215;
          v124 = v114(a4, a6);
          v116(v84, (uint64_t)v123, (uint64_t)a4);
          if (v124 < 65)
          {
            v125 = v114(a4, a6);
            v126 = v213;
            v213(v84, a4);
            if (v125 != 64 || (v74(a4, a6) & 1) != 0)
              goto LABEL_56;
          }
          else
          {
            v213(v84, a4);
          }
          v127 = v209;
          v128 = v229;
          v229(v209, (uint64_t)v215, (uint64_t)a4);
          v232[0] = 0x7FFFFFFFFFFFFFFFLL;
          v129 = v74(a4, a6);
          v130 = v114(a4, a6);
          if ((v129 & 1) != 0)
          {
            if (v130 > 64)
            {
              v133 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(a6 + 96);
              v134 = lazy protocol witness table accessor for type Int and conformance Int(v130, v131, v132);
              v135 = v232;
LABEL_54:
              v133(v135, &type metadata for Int, v134, a4, a6);
              v137 = (*(uint64_t (**)(char *, char *, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(a6 + 32) + 8) + 16))(v56, v127, a4);
              v138 = v127;
              v126 = v213;
              v213(v56, a4);
              if ((v137 & 1) != 0)
                goto LABEL_89;
              v126(v138, a4);
              goto LABEL_56;
            }
          }
          else if (v130 > 63)
          {
            v231 = 0x7FFFFFFFFFFFFFFFLL;
            v133 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(a6 + 96);
            v134 = lazy protocol witness table accessor for type Int and conformance Int(v130, v131, v132);
            v135 = &v231;
            goto LABEL_54;
          }
          v128(v56, (uint64_t)v127, (uint64_t)a4);
          (*(void (**)(_QWORD *, uint64_t))(a6 + 120))(a4, a6);
          v136 = v127;
          v126 = v213;
          v213(v56, a4);
          v126(v136, a4);
LABEL_56:
          v139 = v215;
          v21 = (*(uint64_t (**)(_QWORD *, uint64_t))(a6 + 120))(a4, a6);
          v126(v139, a4);
          v44 = v222;
          goto LABEL_57;
        }
        v85 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
        v86 = v229;
        v85(v56, (uint64_t)v229, (uint64_t)a4);
        v87 = (*(uint64_t (**)(_QWORD *, uint64_t))(a6 + 120))(a4, a6);
        v213(v56, a4);
        v60 = v73 < v87;
        v82 = v86;
        v84 = v212;
        if (v60)
          goto LABEL_52;
        goto LABEL_32;
      }
      (*(void (**)(char *, _QWORD, void (*)(char *, uint64_t)))(v24 + 16))(v221, v229, a4);
      v72 = (*(uint64_t (**)(_QWORD *, uint64_t))(a6 + 120))(a4, a6);
      v58 = *(void (**)(char *, _QWORD *))(v24 + 8);
      v58(v56, a4);
      v60 = v72 < v49;
      goto LABEL_15;
    }
    v56 = v221;
    if (v62 <= 64)
    {
      v88 = v208;
      v89 = v207;
      v90 = swift_getAssociatedConformanceWitness((uint64_t)v208, (uint64_t)a4, v207, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v91 = v206;
      (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v90 + 8))(&unk_1816B7DA8, 256, v89, v90);
      (*((void (**)(char *, void (*)(char *, uint64_t), const char *))v88 + 3))(v91, a4, v88);
      v92 = v229;
      LOBYTE(v89) = (*(uint64_t (**)(_QWORD, char *, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(a6 + 32) + 8) + 16))(v229, v56, a4);
      v58 = *(void (**)(char *, _QWORD *))(v24 + 8);
      v58(v56, a4);
      (*(void (**)(char *, _QWORD, void (*)(char *, uint64_t)))(v24 + 16))(v44, v92, a4);
      if ((v89 & 1) != 0)
      {
        v58(v44, a4);
        v44 = v222;
        v71 = v224;
        goto LABEL_28;
      }
      v57 = (*(uint64_t (**)(_QWORD *, uint64_t))(a6 + 120))(a4, a6);
      v59 = v44;
      goto LABEL_5;
    }
    v232[0] = v49;
    v65 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(a6 + 96);
    v66 = lazy protocol witness table accessor for type Int and conformance Int(v62, v63, v64);
    v65(v232, &type metadata for Int, v66, a4, a6);
    v67 = (*(uint64_t (**)(_QWORD, char *, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(a6 + 32) + 8)
                                                                                          + 16))(v229, v56, a4);
LABEL_10:
    v70 = v67;
    v58 = *(void (**)(char *, _QWORD *))(v24 + 8);
    v58(v56, a4);
    v44 = v222;
    v71 = v224;
    if ((v70 & 1) == 0)
      goto LABEL_16;
    goto LABEL_28;
  }
  v52 = v229;
  v214 = *(uint64_t (**)(_QWORD *, uint64_t))(a6 + 128);
  v53 = v214(a4, a6);
  if (v53 >= 64)
  {
    v232[0] = v49;
    v68 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(a6 + 96);
    v69 = lazy protocol witness table accessor for type Int and conformance Int(v53, v54, v55);
    v56 = v221;
    v68(v232, &type metadata for Int, v69, a4, a6);
    v67 = (*(uint64_t (**)(_QWORD, char *, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(a6 + 32) + 8)
                                                                                          + 16))(v52, v56, a4);
    goto LABEL_10;
  }
  v56 = v221;
  (*(void (**)(char *, _QWORD, void (*)(char *, uint64_t)))(v24 + 16))(v221, v52, a4);
  v57 = (*(uint64_t (**)(_QWORD *, uint64_t))(a6 + 120))(a4, a6);
  v58 = *(void (**)(char *, _QWORD *))(v24 + 8);
  v59 = v56;
LABEL_5:
  v58(v59, a4);
  v60 = v57 < v49;
  v44 = v222;
LABEL_15:
  v71 = v224;
  if (!v60)
    goto LABEL_16;
LABEL_28:
  v99 = v230(a3, v44);
  v21 = -v99;
  if (__OFSUB__(0, v99))
  {
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
  }
  v100 = v227;
LABEL_58:
  v140 = v219;
  v141 = *(void (**)(char *, uint64_t, uint64_t))(v219 + 32);
  v141(v100, v228, a3);
  a6 = v220;
  v142 = (*(uint64_t (**)(uint64_t, uint64_t))(v220 + 64))(a3, v220);
  v229 = v141;
  if ((v142 & 1) != 0)
  {
    v143 = v230(a3, v44);
    if (!__OFSUB__(v143, 1))
    {
      v232[0] = v143 - 1;
      v146 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a6 + 96);
      v147 = lazy protocol witness table accessor for type Int and conformance Int(v143, v144, v145);
      v148 = v223;
      v146(v232, &type metadata for Int, v147, a3, a6);
      (*((void (**)(char *, char *, uint64_t, char *))v44 + 25))(v100, v148, a3, v44);
      v149 = v224;
      (*(void (**)(char *, uint64_t))(v140 + 8))(v148, a3);
      v150 = AssociatedTypeWitness;
      v151 = swift_getAssociatedConformanceWitness((uint64_t)v149, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v152 = v217;
      goto LABEL_62;
    }
    goto LABEL_88;
  }
  v153 = (uint64_t)v71;
  v149 = v71;
  v154 = AssociatedTypeWitness;
  v151 = swift_getAssociatedConformanceWitness(v153, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  v152 = v217;
  (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v151 + 8))(&unk_1816B7DA8, 256, v154, v151);
  (*((void (**)(char *, uint64_t, const char *))v149 + 3))(v152, a3, v149);
  v150 = v154;
LABEL_62:
  (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v151 + 8))(&unk_1816B7DA8, 256, v150, v151);
  (*((void (**)(char *, uint64_t, const char *))v149 + 3))(v152, a3, v149);
  a4 = *(void (**)(char *, uint64_t))(v140 + 8);
  if (v21 < 0)
  {
LABEL_82:
    a4(v226, a3);
    v194 = v230(a3, v44);
    v156 = v227;
    v157 = v228;
    if (__OFSUB__(0, v194))
    {
      __break(1u);
    }
    else if (-v194 < v21)
    {
      v195 = ((uint64_t (*)(char *, uint64_t))a4)(v225, a3);
      v232[0] = -v21;
      v196 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a6 + 96);
      v199 = lazy protocol witness table accessor for type Int and conformance Int(v195, v197, v198);
      v163 = v223;
      v196(v232, &type metadata for Int, v199, a3, a6);
      v164 = (void (*)(char *, char *, uint64_t, char *))*((_QWORD *)v44 + 25);
      goto LABEL_65;
    }
    a4(v156, a3);
    v165 = v216;
    v200 = v216;
    v201 = v225;
LABEL_86:
    v166 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v229;
    v229((char *)v200, (uint64_t)v201, a3);
    return v166(v157, v165, a3);
  }
  a4(v225, a3);
  v155 = v230(a3, v44);
  v156 = v227;
  v157 = v228;
  if (v21 >= v155)
  {
    a4(v227, a3);
    v165 = v216;
    v200 = v216;
    v201 = v226;
    goto LABEL_86;
  }
  v158 = ((uint64_t (*)(char *, uint64_t))a4)(v226, a3);
  v232[0] = v21;
  v159 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a6 + 96);
  v162 = lazy protocol witness table accessor for type Int and conformance Int(v158, v160, v161);
  v163 = v223;
  v159(v232, &type metadata for Int, v162, a3, a6);
  v164 = (void (*)(char *, char *, uint64_t, char *))*((_QWORD *)v44 + 27);
LABEL_65:
  v165 = v216;
  v164(v156, v163, a3, v44);
  a4(v163, a3);
  a4(v156, a3);
  v166 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v229;
  return v166(v157, v165, a3);
}

uint64_t static FixedWidthInteger.<<= infix<A>(_:_:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void (*v8)(char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(_QWORD *, uint64_t);
  char v51;
  void (*v52)(void);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  void (*v59)(char *, _QWORD *);
  uint64_t v60;
  uint64_t (*v61)(uint64_t);
  char v62;
  uint64_t (*v63)(_QWORD *, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t);
  unint64_t v68;
  char *v69;
  char v70;
  void (*v71)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t);
  unint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  const char *v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  void (*v82)(void);
  uint64_t v83;
  char *v84;
  void (*v85)(char *, _QWORD *);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t);
  unint64_t v91;
  char *v92;
  char v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t);
  unint64_t v105;
  char *v106;
  char v107;
  void (*v108)(void);
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void (*v115)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t);
  unint64_t v116;
  char *v117;
  char v118;
  char *v119;
  char *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  char v124;
  char *v125;
  uint64_t v126;
  void (*v127)(char *, _QWORD *);
  char *v128;
  char *v129;
  char *v130;
  uint64_t (*v131)(_QWORD *, uint64_t);
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  BOOL v137;
  char *v138;
  uint64_t (*v139)(_QWORD *, uint64_t);
  uint64_t v140;
  uint64_t (*v141)(_QWORD *, uint64_t);
  uint64_t v142;
  char v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void (*v147)(uint64_t *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t);
  unint64_t v148;
  uint64_t *v149;
  char *v150;
  char *v151;
  char *v152;
  char v153;
  char *v154;
  uint64_t v155;
  void (*v156)(void);
  char v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  void (*v161)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v162;
  char *v163;
  char *v164;
  char *v165;
  const char *v166;
  unint64_t v167;
  unint64_t v168;
  char *v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  void (*v176)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  char *v180;
  char *v181;
  char v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  void (*v187)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t);
  unint64_t v188;
  char *v189;
  char *v190;
  char v191;
  void (*v192)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t);
  unint64_t v193;
  char *v194;
  char v195;
  char *v196;
  char *v197;
  uint64_t v198;
  const char *v199;
  unint64_t v200;
  unint64_t AssociatedConformanceWitness;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  void (*v212)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  char *v216;
  char *v217;
  char *v218;
  void (*v219)(void);
  char *v220;
  void (*v221)(void);
  uint64_t v222;
  char *v223;
  char *v224;
  char *v225;
  char *v226;
  unint64_t AssociatedTypeWitness;
  const char *v228;
  char *v229;
  char *v230;
  char *v231;
  char *v232;
  uint64_t (*v233)(_QWORD *, uint64_t);
  uint64_t v234;
  uint64_t (*v235)(_QWORD *, uint64_t);
  char *v236;
  char *v237;
  unint64_t v238;
  const char *v239;
  uint64_t v240;
  char *v241;
  uint64_t v242;
  char *v243;
  char *v244;
  char *v245;
  char *v246;
  uint64_t v247;
  uint64_t v248;
  char *v249;
  void (*v250)(void);
  uint64_t v251;
  _QWORD v252[2];

  v6 = a6;
  v8 = (void (*)(char *, uint64_t))a4;
  v247 = a1;
  v228 = *(const char **)(*(_QWORD *)(a6 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v228, a4, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v226 = (char *)&v222 - v11;
  v240 = *(_QWORD *)(a5 + 8);
  v239 = *(const char **)(*(_QWORD *)(v240 + 24) + 16);
  v238 = swift_getAssociatedTypeWitness(0, v239, a3, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v12 = MEMORY[0x1E0C80A78](v238);
  v237 = (char *)&v222 - v13;
  v14 = *(_QWORD *)(a3 - 8);
  v15 = MEMORY[0x1E0C80A78](v12);
  v246 = (char *)&v222 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  v243 = (char *)&v222 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v245 = (char *)&v222 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v241 = (char *)&v222 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v236 = (char *)&v222 - v24;
  v242 = *((_QWORD *)v8 - 1);
  v25 = MEMORY[0x1E0C80A78](v23);
  v27 = (uint64_t)&v222 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x1E0C80A78](v25);
  v30 = (char *)&v222 - v29;
  v31 = MEMORY[0x1E0C80A78](v28);
  v225 = (char *)&v222 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v223 = (char *)&v222 - v34;
  v35 = MEMORY[0x1E0C80A78](v33);
  v230 = (char *)&v222 - v36;
  v37 = MEMORY[0x1E0C80A78](v35);
  v232 = (char *)&v222 - v38;
  v39 = MEMORY[0x1E0C80A78](v37);
  v224 = (char *)&v222 - v40;
  v41 = MEMORY[0x1E0C80A78](v39);
  v43 = (char *)&v222 - v42;
  v44 = MEMORY[0x1E0C80A78](v41);
  v231 = (char *)&v222 - v45;
  MEMORY[0x1E0C80A78](v44);
  v244 = (char *)&v222 - v46;
  v47 = *(char **)(a5 + 56);
  v248 = a5;
  v249 = v47;
  v48 = ((uint64_t (*)(uint64_t, uint64_t))v47)(a3, a5);
  v49 = -v48;
  if (__OFSUB__(0, v48))
  {
    __break(1u);
    goto LABEL_81;
  }
  v250 = (void (*)(void))a2;
  v50 = *(uint64_t (**)(_QWORD *, uint64_t))(v6 + 64);
  v51 = v50(v8, v6);
  v234 = v14;
  v235 = v50;
  v229 = v43;
  if ((v51 & 1) == 0)
  {
    v62 = v50(v8, v6);
    v63 = *(uint64_t (**)(_QWORD *, uint64_t))(v6 + 128);
    v64 = v63(v8, v6);
    if ((v62 & 1) == 0)
    {
      v233 = v63;
      v61 = (uint64_t (*)(uint64_t))v249;
      if (v64 >= 64)
      {
        v86 = v242;
        v87 = (*(uint64_t (**)(uint64_t, void (*)(void), void (*)(char *, uint64_t)))(v242 + 16))(v27, v250, v8);
        v14 = v234;
        if (v49 <= 0)
        {
          v59 = *(void (**)(char *, _QWORD *))(v86 + 8);
          v59((char *)v27, v8);
          v60 = v248;
          goto LABEL_24;
        }
        v252[0] = v49;
        v90 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(v6 + 96);
        v91 = lazy protocol witness table accessor for type Int and conformance Int(v87, v88, v89);
        v92 = v244;
        v90(v252, &type metadata for Int, v91, v8, v6);
        v93 = (*(uint64_t (**)(uint64_t, char *, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8)
                                                                                               + 16))(v27, v92, v8);
        v59 = *(void (**)(char *, _QWORD *))(v86 + 8);
        v94 = v92;
        v61 = (uint64_t (*)(uint64_t))v249;
        v59(v94, v8);
        v59((char *)v27, v8);
        v60 = v248;
        if ((v93 & 1) != 0)
          goto LABEL_21;
      }
      else
      {
        v74 = v242;
        v75 = v244;
        (*(void (**)(char *, void (*)(void), void (*)(char *, uint64_t)))(v242 + 16))(v244, v250, v8);
        v76 = (*(uint64_t (**)(_QWORD *, uint64_t))(v6 + 120))(v8, v6);
        v59 = *(void (**)(char *, _QWORD *))(v74 + 8);
        v59(v75, v8);
        v14 = v234;
        v60 = v248;
        if (v76 < v49)
          goto LABEL_21;
      }
LABEL_24:
      v96 = v60;
      v98 = v61(a3);
      v99 = v235(v8, v6);
      v100 = v233(v8, v6);
      if ((v99 & 1) != 0)
      {
        if (v100 > 64)
        {
          v252[0] = v98;
          v103 = v96;
          v104 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(v6 + 96);
          v105 = lazy protocol witness table accessor for type Int and conformance Int(v100, v101, v102);
          v106 = v244;
          v104(v252, &type metadata for Int, v105, v8, v6);
          v96 = v103;
          v107 = (*(uint64_t (**)(char *, void (*)(void), void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8) + 16))(v106, v250, v8);
          v59(v106, v8);
          if ((v107 & 1) == 0)
          {
            v108 = *(void (**)(void))(v242 + 16);
            goto LABEL_34;
          }
LABEL_51:
          v27 = ((uint64_t (*)(uint64_t, uint64_t))v61)(a3, v96);
          a2 = v241;
          v14 = v234;
          goto LABEL_56;
        }
        v109 = v242;
      }
      else
      {
        v109 = v242;
        if (v100 > 63)
        {
          v108 = *(void (**)(void))(v242 + 16);
          v110 = v225;
          v111 = ((uint64_t (*)(char *, void (*)(void), void (*)(char *, uint64_t)))v108)(v225, v250, v8);
          if (v98 < 0)
          {
            v59(v110, v8);
            goto LABEL_51;
          }
          v252[0] = v98;
          v114 = v96;
          v115 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(v6 + 96);
          v116 = lazy protocol witness table accessor for type Int and conformance Int(v111, v112, v113);
          v117 = v244;
          v115(v252, &type metadata for Int, v116, v8, v6);
          v96 = v114;
          v118 = (*(uint64_t (**)(char *, char *, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8)
                                                                                                 + 16))(v117, v110, v8);
          v119 = v117;
          v61 = (uint64_t (*)(uint64_t))v249;
          v59(v119, v8);
          v59(v110, v8);
          if ((v118 & 1) != 0)
            goto LABEL_51;
          goto LABEL_34;
        }
      }
      v108 = *(void (**)(void))(v109 + 16);
      v120 = v244;
      ((void (*)(char *, void (*)(void), void (*)(char *, uint64_t)))v108)(v244, v250, v8);
      v121 = (*(uint64_t (**)(_QWORD *, uint64_t))(v6 + 120))(v8, v6);
      v122 = v120;
      v61 = (uint64_t (*)(uint64_t))v249;
      v59(v122, v8);
      if (v98 < v121)
        goto LABEL_51;
LABEL_34:
      v123 = v231;
      v108();
      v124 = v235(v8, v6);
      v125 = v229;
      v250 = v108;
      ((void (*)(char *, char *, void (*)(char *, uint64_t)))v108)(v229, v123, v8);
      if ((v124 & 1) != 0)
      {
        v126 = v233(v8, v6);
        v127 = v59;
        v59(v125, v8);
        v128 = v230;
        v129 = v232;
        if (v126 < 65)
          goto LABEL_41;
        v130 = v224;
        ((void (*)(char *, char *, void (*)(char *, uint64_t)))v250)(v224, v123, v8);
        v252[0] = 0x8000000000000000;
        v131 = v235;
        if ((v235(v8, v6) & 1) != 0)
        {
          v132 = v233(v8, v6);
          if (v132 < 64)
          {
            v135 = v244;
            ((void (*)(char *, char *, void (*)(char *, uint64_t)))v250)(v244, v130, v8);
            v136 = (*(uint64_t (**)(_QWORD *, uint64_t))(v6 + 120))(v8, v6);
            v127(v135, v8);
            v137 = v136 < v252[0];
            v129 = v232;
            v138 = v130;
LABEL_77:
            v59 = v127;
            if (!v137)
              goto LABEL_40;
LABEL_89:
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent a signed value", 43, 2, "Swift/Integers.swift", 20, 2, 0xE61uLL, 0);
          }
          v192 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(v6 + 96);
          v193 = lazy protocol witness table accessor for type Int and conformance Int(v132, v133, v134);
          v194 = v244;
          v192(v252, &type metadata for Int, v193, v8, v6);
          v96 = v248;
          v195 = (*(uint64_t (**)(char *, char *, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8)
                                                                                                 + 16))(v130, v194, v8);
          v127(v194, v8);
          v129 = v232;
          v138 = v130;
          v59 = v127;
          if ((v195 & 1) != 0)
            goto LABEL_89;
        }
        else
        {
          v183 = v131(v8, v6);
          v184 = v233(v8, v6);
          if ((v183 & 1) != 0)
          {
            if (v184 <= 64)
            {
              v199 = v228;
              v200 = AssociatedTypeWitness;
              AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v228, (uint64_t)v8, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
              v202 = v226;
              (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness
                                                                                          + 8))(&unk_1816B7DA8, 256, v200, AssociatedConformanceWitness);
              v203 = v244;
              (*((void (**)(char *, void (*)(char *, uint64_t), const char *))v199 + 3))(v202, v8, v199);
              v204 = v224;
              LOBYTE(v200) = (*(uint64_t (**)(char *, char *, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8) + 16))(v224, v203, v8);
              v127(v203, v8);
              v205 = v223;
              ((void (*)(char *, char *, void (*)(char *, uint64_t)))v250)(v223, v204, v8);
              if ((v200 & 1) != 0)
              {
                v127(v205, v8);
                goto LABEL_89;
              }
              v206 = v252[0];
              v207 = (*(uint64_t (**)(_QWORD *, uint64_t))(v6 + 120))(v8, v6);
              v127(v205, v8);
              v137 = v207 < v206;
              v96 = v248;
              v129 = v232;
              v138 = v224;
              goto LABEL_77;
            }
            v187 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(v6 + 96);
            v188 = lazy protocol witness table accessor for type Int and conformance Int(v184, v185, v186);
            v189 = v244;
            v187(v252, &type metadata for Int, v188, v8, v6);
            v96 = v248;
            v190 = v224;
            v191 = (*(uint64_t (**)(char *, char *, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8) + 16))(v224, v189, v8);
            v127(v189, v8);
            v138 = v190;
            v59 = v127;
            v129 = v232;
            if ((v191 & 1) != 0)
              goto LABEL_89;
          }
          else if (v184 < 64)
          {
            v196 = v244;
            v197 = v224;
            ((void (*)(char *, char *, void (*)(char *, uint64_t)))v250)(v244, v224, v8);
            v198 = (*(uint64_t (**)(_QWORD *, uint64_t))(v6 + 120))(v8, v6);
            v127(v196, v8);
            v138 = v197;
            v59 = v127;
            v129 = v232;
            if (v198 < v252[0])
              goto LABEL_89;
          }
          else
          {
            v129 = v232;
            v138 = v224;
            v59 = v127;
          }
        }
      }
      else
      {
        v138 = v125;
        v128 = v230;
        v129 = v232;
      }
LABEL_40:
      v127 = v59;
      v59(v138, v8);
LABEL_41:
      v139 = v233;
      v140 = v233(v8, v6);
      ((void (*)(char *, char *, void (*)(char *, uint64_t)))v250)(v129, v123, v8);
      if (v140 < 65)
      {
        v142 = v139(v8, v6);
        v127(v129, v8);
        v141 = v235;
        a2 = v241;
        if (v142 != 64 || (v235(v8, v6) & 1) != 0)
          goto LABEL_55;
      }
      else
      {
        v127(v129, v8);
        v141 = v235;
        a2 = v241;
      }
      ((void (*)(char *, char *, void (*)(char *, uint64_t)))v250)(v128, v123, v8);
      v252[0] = 0x7FFFFFFFFFFFFFFFLL;
      v143 = v141(v8, v6);
      v144 = v233(v8, v6);
      if ((v143 & 1) != 0)
      {
        if (v144 > 64)
        {
          v147 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(v6 + 96);
          v148 = lazy protocol witness table accessor for type Int and conformance Int(v144, v145, v146);
          v149 = v252;
          goto LABEL_53;
        }
      }
      else if (v144 > 63)
      {
        v251 = 0x7FFFFFFFFFFFFFFFLL;
        v147 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(v6 + 96);
        v148 = lazy protocol witness table accessor for type Int and conformance Int(v144, v145, v146);
        v149 = &v251;
LABEL_53:
        v151 = v128;
        v152 = v244;
        v147(v149, &type metadata for Int, v148, v8, v6);
        v153 = (*(uint64_t (**)(char *, char *, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8)
                                                                                               + 16))(v152, v151, v8);
        v154 = v152;
        v128 = v151;
        v96 = v248;
        v127(v154, v8);
        if ((v153 & 1) != 0)
          goto LABEL_87;
        goto LABEL_54;
      }
      v150 = v244;
      ((void (*)(char *, char *, void (*)(char *, uint64_t)))v250)(v244, v128, v8);
      (*(void (**)(_QWORD *, uint64_t))(v6 + 120))(v8, v6);
      v127(v150, v8);
LABEL_54:
      v127(v128, v8);
LABEL_55:
      v27 = (*(uint64_t (**)(_QWORD *, uint64_t))(v6 + 120))(v8, v6);
      v127(v123, v8);
      v14 = v234;
      v61 = (uint64_t (*)(uint64_t))v249;
      goto LABEL_56;
    }
    if (v64 <= 64)
    {
      v77 = v228;
      v78 = AssociatedTypeWitness;
      v79 = swift_getAssociatedConformanceWitness((uint64_t)v228, (uint64_t)v8, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v80 = v226;
      (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v79 + 8))(&unk_1816B7DA8, 256, v78, v79);
      v81 = v244;
      (*((void (**)(char *, void (*)(char *, uint64_t), const char *))v77 + 3))(v80, v8, v77);
      v82 = v250;
      LOBYTE(v78) = (*(uint64_t (**)(void (*)(void), char *, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8) + 16))(v250, v81, v8);
      v83 = v242;
      v84 = v81;
      v85 = *(void (**)(char *, _QWORD *))(v242 + 8);
      v85(v84, v8);
      (*(void (**)(char *, void (*)(void), void (*)(char *, uint64_t)))(v83 + 16))(v30, v82, v8);
      v14 = v234;
      if ((v78 & 1) != 0)
      {
        v85(v30, v8);
        v60 = v248;
        v61 = (uint64_t (*)(uint64_t))v249;
      }
      else
      {
        v233 = v63;
        v95 = (*(uint64_t (**)(_QWORD *, uint64_t))(v6 + 120))(v8, v6);
        v85(v30, v8);
        v60 = v248;
        v61 = (uint64_t (*)(uint64_t))v249;
        v59 = v85;
        if (v95 >= v49)
          goto LABEL_24;
      }
      goto LABEL_21;
    }
    v233 = v63;
    v252[0] = v49;
    v67 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(v6 + 96);
    v68 = lazy protocol witness table accessor for type Int and conformance Int(v64, v65, v66);
    v69 = v244;
    v67(v252, &type metadata for Int, v68, v8, v6);
    v70 = (*(uint64_t (**)(void (*)(void), char *, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8)
                                                                                                  + 16))(v250, v69, v8);
    v59 = *(void (**)(char *, _QWORD *))(v242 + 8);
    v59(v69, v8);
    v60 = v248;
    v14 = v234;
LABEL_10:
    v61 = (uint64_t (*)(uint64_t))v249;
    if ((v70 & 1) != 0)
      goto LABEL_21;
    goto LABEL_24;
  }
  v52 = v250;
  v233 = *(uint64_t (**)(_QWORD *, uint64_t))(v6 + 128);
  v53 = v233(v8, v6);
  if (v53 >= 64)
  {
    v252[0] = v49;
    v71 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(v6 + 96);
    v72 = lazy protocol witness table accessor for type Int and conformance Int(v53, v54, v55);
    v73 = v244;
    v71(v252, &type metadata for Int, v72, v8, v6);
    v70 = (*(uint64_t (**)(void (*)(void), char *, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8)
                                                                                                  + 16))(v52, v73, v8);
    v59 = *(void (**)(char *, _QWORD *))(v242 + 8);
    v59(v73, v8);
    v60 = v248;
    goto LABEL_10;
  }
  v56 = v242;
  v57 = v244;
  (*(void (**)(char *, void (*)(void), void (*)(char *, uint64_t)))(v242 + 16))(v244, v52, v8);
  v58 = (*(uint64_t (**)(_QWORD *, uint64_t))(v6 + 120))(v8, v6);
  v59 = *(void (**)(char *, _QWORD *))(v56 + 8);
  v59(v57, v8);
  v60 = v248;
  v61 = (uint64_t (*)(uint64_t))v249;
  if (v58 >= v49)
    goto LABEL_24;
LABEL_21:
  v96 = v60;
  v97 = v61(a3);
  v27 = -v97;
  if (__OFSUB__(0, v97))
  {
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
  }
  a2 = v241;
LABEL_56:
  v155 = v14;
  v156 = *(void (**)(void))(v14 + 32);
  ((void (*)(char *, uint64_t, uint64_t))v156)(a2, v247, a3);
  v6 = v240;
  v157 = (*(uint64_t (**)(uint64_t, uint64_t))(v240 + 64))(a3, v240);
  v250 = v156;
  if ((v157 & 1) != 0)
  {
    v158 = ((uint64_t (*)(uint64_t, uint64_t))v61)(a3, v96);
    if (!__OFSUB__(v158, 1))
    {
      v252[0] = v158 - 1;
      v161 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 96);
      v162 = lazy protocol witness table accessor for type Int and conformance Int(v158, v159, v160);
      v163 = (char *)v61;
      v164 = v243;
      v161(v252, &type metadata for Int, v162, a3, v6);
      (*(void (**)(char *, char *, uint64_t, uint64_t))(v96 + 200))(a2, v164, a3, v96);
      v165 = v164;
      v30 = v163;
      v166 = v239;
      (*(void (**)(char *, uint64_t))(v155 + 8))(v165, a3);
      v167 = v238;
      v168 = swift_getAssociatedConformanceWitness((uint64_t)v166, a3, v238, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v169 = v237;
      goto LABEL_60;
    }
    goto LABEL_86;
  }
  v170 = v238;
  v166 = v239;
  v168 = swift_getAssociatedConformanceWitness((uint64_t)v239, a3, v238, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  v169 = v237;
  (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v168 + 8))(&unk_1816B7DA8, 256, v170, v168);
  (*((void (**)(char *, uint64_t, const char *))v166 + 3))(v169, a3, v166);
  v167 = v170;
  v30 = v249;
LABEL_60:
  (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v168 + 8))(&unk_1816B7DA8, 256, v167, v168);
  (*((void (**)(char *, uint64_t, const char *))v166 + 3))(v169, a3, v166);
  v8 = *(void (**)(char *, uint64_t))(v155 + 8);
  if ((v27 & 0x8000000000000000) == 0)
  {
    v8(v245, a3);
    v171 = v248;
    v172 = ((uint64_t (*)(uint64_t, uint64_t))v30)(a3, v248);
    v173 = v247;
    if (v27 >= v172)
    {
      v8(a2, a3);
      v218 = v236;
      v219 = v250;
      ((void (*)(char *, char *, uint64_t))v250)(v236, v246, a3);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v219)(v173, v218, a3);
    }
    else
    {
      v174 = ((uint64_t (*)(char *, uint64_t))v8)(v246, a3);
      v252[0] = v27;
      v175 = v171;
      v176 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 96);
      v179 = lazy protocol witness table accessor for type Int and conformance Int(v174, v177, v178);
      v180 = v243;
      v176(v252, &type metadata for Int, v179, a3, v6);
      v181 = v236;
      (*(void (**)(char *, char *, uint64_t, uint64_t))(v175 + 216))(a2, v180, a3, v175);
      v8(v180, a3);
      v8(a2, a3);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v250)(v173, v181, a3);
    }
  }
LABEL_81:
  v8(v246, a3);
  v208 = v248;
  v209 = ((uint64_t (*)(uint64_t, uint64_t))v30)(a3, v248);
  if (__OFSUB__(0, v209))
  {
    __break(1u);
  }
  else if (-v209 < v27)
  {
    v210 = v208;
    v211 = ((uint64_t (*)(char *, uint64_t))v8)(v245, a3);
    v252[0] = -v27;
    v212 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 96);
    v215 = lazy protocol witness table accessor for type Int and conformance Int(v211, v213, v214);
    v216 = v243;
    v212(v252, &type metadata for Int, v215, a3, v6);
    v217 = v236;
    (*(void (**)(char *, char *, uint64_t, uint64_t))(v210 + 200))(a2, v216, a3, v210);
    v8(v216, a3);
    v8(a2, a3);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v250)(v247, v217, a3);
  }
  v8(a2, a3);
  v220 = v236;
  v221 = v250;
  ((void (*)(char *, char *, uint64_t))v250)(v236, v245, a3);
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v221)(v247, v220, a3);
}

uint64_t static FixedWidthInteger._nonMaskingLeftShift(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (**v19)(char *, uint64_t);
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v25;
  unint64_t AssociatedConformanceWitness;
  char *v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  void (**v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v47 = a2;
  v48 = a1;
  v44 = a5;
  v7 = *(_QWORD *)(a4 + 8);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v8, a3, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v10 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v42 - v11;
  v46 = *(void (***)(char *, uint64_t))(a3 - 8);
  v13 = MEMORY[0x1E0C80A78](v10);
  v45 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v42 - v16;
  MEMORY[0x1E0C80A78](v15);
  v19 = (void (**)(char *, uint64_t))((char *)&v42 - v18);
  v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 64))(a3, v7);
  v43 = (char *)v19;
  if ((v20 & 1) != 0)
  {
    v21 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 56))(a3, a4);
    if (__OFSUB__(v21, 1))
    {
      __break(1u);
      goto LABEL_16;
    }
    v49 = v21 - 1;
    v24 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v7 + 96);
    v25 = lazy protocol witness table accessor for type Int and conformance Int(v21, v22, v23);
    v24(&v49, &type metadata for Int, v25, a3, v7);
    (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(a4 + 200))(v48, v17, a3, a4);
    v19 = v46;
    v46[1](v17, a3);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v8, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  }
  else
  {
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v8, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 24))(v12, a3, v8);
    v19 = v46;
  }
  (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
  v27 = v45;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 24))(v12, a3, v8);
  v28 = v19[1];
  v29 = v47;
  if (v47 < 0)
  {
    v28(v27, a3);
    v36 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 56))(a3, a4);
    v12 = v44;
    if (!__OFSUB__(0, v36))
    {
      if (-v36 < v29)
      {
        v37 = ((uint64_t (*)(char *, uint64_t))v28)(v43, a3);
        v49 = -v29;
        v38 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v7 + 96);
        v41 = lazy protocol witness table accessor for type Int and conformance Int(v37, v39, v40);
        v38(&v49, &type metadata for Int, v41, a3, v7);
        (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(a4 + 200))(v48, v17, a3, a4);
        return ((uint64_t (*)(char *, uint64_t))v28)(v17, a3);
      }
      return ((uint64_t (*)(char *, char *, uint64_t))v19[4])(v12, v43, a3);
    }
LABEL_16:
    __break(1u);
    return ((uint64_t (*)(char *, char *, uint64_t))v19[4])(v12, v43, a3);
  }
  v28(v43, a3);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(a4 + 56))(a3, a4) > v29)
  {
    v30 = ((uint64_t (*)(char *, uint64_t))v28)(v27, a3);
    v49 = v29;
    v31 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v7 + 96);
    v34 = lazy protocol witness table accessor for type Int and conformance Int(v30, v32, v33);
    v31(&v49, &type metadata for Int, v34, a3, v7);
    (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(a4 + 216))(v48, v17, a3, a4);
    return ((uint64_t (*)(char *, uint64_t))v28)(v17, a3);
  }
  return ((uint64_t (*)(char *, char *, uint64_t))v19[4])(v44, v27, a3);
}

BOOL specialized static FixedWidthInteger._convert<A>(from:)(uint64_t a1, double a2)
{
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;

  v4 = (*(_QWORD *)&a2 >> 52) & 0x7FFLL;
  v5 = *(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL;
  if (!(v4 | *(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL))
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    result = 1;
    goto LABEL_50;
  }
  if (v4 == 2047 || (v6 = Double.exponent.getter(a2), v6 >= 128))
  {
    result = 0;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 1;
    return result;
  }
  v7 = v6;
  v8 = Double.significandWidth.getter(a2);
  result = v7 >= v8;
  v10 = v8 + __clz(__rbit64(v5));
  v11 = v7 - v10;
  if (__OFSUB__(v7, v10))
  {
    __break(1u);
    goto LABEL_35;
  }
  if (v10 > 127)
  {
    v12 = v5 >> (v10 - v7);
    if (v11 <= 0xFFFFFFFFFFFFFFC0)
      v12 = 0;
    v13 = v5 << v11;
    if (v11 >= 0x40)
      v13 = 0;
    if ((v11 & 0x8000000000000000) == 0)
      v12 = v13;
    v10 = 0;
    if (v11 - 65 >= 0xFFFFFFFFFFFFFF7FLL)
      v5 = v12;
    else
      v5 = 0;
  }
  else
  {
    if (v11 - 129 < 0xFFFFFFFFFFFFFEFFLL)
    {
LABEL_7:
      v10 = 0;
      v5 = 0;
      goto LABEL_17;
    }
    if ((v11 & 0x8000000000000000) != 0)
    {
      v23 = v5 >> (v10 - v7);
      if ((unint64_t)(v10 - v7) >= 0x40)
        v23 = 0;
      v10 = 0;
      if (v11 <= 0xFFFFFFFFFFFFFF80)
        v5 = 0;
      else
        v5 = v23;
    }
    else
    {
      if (v11 >= 0x80)
        goto LABEL_7;
      if (v11 > 0x3F)
      {
        v10 = v5 << v11;
        v5 = 0;
      }
      else if (v11)
      {
        v10 = v5 >> (v10 - v7);
        v5 <<= v11;
      }
      else
      {
        v10 = 0;
      }
    }
  }
LABEL_17:
  if (v7 != 127)
  {
    if (v7 <= -128)
      v14 = -128;
    else
      v14 = v7;
    if ((v14 & 0x8000000000000000) != 0)
    {
      if (v7 < -127)
      {
        v15 = 0;
        v16 = 0;
LABEL_43:
        v20 = v16 | v5;
        v21 = v15 | v10;
        if (a2 >= 0.0)
        {
          if ((v21 & 0x8000000000000000) == 0)
          {
LABEL_49:
            *(_QWORD *)a1 = v20;
            *(_QWORD *)(a1 + 8) = v21;
LABEL_50:
            *(_BYTE *)(a1 + 16) = 0;
            return result;
          }
        }
        else if ((v21 & 0x8000000000000000) == 0)
        {
          v22 = v20 == 0;
          v20 = -(uint64_t)v20;
          if (v22)
            v21 = -(uint64_t)v21;
          else
            v21 = ~v21;
          goto LABEL_49;
        }
        _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000028, 0x8000000181763C20 | 0x8000000000000000, "Swift/LegacyInt128.swift", 24, 2, 0x27CuLL, 0);
      }
      v15 = 0;
      v16 = 0;
      v19 = -(uint64_t)v14;
      if ((v19 & 0x7Fu) > 0x3FuLL)
        goto LABEL_43;
      if ((v19 & 0x7F) != 0)
      {
        v15 = 0;
        v16 = 1uLL >> v19;
        goto LABEL_43;
      }
    }
    else
    {
      if (v14 > 0x3F)
      {
        v16 = 0;
        v15 = 1 << v14;
        goto LABEL_43;
      }
      if (v14)
      {
        v15 = 1uLL >> -(char)v14;
        v16 = 1 << v14;
        goto LABEL_43;
      }
    }
    v15 = 0;
    v16 = 1;
    goto LABEL_43;
  }
LABEL_35:
  if (a2 >= 0.0 || (v17 = v10 | v5) != 0)
  {
    result = 0;
    v18 = 0;
    LOBYTE(v17) = 1;
  }
  else
  {
    v18 = 0x8000000000000000;
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 16) = v17;
  return result;
}

uint64_t static FixedWidthInteger._convert<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *TupleTypeMetadata2;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  unint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t (*v73)(uint64_t, uint64_t);
  char v74;
  void (*v75)(char *, uint64_t, uint64_t);
  void (*v76)(char *, uint64_t);
  uint64_t v77;
  char *v78;
  void (**v79)(char *, _QWORD, unint64_t *);
  char *v80;
  const char *v81;
  unint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char v86;
  void (*v87)(uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t (*v90)(unint64_t *, uint64_t);
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(uint64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t);
  unint64_t v101;
  char v102;
  void (*v103)(uint64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t);
  unint64_t v104;
  char v105;
  void (*v106)(char *, unint64_t *);
  uint64_t v107;
  uint64_t v108;
  uint64_t (*v109)(unint64_t *, uint64_t);
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(uint64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t);
  unint64_t v121;
  int v122;
  char *v123;
  void (*v124)(uint64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t);
  unint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  char *v132;
  char *v133;
  char v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void (*v140)(uint64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t);
  unint64_t v141;
  char *v142;
  char v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  char *v147;
  char *v148;
  void (*v149)(char *, char *, unint64_t *);
  char *v150;
  uint64_t (*v151)(char *, char *, unint64_t *);
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void (*v156)(uint64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t);
  unint64_t v157;
  uint64_t v158;
  BOOL v159;
  char v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  void (*v169)(uint64_t *, ValueMetadata *);
  uint64_t v170;
  uint64_t v171;
  char *v172;
  unint64_t *v173;
  unint64_t v174;
  char *v175;
  unint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  char *v181;
  char *v182;
  char *v183;
  char *v184;
  unint64_t v185;
  char v186;
  uint64_t v187;
  char v188;
  uint64_t v189;
  char *v190;
  char v191;
  char *v192;
  char *v193;
  uint64_t v194;
  const char *v195;
  char *v196;
  uint64_t v197;
  unint64_t *v198;
  unint64_t v199;
  unint64_t v200;
  char *v201;
  char *v202;
  unint64_t *v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  char *v207;
  uint64_t v208;
  char *v209;
  void (*v210)(char *, unint64_t *);
  char *v211;
  char *v212;
  char *v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  const char *v217;
  uint64_t v218;
  unint64_t v219;
  char *v220;
  char *v221;
  char *v222;
  uint64_t v223;
  const char *v224;
  unint64_t v225;
  unint64_t v226;
  char *v227;
  char *v228;
  char *v229;
  char *v230;
  uint64_t v231;
  void (*v232)(char *, uint64_t);
  char *v234;
  char *v235;
  const char *v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  char *v240;
  char *v241;
  void (*v242)(char *, char *, unint64_t *);
  char *v243;
  unint64_t *v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t (*v247)(unint64_t *, unint64_t);
  const char *v248;
  uint64_t v249;
  unint64_t v250;
  unint64_t AssociatedConformanceWitness;
  char *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  char *v258;
  char v259;
  uint64_t v260;
  char *v261;
  unint64_t *v262;
  unint64_t v263;
  char *v264;
  char v265;
  void (*v266)(char *, unint64_t *);
  char *v267;
  char *v268;
  unint64_t *v269;
  uint64_t v270;
  const char *v271;
  unint64_t *v272;
  unint64_t v273;
  unint64_t v274;
  char *v275;
  char *v276;
  unint64_t v277;
  char *v278;
  void (*v279)(char *, unint64_t *);
  char *v280;
  unint64_t *v281;
  uint64_t v282;
  char *v283;
  unint64_t v284;
  char *v285;
  uint64_t v286;
  const char *v287;
  char *v288;
  uint64_t v289;
  char *v290;
  uint64_t v291;
  char *v292;
  char *v293;
  char *v294;
  char *v295;
  uint64_t (*v296)(void);
  char *v297;
  char *v298;
  char *v299;
  unint64_t AssociatedTypeWitness;
  char *v301;
  const char *v302;
  char *v303;
  unint64_t v304;
  unint64_t v305;
  char *v306;
  void (*v307)(char *, uint64_t, uint64_t);
  char *v308;
  char *v309;
  char *v310;
  const char *v311;
  unint64_t v312;
  char *v313;
  uint64_t v314;
  char *v315;
  char *v316;
  uint64_t v317;
  char *v318;
  unint64_t v319;
  uint64_t (*v320)(unint64_t *, uint64_t);
  uint64_t (*v321)(unint64_t *, uint64_t);
  char *v322;
  char *v323;
  const char *v324;
  uint64_t v325;
  uint64_t v326;
  char *v327;
  uint64_t v328;
  char *v329;
  char *v330;
  uint64_t (*v331)(void);
  char *v332;
  unint64_t v333;
  uint64_t v334;
  uint64_t v335;
  void (**v336)(char *, _QWORD, unint64_t *);
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  unint64_t *v341;
  char *v342;
  uint64_t v343;
  uint64_t v344;

  v325 = *(_QWORD *)(a3 - 8);
  v326 = a1;
  v10 = MEMORY[0x1E0C80A78](a1);
  v299 = (char *)&v286 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v298 = (char *)&v286 - v13;
  MEMORY[0x1E0C80A78](v12);
  v297 = (char *)&v286 - v14;
  v337 = v15;
  v339 = *(_QWORD *)(v15 + 8);
  v16 = *(_QWORD *)(v339 + 24);
  v302 = *(const char **)(v16 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v302, v17, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v301 = (char *)&v286 - v18;
  v19 = swift_getAssociatedTypeWitness(255, (const char *)v16, a3, (uint64_t)&protocol requirements base descriptor for Numeric, associated type descriptor for Numeric.Magnitude);
  v289 = v16;
  v311 = *(const char **)(swift_getAssociatedConformanceWitness(v16, a3, v19, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Numeric)+ 16);
  v312 = swift_getAssociatedTypeWitness(0, v311, v19, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v312);
  v313 = (char *)&v286 - v20;
  v343 = a3;
  v291 = type metadata accessor for Optional((const char *)0xFF, a3, v21, v22);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v291, (uint64_t)&type metadata for Bool, 0, 0);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v290 = (char *)&v286 - v24;
  v341 = swift_checkMetadataState(0, v19);
  v328 = *(v341 - 1);
  v25 = MEMORY[0x1E0C80A78](v341);
  v309 = (char *)&v286 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v25);
  v310 = (char *)&v286 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v288 = (char *)&v286 - v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v292 = (char *)&v286 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v327 = (char *)&v286 - v34;
  MEMORY[0x1E0C80A78](v33);
  v332 = (char *)&v286 - v35;
  v319 = swift_getAssociatedTypeWitness(0, (const char *)a6, a4, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, associated type descriptor for BinaryFloatingPoint.RawSignificand);
  v314 = *(_QWORD *)(v319 - 8);
  v36 = MEMORY[0x1E0C80A78](v319);
  v315 = (char *)&v286 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v36);
  v39 = (char *)&v286 - v38;
  v333 = a6;
  v40 = *(_QWORD *)(a6 + 16);
  v41 = swift_getAssociatedTypeWitness(255, (const char *)v40, a4, (uint64_t)&protocol requirements base descriptor for FloatingPoint, associated type descriptor for FloatingPoint.Exponent);
  v42 = a2;
  v335 = *(_QWORD *)(swift_getAssociatedConformanceWitness(v40, a4, v41, (uint64_t)&protocol requirements base descriptor for FloatingPoint, (uint64_t)&associated conformance descriptor for FloatingPoint.FloatingPoint.Exponent: SignedInteger)+ 8);
  v317 = *(_QWORD *)(v335 + 24);
  v43 = *(const char **)(v317 + 16);
  v305 = swift_getAssociatedTypeWitness(0, v43, v41, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v305);
  v303 = (char *)&v286 - v44;
  v45 = swift_checkMetadataState(0, v41);
  v336 = (void (**)(char *, _QWORD, unint64_t *))*(v45 - 1);
  v46 = MEMORY[0x1E0C80A78](v45);
  v295 = (char *)&v286 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = MEMORY[0x1E0C80A78](v46);
  v316 = (char *)&v286 - v49;
  v50 = MEMORY[0x1E0C80A78](v48);
  v293 = (char *)&v286 - v51;
  v52 = MEMORY[0x1E0C80A78](v50);
  v294 = (char *)&v286 - v53;
  v54 = MEMORY[0x1E0C80A78](v52);
  v318 = (char *)&v286 - v55;
  v56 = MEMORY[0x1E0C80A78](v54);
  v306 = (char *)&v286 - v57;
  v58 = MEMORY[0x1E0C80A78](v56);
  v330 = (char *)&v286 - v59;
  v60 = MEMORY[0x1E0C80A78](v58);
  v329 = (char *)&v286 - v61;
  MEMORY[0x1E0C80A78](v60);
  v342 = (char *)&v286 - v62;
  v324 = *(const char **)(*(_QWORD *)(*(_QWORD *)(v40 + 16) + 8) + 16);
  v63 = swift_getAssociatedTypeWitness(0, v324, a4, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v64 = MEMORY[0x1E0C80A78](v63);
  v322 = (char *)&v286 - v65;
  v66 = *(_QWORD *)(a4 - 8);
  v67 = MEMORY[0x1E0C80A78](v64);
  v308 = (char *)&v286 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = MEMORY[0x1E0C80A78](v67);
  v323 = (char *)&v286 - v70;
  MEMORY[0x1E0C80A78](v69);
  v72 = (char *)&v286 - v71;
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v40 + 384))(a4, v40) & 1) != 0)
  {
    v248 = v302;
    v249 = v343;
    v250 = AssociatedTypeWitness;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v302, v343, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    v252 = v301;
    (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, v250, AssociatedConformanceWitness);
    v253 = v326;
    (*((void (**)(char *, uint64_t, const char *))v248 + 3))(v252, v249, v248);
    v160 = 1;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v325 + 56))(v253, 0, 1, v249);
    return v160 & 1;
  }
  v73 = *(uint64_t (**)(uint64_t, uint64_t))(v40 + 376);
  v338 = v40;
  if ((v73(a4, v40) & 1) == 0)
    goto LABEL_46;
  v331 = *(uint64_t (**)(void))(v339 + 64);
  v74 = v331();
  v75 = *(void (**)(char *, uint64_t, uint64_t))(v66 + 16);
  v340 = v42;
  v307 = v75;
  v75(v72, v42, a4);
  v304 = v63;
  if ((v74 & 1) != 0)
  {
    v76 = *(void (**)(char *, uint64_t))(v66 + 8);
    v76(v72, a4);
    v77 = v338;
    v78 = v342;
    v79 = v336;
    v80 = v39;
    goto LABEL_6;
  }
  v81 = v324;
  v82 = swift_getAssociatedConformanceWitness((uint64_t)v324, a4, v63, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  v83 = v322;
  (*(void (**)(void *, uint64_t))(v82 + 8))(&unk_1816B7DB8, 257);
  v84 = v323;
  (*((void (**)(char *, uint64_t, const char *))v81 + 3))(v83, a4, v81);
  v85 = v338;
  v86 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v338 + 24) + 8) + 40))(v72, v84, a4);
  v76 = *(void (**)(char *, uint64_t))(v66 + 8);
  v77 = v85;
  v76(v84, a4);
  v76(v72, a4);
  v78 = v342;
  v79 = v336;
  v80 = v39;
  if ((v86 & 1) != 0)
  {
LABEL_6:
    v287 = v43;
    v87 = *(void (**)(uint64_t, uint64_t))(v77 + 176);
    v334 = a4;
    v87(a4, v77);
    v296 = *(uint64_t (**)(void))(v337 + 56);
    v88 = v296();
    v89 = v335;
    v90 = *(uint64_t (**)(unint64_t *, uint64_t))(v335 + 64);
    v91 = v90(v45, v335);
    v321 = v90;
    if ((v91 & 1) != 0)
    {
      v320 = *(uint64_t (**)(unint64_t *, uint64_t))(v89 + 128);
      v92 = v320(v45, v89);
      if (v92 < 64)
      {
        v95 = v329;
        ((void (**)(char *, char *, unint64_t *))v79)[2](v329, v78, v45);
        goto LABEL_18;
      }
      v344 = v88;
      v103 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t))(v89 + 96);
      v104 = lazy protocol witness table accessor for type Int and conformance Int(v92, v93, v94);
      v95 = v329;
      v103(&v344, &type metadata for Int, v104, v45, v89);
      v102 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v89 + 32) + 8)
                                                                           + 16))(v78, v95, v45);
      goto LABEL_13;
    }
    v96 = v90(v45, v89);
    v320 = *(uint64_t (**)(unint64_t *, uint64_t))(v89 + 128);
    v97 = v320(v45, v89);
    if ((v96 & 1) != 0)
    {
      if (v97 > 64)
      {
        v344 = v88;
        v100 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t))(v89 + 96);
        v101 = lazy protocol witness table accessor for type Int and conformance Int(v97, v98, v99);
        v95 = v329;
        v100(&v344, &type metadata for Int, v101, v45, v89);
        v78 = v342;
        v102 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v89 + 32) + 8)
                                                                             + 16))(v342, v95, v45);
LABEL_13:
        v105 = v102;
        v106 = (void (*)(char *, unint64_t *))v79[1];
        v106(v95, v45);
        if ((v105 & 1) != 0)
          goto LABEL_19;
        goto LABEL_45;
      }
      v306 = v80;
      v129 = (uint64_t)v287;
      v130 = v305;
      v131 = swift_getAssociatedConformanceWitness((uint64_t)v287, (uint64_t)v45, v305, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v132 = v303;
      (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v131 + 8))(&unk_1816B7DA8, 256, v130, v131);
      v95 = v329;
      (*(void (**)(char *, unint64_t *, uint64_t))(v129 + 24))(v132, v45, v129);
      v133 = v342;
      v134 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v89 + 32) + 8)
                                                                           + 16))(v342, v95, v45);
      v106 = (void (*)(char *, unint64_t *))v79[1];
      v106(v95, v45);
      v135 = v330;
      ((void (**)(char *, char *, unint64_t *))v79)[2](v330, v133, v45);
      if ((v134 & 1) != 0)
      {
        v106(v135, v45);
        v78 = v342;
        v80 = v306;
        goto LABEL_19;
      }
      v158 = (*(uint64_t (**)(unint64_t *, uint64_t))(v89 + 120))(v45, v89);
      v106(v135, v45);
      v159 = v158 < v88;
      v78 = v342;
      v80 = v306;
      if (!v159)
      {
LABEL_45:
        v106(v78, v45);
        goto LABEL_46;
      }
    }
    else
    {
      if (v97 < 64)
      {
        v95 = v329;
        v78 = v342;
        ((void (**)(char *, char *, unint64_t *))v79)[2](v329, v342, v45);
LABEL_18:
        v107 = (*(uint64_t (**)(unint64_t *, uint64_t))(v89 + 120))(v45, v89);
        v106 = (void (*)(char *, unint64_t *))v79[1];
        v106(v95, v45);
        if (v107 < v88)
          goto LABEL_19;
        goto LABEL_45;
      }
      v136 = v306;
      v137 = ((uint64_t (*)(char *, char *, unint64_t *))v79[2])(v306, v342, v45);
      v95 = v329;
      if (v88 <= 0)
      {
        v106 = (void (*)(char *, unint64_t *))v79[1];
        v106(v136, v45);
        v78 = v342;
        goto LABEL_45;
      }
      v344 = v88;
      v140 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t))(v89 + 96);
      v141 = lazy protocol witness table accessor for type Int and conformance Int(v137, v138, v139);
      v142 = v136;
      v140(&v344, &type metadata for Int, v141, v45, v89);
      v143 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v89 + 32) + 8)
                                                                           + 16))(v136, v95, v45);
      v106 = (void (*)(char *, unint64_t *))v79[1];
      v106(v95, v45);
      v106(v142, v45);
      v78 = v342;
      if ((v143 & 1) == 0)
        goto LABEL_45;
    }
LABEL_19:
    v306 = (char *)v76;
    v108 = (*(uint64_t (**)(uint64_t))(v333 + 136))(v334);
    v109 = v321;
    v110 = v321(v45, v89);
    v330 = (char *)v106;
    if ((v110 & 1) != 0)
    {
      v111 = v320(v45, v89);
      if (v111 < 64)
      {
        ((void (**)(char *, char *, unint64_t *))v79)[2](v95, v78, v45);
        v114 = (*(uint64_t (**)(unint64_t *, uint64_t))(v89 + 120))(v45, v89);
        v106(v95, v45);
        v115 = v114 < v108;
LABEL_27:
        v126 = v95;
        v127 = v89;
        goto LABEL_49;
      }
      v344 = v108;
      v123 = v78;
      v124 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t))(v89 + 96);
      v125 = lazy protocol witness table accessor for type Int and conformance Int(v111, v112, v113);
      v124(&v344, &type metadata for Int, v125, v45, v89);
      v122 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v89 + 32) + 8)
                                                                           + 16))(v123, v95, v45);
LABEL_26:
      v115 = v122;
      v106(v95, v45);
      goto LABEL_27;
    }
    v116 = v109(v45, v89);
    v117 = v320(v45, v89);
    if ((v116 & 1) != 0)
    {
      if (v117 > 64)
      {
        v344 = v108;
        v120 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t))(v89 + 96);
        v121 = lazy protocol witness table accessor for type Int and conformance Int(v117, v118, v119);
        v120(&v344, &type metadata for Int, v121, v45, v89);
        v122 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v89 + 32) + 8)
                                                                             + 16))(v342, v95, v45);
        goto LABEL_26;
      }
      v144 = (uint64_t)v287;
      v145 = v305;
      v146 = swift_getAssociatedConformanceWitness((uint64_t)v287, (uint64_t)v45, v305, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v147 = v303;
      (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v146 + 8))(&unk_1816B7DA8, 256, v145, v146);
      (*(void (**)(char *, unint64_t *, uint64_t))(v144 + 24))(v147, v45, v144);
      v148 = v342;
      LOBYTE(v145) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v89 + 32)
                                                                                               + 8)
                                                                                   + 16))(v342, v95, v45);
      v106(v95, v45);
      v149 = (void (*)(char *, char *, unint64_t *))v79[2];
      v150 = v294;
      v149(v294, v148, v45);
      v115 = (v145 & 1) != 0 || (*(uint64_t (**)(unint64_t *, uint64_t))(v89 + 120))(v45, v89) < v108;
      v106(v150, v45);
      v126 = v95;
      v127 = v335;
    }
    else
    {
      if (v117 < 64)
      {
        ((void (**)(char *, char *, unint64_t *))v79)[2](v95, v342, v45);
        v128 = (*(uint64_t (**)(unint64_t *, uint64_t))(v89 + 120))(v45, v89);
        v106(v95, v45);
        v115 = v128 < v108;
      }
      else
      {
        v151 = (uint64_t (*)(char *, char *, unint64_t *))v79[2];
        v152 = v293;
        v153 = v151(v293, v342, v45);
        if (v108 < 1)
        {
          v106(v152, v45);
          v115 = 0;
        }
        else
        {
          v344 = v108;
          v156 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t))(v89 + 96);
          v157 = lazy protocol witness table accessor for type Int and conformance Int(v153, v154, v155);
          v156(&v344, &type metadata for Int, v157, v45, v89);
          v115 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v89 + 32) + 8)
                                                                               + 16))(v152, v95, v45);
          v106(v95, v45);
          v106(v152, v45);
        }
      }
      v126 = v95;
      v127 = v89;
    }
LABEL_49:
    LODWORD(v305) = v115 ^ 1;
    v162 = v333;
    v161 = v334;
    (*(void (**)(uint64_t, unint64_t))(v333 + 120))(v334, v333);
    v163 = v161;
    v164 = v80;
    v165 = v319;
    v166 = *(_QWORD *)(swift_getAssociatedConformanceWitness(v162, v163, v319, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawSignificand: UnsignedInteger)+ 8);
    v167 = (*(uint64_t (**)(unint64_t, uint64_t))(v166 + 144))(v165, v166);
    v168 = v167 + v108;
    v344 = v168;
    v169 = *(void (**)(uint64_t *, ValueMetadata *))(v127 + 88);
    v333 = lazy protocol witness table accessor for type Int and conformance Int(v167, v170, v171);
    v169(&v344, &type metadata for Int);
    v172 = v318;
    (*(void (**)(char *, char *, unint64_t *))(*(_QWORD *)(v317 + 8) + 40))(v342, v126, v45);
    ((void (*)(char *, unint64_t *))v330)(v126, v45);
    v173 = v341;
    v174 = swift_getAssociatedConformanceWitness(v337, v343, (uint64_t)v341, (uint64_t)&protocol requirements base descriptor for FixedWidthInteger, (uint64_t)&associated conformance descriptor for FixedWidthInteger.Numeric.Magnitude: FixedWidthInteger);
    if (v168 >= (*(uint64_t (**)(unint64_t *, unint64_t))(v174 + 56))(v173, v174))
    {
      v183 = v315;
      (*(void (**)(char *, char *, unint64_t *, uint64_t, unint64_t, uint64_t))(v166 + 256))(v164, v172, v45, v335, v165, v166);
      v184 = v172;
      v181 = v330;
      ((void (*)(char *, unint64_t *))v330)(v184, v45);
      (*(void (**)(char *, unint64_t))(v314 + 8))(v164, v165);
      v185 = swift_getAssociatedConformanceWitness(v339, v343, (uint64_t)v173, (uint64_t)&protocol requirements base descriptor for BinaryInteger, (uint64_t)&associated conformance descriptor for BinaryInteger.Numeric.Magnitude: BinaryInteger);
      (*(void (**)(char *, unint64_t, uint64_t, unint64_t *, unint64_t))(v185 + 96))(v183, v165, v166, v173, v185);
      v182 = v316;
      v179 = v338;
      v178 = v335;
    }
    else
    {
      v175 = v315;
      (*(void (**)(char *, char *, unint64_t))(v314 + 32))(v315, v164, v165);
      v176 = swift_getAssociatedConformanceWitness(v339, v343, (uint64_t)v173, (uint64_t)&protocol requirements base descriptor for BinaryInteger, (uint64_t)&associated conformance descriptor for BinaryInteger.Numeric.Magnitude: BinaryInteger);
      v177 = v327;
      (*(void (**)(char *, unint64_t, uint64_t, unint64_t *, unint64_t))(v176 + 96))(v175, v165, v166, v341, v176);
      v178 = v335;
      (*(void (**)(char *, char *, unint64_t *, uint64_t, unint64_t *, unint64_t))(v176 + 256))(v177, v172, v45, v335, v341, v176);
      v179 = v338;
      (*(void (**)(char *, unint64_t *))(v328 + 8))(v177, v341);
      v180 = v172;
      v181 = v330;
      ((void (*)(char *, unint64_t *))v330)(v180, v45);
      v182 = v316;
    }
    v186 = v331();
    ((void (**)(char *, char *, unint64_t *))v336)[2](v182, v342, v45);
    if ((v186 & 1) != 0)
    {
      v187 = v296() - 1;
      v188 = v321(v45, v178);
      v189 = v320(v45, v178);
      if ((v188 & 1) != 0)
      {
        if (v189 > 64)
        {
          v344 = v187;
          v190 = v329;
          (*(void (**)(uint64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t))(v178 + 96))(&v344, &type metadata for Int, v333, v45, v178);
          v191 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v178 + 16) + 8)
                                                                               + 8))(v190, v182, v45);
          ((void (*)(char *, unint64_t *))v181)(v190, v45);
          v192 = v182;
          goto LABEL_68;
        }
LABEL_58:
        v193 = v329;
        ((void (**)(char *, char *, unint64_t *))v336)[4](v329, v182, v45);
        v194 = (*(uint64_t (**)(unint64_t *, uint64_t))(v178 + 120))(v45, v178);
        ((void (*)(char *, unint64_t *))v181)(v193, v45);
        if (v187 == v194)
          goto LABEL_69;
        goto LABEL_59;
      }
      if (v189 <= 63)
        goto LABEL_58;
      v234 = v295;
      ((void (**)(char *, char *, unint64_t *))v336)[4](v295, v182, v45);
      if ((v187 & 0x8000000000000000) == 0)
      {
        v344 = v187;
        v235 = v329;
        (*(void (**)(uint64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t))(v178 + 96))(&v344, &type metadata for Int, v333, v45, v178);
        v191 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v178 + 16) + 8)
                                                                             + 8))(v235, v234, v45);
        ((void (*)(char *, unint64_t *))v181)(v235, v45);
        v192 = v234;
LABEL_68:
        ((void (*)(char *, unint64_t *))v181)(v192, v45);
        if ((v191 & 1) != 0)
        {
LABEL_69:
          ((void (*)(char *, unint64_t *))v181)(v342, v45);
          v236 = v324;
          v237 = v334;
          v238 = v304;
          v239 = swift_getAssociatedConformanceWitness((uint64_t)v324, v334, v304, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
          v240 = v322;
          (*(void (**)(void *, uint64_t, uint64_t, unint64_t))(v239 + 8))(&unk_1816B7DA8, 256, v238, v239);
          v241 = v323;
          (*((void (**)(char *, uint64_t, const char *))v236 + 3))(v240, v237, v236);
          LOBYTE(v238) = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v179 + 24) + 8)
                                                                             + 16))(v340, v241, v237);
          ((void (*)(char *, uint64_t))v306)(v241, v237);
          v242 = *(void (**)(char *, char *, unint64_t *))(v328 + 32);
          v243 = v292;
          v244 = v341;
          v242(v292, v332, v341);
          if ((v238 & 1) == 0)
          {
            (*(void (**)(char *, unint64_t *))(v328 + 8))(v243, v244);
            goto LABEL_76;
          }
          v245 = v343;
          v246 = swift_getAssociatedConformanceWitness(v339, v343, (uint64_t)v244, (uint64_t)&protocol requirements base descriptor for BinaryInteger, (uint64_t)&associated conformance descriptor for BinaryInteger.Numeric.Magnitude: BinaryInteger);
          v247 = *(uint64_t (**)(unint64_t *, unint64_t))(v246 + 64);
          if ((v247(v244, v246) & 1) != 0)
          {
            if ((*(uint64_t (**)(unint64_t *, unint64_t))(v246 + 128))(v244, v246) < 64)
            {
LABEL_82:
              v268 = v292;
              v269 = v341;
              v270 = (*(uint64_t (**)(unint64_t *, unint64_t))(v246 + 120))(v341, v246);
              (*(void (**)(char *, unint64_t *))(v328 + 8))(v268, v269);
              if (!v270)
                goto LABEL_88;
              goto LABEL_76;
            }
          }
          else
          {
            v259 = v247(v244, v246);
            v260 = (*(uint64_t (**)(unint64_t *, unint64_t))(v246 + 128))(v244, v246);
            if ((v259 & 1) == 0)
            {
              if (v260 < 64)
                goto LABEL_82;
              v344 = 0;
              v283 = v327;
              v262 = v341;
              (*(void (**)(uint64_t *, ValueMetadata *, unint64_t, unint64_t *, unint64_t))(v246 + 96))(&v344, &type metadata for Int, v333, v341, v246);
              v284 = swift_getAssociatedConformanceWitness(v289, v245, (uint64_t)v262, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Comparable);
              v285 = v292;
              v265 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(v284 + 8) + 8))(v292, v283, v262);
              v266 = *(void (**)(char *, unint64_t *))(v328 + 8);
              v266(v285, v262);
              v267 = v283;
LABEL_87:
              v266(v267, v262);
              if ((v265 & 1) != 0)
              {
LABEL_88:
                v258 = v290;
                (*(void (**)(uint64_t))(v337 + 72))(v245);
                v254 = 0;
                v255 = v325;
                v256 = v326;
                v257 = v291;
                v160 = v305;
                goto LABEL_89;
              }
LABEL_76:
              v160 = 0;
              v254 = 1;
              v255 = v325;
              v256 = v326;
              v257 = v291;
              v258 = v290;
LABEL_89:
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v255 + 56))(v258, v254, 1, v343);
              (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v257 - 8) + 32))(v256, v258, v257);
              return v160 & 1;
            }
            if (v260 <= 64)
            {
              v271 = v311;
              v272 = v341;
              v273 = v312;
              v274 = swift_getAssociatedConformanceWitness((uint64_t)v311, (uint64_t)v341, v312, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
              v275 = v313;
              (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v274 + 8))(&unk_1816B7DA8, 256, v273, v274);
              v276 = v327;
              (*((void (**)(char *, unint64_t *, const char *))v271 + 3))(v275, v272, v271);
              v277 = swift_getAssociatedConformanceWitness(v289, v245, (uint64_t)v272, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Comparable);
              v278 = v292;
              LOBYTE(v273) = (*(uint64_t (**)(char *, char *, unint64_t *, unint64_t))(v277 + 32))(v292, v276, v272, v277);
              v279 = *(void (**)(char *, unint64_t *))(v328 + 8);
              v279(v276, v272);
              v242(v288, v278, v272);
              if ((v273 & 1) != 0)
              {
                v280 = v288;
                v281 = v341;
                v282 = (*(uint64_t (**)(unint64_t *, unint64_t))(v246 + 120))(v341, v246);
                v279(v280, v281);
                if (!v282)
                  goto LABEL_88;
              }
              else
              {
                v279(v288, v341);
              }
              goto LABEL_76;
            }
          }
          v344 = 0;
          v261 = v327;
          v262 = v341;
          (*(void (**)(uint64_t *, ValueMetadata *, unint64_t, unint64_t *, unint64_t))(v246 + 96))(&v344, &type metadata for Int, v333, v341, v246);
          v263 = swift_getAssociatedConformanceWitness(v289, v245, (uint64_t)v262, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Comparable);
          v264 = v292;
          v265 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(v263 + 8) + 8))(v292, v261, v262);
          v266 = *(void (**)(char *, unint64_t *))(v328 + 8);
          v266(v261, v262);
          v267 = v264;
          goto LABEL_87;
        }
LABEL_59:
        v195 = v311;
        v196 = v181;
        v197 = v178;
        v198 = v341;
        v199 = v312;
        v336 = (void (**)(char *, _QWORD, unint64_t *))&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral;
        v200 = swift_getAssociatedConformanceWitness((uint64_t)v311, (uint64_t)v341, v312, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
        v201 = v313;
        (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(v200 + 8))(&qword_1816B7DB0, 512, v199, v200);
        v202 = v309;
        v203 = v198;
        (*((void (**)(char *, unint64_t *, const char *))v195 + 3))(v201, v198, v195);
        v204 = v339;
        v205 = v343;
        v206 = swift_getAssociatedConformanceWitness(v339, v343, (uint64_t)v198, (uint64_t)&protocol requirements base descriptor for BinaryInteger, (uint64_t)&associated conformance descriptor for BinaryInteger.Numeric.Magnitude: BinaryInteger);
        v207 = v327;
        v208 = v205;
        v209 = v342;
        (*(void (**)(char *, char *, unint64_t *, uint64_t, unint64_t *, unint64_t))(v206 + 256))(v202, v342, v45, v197, v203, v206);
        v210 = *(void (**)(char *, unint64_t *))(v328 + 8);
        v210(v202, v203);
        ((void (*)(char *, unint64_t *))v196)(v209, v45);
        v211 = v310;
        v212 = v332;
        (*(void (**)(char *, char *, unint64_t *, unint64_t))(v206 + 208))(v207, v332, v203, v206);
        v210(v207, v203);
        v213 = v212;
        v214 = v208;
        v210(v213, v203);
        LOBYTE(v203) = ((uint64_t (*)(uint64_t, uint64_t))v331)(v208, v204);
        v215 = v308;
        v216 = v334;
        v307(v308, v340, v334);
        if ((v203 & 1) != 0)
        {
          v217 = v324;
          v218 = v304;
          v219 = swift_getAssociatedConformanceWitness((uint64_t)v324, v216, v304, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)v336);
          v220 = v322;
          (*(void (**)(void *, uint64_t, uint64_t, unint64_t))(v219 + 8))(&unk_1816B7DA8, 256, v218, v219);
          v221 = v323;
          (*((void (**)(char *, uint64_t, const char *))v217 + 3))(v220, v216, v217);
          LOBYTE(v218) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v338 + 24) + 8)
                                                                            + 16))(v215, v221, v216);
          v222 = v306;
          ((void (*)(char *, uint64_t))v306)(v221, v216);
          ((void (*)(char *, uint64_t))v222)(v215, v216);
          v223 = v326;
          if ((v218 & 1) != 0)
          {
            v224 = v302;
            v225 = AssociatedTypeWitness;
            v226 = swift_getAssociatedConformanceWitness((uint64_t)v302, v214, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
            v227 = v301;
            (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v226 + 8))(&unk_1816B7DA8, 256, v225, v226);
            v228 = v297;
            (*((void (**)(char *, uint64_t, const char *))v224 + 3))(v227, v214, v224);
            v229 = v298;
            (*(void (**)(char *, unint64_t *, unint64_t, uint64_t, uint64_t))(v204 + 88))(v211, v341, v206, v214, v204);
            v230 = v299;
            (*(void (**)(char *, char *, uint64_t))(v337 + 88))(v299, v229, v214);
            v231 = v325;
            v232 = *(void (**)(char *, uint64_t))(v325 + 8);
            v232(v229, v214);
            v232(v228, v214);
            (*(void (**)(uint64_t, char *, uint64_t))(v231 + 32))(v223, v230, v214);
LABEL_64:
            v160 = v305;
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v231 + 56))(v223, 0, 1, v214);
            return v160 & 1;
          }
        }
        else
        {
          ((void (*)(char *, uint64_t))v306)(v215, v216);
          v223 = v326;
        }
        (*(void (**)(char *, unint64_t *, unint64_t, uint64_t, uint64_t))(v204 + 88))(v211, v341, v206, v214, v204);
        v231 = v325;
        goto LABEL_64;
      }
      v182 = v234;
    }
    ((void (*)(char *, unint64_t *))v181)(v182, v45);
    goto LABEL_59;
  }
LABEL_46:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v325 + 56))(v326, 1, 1, v343);
  v160 = 0;
  return v160 & 1;
}

unint64_t specialized FixedWidthInteger.init<A>(_:)(double a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t *TypeName;
  uint64_t v6;
  uint8x16_t *v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint8x16_t *v32;
  int64_t v33;
  int64_t v34;
  int64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  unint64_t v53;
  char v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char v58;

  specialized static FixedWidthInteger._convert<A>(from:)((uint64_t)&v56, a1);
  if ((v58 & 1) != 0)
  {
    v2 = specialized static String._createEmpty(withInitialCapacity:)(80);
    v4 = v3;
    v56 = v2;
    v57 = v3;
    TypeName = (uint64_t *)swift_getTypeName((Class *)&type metadata for Double, 0);
    if (v6 < 0)
      goto LABEL_66;
    v7 = (uint8x16_t *)TypeName;
    v8 = v6;
    v9 = validateUTF8(_:)(TypeName, v6);
    if ((v11 & 1) != 0)
      v12 = repairUTF8(_:firstKnownBrokenRange:)(v7->i8, v8, v9, v10);
    else
      v12 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v7, v8, v9 & 1);
    v14 = v12;
    v15 = v13;
    v16 = HIBYTE(v4) & 0xF;
    if ((v4 & 0x2000000000000000) == 0)
      v16 = v2 & 0xFFFFFFFFFFFFLL;
    if (!v16 && (v2 & ~v4 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease(v4);
      v56 = v14;
      v57 = v15;
      goto LABEL_21;
    }
    if ((v4 & 0x2000000000000000) != 0)
    {
      if ((v13 & 0x2000000000000000) != 0)
      {
        v18 = specialized _SmallString.init(_:appending:)(v2, v4, v12, v13);
        if ((v20 & 1) == 0)
        {
          v21 = v18;
          v22 = v19;
          swift_bridgeObjectRelease(v4);
          swift_bridgeObjectRelease(v15);
          v56 = v21;
          v57 = v22;
          v15 = v22;
          v14 = v21;
          goto LABEL_21;
        }
        goto LABEL_19;
      }
    }
    else if ((v13 & 0x2000000000000000) != 0)
    {
LABEL_19:
      v17 = HIBYTE(v15) & 0xF;
      goto LABEL_20;
    }
    v17 = v12 & 0xFFFFFFFFFFFFLL;
LABEL_20:
    _StringGuts.append(_:)(v14, v15, 0, v17);
    swift_bridgeObjectRelease(v15);
    v14 = v56;
    v15 = v57;
LABEL_21:
    v23 = HIBYTE(v15) & 0xF;
    if ((v15 & 0x2000000000000000) == 0)
      v23 = v14 & 0xFFFFFFFFFFFFLL;
    if (v23 || (v14 & ~v15 & 0x2000000000000000) != 0)
    {
      if ((v15 & 0x2000000000000000) != 0
        && (0x8000000181762940 & 0x2000000000000000) != 0
        && (v24 = specialized _SmallString.init(_:appending:)(v14, v15, 0xD00000000000001ELL, 0x8000000181762940 | 0x8000000000000000), (v26 & 1) == 0))
      {
        v27 = v24;
        v28 = v25;
        swift_bridgeObjectRelease(v15);
        swift_bridgeObjectRelease(0x8000000181762940 | 0x8000000000000000);
        v56 = v27;
        v57 = v28;
      }
      else
      {
        if ((0x8000000181762940 & 0x2000000000000000) != 0)
          v29 = (0x8000000181762940 >> 56) & 0xF;
        else
          v29 = 30;
        _StringGuts.append(_:)(0xD00000000000001ELL, 0x8000000181762940 | 0x8000000000000000, 0, v29);
        swift_bridgeObjectRelease(0x8000000181762940 | 0x8000000000000000);
      }
    }
    else
    {
      swift_bridgeObjectRelease(v15);
      v56 = 0xD00000000000001ELL;
      v57 = 0x8000000181762940 | 0x8000000000000000;
    }
    v30 = (uint64_t *)swift_getTypeName((Class *)&type metadata for _Int128, 0);
    if ((v31 & 0x8000000000000000) == 0)
    {
      v32 = (uint8x16_t *)v30;
      v33 = v31;
      v34 = validateUTF8(_:)(v30, v31);
      if ((v36 & 1) != 0)
        v37 = repairUTF8(_:firstKnownBrokenRange:)(v32->i8, v33, v34, v35);
      else
        v37 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v32, v33, v34 & 1);
      v39 = v37;
      v40 = v38;
      v41 = v57;
      v42 = HIBYTE(v57) & 0xF;
      if ((v57 & 0x2000000000000000) == 0)
        v42 = v56 & 0xFFFFFFFFFFFFLL;
      if (!v42 && (v56 & ~v57 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(v57);
        v56 = v39;
        v57 = v40;
        goto LABEL_52;
      }
      if ((v57 & 0x2000000000000000) != 0)
      {
        if ((v38 & 0x2000000000000000) != 0)
        {
          v44 = specialized _SmallString.init(_:appending:)(v56, v57, v37, v38);
          if ((v46 & 1) == 0)
          {
            v47 = v44;
            v48 = v45;
            swift_bridgeObjectRelease(v41);
            swift_bridgeObjectRelease(v40);
            v56 = v47;
            v57 = v48;
            v40 = v48;
            v39 = v47;
            goto LABEL_52;
          }
          goto LABEL_50;
        }
      }
      else if ((v38 & 0x2000000000000000) != 0)
      {
LABEL_50:
        v43 = HIBYTE(v40) & 0xF;
        goto LABEL_51;
      }
      v43 = v37 & 0xFFFFFFFFFFFFLL;
LABEL_51:
      _StringGuts.append(_:)(v39, v40, 0, v43);
      swift_bridgeObjectRelease(v40);
      v39 = v56;
      v40 = v57;
LABEL_52:
      v49 = HIBYTE(v40) & 0xF;
      if ((v40 & 0x2000000000000000) == 0)
        v49 = v39 & 0xFFFFFFFFFFFFLL;
      if (v49 || (v39 & ~v40 & 0x2000000000000000) != 0)
      {
        if ((v40 & 0x2000000000000000) != 0
          && (0x8000000181762960 & 0x2000000000000000) != 0
          && (v52 = specialized _SmallString.init(_:appending:)(v39, v40, 0xD00000000000002ELL, 0x8000000181762960 | 0x8000000000000000), (v54 & 1) == 0))
        {
          v51 = (char *)v52;
          v50 = v53;
          swift_bridgeObjectRelease(v40);
          swift_bridgeObjectRelease(0x8000000181762960 | 0x8000000000000000);
        }
        else
        {
          if ((0x8000000181762960 & 0x2000000000000000) != 0)
            v55 = (0x8000000181762960 >> 56) & 0xF;
          else
            v55 = 46;
          _StringGuts.append(_:)(0xD00000000000002ELL, 0x8000000181762960 | 0x8000000000000000, 0, v55);
          swift_bridgeObjectRelease(0x8000000181762960 | 0x8000000000000000);
          v51 = (char *)v56;
          v50 = v57;
        }
      }
      else
      {
        swift_bridgeObjectRelease(v40);
        v50 = 0x8000000181762960 | 0x8000000000000000;
        v51 = (char *)0xD00000000000002ELL;
      }
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v51, v50, "Swift/Integers.swift", 20, 2, 0xBFFuLL, 0);
    }
LABEL_66:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  return v56;
}

uint64_t FixedWidthInteger.init<A>(_:)@<X0>(uint64_t a1@<X0>, Class *a2@<X1>, Class *a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *TypeName;
  uint64_t v22;
  uint8x16_t *v23;
  int64_t v24;
  int64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint8x16_t *v48;
  int64_t v49;
  int64_t v50;
  int64_t v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  unint64_t v68;
  unint64_t v69;
  char v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;

  v12 = type metadata accessor for Optional(0, (uint64_t)a2, (uint64_t)a3, a4);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v72 - v14;
  static FixedWidthInteger._convert<A>(from:)((uint64_t)&v72 - v14, a1, (uint64_t)a2, (uint64_t)a3, a4, a5);
  v16 = (uint64_t)*(a2 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, Class *))(v16 + 48))(v15, 1, a2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    v18 = specialized static String._createEmpty(withInitialCapacity:)(80);
    v20 = v19;
    v72 = v18;
    v73 = v19;
    TypeName = (uint64_t *)swift_getTypeName(a3, 0);
    if (v22 < 0)
      goto LABEL_66;
    v23 = (uint8x16_t *)TypeName;
    v24 = v22;
    v25 = validateUTF8(_:)(TypeName, v22);
    if ((v27 & 1) != 0)
      v28 = repairUTF8(_:firstKnownBrokenRange:)(v23->i8, v24, v25, v26);
    else
      v28 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v23, v24, v25 & 1);
    v30 = v28;
    v31 = v29;
    v32 = HIBYTE(v20) & 0xF;
    if ((v20 & 0x2000000000000000) == 0)
      v32 = v18 & 0xFFFFFFFFFFFFLL;
    if (!v32 && (v18 & ~v20 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease(v20);
      v72 = v30;
      v73 = v31;
      goto LABEL_21;
    }
    if ((v20 & 0x2000000000000000) != 0)
    {
      if ((v29 & 0x2000000000000000) != 0)
      {
        v34 = specialized _SmallString.init(_:appending:)(v18, v20, v28, v29);
        if ((v36 & 1) == 0)
        {
          v37 = v34;
          v38 = v35;
          swift_bridgeObjectRelease(v31);
          swift_bridgeObjectRelease(v20);
          v72 = v37;
          v73 = v38;
          v31 = v38;
          v30 = v37;
          goto LABEL_21;
        }
        goto LABEL_19;
      }
    }
    else if ((v29 & 0x2000000000000000) != 0)
    {
LABEL_19:
      v33 = HIBYTE(v31) & 0xF;
      goto LABEL_20;
    }
    v33 = v28 & 0xFFFFFFFFFFFFLL;
LABEL_20:
    _StringGuts.append(_:)(v30, v31, 0, v33);
    swift_bridgeObjectRelease(v31);
    v30 = v72;
    v31 = v73;
LABEL_21:
    v39 = HIBYTE(v31) & 0xF;
    if ((v31 & 0x2000000000000000) == 0)
      v39 = v30 & 0xFFFFFFFFFFFFLL;
    if (v39 || (v30 & ~v31 & 0x2000000000000000) != 0)
    {
      if ((v31 & 0x2000000000000000) != 0
        && ((unint64_t)"Swift/Random.swift" & 0x2000000000000000) != 0
        && (v40 = specialized _SmallString.init(_:appending:)(v30, v31, 0xD00000000000001ELL, 0x8000000181762940),
            (v42 & 1) == 0))
      {
        v43 = v40;
        v44 = v41;
        swift_bridgeObjectRelease(v31);
        v72 = v43;
        v73 = v44;
      }
      else
      {
        if (((unint64_t)"Swift/Random.swift" & 0x2000000000000000) != 0)
          v45 = (0x8000000181762940 >> 56) & 0xF;
        else
          v45 = 30;
        _StringGuts.append(_:)(0xD00000000000001ELL, 0x8000000181762940, 0, v45);
      }
    }
    else
    {
      swift_bridgeObjectRelease(v31);
      v72 = 0xD00000000000001ELL;
      v73 = 0x8000000181762940;
    }
    v46 = (uint64_t *)swift_getTypeName(a2, 0);
    if ((v47 & 0x8000000000000000) == 0)
    {
      v48 = (uint8x16_t *)v46;
      v49 = v47;
      v50 = validateUTF8(_:)(v46, v47);
      if ((v52 & 1) != 0)
        v53 = repairUTF8(_:firstKnownBrokenRange:)(v48->i8, v49, v50, v51);
      else
        v53 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v48, v49, v50 & 1);
      v55 = v53;
      v56 = v54;
      v57 = v73;
      v58 = HIBYTE(v73) & 0xF;
      if ((v73 & 0x2000000000000000) == 0)
        v58 = v72 & 0xFFFFFFFFFFFFLL;
      if (!v58 && (v72 & ~v73 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(v73);
        v72 = v55;
        v73 = v56;
        goto LABEL_52;
      }
      if ((v73 & 0x2000000000000000) != 0)
      {
        if ((v54 & 0x2000000000000000) != 0)
        {
          v60 = specialized _SmallString.init(_:appending:)(v72, v73, v53, v54);
          if ((v62 & 1) == 0)
          {
            v63 = v60;
            v64 = v61;
            swift_bridgeObjectRelease(v56);
            swift_bridgeObjectRelease(v57);
            v72 = v63;
            v73 = v64;
            v56 = v64;
            v55 = v63;
            goto LABEL_52;
          }
          goto LABEL_50;
        }
      }
      else if ((v54 & 0x2000000000000000) != 0)
      {
LABEL_50:
        v59 = HIBYTE(v56) & 0xF;
        goto LABEL_51;
      }
      v59 = v53 & 0xFFFFFFFFFFFFLL;
LABEL_51:
      _StringGuts.append(_:)(v55, v56, 0, v59);
      swift_bridgeObjectRelease(v56);
      v55 = v72;
      v56 = v73;
LABEL_52:
      v65 = HIBYTE(v56) & 0xF;
      if ((v56 & 0x2000000000000000) == 0)
        v65 = v55 & 0xFFFFFFFFFFFFLL;
      if (v65 || (v55 & ~v56 & 0x2000000000000000) != 0)
      {
        if ((v56 & 0x2000000000000000) != 0
          && (0x8000000181762960 & 0x2000000000000000) != 0
          && (v68 = specialized _SmallString.init(_:appending:)(v55, v56, 0xD00000000000002ELL, 0x8000000181762960 | 0x8000000000000000), (v70 & 1) == 0))
        {
          v67 = (char *)v68;
          v66 = v69;
          swift_bridgeObjectRelease(0x8000000181762960 | 0x8000000000000000);
          swift_bridgeObjectRelease(v56);
        }
        else
        {
          if ((0x8000000181762960 & 0x2000000000000000) != 0)
            v71 = (0x8000000181762960 >> 56) & 0xF;
          else
            v71 = 46;
          _StringGuts.append(_:)(0xD00000000000002ELL, 0x8000000181762960 | 0x8000000000000000, 0, v71);
          swift_bridgeObjectRelease(0x8000000181762960 | 0x8000000000000000);
          v67 = (char *)v72;
          v66 = v73;
        }
      }
      else
      {
        swift_bridgeObjectRelease(v56);
        v66 = 0x8000000181762960 | 0x8000000000000000;
        v67 = (char *)0xD00000000000002ELL;
      }
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v67, v66, "Swift/Integers.swift", 20, 2, 0xBFFuLL, 0);
    }
LABEL_66:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  (*((void (**)(uint64_t, Class *))*(a3 - 1) + 1))(a1, a3);
  return (*(uint64_t (**)(uint64_t, char *, Class *))(v16 + 32))(a6, v15, a2);
}

uint64_t FixedWidthInteger.init<A>(exactly:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v12 = type metadata accessor for Optional(0, a2, a3, a4);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v22 - v17;
  LOBYTE(a5) = static FixedWidthInteger._convert<A>(from:)((uint64_t)&v22 - v17, a1, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
  if ((a5 & 1) != 0)
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v18, v12);
    v19 = *(_QWORD *)(a2 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v16, 1, a2) != 1)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(a6, v16, a2);
      v20 = 0;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(a6, v20, 1, a2);
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
    v19 = *(_QWORD *)(a2 - 8);
  }
  v20 = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(a6, v20, 1, a2);
}

uint64_t FixedWidthInteger.init<A>(clamping:)@<X0>(void (*a1)(_QWORD, _QWORD)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t (*v40)(uint64_t, uint64_t);
  unsigned int (*v41)(uint64_t, uint64_t);
  int v42;
  char v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  char *v47;
  void (*v48)(_QWORD, _QWORD);
  char v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  const char *v64;
  unint64_t v65;
  char *v66;
  char *v67;
  void (*v68)(_QWORD, _QWORD);
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  unint64_t v74;
  const char *v75;
  unint64_t AssociatedConformanceWitness;
  char *v77;
  char *v78;
  uint64_t v79;
  void (*v80)(char *, uint64_t);
  char *v81;
  char *v82;
  void (*v83)(char *, uint64_t);
  char *v84;
  char *v85;
  void (*v86)(char *, uint64_t);
  uint64_t (*v87)(uint64_t, uint64_t);
  int v88;
  char v89;
  void (*v90)(_QWORD, _QWORD);
  char v91;
  uint64_t v92;
  void (*v93)(_QWORD, _QWORD);
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char v98;
  uint64_t v99;
  char *v100;
  char v101;
  char *v102;
  char v103;
  char *v104;
  void (*v105)(char *, uint64_t);
  unint64_t v106;
  const char *v107;
  unint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  char *v113;
  void (*v114)(char *, void (*)(_QWORD, _QWORD), uint64_t);
  char *v115;
  unint64_t v116;
  const char *v117;
  unint64_t v118;
  char *v119;
  char *v120;
  void (*v121)(char *, uint64_t);
  char *v122;
  char *v123;
  char *v124;
  char v125;
  void (*v126)(char *, uint64_t);
  char *v127;
  void (*v128)(char *, uint64_t);
  uint64_t v129;
  uint64_t (*v130)(uint64_t, uint64_t);
  char *v131;
  char *v132;
  char *v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  char *v138;
  unint64_t v139;
  const char *v140;
  char *v141;
  unint64_t AssociatedTypeWitness;
  const char *v143;
  uint64_t v144;
  uint64_t (*v145)(uint64_t, uint64_t);
  uint64_t (*v146)(uint64_t, uint64_t);
  unsigned int (*v147)(uint64_t, uint64_t);
  uint64_t (*v148)(uint64_t, uint64_t);
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  char *v153;
  void (*v154)(_QWORD, _QWORD);
  char *v155;

  v7 = a4;
  v154 = a1;
  v149 = a6;
  v10 = *(_QWORD *)(a4 + 8);
  v143 = *(const char **)(*(_QWORD *)(v10 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v143, a2, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v141 = (char *)&v129 - v11;
  v140 = *(const char **)(*(_QWORD *)(a5 + 24) + 16);
  v139 = swift_getAssociatedTypeWitness(0, v140, a3, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v12 = MEMORY[0x1E0C80A78](v139);
  v138 = (char *)&v129 - v13;
  v14 = *(_QWORD *)(a3 - 8);
  v15 = MEMORY[0x1E0C80A78](v12);
  v133 = (char *)&v129 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  v134 = (char *)&v129 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v137 = (char *)&v129 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v136 = (char *)&v129 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v155 = (char *)&v129 - v24;
  v152 = *(_QWORD *)(a2 - 8);
  v25 = MEMORY[0x1E0C80A78](v23);
  v132 = (char *)&v129 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v25);
  v131 = (char *)&v129 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v153 = (char *)&v129 - v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v33 = (char *)&v129 - v32;
  v34 = MEMORY[0x1E0C80A78](v31);
  v135 = (char *)&v129 - v35;
  v36 = MEMORY[0x1E0C80A78](v34);
  v151 = (char *)&v129 - v37;
  MEMORY[0x1E0C80A78](v36);
  v39 = (char *)&v129 - v38;
  v40 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 72);
  v150 = v7;
  v130 = v40;
  v40(a2, v7);
  v41 = *(unsigned int (**)(uint64_t, uint64_t))(a5 + 64);
  LODWORD(v7) = v41(a3, a5);
  v148 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 64);
  v42 = v148(a2, v10);
  v147 = v41;
  if (((v7 ^ v42) & 1) == 0)
  {
    v50 = v14;
    v48 = v154;
    v146 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 128);
    v51 = v146(a3, a5);
    v145 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 128);
    if (v51 >= v145(a2, v10))
    {
      v60 = v155;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 96))(v39, a2, v10, a3, a5);
      v54 = (*(uint64_t (**)(void (*)(_QWORD, _QWORD), char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a5 + 32) + 8)
                                                                                            + 16))(v48, v60, a3);
      (*(void (**)(char *, uint64_t))(v50 + 8))(v60, a3);
      goto LABEL_11;
    }
    v52 = v155;
    (*(void (**)(char *, void (*)(_QWORD, _QWORD), uint64_t))(v50 + 16))(v155, v48, a3);
    v53 = v151;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 96))(v52, a3, a5, a2, v10);
    v54 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v10 + 32) + 8) + 16))(v53, v39, a2);
    v55 = *(void (**)(char *, uint64_t))(v152 + 8);
    v55(v53, a2);
LABEL_9:
    v55(v39, a2);
LABEL_11:
    v61 = v150;
LABEL_12:
    v62 = v153;
    if ((v54 & 1) == 0)
      goto LABEL_23;
LABEL_16:
    (*(void (**)(_QWORD, uint64_t))(v50 + 8))(v48, a3);
    return v130(a2, v61);
  }
  v144 = v14;
  v43 = v41(a3, a5);
  v146 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 128);
  v44 = v146(a3, a5);
  v45 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 128);
  v46 = v45(a2, v10);
  if ((v43 & 1) == 0)
  {
    v145 = v45;
    if (v44 >= v46)
    {
      v74 = AssociatedTypeWitness;
      v75 = v143;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v143, a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v77 = v141;
      (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&qword_1816B7DA8, 256, v74, AssociatedConformanceWitness);
      v78 = v151;
      (*((void (**)(char *, uint64_t, const char *))v75 + 3))(v77, a2, v75);
      LOBYTE(v74) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v10 + 32) + 8) + 40))(v39, v78, a2);
      v79 = v152;
      v80 = *(void (**)(char *, uint64_t))(v152 + 8);
      v80(v78, a2);
      v81 = v137;
      (*(void (**)(char *, void (*)(_QWORD, _QWORD), uint64_t))(v144 + 16))(v137, v154, a3);
      (*(void (**)(char *, char *, uint64_t))(v79 + 32))(v33, v39, a2);
      v82 = v155;
      if ((v74 & 1) == 0)
      {
        v80(v33, a2);
        v50 = v144;
        (*(void (**)(char *, uint64_t))(v144 + 8))(v81, a3);
        v61 = v150;
        v62 = v153;
        v48 = v154;
        goto LABEL_23;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 96))(v33, a2, v10, a3, a5);
      v54 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a5 + 32) + 8) + 16))(v81, v82, a3);
      v50 = v144;
      v83 = *(void (**)(char *, uint64_t))(v144 + 8);
      v83(v82, a3);
      v83(v81, a3);
      v61 = v150;
      v48 = v154;
      goto LABEL_12;
    }
    v56 = v144;
    v48 = v154;
    v57 = v155;
    (*(void (**)(char *, void (*)(_QWORD, _QWORD), uint64_t))(v144 + 16))(v155, v154, a3);
    v58 = v151;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 96))(v57, a3, a5, a2, v10);
    v54 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v10 + 32) + 8) + 16))(v58, v39, a2);
    v55 = *(void (**)(char *, uint64_t))(v152 + 8);
    v59 = v58;
    v50 = v56;
    v55(v59, a2);
    goto LABEL_9;
  }
  if (v46 < v44)
  {
    v145 = v45;
    v47 = v155;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 96))(v39, a2, v10, a3, a5);
    v48 = v154;
    v49 = (*(uint64_t (**)(void (*)(_QWORD, _QWORD), char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a5 + 32) + 8)
                                                                                          + 16))(v154, v47, a3);
    v50 = v144;
    (*(void (**)(char *, uint64_t))(v144 + 8))(v47, a3);
    goto LABEL_20;
  }
  v63 = v139;
  v64 = v140;
  v65 = swift_getAssociatedConformanceWitness((uint64_t)v140, a3, v139, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  v66 = v138;
  (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(v65 + 8))(&qword_1816B7DA8, 256, v63, v65);
  v67 = v155;
  (*((void (**)(char *, uint64_t, const char *))v64 + 3))(v66, a3, v64);
  v68 = v154;
  LOBYTE(v63) = (*(uint64_t (**)(void (*)(_QWORD, _QWORD), char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a5 + 32) + 8)
                                                                                                + 16))(v154, v67, a3);
  v69 = v144;
  v145 = *(uint64_t (**)(uint64_t, uint64_t))(v144 + 8);
  v145((uint64_t)v67, a3);
  v70 = v136;
  (*(void (**)(char *, void (*)(_QWORD, _QWORD), uint64_t))(v69 + 16))(v136, v68, a3);
  v71 = v152;
  v72 = v135;
  (*(void (**)(char *, char *, uint64_t))(v152 + 32))(v135, v39, a2);
  if ((v63 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v71 + 8))(v72, a2);
    v145((uint64_t)v70, a3);
    v48 = v154;
    v50 = v144;
    v61 = v150;
    goto LABEL_16;
  }
  v145 = v45;
  v84 = v72;
  v85 = v151;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 96))(v70, a3, a5, a2, v10);
  v49 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v10 + 32) + 8) + 16))(v85, v84, a2);
  v86 = *(void (**)(char *, uint64_t))(v71 + 8);
  v86(v85, a2);
  v86(v84, a2);
  v48 = v154;
  v50 = v144;
LABEL_20:
  v62 = v153;
  v61 = v150;
  if ((v49 & 1) != 0)
    goto LABEL_16;
LABEL_23:
  v154 = *(void (**)(_QWORD, _QWORD))(v61 + 64);
  v154(a2, v61);
  v87 = v148;
  v88 = v148(a2, v10);
  if (((v88 ^ v147(a3, a5)) & 1) != 0)
  {
    v89 = v87(a2, v10);
    v90 = v48;
    v91 = v89;
    v92 = v145(a2, v10);
    v93 = v90;
    v94 = v146(a3, a5);
    if ((v91 & 1) != 0)
    {
      if (v94 >= v92)
      {
        v106 = AssociatedTypeWitness;
        v107 = v143;
        v108 = swift_getAssociatedConformanceWitness((uint64_t)v143, a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
        v109 = v141;
        (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(v108 + 8))(&qword_1816B7DA8, 256, v106, v108);
        v110 = v151;
        (*((void (**)(char *, uint64_t, const char *))v107 + 3))(v109, a2, v107);
        v111 = v153;
        LOBYTE(v106) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v10 + 32) + 8)
                                                                          + 16))(v153, v110, a2);
        v112 = v152;
        v151 = *(char **)(v152 + 8);
        ((void (*)(char *, uint64_t))v151)(v110, a2);
        v113 = v131;
        (*(void (**)(char *, char *, uint64_t))(v112 + 32))(v131, v111, a2);
        v95 = v50;
        v114 = *(void (**)(char *, void (*)(_QWORD, _QWORD), uint64_t))(v50 + 16);
        v115 = v134;
        v90 = v93;
        v114(v134, v93, a3);
        if ((v106 & 1) != 0)
        {
          (*(void (**)(char *, uint64_t))(v95 + 8))(v115, a3);
          ((void (*)(char *, uint64_t))v151)(v113, a2);
          goto LABEL_40;
        }
        v127 = v155;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 96))(v113, a2, v10, a3, a5);
        v103 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a5 + 32) + 8) + 16))(v127, v115, a3);
        v128 = *(void (**)(char *, uint64_t))(v95 + 8);
        v128(v127, a3);
        v128(v115, a3);
        goto LABEL_35;
      }
      v95 = v50;
      v96 = v155;
      (*(void (**)(char *, void (*)(_QWORD, _QWORD), uint64_t))(v50 + 16))(v155, v90, a3);
      v97 = v151;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 96))(v96, a3, a5, a2, v10);
      v62 = v153;
      v98 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v10 + 32) + 8) + 16))(v153, v97, a2);
      goto LABEL_33;
    }
    if (v92 < v94)
    {
      v102 = v155;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 96))(v153, a2, v10, a3, a5);
      v103 = (*(uint64_t (**)(char *, void (*)(_QWORD, _QWORD), uint64_t))(*(_QWORD *)(*(_QWORD *)(a5 + 32) + 8)
                                                                                             + 16))(v102, v90, a3);
      v95 = v50;
      (*(void (**)(char *, uint64_t))(v50 + 8))(v102, a3);
      goto LABEL_35;
    }
    v116 = v139;
    v117 = v140;
    v118 = swift_getAssociatedConformanceWitness((uint64_t)v140, a3, v139, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    v119 = v138;
    (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(v118 + 8))(&qword_1816B7DA8, 256, v116, v118);
    v120 = v155;
    (*((void (**)(char *, uint64_t, const char *))v117 + 3))(v119, a3, v117);
    v90 = v93;
    LOBYTE(v116) = (*(uint64_t (**)(void (*)(_QWORD, _QWORD), char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a5 + 32) + 8) + 40))(v93, v120, a3);
    v121 = *(void (**)(char *, uint64_t))(v50 + 8);
    v121(v120, a3);
    v122 = v132;
    (*(void (**)(char *, char *, uint64_t))(v152 + 32))(v132, v153, a2);
    v144 = v50;
    v123 = v133;
    (*(void (**)(char *, void (*)(_QWORD, _QWORD), uint64_t))(v50 + 16))(v133, v90, a3);
    if ((v116 & 1) == 0)
    {
      v121(v123, a3);
      (*(void (**)(char *, uint64_t))(v152 + 8))(v122, a2);
      return (*(uint64_t (**)(void (*)(_QWORD, _QWORD), uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 96))(v90, a3, a5, a2, v10);
    }
    v124 = v151;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 96))(v123, a3, a5, a2, v10);
    v125 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v10 + 32) + 8) + 16))(v122, v124, a2);
    v126 = *(void (**)(char *, uint64_t))(v152 + 8);
    v126(v124, a2);
    v126(v122, a2);
    v95 = v144;
    if ((v125 & 1) != 0)
      goto LABEL_40;
  }
  else
  {
    v99 = v145(a2, v10);
    v90 = v48;
    if (v99 >= v146(a3, a5))
    {
      v104 = v155;
      (*(void (**)(char *, void (*)(_QWORD, _QWORD), uint64_t))(v50 + 16))(v155, v48, a3);
      v95 = v50;
      v97 = v151;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 96))(v104, a3, a5, a2, v10);
      v98 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v10 + 32) + 8) + 16))(v62, v97, a2);
LABEL_33:
      v103 = v98;
      v105 = *(void (**)(char *, uint64_t))(v152 + 8);
      v105(v97, a2);
      v105(v62, a2);
LABEL_35:
      if ((v103 & 1) == 0)
        return (*(uint64_t (**)(void (*)(_QWORD, _QWORD), uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 96))(v90, a3, a5, a2, v10);
LABEL_40:
      (*(void (**)(_QWORD, uint64_t))(v95 + 8))(v90, a3);
      return ((uint64_t (*)(uint64_t, uint64_t))v154)(a2, v150);
    }
    v100 = v155;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 96))(v62, a2, v10, a3, a5);
    v101 = (*(uint64_t (**)(char *, void (*)(_QWORD, _QWORD), uint64_t))(*(_QWORD *)(*(_QWORD *)(a5 + 32) + 8)
                                                                                           + 16))(v100, v48, a3);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v100, a3);
    v95 = v50;
    if ((v101 & 1) != 0)
      goto LABEL_40;
  }
  return (*(uint64_t (**)(void (*)(_QWORD, _QWORD), uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 96))(v90, a3, a5, a2, v10);
}

uint64_t specialized static FixedWidthInteger._truncatingInit<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t AssociatedConformanceWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void (*v23)(uint64_t *__return_ptr, uint64_t, unint64_t);
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;

  v30 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a3, a2, (uint64_t)&protocol requirements base descriptor for BinaryInteger, associated type descriptor for BinaryInteger.Words);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v29 = (char *)&v26 - v6;
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for BinaryInteger, (uint64_t)&associated conformance descriptor for BinaryInteger.BinaryInteger.Words: RandomAccessCollection)+ 8)+ 8)+ 8);
  v28 = swift_getAssociatedTypeWitness(0, (const char *)v7, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v31 = *(_QWORD *)(v28 - 8);
  v8 = MEMORY[0x1E0C80A78](v28);
  v10 = (char *)&v26 - v9;
  v27 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 16);
  v14 = swift_getAssociatedTypeWitness(0, (const char *)v13, a2, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v26 - v15;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v13, a2, v14, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&qword_1816B7DA8, 256, v14, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 24))(v16, a2, v13);
  v18 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 32) + 8) + 16))(v30, v12, a2);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v12, a2);
  v19 = v18 << 63 >> 63;
  v20 = a2;
  v21 = v28;
  (*(void (**)(uint64_t, uint64_t))(a3 + 112))(v20, a3);
  (*(void (**)(unint64_t, uint64_t))(v7 + 32))(AssociatedTypeWitness, v7);
  v22 = swift_getAssociatedConformanceWitness(v7, AssociatedTypeWitness, v21, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v23 = *(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t))(v22 + 16);
  v23(&v32, v21, v22);
  if ((v33 & 1) != 0)
  {
    v24 = v19;
  }
  else
  {
    v24 = v32;
    v23(&v32, v21, v22);
    if ((v33 & 1) == 0)
      v23(&v32, v21, v22);
  }
  (*(void (**)(char *, uint64_t))(v31 + 8))(v10, v21);
  return v24;
}

{
  unint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t AssociatedConformanceWitness;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t *__return_ptr, unint64_t, unint64_t);
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL4 v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;

  v39 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a3, a2, (uint64_t)&protocol requirements base descriptor for BinaryInteger, associated type descriptor for BinaryInteger.Words);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v38 = (char *)&v36 - v6;
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for BinaryInteger, (uint64_t)&associated conformance descriptor for BinaryInteger.BinaryInteger.Words: RandomAccessCollection)+ 8)+ 8)+ 8);
  v8 = swift_getAssociatedTypeWitness(0, (const char *)v7, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v36 = *(_QWORD *)(v8 - 8);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v36 - v10;
  v37 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 16);
  v15 = swift_getAssociatedTypeWitness(0, (const char *)v14, a2, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v36 - v16;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v14, a2, v15, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&qword_1816B7DA8, 256, v15, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 24))(v17, a2, v14);
  v19 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 32) + 8) + 16))(v39, v13, a2);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v13, a2);
  v20 = v19 << 63 >> 63;
  (*(void (**)(uint64_t, uint64_t))(a3 + 112))(a2, a3);
  (*(void (**)(unint64_t, uint64_t))(v7 + 32))(AssociatedTypeWitness, v7);
  v21 = v7;
  v22 = v8;
  v23 = swift_getAssociatedConformanceWitness(v21, AssociatedTypeWitness, v8, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v24 = 0;
  v25 = 0;
  v26 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t))(v23 + 16);
  v27 = v20;
  v28 = v20;
  while (1)
  {
    v26(&v40, v22, v23);
    if ((v41 & 1) != 0)
      break;
    v29 = v24 < 0x80;
    if (v25)
      v29 = v25 < 0;
    if (!v29)
      break;
    v30 = v40 ^ v20;
    if ((v24 & 0x7F) != 0)
      v31 = v40 ^ v20;
    else
      v31 = 0;
    if ((v24 & 0x7F) >= 0x40)
      v30 = 0;
    v28 ^= v30;
    v27 ^= v31;
    v32 = v24 >= 0xFFFFFFFFFFFFFFC0;
    if (v24 < 0xFFFFFFFFFFFFFFC0)
      v33 = v25;
    else
      v33 = v25 + 1;
    v24 += 64;
    v34 = v25 == 0x7FFFFFFFFFFFFFFFLL;
    v25 = v33;
    if (v34)
    {
      v25 = v33;
      if (v32)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Overflow in +=", 14, 2, "Swift/LegacyInt128.swift", 24, 2, 0x264uLL, 0);
    }
  }
  (*(void (**)(char *, unint64_t))(v36 + 8))(v11, v22);
  return v28;
}

uint64_t static FixedWidthInteger._truncatingInit<A>(_:)@<X0>(uint64_t (*a1)(char *, char *, uint64_t, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t AssociatedConformanceWitness;
  uint64_t v34;
  void (*v35)(char *);
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  unint64_t v39;
  char *v40;
  const char *v41;
  void (*v42)(char *, uint64_t, const char *);
  uint64_t v43;
  void (*v44)(char *, uint64_t, const char *);
  char *v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t, uint64_t);
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  void (*v57)(char *, uint64_t);
  char *v58;
  void (*v59)(char *, uint64_t);
  uint64_t v61;
  void (*v62)(void *, uint64_t, uint64_t, unint64_t);
  unint64_t v63;
  const char *v64;
  uint64_t v65;
  const char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t (*v70)(char *, char *, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  unint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char v83;

  v70 = a1;
  v75 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a5, a3, (uint64_t)&protocol requirements base descriptor for BinaryInteger, associated type descriptor for BinaryInteger.Words);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v67 = (char *)&v61 - v11;
  v71 = a5;
  v66 = *(const char **)(*(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness(a5, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for BinaryInteger, (uint64_t)&associated conformance descriptor for BinaryInteger.BinaryInteger.Words: RandomAccessCollection)+ 8)+ 8)+ 8);
  v69 = AssociatedTypeWitness;
  v79 = swift_getAssociatedTypeWitness(0, v66, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v68 = *(_QWORD *)(v79 - 8);
  v12 = MEMORY[0x1E0C80A78](v79);
  v78 = (char *)&v61 - v13;
  v77 = *(_QWORD *)(a2 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v74 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v73 = (char *)&v61 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v80 = (char *)&v61 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v81 = (char *)&v61 - v21;
  MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v61 - v22;
  v76 = *(_QWORD *)(a4 + 8);
  v72 = *(_QWORD *)(v76 + 24);
  v64 = *(const char **)(v72 + 16);
  v63 = swift_getAssociatedTypeWitness(0, v64, a2, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v24 = MEMORY[0x1E0C80A78](v63);
  v26 = (char *)&v61 - v25;
  v65 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v24);
  v28 = (char *)&v61 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = *(_QWORD *)(*(_QWORD *)(a5 + 24) + 16);
  v30 = swift_getAssociatedTypeWitness(0, (const char *)v29, a3, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v30);
  v32 = (char *)&v61 - v31;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v29, a3, v30, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, v30, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 24))(v32, a3, v29);
  v34 = (*(uint64_t (**)(uint64_t (*)(char *, char *, uint64_t, uint64_t), char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v71 + 32) + 8) + 16))(v70, v28, a3);
  v35 = *(void (**)(char *))(v65 + 8);
  v36 = a3;
  v37 = v63;
  v65 = v36;
  v35(v28);
  v38 = v64;
  v39 = swift_getAssociatedConformanceWitness((uint64_t)v64, a2, v37, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  v40 = v26;
  v62 = *(void (**)(void *, uint64_t, uint64_t, unint64_t))(v39 + 8);
  v62(&unk_1816B7DA8, 256, v37, v39);
  v41 = v38;
  v42 = (void (*)(char *, uint64_t, const char *))*((_QWORD *)v38 + 3);
  v43 = v76;
  v61 = v34;
  if ((v34 & 1) != 0)
  {
    v44 = v42;
    v42(v40, a2, v41);
    (*(void (**)(char *, uint64_t, uint64_t))(v43 + 184))(v23, a2, v43);
    (*(void (**)(char *, uint64_t))(v77 + 8))(v23, a2);
  }
  else
  {
    v44 = v42;
    v42(v40, a2, v41);
  }
  v62(&unk_1816B7DA8, 256, v37, v39);
  v45 = v81;
  v44(v40, a2, v41);
  v46 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 56))(a2, a4);
  v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 136);
  v47(v46, a2, a4);
  (*(void (**)(uint64_t))(v71 + 112))(v65);
  v48 = v66;
  v49 = v69;
  (*((void (**)(uint64_t, const char *))v66 + 4))(v69, v66);
  v50 = (uint64_t)v48;
  v51 = v79;
  v52 = swift_getAssociatedConformanceWitness(v50, v49, v79, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v71 = *(_QWORD *)(v52 + 16);
  ((void (*)(uint64_t *__return_ptr, unint64_t, unint64_t))v71)(&v82, v51, v52);
  if ((v83 & 1) == 0)
  {
    v53 = v82;
    v54 = *(_QWORD *)(*(_QWORD *)(v76 + 32) + 8);
    v70 = *(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v54 + 16);
    v69 = v61 << 63 >> 63;
    v55 = v74;
    do
    {
      if ((v70(v45, v80, a2, v54) & 1) == 0)
        break;
      v47(v53 ^ v69, a2, a4);
      v56 = v73;
      (*(void (**)(char *, char *, uint64_t, uint64_t))(a4 + 216))(v55, v81, a2, a4);
      v57 = *(void (**)(char *, uint64_t))(v77 + 8);
      v57(v55, a2);
      (*(void (**)(uint64_t, char *, uint64_t))(v76 + 232))(v75, v56, a2);
      v58 = v56;
      v45 = v81;
      v57(v58, a2);
      v47(64, a2, a4);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v72 + 8) + 32))(v45, v23, a2);
      v57(v23, a2);
      ((void (*)(uint64_t *__return_ptr, unint64_t, unint64_t))v71)(&v82, v79, v52);
      v53 = v82;
    }
    while (v83 != 1);
  }
  (*(void (**)(char *, unint64_t))(v68 + 8))(v78, v79);
  v59 = *(void (**)(char *, uint64_t))(v77 + 8);
  v59(v80, a2);
  return ((uint64_t (*)(char *, uint64_t))v59)(v45, a2);
}

uint64_t static FixedWidthInteger._highBitIndex.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = (*(uint64_t (**)(void))(a2 + 56))();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a2 + 136))(v4 - 1, a1, a2);
}

uint64_t static FixedWidthInteger.&-= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v5 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v8 + 88))(v7);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, a3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a1, v7, a3);
}

uint64_t static FixedWidthInteger.&*= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v5 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v8 + 96))(v7, a1);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, a3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a1, v7, a3);
}

uint64_t specialized static FixedWidthInteger._random<A>(using:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  unint64_t v25;
  unint64_t AssociatedConformanceWitness;
  char *v27;
  void (*v28)(char *, uint64_t, const char *);
  int64_t v29;
  uint64_t v30;
  uint64_t i;
  uint64_t (*v32)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t (*v43)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  const char *v52;
  uint64_t v53;
  unint64_t AssociatedTypeWitness;
  uint64_t v55;
  uint64_t v56;
  uint64_t __buf;

  v6 = *(_QWORD *)(a2 + 8);
  v55 = *(_QWORD *)(v6 + 24);
  v52 = *(const char **)(v55 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v52, a1, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v7 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v51 = (char *)&v48 - v8;
  v56 = *(_QWORD *)(a1 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v48 - v13;
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v48 - v16;
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v48 - v18;
  v20 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 56);
  if (v20(a1, a2) < 65)
  {
    __buf = 0;
    swift_stdlib_random(&__buf, 8uLL);
    v43 = *(uint64_t (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 96);
    v47 = lazy protocol witness table accessor for type UInt64 and conformance UInt64(v44, v45, v46);
    return v43(&__buf, &type metadata for UInt64, v47, a1, v6);
  }
  else
  {
    v49 = a3;
    v53 = a2;
    v21 = v20(a1, a2);
    v22 = v21 + 63;
    if (v21 >= 0)
      v22 = v21;
    v50 = v22;
    v23 = v21 - (v22 & 0xFFFFFFFFFFFFFFC0);
    v24 = v52;
    v25 = AssociatedTypeWitness;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v52, a1, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    v27 = v51;
    (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, v25, AssociatedConformanceWitness);
    v28 = (void (*)(char *, uint64_t, const char *))*((_QWORD *)v24 + 3);
    AssociatedTypeWitness = (unint64_t)v19;
    v28(v27, a1, v24);
    v29 = ((v23 > 0) | (unint64_t)(v23 >> 63)) + (v50 >> 6);
    if (v29 < 0)
      goto LABEL_12;
    if (v29)
    {
      v30 = 0;
      for (i = 0x200000000000000; ; --i)
      {
        __buf = 0;
        swift_stdlib_random(&__buf, 8uLL);
        v32 = *(uint64_t (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 96);
        v36 = lazy protocol witness table accessor for type UInt64 and conformance UInt64(v33, v34, v35);
        v37 = v32(&__buf, &type metadata for UInt64, v36, a1, v6);
        if (!i)
          break;
        __buf = v30;
        v40 = lazy protocol witness table accessor for type Int and conformance Int(v37, v38, v39);
        v32(&__buf, &type metadata for Int, v40, a1, v6);
        (*(void (**)(char *, char *, uint64_t))(v53 + 216))(v14, v11, a1);
        v41 = *(void (**)(char *, uint64_t))(v56 + 8);
        v41(v11, a1);
        v41(v14, a1);
        (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v55 + 8) + 32))(AssociatedTypeWitness, v17, a1);
        v41(v17, a1);
        v30 += 64;
        if (!--v29)
          return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v56 + 32))(v49, AssociatedTypeWitness, a1);
      }
      __break(1u);
LABEL_12:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    }
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v56 + 32))(v49, AssociatedTypeWitness, a1);
  }
}

uint64_t static FixedWidthInteger._random<A>(using:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  unint64_t v27;
  unint64_t AssociatedConformanceWitness;
  char *v29;
  void (*v30)(char *, uint64_t, const char *);
  int64_t v31;
  uint64_t v32;
  uint64_t i;
  uint64_t (*v34)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void (*v42)(char *, uint64_t);
  uint64_t (*v44)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  const char *v52;
  uint64_t v53;
  unint64_t AssociatedTypeWitness;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v57 = a1;
  v58 = a3;
  v50 = a6;
  v9 = *(_QWORD *)(a4 + 8);
  v55 = *(_QWORD *)(v9 + 24);
  v52 = *(const char **)(v55 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v52, a2, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v10 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v51 = (char *)&v48 - v11;
  v56 = *(_QWORD *)(a2 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v48 - v16;
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v48 - v19;
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v48 - v21;
  v23 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 56);
  if (v23(a2, a4) <= 64)
  {
    v59 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 8))(v58, a5);
    v44 = *(uint64_t (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v9 + 96);
    v47 = lazy protocol witness table accessor for type UInt64 and conformance UInt64(v59, v45, v46);
    return v44(&v59, &type metadata for UInt64, v47, a2, v9);
  }
  else
  {
    v53 = a5;
    v24 = v23(a2, a4);
    v25 = v24 + 63;
    if (v24 >= 0)
      v25 = v24;
    v49 = v25;
    v48 = v24 - (v25 & 0xFFFFFFFFFFFFFFC0);
    v26 = v52;
    v27 = AssociatedTypeWitness;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v52, a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    v29 = v51;
    (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, v27, AssociatedConformanceWitness);
    v30 = (void (*)(char *, uint64_t, const char *))*((_QWORD *)v26 + 3);
    AssociatedTypeWitness = (unint64_t)v22;
    v30(v29, a2, v26);
    v31 = ((v48 > 0) | (unint64_t)(v48 >> 63)) + (v49 >> 6);
    if (v31 < 0)
      goto LABEL_12;
    v52 = (const char *)a4;
    if (v31)
    {
      v32 = 0;
      v51 = *(char **)(v53 + 8);
      for (i = 0x200000000000000; ; --i)
      {
        v59 = ((uint64_t (*)(uint64_t, uint64_t))v51)(v58, v53);
        v34 = *(uint64_t (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v9 + 96);
        v37 = lazy protocol witness table accessor for type UInt64 and conformance UInt64(v59, v35, v36);
        v38 = v34(&v59, &type metadata for UInt64, v37, a2, v9);
        if (!i)
          break;
        v59 = v32;
        v41 = lazy protocol witness table accessor for type Int and conformance Int(v38, v39, v40);
        v34(&v59, &type metadata for Int, v41, a2, v9);
        (*((void (**)(char *, char *, uint64_t))v52 + 27))(v17, v14, a2);
        v42 = *(void (**)(char *, uint64_t))(v56 + 8);
        v42(v14, a2);
        v42(v17, a2);
        (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v55 + 8) + 32))(AssociatedTypeWitness, v20, a2);
        v42(v20, a2);
        v32 += 64;
        if (!--v31)
          return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v56 + 32))(v50, AssociatedTypeWitness, a2);
      }
      __break(1u);
LABEL_12:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    }
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v56 + 32))(v50, AssociatedTypeWitness, a2);
  }
}

uint64_t UnsignedInteger.magnitude.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2);
}

uint64_t static UnsignedInteger.isSigned.getter()
{
  return 0;
}

uint64_t UnsignedInteger<>.init<A>(exactly:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char v37;
  unint64_t AssociatedConformanceWitness;
  char v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t);
  _QWORD *v44;
  uint64_t (*v45)(uint64_t, _QWORD *);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t, uint64_t);
  int v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  char v71;
  uint64_t v72;
  void (*v73)(char *, uint64_t);
  char *v74;
  unint64_t v75;
  const char *v76;
  unint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t);
  char *v83;
  char *v84;
  char *v85;
  void (*v86)(char *, uint64_t, uint64_t);
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char v102;
  void (*v103)(char *, uint64_t);
  char *v104;
  char v105;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  unint64_t v110;
  char *v111;
  char *v112;
  char *v113;
  unint64_t AssociatedTypeWitness;
  const char *v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  uint64_t (*v120)(uint64_t, _QWORD *);
  char *v121;
  void (*v122)(char *, uint64_t);
  void (*v123)(char *, uint64_t, uint64_t);
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;

  v130 = a1;
  v127 = a6;
  v9 = *(_QWORD *)(a4 + 8);
  v124 = a4;
  v125 = v9;
  v115 = *(const char **)(*(_QWORD *)(v9 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v115, a2, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v10 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v113 = (char *)&v107 - v11;
  v129 = a2;
  v126 = *(_QWORD *)(a2 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v117 = (char *)&v107 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  v116 = (char *)&v107 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v107 - v17;
  MEMORY[0x1E0C80A78](v16);
  v121 = (char *)&v107 - v19;
  v20 = *(_QWORD *)(a5[3] + 16);
  v21 = swift_getAssociatedTypeWitness(0, (const char *)v20, a3, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v22 = MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v107 - v23;
  v25 = *(_QWORD *)(a3 - 8);
  v26 = MEMORY[0x1E0C80A78](v22);
  v111 = (char *)&v107 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x1E0C80A78](v26);
  v112 = (char *)&v107 - v29;
  v30 = MEMORY[0x1E0C80A78](v28);
  v128 = (char *)&v107 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v34 = (char *)&v107 - v33;
  MEMORY[0x1E0C80A78](v32);
  v36 = (char *)&v107 - v35;
  v120 = (uint64_t (*)(uint64_t, _QWORD *))a5[8];
  v37 = v120(a3, a5);
  v123 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 16);
  v123(v36, (uint64_t)v130, a3);
  v118 = v18;
  v119 = v34;
  v110 = v21;
  v109 = v24;
  if ((v37 & 1) != 0)
  {
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v20, a3, v21, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, v21, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 24))(v24, a3, v20);
    v39 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(a5[4] + 8) + 16))(v36, v34, a3);
    v40 = *(void (**)(char *, uint64_t))(v25 + 8);
    v40(v34, a3);
    v40(v36, a3);
    v42 = v126;
    v41 = v127;
    v43 = (void (*)(char *, uint64_t, uint64_t))v20;
    v44 = a5;
    if ((v39 & 1) != 0)
      goto LABEL_27;
  }
  else
  {
    v40 = *(void (**)(char *, uint64_t))(v25 + 8);
    v40(v36, a3);
    v43 = (void (*)(char *, uint64_t, uint64_t))v20;
    v44 = a5;
  }
  v108 = v25;
  v122 = v40;
  v45 = (uint64_t (*)(uint64_t, _QWORD *))v44[16];
  v46 = v130;
  v47 = v45(a3, v44);
  v48 = v124;
  v49 = v129;
  v50 = (*(uint64_t (**)(uint64_t, uint64_t))(v124 + 56))(v129, v124);
  v51 = v128;
  v123(v128, (uint64_t)v46, a3);
  if (v47 < v50)
  {
    v122(v51, a3);
    v42 = v126;
    v41 = v127;
    goto LABEL_7;
  }
  v123 = v43;
  v55 = v121;
  (*(void (**)(uint64_t, uint64_t))(v48 + 64))(v49, v48);
  v56 = v125;
  v57 = *(uint64_t (**)(uint64_t, uint64_t))(v125 + 64);
  v58 = v57(v49, v125);
  if (((v58 ^ v120(a3, v44)) & 1) != 0)
  {
    v59 = v57(v49, v56);
    v60 = (*(uint64_t (**)(uint64_t, uint64_t))(v56 + 128))(v49, v56);
    v61 = v45(a3, v44);
    if ((v59 & 1) != 0)
    {
      if (v61 >= v60)
      {
        v75 = AssociatedTypeWitness;
        v76 = v115;
        v77 = swift_getAssociatedConformanceWitness((uint64_t)v115, v49, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
        v78 = v113;
        (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v77 + 8))(&unk_1816B7DA8, 256, v75, v77);
        v79 = v55;
        v80 = v118;
        (*((void (**)(char *, uint64_t, const char *))v76 + 3))(v78, v49, v76);
        LOBYTE(v75) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v56 + 32) + 8)
                                                                         + 16))(v79, v80, v49);
        v81 = v56;
        v82 = *(void (**)(char *, uint64_t))(v126 + 8);
        v83 = v80;
        v42 = v126;
        v82(v83, v49);
        v84 = v116;
        (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v116, v79, v49);
        v85 = v112;
        (*(void (**)(char *, char *, uint64_t))(v108 + 32))(v112, v128, a3);
        v40 = v122;
        if ((v75 & 1) != 0)
        {
          v122(v85, a3);
          v82(v84, v49);
          v41 = v127;
        }
        else
        {
          v104 = v119;
          ((void (*)(char *, uint64_t, uint64_t, uint64_t, _QWORD *))v44[12])(v84, v49, v81, a3, v44);
          v105 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v44[4] + 8) + 16))(v104, v85, a3);
          v40(v104, a3);
          v40(v85, a3);
          v41 = v127;
          if ((v105 & 1) == 0)
            goto LABEL_7;
        }
LABEL_27:
        v40(v130, a3);
        v54 = 1;
        v53 = v129;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56))(v41, v54, 1, v53);
      }
      v62 = v119;
      (*(void (**)(char *, char *, uint64_t))(v108 + 32))(v119, v128, a3);
      goto LABEL_19;
    }
    if (v60 >= v61)
    {
      v86 = v123;
      v87 = v110;
      v88 = swift_getAssociatedConformanceWitness((uint64_t)v123, a3, v110, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v89 = a3;
      v90 = v109;
      (*(void (**)(void *, uint64_t, uint64_t, unint64_t))(v88 + 8))(&unk_1816B7DA8, 256, v87, v88);
      v91 = v119;
      v92 = v90;
      a3 = v89;
      (*((void (**)(char *, uint64_t, _QWORD))v86 + 3))(v92, v89, v86);
      v93 = v128;
      LOBYTE(v87) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v44[4] + 8) + 40))(v128, v91, v89);
      v94 = v89;
      v40 = v122;
      v122(v91, v94);
      v95 = v117;
      v96 = v55;
      v42 = v126;
      (*(void (**)(char *, char *, uint64_t))(v126 + 32))(v117, v96, v49);
      v97 = v111;
      (*(void (**)(char *, char *, uint64_t))(v108 + 32))(v111, v93, a3);
      v41 = v127;
      v98 = v97;
      if ((v87 & 1) != 0)
      {
        v99 = v127;
        v100 = v125;
        v101 = v118;
        (*(void (**)(char *, uint64_t, _QWORD *, uint64_t, uint64_t))(v125 + 96))(v98, a3, v44, v49, v125);
        v102 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v100 + 32) + 8) + 16))(v95, v101, v49);
        v103 = *(void (**)(char *, uint64_t))(v42 + 8);
        v103(v101, v49);
        v103(v95, v49);
        v41 = v99;
        if ((v102 & 1) != 0)
          goto LABEL_27;
      }
      else
      {
        v40(v97, a3);
        (*(void (**)(char *, uint64_t))(v42 + 8))(v95, v49);
      }
      goto LABEL_7;
    }
    v68 = v119;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t, _QWORD *))v44[12])(v55, v49, v56, a3, v44);
    v69 = v128;
    v66 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v44[4] + 8) + 16))(v68, v128, a3);
    v40 = v122;
    v122(v68, a3);
    v67 = v69;
  }
  else
  {
    v63 = (*(uint64_t (**)(uint64_t, uint64_t))(v56 + 128))(v49, v56);
    v64 = v128;
    if (v63 >= v45(a3, v44))
    {
      v62 = v119;
      (*(void (**)(char *, char *, uint64_t))(v108 + 32))(v119, v64, a3);
LABEL_19:
      v70 = v118;
      (*(void (**)(char *, uint64_t, _QWORD *, uint64_t, uint64_t))(v56 + 96))(v62, a3, v44, v49, v56);
      v71 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v56 + 32) + 8) + 16))(v55, v70, v49);
      v72 = v126;
      v73 = *(void (**)(char *, uint64_t))(v126 + 8);
      v73(v70, v49);
      v74 = v55;
      v42 = v72;
      v73(v74, v49);
      v41 = v127;
      v40 = v122;
      if ((v71 & 1) != 0)
        goto LABEL_27;
      goto LABEL_7;
    }
    v65 = v119;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t, _QWORD *))v44[12])(v55, v49, v56, a3, v44);
    v66 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v44[4] + 8) + 16))(v65, v64, a3);
    v40 = v122;
    v122(v65, a3);
    v67 = v64;
  }
  v40(v67, a3);
  v42 = v126;
  v41 = v127;
  if ((v66 & 1) != 0)
    goto LABEL_27;
LABEL_7:
  v52 = v44;
  v53 = v129;
  (*(void (**)(char *, uint64_t, _QWORD *, uint64_t))(v125 + 96))(v130, a3, v52, v129);
  v54 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56))(v41, v54, 1, v53);
}

uint64_t static UnsignedInteger<>.min.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t AssociatedTypeWitness;
  uint64_t v5;
  char *v6;
  unint64_t AssociatedConformanceWitness;
  uint64_t v9;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v3, a1, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v6 = (char *)&v9 - v5;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v3, a1, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 24))(v6, a1, v3);
}

uint64_t specialized UnsignedInteger<>.dividingFullWidth(_:)(uint64_t *a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  unint64_t v8;
  unint64_t v9;
  char v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned __int128 v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;

  if (!(a6 | a7))
    _assertionFailure(_:_:file:line:flags:)("Precondition failed", 19, 2, (char *)0xD000000000000010, 0x8000000181760560, "Swift/Integers.swift", 20, 2, 0xDB6uLL, 0);
  if (__PAIR128__(a3, a2) >= __PAIR128__(a7, a6))
    _assertionFailure(_:_:file:line:flags:)("Precondition failed", 19, 2, (char *)0xD00000000000002ALL, 0x8000000181766B50, "Swift/Integers.swift", 20, 2, 0xDB7uLL, 0);
  v8 = __clz(a7);
  v9 = __clz(a6) + 64;
  if (!a7)
    v8 = v9;
  if (a6 & (a6 - 1) | a7 & ((a6 != 0) + a7 - 1))
  {
    v20 = v8 & 0x7F;
    v21 = ~(_BYTE)v8;
    if ((-(int)v8 & 0x40) != 0)
      v22 = 0;
    else
      v22 = a5 >> -(char)v8;
    v23 = ((2 * a5) << (v8 - 1)) | (a4 >> -(char)v8);
    if ((-(int)v8 & 0x40) != 0)
      v23 = a5 >> -(char)v8;
    if (!v8)
    {
      v23 = 0;
      v22 = 0;
    }
    if ((v8 & 0x40) != 0)
      v24 = a6 << v8;
    else
      v24 = (a7 << v8) | (a6 >> 1 >> ~(_BYTE)v8);
    if ((v8 & 0x40) != 0)
      v25 = 0;
    else
      v25 = a6 << v8;
    v26 = (a3 << v8) | (a2 >> 1 >> v21);
    v27 = a2 << v8;
    if ((v8 & 0x40) != 0)
    {
      v26 = a2 << v8;
      v27 = 0;
    }
    v28 = v22 | v26;
    v29 = v23 | v27;
    v30 = (a5 << v8) | (a4 >> 1 >> v21);
    v31 = a4 << v8;
    if ((v20 & 0x40) != 0)
      v32 = v31;
    else
      v32 = v30;
    if ((v20 & 0x40) != 0)
      v33 = 0;
    else
      v33 = v31;
    if (v25)
    {
      v34 = specialized generateHalfDigit #1 <A>(high:low:) in UnsignedInteger<>.dividingFullWidth(_:)(v23 | v27, v28, v32, 0, v24, 0, 0xFFFFFFFFFFFFFFFFLL, 0, v25, 64);
      v36 = __PAIR128__(v29, v32) - __PAIR128__(v35, v34) * __PAIR128__(v24, v25);
      result = specialized generateHalfDigit #1 <A>(high:low:) in UnsignedInteger<>.dividingFullWidth(_:)(v36, *((unint64_t *)&v36 + 1), v33, 0, v24, 0, 0xFFFFFFFFFFFFFFFFLL, 0, v25, 64);
      v38 = ((v33 - __PAIR128__(v37, result) * __PAIR128__(v24, v25)) >> 64) + v36;
      v39 = v38 >> v20;
      v19 = ((2 * v38) << ~v20) | ((v33 - result * v25) >> v20);
      if ((v20 & 0x40) != 0)
      {
        v19 = v39;
        v18 = 0;
      }
      else
      {
        v18 = v39;
      }
    }
    else
    {
      if (!v24)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/UInt128.swift", 19, 2, 0x112uLL, 0);
      __udivti3();
      result = __udivti3();
      v40 = v32 - result * v24;
      v18 = v40 >> v20;
      v19 = ((2 * v40) << ~v20) | (v33 >> v20);
      if ((v20 & 0x40) != 0)
      {
        v19 = v18;
        v18 = 0;
      }
    }
  }
  else
  {
    v10 = v8 + 1;
    v11 = 127 - v8;
    v12 = v11 & 0x7F;
    v13 = ((2 * a5) << ~v11) | (a4 >> v11);
    v14 = a5 >> v11;
    if ((v12 & 0x40) != 0)
      v15 = v14;
    else
      v15 = v13;
    if ((v10 & 0x40) != 0)
      v16 = 0;
    else
      v16 = a2 << v10;
    result = v15 | v16;
    v18 = ((a6 != 0) + a7 - 1) & a5;
    v19 = (a6 - 1) & a4;
  }
  *a1 = v19;
  a1[1] = v18;
  return result;
}

uint64_t specialized generateHalfDigit #1 <A>(high:low:) in UnsignedInteger<>.dividingFullWidth(_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, unint64_t a8, __int128 a9, char a10)
{
  uint64_t result;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;

  if (!(a5 | a6))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/UInt128.swift", 19, 2, 0x112uLL, 0);
  result = __udivti3();
  v21 = (__PAIR128__(a2, a1) - __PAIR128__(v19, result) * __PAIR128__(a6, a5)) >> 64;
  v20 = a1 - result * a5;
  v22 = a10 & 0x7F;
  do
  {
    if (__PAIR128__(a8, a7) >= __PAIR128__(v19, result))
    {
      v24 = (v21 << v22) | (v20 >> 1 >> ~v22);
      v25 = v20 << v22;
      if ((a10 & 0x40) != 0)
      {
        v24 = v20 << v22;
        v25 = 0;
      }
      if (__PAIR128__(v24 | a4, v25 | a3) >= __PAIR128__(v19, result) * a9)
        break;
    }
    v23 = result-- != 0;
    v19 = v23 + v19 - 1;
    v21 = (__PAIR128__(v21, v20) + __PAIR128__(a6, a5)) >> 64;
    v20 += a5;
  }
  while (__PAIR128__(a8, a7) >= __PAIR128__(v21, v20));
  return result;
}

void static SignedInteger._maskingAdd(_:_:)()
{
  static SignedInteger._maskingAdd(_:_:)();
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD00000000000002CLL, 0x8000000181762990, "Swift/Integers.swift", 20, 2, 0xEDDuLL, 0);
}

void static SignedInteger._maskingSubtract(_:_:)()
{
  static SignedInteger._maskingSubtract(_:_:)();
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD00000000000002CLL, 0x8000000181762990, "Swift/Integers.swift", 20, 2, 0xEE2uLL, 0);
}

uint64_t static SignedInteger.isSigned.getter()
{
  return 1;
}

uint64_t static SignedInteger<>.min.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  unint64_t AssociatedConformanceWitness;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = *(_QWORD *)(a1 - 8);
  v5 = MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v19 - v8;
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v11, a1, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v14 = (char *)&v19 - v13;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v11, a1, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DB8, 257, AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 24))(v14, a1, v11);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(a1, a2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a2 + 136))(v16 - 1, a1, a2);
  (*(void (**)(char *, char *, uint64_t, uint64_t))(a2 + 216))(v9, v7, a1, a2);
  v17 = *(void (**)(char *, uint64_t))(v4 + 8);
  v17(v7, a1);
  return ((uint64_t (*)(char *, uint64_t))v17)(v9, a1);
}

uint64_t specialized SignedInteger<>.isMultiple(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  if ((a1 & a2) == 0xFFFFFFFFFFFFFFFFLL)
    return 1;
  if (!(a1 | a2))
    return (a3 | a4) == 0;
  v5 = __modti3();
  return (v5 | v6) == 0;
}

BOOL specialized SignedInteger<>.isMultiple(of:)(char a1, char a2)
{
  if (a1 == -1)
    return 1;
  if (a1)
    return a2 % a1 == 0;
  else
    return a2 == 0;
}

BOOL specialized SignedInteger<>.isMultiple(of:)(__int16 a1, __int16 a2)
{
  if (a1 == -1)
    return 1;
  if (a1)
    return a2 % a1 == 0;
  else
    return a2 == 0;
}

BOOL specialized SignedInteger<>.isMultiple(of:)(int a1, int a2)
{
  if (a1 == -1)
    return 1;
  if (a1)
  {
    if (a1 == -1 && a2 == 0x80000000)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division results in an overflow in remainder operation", 54, 2, "Swift/IntegerTypes.swift", 24, 2, 0x20B4uLL, 0);
    return a2 % a1 == 0;
  }
  else
  {
    return a2 == 0;
  }
}

BOOL specialized SignedInteger<>.isMultiple(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::UInt64 v4;
  Swift::tuple_partialValue__Int128_overflow_Bool v6;

  if (a2 | a1)
  {
    if (a2 == -1 && a1 == -1)
      return 1;
    v6 = _Int128.remainderReportingOverflow(dividingBy:)(*(Swift::_Int128 *)&a1);
    if (v6.overflow)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Overflow in %=", 14, 2, "Swift/LegacyInt128.swift", 24, 2, 0x3DCuLL, 0);
    v4 = v6.partialValue.high | v6.partialValue.low;
  }
  else
  {
    v4 = a4 | a3;
  }
  return v4 == 0;
}

uint64_t SignedInteger<>.isMultiple(of:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  const char *v28;
  void (*v29)(void *, uint64_t);
  unint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  const char *v46;
  unint64_t AssociatedConformanceWitness;
  char *v48;
  char v49;
  uint64_t v50;
  char *v51;
  void (*v52)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char v61;
  void (*v62)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v63;
  char v64;
  uint64_t v65;
  const char *v66;
  void (*v67)(void *, uint64_t);
  unint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  void (*v79)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v80;
  const char *v82;
  unint64_t v83;
  char *v84;
  void (*v85)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  const char *v92;
  char *v93;
  uint64_t v94;
  uint64_t (*v95)(uint64_t, uint64_t);
  uint64_t v96;

  v5 = *(_QWORD *)(a3 + 8);
  v92 = *(const char **)(*(_QWORD *)(v5 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v92, a2, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v7 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v91 = (char *)&v87 - v8;
  v9 = *(_QWORD *)(a2 - 8);
  v10 = MEMORY[0x1E0C80A78](v7);
  v88 = (char *)&v87 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v93 = (char *)&v87 - v13;
  v14 = MEMORY[0x1E0C80A78](v12);
  v90 = (char *)&v87 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v89 = (char *)&v87 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v87 - v19;
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v87 - v21;
  v23 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 64);
  if ((v23(a2, v5) & 1) == 0)
  {
    v27 = v23(a2, v5);
    v95 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 128);
    v24 = v95(a2, v5);
    if ((v27 & 1) != 0)
    {
      if (v24 > 64)
        goto LABEL_12;
      v28 = v92;
      v29 = *(void (**)(void *, uint64_t))(swift_getAssociatedConformanceWitness((uint64_t)v92, a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral)+ 8);
      v30 = AssociatedTypeWitness;
      v31 = v9;
      v32 = v91;
      v87 = v30;
      v29(&unk_1816B7DA8, 256);
      v33 = v32;
      v9 = v31;
      (*((void (**)(char *, uint64_t, const char *))v28 + 3))(v33, a2, v28);
      v34 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 + 32) + 8) + 32))(a1, v22, a2);
      v35 = *(void (**)(char *, uint64_t))(v31 + 8);
      v35(v22, a2);
      (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v20, a1, a2);
      if ((v34 & 1) == 0)
      {
        v35(v20, a2);
        AssociatedTypeWitness = v87;
        goto LABEL_24;
      }
      v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 120))(a2, v5);
      v35(v20, a2);
      AssociatedTypeWitness = v87;
      if (v36)
        goto LABEL_24;
LABEL_13:
      if ((v23(a2, v5) & 1) != 0)
      {
        v41 = v94;
        v42 = v95(a2, v5);
        if (v42 >= 64)
          goto LABEL_21;
        goto LABEL_20;
      }
      v45 = v23(a2, v5);
      v41 = v94;
      v42 = v95(a2, v5);
      if ((v45 & 1) != 0)
      {
        if (v42 <= 64)
        {
          v46 = v92;
          AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v92, a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
          v48 = v91;
          (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
          (*((void (**)(char *, uint64_t, const char *))v46 + 3))(v48, a2, v46);
          v49 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 + 32) + 8) + 32))(v41, v22, a2);
          v35(v22, a2);
          v22 = v89;
          (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v89, v41, a2);
          goto LABEL_52;
        }
      }
      else if (v42 < 64)
      {
LABEL_20:
        (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v22, v41, a2);
        v50 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 120))(a2, v5);
        v51 = v22;
LABEL_49:
        v35(v51, a2);
        v54 = v50 == 0;
        return v54 & 1;
      }
LABEL_21:
      v96 = 0;
      v52 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v5 + 96);
      v53 = lazy protocol witness table accessor for type Int and conformance Int(v42, v43, v44);
      v52(&v96, &type metadata for Int, v53, a2, v5);
      v54 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 + 16) + 8) + 8))(v41, v22, a2);
LABEL_22:
      v55 = v22;
LABEL_45:
      v35(v55, a2);
      return v54 & 1;
    }
    if (v24 >= 64)
      goto LABEL_12;
LABEL_10:
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v22, a1, a2);
    v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 120))(a2, v5);
    v35 = *(void (**)(char *, uint64_t))(v9 + 8);
    v35(v22, a2);
    if (v37)
      goto LABEL_24;
    goto LABEL_13;
  }
  v95 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 128);
  v24 = v95(a2, v5);
  if (v24 < 64)
    goto LABEL_10;
LABEL_12:
  v96 = 0;
  v38 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v5 + 96);
  v39 = lazy protocol witness table accessor for type Int and conformance Int(v24, v25, v26);
  v38(&v96, &type metadata for Int, v39, a2, v5);
  v40 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 + 16) + 8) + 8))(a1, v22, a2);
  v35 = *(void (**)(char *, uint64_t))(v9 + 8);
  v35(v22, a2);
  if ((v40 & 1) != 0)
    goto LABEL_13;
LABEL_24:
  if ((v23(a2, v5) & 1) != 0)
  {
    v56 = v95(a2, v5);
    if (v56 < 64)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v22, a1, a2);
      v59 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 120))(a2, v5);
      v35(v22, a2);
      v60 = v93;
      if (v59 == -1)
        goto LABEL_31;
LABEL_39:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 168))(v94, a1, a2, v5);
      if ((v23(a2, v5) & 1) != 0)
      {
        v75 = v95(a2, v5);
        if (v75 < 64)
        {
LABEL_48:
          v50 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 120))(a2, v5);
          v51 = v60;
          goto LABEL_49;
        }
      }
      else
      {
        v78 = v23(a2, v5);
        v75 = v95(a2, v5);
        if ((v78 & 1) == 0)
        {
          if (v75 >= 64)
          {
            v96 = 0;
            v85 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v5 + 96);
            v86 = lazy protocol witness table accessor for type Int and conformance Int(v75, v76, v77);
            v85(&v96, &type metadata for Int, v86, a2, v5);
            v54 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 + 16) + 8) + 8))(v60, v22, a2);
            v35(v60, a2);
            goto LABEL_22;
          }
          goto LABEL_48;
        }
        if (v75 <= 64)
        {
          v82 = v92;
          v83 = swift_getAssociatedConformanceWitness((uint64_t)v92, a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
          v84 = v91;
          (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v83 + 8))(&unk_1816B7DA8, 256, AssociatedTypeWitness, v83);
          (*((void (**)(char *, uint64_t, const char *))v82 + 3))(v84, a2, v82);
          v49 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 + 32) + 8) + 32))(v60, v22, a2);
          v35(v22, a2);
          v22 = v88;
          (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v88, v60, a2);
LABEL_52:
          v54 = (v49 & 1) != 0 && (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 120))(a2, v5) == 0;
          goto LABEL_22;
        }
      }
      v96 = 0;
      v79 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v5 + 96);
      v80 = lazy protocol witness table accessor for type Int and conformance Int(v75, v76, v77);
      v79(&v96, &type metadata for Int, v80, a2, v5);
      v54 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 + 16) + 8) + 8))(v60, v22, a2);
      v35(v22, a2);
      v55 = v60;
      goto LABEL_45;
    }
  }
  else
  {
    v61 = v23(a2, v5);
    v56 = v95(a2, v5);
    if ((v61 & 1) == 0)
    {
      v60 = v93;
      if (v56 < 64)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v22, a1, a2);
        v65 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 120))(a2, v5);
        v35(v22, a2);
        if (v65 == -1)
          goto LABEL_31;
      }
      goto LABEL_39;
    }
    if (v56 <= 64)
    {
      v66 = v92;
      v67 = *(void (**)(void *, uint64_t))(swift_getAssociatedConformanceWitness((uint64_t)v92, a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral)+ 8);
      v68 = AssociatedTypeWitness;
      v69 = v9;
      v70 = v91;
      v87 = v68;
      v67(&unk_1816B7DA8, 256);
      v71 = v70;
      v9 = v69;
      (*((void (**)(char *, uint64_t, const char *))v66 + 3))(v71, a2, v66);
      v72 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 + 32) + 8) + 32))(a1, v22, a2);
      v35(v22, a2);
      v73 = v90;
      (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))(v90, a1, a2);
      if ((v72 & 1) != 0)
      {
        v74 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 120))(a2, v5);
        v35(v73, a2);
        v60 = v93;
        AssociatedTypeWitness = v87;
        if (v74 == -1)
          goto LABEL_31;
      }
      else
      {
        v35(v73, a2);
        v60 = v93;
        AssociatedTypeWitness = v87;
      }
      goto LABEL_39;
    }
  }
  v96 = -1;
  v62 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v5 + 96);
  v63 = lazy protocol witness table accessor for type Int and conformance Int(v56, v57, v58);
  v62(&v96, &type metadata for Int, v63, a2, v5);
  v64 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 + 16) + 8) + 8))(a1, v22, a2);
  v35(v22, a2);
  v60 = v93;
  if ((v64 & 1) == 0)
    goto LABEL_39;
LABEL_31:
  v54 = 1;
  return v54 & 1;
}

uint64_t specialized SignedInteger<>.dividingFullWidth(_:)(uint64_t *a1, unint64_t a2, int64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t v7;
  uint64_t v9;
  BOOL v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  unsigned __int128 v17;
  uint64_t result;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v9 = a3;
  v11 = __CFSUB__(0, v7, a4 == 0);
  v12 = (unsigned __int128)-(__int128)__PAIR128__(v7, a4) >> 64;
  v13 = !v11;
  v14 = v13 ^ 1u;
  v15 = ~a3;
  v11 = __CFADD__(v14, ~a2);
  v16 = v14 + ~a2;
  if (v11)
    v15 = -a3;
  if (a3 < 0)
  {
    a4 = -(uint64_t)a4;
    a5 = v12;
    a2 = v16;
    a3 = v15;
  }
  v17 = __PAIR128__(a7 ^ (unint64_t)(a7 >> 63), a6 ^ (unint64_t)(a7 >> 63))
      - __PAIR128__(a7 >> 63, a7 >> 63);
  result = specialized UnsignedInteger<>.dividingFullWidth(_:)((uint64_t *)&v24, a2, a3, a4, a5, v17, *((unint64_t *)&v17 + 1));
  if (((a7 ^ v9) & 0x8000000000000000) == 0)
  {
    if ((v19 & 0x8000000000000000) == 0)
    {
      v21 = v25;
      if ((v25 & 0x8000000000000000) == 0)
        goto LABEL_11;
    }
LABEL_16:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000051, 0x8000000181766B80, "Swift/Int128.swift", 18, 2, 0x99uLL, 0);
  }
  if (__PAIR128__(v19, result) >= __PAIR128__(0x8000000000000000, 1))
    _assertionFailure(_:_:file:line:flags:)("Precondition failed", 19, 2, (char *)0xD00000000000001ELL, 0x8000000181766BE0, "Swift/Integers.swift", 20, 2, 0xEBEuLL, 0);
  result = -result;
  v21 = v25;
  if (v25 < 0)
    goto LABEL_16;
LABEL_11:
  v22 = v24;
  v23 = (unsigned __int128)-(__int128)__PAIR128__(v20, v24) >> 64;
  if (v9 < 0)
  {
    v22 = -(uint64_t)v24;
    v21 = v23;
  }
  *a1 = v22;
  a1[1] = v21;
  return result;
}

uint64_t static SignedInteger<>._maskingAdd(_:_:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 80))(a2);
}

uint64_t static SignedInteger<>._maskingSubtract(_:_:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 88))(a2);
}

uint64_t (*JoinedSequence._base.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

unint64_t *JoinedSequence._separator.getter(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v4;

  return swift_retain(*(unint64_t **)(v4 + *(int *)(a1 + 44)), a2, a3, a4);
}

uint64_t JoinedSequence._separator.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;

  v4 = *(int *)(a2 + 44);
  result = swift_release(*(_QWORD *)(v2 + v4));
  *(_QWORD *)(v2 + v4) = a1;
  return result;
}

uint64_t (*JoinedSequence._separator.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t JoinedSequence.init<A>(base:separator:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v13;
  uint64_t result;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a7, a1);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 56))(a3, a5);
  result = type metadata accessor for JoinedSequence(0, a2, a4, a6);
  *(_QWORD *)(a7 + *(int *)(result + 44)) = v13;
  return result;
}

void JoinedSequence.Iterator._JoinIteratorState.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int JoinedSequence.Iterator._JoinIteratorState.hashValue.getter(unsigned __int8 a1)
{
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance JoinedSequence<A>.Iterator._JoinIteratorState()
{
  unsigned __int8 *v0;

  return JoinedSequence.Iterator._JoinIteratorState.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance JoinedSequence<A>.Iterator._JoinIteratorState(uint64_t a1)
{
  unsigned __int8 *v1;

  JoinedSequence.Iterator._JoinIteratorState.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance JoinedSequence<A>.Iterator._JoinIteratorState(uint64_t a1)
{
  unsigned __int8 *v1;
  _QWORD v3[5];
  __int128 v4;
  __int128 v5;

  v3[0] = 0;
  v3[1] = _swift_stdlib_Hashing_parameters ^ a1 ^ 0x736F6D6570736575;
  v3[2] = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v3[3] = _swift_stdlib_Hashing_parameters ^ a1 ^ 0x6C7967656E657261;
  v3[4] = unk_1ECD25520 ^ 0x7465646279746573;
  v4 = 0u;
  v5 = 0u;
  JoinedSequence.Iterator._JoinIteratorState.hash(into:)((uint64_t)v3, *v1);
  return Hasher._finalize()();
}

uint64_t JoinedSequence.Iterator._base.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return LazyFilterSequence.Iterator.base.getter(a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator, a2);
}

uint64_t JoinedSequence.Iterator._base.setter(uint64_t a1, uint64_t a2)
{
  return EnumeratedSequence.Iterator._base.setter(a1, a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
}

uint64_t (*JoinedSequence.Iterator._base.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t FlattenSequence.Iterator._inner.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  const char *v5;
  unint64_t AssociatedTypeWitness;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = v2 + *(int *)(a1 + 44);
  v5 = *(const char **)(a1 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(const char **)(a1 + 24), *(_QWORD *)(a1 + 16), (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v7 = swift_getAssociatedTypeWitness(255, v5, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v10 = type metadata accessor for Optional(0, v7, v8, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a2, v4, v10);
}

uint64_t FlattenSequence.Iterator._inner.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  const char *v5;
  unint64_t AssociatedTypeWitness;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = v2 + *(int *)(a2 + 44);
  v5 = *(const char **)(a2 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(const char **)(a2 + 24), *(_QWORD *)(a2 + 16), (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v7 = swift_getAssociatedTypeWitness(255, v5, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v10 = type metadata accessor for Optional(0, v7, v8, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v4, a1, v10);
}

uint64_t (*JoinedSequence.Iterator._inner.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

unint64_t *JoinedSequence.Iterator._separatorData.getter(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v4;

  return swift_retain(*(unint64_t **)(v4 + *(int *)(a1 + 48)), a2, a3, a4);
}

uint64_t JoinedSequence.Iterator._separatorData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;

  v4 = *(int *)(a2 + 48);
  result = swift_release(*(_QWORD *)(v2 + v4));
  *(_QWORD *)(v2 + v4) = a1;
  return result;
}

uint64_t (*JoinedSequence.Iterator._separatorData.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

unint64_t *JoinedSequence.Iterator._separator.getter(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v4;

  return swift_retain(*(unint64_t **)(v4 + *(int *)(a1 + 52)), a2, a3, a4);
}

uint64_t JoinedSequence.Iterator._separator.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t result;

  v6 = (uint64_t *)(v3 + *(int *)(a3 + 52));
  result = swift_release(*v6);
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*JoinedSequence.Iterator._separator.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t JoinedSequence.Iterator._state.getter(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 56));
}

uint64_t JoinedSequence.Iterator._state.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + *(int *)(a2 + 56)) = result;
  return result;
}

uint64_t (*JoinedSequence.Iterator._state.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t JoinedSequence.Iterator.init<A>(base:separator:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, const char *a4@<X4>, uint64_t a5@<X5>, const char *a6@<X6>, uint64_t a7@<X8>)
{
  int *v13;
  uint64_t v14;
  unint64_t AssociatedTypeWitness;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t result;

  v13 = (int *)type metadata accessor for JoinedSequence.Iterator(0, a2, (uint64_t)a4, (uint64_t)a6);
  v14 = a7 + v13[11];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a4, a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v16 = swift_getAssociatedTypeWitness(0, a6, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)(v16 - 8) + 56))(v14, 1, 1, v16);
  v17 = (_QWORD *)(a7 + v13[13]);
  *v17 = 0;
  v17[1] = 0;
  *(_BYTE *)(a7 + v13[14]) = 0;
  v18 = swift_getAssociatedTypeWitness(0, a4, a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(v18 - 8) + 32))(a7, a1, v18);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 56))(a3, a5);
  *(_QWORD *)(a7 + v13[12]) = result;
  return result;
}

void JoinedSequence.Iterator.next()(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  const char *v5;
  const char *v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[21];
  uint64_t v32;
  const char *v33;
  unint64_t v34;
  unint64_t v35;

  v3 = v2;
  v31[10] = a2;
  v5 = (const char *)a1[3];
  v6 = (const char *)a1[4];
  v32 = a1[2];
  v33 = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v5, v32, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v35 = swift_getAssociatedTypeWitness(255, v6, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v10 = type metadata accessor for Optional(0, v35, v8, v9);
  v31[17] = *(_QWORD *)(v10 - 8);
  v31[18] = v10;
  v11 = MEMORY[0x1E0C80A78](v10);
  v31[14] = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v31[9] = (char *)v31 - v13;
  v31[19] = v6;
  v34 = swift_getAssociatedTypeWitness(255, v6, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v16 = type metadata accessor for Optional(0, v34, v14, v15);
  v31[15] = *(_QWORD *)(v16 - 8);
  v31[16] = v16;
  v17 = MEMORY[0x1E0C80A78](v16);
  v31[6] = (char *)v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v31[4] = (char *)v31 - v20;
  MEMORY[0x1E0C80A78](v19);
  v31[11] = (char *)v31 - v21;
  v24 = type metadata accessor for Optional(0, AssociatedTypeWitness, v22, v23);
  v31[7] = *(_QWORD *)(v24 - 8);
  v31[8] = v24;
  v25 = MEMORY[0x1E0C80A78](v24);
  v31[5] = (char *)v31 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v25);
  v31[20] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v28 = MEMORY[0x1E0C80A78](v27);
  v31[13] = (char *)v31 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28);
  v31[12] = (char *)v31 - v30;
  __asm { BR              X9 }
}

void sub_1814064F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v3 = (uint64_t *)(v0 + *(int *)(v1 + 52));
  v4 = *v3;
  if (*v3)
  {
    v5 = v3[1];
    v6 = *(_QWORD *)(v4 + 16);
    if (v5 == v6)
    {
      v7 = *(_QWORD *)(v2 - 176);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 - 96) - 8) + 56))(v7, 1, 1);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 152) + 8))(v7, *(_QWORD *)(v2 - 144));
      JUMPOUT(0x1814064DCLL);
    }
    if (v5 < v6)
    {
      v8 = *(_QWORD *)(v2 - 96);
      v9 = *(_QWORD *)(v8 - 8);
      v10 = v4
          + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
          + *(_QWORD *)(v9 + 72) * v5;
      v3[1] = v5 + 1;
      v11 = *(_QWORD *)(v2 - 176);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v9 + 16))(v11, v10, v8);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(v11, 0, 1, v8);
      (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v2 - 152) + 32))(*(_QWORD *)(v2 - 208), v11, *(_QWORD *)(v2 - 144));
      JUMPOUT(0x1814068A8);
    }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
  }
  _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/Join.swift", 16, 2, 0x76uLL, 0);
}

uint64_t sub_18140654C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  unint64_t AssociatedTypeWitness;
  unint64_t v20;
  void (*v21)(unint64_t *, unint64_t);
  unint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;

  *(_QWORD *)(v5 - 264) = v3;
  v6 = v0 + v4[11];
  v7 = *(_QWORD *)(v5 - 104);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  *(_QWORD *)(v5 - 272) = v9;
  if (v9(v6, 1, v7) == 1)
    JUMPOUT(0x181406968);
  v10 = v2 + 8;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(*(_QWORD *)(v5 - 136), v1, v7, v2, v2 + 8);
  v12 = *(_QWORD *)(v5 - 216);
  (*(void (**)(uint64_t, unint64_t))(AssociatedConformanceWitness + 16))(v7, AssociatedConformanceWitness);
  v13 = *(_QWORD *)(*(_QWORD *)(v5 - 96) - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v13 + 48))(v12, 1) != 1)
    JUMPOUT(0x1814068A0);
  *(_QWORD *)(v5 - 280) = v8;
  *(_QWORD *)(v5 - 288) = v13;
  v14 = v6;
  v15 = (_DWORD *)(v2 + 24);
  v16 = v2;
  v18 = *(_QWORD *)(v5 - 120);
  v17 = *(const char **)(v5 - 112);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v17, v18, v16, v15);
  v20 = swift_getAssociatedConformanceWitness((uint64_t)v17, v18, AssociatedTypeWitness, v16, v10);
  v21 = *(void (**)(unint64_t *, unint64_t))(v20 + 16);
  v22 = swift_checkMetadataState(0, AssociatedTypeWitness);
  v23 = *(_QWORD *)(v5 - 248);
  v21(v22, v20);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 128) + 48))(v23, 1, v1) == 1)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 232) + 8))(v23, *(_QWORD *)(v5 - 224));
    v24 = 1;
    v25 = *(_QWORD *)(v5 - 104);
    v26 = *(_QWORD *)(v5 - 256);
  }
  else
  {
    v26 = *(_QWORD *)(v5 - 256);
    (*(void (**)(uint64_t))(*(_QWORD *)(v5 - 136) + 32))(v1);
    v24 = 0;
    v25 = *(_QWORD *)(v5 - 104);
  }
  v27 = v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 280) + 56))(v26, v24, 1, v25);
  v28 = *(_QWORD *)(v5 - 168);
  v29 = v26;
  v30 = *(_QWORD *)(v5 - 160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 40))(v14, v29, v30);
  v31 = *(_QWORD *)(v5 - 240);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v31, v27, v30);
  v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 - 272))(v31, 1, v25);
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v31, v30);
  if (v32 != 1)
  {
    v36 = *(_QWORD *)(v0 + v4[12]);
    v37 = *(_QWORD *)(v5 - 264);
    if (*(_QWORD *)(v36 + 16))
    {
      swift_retain(*(unint64_t **)(v0 + v4[12]), v33, v34, v35);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v5 - 152) + 8))(*(_QWORD *)(v5 - 216), *(_QWORD *)(v5 - 144));
      v38 = (uint64_t *)(v0 + v4[13]);
      swift_release(*v38);
      *v38 = v36;
      v38[1] = 0;
      *(_BYTE *)(v0 + v37) = 2;
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v5 - 152) + 8))(*(_QWORD *)(v5 - 216), *(_QWORD *)(v5 - 144));
    }
    JUMPOUT(0x1814063C4);
  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v5 - 152) + 8))(*(_QWORD *)(v5 - 216), *(_QWORD *)(v5 - 144));
  *(_BYTE *)(v0 + *(_QWORD *)(v5 - 264)) = 3;
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v5 - 288) + 56))(*(_QWORD *)(v5 - 208), 1, 1, *(_QWORD *)(v5 - 96));
}

uint64_t JoinedSequence.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  int *v11;
  uint64_t v12;
  unint64_t AssociatedTypeWitness;
  unint64_t v14;
  uint64_t result;
  _QWORD *v16;
  uint64_t v17;

  v5 = *(_QWORD *)(a1 + 16);
  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))((char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v2, v5);
  v8 = *(_QWORD *)(a1 + 24);
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v5, v8);
  v9 = *(_QWORD *)(v2 + *(int *)(a1 + 44));
  v10 = *(const char **)(a1 + 32);
  v11 = (int *)type metadata accessor for JoinedSequence.Iterator(0, v5, v8, (uint64_t)v10);
  v12 = a2 + v11[11];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)v8, v5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v14 = swift_getAssociatedTypeWitness(0, v10, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)(v14 - 8) + 56))(v12, 1, 1, v14);
  v16 = (_QWORD *)(a2 + v11[13]);
  *v16 = 0;
  v16[1] = 0;
  *(_BYTE *)(a2 + v11[14]) = 0;
  *(_QWORD *)(a2 + v11[12]) = v9;
  return result;
}

__objc2_class **JoinedSequence._copyToContiguousArray()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  void (*v30)(char *);
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  char *v33;
  unint64_t v34;
  unint64_t AssociatedConformanceWitness;
  void (*v36)(unint64_t, unint64_t);
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  void (*v42)(unint64_t, unint64_t);
  uint64_t v43;
  uint64_t (*v44)(char *, uint64_t, unint64_t);
  int v45;
  const char *v46;
  uint64_t v47;
  void (*v48)(char *, char *, unint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, char *, unint64_t);
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int (*v57)(char *, uint64_t, unint64_t);
  unsigned int v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t WitnessTable;
  unsigned int (*v67)(char *, uint64_t, unint64_t);
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _DWORD *v78;
  const char *v79;
  char *v80;
  char *v81;
  unint64_t v82;
  unint64_t *v83;
  __objc2_class **v84;

  v3 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  v78 = associated type descriptor for Sequence.Element;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v2, v3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v74 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v69 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v68 = (char *)&v67 - v8;
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v67 - v9;
  v13 = type metadata accessor for Optional(0, AssociatedTypeWitness, v11, v12);
  v71 = *(_QWORD *)(v13 - 8);
  v72 = v13;
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v14);
  v70 = (char *)&v67 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v67 - v20;
  v22 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v19);
  v24 = (char *)&v67 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = swift_getAssociatedTypeWitness(0, (const char *)v2, v3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v75 = *(_QWORD *)(v82 - 8);
  v25 = MEMORY[0x1E0C80A78](v82);
  v80 = (char *)&v67 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v81 = (char *)&v67 - v27;
  v79 = *(const char **)(a1 + 32);
  v73 = swift_getAssociatedTypeWitness(0, v79, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, v78);
  v84 = &_swiftEmptyArrayStorage;
  v76 = a1;
  v28 = *(unint64_t **)(v77 + *(int *)(a1 + 44));
  v29 = v28[2];
  v30 = *(void (**)(char *))(v22 + 16);
  v31 = v3;
  v30(v24);
  v32 = *(void (**)(uint64_t, uint64_t))(v2 + 32);
  if (v29)
  {
    v33 = v80;
    v32(v31, v2);
    v34 = v82;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v2, v31, v82, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
    v36 = *(void (**)(unint64_t, unint64_t))(AssociatedConformanceWitness + 16);
    v37 = v70;
    v36(v34, AssociatedConformanceWitness);
    v38 = (char *)v36;
    v39 = v74;
    v67 = *(unsigned int (**)(char *, uint64_t, unint64_t))(v74 + 48);
    if (v67(v37, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, unint64_t))(v75 + 8))(v33, v34);
      (*(void (**)(uint64_t))(*(_QWORD *)(v76 - 8) + 8))(v77);
      (*(void (**)(char *))(v71 + 8))(v37);
    }
    else
    {
      v78 = (_DWORD *)AssociatedConformanceWitness;
      v52 = *(void (**)(char *, char *, unint64_t))(v39 + 32);
      v53 = v68;
      v52(v68, v37, AssociatedTypeWitness);
      v52(v10, v53, AssociatedTypeWitness);
      v56 = type metadata accessor for ContiguousArray(0, v73, v54, v55);
      v81 = v38;
      ContiguousArray.append<A>(contentsOf:)((uint64_t)v10, v56, AssociatedTypeWitness, (uint64_t)v79);
      ((void (*)(unint64_t, _DWORD *))v81)(v34, v78);
      v57 = v67;
      v58 = v67(v16, 1, AssociatedTypeWitness);
      v59 = v34;
      v60 = v69;
      if (v58 != 1)
      {
        do
        {
          v52(v60, v16, AssociatedTypeWitness);
          v83 = v28;
          swift_retain(v28, v61, v62, v63);
          WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ContiguousArray<A>, v56, v64);
          ContiguousArray.append<A>(contentsOf:)((uint64_t)&v83, v56, v56, WitnessTable);
          v52(v10, v60, AssociatedTypeWitness);
          ContiguousArray.append<A>(contentsOf:)((uint64_t)v10, v56, AssociatedTypeWitness, (uint64_t)v79);
          ((void (*)(unint64_t, _DWORD *))v81)(v59, v78);
        }
        while (v57(v16, 1, AssociatedTypeWitness) != 1);
      }
      (*(void (**)(char *, unint64_t))(v75 + 8))(v80, v59);
      (*(void (**)(uint64_t))(*(_QWORD *)(v76 - 8) + 8))(v77);
      (*(void (**)(char *))(v71 + 8))(v16);
    }
  }
  else
  {
    v32(v3, v2);
    v40 = v82;
    v41 = swift_getAssociatedConformanceWitness(v2, v3, v82, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
    v42 = *(void (**)(unint64_t, unint64_t))(v41 + 16);
    v42(v40, v41);
    v43 = v74;
    v44 = *(uint64_t (**)(char *, uint64_t, unint64_t))(v74 + 48);
    v45 = v44(v21, 1, AssociatedTypeWitness);
    v46 = v79;
    v47 = v73;
    if (v45 != 1)
    {
      v48 = *(void (**)(char *, char *, unint64_t))(v43 + 32);
      do
      {
        v48(v10, v21, AssociatedTypeWitness);
        v51 = type metadata accessor for ContiguousArray(0, v47, v49, v50);
        ContiguousArray.append<A>(contentsOf:)((uint64_t)v10, v51, AssociatedTypeWitness, (uint64_t)v46);
        v42(v82, v41);
      }
      while (v44(v21, 1, AssociatedTypeWitness) != 1);
    }
    (*(void (**)(char *, unint64_t))(v75 + 8))(v81, v82);
    (*(void (**)(uint64_t))(*(_QWORD *)(v76 - 8) + 8))(v77);
  }
  return v84;
}

uint64_t Sequence<>.joined<A>(separator:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;

  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *))(v15 + 16))((char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a7, v7, a2);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 56))(a3, a5);
  result = type metadata accessor for JoinedSequence(0, a2, a4, a6);
  *(_QWORD *)(a7 + *(int *)(result + 44)) = v16;
  return result;
}

uint64_t static AnyKeyPath.rootType.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t static AnyKeyPath.valueType.getter()
{
  uint64_t v0;
  uint64_t v1;

  (*(void (**)(void))(v0 + 120))();
  return v1;
}

unint64_t AnyKeyPath._kvcKeyPathString.getter()
{
  uint64_t v0;
  unint64_t result;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  result = *(_QWORD *)(v0 + 16);
  if (result)
  {
    v2 = -(uint64_t)result;
    if (__OFSUB__(0, result))
    {
      __break(1u);
    }
    else
    {
      v3 = __OFSUB__(v2, 1);
      v4 = v2 - 1;
      if (!v3)
      {
        if (v4 < 0)
          return specialized String.init(validatingUTF8:)(result);
        else
          return 0;
      }
    }
    __break(1u);
  }
  return result;
}

void static AnyKeyPath._rootAndValueType.getter()
{
  _abstract(file:line:)("Swift/KeyPath.swift", 19, 2, 0x91uLL);
}

_QWORD *static AnyKeyPath._create(capacityInBytes:initializedBy:)(uint64_t a1, void (*a2)(_QWORD *, char *))
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v5 = a1 + 3;
  if (a1 >= 0)
    v5 = a1;
  v6 = swift_allocObject(v2, ((*(unsigned int *)(v2 + 48) + 3) & 0x1FFFFFFFCLL) + (v5 & 0xFFFFFFFFFFFFFFFCLL), *(unsigned __int16 *)(v2 + 52) | 3);
  v6[2] = 0;
  if (a1 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableRawBufferPointer with negative count", 49, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x68uLL, 0);
  v7 = v6;
  a2(v6 + 3, (char *)v6 + a1 + 24);
  return v7;
}

unint64_t specialized AnyKeyPath.withBuffer<A>(_:)(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  Class *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t *v13;
  Class *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Class *v20;
  Class *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  swift::SymbolInfo *v33;
  char *v34;
  char *v35;
  char *v36;
  uint8x16_t *v37;
  size_t v38;
  int64_t v39;
  int64_t v40;
  int64_t v41;
  char v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  size_t v52;
  Swift::String v53;
  void *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  unint64_t v75;
  Swift::String v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  char v93;
  uint64_t v94;
  void *v95;
  void *object;
  unint64_t v97;
  unint64_t v98;
  void *v99;
  char v100;
  uint64_t v101;
  void *v102;
  uint64_t *TypeName;
  uint64_t v104;
  uint8x16_t *v105;
  int64_t v106;
  int64_t v107;
  int64_t v108;
  char v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t countAndFlagsBits;
  unint64_t v113;
  void *v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  void *v118;
  char v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  char v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  char v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  void *v134;
  char v135;
  uint64_t v136;
  void *v137;
  uint64_t v138;
  unint64_t v139;
  void *v140;
  char v141;
  uint64_t v142;
  void *v143;
  uint64_t *v144;
  uint64_t v145;
  uint8x16_t *v146;
  int64_t v147;
  int64_t v148;
  int64_t v149;
  char v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  void *v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  void *v159;
  char v160;
  uint64_t v161;
  void *v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  char v166;
  uint64_t v167;
  Swift::String v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  Swift::String v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v177;
  uint64_t (*v178)(void);
  Swift::String __s;
  __int16 v180;
  uint64_t v181;
  uint64_t v182;
  BOOL v183;
  BOOL v184;
  __int128 v185[3];
  __int128 v186[3];
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  swift::SymbolInfo *v201;

  if ((((_BYTE)a1 + 24) & 3) != 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x1B8uLL, 0);
  v4 = v3;
  LODWORD(v6) = *(_DWORD *)(a1 + 24);
  v183 = (int)v6 < 0;
  v184 = (v6 & 0x40000000) != 0;
  v6 &= 0xFFFFFFuLL;
  v181 = a1 + 32;
  v182 = a1 + 32 + v6;
  if ((_DWORD)v6)
  {
    v177 = v3;
    v178 = *(uint64_t (**)(void))(a3 + 120);
    v7 = (Class *)v178();
    while (1)
    {
      v13 = (unint64_t *)v7;
      v15 = KeyPathBuffer.next()();
      v17 = v16;
      v19 = v18;
      v20 = v14;
      if (v14)
      {
        v7 = v14;
      }
      else
      {
        v178();
        v7 = v21;
      }
      RawKeyPathComponent.value.getter(v15, v17, v19, (uint64_t *)v185);
      outlined init with take of KeyPathComponent(v185, (uint64_t)&v194);
      if (v195 >> 61 != 5
        || ((v22 = v197 | v198 | v199, v195 != 0xA000000000000000) || v22 | v194 | v200 | v196)
        && ((v23 = v22 | v196, v200) || v195 != 0xA000000000000000 || v194 != 1 || v23)
        && (v200 || v195 != 0xA000000000000000 || v194 != 2 || v23))
      {
        v24 = *a2;
        v25 = a2[1];
        v26 = HIBYTE(v25) & 0xF;
        if ((v25 & 0x2000000000000000) == 0)
          v26 = *a2 & 0xFFFFFFFFFFFFLL;
        if (v26 || (v24 & ~v25 & 0x2000000000000000) != 0)
        {
          if ((v25 & 0x2000000000000000) != 0)
          {
            v27 = specialized _SmallString.init(_:appending:)(v24, v25, 0x2EuLL, 0xE100000000000000);
            if ((v29 & 1) == 0)
            {
              v30 = v27;
              v31 = v28;
              swift_bridgeObjectRelease(0xE100000000000000);
              swift_bridgeObjectRelease(a2[1]);
              *a2 = v30;
              a2[1] = v31;
              goto LABEL_32;
            }
          }
          _StringGuts.append(_:)(46, 0xE100000000000000, 0, 1);
          v32 = 0xE100000000000000;
        }
        else
        {
          *a2 = 46;
          a2[1] = 0xE100000000000000;
          v32 = v25;
        }
        swift_bridgeObjectRelease(v32);
      }
LABEL_32:
      RawKeyPathComponent.value.getter(v15, v17, v19, (uint64_t *)v186);
      outlined init with take of KeyPathComponent(v186, (uint64_t)&v187);
      if ((v188 >> 61) - 2 < 3)
      {
        v188 &= 0x1FFFFFFFFFFFFFFFuLL;
        v33 = (swift::SymbolInfo *)ComputedAccessorsPtr.getter<A, B>()(v189);
        v34 = swift_keyPath_copySymbolName(v33);
        if (v34)
        {
          v35 = v34;
          v36 = swift_keyPathSourceString(v34);
          if (v36)
          {
            v37 = (uint8x16_t *)v36;
            v38 = _swift_stdlib_strlen(v36);
            if ((v38 & 0x8000000000000000) != 0)
              goto LABEL_203;
            v39 = v38;
            v40 = validateUTF8(_:)(v37->i64, v38);
            if ((v42 & 1) != 0)
              v43 = repairUTF8(_:firstKnownBrokenRange:)(v37->i8, v39, v40, v41);
            else
              v43 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v37, v39, v40 & 1);
            v83 = v43;
            v84 = v44;
            swift_slowDealloc(v37);
            swift_keyPath_freeSymbolName(v35);
LABEL_133:
            v126 = *a2;
            v67 = a2[1];
            v127 = HIBYTE(v67) & 0xF;
            if ((v67 & 0x2000000000000000) == 0)
              v127 = *a2 & 0xFFFFFFFFFFFFLL;
            if (!v127 && (v126 & ~v67 & 0x2000000000000000) == 0)
            {
              *a2 = v83;
              a2[1] = v84;
              goto LABEL_197;
            }
            if ((v67 & 0x2000000000000000) != 0)
            {
              if ((v84 & 0x2000000000000000) == 0)
                goto LABEL_4;
              v128 = specialized _SmallString.init(_:appending:)(v126, v67, v83, v84);
              if ((v130 & 1) == 0)
              {
                v131 = v128;
                v132 = v129;
                swift_bridgeObjectRelease(v84);
                swift_bridgeObjectRelease(a2[1]);
                *a2 = v131;
                a2[1] = v132;
                goto LABEL_8;
              }
LABEL_143:
              v8 = HIBYTE(v84) & 0xF;
            }
            else
            {
              if ((v84 & 0x2000000000000000) != 0)
                goto LABEL_143;
LABEL_4:
              v8 = v83 & 0xFFFFFFFFFFFFLL;
            }
            _StringGuts.append(_:)(v83, v84, 0, v8);
            goto LABEL_6;
          }
          swift_keyPath_freeSymbolName(v35);
        }
        v73 = specialized static String._createEmpty(withInitialCapacity:)(18);
        v75 = (unint64_t)v74;
        __s._countAndFlagsBits = v73;
        __s._object = v74;
        v76 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("<computed ", 0xAuLL, 1);
        v77 = HIBYTE(v75) & 0xF;
        if ((v75 & 0x2000000000000000) == 0)
          v77 = v73 & 0xFFFFFFFFFFFFLL;
        if (!v77 && (v73 & ~v75 & 0x2000000000000000) == 0)
        {
          swift_bridgeObjectRelease(v75);
          __s = v76;
          goto LABEL_100;
        }
        if ((v75 & 0x2000000000000000) != 0)
        {
          if (((uint64_t)v76._object & 0x2000000000000000) != 0)
          {
            v91 = specialized _SmallString.init(_:appending:)(v73, v75, v76._countAndFlagsBits, (unint64_t)v76._object);
            if ((v93 & 1) != 0)
              goto LABEL_98;
            v94 = v91;
            v95 = v92;
            swift_bridgeObjectRelease(v75);
            swift_bridgeObjectRelease((uint64_t)v76._object);
            __s._countAndFlagsBits = v94;
            __s._object = v95;
            goto LABEL_100;
          }
        }
        else if (((uint64_t)v76._object & 0x2000000000000000) != 0)
        {
LABEL_98:
          v78 = ((unint64_t)v76._object >> 56) & 0xF;
LABEL_99:
          _StringGuts.append(_:)(v76._countAndFlagsBits, (unint64_t)v76._object, 0, v78);
          swift_bridgeObjectRelease((uint64_t)v76._object);
LABEL_100:
          v201 = v33;
          _print_unlocked<A, B>(_:_:)((uint64_t)&v201, (uint64_t)&__s, (Class *)&type metadata for UnsafeRawPointer, (uint64_t)&type metadata for DefaultStringInterpolation, (uint64_t)&protocol witness table for DefaultStringInterpolation);
          object = __s._object;
          v97 = ((unint64_t)__s._object >> 56) & 0xF;
          if (((uint64_t)__s._object & 0x2000000000000000) == 0)
            v97 = __s._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
          if (v97 || (__s._countAndFlagsBits & ~(uint64_t)__s._object & 0x2000000000000000) != 0)
          {
            if (((uint64_t)__s._object & 0x2000000000000000) == 0
              || (v98 = specialized _SmallString.init(_:appending:)(__s._countAndFlagsBits, (unint64_t)__s._object, 0x2820uLL, 0xE200000000000000), (v100 & 1) != 0))
            {
              _StringGuts.append(_:)(10272, 0xE200000000000000, 0, 2);
              swift_bridgeObjectRelease(0xE200000000000000);
            }
            else
            {
              v101 = v98;
              v102 = v99;
              swift_bridgeObjectRelease((uint64_t)object);
              swift_bridgeObjectRelease(0xE200000000000000);
              __s._countAndFlagsBits = v101;
              __s._object = v102;
            }
          }
          else
          {
            swift_bridgeObjectRelease((uint64_t)__s._object);
            __s._countAndFlagsBits = 10272;
            __s._object = (void *)0xE200000000000000;
          }
          TypeName = (uint64_t *)swift_getTypeName(v7, 0);
          if (v104 < 0)
            goto LABEL_203;
          v105 = (uint8x16_t *)TypeName;
          v106 = v104;
          v107 = validateUTF8(_:)(TypeName, v104);
          if ((v109 & 1) != 0)
            v110 = repairUTF8(_:firstKnownBrokenRange:)(v105->i8, v106, v107, v108);
          else
            v110 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v105, v106, v107 & 1);
          countAndFlagsBits = v110;
          v113 = v111;
          v114 = __s._object;
          v115 = ((unint64_t)__s._object >> 56) & 0xF;
          if (((uint64_t)__s._object & 0x2000000000000000) == 0)
            v115 = __s._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
          if (!v115 && (__s._countAndFlagsBits & ~(uint64_t)__s._object & 0x2000000000000000) == 0)
          {
            swift_bridgeObjectRelease((uint64_t)__s._object);
            __s._countAndFlagsBits = countAndFlagsBits;
            __s._object = (void *)v113;
            goto LABEL_125;
          }
          if (((uint64_t)__s._object & 0x2000000000000000) != 0)
          {
            if ((v111 & 0x2000000000000000) != 0)
            {
              v117 = specialized _SmallString.init(_:appending:)(__s._countAndFlagsBits, (unint64_t)__s._object, v110, v111);
              if ((v119 & 1) != 0)
                goto LABEL_123;
              v120 = v117;
              v121 = v118;
              swift_bridgeObjectRelease((uint64_t)v114);
              swift_bridgeObjectRelease(v113);
              __s._countAndFlagsBits = v120;
              __s._object = v121;
              v113 = (unint64_t)v121;
              countAndFlagsBits = v120;
              goto LABEL_125;
            }
          }
          else if ((v111 & 0x2000000000000000) != 0)
          {
LABEL_123:
            v116 = HIBYTE(v113) & 0xF;
LABEL_124:
            _StringGuts.append(_:)(countAndFlagsBits, v113, 0, v116);
            swift_bridgeObjectRelease(v113);
            countAndFlagsBits = __s._countAndFlagsBits;
            v113 = (unint64_t)__s._object;
LABEL_125:
            v122 = HIBYTE(v113) & 0xF;
            if ((v113 & 0x2000000000000000) == 0)
              v122 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
            if (v122 || (countAndFlagsBits & ~v113 & 0x2000000000000000) != 0)
            {
              if ((v113 & 0x2000000000000000) == 0
                || (v123 = specialized _SmallString.init(_:appending:)(countAndFlagsBits, v113, 0x3E29uLL, 0xE200000000000000), (v125 & 1) != 0))
              {
                _StringGuts.append(_:)(15913, 0xE200000000000000, 0, 2);
                swift_bridgeObjectRelease(0xE200000000000000);
                v83 = __s._countAndFlagsBits;
                v84 = (unint64_t)__s._object;
              }
              else
              {
                v83 = v123;
                v84 = v124;
                swift_bridgeObjectRelease(v113);
                swift_bridgeObjectRelease(0xE200000000000000);
              }
            }
            else
            {
              swift_bridgeObjectRelease(v113);
              v84 = 0xE200000000000000;
              v83 = 15913;
            }
            goto LABEL_133;
          }
          v116 = v110 & 0xFFFFFFFFFFFFLL;
          goto LABEL_124;
        }
        v78 = v76._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
        goto LABEL_99;
      }
      v45 = v187;
      if ((v188 >> 61) >= 2)
      {
        v64 = v190 | v189;
        v65 = v192 | v191;
        if ((v188 != 0xA000000000000000 || v65 | v187 | v193 | v64)
          && v188 == 0xA000000000000000
          && v187 == 1
          && !(v65 | v64 | v193))
        {
          v85 = *a2;
          v67 = a2[1];
          v86 = HIBYTE(v67) & 0xF;
          if ((v67 & 0x2000000000000000) == 0)
            v86 = *a2 & 0xFFFFFFFFFFFFLL;
          if (v86 || (v85 & ~v67 & 0x2000000000000000) != 0)
          {
            if ((v67 & 0x2000000000000000) != 0)
            {
              v69 = specialized _SmallString.init(_:appending:)(v85, v67, 0x21uLL, 0xE100000000000000);
              if ((v87 & 1) == 0)
                goto LABEL_92;
            }
            v72 = 33;
            goto LABEL_188;
          }
          v169 = 33;
        }
        else
        {
          v66 = *a2;
          v67 = a2[1];
          v68 = HIBYTE(v67) & 0xF;
          if ((v67 & 0x2000000000000000) == 0)
            v68 = *a2 & 0xFFFFFFFFFFFFLL;
          if (v68 || (v66 & ~v67 & 0x2000000000000000) != 0)
          {
            if ((v67 & 0x2000000000000000) != 0)
            {
              v69 = specialized _SmallString.init(_:appending:)(v66, v67, 0x3FuLL, 0xE100000000000000);
              if ((v71 & 1) == 0)
              {
LABEL_92:
                v88 = v69;
                v89 = v70;
                swift_bridgeObjectRelease(0xE100000000000000);
                swift_bridgeObjectRelease(a2[1]);
                *a2 = v88;
                a2[1] = v89;
                goto LABEL_8;
              }
            }
            v72 = 63;
LABEL_188:
            _StringGuts.append(_:)(v72, 0xE100000000000000, 0, 1);
            v9 = 0xE100000000000000;
            goto LABEL_7;
          }
          v169 = 63;
        }
        *a2 = v169;
        a2[1] = 0xE100000000000000;
LABEL_197:
        v9 = v67;
        goto LABEL_7;
      }
      v188 &= 0x1FFFFFFFFFFFFFFFuLL;
      v46 = swift_reflectionMirror_recursiveCount(v13);
      if (v46 < 0)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
      v47 = v46;
      v48 = 0;
      do
      {
        if (v47 == v48)
        {
          v55 = specialized static String._createEmpty(withInitialCapacity:)(16);
          v57 = v56;
          __s._countAndFlagsBits = v55;
          __s._object = (void *)v56;
          v58 = HIBYTE(v56) & 0xF;
          if ((v56 & 0x2000000000000000) == 0)
            v58 = v55 & 0xFFFFFFFFFFFFLL;
          if (v58 || (v55 & ~v56 & 0x2000000000000000) != 0)
          {
            if ((v56 & 0x2000000000000000) == 0
              || (v59 = specialized _SmallString.init(_:appending:)(v55, v56, 0x2074657366666F3CuLL, 0xE800000000000000), (v61 & 1) != 0))
            {
              _StringGuts.append(_:)(0x2074657366666F3CLL, 0xE800000000000000, 0, 8);
              swift_bridgeObjectRelease(0xE800000000000000);
              v62 = __s._countAndFlagsBits;
              v63 = (unint64_t)__s._object;
            }
            else
            {
              v62 = v59;
              v63 = v60;
              swift_bridgeObjectRelease(0xE800000000000000);
              swift_bridgeObjectRelease(v57);
              __s._countAndFlagsBits = v62;
              __s._object = (void *)v63;
            }
          }
          else
          {
            swift_bridgeObjectRelease(v56);
            v63 = 0xE800000000000000;
            __s._countAndFlagsBits = 0x2074657366666F3CLL;
            __s._object = (void *)0xE800000000000000;
            v62 = 0x2074657366666F3CLL;
          }
          v80 = _int64ToString(_:radix:uppercase:)(v45, 10, 0, (uint64_t (*)(__int128 *, uint64_t, uint64_t, uint64_t, _QWORD))swift_int64ToString);
          v81 = v79;
          v82 = HIBYTE(v63) & 0xF;
          if ((v63 & 0x2000000000000000) == 0)
            v82 = v62 & 0xFFFFFFFFFFFFLL;
          if (!v82 && (v62 & ~v63 & 0x2000000000000000) == 0)
          {
            swift_bridgeObjectRelease(v63);
            __s._countAndFlagsBits = v80;
            __s._object = (void *)v81;
            goto LABEL_153;
          }
          if ((v63 & 0x2000000000000000) != 0)
          {
            if ((v79 & 0x2000000000000000) != 0)
            {
              v133 = specialized _SmallString.init(_:appending:)(v62, v63, v80, v79);
              if ((v135 & 1) != 0)
                goto LABEL_151;
              v136 = v133;
              v137 = v134;
              swift_bridgeObjectRelease(v81);
              swift_bridgeObjectRelease(v63);
              __s._countAndFlagsBits = v136;
              __s._object = v137;
              v81 = (unint64_t)v137;
              v80 = v136;
              goto LABEL_153;
            }
          }
          else if ((v79 & 0x2000000000000000) != 0)
          {
LABEL_151:
            v90 = HIBYTE(v81) & 0xF;
LABEL_152:
            _StringGuts.append(_:)(v80, v81, 0, v90);
            swift_bridgeObjectRelease(v81);
            v80 = __s._countAndFlagsBits;
            v81 = (unint64_t)__s._object;
LABEL_153:
            v138 = HIBYTE(v81) & 0xF;
            if ((v81 & 0x2000000000000000) == 0)
              v138 = v80 & 0xFFFFFFFFFFFFLL;
            if (v138 || (v80 & ~v81 & 0x2000000000000000) != 0)
            {
              if ((v81 & 0x2000000000000000) == 0
                || (v139 = specialized _SmallString.init(_:appending:)(v80, v81, 0x2820uLL, 0xE200000000000000),
                    (v141 & 1) != 0))
              {
                _StringGuts.append(_:)(10272, 0xE200000000000000, 0, 2);
                swift_bridgeObjectRelease(0xE200000000000000);
              }
              else
              {
                v142 = v139;
                v143 = v140;
                swift_bridgeObjectRelease(0xE200000000000000);
                swift_bridgeObjectRelease(v81);
                __s._countAndFlagsBits = v142;
                __s._object = v143;
              }
            }
            else
            {
              swift_bridgeObjectRelease(v81);
              __s._countAndFlagsBits = 10272;
              __s._object = (void *)0xE200000000000000;
            }
            v144 = (uint64_t *)swift_getTypeName(v7, 0);
            if ((v145 & 0x8000000000000000) == 0)
            {
              v146 = (uint8x16_t *)v144;
              v147 = v145;
              v148 = validateUTF8(_:)(v144, v145);
              if ((v150 & 1) != 0)
                v151 = repairUTF8(_:firstKnownBrokenRange:)(v146->i8, v147, v148, v149);
              else
                v151 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v146, v147, v148 & 1);
              v153 = v151;
              v154 = v152;
              v155 = __s._object;
              v156 = ((unint64_t)__s._object >> 56) & 0xF;
              if (((uint64_t)__s._object & 0x2000000000000000) == 0)
                v156 = __s._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
              if (!v156 && (__s._countAndFlagsBits & ~(uint64_t)__s._object & 0x2000000000000000) == 0)
              {
                swift_bridgeObjectRelease((uint64_t)__s._object);
                __s._countAndFlagsBits = v153;
                __s._object = (void *)v154;
                goto LABEL_178;
              }
              if (((uint64_t)__s._object & 0x2000000000000000) != 0)
              {
                if ((v152 & 0x2000000000000000) != 0)
                {
                  v158 = specialized _SmallString.init(_:appending:)(__s._countAndFlagsBits, (unint64_t)__s._object, v151, v152);
                  if ((v160 & 1) != 0)
                    goto LABEL_176;
                  v161 = v158;
                  v162 = v159;
                  swift_bridgeObjectRelease(v154);
                  swift_bridgeObjectRelease((uint64_t)v155);
                  __s._countAndFlagsBits = v161;
                  __s._object = v162;
                  v154 = (unint64_t)v162;
                  v153 = v161;
                  goto LABEL_178;
                }
              }
              else if ((v152 & 0x2000000000000000) != 0)
              {
LABEL_176:
                v157 = HIBYTE(v154) & 0xF;
LABEL_177:
                _StringGuts.append(_:)(v153, v154, 0, v157);
                swift_bridgeObjectRelease(v154);
                v153 = __s._countAndFlagsBits;
                v154 = (unint64_t)__s._object;
LABEL_178:
                v163 = HIBYTE(v154) & 0xF;
                if ((v154 & 0x2000000000000000) == 0)
                  v163 = v153 & 0xFFFFFFFFFFFFLL;
                if (v163 || (v153 & ~v154 & 0x2000000000000000) != 0)
                {
                  if ((v154 & 0x2000000000000000) == 0
                    || (v164 = specialized _SmallString.init(_:appending:)(v153, v154, 0x3E29uLL, 0xE200000000000000),
                        (v166 & 1) != 0))
                  {
                    _StringGuts.append(_:)(15913, 0xE200000000000000, 0, 2);
                    swift_bridgeObjectRelease(0xE200000000000000);
                    v167 = __s._countAndFlagsBits;
                    v84 = (unint64_t)__s._object;
                  }
                  else
                  {
                    v167 = v164;
                    v84 = v165;
                    swift_bridgeObjectRelease(0xE200000000000000);
                    swift_bridgeObjectRelease(v154);
                  }
                }
                else
                {
                  swift_bridgeObjectRelease(v154);
                  v84 = 0xE200000000000000;
                  v167 = 15913;
                }
                v168._countAndFlagsBits = v167;
                v168._object = (void *)v84;
                String.append(_:)(v168);
LABEL_6:
                v9 = v84;
LABEL_7:
                swift_bridgeObjectRelease(v9);
                goto LABEL_8;
              }
              v157 = v151 & 0xFFFFFFFFFFFFLL;
              goto LABEL_177;
            }
LABEL_203:
            _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
          }
          v90 = v80 & 0xFFFFFFFFFFFFLL;
          goto LABEL_152;
        }
        v49 = v48 + 1;
        v50 = swift_reflectionMirror_recursiveChildOffset((uint64_t)v13, v48);
        v48 = v49;
      }
      while (v50 != v45);
      __s._countAndFlagsBits = 0;
      __s._object = 0;
      v180 = 0;
      swift_reflectionMirror_recursiveChildMetadata((uint64_t *)v13, (const char *)(v49 - 1), (char **)&__s);
      v51 = (uint64_t *)__s._countAndFlagsBits;
      if (!__s._countAndFlagsBits)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while implicitly unwrapping an Optional value", 68, 2, "Swift/KeyPath.swift", 19, 2, 0x1036uLL, 0);
      v52 = _swift_stdlib_strlen((const char *)__s._countAndFlagsBits);
      if ((v52 & 0x8000000000000000) != 0)
        goto LABEL_203;
      v53._countAndFlagsBits = (uint64_t)_sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs4Int8V_s5UInt8Vs5NeverOSSTgm5019_sSS7cStringSSSPys4f14VG_tcfcSSSRys5G7VGXEfU_Tf1cn_n(v51, v52);
      v54 = v53._object;
      String.append(_:)(v53);
      swift_bridgeObjectRelease((uint64_t)v54);
      if (__s._object)
        ((void (*)(uint64_t *))__s._object)(v51);
LABEL_8:
      if (!v20)
      {
        v170 = *a2;
        swift_bridgeObjectRetain(a2[1], v10, v11, v12);
        v4 = v177;
        goto LABEL_200;
      }
    }
  }
  v172._countAndFlagsBits = 0x666C65732ELL;
  v172._object = (void *)0xE500000000000000;
  String.append(_:)(v172);
  swift_bridgeObjectRelease(0xE500000000000000);
  v170 = *a2;
  swift_bridgeObjectRetain(a2[1], v173, v174, v175);
LABEL_200:
  if (!v4)
    return v170;
  return v171;
}

uint64_t AnyKeyPath._storedInlineOffset.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = specialized KeyPathBuffer.init(base:)(v0 + 24);
  v20 = v1;
  v21 = v2;
  if (v1 && v2 != v1)
  {
    v3 = 0;
    while (1)
    {
      v5 = (unsigned int *)_ss12MemoryLayoutOsRi_zrlE26_roundingUpBaseToAlignmentyS2WFZs19RawKeyPathComponentV6HeaderV_Tgm5(v20, v21);
      if (!v5)
        goto LABEL_52;
      v7 = v6 - (_QWORD)v5 - 4;
      if (__OFSUB__(v6 - (_QWORD)v5, 4))
      {
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x1B8uLL, 0);
      }
      if ((v7 & 0x8000000000000000) != 0)
        goto LABEL_45;
      v8 = *v5;
      v9 = (v8 >> 24) & 0x7F;
      if (v9 == 1 || v9 == 3)
      {
        v11 = 4 * ((~(_DWORD)v8 & 0x7FFFFF) == 0);
      }
      else
      {
        if (v9 != 2)
        {
          v11 = 0;
          goto LABEL_32;
        }
        if ((v8 & 0x400000) != 0)
          v11 = 28;
        else
          v11 = 20;
        if ((v8 & 0x80000) != 0)
        {
          if ((v8 & 0x400000) != 0)
            v12 = 6;
          else
            v12 = 4;
          v13 = (uint64_t)&v5[v12 + 2];
          if ((v13 & 7) != 0)
            goto LABEL_48;
          v14 = *(_QWORD *)v13;
          v15 = __OFADD__(v11 + 16, v14);
          v11 += 16 + v14;
          if (v15)
          {
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
          }
          if ((v8 & 0x10) != 0)
          {
            v15 = __OFADD__(v11, 8);
            v11 += 8;
            if (v15)
              goto LABEL_51;
          }
          if ((v11 & 0x8000000000000000) != 0)
LABEL_45:
            _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer with negative count", 42, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x485uLL, 0);
        }
      }
      if (v7 < v11)
        goto LABEL_45;
LABEL_32:
      v16 = v5 + 1;
      v20 = (uint64_t)v5 + v11 + 4;
      v21 = v6;
      if (v7 == v11)
      {
        v17 = 0;
      }
      else
      {
        v18 = (uint64_t *)specialized _pop<A>(from:as:count:)(&v20, 1);
        if (!v18)
          goto LABEL_52;
        v17 = *v18;
      }
      if (v9 != 1)
        return 0;
      v19 = v8 & 0x7FFFFF;
      if ((v8 & 0x7FFFFF) == 0x7FFFFF)
      {
        if (v11 < 4)
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer.load out of bounds", 41, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x55EuLL, 0);
        if ((v16 & 3) != 0)
          goto LABEL_48;
        v19 = *v16;
      }
      v15 = __OFADD__(v3, v19);
      v3 += v19;
      if (v15)
        goto LABEL_47;
      if (!v17)
        return v3;
    }
  }
  return 0;
}

uint64_t KeyPathBuffer.next()()
{
  uint64_t v0;
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (unsigned int *)specialized _pop<A>(from:as:count:)((uint64_t *)v0, 1);
  if (!v1)
    goto LABEL_9;
  v2 = *v1;
  if ((v2 & 0x80000000) != 0)
    *(_BYTE *)(v0 + 17) = 0;
  v3 = *(_QWORD *)v0;
  v4 = RawKeyPathComponent.bodySize.getter(v2, *(_QWORD *)v0);
  specialized UnsafeRawBufferPointer.init<A>(_:)(v3, v4);
  specialized _pop<A>(from:as:count:)((uint64_t *)v0, v4);
  if (*(_QWORD *)v0)
  {
    if (*(_QWORD *)(v0 + 8) != *(_QWORD *)v0 && !specialized _pop<A>(from:as:count:)((uint64_t *)v0, 1))
LABEL_9:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
  }
  return v2;
}

uint64_t AnyKeyPath.deinit()
{
  uint64_t v0;

  return v0;
}

void AnyKeyPath.__deallocating_deinit()
{
  uint64_t v0;

  swift_deallocClassInstance(v0);
}

Swift::Int AnyKeyPath.hashValue.getter()
{
  AnyKeyPath.hash(into:)();
  return Hasher._finalize()();
}

void AnyKeyPath.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  Swift::UInt v15;
  unsigned int v16;
  Swift::UInt v17;
  Swift::UInt v18;
  Swift::UInt *v19;
  unsigned int v20;
  uint64_t v21;
  Swift::UInt v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::UInt v30;
  Swift::UInt v31;
  uint64_t v32;
  uint64_t v33;

  Hasher._combine(_:)(*(_QWORD *)v0);
  if ((((_BYTE)v0 + 24) & 3) != 0)
LABEL_76:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x1B8uLL, 0);
  v1 = *(_DWORD *)(v0 + 24) & 0xFFFFFF;
  v32 = v0 + 32;
  v33 = v0 + 32 + v1;
  if ((_DWORD)v1)
  {
    v2 = (unsigned int *)specialized _pop<A>(from:as:count:)(&v32, 1);
    if (!v2)
LABEL_74:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
    while (1)
    {
      v3 = *v2;
      v4 = v32;
      v5 = HIBYTE(*v2) & 0x7F;
      if (v5 == 1 || v5 == 3)
      {
        if ((~v3 & 0x7FFFFF) != 0)
          goto LABEL_17;
        v7 = 4;
      }
      else
      {
        if (v5 != 2)
        {
LABEL_17:
          v7 = 0;
          v8 = 0;
          v9 = 0;
          if (!v32)
            goto LABEL_28;
          goto LABEL_27;
        }
        v7 = 28;
        if ((v3 & 0x400000) == 0)
          v7 = 20;
        if ((v3 & 0x80000) != 0)
        {
          if (!v32)
            goto LABEL_74;
          v10 = 24;
          if ((v3 & 0x400000) == 0)
            v10 = 16;
          v11 = v32 + v10 + 4;
          if ((v11 & 7) != 0)
            goto LABEL_76;
          v12 = v7 + 16;
          v13 = *(_QWORD *)v11;
          v14 = __OFADD__(v12, v13);
          v7 = v12 + v13;
          if (v14)
          {
            __break(1u);
LABEL_79:
            __break(1u);
LABEL_80:
            _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer has a nil start and nonzero count", 56, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x486uLL, 0);
          }
          if ((v3 & 0x10) != 0)
          {
            v14 = __OFADD__(v7, 8);
            v7 += 8;
            if (v14)
              goto LABEL_79;
          }
          if (v7 < 0)
            goto LABEL_77;
          goto LABEL_27;
        }
      }
      if (!v32)
        goto LABEL_80;
LABEL_27:
      v8 = v32 + v7;
      v9 = v7;
LABEL_28:
      specialized _pop<A>(from:as:count:)(&v32, v9);
      if (v32 && v33 != v32)
      {
        v19 = (Swift::UInt *)specialized _pop<A>(from:as:count:)(&v32, 1);
        if (!v19)
          goto LABEL_74;
        v15 = *v19;
        if (v5 == 1)
        {
LABEL_38:
          v20 = v3 & 0x7FFFFF;
          if ((v3 & 0x7FFFFF) == 0x7FFFFF)
            v20 = specialized UnsafeRawBufferPointer.load<A>(fromByteOffset:as:)(0, v4, v8);
          v17 = v20;
          v18 = 0;
          goto LABEL_41;
        }
      }
      else
      {
        v15 = 0;
        if (v5 == 1)
          goto LABEL_38;
      }
      if (v5 == 2)
      {
        v21 = specialized UnsafeRawBufferPointer.load<A>(fromByteOffset:as:)(4, v4, v8);
        if (!v4)
          goto LABEL_74;
        v22 = v21;
        if ((v3 & 0x80000) != 0)
        {
          v27 = 24;
          if ((v3 & 0x400000) != 0)
            v28 = 24;
          else
            v28 = 16;
          v29 = v4 + v28 + 4;
          if ((v3 & 0x10) == 0)
            v27 = 16;
          if ((v29 & 7) != 0)
            goto LABEL_76;
          if ((*(_QWORD *)v29 & 0x8000000000000000) != 0)
LABEL_77:
            _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer with negative count", 42, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x485uLL, 0);
          if (((v29 + 8) & 7) != 0)
            goto LABEL_76;
          v25 = *(_QWORD *)(v29 + 8);
          if ((v3 & 0x10) != 0)
          {
            if (((v29 + 16) & 7) != 0)
              goto LABEL_76;
            v26 = *(_QWORD *)(v29 + 16);
          }
          else
          {
            v26 = 0;
          }
          v23 = v29 + v27;
          v24 = v29 + v27 + *(_QWORD *)v29;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          v26 = 0;
        }
        if ((v3 & 0x200000) != 0)
          v30 = 1;
        else
          v30 = (v3 >> 19) & 2;
        if ((v3 & 0x400000) != 0)
        {
          if ((v3 & 0x800000) != 0)
            v31 = 6;
          else
            v31 = 7;
        }
        else
        {
          v31 = 5;
        }
        Hasher._combine(_:)(v31);
        Hasher._combine(_:)(v22);
        Hasher._combine(_:)(v30);
        appendHashFromArgument #1 (_:) in KeyPathComponent.hash(into:)(v23, v24, v25, v26);
        goto LABEL_72;
      }
      if (v5 != 3)
      {
        if ((v3 & 0xFFFFFF) != 0)
        {
          if ((v3 & 0xFFFFFF) == 1)
            Hasher._combine(_:)(4uLL);
          else
            Hasher._combine(_:)(3uLL);
        }
        else
        {
          Hasher._combine(_:)(2uLL);
        }
        goto LABEL_72;
      }
      v16 = v3 & 0x7FFFFF;
      if ((v3 & 0x7FFFFF) == 0x7FFFFF)
        v16 = specialized UnsafeRawBufferPointer.load<A>(fromByteOffset:as:)(0, v4, v8);
      v17 = v16;
      v18 = 1;
LABEL_41:
      Hasher._combine(_:)(v18);
      Hasher._combine(_:)(v17);
LABEL_72:
      if (!v15)
        return;
      Hasher._combine(_:)(v15);
      v2 = (unsigned int *)specialized _pop<A>(from:as:count:)(&v32, 1);
      if (!v2)
        goto LABEL_74;
    }
  }
}

void ObjectIdentifier.hash(into:)(int a1, Swift::UInt a2)
{
  Hasher._combine(_:)(a2);
}

uint64_t RawKeyPathComponent.value.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  unsigned int v5;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = result;
  v7 = BYTE3(result) & 0x7F;
  if (v7 == 1)
  {
    v8 = result & 0x7FFFFF;
    if ((_DWORD)v8 == 0x7FFFFF)
    {
      result = specialized UnsafeRawBufferPointer.load<A>(fromByteOffset:as:)(0, a2, a3);
      v14 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v8 = result;
    }
    else
    {
      v14 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
    }
    goto LABEL_33;
  }
  if (v7 != 2)
  {
    if (v7 == 3)
    {
      v8 = result & 0x7FFFFF;
      if ((_DWORD)v8 == 0x7FFFFF)
      {
        result = specialized UnsafeRawBufferPointer.load<A>(fromByteOffset:as:)(0, a2, a3);
        v9 = 0;
        v10 = 0;
        v11 = 0;
        v12 = 0;
        v13 = 0;
        v14 = 0x2000000000000000;
        v8 = result;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        v12 = 0;
        v13 = 0;
        v14 = 0x2000000000000000;
      }
    }
    else
    {
      v8 = result & 0xFFFFFF;
      if ((result & 0xFFFFFF) != 0)
      {
        if ((_DWORD)v8 == 1)
          v8 = 2;
        else
          v8 = 1;
        v14 = 0xA000000000000000;
        v9 = 0;
        v10 = 0;
        v11 = 0;
        v12 = 0;
        v13 = 0;
      }
      else
      {
        v14 = 0xA000000000000000;
        v9 = result & 0xFFFFFF;
        v10 = v9;
        v11 = v9;
        v12 = v9;
        v13 = v9;
      }
    }
    goto LABEL_33;
  }
  result = specialized UnsafeRawBufferPointer.load<A>(fromByteOffset:as:)(4, a2, a3);
  if ((v5 & 0x200000) != 0)
    v15 = 1;
  else
    v15 = (v5 >> 19) & 2;
  if (!a2)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
  v8 = result;
  if ((v5 & 0x80000) != 0)
  {
    v10 = RawKeyPathComponent._computedArguments.getter(v5, a2);
    v16 = RawKeyPathComponent._computedArgumentSize.getter(v5, a2);
    if (v16 < 0)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer with negative count", 42, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x485uLL, 0);
    v17 = v16;
    result = RawKeyPathComponent._computedArgumentHeaderPointer.getter(v5, a2);
    if (((result + 8) & 7) == 0)
    {
      v12 = *(_QWORD *)(result + 8);
      if ((v5 & 0x10) == 0)
      {
        v13 = 0;
LABEL_28:
        v11 = v10 + v17;
        goto LABEL_29;
      }
      result = RawKeyPathComponent._computedArguments.getter(v5, a2);
      if (((result - 8) & 7) == 0)
      {
        v13 = *(_QWORD *)(result - 8);
        goto LABEL_28;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x1B8uLL, 0);
  }
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
LABEL_29:
  v9 = a2 + 12;
  v14 = v15 | 0x6000000000000000;
  if ((v5 & 0x800000) == 0)
    v14 = v15 | 0x8000000000000000;
  if ((v5 & 0x400000) == 0)
    v14 = v15 | 0x4000000000000000;
LABEL_33:
  *a4 = v8;
  a4[1] = v14;
  a4[2] = v9;
  a4[3] = v10;
  a4[4] = v11;
  a4[5] = v12;
  a4[6] = v13;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnyKeyPath()
{
  AnyKeyPath.hash(into:)();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AnyKeyPath()
{
  AnyKeyPath.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnyKeyPath()
{
  AnyKeyPath.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnyKeyPath(_QWORD **a1, _QWORD **a2)
{
  return specialized static AnyKeyPath.== infix(_:_:)(*a1, *a2);
}

uint64_t PartialKeyPath.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t static KeyPath._rootAndValueType.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 144);
}

uint64_t KeyPath._projectReadOnly(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *boxed_opaque_existential_0Tm;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  _BOOL4 v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43[3];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47[4];

  v7 = *v4;
  v8 = *(_QWORD *)(*v4 + 152);
  v9 = type metadata accessor for Optional(0, v8, a2, a3);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v41 - v11;
  v13 = v4[2];
  if (v13)
  {
    v14 = __OFSUB__(0, v13);
    v15 = -v13;
    if (v14)
      goto LABEL_43;
    v14 = __OFSUB__(v15, 1);
    v16 = v15 - 1;
    if (v14)
    {
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    if ((v16 & 0x8000000000000000) == 0)
    {
      if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 144) - 8) + 64) & 0x8000000000000000) != 0)
LABEL_39:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer with negative count", 42, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x485uLL, 0);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a4, a1 + v16, v8);
    }
  }
  v42 = a4;
  v18 = *(_QWORD *)(v7 + 144);
  v47[3] = v18;
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(v47);
  v20 = *(_QWORD *)(v18 - 8);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v20 + 16))(boxed_opaque_existential_0Tm, a1, v18);
  v21 = specialized KeyPathBuffer.init(base:)((uint64_t)(v4 + 3));
  if (!v21 || v22 == v21)
  {
    v23 = *(_QWORD *)(v8 - 8);
    if (*(_QWORD *)(v20 + 64) == *(_QWORD *)(v23 + 64))
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v42, a1, v8);
      return __swift_destroy_boxed_opaque_existential_1Tm(v47);
    }
LABEL_45:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  while (1)
  {
    v24 = (unsigned int *)_ss12MemoryLayoutOsRi_zrlE26_roundingUpBaseToAlignmentyS2WFZs19RawKeyPathComponentV6HeaderV_Tgm5(v21, v22);
    if (!v24)
      goto LABEL_47;
    v26 = v25 - (_QWORD)v24 - 4;
    if (__OFSUB__(v25 - (_QWORD)v24, 4))
    {
      __break(1u);
LABEL_41:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x1B8uLL, 0);
    }
    if ((v26 & 0x8000000000000000) != 0)
      goto LABEL_39;
    v27 = (uint64_t)(v24 + 1);
    v28 = *v24;
    v29 = HIBYTE(*v24) & 0x7F;
    if (v29 != 1)
    {
      if (v29 == 2)
      {
        if ((v28 & 0x400000) != 0)
          v30 = 28;
        else
          v30 = 20;
        if ((v28 & 0x80000) != 0)
        {
          v31 = 6;
          if ((v28 & 0x400000) == 0)
            v31 = 4;
          v32 = (uint64_t)&v24[v31 + 2];
          if ((v32 & 7) != 0)
            goto LABEL_41;
          v33 = *(_QWORD *)v32;
          v14 = __OFADD__(v30 + 16, v33);
          v30 += 16 + v33;
          if (v14)
          {
            __break(1u);
LABEL_43:
            __break(1u);
            goto LABEL_44;
          }
          if ((v28 & 0x10) != 0)
          {
            v14 = __OFADD__(v30, 8);
            v30 += 8;
            if (v14)
            {
              __break(1u);
LABEL_47:
              _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
            }
          }
          if ((v30 & 0x8000000000000000) != 0)
            goto LABEL_39;
        }
        goto LABEL_29;
      }
      if (v29 != 3)
      {
        v30 = 0;
        v34 = (uint64_t)(v24 + 1);
        goto LABEL_32;
      }
    }
    v30 = 4 * ((~v28 & 0x7FFFFF) == 0);
LABEL_29:
    if (v26 < v30)
      goto LABEL_39;
    v34 = v27 + v30;
LABEL_32:
    v45 = v34;
    v46 = v27 + v26;
    v35 = v8;
    if (v26 != v30)
    {
      v36 = (uint64_t *)specialized _pop<A>(from:as:count:)(&v45, 1);
      if (!v36)
        goto LABEL_47;
      v35 = *v36;
    }
    v37 = v26 == v30;
    outlined init with copy of Any((uint64_t)v47, (uint64_t)v43);
    v38 = v44;
    v39 = __swift_project_boxed_opaque_existential_0Tm(v43, v44);
    specialized project2 #1 <A, B><A1><A2>(_:) in project #1 <A, B><A1>(_:) in closure #2 in KeyPath._projectReadOnly(from:)(v28, v27, v34, (uint64_t)v39, v37, (uint64_t)v47, v8, v38, (uint64_t)v12, v35);
    v40 = *(_QWORD *)(v8 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v12, 1, v8) != 1)
      break;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    __swift_destroy_boxed_opaque_existential_1Tm(v43);
    v21 = v45;
    v22 = v46;
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v40 + 32))(v42, v12, v8);
  __swift_destroy_boxed_opaque_existential_1Tm(v43);
  return __swift_destroy_boxed_opaque_existential_1Tm(v47);
}

Swift::UnsafeRawPointer __swiftcall UnsafeRawPointer.advanced(by:)(Swift::Int by)
{
  uint64_t v1;

  return (Swift::UnsafeRawPointer)(v1 + by);
}

void specialized project2 #1 <A, B><A1><A2>(_:) in project #1 <A, B><A1>(_:) in closure #2 in KeyPath._projectReadOnly(from:)(unsigned int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[3];
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39[3];
  _QWORD v40[8];

  v26 = a6;
  v28 = a5;
  v35 = a4;
  v37 = a2;
  v38 = a3;
  v36 = a1;
  v29 = a9;
  v40[7] = *MEMORY[0x1E0C80C00];
  v22 = type metadata accessor for Optional(0, a8, a3, a4);
  v21[2] = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v23 = (char *)v21 - v11;
  v24 = type metadata accessor for Optional(0, a10, v12, v13);
  v25 = *(_QWORD *)(v24 - 8);
  v14 = *(_QWORD *)(v25 + 64);
  v15 = MEMORY[0x1E0C80A78](v24);
  v21[1] = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v15);
  v31 = *(_QWORD *)(a10 - 8);
  v17 = MEMORY[0x1E0C80A78](v16);
  v32 = (char *)v21 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  MEMORY[0x1E0C80A78](v19);
  v33 = a10;
  v34 = a7;
  v30 = type metadata accessor for RawKeyPathComponent.ProjectionResult(0, a10, a7, v20);
  MEMORY[0x1E0C80A78](v30);
  RawKeyPathComponent.value.getter(v36, v37, v38, (uint64_t *)v39);
  outlined init with take of KeyPathComponent(v39, (uint64_t)v40);
  __asm { BR              X16 }
}

uint64_t sub_181409380@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void (**v2)(_QWORD, _QWORD, uint64_t);
  void (**v3)(_QWORD, _QWORD, _QWORD);
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  void (**v10)(_QWORD, _QWORD, _QWORD);
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  void (*v15)(uint64_t, _BYTE *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  _QWORD *boxed_opaque_existential_0Tm;
  uint64_t *v20;

  *(_QWORD *)(v6 - 144) = v1 & 0x1FFFFFFFFFFFFFFFLL;
  if ((v2 & 7) != 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x1B8uLL, 0);
  v7 = a1 - (_QWORD)v3;
  if (v4)
    v8 = v3 == 0;
  else
    v8 = 1;
  if (v8)
    v9 = 0;
  else
    v9 = v7;
  if (v8)
    v10 = v2;
  else
    v10 = v3;
  (*v2)(*(_QWORD *)(v6 - 272), v10, v9);
  v11 = *(_QWORD *)(v6 - 280);
  v12 = *(_QWORD *)(v6 - 288);
  v13 = *(_BYTE **)(v6 - 296);
  v14 = *(_QWORD *)(v6 - 304);
  swift_storeEnumTagMultiPayload(v5, *(_QWORD *)(v6 - 312), 0);
  v15 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v14 + 32);
  v15((uint64_t)v13, v5, v12);
  if ((*(_DWORD *)(v6 - 324) & 1) != 0)
  {
    v16 = *(_QWORD *)(v11 - 8);
    if (*(_QWORD *)(v6 - 336) != *(_QWORD *)(v16 + 64))
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
    v17 = *(_QWORD *)(v6 - 320);
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v16 + 16))(v17, v13, v11);
    (*(void (**)(_BYTE *, uint64_t))(v14 + 8))(v13, v12);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v17, 0, 1, v11);
  }
  else
  {
    *(_QWORD *)(v6 - 216) = v12;
    boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm((_QWORD *)(v6 - 240));
    v15((uint64_t)boxed_opaque_existential_0Tm, v13, v12);
    v20 = *(uint64_t **)(v6 - 344);
    __swift_destroy_boxed_opaque_existential_1Tm(v20);
    outlined init with take of Any((_OWORD *)(v6 - 240), v20);
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(*(_QWORD *)(v6 - 320), 1, 1, v11);
  }
}

void RawKeyPathComponent._projectReadOnly<A, B, C>(_:to:endingWith:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[3];
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35[3];
  _QWORD v36[8];

  v33 = a8;
  v34 = a1;
  v31 = a9;
  v36[7] = *MEMORY[0x1E0C80C00];
  v24 = type metadata accessor for Optional(0, a6, a2, a3);
  v23[2] = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24);
  v25 = (char *)v23 - v14;
  v28 = type metadata accessor for Optional(0, a7, v15, v16);
  v27 = *(_QWORD *)(v28 - 8);
  v17 = *(_QWORD *)(v27 + 64);
  v18 = MEMORY[0x1E0C80A78](v28);
  v23[1] = (char *)v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v18);
  v26 = (char *)v23 - v20;
  v32 = a7;
  v30 = *(_QWORD *)(a7 - 8);
  v21 = *(_QWORD *)(v30 + 64);
  v22 = MEMORY[0x1E0C80A78](v19);
  v23[0] = (char *)v23 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = a6;
  MEMORY[0x1E0C80A78](v22);
  RawKeyPathComponent.value.getter(a3, a4, a5, (uint64_t *)v35);
  outlined init with take of KeyPathComponent(v35, (uint64_t)v36);
  __asm { BR              X12 }
}

void sub_181409B68(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(_QWORD, uint64_t, uint64_t);
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  size_t v12;

  *(_QWORD *)(v5 - 144) = a1 & 0x1FFFFFFFFFFFFFFFLL;
  v6 = (void (*)(_QWORD, uint64_t, uint64_t))ComputedAccessorsPtr.getter<A, B>()(v3);
  if (v4)
    v7 = v2 == 0;
  else
    v7 = 1;
  if (v7)
    v8 = 0;
  else
    v8 = v1 - v2;
  if (v7)
    v9 = v3;
  else
    v9 = v2;
  v10 = *(_BYTE **)(v5 - 256);
  v6(*(_QWORD *)(v5 - 248), v9, v8);
  v12 = type metadata accessor for RawKeyPathComponent.ProjectionResult(0, *(_QWORD *)(v5 - 264), *(_QWORD *)(v5 - 272), v11);
  swift_storeEnumTagMultiPayload(v10, v12, 0);
}

uint64_t KeyPath.deinit()
{
  uint64_t v0;
  int v1;
  _DWORD *v2;
  uint64_t v3;
  _DWORD *v4;
  unint64_t v5;
  int v6;
  int v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t *v16;
  BOOL v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  void (**v21)(uint64_t *, uint64_t);
  void (*v22)(uint64_t *, uint64_t);
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;

  if (((v0 + 24) & 3) != 0)
LABEL_59:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x1B8uLL, 0);
  v1 = *(_DWORD *)(v0 + 24);
  if ((v1 & 0x80000000) == 0)
  {
    v28 = v0 + 32;
    v29 = v0 + 32 + (*(_QWORD *)&v1 & 0xFFFFFFLL);
    while (1)
    {
      v2 = (_DWORD *)_ss12MemoryLayoutOsRi_zrlE26_roundingUpBaseToAlignmentyS2WFZs19RawKeyPathComponentV6HeaderV_Tgm5(v28, v29);
      if (!v2)
        goto LABEL_63;
      v4 = v2;
      v5 = v3 - (_QWORD)v2 - 4;
      if (__OFSUB__(v3 - (_QWORD)v2, 4))
      {
        __break(1u);
        goto LABEL_59;
      }
      if ((v5 & 0x8000000000000000) != 0)
        goto LABEL_57;
      v6 = *v2;
      v7 = HIBYTE(*v2) & 0x7F;
      if (v7 == 1 || v7 == 3)
        break;
      if (v7 == 2)
      {
        v9 = 28;
        if ((v6 & 0x400000) == 0)
          v9 = 20;
        if ((v6 & 0x80000) != 0)
        {
          if ((v6 & 0x400000) != 0)
            v10 = 6;
          else
            v10 = 4;
          v11 = (uint64_t)&v2[v10 + 2];
          if ((v11 & 7) != 0)
            goto LABEL_59;
          v12 = v9 + 16;
          v13 = *(_QWORD *)v11;
          v14 = __OFADD__(v12, v13);
          v9 = v12 + v13;
          if (v14)
          {
            __break(1u);
LABEL_61:
            __break(1u);
LABEL_62:
            __break(1u);
LABEL_63:
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
          }
          if ((v6 & 0x10) != 0)
          {
            v14 = __OFADD__(v9, 8);
            v9 += 8;
            if (v14)
              goto LABEL_62;
          }
          if ((v9 & 0x8000000000000000) != 0)
LABEL_57:
            _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer with negative count", 42, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x485uLL, 0);
        }
        goto LABEL_14;
      }
      v9 = 0;
LABEL_30:
      v28 = (uint64_t)v2 + v9 + 4;
      v29 = v3;
      if (v5 == v9)
      {
        v15 = 0;
      }
      else
      {
        v16 = (uint64_t *)specialized _pop<A>(from:as:count:)(&v28, 1);
        if (!v16)
          goto LABEL_63;
        v15 = *v16;
      }
      v17 = (v6 & 0x7D000000) != 0x1000000 && v7 == 2;
      if (v17 && (v6 & 0x80000) != 0)
      {
        if ((v6 & 0x400000) != 0)
          v18 = 6;
        else
          v18 = 4;
        v19 = &v4[v18];
        v20 = (uint64_t)&v4[v18 + 4];
        if ((v20 & 7) != 0)
          goto LABEL_59;
        v21 = *(void (***)(uint64_t *, uint64_t))v20;
        if ((v21 & 7) != 0)
          goto LABEL_59;
        v22 = *v21;
        if (v22)
        {
          v23 = (uint64_t *)(v19 + 2);
          if ((v6 & 0x10) != 0)
            v24 = 3;
          else
            v24 = 2;
          if ((v23 & 7) != 0)
            goto LABEL_59;
          v25 = *v23;
          if ((v6 & 0x10) != 0)
          {
            if (((unint64_t)(v23 + 2) & 7) != 0)
              goto LABEL_59;
            v26 = v23[2];
          }
          else
          {
            v26 = 0;
          }
          if (__OFSUB__(v25, v26))
            goto LABEL_61;
          v22(&v23[v24], v25 - v26);
        }
      }
      if (!v15)
        return v0;
    }
    v9 = 4 * ((~v6 & 0x7FFFFF) == 0);
LABEL_14:
    if (v5 < v9)
      goto LABEL_57;
    goto LABEL_30;
  }
  return v0;
}

void KeyPath.__deallocating_deinit()
{
  uint64_t v0;

  KeyPath.deinit();
  swift_deallocClassInstance(v0);
}

uint64_t WritableKeyPath._projectMutableAddress(from:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;

  v2 = a1;
  v3 = *v1;
  v4 = v1[2];
  if (v4)
  {
    v5 = __OFSUB__(0, v4);
    v6 = -v4;
    if (v5)
      goto LABEL_38;
    v5 = __OFSUB__(v6, 1);
    v7 = v6 - 1;
    if (v5)
    {
LABEL_39:
      __break(1u);
LABEL_40:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x1B8uLL, 0);
    }
    if ((v7 & 0x8000000000000000) == 0)
      return a1 + v7;
  }
  v8 = *(_QWORD *)(v3 + 168);
  v30 = 0;
  v9 = specialized KeyPathBuffer.init(base:)((uint64_t)(v1 + 3));
  v28 = v9;
  v29 = v10;
  if (v9 && v10 != v9)
  {
    do
    {
      v11 = (unsigned int *)_ss12MemoryLayoutOsRi_zrlE26_roundingUpBaseToAlignmentyS2WFZs19RawKeyPathComponentV6HeaderV_Tgm5(v28, v29);
      if (!v11)
        goto LABEL_43;
      v13 = v12 - (_QWORD)v11 - 4;
      if (__OFSUB__(v12 - (_QWORD)v11, 4))
      {
        __break(1u);
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
      if ((v13 & 0x8000000000000000) != 0)
        goto LABEL_36;
      v14 = (uint64_t)(v11 + 1);
      v15 = *v11;
      v16 = BYTE3(v15) & 0x7F;
      if (v16 != 1)
      {
        if (v16 == 2)
        {
          if ((v15 & 0x400000) != 0)
            v17 = 28;
          else
            v17 = 20;
          if ((v15 & 0x80000) != 0)
          {
            v18 = 6;
            if ((v15 & 0x400000) == 0)
              v18 = 4;
            v19 = (uint64_t)&v11[v18 + 2];
            if ((v19 & 7) != 0)
              goto LABEL_40;
            v20 = v17 + 16;
            v21 = *(_QWORD *)v19;
            v5 = __OFADD__(v20, v21);
            v17 = v20 + v21;
            if (v5)
            {
              __break(1u);
LABEL_42:
              __break(1u);
LABEL_43:
              _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
            }
            if ((v15 & 0x10) != 0)
            {
              v5 = __OFADD__(v17, 8);
              v17 += 8;
              if (v5)
                goto LABEL_42;
            }
            if ((v17 & 0x8000000000000000) != 0)
              goto LABEL_36;
          }
          goto LABEL_27;
        }
        if (v16 != 3)
        {
          v17 = 0;
          v22 = (uint64_t)(v11 + 1);
          goto LABEL_30;
        }
      }
      v17 = 4 * ((~(_DWORD)v15 & 0x7FFFFF) == 0);
LABEL_27:
      if (v13 < v17)
LABEL_36:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer with negative count", 42, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x485uLL, 0);
      v22 = v14 + v17;
LABEL_30:
      v28 = v22;
      v29 = v14 + v13;
      if (v13 == v17)
      {
        specialized RawKeyPathComponent._projectMutableAddress<A, B>(_:from:to:isRoot:keepAlive:)(v2, (uint64_t)&v30, v15, v14, v22, v8, *(_QWORD *)(v3 + 176));
        return v26;
      }
      v23 = (uint64_t *)specialized _pop<A>(from:as:count:)(&v28, 1);
      if (!v23)
        goto LABEL_43;
      v24 = *v23;
      specialized RawKeyPathComponent._projectMutableAddress<A, B>(_:from:to:isRoot:keepAlive:)(v2, (uint64_t)&v30, v15, v14, v22, v8, *v23);
      v2 = v25;
      v8 = v24;
    }
    while (v24);
  }
  return v2;
}

void WritableKeyPath.__deallocating_deinit()
{
  uint64_t v0;

  KeyPath.deinit();
  swift_deallocClassInstance(v0);
}

char *ReferenceWritableKeyPath._projectMutableAddress(from:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  unsigned int *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60[3];
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _QWORD v68[3];

  v68[1] = *MEMORY[0x1E0C80C00];
  v3 = *v1;
  v68[0] = 0;
  v4 = specialized KeyPathBuffer.init(base:)((uint64_t)(v1 + 3));
  v6 = v5;
  v66 = v4;
  v67 = v7;
  v56 = v3;
  v8 = *(_QWORD *)(v3 + 192);
  v65 = v8;
  v9 = __swift_allocate_boxed_opaque_existential_0Tm(&v64);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v9, a1, v8);
  if ((v6 & 0x100) != 0)
  {
    do
    {
      v10 = (unsigned int *)specialized _pop<A>(from:as:count:)(&v66, 1);
      if (!v10)
        goto LABEL_67;
      v11 = *v10;
      v12 = v66;
      v13 = BYTE3(v11) & 0x7F;
      if (v13 == 1 || v13 == 3)
      {
        if ((~(_DWORD)v11 & 0x7FFFFF) != 0)
          goto LABEL_16;
        v15 = 4;
      }
      else
      {
        if (v13 != 2)
        {
LABEL_16:
          v15 = 0;
          v16 = 0;
          v17 = 0;
          if (!v66)
            goto LABEL_27;
          goto LABEL_26;
        }
        v15 = 28;
        if ((v11 & 0x400000) == 0)
          v15 = 20;
        if ((v11 & 0x80000) != 0)
        {
          if (!v66)
            goto LABEL_67;
          v18 = 24;
          if ((v11 & 0x400000) == 0)
            v18 = 16;
          v19 = v66 + v18 + 4;
          if ((v19 & 7) != 0)
            goto LABEL_62;
          v20 = v15 + 16;
          v21 = *(_QWORD *)v19;
          v22 = __OFADD__(v20, v21);
          v15 = v20 + v21;
          if (v22)
          {
            __break(1u);
LABEL_64:
            __break(1u);
LABEL_65:
            __break(1u);
LABEL_66:
            __break(1u);
LABEL_67:
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
          }
          if ((v11 & 0x10) != 0)
          {
            v22 = __OFADD__(v15, 8);
            v15 += 8;
            if (v22)
              goto LABEL_65;
          }
          if (v15 < 0)
            goto LABEL_60;
          goto LABEL_26;
        }
      }
      if (!v66)
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer has a nil start and nonzero count", 56, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x486uLL, 0);
LABEL_26:
      v16 = v66 + v15;
      v17 = v15;
LABEL_27:
      specialized _pop<A>(from:as:count:)(&v66, v17);
      if (!v66)
        goto LABEL_67;
      if (v67 == v66)
        goto LABEL_67;
      v23 = (uint64_t *)specialized _pop<A>(from:as:count:)(&v66, 1);
      if (!v23)
        goto LABEL_67;
      v24 = *v23;
      outlined init with copy of Any((uint64_t)&v64, (uint64_t)v60);
      v58 = v61;
      v57 = __swift_project_boxed_opaque_existential_0Tm(v60, v61);
      v25 = *(_QWORD *)(v56 + 200);
      v27 = type metadata accessor for RawKeyPathComponent.ProjectionResult(0, v24, v25, v26);
      v59 = &v55;
      v28 = *(_QWORD *)(v27 - 8);
      v29 = *(_QWORD *)(v28 + 64);
      MEMORY[0x1E0C80A78](v27);
      v30 = (char *)&v55 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
      RawKeyPathComponent._projectReadOnly<A, B, C>(_:to:endingWith:)((uint64_t)v57, v31, v11, v12, v16, v58, v24, (uint64_t)v30, v25);
      v63 = v24;
      v32 = __swift_allocate_boxed_opaque_existential_0Tm(&v62);
      MEMORY[0x1E0C80A78](v32);
      (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v30, v30, v27);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v27);
      (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v32, v30, v24);
      __swift_destroy_boxed_opaque_existential_1Tm(v60);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t *)&v64);
      outlined init with take of Any(&v62, &v64);
    }
    while ((v11 & 0x80000000) == 0);
  }
  v33 = v65;
  v34 = __swift_project_boxed_opaque_existential_0Tm(&v64, v65);
  v35 = *(_QWORD *)(v33 - 8);
  v36 = *(_QWORD *)(v35 + 64);
  MEMORY[0x1E0C80A78](v34);
  v37 = (char *)&v55 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v35 + 16))(v37);
  if (v36 < 0)
LABEL_60:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer with negative count", 42, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x485uLL, 0);
  (*(void (**)(char *, uint64_t))(v35 + 8))((char *)&v55 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0), v33);
  while (1)
  {
    v38 = (unsigned int *)_ss12MemoryLayoutOsRi_zrlE26_roundingUpBaseToAlignmentyS2WFZs19RawKeyPathComponentV6HeaderV_Tgm5(v66, v67);
    if (!v38)
      goto LABEL_67;
    v40 = v39 - (_QWORD)v38 - 4;
    if (__OFSUB__(v39 - (_QWORD)v38, 4))
    {
      __break(1u);
LABEL_62:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x1B8uLL, 0);
    }
    if ((v40 & 0x8000000000000000) != 0)
      goto LABEL_60;
    v41 = (uint64_t)(v38 + 1);
    v42 = *v38;
    v43 = BYTE3(v42) & 0x7F;
    if (v43 != 1)
    {
      if (v43 == 2)
      {
        if ((v42 & 0x400000) != 0)
          v44 = 28;
        else
          v44 = 20;
        if ((v42 & 0x80000) != 0)
        {
          v45 = 6;
          if ((v42 & 0x400000) == 0)
            v45 = 4;
          v46 = (uint64_t)&v38[v45 + 2];
          if ((v46 & 7) != 0)
            goto LABEL_62;
          v47 = v44 + 16;
          v48 = *(_QWORD *)v46;
          v22 = __OFADD__(v47, v48);
          v44 = v47 + v48;
          if (v22)
            goto LABEL_64;
          if ((v42 & 0x10) != 0)
          {
            v22 = __OFADD__(v44, 8);
            v44 += 8;
            if (v22)
              goto LABEL_66;
          }
          if ((v44 & 0x8000000000000000) != 0)
            goto LABEL_60;
        }
        goto LABEL_51;
      }
      if (v43 != 3)
      {
        v44 = 0;
        v49 = (uint64_t)(v38 + 1);
        goto LABEL_54;
      }
    }
    v44 = 4 * ((~(_DWORD)v42 & 0x7FFFFF) == 0);
LABEL_51:
    if (v40 < v44)
      goto LABEL_60;
    v49 = v41 + v44;
LABEL_54:
    v66 = v49;
    v67 = v41 + v40;
    if (v40 == v44)
      break;
    v50 = (uint64_t *)specialized _pop<A>(from:as:count:)(&v66, 1);
    if (!v50)
      goto LABEL_67;
    v51 = *v50;
    specialized RawKeyPathComponent._projectMutableAddress<A, B>(_:from:to:isRoot:keepAlive:)((uint64_t)v37, (uint64_t)v68, v42, v41, v49, v33, *v50);
    v37 = v52;
    v33 = v51;
    if (!v51)
      goto LABEL_59;
  }
  specialized RawKeyPathComponent._projectMutableAddress<A, B>(_:from:to:isRoot:keepAlive:)((uint64_t)v37, (uint64_t)v68, v42, v41, v49, v33, *(_QWORD *)(v56 + 200));
  v37 = v53;
LABEL_59:
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t *)&v64);
  return v37;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ComputedPropertyID()
{
  uint64_t v0;
  Swift::UInt v1;

  v1 = *(unsigned __int8 *)(v0 + 8);
  Hasher._combine(_:)(*(_QWORD *)v0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ComputedPropertyID()
{
  uint64_t v0;
  Swift::UInt v1;

  v1 = *(unsigned __int8 *)(v0 + 8);
  Hasher._combine(_:)(*(_QWORD *)v0);
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ComputedPropertyID()
{
  uint64_t v0;
  Swift::UInt v1;

  v1 = *(unsigned __int8 *)(v0 + 8);
  Hasher._combine(_:)(*(_QWORD *)v0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ComputedPropertyID(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 == *(_QWORD *)a2 && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8);
}

uint64_t ComputedAccessorsPtr.getter<A, B>()(uint64_t a1)
{
  if ((a1 & 7) != 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x1B8uLL, 0);
  return *(_QWORD *)a1;
}

uint64_t ComputedAccessorsPtr.nonmutatingSetter<A, B>()(uint64_t a1)
{
  if (((a1 + 8) & 7) != 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x1B8uLL, 0);
  return *(_QWORD *)(a1 + 8);
}

uint64_t ComputedArgumentWitnessesPtr.equals.getter(uint64_t a1)
{
  if (((a1 + 16) & 7) != 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x1B8uLL, 0);
  return *(_QWORD *)(a1 + 16);
}

uint64_t ComputedArgumentWitnessesPtr.hash.getter(uint64_t a1)
{
  if (((a1 + 24) & 7) != 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x1B8uLL, 0);
  return *(_QWORD *)(a1 + 24);
}

void KeyPathComponent.hash(into:)()
{
  __int128 *v0;
  _QWORD v1[3];

  outlined init with take of KeyPathComponent(v0, (uint64_t)v1);
  __asm { BR              X10 }
}

void sub_18140AF50()
{
  Swift::UInt v0;

  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v0);
}

void sub_18140AFE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (v17 == 0xA000000000000000 && (v16 | a12 | v15 | v12 | v14 | v13) == 0)
  {
    Hasher._combine(_:)(2uLL);
  }
  else if (v17 == 0xA000000000000000 && v15 == 1 && !(v16 | a12 | v12 | v14 | v13))
  {
    Hasher._combine(_:)(3uLL);
  }
  else
  {
    Hasher._combine(_:)(4uLL);
  }
  JUMPOUT(0x18140AFC4);
}

void appendHashFromArgument #1 (_:) in KeyPathComponent.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v7)(uint64_t, uint64_t);
  Swift::UInt v8;

  if (a3)
  {
    v7 = (uint64_t (*)(uint64_t, uint64_t))ComputedArgumentWitnessesPtr.hash.getter(a3);
    if (a1)
    {
      if (!__OFSUB__(a2 - a1, a4))
      {
        v8 = v7(a1, a2 - a1 - a4);
        if (v8)
          Hasher._combine(_:)(v8);
        return;
      }
      __break(1u);
    }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance KeyPathComponent()
{
  __int128 *v0;
  _BYTE v2[56];

  outlined init with take of KeyPathComponent(v0, (uint64_t)v2);
  KeyPathComponent.hash(into:)();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance KeyPathComponent()
{
  __int128 *v0;
  _BYTE v1[56];

  outlined init with take of KeyPathComponent(v0, (uint64_t)v1);
  KeyPathComponent.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance KeyPathComponent()
{
  __int128 *v0;
  _BYTE v2[56];

  outlined init with take of KeyPathComponent(v0, (uint64_t)v2);
  KeyPathComponent.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance KeyPathComponent(__int128 *a1, __int128 *a2)
{
  char v3;
  __int128 v5[3];
  _BYTE v6[56];

  outlined init with take of KeyPathComponent(a1, (uint64_t)v5);
  outlined init with take of KeyPathComponent(a2, (uint64_t)v6);
  specialized static KeyPathComponent.== infix(_:_:)(v5);
  return v3 & 1;
}

void ClassHolder.__deallocating_deinit()
{
  id *v0;

  swift_endAccess((swift::runtime::SwiftTLSContext *)(v0 + 4));
  swift_unknownObjectRelease(v0[2]);
  swift_unknownObjectRelease(v0[3]);
  swift_deallocClassInstance((uint64_t)v0);
}

void MutatingWritebackBuffer.__deallocating_deinit(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void (*v6)(char *, _QWORD, _QWORD, _QWORD);
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t);
  uint64_t v10;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(void (**)(char *, _QWORD, _QWORD, _QWORD))(v1 + 32);
  v8 = v1 + *(_QWORD *)(v7 + 136);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v8, v2);
  v6(v5, *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
  v9 = *(void (**)(char *, uint64_t))(v3 + 8);
  v9(v5, v2);
  swift_unknownObjectRelease(*(id *)(v1 + 16));
  v9((char *)v8, v2);
  swift_deallocClassInstance(v1);
}

void NonmutatingWritebackBuffer.__deallocating_deinit(uint64_t a1)
{
  id *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void (*v7)(char *, char *, _QWORD, _QWORD);
  char *v8;
  char *v9;
  void (*v10)(char *, uint64_t);
  uint64_t v11;

  v2 = *v1;
  v3 = *((_QWORD *)*v1 + 11);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(void (**)(char *, char *, _QWORD, _QWORD))((char *)v1 + v2[14]);
  v8 = (char *)v1 + v2[17];
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v8, v3);
  v9 = (char *)v1 + *((_QWORD *)*v1 + 13);
  v7(v6, v9, *(id *)((char *)v1 + *((_QWORD *)*v1 + 15)), *(id *)((char *)v1 + *((_QWORD *)*v1 + 16)));
  v10 = *(void (**)(char *, uint64_t))(v4 + 8);
  v10(v6, v3);
  swift_unknownObjectRelease(v1[2]);
  (*(void (**)(char *))(*(_QWORD *)(v2[10] - 8) + 8))(v9);
  v10(v8, v3);
  swift_deallocClassInstance((uint64_t)v1);
}

uint64_t static UInt32.| infix(_:_:)(unsigned int a1, int a2)
{
  return a2 | a1;
}

uint64_t RawKeyPathComponent.Header.patternComponentBodySize.getter(unsigned int a1)
{
  uint64_t result;
  uint64_t v2;

  switch(HIBYTE(a1) & 0x7F)
  {
    case 0:
      result = 4 * (a1 & 0xFFFFFF) + 4;
      break;
    case 1:
    case 3:
      if ((~a1 & 0x7FFFFE) != 0)
        result = 4 * ((a1 & 0x7FFFFF) == 8388605);
      else
        result = 4;
      break;
    case 2:
      v2 = 12;
      if ((a1 & 0x400000) == 0)
        v2 = 8;
      if ((a1 & 0x80000) != 0)
        result = v2 + 12;
      else
        result = v2;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t RawKeyPathComponent.Header.propertyDescriptorBodySize.getter(unsigned int a1)
{
  uint64_t result;

  if (!a1)
    return 0;
  switch(HIBYTE(a1) & 0x7F)
  {
    case 0:
      result = 4 * (a1 & 0xFFFFFF) + 4;
      break;
    case 1:
    case 3:
      if ((~a1 & 0x7FFFFE) != 0)
        result = 4 * ((a1 & 0x7FFFFF) == 8388605);
      else
        result = 4;
      break;
    case 2:
      if ((a1 & 0x400000) != 0)
        result = 12;
      else
        result = 8;
      break;
    default:
      return 0;
  }
  return result;
}

uint64_t RawKeyPathComponent.bodySize.getter(unsigned int a1, uint64_t a2)
{
  int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  v3 = HIBYTE(a1) & 0x7F;
  if (v3 == 1)
    return 4 * ((~a1 & 0x7FFFFF) == 0);
  if (v3 != 2)
  {
    if (v3 == 3)
      return 4 * ((~a1 & 0x7FFFFF) == 0);
    return 0;
  }
  if ((a1 & 0x400000) != 0)
    result = 28;
  else
    result = 20;
  if ((a1 & 0x80000) != 0)
  {
    v5 = result + 16;
    v6 = RawKeyPathComponent._computedArgumentSize.getter(a1, a2);
    v7 = __OFADD__(v5, v6);
    result = v5 + v6;
    if (v7)
    {
      __break(1u);
      return result;
    }
    if ((a1 & 0x10) != 0)
    {
      v7 = __OFADD__(result, 8);
      result += 8;
      if (v7)
      {
        __break(1u);
        return 0;
      }
    }
  }
  return result;
}

uint64_t RawKeyPathComponent._computedArgumentSize.getter(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (!a2)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
  v2 = 24;
  if ((a1 & 0x400000) == 0)
    v2 = 16;
  v3 = a2 + v2 + 4;
  if ((v3 & 7) != 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x1B8uLL, 0);
  return *(_QWORD *)v3;
}

uint64_t specialized UnsafeRawBufferPointer.load<A>(fromByteOffset:as:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a1 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer.load with negative offset", 48, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x55DuLL, 0);
  v3 = a1 + 4;
  if (__OFADD__(a1, 4))
  {
    __break(1u);
LABEL_9:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x1B8uLL, 0);
  }
  if (!a2)
  {
    if (v3 < 1)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x560uLL, 0);
LABEL_12:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer.load out of bounds", 41, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x55EuLL, 0);
  }
  if (a3 - a2 < v3)
    goto LABEL_12;
  if (((a2 + a1) & 3) != 0)
    goto LABEL_9;
  return *(unsigned int *)(a2 + a1);
}

{
  uint64_t v3;

  if (a1 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer.load with negative offset", 48, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x55DuLL, 0);
  v3 = a1 + 8;
  if (__OFADD__(a1, 8))
  {
    __break(1u);
LABEL_9:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x1B8uLL, 0);
  }
  if (!a2)
  {
    if (v3 < 1)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x560uLL, 0);
LABEL_12:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer.load out of bounds", 41, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x55EuLL, 0);
  }
  if (a3 - a2 < v3)
    goto LABEL_12;
  if (((a2 + a1) & 7) != 0)
    goto LABEL_9;
  return *(_QWORD *)(a2 + a1);
}

uint64_t UnsafeRawBufferPointer.load<A>(fromByteOffset:as:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  if (a1 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer.load with negative offset", 48, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x55DuLL, 0);
  v5 = *(_QWORD *)(a4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = __OFADD__(a1, v6);
  v8 = a1 + v6;
  if (v7)
  {
    __break(1u);
LABEL_9:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x1B8uLL, 0);
  }
  if (!a2)
  {
    if (v8 < 1)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x560uLL, 0);
LABEL_12:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer.load out of bounds", 41, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x55EuLL, 0);
  }
  if (a3 - a2 < v8)
    goto LABEL_12;
  if ((*(_BYTE *)(v5 + 80) & (a2 + a1)) != 0)
    goto LABEL_9;
  return (*(uint64_t (**)(uint64_t))(v5 + 16))(a5);
}

uint64_t RawKeyPathComponent._computedArgumentHeaderPointer.getter(int a1, uint64_t a2)
{
  uint64_t v2;

  if (!a2)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
  v2 = 24;
  if ((a1 & 0x400000) == 0)
    v2 = 16;
  return a2 + v2 + 4;
}

uint64_t RawKeyPathComponent._computedArguments.getter(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (!a2)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
  v2 = 24;
  if ((a1 & 0x400000) != 0)
    v3 = 24;
  else
    v3 = 16;
  v4 = a2 + v3;
  if ((a1 & 0x10) == 0)
    v2 = 16;
  return v4 + v2 + 4;
}

Swift::Void __swiftcall RawKeyPathComponent.clone(into:endOfReferencePrefix:)(Swift::UnsafeMutableRawBufferPointer *into, Swift::Bool endOfReferencePrefix)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  char *rawValue;
  _BYTE *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  void (*v27)(uint64_t, char *, uint64_t);
  size_t *v28;

  v5 = v4;
  v6 = v3;
  v7 = v2;
  if (endOfReferencePrefix)
    v9 = 0x80000000;
  else
    v9 = 0;
  rawValue = (char *)into->_position.value._rawValue;
  v11 = into->_end.value._rawValue;
  specialized _swift_se0349_UnsafeMutableRawBufferPointer_storeBytes(v9 & 0x80000000 | v2 & 0x7FFFFFFF, 0, (uint64_t)into->_position.value._rawValue, (uint64_t)v11);
  v12 = HIBYTE(v7) & 0x7F;
  if (v12 == 1)
  {
LABEL_7:
    if ((~v7 & 0x7FFFFF) == 0)
    {
      v13 = specialized UnsafeRawBufferPointer.load<A>(fromByteOffset:as:)(0, v6, v5);
      specialized _swift_se0349_UnsafeMutableRawBufferPointer_storeBytes(v13, 4, (uint64_t)rawValue, (uint64_t)v11);
      v14 = 8;
      goto LABEL_10;
    }
LABEL_9:
    v14 = 4;
LABEL_10:
    if (rawValue)
      goto LABEL_11;
LABEL_46:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
  }
  if (v12 != 2)
  {
    if (v12 != 3)
      goto LABEL_9;
    goto LABEL_7;
  }
  v15 = specialized UnsafeRawBufferPointer.load<A>(fromByteOffset:as:)(4, v6, v5);
  specialized _swift_se0349_UnsafeMutableRawBufferPointer_storeBytes(v15, 8, (uint64_t)rawValue, (uint64_t)v11);
  if (!v6 || !rawValue)
    goto LABEL_46;
  v16 = (_QWORD *)(v6 + 12);
  if ((char *)(v6 + 12) != rawValue + 16)
  {
    if ((v16 & 7) != 0)
      goto LABEL_43;
    *((_QWORD *)rawValue + 2) = *v16;
  }
  if ((v7 & 0x400000) != 0)
  {
    v17 = (_QWORD *)(v6 + 20);
    if ((char *)(v6 + 20) != rawValue + 24)
    {
      if ((v17 & 7) != 0)
        goto LABEL_43;
      *((_QWORD *)rawValue + 3) = *v17;
    }
    v14 = 32;
    if ((v7 & 0x80000) == 0)
      goto LABEL_11;
  }
  else
  {
    v14 = 24;
    if ((v7 & 0x80000) == 0)
      goto LABEL_11;
  }
  v18 = RawKeyPathComponent._computedArguments.getter(v7, v6);
  v19 = RawKeyPathComponent._computedArgumentSize.getter(v7, v6);
  specialized _swift_se0349_UnsafeMutableRawBufferPointer_storeBytes(v19, v14, (uint64_t)rawValue, (uint64_t)v11);
  v20 = (uint64_t *)(RawKeyPathComponent._computedArgumentHeaderPointer.getter(v7, v6) + 8);
  if ((v20 & 7) != 0)
    goto LABEL_43;
  specialized _swift_se0349_UnsafeMutableRawBufferPointer_storeBytes(*v20, v14 + 8, (uint64_t)rawValue, (uint64_t)v11);
  v21 = v14 + 16;
  if ((v7 & 0x10) != 0)
  {
    v23 = (uint64_t *)(RawKeyPathComponent._computedArguments.getter(v7, v6) - 8);
    if ((v23 & 7) != 0)
      goto LABEL_43;
    specialized _swift_se0349_UnsafeMutableRawBufferPointer_storeBytes(*v23, v14 + 16, (uint64_t)rawValue, (uint64_t)v11);
    v24 = RawKeyPathComponent._computedArguments.getter(v7, v6);
    if (((v24 - 8) & 7) != 0)
      goto LABEL_43;
    v21 = v14 + 24;
    v22 = *(_QWORD *)(v24 - 8);
  }
  else
  {
    v22 = 0;
  }
  v25 = v19 - v22;
  if (__OFSUB__(v19, v22))
  {
    __break(1u);
LABEL_45:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
  }
  v26 = (uint64_t *)(RawKeyPathComponent._computedArgumentHeaderPointer.getter(v7, v6) + 8);
  if ((v26 & 7) != 0)
    goto LABEL_43;
  v27 = (void (*)(uint64_t, char *, uint64_t))ComputedAccessorsPtr.nonmutatingSetter<A, B>()(*v26);
  v27(v18, &rawValue[v21], v25);
  if ((v7 & 0x10) == 0)
    goto LABEL_38;
  v28 = (size_t *)(RawKeyPathComponent._computedArguments.getter(v7, v6) - 8);
  if ((v28 & 7) != 0)
LABEL_43:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x1B8uLL, 0);
  if ((*v28 & 0x8000000000000000) != 0)
    goto LABEL_45;
  memcpy(&rawValue[v21 + v25], (const void *)(v18 + v25), *v28);
LABEL_38:
  v14 = v21 + v19;
  if (__OFADD__(v21, v19))
  {
    __break(1u);
    goto LABEL_41;
  }
LABEL_11:
  if (__OFSUB__(v11 - rawValue, v14))
  {
LABEL_41:
    __break(1u);
LABEL_42:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableRawBufferPointer with negative count", 49, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x68uLL, 0);
  }
  if (v11 - rawValue - v14 < 0)
    goto LABEL_42;
  into->_position.value._rawValue = &rawValue[v14];
  into->_end.value._rawValue = v11;
}

uint64_t specialized _swift_se0349_UnsafeMutableRawBufferPointer_storeBytes(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  if (a2 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableRawBufferPointer.storeBytes with negative offset", 61, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x1BCuLL, 0);
  v4 = a2 + 8;
  if (__OFADD__(a2, 8))
    __break(1u);
  if (!a3)
  {
    if (v4 < 1)
      goto LABEL_5;
LABEL_7:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableRawBufferPointer.storeBytes out of bounds", 54, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x1BDuLL, 0);
  }
  if (a4 - a3 < v4)
    goto LABEL_7;
LABEL_5:
  *(_QWORD *)(a3 + a2) = result;
  return result;
}

{
  uint64_t v4;

  if (a2 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableRawBufferPointer.storeBytes with negative offset", 61, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x1BCuLL, 0);
  v4 = a2 + 4;
  if (__OFADD__(a2, 4))
    __break(1u);
  if (!a3)
  {
    if (v4 < 1)
      goto LABEL_5;
LABEL_7:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableRawBufferPointer.storeBytes out of bounds", 54, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x1BDuLL, 0);
  }
  if (a4 - a3 < v4)
    goto LABEL_7;
LABEL_5:
  *(_DWORD *)(a3 + a2) = result;
  return result;
}

{
  uint64_t v4;

  if (a2 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableRawBufferPointer.storeBytes with negative offset", 61, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x1BCuLL, 0);
  v4 = a2 + 8;
  if (!__OFADD__(a2, 8))
  {
    if (a3)
    {
      if (a4 - a3 >= v4)
      {
LABEL_5:
        *(_QWORD *)(a3 + a2) = result;
        return result;
      }
    }
    else if (v4 < 1)
    {
      goto LABEL_5;
    }
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableRawBufferPointer.storeBytes out of bounds", 54, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x1BDuLL, 0);
  }
  __break(1u);
  return result;
}

uint64_t specialized _pop<A>(from:as:count:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  v2 = *a1;
  if (!*a1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
  if (a2 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  v3 = a1[1] - v2;
  v4 = __OFSUB__(v3, a2);
  v5 = v3 - a2;
  if (v4)
  {
    __break(1u);
LABEL_8:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer with negative count", 42, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x485uLL, 0);
  }
  if (v5 < 0)
    goto LABEL_8;
  *a1 = v2 + a2;
  a1[1] = v2 + a2 + v5;
  return v2;
}

{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = _ss12MemoryLayoutOsRi_zrlE26_roundingUpBaseToAlignmentyS2WFZypXp_Tgm5(*a1, a1[1]);
  if ((unint64_t)(a2 - 0x1000000000000000) >> 61 != 7)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (!result)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
  if (a2 < 0)
LABEL_8:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  v6 = v5 - result - 8 * a2;
  if (__OFSUB__(v5 - result, 8 * a2))
  {
    __break(1u);
LABEL_10:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer with negative count", 42, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x485uLL, 0);
  }
  if (v6 < 0)
    goto LABEL_10;
  v7 = result + 8 * a2;
  *a1 = v7;
  a1[1] = v7 + v6;
  return result;
}

{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = _ss12MemoryLayoutOsRi_zrlE26_roundingUpBaseToAlignmentyS2WFZs19RawKeyPathComponentV6HeaderV_Tgm5(*a1, a1[1]);
  if ((unint64_t)(a2 - 0x2000000000000000) >> 62 != 3)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (!result)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
  if (a2 < 0)
LABEL_8:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  v6 = v5 - result - 4 * a2;
  if (__OFSUB__(v5 - result, 4 * a2))
  {
    __break(1u);
LABEL_10:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer with negative count", 42, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x485uLL, 0);
  }
  if (v6 < 0)
    goto LABEL_10;
  v7 = result + 4 * a2;
  *a1 = v7;
  a1[1] = v7 + v6;
  return result;
}

{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = _ss12MemoryLayoutOsRi_zrlE26_roundingUpBaseToAlignmentyS2WFZs5Int32V_Tgm5Tm(*a1, a1[1]);
  if ((unint64_t)(a2 - 0x2000000000000000) >> 62 != 3)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (!result)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
  if (a2 < 0)
LABEL_8:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  v6 = v5 - result - 4 * a2;
  if (__OFSUB__(v5 - result, 4 * a2))
  {
    __break(1u);
LABEL_10:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer with negative count", 42, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x485uLL, 0);
  }
  if (v6 < 0)
    goto LABEL_10;
  v7 = result + 4 * a2;
  *a1 = v7;
  a1[1] = v7 + v6;
  return result;
}

uint64_t _ss12MemoryLayoutOsRi_zrlE26_roundingUpBaseToAlignmentyS2WFZypXp_Tgm5(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v2 = result;
  if ((result & 7) == 0)
    return result;
  v3 = -(int)result & 7;
  result += v3;
  if (__OFADD__(v2, v3))
  {
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer with negative count", 42, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x485uLL, 0);
  }
  if (v2)
    v4 = a2 - v2;
  else
    v4 = 0;
  v5 = __OFSUB__(v4, v3);
  v6 = v4 - v3;
  if (v5)
    goto LABEL_13;
  if (v6 < 0)
    goto LABEL_14;
  if (v6)
  {
    if (!result)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer has a nil start and nonzero count", 56, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x486uLL, 0);
  }
  return result;
}

uint64_t _ss12MemoryLayoutOsRi_zrlE26_roundingUpBaseToAlignmentyS2WFZs19RawKeyPathComponentV6HeaderV_Tgm5(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  if (!result)
    return result;
  v2 = result;
  if ((result & 3) == 0)
    return result;
  v3 = -(int)result & 3;
  result += v3;
  if (__OFADD__(v2, v3))
  {
    __break(1u);
    goto LABEL_11;
  }
  v4 = a2 - v2;
  v5 = __OFSUB__(v4, v3);
  v6 = v4 - v3;
  if (v5)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer with negative count", 42, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x485uLL, 0);
  }
  if (v6 < 0)
    goto LABEL_12;
  if (v6)
  {
    if (!result)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer has a nil start and nonzero count", 56, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x486uLL, 0);
  }
  return result;
}

uint64_t _ss12MemoryLayoutOsRi_zrlE26_roundingUpBaseToAlignmentyS2WFZs5Int32V_Tgm5Tm(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  if (result && (result & 3) != 0)
  {
    v2 = -(int)result & 3;
    if (__OFADD__(result, v2))
    {
      __break(1u);
    }
    else
    {
      v3 = __OFSUB__(a2 - result, v2);
      v4 = a2 - result - v2;
      if (!v3)
        return specialized UnsafeRawBufferPointer.init<A>(_:)(result + v2, v4);
    }
    __break(1u);
  }
  return result;
}

Swift::UnsafeMutableRawBufferPointer __swiftcall UnsafeMutableRawBufferPointer.init(mutating:)(Swift::UnsafeMutableRawBufferPointer mutating)
{
  if (!mutating._position.value._rawValue)
    mutating._end.value._rawValue = 0;
  return mutating;
}

Swift::UnsafeMutableRawBufferPointer __swiftcall KeyPathBuffer.Builder.pushRaw(size:alignment:)(Swift::Int size, Swift::Int alignment)
{
  unint64_t *v2;
  unint64_t v3;
  Swift::Int v4;
  Swift::Int v5;
  char *v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  Swift::UnsafeMutableRawBufferPointer result;

  v3 = *v2;
  if (!*v2)
LABEL_17:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
  if (__OFSUB__(alignment, 1))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v4 = v3 & (alignment - 1);
  if (v4)
  {
    v5 = alignment - v4;
    if (__OFSUB__(alignment, v4))
    {
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
    v6 = (char *)(v3 + v5);
    if (size < 0)
LABEL_12:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableRawBufferPointer with negative count", 49, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x68uLL, 0);
  }
  else
  {
    v5 = 0;
    v6 = (char *)*v2;
    if (size < 0)
      goto LABEL_12;
  }
  v7 = v2[1] - v3;
  v8 = __OFSUB__(v7, size);
  v9 = v7 - size;
  if (v8)
    goto LABEL_14;
  v8 = __OFSUB__(v9, v5);
  v10 = v9 - v5;
  if (v8)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if ((v10 & 0x8000000000000000) != 0)
    goto LABEL_12;
  v11 = &v6[size];
  *v2 = (unint64_t)&v6[size];
  v2[1] = (unint64_t)&v6[size + v10];
  v12 = v6;
  result._end.value._rawValue = v11;
  result._position.value._rawValue = v12;
  return result;
}

Swift::UnsafeMutableRawPointer __swiftcall UnsafeMutableRawPointer.advanced(by:)(Swift::Int by)
{
  uint64_t v1;

  return (Swift::UnsafeMutableRawPointer)(v1 + by);
}

uint64_t swift_getAtPartialKeyPath@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *boxed_opaque_existential_0Tm;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_QWORD *)a2;
  (*(void (**)(void))(*(_QWORD *)a2 + 120))();
  v8 = v7;
  v10 = type metadata accessor for KeyPath(0, *(_QWORD *)(v6 + 136), v7, v9);
  if (!swift_dynamicCastClass(a2, v10))
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  a3[3] = v8;
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(a3);
  return KeyPath._projectReadOnly(from:)(a1, v12, v13, (uint64_t)boxed_opaque_existential_0Tm);
}

uint64_t swift_getAtKeyPath@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return KeyPath._projectReadOnly(from:)(a1, a2, a3, a4);
}

double swift_getAtAnyKeyPath@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, Class *a3@<X2>, uint64_t a4@<X8>)
{
  Class *v8;
  uint64_t v9;

  v8 = (Class *)(*(uint64_t (**)(void))(*(_QWORD *)a2 + 120))();
  return openRoot #1 <A><A1>(_:) in _getAtAnyKeyPath<A>(root:keyPath:)(a1, a2, v9, a3, v8, a4);
}

double openRoot #1 <A><A1>(_:) in _getAtAnyKeyPath<A>(root:keyPath:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, Class *a4@<X3>, Class *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  void (*v23)(char *, uint64_t, uint64_t, Class *);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *boxed_opaque_existential_0Tm;
  uint64_t v28;
  uint64_t v29;
  double result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v32 = a3;
  v33 = a2;
  v34 = *MEMORY[0x1E0C80C00];
  v10 = type metadata accessor for Optional(0, (uint64_t)a5, a3, (uint64_t)a4);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v31 - v13;
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (uint64_t *)((char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = (uint64_t)*(a5 - 1);
  MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v31 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *, uint64_t, Class *))(v21 + 16))(v17, a1, a4);
  v22 = swift_dynamicCast(v14, v17, a4, a5, 6uLL);
  v23 = *(void (**)(char *, uint64_t, uint64_t, Class *))(v18 + 56);
  if (v22)
  {
    v23(v14, 0, 1, a5);
    (*(void (**)(char *, char *, Class *))(v18 + 32))(v20, v14, a5);
    v24 = v32;
    v26 = type metadata accessor for KeyPath(0, (uint64_t)a5, v32, v25);
    if (!swift_dynamicCastClass(v33, v26))
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
    *(_QWORD *)(a6 + 24) = v24;
    boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm((_QWORD *)a6);
    KeyPath._projectReadOnly(from:)((uint64_t)v20, v28, v29, (uint64_t)boxed_opaque_existential_0Tm);
    (*(void (**)(char *, Class *))(v18 + 8))(v20, a5);
  }
  else
  {
    v23(v14, 1, 1, a5);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    result = 0.0;
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
  }
  return result;
}

char *_swift_modifyAtWritableKeyPath_impl(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned __int8 (**)(void))(*(_QWORD *)a2 + 160))() == 2)
    return ReferenceWritableKeyPath._projectMutableAddress(from:)(a1);
  else
    return (char *)WritableKeyPath._projectMutableAddress(from:)(a1);
}

char *_swift_modifyAtReferenceWritableKeyPath_impl(uint64_t a1)
{
  return ReferenceWritableKeyPath._projectMutableAddress(from:)(a1);
}

void swift_setAtWritableKeyPath(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v5 = *a2;
  if ((*(unsigned __int8 (**)(void))(*a2 + 160))() == 2)
    v6 = (uint64_t)ReferenceWritableKeyPath._projectMutableAddress(from:)(a1);
  else
    v6 = WritableKeyPath._projectMutableAddress(from:)(a1);
  v8 = v7;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 + 176) - 8) + 40))(v6, a3);
  swift_unknownObjectRelease(v8);
}

void swift_setAtReferenceWritableKeyPath(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  void *v6;
  void *v7;

  v4 = *a2;
  v5 = ReferenceWritableKeyPath._projectMutableAddress(from:)(a1);
  v7 = v6;
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v4 + 200) - 8) + 40))(v5, a3);
  swift_unknownObjectRelease(v7);
}

uint64_t _AppendKeyPath<>.appending(path:)(unint64_t *a1)
{
  unint64_t *v1;
  unint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v2 = v1;
  v4 = (*(uint64_t (**)(void))(*v1 + 120))();
  v6 = v5;
  if (v5 != (*(uint64_t (**)(void))(*a1 + 120))())
    return 0;
  v10 = v7;
  v11 = type metadata accessor for KeyPath(0, v4, v6, v8);
  if (!swift_dynamicCastClass((uint64_t)v2, v11)
    || (v13 = type metadata accessor for KeyPath(0, v6, v10, v12), !swift_dynamicCastClass((uint64_t)a1, v13))
    || (v15 = type metadata accessor for KeyPath(0, v4, v10, v14),
        v9 = _appendingKeyPaths<A, B, C, D>(root:leaf:)(v2, a1, v15),
        v18 = v9,
        _processOffsetForAppendedKeyPath(appendedKeyPath:root:leaf:)((uint64_t)&v18, (uint64_t)v2, (uint64_t)a1),
        v16 = type metadata accessor for AnyKeyPath(),
        !swift_dynamicCastClass(v9, v16)))
  {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  }
  return v9;
}

uint64_t _tryToAppendKeyPaths<A>(root:leaf:)(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = (*(uint64_t (**)(unint64_t *))(*a1 + 120))(a1);
  v8 = v7;
  if (v7 == (*(uint64_t (**)(void))(*a2 + 120))())
    return open3 #1 <A><A1><A2><A3>(_:) in open2 #1 <A><A1><A2>(_:) in open #1 <A><A1>(_:) in _tryToAppendKeyPaths<A>(root:leaf:)(a1, a2, a3, v6, v8, v9);
  else
    return 0;
}

uint64_t _AppendKeyPath.appending<A>(path:)(unint64_t *a1)
{
  unint64_t *v1;
  unint64_t *v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v2 = v1;
  v4 = *v1;
  v5 = (*(uint64_t (**)(void))(*v1 + 120))();
  v7 = v6;
  if (v6 != (*(uint64_t (**)(void))(*a1 + 120))())
    return 0;
  v12 = v8;
  v13 = type metadata accessor for PartialKeyPath(0, *(_QWORD *)(v4 + 136), v9, v10);
  return open3 #1 <A><A1><A2><A3>(_:) in open2 #1 <A><A1><A2>(_:) in open #1 <A><A1>(_:) in _tryToAppendKeyPaths<A>(root:leaf:)(v2, a1, v13, v5, v7, v12);
}

uint64_t _AppendKeyPath.appending<A, B, C>(path:)(unint64_t *a1)
{
  unint64_t *v1;
  unint64_t *v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v2 = v1;
  v4 = *v1;
  v5 = *a1;
  v6 = (*(uint64_t (**)(void))(*v1 + 120))();
  v8 = v7;
  if (v7 != (*(uint64_t (**)(void))(*a1 + 120))())
    return 0;
  v12 = v9;
  v13 = type metadata accessor for KeyPath(0, *(_QWORD *)(v4 + 136), *(_QWORD *)(v5 + 152), v10);
  return open3 #1 <A><A1><A2><A3>(_:) in open2 #1 <A><A1><A2>(_:) in open #1 <A><A1>(_:) in _tryToAppendKeyPaths<A>(root:leaf:)(v2, a1, v13, v6, v8, v12);
}

{
  unint64_t *v1;
  unint64_t *v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v2 = v1;
  v4 = *v1;
  v5 = *a1;
  v6 = (*(uint64_t (**)(void))(*v1 + 120))();
  v8 = v7;
  if (v7 != (*(uint64_t (**)(void))(*a1 + 120))())
    return 0;
  v12 = v9;
  v13 = type metadata accessor for KeyPath(0, v6, v8, v10);
  if (!swift_dynamicCastClass((uint64_t)v2, v13)
    || (v15 = type metadata accessor for KeyPath(0, v8, v12, v14), !swift_dynamicCastClass((uint64_t)a1, v15))
    || (v17 = type metadata accessor for KeyPath(0, v6, v12, v16),
        v11 = _appendingKeyPaths<A, B, C, D>(root:leaf:)(v2, a1, v17),
        v21 = v11,
        _processOffsetForAppendedKeyPath(appendedKeyPath:root:leaf:)((uint64_t)&v21, (uint64_t)v2, (uint64_t)a1),
        v19 = type metadata accessor for ReferenceWritableKeyPath(0, *(_QWORD *)(v4 + 136), *(_QWORD *)(v5 + 200), v18), !swift_dynamicCastClass(v11, v19)))
  {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  }
  return v11;
}

uint64_t _AppendKeyPath.appending<A, B, C>(path:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t *v4;
  uint64_t v6;

  v6 = type metadata accessor for KeyPath(0, *(_QWORD *)(a2 + 144), *(_QWORD *)(*a1 + 152), a4);
  return _appendingKeyPaths<A, B, C, D>(root:leaf:)(v4, a1, v6);
}

{
  unint64_t *v4;
  uint64_t v6;

  v6 = type metadata accessor for ReferenceWritableKeyPath(0, *(_QWORD *)(*v4 + 144), *(_QWORD *)(*a1 + 200), a4);
  return _appendingKeyPaths<A, B, C, D>(root:leaf:)(v4, a1, v6);
}

{
  unint64_t *v4;
  uint64_t v6;

  v6 = type metadata accessor for WritableKeyPath(0, *(_QWORD *)(*v4 + 168), *(_QWORD *)(*a1 + 176), a4);
  return _appendingKeyPaths<A, B, C, D>(root:leaf:)(v4, a1, v6);
}

{
  unint64_t *v4;
  uint64_t v6;

  v6 = type metadata accessor for ReferenceWritableKeyPath(0, *(_QWORD *)(*v4 + 168), *(_QWORD *)(*a1 + 200), a4);
  return _appendingKeyPaths<A, B, C, D>(root:leaf:)(v4, a1, v6);
}

{
  unint64_t *v4;
  uint64_t v6;

  v6 = type metadata accessor for ReferenceWritableKeyPath(0, *(_QWORD *)(*v4 + 192), *(_QWORD *)(*a1 + 176), a4);
  return _appendingKeyPaths<A, B, C, D>(root:leaf:)(v4, a1, v6);
}

uint64_t _appendingKeyPaths<A, B, C, D>(root:leaf:)(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  char v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  size_t v33;
  size_t v34;
  size_t v35;
  size_t v36;
  size_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD v49[2];
  char v50;
  char v51;

  v6 = *a2;
  v7 = (*(uint64_t (**)(unint64_t *))(*a1 + 160))(a1);
  v9 = (*(unsigned __int8 (**)(void))(v6 + 160))();
  if (!v9)
    goto LABEL_6;
  if (v9 != 1)
  {
LABEL_7:
    type metadata accessor for ReferenceWritableKeyPath(0, *(_QWORD *)(a3 + 144), *(_QWORD *)(a3 + 152), v8);
    goto LABEL_8;
  }
  if (!v7)
  {
LABEL_6:
    type metadata accessor for KeyPath(0, *(_QWORD *)(a3 + 144), *(_QWORD *)(a3 + 152), v8);
    goto LABEL_8;
  }
  if (v7 != 1)
    goto LABEL_7;
  type metadata accessor for WritableKeyPath(0, *(_QWORD *)(a3 + 144), *(_QWORD *)(a3 + 152), v8);
LABEL_8:
  v10 = specialized KeyPathBuffer.init(base:)((uint64_t)(a1 + 3));
  v12 = v11;
  v49[0] = v10;
  v49[1] = v11;
  v50 = v13 & 1;
  v51 = v14 & 1;
  v15 = specialized KeyPathBuffer.init(base:)((uint64_t)(a2 + 3));
  if (v15)
  {
    v17 = v16 - v15;
    if (v16 != v15)
    {
      if (!v10 || (v22 = v12 - v10, v12 == v10))
      {
        if (swift_dynamicCastClass((uint64_t)a2, a3))
        {
          swift_retain(a2, v23, v24, v25);
          v21 = a2;
          goto LABEL_44;
        }
LABEL_60:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
      }
      v26 = a1[2];
      if (v26)
      {
        v27 = -v26;
        if (__OFSUB__(0, v26))
        {
LABEL_50:
          __break(1u);
          goto LABEL_51;
        }
        v28 = __OFSUB__(v27, 1);
        v29 = v27 - 1;
        if (v28)
        {
LABEL_51:
          __break(1u);
          goto LABEL_52;
        }
        if ((v29 & 0x8000000000000000) == 0)
          goto LABEL_30;
      }
      v30 = a2[2];
      if (!v30)
        goto LABEL_30;
      v31 = -v30;
      if (__OFSUB__(0, v30))
      {
        __break(1u);
      }
      else
      {
        v32 = v31 - 1;
        if (!__OFSUB__(v31, 1))
        {
          v33 = 0;
          if (!v26 || (v32 & 0x8000000000000000) == 0)
            goto LABEL_31;
          v34 = _swift_stdlib_strlen((const char *)v26);
          v35 = _swift_stdlib_strlen((const char *)v30);
          v36 = v34 + 1;
          if (__OFADD__(v34, 1))
          {
LABEL_58:
            __break(1u);
            goto LABEL_59;
          }
          v28 = __OFADD__(v36, v35);
          v37 = v36 + v35;
          if (v28)
          {
LABEL_59:
            __break(1u);
            goto LABEL_60;
          }
          v28 = __OFADD__(v37, 1);
          v33 = v37 + 1;
          if (!v28)
          {
LABEL_31:
            if (__OFADD__(v22, 7))
            {
              __break(1u);
            }
            else
            {
              v38 = (v22 + 7) & 0xFFFFFFFFFFFFFFF8;
              v28 = __OFADD__(v38, v17);
              v39 = v38 + v17;
              if (!v28)
              {
                v40 = v39 + 16;
                if (!__OFADD__(v39, 16))
                {
                  v41 = v40 + v33;
                  if (!__OFADD__(v40, v33))
                  {
                    v28 = __OFADD__(v41, 3);
                    v42 = v41 + 3;
                    if (!v28)
                    {
                      v43 = MEMORY[0x1E0C80A78](v42 & 0xFFFFFFFFFFFFFFFCLL);
                      v21 = static AnyKeyPath._create(capacityInBytes:initializedBy:)(v43, (void (*)(_QWORD *, char *))partial apply for closure #1 in closure #1 in closure #1 in _appendingKeyPaths<A, B, C, D>(root:leaf:));
                      v44 = a1[2];
                      if (!v44)
                        goto LABEL_40;
                      v45 = -(uint64_t)v44;
                      if (!__OFSUB__(0, v44))
                      {
                        v28 = __OFSUB__(v45, 1);
                        v46 = v45 - 1;
                        if (!v28)
                        {
                          if ((v46 & 0x8000000000000000) == 0)
                            goto LABEL_43;
LABEL_40:
                          v47 = a2[2];
                          if (!v47)
                            goto LABEL_43;
                          if (!__OFSUB__(0, v47))
                          {
                            if (!__OFSUB__(-(uint64_t)v47, 1))
                            {
LABEL_43:
                              if (swift_dynamicCastClass((uint64_t)v21, a3))
                                goto LABEL_44;
                              goto LABEL_60;
                            }
                            goto LABEL_57;
                          }
LABEL_56:
                          __break(1u);
LABEL_57:
                          __break(1u);
                          __break(1u);
                          __break(1u);
                          goto LABEL_58;
                        }
LABEL_53:
                        __break(1u);
                        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
                      }
LABEL_52:
                      __break(1u);
                      goto LABEL_53;
                    }
                    goto LABEL_49;
                  }
LABEL_48:
                  __break(1u);
LABEL_49:
                  __break(1u);
                  goto LABEL_50;
                }
LABEL_47:
                __break(1u);
                goto LABEL_48;
              }
            }
            __break(1u);
            goto LABEL_47;
          }
          __break(1u);
LABEL_30:
          v33 = 0;
          goto LABEL_31;
        }
      }
      __break(1u);
      goto LABEL_56;
    }
  }
  if (!swift_dynamicCastClass((uint64_t)a1, a3))
    goto LABEL_60;
  swift_retain(a1, v18, v19, v20);
  v21 = a1;
LABEL_44:
  v49[0] = v21;
  _processOffsetForAppendedKeyPath(appendedKeyPath:root:leaf:)((uint64_t)v49, (uint64_t)a1, (uint64_t)a2);
  return swift_dynamicCastClassUnconditional((int64_t)v21, (Class *)a3, 0, 0, 0);
}

uint64_t _processOffsetForAppendedKeyPath(appendedKeyPath:root:leaf:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a2 + 16);
  if (!v3)
    return result;
  v4 = __OFSUB__(0, v3);
  v5 = -v3;
  if (v4)
  {
    __break(1u);
    goto LABEL_14;
  }
  v4 = __OFSUB__(v5, 1);
  v6 = v5 - 1;
  if (v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if ((v6 & 0x8000000000000000) == 0)
  {
    v7 = *(_QWORD *)(a3 + 16);
    if (v7)
    {
      v4 = __OFSUB__(0, v7);
      v8 = -v7;
      if (!v4)
      {
        v4 = __OFSUB__(v8, 1);
        v9 = v8 - 1;
        if (!v4)
        {
          if (v9 < 0)
            return result;
          v4 = __OFADD__(v6, v9);
          v10 = v6 + v9;
          if (!v4)
          {
            if ((v10 & 0x8000000000000000) == 0)
              *(_QWORD *)(*(_QWORD *)result + 16) = ~v10;
            return result;
          }
LABEL_17:
          __break(1u);
          return result;
        }
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
LABEL_15:
      __break(1u);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t open3 #1 <A><A1><A2><A3>(_:) in open2 #1 <A><A1><A2>(_:) in open #1 <A><A1>(_:) in _tryToAppendKeyPaths<A>(root:leaf:)(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v12 = type metadata accessor for KeyPath(0, a4, a5, a4);
  if (!swift_dynamicCastClass((uint64_t)a1, v12)
    || (v14 = type metadata accessor for KeyPath(0, a5, a6, v13), !swift_dynamicCastClass((uint64_t)a2, v14))
    || (v16 = type metadata accessor for KeyPath(0, a4, a6, v15),
        v17 = _appendingKeyPaths<A, B, C, D>(root:leaf:)(a1, a2, v16),
        v19 = v17,
        _processOffsetForAppendedKeyPath(appendedKeyPath:root:leaf:)((uint64_t)&v19, (uint64_t)a1, (uint64_t)a2),
        !swift_dynamicCastClass(v17, a3)))
  {
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  }
  return v17;
}

Swift::UnsafeRawPointer __swiftcall _swift_getKeyPath(pattern:arguments:)(Swift::UnsafeMutableRawPointer pattern, Swift::UnsafeRawPointer arguments)
{
  uint64_t v2;
  char *v3;
  uint64_t v5;
  unint64_t **v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t *v20;
  unint64_t v22;

  if ((((uint64_t)pattern._rawValue + 20) & 3) != 0)
    goto LABEL_23;
  if ((*((_BYTE *)pattern._rawValue + 23) & 0x3F) != 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Reserved bits set to an unexpected bit pattern", 46, 2, "Swift/KeyPath.swift", 19, 2, 0x7B5uLL, 0);
  if (((uint64_t)pattern._rawValue & 3) != 0)
    goto LABEL_23;
  v5 = *(int *)pattern._rawValue;
  if ((_DWORD)v5)
  {
    v6 = (unint64_t **)((char *)pattern._rawValue + v5);
    if (!((char *)pattern._rawValue + v5))
      goto LABEL_13;
    if ((v6 & 7) != 0)
    {
      v22 = 440;
LABEL_24:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, v22, 0);
    }
    v7 = *v6;
    if (*v6)
    {
      swift_retain(*v6, (uint64_t)arguments._rawValue, v2, v3);
      return (Swift::UnsafeRawPointer)v7;
    }
  }
  else
  {
    v6 = 0;
  }
  _getKeyPathClassAndInstanceSizeFromPattern(_:_:)((uint64_t)pattern._rawValue + 4, (uint64_t)arguments._rawValue);
  v9 = MEMORY[0x1E0C80A78](v8);
  v10 = static AnyKeyPath._create(capacityInBytes:initializedBy:)(v9, (void (*)(_QWORD *, char *))partial apply for closure #1 in _swift_getKeyPath(pattern:arguments:));
  v14 = (int *)((char *)pattern._rawValue + 16);
  if ((((uint64_t)pattern._rawValue + 16) & 3) != 0)
  {
LABEL_23:
    v22 = 1273;
    goto LABEL_24;
  }
  v7 = v10;
  v15 = *v14;
  if ((_DWORD)v15)
  {
    v16 = (char *)v14 + v15;
    if (!v16)
LABEL_13:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
    v10[2] = (unint64_t)v16;
  }
  else
  {
    v10[2] = 0;
  }
  if (v6)
  {
    swift_retain(v10, v11, v12, v13);
    while (1)
    {
      v20 = (unint64_t *)__ldaxr((unint64_t *)v6);
      if (v20)
        break;
      if (!__stlxr((unint64_t)v7, (unint64_t *)v6))
        return (Swift::UnsafeRawPointer)v7;
    }
    __clrex();
    swift_retain(v20, v17, v18, v19);
    swift_release_n((uint64_t)v7, 2);
    return (Swift::UnsafeRawPointer)v20;
  }
  return (Swift::UnsafeRawPointer)v7;
}

uint64_t _getKeyPathClassAndInstanceSizeFromPattern(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  __objc2_class **v14;

  v7 = 8;
  v8 = 1;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = a2;
  v13 = 0;
  v14 = &_swiftEmptyArrayStorage;
  specialized _walkKeyPathPattern<A>(_:walker:)(a1, &v7);
  if (HIBYTE(v8) == 1)
    LOBYTE(v8) = 0;
  if (!v9)
  {
    v6 = 3425;
    goto LABEL_13;
  }
  if (!v10)
  {
    v6 = 3423;
LABEL_13:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/KeyPath.swift", 19, 2, v6, 0);
  }
  if ((_BYTE)v8)
  {
    if (v8 == 1)
      v3 = type metadata accessor for WritableKeyPath(0, v9, v10, v2);
    else
      v3 = type metadata accessor for ReferenceWritableKeyPath(0, v9, v10, v2);
  }
  else
  {
    v3 = type metadata accessor for KeyPath(0, v9, v10, v2);
  }
  v4 = v3;
  swift_bridgeObjectRelease((uint64_t)v14);
  return v4;
}

unint64_t _instantiateKeyPathBuffer(_:_:_:_:)(uint64_t a1, _DWORD *a2, _BYTE *a3, void *a4, void *a5)
{
  unint64_t v6;
  _DWORD *v7;
  __objc2_class *v8;
  char *v9;
  char v10;
  char v11;
  uint64_t v12;
  Swift::UnsafeRawPointer_optional v14[5];
  unsigned int v15;
  __objc2_class **v16;
  char v17;
  _DWORD *v18;
  uint64_t v19;

  if (!a2)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
  v6 = a3 - (_BYTE *)a2 - 8;
  if (__OFSUB__(a3 - (_BYTE *)a2, 8))
  {
    __break(1u);
LABEL_20:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableRawBufferPointer with negative count", 49, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x68uLL, 0);
  }
  if ((v6 & 0x8000000000000000) != 0)
    goto LABEL_20;
  v14[0].value._rawValue = a2 + 2;
  v14[1].value._rawValue = a3;
  v14[2].value._rawValue = 0;
  v14[3].value._rawValue = a5;
  v14[4].value._rawValue = a4;
  v15 = 0;
  v16 = &_swiftEmptyArrayStorage;
  v17 = 1;
  v18 = 0;
  v19 = 0;
  specialized _walkKeyPathPattern<A>(_:walker:)(a1, v14);
  if (HIDWORD(v6))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xD7FuLL, 0);
  v7 = v18;
  if (v17 != 1)
  {
    if (v18)
      goto LABEL_7;
LABEL_10:
    *a2 = v6;
    goto LABEL_11;
  }
  LODWORD(v6) = v6 | 0x80000000;
  if (!v18)
    goto LABEL_10;
LABEL_7:
  *a2 = v6 | 0x40000000;
  if ((v7 & 3) != 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x4F9uLL, 0);
  *v7 |= 0x80000000;
LABEL_11:
  v8 = v16[2];
  if (v8)
  {
    v9 = (char *)(v16 + 4);
    v10 = 1;
    do
    {
      v11 = *v9++;
      v10 &= v11;
      v8 = (__objc2_class *)((char *)v8 - 1);
    }
    while (v8);
  }
  else
  {
    v10 = 1;
  }
  swift_bridgeObjectRelease((uint64_t)v16);
  v12 = v15;
  LOBYTE(v14[0].value._rawValue) = (v10 & 1) == 0;
  if ((v10 & 1) == 0)
    v12 = 0;
  return v12 | ((unint64_t)((v10 & 1) == 0) << 32);
}

BOOL static UInt8.<= infix(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  return a2 >= a1;
}

uint64_t _getTypeByMangledNameInEnvironmentOrContext(_:_:genericEnvironmentOrContext:genericArguments:)(unsigned __int8 *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 1) != 0)
    return swift_getTypeByMangledNameInContext(a1, a2, a3 & 0xFFFFFFFFFFFFFFFELL);
  else
    return swift_getTypeByMangledNameInEnvironment(a1, a2, a3, a4);
}

uint64_t _Pointer.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;

  if (a1)
  {
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a3 + 56))(a4, a1, a2);
    v6 = 0;
  }
  else
  {
    v6 = 1;
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a4, v6, 1, a2);
}

Swift::UnsafeRawPointer __swiftcall _resolveKeyPathGenericArgReference(_:genericEnvironment:arguments:)(Swift::UnsafeRawPointer _, Swift::UnsafeRawPointer_optional genericEnvironment, Swift::UnsafeRawPointer_optional arguments)
{
  unsigned int v3;
  uint8x16_t *v4;
  _BYTE *v5;
  uint64_t (*v6)(Builtin::RawPointer);
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  int64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  unint64_t v45;

  if (((uint64_t)_._rawValue & 1) == 0)
    return _;
  v4 = (uint8x16_t *)((char *)_._rawValue - 1);
  v3 = *((unsigned __int8 *)_._rawValue - 1);
  v5 = (char *)_._rawValue - 1;
  if (!*((_BYTE *)_._rawValue - 1))
  {
LABEL_13:
    v10 = v5 - (_BYTE *)v4;
    if (v5 - (_BYTE *)v4 == 0x7FFFFFFFFFFFFFFFLL)
    {
      __break(1u);
    }
    else if ((v10 & 0x8000000000000000) == 0)
    {
      _._rawValue = (Builtin::RawPointer)_getTypeByMangledNameInEnvironmentOrContext(_:_:genericEnvironmentOrContext:genericArguments:)((unsigned __int8 *)_._rawValue - 1, v5 - (_BYTE *)v4, (uint64_t)genericEnvironment.value._rawValue, (uint64_t)arguments.value._rawValue);
      if (_._rawValue)
        return _;
      v11 = validateUTF8(_:)(v4->i64, v10);
      if ((v13 & 1) != 0)
        v14 = repairUTF8(_:firstKnownBrokenRange:)(v4->i8, v10, v11, v12);
      else
        v14 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v4, v10, v11 & 1);
      v16 = v14;
      v17 = v15;
      v18 = specialized static String._createEmpty(withInitialCapacity:)(41);
      v20 = v19;
      v44 = v18;
      v45 = v19;
      v21 = HIBYTE(v19) & 0xF;
      if ((v19 & 0x2000000000000000) == 0)
        v21 = v18 & 0xFFFFFFFFFFFFLL;
      if (v21 || (v18 & ~v19 & 0x2000000000000000) != 0)
      {
        if ((v19 & 0x2000000000000000) == 0
          || (0x8000000181767150 & 0x2000000000000000) == 0
          || (v27 = specialized _SmallString.init(_:appending:)(v18, v19, 0xD000000000000026, 0x8000000181767150 | 0x8000000000000000), (v29 & 1) != 0))
        {
          if ((0x8000000181767150 & 0x2000000000000000) != 0)
            v30 = (0x8000000181767150 >> 56) & 0xF;
          else
            v30 = 38;
          _StringGuts.append(_:)(0xD000000000000026, 0x8000000181767150 | 0x8000000000000000, 0, v30);
          swift_bridgeObjectRelease(0x8000000181767150 | 0x8000000000000000);
          v22 = v44;
          v26 = v45;
LABEL_36:
          v31 = HIBYTE(v26) & 0xF;
          if ((v26 & 0x2000000000000000) == 0)
            v31 = v22 & 0xFFFFFFFFFFFFLL;
          if (!v31 && (v22 & ~v26 & 0x2000000000000000) == 0)
          {
            swift_bridgeObjectRetain(v17, v23, v24, v25);
            swift_bridgeObjectRelease(v26);
            v44 = v16;
            v45 = v17;
            goto LABEL_51;
          }
          if ((v26 & 0x2000000000000000) != 0)
          {
            if ((v17 & 0x2000000000000000) != 0)
            {
              v33 = specialized _SmallString.init(_:appending:)(v22, v26, v16, v17);
              if ((v35 & 1) == 0)
              {
                v36 = v33;
                v37 = v34;
                swift_bridgeObjectRelease(v26);
                v44 = v36;
                v45 = v37;
                v17 = v37;
                v16 = v36;
                goto LABEL_51;
              }
              goto LABEL_49;
            }
          }
          else if ((v17 & 0x2000000000000000) != 0)
          {
LABEL_49:
            v32 = HIBYTE(v17) & 0xF;
            goto LABEL_50;
          }
          v32 = v16 & 0xFFFFFFFFFFFFLL;
LABEL_50:
          _StringGuts.append(_:)(v16, v17, 0, v32);
          v16 = v44;
          v17 = v45;
LABEL_51:
          v38 = HIBYTE(v17) & 0xF;
          if ((v17 & 0x2000000000000000) == 0)
            v38 = v16 & 0xFFFFFFFFFFFFLL;
          if (v38 || (v16 & ~v17 & 0x2000000000000000) != 0)
          {
            if ((v17 & 0x2000000000000000) == 0
              || (v41 = specialized _SmallString.init(_:appending:)(v16, v17, 0x27uLL, 0xE100000000000000),
                  (v43 & 1) != 0))
            {
              _StringGuts.append(_:)(39, 0xE100000000000000, 0, 1);
              swift_bridgeObjectRelease(0xE100000000000000);
              v40 = v44;
              v39 = v45;
            }
            else
            {
              v40 = v41;
              v39 = v42;
              swift_bridgeObjectRelease(v17);
              swift_bridgeObjectRelease(0xE100000000000000);
            }
          }
          else
          {
            swift_bridgeObjectRelease(v17);
            v39 = 0xE100000000000000;
            v40 = 39;
          }
          _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)v40, v39, "Swift/KeyPath.swift", 19, 2, 0xB16uLL, 0);
        }
        v22 = v27;
        v26 = v28;
        swift_bridgeObjectRelease(v20);
        swift_bridgeObjectRelease(0x8000000181767150 | 0x8000000000000000);
      }
      else
      {
        v22 = 0xD000000000000026;
        swift_bridgeObjectRelease(v19);
        v26 = 0x8000000181767150 | 0x8000000000000000;
      }
      v44 = v22;
      v45 = v26;
      goto LABEL_36;
    }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
  }
  if (v3 != 255)
  {
    v5 = (char *)_._rawValue - 1;
    do
    {
LABEL_8:
      v7 = 9;
      if (v3 > 0x1F)
        v7 = 1;
      v8 = v3 > 0x17;
      v9 = 5;
      if (v8)
        v9 = v7;
      v5 += v9;
      v3 = *v5;
    }
    while (*v5);
    goto LABEL_13;
  }
  v5 = (char *)_._rawValue - 1;
  if (*(_BYTE *)_._rawValue != 9)
    goto LABEL_8;
  v6 = (uint64_t (*)(Builtin::RawPointer))((char *)_._rawValue + *(int *)((char *)_._rawValue + 1) + 1);
  if (!v6)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
  return (Swift::UnsafeRawPointer)v6(arguments.value._rawValue);
}

uint64_t UnsafeRawPointer.bindMemory<A>(to:capacity:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

Swift::UnsafeRawPointer __swiftcall _resolveRelativeIndirectableAddress(_:_:)(Swift::UnsafeRawPointer a1, Swift::Int32 a2)
{
  Swift::UnsafeRawPointer result;
  Swift::UnsafeRawPointer *v3;

  if ((a2 & 1) != 0)
  {
    if (__OFSUB__(a2, 1))
    {
      __break(1u);
    }
    else
    {
      v3 = (Swift::UnsafeRawPointer *)((char *)a1._rawValue + a2 - 1);
      if (!v3)
        goto LABEL_11;
      if ((v3 & 7) == 0)
        return (Swift::UnsafeRawPointer)v3->_rawValue;
    }
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x1B8uLL, 0);
  }
  result._rawValue = (char *)a1._rawValue + a2;
  if (!result._rawValue)
LABEL_11:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
  return result;
}

uint64_t static Int32.& infix(_:_:)(unsigned int a1, int a2)
{
  return a2 & a1;
}

uint64_t static Int32.- infix(_:_:)(int a1, int a2)
{
  BOOL v2;
  uint64_t result;

  v2 = __OFSUB__(a1, a2);
  result = (a1 - a2);
  if (v2)
    __break(1u);
  return result;
}

uint64_t specialized _loadRelativeAddress<A>(at:fromByteOffset:as:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (((a1 + a2) & 3) != 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x1B8uLL, 0);
  result = *(int *)(a1 + a2) + a1 + a2;
  if (!result)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
  return result;
}

Swift::UnsafeRawPointer specialized _walkKeyPathPattern<A>(_:walker:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UnsafeRawPointer_optional v7;
  Swift::UnsafeRawPointer result;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  BOOL v23;
  int v24;
  unsigned int **v25;
  uint64_t v26;
  uint64_t v27;
  Builtin::RawPointer rawValue;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(_QWORD);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52[2];
  uint64_t v53;
  uint64_t v54;

  v4 = specialized _loadRelativeAddress<A>(at:fromByteOffset:as:)(a1, 0);
  v5 = specialized _loadRelativeAddress<A>(at:fromByteOffset:as:)(a1, 4);
  v6 = specialized _loadRelativeAddress<A>(at:fromByteOffset:as:)(a1, 8);
  specialized _loadRelativeAddress<A>(at:fromByteOffset:as:)(a1, 12);
  a2[4] = v4;
  v7.value._rawValue = (Builtin::RawPointer)a2[5];
  *((Swift::UnsafeRawPointer *)a2 + 2) = _resolveKeyPathGenericArgReference(_:genericEnvironment:arguments:)((Swift::UnsafeRawPointer)v5, (Swift::UnsafeRawPointer_optional)v4, v7);
  result._rawValue = _resolveKeyPathGenericArgReference(_:genericEnvironment:arguments:)((Swift::UnsafeRawPointer)v6, (Swift::UnsafeRawPointer_optional)v4, v7)._rawValue;
  a2[3] = (uint64_t)result._rawValue;
  if ((((_BYTE)a1 + 16) & 3) != 0)
    goto LABEL_74;
  v9 = a1 + 20;
  v10 = a1 + 20 + (*(_DWORD *)(a1 + 16) & 0xFFFFFF);
  v53 = a1 + 20;
  v54 = v10;
  while (v54 != v9)
  {
    result._rawValue = (Builtin::RawPointer)specialized _pop<A>(from:as:count:)(&v53, 1);
    if (!result._rawValue)
      goto LABEL_85;
    v11 = *(_DWORD *)result._rawValue;
    v12 = HIBYTE(*(_DWORD *)result._rawValue) & 0x7F;
    v13 = *(_DWORD *)result._rawValue & 0xFFFFFF;
    if (v12)
    {
      if ((v11 & 0x7D000000) != 0x1000000)
      {
        if (v12 == 2)
        {
          popComputedAccessors #1 <A>(header:componentBuffer:) in _walkKeyPathPattern<A>(_:walker:)(*(_DWORD *)result._rawValue, &v53);
          v21 = v20;
          result._rawValue = (Builtin::RawPointer)popComputedArguments #1 <A>(header:componentBuffer:) in _walkKeyPathPattern<A>(_:walker:)(v11, &v53);
          if (v21)
          {
            if ((v11 & 0x800000) == 0)
            {
              v22 = 2;
              goto LABEL_37;
            }
          }
          else
          {
            v22 = 0;
LABEL_37:
            *((_BYTE *)a2 + 8) = v22;
          }
          v41 = *a2 + 4;
          if (__OFADD__(*a2, 4))
            goto LABEL_76;
          *a2 = v41;
          v23 = __OFADD__(v41, 7);
          v42 = v41 + 7;
          if (v23)
            goto LABEL_77;
          v43 = v42 & 0xFFFFFFFFFFFFFFF8;
          v23 = __OFADD__(v43, 16);
          v44 = v43 + 16;
          if (v23)
            goto LABEL_78;
          *a2 = v44;
          if (v21)
          {
            v23 = __OFADD__(v44, 8);
            v44 += 8;
            if (v23)
              goto LABEL_79;
            *a2 = v44;
          }
          if (result._rawValue)
          {
            v45 = v44 + 16;
            if (__OFADD__(v44, 16))
              goto LABEL_80;
            result._rawValue = (Builtin::RawPointer)((uint64_t (*)(uint64_t))result._rawValue)(a2[5]);
            v35 = (char *)result._rawValue + v45;
            if (__OFADD__(v45, result._rawValue))
              goto LABEL_81;
LABEL_53:
            *a2 = (uint64_t)v35;
          }
          v34 = v53;
          if (!v53)
            return result;
          goto LABEL_55;
        }
        if ((_DWORD)v13)
        {
          if ((_DWORD)v13 == 1)
          {
            *((_WORD *)a2 + 4) = 256;
            v35 = (char *)(*a2 + 4);
            if (__OFADD__(*a2, 4))
              goto LABEL_82;
          }
          else
          {
            v35 = (char *)(*a2 + 4);
            if (__OFADD__(*a2, 4))
              goto LABEL_84;
          }
        }
        else
        {
          *((_WORD *)a2 + 4) = 256;
          v35 = (char *)(*a2 + 4);
          if (__OFADD__(*a2, 4))
            goto LABEL_83;
        }
        goto LABEL_53;
      }
      v14 = &v53;
      v15 = *(unsigned int *)result._rawValue;
    }
    else
    {
      v16 = v53;
      if (!v53)
        goto LABEL_85;
      v17 = (int *)specialized _pop<A>(from:as:count:)(&v53, 1);
      if (!v17)
        goto LABEL_85;
      v18 = *v17;
      if ((v18 & 1) != 0)
      {
        v23 = __OFSUB__((_DWORD)v18, 1);
        v24 = v18 - 1;
        if (v23)
        {
          __break(1u);
LABEL_76:
          __break(1u);
LABEL_77:
          __break(1u);
LABEL_78:
          __break(1u);
LABEL_79:
          __break(1u);
LABEL_80:
          __break(1u);
LABEL_81:
          __break(1u);
LABEL_82:
          __break(1u);
LABEL_83:
          __break(1u);
LABEL_84:
          __break(1u);
LABEL_85:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
        }
        v25 = (unsigned int **)(v16 + v24);
        if (!v25)
          goto LABEL_85;
        if ((v25 & 7) != 0)
          goto LABEL_74;
        v19 = *v25;
      }
      else
      {
        v19 = (unsigned int *)(v16 + v18);
        if (!(v16 + v18))
          goto LABEL_85;
      }
      if ((v19 & 3) != 0)
        goto LABEL_74;
      v26 = *v19;
      result._rawValue = (Builtin::RawPointer)specialized _pop<A>(from:as:count:)(&v53, v13);
      if (!(_DWORD)v26)
        goto LABEL_61;
      rawValue = result._rawValue;
      v29 = v27;
      v30 = (unsigned int *)specialized _pop<A>(from:as:count:)(&v53, 1);
      if (!v30)
        goto LABEL_85;
      v31 = *v30;
      v32 = RawKeyPathComponent.Header.patternComponentBodySize.getter(*v30);
      v33 = RawKeyPathComponent.Header.propertyDescriptorBodySize.getter(v26);
      v52[0] = (uint64_t)(v19 + 1);
      v52[1] = (uint64_t)v19 + v33 + 4;
      if ((BYTE3(v26) & 0x7D | 2) != 3)
      {
        popComputedAccessors #1 <A>(header:componentBuffer:) in _walkKeyPathPattern<A>(_:walker:)(v26, v52);
        v37 = v36;
        if ((HIBYTE(v31) & 0x7F) == 2 && (v31 & 0x80000) != 0)
        {
          popComputedAccessors #1 <A>(header:componentBuffer:) in _walkKeyPathPattern<A>(_:walker:)(v31, &v53);
          v38 = (uint64_t (*)(_QWORD))popComputedArguments #1 <A>(header:componentBuffer:) in _walkKeyPathPattern<A>(_:walker:)(v31, &v53);
          v39 = v48;
          v40 = v49;
        }
        else
        {
          specialized _pop<A>(from:as:count:)(&v53, v32);
          v38 = 0;
          v39 = 0;
          v40 = 0;
        }
        if ((_DWORD)v13)
          v50 = (uint64_t)rawValue;
        else
          v50 = 0;
        if ((_DWORD)v13)
          v51 = v29;
        else
          v51 = 0;
        result._rawValue = (Builtin::RawPointer)specialized GetKeyPathClassAndInstanceSizeFromPattern.visitComputedComponent(mutating:idKind:idResolution:idValueBase:idValue:getter:setter:arguments:externalArgs:)((v26 >> 23) & 1, v37, v38, v39, v40, v50, v51, (_DWORD)v13 == 0);
        v34 = v53;
        if (!v53)
          return result;
        goto LABEL_55;
      }
      specialized _pop<A>(from:as:count:)(&v53, v32);
      v14 = v52;
      v15 = v26;
    }
    result._rawValue = (Builtin::RawPointer)specialized visitStored #1 <A>(header:componentBuffer:) in _walkKeyPathPattern<A>(_:walker:)(v15, v14, a2);
    v34 = v53;
    if (!v53)
      return result;
LABEL_55:
    if (v54 == v34)
      return result;
    result._rawValue = (Builtin::RawPointer)specialized _pop<A>(from:as:count:)(&v53, 1);
    if (!result._rawValue || !(v34 + *(int *)result._rawValue))
      goto LABEL_85;
    if (__OFADD__(*a2, 7))
    {
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x1B8uLL, 0);
    }
    v46 = (*a2 + 7) & 0xFFFFFFFFFFFFFFF8;
    v23 = __OFADD__(v46, 8);
    v47 = v46 + 8;
    if (v23)
      goto LABEL_73;
    *a2 = v47;
LABEL_61:
    v9 = v53;
    if (!v53)
      return result;
  }
  return result;
}

void specialized _walkKeyPathPattern<A>(_:walker:)(uint64_t a1, Swift::UnsafeRawPointer_optional *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  uint64_t (*v24)(_QWORD);
  int v25;
  int v26;
  char v27;
  BOOL v28;
  int v29;
  unsigned int **v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  __objc2_class **rawValue;
  BOOL isUniquelyReferenced_nonNull_native;
  unint64_t v42;
  __objc2_class *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(_QWORD);
  uint64_t v51;
  uint64_t (*v52)(uint64_t, uint64_t);
  __objc2_class **v53;
  BOOL v54;
  unint64_t v55;
  __objc2_class *v56;
  __objc2_class **v57;
  BOOL v58;
  unint64_t v59;
  __objc2_class *v60;
  int v61;
  int v62;
  char v63;
  int *v64;
  uint64_t v65;
  uint64_t v66;
  int *v67;
  Swift::UnsafeRawPointer v68;
  Builtin::RawPointer v69;
  unint64_t MetatypeMetadata;
  uint64_t v71;
  uint64_t v72[2];
  uint64_t v73;
  uint64_t v74;

  v4 = specialized _loadRelativeAddress<A>(at:fromByteOffset:as:)(a1, 0);
  specialized _loadRelativeAddress<A>(at:fromByteOffset:as:)(a1, 4);
  specialized _loadRelativeAddress<A>(at:fromByteOffset:as:)(a1, 8);
  specialized _loadRelativeAddress<A>(at:fromByteOffset:as:)(a1, 12);
  a2[2].value._rawValue = (Builtin::RawPointer)v4;
  if ((((_BYTE)a1 + 16) & 3) != 0)
LABEL_80:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x1B8uLL, 0);
  v5 = a1 + 20;
  v6 = a1 + 20 + (*(_DWORD *)(a1 + 16) & 0xFFFFFF);
  v73 = a1 + 20;
  v74 = v6;
  while (v74 != v5)
  {
    v7 = (unsigned int *)specialized _pop<A>(from:as:count:)(&v73, 1);
    if (!v7)
      goto LABEL_82;
    v8 = *v7;
    v9 = HIBYTE(*v7) & 0x7F;
    v10 = *v7 & 0xFFFFFF;
    if (v9)
    {
      if ((v8 & 0x7D000000) == 0x1000000)
      {
        specialized visitStored #1 <A>(header:componentBuffer:) in _walkKeyPathPattern<A>(_:walker:)(*v7, &v73);
      }
      else if (v9 == 2)
      {
        v15 = popComputedAccessors #1 <A>(header:componentBuffer:) in _walkKeyPathPattern<A>(_:walker:)(*v7, &v73);
        v17 = v16;
        v19 = v18;
        v21 = v20;
        v24 = (uint64_t (*)(_QWORD))popComputedArguments #1 <A>(header:componentBuffer:) in _walkKeyPathPattern<A>(_:walker:)(v8, &v73);
        v25 = (v8 >> 19) & 2;
        if ((v8 & 0x200000) != 0)
          LOBYTE(v25) = 1;
        v26 = v8 & 0xF;
        if ((v8 & 0xF) != 0)
        {
          if (v26 == 2)
            v27 = 2;
          else
            v27 = 3;
          if (v26 == 3)
            LOBYTE(v26) = 1;
          else
            LOBYTE(v26) = v27;
        }
        InstantiateKeyPathBuffer.visitComputedComponent(mutating:idKind:idResolution:idValueBase:idValue:getter:setter:arguments:externalArgs:)((v8 & 0x800000) != 0, v25, v26, v15, v17, v19, v21, v24, v22, v23, 0, 0, 1);
      }
      else if ((_DWORD)v10)
      {
        if ((_DWORD)v10 == 1)
        {
          rawValue = (__objc2_class **)a2[6].value._rawValue;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native((uint64_t)rawValue);
          a2[6].value._rawValue = rawValue;
          if (!isUniquelyReferenced_nonNull_native)
          {
            rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)&rawValue[2]->isa + 1, 1, (uint64_t)rawValue);
            a2[6].value._rawValue = rawValue;
          }
          v43 = rawValue[2];
          v42 = (unint64_t)rawValue[3];
          if ((unint64_t)v43 >= v42 >> 1)
            rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v42 > 1), (int64_t)&v43->isa + 1, 1, (uint64_t)rawValue);
          rawValue[2] = (__objc2_class *)((char *)&v43->isa + 1);
          *((_BYTE *)&v43->info + (_QWORD)rawValue) = 0;
          a2[6].value._rawValue = rawValue;
          if (!a2->value._rawValue)
            goto LABEL_82;
          a2[9].value._rawValue = a2->value._rawValue;
          specialized InstantiateKeyPathBuffer.pushDest<A>(_:)(67108865);
        }
        else
        {
          v57 = (__objc2_class **)a2[6].value._rawValue;
          v58 = swift_isUniquelyReferenced_nonNull_native((uint64_t)v57);
          a2[6].value._rawValue = v57;
          if (!v58)
          {
            v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)&v57[2]->isa + 1, 1, (uint64_t)v57);
            a2[6].value._rawValue = v57;
          }
          v60 = v57[2];
          v59 = (unint64_t)v57[3];
          if ((unint64_t)v60 >= v59 >> 1)
            v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v59 > 1), (int64_t)&v60->isa + 1, 1, (uint64_t)v57);
          v57[2] = (__objc2_class *)((char *)&v60->isa + 1);
          *((_BYTE *)&v60->info + (_QWORD)v57) = 0;
          a2[6].value._rawValue = v57;
          if (!a2->value._rawValue)
            goto LABEL_82;
          a2[9].value._rawValue = a2->value._rawValue;
          specialized InstantiateKeyPathBuffer.pushDest<A>(_:)(67108866);
        }
      }
      else
      {
        v53 = (__objc2_class **)a2[6].value._rawValue;
        v54 = swift_isUniquelyReferenced_nonNull_native((uint64_t)v53);
        a2[6].value._rawValue = v53;
        if (!v54)
        {
          v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)&v53[2]->isa + 1, 1, (uint64_t)v53);
          a2[6].value._rawValue = v53;
        }
        v56 = v53[2];
        v55 = (unint64_t)v53[3];
        if ((unint64_t)v56 >= v55 >> 1)
          v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v55 > 1), (int64_t)&v56->isa + 1, 1, (uint64_t)v53);
        v53[2] = (__objc2_class *)((char *)&v56->isa + 1);
        *((_BYTE *)&v56->info + (_QWORD)v53) = 0;
        a2[6].value._rawValue = v53;
        if (!a2->value._rawValue)
          goto LABEL_82;
        a2[9].value._rawValue = a2->value._rawValue;
        specialized InstantiateKeyPathBuffer.pushDest<A>(_:)(0x4000000);
      }
      goto LABEL_73;
    }
    v11 = v73;
    if (!v73)
      goto LABEL_82;
    v12 = (int *)specialized _pop<A>(from:as:count:)(&v73, 1);
    if (!v12)
      goto LABEL_82;
    v13 = *v12;
    if ((v13 & 1) != 0)
    {
      v28 = __OFSUB__((_DWORD)v13, 1);
      v29 = v13 - 1;
      if (v28)
      {
        __break(1u);
LABEL_82:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
      }
      v30 = (unsigned int **)(v11 + v29);
      if (!v30)
        goto LABEL_82;
      if ((v30 & 7) != 0)
        goto LABEL_80;
      v14 = *v30;
    }
    else
    {
      v14 = (unsigned int *)(v11 + v13);
      if (!(v11 + v13))
        goto LABEL_82;
    }
    if ((v14 & 3) != 0)
      goto LABEL_80;
    v31 = *v14;
    v32 = specialized _pop<A>(from:as:count:)(&v73, v10);
    if (v31)
    {
      v34 = (int *)v32;
      v35 = v33;
      v36 = (unsigned int *)specialized _pop<A>(from:as:count:)(&v73, 1);
      if (!v36)
        goto LABEL_82;
      v37 = *v36;
      v38 = RawKeyPathComponent.Header.patternComponentBodySize.getter(*v36);
      v39 = RawKeyPathComponent.Header.propertyDescriptorBodySize.getter(v31);
      v72[0] = (uint64_t)(v14 + 1);
      v72[1] = (uint64_t)v14 + v39 + 4;
      if ((HIBYTE(v31) & 0x7D | 2) == 3)
      {
        specialized _pop<A>(from:as:count:)(&v73, v38);
        specialized visitStored #1 <A>(header:componentBuffer:) in _walkKeyPathPattern<A>(_:walker:)(v31, v72);
      }
      else
      {
        v71 = popComputedAccessors #1 <A>(header:componentBuffer:) in _walkKeyPathPattern<A>(_:walker:)(v31, v72);
        v45 = v44;
        v47 = v46;
        v49 = v48;
        if ((HIBYTE(v37) & 0x7F) == 2 && (v37 & 0x80000) != 0)
        {
          popComputedAccessors #1 <A>(header:componentBuffer:) in _walkKeyPathPattern<A>(_:walker:)(v37, &v73);
          v50 = (uint64_t (*)(_QWORD))popComputedArguments #1 <A>(header:componentBuffer:) in _walkKeyPathPattern<A>(_:walker:)(v37, &v73);
        }
        else
        {
          specialized _pop<A>(from:as:count:)(&v73, v38);
          v50 = 0;
          v51 = 0;
          v52 = 0;
        }
        v61 = (v31 >> 19) & 2;
        if ((v31 & 0x200000) != 0)
          LOBYTE(v61) = 1;
        v62 = v31 & 0xF;
        if ((v31 & 0xF) != 0)
        {
          if (v62 == 2)
            v63 = 2;
          else
            v63 = 3;
          if (v62 == 3)
            LOBYTE(v62) = 1;
          else
            LOBYTE(v62) = v63;
        }
        if ((_DWORD)v10)
          v64 = v34;
        else
          v64 = 0;
        if ((_DWORD)v10)
          v65 = v35;
        else
          v65 = 0;
        InstantiateKeyPathBuffer.visitComputedComponent(mutating:idKind:idResolution:idValueBase:idValue:getter:setter:arguments:externalArgs:)((v31 & 0x800000) != 0, v61, v62, v71, v45, v47, v49, v50, v51, v52, v64, v65, (_DWORD)v10 == 0);
      }
LABEL_73:
      v66 = v73;
      if (!v73 || v74 == v73)
        return;
      v67 = (int *)specialized _pop<A>(from:as:count:)(&v73, 1);
      if (!v67)
        goto LABEL_82;
      v68._rawValue = (Builtin::RawPointer)(v66 + *v67);
      if (!v68._rawValue)
        goto LABEL_82;
      v69 = _resolveKeyPathGenericArgReference(_:genericEnvironment:arguments:)(v68, a2[2], a2[3])._rawValue;
      v72[0] = (uint64_t)v69;
      MetatypeMetadata = swift_getMetatypeMetadata((uint64_t)v69);
      InstantiateKeyPathBuffer.pushDest<A>(_:)(v72, MetatypeMetadata);
      a2[4].value._rawValue = v69;
    }
    v5 = v73;
    if (!v73)
      return;
  }
}

uint64_t specialized visitStored #1 <A>(header:componentBuffer:) in _walkKeyPathPattern<A>(_:walker:)(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  unsigned int v4;
  int v5;
  Swift::UnsafeRawPointer v6;
  Swift::Int32 *v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v4 = result;
  v5 = result & 0x7FFFFF;
  if ((result & 0x7FFFFF) == 0x7FFFFD)
  {
    v6._rawValue = (Builtin::RawPointer)*a2;
    if (!*a2 || (v7 = (Swift::Int32 *)specialized _pop<A>(from:as:count:)(a2, 1)) == 0)
LABEL_23:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
    result = (uint64_t)_resolveRelativeIndirectableAddress(_:_:)(v6, *v7)._rawValue;
    goto LABEL_9;
  }
  if (v5 == 8388606 || v5 == 0x7FFFFF)
  {
    result = specialized _pop<A>(from:as:count:)(a2, 1);
    if (!result)
      goto LABEL_23;
LABEL_9:
    v8 = 0;
    goto LABEL_11;
  }
  v8 = 1;
LABEL_11:
  if ((HIBYTE(v4) & 0x7F) == 1)
  {
    if ((v4 & 0x800000) != 0)
      goto LABEL_16;
    LOBYTE(v9) = 0;
  }
  else
  {
    v9 = (v4 >> 22) & 2;
  }
  *((_BYTE *)a3 + 8) = v9;
LABEL_16:
  v10 = *a3;
  if (v8)
  {
    v11 = v10 + 4;
    if (!__OFADD__(v10, 4))
      goto LABEL_21;
    __break(1u);
  }
  v11 = v10 + 8;
  if (__OFADD__(v10, 8))
  {
    __break(1u);
    goto LABEL_23;
  }
LABEL_21:
  *a3 = v11;
  return result;
}

void specialized visitStored #1 <A>(header:componentBuffer:) in _walkKeyPathPattern<A>(_:walker:)(unsigned int a1, uint64_t *a2)
{
  uint64_t rawValue;
  unsigned int *v4;
  char v5;
  Swift::UnsafeRawPointer v6;
  Swift::Int32 *v7;
  unsigned int *v8;
  char v9;

  rawValue = a1 & 0x7FFFFF;
  switch((_DWORD)rawValue)
  {
    case 0x7FFFFD:
      v6._rawValue = (Builtin::RawPointer)*a2;
      if (!*a2)
        goto LABEL_16;
      v7 = (Swift::Int32 *)specialized _pop<A>(from:as:count:)(a2, 1);
      if (!v7)
        goto LABEL_16;
      rawValue = (uint64_t)_resolveRelativeIndirectableAddress(_:_:)(v6, *v7)._rawValue;
      v5 = 3;
      break;
    case 0x7FFFFE:
      v8 = (unsigned int *)specialized _pop<A>(from:as:count:)(a2, 1);
      if (!v8)
        goto LABEL_16;
      rawValue = *v8;
      v5 = 2;
      break;
    case 0x7FFFFF:
      v4 = (unsigned int *)specialized _pop<A>(from:as:count:)(a2, 1);
      if (v4)
      {
        rawValue = *v4;
        v5 = 1;
        break;
      }
LABEL_16:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
    default:
      v5 = 0;
      break;
  }
  if ((HIBYTE(a1) & 0x7F) <= 3u)
    v9 = (0xDu >> (HIBYTE(a1) & 0xF)) & 1;
  else
    v9 = 1;
  InstantiateKeyPathBuffer.visitStoredComponent(kind:mutable:offset:)(v9, (a1 & 0x800000) != 0, rawValue, v5);
}

uint64_t popComputedAccessors #1 <A>(header:componentBuffer:) in _walkKeyPathPattern<A>(_:walker:)(int a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  int *v8;

  v2 = *a2;
  if (!*a2
    || !specialized _pop<A>(from:as:count:)(a2, 1)
    || (v5 = *a2) == 0
    || (v6 = (int *)specialized _pop<A>(from:as:count:)(a2, 1)) == 0
    || !(v5 + *v6)
    || (a1 & 0x400000) != 0
    && ((v7 = *a2) == 0 || (v8 = (int *)specialized _pop<A>(from:as:count:)(a2, 1)) == 0 || !(v7 + *v8)))
  {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
  }
  return v2;
}

uint64_t popComputedArguments #1 <A>(header:componentBuffer:) in _walkKeyPathPattern<A>(_:walker:)(int a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;

  if ((a1 & 0x80000) == 0)
    return 0;
  v4 = *a2;
  if (!*a2
    || (v5 = (int *)specialized _pop<A>(from:as:count:)(a2, 1)) == 0
    || (v2 = v4 + *v5) == 0
    || (v6 = *a2) == 0
    || (v7 = (int *)specialized _pop<A>(from:as:count:)(a2, 1)) == 0)
  {
LABEL_16:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
  }
  v8 = *v7;
  if ((_DWORD)v8)
  {
    if (!(v6 + v8))
      goto LABEL_16;
    v9 = *a2;
    if (!*a2)
      goto LABEL_16;
  }
  else
  {
    v9 = *a2;
    if (!*a2)
      goto LABEL_16;
  }
  v10 = (int *)specialized _pop<A>(from:as:count:)(a2, 1);
  if (!v10 || !(v9 + *v10))
    goto LABEL_16;
  return v2;
}

uint64_t specialized InstantiateKeyPathBuffer.adjustDestForAlignment<A>(of:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  if (!*v0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
  if ((v1 & 3) != 0)
    v2 = 4 - (*v0 & 3);
  else
    v2 = 0;
  return v1 + v2;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  if (!*v0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
  if ((v1 & 7) != 0)
    v2 = 8 - (*v0 & 7);
  else
    v2 = 0;
  return v1 + v2;
}

uint64_t InstantiateKeyPathBuffer.adjustDestForAlignment<A>(of:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v2;
  if (!*v2)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(a2 - 8) + 80);
  if ((v4 & v3) != 0)
    v5 = v4 - (v4 & v3) + 1;
  else
    v5 = 0;
  return v3 + v5;
}

_DWORD *specialized InstantiateKeyPathBuffer.pushDest<A>(_:)(int a1)
{
  uint64_t *v1;
  _DWORD *result;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;

  result = (_DWORD *)specialized InstantiateKeyPathBuffer.adjustDestForAlignment<A>(of:)();
  *result = a1;
  v5 = *v1;
  if (*v1)
    v5 = v1[1] - v5;
  v6 = __OFSUB__(v5, 4);
  v7 = v5 - 4;
  if (v6)
  {
    __break(1u);
    goto LABEL_8;
  }
  v6 = __OFSUB__(v7, v4);
  v8 = v7 - v4;
  if (v6)
  {
LABEL_8:
    __break(1u);
LABEL_9:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableRawBufferPointer with negative count", 49, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x68uLL, 0);
  }
  if (v8 < 0)
    goto LABEL_9;
  *v1 = (uint64_t)(result + 1);
  v1[1] = (uint64_t)result + v8 + 4;
  return result;
}

_QWORD *specialized InstantiateKeyPathBuffer.pushDest<A>(_:)(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;

  result = (_QWORD *)specialized InstantiateKeyPathBuffer.adjustDestForAlignment<A>(of:)();
  *result = a1;
  v5 = *v1;
  if (*v1)
    v5 = v1[1] - v5;
  v6 = __OFSUB__(v5, 8);
  v7 = v5 - 8;
  if (v6)
  {
    __break(1u);
    goto LABEL_8;
  }
  v6 = __OFSUB__(v7, v4);
  v8 = v7 - v4;
  if (v6)
  {
LABEL_8:
    __break(1u);
LABEL_9:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableRawBufferPointer with negative count", 49, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x68uLL, 0);
  }
  if (v8 < 0)
    goto LABEL_9;
  *v1 = (uint64_t)(result + 1);
  v1[1] = (uint64_t)result + v8 + 8;
  return result;
}

void *InstantiateKeyPathBuffer.pushDest<A>(_:)(const void *a1, uint64_t a2)
{
  uint64_t *v2;
  size_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  BOOL v11;
  size_t v12;
  size_t v13;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 - 8) + 64);
  v5 = (char *)InstantiateKeyPathBuffer.adjustDestForAlignment<A>(of:)((uint64_t)a1, a2);
  if ((v4 & 0x8000000000000000) != 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer with negative count", 42, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x485uLL, 0);
  v7 = v5;
  v8 = v6;
  result = memcpy(v5, a1, v4);
  v10 = *v2;
  if (*v2)
    v10 = v2[1] - v10;
  v11 = __OFSUB__(v10, v4);
  v12 = v10 - v4;
  if (v11)
  {
    __break(1u);
    goto LABEL_10;
  }
  v11 = __OFSUB__(v12, v8);
  v13 = v12 - v8;
  if (v11)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableRawBufferPointer with negative count", 49, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x68uLL, 0);
  }
  if ((v13 & 0x8000000000000000) != 0)
    goto LABEL_11;
  *v2 = (uint64_t)&v7[v4];
  v2[1] = (uint64_t)&v7[v4 + v13];
  return result;
}

void InstantiateKeyPathBuffer.visitStoredComponent(kind:mutable:offset:)(char a1, char a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  uint64_t v8;
  __objc2_class **v9;
  BOOL isUniquelyReferenced_nonNull_native;
  unint64_t v11;
  __objc2_class *v12;
  unint64_t v13;
  __objc2_class *v14;

  if (*v4)
  {
    v8 = v4[9];
    v4[9] = *v4;
    v9 = (__objc2_class **)v4[6];
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native((uint64_t)v9);
    v4[6] = v9;
    if ((a1 & 1) != 0)
    {
      if (!isUniquelyReferenced_nonNull_native)
      {
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)&v9[2]->isa + 1, 1, (uint64_t)v9);
        v4[6] = v9;
      }
      v14 = v9[2];
      v13 = (unint64_t)v9[3];
      if ((unint64_t)v14 >= v13 >> 1)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v13 > 1), (int64_t)&v14->isa + 1, 1, (uint64_t)v9);
      v9[2] = (__objc2_class *)((char *)&v14->isa + 1);
      *((_BYTE *)&v14->info + (_QWORD)v9) = 0;
      v4[6] = v9;
      if ((a2 & 1) != 0)
        v4[8] = v8;
    }
    else
    {
      if (!isUniquelyReferenced_nonNull_native)
      {
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)&v9[2]->isa + 1, 1, (uint64_t)v9);
        v4[6] = v9;
      }
      v12 = v9[2];
      v11 = (unint64_t)v9[3];
      if ((unint64_t)v12 >= v11 >> 1)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v11 > 1), (int64_t)&v12->isa + 1, 1, (uint64_t)v9);
      v9[2] = (__objc2_class *)((char *)&v12->isa + 1);
      *((_BYTE *)&v12->info + (_QWORD)v9) = 1;
      v4[6] = v9;
    }
    __asm { BR              X10 }
  }
  _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
}

_DWORD *static UInt32.+= infix(_:_:)(_DWORD *result, int a2)
{
  if (__CFADD__(*result, a2))
    __break(1u);
  else
    *result += a2;
  return result;
}

void *InstantiateKeyPathBuffer.visitComputedComponent(mutating:idKind:idResolution:idValueBase:idValue:getter:setter:arguments:externalArgs:)(char a1, char a2, char a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(_QWORD), uint64_t a9, uint64_t (*a10)(uint64_t, uint64_t), int *a11, uint64_t a12, char a13)
{
  uint64_t *v13;
  uint64_t v19;
  __objc2_class **v21;
  BOOL isUniquelyReferenced_nonNull_native;
  unint64_t v23;
  __objc2_class *v24;
  uint64_t v25;
  char v26;
  char v27;
  int v28;
  void *result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  Swift::UnsafeRawPointer v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  LOBYTE(v19) = a2;
  v21 = (__objc2_class **)v13[6];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native((uint64_t)v21);
  v13[6] = (uint64_t)v21;
  v49 = a6;
  if (!isUniquelyReferenced_nonNull_native)
    goto LABEL_55;
  while (1)
  {
    v24 = v21[2];
    v23 = (unint64_t)v21[3];
    if ((unint64_t)v24 >= v23 >> 1)
      v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v23 > 1), (int64_t)&v24->isa + 1, 1, (uint64_t)v21);
    v21[2] = (__objc2_class *)((char *)&v24->isa + 1);
    *((_BYTE *)&v24->info + (_QWORD)v21) = 0;
    v13[6] = (uint64_t)v21;
    if (!*v13)
LABEL_63:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
    v25 = v13[9];
    v13[9] = *v13;
    if (a7 && (a1 & 1) == 0)
      v13[8] = v25;
    if ((v19 - 1) > 1u)
      __asm { BR              X10 }
    v26 = (a13 & 1) == 0 && a8 != 0;
    v27 = (a13 & 1) == 0 || a8 != 0;
    v28 = specialized RawKeyPathComponent.Header.init(computedWithIDKind:mutating:settable:hasArguments:instantiatedFromExternalWithArguments:)(v19, a1 & 1, a7 != 0, v27, v26);
    specialized InstantiateKeyPathBuffer.pushDest<A>(_:)(v28);
    specialized InstantiateKeyPathBuffer.pushDest<A>(_:)(a5);
    result = specialized InstantiateKeyPathBuffer.pushDest<A>(_:)(v49);
    if (a7)
      result = specialized InstantiateKeyPathBuffer.pushDest<A>(_:)(a7);
    v19 = a12;
    if (a8)
      break;
    if ((a13 & 1) != 0)
      return result;
    if ((unint64_t)(a12 - 0x1000000000000000) >> 61 != 7)
      goto LABEL_62;
    specialized InstantiateKeyPathBuffer.pushDest<A>(_:)(8 * a12);
    result = specialized InstantiateKeyPathBuffer.pushDest<A>(_:)((uint64_t)&swift_keyPathGenericWitnessTable);
    if (a12 < 0)
LABEL_50:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0xB2uLL, 0);
LABEL_34:
    if (!a12)
      return result;
    a8 = (uint64_t (*)(_QWORD))a11;
    if (!a11)
      goto LABEL_63;
    a7 = 8;
    v40 = a11;
    while (1)
    {
      v41 = *v40++;
      v42._rawValue = (char *)a8 + v41;
      if (!(uint64_t (*)(_QWORD))((char *)a8 + v41))
        goto LABEL_63;
      result = _resolveKeyPathGenericArgReference(_:genericEnvironment:arguments:)(v42, (Swift::UnsafeRawPointer_optional)v13[2], (Swift::UnsafeRawPointer_optional)v13[3])._rawValue;
      v43 = *v13;
      if (!*v13)
        goto LABEL_63;
      v44 = (v43 & 7) != 0 ? 8 - (*v13 & 7) : 0;
      *(_QWORD *)(v43 + v44) = result;
      v45 = v43 + v44 + 8;
      v46 = v13[1] - v43;
      v38 = __OFSUB__(v46, 8);
      v47 = v46 - 8;
      if (v38)
        break;
      v38 = __OFSUB__(v47, v44);
      v48 = v47 - v44;
      if (v38)
        goto LABEL_54;
      if (v48 < 0)
        goto LABEL_52;
      *v13 = v45;
      v13[1] = v45 + v48;
      a8 = (uint64_t (*)(_QWORD))((char *)a8 + 4);
      if (!--v19)
        return result;
    }
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)&v21[2]->isa + 1, 1, (uint64_t)v21);
    v13[6] = (uint64_t)v21;
  }
  v30 = v13[3];
  v31 = a8(v30);
  if (__OFADD__(v31, v32))
  {
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    JUMPOUT(0x1814101F8);
  }
  v33 = v31;
  v34 = (v31 + v32) & ~v32;
  if ((a13 & 1) == 0)
  {
    if (__OFADD__(v34, 7))
      goto LABEL_58;
    if ((unint64_t)(a12 - 0x1000000000000000) >> 61 != 7)
      goto LABEL_59;
    v35 = (v34 + 7) & 0xFFFFFFFFFFFFFFF8;
    v34 = v35 + 8 * a12;
    if (__OFADD__(v35, 8 * a12))
      goto LABEL_60;
  }
  specialized InstantiateKeyPathBuffer.pushDest<A>(_:)(v34);
  specialized InstantiateKeyPathBuffer.pushDest<A>(_:)(a9);
  if (ComputedAccessorsPtr.getter<A, B>()(a9))
    *((_BYTE *)v13 + 56) = 0;
  if ((a13 & 1) == 0)
  {
    if ((unint64_t)(a12 - 0x1000000000000000) >> 61 != 7)
      goto LABEL_61;
    specialized InstantiateKeyPathBuffer.pushDest<A>(_:)(8 * a12);
  }
  v36 = *v13;
  if (!*v13)
    goto LABEL_63;
  result = (void *)a10(v30, *v13);
  v37 = v13[1] - v36;
  v38 = __OFSUB__(v37, v33);
  v39 = v37 - v33;
  if (v38)
    goto LABEL_57;
  if (v39 < 0)
LABEL_52:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableRawBufferPointer with negative count", 49, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x68uLL, 0);
  *v13 = v36 + v33;
  v13[1] = v36 + v33 + v39;
  if ((a13 & 1) == 0)
  {
    if (a12 < 0)
      goto LABEL_50;
    goto LABEL_34;
  }
  return result;
}

void _createOffsetBasedKeyPath(root:value:offset:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  Swift::UnsafeMutableRawBufferPointer v6;
  Swift::UInt MetadataKind;

  v5 = type metadata accessor for KeyPath(0, (uint64_t)a1, a2, a4);
  swift_allocObject(v5, ((*(unsigned int *)(v5 + 48) + 3) & 0x1FFFFFFFCLL) + 12, *(unsigned __int16 *)(v5 + 52) | 3)[2] = 0;
  v6 = KeyPathBuffer.Builder.pushRaw(size:alignment:)(4, 4);
  specialized _swift_se0349_UnsafeMutableRawBufferPointer_storeBytes(2147483652, 0, (uint64_t)v6._position.value._rawValue, (uint64_t)v6._end.value._rawValue);
  KeyPathBuffer.Builder.pushRaw(size:alignment:)(4, 4);
  MetadataKind = swift_getMetadataKind(a1);
  _MetadataKind.init(rawValue:)(MetadataKind);
  __asm { BR              X11 }
}

uint64_t sub_18141035C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, uint64_t a10, int a11, uint64_t a12, Swift::UnsafeMutableRawBufferPointer into, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  Swift::UInt MetadataKind;
  Swift::UnsafeMutableRawBufferPointer v24;

  if ((v19 & 0x8000000000000000) != 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
  if (HIDWORD(v19))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xD7FuLL, 0);
  RawKeyPathComponent.clone(into:endOfReferencePrefix:)(&v24, 0);
  MetadataKind = swift_getMetadataKind(v20);
  _MetadataKind.init(rawValue:)(MetadataKind);
  if (LOBYTE(v24._position.value._rawValue) == 1)
    *(_QWORD *)(v21 + 16) = ~v19;
  return v21;
}

uint64_t _rerootKeyPath<A>(_:to:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  Class *v20;

  v5 = specialized KeyPathBuffer.init(base:)((uint64_t)(a1 + 3));
  if (v5)
    v7 = v6 - v5;
  else
    v7 = 0;
  v8 = *a1;
  v9 = *(uint64_t (**)(void))(*a1 + 120);
  v10 = v9();
  v9();
  v12 = v11;
  if (v8 == type metadata accessor for ReferenceWritableKeyPath(0, v10, v11, v13))
  {
    type metadata accessor for ReferenceWritableKeyPath(0, a3, v12, v14);
  }
  else
  {
    if (v8 != type metadata accessor for KeyPath(0, v10, v12, v14))
      goto LABEL_11;
    type metadata accessor for KeyPath(0, a3, v12, v15);
  }
  if (__OFADD__(v7, 8))
  {
    __break(1u);
LABEL_11:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000027, 0x8000000181762AA0, "Swift/KeyPath.swift", 19, 2, 0xFB6uLL, 0);
  }
  v16 = MEMORY[0x1E0C80A78](v7 + 8);
  v17 = static AnyKeyPath._create(capacityInBytes:initializedBy:)(v16, (void (*)(_QWORD *, char *))partial apply for closure #2 in _rerootKeyPath<A>(_:to:));
  v20 = (Class *)type metadata accessor for PartialKeyPath(0, a3, v18, v19);
  return swift_dynamicCastClassUnconditional((int64_t)v17, v20, 0, 0, 0);
}

unint64_t AnyKeyPath.debugDescription.getter()
{
  unint64_t *v0;
  Swift::Int v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  Swift::Int v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  int64_t v25;
  char v26;
  BOOL v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  size_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  unsigned __int8 *v38;
  Swift::String::Index v39;
  Swift::String::Index v40;
  Swift::String::Index v41;
  Swift::String::Index v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  Swift::Int v71;
  BOOL v72;
  uint64_t v73;
  int64_t v74;
  char v75;
  int64_t v76;
  char v77;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  size_t v84;
  uint64_t v85;
  char *v86;
  int v87;
  unint64_t v88;
  char v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  size_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  unint64_t v109;
  Swift::String::Index v110;
  Swift::String::Index v111;
  Swift::String::Index v112;
  Swift::String::Index v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  char v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  int64_t v134;
  unint64_t v135;
  unint64_t v136;
  char v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  Swift::String::Index v144;
  Swift::String::Index v145;
  Swift::String::Index v146;
  Swift::String::Index v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  char v156;
  unint64_t v157;
  unint64_t v158;
  Swift::String::Index v159;
  Swift::String::Index v160;
  Swift::String::Index v161;
  Swift::String::Index v162;
  Swift::Int v163;
  Swift::Int v164;
  char *v165;
  size_t v166;
  unint64_t v167;
  unsigned __int8 *v169;
  unint64_t v170;
  unsigned __int8 *v171;
  uint64_t v172;
  unsigned __int8 *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  Swift::Int v185;
  _OWORD v186[2];
  unint64_t v187;
  unint64_t v188;

  v2 = (uint64_t)v0;
  v3 = *v0;
  v4 = specialized static String._createEmpty(withInitialCapacity:)(3);
  v8 = v4;
  v9 = v5;
  v187 = v4;
  v188 = v5;
  v10 = HIBYTE(v5) & 0xF;
  v11 = v4 & 0xFFFFFFFFFFFFLL;
  if ((v5 & 0x2000000000000000) != 0)
    v12 = HIBYTE(v5) & 0xF;
  else
    v12 = v4 & 0xFFFFFFFFFFFFLL;
  if (!v12 && (v4 & ~v5 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease(v5);
    v187 = 92;
    v188 = 0xE100000000000000;
    goto LABEL_70;
  }
  if ((v5 & 0x2000000000000000) == 0 || v10 == 15)
  {
    swift_bridgeObjectRetain_n(0xE100000000000000, 6, v6, v7);
    if ((v9 & 0x1000000000000000) != 0)
      goto LABEL_185;
    v21 = v12 + 1;
    if (!__OFADD__(v12, 1))
      goto LABEL_18;
LABEL_187:
    __break(1u);
    goto LABEL_188;
  }
  v13 = 8 * (HIBYTE(v5) & 7);
  v14 = (-255 << v13) - 1;
  v15 = 92 << v13;
  v16 = v15 | v14 & v5;
  v17 = v15 | v14 & v4;
  if (v10 >= 8)
    v18 = v16;
  else
    v18 = v5;
  if (v10 < 8)
    v8 = v17;
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(0xE100000000000000);
  v19 = 0xA000000000000000;
  if (!(v8 & 0x8080808080808080 | v18 & 0x80808080808080))
    v19 = 0xE000000000000000;
  v20 = (v19 & 0xFF00000000000000 | (v10 << 56) | v18 & 0xFFFFFFFFFFFFFFLL) + 0x100000000000000;
LABEL_69:
  v187 = v8;
  v188 = v20;
  while (1)
  {
LABEL_70:
    v185 = v3;
    v61 = (*(uint64_t (**)(void))(v3 + 120))();
    v62 = specialized String.init<A>(describing:)(v61);
    v11 = v62;
    v8 = v63;
    v9 = v187;
    v3 = v188;
    v66 = HIBYTE(v188) & 0xF;
    if ((v188 & 0x2000000000000000) != 0)
      v67 = HIBYTE(v188) & 0xF;
    else
      v67 = v187 & 0xFFFFFFFFFFFFLL;
    if (!v67 && (v187 & ~v188 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease(v188);
      v187 = v11;
      v188 = v8;
      goto LABEL_121;
    }
    v68 = v63 & 0x2000000000000000;
    v43 = HIBYTE(v63) & 0xF;
    if ((v188 & 0x2000000000000000) == 0 || !v68)
    {
      v184 = v2;
      goto LABEL_78;
    }
    v88 = v66 + v43;
    if (v66 + v43 <= 0xF)
      break;
    v184 = v2;
    v68 = 1;
LABEL_78:
    if (v68)
      v2 = HIBYTE(v63) & 0xF;
    else
      v2 = v62 & 0xFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain_n(v63, 2, v64, v65);
    if ((v8 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain_n(v8, 5, v69, v70);
      v159._rawBits = 1;
      v160._rawBits = (v2 << 16) | 1;
      v161._rawBits = _StringGuts.validateScalarRange(_:)(v159, v160, v11, v8);
      if (v161._rawBits < 0x10000)
        v161._rawBits |= 3;
      v71 = specialized Collection.count.getter(v161, v162, v11, v8);
      swift_bridgeObjectRelease(v8);
      if ((v3 & 0x1000000000000000) == 0)
      {
LABEL_83:
        v72 = __OFADD__(v67, v71);
        v1 = v67 + v71;
        if (!v72)
          goto LABEL_84;
        goto LABEL_184;
      }
    }
    else
    {
      swift_bridgeObjectRetain_n(v8, 4, v69, v70);
      v71 = v2;
      if ((v3 & 0x1000000000000000) == 0)
        goto LABEL_83;
    }
    v163 = String.UTF8View._foreignCount()();
    v1 = v163 + v71;
    if (!__OFADD__(v163, v71))
    {
LABEL_84:
      if ((v9 & ~v3 & 0x2000000000000000) == 0
        || !swift_isUniquelyReferenced_nonNull_native(v3 & 0xFFFFFFFFFFFFFFFLL))
      {
        if (v1 >= 16)
        {
          v183 = v11 & 0xFFFFFFFFFFFFLL;
          v73 = v187;
          v9 = v188;
          goto LABEL_93;
        }
        v3 = v188;
        if ((v188 & 0x2000000000000000) == 0)
        {
          v9 = v188;
          goto LABEL_116;
        }
        v87 = 0;
        v9 = v188;
        goto LABEL_137;
      }
      v183 = v11 & 0xFFFFFFFFFFFFLL;
      v73 = v187;
      v9 = v188;
      v74 = _StringGuts.nativeUnusedCapacity.getter(v187, v188);
      if ((v75 & 1) == 0)
      {
        if (v1 > 15)
          goto LABEL_93;
        if ((v9 & 0x2000000000000000) == 0)
        {
          v3 = v9;
          if (v74 < v71)
          {
LABEL_116:
            v87 = 1;
            goto LABEL_137;
          }
LABEL_93:
          v76 = _StringGuts.nativeUnusedCapacity.getter(v73, v9);
          v45 = (v77 & 1) == 0 && v76 >= v71;
          if ((v73 & ~v9 & 0x2000000000000000) == 0
            || !swift_isUniquelyReferenced_nonNull_native(v9 & 0xFFFFFFFFFFFFFFFLL))
          {
            if ((v45 & 1) == 0)
              goto LABEL_104;
LABEL_110:
            _StringGuts.grow(_:)(v1);
            goto LABEL_111;
          }
          if ((v45 & 1) != 0)
          {
LABEL_111:
            swift_bridgeObjectRelease_n(v8, 4);
            if ((v8 & 0x1000000000000000) == 0)
            {
              v1 = v185;
              if (v68)
              {
                swift_bridgeObjectRelease_n(v8, 2);
                *(_QWORD *)&v186[0] = v11;
                *((_QWORD *)&v186[0] + 1) = v8 & 0xFFFFFFFFFFFFFFLL;
                v83 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, HIBYTE(v8) & 0xF, (uint64_t)v186, HIBYTE(v8) & 0xF);
                _StringGuts.appendInPlace(_:isASCII:)(v83, v84, (v8 & 0x4000000000000000) != 0);
                v2 = v184;
                swift_bridgeObjectRelease(v8);
              }
              else
              {
                if ((v11 & 0x1000000000000000) != 0)
                {
                  swift_bridgeObjectRelease(v8);
                  v101 = (id)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
                  v102 = v183;
                  v103 = v183;
                }
                else
                {
                  v101 = _StringObject.sharedUTF8.getter(v11, v8);
                  v103 = v176;
                  swift_bridgeObjectRelease(v8);
                  if (v103 < v183)
                    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
                  v1 = v185;
                  v102 = v183;
                }
                v104 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v102, (uint64_t)v101, v103);
                _StringGuts.appendInPlace(_:isASCII:)(v104, v105, v11 < 0);
                swift_bridgeObjectRelease_n(v8, 2);
                v2 = v184;
              }
              goto LABEL_159;
            }
            swift_bridgeObjectRelease(v8);
            _StringGuts._foreignAppendInPlace(_:)(v11, v8, 0, v2);
            swift_bridgeObjectRelease_n(v8, 2);
            v2 = v184;
LABEL_121:
            v1 = v185;
            goto LABEL_159;
          }
LABEL_104:
          v79 = _StringGuts.nativeCapacity.getter(v73, v9);
          if ((v80 & 1) != 0)
            v81 = 0;
          else
            v81 = v79;
          if (v81 + 0x4000000000000000 >= 0)
          {
            v82 = 2 * v81;
            if (v82 > v1)
              v1 = v82;
            goto LABEL_110;
          }
          __break(1u);
LABEL_201:
          if ((v45 & 0x1000000000000000) != 0)
          {
            v43 = _StringGuts._foreignConvertedToSmall()(v43, v45);
            v182 = v181;
            swift_bridgeObjectRelease(v45);
            v45 = v182;
          }
          else
          {
            if ((v43 & 0x1000000000000000) != 0)
            {
              v173 = (unsigned __int8 *)((v45 & 0xFFFFFFFFFFFFFFFLL) + 32);
              v174 = v43 & 0xFFFFFFFFFFFFLL;
            }
            else
            {
              v173 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v43, v45);
            }
            closure #1 in _StringGuts._convertedToSmall()(v173, v174, v186);
            swift_bridgeObjectRelease(v45);
            v45 = *((_QWORD *)&v186[0] + 1);
            v43 = *(_QWORD *)&v186[0];
          }
LABEL_56:
          v46 = HIBYTE(v11) & 0xF;
          v47 = HIBYTE(v45) & 0xF;
          v48 = v47 + v46;
          if ((unint64_t)(v47 + v46) <= 0xF)
          {
            if (v47)
            {
              v49 = 0;
              v50 = 0;
              do
              {
                v51 = v46 + v50;
                v52 = v50 + 1;
                if (v50 >= 8)
                  v53 = v45;
                else
                  v53 = v43;
                v54 = v53 >> (v49 & 0x38);
                v55 = (8 * v46 + v49) & 0x38;
                v56 = (-255 << v55) - 1;
                v57 = (unint64_t)v54 << v55;
                v58 = v57 | v56 & v11;
                v59 = v57 | v56 & v8;
                if (v51 < 8)
                  v8 = v59;
                else
                  v11 = v58;
                v49 += 8;
                v50 = v52;
              }
              while (v47 != v52);
            }
            swift_bridgeObjectRelease(v9);
            swift_bridgeObjectRelease(0xE100000000000000);
            v60 = 0xA000000000000000;
            if (!(v8 & 0x8080808080808080 | v11 & 0x80808080808080))
              v60 = 0xE000000000000000;
            v20 = v60 & 0xFF00000000000000 | (v48 << 56) | v11 & 0xFFFFFFFFFFFFFFLL;
            goto LABEL_69;
          }
LABEL_210:
          v177 = 266;
LABEL_212:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v177, 0);
        }
        v87 = 0;
        v3 = v9;
LABEL_137:
        v1 = v185;
        swift_bridgeObjectRelease_n(v8, 5);
        v109 = v187;
        if (v87)
        {
          if ((v3 & 0x1000000000000000) != 0)
          {
            v109 = _StringGuts._foreignConvertedToSmall()(v187, v9);
            v3 = v178;
          }
          else
          {
            if ((v187 & 0x1000000000000000) != 0)
            {
              v169 = (unsigned __int8 *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32);
              v170 = v187 & 0xFFFFFFFFFFFFLL;
            }
            else
            {
              v169 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v187, v9);
              v170 = v106;
            }
            swift_bridgeObjectRetain(v9, v106, v107, v108);
            closure #1 in _StringGuts._convertedToSmall()(v169, v170, v186);
            swift_bridgeObjectRelease(v9);
            v3 = *((_QWORD *)&v186[0] + 1);
            v109 = *(_QWORD *)&v186[0];
          }
        }
        v110._rawBits = (v2 << 16) | 1;
        v111._rawBits = 1;
        v112._rawBits = _StringGuts.validateScalarRange(_:)(v111, v110, v11, v8);
        if (v112._rawBits < 0x10000)
          v112._rawBits |= 3;
        v114 = specialized String.init(_:)(v112, v113, v11, v8);
        v116 = v115;
        swift_bridgeObjectRelease(v8);
        if ((v116 & 0x2000000000000000) != 0)
        {
          swift_bridgeObjectRelease(v116);
          v2 = v184;
        }
        else
        {
          v2 = v184;
          if ((v116 & 0x1000000000000000) != 0)
          {
            v114 = _StringGuts._foreignConvertedToSmall()(v114, v116);
            v180 = v179;
            swift_bridgeObjectRelease(v116);
            v116 = v180;
          }
          else
          {
            if ((v114 & 0x1000000000000000) != 0)
            {
              v171 = (unsigned __int8 *)((v116 & 0xFFFFFFFFFFFFFFFLL) + 32);
              v172 = v114 & 0xFFFFFFFFFFFFLL;
            }
            else
            {
              v171 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v114, v116);
            }
            closure #1 in _StringGuts._convertedToSmall()(v171, v172, v186);
            swift_bridgeObjectRelease(v116);
            v116 = *((_QWORD *)&v186[0] + 1);
            v114 = *(_QWORD *)&v186[0];
          }
        }
        v117 = HIBYTE(v3) & 0xF;
        v118 = HIBYTE(v116) & 0xF;
        v119 = v118 + v117;
        if ((unint64_t)(v118 + v117) <= 0xF)
        {
          if (v118)
          {
            v120 = 0;
            v121 = 0;
            do
            {
              v122 = v117 + v121;
              v123 = v121 + 1;
              if (v121 >= 8)
                v124 = v116;
              else
                v124 = v114;
              v125 = v124 >> (v120 & 0x38);
              v126 = (8 * v117 + v120) & 0x38;
              v127 = (-255 << v126) - 1;
              v128 = (unint64_t)v125 << v126;
              v129 = v128 | v127 & v3;
              v130 = v128 | v127 & v109;
              if (v122 < 8)
                v109 = v130;
              else
                v3 = v129;
              v120 += 8;
              v121 = v123;
            }
            while (v118 != v123);
          }
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v8);
          v131 = 0xA000000000000000;
          if (!(v109 & 0x8080808080808080 | v3 & 0x80808080808080))
            v131 = 0xE000000000000000;
          v187 = v109;
          v188 = v131 & 0xFF00000000000000 | (v119 << 56) | v3 & 0xFFFFFFFFFFFFFFLL;
          goto LABEL_159;
        }
        goto LABEL_210;
      }
LABEL_211:
      v177 = 258;
      goto LABEL_212;
    }
LABEL_184:
    __break(1u);
LABEL_185:
    v164 = String.UTF8View._foreignCount()();
    v21 = v164 + 1;
    if (__OFADD__(v164, 1))
      goto LABEL_187;
LABEL_18:
    v22 = v8 & ~v9;
    if ((v22 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v9 & 0xFFFFFFFFFFFFFFFLL))
    {
      v23 = _StringGuts.nativeUnusedCapacity.getter(v8, v9);
      if ((v24 & 1) != 0)
        goto LABEL_211;
      if (v21 <= 15)
      {
        if ((v9 & 0x2000000000000000) != 0)
          goto LABEL_51;
        if (v23 <= 0)
          goto LABEL_46;
      }
    }
    else if (v21 <= 15)
    {
      if ((v9 & 0x2000000000000000) != 0)
      {
LABEL_51:
        swift_bridgeObjectRelease_n(0xE100000000000000, 5);
        v11 = v9;
      }
      else
      {
LABEL_46:
        swift_bridgeObjectRelease_n(0xE100000000000000, 5);
        if ((v9 & 0x1000000000000000) != 0)
          goto LABEL_206;
        if ((v8 & 0x1000000000000000) != 0)
        {
          v38 = (unsigned __int8 *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          v38 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v8, v9);
          v11 = v35;
        }
        swift_bridgeObjectRetain(v9, v35, v36, v37);
        closure #1 in _StringGuts._convertedToSmall()(v38, v11, v186);
        swift_bridgeObjectRelease(v9);
        v11 = *((_QWORD *)&v186[0] + 1);
        v8 = *(_QWORD *)&v186[0];
      }
LABEL_52:
      v39._rawBits = 1;
      v40._rawBits = 65537;
      v41._rawBits = _StringGuts.validateScalarRange(_:)(v39, v40, 0x5CuLL, 0xE100000000000000);
      if (v41._rawBits < 0x10000)
        v41._rawBits |= 3;
      v43 = specialized String.init(_:)(v41, v42, 0x5CuLL, 0xE100000000000000);
      v45 = v44;
      swift_bridgeObjectRelease(0xE100000000000000);
      if ((v45 & 0x2000000000000000) == 0)
        goto LABEL_201;
      swift_bridgeObjectRelease(v45);
      goto LABEL_56;
    }
    v25 = _StringGuts.nativeUnusedCapacity.getter(v8, v9);
    v28 = (v26 & 1) == 0 && v25 > 0;
    if ((v22 & 0x2000000000000000) == 0 || !swift_isUniquelyReferenced_nonNull_native(v9 & 0xFFFFFFFFFFFFFFFLL))
    {
      if (!v28)
      {
LABEL_37:
        v29 = _StringGuts.nativeCapacity.getter(v8, v9);
        if ((v30 & 1) != 0)
          v31 = 0;
        else
          v31 = v29;
        if (v31 + 0x4000000000000000 < 0)
        {
          __break(1u);
LABEL_206:
          v8 = _StringGuts._foreignConvertedToSmall()(v8, v9);
          v11 = v175;
          goto LABEL_52;
        }
        v32 = 2 * v31;
        if (v32 > v21)
          v21 = v32;
      }
      _StringGuts.grow(_:)(v21);
      goto LABEL_44;
    }
    if (!v28)
      goto LABEL_37;
LABEL_44:
    swift_bridgeObjectRelease_n(0xE100000000000000, 6);
    v186[0] = xmmword_1816ABC80;
    v33 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 1, (uint64_t)v186, 1);
    _StringGuts.appendInPlace(_:isASCII:)(v33, v34, 1);
    swift_bridgeObjectRelease(0xE100000000000000);
  }
  if (v43)
  {
    v89 = 0;
    v90 = 0;
    v91 = v188;
    v1 = v185;
    do
    {
      v92 = v66 + v90;
      v93 = v90 + 1;
      if (v90 >= 8)
        v94 = v63;
      else
        v94 = v62;
      v95 = v94 >> (v89 & 0x38);
      v96 = (8 * v66 + v89) & 0x38;
      v97 = (-255 << v96) - 1;
      v98 = (unint64_t)v95 << v96;
      v99 = v98 | v97 & v91;
      v100 = v98 | v97 & v9;
      if (v92 < 8)
        v9 = v100;
      else
        v91 = v99;
      v89 += 8;
      v90 = v93;
    }
    while (v43 != v93);
  }
  else
  {
    v91 = v188;
    v1 = v185;
  }
  swift_bridgeObjectRelease(v188);
  swift_bridgeObjectRelease(v8);
  v132 = 0xA000000000000000;
  if (!(v9 & 0x8080808080808080 | v91 & 0x80808080808080))
    v132 = 0xE000000000000000;
  v187 = v9;
  v188 = v132 & 0xFF00000000000000 | (v88 << 56) | v91 & 0xFFFFFFFFFFFFFFLL;
LABEL_159:
  v8 = v187;
  v9 = v188;
  v133 = HIBYTE(v188) & 0xF;
  v134 = v187 & 0xFFFFFFFFFFFFLL;
  if ((v188 & 0x2000000000000000) != 0)
    v135 = HIBYTE(v188) & 0xF;
  else
    v135 = v187 & 0xFFFFFFFFFFFFLL;
  if (!v135 && (v187 & ~v188 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease(v188);
    v8 = 0;
    v157 = 0xE000000000000000;
    goto LABEL_191;
  }
  if ((v188 & 0x2000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v188);
    swift_bridgeObjectRelease(0xE000000000000000);
    v158 = 0xA000000000000000;
    if (!(v9 & 0x80808080808080 | v8 & 0x8080808080808080))
      v158 = 0xE000000000000000;
    v157 = v158 & 0xFF00000000000000 | (v133 << 56) | v9 & 0xFFFFFFFFFFFFFFLL;
    goto LABEL_191;
  }
  swift_bridgeObjectRetain_n(0xE000000000000000, 6, v85, v86);
  if ((v9 & 0x1000000000000000) == 0)
  {
    if ((v8 & ~v9 & 0x2000000000000000) != 0)
      goto LABEL_167;
LABEL_189:
    if (v134 > 15)
      goto LABEL_190;
LABEL_171:
    swift_bridgeObjectRelease_n(0xE000000000000000, 5);
    swift_bridgeObjectRetain(v9, v138, v139, v140);
    v141 = _StringGuts._convertedToSmall()(v8, v9);
    v143 = v142;
    swift_bridgeObjectRelease(v9);
    v144._rawBits = 1;
    v145._rawBits = 1;
    v146._rawBits = _StringGuts.validateScalarRange(_:)(v144, v145, 0, 0xE000000000000000);
    if (v146._rawBits < 0x10000)
      v146._rawBits |= 3;
    v148 = specialized String.init(_:)(v146, v147, 0, 0xE000000000000000);
    v150 = v149;
    swift_bridgeObjectRelease(0xE000000000000000);
    v151 = _StringGuts._convertedToSmall()(v148, v150);
    v153 = v152;
    swift_bridgeObjectRelease(v150);
    v154 = specialized _SmallString.init(_:appending:)(v141, v143, v151, v153);
    if ((v156 & 1) != 0)
      goto LABEL_210;
    v8 = v154;
    v157 = v155;
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(0xE000000000000000);
    goto LABEL_191;
  }
LABEL_188:
  v134 = String.UTF8View._foreignCount()();
  if ((v8 & ~v9 & 0x2000000000000000) == 0)
    goto LABEL_189;
LABEL_167:
  if (!swift_isUniquelyReferenced_nonNull_native(v9 & 0xFFFFFFFFFFFFFFFLL))
    goto LABEL_189;
  v136 = _StringGuts.nativeUnusedCapacity.getter(v8, v9);
  if ((v137 & 1) != 0)
    goto LABEL_211;
  if (v134 <= 15 && (v136 & 0x8000000000000000) != 0)
    goto LABEL_171;
LABEL_190:
  _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v134, 0);
  swift_bridgeObjectRelease_n(0xE000000000000000, 6);
  v186[0] = 0uLL;
  v165 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 0, (uint64_t)v186, 0);
  _StringGuts.appendInPlace(_:isASCII:)(v165, v166, 1);
  swift_bridgeObjectRelease(0xE000000000000000);
  v8 = v187;
  v157 = v188;
LABEL_191:
  v187 = v8;
  v188 = v157;
  v167 = specialized AnyKeyPath.withBuffer<A>(_:)(v2, &v187, v1);
  swift_bridgeObjectRelease(v188);
  return v167;
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
  uint64_t v1;
  char *v2;
  uint64_t *v3;
  void *object;
  uint64_t countAndFlagsBits;
  unint64_t v6;
  uint64_t v7;

  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  v6 = v3[1];
  v7 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000) == 0)
    v7 = *v3 & 0xFFFFFFFFFFFFLL;
  if (v7 || (*v3 & ~v6 & 0x2000000000000000) != 0)
  {
    _StringGuts.append(_:)(a1._countAndFlagsBits, (unint64_t)a1._object);
  }
  else
  {
    swift_bridgeObjectRetain((unint64_t)a1._object, (uint64_t)a1._object, v1, v2);
    swift_bridgeObjectRelease(v6);
    *v3 = countAndFlagsBits;
    v3[1] = (uint64_t)object;
  }
}

uint64_t Sequence.first(where:)@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const char *a4@<X3>, char *a5@<X8>)
{
  uint64_t v5;
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  unint64_t AssociatedConformanceWitness;
  void (*v25)(unint64_t, unint64_t);
  uint64_t v26;
  unsigned int (*v27)(char *, uint64_t, unint64_t);
  void (*v28)(char *, char *, unint64_t);
  char v29;
  uint64_t v30;
  char *v31;
  char *v33;
  uint64_t v34;
  uint64_t (*v35)(char *);
  uint64_t v36;
  const char *v37;
  unint64_t v38;
  uint64_t v39;

  v37 = a4;
  v35 = a1;
  v36 = a2;
  v33 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v39 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = (char *)&v33 - v9;
  v13 = type metadata accessor for Optional(0, AssociatedTypeWitness, v11, v12);
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v33 - v15;
  v17 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = swift_getAssociatedTypeWitness(0, a4, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v34 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v33 - v21;
  (*(void (**)(char *, unint64_t, uint64_t))(v17 + 16))(v19, v38, a3);
  v23 = (uint64_t)v37;
  (*((void (**)(uint64_t, const char *))v37 + 4))(a3, v37);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v23, a3, v20, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v25 = *(void (**)(unint64_t, unint64_t))(AssociatedConformanceWitness + 16);
  v37 = v22;
  v38 = v20;
  v25(v20, AssociatedConformanceWitness);
  v26 = v39;
  v27 = *(unsigned int (**)(char *, uint64_t, unint64_t))(v39 + 48);
  if (v27(v16, 1, AssociatedTypeWitness) == 1)
  {
LABEL_6:
    (*(void (**)(const char *, unint64_t))(v34 + 8))(v37, v38);
    v30 = 1;
    v31 = v33;
  }
  else
  {
    v28 = *(void (**)(char *, char *, unint64_t))(v26 + 32);
    while (1)
    {
      v28(v10, v16, AssociatedTypeWitness);
      v29 = v35(v10);
      if (v5)
      {
        (*(void (**)(char *, unint64_t))(v39 + 8))(v10, AssociatedTypeWitness);
        return (*(uint64_t (**)(const char *, unint64_t))(v34 + 8))(v37, v38);
      }
      if ((v29 & 1) != 0)
        break;
      (*(void (**)(char *, unint64_t))(v39 + 8))(v10, AssociatedTypeWitness);
      v25(v38, AssociatedConformanceWitness);
      if (v27(v16, 1, AssociatedTypeWitness) == 1)
        goto LABEL_6;
    }
    (*(void (**)(const char *, unint64_t))(v34 + 8))(v37, v38);
    v31 = v33;
    v28(v33, v10, AssociatedTypeWitness);
    v30 = 0;
  }
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, unint64_t))(v39 + 56))(v31, v30, 1, AssociatedTypeWitness);
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AnyKeyPath()
{
  return AnyKeyPath.debugDescription.getter();
}

uint64_t KeyValuePairs.startIndex.getter()
{
  return 0;
}

Swift::Int KeyValuePairs.endIndex.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_getTupleTypeMetadata2(0, a2, a3, 0, 0);
  return Array._getCount()();
}

uint64_t KeyValuePairs.subscript.getter(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t *TupleTypeMetadata2;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char *v16;
  char isClassOrObjCExistentialType;
  char v18;
  char *v19;
  id v21;
  void *v22;
  uint64_t v23;
  id v24;

  v23 = a2;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, a5, a6, 0, 0);
  v12 = *(TupleTypeMetadata2 - 1);
  v13 = *(_QWORD *)(v12 + 64);
  v14 = (uint64_t *)MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v16 = (char *)&v23 - v15;
  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v14, v14);
  v18 = ((a4 & 0xC000000000000001) == 0) | ~isClassOrObjCExistentialType;
  Array._checkSubscript(_:wasNativeTypeChecked:)(a3, (a4 & 0xC000000000000001) == 0 || (isClassOrObjCExistentialType & 1) == 0);
  if ((v18 & 1) != 0)
  {
    (*(void (**)(char *, unint64_t, unint64_t *))(v12 + 16))(v16, a4+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(_QWORD *)(v12 + 72) * a3, TupleTypeMetadata2);
  }
  else
  {
    v21 = _ArrayBuffer._getElementSlowPath(_:)(a3, a4, (uint64_t *)TupleTypeMetadata2);
    v22 = v21;
    if (v13 != 8)
    {
      swift_unknownObjectRelease(v21);
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
    }
    v24 = v21;
    (*(void (**)(char *, id *, unint64_t *))(v12 + 16))(v16, &v24, TupleTypeMetadata2);
    swift_unknownObjectRelease(v22);
  }
  v19 = &v16[*((int *)TupleTypeMetadata2 + 12)];
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(a1, v16, a5);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(a6 - 8) + 32))(v23, v19, a6);
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance KeyValuePairs<A, B>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for KeyValuePairs<A, B>, a1, a2);
  return RandomAccessCollection<>.index(before:)(a1, WitnessTable, (uint64_t)&protocol witness table for Int, a3);
}

_QWORD *protocol witness for BidirectionalCollection.formIndex(before:) in conformance KeyValuePairs<A, B>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Collection.formIndex(after:) in conformance _ArrayBuffer<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for KeyValuePairs<A, B>, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _UNKNOWN **))RandomAccessCollection<>.index(before:));
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance KeyValuePairs<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for KeyValuePairs<A, B>, a3, a3);
  return RandomAccessCollection<>.index(_:offsetBy:)(a1, a2, a3, WitnessTable, (uint64_t)&protocol witness table for Int, a4);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance KeyValuePairs<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for KeyValuePairs<A, B>, a4, a3);
  return RandomAccessCollection.index(_:offsetBy:limitedBy:)(a1, a2, a3, a4, WitnessTable, a5);
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance KeyValuePairs<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for KeyValuePairs<A, B>, a3, a3);
  return RandomAccessCollection<>.distance(from:to:)(a1, a2, a3, WitnessTable, (uint64_t)&protocol witness table for Int);
}

Swift::Int protocol witness for Collection.endIndex.getter in conformance KeyValuePairs<A, B>@<X0>(uint64_t a1@<X0>, Swift::Int *a2@<X8>)
{
  uint64_t *v2;
  Swift::Int result;

  result = KeyValuePairs.endIndex.getter(*v2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  *a2 = result;
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance KeyValuePairs<A, B>(_QWORD *a1, unint64_t *a2, uint64_t a3))()
{
  uint64_t *v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *TupleTypeMetadata2;
  uint64_t v11;
  char *v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;

  v7 = malloc(0x40uLL);
  *a1 = v7;
  v9 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(a3 + 24);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v9, v8, "key value ", 0);
  v7[4] = TupleTypeMetadata2;
  v11 = *(TupleTypeMetadata2 - 1);
  v7[5] = v11;
  v12 = (char *)malloc(*(_QWORD *)(v11 + 64));
  v7[6] = v12;
  v13 = KeyValuePairs.subscript.read(v7, *a2, *v3, v9, v8);
  v15 = v14;
  v7[7] = v13;
  (*(void (**)(char *))(*(_QWORD *)(v9 - 8) + 16))(v12);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(&v12[*((int *)TupleTypeMetadata2 + 12)], v15, v8);
  return protocol witness for Collection.subscript.read in conformance KeyValuePairs<A, B>;
}

void (*KeyValuePairs.subscript.read(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t a1)
{
  _QWORD *v10;
  unint64_t *TupleTypeMetadata2;
  uint64_t v12;
  char *v13;
  unint64_t *v14;
  uint64_t v15;
  char *v16;
  char isClassOrObjCExistentialType;
  char v18;
  char *v19;
  char *v20;
  id v22;
  void *v23;
  size_t v24;
  uint64_t v25;

  v10 = malloc(0x28uLL);
  *a1 = v10;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, a4, a5, 0, 0);
  v12 = *(TupleTypeMetadata2 - 1);
  v24 = *(_QWORD *)(v12 + 64);
  v13 = (char *)malloc(v24);
  v10[1] = v13;
  v25 = a4;
  v14 = swift_getTupleTypeMetadata2(0, a4, a5, "key value ", 0);
  v10[2] = v14;
  v15 = *(v14 - 1);
  v10[3] = v15;
  v16 = (char *)malloc(*(_QWORD *)(v15 + 64));
  v10[4] = v16;
  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)TupleTypeMetadata2, (uint64_t *)TupleTypeMetadata2);
  v18 = ((a3 & 0xC000000000000001) == 0) | ~isClassOrObjCExistentialType;
  Array._checkSubscript(_:wasNativeTypeChecked:)(a2, (a3 & 0xC000000000000001) == 0 || (isClassOrObjCExistentialType & 1) == 0);
  if ((v18 & 1) != 0)
  {
    (*(void (**)(char *, unint64_t, unint64_t *))(v12 + 16))(v13, a3+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(_QWORD *)(v12 + 72) * a2, TupleTypeMetadata2);
  }
  else
  {
    v22 = _ArrayBuffer._getElementSlowPath(_:)(a2, a3, (uint64_t *)TupleTypeMetadata2);
    v23 = v22;
    if (v24 != 8)
    {
      swift_unknownObjectRelease(v22);
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
    }
    *v10 = v22;
    (*(void (**)(char *, _QWORD *, unint64_t *))(v12 + 16))(v13, v10, TupleTypeMetadata2);
    swift_unknownObjectRelease(v23);
  }
  v19 = &v16[*((int *)v14 + 12)];
  v20 = &v13[*((int *)TupleTypeMetadata2 + 12)];
  (*(void (**)(char *, char *))(*(_QWORD *)(v25 - 8) + 32))(v16, v13);
  (*(void (**)(char *, char *))(*(_QWORD *)(a5 - 8) + 32))(v19, v20);
  return KeyValuePairs.subscript.read;
}

void KeyValuePairs.subscript.read(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;

  v1 = *(void **)a1;
  v2 = *(void **)(*(_QWORD *)a1 + 32);
  v3 = *(void **)(*(_QWORD *)a1 + 8);
  (*(void (**)(void *, _QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 24) + 8))(v2, *(_QWORD *)(*(_QWORD *)a1 + 16));
  free(v2);
  free(v3);
  free(v1);
}

uint64_t protocol witness for Collection.indices.getter in conformance KeyValuePairs<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, char *a3@<X8>)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for KeyValuePairs<A, B>, a1, a2);
  return RandomAccessCollection<>.indices.getter(a1, WitnessTable, (uint64_t)&protocol witness table for Int, a3);
}

uint64_t protocol witness for Collection.index(after:) in conformance KeyValuePairs<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for KeyValuePairs<A, B>, a2, a3);
  return RandomAccessCollection<>.index(after:)(a1, a2, WitnessTable, (uint64_t)&protocol witness table for Int, a4);
}

_QWORD *protocol witness for Collection.formIndex(after:) in conformance KeyValuePairs<A, B>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Collection.formIndex(after:) in conformance _ArrayBuffer<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for KeyValuePairs<A, B>, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _UNKNOWN **))RandomAccessCollection<>.index(after:));
}

_QWORD *protocol witness for Collection.formIndex(after:) in conformance _ArrayBuffer<A>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *(*a5)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _UNKNOWN **))
{
  uint64_t WitnessTable;
  _QWORD *result;
  uint64_t v10;

  WitnessTable = swift_getWitnessTable(a4, a2, a3);
  result = a5(&v10, a1, a2, WitnessTable, &protocol witness table for Int);
  *a1 = v10;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance KeyValuePairs<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for KeyValuePairs<A, B>, a1, a3);
  return Collection.underestimatedCount.getter(a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance KeyValuePairs<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for KeyValuePairs<A, B>, a1, a3);
  return Collection._copyToContiguousArray()(a1, WitnessTable);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance KeyValuePairs<A, B>(uint64_t a1)
{
  _QWORD *v1;

  return KeyValuePairs.description.getter(*v1, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t KeyValuePairs.description.getter(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *TupleTypeMetadata2;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  BOOL v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  void (*v42)(char *, char *, unint64_t);
  void (*v43)(char *, char *, uint64_t);
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  Swift::Int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *WitnessTable;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  void (*v59)(char *, char *, unint64_t);
  uint64_t v60;
  char *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  BOOL v70;
  Swift::Int v71;
  unint64_t v72;
  int64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  unint64_t v78;
  Swift::String::Index v79;
  Swift::String::Index v80;
  Swift::String::Index v81;
  Swift::String::Index v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  int64_t v101;
  char v102;
  BOOL v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  size_t v111;
  unint64_t v112;
  unint64_t v113;
  _QWORD *inited;
  char *boxed_opaque_existential_0Tm;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  Swift::Int v127;
  uint64_t v128;
  int64_t v129;
  char v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  unint64_t v134;
  Swift::String::Index v135;
  Swift::String::Index v136;
  Swift::String::Index v137;
  Swift::String::Index v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  char v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  int64_t v157;
  char v158;
  uint64_t v160;
  uint64_t v161;
  char v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  size_t v166;
  unint64_t v167;
  id v168;
  void *v169;
  Swift::Int v170;
  Swift::Int v171;
  unsigned __int8 *v172;
  uint64_t v173;
  unsigned __int8 *v174;
  unsigned __int8 *v175;
  uint64_t v176;
  unsigned __int8 *v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int64_t v187;
  char v188;
  int64_t v189;
  char v190;
  BOOL v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  Swift::String::Index v196;
  Swift::String::Index v197;
  Swift::String::Index v198;
  Swift::String::Index v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  char v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  uint64_t v214;
  char v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  size_t v219;
  Swift::Int v221;
  unsigned __int8 *v222;
  uint64_t v223;
  unsigned __int8 *v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  __int128 v231;
  __int128 v232;
  uint64_t v233;
  char *v234;
  unint64_t v235;
  uint64_t v236;
  char *v237;
  char *v238;
  uint64_t v239;
  uint64_t v240;
  char *v241;
  unint64_t v242;
  Swift::Int v243;
  uint64_t v244;
  unint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  void (*v248)(char *, char *, uint64_t);
  __int128 v249;
  uint64_t v250;
  char *v251;
  char *v252;
  uint64_t v253[5];
  uint64_t v254;
  __int128 v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;

  v3 = a3;
  v5 = a1;
  v247 = *(_QWORD *)(a3 - 8);
  v6 = MEMORY[0x1E0C80A78](a1);
  v252 = (char *)&v229 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v246 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v229 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v11, v12, 0, 0);
  v236 = *(TupleTypeMetadata2 - 1);
  v14 = *(_QWORD *)(v236 + 64);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v16 = (char *)&v229 - v15;
  v17 = swift_getTupleTypeMetadata2(0, a2, v3, "key value ", 0);
  v18 = *(v17 - 1);
  MEMORY[0x1E0C80A78](v17);
  v237 = (char *)&v229 - v19;
  v242 = v20;
  v240 = type metadata accessor for Optional(0, v20, v21, v22);
  v239 = *(_QWORD *)(v240 - 8);
  v23 = MEMORY[0x1E0C80A78](v240);
  v241 = (char *)&v229 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v26 = (char *)&v229 - v25;
  v243 = Array._getCount()();
  if (!v243)
    return 6109787;
  v234 = v16;
  v230 = v14;
  v27 = 0;
  v257 = 91;
  v258 = 0xE100000000000000;
  v256 = 0;
  v235 = v5 & 0xC000000000000001;
  v28 = 1;
  v249 = xmmword_1816ABBA0;
  v232 = xmmword_1816ABC50;
  v231 = xmmword_1816ABBB0;
  v233 = v5;
  v251 = v10;
  v245 = TupleTypeMetadata2;
  v238 = v26;
  v244 = v18;
  while (1)
  {
    v250 = v28;
    if (v27 == v243)
    {
      v31 = v241;
      v32 = v242;
      (*(void (**)(char *, uint64_t, uint64_t, unint64_t))(v18 + 56))(v241, 1, 1, v242);
    }
    else
    {
      v33 = v235 == 0;
      v34 = v33 | ~_swift_isClassOrObjCExistentialType((uint64_t)TupleTypeMetadata2, (uint64_t *)TupleTypeMetadata2);
      Array._checkSubscript(_:wasNativeTypeChecked:)(v27, v34 & 1);
      if ((v34 & 1) != 0)
      {
        v35 = v3;
        v36 = v5
            + ((*(unsigned __int8 *)(v236 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v236 + 80))
            + *(_QWORD *)(v236 + 72) * v27;
        v37 = v5;
        v38 = v234;
        (*(void (**)(char *, unint64_t, unint64_t *))(v236 + 16))(v234, v36, TupleTypeMetadata2);
      }
      else
      {
        v37 = v5;
        v168 = _ArrayBuffer._getElementSlowPath(_:)(v27, v5, (uint64_t *)TupleTypeMetadata2);
        v169 = v168;
        if (v230 != 8)
        {
          swift_unknownObjectRelease(v168);
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
        }
        v35 = v3;
        *(_QWORD *)&v255 = v168;
        v38 = v234;
        (*(void (**)(char *, __int128 *, unint64_t *))(v236 + 16))(v234, &v255, TupleTypeMetadata2);
        swift_unknownObjectRelease(v169);
      }
      v32 = v242;
      v39 = v237;
      v40 = &v237[*(int *)(v242 + 48)];
      v41 = &v38[*((int *)TupleTypeMetadata2 + 12)];
      v42 = *(void (**)(char *, char *, unint64_t))(v246 + 32);
      v42(v237, v38, a2);
      v43 = *(void (**)(char *, char *, uint64_t))(v247 + 32);
      v44 = v41;
      v45 = v35;
      v43(v40, v44, v35);
      v31 = v241;
      v46 = v39;
      v3 = v45;
      v42(v241, v46, a2);
      v43(&v31[*(int *)(v32 + 48)], v40, v45);
      swift_bridgeObjectRetain(v37, v47, v48, v49);
      v50 = Array._getCount()();
      if (v50 < 0)
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0xB2uLL, 0);
      v5 = v37;
      *(_QWORD *)&v255 = 0;
      *((_QWORD *)&v255 + 1) = v50;
      v52 = type metadata accessor for KeyValuePairs(0, a2, v45, v51);
      WitnessTable = (const char *)swift_getWitnessTable(&protocol conformance descriptor for KeyValuePairs<A, B>, v52, v53);
      specialized Collection._failEarlyRangeCheck(_:bounds:)((char *)&v256, (uint64_t)&v255, v52, WitnessTable);
      swift_bridgeObjectRelease(v37);
      if (__OFADD__(v27, 1))
      {
        __break(1u);
LABEL_240:
        __break(1u);
LABEL_241:
        __break(1u);
LABEL_242:
        __break(1u);
LABEL_243:
        __break(1u);
LABEL_244:
        v221 = String.UTF8View._foreignCount()();
        v185 = v221 + 1;
        if (!__OFADD__(v221, 1))
        {
LABEL_192:
          v186 = v3 & ~v27;
          if ((v186 & 0x2000000000000000) != 0
            && swift_isUniquelyReferenced_nonNull_native(v27 & 0xFFFFFFFFFFFFFFFLL))
          {
            v187 = _StringGuts.nativeUnusedCapacity.getter(v3, v27);
            if ((v188 & 1) != 0)
            {
LABEL_257:
              v225 = 258;
            }
            else
            {
              if (v185 > 15)
                goto LABEL_198;
              if ((v27 & 0x2000000000000000) != 0)
              {
                swift_bridgeObjectRelease_n(0xE100000000000000, 5);
                goto LABEL_210;
              }
              if (v187 > 0)
                goto LABEL_198;
LABEL_209:
              swift_bridgeObjectRelease_n(0xE100000000000000, 5);
              if ((v27 & 0x2000000000000000) != 0)
              {
LABEL_210:
                a2 = v27;
              }
              else if ((v27 & 0x1000000000000000) != 0)
              {
                v3 = _StringGuts._foreignConvertedToSmall()(v3, v27);
                a2 = v228;
              }
              else
              {
                if ((v3 & 0x1000000000000000) != 0)
                {
                  v224 = (unsigned __int8 *)((v27 & 0xFFFFFFFFFFFFFFFLL) + 32);
                }
                else
                {
                  v224 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v3, v27);
                  a2 = v193;
                }
                swift_bridgeObjectRetain(v27, v193, v194, v195);
                closure #1 in _StringGuts._convertedToSmall()(v224, a2, &v255);
                swift_bridgeObjectRelease(v27);
                a2 = *((_QWORD *)&v255 + 1);
                v3 = v255;
              }
              v196._rawBits = 65537;
              v197._rawBits = 1;
              v198._rawBits = _StringGuts.validateScalarRange(_:)(v197, v196, 0x5DuLL, 0xE100000000000000);
              if (v198._rawBits < 0x10000)
                v198._rawBits |= 3;
              v32 = specialized String.init(_:)(v198, v199, 0x5DuLL, 0xE100000000000000);
              v185 = v200;
              swift_bridgeObjectRelease(0xE100000000000000);
              if ((v185 & 0x2000000000000000) != 0)
              {
                swift_bridgeObjectRelease(v185);
                goto LABEL_215;
              }
LABEL_247:
              if ((v185 & 0x1000000000000000) != 0)
              {
                v32 = _StringGuts._foreignConvertedToSmall()(v32, v185);
                v227 = v226;
                swift_bridgeObjectRelease(v185);
                v185 = v227;
              }
              else
              {
                if ((v32 & 0x1000000000000000) != 0)
                {
                  v222 = (unsigned __int8 *)((v185 & 0xFFFFFFFFFFFFFFFLL) + 32);
                  v223 = v32 & 0xFFFFFFFFFFFFLL;
                }
                else
                {
                  v222 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v32, v185);
                }
                closure #1 in _StringGuts._convertedToSmall()(v222, v223, &v255);
                swift_bridgeObjectRelease(v185);
                v185 = *((_QWORD *)&v255 + 1);
                v32 = v255;
              }
LABEL_215:
              v201 = HIBYTE(a2) & 0xF;
              v202 = HIBYTE(v185) & 0xF;
              if ((unint64_t)(v202 + v201) <= 0xF)
              {
                if (v202)
                {
                  v203 = 0;
                  v204 = 0;
                  do
                  {
                    v205 = v201 + v204;
                    v206 = v204 + 1;
                    if (v204 >= 8)
                      v207 = v185;
                    else
                      v207 = v32;
                    v208 = v207 >> (v203 & 0x38);
                    v209 = (8 * v201 + v203) & 0x38;
                    v210 = (-255 << v209) - 1;
                    v211 = (unint64_t)v208 << v209;
                    v212 = v211 | v210 & a2;
                    v213 = v211 | v210 & v3;
                    if (v205 < 8)
                      v3 = v213;
                    else
                      a2 = v212;
                    v203 += 8;
                    v204 = v206;
                  }
                  while (v202 != v206);
                }
                swift_bridgeObjectRelease(v27);
                swift_bridgeObjectRelease(0xE100000000000000);
                return v3;
              }
LABEL_256:
              v225 = 266;
            }
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v225, 0);
          }
          if (v185 <= 15)
            goto LABEL_209;
LABEL_198:
          v189 = _StringGuts.nativeUnusedCapacity.getter(v3, v27);
          v192 = (v190 & 1) == 0 && v189 > 0;
          if ((v186 & 0x2000000000000000) != 0
            && swift_isUniquelyReferenced_nonNull_native(v27 & 0xFFFFFFFFFFFFFFFLL))
          {
            if (v192)
              goto LABEL_234;
LABEL_227:
            v214 = _StringGuts.nativeCapacity.getter(v3, v27);
            if ((v215 & 1) != 0)
              v216 = 0;
            else
              v216 = v214;
            if (v216 + 0x4000000000000000 < 0)
            {
              __break(1u);
              goto LABEL_256;
            }
            v217 = 2 * v216;
            if (v217 > v185)
              v185 = v217;
          }
          else if (!v192)
          {
            goto LABEL_227;
          }
          _StringGuts.grow(_:)(v185);
LABEL_234:
          swift_bridgeObjectRelease_n(0xE100000000000000, 6);
          v255 = xmmword_1816ABBC0;
          v218 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 1, (uint64_t)&v255, 1);
          _StringGuts.appendInPlace(_:isASCII:)(v218, v219, 1);
          swift_bridgeObjectRelease(0xE100000000000000);
          return v257;
        }
LABEL_246:
        __break(1u);
        goto LABEL_247;
      }
      v256 = v27 + 1;
      v18 = v244;
      (*(void (**)(char *, _QWORD, uint64_t, unint64_t))(v244 + 56))(v31, 0, 1, v32);
      v10 = v251;
      v26 = v238;
    }
    (*(void (**)(char *, char *, uint64_t))(v239 + 32))(v26, v31, v240);
    if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v18 + 48))(v26, 1, v32) == 1)
      break;
    v57 = v5;
    v58 = &v26[*(int *)(v32 + 48)];
    v59 = *(void (**)(char *, char *, unint64_t))(v246 + 32);
    v59(v10, v26, a2);
    v248 = *(void (**)(char *, char *, uint64_t))(v247 + 32);
    v248(v252, v58, v3);
    if ((v250 & 1) != 0)
      goto LABEL_82;
    v32 = v257;
    v27 = v258;
    v62 = HIBYTE(v258) & 0xF;
    v63 = v257 & 0xFFFFFFFFFFFFLL;
    if ((v258 & 0x2000000000000000) != 0)
      v64 = HIBYTE(v258) & 0xF;
    else
      v64 = v257 & 0xFFFFFFFFFFFFLL;
    if (!v64 && (v257 & ~v258 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease(v258);
      v257 = 8236;
      v112 = 0xE200000000000000;
      goto LABEL_80;
    }
    if ((v258 & 0x2000000000000000) != 0 && v62 <= 0xD)
    {
      v65 = 8 * (HIBYTE(v258) & 7);
      v66 = (-255 << v65) - 1;
      v67 = 44 << v65;
      v68 = v62 + 1;
      if (v62 >= 8)
      {
        v69 = v67 | v66 & v258;
LABEL_65:
        v105 = (32 << (8 * (v68 & 7u))) | ((-255 << (8 * (v68 & 7u))) - 1) & v69;
      }
      else
      {
        v32 = v67 | v66 & v257;
        if (v62 == 7)
        {
          v68 = 8;
          v69 = v258;
          goto LABEL_65;
        }
        v32 = (32 << (8 * (v68 & 7u))) | ((-255 << (8 * (v68 & 7u))) - 1) & v32;
        v105 = v258;
      }
      swift_bridgeObjectRelease(v258);
      swift_bridgeObjectRelease(0xE200000000000000);
      v113 = 0xE000000000000000;
      if (v32 & 0x8080808080808080 | v105 & 0x80808080808080)
        v113 = 0xA000000000000000;
      v112 = (v113 & 0xFF00000000000000 | (v62 << 56) | v105 & 0xFFFFFFFFFFFFFFLL) + 0x200000000000000;
      v257 = v32;
LABEL_80:
      v258 = v112;
LABEL_81:
      v10 = v251;
      goto LABEL_82;
    }
    swift_bridgeObjectRetain_n(0xE200000000000000, 6, v60, v61);
    if ((v27 & 0x1000000000000000) != 0)
    {
      v171 = String.UTF8View._foreignCount()();
      v71 = v171 + 2;
      if (__OFADD__(v171, 2))
        goto LABEL_241;
    }
    else
    {
      v70 = __OFADD__(v64, 2);
      v71 = v64 + 2;
      if (v70)
        goto LABEL_241;
    }
    v72 = v32 & ~v27;
    if ((v72 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v27 & 0xFFFFFFFFFFFFFFFLL))
    {
      v73 = _StringGuts.nativeUnusedCapacity.getter(v32, v27);
      if ((v74 & 1) != 0)
        goto LABEL_257;
      if (v71 > 15)
      {
LABEL_54:
        v101 = _StringGuts.nativeUnusedCapacity.getter(v32, v27);
        v104 = (v102 & 1) == 0 && v101 > 1;
        if ((v72 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v27 & 0xFFFFFFFFFFFFFFFLL))
        {
          if (v104)
            goto LABEL_74;
LABEL_67:
          v106 = _StringGuts.nativeCapacity.getter(v32, v27);
          if ((v107 & 1) != 0)
            v108 = 0;
          else
            v108 = v106;
          if (v108 + 0x4000000000000000 < 0)
            goto LABEL_243;
          v109 = 2 * v108;
          if (v109 > v71)
            v71 = v109;
        }
        else if (!v104)
        {
          goto LABEL_67;
        }
        _StringGuts.grow(_:)(v71);
LABEL_74:
        swift_bridgeObjectRelease_n(0xE200000000000000, 6);
        v255 = v231;
        v110 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 2, (uint64_t)&v255, 2);
        _StringGuts.appendInPlace(_:isASCII:)(v110, v111, 1);
        swift_bridgeObjectRelease(0xE200000000000000);
        goto LABEL_81;
      }
      if ((v27 & 0x2000000000000000) != 0)
      {
        swift_bridgeObjectRelease_n(0xE200000000000000, 5);
        goto LABEL_35;
      }
      if (v73 > 1)
        goto LABEL_54;
    }
    else if (v71 > 15)
    {
      goto LABEL_54;
    }
    swift_bridgeObjectRelease_n(0xE200000000000000, 5);
    if ((v27 & 0x2000000000000000) == 0)
    {
      if ((v27 & 0x1000000000000000) != 0)
      {
        v32 = _StringGuts._foreignConvertedToSmall()(v32, v27);
        v78 = v183;
      }
      else
      {
        if ((v32 & 0x1000000000000000) != 0)
        {
          v177 = (unsigned __int8 *)((v27 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          v177 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v32, v27);
          v63 = v75;
        }
        swift_bridgeObjectRetain(v27, v75, v76, v77);
        closure #1 in _StringGuts._convertedToSmall()(v177, v63, &v255);
        swift_bridgeObjectRelease(v27);
        v78 = *((_QWORD *)&v255 + 1);
        v32 = v255;
      }
      goto LABEL_36;
    }
LABEL_35:
    v78 = v27;
LABEL_36:
    v79._rawBits = 1;
    v80._rawBits = 131073;
    v81._rawBits = _StringGuts.validateScalarRange(_:)(v79, v80, 0x202CuLL, 0xE200000000000000);
    if (v81._rawBits < 0x10000)
      v81._rawBits |= 3;
    v83 = specialized String.init(_:)(v81, v82, 0x202CuLL, 0xE200000000000000);
    v85 = v84;
    swift_bridgeObjectRelease(0xE200000000000000);
    if ((v85 & 0x2000000000000000) != 0)
    {
      swift_bridgeObjectRelease(v85);
    }
    else if ((v85 & 0x1000000000000000) != 0)
    {
      v83 = _StringGuts._foreignConvertedToSmall()(v83, v85);
      v182 = v181;
      swift_bridgeObjectRelease(v85);
      v85 = v182;
    }
    else
    {
      if ((v83 & 0x1000000000000000) != 0)
      {
        v175 = (unsigned __int8 *)((v85 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v176 = v83 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v175 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v83, v85);
      }
      closure #1 in _StringGuts._convertedToSmall()(v175, v176, &v255);
      swift_bridgeObjectRelease(v85);
      v85 = *((_QWORD *)&v255 + 1);
      v83 = v255;
    }
    v86 = HIBYTE(v78) & 0xF;
    v87 = HIBYTE(v85) & 0xF;
    v88 = v87 + v86;
    if ((unint64_t)(v87 + v86) > 0xF)
      goto LABEL_256;
    if (v87)
    {
      v89 = 0;
      v90 = 0;
      do
      {
        v91 = v86 + v90;
        v92 = v90 + 1;
        if (v90 >= 8)
          v93 = v85;
        else
          v93 = v83;
        v94 = v93 >> (v89 & 0x38);
        v95 = (8 * v86 + v89) & 0x38;
        v96 = (-255 << v95) - 1;
        v97 = (unint64_t)v94 << v95;
        v98 = v97 | v96 & v78;
        v99 = v97 | v96 & v32;
        if (v91 < 8)
          v32 = v99;
        else
          v78 = v98;
        v89 += 8;
        v90 = v92;
      }
      while (v87 != v92);
    }
    swift_bridgeObjectRelease(v27);
    swift_bridgeObjectRelease(0xE200000000000000);
    v100 = 0xE000000000000000;
    if (v32 & 0x8080808080808080 | v78 & 0x80808080808080)
      v100 = 0xA000000000000000;
    v257 = v32;
    v258 = v100 & 0xFF00000000000000 | (v88 << 56) | v78 & 0xFFFFFFFFFFFFFFLL;
    v57 = v233;
    v10 = v251;
    v26 = v238;
LABEL_82:
    v32 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Any>();
    inited = swift_initStackObject(v32, &v254);
    *((_OWORD *)inited + 1) = v249;
    inited[7] = a2;
    boxed_opaque_existential_0Tm = (char *)__swift_allocate_boxed_opaque_existential_0Tm(inited + 4);
    v59(boxed_opaque_existential_0Tm, v10, a2);
    specialized _debugPrint<A>(_:separator:terminator:to:)((uint64_t)inited, 0x20uLL, 0xE100000000000000, 0, 0xE000000000000000, &v257);
    swift_bridgeObjectRelease((uint64_t)inited);
    swift_bridgeObjectRelease(0xE000000000000000);
    swift_bridgeObjectRelease(0xE100000000000000);
    v119 = v257;
    v118 = v258;
    v120 = HIBYTE(v258) & 0xF;
    v27 = v257 & 0xFFFFFFFFFFFFLL;
    if ((v258 & 0x2000000000000000) != 0)
      v121 = HIBYTE(v258) & 0xF;
    else
      v121 = v257 & 0xFFFFFFFFFFFFLL;
    if (!v121 && (v257 & ~v258 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease(v258);
      v257 = 8250;
      v258 = 0xE200000000000000;
      TupleTypeMetadata2 = v245;
LABEL_4:
      v5 = v57;
      v18 = v244;
      goto LABEL_5;
    }
    if ((v258 & 0x2000000000000000) != 0 && v120 <= 0xD)
    {
      v122 = 8 * (HIBYTE(v258) & 7);
      v123 = (-255 << v122) - 1;
      v124 = 58 << v122;
      v125 = v120 + 1;
      if (v120 >= 8)
      {
        v126 = v124 | v123 & v258;
        TupleTypeMetadata2 = v245;
LABEL_131:
        v160 = (32 << (8 * (v125 & 7u))) | ((-255 << (8 * (v125 & 7u))) - 1) & v126;
      }
      else
      {
        v119 = v124 | v123 & v257;
        TupleTypeMetadata2 = v245;
        if (v120 == 7)
        {
          v125 = 8;
          v126 = v258;
          goto LABEL_131;
        }
        v119 = (32 << (8 * (v125 & 7u))) | ((-255 << (8 * (v125 & 7u))) - 1) & v119;
        v160 = v258;
      }
      swift_bridgeObjectRelease(v258);
      swift_bridgeObjectRelease(0xE200000000000000);
      v167 = 0xE000000000000000;
      if (v119 & 0x8080808080808080 | v160 & 0x80808080808080)
        v167 = 0xA000000000000000;
      v257 = v119;
      v258 = (v167 & 0xFF00000000000000 | (v120 << 56) | v160 & 0xFFFFFFFFFFFFFFLL) + 0x200000000000000;
      goto LABEL_4;
    }
    swift_bridgeObjectRetain_n(0xE200000000000000, 6, v116, v117);
    if ((v118 & 0x1000000000000000) != 0)
    {
      v170 = String.UTF8View._foreignCount()();
      v127 = v170 + 2;
      if (__OFADD__(v170, 2))
        goto LABEL_240;
    }
    else
    {
      v70 = __OFADD__(v121, 2);
      v127 = v121 + 2;
      if (v70)
        goto LABEL_240;
    }
    v128 = v119 & ~v118;
    if ((v128 & 0x2000000000000000) == 0 || !swift_isUniquelyReferenced_nonNull_native(v118 & 0xFFFFFFFFFFFFFFFLL))
    {
      if (v127 > 15)
        goto LABEL_120;
      goto LABEL_100;
    }
    v129 = _StringGuts.nativeUnusedCapacity.getter(v119, v118);
    if ((v130 & 1) != 0)
      goto LABEL_257;
    if (v127 > 15)
    {
LABEL_120:
      v157 = _StringGuts.nativeUnusedCapacity.getter(v119, v118);
      v27 = (v158 & 1) == 0 && v157 > 1;
      if ((v128 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v118 & 0xFFFFFFFFFFFFFFFLL))
      {
        v5 = v57;
        v18 = v244;
        if ((v27 & 1) != 0)
          goto LABEL_140;
LABEL_133:
        v161 = _StringGuts.nativeCapacity.getter(v119, v118);
        if ((v162 & 1) != 0)
          v163 = 0;
        else
          v163 = v161;
        if (v163 + 0x4000000000000000 < 0)
          goto LABEL_242;
        v164 = 2 * v163;
        if (v164 > v127)
          v127 = v164;
      }
      else
      {
        v5 = v57;
        v18 = v244;
        if ((v27 & 1) == 0)
          goto LABEL_133;
      }
      _StringGuts.grow(_:)(v127);
LABEL_140:
      swift_bridgeObjectRelease_n(0xE200000000000000, 6);
      v255 = v232;
      v165 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 2, (uint64_t)&v255, 2);
      _StringGuts.appendInPlace(_:isASCII:)(v165, v166, 1);
      swift_bridgeObjectRelease(0xE200000000000000);
      TupleTypeMetadata2 = v245;
      goto LABEL_5;
    }
    if ((v118 & 0x2000000000000000) == 0)
    {
      if (v129 > 1)
        goto LABEL_120;
LABEL_100:
      swift_bridgeObjectRelease_n(0xE200000000000000, 5);
      v18 = v244;
      if ((v118 & 0x2000000000000000) != 0)
      {
        v134 = v118;
      }
      else if ((v118 & 0x1000000000000000) != 0)
      {
        v119 = _StringGuts._foreignConvertedToSmall()(v119, v118);
        v134 = v180;
      }
      else
      {
        if ((v119 & 0x1000000000000000) != 0)
        {
          v174 = (unsigned __int8 *)((v118 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          v174 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v119, v118);
          v27 = v131;
        }
        swift_bridgeObjectRetain(v118, v131, v132, v133);
        closure #1 in _StringGuts._convertedToSmall()(v174, v27, &v255);
        swift_bridgeObjectRelease(v118);
        v134 = *((_QWORD *)&v255 + 1);
        v119 = v255;
      }
      goto LABEL_102;
    }
    swift_bridgeObjectRelease_n(0xE200000000000000, 5);
    v134 = v118;
    v18 = v244;
LABEL_102:
    v135._rawBits = 1;
    v136._rawBits = 131073;
    v137._rawBits = _StringGuts.validateScalarRange(_:)(v135, v136, 0x203AuLL, 0xE200000000000000);
    if (v137._rawBits < 0x10000)
      v137._rawBits |= 3;
    v139 = specialized String.init(_:)(v137, v138, 0x203AuLL, 0xE200000000000000);
    v141 = v140;
    swift_bridgeObjectRelease(0xE200000000000000);
    if ((v141 & 0x2000000000000000) != 0)
    {
      swift_bridgeObjectRelease(v141);
    }
    else if ((v141 & 0x1000000000000000) != 0)
    {
      v139 = _StringGuts._foreignConvertedToSmall()(v139, v141);
      v179 = v178;
      swift_bridgeObjectRelease(v141);
      v141 = v179;
    }
    else
    {
      if ((v139 & 0x1000000000000000) != 0)
      {
        v172 = (unsigned __int8 *)((v141 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v173 = v139 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v172 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v139, v141);
      }
      closure #1 in _StringGuts._convertedToSmall()(v172, v173, &v255);
      swift_bridgeObjectRelease(v141);
      v141 = *((_QWORD *)&v255 + 1);
      v139 = v255;
    }
    v142 = HIBYTE(v134) & 0xF;
    v143 = HIBYTE(v141) & 0xF;
    v144 = v143 + v142;
    if ((unint64_t)(v143 + v142) > 0xF)
      goto LABEL_256;
    if (v143)
    {
      v145 = 0;
      v146 = 0;
      do
      {
        v147 = v142 + v146;
        v148 = v146 + 1;
        if (v146 >= 8)
          v149 = v141;
        else
          v149 = v139;
        v150 = v149 >> (v145 & 0x38);
        v151 = (8 * v142 + v145) & 0x38;
        v152 = (-255 << v151) - 1;
        v153 = (unint64_t)v150 << v151;
        v154 = v153 | v152 & v134;
        v155 = v153 | v152 & v119;
        if (v147 < 8)
          v119 = v155;
        else
          v134 = v154;
        v145 += 8;
        v146 = v148;
      }
      while (v143 != v148);
    }
    swift_bridgeObjectRelease(v118);
    swift_bridgeObjectRelease(0xE200000000000000);
    v156 = 0xE000000000000000;
    if (v119 & 0x8080808080808080 | v134 & 0x80808080808080)
      v156 = 0xA000000000000000;
    v257 = v119;
    v258 = v156 & 0xFF00000000000000 | (v144 << 56) | v134 & 0xFFFFFFFFFFFFFFLL;
    v5 = v233;
    TupleTypeMetadata2 = v245;
    v26 = v238;
LABEL_5:
    v29 = swift_initStackObject(v32, v253);
    *((_OWORD *)v29 + 1) = v249;
    v29[7] = v3;
    v30 = (char *)__swift_allocate_boxed_opaque_existential_0Tm(v29 + 4);
    v248(v30, v252, v3);
    specialized _debugPrint<A>(_:separator:terminator:to:)((uint64_t)v29, 0x20uLL, 0xE100000000000000, 0, 0xE000000000000000, &v257);
    swift_bridgeObjectRelease((uint64_t)v29);
    swift_bridgeObjectRelease(0xE000000000000000);
    swift_bridgeObjectRelease(0xE100000000000000);
    v28 = 0;
    v27 = v256;
    v10 = v251;
  }
  v3 = v257;
  v27 = v258;
  v32 = HIBYTE(v258) & 0xF;
  a2 = v257 & 0xFFFFFFFFFFFFLL;
  if ((v258 & 0x2000000000000000) != 0)
    v184 = HIBYTE(v258) & 0xF;
  else
    v184 = v257 & 0xFFFFFFFFFFFFLL;
  if (!v184 && (v257 & ~v258 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease(v258);
    return 93;
  }
  if ((v258 & 0x2000000000000000) == 0 || v32 == 15)
  {
    swift_bridgeObjectRetain_n(0xE100000000000000, 6, v55, v56);
    if ((v27 & 0x1000000000000000) != 0)
      goto LABEL_244;
    v70 = __OFADD__(v184, 1);
    v185 = v184 + 1;
    if (!v70)
      goto LABEL_192;
    goto LABEL_246;
  }
  if (v32 < 8)
    v3 = (93 << (8 * (HIBYTE(v258) & 7u))) | ((-255 << (8 * (HIBYTE(v258) & 7u))) - 1) & v257;
  swift_bridgeObjectRelease(v258);
  swift_bridgeObjectRelease(0xE100000000000000);
  return v3;
}

uint64_t LazyCollectionProtocol.lazy.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 16) + 32))();
}

uint64_t LazyCollectionProtocol<>.lazy.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 16) + 32))();
}

uint64_t LazySequence<>.startIndex.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(a2 + 64))(*(_QWORD *)(a1 + 16));
}

uint64_t LazySequence<>.endIndex.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(a2 + 72))(*(_QWORD *)(a1 + 16));
}

uint64_t LazySequence<>.indices.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(a2 + 96))(*(_QWORD *)(a1 + 16));
}

uint64_t LazySequence<>.index(after:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 184))(a1, *(_QWORD *)(a2 + 16));
}

uint64_t LazyDropWhileSequence<>.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t (*v7)(_BYTE *, _QWORD);
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  _BYTE v12[32];

  v6 = *(_QWORD *)(a2 + 16);
  v7 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(a3 + 80))(v12, a1, v6, a3);
  v9 = v8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(a3 + 8), v6, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a4, v9, AssociatedTypeWitness);
  return v7(v12, 0);
}

uint64_t LazySequence<>.isEmpty.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(a2 + 104))(*(_QWORD *)(a1 + 16));
}

uint64_t LazySequence<>.count.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(a2 + 112))(*(_QWORD *)(a1 + 16));
}

uint64_t LazySequence<>._customIndexOfEquatableElement(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 120))(a1, *(_QWORD *)(a2 + 16));
}

uint64_t LazySequence<>._customLastIndexOfEquatableElement(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 128))(a1, *(_QWORD *)(a2 + 16));
}

uint64_t LazySequence<>.index(_:offsetBy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a4 + 136))(a1, a2, *(_QWORD *)(a3 + 16));
}

uint64_t LazySequence<>.distance(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a4 + 152))(a1, a2, *(_QWORD *)(a3 + 16));
}

uint64_t protocol witness for Collection.startIndex.getter in conformance <> LazySequence<A>(uint64_t a1, uint64_t a2)
{
  return LazySequence<>.startIndex.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t protocol witness for Collection.endIndex.getter in conformance <> LazySequence<A>(uint64_t a1, uint64_t a2)
{
  return LazySequence<>.endIndex.getter(a1, *(_QWORD *)(a2 - 8));
}

void LazyDropWhileSequence<>.subscript.read(uint64_t a1)
{
  void *v1;
  void *v2;

  v1 = *(void **)a1;
  v2 = *(void **)(*(_QWORD *)a1 + 48);
  (*(void (**)(void *, _QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 40) + 8))(v2, *(_QWORD *)(*(_QWORD *)a1 + 32));
  free(v2);
  free(v1);
}

uint64_t protocol witness for Collection.indices.getter in conformance <> LazySequence<A>(uint64_t a1, uint64_t a2)
{
  return LazySequence<>.indices.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t protocol witness for Collection.isEmpty.getter in conformance <> LazySequence<A>(uint64_t a1, uint64_t a2)
{
  return LazySequence<>.isEmpty.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t protocol witness for Collection.count.getter in conformance <> LazySequence<A>(uint64_t a1, uint64_t a2)
{
  return LazySequence<>.count.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance <> LazySequence<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return LazySequence<>._customIndexOfEquatableElement(_:)(a1, a2, *(_QWORD *)(a3 - 8));
}

uint64_t protocol witness for Collection._customLastIndexOfEquatableElement(_:) in conformance <> LazySequence<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return LazySequence<>._customLastIndexOfEquatableElement(_:)(a1, a2, *(_QWORD *)(a3 - 8));
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance <> LazySequence<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return LazySequence<>.index(_:offsetBy:)(a1, a2, a3, *(_QWORD *)(a4 - 8));
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance <> LazySequence<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return LazySequence<>.index(_:offsetBy:limitedBy:)(a1, a2, a3, a4, *(_QWORD *)(a5 - 8));
}

uint64_t protocol witness for Collection.distance(from:to:) in conformance <> LazySequence<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return LazySequence<>.distance(from:to:)(a1, a2, a3, *(_QWORD *)(a4 - 8));
}

uint64_t protocol witness for Collection.index(after:) in conformance <> LazySequence<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return LazySequence<>.index(after:)(a1, a2, *(_QWORD *)(a3 - 8));
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance <> LazySequence<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Collection.formIndex(after:) in conformance <> LazyDropWhileSequence<A>(a1, a2, a3, (void (*)(uint64_t, uint64_t, const char *))LazySequence<>.index(after:));
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance <> LazyDropWhileSequence<A>(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, const char *))
{
  const char *v7;
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v7 = *(const char **)(a3 - 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v7, *(_QWORD *)(a2 + 16), (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)&v13 - v10;
  a4(a1, a2, v7);
  (*(void (**)(uint64_t, unint64_t))(v9 + 8))(a1, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, char *, unint64_t))(v9 + 32))(a1, v11, AssociatedTypeWitness);
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance <> LazySequence<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance <> LazyDropWhileSequence<A>(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))LazySequence<>.index(before:));
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance <> LazyDropWhileSequence<A>(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v7 = *(_QWORD *)(a3 - 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(v7 + 8), *(_QWORD *)(a2 + 16), (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)&v13 - v10;
  a4(a1, a2, v7);
  (*(void (**)(uint64_t, unint64_t))(v9 + 8))(a1, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, char *, unint64_t))(v9 + 32))(a1, v11, AssociatedTypeWitness);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance <> LazySequence<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return LazySequence<>.index(_:offsetBy:)(a1, a2, a3, *(_QWORD *)(*(_QWORD *)(a4 - 8) + 8));
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance <> LazySequence<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return LazySequence<>.index(_:offsetBy:limitedBy:)(a1, a2, a3, a4, *(_QWORD *)(*(_QWORD *)(a5 - 8) + 8));
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance <> LazySequence<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return LazySequence<>.distance(from:to:)(a1, a2, a3, *(_QWORD *)(*(_QWORD *)(a4 - 8) + 8));
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance <> LazySequence<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return LazySequence<>.index(_:offsetBy:)(a1, a2, a3, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 - 8) + 8) + 8));
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance <> LazySequence<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return LazySequence<>.index(_:offsetBy:limitedBy:)(a1, a2, a3, a4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 - 8) + 8) + 8));
}

uint64_t protocol witness for RandomAccessCollection.distance(from:to:) in conformance <> LazySequence<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return LazySequence<>.distance(from:to:)(a1, a2, a3, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 - 8) + 8) + 8));
}

uint64_t LazySequenceProtocol.lazy.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t LazySequenceProtocol<>.lazy.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t (*LazySequence._base.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t LazySequence.init(_base:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t LazySequence.makeIterator()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 16);
  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *))(v4 + 32))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 32))(v2);
}

uint64_t LazySequence.underestimatedCount.getter(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 24) + 40))(*(_QWORD *)(a1 + 16));
}

uint64_t LazySequence._copyContents(initializing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v9 = *(_QWORD *)(a4 + 16);
  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))((char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v4, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 + 24) + 64))(a1, a2, a3, v9);
}

uint64_t LazySequence._customContainsEquatableElement(_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a2 + 24) + 48))(a1, *(_QWORD *)(a2 + 16));
}

uint64_t LazySequence._copyToContiguousArray()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 16);
  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *))(v4 + 32))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 56))(v2);
}

uint64_t LazySequence.elements.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

BOOL static Unicode.UTF16._isASCII(_:)(unsigned __int16 a1)
{
  return a1 < 0x80u;
}

Swift::Bool __swiftcall _isASCII(_:)(Swift::UInt8 a1)
{
  return (a1 & 0x80) == 0;
}

Swift::Bool __swiftcall _isContinuation(_:)(Swift::UInt8 a1)
{
  return (a1 & 0xC0) == 128;
}

BOOL static Unicode.UTF8.isContinuation(_:)(char a1)
{
  return (a1 & 0xC0) == 128;
}

uint64_t Substring._wholeString.getter(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  swift_bridgeObjectRetain((unint64_t)a4, a2, a3, a4);
  return a3;
}

void String._withUTF8<A>(_:)(uint64_t (*a1)(_QWORD *, uint64_t), uint64_t a2, uint64_t a3, char *a4)
{
  swift_bridgeObjectRetain((unint64_t)a4, a2, a3, a4);
  String.withUTF8<A>(_:)(a1);
  swift_bridgeObjectRelease((uint64_t)a4);
}

void Substring._withUTF8<A>(_:)(void (*a1)(char *, int64_t), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  char *v10;

  swift_bridgeObjectRetain(a6, a2, a3, a4);
  Substring.withUTF8<A>(_:)(a1, a2, a7, v10);
  swift_bridgeObjectRelease(a6);
}

Swift::Bool __swiftcall _branchHint(_:expected:)(Swift::Bool _, Swift::Bool expected)
{
  return _;
}

void String._nativeCopyUTF16CodeUnits(into:range:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Swift/LegacyABI.swift", 21, 2, 0x50uLL, 0);
}

uint64_t String.UTF16View._shortHeuristic.getter()
{
  return 32;
}

uint64_t withExtendedLifetime<A, B>(_:_:)(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

{
  return a2();
}

uint64_t withUnsafePointer<A, B>(to:_:)(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

{
  return a2();
}

uint64_t _StringGuts.withCString<A>(_:)(void (*a1)(__objc2_class **), uint64_t a2, unint64_t a3, char *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD *);
  uint64_t v8;
  _QWORD v9[2];

  if (((unint64_t)a4 & 0x1000000000000000) != 0
    || !((unint64_t)a4 & 0x2000000000000000 | a3 & 0x1000000000000000))
  {
    return _StringGuts._slowWithCString<A>(_:)(a1, a2, a3, a4);
  }
  MEMORY[0x1E0C80A78](a1);
  if ((v5 & 0x2000000000000000) != 0)
  {
    v9[0] = v4;
    v9[1] = v5 & 0xFFFFFFFFFFFFFFLL;
    return v6(v9);
  }
  else
  {
    if ((v4 & 0x1000000000000000) == 0 && _StringObject.sharedUTF8.getter(v4, v5) && v8 < 0)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
    return partial apply for closure #1 in _StringGuts.withCString<A>(_:)();
  }
}

uint64_t _IndexBox._base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 80) - 8) + 16))(a1, v1 + *(_QWORD *)(*(_QWORD *)v1 + 96));
}

uint64_t _IndexBox._base.setter(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 80) - 8) + 40))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 96), a1);
}

uint64_t (*ManagedBuffer.header.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

void _IndexBox.__deallocating_deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 96));
  swift_deallocClassInstance(v0);
}

uint64_t ManagedBuffer.headerAddress.getter()
{
  uint64_t v0;

  return v0 + *(_QWORD *)(*(_QWORD *)v0 + 96);
}

uint64_t ManagedBuffer.capacity.getter()
{
  uint64_t *v0;
  uint64_t v1;
  size_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;

  v1 = *v0;
  v2 = _swift_stdlib_malloc_size(v0);
  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 88) - 8);
  v4 = *(_QWORD *)(v3 + 72);
  if (!v4)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3829uLL, 0);
  v5 = v2
     - ((*(unsigned __int8 *)(v3 + 80) + (unint64_t)*(unsigned int *)(*v0 + 48)) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  if (v4 == -1 && v5 == 0x8000000000000000)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3830uLL, 0);
  return v5 / v4;
}

uint64_t ManagedBuffer.withUnsafeMutablePointerToHeader<A>(_:)(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;

  return a1(v1 + *(_QWORD *)(*(_QWORD *)v1 + 96));
}

uint64_t ManagedBuffer.withUnsafeMutablePointerToElements<A>(_:)(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 88) - 8) + 80);
  return a1(v1 + ((v2 + *(unsigned int *)(*(_QWORD *)v1 + 48)) & ~v2));
}

uint64_t ManagedBuffer.withUnsafeMutablePointers<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 88) - 8) + 80);
  return a1(v1 + *(_QWORD *)(*(_QWORD *)v1 + 96), v1 + ((v2 + *(unsigned int *)(*(_QWORD *)v1 + 48)) & ~v2));
}

uint64_t (*ManagedBufferPointer._nativeBuffer.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t ManagedBufferPointer.init(bufferClass:minimumCapacity:makingHeaderWith:)(uint64_t a1, uint64_t a2, void (*a3)(id, uint64_t (*)(void *a1, uint64_t a2, uint64_t a3, char *a4), _BYTE *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  id v33;
  _BYTE v34[8];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(id, uint64_t (*)(void *, uint64_t, uint64_t, char *), _BYTE *);

  v38 = a3;
  v11 = *(_QWORD *)(a5 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = (uint64_t *)MEMORY[0x1E0C80A78](a1);
  result = static ManagedBufferPointer._checkValidBufferClass(_:creating:)(v13, 1, v14, v15);
  if (a2 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "ManagedBufferPointer must have non-negative capacity", 52, 2, "Swift/ManagedBuffer.swift", 25, 2, 0x14DuLL, 0);
  v17 = *(unsigned __int8 *)(v11 + 80);
  v18 = (v17 + 16) & ~v17;
  v19 = v18 + v12;
  if (__OFADD__(v18, v12))
  {
    __break(1u);
    goto LABEL_16;
  }
  v20 = *(_QWORD *)(a6 - 8);
  v21 = *(unsigned __int8 *)(v20 + 80) + 1;
  v22 = __CFADD__(v19, v21);
  v23 = v19 + v21;
  if (v22)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v24 = *(_QWORD *)(v20 + 72);
  v25 = a2 * v24;
  if ((unsigned __int128)(a2 * (__int128)v24) >> 64 != (a2 * v24) >> 63)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v26 = (v23 - 1) & -(uint64_t)v21;
  if (__OFADD__(v26, v25))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  v27 = v17 + 1;
  if (v21 > v27)
    v27 = v21;
  if (v27 <= 8)
    v27 = 8;
  v28 = swift_bufferAllocate(a1, v26 + v25, v27 - 1);
  v29 = (void *)MEMORY[0x1E0C80A78](v28);
  v35 = a5;
  v36 = a6;
  v33 = swift_unknownObjectRetain(v29, v30, v31, v32);
  v38(v33, partial apply for closure #1 in closure #1 in ManagedBufferPointer.init(bufferClass:minimumCapacity:makingHeaderWith:), v34);
  swift_unknownObjectRelease(v28);
  if (v6)
    swift_unknownObjectRelease(v28);
  else
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))((char *)v28 + v18, (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a5);
  return (uint64_t)v28;
}

_QWORD *ManagedBufferPointer.init(bufferClass:minimumCapacity:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  result = (_QWORD *)static ManagedBufferPointer._checkValidBufferClass(_:creating:)(a1, 1, a3, a4);
  if (a2 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "ManagedBufferPointer must have non-negative capacity", 52, 2, "Swift/ManagedBuffer.swift", 25, 2, 0x14DuLL, 0);
  v9 = *(_QWORD *)(a3 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v10 + 16) & ~v10;
  v12 = *(_QWORD *)(v9 + 64);
  v13 = __OFADD__(v11, v12);
  v14 = v11 + v12;
  if (v13)
  {
    __break(1u);
    goto LABEL_13;
  }
  v15 = *(_QWORD *)(a4 - 8);
  v16 = *(unsigned __int8 *)(v15 + 80) + 1;
  v17 = __CFADD__(v14, v16);
  v18 = v14 + v16;
  if (v17)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v19 = *(_QWORD *)(v15 + 72);
  v20 = a2 * v19;
  if ((unsigned __int128)(a2 * (__int128)v19) >> 64 != (a2 * v19) >> 63)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v21 = (v18 - 1) & -(uint64_t)v16;
  if (__OFADD__(v21, v20))
  {
LABEL_15:
    __break(1u);
    return result;
  }
  v22 = v10 + 1;
  if (v16 > v22)
    v22 = v16;
  if (v22 <= 8)
    v22 = 8;
  return swift_bufferAllocate((uint64_t)a1, v21 + v20, v22 - 1);
}

uint64_t closure #1 in closure #1 in ManagedBufferPointer.init(bufferClass:minimumCapacity:makingHeaderWith:)(void *a1, uint64_t a2, uint64_t a3, char *a4)
{
  id v7;
  const void *v8;
  size_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;

  v7 = swift_unknownObjectRetain(a1, a2, a3, a4);
  v8 = (const void *)ManagedBufferPointer.init(unsafeBufferObject:)((unint64_t)v7, a2);
  v9 = _swift_stdlib_malloc_size(v8);
  v10 = *(_QWORD *)(a2 - 8);
  v11 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v12 = *(_QWORD *)(v10 + 64);
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_10;
  }
  v14 = *(_QWORD *)(a3 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80) + 1;
  v16 = __CFADD__(v13, v15);
  v17 = v13 + v15;
  if (v16)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3829uLL, 0);
  }
  v18 = *(_QWORD *)(v14 + 72);
  if (!v18)
    goto LABEL_11;
  v19 = v9 - ((v17 - 1) & -v15);
  if (v19 == 0x8000000000000000 && v18 == -1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3830uLL, 0);
  swift_release((uint64_t)a1);
  return v19 / v18;
}

unint64_t ManagedBufferPointer.init(unsafeBufferObject:)(unint64_t a1, uint64_t a2)
{
  unint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  ObjectType = swift_getObjectType(a1);
  _swift_getObjCClassInstanceExtents(ObjectType);
  if (v5 < 0)
    goto LABEL_8;
  if (v5 == 16)
    goto LABEL_6;
  _swift_getObjCClassInstanceExtents(ObjectType);
  if (v6 < 0)
LABEL_8:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
  v7 = *(_QWORD *)(a2 - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = __OFADD__(v8, v9);
  v11 = v8 + v9;
  if (v10)
  {
    __break(1u);
LABEL_11:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "ManagedBufferPointer buffer class has illegal stored properties", 63, 2, "Swift/ManagedBuffer.swift", 25, 2, 0x1F5uLL, 0);
  }
  if (v6 != v11)
    goto LABEL_11;
LABEL_6:
  if ((_swift_objcClassUsesNativeSwiftReferenceCounting(ObjectType) & 1) == 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "ManagedBufferPointer buffer class must be non-@objc", 51, 2, "Swift/ManagedBuffer.swift", 25, 2, 0x1FDuLL, 0);
  return a1;
}

uint64_t ManagedBufferPointer.capacity.getter(const void *a1, uint64_t a2, uint64_t a3)
{
  size_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;

  v5 = _swift_stdlib_malloc_size(a1);
  v6 = *(_QWORD *)(a2 - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = v7 + v8;
  if (__OFADD__(v7, v8))
  {
    __break(1u);
    goto LABEL_10;
  }
  v10 = *(_QWORD *)(a3 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80) + 1;
  v12 = __CFADD__(v9, v11);
  v13 = v9 + v11;
  if (v12)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3829uLL, 0);
  }
  v14 = *(_QWORD *)(v10 + 72);
  if (!v14)
    goto LABEL_11;
  v15 = v5 - ((v13 - 1) & -v11);
  if (v15 == 0x8000000000000000 && v14 == -1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3830uLL, 0);
  return v15 / v14;
}

uint64_t static ManagedBufferPointer._checkValidBufferClass(_:creating:)(uint64_t *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t result;

  _swift_getObjCClassInstanceExtents((uint64_t)a1);
  if (v8 < 0)
    goto LABEL_10;
  if (v8 == 16)
    goto LABEL_8;
  if ((a2 & 1) != 0)
  {
    v10 = (uint64_t *)type metadata accessor for ManagedBuffer(0, a3, a4, v9);
    if (!swift_dynamicCastMetatype(a1, v10))
LABEL_13:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "ManagedBufferPointer buffer class has illegal stored properties", 63, 2, "Swift/ManagedBuffer.swift", 25, 2, 0x1F5uLL, 0);
  }
  _swift_getObjCClassInstanceExtents((uint64_t)a1);
  if (v11 < 0)
LABEL_10:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
  v12 = *(_QWORD *)(a3 - 8);
  v13 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v14 = *(_QWORD *)(v12 + 64);
  v15 = __OFADD__(v13, v14);
  v16 = v13 + v14;
  if (v15)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (v11 != v16)
    goto LABEL_13;
LABEL_8:
  result = _swift_objcClassUsesNativeSwiftReferenceCounting((uint64_t)a1);
  if ((result & 1) == 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "ManagedBufferPointer buffer class must be non-@objc", 51, 2, "Swift/ManagedBuffer.swift", 25, 2, 0x1FDuLL, 0);
  return result;
}

uint64_t static ManagedBufferPointer._elementOffset.getter(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  v2 = *(_QWORD *)(result - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = __OFADD__(v3, v4);
  v6 = v3 + v4;
  if (v5)
  {
    __break(1u);
  }
  else
  {
    v7 = *(unsigned __int8 *)(*(_QWORD *)(a2 - 8) + 80) + 1;
    v8 = __CFADD__(v6, v7);
    v9 = v6 + v7;
    if (!v8)
      return (v9 - 1) & -v7;
  }
  __break(1u);
  return result;
}

uint64_t static ManagedBufferPointer._alignmentMask.getter(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  if (*(unsigned __int8 *)(*(_QWORD *)(a2 - 8) + 80) + 1 <= v2 + 1)
    LODWORD(v3) = v2 + 1;
  else
    LODWORD(v3) = *(unsigned __int8 *)(*(_QWORD *)(a2 - 8) + 80) + 1;
  if (v3 <= 8)
    v3 = 8;
  else
    v3 = v3;
  return v3 - 1;
}

uint64_t ManagedBufferPointer.header.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1+ ((*(unsigned __int8 *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a2 - 8) + 80)), a2);
}

uint64_t _ss20ManagedBufferPointerVsRi__rlE6headerxvpRi__r0_lAByxq_GTK@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t *, _QWORD);
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + a1 - 16);
  v5 = (uint64_t (*)(uint64_t *, _QWORD))ManagedBufferPointer.header.read();
  (*(void (**)(uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a3);
  return v5(&v7, 0);
}

uint64_t _ss20ManagedBufferPointerVsRi__rlE6headerxvpRi__r0_lAByxq_GTk(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t *, _QWORD);
  uint64_t v7;
  uint64_t v9;

  v5 = *(_QWORD *)(a4 + a3 - 16);
  type metadata accessor for ManagedBufferPointer(0, v5, *(_QWORD *)(a4 + a3 - 8), a4);
  v6 = (uint64_t (*)(uint64_t *, _QWORD))ManagedBufferPointer.header.modify();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24))(v7, a1, v5);
  return v6(&v9, 0);
}

uint64_t ManagedBufferPointer._headerPointer.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(a2 - 8) + 80);
  return a1 + ((v2 + 16) & ~v2);
}

uint64_t ManagedBufferPointer.header.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(*v2+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80)), a1);
}

uint64_t ManagedBufferPointer._elementPointer.getter(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a2 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = __OFADD__(v4, v5);
  v7 = v4 + v5;
  if (v6)
  {
    __break(1u);
  }
  else
  {
    v8 = *(unsigned __int8 *)(*(_QWORD *)(a3 - 8) + 80) + 1;
    v9 = __CFADD__(v7, v8);
    v10 = v7 + v8;
    if (!v9)
    {
      result += (v10 - 1) & -v8;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t ManagedBufferPointer.withUnsafeMutablePointerToHeader<A>(_:)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(a4 - 8) + 80);
  return a1(a3 + ((v4 + 16) & ~v4));
}

uint64_t (*ManagedBufferPointer.withUnsafeMutablePointerToElements<A>(_:)(uint64_t (*result)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v5 = *(_QWORD *)(a4 - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = __OFADD__(v6, v7);
  v9 = v6 + v7;
  if (v8)
  {
    __break(1u);
  }
  else
  {
    v10 = *(unsigned __int8 *)(*(_QWORD *)(a5 - 8) + 80) + 1;
    v11 = __CFADD__(v9, v10);
    v12 = v9 + v10;
    if (!v11)
      return (uint64_t (*)(uint64_t))result(a3 + ((v12 - 1) & -v10));
  }
  __break(1u);
  return result;
}

uint64_t (*ManagedBufferPointer.withUnsafeMutablePointers<A>(_:)(uint64_t (*result)(unint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(unint64_t, uint64_t)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a4 - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = v6 + v7;
  if (__OFADD__(v6, v7))
  {
    __break(1u);
  }
  else
  {
    v9 = *(unsigned __int8 *)(*(_QWORD *)(a5 - 8) + 80) + 1;
    v10 = __CFADD__(v8, v9);
    v11 = v8 + v9;
    if (!v10)
      return (uint64_t (*)(unint64_t, uint64_t))result(a3 + v6, a3 + ((v11 - 1) & -v9));
  }
  __break(1u);
  return result;
}

uint64_t static ManagedBufferPointer._headerOffset.getter(uint64_t a1)
{
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  return (v1 + 16) & ~v1;
}

BOOL static ManagedBufferPointer.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ManagedBufferPointer<A, B>(uint64_t *a1, uint64_t *a2)
{
  return static ManagedBufferPointer.== infix(_:_:)(*a1, *a2);
}

uint64_t isKnownUniquelyReferenced<A>(_:)(unint64_t *a1)
{
  return swift_isUniquelyReferenced_nonNull(*a1);
}

uint64_t isKnownUniquelyReferenced<A>(_:)(uint64_t *a1)
{
  return swift_isUniquelyReferenced(*a1);
}

uint64_t (*LazyMapSequence._base.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t LazyMapSequence.init(_base:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t result;
  _QWORD *v14;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a7, a1, a4);
  result = type metadata accessor for LazyMapSequence(0, a4, a5, a6);
  v14 = (_QWORD *)(a7 + *(int *)(result + 44));
  *v14 = a2;
  v14[1] = a3;
  return result;
}

uint64_t (*LazyMapSequence.Iterator._base.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t LazyMapSequence._transform.getter(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v5 = (uint64_t *)(v4 + *(int *)(a1 + 44));
  v6 = *v5;
  swift_retain((unint64_t *)v5[1], a2, a3, a4);
  return v6;
}

uint64_t LazyMapSequence.Iterator.base.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(a1 + 32), *(_QWORD *)(a1 + 16), (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a2, v2, AssociatedTypeWitness);
}

uint64_t LazyMapSequence.Iterator.init(_base:_transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, const char *a6@<X5>, uint64_t a7@<X8>)
{
  unint64_t AssociatedTypeWitness;
  uint64_t result;
  _QWORD *v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a6, a4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a7, a1, AssociatedTypeWitness);
  result = type metadata accessor for LazyMapSequence.Iterator(0, a4, a5, (uint64_t)a6);
  v16 = (_QWORD *)(a7 + *(int *)(result + 44));
  *v16 = a2;
  v16[1] = a3;
  return result;
}

unint64_t specialized LazyMapSequence.Iterator.next()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  Swift::Unicode::Scalar v5;
  Swift::Int scalarLength;
  void (*v7)(_QWORD *__return_ptr, Swift::UInt32 *);
  uint64_t v8;
  Swift::tuple_Unicode_Scalar_scalarLength_Int v10;
  _QWORD v11[2];
  Swift::UInt32 value;

  v1 = v0[2];
  v2 = v0[3];
  if (v1 >= v2)
  {
    v8 = 0;
  }
  else
  {
    v3 = v0[1];
    if ((v3 & 0x1000000000000000) != 0)
    {
      v10 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v1 << 16));
      scalarLength = v10.scalarLength;
      v5._value = (Swift::UInt32)v10._0;
    }
    else
    {
      if ((v3 & 0x2000000000000000) != 0)
      {
        v11[0] = *v0;
        v11[1] = v3 & 0xFFFFFFFFFFFFFFLL;
        v5._value = *((unsigned __int8 *)v11 + v1);
        if (*((char *)v11 + v1) < 0)
          __asm { BR              X10 }
      }
      else
      {
        if ((*v0 & 0x1000000000000000) != 0)
          v4 = (unsigned __int8 *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32);
        else
          v4 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(*v0, v0[1]);
        v5._value = v4[v1];
        if ((char)v4[v1] < 0)
          __asm { BR              X11 }
      }
      scalarLength = 1;
    }
    v0[2] += scalarLength;
    v7 = (void (*)(_QWORD *__return_ptr, Swift::UInt32 *))v0[4];
    value = v5._value;
    v7(v11, &value);
    v8 = LODWORD(v11[0]);
  }
  LOBYTE(v11[0]) = v1 >= v2;
  return v8 | ((unint64_t)(v1 >= v2) << 32);
}

{
  Swift::String::Index *v0;
  Swift::UInt64 rawBits;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  Swift::UInt64 v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  Swift::UInt64 v13;
  unint64_t v14;
  Swift::UInt64 v15;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  Swift::Int v20;
  id v21;
  uint64_t v22;
  uint8x16_t *v23;
  uint64_t v24;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  Swift::UInt64 v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  Swift::Int v41;
  int64_t v42;
  char *v43;
  uint64_t v44;
  Swift::Int v45;
  int v46;
  char *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  Swift::Int v53;
  char *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  void (*v58)(unint64_t *__return_ptr, _QWORD *);
  uint64_t v59;
  Swift::String v60;
  Swift::Int v61;
  Swift::String::Index v62;
  uint64_t v63;
  uint64_t v64;
  Swift::String::Index v65;
  Swift::Int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  Swift::String::Index v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD v78[2];
  unint64_t v79;
  uint64_t v80;

  rawBits = v0[4]._rawBits;
  v2 = v0[1]._rawBits;
  v3 = rawBits >> 14;
  v4 = v2 >> 14;
  if (rawBits >> 14 == v2 >> 14)
    return 0;
  v6 = v0->_rawBits;
  v7 = v0[2]._rawBits;
  v8 = v0[3]._rawBits;
  v9 = (v7 >> 59) & 1;
  if ((v8 & 0x1000000000000000) == 0)
    LOBYTE(v9) = 1;
  v10 = v0[4]._rawBits & 0xC;
  v11 = 4 << v9;
  if ((rawBits & 1) == 0 || v10 == v11)
  {
    v15 = rawBits >> 14;
    v13 = v0[4]._rawBits;
    if (v10 == v11)
    {
      v13 = _StringGuts._slowEnsureMatchingEncoding(_:)(v0[4])._rawBits;
      v15 = v13 >> 14;
    }
    if (v15 < v6 >> 14 || v15 >= v4)
      goto LABEL_19;
    if ((v13 & 1) == 0)
      v13 = _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)v13)._rawBits & 0xFFFFFFFFFFFFFFF2 | 1;
  }
  else
  {
    v12 = v3 < v4 && v3 >= v6 >> 14;
    v13 = v0[4]._rawBits;
    if (!v12)
    {
      v14 = 143;
      goto LABEL_45;
    }
  }
  v17 = (v13 >> 8) & 0x3F;
  v18 = v13 >> 16;
  v19 = v2 >> 16;
  if (!v17)
  {
    if (v18 == v19)
    {
      v17 = 0;
      goto LABEL_25;
    }
    if ((v8 & 0x1000000000000000) == 0)
    {
      if ((v8 & 0x2000000000000000) != 0)
      {
        v79 = v7;
        v80 = v8 & 0xFFFFFFFFFFFFFFLL;
        v45 = v18 + 1;
        if (v18 + 1 == (HIBYTE(v8) & 0xF))
          goto LABEL_70;
        v46 = *(unsigned __int16 *)((char *)&v79 + v18);
      }
      else
      {
        if ((v7 & 0x1000000000000000) != 0)
        {
          v43 = (char *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v44 = v7 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          v43 = (char *)_StringObject.sharedUTF8.getter(v7, v8);
        }
        v45 = v18 + 1;
        if (v18 + 1 == v44)
        {
LABEL_70:
          if (v19 >= v45)
            v19 = v45;
          if (v19 >= v18)
          {
LABEL_29:
            if ((v8 & 0x2000000000000000) != 0)
            {
              v79 = v7;
              v80 = v8 & 0xFFFFFFFFFFFFFFLL;
              if ((uint64_t)(HIBYTE(v8) & 0xF) >= v19)
              {
                v24 = v19 - v18;
                if (v19 - v18 < 0)
                  _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
                v23 = (uint8x16_t *)((char *)&v79 + v18);
                goto LABEL_36;
              }
            }
            else if ((v7 & 0x1000000000000000) != 0)
            {
              v21 = (id)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
              v22 = v7 & 0xFFFFFFFFFFFFLL;
              if ((uint64_t)(v7 & 0xFFFFFFFFFFFFLL) >= v19)
              {
LABEL_32:
                v23 = (uint8x16_t *)specialized UnsafeBufferPointer.init(rebasing:)(v18, v19, (uint64_t)v21, v22);
LABEL_36:
                countAndFlagsBits = specialized static String._uncheckedFromUTF8(_:)(v23, v24);
                goto LABEL_37;
              }
            }
            else
            {
              v21 = _StringObject.sharedUTF8.getter(v7, v8);
              v22 = v61;
              if (v61 >= v19)
                goto LABEL_32;
            }
            _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
          }
LABEL_73:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
        }
        if (!v43)
          goto LABEL_119;
        v46 = *(unsigned __int16 *)&v43[v18];
      }
      if (v46 != 2573 && (v46 & 0x80808080) == 0)
        goto LABEL_70;
    }
    v17 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v18);
  }
LABEL_25:
  v20 = v17 + v18;
  if (v19 >= v20)
    v19 = v20;
  if ((v8 & 0x1000000000000000) == 0)
  {
    if (v19 >= v18)
      goto LABEL_29;
    goto LABEL_73;
  }
  v60 = _StringGuts.foreignErrorCorrectedGrapheme(startingAt:endingAt:)(v18, v19);
  object = v60._object;
  countAndFlagsBits = v60._countAndFlagsBits;
LABEL_37:
  v27 = countAndFlagsBits;
  v28 = (uint64_t)object;
  v29 = v0->_rawBits;
  v30 = v0[1]._rawBits;
  v31 = v0[2]._rawBits;
  v32 = v0[3]._rawBits;
  v33 = (v32 & 0x1000000000000000) == 0 || (v31 & 0x800000000000000) != 0;
  v34 = 4 << v33;
  v35 = v30 >> 14;
  if ((rawBits & 2) == 0 || v10 == v34)
  {
    if (v10 == v34)
    {
      v62._rawBits = rawBits;
      v63 = (uint64_t)object;
      v64 = v27;
      v65._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v62)._rawBits;
      v27 = v64;
      v28 = v63;
      rawBits = v65._rawBits;
      v3 = v65._rawBits >> 14;
    }
    if (v3 >= v29 >> 14 && v3 < v35)
    {
      if ((rawBits & 1) != 0)
      {
        if ((v29 & 2) != 0)
          goto LABEL_52;
      }
      else
      {
        v77 = v28;
        v69 = v27;
        v70._rawBits = _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits;
        v27 = v69;
        v28 = v77;
        rawBits = rawBits & 0xC | v70._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
        if ((v29 & 2) != 0)
        {
LABEL_52:
          if ((rawBits & 2) != 0)
            goto LABEL_56;
        }
      }
      if (rawBits >> 14 != v29 >> 14 && rawBits >> 14 != v35)
      {
        v36 = rawBits;
        v37 = v28;
        v38 = v27;
        v39 = _StringGuts._slowRoundDownToNearestCharacter(_:in:)(v36, v29, v30, v31, v32);
        v27 = v38;
        v28 = v37;
        rawBits = v39;
      }
      goto LABEL_56;
    }
LABEL_19:
    v14 = 43;
    goto LABEL_45;
  }
  if (v3 < v29 >> 14 || v3 >= v35)
  {
    v14 = 267;
LABEL_45:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Substring index is out of bounds", 32, 2, "Swift/StringIndexValidation.swift", 33, 2, v14, 0);
  }
LABEL_56:
  v40 = (rawBits >> 8) & 0x3F;
  v41 = rawBits >> 16;
  v42 = v30 >> 16;
  if (v40)
    goto LABEL_86;
  if (v41 == v42)
  {
    v40 = 0;
    goto LABEL_86;
  }
  if ((v32 & 0x1000000000000000) != 0)
    goto LABEL_115;
  if ((v32 & 0x2000000000000000) == 0)
  {
    if ((v31 & 0x1000000000000000) != 0)
    {
      v47 = (char *)((v32 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v48 = v31 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v75 = v28;
      v76 = v27;
      v47 = (char *)_StringObject.sharedUTF8.getter(v31, v32);
      v27 = v76;
      v28 = v75;
    }
    if (v41 + 1 == v48)
      goto LABEL_85;
    if (!v47)
      goto LABEL_119;
    v49 = *(unsigned __int16 *)&v47[v41];
    if (v49 == 2573)
      goto LABEL_115;
LABEL_84:
    if ((v49 & 0x80808080) == 0)
      goto LABEL_85;
    goto LABEL_115;
  }
  v79 = v31;
  v80 = v32 & 0xFFFFFFFFFFFFFFLL;
  if (v41 + 1 == (HIBYTE(v32) & 0xF))
  {
LABEL_85:
    v40 = 1;
    goto LABEL_86;
  }
  v49 = *(unsigned __int16 *)((char *)&v79 + v41);
  if (v49 != 2573)
    goto LABEL_84;
LABEL_115:
  v71 = v28;
  v72 = v27;
  v40 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v41);
  v27 = v72;
  v28 = v71;
LABEL_86:
  v50 = v40 + v41;
  if (v42 < v40 + v41)
    v50 = v42;
  v51 = v50 << 16;
  v52 = v50 & 0xFFFFFFFFFFFFLL;
  if ((v50 & 0xFFFFFFFFFFFFLL) != v42)
  {
    if ((v32 & 0x1000000000000000) != 0)
      goto LABEL_110;
    if ((v32 & 0x2000000000000000) != 0)
    {
      v79 = v31;
      v80 = v32 & 0xFFFFFFFFFFFFFFLL;
      if (v52 + 1 == (HIBYTE(v32) & 0xF))
        goto LABEL_101;
      v56 = *(unsigned __int16 *)((char *)&v79 + v52);
      if (v56 == 2573)
        goto LABEL_110;
LABEL_100:
      if ((v56 & 0x80808080) != 0)
        goto LABEL_110;
LABEL_101:
      v53 = 1;
      goto LABEL_102;
    }
    if ((v31 & 0x1000000000000000) != 0)
    {
      v54 = (char *)((v32 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v55 = v31 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v73 = v28;
      v74 = v27;
      v54 = (char *)_StringObject.sharedUTF8.getter(v31, v32);
      v27 = v74;
      v28 = v73;
    }
    if (v52 + 1 == v55)
      goto LABEL_101;
    if (v54)
    {
      v56 = *(unsigned __int16 *)&v54[v52];
      if (v56 == 2573)
      {
LABEL_110:
        v66 = v52;
        v67 = v28;
        v68 = v27;
        v53 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v66);
        v27 = v68;
        v28 = v67;
        if (v53 > 63)
          goto LABEL_103;
        goto LABEL_102;
      }
      goto LABEL_100;
    }
LABEL_119:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
  }
  v53 = 0;
LABEL_102:
  v51 |= v53 << 8;
LABEL_103:
  v57 = 8;
  if (v33)
    v57 = 4;
  v0[4]._rawBits = v29 & 2 | v57 | v51 | 1;
  v58 = (void (*)(unint64_t *__return_ptr, _QWORD *))v0[5]._rawBits;
  v78[0] = v27;
  v78[1] = v28;
  v59 = v28;
  v58(&v79, v78);
  swift_bridgeObjectRelease(v59);
  return v79;
}

uint64_t specialized LazyMapSequence.Iterator.next()()
{
  uint64_t *v0;
  Swift::Int v1;
  uint64_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  Swift::Int v6;
  int v7;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  uint8x16_t *v14;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v17;
  void (*v18)(uint64_t *__return_ptr, _QWORD *);
  Swift::String v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;

  v1 = v0[2];
  if (v1 >= v0[3])
    return 0;
  v2 = *v0;
  v3 = v0[1];
  if ((v3 & 0x1000000000000000) != 0)
  {
LABEL_30:
    v9 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v1);
    v6 = v9 + v1;
    v10 = *v0;
    v11 = v0[1];
    if ((v11 & 0x1000000000000000) != 0)
      goto LABEL_31;
    goto LABEL_17;
  }
  if ((v3 & 0x2000000000000000) != 0)
  {
    v24 = *v0;
    v25 = v3 & 0xFFFFFFFFFFFFFFLL;
    v6 = v1 + 1;
    if (v1 + 1 == (HIBYTE(v3) & 0xF))
      goto LABEL_16;
    v7 = *(unsigned __int16 *)((char *)&v24 + v1);
  }
  else
  {
    if ((v2 & 0x1000000000000000) != 0)
    {
      v4 = (char *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v5 = v2 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v4 = (char *)_StringObject.sharedUTF8.getter(*v0, v0[1]);
    }
    v6 = v1 + 1;
    if (v1 + 1 == v5)
      goto LABEL_16;
    if (!v4)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
    v7 = *(unsigned __int16 *)&v4[v1];
  }
  if (v7 == 2573 || (v7 & 0x8080) != 0)
    goto LABEL_30;
LABEL_16:
  v9 = 1;
  v10 = *v0;
  v11 = v0[1];
  if ((v11 & 0x1000000000000000) != 0)
  {
LABEL_31:
    v20 = _StringGuts.foreignErrorCorrectedGrapheme(startingAt:endingAt:)(v1, v6);
    object = v20._object;
    countAndFlagsBits = v20._countAndFlagsBits;
    goto LABEL_28;
  }
LABEL_17:
  if (v6 < v1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  if ((v11 & 0x2000000000000000) != 0)
  {
    v24 = v10;
    v25 = v11 & 0xFFFFFFFFFFFFFFLL;
    if ((v1 & 0x8000000000000000) == 0)
    {
      if ((uint64_t)(HIBYTE(v11) & 0xF) >= v6)
      {
        if (v9 < 0)
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
        v14 = (uint8x16_t *)((char *)&v24 + v1);
        goto LABEL_27;
      }
      goto LABEL_34;
    }
    goto LABEL_37;
  }
  if ((v10 & 0x1000000000000000) != 0)
  {
    v12 = (id)((v11 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v13 = v10 & 0xFFFFFFFFFFFFLL;
    if ((v1 & 0x8000000000000000) == 0)
      goto LABEL_21;
LABEL_37:
    v21 = 1860;
LABEL_38:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, v21, 0);
  }
  v12 = _StringObject.sharedUTF8.getter(v10, v11);
  v13 = v22;
  if (v1 < 0)
    goto LABEL_37;
LABEL_21:
  if (v13 < v6)
  {
LABEL_34:
    v21 = 1861;
    goto LABEL_38;
  }
  v14 = (uint8x16_t *)specialized UnsafeBufferPointer.init(rebasing:)(v1, v6, (uint64_t)v12, v13);
LABEL_27:
  countAndFlagsBits = specialized static String._uncheckedFromUTF8(_:)(v14, v9);
LABEL_28:
  v17 = (uint64_t)object;
  v0[2] = v6;
  v18 = (void (*)(uint64_t *__return_ptr, _QWORD *))v0[4];
  v23[0] = countAndFlagsBits;
  v23[1] = object;
  v18(&v24, v23);
  swift_bridgeObjectRelease(v17);
  return v24;
}

uint64_t LazyMapSequence.Iterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  const char *v4;
  uint64_t v5;
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t AssociatedConformanceWitness;
  void (*v18)(unint64_t *, unint64_t);
  unint64_t *v19;
  void (*v20)(char *);
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = a2;
  v4 = *(const char **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v4, v5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v28 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v26 = (char *)&v26 - v7;
  v27 = type metadata accessor for Optional(0, AssociatedTypeWitness, v8, v9);
  v10 = *(_QWORD *)(v27 - 8);
  v11 = MEMORY[0x1E0C80A78](v27);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v26 - v14;
  v16 = swift_getAssociatedTypeWitness(255, v4, v5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v4, v5, v16, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v18 = *(void (**)(unint64_t *, unint64_t))(AssociatedConformanceWitness + 16);
  v19 = swift_checkMetadataState(0, v16);
  v18(v19, AssociatedConformanceWitness);
  v20 = *(void (**)(char *))(v2 + *(int *)(a1 + 44));
  v21 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v22 = v28;
  v21(v13, v15, v27);
  if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v22 + 48))(v13, 1, AssociatedTypeWitness) == 1)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 56))(v29, 1, 1);
  v24 = v26;
  (*(void (**)(char *, char *, unint64_t))(v22 + 32))(v26, v13, AssociatedTypeWitness);
  v25 = v29;
  v20(v24);
  (*(void (**)(char *, unint64_t))(v22 + 8))(v24, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 56))(v25, 0, 1);
}

__n128 LazyMapSequence.makeIterator()@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;
  uint64_t v13;

  v3 = v2;
  v6 = *(_QWORD *)(a1 + 16);
  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))((char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v2, v6);
  v9 = *(_QWORD *)(a1 + 32);
  (*(void (**)(uint64_t, uint64_t))(v9 + 32))(v6, v9);
  v10 = *(int *)(a1 + 44);
  v11 = type metadata accessor for LazyMapSequence.Iterator(0, v6, *(_QWORD *)(a1 + 24), v9);
  result = *(__n128 *)(v3 + v10);
  *(__n128 *)(a2 + *(int *)(v11 + 44)) = result;
  return result;
}

uint64_t LazyMapSequence.underestimatedCount.getter(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 32) + 40))(*(_QWORD *)(a1 + 16));
}

Swift::Int specialized LazyMapSequence<>.formIndex(after:)(unint64_t *a1)
{
  unint64_t *v1;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t rawBits;
  int v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  Swift::Int v17;
  int64_t v18;
  char *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  Swift::Int result;
  char *v26;
  uint64_t v27;
  int v28;
  uint64_t v30;
  char v31;
  Swift::String::Index v32;
  uint64_t v33;
  Swift::Int v34;
  int64_t v35;
  Swift::Int v36;
  Swift::Int v37;
  int64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;

  v4 = *v1;
  v3 = v1[1];
  v5 = v1[2];
  v6 = v1[3];
  rawBits = *a1;
  v8 = (v6 & 0x1000000000000000) == 0 || (v5 & 0x800000000000000) != 0;
  v9 = rawBits & 0xC;
  v10 = 4 << v8;
  v11 = v3 >> 14;
  if ((rawBits & 2) != 0 && v9 != v10)
  {
    if (rawBits >> 14 >= v4 >> 14 && rawBits >> 14 < v11)
      goto LABEL_27;
    v13 = 267;
LABEL_20:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Substring index is out of bounds", 32, 2, "Swift/StringIndexValidation.swift", 33, 2, v13, 0);
  }
  if (v9 == v10)
    rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
  v14 = v4 >> 14;
  if (rawBits >> 14 < v4 >> 14 || rawBits >> 14 >= v11)
  {
    v13 = 43;
    goto LABEL_20;
  }
  if ((rawBits & 1) != 0)
  {
    if ((v4 & 2) != 0)
      goto LABEL_23;
  }
  else
  {
    v39 = v8;
    v31 = rawBits;
    v32._rawBits = _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits;
    v33 = v31 & 0xC;
    v14 = v4 >> 14;
    v8 = v39;
    rawBits = v33 | v32._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
    if ((v4 & 2) != 0)
    {
LABEL_23:
      if ((rawBits & 2) != 0)
        goto LABEL_27;
    }
  }
  if (rawBits >> 14 != v14 && rawBits >> 14 != v11)
    rawBits = _StringGuts._slowRoundDownToNearestCharacter(_:in:)(rawBits, v4, v3, v5, v6);
LABEL_27:
  v16 = (rawBits >> 8) & 0x3F;
  v17 = rawBits >> 16;
  v18 = v3 >> 16;
  if (v16)
    goto LABEL_42;
  if (v17 == v18)
  {
    v16 = 0;
    goto LABEL_42;
  }
  if ((v6 & 0x1000000000000000) != 0)
    goto LABEL_69;
  if ((v6 & 0x2000000000000000) == 0)
  {
    if ((v5 & 0x1000000000000000) != 0)
    {
      v19 = (char *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v20 = v5 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v37 = rawBits >> 16;
      v38 = v18;
      v19 = (char *)_StringObject.sharedUTF8.getter(v5, v6);
      v18 = v38;
      v17 = v37;
    }
    if (v17 + 1 == v20)
      goto LABEL_41;
    if (!v19)
      goto LABEL_72;
    v21 = *(unsigned __int16 *)&v19[v17];
    if (v21 == 2573)
      goto LABEL_69;
LABEL_40:
    if ((v21 & 0x80808080) == 0)
      goto LABEL_41;
    goto LABEL_69;
  }
  v40 = v5;
  v41 = v6 & 0xFFFFFFFFFFFFFFLL;
  if (v17 + 1 == (HIBYTE(v6) & 0xF))
  {
LABEL_41:
    v16 = 1;
    goto LABEL_42;
  }
  v21 = *(unsigned __int16 *)((char *)&v40 + v17);
  if (v21 != 2573)
    goto LABEL_40;
LABEL_69:
  v34 = v17;
  v35 = v18;
  v36 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v17);
  v18 = v35;
  v16 = v36;
  v17 = v34;
LABEL_42:
  v22 = v16 + v17;
  if (v18 < v22)
    v22 = v18;
  v23 = v22 << 16;
  v24 = v22 & 0xFFFFFFFFFFFFLL;
  if ((v22 & 0xFFFFFFFFFFFFLL) == v18)
  {
    result = 0;
LABEL_61:
    v23 |= result << 8;
    goto LABEL_62;
  }
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) != 0)
    {
      v40 = v5;
      v41 = v6 & 0xFFFFFFFFFFFFFFLL;
      if (v24 + 1 == (HIBYTE(v6) & 0xF))
        goto LABEL_60;
      v28 = *(unsigned __int16 *)((char *)&v40 + v24);
LABEL_55:
      if (v28 == 2573 || (v28 & 0x8080) != 0)
        goto LABEL_65;
LABEL_60:
      result = 1;
      goto LABEL_61;
    }
    if ((v5 & 0x1000000000000000) != 0)
    {
      v26 = (char *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v27 = v5 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v26 = (char *)_StringObject.sharedUTF8.getter(v5, v6);
    }
    if (v24 + 1 == v27)
      goto LABEL_60;
    if (v26)
    {
      v28 = *(unsigned __int16 *)&v26[v24];
      goto LABEL_55;
    }
LABEL_72:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
  }
LABEL_65:
  result = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v24);
  if (result <= 63)
    goto LABEL_61;
LABEL_62:
  v30 = 8;
  if (v8)
    v30 = 4;
  *a1 = v4 & 2 | v30 | v23 | 1;
  return result;
}

uint64_t LazyMapSequence<>.formIndex(after:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 192))(a1, *(_QWORD *)(a2 + 16));
}

uint64_t specialized LazyMapSequence<>.subscript.getter(Swift::String::Index a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *__return_ptr, Swift::UInt32 *))
{
  Swift::String::Index v7;
  Swift::UInt64 v8;
  unsigned __int8 *v9;
  Swift::UInt32 value;
  _QWORD v12[2];
  Swift::UInt32 v13;

  v7._rawBits = _StringGuts.validateScalarIndex(_:)(a1)._rawBits;
  if ((a3 & 0x1000000000000000) != 0)
  {
    value = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v7._rawBits & 0xFFFFFFFFFFFF0000))._0._value;
  }
  else
  {
    v8 = v7._rawBits >> 16;
    if ((a3 & 0x2000000000000000) != 0)
    {
      v12[0] = a2;
      v12[1] = a3 & 0xFFFFFFFFFFFFFFLL;
      value = *((unsigned __int8 *)v12 + v8);
      if (*((char *)v12 + v8) < 0)
        __asm { BR              X10 }
    }
    else
    {
      if ((a2 & 0x1000000000000000) != 0)
        v9 = (unsigned __int8 *)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a2, a3);
      value = v9[v8];
      if ((char)v9[v8] < 0)
        __asm { BR              X11 }
    }
  }
  v13 = value;
  a4(v12, &v13);
  return LODWORD(v12[0]);
}

uint64_t specialized LazyMapSequence<>.subscript.getter(Swift::String::Index a1, uint64_t a2, unint64_t a3, void (*a4)(uint64_t *__return_ptr, _QWORD *))
{
  Swift::String::Index v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  int v14;
  int v15;
  id v17;
  uint64_t v18;
  uint8x16_t *v19;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v22;
  int64_t v24;
  Swift::String v25;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;

  v7._rawBits = _StringGuts.validateScalarIndex(_:)(a1)._rawBits;
  v8 = (v7._rawBits >> 8) & 0x3F;
  v9 = v7._rawBits >> 16;
  if (v8)
    goto LABEL_24;
  v10 = a2 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0x2000000000000000) != 0)
    v11 = HIBYTE(a3) & 0xF;
  else
    v11 = a2 & 0xFFFFFFFFFFFFLL;
  if (v7._rawBits >> 14 != 4 * v11)
  {
    if ((a3 & 0x1000000000000000) != 0)
      goto LABEL_39;
    if ((a3 & 0x2000000000000000) != 0)
    {
      v27 = a2;
      v28 = a3 & 0xFFFFFFFFFFFFFFLL;
      if (v9 + 1 != (HIBYTE(a3) & 0xF))
      {
        v15 = *(unsigned __int16 *)((char *)&v27 + v9);
        if (v15 == 2573 || (v15 & 0x80808080) != 0)
          goto LABEL_39;
      }
    }
    else
    {
      if ((a2 & 0x1000000000000000) != 0)
        v13 = (char *)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v13 = (char *)_StringObject.sharedUTF8.getter(a2, a3);
      if (v9 + 1 != v10)
      {
        if (!v13)
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
        v14 = *(unsigned __int16 *)&v13[v9];
        if (v14 == 2573 || (v14 & 0x80808080) != 0)
        {
LABEL_39:
          v8 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v9);
          v12 = v8 + v9;
          if ((a3 & 0x1000000000000000) == 0)
            goto LABEL_25;
LABEL_40:
          v25 = _StringGuts.foreignErrorCorrectedGrapheme(startingAt:endingAt:)(v9, v12);
          object = v25._object;
          countAndFlagsBits = v25._countAndFlagsBits;
          goto LABEL_34;
        }
      }
    }
    v8 = 1;
LABEL_24:
    v12 = v8 + v9;
    if ((a3 & 0x1000000000000000) == 0)
      goto LABEL_25;
    goto LABEL_40;
  }
  v8 = 0;
  v12 = v7._rawBits >> 16;
  if ((a3 & 0x1000000000000000) != 0)
    goto LABEL_40;
LABEL_25:
  if (v12 < v9)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  if ((a3 & 0x2000000000000000) != 0)
  {
    v27 = a2;
    v28 = a3 & 0xFFFFFFFFFFFFFFLL;
    if ((uint64_t)(HIBYTE(a3) & 0xF) >= v12)
    {
      if (v8 < 0)
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      v19 = (uint8x16_t *)((char *)&v27 + v9);
      goto LABEL_33;
    }
    goto LABEL_37;
  }
  if ((a2 & 0x1000000000000000) == 0)
  {
    v17 = _StringObject.sharedUTF8.getter(a2, a3);
    v18 = v24;
    if (v24 >= v12)
      goto LABEL_29;
LABEL_37:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
  }
  v17 = (id)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
  v18 = a2 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0xFFFFFFFFFFFFLL) < v12)
    goto LABEL_37;
LABEL_29:
  v19 = (uint8x16_t *)specialized UnsafeBufferPointer.init(rebasing:)(v9, v12, (uint64_t)v17, v18);
LABEL_33:
  countAndFlagsBits = specialized static String._uncheckedFromUTF8(_:)(v19, v8);
LABEL_34:
  v22 = (uint64_t)object;
  v26[0] = countAndFlagsBits;
  v26[1] = object;
  a4(&v27, v26);
  swift_bridgeObjectRelease(v22);
  return v27;
}

uint64_t specialized LazyMapSequence<>.subscript.getter(Swift::UInt64 rawBits)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void (*v6)(uint64_t *__return_ptr, _QWORD *);
  char v7;
  Swift::UInt64 v8;
  uint64_t v9;
  Swift::UInt64 v10;
  unint64_t v12;
  uint64_t v14;
  Swift::Int v15;
  Swift::Int v16;
  Swift::Int v17;
  Swift::Int v18;
  id v19;
  uint64_t v20;
  uint8x16_t *v21;
  uint64_t v22;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v25;
  char *v27;
  uint64_t v28;
  Swift::Int v29;
  int v30;
  Swift::String v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Swift::Int v35;
  Swift::Int v36;
  _QWORD v37[2];
  uint64_t v38;
  uint64_t v39;

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  v6 = (void (*)(uint64_t *__return_ptr, _QWORD *))v1[4];
  v7 = (v5 & 0x1000000000000000) == 0 || (v4 & 0x800000000000000) != 0;
  v8 = rawBits & 0xC;
  v9 = 4 << v7;
  v10 = v3 >> 14;
  if ((rawBits & 1) != 0 && v8 != v9)
  {
    if (rawBits >> 14 >= v2 >> 14 && rawBits >> 14 < v10)
      goto LABEL_23;
    v12 = 143;
LABEL_20:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Substring index is out of bounds", 32, 2, "Swift/StringIndexValidation.swift", 33, 2, v12, 0);
  }
  if (v8 == v9)
    rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
  if (rawBits >> 14 < v2 >> 14 || rawBits >> 14 >= v10)
  {
    v12 = 43;
    goto LABEL_20;
  }
  if ((rawBits & 1) == 0)
    rawBits = _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits & 0xFFFFFFFFFFFFFFF2 | 1;
LABEL_23:
  v14 = (rawBits >> 8) & 0x3F;
  v15 = rawBits >> 16;
  v16 = v3 >> 16;
  if (v14)
    goto LABEL_26;
  if (v15 == v16)
  {
    v14 = 0;
    goto LABEL_26;
  }
  if ((v5 & 0x1000000000000000) != 0)
    goto LABEL_60;
  if ((v5 & 0x2000000000000000) != 0)
  {
    v38 = v4;
    v39 = v5 & 0xFFFFFFFFFFFFFFLL;
    v29 = v15 + 1;
    if (v15 + 1 != (HIBYTE(v5) & 0xF))
    {
      v30 = *(unsigned __int16 *)((char *)&v38 + v15);
      goto LABEL_49;
    }
LABEL_51:
    if (v16 >= v29)
      v18 = v29;
    else
      v18 = v16;
    if (v18 >= v15)
      goto LABEL_31;
LABEL_55:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  if ((v4 & 0x1000000000000000) != 0)
  {
    v27 = (char *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v28 = v4 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v27 = (char *)_StringObject.sharedUTF8.getter(v4, v5);
    v16 = v3 >> 16;
  }
  v29 = v15 + 1;
  if (v15 + 1 == v28)
    goto LABEL_51;
  if (!v27)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
  v30 = *(unsigned __int16 *)&v27[v15];
LABEL_49:
  if (v30 != 2573 && (v30 & 0x80808080) == 0)
    goto LABEL_51;
LABEL_60:
  v35 = v16;
  v36 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v15);
  v16 = v35;
  v14 = v36;
LABEL_26:
  v17 = v14 + v15;
  if (v16 >= v17)
    v18 = v17;
  else
    v18 = v16;
  if ((v5 & 0x1000000000000000) != 0)
  {
    v31 = _StringGuts.foreignErrorCorrectedGrapheme(startingAt:endingAt:)(v15, v18);
    object = v31._object;
    countAndFlagsBits = v31._countAndFlagsBits;
    goto LABEL_39;
  }
  if (v18 < v15)
    goto LABEL_55;
LABEL_31:
  if ((v5 & 0x2000000000000000) != 0)
  {
    v38 = v4;
    v39 = v5 & 0xFFFFFFFFFFFFFFLL;
    if ((uint64_t)(HIBYTE(v5) & 0xF) >= v18)
    {
      v22 = v18 - v15;
      if (v22 < 0)
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      v21 = (uint8x16_t *)((char *)&v38 + v15);
      goto LABEL_38;
    }
    goto LABEL_58;
  }
  if ((v4 & 0x1000000000000000) == 0)
  {
    v32 = v4;
    v33 = v18;
    v19 = _StringObject.sharedUTF8.getter(v32, v5);
    v20 = v34;
    v18 = v33;
    if (v20 >= v33)
      goto LABEL_34;
LABEL_58:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
  }
  v19 = (id)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
  v20 = v4 & 0xFFFFFFFFFFFFLL;
  if ((v4 & 0xFFFFFFFFFFFFLL) < v18)
    goto LABEL_58;
LABEL_34:
  v21 = (uint8x16_t *)specialized UnsafeBufferPointer.init(rebasing:)(v15, v18, (uint64_t)v19, v20);
LABEL_38:
  countAndFlagsBits = specialized static String._uncheckedFromUTF8(_:)(v21, v22);
LABEL_39:
  v25 = (uint64_t)object;
  v37[0] = countAndFlagsBits;
  v37[1] = object;
  v6(&v38, v37);
  swift_bridgeObjectRelease(v25);
  return v38;
}

uint64_t LazyMapSequence<>.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  void (*v12)(_BYTE *);
  void (*v13)(_BYTE *, _QWORD);
  _BYTE v15[32];

  v7 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(a3 + 8), v7, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = &v15[-v10];
  v12 = *(void (**)(_BYTE *))(v3 + *(int *)(a2 + 44));
  v13 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(a3 + 80))(v15, a1, v7, a3);
  (*(void (**)(_BYTE *))(v9 + 16))(v11);
  v13(v15, 0);
  v12(v11);
  return (*(uint64_t (**)(_BYTE *, unint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
}

unint64_t *LazyMapSequence<>.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t AssociatedTypeWitness;
  uint64_t v13;
  unint64_t AssociatedConformanceWitness;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;

  v8 = *(_QWORD *)(a2 + 16);
  (*(void (**)(uint64_t, uint64_t))(a3 + 88))(a1, v8);
  v9 = (uint64_t *)(v4 + *(int *)(a2 + 44));
  v11 = *v9;
  v10 = (unint64_t *)v9[1];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)a3, v8, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.SubSequence);
  v13 = *(_QWORD *)(a2 + 24);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, v8, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.SubSequence: Collection);
  v15 = (_QWORD *)(a4
                 + *(int *)(type metadata accessor for LazyMapSequence(0, AssociatedTypeWitness, v13, *(_QWORD *)(AssociatedConformanceWitness + 8))+ 44));
  *v15 = v11;
  v15[1] = v10;
  return swift_retain(v10, v16, v17, v18);
}

uint64_t LazySequence<>.index(_:offsetBy:limitedBy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(a5 + 144))(a1, a2, a3, *(_QWORD *)(a4 + 16));
}

unint64_t specialized LazyMapSequence<>.distance(from:to:)(Swift::String::Index a1, Swift::String::Index a2, uint64_t a3)
{
  unint64_t *v3;
  unint64_t rawBits;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  Swift::UInt64 v13;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  char *v24;
  uint64_t v25;
  int v26;
  Swift::UInt64 v27;
  Swift::UInt64 v28;
  uint64_t v29;
  Swift::Int v30;
  char *v31;
  uint64_t v32;
  int v33;
  Swift::Int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  rawBits = a1._rawBits;
  v7 = *v3;
  v6 = v3[1];
  v8 = v3[2];
  v9 = v3[3];
  v10 = (v9 & 0x1000000000000000) == 0 || (v8 & 0x800000000000000) != 0;
  v11 = a1._rawBits & 0xC;
  v12 = 4 << v10;
  v13 = v6 >> 14;
  if ((a1._rawBits & 2) == 0 || v11 == v12)
  {
    if (v11 == v12)
      goto LABEL_98;
    goto LABEL_12;
  }
  if (a1._rawBits >> 14 < v7 >> 14 || v13 < a1._rawBits >> 14)
  {
LABEL_10:
    v15 = 296;
    goto LABEL_17;
  }
LABEL_24:
  v17 = a2._rawBits & 0xC;
  if ((a2._rawBits & 2) == 0 || v17 == v12)
  {
    if (v17 == v12)
      a2._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(a2)._rawBits;
    if (a2._rawBits >> 14 < v7 >> 14 || v13 < a2._rawBits >> 14)
      goto LABEL_16;
    if ((a2._rawBits & 1) != 0)
    {
      if ((v7 & 2) != 0)
        goto LABEL_35;
    }
    else
    {
      a2._rawBits = a2._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(a2)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
      if ((v7 & 2) != 0)
      {
LABEL_35:
        if ((a2._rawBits & 2) != 0)
          goto LABEL_39;
      }
    }
    if (a2._rawBits >> 14 != v7 >> 14 && a2._rawBits >> 14 != v13)
      a2._rawBits = _StringGuts._slowRoundDownToNearestCharacter(_:in:)(a2._rawBits, v7, v6, v8, v9);
    goto LABEL_39;
  }
  if (a2._rawBits >> 14 < v7 >> 14 || v13 < a2._rawBits >> 14)
    goto LABEL_10;
LABEL_39:
  v13 = a2._rawBits >> 14;
  if (rawBits >> 14 < a2._rawBits >> 14)
  {
    v7 = 0;
    a2._rawBits = v6 >> 16;
    v18 = HIBYTE(v9) & 0xF;
    v19 = v9 & 0xFFFFFFFFFFFFFFLL;
    v20 = (v9 & 0xFFFFFFFFFFFFFFFLL) + 32;
    v12 = v8 & 0xFFFFFFFFFFFFLL;
    if (((v9 >> 60) & ((v8 & 0x800000000000000) == 0)) != 0)
      v21 = 8;
    else
      v21 = 4;
    while (1)
    {
      v6 = v7 + 1;
      if (__OFADD__(v7, 1))
      {
        __break(1u);
LABEL_97:
        __break(1u);
LABEL_98:
        rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
LABEL_12:
        if (rawBits >> 14 < v7 >> 14 || v13 < rawBits >> 14)
        {
LABEL_16:
          v15 = 65;
LABEL_17:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Substring index is out of bounds", 32, 2, "Swift/StringIndexValidation.swift", 33, 2, v15, 0);
        }
        if ((rawBits & 1) != 0)
        {
          if ((v7 & 2) != 0)
            goto LABEL_20;
LABEL_21:
          if (rawBits >> 14 != v7 >> 14 && rawBits >> 14 != v13)
            rawBits = _StringGuts._slowRoundDownToNearestCharacter(_:in:)(rawBits, v7, v6, v8, v9);
        }
        else
        {
          rawBits = rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
          if ((v7 & 2) == 0)
            goto LABEL_21;
LABEL_20:
          if ((rawBits & 2) == 0)
            goto LABEL_21;
        }
        goto LABEL_24;
      }
      v22 = (rawBits >> 8) & 0x3F;
      v23 = rawBits >> 16;
      if (!v22)
        break;
LABEL_59:
      v27 = v22 + v23;
      if ((uint64_t)a2._rawBits < v22 + v23)
        v27 = a2._rawBits;
      v28 = v27 << 16;
      v29 = v27 & 0xFFFFFFFFFFFFLL;
      if ((v27 & 0xFFFFFFFFFFFFLL) != a2._rawBits)
      {
        if ((v9 & 0x1000000000000000) != 0)
          goto LABEL_81;
        if ((v9 & 0x2000000000000000) != 0)
        {
          v54 = v8;
          v55 = v19;
          if (v29 + 1 != v18)
          {
            v33 = *(unsigned __int16 *)((char *)&v54 + v29);
LABEL_72:
            if (v33 == 2573 || (v33 & 0x8080) != 0)
            {
LABEL_81:
              v46 = v20;
              v50 = v18;
              v35 = v29;
              v36 = v19;
              v30 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v35);
              v20 = v46;
              v18 = v50;
              v19 = v36;
              if (v30 > 63)
                goto LABEL_79;
              goto LABEL_78;
            }
          }
        }
        else
        {
          v31 = (char *)v20;
          v32 = v8 & 0xFFFFFFFFFFFFLL;
          if ((v8 & 0x1000000000000000) == 0)
          {
            v48 = v20;
            v52 = v18;
            v45 = v19;
            v31 = (char *)_StringObject.sharedUTF8.getter(v8, v9);
            v19 = v45;
            v20 = v48;
            v18 = v52;
          }
          if (v29 + 1 != v32)
          {
            if (!v31)
LABEL_103:
              _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
            v33 = *(unsigned __int16 *)&v31[v29];
            goto LABEL_72;
          }
        }
        v30 = 1;
        goto LABEL_78;
      }
      v30 = 0;
LABEL_78:
      v28 |= v30 << 8;
LABEL_79:
      rawBits = v21 | v28 | 1;
      ++v7;
      if (v13 <= v28 >> 14)
        return v6;
    }
    if (v23 == a2._rawBits)
    {
      v22 = 0;
      goto LABEL_59;
    }
    if ((v9 & 0x1000000000000000) == 0)
    {
      if ((v9 & 0x2000000000000000) == 0)
      {
        v24 = (char *)v20;
        v25 = v8 & 0xFFFFFFFFFFFFLL;
        if ((v8 & 0x1000000000000000) == 0)
        {
          v49 = v20;
          v53 = v18;
          v38 = v19;
          v24 = (char *)_StringObject.sharedUTF8.getter(v8, v9);
          v20 = v49;
          v18 = v53;
          v19 = v38;
        }
        if (v23 + 1 == v25)
        {
LABEL_58:
          v22 = 1;
          goto LABEL_59;
        }
        if (!v24)
          goto LABEL_103;
        v26 = *(unsigned __int16 *)&v24[v23];
        if (v26 == 2573)
          goto LABEL_83;
        goto LABEL_57;
      }
      v54 = v8;
      v55 = v19;
      if (v23 + 1 == v18)
        goto LABEL_58;
      v26 = *(unsigned __int16 *)((char *)&v54 + v23);
      if (v26 != 2573)
      {
LABEL_57:
        if ((v26 & 0x80808080) == 0)
          goto LABEL_58;
      }
    }
LABEL_83:
    v47 = v20;
    v51 = v18;
    v37 = v19;
    v22 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v23);
    v20 = v47;
    v18 = v51;
    v19 = v37;
    goto LABEL_59;
  }
  if (v13 >= rawBits >> 14)
    return 0;
  v6 = 0;
  a2._rawBits = v7 >> 16;
  v39 = 4;
  if (((v9 >> 60) & ((v8 & 0x800000000000000) == 0)) != 0)
    v39 = 8;
  v12 = v7 & 2 | v39;
  do
  {
    if (__OFSUB__(v6--, 1))
      goto LABEL_97;
    if ((rawBits ^ v7) >= 0x4000)
    {
      v40 = _StringGuts._opaqueCharacterStride(endingAt:in:)(rawBits >> 16, v7 >> 16, a3, v8, v9);
      rawBits -= v40 << 16;
      v41 = v40 << 8;
      if (v40 > 63)
        v41 = 0;
    }
    else
    {
      v41 = 0;
    }
    v42 = rawBits & 0xFFFFFFFFFFFF0000 | v41;
    rawBits = v12 | v42 | 1;
  }
  while (v13 < v42 >> 14);
  return v6;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance <> LazyMapSequence<A, B>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  _QWORD *v8;

  v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[4] = LazyMapSequence<>.subscript.read(v8, a2, a3, *(_QWORD *)(a4 - 8));
  return protocol witness for Collection.subscript.read in conformance _ArrayBuffer<A>;
}

uint64_t (*LazyMapSequence<>.subscript.read(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v4;
  _QWORD *v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(void *);
  void (*v16)(_QWORD *, _QWORD);

  v8 = malloc(0x40uLL);
  *a1 = v8;
  v9 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(a4 + 8), v9, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = malloc(*(_QWORD *)(v11 + 64));
  v13 = *(_QWORD *)(a3 + 24);
  v8[4] = v12;
  v8[5] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v8[6] = v14;
  v8[7] = malloc(*(_QWORD *)(v14 + 64));
  v15 = *(void (**)(void *))(v4 + *(int *)(a3 + 44));
  v16 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(a4 + 80))(v8, a2, v9, a4);
  (*(void (**)(void *))(v11 + 16))(v12);
  v16(v8, 0);
  v15(v12);
  (*(void (**)(void *, unint64_t))(v11 + 8))(v12, AssociatedTypeWitness);
  return LazyMapSequence<>.subscript.read;
}

unint64_t *protocol witness for Collection.subscript.getter in conformance <> LazyMapSequence<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return LazyMapSequence<>.subscript.getter(a1, a2, *(_QWORD *)(a3 - 8), a4);
}

uint64_t protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance <> LazyDropWhileSequence<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(const char **)(a2 - 8), *(_QWORD *)(a1 + 16), (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v7 = type metadata accessor for Optional(0, AssociatedTypeWitness, v5, v6);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a3, 1, 1, v7);
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance <> LazyMapSequence<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return LazyMapSequence<>.formIndex(after:)(a1, a2, *(_QWORD *)(a3 - 8));
}

unint64_t *LazyMapSequence.map<A>(_:)@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  void (*v23)(uint64_t, char *, uint64_t);
  uint64_t v24;
  uint64_t (**v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;

  v32 = a5;
  v33 = a2;
  v31 = a1;
  v8 = *(_QWORD *)(a3 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v12 + 16);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v10);
  v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v5, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v5, a3);
  v17 = *(unsigned __int8 *)(v8 + 80);
  v18 = (v17 + 64) & ~v17;
  v19 = (char *)swift_allocObject((uint64_t)&unk_1E0E9C468, v18 + v9, v17 | 7);
  v20 = *(_QWORD *)(a3 + 24);
  v21 = *(_QWORD *)(a3 + 32);
  *((_QWORD *)v19 + 2) = v13;
  *((_QWORD *)v19 + 3) = v20;
  *((_QWORD *)v19 + 4) = a4;
  *((_QWORD *)v19 + 5) = v21;
  v22 = v33;
  *((_QWORD *)v19 + 6) = v31;
  *((_QWORD *)v19 + 7) = v22;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v19[v18], v11, a3);
  v23 = *(void (**)(uint64_t, char *, uint64_t))(v14 + 32);
  v24 = v32;
  v23(v32, v16, v13);
  v25 = (uint64_t (**)(uint64_t))(v24
                                         + *(int *)(type metadata accessor for LazyMapSequence(0, v13, a4, v21) + 44));
  *v25 = partial apply for closure #1 in LazyMapSequence.map<A>(_:);
  v25[1] = (uint64_t (*)(uint64_t))v19;
  return swift_retain(v33, v26, v27, v28);
}

uint64_t closure #1 in LazyMapSequence.map<A>(_:)(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v10 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for LazyMapSequence(0, v13, v14, v15);
  (*(void (**)(uint64_t))(a4 + *(int *)(v16 + 44)))(a1);
  a2(v12);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, a6);
}

unint64_t *LazyMapSequence<>.map<A>(_:)@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t (**v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  uint64_t v34;

  v7 = v6;
  v32 = a1;
  v33 = a2;
  v34 = a6;
  v11 = *(_QWORD *)(a3 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = MEMORY[0x1E0C80A78](a1);
  v14 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v15 + 16);
  v31 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v18, v7, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v7, a3);
  v20 = *(unsigned __int8 *)(v11 + 80);
  v21 = (v20 + 64) & ~v20;
  v22 = (char *)swift_allocObject((uint64_t)&unk_1E0E9C490, v21 + v12, v20 | 7);
  v23 = *(_QWORD *)(a3 + 24);
  *((_QWORD *)v22 + 2) = v16;
  *((_QWORD *)v22 + 3) = v23;
  *((_QWORD *)v22 + 4) = a4;
  *((_QWORD *)v22 + 5) = a5;
  v24 = v33;
  *((_QWORD *)v22 + 6) = v32;
  *((_QWORD *)v22 + 7) = v24;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v22[v21], v14, a3);
  v25 = v34;
  (*(void (**)(uint64_t, char *, uint64_t))(v31 + 32))(v34, v18, v16);
  v26 = (uint64_t (**)(uint64_t))(v25
                                         + *(int *)(type metadata accessor for LazyMapSequence(0, v16, a4, *(_QWORD *)(a5 + 8))+ 44));
  *v26 = partial apply for closure #1 in LazyMapSequence<>.map<A>(_:);
  v26[1] = (uint64_t (*)(uint64_t))v22;
  return swift_retain(v24, v27, v28, v29);
}

uint64_t closure #1 in LazyMapSequence<>.map<A>(_:)(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v10 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for LazyMapSequence(0, v14, v15, *(_QWORD *)(v13 + 8));
  (*(void (**)(uint64_t))(a4 + *(int *)(v16 + 44)))(a1);
  a2(v12);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, a6);
}

uint64_t static MemoryLayout.stride(ofValue:)(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a2 - 8) + 72);
}

uint64_t static MemoryLayout.alignment(ofValue:)(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a2 - 8) + 80) + 1;
}

uint64_t static MemoryLayout.offset(of:)()
{
  return AnyKeyPath._storedInlineOffset.getter();
}

uint64_t Unicode.Scalar._value.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*Unicode.Scalar._value.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

Swift::Unicode::Scalar_optional __swiftcall Unicode.Scalar.init(_:)(Swift::UInt32 a1)
{
  BOOL v1;
  unsigned __int8 v2;
  uint64_t v3;

  v1 = HIWORD(a1) > 0x10u || a1 >> 11 == 27;
  v2 = v1;
  v3 = a1;
  if (v1)
    v3 = 0;
  return (Swift::Unicode::Scalar_optional)(v3 | ((unint64_t)v2 << 32));
}

BOOL static UInt32.< infix(_:_:)(unsigned int a1, unsigned int a2)
{
  return a1 < a2;
}

BOOL static UInt32.> infix(_:_:)(unsigned int a1, unsigned int a2)
{
  return a2 < a1;
}

Swift::Unicode::Scalar_optional __swiftcall Unicode.Scalar.init(_:)(Swift::UInt16 a1)
{
  Swift::UInt16 v1;

  if (a1 >> 11 == 27)
    v1 = 0;
  else
    v1 = a1;
  return (Swift::Unicode::Scalar_optional)(v1 | ((unint64_t)(a1 >> 11 == 27) << 32));
}

Swift::Unicode::Scalar __swiftcall Unicode.Scalar.init(_:)(Swift::UInt8 a1)
{
  Swift::Unicode::Scalar result;

  *(_DWORD *)&a1 = a1;
  LOBYTE(result._value) = a1;
  return result;
}

Swift::String __swiftcall Unicode.Scalar.escaped(asASCII:)(Swift::Bool asASCII)
{
  unsigned int v1;
  unsigned int v2;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String_optional v5;
  Swift::String result;

  v2 = v1;
  v5 = Unicode.Scalar._escaped(asASCII:)(asASCII);
  object = v5.value._object;
  countAndFlagsBits = v5.value._countAndFlagsBits;
  if (!v5.value._object)
    countAndFlagsBits = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v2);
  result._object = object;
  result._countAndFlagsBits = countAndFlagsBits;
  return result;
}

uint64_t lowNibbleAsHex #1 (_:) in Unicode.Scalar._escaped(asASCII:)(char a1)
{
  unsigned int v1;

  if ((a1 & 0xFu) >= 0xA)
    v1 = (a1 & 0xF) + 55;
  else
    v1 = a1 & 0xF | 0x30;
  return specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v1);
}

uint64_t static UInt32.+ infix(_:_:)(int a1, int a2)
{
  BOOL v2;
  uint64_t result;

  v2 = __CFADD__(a1, a2);
  result = (a1 + a2);
  if (v2)
    __break(1u);
  return result;
}

uint64_t static UInt32.- infix(_:_:)(unsigned int a1, unsigned int a2)
{
  BOOL v2;
  uint64_t result;

  v2 = a1 >= a2;
  result = a1 - a2;
  if (!v2)
    __break(1u);
  return result;
}

BOOL Unicode.Scalar.isASCII.getter(unsigned int a1)
{
  return a1 < 0x80;
}

uint64_t protocol witness for _ExpressibleByBuiltinUnicodeScalarLiteral.init(_builtinUnicodeScalarLiteral:) in conformance Unicode.Scalar@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

_DWORD *protocol witness for ExpressibleByUnicodeScalarLiteral.init(unicodeScalarLiteral:) in conformance Unicode.Scalar@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void Unicode.Scalar.debugDescription.getter(void *a1)
{
  unint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t object;
  unint64_t v9;
  uint64_t countAndFlagsBits;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  Swift::Int v21;
  int64_t v22;
  char v23;
  int64_t v24;
  char v25;
  BOOL v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  size_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  unsigned __int8 *v37;
  Swift::String::Index v38;
  Swift::String::Index v39;
  Swift::String::Index v40;
  Swift::String::Index v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  Swift::String_optional v61;
  unsigned int v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  Swift::Int v70;
  Swift::Int v71;
  int64_t v72;
  char v73;
  int64_t v74;
  char v75;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  size_t v82;
  uint64_t v83;
  char *v84;
  int v85;
  unint64_t v86;
  char v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  id v99;
  uint64_t v100;
  char *v101;
  size_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  Swift::String::Index v106;
  Swift::String::Index v107;
  Swift::String::Index v108;
  Swift::String::Index v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  char v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  int64_t v130;
  char v131;
  BOOL v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  Swift::String::Index v140;
  Swift::String::Index v141;
  Swift::String::Index v142;
  Swift::String::Index v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  char v150;
  char *v151;
  size_t v152;
  Swift::String::Index v153;
  Swift::String::Index v154;
  Swift::String::Index v155;
  Swift::String::Index v156;
  Swift::Int v157;
  Swift::Int v158;
  Swift::Int v159;
  unsigned __int8 *v160;
  uint64_t v161;
  unsigned __int8 *v162;
  uint64_t v163;
  uint64_t v164;
  unsigned __int8 *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  _OWORD v176[2];
  uint64_t v177;
  unint64_t v178;

  v3 = specialized static String._createEmpty(withInitialCapacity:)(4);
  v7 = v3;
  object = v4;
  v177 = v3;
  v178 = v4;
  v9 = HIBYTE(v4) & 0xF;
  countAndFlagsBits = v3 & 0xFFFFFFFFFFFFLL;
  if ((v4 & 0x2000000000000000) != 0)
    v11 = HIBYTE(v4) & 0xF;
  else
    v11 = v3 & 0xFFFFFFFFFFFFLL;
  if (!v11 && (v3 & ~v4 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease(v4);
    v177 = 34;
    v178 = 0xE100000000000000;
    goto LABEL_70;
  }
  if ((v4 & 0x2000000000000000) == 0 || v9 == 15)
  {
    swift_bridgeObjectRetain_n(0xE100000000000000, 6, v5, v6);
    if ((object & 0x1000000000000000) != 0)
      goto LABEL_195;
    v20 = __OFADD__(v11, 1);
    v21 = v11 + 1;
    if (!v20)
      goto LABEL_18;
LABEL_197:
    __break(1u);
    goto LABEL_198;
  }
  v12 = 8 * (HIBYTE(v4) & 7);
  v13 = (-255 << v12) - 1;
  v14 = 34 << v12;
  v15 = v14 | v13 & v4;
  v16 = v14 | v13 & v3;
  if (v9 >= 8)
    v17 = v15;
  else
    v17 = v4;
  if (v9 < 8)
    v7 = v16;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(0xE100000000000000);
  v18 = 0xA000000000000000;
  if (!(v7 & 0x8080808080808080 | v17 & 0x80808080808080))
    v18 = 0xE000000000000000;
  v19 = (v18 & 0xFF00000000000000 | (v9 << 56) | v17 & 0xFFFFFFFFFFFFFFLL) + 0x100000000000000;
  while (2)
  {
    v177 = v7;
    v178 = v19;
    while (1)
    {
LABEL_70:
      v61 = Unicode.Scalar._escaped(asASCII:)(1);
      if (v61.value._object)
      {
        countAndFlagsBits = v61.value._countAndFlagsBits;
        object = (unint64_t)v61.value._object;
        a1 = 0;
      }
      else
      {
        v62 = a1;
        a1 = 0;
        countAndFlagsBits = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v62);
        object = v63;
      }
      v7 = v177;
      v1 = v178;
      v64 = HIBYTE(v178) & 0xF;
      if ((v178 & 0x2000000000000000) != 0)
        v65 = HIBYTE(v178) & 0xF;
      else
        v65 = v177 & 0xFFFFFFFFFFFFLL;
      if (!v65 && (v177 & ~v178 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(v178);
        v177 = countAndFlagsBits;
        v178 = object;
        goto LABEL_160;
      }
      v66 = object & 0x2000000000000000;
      v9 = HIBYTE(object) & 0xF;
      if ((v178 & 0x2000000000000000) != 0 && v66)
      {
        v86 = v64 + v9;
        if (v64 + v9 <= 0xF)
        {
          if (v9)
          {
            v87 = 0;
            v88 = 0;
            v89 = v178;
            do
            {
              v90 = v64 + v88;
              v91 = v88 + 1;
              if (v88 >= 8)
                v92 = object;
              else
                v92 = countAndFlagsBits;
              v93 = v92 >> (v87 & 0x38);
              v94 = (8 * v64 + v87) & 0x38;
              v95 = (-255 << v94) - 1;
              v96 = (unint64_t)v93 << v94;
              v97 = v96 | v95 & v89;
              v98 = v96 | v95 & v7;
              if (v90 < 8)
                v7 = v98;
              else
                v89 = v97;
              v87 += 8;
              v88 = v91;
            }
            while (v9 != v91);
          }
          else
          {
            v89 = v178;
          }
          swift_bridgeObjectRelease(v178);
          swift_bridgeObjectRelease(object);
          v128 = 0xA000000000000000;
          if (!(v7 & 0x8080808080808080 | v89 & 0x80808080808080))
            v128 = 0xE000000000000000;
          v177 = v7;
          v178 = v128 & 0xFF00000000000000 | (v86 << 56) | v89 & 0xFFFFFFFFFFFFFFLL;
          goto LABEL_160;
        }
        v66 = 1;
      }
      a1 = (void *)(countAndFlagsBits & 0xFFFFFFFFFFFFLL);
      v67 = v66 ? HIBYTE(object) & 0xF : countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      swift_bridgeObjectRetain_n(object, 2, v59, v60);
      if ((object & 0x1000000000000000) != 0)
        break;
      swift_bridgeObjectRetain_n(object, 4, v68, v69);
      v70 = v67;
      if ((v1 & 0x1000000000000000) != 0)
        goto LABEL_192;
LABEL_85:
      v20 = __OFADD__(v65, v70);
      v71 = v65 + v70;
      if (!v20)
        goto LABEL_86;
LABEL_194:
      __break(1u);
LABEL_195:
      v158 = String.UTF8View._foreignCount()();
      v21 = v158 + 1;
      if (__OFADD__(v158, 1))
        goto LABEL_197;
LABEL_18:
      v9 = v7 & ~object;
      if ((v9 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(object & 0xFFFFFFFFFFFFFFFLL))
      {
        v22 = _StringGuts.nativeUnusedCapacity.getter(v7, object);
        if ((v23 & 1) != 0)
          goto LABEL_222;
        if (v21 <= 15)
        {
          if ((object & 0x2000000000000000) != 0)
            goto LABEL_51;
          if (v22 <= 0)
            goto LABEL_46;
        }
      }
      else if (v21 <= 15)
      {
        if ((object & 0x2000000000000000) != 0)
        {
LABEL_51:
          swift_bridgeObjectRelease_n(0xE100000000000000, 5);
          countAndFlagsBits = object;
        }
        else
        {
LABEL_46:
          swift_bridgeObjectRelease_n(0xE100000000000000, 5);
          if ((object & 0x1000000000000000) != 0)
            goto LABEL_217;
          if ((v7 & 0x1000000000000000) != 0)
          {
            v37 = (unsigned __int8 *)((object & 0xFFFFFFFFFFFFFFFLL) + 32);
          }
          else
          {
            v37 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v7, object);
            countAndFlagsBits = v34;
          }
          swift_bridgeObjectRetain(object, v34, v35, v36);
          closure #1 in _StringGuts._convertedToSmall()(v37, countAndFlagsBits, v176);
          swift_bridgeObjectRelease(object);
          countAndFlagsBits = *((_QWORD *)&v176[0] + 1);
          v7 = *(_QWORD *)&v176[0];
        }
LABEL_52:
        v38._rawBits = 1;
        v39._rawBits = 65537;
        v40._rawBits = _StringGuts.validateScalarRange(_:)(v38, v39, 0x22uLL, 0xE100000000000000);
        if (v40._rawBits < 0x10000)
          v40._rawBits |= 3;
        v9 = specialized String.init(_:)(v40, v41, 0x22uLL, 0xE100000000000000);
        v43 = v42;
        swift_bridgeObjectRelease(0xE100000000000000);
        if ((v43 & 0x2000000000000000) == 0)
          goto LABEL_212;
        swift_bridgeObjectRelease(v43);
        goto LABEL_56;
      }
      v24 = _StringGuts.nativeUnusedCapacity.getter(v7, object);
      v27 = (v25 & 1) == 0 && v24 > 0;
      if ((v9 & 0x2000000000000000) == 0 || !swift_isUniquelyReferenced_nonNull_native(object & 0xFFFFFFFFFFFFFFFLL))
      {
        if (!v27)
        {
LABEL_37:
          v28 = _StringGuts.nativeCapacity.getter(v7, object);
          if ((v29 & 1) != 0)
            v30 = 0;
          else
            v30 = v28;
          if (v30 + 0x4000000000000000 < 0)
          {
            __break(1u);
LABEL_217:
            v7 = _StringGuts._foreignConvertedToSmall()(v7, object);
            countAndFlagsBits = v167;
            goto LABEL_52;
          }
          v31 = 2 * v30;
          if (v31 > v21)
            v21 = v31;
        }
        _StringGuts.grow(_:)(v21);
        goto LABEL_44;
      }
      if (!v27)
        goto LABEL_37;
LABEL_44:
      swift_bridgeObjectRelease_n(0xE100000000000000, 6);
      v176[0] = xmmword_1816ABC90;
      v32 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 1, (uint64_t)v176, 1);
      _StringGuts.appendInPlace(_:isASCII:)(v32, v33, 1);
      swift_bridgeObjectRelease(0xE100000000000000);
    }
    swift_bridgeObjectRetain_n(object, 5, v68, v69);
    v153._rawBits = 1;
    v154._rawBits = (v67 << 16) | 1;
    v155._rawBits = _StringGuts.validateScalarRange(_:)(v153, v154, countAndFlagsBits, object);
    if (v155._rawBits < 0x10000)
      v155._rawBits |= 3;
    v70 = specialized Collection.count.getter(v155, v156, countAndFlagsBits, object);
    swift_bridgeObjectRelease(object);
    if ((v1 & 0x1000000000000000) == 0)
      goto LABEL_85;
LABEL_192:
    v157 = String.UTF8View._foreignCount()();
    v71 = v157 + v70;
    if (__OFADD__(v157, v70))
      goto LABEL_194;
LABEL_86:
    v175 = v67;
    if ((v7 & ~v1 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v1 & 0xFFFFFFFFFFFFFFFLL))
    {
      v43 = v177;
      v7 = v178;
      v72 = _StringGuts.nativeUnusedCapacity.getter(v177, v178);
      if ((v73 & 1) == 0)
      {
        if (v71 <= 15)
        {
          if ((v7 & 0x2000000000000000) != 0)
          {
            v85 = 0;
            v1 = v7;
            goto LABEL_138;
          }
          v1 = v7;
          if (v72 < v70)
          {
LABEL_118:
            v85 = 1;
            goto LABEL_138;
          }
        }
LABEL_95:
        v74 = _StringGuts.nativeUnusedCapacity.getter(v43, v7);
        v1 = (v75 & 1) == 0 && v74 >= v70;
        if ((v43 & ~v7 & 0x2000000000000000) == 0
          || !swift_isUniquelyReferenced_nonNull_native(v7 & 0xFFFFFFFFFFFFFFFLL))
        {
          if ((v1 & 1) == 0)
            goto LABEL_106;
LABEL_112:
          _StringGuts.grow(_:)(v71);
          goto LABEL_113;
        }
        if ((v1 & 1) != 0)
        {
LABEL_113:
          swift_bridgeObjectRelease_n(object, 4);
          if ((object & 0x1000000000000000) != 0)
          {
            swift_bridgeObjectRelease(object);
            _StringGuts._foreignAppendInPlace(_:)(countAndFlagsBits, object, 0, v175);
            swift_bridgeObjectRelease_n(object, 2);
            a1 = 0;
          }
          else if (v66)
          {
            swift_bridgeObjectRelease_n(object, 2);
            *(_QWORD *)&v176[0] = countAndFlagsBits;
            *((_QWORD *)&v176[0] + 1) = object & 0xFFFFFFFFFFFFFFLL;
            v81 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, HIBYTE(object) & 0xF, (uint64_t)v176, HIBYTE(object) & 0xF);
            _StringGuts.appendInPlace(_:isASCII:)(v81, v82, (object & 0x4000000000000000) != 0);
            a1 = 0;
            swift_bridgeObjectRelease(object);
          }
          else
          {
            if ((countAndFlagsBits & 0x1000000000000000) != 0)
            {
              swift_bridgeObjectRelease(object);
              v99 = (id)((object & 0xFFFFFFFFFFFFFFFLL) + 32);
              v100 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
            }
            else
            {
              v99 = _StringObject.sharedUTF8.getter(countAndFlagsBits, object);
              v100 = v168;
              swift_bridgeObjectRelease(object);
              if (v100 < (uint64_t)a1)
                _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
            }
            v101 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, countAndFlagsBits & 0xFFFFFFFFFFFFLL, (uint64_t)v99, v100);
            _StringGuts.appendInPlace(_:isASCII:)(v101, v102, countAndFlagsBits < 0);
            a1 = 0;
            swift_bridgeObjectRelease_n(object, 2);
          }
          goto LABEL_160;
        }
LABEL_106:
        v77 = _StringGuts.nativeCapacity.getter(v43, v7);
        if ((v78 & 1) != 0)
          v79 = 0;
        else
          v79 = v77;
        if (v79 + 0x4000000000000000 >= 0)
        {
          v80 = 2 * v79;
          if (v80 > v71)
            v71 = v80;
          goto LABEL_112;
        }
        __break(1u);
LABEL_212:
        v164 = v7;
        if ((v43 & 0x1000000000000000) != 0)
        {
          v9 = _StringGuts._foreignConvertedToSmall()(v9, v43);
          v174 = v173;
          swift_bridgeObjectRelease(v43);
          v43 = v174;
          v7 = v164;
        }
        else
        {
          if ((v9 & 0x1000000000000000) != 0)
          {
            v165 = (unsigned __int8 *)((v43 & 0xFFFFFFFFFFFFFFFLL) + 32);
            v166 = v9 & 0xFFFFFFFFFFFFLL;
          }
          else
          {
            v165 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v9, v43);
          }
          closure #1 in _StringGuts._convertedToSmall()(v165, v166, v176);
          swift_bridgeObjectRelease(v43);
          v43 = *((_QWORD *)&v176[0] + 1);
          v9 = *(_QWORD *)&v176[0];
        }
LABEL_56:
        v44 = HIBYTE(countAndFlagsBits) & 0xF;
        v45 = HIBYTE(v43) & 0xF;
        v46 = v45 + v44;
        if ((unint64_t)(v45 + v44) > 0xF)
          goto LABEL_221;
        if (v45)
        {
          v47 = 0;
          v48 = 0;
          do
          {
            v49 = v44 + v48;
            v50 = v48 + 1;
            if (v48 >= 8)
              v51 = v43;
            else
              v51 = v9;
            v52 = v51 >> (v47 & 0x38);
            v53 = (8 * v44 + v47) & 0x38;
            v54 = (-255 << v53) - 1;
            v55 = (unint64_t)v52 << v53;
            v56 = v55 | v54 & countAndFlagsBits;
            v57 = v55 | v54 & v7;
            if (v49 < 8)
              v7 = v57;
            else
              countAndFlagsBits = v56;
            v47 += 8;
            v48 = v50;
          }
          while (v45 != v50);
        }
        swift_bridgeObjectRelease(object);
        swift_bridgeObjectRelease(0xE100000000000000);
        v58 = 0xA000000000000000;
        if (!(v7 & 0x8080808080808080 | countAndFlagsBits & 0x80808080808080))
          v58 = 0xE000000000000000;
        v19 = v58 & 0xFF00000000000000 | (v46 << 56) | countAndFlagsBits & 0xFFFFFFFFFFFFFFLL;
        continue;
      }
LABEL_222:
      v169 = 258;
      goto LABEL_223;
    }
    break;
  }
  if (v71 >= 16)
  {
    v43 = v177;
    v7 = v178;
    goto LABEL_95;
  }
  v1 = v178;
  if ((v178 & 0x2000000000000000) == 0)
  {
    v7 = v178;
    goto LABEL_118;
  }
  v85 = 0;
  v7 = v178;
LABEL_138:
  a1 = 0;
  swift_bridgeObjectRelease_n(object, 5);
  v9 = v177;
  if (v85)
    goto LABEL_201;
  while (2)
  {
    v106._rawBits = (v175 << 16) | 1;
    v107._rawBits = 1;
    v108._rawBits = _StringGuts.validateScalarRange(_:)(v107, v106, countAndFlagsBits, object);
    if (v108._rawBits < 0x10000)
      v108._rawBits |= 3;
    v110 = specialized String.init(_:)(v108, v109, countAndFlagsBits, object);
    v112 = v111;
    swift_bridgeObjectRelease(object);
    if ((v112 & 0x2000000000000000) != 0)
    {
      swift_bridgeObjectRelease(v112);
    }
    else if ((v112 & 0x1000000000000000) != 0)
    {
      v110 = _StringGuts._foreignConvertedToSmall()(v110, v112);
      v172 = v171;
      swift_bridgeObjectRelease(v112);
      v112 = v172;
    }
    else
    {
      if ((v110 & 0x1000000000000000) != 0)
      {
        v162 = (unsigned __int8 *)((v112 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v163 = v110 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v162 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v110, v112);
      }
      closure #1 in _StringGuts._convertedToSmall()(v162, v163, v176);
      if (a1)
        goto LABEL_230;
      swift_bridgeObjectRelease(v112);
      v112 = *((_QWORD *)&v176[0] + 1);
      v110 = *(_QWORD *)&v176[0];
    }
    v113 = HIBYTE(v1) & 0xF;
    v114 = HIBYTE(v112) & 0xF;
    v115 = v114 + v113;
    if ((unint64_t)(v114 + v113) > 0xF)
      goto LABEL_221;
    if (v114)
    {
      v116 = 0;
      v117 = 0;
      do
      {
        v118 = v113 + v117;
        v119 = v117 + 1;
        if (v117 >= 8)
          v120 = v112;
        else
          v120 = v110;
        v121 = v120 >> (v116 & 0x38);
        v122 = (8 * v113 + v116) & 0x38;
        v123 = (-255 << v122) - 1;
        v124 = (unint64_t)v121 << v122;
        v125 = v124 | v123 & v1;
        v126 = v124 | v123 & v9;
        if (v118 < 8)
          v9 = v126;
        else
          v1 = v125;
        v116 += 8;
        v117 = v119;
      }
      while (v114 != v119);
    }
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(object);
    v127 = 0xA000000000000000;
    if (!(v9 & 0x8080808080808080 | v1 & 0x80808080808080))
      v127 = 0xE000000000000000;
    v177 = v9;
    v178 = v127 & 0xFF00000000000000 | (v115 << 56) | v1 & 0xFFFFFFFFFFFFFFLL;
LABEL_160:
    v7 = v177;
    object = v178;
    if ((v178 & 0x2000000000000000) != 0)
      v129 = HIBYTE(v178) & 0xF;
    else
      v129 = v177 & 0xFFFFFFFFFFFFLL;
    if (!v129 && (v177 & ~v178 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease(v178);
      return;
    }
    if ((v178 & 0x2000000000000000) != 0 && (HIBYTE(v178) & 0xF) != 0xF)
    {
      swift_bridgeObjectRelease(v178);
      swift_bridgeObjectRelease(0xE100000000000000);
      return;
    }
    swift_bridgeObjectRetain_n(0xE100000000000000, 6, v83, v84);
    if ((object & 0x1000000000000000) == 0)
    {
      countAndFlagsBits = v129 + 1;
      if (!__OFADD__(v129, 1))
        goto LABEL_170;
LABEL_200:
      __break(1u);
LABEL_201:
      if ((v1 & 0x1000000000000000) != 0)
      {
        v9 = _StringGuts._foreignConvertedToSmall()(v9, v7);
        v1 = v170;
      }
      else
      {
        if ((v9 & 0x1000000000000000) != 0)
        {
          v160 = (unsigned __int8 *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v161 = v9 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          v160 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v9, v7);
          v161 = v103;
        }
        swift_bridgeObjectRetain(v7, v103, v104, v105);
        closure #1 in _StringGuts._convertedToSmall()(v160, v161, v176);
        if (a1)
          goto LABEL_230;
        swift_bridgeObjectRelease(v7);
        v1 = *((_QWORD *)&v176[0] + 1);
        v9 = *(_QWORD *)&v176[0];
      }
      continue;
    }
    break;
  }
LABEL_198:
  v159 = String.UTF8View._foreignCount()();
  countAndFlagsBits = v159 + 1;
  if (__OFADD__(v159, 1))
    goto LABEL_200;
LABEL_170:
  if ((v7 & ~object & 0x2000000000000000) == 0
    || !swift_isUniquelyReferenced_nonNull_native(object & 0xFFFFFFFFFFFFFFFLL))
  {
    if (countAndFlagsBits <= 15)
      goto LABEL_181;
    goto LABEL_186;
  }
  v130 = _StringGuts.nativeUnusedCapacity.getter(v7, object);
  if ((v131 & 1) != 0)
    goto LABEL_222;
  v133 = (object & 0x2000000000000000) == 0 && v130 > 0;
  if (countAndFlagsBits <= 15 && !v133)
  {
LABEL_181:
    swift_bridgeObjectRelease_n(0xE100000000000000, 5);
    swift_bridgeObjectRetain(object, v134, v135, v136);
    v137 = _StringGuts._convertedToSmall()(v7, object);
    v139 = v138;
    swift_bridgeObjectRelease(object);
    v140._rawBits = 1;
    v141._rawBits = 65537;
    v142._rawBits = _StringGuts.validateScalarRange(_:)(v140, v141, 0x22uLL, 0xE100000000000000);
    if (v142._rawBits < 0x10000)
      v142._rawBits |= 3;
    v144 = specialized String.init(_:)(v142, v143, 0x22uLL, 0xE100000000000000);
    v146 = v145;
    swift_bridgeObjectRelease(0xE100000000000000);
    v147 = _StringGuts._convertedToSmall()(v144, v146);
    v149 = v148;
    swift_bridgeObjectRelease(v146);
    specialized _SmallString.init(_:appending:)(v137, v139, v147, v149);
    if ((v150 & 1) == 0)
    {
      swift_bridgeObjectRelease(object);
      swift_bridgeObjectRelease(0xE100000000000000);
      return;
    }
LABEL_221:
    v169 = 266;
LABEL_223:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v169, 0);
  }
LABEL_186:
  _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(countAndFlagsBits, 1);
  swift_bridgeObjectRelease_n(0xE100000000000000, 6);
  v176[0] = xmmword_1816ABC90;
  v151 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 1, (uint64_t)v176, 1);
  _StringGuts.appendInPlace(_:isASCII:)(v151, v152, 1);
  if (a1)
  {
LABEL_230:
    swift_errorRelease(a1);
    __break(1u);
    swift_errorRelease(a1);
    swift_bridgeObjectRelease(object);
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease(0xE100000000000000);
  }
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Unicode.Scalar()
{
  unsigned int *v0;

  return specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(*v0);
}

void protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Unicode.Scalar()
{
  unsigned int *v0;

  Unicode.Scalar.debugDescription.getter((void *)*v0);
}

Swift::Unicode::Scalar_optional __swiftcall Unicode.Scalar.init(_:)(Swift::String a1)
{
  void *object;
  uint64_t countAndFlagsBits;
  unint64_t v3;
  unsigned int v4;
  Swift::UInt64 rawBits;
  unsigned __int8 v6;

  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  v3 = specialized Collection.first.getter(a1._countAndFlagsBits, (unint64_t)a1._object);
  if ((v3 & 0x100000000) != 0)
  {
    swift_bridgeObjectRelease((uint64_t)object);
    goto LABEL_5;
  }
  v4 = v3;
  rawBits = specialized Collection.count.getter(countAndFlagsBits, (unint64_t)object)._rawBits;
  swift_bridgeObjectRelease((uint64_t)object);
  if (rawBits != 1)
  {
LABEL_5:
    v4 = 0;
    v6 = 1;
    return (Swift::Unicode::Scalar_optional)(v4 | ((unint64_t)v6 << 32));
  }
  v6 = 0;
  return (Swift::Unicode::Scalar_optional)(v4 | ((unint64_t)v6 << 32));
}

void protocol witness for LosslessStringConvertible.init(_:) in conformance Unicode.Scalar(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  int v7;
  Swift::UInt64 rawBits;
  char v9;

  v6 = specialized Collection.first.getter(a1, a2);
  if ((v6 & 0x100000000) != 0)
  {
    swift_bridgeObjectRelease(a2);
    goto LABEL_5;
  }
  v7 = v6;
  rawBits = specialized Collection.count.getter(a1, a2)._rawBits;
  swift_bridgeObjectRelease(a2);
  if (rawBits != 1)
  {
LABEL_5:
    v7 = 0;
    v9 = 1;
    goto LABEL_6;
  }
  v9 = 0;
LABEL_6:
  *(_DWORD *)a3 = v7;
  *(_BYTE *)(a3 + 4) = v9;
}

void Unicode.Scalar.hash(into:)(int a1, Swift::UInt32 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int Unicode.Scalar.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Unicode.Scalar()
{
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Unicode.Scalar()
{
  Swift::UInt32 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Unicode.Scalar()
{
  return Hasher._finalize()();
}

Swift::Unicode::Scalar_optional __swiftcall Unicode.Scalar.init(_:)(Swift::Int a1)
{
  unint64_t v1;
  unsigned int v2;
  Swift::Int v3;
  char v4;
  Swift::Int v5;
  BOOL v6;
  BOOL v7;
  Swift::Int v8;
  unsigned __int8 v9;

  v1 = HIDWORD(a1);
  v2 = a1 - 57344;
  if (WORD1(a1) <= 0x10u)
    v3 = a1;
  else
    v3 = 0;
  v4 = ((_DWORD)a1 != 55295) & __CFADD__(v2, 2049);
  if (v2 <= 0xFFFFF7FF)
    v5 = v3;
  else
    v5 = 0;
  if (v4)
    v6 = 1;
  else
    v6 = WORD1(a1) > 0x10u;
  v7 = v1 == 0;
  if (v1)
    v8 = 0;
  else
    v8 = v5;
  v9 = !v7 || v6;
  return (Swift::Unicode::Scalar_optional)(v8 | ((unint64_t)v9 << 32));
}

Swift::UInt64 __swiftcall UInt64.init(_:)(Swift::Unicode::Scalar a1)
{
  Swift::UInt64 result;

  *(_QWORD *)&a1._value = a1._value;
  LODWORD(result) = a1;
  return result;
}

BOOL static Unicode.Scalar.< infix(_:_:)(unsigned int a1, unsigned int a2)
{
  return a1 < a2;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance Unicode.Scalar(_DWORD *a1, _DWORD *a2)
{
  return *a2 < *a1;
}

uint64_t Unicode.Scalar.UTF16View.value.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*Unicode.Scalar.UTF16View.value.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t Unicode.Scalar.UTF16View.startIndex.getter()
{
  return 0;
}

uint64_t Unicode.Scalar.UTF16View.endIndex.getter(unsigned int a1)
{
  if (HIWORD(a1))
    return 2;
  else
    return 1;
}

uint64_t static Unicode.UTF16.width(_:)(unsigned int a1)
{
  if (HIWORD(a1))
    return 2;
  else
    return 1;
}

uint64_t Unicode.Scalar.UTF16View.subscript.getter(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t result;

  v2 = WORD1(a2);
  if (a1 == 1)
  {
    if (v2)
      return a2 & 0x3FF | 0xFFFFDC00;
LABEL_9:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UTF16.swift", 17, 2, 0x5BuLL, 0);
  }
  if (!v2)
    return a2;
  result = (unsigned __int16)((a2 + 67043328) >> 10) + 55296;
  if ((result & 0x10000) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

uint64_t static Unicode.UTF16.trailSurrogate(_:)(unsigned int a1)
{
  if (!HIWORD(a1))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UTF16.swift", 17, 2, 0x5BuLL, 0);
  return a1 & 0x3FF | 0xFFFFDC00;
}

uint64_t static Unicode.UTF16.leadSurrogate(_:)(unsigned int a1)
{
  uint64_t result;

  if (!HIWORD(a1))
LABEL_4:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UTF16.swift", 17, 2, 0x43uLL, 0);
  result = (unsigned __int16)((a1 + 67043328) >> 10) + 55296;
  if ((result & 0x10000) != 0)
  {
    __break(1u);
    goto LABEL_4;
  }
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance Unicode.Scalar.UTF16View@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  return protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance Unicode.Scalar.UTF16View(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, uint64_t))specialized RandomAccessCollection<>.distance(from:to:), (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized RandomAccessCollection<>.index(_:offsetBy:), a4);
}

unint64_t protocol witness for BidirectionalCollection.index(before:) in conformance Unicode.Scalar.UTF16View@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unsigned int *v2;
  unint64_t result;

  result = specialized RandomAccessCollection<>.index(before:)(*a1, *v2);
  *a2 = result;
  return result;
}

unint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance Unicode.Scalar.UTF16View(unint64_t *result)
{
  uint64_t v1;
  unint64_t v2;

  v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else
  {
    if (*(_WORD *)(v1 + 2))
    {
      if (v2 >= 2)
        goto LABEL_4;
    }
    else if (*result != 1)
    {
LABEL_4:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2CAuLL, 0);
    }
    *result = v2;
  }
  return result;
}

unint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance Unicode.Scalar.UTF16View@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unsigned int *v3;
  unint64_t result;

  result = specialized RandomAccessCollection<>.index(_:offsetBy:)(*a1, a2, *v3);
  *a3 = result;
  return result;
}

unint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance Unicode.Scalar.UTF16View(uint64_t *a1, unint64_t *a2)
{
  unsigned int *v2;

  return specialized RandomAccessCollection<>.distance(from:to:)(*a1, *a2, *v2);
}

void protocol witness for Collection.endIndex.getter in conformance Unicode.Scalar.UTF16View(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = 1;
  if (*(_WORD *)(v1 + 2))
    v2 = 2;
  *a1 = v2;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance Unicode.Scalar.UTF16View(_WORD *a1, uint64_t *a2))()
{
  unsigned int *v2;

  *a1 = Unicode.Scalar.UTF16View.subscript.getter(*a2, *v2);
  return EnumeratedSequence._base.modify;
}

uint64_t protocol witness for Collection.subscript.getter in conformance Unicode.Scalar.UTF16View@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Collection.subscript.getter in conformance Unicode.Scalar.UTF16View(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD))specialized Collection<>.subscript.getter, a2);
}

void protocol witness for Collection.indices.getter in conformance Unicode.Scalar.UTF16View(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = 1;
  if (*(_WORD *)(v1 + 2))
    v2 = 2;
  *a1 = 0;
  a1[1] = v2;
}

unint64_t protocol witness for Collection.index(after:) in conformance Unicode.Scalar.UTF16View@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unsigned int *v2;
  unint64_t result;

  result = specialized RandomAccessCollection<>.index(after:)(*a1, *v2);
  *a2 = result;
  return result;
}

unint64_t *protocol witness for Collection.formIndex(after:) in conformance Unicode.Scalar.UTF16View(unint64_t *result)
{
  uint64_t v1;
  unint64_t v2;

  v2 = *result;
  if (*(_WORD *)(v1 + 2))
  {
    if (v2 >= 2)
      goto LABEL_3;
  }
  else if (v2)
  {
LABEL_3:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2CAuLL, 0);
  }
  *result = v2 + 1;
  return result;
}

unint64_t protocol witness for Sequence.underestimatedCount.getter in conformance Unicode.Scalar.UTF16View()
{
  unsigned int *v0;
  unint64_t v1;

  if (HIWORD(*v0))
    v1 = 2;
  else
    v1 = 1;
  return specialized RandomAccessCollection<>.distance(from:to:)(0, v1, *v0);
}

__objc2_class **protocol witness for Sequence._copyToContiguousArray() in conformance Unicode.Scalar.UTF16View()
{
  unsigned int *v0;

  return specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance Unicode.Scalar.UTF16View(uint64_t a1, _WORD *a2, uint64_t a3)
{
  unsigned int *v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t Unicode.Scalar.UTF8View.value.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*Unicode.Scalar.UTF8View.value.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t Unicode.Scalar.UTF8View.startIndex.getter()
{
  return 0;
}

uint64_t Unicode.Scalar.UTF8View.endIndex.getter(unsigned int a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = 2;
  v2 = 3;
  if (a1 >= 0x10000)
    v2 = 4;
  if (a1 > 0x7FF)
    v1 = v2;
  if (a1 >= 0x80)
    return v1;
  else
    return 1;
}

uint64_t Unicode.Scalar.UTF8View.subscript.getter(unint64_t a1, unsigned int a2)
{
  if ((a1 & 0x8000000000000000) != 0)
    goto LABEL_7;
  if (a2 > 0x7F)
  {
    if (a2 > 0x7FF)
    {
      if (HIWORD(a2))
      {
        if (a1 < 4)
          return specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(a2, a1);
      }
      else if (a1 < 3)
      {
        return specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(a2, a1);
      }
    }
    else if (a1 < 2)
    {
      return specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(a2, a1);
    }
LABEL_7:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unicode.Scalar.UTF8View index is out of bounds", 46, 2, "Swift/UnicodeScalar.swift", 25, 2, 0x1E9uLL, 0);
  }
  if (a1)
    goto LABEL_7;
  return specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(a2, a1);
}

uint64_t _ss7UnicodeO6ScalarV17withUTF8CodeUnitsyxxSRys5UInt8VGKXEKlFyt_Tg5024_ss12StaticStringV14withd14BufferyxxSRys5G20VGXElFxAFXEfU_yt_Tg5AHxRi_zRi0_zlyytIsgyr_Tf1ncn_n(unsigned int a1, uint64_t (*a2)(uint64_t *))
{
  unsigned int v2;
  int v4;
  int v5;
  int v6;
  uint64_t v7;

  if (a1 >= 0x80)
  {
    v4 = (a1 & 0x3F) << 8;
    if (a1 >= 0x800)
    {
      v5 = (v4 | (a1 >> 6) & 0x3F) << 8;
      v6 = (((v5 | (a1 >> 12) & 0x3F) << 8) | (a1 >> 18)) - 2122219023;
      v2 = (v5 | (a1 >> 12)) + 8487393;
      if (HIWORD(a1))
        v2 = v6;
    }
    else
    {
      v2 = (v4 | (a1 >> 6)) + 33217;
    }
  }
  else
  {
    v2 = a1 + 1;
  }
  v7 = (v2 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v2) >> 3))));
  return a2(&v7);
}

uint64_t specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(uint64_t result, unint64_t *a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  v2 = 0;
  v3 = (result & 0x3F) << 8;
  v4 = (v3 | (result >> 6)) + 33217;
  v5 = (v3 | (result >> 6) & 0x3F) << 8;
  v6 = (((v5 | (result >> 12) & 0x3F) << 8) | (result >> 18)) - 2122219023;
  v7 = (v5 | (result >> 12)) + 8487393;
  if (WORD1(result))
    v7 = v6;
  if (result >= 0x800)
    v4 = v7;
  if (result < 0x80)
    v8 = result + 1;
  else
    v8 = v4;
  v9 = 4 - (__clz(v8) >> 3);
  v24 = (v8 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * v9));
  v10 = *a2;
  do
  {
    v21 = *((unsigned __int8 *)&v24 + v2);
    v22 = HIBYTE(v10) & 7;
    v23 = 8 * v22;
    if (v22 == 7)
    {
      v11 = v10 & 0xFF00000000000000;
      v12 = (v21 << v23) | v10 & 0xFFFFFFFFFFFFFFLL;
      v13 = a2[4] ^ v12;
      v14 = a2[2];
      v15 = v14 + a2[1];
      v16 = v15 ^ __ROR8__(v14, 51);
      v17 = a2[3] + v13;
      v18 = v17 ^ __ROR8__(v13, 48);
      v19 = v18 + __ROR8__(v15, 32);
      v20 = v17 + v16;
      a2[3] = __ROR8__(v20, 32);
      a2[4] = v19 ^ __ROR8__(v18, 43);
      a2[1] = v19 ^ v12;
      a2[2] = v20 ^ __ROR8__(v16, 47);
    }
    else
    {
      v11 = (v21 << v23) | v10;
    }
    ++v2;
    v10 = v11 + 0x100000000000000;
  }
  while (v9 != v2);
  *a2 = v10;
  return result;
}

__objc2_class **specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(unsigned int a1, uint64_t *a2)
{
  __objc2_class *v2;
  __objc2_class *v3;
  unsigned int v4;
  unsigned int v5;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  __objc2_class *v11[3];

  if (a1 >= 0x80)
  {
    v7 = (a1 & 0x3F) << 8;
    if (a1 >= 0x800)
    {
      v8 = (v7 | (a1 >> 6) & 0x3F) << 8;
      v9 = (((v8 | (a1 >> 12) & 0x3F) << 8) | (a1 >> 18)) - 2122219023;
      v4 = (v8 | (a1 >> 12)) + 8487393;
      if (HIWORD(a1))
        v4 = v9;
    }
    else
    {
      v4 = (v7 | (a1 >> 6)) + 33217;
    }
  }
  else
  {
    v4 = a1 + 1;
  }
  v11[1] = v2;
  v11[2] = v3;
  v5 = __clz(v4);
  v10 = 4 - (v5 >> 3);
  v11[0] = (__objc2_class *)((v4 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (v5 >> 3)))));
  return specialized closure #1 in Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v11, &v10, a2);
}

uint64_t specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(unsigned int a1, uint64_t (*a2)(void))
{
  uint64_t v2;
  unsigned int v4;
  unsigned int v5;
  uint64_t result;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;

  if (a1 >= 0x80)
  {
    v8 = (a1 & 0x3F) << 8;
    if (a1 >= 0x800)
    {
      v9 = (v8 | (a1 >> 6) & 0x3F) << 8;
      v10 = (((v9 | (a1 >> 12) & 0x3F) << 8) | (a1 >> 18)) - 2122219023;
      v4 = (v9 | (a1 >> 12)) + 8487393;
      if (HIWORD(a1))
        v4 = v10;
    }
    else
    {
      v4 = (v8 | (a1 >> 6)) + 33217;
    }
  }
  else
  {
    v4 = a1 + 1;
  }
  v5 = __clz(v4);
  v11 = (v4 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (32 - (v5 & 0x18)));
  result = a2();
  if (!v2)
  {
    v7 = v5 >> 3;
    if (v7 != 3)
    {
      result = ((uint64_t (*)(_QWORD))a2)(BYTE1(v11));
      if (v7 != 2)
      {
        result = ((uint64_t (*)(_QWORD))a2)(BYTE2(v11));
        if (v7 != 1)
          return ((uint64_t (*)(_QWORD))a2)(BYTE3(v11));
      }
    }
  }
  return result;
}

uint64_t specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(unsigned int a1)
{
  unsigned int v1;
  unsigned int v2;
  int v4;
  int v5;
  int v6;
  uint8x16_t var8;

  if (a1 >= 0x80)
  {
    v4 = (a1 & 0x3F) << 8;
    if (a1 >= 0x800)
    {
      v5 = (v4 | (a1 >> 6) & 0x3F) << 8;
      v6 = (((v5 | (a1 >> 12) & 0x3F) << 8) | (a1 >> 18)) - 2122219023;
      v1 = (v5 | (a1 >> 12)) + 8487393;
      if (HIWORD(a1))
        v1 = v6;
    }
    else
    {
      v1 = (v4 | (a1 >> 6)) + 33217;
    }
  }
  else
  {
    v1 = a1 + 1;
  }
  v2 = __clz(v1);
  var8.i64[0] = (v1 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (v2 >> 3))));
  return specialized static String._uncheckedFromUTF8(_:)(&var8, 4 - (v2 >> 3));
}

uint64_t specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(unsigned int a1, unint64_t a2)
{
  unsigned int v2;
  unint64_t v3;
  int v5;
  int v6;
  int v7;
  uint64_t v8;

  if (a1 >= 0x80)
  {
    v5 = (a1 & 0x3F) << 8;
    if (a1 >= 0x800)
    {
      v6 = (v5 | (a1 >> 6) & 0x3F) << 8;
      v7 = (((v6 | (a1 >> 12) & 0x3F) << 8) | (a1 >> 18)) - 2122219023;
      v2 = (v6 | (a1 >> 12)) + 8487393;
      if (HIWORD(a1))
        v2 = v7;
    }
    else
    {
      v2 = (v5 | (a1 >> 6)) + 33217;
    }
  }
  else
  {
    v2 = a1 + 1;
  }
  v3 = 4 - (__clz(v2) >> 3);
  v8 = (v2 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * v3));
  if ((a2 & 0x8000000000000000) != 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F5uLL, 0);
  if (v3 <= a2)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
  return *((unsigned __int8 *)&v8 + a2);
}

uint64_t Unicode.Scalar.withUTF8CodeUnits<A>(_:)(uint64_t (*a1)(uint64_t *), uint64_t a2, unsigned int a3)
{
  unsigned int v3;
  int v5;
  int v6;
  int v7;
  uint64_t v8;

  if (a3 >= 0x80)
  {
    v5 = (a3 & 0x3F) << 8;
    if (a3 >= 0x800)
    {
      v6 = (v5 | (a3 >> 6) & 0x3F) << 8;
      v7 = (((v6 | (a3 >> 12) & 0x3F) << 8) | (a3 >> 18)) - 2122219023;
      v3 = (v6 | (a3 >> 12)) + 8487393;
      if (HIWORD(a3))
        v3 = v7;
    }
    else
    {
      v3 = (v5 | (a3 >> 6)) + 33217;
    }
  }
  else
  {
    v3 = a3 + 1;
  }
  v8 = (v3 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v3) >> 3))));
  return a1(&v8);
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance Unicode.Scalar.UTF8View@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  return protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance Unicode.Scalar.UTF16View(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, uint64_t))specialized RandomAccessCollection<>.distance(from:to:), (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized RandomAccessCollection<>.index(_:offsetBy:), a4);
}

unint64_t protocol witness for BidirectionalCollection.index(before:) in conformance Unicode.Scalar.UTF8View@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unsigned int *v2;
  unint64_t result;

  result = specialized RandomAccessCollection<>.index(before:)(*a1, *v2);
  *a2 = result;
  return result;
}

unint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance Unicode.Scalar.UTF8View(uint64_t *a1)
{
  unsigned int *v1;
  unint64_t result;

  result = specialized RandomAccessCollection<>.index(before:)(*a1, *v1);
  *a1 = result;
  return result;
}

unint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance Unicode.Scalar.UTF8View@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unsigned int *v3;
  unint64_t result;

  result = specialized RandomAccessCollection<>.index(_:offsetBy:)(*a1, a2, *v3);
  *a3 = result;
  return result;
}

unint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance Unicode.Scalar.UTF8View(unint64_t *a1, unint64_t *a2)
{
  unsigned int *v2;

  return specialized RandomAccessCollection<>.distance(from:to:)(*a1, *a2, *v2);
}

void protocol witness for Collection.endIndex.getter in conformance Unicode.Scalar.UTF8View(uint64_t *a1@<X8>)
{
  unsigned int *v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  v3 = 2;
  v4 = 3;
  if (*v1 >= 0x10000)
    v4 = 4;
  if (v2 > 0x7FF)
    v3 = v4;
  if (v2 >= 0x80)
    v5 = v3;
  else
    v5 = 1;
  *a1 = v5;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance Unicode.Scalar.UTF8View(_BYTE *a1, unint64_t *a2))()
{
  unsigned int *v2;

  *a1 = Unicode.Scalar.UTF8View.subscript.getter(*a2, *v2);
  return EnumeratedSequence._base.modify;
}

uint64_t protocol witness for Collection.subscript.getter in conformance Unicode.Scalar.UTF8View@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Collection.subscript.getter in conformance Unicode.Scalar.UTF16View(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD))specialized Collection<>.subscript.getter, a2);
}

uint64_t protocol witness for Collection.subscript.getter in conformance Unicode.Scalar.UTF16View@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD, _QWORD, _QWORD)@<X3>, uint64_t a3@<X8>)
{
  unsigned int *v3;
  uint64_t result;
  uint64_t v6;
  int v7;

  result = a2(*a1, a1[1], *v3);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v6;
  *(_DWORD *)(a3 + 16) = v7;
  return result;
}

uint64_t protocol witness for Collection.indices.getter in conformance Unicode.Scalar.UTF8View@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = specialized RandomAccessCollection<>.indices.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance Unicode.Scalar.UTF16View@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t (*a4)(_QWORD, _QWORD, uint64_t)@<X5>, uint64_t (*a5)(uint64_t, uint64_t, uint64_t)@<X6>, uint64_t a6@<X8>)
{
  unsigned int *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  char v14;

  v10 = *a1;
  v11 = *v6;
  v12 = a4(*a1, *a3, v11);
  if (a2 < 1)
  {
    if (v12 <= 0 && v12 > a2)
      goto LABEL_4;
LABEL_10:
    result = a5(v10, a2, v11);
    v14 = 0;
    goto LABEL_11;
  }
  if (v12 < 0 || v12 >= (unint64_t)a2)
    goto LABEL_10;
LABEL_4:
  result = 0;
  v14 = 1;
LABEL_11:
  *(_QWORD *)a6 = result;
  *(_BYTE *)(a6 + 8) = v14;
  return result;
}

unint64_t protocol witness for Collection.index(after:) in conformance Unicode.Scalar.UTF8View@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unsigned int *v2;
  unint64_t result;

  result = specialized RandomAccessCollection<>.index(after:)(*a1, *v2);
  *a2 = result;
  return result;
}

unint64_t protocol witness for Collection.formIndex(after:) in conformance Unicode.Scalar.UTF8View(unint64_t *a1)
{
  unsigned int *v1;
  unint64_t result;

  result = specialized RandomAccessCollection<>.index(after:)(*a1, *v1);
  *a1 = result;
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance Unicode.Scalar.UTF8View(uint64_t a1@<X8>)
{
  _DWORD *v1;

  *(_DWORD *)a1 = *v1;
  *(_QWORD *)(a1 + 8) = 0;
}

unint64_t protocol witness for Collection.count.getter in conformance Unicode.Scalar.UTF8View()
{
  unsigned int *v0;
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = *v0;
  v2 = 2;
  v3 = 3;
  if (*v0 >= 0x10000)
    v3 = 4;
  if (v1 > 0x7FF)
    v2 = v3;
  if (v1 >= 0x80)
    v4 = v2;
  else
    v4 = 1;
  return specialized RandomAccessCollection<>.distance(from:to:)(0, v4, v1);
}

__objc2_class **protocol witness for Sequence._copyToContiguousArray() in conformance Unicode.Scalar.UTF8View()
{
  unsigned int *v0;

  return specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance Unicode.Scalar.UTF8View(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  unsigned int *v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t static Unicode.UTF32._replacementCodeUnit.getter()
{
  return 65533;
}

uint64_t static Unicode.UTF8.encode(_:)(unsigned int a1)
{
  unsigned int v1;
  int v3;
  int v4;
  int v5;
  unsigned int v6;

  if (a1 > 0x7F)
  {
    v3 = (a1 & 0x3F) << 8;
    v4 = (v3 | (a1 >> 6) & 0x3F) << 8;
    v5 = (((v4 | (a1 >> 12) & 0x3F) << 8) | (a1 >> 18)) - 2122219023;
    v6 = (v4 | (a1 >> 12)) + 8487393;
    if (HIWORD(a1))
      v6 = v5;
    v1 = (v3 | (a1 >> 6)) + 33217;
    if (a1 > 0x7FF)
      return v6;
  }
  else
  {
    return a1 + 1;
  }
  return v1;
}

uint64_t _ValidUTF8Buffer._bytes.getter(unsigned int a1)
{
  return (a1 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(a1) >> 3)) & 7)));
}

void specialized closure #1 in Unicode.Scalar.withUTF8CodeUnits<A>(_:)(char *a1, size_t *a2, _QWORD *a3)
{
  size_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  v5 = a3[1] & 0xFFFFFFFFFFFFFFFLL;
  specialized UnsafeMutablePointer.initialize(from:count:)(a1, *a2, (char *)(v5 + (*(_QWORD *)(v5 + 0x18) & 0xFFFFFFFFFFFFLL) + 32));
  v6 = *(_QWORD *)(v5 + 24) & 0xFFFFFFFFFFFFLL;
  if (__OFADD__(v6, v3))
  {
    __break(1u);
  }
  else
  {
    __StringStorage._updateCountAndFlags(newCount:newIsASCII:)(v6 + v3, 0);
    *a3 = *(_QWORD *)(v5 + 24);
  }
}

__objc2_class **specialized closure #1 in Unicode.Scalar.withUTF8CodeUnits<A>(_:)(__objc2_class **result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  char *v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;

  v3 = *a2;
  if (*a2 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  if (v3)
  {
    v5 = (char *)result;
    v6 = *a3;
    do
    {
      v7 = *v5;
      result = (__objc2_class **)swift_isUniquelyReferenced_nonNull_native(v6);
      *a3 = v6;
      if ((result & 1) == 0)
      {
        result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v6 + 16) + 1, 1, v6);
        v6 = (uint64_t)result;
        *a3 = (uint64_t)result;
      }
      v9 = *(_QWORD *)(v6 + 16);
      v8 = *(_QWORD *)(v6 + 24);
      if (v9 >= v8 >> 1)
      {
        result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v8 > 1), v9 + 1, 1, v6);
        v6 = (uint64_t)result;
      }
      ++v5;
      *(_QWORD *)(v6 + 16) = v9 + 1;
      *(_BYTE *)(v6 + v9 + 32) = v7;
      *a3 = v6;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t Float.customMirror.getter@<X0>(uint64_t a1@<X8>, float a2@<S0>)
{
  return specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)(8, 0, 0, a1, a2);
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Float@<X0>(uint64_t a1@<X8>)
{
  float *v1;

  return specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)(8, 0, 0, a1, *v1);
}

void Float.customPlaygroundQuickLook.getter(uint64_t a1@<X8>, float a2@<S0>)
{
  *(float *)a1 = a2;
  *(_BYTE *)(a1 + 32) = 3;
}

float protocol witness for _CustomPlaygroundQuickLookable.customPlaygroundQuickLook.getter in conformance Float@<S0>(uint64_t a1@<X8>)
{
  float *v1;
  float result;

  result = *v1;
  *(float *)a1 = *v1;
  *(_BYTE *)(a1 + 32) = 3;
  return result;
}

uint64_t Double.customMirror.getter@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  return specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)(8, 0, 0, a1, a2);
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Double@<X0>(uint64_t a1@<X8>)
{
  double *v1;

  return specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)(8, 0, 0, a1, *v1);
}

void Double.customPlaygroundQuickLook.getter(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  *(_BYTE *)(a1 + 32) = 4;
}

double protocol witness for _CustomPlaygroundQuickLookable.customPlaygroundQuickLook.getter in conformance Double@<D0>(uint64_t a1@<X8>)
{
  double *v1;
  double result;

  result = *v1;
  *(double *)a1 = *v1;
  *(_BYTE *)(a1 + 32) = 4;
  return result;
}

uint64_t Bool.customMirror.getter@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  return specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)(a1, 8, 0, 0, a2);
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Bool@<X0>(uint64_t a1@<X8>)
{
  char *v1;

  return specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)(*v1, 8, 0, 0, a1);
}

uint64_t Bool.customPlaygroundQuickLook.getter@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = result;
  a2[32] = 13;
  return result;
}

void protocol witness for _CustomPlaygroundQuickLookable.customPlaygroundQuickLook.getter in conformance Bool(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
  a1[32] = 13;
}

uint64_t String.customMirror.getter@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X8>)
{
  swift_bridgeObjectRetain(a2, a2, a3, a4);
  return specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)(a1, a2, 8, 0, 0, a5);
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance String(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  return protocol witness for CustomReflectable.customMirror.getter in conformance String(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, _QWORD, _QWORD))specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:), a4);
}

unint64_t protocol witness for _CustomPlaygroundQuickLookable.customPlaygroundQuickLook.getter in conformance String@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char *a3@<X3>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  unint64_t v5;

  v5 = v4[1];
  *(_QWORD *)a4 = *v4;
  *(_QWORD *)(a4 + 8) = v5;
  *(_BYTE *)(a4 + 32) = 0;
  return swift_bridgeObjectRetain(v5, a1, a2, a3);
}

uint64_t Character.customMirror.getter@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X8>)
{
  swift_bridgeObjectRetain(a2, a2, a3, a4);
  return specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)(a1, a2, 8, 0, 0, a5);
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Character(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  return protocol witness for CustomReflectable.customMirror.getter in conformance String(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, _QWORD, _QWORD))specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:), a4);
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance String(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, unint64_t, uint64_t, _QWORD, _QWORD), char *a4)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;

  v6 = *v4;
  v5 = v4[1];
  swift_bridgeObjectRetain(v5, a2, (uint64_t)a3, a4);
  return a3(v6, v5, 8, 0, 0);
}

unint64_t Character.customPlaygroundQuickLook.getter@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X8>)
{
  *(_QWORD *)a5 = a1;
  *(_QWORD *)(a5 + 8) = a2;
  *(_BYTE *)(a5 + 32) = 0;
  return swift_bridgeObjectRetain(a2, a2, a3, a4);
}

uint64_t Unicode.Scalar.customMirror.getter@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  return specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)(a1, 8, 0, 0, a2);
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Unicode.Scalar@<X0>(uint64_t a1@<X8>)
{
  int *v1;

  return specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)(*v1, 8, 0, 0, a1);
}

uint64_t Unicode.Scalar.customPlaygroundQuickLook.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 32) = 2;
  return result;
}

uint64_t UInt8.customMirror.getter@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  return specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)(a1, 8, 0, 0, a2);
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance UInt8@<X0>(uint64_t a1@<X8>)
{
  char *v1;

  return specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)(*v1, 8, 0, 0, a1);
}

uint64_t UInt8.customPlaygroundQuickLook.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 32) = 2;
  return result;
}

void protocol witness for _CustomPlaygroundQuickLookable.customPlaygroundQuickLook.getter in conformance UInt8(uint64_t a1@<X8>)
{
  unsigned __int8 *v1;

  *(_QWORD *)a1 = *v1;
  *(_BYTE *)(a1 + 32) = 2;
}

uint64_t Int8.customMirror.getter@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  return specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)(a1, 8, 0, 0, a2);
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Int8@<X0>(uint64_t a1@<X8>)
{
  char *v1;

  return specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)(*v1, 8, 0, 0, a1);
}

uint64_t Int8.customPlaygroundQuickLook.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = (char)result;
  *(_BYTE *)(a2 + 32) = 1;
  return result;
}

void protocol witness for _CustomPlaygroundQuickLookable.customPlaygroundQuickLook.getter in conformance Int8(uint64_t a1@<X8>)
{
  char *v1;

  *(_QWORD *)a1 = *v1;
  *(_BYTE *)(a1 + 32) = 1;
}

uint64_t UInt16.customMirror.getter@<X0>(__int16 a1@<W0>, uint64_t a2@<X8>)
{
  return specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)(a1, 8, 0, 0, a2);
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance UInt16@<X0>(uint64_t a1@<X8>)
{
  __int16 *v1;

  return specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)(*v1, 8, 0, 0, a1);
}

uint64_t UInt16.customPlaygroundQuickLook.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = (unsigned __int16)result;
  *(_BYTE *)(a2 + 32) = 2;
  return result;
}

void protocol witness for _CustomPlaygroundQuickLookable.customPlaygroundQuickLook.getter in conformance UInt16(uint64_t a1@<X8>)
{
  unsigned __int16 *v1;

  *(_QWORD *)a1 = *v1;
  *(_BYTE *)(a1 + 32) = 2;
}

uint64_t Int16.customMirror.getter@<X0>(__int16 a1@<W0>, uint64_t a2@<X8>)
{
  return specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)(a1, 8, 0, 0, a2);
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Int16@<X0>(uint64_t a1@<X8>)
{
  __int16 *v1;

  return specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)(*v1, 8, 0, 0, a1);
}

uint64_t Int16.customPlaygroundQuickLook.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = (__int16)result;
  *(_BYTE *)(a2 + 32) = 1;
  return result;
}

void protocol witness for _CustomPlaygroundQuickLookable.customPlaygroundQuickLook.getter in conformance Int16(uint64_t a1@<X8>)
{
  __int16 *v1;

  *(_QWORD *)a1 = *v1;
  *(_BYTE *)(a1 + 32) = 1;
}

uint64_t UInt32.customMirror.getter@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  return specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)(a1, 8, 0, 0, a2);
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance UInt32@<X0>(uint64_t a1@<X8>)
{
  int *v1;

  return specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)(*v1, 8, 0, 0, a1);
}

uint64_t UInt32.customPlaygroundQuickLook.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 32) = 2;
  return result;
}

void protocol witness for _CustomPlaygroundQuickLookable.customPlaygroundQuickLook.getter in conformance UInt32(uint64_t a1@<X8>)
{
  unsigned int *v1;

  *(_QWORD *)a1 = *v1;
  *(_BYTE *)(a1 + 32) = 2;
}

uint64_t Int32.customMirror.getter@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  return specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)(a1, 8, 0, 0, a2);
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Int32@<X0>(uint64_t a1@<X8>)
{
  int *v1;

  return specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)(*v1, 8, 0, 0, a1);
}

uint64_t Int32.customPlaygroundQuickLook.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = (int)result;
  *(_BYTE *)(a2 + 32) = 1;
  return result;
}

void protocol witness for _CustomPlaygroundQuickLookable.customPlaygroundQuickLook.getter in conformance Int32(uint64_t a1@<X8>)
{
  int *v1;

  *(_QWORD *)a1 = *v1;
  *(_BYTE *)(a1 + 32) = 1;
}

uint64_t UInt64.customMirror.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)(a1, 8, 0, 0, a2);
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance UInt64@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)(*v1, 8, 0, 0, a1);
}

void protocol witness for _CustomPlaygroundQuickLookable.customPlaygroundQuickLook.getter in conformance UInt64(uint64_t a1@<X8>)
{
  _QWORD *v1;

  *(_QWORD *)a1 = *v1;
  *(_BYTE *)(a1 + 32) = 2;
}

uint64_t Int64.customMirror.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)(a1, 8, 0, 0, a2);
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Int64@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)(*v1, 8, 0, 0, a1);
}

void protocol witness for _CustomPlaygroundQuickLookable.customPlaygroundQuickLook.getter in conformance Int64(uint64_t a1@<X8>)
{
  _QWORD *v1;

  *(_QWORD *)a1 = *v1;
  *(_BYTE *)(a1 + 32) = 1;
}

uint64_t UInt.customMirror.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)(a1, 8, 0, 0, a2);
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance UInt@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)(*v1, 8, 0, 0, a1);
}

uint64_t UInt.customPlaygroundQuickLook.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 32) = 2;
  return result;
}

uint64_t Int.customMirror.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)(a1, 8, 0, 0, a2);
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Int@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)(*v1, 8, 0, 0, a1);
}

uint64_t Int.customPlaygroundQuickLook.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 32) = 1;
  return result;
}

uint64_t UInt128.customMirror.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)(a1, a2, 8, 0, 0, a3);
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance UInt128@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)(*v1, v1[1], 8, 0, 0, a1);
}

uint64_t Int128.customMirror.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)(a1, a2, 8, 0, 0, a3);
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Int128@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)(*v1, v1[1], 8, 0, 0, a1);
}

Swift::Bool __swiftcall _isPowerOf2(_:)(Swift::UInt a1)
{
  return a1 && (a1 & (a1 - 1)) == 0;
}

id _autorelease(_:)(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;

  v1 = a1;
  return swift_unknownObjectRetain(v1, v2, v3, v4);
}

Swift::String_optional __swiftcall _getFunctionFullNameFromMangledName(mangledName:)(Swift::String mangledName)
{
  __objc2_class **v1;
  uint8x16_t *FunctionFullNameFromMangledName;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  int64_t v6;
  char v7;
  uint64_t v8;
  void *v9;
  Swift::String_optional result;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(mangledName._countAndFlagsBits, (unint64_t)mangledName._object);
  FunctionFullNameFromMangledName = (uint8x16_t *)swift_getFunctionFullNameFromMangledName(v1 + 4, (size_t)v1[2]);
  v4 = v3;
  swift_release((uint64_t)v1);
  if (v4)
  {
    if (v4 < 0)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
    v5 = validateUTF8(_:)(FunctionFullNameFromMangledName->i64, v4);
    if ((v7 & 1) != 0)
      v8 = repairUTF8(_:firstKnownBrokenRange:)(FunctionFullNameFromMangledName->i8, v4, v5, v6);
    else
      v8 = specialized static String._uncheckedFromUTF8(_:isASCII:)(FunctionFullNameFromMangledName, v4, v5 & 1);
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  result.value._object = v9;
  result.value._countAndFlagsBits = v8;
  return result;
}

uint64_t UnsafeBufferPointer.endIndex.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

BOOL static UInt.> infix(_:_:)(unint64_t a1, unint64_t a2)
{
  return a2 < a1;
}

uint64_t _typeName(_:qualified:)(Class *a1, char a2)
{
  uint64_t *TypeName;
  uint64_t v3;
  uint8x16_t *v4;
  int64_t v5;
  int64_t v6;
  int64_t v7;
  char v8;

  TypeName = (uint64_t *)swift_getTypeName(a1, a2);
  if (v3 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  v4 = (uint8x16_t *)TypeName;
  v5 = v3;
  v6 = validateUTF8(_:)(TypeName, v3);
  if ((v8 & 1) != 0)
    return repairUTF8(_:firstKnownBrokenRange:)(v4->i8, v5, v6, v7);
  else
    return specialized static String._uncheckedFromUTF8(_:isASCII:)(v4, v5, v6 & 1);
}

uint64_t _mangledTypeName(_:)(unint64_t a1)
{
  uint64_t *MangledTypeName;
  uint64_t v2;
  uint8x16_t *v3;
  int64_t v4;
  int64_t v5;
  int64_t v6;
  char v7;

  MangledTypeName = (uint64_t *)swift_getMangledTypeName(a1);
  if (v2 < 1)
    return 0;
  v3 = (uint8x16_t *)MangledTypeName;
  v4 = v2;
  v5 = validateUTF8(_:)(MangledTypeName, v2);
  if ((v7 & 1) != 0)
  {
    repairUTF8(_:firstKnownBrokenRange:)(v3->i8, v4, v5, v6);
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "repairs made to _mangledTypeName, this is not expected since names should be valid UTF-8", 88, 2, "Swift/Misc.swift", 16, 2, 0x74uLL, 0);
  }
  return specialized static String._uncheckedFromUTF8(_:isASCII:)(v3, v4, v5 & 1);
}

uint64_t _typeByName(_:)(unint64_t a1, unint64_t a2)
{
  __objc2_class **v2;
  uint64_t TypeByMangledNameUntrusted;

  v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  TypeByMangledNameUntrusted = swift_stdlib_getTypeByMangledNameUntrusted((unsigned __int8 *)v2 + 32, (unint64_t)v2[2]);
  swift_release((uint64_t)v2);
  return TypeByMangledNameUntrusted;
}

uint64_t MutableCollection.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  unint64_t AssociatedConformanceWitness;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  void (*v30)(char *, char *, unint64_t);
  uint64_t v31;
  void (*v32)(char *, unint64_t);
  unint64_t *v33;
  char *v34;
  char *v35;
  void (*v36)(char *, char *, unint64_t);
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  unint64_t *TupleTypeMetadata2;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;

  v63 = a4;
  v64 = a1;
  v6 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)v6, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, AssociatedTypeWitness, AssociatedTypeWitness, "lower upper ", 0);
  v8 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v56 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v54 = (char *)&v51 - v11;
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v51 - v17;
  v19 = MEMORY[0x1E0C80A78](v16);
  v21 = (char *)&v51 - v20;
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v51 - v22;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v6, a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v60 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v25);
  v57 = *(_QWORD *)(v60 - 8);
  v26 = MEMORY[0x1E0C80A78](v60);
  v53 = (char *)&v51 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26);
  v55 = (char *)&v51 - v28;
  (*(void (**)(uint64_t, uint64_t))(v6 + 64))(a2, v6);
  v29 = *(void (**)(uint64_t, uint64_t))(v6 + 72);
  v61 = a2;
  v62 = v4;
  v59 = v6;
  v29(a2, v6);
  v30 = *(void (**)(char *, char *, unint64_t))(v12 + 16);
  v30(v18, v23, AssociatedTypeWitness);
  v52 = v21;
  v30(v15, v21, AssociatedTypeWitness);
  if (((*(uint64_t (**)(char *, char *, unint64_t, unint64_t))(AssociatedConformanceWitness + 24))(v18, v15, AssociatedTypeWitness, AssociatedConformanceWitness) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v31 = v12;
  v32 = *(void (**)(char *, unint64_t))(v12 + 8);
  v32(v15, AssociatedTypeWitness);
  v32(v18, AssociatedTypeWitness);
  v33 = TupleTypeMetadata2;
  v34 = v54;
  v35 = &v54[*((int *)TupleTypeMetadata2 + 12)];
  v36 = *(void (**)(char *, char *, unint64_t))(v31 + 32);
  v36(v54, v23, AssociatedTypeWitness);
  v36(v35, v52, AssociatedTypeWitness);
  v37 = v56;
  v38 = &v56[*((int *)v33 + 12)];
  v30(v56, v34, AssociatedTypeWitness);
  v30(v38, v35, AssociatedTypeWitness);
  v39 = v53;
  v36(v53, v37, AssociatedTypeWitness);
  v32(v38, AssociatedTypeWitness);
  v40 = &v37[*((int *)v33 + 12)];
  v36(v37, v34, AssociatedTypeWitness);
  v36(v40, v35, AssociatedTypeWitness);
  v41 = v60;
  v36(&v39[*(int *)(v60 + 36)], v40, AssociatedTypeWitness);
  v32(v37, AssociatedTypeWitness);
  v42 = v57;
  v43 = v55;
  (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v55, v39, v41);
  v44 = v59;
  v46 = v61;
  v45 = v62;
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v59 + 176))(v64, v43, v61, v59);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v43, v41);
  v48 = type metadata accessor for Slice(0, v46, v44, v47);
  v49 = v63;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(&v63[*(int *)(v48 + 40)], v45, v46);
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v39, v64, v41);
  v36(v49, v39, AssociatedTypeWitness);
  return ((uint64_t (*)(char *, char *, unint64_t))v36)(&v49[*(int *)(v48 + 36)], &v39[*(int *)(v41 + 36)], AssociatedTypeWitness);
}

uint64_t key path getter for MutableCollection.subscript(_:) : <A>AA@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char *a3@<X8>)
{
  return MutableCollection.subscript.getter(a1, *(_QWORD *)(a2 + a1 - 16), *(_QWORD *)(a2 + a1 - 8), a3);
}

uint64_t key path setter for MutableCollection.subscript(_:) : <A>AA(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  return specialized MutableCollection<>.subscript.setter(a1, a3, *(_QWORD *)&a3[a4 - 16], *(_QWORD *)&a3[a4 - 8]);
}

uint64_t MutableCollection.subscript.setter(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  const char *v8;
  unint64_t AssociatedTypeWitness;
  unint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  specialized MutableCollection<>.subscript.setter(a1, a2, a3, a4);
  v8 = *(const char **)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v8, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v8, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v12 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v11);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(a2, v12);
  v14 = type metadata accessor for Slice(0, a3, (uint64_t)v8, v13);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(a1, v14);
}

uint64_t _writeBackMutableSlice<A, B>(_:bounds:slice:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  unint64_t AssociatedTypeWitness;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  unint64_t AssociatedConformanceWitness;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  void (*v57)(void);
  void (*v58)(uint64_t, uint64_t);
  uint64_t v59;
  void (*v60)(char *, char *, unint64_t);
  char *v61;
  char *v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  void (*v66)(char *, unint64_t);
  unint64_t *v67;
  char *v68;
  char *v69;
  void (*v70)(char *, char *, unint64_t);
  char *v71;
  char *v72;
  void (*v73)(char *, char *, unint64_t);
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  void (*v83)(char *, char *, unint64_t);
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t (*v91)(char *, char *, unint64_t, uint64_t);
  char *v92;
  void (*v93)(char *, char *, unint64_t);
  char *v94;
  void (*v95)(char *, char *, unint64_t);
  char v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  void (*v106)(char *, uint64_t, uint64_t);
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  void (*v111)(char *, unint64_t);
  char *v112;
  char *v113;
  char *v114;
  char *v115;
  char v116;
  uint64_t v118;
  unint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t *TupleTypeMetadata2;
  char *v129;
  char *v130;
  char *v131;
  char *v132;
  unint64_t v133;
  char *v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  char *v149;
  void (*v150)(char *, char *, unint64_t);
  char v151[8];

  v142 = a3;
  v138 = a6;
  v139 = a2;
  v11 = *(_QWORD *)(a6 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(v11 + 8), a4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v135 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v136 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v134 = (char *)&v118 - v13;
  v14 = swift_getAssociatedTypeWitness(255, (const char *)v11, a4, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v14, v14, "lower upper ", 0);
  v15 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v147 = (char *)&v118 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  v129 = (char *)&v118 - v18;
  v19 = *(_QWORD *)(v14 - 8);
  v20 = MEMORY[0x1E0C80A78](v17);
  v120 = (char *)&v118 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20);
  v132 = (char *)&v118 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v140 = (char *)&v118 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v143 = (char *)&v118 - v27;
  v28 = MEMORY[0x1E0C80A78](v26);
  v148 = (char *)&v118 - v29;
  v30 = MEMORY[0x1E0C80A78](v28);
  v131 = (char *)&v118 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v149 = (char *)&v118 - v33;
  v34 = MEMORY[0x1E0C80A78](v32);
  v130 = (char *)&v118 - v35;
  v36 = MEMORY[0x1E0C80A78](v34);
  v38 = (char *)&v118 - v37;
  v39 = MEMORY[0x1E0C80A78](v36);
  v41 = (char *)&v118 - v40;
  v42 = MEMORY[0x1E0C80A78](v39);
  MEMORY[0x1E0C80A78](v42);
  v44 = (char *)&v118 - v43;
  v141 = a7;
  v45 = a7;
  v47 = v46;
  v144 = a5;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v45, a5, v14, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v127 = type metadata accessor for Range(0, v14, AssociatedConformanceWitness, v49);
  v126 = *(_QWORD *)(v127 - 8);
  v50 = MEMORY[0x1E0C80A78](v127);
  v122 = (char *)&v118 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = MEMORY[0x1E0C80A78](v50);
  v124 = (char *)&v118 - v53;
  MEMORY[0x1E0C80A78](v52);
  v55 = (char *)&v118 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = v56;
  v57 = *(void (**)(void))(v56 + 16);
  v123 = v55;
  v57();
  (*(void (**)(uint64_t, uint64_t))(v11 + 64))(a4, v11);
  v58 = *(void (**)(uint64_t, uint64_t))(v11 + 72);
  v137 = a1;
  v145 = v11;
  v146 = a4;
  v58(a4, v11);
  v59 = v19;
  v60 = *(void (**)(char *, char *, unint64_t))(v19 + 16);
  v60(v41, v44, v14);
  v121 = v47;
  v60(v38, v47, v14);
  v61 = v41;
  v62 = v38;
  v63 = v38;
  v64 = v14;
  if (((*(uint64_t (**)(char *, char *, unint64_t, unint64_t))(AssociatedConformanceWitness + 24))(v41, v63, v14, AssociatedConformanceWitness) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v119 = AssociatedConformanceWitness;
  v65 = v59;
  v66 = *(void (**)(char *, unint64_t))(v59 + 8);
  v66(v62, v14);
  v66(v61, v14);
  v150 = v60;
  v67 = TupleTypeMetadata2;
  v68 = v129;
  v69 = &v129[*((int *)TupleTypeMetadata2 + 12)];
  v70 = *(void (**)(char *, char *, unint64_t))(v65 + 32);
  v70(v129, v44, v14);
  v70(v69, v121, v14);
  v71 = v147;
  v72 = &v147[*((int *)v67 + 12)];
  v73 = v150;
  v150(v147, v68, v14);
  v73(v72, v69, v14);
  v74 = v122;
  v70(v122, v71, v14);
  v66(v72, v14);
  v75 = &v71[*((int *)v67 + 12)];
  v70(v71, v68, v14);
  v70(v75, v69, v14);
  v76 = v127;
  v70(&v74[*(int *)(v127 + 36)], v75, v14);
  v147 = (char *)v66;
  v66(v71, v14);
  v77 = v126;
  v78 = v124;
  (*(void (**)(char *, char *, uint64_t))(v126 + 32))(v124, v74, v76);
  v79 = v146;
  v80 = v139;
  v81 = v123;
  (*(void (**)(char *, char *, uint64_t))(v145 + 176))(v139, v78, v146);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v78, v76);
  (*(void (**)(char *, uint64_t))(v125 + 8))(v81, v79);
  v82 = v130;
  v83 = v150;
  v150(v130, v80, v14);
  v84 = &v80[*(int *)(v76 + 36)];
  v85 = v149;
  v83(v149, v84, v14);
  v86 = v141;
  v87 = v131;
  v88 = v144;
  (*(void (**)(uint64_t, uint64_t))(v141 + 64))(v144, v141);
  v89 = v148;
  (*(void (**)(uint64_t, uint64_t))(v86 + 72))(v88, v86);
  v90 = *(_QWORD *)(v119 + 8);
  v91 = *(uint64_t (**)(char *, char *, unint64_t, uint64_t))(v90 + 8);
  LOBYTE(v81) = v91(v82, v85, v14, v90);
  v92 = v143;
  v93 = v150;
  v150(v143, v89, v64);
  v94 = (char *)v91;
  v95 = v93;
  v139 = v94;
  if ((v81 & 1) != 0)
  {
LABEL_6:
    ((void (*)(char *, unint64_t))v147)(v92, v64);
  }
  else
  {
    v133 = v64;
    while (1)
    {
      v96 = ((uint64_t (*)(char *, char *, unint64_t, uint64_t))v94)(v87, v92, v64, v90);
      ((void (*)(char *, unint64_t))v147)(v92, v64);
      if ((v96 & 1) != 0)
        break;
      v97 = v140;
      v95(v140, v82, v64);
      v98 = v141;
      v99 = v144;
      v100 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v141 + 80))(v151, v87, v144, v141);
      v101 = v87;
      v102 = v134;
      (*(void (**)(char *))(v135 + 16))(v134);
      ((void (*)(char *, _QWORD))v100)(v151, 0);
      v103 = v146;
      (*(void (**)(char *, char *, uint64_t))(v138 + 24))(v102, v97, v146);
      v104 = v103;
      v87 = v101;
      v105 = v133;
      v92 = v143;
      (*(void (**)(char *, uint64_t))(v145 + 192))(v82, v104);
      v106 = *(void (**)(char *, uint64_t, uint64_t))(v98 + 192);
      v107 = v99;
      v95 = v150;
      v108 = v98;
      v94 = v139;
      v106(v87, v107, v108);
      LOBYTE(v100) = ((uint64_t (*)(char *, char *, unint64_t, uint64_t))v94)(v82, v149, v105, v90);
      v64 = v105;
      v95(v92, v148, v105);
      if ((v100 & 1) != 0)
        goto LABEL_6;
    }
  }
  v109 = v132;
  v95(v132, v149, v64);
  if ((((uint64_t (*)(char *, char *, unint64_t, uint64_t))v94)(v82, v109, v64, v90) & 1) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Cannot replace a slice of a MutableCollection with a slice of a smaller size", 76, 2, "Swift/WriteBackMutableSlice.swift", 33, 2, 0x29uLL, 0);
  v110 = v109;
  v111 = (void (*)(char *, unint64_t))v147;
  ((void (*)(char *, unint64_t))v147)(v110, v64);
  v112 = v120;
  v146 = v90;
  v113 = v148;
  v95(v120, v148, v64);
  v114 = v87;
  v115 = v140;
  v95(v140, v114, v64);
  v116 = ((uint64_t (*)(char *, char *, unint64_t, uint64_t))v139)(v115, v112, v64, v146);
  v111(v115, v64);
  if ((v116 & 1) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Cannot replace a slice of a MutableCollection with a slice of a larger size", 75, 2, "Swift/WriteBackMutableSlice.swift", 33, 2, 0x2CuLL, 0);
  v111(v112, v64);
  v111(v113, v64);
  v111(v114, v64);
  v111(v149, v64);
  return ((uint64_t (*)(char *, unint64_t))v111)(v82, v64);
}

uint64_t (*MutableCollection.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v4;
  _QWORD *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  char *v15;
  unint64_t AssociatedTypeWitness;
  unint64_t AssociatedConformanceWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;

  v9 = malloc(0x58uLL);
  *a1 = v9;
  v9[1] = a4;
  v9[2] = v4;
  *v9 = a3;
  v10 = *(const char **)(a4 + 8);
  v12 = type metadata accessor for Slice(0, a3, (uint64_t)v10, v11);
  v9[3] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v9[4] = v13;
  v14 = *(_QWORD *)(v13 + 64);
  v9[5] = malloc(v14);
  v15 = (char *)malloc(v14);
  v9[6] = v15;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v10, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v10, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v19 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v18);
  v9[7] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v9[8] = v20;
  v21 = *(_QWORD *)(v20 + 64);
  v9[9] = malloc(v21);
  v9[10] = malloc(v21);
  (*(void (**)(void))(v20 + 16))();
  MutableCollection.subscript.getter(a2, a3, a4, v15);
  return MutableCollection.subscript.modify;
}

void MutableCollection<>.subscript.modify(uint64_t **a1, char a2, uint64_t a3)
{
  uint64_t *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t WitnessTable;
  void (*v15)(void *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  char *v18;

  v3 = *a1;
  v4 = (char *)(*a1)[9];
  v6 = (*a1)[7];
  v5 = (*a1)[8];
  v7 = (void *)(*a1)[5];
  v8 = (void *)(*a1)[6];
  v9 = (*a1)[3];
  v10 = (*a1)[1];
  v11 = (*a1)[2];
  v12 = **a1;
  v17 = (*a1)[4];
  v18 = (char *)(*a1)[10];
  if ((a2 & 1) != 0)
  {
    (*(void (**)(void *, void *, uint64_t))((*a1)[4] + 16))(v7, v8, v9);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v4, v18, v6);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Slice<A>, v9, v13);
    _writeBackMutableSlice<A, B>(_:bounds:slice:)(v11, v4, (uint64_t)v7, v12, v9, v10, WitnessTable);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v4, v6);
    v15 = *(void (**)(void *, uint64_t))(v17 + 8);
    v15(v7, v9);
  }
  else
  {
    v16 = swift_getWitnessTable(&protocol conformance descriptor for Slice<A>, v9, a3);
    _writeBackMutableSlice<A, B>(_:bounds:slice:)(v11, v18, (uint64_t)v8, v12, v9, v10, v16);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v18, v6);
    v15 = *(void (**)(void *, uint64_t))(v17 + 8);
  }
  v15(v8, v9);
  free(v18);
  free(v4);
  free(v8);
  free(v7);
  free(v3);
}

void MutableCollection.subscript.getter()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Swift/MutableCollection.swift", 29, 2, 0x130uLL, 0);
}

void key path getter for MutableCollection.subscript(_:) : <A>AA()
{
  MutableCollection.subscript.getter();
}

void key path setter for MutableCollection.subscript(_:) : <A>AA()
{
  specialized MutableCollection.subscript.setter();
}

uint64_t key path getter for MutableCollection<>.subscript(_:) : <A>AA@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char *a3@<X8>)
{
  return MutableCollection<>.subscript.getter(a1, *(_QWORD *)(a2 + a1 - 16), *(_QWORD *)(a2 + a1 - 8), a3);
}

uint64_t MutableCollection.moveSubranges(_:to:)@<X0>(uint64_t *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t (*v45)(char *, void (*)(_QWORD, _QWORD), uint64_t, uint64_t);
  void (*v46)(char *, unint64_t);
  void (*v47)(uint64_t, uint64_t);
  char *v48;
  void (*v49)(char *, char *, unint64_t);
  char *v50;
  char *v51;
  void (*v52)(char *, unint64_t);
  unint64_t *v53;
  char *v54;
  char *v55;
  void (*v56)(char *, char *, unint64_t);
  void (*v57)(char *, char *, unint64_t);
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t);
  char *v69;
  char *v70;
  char *v71;
  void (*v72)(char *, unint64_t);
  unint64_t *v73;
  char *v74;
  char *v75;
  void (*v76)(char *, char *, unint64_t);
  void (*v77)(char *, char *, unint64_t);
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  void (*v86)(char *, uint64_t, unint64_t);
  char *v87;
  void (*v88)(char *, unint64_t);
  unint64_t *v89;
  char *v90;
  char *v91;
  void (*v92)(char *, uint64_t, unint64_t);
  char *v93;
  void (*v94)(char *, char *, unint64_t);
  char *v95;
  char *v96;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  void (*v109)(uint64_t, uint64_t);
  char *v110;
  char *v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  uint64_t (*v119)(char *, char *, unint64_t);
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void (*v126)(char *, unint64_t);
  uint64_t v127;
  char *v128;
  unint64_t *TupleTypeMetadata2;
  void (*v130)(uint64_t, uint64_t);
  unint64_t AssociatedConformanceWitness;
  void (*v132)(uint64_t, uint64_t);

  v102 = a5;
  v123 = a4;
  v9 = *(_QWORD *)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)v9, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, AssociatedTypeWitness, AssociatedTypeWitness, "lower upper ", 0);
  v11 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v116 = (char *)&v101 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v128 = (char *)&v101 - v13;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v9, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v127 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v14);
  v112 = *(_QWORD *)(v127 - 8);
  v15 = MEMORY[0x1E0C80A78](v127);
  v105 = (char *)&v101 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  v121 = (char *)&v101 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v110 = (char *)&v101 - v20;
  v21 = *(_QWORD **)(AssociatedTypeWitness - 8);
  v22 = MEMORY[0x1E0C80A78](v19);
  v107 = (char *)&v101 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1E0C80A78](v22);
  v106 = (char *)&v101 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v113 = (char *)&v101 - v27;
  v28 = MEMORY[0x1E0C80A78](v26);
  v111 = (char *)&v101 - v29;
  v30 = MEMORY[0x1E0C80A78](v28);
  v114 = (char *)&v101 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v104 = (uint64_t)&v101 - v33;
  v34 = MEMORY[0x1E0C80A78](v32);
  v118 = (char *)&v101 - v35;
  v36 = MEMORY[0x1E0C80A78](v34);
  v117 = (char *)&v101 - v37;
  v38 = MEMORY[0x1E0C80A78](v36);
  v40 = (char *)&v101 - v39;
  v41 = MEMORY[0x1E0C80A78](v38);
  v125 = (uint64_t)&v101 - v42;
  MEMORY[0x1E0C80A78](v41);
  v44 = (char *)&v101 - v43;
  v120 = *a1;
  v132 = *(void (**)(uint64_t, uint64_t))(v9 + 64);
  v132(a3, v9);
  v45 = *(uint64_t (**)(char *, void (*)(_QWORD, _QWORD), uint64_t, uint64_t))(v9 + 152);
  v108 = v45(v44, (void (*)(_QWORD, _QWORD))a2, a3, v9);
  v46 = (void (*)(char *, unint64_t))v21[1];
  v46(v44, AssociatedTypeWitness);
  v109 = *(void (**)(uint64_t, uint64_t))(v9 + 72);
  v109(a3, v9);
  v103 = v45(a2, (void (*)(_QWORD, _QWORD))v44, a3, v9);
  v126 = v46;
  v46(v44, AssociatedTypeWitness);
  v124 = v5;
  v122 = a3;
  v115 = v9;
  v132(a3, v9);
  v47 = (void (*)(uint64_t, uint64_t))a2;
  v48 = v40;
  v49 = (void (*)(char *, char *, unint64_t))v21[2];
  v50 = v117;
  v49(v117, v40, AssociatedTypeWitness);
  v130 = v47;
  v51 = v118;
  v132 = (void (*)(uint64_t, uint64_t))v49;
  ((void (*)(void))v49)();
  v119 = *(uint64_t (**)(char *, char *, unint64_t))(AssociatedConformanceWitness + 24);
  if ((v119(v50, v51, AssociatedTypeWitness) & 1) == 0)
    goto LABEL_5;
  v52 = v126;
  v126(v51, AssociatedTypeWitness);
  v52(v50, AssociatedTypeWitness);
  v54 = v128;
  v53 = TupleTypeMetadata2;
  v55 = &v128[*((int *)TupleTypeMetadata2 + 12)];
  v56 = (void (*)(char *, char *, unint64_t))v21[4];
  v56(v128, v48, AssociatedTypeWitness);
  v57 = (void (*)(char *, char *, unint64_t))v132;
  ((void (*)(char *, void (*)(uint64_t, uint64_t), unint64_t))v132)(v55, v130, AssociatedTypeWitness);
  v58 = v116;
  v59 = &v116[*((int *)v53 + 12)];
  v57(v116, v54, AssociatedTypeWitness);
  v57(v59, v55, AssociatedTypeWitness);
  v60 = v121;
  v56(v121, v58, AssociatedTypeWitness);
  v52(v59, AssociatedTypeWitness);
  v61 = &v58[*((int *)v53 + 12)];
  v56(v58, v54, AssociatedTypeWitness);
  v56(v61, v55, AssociatedTypeWitness);
  v62 = v127;
  v63 = &v60[*(int *)(v127 + 36)];
  v118 = (char *)v56;
  v56(v63, v61, AssociatedTypeWitness);
  v52(v58, AssociatedTypeWitness);
  v64 = v112;
  v65 = (uint64_t)v110;
  v117 = *(char **)(v112 + 32);
  v66 = ((uint64_t (*)(char *, char *, uint64_t))v117)(v110, v60, v62);
  MEMORY[0x1E0C80A78](v66);
  v67 = v122;
  v98 = v122;
  v99 = v123;
  v100 = v120;
  MutableCollection._indexedStablePartition(count:range:by:)(v108, v65, partial apply for closure #1 in MutableCollection.moveSubranges(_:to:), (uint64_t)(&v101 - 6), v122, v123, v125);
  v68 = *(void (**)(uint64_t, uint64_t))(v64 + 8);
  v68(v65, v62);
  v69 = v114;
  v109(v67, v115);
  v70 = v111;
  v57(v111, (char *)v130, AssociatedTypeWitness);
  v71 = v113;
  v57(v113, v69, AssociatedTypeWitness);
  if ((((uint64_t (*)(char *, char *, unint64_t, unint64_t))v119)(v70, v71, AssociatedTypeWitness, AssociatedConformanceWitness) & 1) == 0)goto LABEL_5;
  v72 = v126;
  v126(v71, AssociatedTypeWitness);
  v72(v70, AssociatedTypeWitness);
  v74 = v128;
  v73 = TupleTypeMetadata2;
  v75 = &v128[*((int *)TupleTypeMetadata2 + 12)];
  v76 = (void (*)(char *, char *, unint64_t))v132;
  ((void (*)(char *, void (*)(uint64_t, uint64_t), unint64_t))v132)(v128, v130, AssociatedTypeWitness);
  v130 = v68;
  v77 = (void (*)(char *, char *, unint64_t))v118;
  ((void (*)(char *, char *, unint64_t))v118)(v75, v69, AssociatedTypeWitness);
  v78 = &v58[*((int *)v73 + 12)];
  v76(v58, v74, AssociatedTypeWitness);
  v76(v78, v75, AssociatedTypeWitness);
  v79 = v121;
  v77(v121, v58, AssociatedTypeWitness);
  v72(v78, AssociatedTypeWitness);
  v80 = &v58[*((int *)v73 + 12)];
  v77(v58, v74, AssociatedTypeWitness);
  v77(v80, v75, AssociatedTypeWitness);
  v81 = v127;
  v77(&v79[*(int *)(v127 + 36)], v80, AssociatedTypeWitness);
  v72(v58, AssociatedTypeWitness);
  v82 = (uint64_t)v105;
  v83 = ((uint64_t (*)(char *, char *, uint64_t))v117)(v105, v79, v81);
  MEMORY[0x1E0C80A78](v83);
  v98 = v122;
  v99 = v123;
  v100 = v120;
  v84 = v104;
  MutableCollection._indexedStablePartition(count:range:by:)(v103, v82, (uint64_t (*)(uint64_t))partial apply for closure #2 in MutableCollection.moveSubranges(_:to:), (uint64_t)(&v101 - 6), v122, v123, v104);
  v130(v82, v81);
  v85 = v106;
  v86 = (void (*)(char *, uint64_t, unint64_t))v132;
  ((void (*)(char *, uint64_t, unint64_t))v132)(v106, v125, AssociatedTypeWitness);
  v87 = v107;
  v86(v107, v84, AssociatedTypeWitness);
  if ((((uint64_t (*)(char *, char *, unint64_t, unint64_t))v119)(v85, v87, AssociatedTypeWitness, AssociatedConformanceWitness) & 1) == 0)LABEL_5:_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v88 = v126;
  v126(v87, AssociatedTypeWitness);
  v88(v85, AssociatedTypeWitness);
  v90 = v128;
  v89 = TupleTypeMetadata2;
  v91 = &v128[*((int *)TupleTypeMetadata2 + 12)];
  v92 = (void (*)(char *, uint64_t, unint64_t))v118;
  ((void (*)(char *, uint64_t, unint64_t))v118)(v128, v125, AssociatedTypeWitness);
  v92(v91, v84, AssociatedTypeWitness);
  v93 = &v58[*((int *)v89 + 12)];
  v94 = (void (*)(char *, char *, unint64_t))v132;
  ((void (*)(char *, char *, unint64_t))v132)(v58, v90, AssociatedTypeWitness);
  v94(v93, v91, AssociatedTypeWitness);
  v95 = v102;
  v92(v102, (uint64_t)v58, AssociatedTypeWitness);
  v88(v93, AssociatedTypeWitness);
  v96 = &v58[*((int *)v89 + 12)];
  v92(v58, (uint64_t)v90, AssociatedTypeWitness);
  v92(v96, (uint64_t)v91, AssociatedTypeWitness);
  v92(&v95[*(int *)(v127 + 36)], (uint64_t)v96, AssociatedTypeWitness);
  return ((uint64_t (*)(char *, unint64_t))v88)(v58, AssociatedTypeWitness);
}

uint64_t RangeSet.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = type metadata accessor for RangeSet.Ranges(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  return RangeSet.Ranges._contains(_:)(a1, v5) & 1;
}

uint64_t MutableCollection._swapNonemptySubrangePrefixes(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  unint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(void);
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  char *v33;
  uint64_t (*v34)(uint64_t, char *, unint64_t, uint64_t);
  char v35;
  char v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, char *, unint64_t, uint64_t);
  char *v42;
  unint64_t v43;
  char *v44;
  void (*v45)(uint64_t, uint64_t, uint64_t);
  void (*v46)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;

  v51 = a4;
  v52 = a2;
  v40 = a1;
  v9 = *(_QWORD *)(a6 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)v9, a5, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v47 = a5;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v9, a5, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v13 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v38 - v16;
  MEMORY[0x1E0C80A78](v15);
  v39 = v18;
  v19 = *(void (**)(void))(v18 + 16);
  v50 = (char *)&v38 - v20;
  v19();
  ((void (*)(uint64_t, uint64_t, unint64_t))v19)(v52, v51, AssociatedTypeWitness);
  v48 = v9;
  v49 = a6;
  v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(a6 + 64);
  v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 192);
  v46 = v21;
  v22 = (char *)(a3 + *(int *)(v13 + 36));
  v43 = AssociatedTypeWitness;
  v44 = v22;
  v23 = *(_QWORD *)(AssociatedConformanceWitness + 8);
  v41 = *(uint64_t (**)(uint64_t, char *, unint64_t, uint64_t))(v23 + 8);
  v42 = v17;
  v24 = v47;
  while (1)
  {
    v25 = v50;
    v26 = v23;
    v27 = v13;
    v28 = v14;
    v29 = v52;
    v46(v50, v52, v24, v49);
    v30 = v48;
    v31 = v45;
    v45((uint64_t)v25, v24, v48);
    v32 = v29;
    v13 = v27;
    v23 = v26;
    v33 = v42;
    v31(v32, v24, v30);
    v34 = v41;
    v35 = v41((uint64_t)v25, v44, AssociatedTypeWitness, v23);
    v14 = v28;
    (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v33, v51, v13);
    if ((v35 & 1) != 0)
      break;
    v36 = v34(v52, &v33[*(int *)(v13 + 36)], AssociatedTypeWitness, v23);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v33, v13);
    if ((v36 & 1) != 0)
      return (*(uint64_t (**)(uint64_t, char *, unint64_t))(v39 + 32))(v40, v50, AssociatedTypeWitness);
  }
  (*(void (**)(char *, uint64_t))(v28 + 8))(v33, v13);
  return (*(uint64_t (**)(uint64_t, char *, unint64_t))(v39 + 32))(v40, v50, AssociatedTypeWitness);
}

uint64_t (*_NativeDictionary._storage.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t _NativeDictionary.age.getter(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

Swift::Void __swiftcall _NativeDictionary.invalidateIndices()()
{
  uint64_t v0;

  ++*(_DWORD *)(v0 + 36);
}

uint64_t _NativeDictionary.uncheckedInitialize(at:toKey:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(*(_QWORD *)(a4 + 48) + *(_QWORD *)(*(_QWORD *)(a5 - 8) + 72) * a1, a2, a5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 32))(*(_QWORD *)(a4 + 56) + *(_QWORD *)(*(_QWORD *)(a6 - 8) + 72) * a1, a3, a6);
}

unint64_t _NativeDictionary.find(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, a4);
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  int64x2_t *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  int64_t v10;
  int64x2_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t i;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  _QWORD *v29;
  char v30;

  v3 = v2;
  v5 = (int64x2_t *)*v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  v9 = (_QWORD *)specialized static _DictionaryStorage.resize(original:capacity:move:)(a1, (uint64_t (*)(_QWORD))canonical specialized generic type metadata accessor for _DictionaryStorage<ObjectIdentifier, Int>);
  if (v5[1].i64[0])
  {
    v30 = a2;
    v29 = v3;
    v10 = 0;
    v11 = v5 + 4;
    v12 = 1 << v5[2].i8[0];
    v13 = -1;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    v14 = v13 & v5[4].i64[0];
    v15 = (unint64_t)(v12 + 63) >> 6;
    if (!v14)
      goto LABEL_8;
LABEL_7:
    v16 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
    for (i = v16 | (v10 << 6); ; i = __clz(__rbit64(v19)) + (v10 << 6))
    {
      v21 = 8 * i;
      v22 = *(_QWORD *)(v5[3].i64[0] + v21);
      v23 = *(_QWORD *)(v5[3].i64[1] + v21);
      v24 = specialized static Hasher._hash(seed:_:)(v9[5], v22);
      v25 = specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v22, v24);
      if ((v6 & 1) != 0)
        goto LABEL_31;
      *(_QWORD *)((char *)v9 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v25;
      v26 = 8 * v25;
      *(_QWORD *)(v9[6] + v26) = v22;
      *(_QWORD *)(v9[7] + v26) = v23;
      ++v9[2];
      if (v14)
        goto LABEL_7;
LABEL_8:
      if (__OFADD__(v10++, 1))
        goto LABEL_30;
      if (v10 >= v15)
        break;
      v19 = v11->u64[v10];
      if (!v19)
      {
        v20 = v10 + 1;
        if (v10 + 1 >= v15)
          break;
        v19 = v11->u64[v20];
        if (!v19)
        {
          while (1)
          {
            v10 = v20 + 1;
            if (__OFADD__(v20, 1))
              break;
            if (v10 >= v15)
              goto LABEL_21;
            v19 = v11->u64[v10];
            ++v20;
            if (v19)
              goto LABEL_17;
          }
          __break(1u);
LABEL_30:
          __break(1u);
LABEL_31:
          swift_retain((unint64_t *)v5, v6, v7, v8);
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)((unint64_t)&type metadata for ObjectIdentifier);
        }
        ++v10;
      }
LABEL_17:
      v14 = (v19 - 1) & v19;
    }
LABEL_21:
    if ((v30 & 1) != 0)
    {
      v27 = 1 << v5[2].i8[0];
      if (v27 >= 64)
        specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v27 + 63) >> 6, v5 + 4);
      else
        v11->i64[0] = -1 << v27;
      v5[1].i64[0] = 0;
    }
    result = swift_release((uint64_t)v5);
    v3 = v29;
  }
  else
  {
    result = swift_release((uint64_t)v5);
  }
  *v3 = v9;
  return result;
}

{
  int64x2_t **v2;
  int64x2_t *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int64x2_t *v8;
  uint64_t v9;
  int64x2_t *v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v22;
  int64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  _OWORD *v27;
  uint64_t v28;
  _OWORD v29[2];

  v4 = *v2;
  if ((*v2)[1].i64[1] > a1)
    a1 = (*v2)[1].i64[1];
  v8 = (int64x2_t *)specialized static _DictionaryStorage.allocate(capacity:)(a1);
  if (!v4[1].i64[0])
    goto LABEL_28;
  v9 = 1 << v4[2].i8[0];
  v10 = v4 + 4;
  v11 = -1;
  if (v9 < 64)
    v11 = ~(-1 << v9);
  v12 = v11 & v4[4].i64[0];
  v13 = (unint64_t)(v9 + 63) >> 6;
  result = (uint64_t)swift_retain((unint64_t *)v4, v5, v6, v7);
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v19 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v20 = v19 | (v15 << 6);
      goto LABEL_21;
    }
    if (__OFADD__(v15++, 1))
      goto LABEL_30;
    if (v15 >= v13)
      break;
    v22 = v10->u64[v15];
    if (!v22)
    {
      v23 = v15 + 1;
      if (v15 + 1 >= v13)
        break;
      v22 = v10->u64[v23];
      if (!v22)
      {
        while (1)
        {
          v15 = v23 + 1;
          if (__OFADD__(v23, 1))
            break;
          if (v15 >= v13)
            goto LABEL_23;
          v22 = v10->u64[v15];
          ++v23;
          if (v22)
            goto LABEL_20;
        }
        __break(1u);
LABEL_30:
        __break(1u);
        return result;
      }
      ++v15;
    }
LABEL_20:
    v12 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v15 << 6);
LABEL_21:
    v24 = (unint64_t *)(v4[3].i64[0] + 16 * v20);
    v25 = *v24;
    v26 = v24[1];
    v27 = (_OWORD *)(v4[3].i64[1] + 32 * v20);
    if ((a2 & 1) != 0)
    {
      outlined init with take of Any(v27, v29);
    }
    else
    {
      outlined init with copy of Any((uint64_t)v27, (uint64_t)v29);
      swift_bridgeObjectRetain(v26, v16, v17, v18);
    }
    result = (uint64_t)specialized _NativeDictionary._unsafeInsertNew(key:value:)(v25, v26, v29, v8);
  }
LABEL_23:
  swift_release((uint64_t)v4);
  if ((a2 & 1) != 0)
  {
    v28 = 1 << v4[2].i8[0];
    if (v28 >= 64)
      specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v28 + 63) >> 6, v4 + 4);
    else
      v10->i64[0] = -1 << v28;
    v4[1].i64[0] = 0;
  }
LABEL_28:
  result = swift_release((uint64_t)v4);
  *v2 = v8;
  return result;
}

{
  int64x2_t **v2;
  int64x2_t *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int64x2_t *v8;
  uint64_t v9;
  int64x2_t *v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _OWORD v25[2];
  __int128 v26[2];
  uint64_t v27;

  v4 = *v2;
  if ((*v2)[1].i64[1] > a1)
    a1 = (*v2)[1].i64[1];
  v8 = (int64x2_t *)specialized static _DictionaryStorage.allocate(capacity:)(a1);
  if (!v4[1].i64[0])
    goto LABEL_28;
  v9 = 1 << v4[2].i8[0];
  v10 = v4 + 4;
  v11 = -1;
  if (v9 < 64)
    v11 = ~(-1 << v9);
  v12 = v11 & v4[4].i64[0];
  v13 = (unint64_t)(v9 + 63) >> 6;
  result = (uint64_t)swift_retain((unint64_t *)v4, v5, v6, v7);
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v16 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v17 = v16 | (v15 << 6);
      goto LABEL_21;
    }
    if (__OFADD__(v15++, 1))
      goto LABEL_30;
    if (v15 >= v13)
      break;
    v19 = v10->u64[v15];
    if (!v19)
    {
      v20 = v15 + 1;
      if (v15 + 1 >= v13)
        break;
      v19 = v10->u64[v20];
      if (!v19)
      {
        while (1)
        {
          v15 = v20 + 1;
          if (__OFADD__(v20, 1))
            break;
          if (v15 >= v13)
            goto LABEL_23;
          v19 = v10->u64[v15];
          ++v20;
          if (v19)
            goto LABEL_20;
        }
        __break(1u);
LABEL_30:
        __break(1u);
        return result;
      }
      ++v15;
    }
LABEL_20:
    v12 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v15 << 6);
LABEL_21:
    v21 = v4[3].i64[0] + 40 * v17;
    if ((a2 & 1) != 0)
    {
      v22 = *(_OWORD *)v21;
      v23 = *(_OWORD *)(v21 + 16);
      v27 = *(_QWORD *)(v21 + 32);
      v26[0] = v22;
      v26[1] = v23;
      outlined init with take of Any((_OWORD *)(v4[3].i64[1] + 32 * v17), v25);
    }
    else
    {
      outlined init with copy of AnyHashable(v21, (uint64_t)v26);
      outlined init with copy of Any(v4[3].i64[1] + 32 * v17, (uint64_t)v25);
    }
    result = (uint64_t)specialized _NativeDictionary._unsafeInsertNew(key:value:)(v26, v25, v8);
  }
LABEL_23:
  swift_release((uint64_t)v4);
  if ((a2 & 1) != 0)
  {
    v24 = 1 << v4[2].i8[0];
    if (v24 >= 64)
      specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v24 + 63) >> 6, v4 + 4);
    else
      v10->i64[0] = -1 << v24;
    v4[1].i64[0] = 0;
  }
LABEL_28:
  result = swift_release((uint64_t)v4);
  *v2 = v8;
  return result;
}

{
  _QWORD *v2;
  _QWORD *v3;
  int64x2_t *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  int64_t v10;
  int64x2_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t i;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  _QWORD *v29;
  char v30;

  v3 = v2;
  v5 = (int64x2_t *)*v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  v9 = (_QWORD *)specialized static _DictionaryStorage.resize(original:capacity:move:)(a1, (uint64_t (*)(_QWORD))canonical specialized generic type metadata accessor for _DictionaryStorage<Int, Int>);
  if (v5[1].i64[0])
  {
    v30 = a2;
    v29 = v3;
    v10 = 0;
    v11 = v5 + 4;
    v12 = 1 << v5[2].i8[0];
    v13 = -1;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    v14 = v13 & v5[4].i64[0];
    v15 = (unint64_t)(v12 + 63) >> 6;
    if (!v14)
      goto LABEL_8;
LABEL_7:
    v16 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
    for (i = v16 | (v10 << 6); ; i = __clz(__rbit64(v19)) + (v10 << 6))
    {
      v21 = 8 * i;
      v22 = *(_QWORD *)(v5[3].i64[0] + v21);
      v23 = *(_QWORD *)(v5[3].i64[1] + v21);
      v24 = specialized static Hasher._hash(seed:_:)(v9[5], v22);
      v25 = specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v22, v24);
      if ((v6 & 1) != 0)
        goto LABEL_31;
      *(_QWORD *)((char *)v9 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v25;
      v26 = 8 * v25;
      *(_QWORD *)(v9[6] + v26) = v22;
      *(_QWORD *)(v9[7] + v26) = v23;
      ++v9[2];
      if (v14)
        goto LABEL_7;
LABEL_8:
      if (__OFADD__(v10++, 1))
        goto LABEL_30;
      if (v10 >= v15)
        break;
      v19 = v11->u64[v10];
      if (!v19)
      {
        v20 = v10 + 1;
        if (v10 + 1 >= v15)
          break;
        v19 = v11->u64[v20];
        if (!v19)
        {
          while (1)
          {
            v10 = v20 + 1;
            if (__OFADD__(v20, 1))
              break;
            if (v10 >= v15)
              goto LABEL_21;
            v19 = v11->u64[v10];
            ++v20;
            if (v19)
              goto LABEL_17;
          }
          __break(1u);
LABEL_30:
          __break(1u);
LABEL_31:
          swift_retain((unint64_t *)v5, v6, v7, v8);
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)((unint64_t)&type metadata for Int);
        }
        ++v10;
      }
LABEL_17:
      v14 = (v19 - 1) & v19;
    }
LABEL_21:
    if ((v30 & 1) != 0)
    {
      v27 = 1 << v5[2].i8[0];
      if (v27 >= 64)
        specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v27 + 63) >> 6, v5 + 4);
      else
        v11->i64[0] = -1 << v27;
      v5[1].i64[0] = 0;
    }
    result = swift_release((uint64_t)v5);
    v3 = v29;
  }
  else
  {
    result = swift_release((uint64_t)v5);
  }
  *v3 = v9;
  return result;
}

unint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  int64x2_t **v2;
  int64x2_t *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int64x2_t *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t result;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  int64x2_t **v34;
  int64x2_t *v35;

  v4 = *v2;
  if ((*v2)[1].i64[1] > a1)
    a1 = (*v2)[1].i64[1];
  v35 = (int64x2_t *)specialized static _DictionaryStorage.resize(original:capacity:move:)(a1);
  if (!v4[1].i64[0])
    goto LABEL_27;
  v34 = v2;
  v8 = 1 << v4[2].i8[0];
  v9 = v4 + 4;
  v10 = -1;
  if (v8 < 64)
    v10 = ~(-1 << v8);
  v11 = v10 & v4[4].i64[0];
  v12 = (unint64_t)(v8 + 63) >> 6;
  result = (unint64_t)swift_retain((unint64_t *)v4, v5, v6, v7);
  v17 = 0;
  while (1)
  {
    if (v11)
    {
      v18 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v19 = v18 | (v17 << 6);
      goto LABEL_20;
    }
    if (__OFADD__(v17++, 1))
      goto LABEL_29;
    if (v17 >= v12)
      break;
    v21 = v9->u64[v17];
    if (!v21)
    {
      v22 = v17 + 1;
      if (v17 + 1 >= v12)
        break;
      v21 = v9->u64[v22];
      if (!v21)
      {
        while (1)
        {
          v17 = v22 + 1;
          if (__OFADD__(v22, 1))
            break;
          if (v17 >= v12)
            goto LABEL_22;
          v21 = v9->u64[v17];
          ++v22;
          if (v21)
            goto LABEL_19;
        }
        __break(1u);
LABEL_29:
        __break(1u);
        return result;
      }
      ++v17;
    }
LABEL_19:
    v11 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v17 << 6);
LABEL_20:
    v23 = 16 * v19;
    v24 = (unint64_t *)(v4[3].i64[0] + v23);
    v26 = *v24;
    v25 = v24[1];
    v27 = (uint64_t *)(v4[3].i64[1] + v23);
    v29 = *v27;
    v28 = v27[1];
    if ((a2 & 1) == 0)
    {
      swift_bridgeObjectRetain(v24[1], v14, v15, v16);
      swift_bridgeObjectRetain(v28, v30, v31, v32);
    }
    result = specialized _NativeDictionary._unsafeInsertNew(key:value:)(v26, v25, v29, v28, v35);
  }
LABEL_22:
  swift_release((uint64_t)v4);
  v2 = v34;
  if ((a2 & 1) != 0)
  {
    v33 = 1 << v4[2].i8[0];
    if (v33 > 63)
      specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v33 + 63) >> 6, v4 + 4);
    else
      v9->i64[0] = -1 << v33;
    v4[1].i64[0] = 0;
  }
LABEL_27:
  result = swift_release((uint64_t)v4);
  *v2 = v35;
  return result;
}

{
  int64x2_t **v2;
  int64x2_t *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int64x2_t *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t result;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  int64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64x2_t *v28;

  v4 = *v2;
  if ((*v2)[1].i64[1] > a1)
    a1 = (*v2)[1].i64[1];
  v28 = (int64x2_t *)specialized static _DictionaryStorage.resize(original:capacity:move:)(a1);
  if (!v4[1].i64[0])
    goto LABEL_27;
  v8 = 1 << v4[2].i8[0];
  v9 = v4 + 4;
  v10 = -1;
  if (v8 < 64)
    v10 = ~(-1 << v8);
  v11 = v10 & v4[4].i64[0];
  v12 = (unint64_t)(v8 + 63) >> 6;
  result = (unint64_t)swift_retain((unint64_t *)v4, v5, v6, v7);
  v17 = 0;
  while (1)
  {
    if (v11)
    {
      v18 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v19 = v18 | (v17 << 6);
      goto LABEL_20;
    }
    if (__OFADD__(v17++, 1))
      goto LABEL_29;
    if (v17 >= v12)
      break;
    v21 = v9->u64[v17];
    if (!v21)
    {
      v22 = v17 + 1;
      if (v17 + 1 >= v12)
        break;
      v21 = v9->u64[v22];
      if (!v21)
      {
        while (1)
        {
          v17 = v22 + 1;
          if (__OFADD__(v22, 1))
            break;
          if (v17 >= v12)
            goto LABEL_22;
          v21 = v9->u64[v17];
          ++v22;
          if (v21)
            goto LABEL_19;
        }
        __break(1u);
LABEL_29:
        __break(1u);
        return result;
      }
      ++v17;
    }
LABEL_19:
    v11 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v17 << 6);
LABEL_20:
    v23 = (unint64_t *)(v4[3].i64[0] + 16 * v19);
    v25 = *v23;
    v24 = v23[1];
    v26 = *(_QWORD *)(v4[3].i64[1] + 8 * v19);
    if ((a2 & 1) == 0)
      swift_bridgeObjectRetain(v23[1], v14, v15, v16);
    result = specialized _NativeDictionary._unsafeInsertNew(key:value:)(v25, v24, v26, v28);
  }
LABEL_22:
  swift_release((uint64_t)v4);
  if ((a2 & 1) != 0)
  {
    v27 = 1 << v4[2].i8[0];
    if (v27 > 63)
      specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v27 + 63) >> 6, v4 + 4);
    else
      v9->i64[0] = -1 << v27;
    v4[1].i64[0] = 0;
  }
LABEL_27:
  result = swift_release((uint64_t)v4);
  *v2 = v28;
  return result;
}

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  int64x2_t **v2;
  int64x2_t *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int64x2_t *v8;
  uint64_t v9;
  int64x2_t *v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  int64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _OWORD v30[2];
  uint64_t v31;

  v4 = *v2;
  if ((*v2)[1].i64[1] > a1)
    a1 = (*v2)[1].i64[1];
  v8 = (int64x2_t *)specialized static _DictionaryStorage.resize(original:capacity:move:)(a1);
  if (!v4[1].i64[0])
    goto LABEL_29;
  v9 = 1 << v4[2].i8[0];
  v10 = v4 + 4;
  v11 = -1;
  if (v9 < 64)
    v11 = ~(-1 << v9);
  v12 = v11 & v4[4].i64[0];
  v13 = (unint64_t)(v9 + 63) >> 6;
  swift_retain((unint64_t *)v4, v5, v6, v7);
  v14 = 0;
  while (1)
  {
    if (v12)
    {
      v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v19 = v18 | (v14 << 6);
      goto LABEL_21;
    }
    if (__OFADD__(v14++, 1))
      goto LABEL_31;
    if (v14 >= v13)
      break;
    v21 = v10->u64[v14];
    if (!v21)
    {
      v22 = v14 + 1;
      if (v14 + 1 >= v13)
        break;
      v21 = v10->u64[v22];
      if (!v21)
      {
        while (1)
        {
          v14 = v22 + 1;
          if (__OFADD__(v22, 1))
            break;
          if (v14 >= v13)
            goto LABEL_23;
          v21 = v10->u64[v14];
          ++v22;
          if (v21)
            goto LABEL_20;
        }
        __break(1u);
LABEL_31:
        __break(1u);
        return;
      }
      ++v14;
    }
LABEL_20:
    v12 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v14 << 6);
LABEL_21:
    v23 = (unint64_t *)(v4[3].i64[0] + 16 * v19);
    v24 = *v23;
    v25 = v23[1];
    v26 = v4[3].i64[1] + 40 * v19;
    if ((a2 & 1) != 0)
    {
      v27 = *(_OWORD *)v26;
      v28 = *(_OWORD *)(v26 + 16);
      v31 = *(_QWORD *)(v26 + 32);
      v30[0] = v27;
      v30[1] = v28;
    }
    else
    {
      outlined init with copy of AnyHashable(v26, (uint64_t)v30);
      swift_bridgeObjectRetain(v25, v15, v16, v17);
    }
    specialized _NativeDictionary._unsafeInsertNew(key:value:)(v24, v25, (uint64_t)v30, v8);
  }
LABEL_23:
  swift_release((uint64_t)v4);
  if ((a2 & 1) != 0)
  {
    v29 = 1 << v4[2].i8[0];
    if (v29 >= 64)
      specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v29 + 63) >> 6, v4 + 4);
    else
      v10->i64[0] = -1 << v29;
    v4[1].i64[0] = 0;
  }
LABEL_29:
  swift_release((uint64_t)v4);
  *v2 = v8;
}

{
  int64x2_t **v2;
  int64x2_t *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int64x2_t *v8;
  uint64_t v9;
  int64x2_t *v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t *v29;
  uint64_t v30;
  _OWORD v31[2];
  uint64_t v32;

  v4 = *v2;
  if ((*v2)[1].i64[1] > a1)
    a1 = (*v2)[1].i64[1];
  v8 = (int64x2_t *)specialized static _DictionaryStorage.resize(original:capacity:move:)(a1);
  if (!v4[1].i64[0])
    goto LABEL_29;
  v9 = 1 << v4[2].i8[0];
  v10 = v4 + 4;
  v11 = -1;
  if (v9 < 64)
    v11 = ~(-1 << v9);
  v12 = v11 & v4[4].i64[0];
  v13 = (unint64_t)(v9 + 63) >> 6;
  swift_retain((unint64_t *)v4, v5, v6, v7);
  v14 = 0;
  while (1)
  {
    if (v12)
    {
      v21 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v22 = v21 | (v14 << 6);
      goto LABEL_21;
    }
    if (__OFADD__(v14++, 1))
      goto LABEL_31;
    if (v14 >= v13)
      break;
    v24 = v10->u64[v14];
    if (!v24)
    {
      v25 = v14 + 1;
      if (v14 + 1 >= v13)
        break;
      v24 = v10->u64[v25];
      if (!v24)
      {
        while (1)
        {
          v14 = v25 + 1;
          if (__OFADD__(v25, 1))
            break;
          if (v14 >= v13)
            goto LABEL_23;
          v24 = v10->u64[v14];
          ++v25;
          if (v24)
            goto LABEL_20;
        }
        __break(1u);
LABEL_31:
        __break(1u);
        return;
      }
      ++v14;
    }
LABEL_20:
    v12 = (v24 - 1) & v24;
    v22 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_21:
    v26 = v4[3].i64[0] + 40 * v22;
    if ((a2 & 1) != 0)
    {
      v27 = *(_OWORD *)v26;
      v28 = *(_OWORD *)(v26 + 16);
      v32 = *(_QWORD *)(v26 + 32);
      v31[0] = v27;
      v31[1] = v28;
      v29 = (uint64_t *)(v4[3].i64[1] + 16 * v22);
      v16 = *v29;
      v17 = v29[1];
    }
    else
    {
      outlined init with copy of AnyHashable(v26, (uint64_t)v31);
      v15 = (uint64_t *)(v4[3].i64[1] + 16 * v22);
      v16 = *v15;
      v17 = v15[1];
      swift_bridgeObjectRetain(v17, v18, v19, v20);
    }
    specialized _NativeDictionary._unsafeInsertNew(key:value:)((uint64_t)v31, v16, v17, v8);
  }
LABEL_23:
  swift_release((uint64_t)v4);
  if ((a2 & 1) != 0)
  {
    v30 = 1 << v4[2].i8[0];
    if (v30 >= 64)
      specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v30 + 63) >> 6, v4 + 4);
    else
      v10->i64[0] = -1 << v30;
    v4[1].i64[0] = 0;
  }
LABEL_29:
  swift_release((uint64_t)v4);
  *v2 = v8;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t i;
  BOOL v28;
  int64_t v29;
  int64x2_t *v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t result;
  uint64_t *v46;
  int v47;
  int64_t v48;
  int64x2_t *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  int64_t v57;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v3;
  if (*(_QWORD *)(*v3 + 24) > v7)
    v7 = *(_QWORD *)(*v3 + 24);
  v54 = *(_QWORD *)(v8 + 32);
  v12 = specialized static _DictionaryStorage.allocate(capacity:)(v7, v5, v54);
  v16 = v12;
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_29;
  v52 = v10;
  v53 = v5;
  v46 = v3;
  v17 = 1 << *(_BYTE *)(v11 + 32);
  v18 = *(_QWORD *)(v11 + 64);
  v49 = (int64x2_t *)(v11 + 64);
  v19 = -1;
  if (v17 < 64)
    v19 = ~(-1 << v17);
  v20 = v19 & v18;
  v48 = (unint64_t)(v17 + 63) >> 6;
  v55 = (_QWORD *)v12;
  v50 = v12 + 64;
  swift_retain((unint64_t *)v11, v13, v14, v15);
  v21 = 0;
  v47 = a2;
  v22 = 16;
  if ((a2 & 1) != 0)
    v22 = 32;
  v51 = v22;
  v23 = v6;
  v24 = (uint64_t)v52;
  v25 = v53;
  v26 = v54;
  if (!v20)
    goto LABEL_10;
LABEL_9:
  v56 = (v20 - 1) & v20;
  v57 = v21;
  for (i = __clz(__rbit64(v20)) | (v21 << 6); ; i = __clz(__rbit64(v31)) + (v29 << 6))
  {
    v33 = *(_QWORD *)(v23 + 72);
    (*(void (**)(uint64_t, unint64_t, unint64_t))(v23 + v51))(v24, *(_QWORD *)(v11 + 48) + v33 * i, v25);
    v34 = v11;
    v35 = *(_QWORD *)(v11 + 56) + 16 * i;
    v36 = *(_BYTE *)(v35 + 8);
    v37 = *(_QWORD *)v35;
    v38 = v55;
    v39 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(v26 + 32))(v55[5], v25, v26);
    v40 = __RawDictionaryStorage.find<A>(_:hashValue:)(v24, v39, v25);
    if ((v41 & 1) != 0)
      goto LABEL_33;
    v42 = v40;
    *(_QWORD *)(v50 + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v40;
    (*(void (**)(unint64_t, uint64_t, unint64_t))(v23 + 32))(v38[6] + v33 * v40, v24, v25);
    v43 = v38[7] + 16 * v42;
    *(_QWORD *)v43 = v37;
    *(_BYTE *)(v43 + 8) = v36;
    ++v38[2];
    v11 = v34;
    v20 = v56;
    v21 = v57;
    if (v56)
      goto LABEL_9;
LABEL_10:
    v28 = __OFADD__(v21, 1);
    v29 = v21 + 1;
    if (v28)
      goto LABEL_32;
    v30 = v49;
    if (v29 >= v48)
      break;
    v31 = v49->u64[v29];
    if (!v31)
    {
      v32 = v29 + 1;
      if (v29 + 1 >= v48)
        break;
      v31 = v49->u64[v32];
      if (!v31)
      {
        while (1)
        {
          v29 = v32 + 1;
          if (__OFADD__(v32, 1))
            break;
          if (v29 >= v48)
            goto LABEL_23;
          v31 = v49->u64[v29];
          ++v32;
          if (v31)
            goto LABEL_19;
        }
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v25);
      }
      ++v29;
    }
LABEL_19:
    v56 = (v31 - 1) & v31;
    v57 = v29;
  }
LABEL_23:
  swift_release(v11);
  if ((v47 & 1) != 0)
  {
    v44 = 1 << *(_BYTE *)(v11 + 32);
    v3 = v46;
    v16 = (uint64_t)v55;
    if (v44 >= 64)
      specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v44 + 63) >> 6, v30);
    else
      v30->i64[0] = -1 << v44;
    *(_QWORD *)(v11 + 16) = 0;
LABEL_29:
    result = swift_release(v11);
    goto LABEL_30;
  }
  result = swift_release(v11);
  v3 = v46;
  v16 = (uint64_t)v55;
LABEL_30:
  *v3 = v16;
  return result;
}

Swift::Void __swiftcall _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(Swift::Int capacity, Swift::Bool moveElements)
{
  uint64_t v2;
  uint64_t *v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t i;
  int64_t v34;
  int64x2_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  _BOOL4 v48;
  int64_t v49;
  int64x2_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v4 = moveElements;
  v5 = *(_QWORD *)(v2 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](capacity);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 16) - 8);
  v12 = MEMORY[0x1E0C80A78](v7);
  v58 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = v13;
  v16 = *v3;
  if (*(_QWORD *)(*v3 + 24) > v12)
    v12 = *(_QWORD *)(*v3 + 24);
  v57 = *(_QWORD *)(v14 + 32);
  v17 = specialized static _DictionaryStorage.resize(original:capacity:move:)(v12, v13, v5, v57);
  v21 = v17;
  if (!*(_QWORD *)(v16 + 16))
    goto LABEL_26;
  v55 = v6;
  v56 = v5;
  v47 = v3;
  v22 = 1 << *(_BYTE *)(v16 + 32);
  v23 = *(_QWORD *)(v16 + 64);
  v50 = (int64x2_t *)(v16 + 64);
  v24 = -1;
  if (v22 < 64)
    v24 = ~(-1 << v22);
  v25 = v24 & v23;
  v49 = (unint64_t)(v22 + 63) >> 6;
  v60 = (_QWORD *)v17;
  v51 = v17 + 64;
  swift_retain((unint64_t *)v16, v18, v19, v20);
  v26 = 0;
  v48 = v4;
  v27 = 16;
  if (v4)
    v27 = 32;
  v53 = v27;
  v54 = v9;
  v52 = v16;
  v28 = (uint64_t)v58;
  v29 = v59;
  v30 = v9;
  v32 = v55;
  v31 = v56;
  if (!v25)
    goto LABEL_10;
LABEL_9:
  v63 = (v25 - 1) & v25;
  for (i = __clz(__rbit64(v25)) | (v26 << 6); ; i = __clz(__rbit64(v36)) + (v26 << 6))
  {
    v37 = *(_QWORD *)(v16 + 48);
    v62 = *(_QWORD *)(v11 + 72);
    v38 = v53;
    (*(void (**)(uint64_t, unint64_t, unint64_t))(v11 + v53))(v28, v37 + v62 * i, v29);
    v39 = *(_QWORD *)(v16 + 56);
    v61 = *(_QWORD *)(v32 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v32 + v38))(v30, v39 + v61 * i, v31);
    v40 = v60;
    v41 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(v57 + 32))(v60[5], v29, v57);
    v42 = __RawDictionaryStorage.find<A>(_:hashValue:)(v28, v41, v29);
    if ((v43 & 1) != 0)
      goto LABEL_30;
    v44 = v42;
    *(_QWORD *)(v51 + ((v42 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v42;
    (*(void (**)(unint64_t, uint64_t, unint64_t))(v11 + 32))(v40[6] + v62 * v42, v28, v29);
    (*(void (**)(unint64_t, char *, uint64_t))(v32 + 32))(v40[7] + v61 * v44, v30, v31);
    ++v40[2];
    v16 = v52;
    v25 = v63;
    if (v63)
      goto LABEL_9;
LABEL_10:
    v34 = v26 + 1;
    if (__OFADD__(v26, 1))
      goto LABEL_29;
    v35 = v50;
    if (v34 >= v49)
      break;
    v36 = v50->u64[v34];
    ++v26;
    if (!v36)
    {
      while (1)
      {
        v26 = v34 + 1;
        if (__OFADD__(v34, 1))
          break;
        if (v26 >= v49)
          goto LABEL_20;
        v36 = v50->u64[v26];
        ++v34;
        if (v36)
          goto LABEL_16;
      }
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v29);
    }
LABEL_16:
    v63 = (v36 - 1) & v36;
  }
LABEL_20:
  swift_release(v16);
  if (v48)
  {
    v45 = 1 << *(_BYTE *)(v16 + 32);
    v3 = v47;
    v21 = (uint64_t)v60;
    if (v45 > 63)
      specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v45 + 63) >> 6, v35);
    else
      v35->i64[0] = -1 << v45;
    *(_QWORD *)(v16 + 16) = 0;
LABEL_26:
    swift_release(v16);
    goto LABEL_27;
  }
  swift_release(v16);
  v3 = v47;
  v21 = (uint64_t)v60;
LABEL_27:
  *v3 = v21;
}

Swift::Void __swiftcall _NativeDictionary.resize(capacity:)(Swift::Int capacity)
{
  _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(capacity, 1);
}

Swift::Void __swiftcall _NativeDictionary.copyAndResize(capacity:)(Swift::Int capacity)
{
  _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(capacity, 0);
}

uint64_t specialized _NativeDictionary.ensureUnique(isUnique:capacity:)(char a1, uint64_t a2)
{
  return specialized _NativeDictionary.ensureUnique(isUnique:capacity:)(a1, a2, (void (*)(uint64_t, uint64_t))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (void (*)(void))specialized _NativeDictionary.copy());
}

{
  return specialized _NativeDictionary.ensureUnique(isUnique:capacity:)(a1, a2, (void (*)(uint64_t, uint64_t))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (void (*)(void))specialized _NativeDictionary.copy());
}

{
  return specialized _NativeDictionary.ensureUnique(isUnique:capacity:)(a1, a2, (void (*)(uint64_t, uint64_t))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (void (*)(void))specialized _NativeDictionary.copy());
}

{
  return specialized _NativeDictionary.ensureUnique(isUnique:capacity:)(a1, a2, (void (*)(uint64_t, uint64_t))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (void (*)(void))specialized _NativeDictionary.copy());
}

{
  return specialized _NativeDictionary.ensureUnique(isUnique:capacity:)(a1, a2, (void (*)(uint64_t, uint64_t))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (void (*)(void))specialized _NativeDictionary.copy());
}

uint64_t specialized _NativeDictionary.ensureUnique(isUnique:capacity:)(char a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), void (*a4)(void))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(*(_QWORD *)v4 + 24);
  if (v5 >= a2 && (a1 & 1) != 0)
    return 0;
  if ((a1 & 1) != 0)
  {
    v6 = 1;
    a3(a2, 1);
  }
  else if (v5 < a2)
  {
    a3(a2, 0);
    return 1;
  }
  else
  {
    a4();
    return 0;
  }
  return v6;
}

Swift::Bool __swiftcall _NativeDictionary.ensureUnique(isUnique:capacity:)(Swift::Bool isUnique, Swift::Int capacity)
{
  uint64_t v2;
  Swift::Int v4;
  Swift::Int v5;
  Swift::Bool v6;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 24);
  if (v4 >= capacity)
  {
    if (!isUnique)
      _NativeDictionary.copy()();
  }
  else
  {
    if (isUnique)
    {
      v5 = capacity;
      v6 = 1;
    }
    else
    {
      v5 = capacity;
      v6 = 0;
    }
    _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v5, v6);
  }
  return v4 < capacity;
}

Swift::_HashTable::Bucket __swiftcall _NativeDictionary.validatedBucket(for:)(Swift::_HashTable::Index a1)
{
  uint64_t v1;

  if (a1.bucket.offset < 0
    || 1 << *(_BYTE *)(v1 + 32) <= a1.bucket.offset
    || ((*(_QWORD *)(v1 + (((unint64_t)a1.bucket.offset >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> SLOBYTE(a1.bucket.offset)) & 1) == 0
    || *(_DWORD *)(v1 + 36) != a1.age)
  {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Dictionary elements using an invalid index", 63, 2, "Swift/NativeDictionary.swift", 28, 2, 0x119uLL, 0);
  }
  return a1.bucket;
}

uint64_t _NativeDictionary.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_QWORD *)(a2 + 16) && (v9 = __RawDictionaryStorage.find<A>(_:)(a1, a3, a5), (v10 & 1) != 0))
  {
    v11 = *(_QWORD *)(a2 + 56);
    v12 = *(_QWORD *)(a4 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v12 + 16))(a6, v11 + *(_QWORD *)(v12 + 72) * v9, a4);
    v13 = 0;
  }
  else
  {
    v12 = *(_QWORD *)(a4 - 8);
    v13 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a6, v13, 1, a4);
}

void $defer #1 <A, B>() in _NativeDictionary.subscript.modify(uint64_t a1, int a2, _QWORD **a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  _QWORD **v27;
  Swift::_HashTable::Bucket v28;
  void (*v29)(char *, char *, uint64_t);
  _QWORD *v30;
  uint64_t v31;
  _QWORD v32[2];
  uint64_t v33;
  unint64_t v34;
  _QWORD **v35;
  int v36;

  v32[0] = a5;
  v32[1] = a8;
  v34 = a4;
  v35 = a3;
  v36 = a2;
  v33 = a6;
  v10 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v12 = (char *)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Optional(0, v15, v13, v14);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x1E0C80A78](v16);
  v20 = (char *)v32 - v19;
  v21 = *(_QWORD *)(a7 - 8);
  v22 = MEMORY[0x1E0C80A78](v18);
  v24 = (char *)v32 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v26 = (char *)v32 - v25;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, a1, v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v20, 1, a7) == 1)
  {
    v27 = v35;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
    if ((v36 & 1) != 0)
    {
      v28.offset = v34;
      swift_arrayDestroy((*v27)[6] + *(_QWORD *)(v10 + 72) * v34, 1, v33);
      _NativeDictionary._delete(at:)(v28);
    }
  }
  else
  {
    v29 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
    v29(v26, v20, a7);
    v30 = *v35;
    if ((v36 & 1) != 0)
    {
      v29((char *)(v30[7] + *(_QWORD *)(v21 + 72) * v34), v26, a7);
    }
    else
    {
      v31 = v33;
      (*(void (**)(char *, _QWORD, uint64_t))(v10 + 16))(v12, v32[0], v33);
      v29(v24, v26, a7);
      _NativeDictionary._insert(at:key:value:)(v34, (uint64_t)v12, (uint64_t)v24, v30, v31, a7);
    }
  }
}

uint64_t key path getter for _NativeDictionary.subscript(_:isUnique:) : <A, B>_NativeDictionary<A, B>AB@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 + a2 - 16);
  v6 = *a1;
  if (*(_QWORD *)(*a1 + 16)
    && (v7 = __RawDictionaryStorage.find<A>(_:)(a2, *(_QWORD *)(a3 + a2 - 24), *(_QWORD *)(a3 + a2 - 8)), (v8 & 1) != 0))
  {
    v9 = *(_QWORD *)(v6 + 56);
    v10 = *(_QWORD *)(v5 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v10 + 16))(a4, v9 + *(_QWORD *)(v10 + 72) * v7, v5);
    v11 = 0;
  }
  else
  {
    v10 = *(_QWORD *)(v5 - 8);
    v11 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a4, v11, 1, v5);
}

uint64_t key path setter for _NativeDictionary.subscript(_:isUnique:) : <A, B>_NativeDictionary<A, B>AB(uint64_t a1, _QWORD **a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  _BOOL8 v21;
  Swift::Int v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  _QWORD **v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;

  v38 = a1;
  v6 = *(_QWORD *)(a4 + a3 - 24);
  v7 = *(_QWORD *)(a4 + a3 - 16);
  v8 = *(_QWORD *)(a4 + a3 - 8);
  v9 = type metadata accessor for Optional(0, v7, a3, a4);
  v36 = *(_QWORD *)(v9 - 8);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v34 - v11;
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v34 - v13;
  v37 = v15;
  (*(void (**)(char *, uint64_t, unint64_t))(v15 + 16))((char *)&v34 - v13, a3, v6);
  v16 = *(_BYTE *)(a3 + *((int *)swift_getTupleTypeMetadata2(0, v6, (uint64_t)&type metadata for Bool, 0, 0) + 12));
  v17 = *a2;
  v18 = __RawDictionaryStorage.find<A>(_:)((uint64_t)v14, v6, v8);
  v20 = v17[2];
  v21 = (v19 & 1) == 0;
  v22 = v20 + v21;
  if (__OFADD__(v20, v21))
  {
    __break(1u);
    goto LABEL_9;
  }
  v23 = v19;
  v39 = v18;
  v35 = v9;
  v24 = v8;
  type metadata accessor for _NativeDictionary(0, v6, v7, v8);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v16, v22))
  {
    v39 = __RawDictionaryStorage.find<A>(_:)((uint64_t)v14, v6, v8);
    if ((v23 & 1) != (v25 & 1))
LABEL_9:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  }
  v34 = a2;
  if ((v23 & 1) != 0)
  {
    v26 = (*a2)[7];
    v27 = *(_QWORD *)(v7 - 8);
    v28 = v39;
    (*(void (**)(char *, unint64_t, uint64_t))(v27 + 32))(v12, v26 + *(_QWORD *)(v27 + 72) * v39, v7);
    v29 = 0;
  }
  else
  {
    v27 = *(_QWORD *)(v7 - 8);
    v29 = 1;
    v28 = v39;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56))(v12, v29, 1, v7);
  v30 = v35;
  v31 = v36;
  v32 = *(void (**)(char *, uint64_t))(v36 + 8);
  v32(v12, v35);
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v12, v38, v30);
  $defer #1 <A, B>() in _NativeDictionary.subscript.modify((uint64_t)v12, v23 & 1, v34, v28, (uint64_t)v14, v6, v7, v24);
  v32(v12, v30);
  return (*(uint64_t (**)(char *, unint64_t))(v37 + 8))(v14, v6);
}

uint64_t _NativeDictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  _QWORD **v5;
  char v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  Swift::Int v19;
  char v20;
  Swift::Int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  void (*v32)(char *, uint64_t);
  _QWORD **v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v5 = (_QWORD **)v4;
  v7 = a3;
  v38 = a1;
  v9 = a4[3];
  v37 = type metadata accessor for Optional(0, v9, a3, (uint64_t)a4);
  v39 = *(_QWORD *)(v37 - 8);
  MEMORY[0x1E0C80A78](v37);
  v11 = (char *)&v36 - v10;
  v12 = (_QWORD *)*v4;
  v13 = a4[2];
  v14 = a4[4];
  v16 = __RawDictionaryStorage.find<A>(_:)(a2, v13, v14);
  v17 = v12[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  v20 = v15;
  v21 = v12[3];
  v36 = a2;
  if (v21 < v19 || (v7 & 1) == 0)
  {
    if (v21 >= v19 && (v7 & 1) == 0)
    {
      v22 = v16;
      _NativeDictionary.copy()();
      v16 = v22;
      goto LABEL_7;
    }
    _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, v7 & 1);
    v29 = a2;
    v24 = v14;
    v30 = __RawDictionaryStorage.find<A>(_:)(v29, v13, v14);
    if ((v20 & 1) == (v31 & 1))
    {
      v16 = v30;
      v23 = v38;
      v25 = v37;
      if ((v20 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      v26 = *(_QWORD *)(v9 - 8);
      v28 = 1;
      v27 = v16;
      goto LABEL_12;
    }
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v13);
  }
LABEL_7:
  v23 = v38;
  v24 = v14;
  v25 = v37;
  if ((v20 & 1) == 0)
    goto LABEL_11;
LABEL_8:
  v26 = *(_QWORD *)(v9 - 8);
  v27 = v16;
  (*(void (**)(char *, unint64_t, uint64_t))(v26 + 32))(v11, (*v5)[7] + *(_QWORD *)(v26 + 72) * v16, v9);
  v28 = 0;
LABEL_12:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56))(v11, v28, 1, v9);
  v32 = *(void (**)(char *, uint64_t))(v39 + 8);
  v32(v11, v25);
  v33 = v5;
  v34 = v36;
  $defer #1 <A, B>() in _NativeDictionary.subscript.modify(v23, v20 & 1, v33, v27, v36, v13, v9, v24);
  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)(v13 - 8) + 8))(v34, v13);
  return ((uint64_t (*)(uint64_t, uint64_t))v32)(v23, v25);
}

void KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(unint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  BOOL v21;
  int64_t v22;
  int64_t v23;
  char v24;
  char *v25;
  size_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  Swift::String::Index v30;
  Swift::String::Index v31;
  Swift::String::Index v32;
  Swift::String::Index v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t *TypeName;
  uint64_t v70;
  uint8x16_t *v71;
  int64_t v72;
  int64_t v73;
  int64_t v74;
  char v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  Swift::Int v87;
  int64_t v88;
  unint64_t v89;
  char *v90;
  int64_t v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  size_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  Swift::String::Index v100;
  Swift::String::Index v101;
  Swift::String::Index v102;
  Swift::String::Index v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  char *v126;
  size_t v127;
  char *v128;
  size_t v129;
  char v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  char v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  Swift::Int v148;
  int64_t v149;
  int64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  Swift::String::Index v155;
  Swift::String::Index v156;
  Swift::String::Index v157;
  Swift::String::Index v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  char v167;
  char *v168;
  unint64_t v169;
  unint64_t v170;
  int64_t v171;
  unint64_t v172;
  unint64_t v173;
  char v174;
  char *v175;
  size_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  char v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  char v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  char *v193;
  size_t v194;
  Swift::String::Index v195;
  Swift::String::Index v196;
  Swift::String::Index v197;
  Swift::String::Index v198;
  Swift::Int v199;
  Swift::String::Index v200;
  Swift::String::Index v201;
  Swift::String::Index v202;
  Swift::String::Index v203;
  Swift::Int v204;
  Swift::String::Index v205;
  Swift::String::Index v206;
  Swift::String::Index v207;
  Swift::String::Index v208;
  Swift::Int v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  uint64_t v214;
  unint64_t v215;

  v2 = specialized static String._createEmpty(withInitialCapacity:)(196);
  v6 = v2;
  v7 = v3;
  v214 = v2;
  v215 = v3;
  v8 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) != 0)
    v9 = HIBYTE(v3) & 0xF;
  else
    v9 = v2 & 0xFFFFFFFFFFFFLL;
  v10 = "Duplicate keys of type '";
  if (!v9 && (v2 & ~v3 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease(v3);
    v11 = 0x8000000181762D70 | 0x8000000000000000;
    v214 = 0xD000000000000018;
LABEL_59:
    v215 = v11;
    goto LABEL_60;
  }
  if ((v3 & 0x2000000000000000) != 0 && (0x8000000181762D70 & 0x2000000000000000) != 0)
  {
    v12 = v8 + ((0x8000000181762D70 >> 56) & 0xF);
    if (v12 <= 0xF)
    {
      v55 = (0x8000000181762D70 >> 56) & 0xF;
      if (v55)
      {
        v57 = 0;
        v58 = 0;
        v56 = v3;
        do
        {
          v59 = v8 + v58;
          v60 = v58 + 1;
          v61 = 0x8000000181762D70 | 0x8000000000000000;
          if (v58 < 8)
            v61 = 0xD000000000000018;
          v62 = v61 >> (v57 & 0x38);
          v63 = (8 * v8 + v57) & 0x38;
          v64 = (-255 << v63) - 1;
          v65 = (unint64_t)v62 << v63;
          v66 = v65 | v64 & v56;
          v67 = v65 | v64 & v6;
          if (v59 < 8)
            v6 = v67;
          else
            v56 = v66;
          v57 += 8;
          v58 = v60;
        }
        while (v55 != v60);
      }
      else
      {
        v56 = v3;
      }
      swift_bridgeObjectRelease(v3);
      swift_bridgeObjectRelease(0x8000000181762D70 | 0x8000000000000000);
      v68 = 0xA000000000000000;
      if (!(v6 & 0x8080808080808080 | v56 & 0x80808080808080))
        v68 = 0xE000000000000000;
      v11 = v68 & 0xFF00000000000000 | (v12 << 56) | v56 & 0xFFFFFFFFFFFFFFLL;
      goto LABEL_58;
    }
  }
  v13 = 0x8000000181762D70 | 0x8000000000000000;
  if ((0x8000000181762D70 & 0x2000000000000000) != 0)
    v14 = (0x8000000181762D70 >> 56) & 0xF;
  else
    v14 = 24;
  swift_bridgeObjectRetain_n(0x8000000181762D70 | 0x8000000000000000, 2, v4, v5);
  if ((0x8000000181762D70 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain_n(0x8000000181762D70 | 0x8000000000000000, 5, v15, v16);
    v195._rawBits = 1;
    v196._rawBits = (v14 << 16) | 1;
    v197._rawBits = _StringGuts.validateScalarRange(_:)(v195, v196, 0xD000000000000018, 0x8000000181762D70 | 0x8000000000000000);
    if (v197._rawBits < 0x10000)
      v197._rawBits |= 3;
    v20 = specialized Collection.count.getter(v197, v198, 0xD000000000000018, 0x8000000181762D70 | 0x8000000000000000);
    swift_bridgeObjectRelease(0x8000000181762D70 | 0x8000000000000000);
    if ((v7 & 0x1000000000000000) == 0)
    {
LABEL_15:
      v21 = __OFADD__(v9, v20);
      v22 = v9 + v20;
      if (!v21)
        goto LABEL_16;
      goto LABEL_185;
    }
  }
  else
  {
    swift_bridgeObjectRetain_n(0x8000000181762D70 | 0x8000000000000000, 4, v15, v16);
    v20 = v14;
    if ((v7 & 0x1000000000000000) == 0)
      goto LABEL_15;
  }
  v199 = String.UTF8View._foreignCount()();
  v22 = v199 + v20;
  if (!__OFADD__(v199, v20))
  {
LABEL_16:
    if ((v6 & ~v7 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v7 & 0xFFFFFFFFFFFFFFFLL))
    {
      v23 = _StringGuts.nativeUnusedCapacity.getter(v6, v7);
      if ((v17 & 1) != 0)
        goto LABEL_160;
      if (v22 > 15 || (v7 & 0x2000000000000000) == 0 && v23 >= v20)
      {
LABEL_22:
        _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v22, v20);
        if ((0x8000000181762D70 & 0x1000000000000000) != 0)
        {
          _StringGuts._foreignAppendInPlace(_:)(0xD000000000000018, 0x8000000181762D70 | 0x8000000000000000, 0, v14);
          v27 = 0x8000000181762D70 | 0x8000000000000000;
        }
        else
        {
          v24 = (0x8000000181762D70 & 0x2000000000000000) == 0 || (0x8000000181762D70 & 0x4000000000000000) != 0;
          swift_bridgeObjectRelease_n(0x8000000181762D70 | 0x8000000000000000, 5);
          if ((0x8000000181762D70 & 0x2000000000000000) != 0)
          {
            swift_bridgeObjectRelease(0x8000000181762D70 | 0x8000000000000000);
            v212 = 0xD000000000000018;
            v213 = 0x8000000181762D70 & 0xFFFFFFFFFFFFFFLL;
            v126 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v14, (uint64_t)&v212, (0x8000000181762D70 >> 56) & 0xF);
            _StringGuts.appendInPlace(_:isASCII:)(v126, v127, v24);
            swift_bridgeObjectRelease(0x8000000181762D70 | 0x8000000000000000);
LABEL_60:
            TypeName = (uint64_t *)swift_getTypeName((Class *)a1, 0);
            if (v70 < 0)
              _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
            v71 = (uint8x16_t *)TypeName;
            v72 = v70;
            v73 = validateUTF8(_:)(TypeName, v70);
            if ((v75 & 1) != 0)
              v76 = repairUTF8(_:firstKnownBrokenRange:)(v71->i8, v72, v73, v74);
            else
              v76 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v71, v72, v73 & 1);
            v6 = v76;
            a1 = v77;
            v7 = v214;
            v22 = v215;
            v80 = HIBYTE(v215) & 0xF;
            if ((v215 & 0x2000000000000000) != 0)
              v10 = (const char *)(HIBYTE(v215) & 0xF);
            else
              v10 = (const char *)(v214 & 0xFFFFFFFFFFFFLL);
            if (!v10 && (v214 & ~v215 & 0x2000000000000000) == 0)
            {
              swift_bridgeObjectRelease(v215);
              v214 = v6;
              v215 = a1;
              goto LABEL_126;
            }
            v20 = v77 & 0x2000000000000000;
            v14 = HIBYTE(v77) & 0xF;
            if ((v215 & 0x2000000000000000) != 0 && v20)
            {
              v83 = v80 + v14;
              if (v80 + v14 <= 0xF)
              {
                if (v14)
                {
                  v130 = 0;
                  v131 = 0;
                  v125 = v215;
                  do
                  {
                    v132 = v80 + v131;
                    v133 = v131 + 1;
                    if (v131 >= 8)
                      v134 = v77;
                    else
                      v134 = v76;
                    v135 = v134 >> (v130 & 0x38);
                    v136 = (8 * v80 + v130) & 0x38;
                    v137 = (-255 << v136) - 1;
                    v138 = (unint64_t)v135 << v136;
                    v139 = v138 | v137 & v125;
                    v140 = v138 | v137 & v7;
                    if (v132 < 8)
                      v7 = v140;
                    else
                      v125 = v139;
                    v130 += 8;
                    v131 = v133;
                  }
                  while (v14 != v133);
                }
                else
                {
                  v125 = v215;
                }
                swift_bridgeObjectRelease(v215);
                swift_bridgeObjectRelease(a1);
                v141 = 0xA000000000000000;
                if (!(v7 & 0x8080808080808080 | v125 & 0x80808080808080))
                  v141 = 0xE000000000000000;
                v214 = v7;
                v215 = v141 & 0xFF00000000000000 | (v83 << 56) | v125 & 0xFFFFFFFFFFFFFFLL;
                goto LABEL_126;
              }
              v20 = 1;
            }
            v211 = v76 & 0xFFFFFFFFFFFFLL;
            if (v20)
              v13 = HIBYTE(v77) & 0xF;
            else
              v13 = v76 & 0xFFFFFFFFFFFFLL;
            swift_bridgeObjectRetain_n(v77, 2, v78, v79);
            if ((a1 & 0x1000000000000000) == 0)
            {
              swift_bridgeObjectRetain_n(a1, 4, v18, v19);
              v87 = v13;
              if ((v22 & 0x1000000000000000) == 0)
                goto LABEL_79;
              goto LABEL_189;
            }
LABEL_186:
            swift_bridgeObjectRetain_n(a1, 5, v18, v19);
            v200._rawBits = 1;
            v201._rawBits = (v13 << 16) | 1;
            v202._rawBits = _StringGuts.validateScalarRange(_:)(v200, v201, v6, a1);
            if (v202._rawBits < 0x10000)
              v202._rawBits |= 3;
            v87 = specialized Collection.count.getter(v202, v203, v6, a1);
            swift_bridgeObjectRelease(a1);
            if ((v22 & 0x1000000000000000) == 0)
            {
LABEL_79:
              v21 = __OFADD__(v10, v87);
              v88 = (int64_t)&v10[v87];
              if (!v21)
                goto LABEL_80;
              goto LABEL_191;
            }
LABEL_189:
            v204 = String.UTF8View._foreignCount()();
            v88 = v204 + v87;
            if (!__OFADD__(v204, v87))
            {
LABEL_80:
              if ((v7 & ~v22 & 0x2000000000000000) != 0
                && swift_isUniquelyReferenced_nonNull_native(v22 & 0xFFFFFFFFFFFFFFFLL))
              {
                v90 = (char *)v214;
                v89 = v215;
                v91 = _StringGuts.nativeUnusedCapacity.getter(v214, v215);
                if ((v84 & 1) != 0)
                  goto LABEL_160;
                if (v88 <= 15 && ((v89 & 0x2000000000000000) != 0 || v91 < v87))
                {
LABEL_94:
                  swift_bridgeObjectRetain(v89, v84, v85, v86);
                  v97 = _StringGuts._convertedToSmall()((unint64_t)v90, v89);
                  v99 = v98;
                  swift_bridgeObjectRelease(v89);
                  v100._rawBits = (v13 << 16) | 1;
                  v101._rawBits = 1;
                  v102._rawBits = _StringGuts.validateScalarRange(_:)(v101, v100, v6, a1);
                  if (v102._rawBits < 0x10000)
                    v102._rawBits |= 3;
                  v104 = specialized String.init(_:)(v102, v103, v6, a1);
                  v106 = v105;
                  swift_bridgeObjectRelease(a1);
                  v107 = _StringGuts._convertedToSmall()(v104, v106);
                  v109 = v108;
                  swift_bridgeObjectRelease(v106);
                  v110 = HIBYTE(v99) & 0xF;
                  v111 = HIBYTE(v109) & 0xF;
                  v112 = v111 + v110;
                  if ((unint64_t)(v111 + v110) <= 0xF)
                  {
                    if (v111)
                    {
                      v113 = 0;
                      v114 = 0;
                      do
                      {
                        v115 = v110 + v114;
                        v116 = v114 + 1;
                        if (v114 >= 8)
                          v117 = v109;
                        else
                          v117 = v107;
                        v118 = v117 >> (v113 & 0x38);
                        v119 = (8 * v110 + v113) & 0x38;
                        v120 = (-255 << v119) - 1;
                        v121 = (unint64_t)v118 << v119;
                        v122 = v121 | v120 & v99;
                        v123 = v121 | v120 & v97;
                        if (v115 < 8)
                          v97 = v123;
                        else
                          v99 = v122;
                        v113 += 8;
                        v114 = v116;
                      }
                      while (v111 != v116);
                    }
                    swift_bridgeObjectRelease(v89);
                    swift_bridgeObjectRelease(a1);
                    v124 = 0xA000000000000000;
                    if (!(v97 & 0x8080808080808080 | v99 & 0x80808080808080))
                      v124 = 0xE000000000000000;
                    v214 = v97;
                    v215 = v124 & 0xFF00000000000000 | (v112 << 56) | v99 & 0xFFFFFFFFFFFFFFLL;
                    goto LABEL_126;
                  }
                  goto LABEL_152;
                }
              }
              else if (v88 <= 15)
              {
                v90 = (char *)v214;
                v89 = v215;
                goto LABEL_94;
              }
              _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v88, v87);
              if ((a1 & 0x1000000000000000) != 0)
              {
                _StringGuts._foreignAppendInPlace(_:)(v6, a1, 0, v13);
                goto LABEL_110;
              }
              swift_bridgeObjectRelease_n(a1, 4);
              if (!v20)
              {
                if ((v6 & 0x1000000000000000) == 0)
                  goto LABEL_198;
                swift_bridgeObjectRelease(a1);
                v92 = (id)((a1 & 0xFFFFFFFFFFFFFFFLL) + 32);
                v93 = v211;
                v94 = v211;
                goto LABEL_92;
              }
              swift_bridgeObjectRelease_n(a1, 2);
              v212 = v6;
              v213 = a1 & 0xFFFFFFFFFFFFFFLL;
              v128 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v14, (uint64_t)&v212, v14);
              _StringGuts.appendInPlace(_:isASCII:)(v128, v129, (a1 & 0x4000000000000000) != 0);
              swift_bridgeObjectRelease(a1);
              while (1)
              {
LABEL_126:
                v7 = v214;
                a1 = v215;
                v142 = HIBYTE(v215) & 0xF;
                if ((v215 & 0x2000000000000000) != 0)
                  v14 = HIBYTE(v215) & 0xF;
                else
                  v14 = v214 & 0xFFFFFFFFFFFFLL;
                if (!v14 && (v214 & ~v215 & 0x2000000000000000) == 0)
                {
                  swift_bridgeObjectRelease(v215);
                  v143 = 0x8000000181762D90 | 0x8000000000000000;
                  v214 = 0xD0000000000000AALL;
                  goto LABEL_176;
                }
                v88 = (int64_t)"' were found in a Dictionary.\n"
                                      "This usually means either that the type violates Hashable's requirements, or\n"
                                      "that members of such a dictionary were mutated after insertion.";
                if ((v215 & 0x2000000000000000) != 0 && (0x8000000181762D90 & 0x2000000000000000) != 0)
                {
                  v144 = v142 + ((0x8000000181762D90 >> 56) & 0xF);
                  if (v144 <= 0xF)
                  {
                    v178 = (0x8000000181762D90 >> 56) & 0xF;
                    if (v178)
                    {
                      v181 = 0;
                      v182 = 0;
                      v179 = v215;
                      do
                      {
                        v183 = v142 + v182;
                        v184 = v182 + 1;
                        v185 = 0xD0000000000000AALL;
                        if (v182 >= 8)
                          v185 = 0x8000000181762D90 | 0x8000000000000000;
                        v186 = v185 >> (v181 & 0x38);
                        v187 = (8 * v142 + v181) & 0x38;
                        v188 = (-255 << v187) - 1;
                        v189 = (unint64_t)v186 << v187;
                        v190 = v189 | v188 & v179;
                        v191 = v189 | v188 & v7;
                        if (v183 < 8)
                          v7 = v191;
                        else
                          v179 = v190;
                        v181 += 8;
                        v182 = v184;
                      }
                      while (v178 != v184);
                    }
                    else
                    {
                      v179 = v215;
                    }
                    swift_bridgeObjectRelease(v215);
                    swift_bridgeObjectRelease(0x8000000181762D90 | 0x8000000000000000);
                    v192 = 0xA000000000000000;
                    if (!(v7 & 0x8080808080808080 | v179 & 0x80808080808080))
                      v192 = 0xE000000000000000;
                    v143 = v192 & 0xFF00000000000000 | (v144 << 56) | v179 & 0xFFFFFFFFFFFFFFLL;
                    v214 = v7;
LABEL_176:
                    v215 = v143;
                    goto LABEL_177;
                  }
                }
                v20 = 0x8000000181762D90 | 0x8000000000000000;
                if ((0x8000000181762D90 & 0x2000000000000000) != 0)
                  v6 = (0x8000000181762D90 >> 56) & 0xF;
                else
                  v6 = 170;
                swift_bridgeObjectRetain_n(0x8000000181762D90 | 0x8000000000000000, 2, v81, v82);
                if ((0x8000000181762D90 & 0x1000000000000000) != 0)
                {
LABEL_192:
                  swift_bridgeObjectRetain_n(v20, 5, v85, v86);
                  v205._rawBits = 1;
                  v206._rawBits = (v6 << 16) | 1;
                  v207._rawBits = _StringGuts.validateScalarRange(_:)(v205, v206, 0xD0000000000000AALL, v20);
                  if (v207._rawBits < 0x10000)
                    v207._rawBits |= 3;
                  v148 = specialized Collection.count.getter(v207, v208, 0xD0000000000000AALL, v20);
                  swift_bridgeObjectRelease(v20);
                  if ((a1 & 0x1000000000000000) == 0)
                  {
LABEL_140:
                    v21 = __OFADD__(v14, v148);
                    v149 = v14 + v148;
                    if (!v21)
                      goto LABEL_141;
                    goto LABEL_197;
                  }
                }
                else
                {
                  swift_bridgeObjectRetain_n(0x8000000181762D90 | 0x8000000000000000, 4, v85, v86);
                  v148 = v6;
                  if ((a1 & 0x1000000000000000) == 0)
                    goto LABEL_140;
                }
                v209 = String.UTF8View._foreignCount()();
                v149 = v209 + v148;
                if (!__OFADD__(v209, v148))
                {
LABEL_141:
                  if ((v7 & ~a1 & 0x2000000000000000) == 0
                    || !swift_isUniquelyReferenced_nonNull_native(a1 & 0xFFFFFFFFFFFFFFFLL))
                  {
                    if (v149 <= 15)
                      goto LABEL_148;
                    goto LABEL_154;
                  }
                  v150 = _StringGuts.nativeUnusedCapacity.getter(v7, a1);
                  if ((v145 & 1) == 0)
                  {
                    v151 = (a1 >> 61) & 1;
                    if (v150 < v148)
                      LODWORD(v151) = 1;
                    if (v149 <= 15 && (_DWORD)v151)
                    {
LABEL_148:
                      swift_bridgeObjectRetain(a1, v145, v146, v147);
                      v152 = _StringGuts._convertedToSmall()(v7, a1);
                      v154 = v153;
                      swift_bridgeObjectRelease(a1);
                      v155._rawBits = (v6 << 16) | 1;
                      v156._rawBits = 1;
                      v157._rawBits = _StringGuts.validateScalarRange(_:)(v156, v155, 0xD0000000000000AALL, (v88 + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000);
                      if (v157._rawBits < 0x10000)
                        v157._rawBits |= 3;
                      v159 = specialized String.init(_:)(v157, v158, 0xD0000000000000AALL, (v88 + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000);
                      v161 = v160;
                      swift_bridgeObjectRelease((v88 + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000);
                      v162 = _StringGuts._convertedToSmall()(v159, v161);
                      v164 = v163;
                      swift_bridgeObjectRelease(v161);
                      v165 = specialized _SmallString.init(_:appending:)(v152, v154, v162, v164);
                      if ((v167 & 1) == 0)
                      {
                        v168 = (char *)v165;
                        v169 = v166;
                        swift_bridgeObjectRelease(a1);
                        swift_bridgeObjectRelease((v88 + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000);
                        v214 = (uint64_t)v168;
                        v215 = v169;
                        goto LABEL_177;
                      }
LABEL_152:
                      v170 = 266;
LABEL_161:
                      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v170, 0);
                    }
LABEL_154:
                    _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v149, v148);
                    v171 = v88 + 0x7FFFFFFFFFFFFFE0;
                    if (((v88 + 0x7FFFFFFFFFFFFFE0) & 0x1000000000000000) != 0)
                    {
                      v180 = v171 | 0x8000000000000000;
                      _StringGuts._foreignAppendInPlace(_:)(0xD0000000000000AALL, v171 | 0x8000000000000000, 0, v6);
                      v177 = v180;
LABEL_165:
                      swift_bridgeObjectRelease_n(v177, 2);
                    }
                    else
                    {
                      v172 = v171 | 0x8000000000000000;
                      v173 = ((v171 | 0x8000000000000000) >> 62) & 1;
                      if ((v172 & 0x2000000000000000) != 0)
                        v174 = v173;
                      else
                        v174 = 1;
                      swift_bridgeObjectRelease_n(v172, 5);
                      if ((v172 & 0x2000000000000000) == 0)
                      {
                        v175 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v6, ((v88 + 0x7FFFFFFFFFFFFFE0) & 0xFFFFFFFFFFFFFFFLL) + 32, 170);
                        _StringGuts.appendInPlace(_:isASCII:)(v175, v176, v174);
                        v177 = (v88 + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000;
                        goto LABEL_165;
                      }
                      swift_bridgeObjectRelease((v88 + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000);
                      v212 = 0xD0000000000000AALL;
                      v213 = (v88 + 0x7FFFFFFFFFFFFFE0) & 0xFFFFFFFFFFFFFFLL;
                      v193 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v6, (uint64_t)&v212, ((unint64_t)(v88 + 0x7FFFFFFFFFFFFFE0) >> 56) & 0xF);
                      _StringGuts.appendInPlace(_:isASCII:)(v193, v194, v174);
                      swift_bridgeObjectRelease((v88 + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000);
                    }
LABEL_177:
                    _assertionFailure(_:_:flags:)("Fatal error", 11, 2, (char *)v214, v215, 0);
                  }
LABEL_160:
                  v170 = 258;
                  goto LABEL_161;
                }
LABEL_197:
                __break(1u);
LABEL_198:
                v92 = _StringObject.sharedUTF8.getter(v6, a1);
                v94 = v210;
                swift_bridgeObjectRelease(a1);
                if (v94 < v211)
                  _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
                v93 = v211;
LABEL_92:
                v95 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v93, (uint64_t)v92, v94);
                _StringGuts.appendInPlace(_:isASCII:)(v95, v96, v6 < 0);
LABEL_110:
                swift_bridgeObjectRelease_n(a1, 2);
              }
            }
LABEL_191:
            __break(1u);
            goto LABEL_192;
          }
          v25 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v14, (0x8000000181762D70 & 0xFFFFFFFFFFFFFFFLL) + 32, 24);
          _StringGuts.appendInPlace(_:isASCII:)(v25, v26, v24);
          v27 = 0x8000000181762D70 | 0x8000000000000000;
        }
        swift_bridgeObjectRelease_n(v27, 2);
        goto LABEL_60;
      }
    }
    else if (v22 > 15)
    {
      goto LABEL_22;
    }
    swift_bridgeObjectRetain(v7, v17, v18, v19);
    v6 = _StringGuts._convertedToSmall()(v6, v7);
    v29 = v28;
    swift_bridgeObjectRelease(v7);
    v30._rawBits = (v14 << 16) | 1;
    v31._rawBits = 1;
    v32._rawBits = _StringGuts.validateScalarRange(_:)(v31, v30, 0xD000000000000018, 0x8000000181762D70 | 0x8000000000000000);
    if (v32._rawBits < 0x10000)
      v32._rawBits |= 3;
    v34 = specialized String.init(_:)(v32, v33, 0xD000000000000018, 0x8000000181762D70 | 0x8000000000000000);
    v36 = v35;
    swift_bridgeObjectRelease(0x8000000181762D70 | 0x8000000000000000);
    v37 = _StringGuts._convertedToSmall()(v34, v36);
    v39 = v38;
    swift_bridgeObjectRelease(v36);
    v40 = HIBYTE(v29) & 0xF;
    v41 = HIBYTE(v39) & 0xF;
    v42 = v41 + v40;
    if ((unint64_t)(v41 + v40) > 0xF)
      goto LABEL_152;
    if (v41)
    {
      v43 = 0;
      v44 = 0;
      do
      {
        v45 = v40 + v44;
        v46 = v44 + 1;
        if (v44 >= 8)
          v47 = v39;
        else
          v47 = v37;
        v48 = v47 >> (v43 & 0x38);
        v49 = (8 * v40 + v43) & 0x38;
        v50 = (-255 << v49) - 1;
        v51 = (unint64_t)v48 << v49;
        v52 = v51 | v50 & v29;
        v53 = v51 | v50 & v6;
        if (v45 < 8)
          v6 = v53;
        else
          v29 = v52;
        v43 += 8;
        v44 = v46;
      }
      while (v41 != v46);
    }
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(0x8000000181762D70 | 0x8000000000000000);
    v54 = 0xA000000000000000;
    if (!(v6 & 0x8080808080808080 | v29 & 0x80808080808080))
      v54 = 0xE000000000000000;
    v11 = v54 & 0xFF00000000000000 | (v42 << 56) | v29 & 0xFFFFFFFFFFFFFFLL;
LABEL_58:
    v214 = v6;
    goto LABEL_59;
  }
LABEL_185:
  __break(1u);
  goto LABEL_186;
}

__objc2_class **specialized _NativeDictionary.extractDictionary(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  void (*v32)(uint64_t, char *, unint64_t);
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v40 = a1;
  v41 = a2;
  v47 = *(_QWORD *)(a5 - 8);
  v48 = a6;
  v9 = MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v46 = (char *)&v40 - v15;
  if (!v13)
    return &_swiftEmptyDictionarySingleton;
  if (a4[2] != a3)
  {
    v45 = specialized static _DictionaryStorage.allocate(capacity:)(a3, a5, v48);
    if (v41 < 1)
      v16 = 0;
    else
      v16 = *v40;
    v17 = 0;
    v42 = v45 + 64;
    v43 = v11;
    v44 = a5;
    v18 = a5;
    v19 = (uint64_t)v43;
    while (1)
    {
      v51 = a3;
      if (v16)
      {
        v49 = (v16 - 1) & v16;
        v50 = v17;
        v20 = __clz(__rbit64(v16)) | (v17 << 6);
      }
      else
      {
        v21 = v17 + 1;
        if (__OFADD__(v17, 1))
          goto LABEL_29;
        if (v21 >= v41)
          return (__objc2_class **)v45;
        v22 = v40[v21];
        v23 = v17 + 1;
        if (!v22)
        {
          v23 = v17 + 2;
          if (v17 + 2 >= v41)
            return (__objc2_class **)v45;
          v22 = v40[v23];
          if (!v22)
          {
            v24 = v17 + 3;
            if (v17 + 3 >= v41)
              return (__objc2_class **)v45;
            v22 = v40[v24];
            if (!v22)
            {
              while (1)
              {
                v23 = v24 + 1;
                if (__OFADD__(v24, 1))
                  break;
                if (v23 >= v41)
                  return (__objc2_class **)v45;
                v22 = v40[v23];
                ++v24;
                if (v22)
                  goto LABEL_22;
              }
LABEL_30:
              __break(1u);
LABEL_31:
              KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v18);
            }
            v23 = v17 + 3;
          }
        }
LABEL_22:
        v49 = (v22 - 1) & v22;
        v50 = v23;
        v20 = __clz(__rbit64(v22)) + (v23 << 6);
      }
      v25 = v46;
      v26 = v47;
      v27 = *(_QWORD *)(v47 + 72);
      (*(void (**)(char *, unint64_t, unint64_t))(v47 + 16))(v46, a4[6] + v27 * v20, v18);
      v28 = a4;
      v29 = a4[7] + 16 * v20;
      v30 = *(_QWORD *)v29;
      v31 = *(_BYTE *)(v29 + 8);
      v32 = *(void (**)(uint64_t, char *, unint64_t))(v26 + 32);
      v32(v19, v25, v18);
      v33 = (_QWORD *)v45;
      v34 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(v48 + 32))(*(_QWORD *)(v45 + 40), v18, v48);
      v35 = __RawDictionaryStorage.find<A>(_:hashValue:)(v19, v34, v18);
      if ((v36 & 1) != 0)
        goto LABEL_31;
      v37 = v35;
      *(_QWORD *)(v42 + ((v35 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v35;
      v32(v33[6] + v35 * v27, (char *)v19, v18);
      v38 = v33[7] + 16 * v37;
      *(_QWORD *)v38 = v30;
      *(_BYTE *)(v38 + 8) = v31;
      ++v33[2];
      a3 = v51 - 1;
      if (__OFSUB__(v51, 1))
      {
        __break(1u);
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
      a4 = v28;
      v16 = v49;
      v17 = v50;
      if (v51 == 1)
        return (__objc2_class **)v45;
    }
  }
  swift_retain(a4, v12, v13, v14);
  return (__objc2_class **)a4;
}

__objc2_class **_NativeDictionary.extractDictionary(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  __objc2_class **result;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  void (*v35)(char *, char *, unint64_t);
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  __objc2_class **v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v49 = a6;
  v50 = a7;
  v39 = a1;
  v40 = a2;
  v44 = *(_QWORD *)(a6 - 8);
  v9 = MEMORY[0x1E0C80A78](a1);
  v47 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v46 = (char *)&v39 - v12;
  v48 = v13;
  v42 = *(_QWORD *)(v13 - 8);
  v14 = MEMORY[0x1E0C80A78](v11);
  v45 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v43 = (char *)&v39 - v19;
  if (!v17)
    return &_swiftEmptyDictionarySingleton;
  if (a4[2] == a3)
  {
    swift_retain(a4, v16, v17, v18);
    return (__objc2_class **)a4;
  }
  type metadata accessor for _DictionaryStorage(0, v48, v49, v50);
  result = (__objc2_class **)static _DictionaryStorage.allocate(capacity:)(a3);
  v41 = result;
  if (v40 < 1)
    v21 = 0;
  else
    v21 = *v39;
  v22 = 0;
  v23 = v43;
  v25 = v48;
  v24 = v49;
  while (1)
  {
    if (v21)
    {
      v26 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      v27 = v26 | (v22 << 6);
      goto LABEL_21;
    }
    v28 = __OFADD__(v22++, 1);
    if (v28)
      goto LABEL_27;
    if (v22 >= v40)
      return v41;
    v29 = v39[v22];
    if (!v29)
      break;
LABEL_20:
    v21 = (v29 - 1) & v29;
    v27 = __clz(__rbit64(v29)) + (v22 << 6);
LABEL_21:
    v31 = v42;
    (*(void (**)(char *, unint64_t, unint64_t))(v42 + 16))(v23, a4[6] + *(_QWORD *)(v42 + 72) * v27, v25);
    v32 = v44;
    v33 = a4[7] + *(_QWORD *)(v44 + 72) * v27;
    v34 = v46;
    (*(void (**)(char *, unint64_t, uint64_t))(v44 + 16))(v46, v33, v24);
    v35 = *(void (**)(char *, char *, unint64_t))(v31 + 32);
    v36 = (uint64_t)v45;
    v35(v45, v23, v25);
    v37 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
    v38 = (uint64_t)v47;
    v37(v47, v34, v24);
    result = (__objc2_class **)_NativeDictionary._unsafeInsertNew(key:value:)(v36, v38, v41, v25, v24, v50);
    v28 = __OFSUB__(a3--, 1);
    if (v28)
    {
      __break(1u);
      goto LABEL_26;
    }
    if (!a3)
      return v41;
  }
  v30 = v22 + 1;
  if (v22 + 1 >= v40)
    return v41;
  v29 = v39[v30];
  if (v29)
  {
    ++v22;
    goto LABEL_20;
  }
  while (1)
  {
    v22 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v22 >= v40)
      return v41;
    v29 = v39[v22];
    ++v30;
    if (v29)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

Swift::Int __swiftcall _NativeDictionary.hashValue(at:)(Swift::_HashTable::Bucket at)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  Swift::Int v12;
  uint64_t v14;

  v4 = v3;
  v5 = v2;
  v6 = v1;
  v7 = *(_QWORD *)(v2 - 8);
  v8 = MEMORY[0x1E0C80A78](at.offset);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v10, *(_QWORD *)(v11 + 48) + *(_QWORD *)(v7 + 72) * v8);
  v12 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v4 + 32))(*(_QWORD *)(v6 + 40), v5, v4);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v5);
  return v12;
}

uint64_t protocol witness for _HashTableDelegate.hashValue(at:) in conformance _NativeDictionary<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, *(_QWORD *)(v9 + 48) + *(_QWORD *)(v5 + 72) * v6, v4);
  v10 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(a2 + 32) + 32))(*(_QWORD *)(v9 + 40), v4);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return v10;
}

char *protocol witness for _HashTableDelegate.moveEntry(from:to:) in conformance _NativeDictionary<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;

  v7 = *v3;
  UnsafeMutablePointer.moveInitialize(from:count:)((char *)(*(_QWORD *)(v7 + 48) + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 72) * a1), 1, (char *)(*(_QWORD *)(v7 + 48) + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 72) * a2), *(_QWORD *)(a3 + 16));
  return UnsafeMutablePointer.moveInitialize(from:count:)((char *)(*(_QWORD *)(v7 + 56) + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 72) * a1), 1, (char *)(*(_QWORD *)(v7 + 56) + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 72) * a2), *(_QWORD *)(a3 + 24));
}

Swift::Int specialized _NativeDictionary._delete(at:)(Swift::_HashTable::Bucket before, uint64_t a2)
{
  Swift::Int offset;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  Swift::_HashTable::Bucket v8;
  Swift::_HashTable::Bucket v9;
  Swift::_HashTable::Bucket v10;
  unint64_t v11;
  __int128 v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  unint64_t v31[5];
  __int128 v32;
  __int128 v33;

  offset = before.offset;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (before.offset + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    before.offset = _HashTable.previousHole(before:)(before).offset;
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v11 = (before.offset + 1) & v7;
      do
      {
        v13 = (unint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v14 = *v13;
        v15 = v13[1];
        v16 = _swift_stdlib_Hashing_parameters ^ *(_QWORD *)(a2 + 40);
        v31[0] = 0;
        v31[1] = v16 ^ 0x736F6D6570736575;
        v31[2] = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
        v31[3] = v16 ^ 0x6C7967656E657261;
        v31[4] = unk_1ECD25520 ^ 0x7465646279746573;
        v32 = 0u;
        v33 = 0u;
        swift_bridgeObjectRetain(v15, v8.offset, v9.offset, (char *)v10.offset);
        String.hash(into:)(v31, v14, v15);
        swift_bridgeObjectRelease(v15);
        before.offset = Hasher._finalize()();
        v17 = before.offset & v7;
        if (offset >= (uint64_t)v11)
        {
          if (v17 < v11)
            goto LABEL_5;
        }
        else if (v17 >= v11)
        {
          goto LABEL_11;
        }
        if (offset >= (uint64_t)v17)
        {
LABEL_11:
          v18 = *(_QWORD *)(a2 + 48);
          v19 = (_OWORD *)(v18 + 16 * offset);
          v20 = (_OWORD *)(v18 + 16 * v6);
          if (offset != v6 || v19 >= v20 + 1)
            *v19 = *v20;
          v21 = *(_QWORD *)(a2 + 56);
          v22 = (_OWORD *)(v21 + 32 * offset);
          v23 = (_OWORD *)(v21 + 32 * v6);
          if (offset != v6 || (offset = v6, v22 >= v23 + 2))
          {
            v12 = v23[1];
            *v22 = *v23;
            v22[1] = v12;
            offset = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v24 = (uint64_t *)(v4 + 8 * ((unint64_t)offset >> 6));
    v25 = *v24;
    v26 = (-1 << offset) - 1;
  }
  else
  {
    v24 = (uint64_t *)(v4 + 8 * ((unint64_t)before.offset >> 6));
    v26 = *v24;
    v25 = (-1 << SLOBYTE(before.offset)) - 1;
  }
  *v24 = v26 & v25;
  v27 = *(_QWORD *)(a2 + 16);
  v28 = __OFSUB__(v27, 1);
  v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v29;
    ++*(_DWORD *)(a2 + 36);
  }
  return before.offset;
}

{
  Swift::Int offset;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  uint64_t v18;
  unint64_t v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v33[3];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36[3];
  uint64_t v37;
  uint64_t v38;

  offset = before.offset;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (before.offset + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    before.offset = _HashTable.previousHole(before:)(before).offset;
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (before.offset + 1) & v7;
      do
      {
        outlined init with copy of AnyHashable(*(_QWORD *)(a2 + 48) + 40 * v6, (uint64_t)v36);
        v9 = *(_QWORD *)(a2 + 40);
        v10 = v37;
        v11 = v38;
        __swift_project_boxed_opaque_existential_0Tm(v36, v37);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v11 + 8))(v33, v10, v11);
        v12 = v34;
        v13 = v35;
        __swift_project_boxed_opaque_existential_0Tm(v33, v34);
        v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 40))(v9, v12, v13);
        __swift_destroy_boxed_opaque_existential_1Tm(v33);
        before.offset = (Swift::Int)outlined destroy of AnyHashable(v36);
        v15 = v14 & v7;
        if (offset >= (uint64_t)v8)
        {
          if (v15 >= v8 && offset >= v15)
          {
LABEL_16:
            v18 = *(_QWORD *)(a2 + 48);
            v19 = v18 + 40 * offset;
            v20 = (__int128 *)(v18 + 40 * v6);
            if (offset != v6 || v19 >= (unint64_t)v20 + 40)
            {
              v21 = *v20;
              v22 = v20[1];
              *(_QWORD *)(v19 + 32) = *((_QWORD *)v20 + 4);
              *(_OWORD *)v19 = v21;
              *(_OWORD *)(v19 + 16) = v22;
            }
            v23 = *(_QWORD *)(a2 + 56);
            v24 = (_OWORD *)(v23 + 16 * offset);
            v25 = (_OWORD *)(v23 + 16 * v6);
            if (offset != v6 || (offset = v6, v24 >= v25 + 1))
            {
              *v24 = *v25;
              offset = v6;
            }
          }
        }
        else if (v15 >= v8 || offset >= v15)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v26 = (uint64_t *)(v4 + 8 * ((unint64_t)offset >> 6));
    v27 = *v26;
    v28 = (-1 << offset) - 1;
  }
  else
  {
    v26 = (uint64_t *)(v4 + 8 * ((unint64_t)before.offset >> 6));
    v28 = *v26;
    v27 = (-1 << SLOBYTE(before.offset)) - 1;
  }
  *v26 = v28 & v27;
  v29 = *(_QWORD *)(a2 + 16);
  v30 = __OFSUB__(v29, 1);
  v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v31;
    ++*(_DWORD *)(a2 + 36);
  }
  return before.offset;
}

{
  Swift::Int offset;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v19;
  unint64_t v20;
  __int128 *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _OWORD *v25;
  _OWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v34[3];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[3];
  uint64_t v38;
  uint64_t v39;

  offset = before.offset;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (before.offset + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    before.offset = _HashTable.previousHole(before:)(before).offset;
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (before.offset + 1) & v7;
      do
      {
        outlined init with copy of AnyHashable(*(_QWORD *)(a2 + 48) + 40 * v6, (uint64_t)v37);
        v10 = *(_QWORD *)(a2 + 40);
        v11 = v38;
        v12 = v39;
        __swift_project_boxed_opaque_existential_0Tm(v37, v38);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v12 + 8))(v34, v11, v12);
        v13 = v35;
        v14 = v36;
        __swift_project_boxed_opaque_existential_0Tm(v34, v35);
        v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 40))(v10, v13, v14);
        __swift_destroy_boxed_opaque_existential_1Tm(v34);
        before.offset = (Swift::Int)outlined destroy of AnyHashable(v37);
        v16 = v15 & v7;
        if (offset >= (uint64_t)v8)
        {
          if (v16 >= v8 && offset >= v16)
          {
LABEL_16:
            v19 = *(_QWORD *)(a2 + 48);
            v20 = v19 + 40 * offset;
            v21 = (__int128 *)(v19 + 40 * v6);
            if (offset != v6 || v20 >= (unint64_t)v21 + 40)
            {
              v22 = *v21;
              v23 = v21[1];
              *(_QWORD *)(v20 + 32) = *((_QWORD *)v21 + 4);
              *(_OWORD *)v20 = v22;
              *(_OWORD *)(v20 + 16) = v23;
            }
            v24 = *(_QWORD *)(a2 + 56);
            v25 = (_OWORD *)(v24 + 32 * offset);
            v26 = (_OWORD *)(v24 + 32 * v6);
            if (offset != v6 || (offset = v6, v25 >= v26 + 2))
            {
              v9 = v26[1];
              *v25 = *v26;
              v25[1] = v9;
              offset = v6;
            }
          }
        }
        else if (v16 >= v8 || offset >= v16)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v27 = (uint64_t *)(v4 + 8 * ((unint64_t)offset >> 6));
    v28 = *v27;
    v29 = (-1 << offset) - 1;
  }
  else
  {
    v27 = (uint64_t *)(v4 + 8 * ((unint64_t)before.offset >> 6));
    v29 = *v27;
    v28 = (-1 << SLOBYTE(before.offset)) - 1;
  }
  *v27 = v29 & v28;
  v30 = *(_QWORD *)(a2 + 16);
  v31 = __OFSUB__(v30, 1);
  v32 = v30 - 1;
  if (v31)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v32;
    ++*(_DWORD *)(a2 + 36);
  }
  return before.offset;
}

{
  Swift::Int offset;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  Swift::_HashTable::Bucket v8;
  Swift::_HashTable::Bucket v9;
  Swift::_HashTable::Bucket v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t v22;
  unint64_t v23;
  __int128 *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v32[5];
  __int128 v33;
  __int128 v34;

  offset = before.offset;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (before.offset + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    before.offset = _HashTable.previousHole(before:)(before).offset;
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v11 = (before.offset + 1) & v7;
      do
      {
        v14 = (unint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v15 = *v14;
        v16 = v14[1];
        v17 = _swift_stdlib_Hashing_parameters ^ *(_QWORD *)(a2 + 40);
        v32[0] = 0;
        v32[1] = v17 ^ 0x736F6D6570736575;
        v32[2] = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
        v32[3] = v17 ^ 0x6C7967656E657261;
        v32[4] = unk_1ECD25520 ^ 0x7465646279746573;
        v33 = 0u;
        v34 = 0u;
        swift_bridgeObjectRetain(v16, v8.offset, v9.offset, (char *)v10.offset);
        String.hash(into:)(v32, v15, v16);
        swift_bridgeObjectRelease(v16);
        before.offset = Hasher._finalize()();
        v18 = before.offset & v7;
        if (offset >= (uint64_t)v11)
        {
          if (v18 < v11)
            goto LABEL_5;
        }
        else if (v18 >= v11)
        {
          goto LABEL_11;
        }
        if (offset >= (uint64_t)v18)
        {
LABEL_11:
          v19 = *(_QWORD *)(a2 + 48);
          v20 = (_OWORD *)(v19 + 16 * offset);
          v21 = (_OWORD *)(v19 + 16 * v6);
          if (offset != v6 || v20 >= v21 + 1)
            *v20 = *v21;
          v22 = *(_QWORD *)(a2 + 56);
          v23 = v22 + 40 * offset;
          v24 = (__int128 *)(v22 + 40 * v6);
          if (offset != v6 || (offset = v6, v23 >= (unint64_t)v24 + 40))
          {
            v12 = *v24;
            v13 = v24[1];
            *(_QWORD *)(v23 + 32) = *((_QWORD *)v24 + 4);
            *(_OWORD *)v23 = v12;
            *(_OWORD *)(v23 + 16) = v13;
            offset = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v25 = (uint64_t *)(v4 + 8 * ((unint64_t)offset >> 6));
    v26 = *v25;
    v27 = (-1 << offset) - 1;
  }
  else
  {
    v25 = (uint64_t *)(v4 + 8 * ((unint64_t)before.offset >> 6));
    v27 = *v25;
    v26 = (-1 << SLOBYTE(before.offset)) - 1;
  }
  *v25 = v27 & v26;
  v28 = *(_QWORD *)(a2 + 16);
  v29 = __OFSUB__(v28, 1);
  v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
  return before.offset;
}

{
  Swift::Int offset;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  Swift::_HashTable::Bucket v8;
  Swift::_HashTable::Bucket v9;
  Swift::_HashTable::Bucket v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  _OWORD *v21;
  _OWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  unint64_t v30[5];
  __int128 v31;
  __int128 v32;

  offset = before.offset;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (before.offset + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    before.offset = _HashTable.previousHole(before:)(before).offset;
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v11 = (before.offset + 1) & v7;
      do
      {
        v12 = (unint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v13 = *v12;
        v14 = v12[1];
        v15 = _swift_stdlib_Hashing_parameters ^ *(_QWORD *)(a2 + 40);
        v30[0] = 0;
        v30[1] = v15 ^ 0x736F6D6570736575;
        v30[2] = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
        v30[3] = v15 ^ 0x6C7967656E657261;
        v30[4] = unk_1ECD25520 ^ 0x7465646279746573;
        v31 = 0u;
        v32 = 0u;
        swift_bridgeObjectRetain(v14, v8.offset, v9.offset, (char *)v10.offset);
        String.hash(into:)(v30, v13, v14);
        swift_bridgeObjectRelease(v14);
        before.offset = Hasher._finalize()();
        v16 = before.offset & v7;
        if (offset >= (uint64_t)v11)
        {
          if (v16 < v11)
            goto LABEL_5;
        }
        else if (v16 >= v11)
        {
          goto LABEL_11;
        }
        if (offset >= (uint64_t)v16)
        {
LABEL_11:
          v17 = *(_QWORD *)(a2 + 48);
          v18 = (_OWORD *)(v17 + 16 * offset);
          v19 = (_OWORD *)(v17 + 16 * v6);
          if (offset != v6 || v18 >= v19 + 1)
            *v18 = *v19;
          v20 = *(_QWORD *)(a2 + 56);
          v21 = (_OWORD *)(v20 + 16 * offset);
          v22 = (_OWORD *)(v20 + 16 * v6);
          if (offset != v6 || (offset = v6, v21 >= v22 + 1))
          {
            *v21 = *v22;
            offset = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v23 = (uint64_t *)(v4 + 8 * ((unint64_t)offset >> 6));
    v24 = *v23;
    v25 = (-1 << offset) - 1;
  }
  else
  {
    v23 = (uint64_t *)(v4 + 8 * ((unint64_t)before.offset >> 6));
    v25 = *v23;
    v24 = (-1 << SLOBYTE(before.offset)) - 1;
  }
  *v23 = v25 & v24;
  v26 = *(_QWORD *)(a2 + 16);
  v27 = __OFSUB__(v26, 1);
  v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v28;
    ++*(_DWORD *)(a2 + 36);
  }
  return before.offset;
}

Swift::Void __swiftcall _NativeDictionary._delete(at:)(Swift::_HashTable::Bucket at)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int offset;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  Swift::_HashTable::Bucket v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  Swift::Int v31;
  char *v32;
  char *v33;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, unint64_t, uint64_t);
  unint64_t v43;
  uint64_t (*v44)(_QWORD, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;

  v4 = v2;
  v5 = v1;
  offset = at.offset;
  v45 = *(_QWORD *)(v2 - 8);
  v46 = v3;
  v7 = MEMORY[0x1E0C80A78](at.offset);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = v11 + 64;
  v13 = -1 << *(_BYTE *)(v11 + 32);
  v14 = (v7 + 1) & ~v13;
  if (((1 << v14) & *(_QWORD *)(v11 + 64 + 8 * (v14 >> 6))) != 0)
  {
    v41 = v8;
    v15 = ~v13;
    v16.offset = _HashTable.previousHole(before:)((Swift::_HashTable::Bucket)offset).offset;
    if ((*(_QWORD *)(v12 + 8 * (v14 >> 6)) & (1 << v14)) != 0)
    {
      v43 = (v16.offset + 1) & v15;
      v44 = *(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v46 + 32);
      v17 = *(_QWORD *)(v45 + 72);
      v42 = *(void (**)(char *, unint64_t, uint64_t))(v45 + 16);
      v18 = v15;
      do
      {
        v19 = v17;
        v20 = v17 * v14;
        v21 = v18;
        v42(v10, *(_QWORD *)(v5 + 48) + v17 * v14, v4);
        v22 = v44(*(_QWORD *)(v5 + 40), v4, v46);
        (*(void (**)(char *, uint64_t))(v45 + 8))(v10, v4);
        v18 = v21;
        v23 = v22 & v21;
        if (offset >= (uint64_t)v43)
        {
          if (v23 >= v43 && offset >= v23)
          {
LABEL_16:
            v26 = *(_QWORD *)(v5 + 48);
            v27 = (char *)(v26 + v19 * offset);
            v28 = (char *)(v26 + v20);
            if (v19 * offset < v20 || v27 >= &v28[v19])
            {
              swift_arrayInitWithTakeFrontToBack(v27, v28, 1, v4);
            }
            else if (v19 * offset != v20)
            {
              swift_arrayInitWithTakeBackToFront(v27, v28, 1, v4);
            }
            v29 = *(_QWORD *)(v5 + 56);
            v30 = *(_QWORD *)(*(_QWORD *)(v41 - 8) + 72);
            v31 = v30 * offset;
            v32 = (char *)(v29 + v30 * offset);
            v33 = (char *)(v29 + v30 * v14);
            if (v30 * offset < (uint64_t)(v30 * v14) || v32 >= &v33[v30])
            {
              swift_arrayInitWithTakeFrontToBack(v32, v33, 1, v41);
              offset = v14;
              v17 = v19;
              v18 = v21;
            }
            else
            {
              offset = v14;
              v17 = v19;
              v18 = v21;
              if (v31 != v30 * v14)
              {
                swift_arrayInitWithTakeBackToFront(v32, v33, 1, v41);
                v18 = v21;
                v17 = v19;
                offset = v14;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v23 >= v43 || offset >= v23)
        {
          goto LABEL_16;
        }
        v17 = v19;
LABEL_5:
        v14 = (v14 + 1) & v18;
      }
      while (((*(_QWORD *)(v12 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
    }
    v35 = (uint64_t *)(v12 + 8 * ((unint64_t)offset >> 6));
    v36 = *v35;
    v37 = (-1 << offset) - 1;
  }
  else
  {
    v35 = (uint64_t *)(v12 + 8 * ((unint64_t)offset >> 6));
    v37 = *v35;
    v36 = (-1 << offset) - 1;
  }
  *v35 = v37 & v36;
  v38 = *(_QWORD *)(v5 + 16);
  v39 = __OFSUB__(v38, 1);
  v40 = v38 - 1;
  if (v39)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v5 + 16) = v40;
    ++*(_DWORD *)(v5 + 36);
  }
}

__objc2_class **_ss17_NativeDictionaryV6filteryAByxq_GSbx3key_q_5valuet_tKXEKFADs13_UnsafeBitsetVKXEfU_AhByxSiSgGxq_Sbs5Error_pRi_zRi0_zRi__Ri0__r0_lyxAIIsgnndzo_AJsAK_pSHRzAIRs_r0_lIetyggozo_Tp5(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *, uint64_t *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __objc2_class **result;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  unint64_t v22;
  int64_t v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t (*v34)(char *, uint64_t *);
  unint64_t *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;

  v28 = a2;
  v29 = a7;
  v34 = a4;
  v30 = a1;
  v38 = a6;
  v8 = *(_QWORD *)(a6 - 8);
  result = (__objc2_class **)MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = 0;
  v35 = (unint64_t *)v13;
  v14 = *(_QWORD *)(v13 + 64);
  v31 = 0;
  v32 = v13 + 64;
  v15 = 1 << *(_BYTE *)(v13 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v14;
  v33 = (unint64_t)(v15 + 63) >> 6;
  v18 = v38;
  while (v17)
  {
    v19 = __clz(__rbit64(v17));
    v17 &= v17 - 1;
    v20 = v19 | (v12 << 6);
LABEL_15:
    v24 = v35;
    (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v11, v35[6] + *(_QWORD *)(v8 + 72) * v20, v18);
    v25 = v24[7] + 16 * v20;
    v26 = *(_QWORD *)v25;
    LOBYTE(v25) = *(_BYTE *)(v25 + 8);
    v36 = v26;
    v37 = v25;
    v27 = v34(v11, &v36);
    result = (__objc2_class **)(*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v18);
    if (v7)
      return result;
    if ((v27 & 1) != 0)
    {
      *(unint64_t *)((char *)v30 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      v21 = __OFADD__(v31++, 1);
      if (v21)
        goto LABEL_28;
    }
  }
  v21 = __OFADD__(v12++, 1);
  if (v21)
  {
    __break(1u);
    goto LABEL_27;
  }
  if (v12 >= v33)
    return specialized _NativeDictionary.extractDictionary(using:count:)(v30, v28, v31, v35, v38, v29);
  v22 = *(_QWORD *)(v32 + 8 * v12);
  if (v22)
  {
LABEL_14:
    v17 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v12 << 6);
    goto LABEL_15;
  }
  v23 = v12 + 1;
  if (v12 + 1 >= v33)
    return specialized _NativeDictionary.extractDictionary(using:count:)(v30, v28, v31, v35, v38, v29);
  v22 = *(_QWORD *)(v32 + 8 * v23);
  if (v22)
    goto LABEL_13;
  v23 = v12 + 2;
  if (v12 + 2 >= v33)
    return specialized _NativeDictionary.extractDictionary(using:count:)(v30, v28, v31, v35, v38, v29);
  v22 = *(_QWORD *)(v32 + 8 * v23);
  if (v22)
  {
LABEL_13:
    v12 = v23;
    goto LABEL_14;
  }
  while (1)
  {
    v12 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v12 >= v33)
      return specialized _NativeDictionary.extractDictionary(using:count:)(v30, v28, v31, v35, v38, v29);
    v22 = *(_QWORD *)(v32 + 8 * v12);
    ++v23;
    if (v22)
      goto LABEL_14;
  }
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

__objc2_class **closure #1 in _NativeDictionary.filter(_:)@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(char *, char *)@<X3>, uint64_t a4@<X6>, uint64_t a5@<X7>, __objc2_class ***a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __objc2_class **result;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  __objc2_class ***v34;
  uint64_t v35;
  __objc2_class ***v36;
  uint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t (*v47)(char *, char *);
  unint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;

  v37 = a5;
  v38 = a1;
  v35 = a2;
  v36 = a6;
  v50 = a4;
  v46 = *(_QWORD *)(a4 - 8);
  v47 = a3;
  v6 = MEMORY[0x1E0C80A78](a1);
  v45 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = v8;
  v44 = *(_QWORD *)(v8 - 8);
  result = (__objc2_class **)MEMORY[0x1E0C80A78](v6);
  v43 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = 0;
  v48 = (unint64_t *)v12;
  v13 = *(_QWORD *)(v12 + 64);
  v39 = 0;
  v40 = v12 + 64;
  v14 = 1 << *(_BYTE *)(v12 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v41 = (unint64_t)(v14 + 63) >> 6;
  v18 = v43;
  v17 = v44;
  v19 = v49;
  v20 = v46;
  while (v16)
  {
    v51 = (v16 - 1) & v16;
    v52 = v11;
    v21 = __clz(__rbit64(v16)) | (v11 << 6);
LABEL_16:
    v26 = v48;
    (*(void (**)(char *, unint64_t, uint64_t))(v17 + 16))(v18, v48[6] + *(_QWORD *)(v17 + 72) * v21, v19);
    v27 = v26[7];
    v28 = *(_QWORD *)(v20 + 72);
    v42 = v21;
    v29 = v27 + v28 * v21;
    v30 = v45;
    v31 = v50;
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))(v45, v29, v50);
    v32 = v53;
    v33 = v47(v18, v30);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v30, v31);
    result = (__objc2_class **)(*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v18, v19);
    v53 = v32;
    if (v32)
      return result;
    v16 = v51;
    v11 = v52;
    if ((v33 & 1) != 0)
    {
      *(unint64_t *)((char *)v38 + ((v42 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v42;
      v22 = __OFADD__(v39++, 1);
      if (v22)
      {
        __break(1u);
LABEL_21:
        v34 = v36;
        result = _NativeDictionary.extractDictionary(using:count:)(v38, v35, v39, v48, v49, v50, v37);
        *v34 = result;
        return result;
      }
    }
  }
  v22 = __OFADD__(v11, 1);
  v23 = v11 + 1;
  if (v22)
    goto LABEL_24;
  if (v23 >= v41)
    goto LABEL_21;
  v24 = *(_QWORD *)(v40 + 8 * v23);
  if (v24)
  {
LABEL_15:
    v51 = (v24 - 1) & v24;
    v52 = v23;
    v21 = __clz(__rbit64(v24)) + (v23 << 6);
    goto LABEL_16;
  }
  v25 = v23 + 1;
  if (v23 + 1 >= v41)
    goto LABEL_21;
  v24 = *(_QWORD *)(v40 + 8 * v25);
  if (v24)
  {
    ++v23;
    goto LABEL_15;
  }
  while (1)
  {
    v23 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v23 >= v41)
      goto LABEL_21;
    v24 = *(_QWORD *)(v40 + 8 * v23);
    ++v25;
    if (v24)
      goto LABEL_15;
  }
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

uint64_t (*_NativeDictionary.Iterator.iterator.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t _NativeDictionary.Iterator.init(_:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v2 = -1;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  *a2 = a1;
  v6 = *(_QWORD *)(a1 + 64);
  result = a1 + 64;
  v5 = v6;
  if (-v3 < 64)
    v2 = ~(-1 << -(char)v3);
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0;
  a2[4] = v2 & v5;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance _NativeDictionary<A, B>@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;

  return _NativeDictionary.makeIterator()(*v1, a1);
}

uint64_t protocol witness for IteratorProtocol.next() in conformance _NativeDictionary<A, B>.Iterator@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *TupleTypeMetadata2;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, unint64_t *);
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v3 = result;
  v5 = v2[4];
  if (v5)
  {
    v2[4] = (v5 - 1) & v5;
    v6 = __clz(__rbit64(v5)) | (v2[3] << 6);
LABEL_3:
    v7 = *v2;
    v8 = *(_QWORD *)(*v2 + 48);
    v9 = *(_QWORD *)(result + 16);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a2, v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * v6, v9);
    v10 = *(_QWORD *)(v7 + 56);
    v11 = *(_QWORD *)(v3 + 24);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = v10 + *(_QWORD *)(v12 + 72) * v6;
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v9, v11, "key value ", 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(a2 + *((int *)TupleTypeMetadata2 + 12), v13, v11);
    v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t *))(*(TupleTypeMetadata2 - 1) + 56);
    v16 = a2;
    v17 = 0;
    v18 = TupleTypeMetadata2;
    return v15(v16, v17, 1, v18);
  }
  v19 = v2[3];
  v20 = v19 + 1;
  if (!__OFADD__(v19, 1))
  {
    v21 = (unint64_t)(v2[2] + 64) >> 6;
    if (v20 < v21)
    {
      v2[3] = v20;
      v22 = v2[1];
      v23 = *(_QWORD *)(v22 + 8 * v20);
      v2[4] = v23;
      if (v23)
      {
LABEL_11:
        v2[4] = (v23 - 1) & v23;
        v6 = __clz(__rbit64(v23)) + (v20 << 6);
        goto LABEL_3;
      }
      v24 = v19 + 2;
      while (v21 != v24)
      {
        v2[3] = v24;
        v23 = *(_QWORD *)(v22 + 8 * v24);
        v2[4] = v23;
        ++v24;
        if (v23)
        {
          v20 = v24 - 1;
          goto LABEL_11;
        }
      }
    }
    v18 = swift_getTupleTypeMetadata2(0, *(_QWORD *)(result + 16), *(_QWORD *)(result + 24), "key value ", 0);
    v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t *))(*(v18 - 1) + 56);
    v16 = a2;
    v17 = 1;
    return v15(v16, v17, 1, v18);
  }
  __break(1u);
  return result;
}

uint64_t _NativeSet._storage.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t result;

  result = swift_release(*v1);
  *v1 = a1;
  return result;
}

uint64_t (*_NativeSet._storage.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

__objc2_class **_NativeSet.init()()
{
  return &_swiftEmptySetSingleton;
}

__objc2_class **static __RawSetStorage.empty.getter()
{
  return &_swiftEmptySetSingleton;
}

__objc2_class **_NativeSet.init(capacity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1)
    return &_swiftEmptySetSingleton;
  type metadata accessor for _SetStorage(0, a2, a3, a4);
  return (__objc2_class **)static _SetStorage.allocate(capacity:)(a1);
}

uint64_t specialized static _SetStorage.allocate(capacity:)(uint64_t result)
{
  uint64_t v1;
  double v2;
  BOOL v3;
  uint64_t v4;
  char v5;
  char v6;

  if (result <= 1)
    v1 = 1;
  else
    v1 = result;
  v2 = ceil((double)v1 / 0.75);
  if ((~*(_QWORD *)&v2 & 0x7FF0000000000000) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because it is either infinite or NaN", 76, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3735uLL, 0);
  if (v2 <= -9.22337204e18)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because the result would be less than Int.min", 85, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3738uLL, 0);
  if (v2 >= 9.22337204e18)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because the result would be greater than Int.max", 88, 2, "Swift/IntegerTypes.swift", 24, 2, 0x373BuLL, 0);
  v3 = __OFADD__(v1, 1);
  v4 = v1 + 1;
  if (v3)
  {
    __break(1u);
  }
  else
  {
    if (v4 <= (uint64_t)v2)
      v4 = (uint64_t)v2;
    v5 = 64 - __clz(v4 - 1);
    if ((unint64_t)v4 <= 2)
      v6 = 1;
    else
      v6 = v5;
    return (uint64_t)specialized static _SetStorage.allocate(scale:age:seed:)(v6, 0x100000000, 0, 1);
  }
  return result;
}

uint64_t static _SetStorage.allocate(capacity:)(uint64_t result)
{
  uint64_t v1;
  double v2;
  BOOL v3;
  uint64_t v4;
  char v5;
  char v6;

  if (result <= 1)
    v1 = 1;
  else
    v1 = result;
  v2 = ceil((double)v1 / 0.75);
  if ((~*(_QWORD *)&v2 & 0x7FF0000000000000) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because it is either infinite or NaN", 76, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3735uLL, 0);
  if (v2 <= -9.22337204e18)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because the result would be less than Int.min", 85, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3738uLL, 0);
  if (v2 >= 9.22337204e18)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because the result would be greater than Int.max", 88, 2, "Swift/IntegerTypes.swift", 24, 2, 0x373BuLL, 0);
  v3 = __OFADD__(v1, 1);
  v4 = v1 + 1;
  if (v3)
  {
    __break(1u);
  }
  else
  {
    if (v4 <= (uint64_t)v2)
      v4 = (uint64_t)v2;
    v5 = 64 - __clz(v4 - 1);
    if ((unint64_t)v4 <= 2)
      v6 = 1;
    else
      v6 = v5;
    return (uint64_t)static _SetStorage.allocate(scale:age:seed:)(v6, 0x100000000, 0, 1);
  }
  return result;
}

__objc2_class **_NativeSet.init(_:)(void *a1, Class *a2, uint64_t a3)
{
  return _NativeSet.init(_:capacity:)(a1, (uint64_t)objc_msgSend(a1, sel_count), a2, a3);
}

id __CocoaSet.count.getter(void *a1)
{
  return objc_msgSend(a1, sel_count);
}

__objc2_class **_NativeSet.init(_:capacity:)(void *a1, uint64_t a2, Class *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t *v28;
  id v29;
  uint64_t v30;
  void **v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  Swift::Int v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  _QWORD *v48;

  v8 = type metadata accessor for Optional(0, (uint64_t)a3, (uint64_t)a3, a4);
  v9 = MEMORY[0x1E0C80A78](v8);
  v10 = MEMORY[0x1E0C80A78](v9);
  v11 = MEMORY[0x1E0C80A78](v10);
  v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2)
  {
    swift_unknownObjectRelease(a1);
    return &_swiftEmptySetSingleton;
  }
  v45 = v14;
  v46 = v16;
  v43 = v11;
  v44 = v13;
  v42 = v15;
  type metadata accessor for _SetStorage(0, (uint64_t)a3, a4, v12);
  v19 = specialized static _HashTable.scale(forCapacity:)(a2);
  v20 = specialized static Hasher._hash(seed:_:)(0, (uint64_t)a1);
  LOBYTE(v48) = 0;
  v21 = static _SetStorage.allocate(scale:age:seed:)(v19, v20, 0, 1);
  v48 = v21;
  v22 = type metadata accessor for __CocoaSet.Iterator();
  v26 = swift_allocObject(v22, 0xE8uLL, 7uLL);
  v27 = 0;
  *((_OWORD *)v26 + 1) = 0u;
  *((_OWORD *)v26 + 5) = 0u;
  v26[27] = 0;
  v28 = v26 + 27;
  *((_OWORD *)v26 + 2) = 0u;
  *((_OWORD *)v26 + 3) = 0u;
  *((_OWORD *)v26 + 4) = 0u;
  *((_OWORD *)v26 + 6) = 0u;
  *((_OWORD *)v26 + 7) = 0u;
  *((_OWORD *)v26 + 8) = 0u;
  *((_OWORD *)v26 + 9) = 0u;
  *((_OWORD *)v26 + 10) = 0u;
  *((_OWORD *)v26 + 11) = 0u;
  *((_OWORD *)v26 + 12) = 0u;
  v26[26] = a1;
  v26[28] = 0;
  while (v27 != v26[28])
  {
LABEL_7:
    v30 = v26[3];
    if (!v30)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/SetBridging.swift", 23, 2, 0x254uLL, 0);
    if ((unint64_t)(v27 - 0x1000000000000000) >> 61 != 7)
    {
      __break(1u);
LABEL_21:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x4F9uLL, 0);
    }
    v31 = (void **)(v30 + 8 * v27);
    if ((v31 & 7) != 0)
      goto LABEL_21;
    v32 = *v31;
    *v28 = v27 + 1;
    swift_unknownObjectRetain(v32, v23, v24, v25);
    if (_swift_isClassOrObjCExistentialType((uint64_t)a3, (uint64_t *)a3))
    {
      v47 = v32;
      swift_dynamicCast(v18, (uint64_t *)&v47, qword_1E0EB1350, a3, 7uLL);
    }
    else
    {
      v36 = v44;
      (*(void (**)(uint64_t *, uint64_t, uint64_t, Class *))(v46 + 56))(v44, 1, 1, a3);
      _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)((swift *)v32, (uint64_t)a3, v36);
      swift_unknownObjectRelease(v32);
      v37 = v42;
      v38 = v36;
      v39 = v43;
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(v45 + 16))(v42, v38, v43);
      if ((*(unsigned int (**)(uint64_t, uint64_t, Class *))(v46 + 48))(v37, 1, a3) == 1)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/BridgeObjectiveC.swift", 28, 2, 0xFCuLL, 0);
      (*(void (**)(uint64_t *, uint64_t))(v45 + 8))(v44, v39);
      (*(void (**)(char *, uint64_t, Class *))(v46 + 32))(v18, v37, a3);
      v21 = v48;
    }
    v34 = v21[2];
    if (v21[3] <= v34)
    {
      v35 = v34 + 1;
      type metadata accessor for _NativeSet(0, (uint64_t)a3, a4, v33);
      _NativeSet.resize(capacity:)(v35);
      v21 = v48;
    }
    _NativeSet._unsafeInsertNew(_:)((uint64_t)v18, (uint64_t)v21, (uint64_t)a3, a4);
    v27 = *v28;
    if (*v28 < 0)
      goto LABEL_18;
  }
  v29 = objc_msgSend((id)v26[26], sel_countByEnumeratingWithState_objects_count_, v26 + 2, v26 + 10, 16);
  v26[28] = v29;
  if (v29)
  {
    v27 = 0;
    *v28 = 0;
    goto LABEL_7;
  }
  v26[27] = -1;
LABEL_18:
  swift_release((uint64_t)v26);
  return (__objc2_class **)v21;
}

uint64_t static _SetStorage.convert(_:capacity:)(uint64_t a1, uint64_t a2)
{
  return static _DictionaryStorage.convert(_:capacity:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t))static _SetStorage.allocate(scale:age:seed:));
}

uint64_t static _DictionaryStorage.convert(_:capacity:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, _QWORD, uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = specialized static _HashTable.scale(forCapacity:)(a2);
  v5 = specialized static Hasher._hash(seed:_:)(0, a1);
  return a3(v4, v5, 0, 1);
}

double __CocoaSet.makeIterator()(uint64_t a1)
{
  return __CocoaDictionary.makeIterator()(a1, type metadata accessor for __CocoaSet.Iterator);
}

double __CocoaDictionary.makeIterator()(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3;
  _QWORD *v4;
  double result;

  v3 = a2();
  v4 = swift_allocObject(v3, 0xE8uLL, 7uLL);
  result = 0.0;
  *((_OWORD *)v4 + 1) = 0u;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  *((_OWORD *)v4 + 7) = 0u;
  *((_OWORD *)v4 + 8) = 0u;
  *((_OWORD *)v4 + 9) = 0u;
  *((_OWORD *)v4 + 10) = 0u;
  *((_OWORD *)v4 + 11) = 0u;
  *((_OWORD *)v4 + 12) = 0u;
  v4[27] = 0;
  v4[28] = 0;
  v4[26] = a1;
  return result;
}

id __CocoaSet.Iterator.next()(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  void **v8;
  void *v9;

  v5 = *(_QWORD *)(v4 + 216);
  if (v5 < 0)
    return 0;
  if (v5 != *(_QWORD *)(v4 + 224))
    goto LABEL_5;
  result = objc_msgSend(*(id *)(v4 + 208), sel_countByEnumeratingWithState_objects_count_, v4 + 16, v4 + 80, 16);
  *(_QWORD *)(v4 + 224) = result;
  if (result)
  {
    v5 = 0;
    *(_QWORD *)(v4 + 216) = 0;
LABEL_5:
    v7 = *(_QWORD *)(v4 + 24);
    if (!v7)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/SetBridging.swift", 23, 2, 0x254uLL, 0);
    if ((unint64_t)(v5 - 0x1000000000000000) >> 61 == 7)
    {
      v8 = (void **)(v7 + 8 * v5);
      if ((v8 & 7) == 0)
      {
        v9 = *v8;
        *(_QWORD *)(v4 + 216) = v5 + 1;
        return swift_unknownObjectRetain(v9, a2, a3, a4);
      }
    }
    else
    {
      __break(1u);
    }
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x4F9uLL, 0);
  }
  *(_QWORD *)(v4 + 216) = -1;
  return result;
}

uint64_t _NativeSet.insertNew(_:isUnique:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  Swift::Int v8;

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 <= v6 || (a2 & 1) == 0)
  {
    v8 = v6 + 1;
    if ((a2 & 1) != 0)
    {
      _NativeSet.resize(capacity:)(v8);
    }
    else if (v7 <= v6)
    {
      _NativeSet.copyAndResize(capacity:)(v8);
    }
    else
    {
      _NativeSet.copy()();
    }
  }
  return _NativeSet._unsafeInsertNew(_:)(a1, *v3, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t _NativeSet.capacity.getter(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t __RawSetStorage._bucketCount.getter()
{
  uint64_t v0;

  return 1 << *(_BYTE *)(v0 + 32);
}

uint64_t _NativeSet.hashTable.getter(uint64_t a1)
{
  return a1 + 56;
}

uint64_t __RawSetStorage._hashTable.getter()
{
  uint64_t v0;

  return v0 + 56;
}

uint64_t _NativeSet.age.getter(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

uint64_t _NativeSet._elements.getter(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

Swift::Void __swiftcall _NativeSet.invalidateIndices()()
{
  uint64_t v0;

  ++*(_DWORD *)(v0 + 36);
}

uint64_t _NativeSet.uncheckedElement(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a4, *(_QWORD *)(a2 + 48) + *(_QWORD *)(*(_QWORD *)(a3 - 8) + 72) * a1);
}

uint64_t _NativeSet.uncheckedInitialize(at:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(*(_QWORD *)(a3 + 48) + *(_QWORD *)(*(_QWORD *)(a4 - 8) + 72) * a1, a2, a4);
}

uint64_t _NativeSet.hashValue(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(a4 + 32))(*(_QWORD *)(a2 + 40), a3, a4);
}

unint64_t _NativeSet.find(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, unint64_t, uint64_t);
  char v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v11 + 40);
  v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 32);
  v30 = a1;
  v16 = v14(v12, v15, v13);
  v17 = -1 << *(_BYTE *)(a2 + 32);
  v18 = v16 & ~v17;
  v31 = a2;
  v19 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) != 0)
  {
    v29 = ~v17;
    v20 = *(_QWORD *)(a4 + 8);
    v21 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 8);
    v22 = v8;
    v23 = *(_QWORD *)(v8 + 72);
    v24 = v22;
    v25 = *(void (**)(char *, unint64_t, uint64_t))(v22 + 16);
    do
    {
      v25(v10, *(_QWORD *)(v31 + 48) + v23 * v18, a3);
      v26 = v21(v10, v30, a3, v20);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v10, a3);
      if ((v26 & 1) != 0)
        break;
      v18 = (v18 + 1) & v29;
    }
    while (((*(_QWORD *)(v19 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) != 0);
  }
  return v18;
}

unint64_t _NativeSet.find(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, unint64_t, uint64_t);
  char v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v23 = a1;
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = -1 << *(_BYTE *)(v9 + 32);
  v12 = v11 & ~v10;
  v24 = v9;
  v13 = v9 + 56;
  if (((*(_QWORD *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
  {
    v22 = ~v10;
    v14 = *(_QWORD *)(v5 + 8);
    v15 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 8);
    v16 = *(_QWORD *)(v6 + 72);
    v17 = v6;
    v18 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v18(v8, *(_QWORD *)(v24 + 48) + v16 * v12, a4);
      v19 = v15(v8, v23, a4, v14);
      (*(void (**)(char *, uint64_t))(v17 + 8))(v8, a4);
      if ((v19 & 1) != 0)
        break;
      v12 = (v12 + 1) & v22;
    }
    while (((*(_QWORD *)(v13 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0);
  }
  return v12;
}

Swift::Int specialized _NativeSet.resize(capacity:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;

  v2 = *v1;
  if (*(_QWORD *)(*v1 + 24) > a1)
    a1 = *(_QWORD *)(*v1 + 24);
  v3 = specialized static _HashTable.scale(forCapacity:)(a1);
  v7 = specialized static _SetStorage.allocate(scale:age:seed:)(v3, 0x100000000, 0, 1);
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_26;
  v8 = 1 << *(_BYTE *)(v2 + 32);
  v9 = (_QWORD *)(v2 + 56);
  v10 = -1;
  if (v8 < 64)
    v10 = ~(-1 << v8);
  v11 = v10 & *(_QWORD *)(v2 + 56);
  v12 = (unint64_t)(v8 + 63) >> 6;
  result = (Swift::Int)swift_retain((unint64_t *)v2, v4, v5, v6);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v14 << 6);
      goto LABEL_8;
    }
    v17 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
LABEL_28:
      __break(1u);
      return result;
    }
    if (v17 >= v12)
      goto LABEL_22;
    v18 = v9[v17];
    ++v14;
    if (!v18)
    {
      v14 = v17 + 1;
      if (v17 + 1 >= v12)
        goto LABEL_22;
      v18 = v9[v14];
      if (!v18)
        break;
    }
LABEL_21:
    v11 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v14 << 6);
LABEL_8:
    result = specialized _NativeSet._unsafeInsertNew(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v16), *(_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v16 + 8), (uint64_t)v7);
  }
  v19 = v17 + 2;
  if (v19 < v12)
  {
    v18 = v9[v19];
    if (!v18)
    {
      while (1)
      {
        v14 = v19 + 1;
        if (__OFADD__(v19, 1))
          goto LABEL_28;
        if (v14 >= v12)
          goto LABEL_22;
        v18 = v9[v14];
        ++v19;
        if (v18)
          goto LABEL_21;
      }
    }
    v14 = v19;
    goto LABEL_21;
  }
LABEL_22:
  swift_release(v2);
  v20 = 1 << *(_BYTE *)(v2 + 32);
  if (v20 > 63)
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v20 + 63) >> 6, (int64x2_t *)(v2 + 56));
  else
    *v9 = -1 << v20;
  *(_QWORD *)(v2 + 16) = 0;
LABEL_26:
  result = swift_release(v2);
  *v1 = (uint64_t)v7;
  return result;
}

void specialized _NativeSet.resize(capacity:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  _OWORD v22[2];
  uint64_t v23;

  v2 = *v1;
  if (*(_QWORD *)(*v1 + 24) > a1)
    a1 = *(_QWORD *)(*v1 + 24);
  v3 = specialized static _HashTable.scale(forCapacity:)(a1);
  LOBYTE(v22[0]) = 1;
  v7 = specialized static _SetStorage.allocate(scale:age:seed:)(v3, 0x100000000, 0, 1);
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_26;
  v8 = 1 << *(_BYTE *)(v2 + 32);
  v9 = (_QWORD *)(v2 + 56);
  v10 = -1;
  if (v8 < 64)
    v10 = ~(-1 << v8);
  v11 = v10 & *(_QWORD *)(v2 + 56);
  v12 = (unint64_t)(v8 + 63) >> 6;
  swift_retain((unint64_t *)v2, v4, v5, v6);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v15 = v14 | (v13 << 6);
      goto LABEL_8;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
LABEL_28:
      __break(1u);
      return;
    }
    if (v18 >= v12)
      goto LABEL_22;
    v19 = v9[v18];
    ++v13;
    if (!v19)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v12)
        goto LABEL_22;
      v19 = v9[v13];
      if (!v19)
        break;
    }
LABEL_21:
    v11 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_8:
    v16 = *(_QWORD *)(v2 + 48) + 40 * v15;
    v17 = *(_OWORD *)(v16 + 16);
    v22[0] = *(_OWORD *)v16;
    v22[1] = v17;
    v23 = *(_QWORD *)(v16 + 32);
    specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)v22, (uint64_t)v7);
  }
  v20 = v18 + 2;
  if (v20 < v12)
  {
    v19 = v9[v20];
    if (!v19)
    {
      while (1)
      {
        v13 = v20 + 1;
        if (__OFADD__(v20, 1))
          goto LABEL_28;
        if (v13 >= v12)
          goto LABEL_22;
        v19 = v9[v13];
        ++v20;
        if (v19)
          goto LABEL_21;
      }
    }
    v13 = v20;
    goto LABEL_21;
  }
LABEL_22:
  swift_release(v2);
  v21 = 1 << *(_BYTE *)(v2 + 32);
  if (v21 > 63)
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v21 + 63) >> 6, (int64x2_t *)(v2 + 56));
  else
    *v9 = -1 << v21;
  *(_QWORD *)(v2 + 16) = 0;
LABEL_26:
  swift_release(v2);
  *v1 = (uint64_t)v7;
}

uint64_t specialized _NativeSet.resize(capacity:)(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD, _QWORD *))
{
  uint64_t *v3;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;

  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  v7 = specialized static _HashTable.scale(forCapacity:)(a1);
  v11 = specialized static _SetStorage.allocate(scale:age:seed:)(v7, 0x100000000, 0, 1, a2);
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_26;
  v12 = 1 << *(_BYTE *)(v6 + 32);
  v13 = (_QWORD *)(v6 + 56);
  v14 = -1;
  if (v12 < 64)
    v14 = ~(-1 << v12);
  v15 = v14 & *(_QWORD *)(v6 + 56);
  v16 = (unint64_t)(v12 + 63) >> 6;
  result = (uint64_t)swift_retain((unint64_t *)v6, v8, v9, v10);
  v18 = 0;
  while (1)
  {
    if (v15)
    {
      v19 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v20 = v19 | (v18 << 6);
      goto LABEL_8;
    }
    v21 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
LABEL_28:
      __break(1u);
      return result;
    }
    if (v21 >= v16)
      goto LABEL_22;
    v22 = v13[v21];
    ++v18;
    if (!v22)
    {
      v18 = v21 + 1;
      if (v21 + 1 >= v16)
        goto LABEL_22;
      v22 = v13[v18];
      if (!v22)
        break;
    }
LABEL_21:
    v15 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v18 << 6);
LABEL_8:
    result = a3(*(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v20), v11);
  }
  v23 = v21 + 2;
  if (v23 < v16)
  {
    v22 = v13[v23];
    if (!v22)
    {
      while (1)
      {
        v18 = v23 + 1;
        if (__OFADD__(v23, 1))
          goto LABEL_28;
        if (v18 >= v16)
          goto LABEL_22;
        v22 = v13[v18];
        ++v23;
        if (v22)
          goto LABEL_21;
      }
    }
    v18 = v23;
    goto LABEL_21;
  }
LABEL_22:
  swift_release(v6);
  v24 = 1 << *(_BYTE *)(v6 + 32);
  if (v24 > 63)
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v24 + 63) >> 6, (int64x2_t *)(v6 + 56));
  else
    *v13 = -1 << v24;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_26:
  result = swift_release(v6);
  *v3 = (uint64_t)v11;
  return result;
}

Swift::Void __swiftcall _NativeSet.resize(capacity:)(Swift::Int capacity)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char v32;

  v3 = v2;
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](capacity);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= v6)
    v12 = v6;
  else
    v12 = *(_QWORD *)(*v2 + 24);
  v13 = *(_QWORD *)(v7 + 24);
  type metadata accessor for _SetStorage(0, v4, v13, v8);
  v14 = specialized static _HashTable.scale(forCapacity:)(v12);
  v32 = 1;
  v18 = static _SetStorage.allocate(scale:age:seed:)(v14, 0x100000000, 0, 1);
  if (*(_QWORD *)(v11 + 16))
  {
    v31 = v3;
    v19 = 1 << *(_BYTE *)(v11 + 32);
    v20 = (_QWORD *)(v11 + 56);
    v21 = -1;
    if (v19 < 64)
      v21 = ~(-1 << v19);
    v22 = v21 & *(_QWORD *)(v11 + 56);
    v23 = (unint64_t)(v19 + 63) >> 6;
    swift_retain((unint64_t *)v11, v15, v16, v17);
    v24 = 0;
    while (1)
    {
      if (v22)
      {
        v25 = __clz(__rbit64(v22));
        v22 &= v22 - 1;
        v26 = v25 | (v24 << 6);
      }
      else
      {
        if (__OFADD__(v24++, 1))
          goto LABEL_27;
        if (v24 >= v23)
        {
LABEL_21:
          swift_release(v11);
          v30 = 1 << *(_BYTE *)(v11 + 32);
          if (v30 > 63)
            specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v30 + 63) >> 6, (int64x2_t *)(v11 + 56));
          else
            *v20 = -1 << v30;
          v3 = v31;
          *(_QWORD *)(v11 + 16) = 0;
          break;
        }
        v28 = v20[v24];
        if (!v28)
        {
          v29 = v24 + 1;
          if (v24 + 1 >= v23)
            goto LABEL_21;
          v28 = v20[v29];
          if (!v28)
          {
            while (1)
            {
              v24 = v29 + 1;
              if (__OFADD__(v29, 1))
                break;
              if (v24 >= v23)
                goto LABEL_21;
              v28 = v20[v24];
              ++v29;
              if (v28)
                goto LABEL_20;
            }
            __break(1u);
LABEL_27:
            __break(1u);
            return;
          }
          ++v24;
        }
LABEL_20:
        v22 = (v28 - 1) & v28;
        v26 = __clz(__rbit64(v28)) + (v24 << 6);
      }
      (*(void (**)(char *, unint64_t, uint64_t))(v5 + 32))(v10, *(_QWORD *)(v11 + 48) + *(_QWORD *)(v5 + 72) * v26, v4);
      _NativeSet._unsafeInsertNew(_:)((uint64_t)v10, (uint64_t)v18, v4, v13);
    }
  }
  swift_release(v11);
  *v3 = v18;
}

_QWORD *static _SetStorage.resize(original:capacity:move:)(uint64_t a1, uint64_t a2)
{
  char v2;

  v2 = specialized static _HashTable.scale(forCapacity:)(a2);
  return static _SetStorage.allocate(scale:age:seed:)(v2, 0x100000000, 0, 1);
}

uint64_t _NativeSet.count.getter(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

__n128 specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  __n128 result;
  __int128 v26;
  uint64_t v27;
  uint64_t v28[5];
  uint64_t v29[3];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32[3];
  uint64_t v33;
  uint64_t v34;

  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  __swift_project_boxed_opaque_existential_0Tm((_QWORD *)a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 8))(v32, v5, v6);
  v7 = v33;
  v8 = v34;
  __swift_project_boxed_opaque_existential_0Tm(v32, v33);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 40))(v4, v7, v8);
  __swift_destroy_boxed_opaque_existential_1Tm(v32);
  v10 = -1 << *(_BYTE *)(a2 + 32);
  v11 = v9 & ~v10;
  v27 = a2;
  v12 = a2 + 56;
  v13 = v11 >> 6;
  v14 = *(_QWORD *)(a2 + 56 + 8 * (v11 >> 6));
  v15 = 1 << v11;
  if (((1 << v11) & v14) != 0)
  {
    v16 = ~v10;
    do
    {
      outlined init with copy of AnyHashable(*(_QWORD *)(v27 + 48) + 40 * v11, (uint64_t)v32);
      v17 = v33;
      v18 = v34;
      __swift_project_boxed_opaque_existential_0Tm(v32, v33);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v18 + 8))(v29, v17, v18);
      v19 = v30;
      v20 = v31;
      __swift_project_boxed_opaque_existential_0Tm(v29, v30);
      v21 = *(_QWORD *)(a1 + 24);
      v22 = *(_QWORD *)(a1 + 32);
      __swift_project_boxed_opaque_existential_0Tm((_QWORD *)a1, v21);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v22 + 8))(v28, v21, v22);
      v23 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v20 + 16))(v28, v19, v20);
      __swift_destroy_boxed_opaque_existential_1Tm(v28);
      if (v23 == 2)
      {
        __swift_destroy_boxed_opaque_existential_1Tm(v29);
        outlined destroy of AnyHashable(v32);
      }
      else
      {
        __swift_destroy_boxed_opaque_existential_1Tm(v29);
        outlined destroy of AnyHashable(v32);
        if ((v23 & 1) != 0)
          ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)((uint64_t)&type metadata for AnyHashable);
      }
      v11 = (v11 + 1) & v16;
      v13 = v11 >> 6;
      v14 = *(_QWORD *)(v12 + 8 * (v11 >> 6));
      v15 = 1 << v11;
    }
    while ((v14 & (1 << v11)) != 0);
  }
  *(_QWORD *)(v12 + 8 * v13) = v15 | v14;
  v24 = *(_QWORD *)(v27 + 48) + 40 * v11;
  result = *(__n128 *)a1;
  v26 = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(v24 + 32) = *(_QWORD *)(a1 + 32);
  *(__n128 *)v24 = result;
  *(_OWORD *)(v24 + 16) = v26;
  ++*(_QWORD *)(v27 + 16);
  return result;
}

uint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = specialized static Hasher._hash(seed:_:)(*(_QWORD *)(a2 + 40), a1);
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = result & ~v5;
  v7 = a2 + 56;
  v8 = v6 >> 6;
  v9 = *(_QWORD *)(a2 + 56 + 8 * (v6 >> 6));
  v10 = 1 << v6;
  v11 = *(_QWORD *)(a2 + 48);
  if (((1 << v6) & v9) != 0)
  {
    v12 = ~v5;
    do
    {
      if (*(_QWORD *)(v11 + 8 * v6) == a1)
        ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)((uint64_t)&type metadata for ObjectIdentifier);
      v6 = (v6 + 1) & v12;
      v8 = v6 >> 6;
      v9 = *(_QWORD *)(v7 + 8 * (v6 >> 6));
      v10 = 1 << v6;
    }
    while ((v9 & (1 << v6)) != 0);
  }
  *(_QWORD *)(v7 + 8 * v8) = v10 | v9;
  *(_QWORD *)(v11 + 8 * v6) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = specialized static Hasher._hash(seed:_:)(*(_QWORD *)(a2 + 40), a1);
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = result & ~v5;
  v7 = a2 + 56;
  v8 = v6 >> 6;
  v9 = *(_QWORD *)(a2 + 56 + 8 * (v6 >> 6));
  v10 = 1 << v6;
  v11 = *(_QWORD *)(a2 + 48);
  if (((1 << v6) & v9) != 0)
  {
    v12 = ~v5;
    do
    {
      if (*(_QWORD *)(v11 + 8 * v6) == a1)
        ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)((uint64_t)&type metadata for Int);
      v6 = (v6 + 1) & v12;
      v8 = v6 >> 6;
      v9 = *(_QWORD *)(v7 + 8 * (v6 >> 6));
      v10 = 1 << v6;
    }
    while ((v9 & (1 << v6)) != 0);
  }
  *(_QWORD *)(v7 + 8 * v8) = v10 | v9;
  *(_QWORD *)(v11 + 8 * v6) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

Swift::Int specialized _NativeSet._unsafeInsertNew(_:)(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  Swift::Int result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int *v16;
  unint64_t v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  unint64_t *v21;
  unint64_t v22[5];
  __int128 v23;
  __int128 v24;

  v6 = _swift_stdlib_Hashing_parameters ^ *(_QWORD *)(a3 + 40);
  v22[0] = 0;
  v22[1] = v6 ^ 0x736F6D6570736575;
  v22[2] = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v22[3] = v6 ^ 0x6C7967656E657261;
  v22[4] = unk_1ECD25520 ^ 0x7465646279746573;
  v23 = 0u;
  v24 = 0u;
  String.hash(into:)(v22, a1, a2);
  result = Hasher._finalize()();
  v8 = -1 << *(_BYTE *)(a3 + 32);
  v9 = result & ~v8;
  v10 = a3 + 56;
  v11 = v9 >> 6;
  v12 = *(_QWORD *)(a3 + 56 + 8 * (v9 >> 6));
  v13 = 1 << v9;
  if (((1 << v9) & v12) != 0)
  {
    v14 = ~v8;
    v15 = *(_QWORD *)(a3 + 48);
    do
    {
      v16 = (Swift::Int *)(v15 + 16 * v9);
      result = *v16;
      v17 = v16[1];
      v18 = *v16 == a1 && v17 == a2;
      if (v18
        || ((~v17 & 0x6000000000000000) == 0 ? (v19 = (a2 & 0x2000000000000000) == 0) : (v19 = 1),
            !v19 ? (v20 = (a2 & 0x4000000000000000) == 0) : (v20 = 1),
            v20 && (result = _stringCompareInternal(_:_:expecting:)(result, v17, a1, a2, 0), (result & 1) != 0)))
      {
        ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)((uint64_t)&type metadata for String);
      }
      v9 = (v9 + 1) & v14;
      v11 = v9 >> 6;
      v12 = *(_QWORD *)(v10 + 8 * (v9 >> 6));
      v13 = 1 << v9;
    }
    while ((v12 & (1 << v9)) != 0);
  }
  *(_QWORD *)(v10 + 8 * v11) = v13 | v12;
  v21 = (unint64_t *)(*(_QWORD *)(a3 + 48) + 16 * v9);
  *v21 = a1;
  v21[1] = a2;
  ++*(_QWORD *)(a3 + 16);
  return result;
}

uint64_t _NativeSet._unsafeInsertNew(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v11 + 40);
  v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 32);
  v33 = a1;
  v16 = v14(v12, v15, v13);
  v17 = -1 << *(_BYTE *)(a2 + 32);
  v18 = v16 & ~v17;
  v34 = a2;
  v19 = v18 >> 6;
  v32 = a2 + 56;
  v20 = *(_QWORD *)(a2 + 56 + 8 * (v18 >> 6));
  v21 = 1 << v18;
  if (((1 << v18) & v20) != 0)
  {
    v22 = ~v17;
    v23 = *(_QWORD *)(a4 + 8);
    v24 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 8);
    v25 = *(_QWORD *)(v8 + 72);
    v26 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
    do
    {
      v26(v10, *(_QWORD *)(v34 + 48) + v25 * v18, a3);
      v27 = v24(v10, v33, a3, v23);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a3);
      if ((v27 & 1) != 0)
        ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(a3);
      v18 = (v18 + 1) & v22;
      v19 = v18 >> 6;
      v20 = *(_QWORD *)(v32 + 8 * (v18 >> 6));
      v21 = 1 << v18;
    }
    while ((v20 & (1 << v18)) != 0);
  }
  else
  {
    v25 = *(_QWORD *)(v8 + 72);
  }
  v28 = v33;
  *(_QWORD *)(v32 + 8 * v19) = v21 | v20;
  v29 = v34;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 32))(*(_QWORD *)(v34 + 48) + v25 * v18, v28, a3);
  ++*(_QWORD *)(v29 + 16);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v2 = *v1;
  if (*(_QWORD *)(*v1 + 24) > a1)
    a1 = *(_QWORD *)(*v1 + 24);
  v3 = specialized static _HashTable.scale(forCapacity:)(a1);
  v6 = specialized static _SetStorage.allocate(scale:age:seed:)(v3, 0x100000000, 0, 1);
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_23:
    result = swift_release(v2);
    *v1 = (uint64_t)v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v2 + 32);
  v8 = v2 + 56;
  v9 = -1;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  v10 = v9 & *(_QWORD *)(v2 + 56);
  v11 = (unint64_t)(v7 + 63) >> 6;
  result = swift_retain_n(v2, 2, v4, v5);
  v16 = 0;
  while (1)
  {
    if (v10)
    {
      v17 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v18 = v17 | (v16 << 6);
      goto LABEL_8;
    }
    v22 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v22 >= v11)
      goto LABEL_22;
    v23 = *(_QWORD *)(v8 + 8 * v22);
    ++v16;
    if (!v23)
    {
      v16 = v22 + 1;
      if (v22 + 1 >= v11)
        goto LABEL_22;
      v23 = *(_QWORD *)(v8 + 8 * v16);
      if (!v23)
        break;
    }
LABEL_21:
    v10 = (v23 - 1) & v23;
    v18 = __clz(__rbit64(v23)) + (v16 << 6);
LABEL_8:
    v19 = (unint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v18);
    v20 = *v19;
    v21 = v19[1];
    swift_bridgeObjectRetain(v21, v13, v14, v15);
    result = specialized _NativeSet._unsafeInsertNew(_:)(v20, v21, (uint64_t)v6);
  }
  v24 = v22 + 2;
  if (v24 >= v11)
  {
LABEL_22:
    swift_release_n(v2, 2);
    goto LABEL_23;
  }
  v23 = *(_QWORD *)(v8 + 8 * v24);
  if (v23)
  {
    v16 = v24;
    goto LABEL_21;
  }
  while (1)
  {
    v16 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v16 >= v11)
      goto LABEL_22;
    v23 = *(_QWORD *)(v8 + 8 * v16);
    ++v24;
    if (v23)
      goto LABEL_21;
  }
LABEL_25:
  __break(1u);
  return result;
}

void specialized _NativeSet.copyAndResize(capacity:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  _BYTE v19[40];

  v2 = *v1;
  if (*(_QWORD *)(*v1 + 24) > a1)
    a1 = *(_QWORD *)(*v1 + 24);
  v3 = specialized static _HashTable.scale(forCapacity:)(a1);
  v19[0] = 1;
  v7 = specialized static _SetStorage.allocate(scale:age:seed:)(v3, 0x100000000, 0, 1);
  if (!*(_QWORD *)(v2 + 16))
  {
    swift_release(v2);
LABEL_24:
    *v1 = (uint64_t)v7;
    return;
  }
  v8 = 1 << *(_BYTE *)(v2 + 32);
  v9 = v2 + 56;
  v10 = -1;
  if (v8 < 64)
    v10 = ~(-1 << v8);
  v11 = v10 & *(_QWORD *)(v2 + 56);
  v12 = (unint64_t)(v8 + 63) >> 6;
  swift_retain((unint64_t *)v2, v4, v5, v6);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v15 = v14 | (v13 << 6);
      goto LABEL_8;
    }
    v16 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v16 >= v12)
      goto LABEL_22;
    v17 = *(_QWORD *)(v9 + 8 * v16);
    ++v13;
    if (!v17)
    {
      v13 = v16 + 1;
      if (v16 + 1 >= v12)
        goto LABEL_22;
      v17 = *(_QWORD *)(v9 + 8 * v13);
      if (!v17)
        break;
    }
LABEL_21:
    v11 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v13 << 6);
LABEL_8:
    outlined init with copy of AnyHashable(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v19);
    specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)v19, (uint64_t)v7);
  }
  v18 = v16 + 2;
  if (v18 >= v12)
  {
LABEL_22:
    swift_release_n(v2, 2);
    goto LABEL_24;
  }
  v17 = *(_QWORD *)(v9 + 8 * v18);
  if (v17)
  {
    v13 = v18;
    goto LABEL_21;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v12)
      goto LABEL_22;
    v17 = *(_QWORD *)(v9 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_21;
  }
LABEL_26:
  __break(1u);
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD, _QWORD *))
{
  uint64_t *v3;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;

  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  v7 = specialized static _HashTable.scale(forCapacity:)(a1);
  v11 = specialized static _SetStorage.allocate(scale:age:seed:)(v7, 0x100000000, 0, 1, a2);
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_23:
    result = swift_release(v6);
    *v3 = (uint64_t)v11;
    return result;
  }
  v12 = 1 << *(_BYTE *)(v6 + 32);
  v13 = v6 + 56;
  v14 = -1;
  if (v12 < 64)
    v14 = ~(-1 << v12);
  v15 = v14 & *(_QWORD *)(v6 + 56);
  v16 = (unint64_t)(v12 + 63) >> 6;
  result = (uint64_t)swift_retain((unint64_t *)v6, v8, v9, v10);
  v18 = 0;
  while (1)
  {
    if (v15)
    {
      v19 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v20 = v19 | (v18 << 6);
      goto LABEL_8;
    }
    v21 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v21 >= v16)
      goto LABEL_22;
    v22 = *(_QWORD *)(v13 + 8 * v21);
    ++v18;
    if (!v22)
    {
      v18 = v21 + 1;
      if (v21 + 1 >= v16)
        goto LABEL_22;
      v22 = *(_QWORD *)(v13 + 8 * v18);
      if (!v22)
        break;
    }
LABEL_21:
    v15 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v18 << 6);
LABEL_8:
    result = a3(*(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v20), v11);
  }
  v23 = v21 + 2;
  if (v23 >= v16)
  {
LABEL_22:
    swift_release(v6);
    goto LABEL_23;
  }
  v22 = *(_QWORD *)(v13 + 8 * v23);
  if (v22)
  {
    v18 = v23;
    goto LABEL_21;
  }
  while (1)
  {
    v18 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v18 >= v16)
      goto LABEL_22;
    v22 = *(_QWORD *)(v13 + 8 * v18);
    ++v23;
    if (v22)
      goto LABEL_21;
  }
LABEL_25:
  __break(1u);
  return result;
}

Swift::Void __swiftcall _NativeSet.copyAndResize(capacity:)(Swift::Int capacity)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v28;
  int64_t v29;
  _QWORD *v30;
  char v31;

  v3 = v2;
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](capacity);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= v6)
    v12 = v6;
  else
    v12 = *(_QWORD *)(*v2 + 24);
  v13 = *(_QWORD *)(v7 + 24);
  type metadata accessor for _SetStorage(0, v4, v13, v8);
  v14 = specialized static _HashTable.scale(forCapacity:)(v12);
  v31 = 1;
  v18 = static _SetStorage.allocate(scale:age:seed:)(v14, 0x100000000, 0, 1);
  if (!*(_QWORD *)(v11 + 16))
  {
    swift_release(v11);
LABEL_23:
    *v3 = v18;
    return;
  }
  v30 = v3;
  v19 = 1 << *(_BYTE *)(v11 + 32);
  v20 = v11 + 56;
  v21 = -1;
  if (v19 < 64)
    v21 = ~(-1 << v19);
  v22 = v21 & *(_QWORD *)(v11 + 56);
  v23 = (unint64_t)(v19 + 63) >> 6;
  swift_retain((unint64_t *)v11, v15, v16, v17);
  v24 = 0;
  while (1)
  {
    if (v22)
    {
      v25 = __clz(__rbit64(v22));
      v22 &= v22 - 1;
      v26 = v25 | (v24 << 6);
      goto LABEL_9;
    }
    if (__OFADD__(v24++, 1))
      goto LABEL_25;
    if (v24 >= v23)
    {
LABEL_21:
      swift_release_n(v11, 2);
      v3 = v30;
      goto LABEL_23;
    }
    v28 = *(_QWORD *)(v20 + 8 * v24);
    if (!v28)
      break;
LABEL_20:
    v22 = (v28 - 1) & v28;
    v26 = __clz(__rbit64(v28)) + (v24 << 6);
LABEL_9:
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v10, *(_QWORD *)(v11 + 48) + *(_QWORD *)(v5 + 72) * v26, v4);
    _NativeSet._unsafeInsertNew(_:)((uint64_t)v10, (uint64_t)v18, v4, v13);
  }
  v29 = v24 + 1;
  if (v24 + 1 >= v23)
    goto LABEL_21;
  v28 = *(_QWORD *)(v20 + 8 * v29);
  if (v28)
  {
    ++v24;
    goto LABEL_20;
  }
  while (1)
  {
    v24 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v24 >= v23)
      goto LABEL_21;
    v28 = *(_QWORD *)(v20 + 8 * v24);
    ++v29;
    if (v28)
      goto LABEL_20;
  }
  __break(1u);
LABEL_25:
  __break(1u);
}

void *specialized _NativeSet.copy()()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  void *result;
  uint64_t v8;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = *v0;
  v2 = specialized static _SetStorage.allocate(scale:age:seed:)(*(_BYTE *)(*v0 + 32), *(unsigned int *)(*v0 + 36), *(_QWORD **)(*v0 + 40), 0);
  v6 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v1);
    *v0 = (uint64_t)v6;
    return result;
  }
  result = v2 + 7;
  v8 = v1 + 56;
  v9 = (unint64_t)((1 << *((_BYTE *)v6 + 32)) + 63) >> 6;
  if (v6 != (_QWORD *)v1 || (unint64_t)result >= v1 + 56 + 8 * v9)
    result = memmove(result, (const void *)(v1 + 56), 8 * v9);
  v11 = 0;
  v6[2] = *(_QWORD *)(v1 + 16);
  v12 = 1 << *(_BYTE *)(v1 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v1 + 56);
  v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    v22 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v15)
      goto LABEL_26;
    v23 = *(_QWORD *)(v8 + 8 * v22);
    ++v11;
    if (!v23)
    {
      v11 = v22 + 1;
      if (v22 + 1 >= v15)
        goto LABEL_26;
      v23 = *(_QWORD *)(v8 + 8 * v11);
      if (!v23)
        break;
    }
LABEL_25:
    v14 = (v23 - 1) & v23;
    v17 = __clz(__rbit64(v23)) + (v11 << 6);
LABEL_12:
    v18 = 16 * v17;
    v19 = (_QWORD *)(*(_QWORD *)(v1 + 48) + v18);
    v20 = v19[1];
    v21 = (_QWORD *)(v6[6] + v18);
    *v21 = *v19;
    v21[1] = v20;
    result = (void *)swift_bridgeObjectRetain(v20, v3, v4, v5);
  }
  v24 = v22 + 2;
  if (v24 >= v15)
    goto LABEL_26;
  v23 = *(_QWORD *)(v8 + 8 * v24);
  if (v23)
  {
    v11 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v11 >= v15)
      goto LABEL_26;
    v23 = *(_QWORD *)(v8 + 8 * v11);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  char v4;
  _QWORD *v5;
  _QWORD *v6;
  void *result;
  uint64_t v8;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  _OWORD v25[2];
  uint64_t v26;

  v1 = *v0;
  v2 = *(unsigned int *)(*v0 + 36);
  v3 = *(_QWORD **)(*v0 + 40);
  v4 = *(_BYTE *)(*v0 + 32);
  LOBYTE(v25[0]) = 0;
  v5 = specialized static _SetStorage.allocate(scale:age:seed:)(v4, v2, v3, 0);
  v6 = v5;
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v1);
    *v0 = (uint64_t)v6;
    return result;
  }
  result = v5 + 7;
  v8 = v1 + 56;
  v9 = (unint64_t)((1 << *((_BYTE *)v6 + 32)) + 63) >> 6;
  if (v6 != (_QWORD *)v1 || (unint64_t)result >= v1 + 56 + 8 * v9)
    result = memmove(result, (const void *)(v1 + 56), 8 * v9);
  v11 = 0;
  v6[2] = *(_QWORD *)(v1 + 16);
  v12 = 1 << *(_BYTE *)(v1 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v1 + 56);
  v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    v22 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v15)
      goto LABEL_26;
    v23 = *(_QWORD *)(v8 + 8 * v22);
    ++v11;
    if (!v23)
    {
      v11 = v22 + 1;
      if (v22 + 1 >= v15)
        goto LABEL_26;
      v23 = *(_QWORD *)(v8 + 8 * v11);
      if (!v23)
        break;
    }
LABEL_25:
    v14 = (v23 - 1) & v23;
    v17 = __clz(__rbit64(v23)) + (v11 << 6);
LABEL_12:
    v18 = 40 * v17;
    result = (void *)outlined init with copy of AnyHashable(*(_QWORD *)(v1 + 48) + 40 * v17, (uint64_t)v25);
    v19 = v6[6] + v18;
    v20 = v25[0];
    v21 = v25[1];
    *(_QWORD *)(v19 + 32) = v26;
    *(_OWORD *)v19 = v20;
    *(_OWORD *)(v19 + 16) = v21;
  }
  v24 = v22 + 2;
  if (v24 >= v15)
    goto LABEL_26;
  v23 = *(_QWORD *)(v8 + 8 * v24);
  if (v23)
  {
    v11 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v11 >= v15)
      goto LABEL_26;
    v23 = *(_QWORD *)(v8 + 8 * v11);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *specialized _NativeSet.copy()(uint64_t (*a1)(_QWORD))
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;

  v2 = *v1;
  v3 = specialized static _SetStorage.allocate(scale:age:seed:)(*(_BYTE *)(*v1 + 32), *(unsigned int *)(*v1 + 36), *(_QWORD **)(*v1 + 40), 0, a1);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = (uint64_t)v4;
    return result;
  }
  result = v3 + 7;
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *((_BYTE *)v4 + 32)) + 63) >> 6;
  if (v4 != (_QWORD *)v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  v4[2] = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v16 >= v13)
      goto LABEL_26;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_26;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
        break;
    }
LABEL_25:
    v19 = __clz(__rbit64(v17));
    v12 = (v17 - 1) & v17;
    v15 = v19 + (v9 << 6);
LABEL_12:
    *(_QWORD *)(v4[6] + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
  }
  v18 = v16 + 2;
  if (v18 >= v13)
    goto LABEL_26;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

Swift::Void __swiftcall _NativeSet.copy()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v28;
  int64_t v29;
  uint64_t *v30;
  char v31;

  v2 = v1;
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = ((uint64_t (*)())MEMORY[0x1E0C80A78])();
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  type metadata accessor for _SetStorage(0, v3, *(_QWORD *)(v5 + 24), v9);
  v10 = *(unsigned int *)(v8 + 36);
  v11 = *(_QWORD **)(v8 + 40);
  v12 = *(_BYTE *)(v8 + 32);
  v31 = 0;
  v13 = static _SetStorage.allocate(scale:age:seed:)(v12, v10, v11, 0);
  v14 = v13;
  if (!*(_QWORD *)(v8 + 16))
  {
    swift_release(v8);
LABEL_26:
    *v2 = (uint64_t)v14;
    return;
  }
  v30 = v2;
  v15 = v13 + 7;
  v16 = v8 + 56;
  v17 = (unint64_t)((1 << *((_BYTE *)v14 + 32)) + 63) >> 6;
  if (v14 != (_QWORD *)v8 || (unint64_t)v15 >= v8 + 56 + 8 * v17)
    memmove(v15, (const void *)(v8 + 56), 8 * v17);
  v19 = 0;
  v14[2] = *(_QWORD *)(v8 + 16);
  v20 = 1 << *(_BYTE *)(v8 + 32);
  v21 = -1;
  if (v20 < 64)
    v21 = ~(-1 << v20);
  v22 = v21 & *(_QWORD *)(v8 + 56);
  v23 = (unint64_t)(v20 + 63) >> 6;
  while (1)
  {
    if (v22)
    {
      v24 = __clz(__rbit64(v22));
      v22 &= v22 - 1;
      v25 = v24 | (v19 << 6);
      goto LABEL_12;
    }
    if (__OFADD__(v19++, 1))
      goto LABEL_28;
    if (v19 >= v23)
    {
LABEL_24:
      swift_release(v8);
      v2 = v30;
      goto LABEL_26;
    }
    v28 = *(_QWORD *)(v16 + 8 * v19);
    if (!v28)
      break;
LABEL_23:
    v22 = (v28 - 1) & v28;
    v25 = __clz(__rbit64(v28)) + (v19 << 6);
LABEL_12:
    v26 = *(_QWORD *)(v4 + 72) * v25;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v7, *(_QWORD *)(v8 + 48) + v26, v3);
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v14[6] + v26, v7, v3);
  }
  v29 = v19 + 1;
  if (v19 + 1 >= v23)
    goto LABEL_24;
  v28 = *(_QWORD *)(v16 + 8 * v29);
  if (v28)
  {
    ++v19;
    goto LABEL_23;
  }
  while (1)
  {
    v19 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v19 >= v23)
      goto LABEL_24;
    v28 = *(_QWORD *)(v16 + 8 * v19);
    ++v29;
    if (v28)
      goto LABEL_23;
  }
  __break(1u);
LABEL_28:
  __break(1u);
}

_QWORD *static _SetStorage.copy(original:)(uint64_t a1)
{
  return static _SetStorage.allocate(scale:age:seed:)(*(_BYTE *)(a1 + 32), *(unsigned int *)(a1 + 36), *(_QWORD **)(a1 + 40), 0);
}

Swift::Bool __swiftcall _NativeSet.ensureUnique(isUnique:capacity:)(Swift::Bool isUnique, Swift::Int capacity)
{
  uint64_t v2;
  Swift::Int v4;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 24);
  if (v4 >= capacity)
  {
    if (!isUnique)
      _NativeSet.copy()();
  }
  else if (isUnique)
  {
    _NativeSet.resize(capacity:)(capacity);
  }
  else
  {
    _NativeSet.copyAndResize(capacity:)(capacity);
  }
  return v4 < capacity;
}

Swift::_HashTable::Bucket __swiftcall _NativeSet.validatedBucket(for:)(Swift::_HashTable::Index a1)
{
  uint64_t v1;

  if (a1.bucket.offset < 0
    || 1 << *(_BYTE *)(v1 + 32) <= a1.bucket.offset
    || ((*(_QWORD *)(v1 + (((unint64_t)a1.bucket.offset >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> SLOBYTE(a1.bucket.offset)) & 1) == 0
    || *(_DWORD *)(v1 + 36) != a1.age)
  {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Set elements using an invalid index", 56, 2, "Swift/NativeSet.swift", 21, 2, 0x10AuLL, 0);
  }
  return a1.bucket;
}

uint64_t _NativeSet.validatedBucket(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, Class *a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(char *, char *, Class *, uint64_t);
  uint64_t v33;
  void (*v34)(char *, uint64_t, Class *);
  char v35;
  void (*v36)(char *, Class *);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;

  v10 = a1;
  v40 = (uint64_t)*(a5 - 1);
  v11 = MEMORY[0x1E0C80A78](a1);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v41 = (char *)&v38 - v14;
  if ((v15 & 1) != 0)
  {
    if (v10 >= 0)
      v17 = v10 & 0xFFFFFFFFFFFFFF8;
    else
      v17 = v10;
    v18 = type metadata accessor for __CocoaSet.Index.Storage();
    swift_bridgeObjectRetain(v10, v19, v20, v21);
    if (!swift_dynamicCastClass(v17, v18))
      goto LABEL_24;
    if (*(_DWORD *)(a4 + 36) != specialized static Hasher._hash(seed:_:)(0, *(_QWORD *)(v17 + 16)))
      goto LABEL_20;
    if (!swift_dynamicCastClass(v17, v18))
LABEL_24:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
    v25 = *(_QWORD *)(v17 + 24);
    if (*(_QWORD *)(v25 + 16) <= a2)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Set elements using an invalid index", 56, 2, "Swift/SetBridging.swift", 23, 2, 0x1E1uLL, 0);
    v26 = *(void **)(v25 + 8 * a2 + 24);
    swift_unknownObjectRetain(v26, v22, v23, v24);
    outlined consume of [A : B].Index._Variant<A, B>(v10, a2, 1);
    _forceBridgeFromObjectiveC<A>(_:_:)(v26, a5, v27, v41);
    swift_unknownObjectRelease(v26);
    v28 = (*(uint64_t (**)(_QWORD, Class *, uint64_t))(a6 + 32))(*(_QWORD *)(a4 + 40), a5, a6);
    v29 = -1 << *(_BYTE *)(a4 + 32);
    v10 = v28 & ~v29;
    v38 = a4 + 56;
    v39 = a4;
    if (((*(_QWORD *)(a4 + 56 + (((unint64_t)v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
    {
      (*(void (**)(char *, Class *))(v40 + 8))(v41, a5);
LABEL_20:
      v16 = 287;
LABEL_7:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Set elements using an invalid index", 56, 2, "Swift/NativeSet.swift", 21, 2, v16, 0);
    }
    v30 = ~v29;
    v31 = *(_QWORD *)(a6 + 8);
    v32 = *(uint64_t (**)(char *, char *, Class *, uint64_t))(v31 + 8);
    v33 = *(_QWORD *)(v40 + 72);
    v34 = *(void (**)(char *, uint64_t, Class *))(v40 + 16);
    while (1)
    {
      v34(v13, *(_QWORD *)(v39 + 48) + v33 * v10, a5);
      v35 = v32(v13, v41, a5, v31);
      v36 = *(void (**)(char *, Class *))(v40 + 8);
      v36(v13, a5);
      if ((v35 & 1) != 0)
        break;
      v10 = (v10 + 1) & v30;
      if (((*(_QWORD *)(v38 + (((unint64_t)v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
      {
        v36(v41, a5);
        goto LABEL_20;
      }
    }
    v36(v41, a5);
  }
  else if (v10 < 0
         || 1 << *(_BYTE *)(a4 + 32) <= v10
         || ((*(_QWORD *)(a4 + (((unint64_t)v10 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v10) & 1) == 0
         || *(_DWORD *)(a4 + 36) != (_DWORD)a2)
  {
    v16 = 266;
    goto LABEL_7;
  }
  return v10;
}

unint64_t Set.Index._asCocoa.getter(unint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  if ((a3 & 1) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Set elements using an invalid index", 56, 2, "Swift/Set.swift", 15, 2, 0x567uLL, 0);
  return swift_bridgeObjectRetain(a1, a2, a3, a4);
}

uint64_t __CocoaSet.Index.age.getter(uint64_t a1, uint64_t a2)
{
  return __CocoaDictionary.Index.age.getter(a1, a2, type metadata accessor for __CocoaSet.Index.Storage);
}

uint64_t __CocoaDictionary.Index.age.getter(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3;
  uint64_t v4;

  if (a1 < 0)
    v3 = a1;
  else
    v3 = a1 & 0xFFFFFFFFFFFFFF8;
  v4 = a3();
  if (!swift_dynamicCastClass(v3, v4))
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  return specialized static Hasher._hash(seed:_:)(0, *(_QWORD *)(v3 + 16));
}

id __CocoaSet.Index.element.getter(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v2 = (void *)specialized __CocoaSet.Index.element.getter(a1, a2);
  return swift_unknownObjectRetain(v2, v3, v4, v5);
}

BOOL Set.Index._isNative.getter(uint64_t a1, uint64_t a2, char a3)
{
  return (a3 & 1) == 0;
}

void Set.Index._asNative.getter(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Set elements using an invalid index", 56, 2, "Swift/Set.swift", 15, 2, 0x55AuLL, 0);
}

uint64_t _NativeSet.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  else
  {
    v2 = 0;
    v3 = 1 << *(_BYTE *)(a1 + 32);
    v4 = ((unint64_t)(v3 + 63) >> 6) - 1;
    v5 = (unint64_t *)(a1 + 64);
    while (v4)
    {
      v6 = *v5++;
      v1 = v6;
      --v4;
      v2 += 64;
      if (v6)
        return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t _NativeSet.endIndex.getter(uint64_t a1)
{
  return 1 << *(_BYTE *)(a1 + 32);
}

int64_t specialized _NativeSet.index(after:)(unint64_t a1, int a2, char a3, uint64_t a4)
{
  int64_t result;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  if ((a3 & 1) != 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Set elements using an invalid index", 56, 2, "Swift/Set.swift", 15, 2, 0x55AuLL, 0);
  if ((a1 & 0x8000000000000000) != 0
    || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)a1)
    || (v6 = a1 >> 6, v7 = a4 + 56, v8 = *(_QWORD *)(a4 + 56 + 8 * (a1 >> 6)), ((v8 >> a1) & 1) == 0)
    || *(_DWORD *)(a4 + 36) != a2)
  {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Set elements using an invalid index", 56, 2, "Swift/NativeSet.swift", 21, 2, 0x10AuLL, 0);
  }
  v9 = v8 & (-2 << (a1 & 0x3F));
  if (v9)
    return __clz(__rbit64(v9)) | a1 & 0xFFFFFFFFFFFFFFC0;
  v10 = v6 + 1;
  v11 = (unint64_t)(result + 63) >> 6;
  if (v6 + 1 < v11)
  {
    v12 = *(_QWORD *)(v7 + 8 * v10);
    if (v12)
      return __clz(__rbit64(v12)) + (v10 << 6);
    v10 = v6 + 2;
    if (v6 + 2 < v11)
    {
      v12 = *(_QWORD *)(v7 + 8 * v10);
      if (v12)
        return __clz(__rbit64(v12)) + (v10 << 6);
      while (v11 - 3 != v6)
      {
        v12 = *(_QWORD *)(a4 + 80 + 8 * v6++);
        if (v12)
        {
          v10 = v6 + 2;
          return __clz(__rbit64(v12)) + (v10 << 6);
        }
      }
    }
  }
  return result;
}

int64_t _NativeSet.index(after:)(unint64_t a1, int a2, char a3, uint64_t a4)
{
  int64_t result;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Set elements using an invalid index", 56, 2, "Swift/Set.swift", 15, 2, 0x55AuLL, 0);
  if ((a1 & 0x8000000000000000) != 0
    || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)a1)
    || (v6 = a1 >> 6, v7 = *(_QWORD *)(a4 + 56 + 8 * (a1 >> 6)), ((v7 >> a1) & 1) == 0)
    || *(_DWORD *)(a4 + 36) != a2)
  {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Set elements using an invalid index", 56, 2, "Swift/NativeSet.swift", 21, 2, 0x10AuLL, 0);
  }
  v8 = v7 & (-2 << (a1 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | a1 & 0xFFFFFFFFFFFFFFC0;
  v9 = v6 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v6 + 1 < v10)
  {
    v11 = *(_QWORD *)(a4 + 56 + 8 * v9);
    if (v11)
    {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    else
    {
      while (v10 - 2 != v6)
      {
        v11 = *(_QWORD *)(a4 + 72 + 8 * v6++);
        if (v11)
        {
          v9 = v6 + 1;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

unint64_t _NativeSet.index(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  void (*v18)(char *, unint64_t, uint64_t);
  char v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(v10 + 16))
    return 0;
  v11 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(a4 + 32))(*(_QWORD *)(a2 + 40), a3, a4);
  v12 = -1 << *(_BYTE *)(a2 + 32);
  v13 = v11 & ~v12;
  v23 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
    return 0;
  v14 = a1;
  v22 = ~v12;
  v15 = *(_QWORD *)(a4 + 8);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 8);
  v17 = *(_QWORD *)(v24 + 72);
  v18 = *(void (**)(char *, unint64_t, uint64_t))(v24 + 16);
  while (1)
  {
    v18(v9, *(_QWORD *)(a2 + 48) + v17 * v13, a3);
    v19 = v16(v9, v14, a3, v15);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v9, a3);
    if ((v19 & 1) != 0)
      break;
    v13 = (v13 + 1) & v22;
    if (((*(_QWORD *)(v23 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      return 0;
  }
  return v13;
}

uint64_t _NativeSet.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  void (*v18)(char *, unint64_t, uint64_t);
  char v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(v10 + 16)
    && (v11 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(a4 + 32))(*(_QWORD *)(a2 + 40), a3, a4),
        v12 = -1 << *(_BYTE *)(a2 + 32),
        v13 = v11 & ~v12,
        v23 = a2 + 56,
        ((*(_QWORD *)(a2 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0))
  {
    v14 = a1;
    v22 = ~v12;
    v15 = *(_QWORD *)(a4 + 8);
    v16 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 8);
    v17 = *(_QWORD *)(v24 + 72);
    v18 = *(void (**)(char *, unint64_t, uint64_t))(v24 + 16);
    do
    {
      v18(v9, *(_QWORD *)(a2 + 48) + v17 * v13, a3);
      v19 = v16(v9, v14, a3, v15);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v9, a3);
      if ((v19 & 1) != 0)
        break;
      v13 = (v13 + 1) & v22;
    }
    while (((*(_QWORD *)(v23 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  else
  {
    v19 = 0;
  }
  return v19 & 1;
}

uint64_t _NativeSet.element(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, Class *a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(char *, char *, Class *, uint64_t);
  uint64_t v35;
  void (*v36)(char *, unint64_t, Class *);
  char v37;
  void (*v38)(char *, Class *);
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;

  v45 = (uint64_t)*(a4 - 1);
  v12 = MEMORY[0x1E0C80A78](a1);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v44 = (char *)&v40 - v15;
  if ((v16 & 1) == 0)
  {
    if ((a1 & 0x8000000000000000) == 0
      && 1 << *(_BYTE *)(a3 + 32) > a1
      && ((*(_QWORD *)(a3 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) != 0
      && *(_DWORD *)(a3 + 36) == (_DWORD)a2)
    {
      return (*(uint64_t (**)(uint64_t, uint64_t, Class *))(v45 + 16))(a6, *(_QWORD *)(a3 + 48) + *(_QWORD *)(v45 + 72) * a1, a4);
    }
    v39 = 266;
LABEL_23:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Set elements using an invalid index", 56, 2, "Swift/NativeSet.swift", 21, 2, v39, 0);
  }
  if (a1 >= 0)
    v18 = a1 & 0xFFFFFFFFFFFFFF8;
  else
    v18 = a1;
  v19 = type metadata accessor for __CocoaSet.Index.Storage();
  swift_bridgeObjectRetain(a1, v20, v21, v22);
  if (!swift_dynamicCastClass(v18, v19))
    goto LABEL_25;
  if (*(_DWORD *)(a3 + 36) != specialized static Hasher._hash(seed:_:)(0, *(_QWORD *)(v18 + 16)))
    goto LABEL_19;
  if (!swift_dynamicCastClass(v18, v19))
LABEL_25:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  v26 = *(_QWORD *)(v18 + 24);
  if (*(_QWORD *)(v26 + 16) <= a2)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Set elements using an invalid index", 56, 2, "Swift/SetBridging.swift", 23, 2, 0x1E1uLL, 0);
  v41 = a6;
  v27 = *(void **)(v26 + 8 * a2 + 24);
  swift_unknownObjectRetain(v27, v23, v24, v25);
  outlined consume of [A : B].Index._Variant<A, B>(a1, a2, 1);
  _forceBridgeFromObjectiveC<A>(_:_:)(v27, a4, v28, v44);
  swift_unknownObjectRelease(v27);
  v29 = (*(uint64_t (**)(_QWORD, Class *, uint64_t))(a5 + 32))(*(_QWORD *)(a3 + 40), a4, a5);
  v30 = -1 << *(_BYTE *)(a3 + 32);
  v31 = v29 & ~v30;
  v42 = a3 + 56;
  v43 = a3;
  if (((*(_QWORD *)(a3 + 56 + ((v31 >> 3) & 0xFFFFFFFFFFFFF8)) >> v31) & 1) == 0)
  {
    (*(void (**)(char *, Class *))(v45 + 8))(v44, a4);
LABEL_19:
    v39 = 287;
    goto LABEL_23;
  }
  v32 = ~v30;
  v33 = *(_QWORD *)(a5 + 8);
  v34 = *(uint64_t (**)(char *, char *, Class *, uint64_t))(v33 + 8);
  v35 = *(_QWORD *)(v45 + 72);
  v36 = *(void (**)(char *, unint64_t, Class *))(v45 + 16);
  while (1)
  {
    v36(v14, *(_QWORD *)(v43 + 48) + v35 * v31, a4);
    v37 = v34(v14, v44, a4, v33);
    v38 = *(void (**)(char *, Class *))(v45 + 8);
    v38(v14, a4);
    if ((v37 & 1) != 0)
      break;
    v31 = (v31 + 1) & v32;
    if (((*(_QWORD *)(v42 + ((v31 >> 3) & 0xFFFFFFFFFFFFF8)) >> v31) & 1) == 0)
    {
      v38(v44, a4);
      goto LABEL_19;
    }
  }
  v38(v44, a4);
  return ((uint64_t (*)(uint64_t, unint64_t, Class *))v36)(v41, *(_QWORD *)(v43 + 48) + v35 * v31, a4);
}

void ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(uint64_t a1)
{
  int64_t v1;
  int64_t v2;
  int64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  BOOL v22;
  uint64_t v23;
  int64_t v24;
  int64_t v25;
  char v26;
  BOOL v28;
  unsigned __int8 *v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char *v35;
  size_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  Swift::String::Index v40;
  Swift::String::Index v41;
  Swift::String::Index v42;
  Swift::String::Index v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t *TypeName;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t *v78;
  unint64_t v79;
  char v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  int64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  Swift::String::Index v90;
  Swift::String::Index v91;
  Swift::String::Index v92;
  Swift::String::Index v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  int64_t v98;
  unint64_t v99;
  unint64_t v100;
  char v101;
  char *v102;
  unint64_t v103;
  unint64_t *v104;
  uint64_t v105;
  char *v106;
  size_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _BYTE *v111;
  _BYTE *v112;
  _BYTE *v113;
  uint64_t v114;
  unsigned __int8 v115;
  int v116;
  unsigned int v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  size_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  size_t v143;
  char *v144;
  size_t v145;
  char v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  char v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  Swift::Int v166;
  int64_t v167;
  int64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  Swift::String::Index v173;
  Swift::String::Index v174;
  Swift::String::Index v175;
  Swift::String::Index v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  char v185;
  char *v186;
  unint64_t v187;
  unint64_t v188;
  char *v189;
  size_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  char v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  char v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  char *v206;
  size_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  int64x2_t v213;
  int8x16_t v214;
  int8x16_t v215;
  int64x2_t v216;
  int64x2_t v217;
  int64x2_t v218;
  int64x2_t v219;
  uint8x8_t *v220;
  int8x16_t v221;
  unint64_t v222;
  int64x2_t v223;
  int8x16_t v224;
  int8x16_t v225;
  uint8x8_t v226;
  uint16x8_t v227;
  uint32x4_t v228;
  uint64x2_t v229;
  uint64x2_t v230;
  uint64x2_t v231;
  uint32x4_t v232;
  uint64x2_t v233;
  int8x16_t v234;
  uint16x8_t v235;
  int8x16_t v236;
  uint16x8_t v237;
  int8x16_t v238;
  int8x16_t v239;
  int8x8_t v240;
  int8x16_t v241;
  int8x8_t v242;
  uint64x2_t v243;
  int8x16_t v244;
  int8x16_t v245;
  int8x16_t v246;
  int8x16_t v247;
  unsigned __int8 *v248;
  unint64_t v249;
  unsigned int v250;
  unint64_t v251;
  int8x8_t v252;
  unint64_t v253;
  unint64_t v254;
  int64x2_t v255;
  int8x16_t v256;
  int8x16_t v257;
  int64x2_t v258;
  int64x2_t v259;
  int64x2_t v260;
  int64x2_t v261;
  uint8x8_t *v262;
  int8x16_t v263;
  unint64_t v264;
  int64x2_t v265;
  int8x16_t v266;
  int8x16_t v267;
  uint8x8_t v268;
  uint16x8_t v269;
  uint32x4_t v270;
  uint64x2_t v271;
  uint64x2_t v272;
  uint64x2_t v273;
  uint32x4_t v274;
  uint64x2_t v275;
  int8x16_t v276;
  uint8x16_t *v277;
  int64x2_t v278;
  int64x2_t v279;
  int64x2_t v280;
  int64x2_t v281;
  int64x2_t v282;
  int64x2_t v283;
  int8x16_t v284;
  int64x2_t v285;
  int64x2_t v286;
  int8x16_t v287;
  int8x16_t v288;
  int64x2_t v289;
  unint64_t v290;
  int8x16_t v291;
  int8x16_t v292;
  int8x16_t v293;
  int8x16_t v294;
  int8x16_t v295;
  int8x16_t v296;
  uint8x16_t v297;
  uint16x8_t v298;
  uint32x4_t v299;
  uint64x2_t v300;
  uint64x2_t v301;
  uint16x8_t v302;
  uint32x4_t v303;
  uint64x2_t v304;
  uint64x2_t v305;
  uint64x2_t v306;
  uint32x4_t v307;
  uint64x2_t v308;
  uint32x4_t v309;
  uint64x2_t v310;
  uint64x2_t v311;
  int8x16_t v312;
  uint64_t v313;
  unsigned __int8 *v314;
  unsigned int v315;
  unint64_t v316;
  Swift::String::Index v317;
  Swift::String::Index v318;
  Swift::String::Index v319;
  Swift::String::Index v320;
  Swift::Int v321;
  Swift::String::Index v322;
  Swift::String::Index v323;
  Swift::String::Index v324;
  Swift::String::Index v325;
  Swift::Int v326;
  unint64_t v327;
  unsigned __int8 *v328;
  uint64_t v329;
  Swift::String::Index v330;
  Swift::String::Index v331;
  Swift::String::Index v332;
  Swift::String::Index v333;
  Swift::Int v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  unint64_t v341;
  unint64_t v342;
  unint64_t v343;
  unint64_t v344;
  size_t v345;
  uint64_t v346;

  v5 = specialized static String._createEmpty(withInitialCapacity:)(186);
  v9 = v5;
  v10 = v6;
  v343 = v5;
  v344 = v6;
  v11 = HIBYTE(v6) & 0xF;
  v12 = v5 & 0xFFFFFFFFFFFFLL;
  if ((v6 & 0x2000000000000000) != 0)
    v13 = HIBYTE(v6) & 0xF;
  else
    v13 = v5 & 0xFFFFFFFFFFFFLL;
  if (!v13 && (v5 & ~v6 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease(v6);
    v14 = 0x8000000181762EB0 | 0x8000000000000000;
    v343 = 0xD00000000000001CLL;
    goto LABEL_86;
  }
  v3 = (int64_t)"Duplicate elements of type '";
  if ((v6 & 0x2000000000000000) != 0 && (0x8000000181762EB0 & 0x2000000000000000) != 0)
  {
    v15 = v11 + ((0x8000000181762EB0 >> 56) & 0xF);
    if (v15 <= 0xF)
    {
      v38 = (0x8000000181762EB0 >> 56) & 0xF;
      if (v38)
      {
        v59 = 0;
        v60 = 0;
        v39 = v6;
        do
        {
          v61 = v11 + v60;
          v62 = v60 + 1;
          v63 = 0x8000000181762EB0 | 0x8000000000000000;
          if (v60 < 8)
            v63 = 0xD00000000000001CLL;
          v64 = v63 >> (v59 & 0x38);
          v65 = (8 * v11 + v59) & 0x38;
          v66 = (-255 << v65) - 1;
          v67 = (unint64_t)v64 << v65;
          v68 = v67 | v66 & v39;
          v69 = v67 | v66 & v9;
          if (v61 < 8)
            v9 = v69;
          else
            v39 = v68;
          v59 += 8;
          v60 = v62;
        }
        while (v38 != v62);
      }
      else
      {
        v39 = v6;
      }
      swift_bridgeObjectRelease(v6);
      swift_bridgeObjectRelease(0x8000000181762EB0 | 0x8000000000000000);
      v70 = 0xA000000000000000;
      if (!(v9 & 0x8080808080808080 | v39 & 0x80808080808080))
        v70 = 0xE000000000000000;
      v14 = v70 & 0xFF00000000000000 | (v15 << 56) | v39 & 0xFFFFFFFFFFFFFFLL;
      goto LABEL_85;
    }
  }
  v2 = 0x8000000181762EB0 | 0x8000000000000000;
  if ((0x8000000181762EB0 & 0x2000000000000000) != 0)
    v16 = (0x8000000181762EB0 >> 56) & 0xF;
  else
    v16 = 28;
  swift_bridgeObjectRetain_n(0x8000000181762EB0 | 0x8000000000000000, 2, v7, v8);
  if ((0x8000000181762EB0 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain_n(0x8000000181762EB0 | 0x8000000000000000, 5, v17, v18);
    v317._rawBits = 1;
    v318._rawBits = (v16 << 16) | 1;
    v319._rawBits = _StringGuts.validateScalarRange(_:)(v317, v318, 0xD00000000000001CLL, 0x8000000181762EB0 | 0x8000000000000000);
    if (v319._rawBits < 0x10000)
      v319._rawBits |= 3;
    v1 = specialized Collection.count.getter(v319, v320, 0xD00000000000001CLL, 0x8000000181762EB0 | 0x8000000000000000);
    swift_bridgeObjectRelease(0x8000000181762EB0 | 0x8000000000000000);
    if ((v10 & 0x1000000000000000) == 0)
    {
LABEL_15:
      v22 = __OFADD__(v13, v1);
      v23 = v13 + v1;
      if (!v22)
      {
LABEL_16:
        v2 = v9 & ~v10;
        if ((v2 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v10 & 0xFFFFFFFFFFFFFFFLL))
        {
          v24 = _StringGuts.nativeUnusedCapacity.getter(v9, v10);
          if ((v19 & 1) != 0)
          {
LABEL_247:
            v188 = 258;
            goto LABEL_248;
          }
          if (v23 > 15)
            goto LABEL_24;
          if ((v10 & 0x2000000000000000) == 0)
          {
            if (v24 < v1)
            {
LABEL_35:
              if ((v10 & 0x1000000000000000) == 0)
              {
                if ((v9 & 0x1000000000000000) != 0)
                {
                  v29 = (unsigned __int8 *)((v10 & 0xFFFFFFFFFFFFFFFLL) + 32);
                }
                else
                {
                  v29 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v9, v10);
                  v12 = v19;
                }
                swift_bridgeObjectRetain(v10, v19, v20, v21);
                closure #1 in _StringGuts._convertedToSmall()(v29, v12, &v341);
                swift_bridgeObjectRelease(v10);
                v9 = v341;
                v12 = v342;
                goto LABEL_58;
              }
              goto LABEL_328;
            }
LABEL_24:
            v25 = _StringGuts.nativeUnusedCapacity.getter(v9, v10);
            v28 = (v26 & 1) == 0 && v25 >= v1;
            if ((v2 & 0x2000000000000000) != 0
              && swift_isUniquelyReferenced_nonNull_native(v10 & 0xFFFFFFFFFFFFFFFLL))
            {
              if (v28)
              {
LABEL_47:
                if ((0x8000000181762EB0 & 0x1000000000000000) != 0)
                {
                  _StringGuts._foreignAppendInPlace(_:)(0xD00000000000001CLL, 0x8000000181762EB0 | 0x8000000000000000, 0, v16);
                  v37 = 0x8000000181762EB0 | 0x8000000000000000;
                }
                else
                {
                  v34 = (0x8000000181762EB0 & 0x2000000000000000) == 0
                     || (0x8000000181762EB0 & 0x4000000000000000) != 0;
                  swift_bridgeObjectRelease_n(0x8000000181762EB0 | 0x8000000000000000, 5);
                  if ((0x8000000181762EB0 & 0x2000000000000000) != 0)
                  {
                    swift_bridgeObjectRelease(0x8000000181762EB0 | 0x8000000000000000);
                    v341 = 0xD00000000000001CLL;
                    v342 = 0x8000000181762EB0 & 0xFFFFFFFFFFFFFFLL;
                    v142 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v16, (uint64_t)&v341, (0x8000000181762EB0 >> 56) & 0xF);
                    _StringGuts.appendInPlace(_:isASCII:)(v142, v143, v34);
                    swift_bridgeObjectRelease(0x8000000181762EB0 | 0x8000000000000000);
                    goto LABEL_87;
                  }
                  v35 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v16, (0x8000000181762EB0 & 0xFFFFFFFFFFFFFFFLL) + 32, 28);
                  _StringGuts.appendInPlace(_:isASCII:)(v35, v36, v34);
                  v37 = 0x8000000181762EB0 | 0x8000000000000000;
                }
                swift_bridgeObjectRelease_n(v37, 2);
                goto LABEL_87;
              }
            }
            else if (v28)
            {
LABEL_46:
              _StringGuts.grow(_:)(v23);
              goto LABEL_47;
            }
            v30 = _StringGuts.nativeCapacity.getter(v9, v10);
            if ((v31 & 1) != 0)
              v32 = 0;
            else
              v32 = v30;
            if (v32 + 0x4000000000000000 < 0)
              goto LABEL_327;
            v33 = 2 * v32;
            if (v33 > v23)
              v23 = v33;
            goto LABEL_46;
          }
        }
        else
        {
          if (v23 > 15)
            goto LABEL_24;
          if ((v10 & 0x2000000000000000) == 0)
            goto LABEL_35;
        }
        v12 = v10;
        goto LABEL_58;
      }
      goto LABEL_309;
    }
  }
  else
  {
    swift_bridgeObjectRetain_n(0x8000000181762EB0 | 0x8000000000000000, 4, v17, v18);
    v1 = v16;
    if ((v10 & 0x1000000000000000) == 0)
      goto LABEL_15;
  }
  v321 = String.UTF8View._foreignCount()();
  v23 = v321 + v1;
  if (!__OFADD__(v321, v1))
    goto LABEL_16;
LABEL_309:
  __break(1u);
LABEL_310:
  __break(1u);
  while (1)
  {
    swift_bridgeObjectRetain_n(a1, 5, v20, v21);
    v322._rawBits = 1;
    v323._rawBits = (v2 << 16) | 1;
    v324._rawBits = _StringGuts.validateScalarRange(_:)(v322, v323, v12, a1);
    if (v324._rawBits < 0x10000)
      v324._rawBits |= 3;
    v2 = specialized Collection.count.getter(v324, v325, v12, a1);
    swift_bridgeObjectRelease(a1);
    if ((v10 & 0x1000000000000000) != 0)
      goto LABEL_314;
    while (2)
    {
      v22 = __OFADD__(v3, v2);
      v3 += v2;
      if (v22)
        goto LABEL_316;
LABEL_122:
      if ((v16 & ~v10 & 0x2000000000000000) != 0
        && swift_isUniquelyReferenced_nonNull_native(v10 & 0xFFFFFFFFFFFFFFFLL))
      {
        v85 = _StringGuts.nativeUnusedCapacity.getter(v16, v10);
        if ((v82 & 1) != 0)
          goto LABEL_247;
        v86 = (v10 >> 61) & 1;
        if (v85 < v2)
          LODWORD(v86) = 1;
        if (v3 <= 15 && (_DWORD)v86)
        {
LABEL_129:
          swift_bridgeObjectRetain(v10, v82, v83, v84);
          v87 = _StringGuts._convertedToSmall()(v16, v10);
          v89 = v88;
          swift_bridgeObjectRelease(v10);
          v90._rawBits = (v340 << 16) | 1;
          v91._rawBits = 1;
          v92._rawBits = _StringGuts.validateScalarRange(_:)(v91, v90, v12, a1);
          if (v92._rawBits < 0x10000)
            v92._rawBits |= 3;
          v94 = specialized String.init(_:)(v92, v93, v12, a1);
          v96 = v95;
          swift_bridgeObjectRelease(a1);
          v97 = _StringGuts._convertedToSmall()(v94, v96);
          v2 = v98;
          swift_bridgeObjectRelease(v96);
          v99 = specialized _SmallString.init(_:appending:)(v87, v89, v97, v2);
          if ((v101 & 1) == 0)
          {
            v102 = (char *)v99;
            v103 = v100;
            swift_bridgeObjectRelease(v10);
            swift_bridgeObjectRelease(a1);
            v343 = (unint64_t)v102;
            v344 = v103;
            goto LABEL_212;
          }
          goto LABEL_238;
        }
      }
      else if (v3 <= 15)
      {
        goto LABEL_129;
      }
      _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v3, v2);
      if ((a1 & 0x1000000000000000) != 0)
        goto LABEL_194;
      swift_bridgeObjectRelease_n(a1, 4);
      if (!v1)
      {
        if ((v12 & 0x1000000000000000) != 0)
        {
          swift_bridgeObjectRelease(a1);
          v104 = (unint64_t *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v105 = v339;
          v16 = v339;
          goto LABEL_138;
        }
        v104 = (unint64_t *)_StringObject.sharedUTF8.getter(v12, a1);
        v16 = v336;
        swift_bridgeObjectRelease(a1);
        if (v16 < v339)
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
        goto LABEL_337;
      }
      swift_bridgeObjectRelease_n(a1, 2);
      v16 = ((unint64_t)a1 >> 62) & 1;
      v341 = v12;
      v342 = a1 & 0xFFFFFFFFFFFFFFLL;
      v144 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v23, (uint64_t)&v341, v23);
      v104 = &v343;
      _StringGuts.appendInPlace(_:isASCII:)(v144, v145, (a1 & 0x4000000000000000) != 0);
      if (!v9)
      {
        swift_bridgeObjectRelease(a1);
        goto LABEL_212;
      }
LABEL_335:
      swift_errorRelease((id)v9);
      __break(1u);
      while (1)
      {
        swift_errorRelease((id)v9);
        swift_bridgeObjectRelease(v12 | 0x8000000000000000);
        __break(1u);
LABEL_337:
        v105 = v339;
LABEL_138:
        v106 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v105, (uint64_t)v104, v16);
        _StringGuts.appendInPlace(_:isASCII:)(v106, v107, v12 < 0);
        if (!v9)
          goto LABEL_195;
        swift_errorRelease((id)v9);
        swift_bridgeObjectRelease(a1);
        __break(1u);
LABEL_140:
        if (((*(_QWORD *)(v16 + 8) | *(_QWORD *)v16) & 0x8080808080808080) == 0)
        {
          v108 = v16 + v79;
          v78 = (uint64_t *)(v16 + 16);
          while ((unint64_t)v78 < v108)
          {
            v109 = *v78;
            v110 = v78[1];
            v78 += 2;
            if (((v110 | v109) & 0x8080808080808080) != 0)
              goto LABEL_144;
          }
          goto LABEL_98;
        }
LABEL_144:
        v10 = 0;
        v111 = (_BYTE *)(v16 + a1);
        v80 = 1;
        v112 = (_BYTE *)v16;
        v113 = (_BYTE *)v16;
        while (1)
        {
          v116 = (char)*v113++;
          v115 = v116;
          if (v116 < 0)
            break;
          v114 = 1;
LABEL_146:
          v10 += v114;
          v112 = v113;
          if (v113 == v111)
          {
            if (a1 > 15)
              goto LABEL_111;
            goto LABEL_267;
          }
        }
        if ((v115 + 62) > 0x32u)
          goto LABEL_183;
        if (v115 <= 0xDFu)
        {
          if (v113 == v111 || (*v113 & 0xC0) != 0x80)
            goto LABEL_183;
          v80 = 0;
          v113 = v112 + 2;
          v114 = 2;
          goto LABEL_146;
        }
        if (v115 == 224)
        {
          if (v113 == v111 || (v112[1] & 0xE0) != 0xA0)
            goto LABEL_183;
          goto LABEL_164;
        }
        if (v115 <= 0xECu)
        {
LABEL_158:
          if (v113 == v111)
            goto LABEL_183;
          LOBYTE(v117) = v112[1];
LABEL_163:
          if ((v117 & 0xC0) != 0x80)
            goto LABEL_183;
LABEL_164:
          if (v112 + 2 == v111 || (v112[2] & 0xC0) != 0x80)
            goto LABEL_183;
          v80 = 0;
          v113 = v112 + 3;
          v114 = 3;
          goto LABEL_146;
        }
        if (v115 == 237)
        {
          if (v113 == v111)
            goto LABEL_183;
          v117 = v112[1];
          if (v117 > 0x9F)
            goto LABEL_183;
          goto LABEL_163;
        }
        if (v115 <= 0xEFu)
          goto LABEL_158;
        if (v115 == 240)
        {
          if (v113 == v111 || (v112[1] + 64) < 0xD0u)
            goto LABEL_183;
          goto LABEL_178;
        }
        if ((v115 + 15) <= 2u)
        {
          if (v113 == v111)
            goto LABEL_183;
          LOBYTE(v118) = v112[1];
LABEL_177:
          if ((v118 & 0xC0) != 0x80)
            goto LABEL_183;
LABEL_178:
          if (v112 + 2 == v111 || (v112[2] & 0xC0) != 0x80 || v112 + 3 == v111 || (v112[3] & 0xC0) != 0x80)
            goto LABEL_183;
          v80 = 0;
          v113 = v112 + 4;
          v114 = 4;
          goto LABEL_146;
        }
        if (v113 != v111)
        {
          v118 = v112[1];
          if (v118 <= 0x8F)
            goto LABEL_177;
        }
LABEL_183:
        v12 = (uint64_t)swift_allocError((uint64_t)&unk_1E0EAAB90, (uint64_t)&protocol witness table for UTF8ValidationError, 0, 0);
        v9 = v12;
        swift_willThrow();
        swift_errorRelease((id)v12);
        v119 = specialized Collection.subscript.getter(v10, v16, a1);
        v23 = findInvalidRange #1 (_:) in validateUTF8(_:)(v119, v120, v121, v122);
        v341 = 0;
        v342 = 0xE000000000000000;
        if (__OFADD__(a1, 15))
          goto LABEL_310;
        v12 = v123;
        _StringGuts.reserveCapacity(_:)(a1 + 15);
        v9 = 0;
        while (2)
        {
          v124 = specialized Collection.subscript.getter(v23, v16, a1);
          v128 = v341 & 0xFFFFFFFFFFFFLL;
          if ((v342 & 0x2000000000000000) != 0)
            v128 = HIBYTE(v342) & 0xF;
          v22 = __OFADD__(v128, a1);
          v129 = v128 + a1;
          if (v22)
          {
            __break(1u);
LABEL_193:
            __break(1u);
LABEL_194:
            _StringGuts._foreignAppendInPlace(_:)(v12, a1, 0, v340);
LABEL_195:
            swift_bridgeObjectRelease_n(a1, 2);
            goto LABEL_212;
          }
          v130 = v124;
          if (__OFADD__(v129, 3))
            goto LABEL_193;
          v131 = v125;
          v2 = v126;
          v132 = v127;
          _StringGuts.reserveCapacity(_:)(v129 + 3);
          v133 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v130, v131, v2, v132);
          _StringGuts.appendInPlace(_:isASCII:)(v133, v134, 0);
          v345 = 3;
          v346 = 12435439;
          specialized closure #1 in Unicode.Scalar.withUTF8CodeUnits<A>(_:)((char *)&v346, &v345, &v341);
          v135 = specialized Collection.subscript.getter(v12, v16, a1);
          v16 = specialized UnsafeBufferPointer.init(rebasing:)(v135, v136, v137, v138);
          a1 = v139;
          v140 = validateUTF8(_:)((uint64_t *)v16, v139);
          if ((v73 & 1) != 0)
          {
            v23 = v140;
            v12 = v141;
            if (!a1)
              goto LABEL_303;
            continue;
          }
          break;
        }
        _StringGuts.appendInPlace(_:isASCII:)((char *)v16, a1, 0);
LABEL_303:
        v12 = v341;
        a1 = v342;
LABEL_91:
        v16 = v343;
        v10 = v344;
        v75 = HIBYTE(v344) & 0xF;
        if ((v344 & 0x2000000000000000) != 0)
          v3 = HIBYTE(v344) & 0xF;
        else
          v3 = v343 & 0xFFFFFFFFFFFFLL;
        if (!v3 && (v343 & ~v344 & 0x2000000000000000) == 0)
        {
          swift_bridgeObjectRelease(v344);
          v343 = v12;
          v344 = a1;
          goto LABEL_212;
        }
        v1 = a1 & 0x2000000000000000;
        v23 = HIBYTE(a1) & 0xF;
        if ((v344 & 0x2000000000000000) == 0 || !v1)
          break;
        v81 = v75 + v23;
        if (v75 + v23 > 0xF)
        {
          v1 = 1;
          break;
        }
        if (v23)
        {
          v146 = 0;
          v147 = 0;
          v2 = v344;
          do
          {
            v148 = v75 + v147;
            v149 = v147 + 1;
            if (v147 >= 8)
              v150 = a1;
            else
              v150 = v12;
            v151 = v150 >> (v146 & 0x38);
            v152 = (8 * v75 + v146) & 0x38;
            v153 = (-255 << v152) - 1;
            v154 = (unint64_t)v151 << v152;
            v155 = v154 | v153 & v2;
            v156 = v154 | v153 & v16;
            if (v148 < 8)
              v16 = v156;
            else
              v2 = v155;
            v146 += 8;
            v147 = v149;
          }
          while (v23 != v149);
        }
        else
        {
          v2 = v344;
        }
        swift_bridgeObjectRelease(v344);
        swift_bridgeObjectRelease(a1);
        v157 = 0xA000000000000000;
        if (!(v16 & 0x8080808080808080 | v2 & 0x80808080808080))
          v157 = 0xE000000000000000;
        v343 = v16;
        v344 = v157 & 0xFF00000000000000 | (v81 << 56) | v2 & 0xFFFFFFFFFFFFFFLL;
LABEL_212:
        v10 = v343;
        a1 = v344;
        v158 = HIBYTE(v344) & 0xF;
        if ((v344 & 0x2000000000000000) != 0)
          v159 = HIBYTE(v344) & 0xF;
        else
          v159 = v343 & 0xFFFFFFFFFFFFLL;
        v3 = (int64_t)"' were found in a Set.\n"
                             "This usually means either that the type violates Hashable's requirements, or\n"
                             "that members of such a set were mutated after insertion.";
        if (!v159 && (v343 & ~v344 & 0x2000000000000000) == 0)
        {
          swift_bridgeObjectRelease(v344);
          v343 = 0xD00000000000009CLL;
          v344 = 0x8000000181762ED0 | 0x8000000000000000;
          goto LABEL_265;
        }
        if ((v344 & 0x2000000000000000) != 0 && (0x8000000181762ED0 & 0x2000000000000000) != 0)
        {
          v160 = v158 + ((0x8000000181762ED0 >> 56) & 0xF);
          if (v160 <= 0xF)
          {
            v192 = (0x8000000181762ED0 >> 56) & 0xF;
            if (v192)
            {
              v194 = 0;
              v195 = 0;
              v193 = v344;
              do
              {
                v196 = v158 + v195;
                v197 = v195 + 1;
                v198 = 0xD00000000000009CLL;
                if (v195 >= 8)
                  v198 = 0x8000000181762ED0 | 0x8000000000000000;
                v199 = v198 >> (v194 & 0x38);
                v200 = (8 * v158 + v194) & 0x38;
                v201 = (-255 << v200) - 1;
                v202 = (unint64_t)v199 << v200;
                v203 = v202 | v201 & v193;
                v204 = v202 | v201 & v10;
                if (v196 < 8)
                  v10 = v204;
                else
                  v193 = v203;
                v194 += 8;
                v195 = v197;
              }
              while (v192 != v197);
            }
            else
            {
              v193 = v344;
            }
            swift_bridgeObjectRelease(v344);
            swift_bridgeObjectRelease(0x8000000181762ED0 | 0x8000000000000000);
            v205 = 0xA000000000000000;
            if (!(v10 & 0x8080808080808080 | v193 & 0x80808080808080))
              v205 = 0xE000000000000000;
            v343 = v10;
            v344 = v205 & 0xFF00000000000000 | (v160 << 56) | v193 & 0xFFFFFFFFFFFFFFLL;
            goto LABEL_265;
          }
        }
        v1 = 0x8000000181762ED0 | 0x8000000000000000;
        if ((0x8000000181762ED0 & 0x2000000000000000) != 0)
          v16 = (0x8000000181762ED0 >> 56) & 0xF;
        else
          v16 = 156;
        swift_bridgeObjectRetain_n(0x8000000181762ED0 | 0x8000000000000000, 2, v76, v77);
        if ((0x8000000181762ED0 & 0x1000000000000000) == 0)
        {
          swift_bridgeObjectRetain_n(0x8000000181762ED0 | 0x8000000000000000, 4, v161, v162);
          v166 = v16;
          if ((a1 & 0x1000000000000000) == 0)
            goto LABEL_226;
LABEL_324:
          v334 = String.UTF8View._foreignCount()();
          v167 = v334 + v166;
          if (!__OFADD__(v334, v166))
            goto LABEL_227;
LABEL_326:
          __break(1u);
LABEL_327:
          __break(1u);
LABEL_328:
          v9 = _StringGuts._foreignConvertedToSmall()(v9, v10);
          v12 = v335;
LABEL_58:
          v40._rawBits = (v16 << 16) | 1;
          v41._rawBits = 1;
          v42._rawBits = _StringGuts.validateScalarRange(_:)(v41, v40, 0xD00000000000001CLL, (v3 + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000);
          if (v42._rawBits < 0x10000)
            v42._rawBits |= 3;
          v23 = specialized String.init(_:)(v42, v43, 0xD00000000000001CLL, (v3 + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000);
          v16 = v44;
          swift_bridgeObjectRelease((v3 + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000);
          if ((v16 & 0x2000000000000000) != 0)
          {
            swift_bridgeObjectRelease(v16);
            goto LABEL_62;
          }
LABEL_317:
          v327 = v10;
          if ((v16 & 0x1000000000000000) != 0)
          {
            v23 = _StringGuts._foreignConvertedToSmall()(v23, v16);
            v338 = v337;
            swift_bridgeObjectRelease(v16);
            v16 = v338;
            v10 = v327;
          }
          else
          {
            if ((v23 & 0x1000000000000000) != 0)
            {
              v328 = (unsigned __int8 *)((v16 & 0xFFFFFFFFFFFFFFFLL) + 32);
              v329 = v23 & 0xFFFFFFFFFFFFLL;
            }
            else
            {
              v328 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v23, v16);
            }
            closure #1 in _StringGuts._convertedToSmall()(v328, v329, &v341);
            swift_bridgeObjectRelease(v16);
            v23 = v341;
            v16 = v342;
          }
LABEL_62:
          v45 = HIBYTE(v12) & 0xF;
          v46 = HIBYTE(v16) & 0xF;
          v1 = v46 + v45;
          if ((unint64_t)(v46 + v45) > 0xF)
            goto LABEL_238;
          if (v46)
          {
            v47 = 0;
            v48 = 0;
            do
            {
              v49 = v45 + v48;
              v50 = v48 + 1;
              if (v48 >= 8)
                v51 = v16;
              else
                v51 = v23;
              v52 = v51 >> (v47 & 0x38);
              v53 = (8 * v45 + v47) & 0x38;
              v54 = (-255 << v53) - 1;
              v55 = (unint64_t)v52 << v53;
              v56 = v55 | v54 & v12;
              v57 = v55 | v54 & v9;
              if (v49 < 8)
                v9 = v57;
              else
                v12 = v56;
              v47 += 8;
              v48 = v50;
            }
            while (v46 != v50);
          }
          swift_bridgeObjectRelease(v10);
          swift_bridgeObjectRelease((v3 + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000);
          v58 = 0xA000000000000000;
          if (!(v9 & 0x8080808080808080 | v12 & 0x80808080808080))
            v58 = 0xE000000000000000;
          v14 = v58 & 0xFF00000000000000 | (v1 << 56) | v12 & 0xFFFFFFFFFFFFFFLL;
LABEL_85:
          v343 = v9;
LABEL_86:
          v344 = v14;
LABEL_87:
          TypeName = (uint64_t *)swift_getTypeName((Class *)a1, 0);
          if (v72 < 0)
            _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
          a1 = v72;
          if (!v72)
          {
            v12 = 0;
            a1 = 0xE000000000000000;
LABEL_90:
            v9 = 0;
            goto LABEL_91;
          }
          v16 = (uint64_t)TypeName;
          v78 = TypeName;
          v79 = v72 & 0xFFFFFFFFFFFFFFF0;
          if ((v72 & 0xFFFFFFFFFFFFFFF0) != 0)
            goto LABEL_140;
LABEL_98:
          if ((unint64_t)v78 >= v16 + (a1 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_101;
          if ((*v78 & 0x8080808080808080) == 0)
          {
            ++v78;
LABEL_101:
            if ((unint64_t)v78 < v16 + (a1 & 0xFFFFFFFFFFFFFFFCLL))
            {
              if ((*(_DWORD *)v78 & 0x80808080) == 0)
              {
                v78 = (uint64_t *)((char *)v78 + 4);
                goto LABEL_104;
              }
              goto LABEL_144;
            }
LABEL_104:
            if ((unint64_t)v78 < v16 + (a1 & 0xFFFFFFFFFFFFFFFELL))
            {
              if ((*(_WORD *)v78 & 0x8080) != 0)
                goto LABEL_144;
              v78 = (uint64_t *)((char *)v78 + 2);
            }
            if ((unint64_t)v78 >= v16 + a1 || (*(char *)v78 & 0x80000000) == 0)
            {
              if (a1 > 15)
              {
                v80 = 1;
LABEL_111:
                a1 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)((char *)v16, a1, a1, v80 & 1);
                v9 = 0;
                v12 = *(_QWORD *)(a1 + 24);
                goto LABEL_91;
              }
LABEL_267:
              v208 = a1 - 8;
              v209 = 8;
              if (a1 < 8)
                v209 = a1;
              if ((v209 & 0x8000000000000000) != 0)
                _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
              if (v209 < 8)
              {
                v210 = 0;
                v12 = 0;
                v211 = 0;
                goto LABEL_280;
              }
              if (v209 >= 0x10)
              {
                v210 = v209 & 0xFFFFFFFFFFFFFFF0;
                v235 = vmovl_high_u8(*(uint8x16_t *)v16);
                v236 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v235.i8);
                v237 = vmovl_u8(*(uint8x8_t *)v16);
                v238 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v237.i8);
                v239 = (int8x16_t)vmovl_high_u16(v235);
                v240 = (int8x8_t)vextq_s8(v239, v239, 8uLL).u64[0];
                v241 = (int8x16_t)vmovl_high_u16(v237);
                v242 = (int8x8_t)vextq_s8(v241, v241, 8uLL).u64[0];
                *(int8x8_t *)v241.i8 = vorr_s8(*(int8x8_t *)v241.i8, *(int8x8_t *)v239.i8);
                v243.i64[0] = v241.u32[0];
                v243.i64[1] = v241.u32[1];
                v244 = (int8x16_t)vshlq_u64(v243, (uint64x2_t)xmmword_1816ABC20);
                *(int8x8_t *)v239.i8 = vorr_s8(*(int8x8_t *)v238.i8, *(int8x8_t *)v236.i8);
                v243.i64[0] = v239.u32[0];
                v243.i64[1] = v239.u32[1];
                v245 = vorrq_s8((int8x16_t)vshlq_u64(v243, (uint64x2_t)xmmword_1816ABC10), v244);
                *(int8x8_t *)v239.i8 = vorr_s8(v242, v240);
                v243.i64[0] = v239.u32[0];
                v243.i64[1] = v239.u32[1];
                v246 = (int8x16_t)vshlq_u64(v243, (uint64x2_t)xmmword_1816ABC00);
                *(int8x8_t *)v236.i8 = vorr_s8((int8x8_t)*(_OWORD *)&vextq_s8(v238, v238, 8uLL), (int8x8_t)*(_OWORD *)&vextq_s8(v236, v236, 8uLL));
                v243.i64[0] = v236.u32[0];
                v243.i64[1] = v236.u32[1];
                v247 = vorrq_s8(v245, vorrq_s8((int8x16_t)vshlq_u64(v243, (uint64x2_t)xmmword_1816ABBF0), v246));
                v12 = (uint64_t)vorr_s8(*(int8x8_t *)v247.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v247, v247, 8uLL));
                if (v209 != (v209 & 0xFFFFFFFFFFFFFFF0))
                {
                  v211 = 8 * v210;
                  if ((v209 & 8) == 0)
                    goto LABEL_280;
                  goto LABEL_274;
                }
              }
              else
              {
                v12 = 0;
                v211 = 0;
                v210 = 0;
LABEL_274:
                v212 = v210;
                v213 = vdupq_n_s64(v211);
                v210 = v209 & 0xFFFFFFFFFFFFFFF8;
                v211 = 8 * (v209 & 0xFFFFFFFFFFFFFFF8);
                v214 = 0uLL;
                v215 = (int8x16_t)(unint64_t)v12;
                v216 = vaddq_s64(v213, (int64x2_t)xmmword_1816ABC00);
                v217 = vaddq_s64(v213, (int64x2_t)xmmword_1816ABC20);
                v218 = vaddq_s64(v213, (int64x2_t)xmmword_1816ABBF0);
                v219 = vaddq_s64(v213, (int64x2_t)xmmword_1816ABC10);
                v220 = (uint8x8_t *)(v16 + v212);
                v221 = (int8x16_t)vdupq_n_s64(0x38uLL);
                v222 = v212 - (v209 & 0xFFFFFFFFFFFFFFF8);
                v223 = vdupq_n_s64(0x40uLL);
                v224 = 0uLL;
                v225 = 0uLL;
                do
                {
                  v226 = *v220++;
                  v227 = vmovl_u8(v226);
                  v228 = vmovl_high_u16(v227);
                  v229.i64[0] = v228.u32[2];
                  v229.i64[1] = v228.u32[3];
                  v230 = v229;
                  v229.i64[0] = v228.u32[0];
                  v229.i64[1] = v228.u32[1];
                  v231 = v229;
                  v232 = vmovl_u16(*(uint16x4_t *)v227.i8);
                  v229.i64[0] = v232.u32[2];
                  v229.i64[1] = v232.u32[3];
                  v233 = v229;
                  v229.i64[0] = v232.u32[0];
                  v229.i64[1] = v232.u32[1];
                  v225 = vorrq_s8((int8x16_t)vshlq_u64(v230, (uint64x2_t)vandq_s8((int8x16_t)v216, v221)), v225);
                  v224 = vorrq_s8((int8x16_t)vshlq_u64(v231, (uint64x2_t)vandq_s8((int8x16_t)v217, v221)), v224);
                  v214 = vorrq_s8((int8x16_t)vshlq_u64(v233, (uint64x2_t)vandq_s8((int8x16_t)v218, v221)), v214);
                  v215 = vorrq_s8((int8x16_t)vshlq_u64(v229, (uint64x2_t)vandq_s8((int8x16_t)v219, v221)), v215);
                  v217 = vaddq_s64(v217, v223);
                  v218 = vaddq_s64(v218, v223);
                  v219 = vaddq_s64(v219, v223);
                  v216 = vaddq_s64(v216, v223);
                  v222 += 8;
                }
                while (v222);
                v234 = vorrq_s8(vorrq_s8(v215, v224), vorrq_s8(v214, v225));
                v12 = (uint64_t)vorr_s8(*(int8x8_t *)v234.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v234, v234, 8uLL));
                if (v209 != v210)
                {
LABEL_280:
                  v248 = (unsigned __int8 *)(v16 + v210);
                  v249 = v209 - v210;
                  do
                  {
                    v250 = *v248++;
                    v12 |= (unint64_t)v250 << (v211 & 0x38);
                    v211 += 8;
                    --v249;
                  }
                  while (v249);
                }
              }
              if (a1 < 9)
              {
                v252 = 0;
              }
              else
              {
                if (v208 < 8)
                {
                  v251 = 0;
                  v252 = 0;
                  v253 = 0;
                  goto LABEL_296;
                }
                if (v208 >= 0x10)
                {
                  v277 = (uint8x16_t *)(v16 + 8);
                  v251 = v208 & 0xFFFFFFFFFFFFFFF0;
                  v278 = (int64x2_t)xmmword_1816ABCA0;
                  v279 = (int64x2_t)xmmword_1816ABCB0;
                  v280 = (int64x2_t)xmmword_1816ABCC0;
                  v281 = (int64x2_t)xmmword_1816ABCD0;
                  v282 = (int64x2_t)xmmword_1816ABC00;
                  v283 = (int64x2_t)xmmword_1816ABC20;
                  v284 = (int8x16_t)vdupq_n_s64(0x38uLL);
                  v285 = vdupq_n_s64(0x80uLL);
                  v286 = (int64x2_t)xmmword_1816ABBF0;
                  v253 = 8 * (v208 & 0xFFFFFFFFFFFFFFF0);
                  v287 = 0uLL;
                  v288 = 0uLL;
                  v289 = (int64x2_t)xmmword_1816ABC10;
                  v290 = v208 & 0xFFFFFFFFFFFFFFF0;
                  v291 = 0uLL;
                  v292 = 0uLL;
                  v293 = 0uLL;
                  v294 = 0uLL;
                  v295 = 0uLL;
                  v296 = 0uLL;
                  do
                  {
                    v297 = *v277++;
                    v298 = vmovl_u8(*(uint8x8_t *)v297.i8);
                    v299 = vmovl_high_u16(v298);
                    v300.i64[0] = v299.u32[2];
                    v300.i64[1] = v299.u32[3];
                    v301 = v300;
                    v302 = vmovl_high_u8(v297);
                    v303 = vmovl_u16(*(uint16x4_t *)v302.i8);
                    v300.i64[0] = v303.u32[2];
                    v300.i64[1] = v303.u32[3];
                    v304 = v300;
                    v300.i64[0] = v303.u32[0];
                    v300.i64[1] = v303.u32[1];
                    v305 = v300;
                    v300.i64[0] = v299.u32[0];
                    v300.i64[1] = v299.u32[1];
                    v306 = v300;
                    v307 = vmovl_u16(*(uint16x4_t *)v298.i8);
                    v300.i64[0] = v307.u32[2];
                    v300.i64[1] = v307.u32[3];
                    v308 = v300;
                    v309 = vmovl_high_u16(v302);
                    v300.i64[0] = v309.u32[0];
                    v300.i64[1] = v309.u32[1];
                    v310 = v300;
                    v300.i64[0] = v307.u32[0];
                    v300.i64[1] = v307.u32[1];
                    v311 = v300;
                    v300.i64[0] = v309.u32[2];
                    v300.i64[1] = v309.u32[3];
                    v292 = vorrq_s8((int8x16_t)vshlq_u64(v301, (uint64x2_t)vandq_s8((int8x16_t)v282, v284)), v292);
                    v294 = vorrq_s8((int8x16_t)vshlq_u64(v304, (uint64x2_t)vandq_s8((int8x16_t)v280, v284)), v294);
                    v293 = vorrq_s8((int8x16_t)vshlq_u64(v305, (uint64x2_t)vandq_s8((int8x16_t)v281, v284)), v293);
                    v291 = vorrq_s8((int8x16_t)vshlq_u64(v306, (uint64x2_t)vandq_s8((int8x16_t)v283, v284)), v291);
                    v288 = vorrq_s8((int8x16_t)vshlq_u64(v308, (uint64x2_t)vandq_s8((int8x16_t)v286, v284)), v288);
                    v295 = vorrq_s8((int8x16_t)vshlq_u64(v310, (uint64x2_t)vandq_s8((int8x16_t)v279, v284)), v295);
                    v287 = vorrq_s8((int8x16_t)vshlq_u64(v311, (uint64x2_t)vandq_s8((int8x16_t)v289, v284)), v287);
                    v296 = vorrq_s8((int8x16_t)vshlq_u64(v300, (uint64x2_t)vandq_s8((int8x16_t)v278, v284)), v296);
                    v283 = vaddq_s64(v283, v285);
                    v286 = vaddq_s64(v286, v285);
                    v289 = vaddq_s64(v289, v285);
                    v282 = vaddq_s64(v282, v285);
                    v281 = vaddq_s64(v281, v285);
                    v280 = vaddq_s64(v280, v285);
                    v279 = vaddq_s64(v279, v285);
                    v278 = vaddq_s64(v278, v285);
                    v290 -= 16;
                  }
                  while (v290);
                  v312 = vorrq_s8(vorrq_s8(vorrq_s8(v287, v293), vorrq_s8(v291, v295)), vorrq_s8(vorrq_s8(v288, v294), vorrq_s8(v292, v296)));
                  v252 = vorr_s8(*(int8x8_t *)v312.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v312, v312, 8uLL));
                  if (v208 != v251)
                  {
                    if ((v208 & 8) == 0)
                      goto LABEL_296;
                    goto LABEL_288;
                  }
                }
                else
                {
                  v252 = 0;
                  v253 = 0;
                  v251 = 0;
LABEL_288:
                  v254 = v251;
                  v251 = v208 & 0xFFFFFFFFFFFFFFF8;
                  v255 = vdupq_n_s64(v253);
                  v253 = 8 * (v208 & 0xFFFFFFFFFFFFFFF8);
                  v256 = (int8x16_t)(unint64_t)v252;
                  v257 = 0uLL;
                  v258 = vaddq_s64(v255, (int64x2_t)xmmword_1816ABC00);
                  v259 = vaddq_s64(v255, (int64x2_t)xmmword_1816ABC20);
                  v260 = vaddq_s64(v255, (int64x2_t)xmmword_1816ABBF0);
                  v261 = vaddq_s64(v255, (int64x2_t)xmmword_1816ABC10);
                  v262 = (uint8x8_t *)(v254 + v16 + 8);
                  v263 = (int8x16_t)vdupq_n_s64(0x38uLL);
                  v264 = v254 - (v208 & 0xFFFFFFFFFFFFFFF8);
                  v265 = vdupq_n_s64(0x40uLL);
                  v266 = 0uLL;
                  v267 = 0uLL;
                  do
                  {
                    v268 = *v262++;
                    v269 = vmovl_u8(v268);
                    v270 = vmovl_high_u16(v269);
                    v271.i64[0] = v270.u32[2];
                    v271.i64[1] = v270.u32[3];
                    v272 = v271;
                    v271.i64[0] = v270.u32[0];
                    v271.i64[1] = v270.u32[1];
                    v273 = v271;
                    v274 = vmovl_u16(*(uint16x4_t *)v269.i8);
                    v271.i64[0] = v274.u32[2];
                    v271.i64[1] = v274.u32[3];
                    v275 = v271;
                    v271.i64[0] = v274.u32[0];
                    v271.i64[1] = v274.u32[1];
                    v267 = vorrq_s8((int8x16_t)vshlq_u64(v272, (uint64x2_t)vandq_s8((int8x16_t)v258, v263)), v267);
                    v266 = vorrq_s8((int8x16_t)vshlq_u64(v273, (uint64x2_t)vandq_s8((int8x16_t)v259, v263)), v266);
                    v257 = vorrq_s8((int8x16_t)vshlq_u64(v275, (uint64x2_t)vandq_s8((int8x16_t)v260, v263)), v257);
                    v256 = vorrq_s8((int8x16_t)vshlq_u64(v271, (uint64x2_t)vandq_s8((int8x16_t)v261, v263)), v256);
                    v259 = vaddq_s64(v259, v265);
                    v260 = vaddq_s64(v260, v265);
                    v261 = vaddq_s64(v261, v265);
                    v258 = vaddq_s64(v258, v265);
                    v264 += 8;
                  }
                  while (v264);
                  v276 = vorrq_s8(vorrq_s8(v256, v266), vorrq_s8(v257, v267));
                  v252 = vorr_s8(*(int8x8_t *)v276.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v276, v276, 8uLL));
                  if (v208 != v251)
                  {
LABEL_296:
                    v313 = a1 - v251 - 8;
                    v314 = (unsigned __int8 *)(v251 + v16 + 8);
                    do
                    {
                      v315 = *v314++;
                      *(_QWORD *)&v252 |= (unint64_t)v315 << (v253 & 0x38);
                      v253 += 8;
                      --v313;
                    }
                    while (v313);
                  }
                }
              }
              v316 = 0xA000000000000000;
              if (((*(_QWORD *)&v252 | v12) & 0x8080808080808080) == 0)
                v316 = 0xE000000000000000;
              a1 = v316 | (a1 << 56) | *(_QWORD *)&v252;
              goto LABEL_90;
            }
          }
          goto LABEL_144;
        }
        swift_bridgeObjectRetain_n(0x8000000181762ED0 | 0x8000000000000000, 5, v161, v162);
        v2 = 0xD00000000000009CLL;
        v330._rawBits = 1;
        v331._rawBits = (v16 << 16) | 1;
        v332._rawBits = _StringGuts.validateScalarRange(_:)(v330, v331, 0xD00000000000009CLL, 0x8000000181762ED0 | 0x8000000000000000);
        if (v332._rawBits < 0x10000)
          v332._rawBits |= 3;
        v166 = specialized Collection.count.getter(v332, v333, 0xD00000000000009CLL, 0x8000000181762ED0 | 0x8000000000000000);
        swift_bridgeObjectRelease(0x8000000181762ED0 | 0x8000000000000000);
        if ((a1 & 0x1000000000000000) != 0)
          goto LABEL_324;
LABEL_226:
        v22 = __OFADD__(v159, v166);
        v167 = v159 + v166;
        if (v22)
          goto LABEL_326;
LABEL_227:
        if ((v10 & ~a1 & 0x2000000000000000) != 0
          && swift_isUniquelyReferenced_nonNull_native(a1 & 0xFFFFFFFFFFFFFFFLL))
        {
          v168 = _StringGuts.nativeUnusedCapacity.getter(v10, a1);
          if ((v163 & 1) != 0)
            goto LABEL_247;
          v169 = ((unint64_t)a1 >> 61) & 1;
          if (v168 < v166)
            LODWORD(v169) = 1;
          if (v167 <= 15 && (_DWORD)v169)
          {
LABEL_234:
            swift_bridgeObjectRetain(a1, v163, v164, v165);
            v170 = _StringGuts._convertedToSmall()(v10, a1);
            v172 = v171;
            swift_bridgeObjectRelease(a1);
            v173._rawBits = (v16 << 16) | 1;
            v174._rawBits = 1;
            v175._rawBits = _StringGuts.validateScalarRange(_:)(v174, v173, 0xD00000000000009CLL, 0x8000000181762ED0 | 0x8000000000000000);
            if (v175._rawBits < 0x10000)
              v175._rawBits |= 3;
            v177 = specialized String.init(_:)(v175, v176, 0xD00000000000009CLL, 0x8000000181762ED0 | 0x8000000000000000);
            v179 = v178;
            swift_bridgeObjectRelease(0x8000000181762ED0 | 0x8000000000000000);
            v180 = _StringGuts._convertedToSmall()(v177, v179);
            v182 = v181;
            swift_bridgeObjectRelease(v179);
            v183 = specialized _SmallString.init(_:appending:)(v170, v172, v180, v182);
            if ((v185 & 1) == 0)
            {
              v186 = (char *)v183;
              v187 = v184;
              swift_bridgeObjectRelease(a1);
              swift_bridgeObjectRelease(0x8000000181762ED0 | 0x8000000000000000);
              v343 = (unint64_t)v186;
              v344 = v187;
              goto LABEL_265;
            }
LABEL_238:
            v188 = 266;
LABEL_248:
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v188, 0);
          }
        }
        else if (v167 <= 15)
        {
          goto LABEL_234;
        }
        _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v167, v166);
        if ((0x8000000181762ED0 & 0x1000000000000000) != 0)
        {
          _StringGuts._foreignAppendInPlace(_:)(0xD00000000000009CLL, 0x8000000181762ED0 | 0x8000000000000000, 0, v16);
          v191 = 0x8000000181762ED0 | 0x8000000000000000;
LABEL_252:
          swift_bridgeObjectRelease_n(v191, 2);
LABEL_265:
          _assertionFailure(_:_:flags:)("Fatal error", 11, 2, (char *)v343, v344, 0);
        }
        if ((0x8000000181762ED0 & 0x2000000000000000) != 0)
          a1 = ((0x8000000181762ED0 | 0x8000000000000000) >> 62) & 1;
        else
          a1 = 1;
        swift_bridgeObjectRelease_n(0x8000000181762ED0 | 0x8000000000000000, 5);
        if ((0x8000000181762ED0 & 0x2000000000000000) != 0)
        {
          v12 = 0x8000000181762ED0 | 0x8000000000000000;
          swift_bridgeObjectRelease(0x8000000181762ED0 | 0x8000000000000000);
          v341 = 0xD00000000000009CLL;
          v342 = 0x8000000181762ED0 & 0xFFFFFFFFFFFFFFLL;
          v206 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v16, (uint64_t)&v341, (0x8000000181762ED0 >> 56) & 0xF);
          v104 = &v343;
          _StringGuts.appendInPlace(_:isASCII:)(v206, v207, a1);
          if (!v9)
          {
            swift_bridgeObjectRelease(0x8000000181762ED0 | 0x8000000000000000);
            goto LABEL_265;
          }
          goto LABEL_335;
        }
        v12 = 0x8000000181762ED0;
        v189 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v16, (0x8000000181762ED0 & 0xFFFFFFFFFFFFFFFLL) + 32, 156);
        v104 = &v343;
        _StringGuts.appendInPlace(_:isASCII:)(v189, v190, a1);
        if (!v9)
        {
          v191 = 0x8000000181762ED0 | 0x8000000000000000;
          goto LABEL_252;
        }
      }
      v339 = v12 & 0xFFFFFFFFFFFFLL;
      if (v1)
        v2 = HIBYTE(a1) & 0xF;
      else
        v2 = v12 & 0xFFFFFFFFFFFFLL;
      swift_bridgeObjectRetain_n(a1, 2, v73, v74);
      v340 = v2;
      if ((a1 & 0x1000000000000000) == 0)
      {
        swift_bridgeObjectRetain_n(a1, 4, v20, v21);
        if ((v10 & 0x1000000000000000) == 0)
          continue;
LABEL_314:
        v326 = String.UTF8View._foreignCount()();
        v3 = v326 + v2;
        if (!__OFADD__(v326, v2))
          goto LABEL_122;
LABEL_316:
        __break(1u);
        goto LABEL_317;
      }
      break;
    }
  }
}

uint64_t specialized _NativeSet._unsafeInsertNew(_:at:)(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  *(_QWORD *)(a4 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v4 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * a3);
  *v4 = result;
  v4[1] = a2;
  v5 = *(_QWORD *)(a4 + 16);
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
    __break(1u);
  else
    *(_QWORD *)(a4 + 16) = v7;
  return result;
}

uint64_t specialized _NativeSet._unsafeInsertNew(_:at:)(uint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  *(_QWORD *)(a3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  v3 = *(_QWORD *)(a3 + 48) + 40 * a2;
  v4 = *(_OWORD *)(result + 16);
  *(_OWORD *)v3 = *(_OWORD *)result;
  *(_OWORD *)(v3 + 16) = v4;
  *(_QWORD *)(v3 + 32) = *(_QWORD *)(result + 32);
  v5 = *(_QWORD *)(a3 + 16);
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
    __break(1u);
  else
    *(_QWORD *)(a3 + 16) = v7;
  return result;
}

uint64_t _NativeSet._unsafeInsertNew(_:at:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  *(_QWORD *)(a3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(*(_QWORD *)(a3 + 48) + *(_QWORD *)(*(_QWORD *)(a4 - 8) + 72) * a2, a1, a4);
  v6 = *(_QWORD *)(a3 + 16);
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    *(_QWORD *)(a3 + 16) = v8;
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    v8 = v6 + 1;
    if ((a3 & 1) != 0)
    {
      specialized _NativeSet.resize(capacity:)(v8, (uint64_t (*)(_QWORD))canonical specialized generic type metadata accessor for _SetStorage<ObjectIdentifier>, (uint64_t (*)(_QWORD, _QWORD *))specialized _NativeSet._unsafeInsertNew(_:));
    }
    else
    {
      if (v7 > v6)
      {
        result = (uint64_t)specialized _NativeSet.copy()((uint64_t (*)(_QWORD))canonical specialized generic type metadata accessor for _SetStorage<ObjectIdentifier>);
        goto LABEL_12;
      }
      specialized _NativeSet.copyAndResize(capacity:)(v8, (uint64_t (*)(_QWORD))canonical specialized generic type metadata accessor for _SetStorage<ObjectIdentifier>, (uint64_t (*)(_QWORD, _QWORD *))specialized _NativeSet._unsafeInsertNew(_:));
    }
    v9 = *v3;
    result = specialized static Hasher._hash(seed:_:)(*(_QWORD *)(*v3 + 40), v5);
    v10 = -1 << *(_BYTE *)(v9 + 32);
    a2 = result & ~v10;
    if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v11 = ~v10;
      while (*(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * a2) != v5)
      {
        a2 = (a2 + 1) & v11;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          goto LABEL_12;
      }
LABEL_15:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)((uint64_t)&type metadata for ObjectIdentifier);
    }
  }
LABEL_12:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * a2) = v5;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
  {
    __break(1u);
    goto LABEL_15;
  }
  *(_QWORD *)(v12 + 16) = v15;
  return result;
}

{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35[5];
  uint64_t v36[3];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39[3];
  uint64_t v40;
  uint64_t v41;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_15;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v8);
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)specialized _NativeSet.copy()();
      goto LABEL_15;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v8);
  }
  v9 = *v3;
  v10 = *(_QWORD *)(*v3 + 40);
  v11 = *(_QWORD *)(v5 + 24);
  v12 = *(_QWORD *)(v5 + 32);
  __swift_project_boxed_opaque_existential_0Tm((_QWORD *)v5, v11);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v12 + 8))(v39, v11, v12);
  v13 = v40;
  v14 = v41;
  __swift_project_boxed_opaque_existential_0Tm(v39, v40);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 40))(v10, v13, v14);
  result = __swift_destroy_boxed_opaque_existential_1Tm(v39);
  v16 = -1 << *(_BYTE *)(v9 + 32);
  a2 = v15 & ~v16;
  v34 = v9;
  v17 = v9 + 56;
  if (((*(_QWORD *)(v17 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v16;
    do
    {
      outlined init with copy of AnyHashable(*(_QWORD *)(v34 + 48) + 40 * a2, (uint64_t)v39);
      v19 = v40;
      v20 = v41;
      __swift_project_boxed_opaque_existential_0Tm(v39, v40);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v20 + 8))(v36, v19, v20);
      v21 = v37;
      v22 = v38;
      __swift_project_boxed_opaque_existential_0Tm(v36, v37);
      v23 = *(_QWORD *)(v5 + 24);
      v24 = *(_QWORD *)(v5 + 32);
      __swift_project_boxed_opaque_existential_0Tm((_QWORD *)v5, v23);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v24 + 8))(v35, v23, v24);
      v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v22 + 16))(v35, v21, v22);
      __swift_destroy_boxed_opaque_existential_1Tm(v35);
      if (v25 == 2)
      {
        __swift_destroy_boxed_opaque_existential_1Tm(v36);
        result = (uint64_t)outlined destroy of AnyHashable(v39);
      }
      else
      {
        __swift_destroy_boxed_opaque_existential_1Tm(v36);
        result = (uint64_t)outlined destroy of AnyHashable(v39);
        if ((v25 & 1) != 0)
          ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)((uint64_t)&type metadata for AnyHashable);
      }
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v17 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_15:
  v26 = *v33;
  *(_QWORD *)(*v33 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  v27 = *(_QWORD *)(v26 + 48) + 40 * a2;
  v28 = *(_OWORD *)v5;
  v29 = *(_OWORD *)(v5 + 16);
  *(_QWORD *)(v27 + 32) = *(_QWORD *)(v5 + 32);
  *(_OWORD *)v27 = v28;
  *(_OWORD *)(v27 + 16) = v29;
  v30 = *(_QWORD *)(v26 + 16);
  v31 = __OFADD__(v30, 1);
  v32 = v30 + 1;
  if (v31)
    __break(1u);
  else
    *(_QWORD *)(v26 + 16) = v32;
  return result;
}

{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    v8 = v6 + 1;
    if ((a3 & 1) != 0)
    {
      specialized _NativeSet.resize(capacity:)(v8, (uint64_t (*)(_QWORD))canonical specialized generic type metadata accessor for _SetStorage<Int>, (uint64_t (*)(_QWORD, _QWORD *))specialized _NativeSet._unsafeInsertNew(_:));
    }
    else
    {
      if (v7 > v6)
      {
        result = (uint64_t)specialized _NativeSet.copy()((uint64_t (*)(_QWORD))canonical specialized generic type metadata accessor for _SetStorage<Int>);
        goto LABEL_12;
      }
      specialized _NativeSet.copyAndResize(capacity:)(v8, (uint64_t (*)(_QWORD))canonical specialized generic type metadata accessor for _SetStorage<Int>, (uint64_t (*)(_QWORD, _QWORD *))specialized _NativeSet._unsafeInsertNew(_:));
    }
    v9 = *v3;
    result = specialized static Hasher._hash(seed:_:)(*(_QWORD *)(*v3 + 40), v5);
    v10 = -1 << *(_BYTE *)(v9 + 32);
    a2 = result & ~v10;
    if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v11 = ~v10;
      while (*(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * a2) != v5)
      {
        a2 = (a2 + 1) & v11;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          goto LABEL_12;
      }
LABEL_15:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)((uint64_t)&type metadata for Int);
    }
  }
LABEL_12:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * a2) = v5;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
  {
    __break(1u);
    goto LABEL_15;
  }
  *(_QWORD *)(v12 + 16) = v15;
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t result, unint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  unint64_t v28[5];
  __int128 v29;
  __int128 v30;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_25;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v11);
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)specialized _NativeSet.copy()();
      goto LABEL_25;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v11);
  }
  v12 = *v4;
  v13 = _swift_stdlib_Hashing_parameters ^ *(_QWORD *)(*v4 + 40);
  v28[0] = 0;
  v28[1] = v13 ^ 0x736F6D6570736575;
  v28[2] = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v28[3] = v13 ^ 0x6C7967656E657261;
  v28[4] = unk_1ECD25520 ^ 0x7465646279746573;
  v29 = 0u;
  v30 = 0u;
  String.hash(into:)(v28, v8, a2);
  result = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a3 = result & ~v14;
  v15 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v16 = ~v14;
    v17 = *(_QWORD *)(v12 + 48);
    do
    {
      v18 = (uint64_t *)(v17 + 16 * a3);
      result = *v18;
      v19 = v18[1];
      v20 = *v18 == v8 && v19 == a2;
      if (v20
        || ((~v19 & 0x6000000000000000) == 0 ? (v21 = (a2 & 0x2000000000000000) == 0) : (v21 = 1),
            !v21 ? (v22 = (a2 & 0x4000000000000000) == 0) : (v22 = 1),
            v22 && (result = _stringCompareInternal(_:_:expecting:)(result, v19, v8, a2, 0), (result & 1) != 0)))
      {
        ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)((uint64_t)&type metadata for String);
      }
      a3 = (a3 + 1) & v16;
    }
    while (((*(_QWORD *)(v15 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0);
  }
LABEL_25:
  v23 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v24 = (unint64_t *)(*(_QWORD *)(v23 + 48) + 16 * a3);
  *v24 = v8;
  v24[1] = a2;
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (v26)
    __break(1u);
  else
    *(_QWORD *)(v23 + 16) = v27;
  return result;
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(__int128 *a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  _QWORD *v27;
  char v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  int64_t v46;
  unint64_t v47;
  int64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  int64_t v58;
  int64_t v59;
  unint64_t v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  int64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v89[5];
  uint64_t v90[3];
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;

  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_90;
  v8 = v6 + 1;
  if ((a3 & 1) == 0)
  {
    if (v7 > v6)
    {
      v26 = *(unsigned int *)(v5 + 36);
      v27 = *(_QWORD **)(v5 + 40);
      v28 = *(_BYTE *)(v5 + 32);
      LOBYTE(v93) = 0;
      v29 = specialized static _SetStorage.allocate(scale:age:seed:)(v28, v26, v27, 0);
      v30 = v29;
      if (!*(_QWORD *)(v5 + 16))
        goto LABEL_78;
      v31 = v29 + 7;
      v32 = v5 + 56;
      v33 = (unint64_t)((1 << *((_BYTE *)v30 + 32)) + 63) >> 6;
      if (v30 != (_QWORD *)v5 || (unint64_t)v31 >= v5 + 56 + 8 * v33)
        memmove(v31, (const void *)(v5 + 56), 8 * v33);
      v35 = 0;
      v30[2] = *(_QWORD *)(v5 + 16);
      v36 = 1 << *(_BYTE *)(v5 + 32);
      v37 = -1;
      if (v36 < 64)
        v37 = ~(-1 << v36);
      v38 = v37 & *(_QWORD *)(v5 + 56);
      v39 = (unint64_t)(v36 + 63) >> 6;
      while (1)
      {
        if (v38)
        {
          v40 = __clz(__rbit64(v38));
          v38 &= v38 - 1;
          v41 = v40 | (v35 << 6);
        }
        else
        {
          v46 = v35 + 1;
          if (__OFADD__(v35, 1))
          {
LABEL_93:
            __break(1u);
            goto LABEL_94;
          }
          if (v46 >= v39)
            goto LABEL_78;
          v47 = *(_QWORD *)(v32 + 8 * v46);
          ++v35;
          if (!v47)
          {
            v35 = v46 + 1;
            if (v46 + 1 >= v39)
              goto LABEL_78;
            v47 = *(_QWORD *)(v32 + 8 * v35);
            if (!v47)
            {
              v35 = v46 + 2;
              if (v46 + 2 >= v39)
                goto LABEL_78;
              v47 = *(_QWORD *)(v32 + 8 * v35);
              if (!v47)
              {
                v48 = v46 + 3;
                if (v48 >= v39)
                  goto LABEL_78;
                v47 = *(_QWORD *)(v32 + 8 * v48);
                if (!v47)
                {
                  while (1)
                  {
                    v35 = v48 + 1;
                    if (__OFADD__(v48, 1))
                      goto LABEL_97;
                    if (v35 >= v39)
                      break;
                    v47 = *(_QWORD *)(v32 + 8 * v35);
                    ++v48;
                    if (v47)
                      goto LABEL_54;
                  }
LABEL_78:
                  swift_release(v5);
                  *v3 = (uint64_t)v30;
LABEL_90:
                  v80 = *v87;
                  *(_QWORD *)(*v87 + 8 * (a2 >> 6) + 56) |= 1 << a2;
                  v81 = *(_QWORD *)(v80 + 48) + 40 * a2;
                  v82 = *a1;
                  v83 = a1[1];
                  *(_QWORD *)(v81 + 32) = *((_QWORD *)a1 + 4);
                  *(_OWORD *)v81 = v82;
                  *(_OWORD *)(v81 + 16) = v83;
                  v84 = *(_QWORD *)(v80 + 16);
                  v85 = __OFADD__(v84, 1);
                  v86 = v84 + 1;
                  if (!v85)
                  {
                    *(_QWORD *)(v80 + 16) = v86;
                    return;
                  }
LABEL_95:
                  __break(1u);
                  goto LABEL_96;
                }
                v35 = v48;
              }
            }
          }
LABEL_54:
          v38 = (v47 - 1) & v47;
          v41 = __clz(__rbit64(v47)) + (v35 << 6);
        }
        v42 = 40 * v41;
        outlined init with copy of AnyHashable(*(_QWORD *)(v5 + 48) + 40 * v41, (uint64_t)&v93);
        v43 = v30[6] + v42;
        v44 = v93;
        v45 = v94;
        *(_QWORD *)(v43 + 32) = v95;
        *(_OWORD *)v43 = v44;
        *(_OWORD *)(v43 + 16) = v45;
      }
    }
    v50 = specialized static _HashTable.scale(forCapacity:)(v8);
    LOBYTE(v93) = 1;
    v13 = specialized static _SetStorage.allocate(scale:age:seed:)(v50, 0x100000000, 0, 1);
    if (*(_QWORD *)(v5 + 16))
    {
      v54 = 1 << *(_BYTE *)(v5 + 32);
      v55 = v5 + 56;
      v56 = -1;
      if (v54 < 64)
        v56 = ~(-1 << v54);
      v57 = v56 & *(_QWORD *)(v5 + 56);
      v58 = (unint64_t)(v54 + 63) >> 6;
      swift_retain((unint64_t *)v5, v51, v52, v53);
      v59 = 0;
      while (1)
      {
        if (v57)
        {
          v60 = __clz(__rbit64(v57));
          v57 &= v57 - 1;
          v61 = v60 | (v59 << 6);
        }
        else
        {
          v62 = v59 + 1;
          if (__OFADD__(v59, 1))
          {
LABEL_94:
            __break(1u);
            goto LABEL_95;
          }
          if (v62 >= v58)
            goto LABEL_82;
          v63 = *(_QWORD *)(v55 + 8 * v62);
          ++v59;
          if (!v63)
          {
            v59 = v62 + 1;
            if (v62 + 1 >= v58)
              goto LABEL_82;
            v63 = *(_QWORD *)(v55 + 8 * v59);
            if (!v63)
            {
              v59 = v62 + 2;
              if (v62 + 2 >= v58)
                goto LABEL_82;
              v63 = *(_QWORD *)(v55 + 8 * v59);
              if (!v63)
              {
                v64 = v62 + 3;
                if (v64 >= v58)
                  goto LABEL_82;
                v63 = *(_QWORD *)(v55 + 8 * v64);
                if (!v63)
                {
                  while (1)
                  {
                    v59 = v64 + 1;
                    if (__OFADD__(v64, 1))
                      goto LABEL_98;
                    if (v59 >= v58)
                      break;
                    v63 = *(_QWORD *)(v55 + 8 * v59);
                    ++v64;
                    if (v63)
                      goto LABEL_77;
                  }
LABEL_82:
                  swift_release_n(v5, 2);
LABEL_83:
                  *v3 = (uint64_t)v13;
                  v65 = v13[5];
                  v66 = *((_QWORD *)a1 + 3);
                  v67 = *((_QWORD *)a1 + 4);
                  __swift_project_boxed_opaque_existential_0Tm(a1, v66);
                  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v67 + 8))(&v93, v66, v67);
                  v68 = *((_QWORD *)&v94 + 1);
                  v69 = v95;
                  __swift_project_boxed_opaque_existential_0Tm(&v93, *((uint64_t *)&v94 + 1));
                  v70 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v69 + 40))(v65, v68, v69);
                  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t *)&v93);
                  v71 = -1 << *((_BYTE *)v13 + 32);
                  a2 = v70 & ~v71;
                  if (((*(_QWORD *)((char *)v13 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a2) & 1) != 0)
                  {
                    v72 = ~v71;
                    do
                    {
                      outlined init with copy of AnyHashable(v13[6] + 40 * a2, (uint64_t)&v93);
                      v73 = *((_QWORD *)&v94 + 1);
                      v74 = v95;
                      __swift_project_boxed_opaque_existential_0Tm(&v93, *((uint64_t *)&v94 + 1));
                      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v74 + 8))(v90, v73, v74);
                      v75 = v91;
                      v76 = v92;
                      __swift_project_boxed_opaque_existential_0Tm(v90, v91);
                      v77 = *((_QWORD *)a1 + 3);
                      v78 = *((_QWORD *)a1 + 4);
                      __swift_project_boxed_opaque_existential_0Tm(a1, v77);
                      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v78 + 8))(v89, v77, v78);
                      v79 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v76 + 16))(v89, v75, v76);
                      __swift_destroy_boxed_opaque_existential_1Tm(v89);
                      if (v79 == 2)
                      {
                        __swift_destroy_boxed_opaque_existential_1Tm(v90);
                        outlined destroy of AnyHashable((uint64_t *)&v93);
                      }
                      else
                      {
                        __swift_destroy_boxed_opaque_existential_1Tm(v90);
                        outlined destroy of AnyHashable((uint64_t *)&v93);
                        if ((v79 & 1) != 0)
                          ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)((uint64_t)&type metadata for AnyHashable);
                      }
                      a2 = (a2 + 1) & v72;
                    }
                    while (((*(_QWORD *)((char *)v13 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a2) & 1) != 0);
                  }
                  goto LABEL_90;
                }
                v59 = v64;
              }
            }
          }
LABEL_77:
          v57 = (v63 - 1) & v63;
          v61 = __clz(__rbit64(v63)) + (v59 << 6);
        }
        outlined init with copy of AnyHashable(*(_QWORD *)(v5 + 48) + 40 * v61, (uint64_t)&v93);
        specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)&v93, (uint64_t)v13);
      }
    }
LABEL_81:
    swift_release(v5);
    goto LABEL_83;
  }
  if (v7 > v6)
    v8 = *(_QWORD *)(*v3 + 24);
  v9 = specialized static _HashTable.scale(forCapacity:)(v8);
  LOBYTE(v93) = 1;
  v13 = specialized static _SetStorage.allocate(scale:age:seed:)(v9, 0x100000000, 0, 1);
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_81;
  v14 = 1 << *(_BYTE *)(v5 + 32);
  v15 = (_QWORD *)(v5 + 56);
  v16 = -1;
  if (v14 < 64)
    v16 = ~(-1 << v14);
  v17 = v16 & *(_QWORD *)(v5 + 56);
  v18 = (unint64_t)(v14 + 63) >> 6;
  swift_retain((unint64_t *)v5, v10, v11, v12);
  v19 = 0;
  while (1)
  {
    if (v17)
    {
      v20 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v21 = v20 | (v19 << 6);
      goto LABEL_11;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      goto LABEL_93;
    }
    if (v23 >= v18)
    {
LABEL_55:
      swift_release(v5);
      v49 = 1 << *(_BYTE *)(v5 + 32);
      if (v49 > 63)
        specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v49 + 63) >> 6, (int64x2_t *)(v5 + 56));
      else
        *v15 = -1 << v49;
      *(_QWORD *)(v5 + 16) = 0;
      goto LABEL_81;
    }
    v24 = v15[v23];
    ++v19;
    if (!v24)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v18)
        goto LABEL_55;
      v24 = v15[v19];
      if (!v24)
      {
        v19 = v23 + 2;
        if (v23 + 2 >= v18)
          goto LABEL_55;
        v24 = v15[v19];
        if (!v24)
          break;
      }
    }
LABEL_26:
    v17 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v19 << 6);
LABEL_11:
    v22 = *(_QWORD *)(v5 + 48) + 40 * v21;
    v93 = *(_OWORD *)v22;
    v94 = *(_OWORD *)(v22 + 16);
    v95 = *(_QWORD *)(v22 + 32);
    specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)&v93, (uint64_t)v13);
  }
  v25 = v23 + 3;
  if (v25 >= v18)
    goto LABEL_55;
  v24 = v15[v25];
  if (v24)
  {
    v19 = v25;
    goto LABEL_26;
  }
  while (1)
  {
    v19 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v19 >= v18)
      goto LABEL_55;
    v24 = v15[v19];
    ++v25;
    if (v24)
      goto LABEL_26;
  }
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
}

uint64_t _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  void (*v23)(char *, unint64_t, uint64_t);
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v7 = *(_QWORD *)(a4 + 16);
  v32 = *(_QWORD *)(v7 - 8);
  v33 = a1;
  MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(*v4 + 16);
  v12 = *(_QWORD *)(*v4 + 24);
  v30 = v4;
  if (v12 <= v11 || (v8 & 1) == 0)
  {
    v13 = v11 + 1;
    if ((v8 & 1) != 0)
    {
      _NativeSet.resize(capacity:)(v13);
    }
    else
    {
      if (v12 > v11)
      {
        _NativeSet.copy()();
        goto LABEL_12;
      }
      _NativeSet.copyAndResize(capacity:)(v13);
    }
    v14 = *v4;
    v15 = *(_QWORD *)(a4 + 24);
    v16 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v15 + 32))(*(_QWORD *)(*v4 + 40), v7, v15);
    v17 = -1 << *(_BYTE *)(v14 + 32);
    a2 = v16 & ~v17;
    v31 = v14;
    v18 = v14 + 56;
    if (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v19 = ~v17;
      v20 = *(_QWORD *)(v15 + 8);
      v21 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 8);
      v22 = *(_QWORD *)(v32 + 72);
      v23 = *(void (**)(char *, unint64_t, uint64_t))(v32 + 16);
      while (1)
      {
        v23(v10, *(_QWORD *)(v31 + 48) + v22 * a2, v7);
        v24 = v21(v10, v33, v7, v20);
        (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v7);
        if ((v24 & 1) != 0)
          break;
        a2 = (a2 + 1) & v19;
        if (((*(_QWORD *)(v18 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          goto LABEL_12;
      }
LABEL_15:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v7);
    }
  }
LABEL_12:
  v25 = *v30;
  *(_QWORD *)(v25 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v32 + 32))(*(_QWORD *)(v25 + 48) + *(_QWORD *)(v32 + 72) * a2, v33, v7);
  v27 = *(_QWORD *)(v25 + 16);
  v28 = __OFADD__(v27, 1);
  v29 = v27 + 1;
  if (v28)
  {
    __break(1u);
    goto LABEL_15;
  }
  *(_QWORD *)(v25 + 16) = v29;
  return result;
}

double specialized _NativeSet.update(with:isUnique:)@<D0>(__int128 *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  int64_t v40;
  int64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  int64_t v47;
  uint64_t v48;
  _QWORD *v49;
  char v50;
  _QWORD *v51;
  void *v52;
  uint64_t v53;
  unint64_t v54;
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  int64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  int64_t v66;
  unint64_t v67;
  int64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  int64_t v78;
  int64_t v79;
  unint64_t v80;
  unint64_t v81;
  int64_t v82;
  unint64_t v83;
  int64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  BOOL v111;
  uint64_t v112;
  char v114;
  int v115;
  uint64_t *v117;
  uint64_t v119[5];
  uint64_t v120[3];
  uint64_t v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;

  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 40);
  v7 = *((_QWORD *)a1 + 3);
  v8 = *((_QWORD *)a1 + 4);
  __swift_project_boxed_opaque_existential_0Tm(a1, v7);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v8 + 8))(&v123, v7, v8);
  v9 = *((_QWORD *)&v124 + 1);
  v10 = v125;
  __swift_project_boxed_opaque_existential_0Tm(&v123, *((uint64_t *)&v124 + 1));
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 40))(v6, v9, v10);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t *)&v123);
  v12 = -1 << *(_BYTE *)(v5 + 32);
  v13 = v11 & ~v12;
  if (((*(_QWORD *)(v5 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v114 = a2;
    v14 = ~v12;
    do
    {
      outlined init with copy of AnyHashable(*(_QWORD *)(v5 + 48) + 40 * v13, (uint64_t)&v123);
      v15 = *((_QWORD *)&v124 + 1);
      v16 = v125;
      __swift_project_boxed_opaque_existential_0Tm(&v123, *((uint64_t *)&v124 + 1));
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v16 + 8))(v120, v15, v16);
      v17 = v121;
      v18 = v122;
      __swift_project_boxed_opaque_existential_0Tm(v120, v121);
      v19 = *((_QWORD *)a1 + 3);
      v20 = *((_QWORD *)a1 + 4);
      __swift_project_boxed_opaque_existential_0Tm(a1, v19);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v20 + 8))(v119, v19, v20);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v18 + 16))(v119, v17, v18);
      __swift_destroy_boxed_opaque_existential_1Tm(v119);
      if (v21 == 2)
      {
        __swift_destroy_boxed_opaque_existential_1Tm(v120);
        outlined destroy of AnyHashable((uint64_t *)&v123);
      }
      else
      {
        __swift_destroy_boxed_opaque_existential_1Tm(v120);
        outlined destroy of AnyHashable((uint64_t *)&v123);
        if ((v21 & 1) != 0)
        {
          v22 = 1;
          a2 = v114;
          goto LABEL_10;
        }
      }
      v13 = (v13 + 1) & v14;
    }
    while (((*(_QWORD *)(v5 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
    v22 = 0;
    a2 = v114;
  }
  else
  {
    v22 = 0;
  }
LABEL_10:
  v23 = *v117;
  v24 = *(_QWORD *)(*v117 + 16);
  v25 = v22 ^ 1u;
  v26 = v24 + v25;
  if (__OFADD__(v24, v25))
    goto LABEL_108;
  v27 = *(_QWORD *)(v23 + 24);
  if (v27 >= v26 && (a2 & 1) != 0)
  {
    v28 = (_QWORD *)*v117;
    if ((v22 & 1) != 0)
      goto LABEL_100;
    goto LABEL_14;
  }
  v115 = v22;
  if ((a2 & 1) != 0)
  {
    if (v27 > v26)
      v26 = *(_QWORD *)(v23 + 24);
    v31 = specialized static _HashTable.scale(forCapacity:)(v26);
    LOBYTE(v123) = 1;
    v35 = specialized static _SetStorage.allocate(scale:age:seed:)(v31, 0x100000000, 0, 1);
    if (*(_QWORD *)(v23 + 16))
    {
      v36 = 1 << *(_BYTE *)(v23 + 32);
      v37 = (_QWORD *)(v23 + 56);
      v38 = -1;
      if (v36 < 64)
        v38 = ~(-1 << v36);
      v39 = v38 & *(_QWORD *)(v23 + 56);
      v40 = (unint64_t)(v36 + 63) >> 6;
      swift_retain((unint64_t *)v23, v32, v33, v34);
      v41 = 0;
      while (1)
      {
        if (v39)
        {
          v42 = __clz(__rbit64(v39));
          v39 &= v39 - 1;
          v43 = v42 | (v41 << 6);
        }
        else
        {
          v45 = v41 + 1;
          if (__OFADD__(v41, 1))
          {
            __break(1u);
LABEL_106:
            __break(1u);
LABEL_107:
            __break(1u);
LABEL_108:
            __break(1u);
            goto LABEL_109;
          }
          if (v45 >= v40)
            goto LABEL_64;
          v46 = v37[v45];
          ++v41;
          if (!v46)
          {
            v41 = v45 + 1;
            if (v45 + 1 >= v40)
              goto LABEL_64;
            v46 = v37[v41];
            if (!v46)
            {
              v41 = v45 + 2;
              if (v45 + 2 >= v40)
                goto LABEL_64;
              v46 = v37[v41];
              if (!v46)
              {
                v47 = v45 + 3;
                if (v47 >= v40)
                {
LABEL_64:
                  swift_release(v23);
                  v69 = 1 << *(_BYTE *)(v23 + 32);
                  if (v69 > 63)
                    specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v69 + 63) >> 6, (int64x2_t *)(v23 + 56));
                  else
                    *v37 = -1 << v69;
                  *(_QWORD *)(v23 + 16) = 0;
                  break;
                }
                v46 = v37[v47];
                if (!v46)
                {
                  while (1)
                  {
                    v41 = v47 + 1;
                    if (__OFADD__(v47, 1))
                      break;
                    if (v41 >= v40)
                      goto LABEL_64;
                    v46 = v37[v41];
                    ++v47;
                    if (v46)
                      goto LABEL_38;
                  }
LABEL_109:
                  __break(1u);
LABEL_110:
                  __break(1u);
LABEL_111:
                  __break(1u);
LABEL_112:
                  __break(1u);
                  goto LABEL_113;
                }
                v41 = v47;
              }
            }
          }
LABEL_38:
          v39 = (v46 - 1) & v46;
          v43 = __clz(__rbit64(v46)) + (v41 << 6);
        }
        v44 = *(_QWORD *)(v23 + 48) + 40 * v43;
        v123 = *(_OWORD *)v44;
        v124 = *(_OWORD *)(v44 + 16);
        v125 = *(_QWORD *)(v44 + 32);
        specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)&v123, (uint64_t)v35);
      }
    }
LABEL_92:
    swift_release(v23);
    *v117 = (uint64_t)v35;
    v85 = v35[5];
    v86 = *((_QWORD *)a1 + 3);
    v87 = *((_QWORD *)a1 + 4);
    __swift_project_boxed_opaque_existential_0Tm(a1, v86);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v87 + 8))(&v123, v86, v87);
    v88 = *((_QWORD *)&v124 + 1);
    v89 = v125;
    __swift_project_boxed_opaque_existential_0Tm(&v123, *((uint64_t *)&v124 + 1));
    v90 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v89 + 40))(v85, v88, v89);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t *)&v123);
    v91 = -1 << *((_BYTE *)v35 + 32);
    v13 = v90 & ~v91;
    v92 = v35 + 7;
    v29 = v13 >> 6;
    v30 = 1 << v13;
    if (((1 << v13) & v35[(v13 >> 6) + 7]) != 0)
    {
      v93 = ~v91;
      do
      {
        v94 = v35;
        outlined init with copy of AnyHashable(v35[6] + 40 * v13, (uint64_t)&v123);
        v95 = *((_QWORD *)&v124 + 1);
        v96 = v125;
        __swift_project_boxed_opaque_existential_0Tm(&v123, *((uint64_t *)&v124 + 1));
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v96 + 8))(v120, v95, v96);
        v97 = v121;
        v98 = v122;
        __swift_project_boxed_opaque_existential_0Tm(v120, v121);
        v99 = *((_QWORD *)a1 + 3);
        v100 = *((_QWORD *)a1 + 4);
        __swift_project_boxed_opaque_existential_0Tm(a1, v99);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v100 + 8))(v119, v99, v100);
        v101 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v98 + 16))(v119, v97, v98);
        __swift_destroy_boxed_opaque_existential_1Tm(v119);
        if (v101 == 2)
        {
          __swift_destroy_boxed_opaque_existential_1Tm(v120);
          outlined destroy of AnyHashable((uint64_t *)&v123);
        }
        else
        {
          __swift_destroy_boxed_opaque_existential_1Tm(v120);
          outlined destroy of AnyHashable((uint64_t *)&v123);
          if ((v101 & 1) != 0)
          {
            if (v115)
            {
              v28 = (_QWORD *)*v117;
              goto LABEL_100;
            }
LABEL_113:
            ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)((uint64_t)&type metadata for AnyHashable);
          }
        }
        v13 = (v13 + 1) & v93;
        v29 = v13 >> 6;
        v30 = 1 << v13;
        v35 = v94;
      }
      while ((v92[v13 >> 6] & (1 << v13)) != 0);
    }
    if ((v115 & 1) != 0)
      goto LABEL_113;
    goto LABEL_102;
  }
  if (v27 < v26)
  {
    v70 = specialized static _HashTable.scale(forCapacity:)(v26);
    LOBYTE(v123) = 1;
    v35 = specialized static _SetStorage.allocate(scale:age:seed:)(v70, 0x100000000, 0, 1);
    if (!*(_QWORD *)(v23 + 16))
      goto LABEL_92;
    v74 = 1 << *(_BYTE *)(v23 + 32);
    v75 = v23 + 56;
    v76 = -1;
    if (v74 < 64)
      v76 = ~(-1 << v74);
    v77 = v76 & *(_QWORD *)(v23 + 56);
    v78 = (unint64_t)(v74 + 63) >> 6;
    swift_retain((unint64_t *)v23, v71, v72, v73);
    v79 = 0;
    while (1)
    {
      if (v77)
      {
        v80 = __clz(__rbit64(v77));
        v77 &= v77 - 1;
        v81 = v80 | (v79 << 6);
      }
      else
      {
        v82 = v79 + 1;
        if (__OFADD__(v79, 1))
          goto LABEL_107;
        if (v82 >= v78)
          goto LABEL_91;
        v83 = *(_QWORD *)(v75 + 8 * v82);
        ++v79;
        if (!v83)
        {
          v79 = v82 + 1;
          if (v82 + 1 >= v78)
            goto LABEL_91;
          v83 = *(_QWORD *)(v75 + 8 * v79);
          if (!v83)
          {
            v79 = v82 + 2;
            if (v82 + 2 >= v78)
              goto LABEL_91;
            v83 = *(_QWORD *)(v75 + 8 * v79);
            if (!v83)
            {
              v84 = v82 + 3;
              if (v84 >= v78)
                goto LABEL_91;
              v83 = *(_QWORD *)(v75 + 8 * v84);
              if (!v83)
              {
                while (1)
                {
                  v79 = v84 + 1;
                  if (__OFADD__(v84, 1))
                    goto LABEL_112;
                  if (v79 >= v78)
                    break;
                  v83 = *(_QWORD *)(v75 + 8 * v79);
                  ++v84;
                  if (v83)
                    goto LABEL_86;
                }
LABEL_91:
                swift_release(v23);
                goto LABEL_92;
              }
              v79 = v84;
            }
          }
        }
LABEL_86:
        v77 = (v83 - 1) & v83;
        v81 = __clz(__rbit64(v83)) + (v79 << 6);
      }
      outlined init with copy of AnyHashable(*(_QWORD *)(v23 + 48) + 40 * v81, (uint64_t)&v123);
      specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)&v123, (uint64_t)v35);
    }
  }
  v48 = *(unsigned int *)(v23 + 36);
  v49 = *(_QWORD **)(v23 + 40);
  v50 = *(_BYTE *)(v23 + 32);
  LOBYTE(v123) = 0;
  v51 = specialized static _SetStorage.allocate(scale:age:seed:)(v50, v48, v49, 0);
  v28 = v51;
  if (!*(_QWORD *)(v23 + 16))
    goto LABEL_87;
  v52 = v51 + 7;
  v53 = v23 + 56;
  v54 = (unint64_t)((1 << *((_BYTE *)v28 + 32)) + 63) >> 6;
  if (v28 != (_QWORD *)v23 || (unint64_t)v52 >= v53 + 8 * v54)
    memmove(v52, (const void *)(v23 + 56), 8 * v54);
  v55 = 0;
  v28[2] = *(_QWORD *)(v23 + 16);
  v56 = 1 << *(_BYTE *)(v23 + 32);
  v57 = -1;
  if (v56 < 64)
    v57 = ~(-1 << v56);
  v58 = v57 & *(_QWORD *)(v23 + 56);
  v59 = (unint64_t)(v56 + 63) >> 6;
  while (1)
  {
    if (v58)
    {
      v60 = __clz(__rbit64(v58));
      v58 &= v58 - 1;
      v61 = v60 | (v55 << 6);
      goto LABEL_48;
    }
    v66 = v55 + 1;
    if (__OFADD__(v55, 1))
      goto LABEL_106;
    if (v66 >= v59)
      goto LABEL_87;
    v67 = *(_QWORD *)(v53 + 8 * v66);
    ++v55;
    if (!v67)
    {
      v55 = v66 + 1;
      if (v66 + 1 >= v59)
        goto LABEL_87;
      v67 = *(_QWORD *)(v53 + 8 * v55);
      if (!v67)
      {
        v55 = v66 + 2;
        if (v66 + 2 >= v59)
          goto LABEL_87;
        v67 = *(_QWORD *)(v53 + 8 * v55);
        if (!v67)
          break;
      }
    }
LABEL_63:
    v58 = (v67 - 1) & v67;
    v61 = __clz(__rbit64(v67)) + (v55 << 6);
LABEL_48:
    v62 = 40 * v61;
    outlined init with copy of AnyHashable(*(_QWORD *)(v23 + 48) + 40 * v61, (uint64_t)&v123);
    v63 = v28[6] + v62;
    v64 = v123;
    v65 = v124;
    *(_QWORD *)(v63 + 32) = v125;
    *(_OWORD *)v63 = v64;
    *(_OWORD *)(v63 + 16) = v65;
  }
  v68 = v66 + 3;
  if (v68 >= v59)
    goto LABEL_87;
  v67 = *(_QWORD *)(v53 + 8 * v68);
  if (v67)
  {
    v55 = v68;
    goto LABEL_63;
  }
  while (1)
  {
    v55 = v68 + 1;
    if (__OFADD__(v68, 1))
      goto LABEL_111;
    if (v55 >= v59)
      break;
    v67 = *(_QWORD *)(v53 + 8 * v55);
    ++v68;
    if (v67)
      goto LABEL_63;
  }
LABEL_87:
  swift_release(v23);
  *v117 = (uint64_t)v28;
  if ((v115 & 1) != 0)
  {
LABEL_100:
    v102 = v28[6] + 40 * v13;
    v103 = *(_OWORD *)(v102 + 16);
    *(_OWORD *)a3 = *(_OWORD *)v102;
    *(_OWORD *)(a3 + 16) = v103;
    *(_QWORD *)(a3 + 32) = *(_QWORD *)(v102 + 32);
    v104 = *((_QWORD *)a1 + 4);
    v105 = a1[1];
    *(_OWORD *)v102 = *a1;
    *(_OWORD *)(v102 + 16) = v105;
    *(_QWORD *)(v102 + 32) = v104;
    return *(double *)&v105;
  }
LABEL_14:
  v29 = v13 >> 6;
  v30 = 1 << v13;
LABEL_102:
  v106 = *v117;
  *(_QWORD *)(*v117 + 8 * v29 + 56) |= v30;
  v107 = *(_QWORD *)(v106 + 48) + 40 * v13;
  v108 = *a1;
  v109 = a1[1];
  *(_QWORD *)(v107 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)v107 = v108;
  *(_OWORD *)(v107 + 16) = v109;
  v110 = *(_QWORD *)(v106 + 16);
  v111 = __OFADD__(v110, 1);
  v112 = v110 + 1;
  if (v111)
    goto LABEL_110;
  *(_QWORD *)(v106 + 16) = v112;
  *(_QWORD *)&v105 = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_QWORD *)(a3 + 32) = 0;
  return *(double *)&v105;
}

uint64_t _NativeSet.update(with:isUnique:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  void (*v23)(char *, unint64_t, uint64_t);
  char v24;
  uint64_t *v25;
  uint64_t v26;
  _BOOL8 v27;
  Swift::Int v28;
  Swift::Int v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  void (*v40)(char *, unint64_t, uint64_t);
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void (*v51)(uint64_t, unint64_t, uint64_t);
  _QWORD v53[2];
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  LODWORD(v57) = a2;
  v55 = a4;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = v4;
  v9 = *v4;
  v10 = *(_QWORD *)(*v4 + 40);
  v53[1] = v11;
  v12 = *(_QWORD *)(v11 + 24);
  v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 32);
  v60 = v14;
  v53[0] = v13;
  v15 = v13(v10, v5, v12);
  v16 = -1 << *(_BYTE *)(v9 + 32);
  v17 = v15 & ~v16;
  v59 = v9;
  v18 = v9 + 56;
  v19 = *(_QWORD *)(v9 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17;
  v61 = v6;
  v54 = v12;
  if ((v19 & 1) != 0)
  {
    v58 = ~v16;
    v20 = *(_QWORD *)(v12 + 8);
    v21 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 8);
    v22 = *(_QWORD *)(v6 + 72);
    v23 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v23(v8, *(_QWORD *)(v59 + 48) + v22 * v17, v5);
      v24 = v21(v8, v60, v5, v20);
      (*(void (**)(char *, uint64_t))(v61 + 8))(v8, v5);
      if ((v24 & 1) != 0)
        break;
      v17 = (v17 + 1) & v58;
    }
    while (((*(_QWORD *)(v18 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) != 0);
  }
  else
  {
    v24 = 0;
  }
  v25 = v56;
  v26 = *(_QWORD *)(*v56 + 16);
  v27 = (v24 & 1) == 0;
  v28 = v26 + v27;
  if (__OFADD__(v26, v27))
  {
    __break(1u);
    goto LABEL_30;
  }
  v29 = *(_QWORD *)(*v56 + 24);
  if (v29 >= v28 && (v57 & 1) != 0)
  {
    if ((v24 & 1) != 0)
    {
LABEL_11:
      v30 = *(_QWORD *)(v61 + 72) * v17;
LABEL_27:
      v49 = *v25;
      v50 = *(_QWORD *)(*v25 + 48) + v30;
      v43 = v61;
      v51 = *(void (**)(uint64_t, unint64_t, uint64_t))(v61 + 32);
      v48 = v55;
      v51(v55, v50, v5);
      v51(*(_QWORD *)(v49 + 48) + v30, v60, v5);
      v47 = 0;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56))(v48, v47, 1, v5);
    }
LABEL_16:
    v32 = v17 >> 6;
    v33 = 1 << v17;
    goto LABEL_24;
  }
  if ((v57 & 1) != 0)
  {
    _NativeSet.resize(capacity:)(v28);
    v31 = v54;
  }
  else
  {
    v31 = v54;
    if (v29 >= v28)
    {
      _NativeSet.copy()();
      if ((v24 & 1) != 0)
        goto LABEL_11;
      goto LABEL_16;
    }
    _NativeSet.copyAndResize(capacity:)(v28);
  }
  v34 = *v25;
  v35 = ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v53[0])(*(_QWORD *)(*v25 + 40), v5, v31);
  v36 = -1 << *(_BYTE *)(v34 + 32);
  v17 = v35 & ~v36;
  v32 = v17 >> 6;
  v58 = v34 + 56;
  v59 = v34;
  v33 = 1 << v17;
  if (((1 << v17) & *(_QWORD *)(v34 + 56 + 8 * (v17 >> 6))) == 0)
    goto LABEL_23;
  v57 = ~v36;
  v37 = *(_QWORD *)(v31 + 8);
  v38 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v37 + 8);
  v39 = *(_QWORD *)(v61 + 72);
  v40 = *(void (**)(char *, unint64_t, uint64_t))(v61 + 16);
  do
  {
    v30 = v39 * v17;
    v40(v8, *(_QWORD *)(v59 + 48) + v39 * v17, v5);
    v41 = v38(v8, v60, v5, v37);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v8, v5);
    if ((v41 & 1) != 0)
    {
      v25 = v56;
      if ((v24 & 1) != 0)
        goto LABEL_27;
LABEL_31:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v5);
    }
    v17 = (v17 + 1) & v57;
    v32 = v17 >> 6;
    v33 = 1 << v17;
  }
  while ((*(_QWORD *)(v58 + 8 * (v17 >> 6)) & (1 << v17)) != 0);
  v25 = v56;
LABEL_23:
  if ((v24 & 1) != 0)
    goto LABEL_31;
LABEL_24:
  v42 = *v25;
  *(_QWORD *)(*v25 + 8 * v32 + 56) |= v33;
  v43 = v61;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v61 + 32))(*(_QWORD *)(v42 + 48) + *(_QWORD *)(v61 + 72) * v17, v60, v5);
  v44 = *(_QWORD *)(v42 + 16);
  v45 = __OFADD__(v44, 1);
  v46 = v44 + 1;
  if (v45)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  *(_QWORD *)(v42 + 16) = v46;
  v47 = 1;
  v48 = v55;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56))(v48, v47, 1, v5);
}

uint64_t _NativeSet._unsafeUpdate(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  void (*v21)(char *, unint64_t, uint64_t);
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = v2;
  v7 = *v2;
  v8 = *(_QWORD *)(*v2 + 40);
  v10 = *(_QWORD *)(v9 + 24);
  v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 32);
  v33 = v12;
  v13 = v11(v8, v3, v10);
  v14 = -1 << *(_BYTE *)(v7 + 32);
  v15 = v13 & ~v14;
  v30 = v7 + 56;
  v31 = v7;
  v16 = *(_QWORD *)(v7 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15;
  v32 = v4;
  if ((v16 & 1) != 0)
  {
    v17 = ~v14;
    v18 = *(_QWORD *)(v10 + 8);
    v19 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 8);
    v20 = *(_QWORD *)(v4 + 72);
    v21 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    while (1)
    {
      v21(v6, *(_QWORD *)(v31 + 48) + v20 * v15, v3);
      v22 = v19(v6, v33, v3, v18);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v6, v3);
      if ((v22 & 1) != 0)
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v32 + 40))(*(_QWORD *)(*v29 + 48) + v20 * v15, v33, v3);
      v15 = (v15 + 1) & v17;
      if (((*(_QWORD *)(v30 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v23 = *v29;
    if (*(_QWORD *)(*v29 + 16) >= *(_QWORD *)(*v29 + 24))
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/NativeSet.swift", 21, 2, 0x1DFuLL, 0);
    *(_QWORD *)(v23 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) |= 1 << v15;
    result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v32 + 32))(*(_QWORD *)(v23 + 48) + *(_QWORD *)(v32 + 72) * v15, v33, v3);
    v25 = *(_QWORD *)(v23 + 16);
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
      __break(1u);
    else
      *(_QWORD *)(v23 + 16) = v27;
  }
  return result;
}

uint64_t _NativeSet.isEqual(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t i;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, unint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(char *, char *, uint64_t, uint64_t);
  char v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;

  v7 = a1;
  v49 = *(_QWORD *)(a3 - 8);
  v8 = MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8);
  v50 = (char *)&v39 - v12;
  result = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v39 - v14;
  if (v16 == result)
    return 1;
  if (*(_QWORD *)(a2 + 16) != *(_QWORD *)(v7 + 16))
    return 0;
  v17 = 0;
  v18 = *(_QWORD *)(a2 + 56);
  v40 = a2 + 56;
  v19 = 1 << *(_BYTE *)(a2 + 32);
  if (v19 < 64)
    v20 = ~(-1 << v19);
  else
    v20 = -1;
  v21 = v20 & v18;
  v22 = (unint64_t)(v19 + 63) >> 6;
  v48 = v7 + 56;
  v41 = v22;
  v42 = (char *)&v39 - v14;
  v43 = a2;
  v44 = a4;
  if (!v21)
    goto LABEL_9;
LABEL_7:
  v46 = (v21 - 1) & v21;
  for (i = __clz(__rbit64(v21)) | (v17 << 6); ; i = __clz(__rbit64(v25)) + (v17 << 6))
  {
    v27 = *(_QWORD *)(a2 + 48);
    v28 = v49;
    v47 = *(_QWORD *)(v49 + 72);
    v29 = *(void (**)(char *, unint64_t, uint64_t))(v49 + 16);
    v29(v15, v27 + v47 * i, a3);
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v50, v15, a3);
    v30 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(a4 + 32))(*(_QWORD *)(v7 + 40), a3, a4);
    v31 = -1 << *(_BYTE *)(v7 + 32);
    v32 = v30 & ~v31;
    if (((*(_QWORD *)(v48 + ((v32 >> 3) & 0xFFFFFFFFFFFFF8)) >> v32) & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v49 + 8))(v50, a3);
      return 0;
    }
    v45 = v17;
    v33 = v7;
    v34 = ~v31;
    v35 = *(_QWORD *)(a4 + 8);
    v36 = *(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v35 + 8);
    while (1)
    {
      v29(v10, *(_QWORD *)(v33 + 48) + v32 * v47, a3);
      v37 = v36(v10, v50, a3, v35);
      v38 = *(void (**)(char *, uint64_t))(v49 + 8);
      v38(v10, a3);
      if ((v37 & 1) != 0)
        break;
      v32 = (v32 + 1) & v34;
      if (((*(_QWORD *)(v48 + ((v32 >> 3) & 0xFFFFFFFFFFFFF8)) >> v32) & 1) == 0)
      {
        v38(v50, a3);
        return 0;
      }
    }
    result = ((uint64_t (*)(char *, uint64_t))v38)(v50, a3);
    a2 = v43;
    a4 = v44;
    v7 = v33;
    v22 = v41;
    v15 = v42;
    v17 = v45;
    v21 = v46;
    if (v46)
      goto LABEL_7;
LABEL_9:
    if (__OFADD__(v17++, 1))
      break;
    if (v17 >= v22)
      return 1;
    v25 = *(_QWORD *)(v40 + 8 * v17);
    if (!v25)
    {
      v26 = v17 + 1;
      if (v17 + 1 >= v22)
        return 1;
      v25 = *(_QWORD *)(v40 + 8 * v26);
      if (!v25)
      {
        while (1)
        {
          v17 = v26 + 1;
          if (__OFADD__(v26, 1))
            break;
          if (v17 >= v22)
            return 1;
          v25 = *(_QWORD *)(v40 + 8 * v17);
          ++v26;
          if (v25)
            goto LABEL_18;
        }
        __break(1u);
        break;
      }
      ++v17;
    }
LABEL_18:
    v46 = (v25 - 1) & v25;
  }
  __break(1u);
  return result;
}

uint64_t _NativeSet.makeIterator()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v2 = -1;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  *a2 = a1;
  v6 = *(_QWORD *)(a1 + 56);
  result = a1 + 56;
  v5 = v6;
  if (-v3 < 64)
    v2 = ~(-1 << -(char)v3);
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0;
  a2[4] = v2 & v5;
  return result;
}

uint64_t _NativeSet.Iterator.next()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v4 = v2[4];
  if (v4)
  {
    v2[4] = (v4 - 1) & v4;
    v5 = __clz(__rbit64(v4)) | (v2[3] << 6);
LABEL_3:
    v6 = *(_QWORD *)(*v2 + 48);
    v7 = *(_QWORD *)(result + 16);
    v8 = *(_QWORD *)(v7 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v8 + 16))(a2, v6 + *(_QWORD *)(v8 + 72) * v5, v7);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
    v10 = a2;
    v11 = 0;
    v12 = v7;
    return v9(v10, v11, 1, v12);
  }
  v13 = v2[3];
  v14 = v13 + 1;
  if (!__OFADD__(v13, 1))
  {
    v15 = (unint64_t)(v2[2] + 64) >> 6;
    if (v14 < v15)
    {
      v2[3] = v14;
      v16 = v2[1];
      v17 = *(_QWORD *)(v16 + 8 * v14);
      v2[4] = v17;
      if (v17)
      {
LABEL_11:
        v2[4] = (v17 - 1) & v17;
        v5 = __clz(__rbit64(v17)) + (v14 << 6);
        goto LABEL_3;
      }
      v18 = v13 + 2;
      while (v15 != v18)
      {
        v2[3] = v18;
        v17 = *(_QWORD *)(v16 + 8 * v18);
        v2[4] = v17;
        ++v18;
        if (v17)
        {
          v14 = v18 - 1;
          goto LABEL_11;
        }
      }
    }
    v12 = *(_QWORD *)(result + 16);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
    v10 = a2;
    v11 = 1;
    return v9(v10, v11, 1, v12);
  }
  __break(1u);
  return result;
}

void _NativeSet.isEqual(to:)(void *a1, uint64_t a2, uint64_t *a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id *v11;
  uint64_t v12;
  id v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  unint64_t i;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  void *v27;
  void *v28;
  id v29;
  id *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  id *v34;
  uint64_t v35;
  uint64_t v36;

  v5 = a1;
  v6 = *(a3 - 1);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = MEMORY[0x1E0C80A78](a1);
  v9 = (void *)MEMORY[0x1E0C80A78](v8);
  v11 = (id *)((char *)&v33 - v10);
  v13 = *(id *)(v12 + 16);
  if (v13 == objc_msgSend(v9, sel_count))
  {
    v34 = (id *)((char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
    v35 = v7;
    v14 = 0;
    v15 = a2 + 56;
    v16 = 1 << *(_BYTE *)(a2 + 32);
    v17 = -1;
    if (v16 < 64)
      v17 = ~(-1 << v16);
    v18 = v17 & *(_QWORD *)(a2 + 56);
    v19 = (unint64_t)(v16 + 63) >> 6;
    v36 = a2;
    if (!v18)
      goto LABEL_6;
LABEL_5:
    v20 = __clz(__rbit64(v18));
    v18 &= v18 - 1;
    for (i = v20 | (v14 << 6); ; i = __clz(__rbit64(v23)) + (v14 << 6))
    {
      (*(void (**)(id *, unint64_t, uint64_t *))(v6 + 16))(v11, *(_QWORD *)(a2 + 48) + *(_QWORD *)(v6 + 72) * i, a3);
      if (_swift_isClassOrObjCExistentialType((uint64_t)a3, a3))
      {
        if (v7 != 8)
          goto LABEL_23;
        v27 = *v11;
        swift_unknownObjectRetain(*v11, v24, v25, v26);
        (*(void (**)(id *, uint64_t *))(v6 + 8))(v11, a3);
      }
      else
      {
        v30 = v34;
        (*(void (**)(id *, id *, uint64_t *))(v6 + 32))(v34, v11, a3);
        v27 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v30, a3, v31, v32);
      }
      v28 = v5;
      v29 = objc_msgSend(v5, sel_member_, v27);
      swift_unknownObjectRelease(v27);
      if (!v29)
        break;
      swift_unknownObjectRelease(v29);
      v5 = v28;
      v7 = v35;
      a2 = v36;
      if (v18)
        goto LABEL_5;
LABEL_6:
      v22 = v14 + 1;
      if (__OFADD__(v14, 1))
      {
        __break(1u);
        return;
      }
      if (v22 >= v19)
        return;
      v23 = *(_QWORD *)(v15 + 8 * v22);
      ++v14;
      if (!v23)
      {
        while (1)
        {
          v14 = v22 + 1;
          if (__OFADD__(v22, 1))
            break;
          if (v14 >= v19)
            return;
          v23 = *(_QWORD *)(v15 + 8 * v14);
          ++v22;
          if (v23)
            goto LABEL_12;
        }
        __break(1u);
LABEL_23:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
      }
LABEL_12:
      v18 = (v23 - 1) & v23;
    }
  }
}

BOOL __CocoaSet.contains(_:)(uint64_t a1, void *a2)
{
  return __CocoaDictionary.contains(_:)(a1, a2, (SEL *)&selRef_member_);
}

BOOL __CocoaDictionary.contains(_:)(uint64_t a1, id a2, SEL *a3)
{
  id v3;
  id v4;

  v3 = objc_msgSend(a2, *a3, a1);
  v4 = v3;
  if (v3)
    swift_unknownObjectRelease(v3);
  return v4 != 0;
}

Swift::Int __swiftcall _NativeSet.hashValue(at:)(Swift::_HashTable::Bucket at)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  Swift::Int v12;
  uint64_t v14;

  v4 = v3;
  v5 = v2;
  v6 = v1;
  v7 = *(_QWORD *)(v2 - 8);
  v8 = MEMORY[0x1E0C80A78](at.offset);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v10, *(_QWORD *)(v11 + 48) + *(_QWORD *)(v7 + 72) * v8);
  v12 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v4 + 32))(*(_QWORD *)(v6 + 40), v5, v4);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v5);
  return v12;
}

Swift::Void __swiftcall _NativeSet.moveEntry(from:to:)(Swift::_HashTable::Bucket from, Swift::_HashTable::Bucket to)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  char *v8;
  Swift::Int v9;
  char *v10;
  unint64_t v11;

  v5 = *(_QWORD *)(v2 + 48);
  v6 = *(_QWORD *)(*(_QWORD *)(v3 - 8) + 72);
  v7 = v6 * to.offset;
  v8 = (char *)(v5 + v6 * to.offset);
  v9 = v6 * from.offset;
  v10 = (char *)(v5 + v9);
  v11 = v5 + v9 + v6;
  if (v7 < v9 || (unint64_t)v8 >= v11)
  {
    swift_arrayInitWithTakeFrontToBack(v8, v10, 1, v3);
  }
  else if (v7 != v9)
  {
    swift_arrayInitWithTakeBackToFront(v8, v10, 1, v3);
  }
}

uint64_t protocol witness for _HashTableDelegate.hashValue(at:) in conformance _NativeSet<A>(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, *(_QWORD *)(v9 + 48) + *(_QWORD *)(v5 + 72) * v6, v4);
  v10 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(a2 + 24) + 32))(*(_QWORD *)(v9 + 40), v4);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return v10;
}

char *protocol witness for _HashTableDelegate.moveEntry(from:to:) in conformance _NativeSet<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *result;
  uint64_t v10;
  char *v11;
  unint64_t v12;

  v5 = *(_QWORD *)(*(_QWORD *)v3 + 48);
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 72);
  v8 = v7 * a2;
  result = (char *)(v5 + v7 * a2);
  v10 = v7 * a1;
  v11 = (char *)(v5 + v10);
  v12 = v5 + v10 + v7;
  if (v8 < v10 || (unint64_t)result >= v12)
    return swift_arrayInitWithTakeFrontToBack(result, v11, 1, v6);
  if (v8 != v10)
    return swift_arrayInitWithTakeBackToFront(result, v11, 1, v6);
  return result;
}

unint64_t specialized _NativeSet._delete(at:)(unint64_t result, uint64_t a2, uint64_t a3, char *a4)
{
  unint64_t **v4;
  Swift::_HashTable::Bucket v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  Swift::_HashTable::Bucket v11;
  Swift::_HashTable::Bucket v12;
  Swift::_HashTable::Bucket v13;
  Swift::_HashTable::Bucket v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  unint64_t v27[5];
  __int128 v28;
  __int128 v29;

  v5.offset = result;
  v6 = (uint64_t)*v4;
  v7 = (uint64_t)(*v4 + 7);
  v8 = -1 << *((_BYTE *)*v4 + 32);
  v9 = (result + 1) & ~v8;
  if (((1 << v9) & *(_QWORD *)(v7 + 8 * (v9 >> 6))) != 0)
  {
    v10 = ~v8;
    swift_retain(*v4, a2, a3, a4);
    v11.offset = _HashTable.previousHole(before:)(v5).offset;
    if ((*(_QWORD *)(v7 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      v15 = (v11.offset + 1) & v10;
      do
      {
        v16 = (unint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v9);
        v17 = *v16;
        v18 = v16[1];
        v19 = _swift_stdlib_Hashing_parameters ^ *(_QWORD *)(v6 + 40);
        v27[0] = 0;
        v27[1] = v19 ^ 0x736F6D6570736575;
        v27[2] = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
        v27[3] = v19 ^ 0x6C7967656E657261;
        v27[4] = unk_1ECD25520 ^ 0x7465646279746573;
        v28 = 0u;
        v29 = 0u;
        swift_bridgeObjectRetain(v18, v12.offset, v13.offset, (char *)v14.offset);
        String.hash(into:)(v27, v17, v18);
        swift_bridgeObjectRelease(v18);
        v20 = Hasher._finalize()() & v10;
        if (v5.offset >= (uint64_t)v15)
        {
          if (v20 < v15)
            goto LABEL_5;
        }
        else if (v20 >= v15)
        {
          goto LABEL_11;
        }
        if (v5.offset >= (uint64_t)v20)
        {
LABEL_11:
          v21 = *(_QWORD *)(v6 + 48);
          v22 = (_OWORD *)(v21 + 16 * v5.offset);
          v23 = (_OWORD *)(v21 + 16 * v9);
          if (v5.offset != v9 || (v5.offset = v9, v22 >= v23 + 1))
          {
            *v22 = *v23;
            v5.offset = v9;
          }
        }
LABEL_5:
        v9 = (v9 + 1) & v10;
      }
      while (((*(_QWORD *)(v7 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
    *(_QWORD *)(v7 + (((unint64_t)v5.offset >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << SLOBYTE(v5.offset)) - 1;
    result = swift_release(v6);
  }
  else
  {
    *(_QWORD *)(v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v24 = *(_QWORD *)(v6 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v6 + 16) = v26;
    ++*(_DWORD *)(v6 + 36);
  }
  return result;
}

{
  unint64_t **v4;
  Swift::_HashTable::Bucket v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  Swift::_HashTable::Bucket v11;
  Swift::_HashTable::Bucket v12;
  Swift::_HashTable::Bucket v13;
  Swift::_HashTable::Bucket v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  unint64_t v27[5];
  __int128 v28;
  __int128 v29;

  v5.offset = result;
  v6 = (uint64_t)*v4;
  v7 = (uint64_t)(*v4 + 7);
  v8 = -1 << *((_BYTE *)*v4 + 32);
  v9 = (result + 1) & ~v8;
  if (((1 << v9) & *(_QWORD *)(v7 + 8 * (v9 >> 6))) != 0)
  {
    v10 = ~v8;
    swift_retain(*v4, a2, a3, a4);
    v11.offset = _HashTable.previousHole(before:)(v5).offset;
    if ((*(_QWORD *)(v7 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      v15 = (v11.offset + 1) & v10;
      do
      {
        v16 = (unint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v9);
        v17 = *v16;
        v18 = v16[1];
        v19 = _swift_stdlib_Hashing_parameters ^ *(_QWORD *)(v6 + 40);
        v27[0] = 0;
        v27[1] = v19 ^ 0x736F6D6570736575;
        v27[2] = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
        v27[3] = v19 ^ 0x6C7967656E657261;
        v27[4] = unk_1ECD25520 ^ 0x7465646279746573;
        v28 = 0u;
        v29 = 0u;
        swift_bridgeObjectRetain(v18, v12.offset, v13.offset, (char *)v14.offset);
        String.hash(into:)(v27, v17, v18);
        swift_bridgeObjectRelease(v18);
        v20 = Hasher._finalize()() & v10;
        if (v5.offset >= (uint64_t)v15)
        {
          if (v20 < v15)
            goto LABEL_5;
        }
        else if (v20 >= v15)
        {
          goto LABEL_11;
        }
        if (v5.offset >= (uint64_t)v20)
        {
LABEL_11:
          v21 = *(_QWORD *)(v6 + 48);
          v22 = (_OWORD *)(v21 + 16 * v5.offset);
          v23 = (_OWORD *)(v21 + 16 * v9);
          if (v5.offset != v9 || (v5.offset = v9, v22 >= v23 + 1))
          {
            *v22 = *v23;
            v5.offset = v9;
          }
        }
LABEL_5:
        v9 = (v9 + 1) & v10;
      }
      while (((*(_QWORD *)(v7 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
    *(_QWORD *)(v7 + (((unint64_t)v5.offset >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << SLOBYTE(v5.offset)) - 1;
    result = swift_release(v6);
  }
  else
  {
    *(_QWORD *)(v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v24 = *(_QWORD *)(v6 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v6 + 16) = v26;
    ++*(_DWORD *)(v6 + 36);
  }
  return result;
}

{
  unint64_t **v4;
  Swift::_HashTable::Bucket v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  Swift::_HashTable::Bucket v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  BOOL v30;
  unint64_t v31;
  unint64_t **v32;
  uint64_t v33[3];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36[3];
  uint64_t v37;
  uint64_t v38;

  v5.offset = result;
  v6 = *v4;
  v7 = (uint64_t)(*v4 + 7);
  v8 = -1 << *((_BYTE *)*v4 + 32);
  v9 = (result + 1) & ~v8;
  if (((1 << v9) & *(_QWORD *)(v7 + 8 * (v9 >> 6))) != 0)
  {
    v32 = v4;
    v10 = ~v8;
    swift_retain(v6, a2, a3, a4);
    v11.offset = _HashTable.previousHole(before:)(v5).offset;
    if ((*(_QWORD *)(v7 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      v12 = (v11.offset + 1) & v10;
      do
      {
        v13 = v7;
        outlined init with copy of AnyHashable(v6[6] + 40 * v9, (uint64_t)v36);
        v14 = v6[5];
        v15 = v37;
        v16 = v38;
        __swift_project_boxed_opaque_existential_0Tm(v36, v37);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v16 + 8))(v33, v15, v16);
        v17 = v34;
        v18 = v35;
        __swift_project_boxed_opaque_existential_0Tm(v33, v34);
        v19 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v18 + 40))(v14, v17, v18);
        __swift_destroy_boxed_opaque_existential_1Tm(v33);
        outlined destroy of AnyHashable(v36);
        v20 = v19 & v10;
        if (v5.offset >= (uint64_t)v12)
        {
          if (v20 >= v12 && v5.offset >= v20)
          {
LABEL_17:
            v23 = v6[6];
            v24 = v23 + 40 * v5.offset;
            v25 = v23 + 40 * v9;
            v7 = v13;
            if (v5.offset != v9 || (v5.offset = v9, v24 >= v25 + 40))
            {
              v26 = *(_OWORD *)v25;
              v27 = *(_OWORD *)(v25 + 16);
              *(_QWORD *)(v24 + 32) = *(_QWORD *)(v25 + 32);
              *(_OWORD *)v24 = v26;
              *(_OWORD *)(v24 + 16) = v27;
              v5.offset = v9;
            }
            goto LABEL_5;
          }
        }
        else if (v20 >= v12 || v5.offset >= v20)
        {
          goto LABEL_17;
        }
        v7 = v13;
LABEL_5:
        v9 = (v9 + 1) & v10;
      }
      while (((*(_QWORD *)(v7 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
    *(_QWORD *)(v7 + (((unint64_t)v5.offset >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << SLOBYTE(v5.offset)) - 1;
    result = swift_release((uint64_t)v6);
    v4 = v32;
  }
  else
  {
    *(_QWORD *)(v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v28 = *v4;
  v29 = (*v4)[2];
  v30 = __OFSUB__(v29, 1);
  v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }
  else
  {
    v28[2] = v31;
    ++*((_DWORD *)v28 + 9);
  }
  return result;
}

{
  unint64_t **v4;
  Swift::_HashTable::Bucket v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  Swift::_HashTable::Bucket v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  BOOL v30;
  unint64_t v31;
  unint64_t **v32;
  uint64_t v33[3];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36[3];
  uint64_t v37;
  uint64_t v38;

  v5.offset = result;
  v6 = *v4;
  v7 = (uint64_t)(*v4 + 7);
  v8 = -1 << *((_BYTE *)*v4 + 32);
  v9 = (result + 1) & ~v8;
  if (((1 << v9) & *(_QWORD *)(v7 + 8 * (v9 >> 6))) != 0)
  {
    v32 = v4;
    v10 = ~v8;
    swift_retain(v6, a2, a3, a4);
    v11.offset = _HashTable.previousHole(before:)(v5).offset;
    if ((*(_QWORD *)(v7 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      v12 = (v11.offset + 1) & v10;
      do
      {
        v13 = v7;
        outlined init with copy of AnyHashable(v6[6] + 40 * v9, (uint64_t)v36);
        v14 = v6[5];
        v15 = v37;
        v16 = v38;
        __swift_project_boxed_opaque_existential_0Tm(v36, v37);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v16 + 8))(v33, v15, v16);
        v17 = v34;
        v18 = v35;
        __swift_project_boxed_opaque_existential_0Tm(v33, v34);
        v19 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v18 + 40))(v14, v17, v18);
        __swift_destroy_boxed_opaque_existential_1Tm(v33);
        outlined destroy of AnyHashable(v36);
        v20 = v19 & v10;
        if (v5.offset >= (uint64_t)v12)
        {
          if (v20 >= v12 && v5.offset >= v20)
          {
LABEL_17:
            v23 = v6[6];
            v24 = v23 + 40 * v5.offset;
            v25 = v23 + 40 * v9;
            v7 = v13;
            if (v5.offset != v9 || (v5.offset = v9, v24 >= v25 + 40))
            {
              v26 = *(_OWORD *)v25;
              v27 = *(_OWORD *)(v25 + 16);
              *(_QWORD *)(v24 + 32) = *(_QWORD *)(v25 + 32);
              *(_OWORD *)v24 = v26;
              *(_OWORD *)(v24 + 16) = v27;
              v5.offset = v9;
            }
            goto LABEL_5;
          }
        }
        else if (v20 >= v12 || v5.offset >= v20)
        {
          goto LABEL_17;
        }
        v7 = v13;
LABEL_5:
        v9 = (v9 + 1) & v10;
      }
      while (((*(_QWORD *)(v7 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
    *(_QWORD *)(v7 + (((unint64_t)v5.offset >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << SLOBYTE(v5.offset)) - 1;
    result = swift_release((uint64_t)v6);
    v4 = v32;
  }
  else
  {
    *(_QWORD *)(v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v28 = *v4;
  v29 = (*v4)[2];
  v30 = __OFSUB__(v29, 1);
  v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }
  else
  {
    v28[2] = v31;
    ++*((_DWORD *)v28 + 9);
  }
  return result;
}

Swift::Void __swiftcall _NativeSet._delete(at:)(Swift::_HashTable::Bucket at)
{
  uint64_t v1;
  unint64_t **v2;
  uint64_t v3;
  Swift::Int offset;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  Swift::_HashTable::Bucket v17;
  unint64_t v18;
  uint64_t (*v19)(unint64_t, uint64_t, uint64_t);
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  Swift::Int v23;
  unint64_t v26;
  Swift::Int v27;
  char *v28;
  char *v29;
  unint64_t *v30;
  unint64_t v31;
  BOOL v32;
  unint64_t v33;
  unint64_t **v34;
  void (*v35)(char *, unint64_t, uint64_t);
  uint64_t (*v36)(unint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v3 = v1;
  offset = at.offset;
  v5 = *(_QWORD *)(v1 + 16);
  v39 = *(_QWORD *)(v5 - 8);
  v6 = MEMORY[0x1E0C80A78](at.offset);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v2;
  v13 = (uint64_t)(*v2 + 7);
  v14 = -1 << *((_BYTE *)*v2 + 32);
  v15 = (v6 + 1) & ~v14;
  if (((1 << v15) & *(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
  {
    v34 = v2;
    v16 = ~v14;
    swift_retain(v12, v7, v8, v9);
    v17.offset = _HashTable.previousHole(before:)((Swift::_HashTable::Bucket)offset).offset;
    v38 = v13;
    if ((*(_QWORD *)(v13 + 8 * (v15 >> 6)) & (1 << v15)) != 0)
    {
      v18 = (v17.offset + 1) & v16;
      v37 = *(_QWORD *)(v3 + 24);
      v19 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v37 + 32);
      v20 = *(_QWORD *)(v39 + 72);
      v35 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 16);
      v36 = v19;
      do
      {
        v21 = v20 * v15;
        v35(v11, v12[6] + v20 * v15, v5);
        v22 = v36(v12[5], v5, v37);
        (*(void (**)(char *, uint64_t))(v39 + 8))(v11, v5);
        v23 = v22 & v16;
        if (offset >= (uint64_t)v18)
        {
          if (v23 < v18 || offset < v23)
            goto LABEL_6;
        }
        else if (v23 < v18 && offset < v23)
        {
          goto LABEL_6;
        }
        v26 = v12[6];
        v27 = v20 * offset;
        v28 = (char *)(v26 + v20 * offset);
        v29 = (char *)(v26 + v21);
        if (v20 * offset < v21 || v28 >= &v29[v20])
        {
          swift_arrayInitWithTakeFrontToBack(v28, v29, 1, v5);
        }
        else
        {
          offset = v15;
          if (v27 == v21)
            goto LABEL_6;
          swift_arrayInitWithTakeBackToFront(v28, v29, 1, v5);
        }
        offset = v15;
LABEL_6:
        v15 = (v15 + 1) & v16;
      }
      while (((*(_QWORD *)(v38 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0);
    }
    *(_QWORD *)(v38 + (((unint64_t)offset >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << offset) - 1;
    swift_release((uint64_t)v12);
    v2 = v34;
  }
  else
  {
    *(_QWORD *)(v13 + (((unint64_t)offset >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << offset) - 1;
  }
  v30 = *v2;
  v31 = (*v2)[2];
  v32 = __OFSUB__(v31, 1);
  v33 = v31 - 1;
  if (v32)
  {
    __break(1u);
  }
  else
  {
    v30[2] = v33;
    ++*((_DWORD *)v30 + 9);
  }
}

void _NativeSet.uncheckedRemove(at:isUnique:)(Swift::_HashTable::Bucket a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;

  if ((a2 & 1) == 0)
    _NativeSet.copy()();
  (*(void (**)(uint64_t, Swift::Int))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 32))(a4, *(_QWORD *)(*(_QWORD *)v4 + 48) + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 72) * a1.offset);
  _NativeSet._delete(at:)(a1);
}

Swift::Void __swiftcall _NativeSet.removeAll(isUnique:)(Swift::Bool isUnique)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = v4;
  v6 = v1;
  v7 = *v4;
  v8 = *(_BYTE *)(*v4 + 32);
  if (!isUnique)
  {
    type metadata accessor for _SetStorage(0, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t)v3);
    v20 = static _SetStorage.allocate(scale:age:seed:)(v8, 0x100000000, 0, 1);
    swift_release(v7);
    *v5 = v20;
    return;
  }
  v9 = 1 << v8;
  v10 = (_QWORD *)(v7 + 56);
  v11 = -1;
  if (v9 < 64)
    v11 = ~(-1 << v9);
  v12 = v11 & *(_QWORD *)(v7 + 56);
  v13 = (unint64_t)(v9 + 63) >> 6;
  swift_retain((unint64_t *)v7, v1, v2, v3);
  v14 = 0;
  while (1)
  {
    if (v12)
    {
      v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v16 = v15 | (v14 << 6);
      goto LABEL_6;
    }
    if (__OFADD__(v14++, 1))
      goto LABEL_24;
    if (v14 >= v13)
      break;
    v18 = v10[v14];
    if (!v18)
    {
      v19 = v14 + 1;
      if (v14 + 1 >= v13)
        break;
      v18 = v10[v19];
      if (!v18)
      {
        while (1)
        {
          v14 = v19 + 1;
          if (__OFADD__(v19, 1))
            break;
          if (v14 >= v13)
            goto LABEL_19;
          v18 = v10[v14];
          ++v19;
          if (v18)
            goto LABEL_17;
        }
        __break(1u);
LABEL_24:
        __break(1u);
        return;
      }
      ++v14;
    }
LABEL_17:
    v12 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v14 << 6);
LABEL_6:
    swift_arrayDestroy(*(_QWORD *)(v7 + 48) + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 16) - 8) + 72) * v16, 1, *(_QWORD *)(v6 + 16));
  }
LABEL_19:
  swift_release(v7);
  v21 = 1 << *(_BYTE *)(v7 + 32);
  if (v21 > 63)
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v21 + 63) >> 6, (int64x2_t *)(v7 + 56));
  else
    *v10 = -1 << v21;
  *(_QWORD *)(v7 + 16) = 0;
  ++*(_DWORD *)(v7 + 36);
}

_QWORD *specialized static _SetStorage.allocate(scale:age:seed:)(char a1, uint64_t a2, _QWORD *a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  double v13;
  _QWORD *v14;
  int64x2_t *v15;
  uint64_t v16;
  _QWORD *v17;

  v8 = a1;
  v9 = 1 << a1;
  v10 = (unint64_t)((1 << a1) + 63) >> 6;
  v11 = canonical specialized generic type metadata accessor for _SetStorage<AnyHashable>();
  v12 = swift_allocObject(v11, ((8 * v10 + 63) & 0x3FFFFFFFFFFFFFF8) + (40 << v8), 7uLL);
  v12[2] = 0;
  v13 = (double)v9 * 0.75;
  if ((~*(_QWORD *)&v13 & 0x7FF0000000000000) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because it is either infinite or NaN", 76, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3735uLL, 0);
  if (v13 <= -9.22337204e18)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because the result would be less than Int.min", 85, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3738uLL, 0);
  if (v13 >= 9.22337204e18)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because the result would be greater than Int.max", 88, 2, "Swift/IntegerTypes.swift", 24, 2, 0x373BuLL, 0);
  v14 = v12;
  v15 = (int64x2_t *)(v12 + 7);
  v16 = (uint64_t)&v12[v10 + 7];
  v12[3] = (uint64_t)v13;
  *((_BYTE *)v12 + 32) = a1;
  *((_BYTE *)v12 + 33) = 0;
  *((_WORD *)v12 + 17) = 0;
  if ((a2 & 0x100000000) != 0)
    LODWORD(a2) = specialized static Hasher._hash(seed:_:)(0, (uint64_t)v12);
  *((_DWORD *)v14 + 9) = a2;
  if ((_BYTE)qword_1ECD25528)
    v17 = (_QWORD *)v8;
  else
    v17 = v14;
  if ((a4 & 1) == 0)
    v17 = a3;
  v14[5] = v17;
  v14[6] = v16;
  if (v9 > 63)
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v10, v15);
  else
    v15->i64[0] = -1 << v9;
  return v14;
}

{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  double v13;
  _QWORD *v14;
  int64x2_t *v15;
  uint64_t v16;
  _QWORD *v17;

  v8 = a1;
  v9 = 1 << a1;
  v10 = (unint64_t)((1 << a1) + 63) >> 6;
  v11 = canonical specialized generic type metadata accessor for _SetStorage<String>();
  v12 = swift_allocObject(v11, ((8 * v10 + 63) & 0x3FFFFFFFFFFFFFF8) + (16 << v8), 7uLL);
  v12[2] = 0;
  v13 = (double)v9 * 0.75;
  if ((~*(_QWORD *)&v13 & 0x7FF0000000000000) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because it is either infinite or NaN", 76, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3735uLL, 0);
  if (v13 <= -9.22337204e18)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because the result would be less than Int.min", 85, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3738uLL, 0);
  if (v13 >= 9.22337204e18)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because the result would be greater than Int.max", 88, 2, "Swift/IntegerTypes.swift", 24, 2, 0x373BuLL, 0);
  v14 = v12;
  v15 = (int64x2_t *)(v12 + 7);
  v16 = (uint64_t)&v12[v10 + 7];
  v12[3] = (uint64_t)v13;
  *((_BYTE *)v12 + 32) = a1;
  *((_BYTE *)v12 + 33) = 0;
  *((_WORD *)v12 + 17) = 0;
  if ((a2 & 0x100000000) != 0)
    LODWORD(a2) = specialized static Hasher._hash(seed:_:)(0, (uint64_t)v12);
  *((_DWORD *)v14 + 9) = a2;
  if ((_BYTE)qword_1ECD25528)
    v17 = (_QWORD *)v8;
  else
    v17 = v14;
  if ((a4 & 1) == 0)
    v17 = a3;
  v14[5] = v17;
  v14[6] = v16;
  if (v9 > 63)
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v10, v15);
  else
    v15->i64[0] = -1 << v9;
  return v14;
}

_QWORD *specialized static _SetStorage.allocate(scale:age:seed:)(char a1, uint64_t a2, _QWORD *a3, char a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  double v14;
  _QWORD *v15;
  int64x2_t *v16;
  uint64_t v17;
  _QWORD *v18;

  v9 = a1;
  v10 = 1 << a1;
  v11 = (unint64_t)((1 << a1) + 63) >> 6;
  v12 = a5(0);
  v13 = swift_allocObject(v12, ((8 * v11 + 63) & 0x3FFFFFFFFFFFFFF8) + (8 << v9), 7uLL);
  v13[2] = 0;
  v14 = (double)v10 * 0.75;
  if ((~*(_QWORD *)&v14 & 0x7FF0000000000000) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because it is either infinite or NaN", 76, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3735uLL, 0);
  if (v14 <= -9.22337204e18)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because the result would be less than Int.min", 85, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3738uLL, 0);
  if (v14 >= 9.22337204e18)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because the result would be greater than Int.max", 88, 2, "Swift/IntegerTypes.swift", 24, 2, 0x373BuLL, 0);
  v15 = v13;
  v16 = (int64x2_t *)(v13 + 7);
  v17 = (uint64_t)&v13[v11 + 7];
  v13[3] = (uint64_t)v14;
  *((_BYTE *)v13 + 32) = a1;
  *((_BYTE *)v13 + 33) = 0;
  *((_WORD *)v13 + 17) = 0;
  if ((a2 & 0x100000000) != 0)
    LODWORD(a2) = specialized static Hasher._hash(seed:_:)(0, (uint64_t)v13);
  *((_DWORD *)v15 + 9) = a2;
  if ((_BYTE)qword_1ECD25528)
    v18 = (_QWORD *)v9;
  else
    v18 = v15;
  if ((a4 & 1) == 0)
    v18 = a3;
  v15[5] = v18;
  v15[6] = v17;
  if (v10 > 63)
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v11, v16);
  else
    v16->i64[0] = -1 << v10;
  return v15;
}

_QWORD *static _SetStorage.allocate(scale:age:seed:)(char a1, uint64_t a2, _QWORD *a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  double v17;
  _QWORD *v18;
  _QWORD *v19;
  int64x2_t *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v24;

  v5 = v4;
  v10 = a1;
  v11 = 1 << a1;
  v12 = (unint64_t)((1 << a1) + 63) >> 6;
  v13 = *(_QWORD *)(*(_QWORD *)(v4 + 168) - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v14 + 8 * v12;
  v16 = swift_allocObject(v5, ((v15 + 56) & ~v14) + (*(_QWORD *)(v13 + 72) << a1), v14 | 7);
  v16[2] = 0;
  v17 = (double)v11 * 0.75;
  if ((~*(_QWORD *)&v17 & 0x7FF0000000000000) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because it is either infinite or NaN", 76, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3735uLL, 0);
  if (v17 <= -9.22337204e18)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because the result would be less than Int.min", 85, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3738uLL, 0);
  if (v17 >= 9.22337204e18)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because the result would be greater than Int.max", 88, 2, "Swift/IntegerTypes.swift", 24, 2, 0x373BuLL, 0);
  v18 = v16;
  v24 = v12;
  v19 = a3;
  v20 = (int64x2_t *)(v16 + 7);
  v16[3] = (uint64_t)v17;
  v21 = ((unint64_t)v16 + v15 + 56) & ~v14;
  *((_BYTE *)v16 + 32) = a1;
  *((_BYTE *)v16 + 33) = 0;
  *((_WORD *)v16 + 17) = 0;
  if ((a2 & 0x100000000) != 0)
    LODWORD(a2) = specialized static Hasher._hash(seed:_:)(0, (uint64_t)v16);
  *((_DWORD *)v18 + 9) = a2;
  if ((_BYTE)qword_1ECD25528)
    v22 = (_QWORD *)v10;
  else
    v22 = v18;
  if ((a4 & 1) == 0)
    v22 = v19;
  v18[5] = v22;
  v18[6] = v21;
  if (v11 > 63)
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v24, v20);
  else
    v20->i64[0] = -1 << v11;
  return v18;
}

unint64_t *_NativeSet.Iterator.base.getter(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  unint64_t **v4;

  return swift_retain(*v4, a2, a3, a4);
}

uint64_t _NativeSet.Iterator.iterator.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t _NativeSet.Iterator.iterator.setter(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[1] = result;
  v4[2] = a2;
  v4[3] = a3;
  v4[4] = a4;
  return result;
}

uint64_t (*_NativeSet.Iterator.iterator.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t _NativeSet.Iterator.init(_:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v2 = -1;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  *a2 = a1;
  v6 = *(_QWORD *)(a1 + 56);
  result = a1 + 56;
  v5 = v6;
  if (-v3 < 64)
    v2 = ~(-1 << -(char)v3);
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0;
  a2[4] = v2 & v5;
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance _NativeSet<A>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *v1;
  v3 = -1;
  v4 = -1 << *(_BYTE *)(*v1 + 32);
  *a1 = *v1;
  v7 = *(_QWORD *)(v2 + 56);
  v5 = v2 + 56;
  v6 = v7;
  if (-v4 < 64)
    v3 = ~(-1 << -(char)v4);
  a1[1] = v5;
  a1[2] = ~v4;
  a1[3] = 0;
  a1[4] = v3 & v6;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance _NativeSet<A>(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = specialized Sequence._copyToContiguousArray()(v2, a1, a2);
  swift_release(*v2);
  return v3;
}

uint64_t protocol witness for IteratorProtocol.next() in conformance _NativeSet<A>.Iterator@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v4 = v2[4];
  if (v4)
  {
    v2[4] = (v4 - 1) & v4;
    v5 = __clz(__rbit64(v4)) | (v2[3] << 6);
LABEL_3:
    v6 = *(_QWORD *)(*v2 + 48);
    v7 = *(_QWORD *)(result + 16);
    v8 = *(_QWORD *)(v7 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v8 + 16))(a2, v6 + *(_QWORD *)(v8 + 72) * v5, v7);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
    v10 = a2;
    v11 = 0;
    v12 = v7;
    return v9(v10, v11, 1, v12);
  }
  v13 = v2[3];
  v14 = v13 + 1;
  if (!__OFADD__(v13, 1))
  {
    v15 = (unint64_t)(v2[2] + 64) >> 6;
    if (v14 < v15)
    {
      v2[3] = v14;
      v16 = v2[1];
      v17 = *(_QWORD *)(v16 + 8 * v14);
      v2[4] = v17;
      if (v17)
      {
LABEL_11:
        v2[4] = (v17 - 1) & v17;
        v5 = __clz(__rbit64(v17)) + (v14 << 6);
        goto LABEL_3;
      }
      v18 = v13 + 2;
      while (v15 != v18)
      {
        v2[3] = v18;
        v17 = *(_QWORD *)(v16 + 8 * v18);
        v2[4] = v17;
        ++v18;
        if (v17)
        {
          v14 = v18 - 1;
          goto LABEL_11;
        }
      }
    }
    v12 = *(_QWORD *)(result + 16);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
    v10 = a2;
    v11 = 1;
    return v9(v10, v11, 1, v12);
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in _NativeSet.isSubset<A>(of:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, char *a8@<X8>)
{
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void (*v31)(char *, uint64_t, uint64_t);
  char *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t AssociatedConformanceWitness;
  void (*v36)(unint64_t, unint64_t);
  void (*v37)(char *, uint64_t);
  char *v38;
  char *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(char *, char *, uint64_t, uint64_t);
  uint64_t v46;
  void (*v47)(char *, unint64_t, uint64_t);
  char *v48;
  char v49;
  uint64_t result;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  uint64_t v59;
  unsigned int (*v60)(char *, uint64_t, uint64_t);
  void (*v61)(unint64_t, unint64_t);
  unint64_t v62;
  char *v63;
  char *v64;
  unint64_t AssociatedTypeWitness;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  char *v71;

  v55 = a8;
  v68 = a2;
  v69 = (_QWORD *)a7;
  v57 = a1;
  v13 = *(_QWORD **)(a4 - 8);
  v14 = MEMORY[0x1E0C80A78](a1);
  v66 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v54 - v16;
  v21 = type metadata accessor for Optional(0, v20, v18, v19);
  v22 = MEMORY[0x1E0C80A78](v21);
  v64 = (char *)&v54 - v23;
  v24 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](v22);
  v26 = (char *)&v54 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = (const char *)a7;
  v28 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v27, a5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v54 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v30 = (char *)&v54 - v29;
  v31 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
  v32 = v64;
  v31(v26, v68, v28);
  ((void (*)(uint64_t))v69[4])(v28);
  v33 = v28;
  v34 = AssociatedTypeWitness;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v69, v33, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v36 = *(void (**)(unint64_t, unint64_t))(AssociatedConformanceWitness + 16);
  v62 = AssociatedConformanceWitness;
  v63 = v30;
  v61 = v36;
  ((void (*)(unint64_t))v36)(v34);
  v60 = (unsigned int (*)(char *, uint64_t, uint64_t))v13[6];
  if (v60(v32, 1, a4) != 1)
  {
    v56 = 0;
    v58 = (void (*)(char *, char *, uint64_t))v13[4];
    v59 = a6;
    v68 = a3 + 56;
    v69 = v13;
    v70 = a3;
    v71 = v17;
    v58(v17, v32, a4);
    while (1)
    {
      v41 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(a6 + 32))(*(_QWORD *)(a3 + 40), a4, a6);
      v42 = -1 << *(_BYTE *)(a3 + 32);
      v43 = v41 & ~v42;
      if (((*(_QWORD *)(v68 + ((v43 >> 3) & 0xFFFFFFFFFFFFF8)) >> v43) & 1) != 0)
      {
        v67 = ~v42;
        v44 = *(_QWORD *)(a6 + 8);
        v45 = *(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v44 + 8);
        v46 = v13[9];
        v47 = (void (*)(char *, unint64_t, uint64_t))v13[2];
        while (1)
        {
          v48 = v66;
          v47(v66, *(_QWORD *)(v70 + 48) + v46 * v43, a4);
          v49 = v45(v48, v71, a4, v44);
          v37 = (void (*)(char *, uint64_t))v69[1];
          v37(v48, a4);
          if ((v49 & 1) != 0)
            break;
          v43 = (v43 + 1) & v67;
          if (((*(_QWORD *)(v68 + ((v43 >> 3) & 0xFFFFFFFFFFFFF8)) >> v43) & 1) == 0)
            goto LABEL_4;
        }
        v38 = v71;
        result = ((uint64_t (*)(char *, uint64_t))v37)(v71, a4);
        v51 = (v43 >> 3) & 0x1FFFFFFFFFFFFFF8;
        v52 = *(_QWORD *)(v57 + v51);
        *(_QWORD *)(v57 + v51) = v52 | (1 << v43);
        if ((v52 & (1 << v43)) != 0)
        {
          a6 = v59;
          v13 = v69;
          a3 = v70;
          v39 = v64;
        }
        else
        {
          a6 = v59;
          v13 = v69;
          a3 = v70;
          v39 = v64;
          if (__OFADD__(v56, 1))
          {
            __break(1u);
            return result;
          }
          if (v56 + 1 == *(_QWORD *)(v70 + 16))
          {
            v53 = 1;
            goto LABEL_18;
          }
          ++v56;
        }
        v61(AssociatedTypeWitness, v62);
        if (v60(v39, 1, a4) == 1)
          break;
      }
      else
      {
        v37 = (void (*)(char *, uint64_t))v13[1];
LABEL_4:
        v38 = v71;
        v37(v71, a4);
        v39 = v64;
        v61(AssociatedTypeWitness, v62);
        v40 = v60(v39, 1, a4);
        a6 = v59;
        v13 = v69;
        a3 = v70;
        if (v40 == 1)
          break;
      }
      v58(v38, v39, a4);
    }
  }
  v53 = 0;
LABEL_18:
  result = (*(uint64_t (**)(char *, unint64_t))(v54 + 8))(v63, AssociatedTypeWitness);
  *v55 = v53;
  return result;
}

uint64_t _NativeSet.isSubset<A>(of:)(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(unsigned __int8 *__return_ptr, int64x2_t *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v13;
  char v14;
  unint64_t v15;
  size_t v16;
  int64x2_t *v17;
  int64x2_t *v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;

  v13 = isStackAllocationSafe;
  v22 = *MEMORY[0x1E0C80C00];
  v14 = *(_BYTE *)(a2 + 32);
  v15 = (unint64_t)((1 << v14) + 63) >> 6;
  v16 = 8 * v15;
  if ((v14 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v17 = (int64x2_t *)((char *)&v20 - ((v16 + 15) & 0x3FFFFFFFFFFFFFF0));
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v15, v17);
    a7(&v21, v17, v15, v13, a2, a3, a4, a5, a6);
    return v21;
  }
  else
  {
    v19 = (int64x2_t *)swift_slowAlloc(v16, 0xFFFFFFFFFFFFFFFFLL);
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v15, v19);
    a7(&v21, v19, v15, v13, a2, a3, a4, a5, a6);
    swift_slowDealloc(v19);
    return v21;
  }
}

uint64_t closure #1 in _NativeSet.isStrictSubset<A>(of:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, const char *a7@<X7>, char *a8@<X8>)
{
  uint64_t v11;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t AssociatedTypeWitness;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t AssociatedConformanceWitness;
  void (*v35)(unint64_t, unint64_t);
  char v36;
  char *v37;
  uint64_t result;
  void (*v39)(char *, char *, uint64_t);
  char *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(char *, char *, uint64_t, uint64_t);
  uint64_t v47;
  void (*v48)(char *, unint64_t, uint64_t);
  uint64_t v49;
  char *v50;
  char v51;
  void (*v52)(char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  void (*v62)(char *, char *, uint64_t);
  unsigned int (*v63)(char *, uint64_t, uint64_t);
  void (*v64)(unint64_t, unint64_t);
  unint64_t v65;
  char *v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;

  v58 = a1;
  v68 = (uint64_t)a7;
  v70 = a2;
  v71 = a5;
  v11 = a4;
  v57 = a8;
  v13 = *(_QWORD **)(a4 - 8);
  v14 = MEMORY[0x1E0C80A78](a1);
  v69 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v75 = (char *)&v55 - v16;
  v20 = type metadata accessor for Optional(0, v19, v17, v18);
  v21 = MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v55 - v22;
  v24 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](v21);
  v26 = (char *)&v55 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a7, a5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v56 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v29 = (char *)&v55 - v28;
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
  v31 = v71;
  v30(v26, v70, v71);
  v32 = v31;
  v33 = v68;
  (*(void (**)(uint64_t))(v68 + 32))(v32);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v33, v71, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v35 = *(void (**)(unint64_t, unint64_t))(AssociatedConformanceWitness + 16);
  v66 = v29;
  v67 = AssociatedTypeWitness;
  v64 = v35;
  v65 = AssociatedConformanceWitness;
  ((void (*)(unint64_t))v35)(AssociatedTypeWitness);
  v63 = (unsigned int (*)(char *, uint64_t, uint64_t))v13[6];
  if (v63(v23, 1, v11) != 1)
  {
    v59 = 0;
    v60 = v23;
    LODWORD(v68) = 0;
    v39 = (void (*)(char *, char *, uint64_t))v13[4];
    v61 = a6;
    v62 = v39;
    v71 = a3 + 56;
    v72 = v13;
    v73 = a3;
    v74 = v11;
    v39(v75, v23, v11);
    while (1)
    {
      v42 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(a6 + 32))(*(_QWORD *)(a3 + 40), v11, a6);
      v43 = -1 << *(_BYTE *)(a3 + 32);
      v44 = v42 & ~v43;
      if (((*(_QWORD *)(v71 + ((v44 >> 3) & 0xFFFFFFFFFFFFF8)) >> v44) & 1) != 0)
      {
        v70 = ~v43;
        v45 = *(_QWORD *)(a6 + 8);
        v46 = *(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v45 + 8);
        v47 = v13[9];
        v48 = (void (*)(char *, unint64_t, uint64_t))v13[2];
        while (1)
        {
          v49 = v74;
          v50 = v69;
          v48(v69, *(_QWORD *)(v73 + 48) + v47 * v44, v74);
          v51 = v46(v50, v75, v49, v45);
          v52 = (void (*)(char *, uint64_t))v72[1];
          v52(v50, v49);
          if ((v51 & 1) != 0)
            break;
          v44 = (v44 + 1) & v70;
          if (((*(_QWORD *)(v71 + ((v44 >> 3) & 0xFFFFFFFFFFFFF8)) >> v44) & 1) == 0)
            goto LABEL_11;
        }
        v11 = v74;
        result = ((uint64_t (*)(char *, uint64_t))v52)(v75, v74);
        v53 = (v44 >> 3) & 0x1FFFFFFFFFFFFFF8;
        v54 = *(_QWORD *)(v58 + v53);
        *(_QWORD *)(v58 + v53) = v54 | (1 << v44);
        if ((v54 & (1 << v44)) != 0)
        {
          a6 = v61;
          a3 = v73;
        }
        else
        {
          if (__OFADD__(v59, 1))
          {
            __break(1u);
            return result;
          }
          a3 = v73;
          if (((v59 + 1 == *(_QWORD *)(v73 + 16)) & v68) != 0)
            goto LABEL_22;
          ++v59;
          a6 = v61;
        }
        v13 = v72;
        v40 = v60;
        v64(v67, v65);
        if (v63(v40, 1, v11) == 1)
          break;
      }
      else
      {
        v52 = (void (*)(char *, uint64_t))v13[1];
LABEL_11:
        v11 = v74;
        v52(v75, v74);
        a3 = v73;
        if ((v68 & 1) == 0 && v59 == *(_QWORD *)(v73 + 16))
        {
LABEL_22:
          v36 = 1;
          goto LABEL_3;
        }
        v40 = v60;
        v64(v67, v65);
        LODWORD(v68) = 1;
        v41 = v63(v40, 1, v11);
        a6 = v61;
        v13 = v72;
        if (v41 == 1)
          break;
      }
      v62(v75, v40, v11);
    }
  }
  v36 = 0;
LABEL_3:
  v37 = v57;
  result = (*(uint64_t (**)(char *, unint64_t))(v56 + 8))(v66, v67);
  *v37 = v36;
  return result;
}

uint64_t closure #1 in _NativeSet.isStrictSuperset<A>(of:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, char *a8@<X8>)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t AssociatedTypeWitness;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  unint64_t AssociatedConformanceWitness;
  void (*v31)(unint64_t, unint64_t);
  unint64_t v32;
  char *v33;
  uint64_t (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  char v36;
  void (*v37)(_QWORD, _QWORD, _QWORD);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, unint64_t, uint64_t);
  uint64_t v46;
  char *v47;
  char v48;
  void (*v49)(char *, uint64_t);
  uint64_t result;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(char *, uint64_t, uint64_t);
  unint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(_QWORD, _QWORD, _QWORD);
  uint64_t (*v59)(char *, uint64_t, uint64_t);
  char *v60;
  void (*v61)(unint64_t, unint64_t);
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t (*v70)(char *, char *, uint64_t, uint64_t);
  char *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  char *v75;

  v63 = a1;
  v64 = a6;
  v10 = a4;
  v73 = a2;
  v74 = a3;
  v68 = a8;
  v11 = *(_QWORD **)(a4 - 8);
  v12 = MEMORY[0x1E0C80A78](a1);
  v71 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v75 = (char *)&v56 - v14;
  v18 = type metadata accessor for Optional(0, v17, v15, v16);
  v19 = MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v56 - v20;
  v22 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](v19);
  v24 = (char *)&v56 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a7, a5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v65 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v27 = (char *)&v56 - v26;
  (*(void (**)(char *, _QWORD *, uint64_t))(v22 + 16))(v24, v73, a5);
  (*(void (**)(uint64_t, uint64_t))(a7 + 32))(a5, a7);
  v28 = a7;
  v29 = v21;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v28, a5, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v31 = *(void (**)(unint64_t, unint64_t))(AssociatedConformanceWitness + 16);
  v66 = v27;
  v67 = AssociatedTypeWitness;
  v32 = AssociatedTypeWitness;
  v33 = v68;
  v61 = v31;
  v62 = AssociatedConformanceWitness;
  ((void (*)(unint64_t))v31)(v32);
  v73 = v11;
  v34 = (uint64_t (*)(char *, uint64_t, uint64_t))v11[6];
  v35 = v74;
  v36 = 1;
  if (v34(v21, 1, v10) != 1)
  {
    v37 = (void (*)(_QWORD, _QWORD, _QWORD))v73[4];
    v38 = v35 + 56;
    v59 = v34;
    v60 = v29;
    v57 = 0;
    v58 = v37;
    v72 = v10;
    while (1)
    {
      v37(v75, v29, v10);
      v39 = v64;
      v40 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v64 + 32))(*(_QWORD *)(v35 + 40), v10, v64);
      v41 = -1 << *(_BYTE *)(v35 + 32);
      v42 = v40 & ~v41;
      if (((*(_QWORD *)(v38 + ((v42 >> 3) & 0xFFFFFFFFFFFFF8)) >> v42) & 1) == 0)
        break;
      v69 = ~v41;
      v43 = *(_QWORD *)(v39 + 8);
      v70 = *(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v43 + 8);
      v44 = v73[9];
      v45 = (void (*)(char *, unint64_t, uint64_t))v73[2];
      while (1)
      {
        v47 = v71;
        v46 = v72;
        v45(v71, *(_QWORD *)(v74 + 48) + v44 * v42, v72);
        v48 = v70(v47, v75, v46, v43);
        v49 = (void (*)(char *, uint64_t))v73[1];
        v49(v47, v46);
        if ((v48 & 1) != 0)
          break;
        v42 = (v42 + 1) & v69;
        if (((*(_QWORD *)(v38 + ((v42 >> 3) & 0xFFFFFFFFFFFFF8)) >> v42) & 1) == 0)
          goto LABEL_16;
      }
      result = ((uint64_t (*)(char *, uint64_t))v49)(v75, v72);
      v51 = (v42 >> 3) & 0x1FFFFFFFFFFFFFF8;
      v52 = *(_QWORD *)(v63 + v51);
      *(_QWORD *)(v63 + v51) = v52 | (1 << v42);
      if ((v52 & (1 << v42)) != 0)
      {
        v33 = v68;
        v35 = v74;
        v53 = v59;
        v29 = v60;
        v54 = v62;
      }
      else
      {
        v33 = v68;
        v35 = v74;
        v53 = v59;
        v29 = v60;
        v54 = v62;
        if (__OFADD__(v57, 1))
        {
          __break(1u);
          return result;
        }
        if (v57 + 1 == *(_QWORD *)(v74 + 16))
        {
          v36 = 0;
          goto LABEL_17;
        }
        ++v57;
      }
      v61(v67, v54);
      v36 = 1;
      v10 = v72;
      v55 = v53(v29, 1, v72);
      v37 = v58;
      if (v55 == 1)
        goto LABEL_17;
    }
    v49 = (void (*)(char *, uint64_t))v73[1];
LABEL_16:
    v49(v75, v72);
    v36 = 0;
    v33 = v68;
  }
LABEL_17:
  result = (*(uint64_t (**)(char *, unint64_t))(v65 + 8))(v66, v67);
  *v33 = v36;
  return result;
}

__objc2_class **_NativeSet.extractSubset(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __objc2_class **result;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = a6;
  v11 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!v15)
  {
    swift_release(a4);
    return &_swiftEmptySetSingleton;
  }
  if (*(_QWORD *)(a4 + 16) == a3)
    return (__objc2_class **)a4;
  type metadata accessor for _SetStorage(0, a5, v26, v12);
  result = (__objc2_class **)static _SetStorage.allocate(capacity:)(a3);
  v16 = (uint64_t)result;
  if (a2 < 1)
    v18 = 0;
  else
    v18 = *a1;
  v19 = 0;
  while (1)
  {
    if (v18)
    {
      v20 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v21 = v20 | (v19 << 6);
      goto LABEL_21;
    }
    v22 = __OFADD__(v19++, 1);
    if (v22)
      goto LABEL_27;
    if (v19 >= a2)
    {
LABEL_23:
      swift_release(a4);
      return (__objc2_class **)v16;
    }
    v23 = a1[v19];
    if (!v23)
      break;
LABEL_20:
    v18 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v19 << 6);
LABEL_21:
    (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v14, *(_QWORD *)(a4 + 48) + *(_QWORD *)(v11 + 72) * v21, a5);
    result = (__objc2_class **)_NativeSet._unsafeInsertNew(_:)((uint64_t)v14, v16, a5, v26);
    v22 = __OFSUB__(a3--, 1);
    if (v22)
    {
      __break(1u);
      goto LABEL_26;
    }
    if (!a3)
      goto LABEL_23;
  }
  v24 = v19 + 1;
  if (v19 + 1 >= a2)
    goto LABEL_23;
  v23 = a1[v24];
  if (v23)
  {
    ++v19;
    goto LABEL_20;
  }
  while (1)
  {
    v19 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v19 >= a2)
      goto LABEL_23;
    v23 = a1[v19];
    ++v24;
    if (v23)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

__objc2_class **_NativeSet.subtracting<A>(_:)(uint64_t a1, __objc2_class **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t AssociatedTypeWitness;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t AssociatedConformanceWitness;
  char *v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(char *, char *, uint64_t, uint64_t);
  _QWORD *v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  char v40;
  void (*v41)(char *, uint64_t);
  int v42;
  uint64_t isStackAllocationSafe;
  uint64_t v44;
  char v45;
  unint64_t v46;
  size_t v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  unint64_t v53;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  char *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(char *, uint64_t, uint64_t);
  void (*v63)(unint64_t);
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  __objc2_class **v69;
  char *v70;
  _QWORD *v71;
  char *v72;
  __objc2_class **v73[3];

  v68 = a5;
  v73[1] = *(__objc2_class ***)MEMORY[0x1E0C80C00];
  v11 = type metadata accessor for Optional(0, a3, a3, a4);
  v65 = *(_QWORD *)(v11 - 8);
  v66 = v11;
  v12 = MEMORY[0x1E0C80A78](v11);
  v67 = (char *)&v55 - v13;
  v71 = *(_QWORD **)(a3 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v14);
  v72 = (char *)&v55 - v18;
  v19 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v55 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a6, a4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v25 = (char *)&v55 - v24;
  if (a2[2])
  {
    v61 = v23;
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, a1, a4);
    (*(void (**)(uint64_t, uint64_t))(a6 + 32))(a4, a6);
    v56 = (const char *)a6;
    v57 = a4;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a6, a4, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
    v27 = v67;
    v63 = *(void (**)(unint64_t))(AssociatedConformanceWitness + 16);
    v64 = AssociatedConformanceWitness;
    v63(AssociatedTypeWitness);
    v28 = v71;
    v62 = (uint64_t (*)(char *, uint64_t, uint64_t))v71[6];
    v29 = v62(v27, 1, a3);
    v30 = v68;
    if (v29 == 1)
    {
LABEL_3:
      (*(void (**)(char *, uint64_t))(v65 + 8))(v27, v66);
      (*(void (**)(char *, unint64_t))(v61 + 8))(v25, AssociatedTypeWitness);
    }
    else
    {
      v58 = (void (*)(char *, char *, uint64_t))v28[4];
      v59 = v25;
      v69 = a2;
      v70 = (char *)(a2 + 7);
      v60 = AssociatedTypeWitness;
      while (1)
      {
        v58(v72, v27, a3);
        v31 = (*(uint64_t (**)(__objc2_class *, uint64_t, uint64_t))(v30 + 32))(a2[5], a3, v30);
        v32 = -1 << *((_BYTE *)a2 + 32);
        v33 = v31 & ~v32;
        if (((*(_QWORD *)&v70[(v33 >> 3) & 0xFFFFFFFFFFFFF8] >> v33) & 1) != 0)
          break;
        v41 = (void (*)(char *, uint64_t))v28[1];
LABEL_12:
        v41(v72, a3);
        v27 = v67;
        v25 = v59;
        AssociatedTypeWitness = v60;
        ((void (*)(unint64_t, unint64_t))v63)(v60, v64);
        v42 = v62(v27, 1, a3);
        v30 = v68;
        a2 = v69;
        v28 = v71;
        if (v42 == 1)
          goto LABEL_3;
      }
      v34 = ~v32;
      v35 = *(_QWORD *)(v30 + 8);
      v36 = *(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v35 + 8);
      v37 = v28;
      v38 = v28[9];
      v39 = (void (*)(char *, char *, uint64_t))v37[2];
      while (1)
      {
        v39(v16, (char *)v69[6] + v38 * v33, a3);
        v40 = v36(v16, v72, a3, v35);
        v41 = (void (*)(char *, uint64_t))v71[1];
        v41(v16, a3);
        if ((v40 & 1) != 0)
          break;
        v33 = (v33 + 1) & v34;
        if (((*(_QWORD *)&v70[(v33 >> 3) & 0xFFFFFFFFFFFFF8] >> v33) & 1) == 0)
          goto LABEL_12;
      }
      isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v41)(v72, a3);
      v44 = (uint64_t)v69;
      v45 = *((_BYTE *)v69 + 32);
      v46 = (unint64_t)((1 << v45) + 63) >> 6;
      v47 = 8 * v46;
      if ((v45 & 0x3Fu) < 0xE
        || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
      {
        MEMORY[0x1E0C80A78](isStackAllocationSafe);
        v48 = (char *)&v55 - ((v47 + 15) & 0x3FFFFFFFFFFFFFF0);
        specialized UnsafeMutablePointer.initialize(from:count:)(v70, v46, v48);
        v49 = v33;
        v50 = (uint64_t)v59;
        closure #1 in _NativeSet.subtracting<A>(_:)((unint64_t *)v48, v46, v44, v49, (uint64_t)v59, a3, v57, v68, v73, v56);
        swift_release(v44);
        v51 = v60;
        a2 = v73[0];
      }
      else
      {
        v52 = (char *)swift_slowAlloc(v47, 0xFFFFFFFFFFFFFFFFLL);
        specialized UnsafeMutablePointer.initialize(from:count:)(v70, v46, v52);
        v53 = v33;
        v50 = (uint64_t)v59;
        closure #1 in _NativeSet.subtracting<A>(_:)((unint64_t *)v52, v46, v44, v53, (uint64_t)v59, a3, v57, v68, v73, v56);
        swift_release(v44);
        v51 = v60;
        swift_slowDealloc(v52);
        a2 = v73[0];
      }
      (*(void (**)(uint64_t, unint64_t))(v61 + 8))(v50, v51);
    }
  }
  else
  {
    swift_release((uint64_t)a2);
    return &_swiftEmptySetSingleton;
  }
  return a2;
}

__objc2_class **closure #1 in _NativeSet.subtracting<A>(_:)@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, __objc2_class ***a9@<X8>, const char *a10)
{
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t AssociatedTypeWitness;
  unint64_t AssociatedConformanceWitness;
  void (*v30)(unint64_t *, unint64_t);
  unint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __objc2_class **result;
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  void (*v38)(char *, uint64_t);
  unint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(char *, char *, uint64_t, uint64_t);
  uint64_t v45;
  void (*v46)(char *, unint64_t, uint64_t);
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __objc2_class ***v55;
  unint64_t *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  unsigned int (*v61)(char *, uint64_t, uint64_t);
  void (*v62)(unint64_t *, unint64_t);
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  char *v71;

  v55 = a9;
  v65 = a5;
  v14 = a3;
  v54 = a2;
  v16 = type metadata accessor for Optional(0, a6, a3, a4);
  v52 = *(_QWORD *)(v16 - 8);
  v53 = v16;
  v17 = MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v51 - v18;
  v20 = MEMORY[0x1E0C80A78](v17);
  v66 = (char *)&v51 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v71 = (char *)&v51 - v22;
  v23 = *(_QWORD *)(v14 + 16);
  v24 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  v25 = *(unint64_t *)((char *)a1 + v24) & ((-1 << a4) - 1);
  v56 = a1;
  *(unint64_t *)((char *)a1 + v24) = v25;
  v27 = v26;
  v57 = v23 - 1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a10, a7, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)a10, a7, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v30 = *(void (**)(unint64_t *, unint64_t))(AssociatedConformanceWitness + 16);
  v64 = AssociatedTypeWitness;
  v31 = swift_checkMetadataState(0, AssociatedTypeWitness);
  v62 = v30;
  v63 = AssociatedConformanceWitness;
  v30(v31, AssociatedConformanceWitness);
  v61 = (unsigned int (*)(char *, uint64_t, uint64_t))v27[6];
  if (v61(v19, 1, a6) != 1)
  {
    v36 = (void (*)(char *, char *, uint64_t))v27[4];
    v59 = a8;
    v60 = v36;
    v68 = v14 + 56;
    v69 = v27;
    v70 = v14;
    v58 = v19;
    v37 = v66;
    v36(v71, v19, a6);
    while (1)
    {
      v40 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(a8 + 32))(*(_QWORD *)(v14 + 40), a6, a8);
      v41 = -1 << *(_BYTE *)(v14 + 32);
      v42 = v40 & ~v41;
      if (((*(_QWORD *)(v68 + ((v42 >> 3) & 0xFFFFFFFFFFFFF8)) >> v42) & 1) == 0)
        break;
      v67 = ~v41;
      v43 = *(_QWORD *)(a8 + 8);
      v44 = *(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v43 + 8);
      v45 = v27[9];
      v46 = (void (*)(char *, unint64_t, uint64_t))v27[2];
      while (1)
      {
        v46(v37, *(_QWORD *)(v70 + 48) + v45 * v42, a6);
        v47 = v44(v37, v71, a6, v43);
        v38 = (void (*)(char *, uint64_t))v69[1];
        v38(v37, a6);
        if ((v47 & 1) != 0)
          break;
        v42 = (v42 + 1) & v67;
        if (((*(_QWORD *)(v68 + ((v42 >> 3) & 0xFFFFFFFFFFFFF8)) >> v42) & 1) == 0)
          goto LABEL_6;
      }
      result = (__objc2_class **)((uint64_t (*)(char *, uint64_t))v38)(v71, a6);
      v48 = (v42 >> 3) & 0x1FFFFFFFFFFFFFF8;
      v49 = *(unint64_t *)((char *)v56 + v48);
      *(unint64_t *)((char *)v56 + v48) = v49 & ~(1 << v42);
      if ((v49 & (1 << v42)) == 0)
        goto LABEL_7;
      v19 = v58;
      v50 = v57 - 1;
      a8 = v59;
      v27 = v69;
      v14 = v70;
      if (__OFSUB__(v57, 1))
      {
        __break(1u);
        return result;
      }
      --v57;
      if (!v50)
      {
        result = &_swiftEmptySetSingleton;
        goto LABEL_3;
      }
LABEL_8:
      v39 = swift_checkMetadataState(0, v64);
      v62(v39, v63);
      if (v61(v19, 1, a6) == 1)
        goto LABEL_2;
      v60(v71, v19, a6);
    }
    v38 = (void (*)(char *, uint64_t))v27[1];
LABEL_6:
    v38(v71, a6);
LABEL_7:
    v19 = v58;
    a8 = v59;
    v27 = v69;
    v14 = v70;
    goto LABEL_8;
  }
LABEL_2:
  (*(void (**)(char *, uint64_t))(v52 + 8))(v19, v53);
  swift_retain((unint64_t *)v14, v32, v33, v34);
  result = _NativeSet.extractSubset(using:count:)(v56, v54, v57, v14, a6, a8);
LABEL_3:
  *v55 = result;
  return result;
}

void _NativeSet.filter(_:)(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t (*v9)(char *);
  char v10;
  unint64_t v11;
  size_t v12;
  int64x2_t *v13;
  int64x2_t *v14;
  uint64_t v15;
  __objc2_class **v16;
  __objc2_class **v17[2];

  v9 = (uint64_t (*)(char *))isStackAllocationSafe;
  v17[1] = *(__objc2_class ***)MEMORY[0x1E0C80C00];
  v10 = *(_BYTE *)(a3 + 32);
  v11 = (unint64_t)((1 << v10) + 63) >> 6;
  v12 = 8 * v11;
  if ((v10 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v13 = (int64x2_t *)((char *)&v15 - ((v12 + 15) & 0x3FFFFFFFFFFFFFF0));
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v11, v13);
    closure #1 in _NativeSet.filter(_:)((unint64_t *)v13, v11, v9, a4, a5, &v16);
    swift_release(a3);
    if (v5)
      swift_willThrow();
  }
  else
  {
    v14 = (int64x2_t *)swift_slowAlloc(v12, 0xFFFFFFFFFFFFFFFFLL);
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v11, v14);
    closure #1 in _NativeSet.filter(_:)((unint64_t *)v14, v11, v9, a4, a5, v17);
    swift_release(a3);
    swift_slowDealloc(v14);
  }
}

__objc2_class **closure #1 in _NativeSet.filter(_:)@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(char *)@<X3>, uint64_t a4@<X5>, uint64_t a5@<X6>, __objc2_class ***a6@<X8>)
{
  uint64_t v6;
  uint64_t v8;
  __objc2_class **result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  __objc2_class ***v28;
  uint64_t v29;
  unint64_t *v30;
  __objc2_class ***v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t (*v38)(char *);
  unint64_t *v39;

  v32 = a5;
  v33 = a2;
  v38 = a3;
  v34 = a1;
  v31 = a6;
  v8 = *(_QWORD *)(a4 - 8);
  result = (__objc2_class **)MEMORY[0x1E0C80A78](a1);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = 0;
  v39 = v15;
  v18 = v15[7];
  v16 = (uint64_t)(v15 + 7);
  v17 = v18;
  v35 = 0;
  v36 = v16;
  v19 = 1 << *(_BYTE *)(v16 - 24);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v21 = v20 & v17;
  v37 = (unint64_t)(v19 + 63) >> 6;
  while (v21)
  {
    v22 = __clz(__rbit64(v21));
    v21 &= v21 - 1;
    v23 = v22 | (v14 << 6);
LABEL_16:
    (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v13, v39[6] + *(_QWORD *)(v8 + 72) * v23, a4);
    v27 = v38(v13);
    result = (__objc2_class **)(*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, a4);
    if (v6)
      return result;
    if ((v27 & 1) != 0)
    {
      *(unint64_t *)((char *)v34 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
      v24 = __OFADD__(v35++, 1);
      if (v24)
      {
        __break(1u);
LABEL_21:
        v28 = v31;
        v29 = v32;
        v30 = v39;
        swift_retain(v39, v10, v16, v11);
        result = _NativeSet.extractSubset(using:count:)(v34, v33, v35, (uint64_t)v30, a4, v29);
        *v28 = result;
        return result;
      }
    }
  }
  v24 = __OFADD__(v14++, 1);
  if (v24)
    goto LABEL_24;
  if (v14 >= v37)
    goto LABEL_21;
  v25 = *(_QWORD *)(v36 + 8 * v14);
  if (v25)
  {
LABEL_15:
    v21 = (v25 - 1) & v25;
    v23 = __clz(__rbit64(v25)) + (v14 << 6);
    goto LABEL_16;
  }
  v26 = v14 + 1;
  if (v14 + 1 >= v37)
    goto LABEL_21;
  v25 = *(_QWORD *)(v36 + 8 * v26);
  if (v25)
  {
    ++v14;
    goto LABEL_15;
  }
  while (1)
  {
    v14 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v14 >= v37)
      goto LABEL_21;
    v25 = *(_QWORD *)(v36 + 8 * v14);
    ++v26;
    if (v25)
      goto LABEL_15;
  }
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

__objc2_class **_NativeSet.intersection(_:)(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  char v8;
  unint64_t v9;
  size_t v10;
  int64x2_t *v11;
  int64x2_t *v13;
  __objc2_class **v15[2];

  v7 = isStackAllocationSafe;
  v15[1] = *(__objc2_class ***)MEMORY[0x1E0C80C00];
  v8 = *(_BYTE *)(a2 + 32);
  v9 = (unint64_t)((1 << v8) + 63) >> 6;
  v10 = 8 * v9;
  if ((v8 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v11 = (int64x2_t *)((char *)v15 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0));
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v9, v11);
    closure #1 in _NativeSet.intersection(_:)((unint64_t *)v11, v9, a2, v7, a3, a4, v15);
    swift_release(a2);
    return v15[0];
  }
  else
  {
    v13 = (int64x2_t *)swift_slowAlloc(v10, 0xFFFFFFFFFFFFFFFFLL);
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v9, v13);
    closure #1 in _NativeSet.intersection(_:)((unint64_t *)v13, v9, a2, v7, a3, a4, v15);
    swift_release(a2);
    swift_slowDealloc(v13);
    return v15[0];
  }
}

__objc2_class **closure #1 in _NativeSet.intersection(_:)@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, __objc2_class ***a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __objc2_class **result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  BOOL v35;
  unint64_t i;
  int64_t v37;
  unint64_t v38;
  int64_t v39;
  uint64_t v40;
  void (*v41)(char *, unint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(char *, char *, uint64_t, uint64_t);
  char v48;
  void (*v49)(char *, uint64_t);
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t j;
  int64_t v56;
  unint64_t v57;
  int64_t v58;
  char *v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(char *, char *, uint64_t, uint64_t);
  char v68;
  void (*v69)(char *, uint64_t);
  __objc2_class ***v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __objc2_class ***v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  int64_t v78;
  uint64_t v79;
  uint64_t v80;
  int64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(char *, unint64_t, uint64_t);
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v75 = a1;
  v73 = a2;
  v74 = a7;
  v11 = *(_QWORD *)(a5 - 8);
  v12 = MEMORY[0x1E0C80A78](a1);
  v14 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v73 - v16;
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v73 - v19;
  result = (__objc2_class **)MEMORY[0x1E0C80A78](v18);
  v26 = (char *)&v73 - v25;
  v27 = *(_QWORD *)(v23 + 16);
  v28 = *(_QWORD *)(v24 + 16);
  v82 = v29;
  v86 = v24;
  v87 = v23;
  v88 = v11;
  if (v28 < v27)
  {
    v30 = 0;
    v31 = *(_QWORD *)(a4 + 56);
    v76 = (unint64_t)v26;
    v77 = a4 + 56;
    v32 = 1 << *(_BYTE *)(a4 + 32);
    if (v32 < 64)
      v33 = ~(-1 << v32);
    else
      v33 = -1;
    v34 = v33 & v31;
    v78 = (unint64_t)(v32 + 63) >> 6;
    v79 = 0;
    v83 = a3 + 56;
    v85 = v20;
    if (v34)
      goto LABEL_9;
LABEL_10:
    v35 = __OFADD__(v30, 1);
    v37 = v30 + 1;
    if (v35)
      goto LABEL_57;
    if (v37 < v78)
    {
      v38 = *(_QWORD *)(v77 + 8 * v37);
      if (v38)
      {
LABEL_19:
        v80 = (v38 - 1) & v38;
        v81 = v37;
        for (i = __clz(__rbit64(v38)) + (v37 << 6); ; i = __clz(__rbit64(v34)) | (v30 << 6))
        {
          v40 = *(_QWORD *)(a4 + 48);
          v84 = *(void (**)(char *, unint64_t, uint64_t))(v11 + 72);
          v41 = *(void (**)(char *, unint64_t, uint64_t))(v11 + 16);
          v41(v26, v40 + (_QWORD)v84 * i, a5);
          (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v20, v26, a5);
          v42 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(a6 + 32))(*(_QWORD *)(a3 + 40), a5, a6);
          v43 = -1 << *(_BYTE *)(a3 + 32);
          v44 = v42 & ~v43;
          if (((*(_QWORD *)(v83 + ((v44 >> 3) & 0xFFFFFFFFFFFFF8)) >> v44) & 1) != 0)
          {
            v45 = ~v43;
            v46 = *(_QWORD *)(a6 + 8);
            v47 = *(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v46 + 8);
            while (1)
            {
              v41(v17, *(_QWORD *)(v87 + 48) + v44 * (_QWORD)v84, a5);
              v48 = v47(v17, v85, a5, v46);
              v49 = *(void (**)(char *, uint64_t))(v88 + 8);
              v49(v17, a5);
              if ((v48 & 1) != 0)
                break;
              v44 = (v44 + 1) & v45;
              if (((*(_QWORD *)(v83 + ((v44 >> 3) & 0xFFFFFFFFFFFFF8)) >> v44) & 1) == 0)
                goto LABEL_26;
            }
            v20 = v85;
            result = (__objc2_class **)((uint64_t (*)(char *, uint64_t))v49)(v85, a5);
            v26 = (char *)v76;
            *(unint64_t *)((char *)v75 + ((v44 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v44;
            v34 = v80;
            v35 = __OFADD__(v79++, 1);
            v30 = v81;
            a6 = v82;
            a4 = v86;
            a3 = v87;
            v11 = v88;
            if (v35)
              goto LABEL_59;
            if (!v80)
              goto LABEL_10;
          }
          else
          {
            v49 = *(void (**)(char *, uint64_t))(v11 + 8);
LABEL_26:
            v20 = v85;
            result = (__objc2_class **)((uint64_t (*)(char *, uint64_t))v49)(v85, a5);
            v30 = v81;
            a6 = v82;
            a4 = v86;
            a3 = v87;
            v11 = v88;
            v26 = (char *)v76;
            v34 = v80;
            if (!v80)
              goto LABEL_10;
          }
LABEL_9:
          v80 = (v34 - 1) & v34;
          v81 = v30;
        }
      }
      v39 = v37 + 1;
      if (v37 + 1 < v78)
      {
        v38 = *(_QWORD *)(v77 + 8 * v39);
        if (v38)
        {
          ++v37;
          goto LABEL_19;
        }
        while (1)
        {
          v37 = v39 + 1;
          if (__OFADD__(v39, 1))
            break;
          if (v37 >= v78)
            goto LABEL_54;
          v38 = *(_QWORD *)(v77 + 8 * v37);
          ++v39;
          if (v38)
            goto LABEL_19;
        }
        __break(1u);
        goto LABEL_56;
      }
    }
LABEL_54:
    v70 = v74;
    v71 = v73;
    v72 = v79;
    swift_retain((unint64_t *)a3, v22, v23, (char *)v24);
    result = _NativeSet.extractSubset(using:count:)(v75, v71, v72, a3, a5, a6);
    *v70 = result;
    return result;
  }
  v50 = 0;
  v51 = *(_QWORD *)(a3 + 56);
  v77 = a3 + 56;
  v52 = 1 << *(_BYTE *)(a3 + 32);
  if (v52 < 64)
    v53 = ~(-1 << v52);
  else
    v53 = -1;
  v54 = v53 & v51;
  v78 = (unint64_t)(v52 + 63) >> 6;
  v79 = 0;
  v83 = a4 + 56;
  if (v54)
    goto LABEL_35;
LABEL_36:
  v35 = __OFADD__(v50, 1);
  v56 = v50 + 1;
  if (v35)
    goto LABEL_58;
  if (v56 >= v78)
    goto LABEL_54;
  v57 = *(_QWORD *)(v77 + 8 * v56);
  if (v57)
  {
LABEL_45:
    v80 = (v57 - 1) & v57;
    v81 = v56;
    for (j = __clz(__rbit64(v57)) + (v56 << 6); ; j = __clz(__rbit64(v54)) | (v50 << 6))
    {
      v59 = *(char **)(v11 + 72);
      v60 = *(_QWORD *)(a3 + 48) + (_QWORD)v59 * j;
      v84 = *(void (**)(char *, unint64_t, uint64_t))(v11 + 16);
      v85 = v59;
      v84(v14, v60, a5);
      v61 = v14;
      v62 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(a6 + 32))(*(_QWORD *)(a4 + 40), a5, a6);
      v63 = -1 << *(_BYTE *)(a4 + 32);
      v64 = v62 & ~v63;
      if (((*(_QWORD *)(v83 + ((v64 >> 3) & 0xFFFFFFFFFFFFF8)) >> v64) & 1) != 0)
      {
        v76 = j;
        v65 = ~v63;
        v66 = *(_QWORD *)(a6 + 8);
        v67 = *(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v66 + 8);
        while (1)
        {
          v84(v17, *(_QWORD *)(v86 + 48) + v64 * (_QWORD)v85, a5);
          v68 = v67(v17, v14, a5, v66);
          v69 = *(void (**)(char *, uint64_t))(v88 + 8);
          v69(v17, a5);
          if ((v68 & 1) != 0)
            break;
          v64 = (v64 + 1) & v65;
          v14 = v61;
          if (((*(_QWORD *)(v83 + ((v64 >> 3) & 0xFFFFFFFFFFFFF8)) >> v64) & 1) == 0)
            goto LABEL_52;
        }
        v14 = v61;
        result = (__objc2_class **)((uint64_t (*)(char *, uint64_t))v69)(v61, a5);
        *(unint64_t *)((char *)v75 + ((v76 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v76;
        v54 = v80;
        v35 = __OFADD__(v79++, 1);
        v50 = v81;
        a6 = v82;
        a4 = v86;
        a3 = v87;
        v11 = v88;
        if (v35)
          goto LABEL_60;
        if (!v80)
          goto LABEL_36;
      }
      else
      {
        v69 = *(void (**)(char *, uint64_t))(v11 + 8);
LABEL_52:
        result = (__objc2_class **)((uint64_t (*)(char *, uint64_t))v69)(v14, a5);
        v50 = v81;
        a6 = v82;
        a4 = v86;
        a3 = v87;
        v11 = v88;
        v54 = v80;
        if (!v80)
          goto LABEL_36;
      }
LABEL_35:
      v80 = (v54 - 1) & v54;
      v81 = v50;
    }
  }
  v58 = v56 + 1;
  if (v56 + 1 >= v78)
    goto LABEL_54;
  v57 = *(_QWORD *)(v77 + 8 * v58);
  if (v57)
  {
    ++v56;
    goto LABEL_45;
  }
  while (1)
  {
    v56 = v58 + 1;
    if (__OFADD__(v58, 1))
      break;
    if (v56 >= v78)
      goto LABEL_54;
    v57 = *(_QWORD *)(v77 + 8 * v56);
    ++v58;
    if (v57)
      goto LABEL_45;
  }
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
  return result;
}

__objc2_class **_NativeSet.genericIntersection<A>(_:)(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t *v11;
  char v12;
  unint64_t v13;
  size_t v14;
  int64x2_t *v15;
  int64x2_t *v17;
  __objc2_class **v19[2];

  v11 = (unint64_t *)isStackAllocationSafe;
  v19[1] = *(__objc2_class ***)MEMORY[0x1E0C80C00];
  v12 = *(_BYTE *)(a2 + 32);
  v13 = (unint64_t)((1 << v12) + 63) >> 6;
  v14 = 8 * v13;
  if ((v12 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v15 = (int64x2_t *)((char *)v19 - ((v14 + 15) & 0x3FFFFFFFFFFFFFF0));
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v13, v15);
    closure #1 in _NativeSet.genericIntersection<A>(_:)((unint64_t *)v15, v13, v11, (unint64_t *)a2, a3, a4, a5, a6, v19);
    swift_release(a2);
    return v19[0];
  }
  else
  {
    v17 = (int64x2_t *)swift_slowAlloc(v14, 0xFFFFFFFFFFFFFFFFLL);
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v13, v17);
    closure #1 in _NativeSet.genericIntersection<A>(_:)((unint64_t *)v17, v13, v11, (unint64_t *)a2, a3, a4, a5, a6, v19);
    swift_release(a2);
    swift_slowDealloc(v17);
    return v19[0];
  }
}

__objc2_class **closure #1 in _NativeSet.genericIntersection<A>(_:)@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, __objc2_class ***a9@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t AssociatedTypeWitness;
  uint64_t v27;
  char *v28;
  unint64_t AssociatedConformanceWitness;
  void (*v30)(unint64_t, unint64_t);
  int v31;
  unint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  __objc2_class **result;
  void (*v37)(char *, uint64_t);
  char *v38;
  unint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(char *, char *, uint64_t, uint64_t);
  uint64_t v45;
  void (*v46)(char *, unint64_t, uint64_t);
  char *v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __objc2_class ***v54;
  uint64_t v55;
  unint64_t *v56;
  void (*v57)(char *, char *, uint64_t);
  char *v58;
  uint64_t v59;
  uint64_t (*v60)(char *, uint64_t, uint64_t);
  void (*v61)(unint64_t, unint64_t);
  unint64_t v62;
  char *v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t *v68;
  _QWORD *v69;
  char *v70;

  v54 = a9;
  v67 = a3;
  v68 = a4;
  v53 = a2;
  v56 = a1;
  v69 = *(_QWORD **)(a5 - 8);
  v13 = MEMORY[0x1E0C80A78](a1);
  v65 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v70 = (char *)&v51 - v15;
  v19 = type metadata accessor for Optional(0, v18, v16, v17);
  v20 = MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v51 - v21;
  v23 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](v20);
  v25 = (char *)&v51 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a8, a6, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v52 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v28 = (char *)&v51 - v27;
  (*(void (**)(char *, unint64_t *, uint64_t))(v23 + 16))(v25, v67, a6);
  (*(void (**)(uint64_t, uint64_t))(a8 + 32))(a6, a8);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a8, a6, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v30 = *(void (**)(unint64_t, unint64_t))(AssociatedConformanceWitness + 16);
  v63 = v28;
  v64 = AssociatedTypeWitness;
  v61 = v30;
  v62 = AssociatedConformanceWitness;
  ((void (*)(unint64_t))v30)(AssociatedTypeWitness);
  v60 = (uint64_t (*)(char *, uint64_t, uint64_t))v69[6];
  v31 = v60(v22, 1, a5);
  v55 = 0;
  if (v31 == 1)
  {
LABEL_2:
    (*(void (**)(char *, unint64_t))(v52 + 8))(v63, v64);
    v32 = v68;
    swift_retain(v68, v33, v34, v35);
    result = _NativeSet.extractSubset(using:count:)(v56, v53, v55, (uint64_t)v32, a5, a7);
    *v54 = result;
    return result;
  }
  v55 = 0;
  v57 = (void (*)(char *, char *, uint64_t))v69[4];
  v58 = v22;
  v67 = v68 + 7;
  v59 = a7;
  v57(v70, v22, a5);
  while (1)
  {
    v39 = v68;
    v40 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(a7 + 32))(v68[5], a5, a7);
    v41 = -1 << *((_BYTE *)v39 + 32);
    v42 = v40 & ~v41;
    if (((*(unint64_t *)((char *)v67 + ((v42 >> 3) & 0xFFFFFFFFFFFFF8)) >> v42) & 1) != 0)
      break;
    v37 = (void (*)(char *, uint64_t))v69[1];
LABEL_5:
    v37(v70, a5);
    v38 = v58;
    a7 = v59;
LABEL_6:
    v61(v64, v62);
    if (v60(v38, 1, a5) == 1)
      goto LABEL_2;
    v57(v70, v38, a5);
  }
  v66 = ~v41;
  v43 = *(_QWORD *)(a7 + 8);
  v44 = *(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v43 + 8);
  v45 = v69[9];
  v46 = (void (*)(char *, unint64_t, uint64_t))v69[2];
  while (1)
  {
    v47 = v65;
    v46(v65, v68[6] + v45 * v42, a5);
    v48 = v44(v47, v70, a5, v43);
    v37 = (void (*)(char *, uint64_t))v69[1];
    v37(v47, a5);
    if ((v48 & 1) != 0)
      break;
    v42 = (v42 + 1) & v66;
    if (((*(unint64_t *)((char *)v67 + ((v42 >> 3) & 0xFFFFFFFFFFFFF8)) >> v42) & 1) == 0)
      goto LABEL_5;
  }
  result = (__objc2_class **)((uint64_t (*)(char *, uint64_t))v37)(v70, a5);
  v49 = (v42 >> 3) & 0x1FFFFFFFFFFFFFF8;
  v50 = *(unint64_t *)((char *)v56 + v49);
  *(unint64_t *)((char *)v56 + v49) = v50 | (1 << v42);
  v38 = v58;
  if ((v50 & (1 << v42)) != 0)
  {
    a7 = v59;
    goto LABEL_6;
  }
  a7 = v59;
  if (!__OFADD__(v55, 1))
  {
    ++v55;
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t _SwiftNewtypeWrapper<>.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v6 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v6, a1, (uint64_t)&protocol requirements base descriptor for RawRepresentable, associated type descriptor for RawRepresentable.RawValue);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = (char *)&v13 - v9;
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(a1, v6);
  v11 = (*(uint64_t (**)(unint64_t, uint64_t))(a4 + 16))(AssociatedTypeWitness, a4);
  (*(void (**)(char *, unint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
  return v11;
}

uint64_t _SwiftNewtypeWrapper<>.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v8 = *(_QWORD *)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v8, a2, (uint64_t)&protocol requirements base descriptor for RawRepresentable, associated type descriptor for RawRepresentable.RawValue);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v14 - v11;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(a2, v8);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(a5 + 24))(a1, AssociatedTypeWitness, a5);
  return (*(uint64_t (**)(char *, unint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
}

uint64_t _SwiftNewtypeWrapper<>._rawHashValue(seed:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  v8 = *(_QWORD *)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v8, a2, (uint64_t)&protocol requirements base descriptor for RawRepresentable, associated type descriptor for RawRepresentable.RawValue);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v15 - v11;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(a2, v8);
  v13 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(a5 + 32))(a1, AssociatedTypeWitness, a5);
  (*(void (**)(char *, unint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
  return v13;
}

double _SwiftNewtypeWrapper._toCustomAnyHashable()@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v2, a1);
  *(_QWORD *)(a2 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return result;
}

uint64_t _SwiftNewtypeWrapper<>._toCustomAnyHashable()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  _QWORD *boxed_opaque_existential_0Tm;
  _QWORD v10[4];

  v10[0] = a1;
  v10[1] = a2;
  v10[2] = a3;
  v10[3] = a4;
  a5[3] = type metadata accessor for _NewtypeWrapperAnyHashableBox(0, (uint64_t)v10);
  a5[4] = &protocol witness table for _NewtypeWrapperAnyHashableBox<A>;
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(a5);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(boxed_opaque_existential_0Tm, v5, a1);
}

uint64_t _NewtypeWrapperAnyHashableBox._canonicalBox.getter(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (***AssociatedTypeWitness)();
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11[3];
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1[4] + 8);
  v3 = a1[2];
  AssociatedTypeWitness = (uint64_t (***)())swift_getAssociatedTypeWitness(0, (const char *)v2, v3, (uint64_t)&protocol requirements base descriptor for RawRepresentable, associated type descriptor for RawRepresentable.RawValue);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v6 = (char *)&v11[-1] - v5;
  (*(void (**)(uint64_t, uint64_t))(v2 + 24))(v3, v2);
  AnyHashable.init<A>(_:)((uint64_t)v6, AssociatedTypeWitness, a1[5], (uint64_t)v11);
  v7 = v12;
  v8 = v13;
  __swift_project_boxed_opaque_existential_0Tm(v11, v12);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8);
  return __swift_destroy_boxed_opaque_existential_1Tm(v11);
}

uint64_t _ConcreteHashableBox._base.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *boxed_opaque_existential_0Tm;

  v3 = *(_QWORD *)(a1 + 16);
  a2[3] = v3;
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(a2);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(boxed_opaque_existential_0Tm, v2, v3);
}

uint64_t _NewtypeWrapperAnyHashableBox._unbox<A>()@<X0>(uint64_t a1@<X0>, Class *a2@<X1>, char *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  Class *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  char *v29;
  uint64_t *v30;
  char *v31;
  int v32;
  char *v34;
  uint64_t v35;
  Class *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  const char *v40;
  Class *AssociatedTypeWitness;
  char *v42;
  void (*v43)(char *, _QWORD, uint64_t, Class *);
  char *v44;

  v4 = v3;
  v44 = a3;
  v7 = *(Class **)(a1 + 16);
  v40 = *(const char **)(*(_QWORD *)(a1 + 32) + 8);
  AssociatedTypeWitness = (Class *)swift_getAssociatedTypeWitness(0, v40, (uint64_t)v7, (uint64_t)&protocol requirements base descriptor for RawRepresentable, associated type descriptor for RawRepresentable.RawValue);
  v8 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v39 = (uint64_t *)((char *)&v35 - v9);
  v10 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](v8);
  v42 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Optional(0, (uint64_t)a2, v12, v13);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v16);
  v21 = (char *)&v35 - v20;
  MEMORY[0x1E0C80A78](v19);
  v23 = (uint64_t *)((char *)&v35 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, Class *))(v24 + 16))(v23, v4, v7);
  v36 = v7;
  v25 = swift_dynamicCast(v21, v23, v7, a2, 6uLL);
  v26 = (uint64_t)*(a2 - 1);
  v43 = *(void (**)(char *, _QWORD, uint64_t, Class *))(v26 + 56);
  v43(v21, v25 ^ 1u, 1, a2);
  v27 = v10;
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v29 = v42;
  v28(v42, v4, a1);
  v37 = v15;
  v38 = v14;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v21, v14);
  if ((*(unsigned int (**)(char *, uint64_t, Class *))(v26 + 48))(v18, 1, a2) == 1)
  {
    v30 = v39;
    (*((void (**)(Class *))v40 + 3))(v36);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v29, a1);
    v31 = v44;
    v32 = swift_dynamicCast(v44, v30, AssociatedTypeWitness, a2, 6uLL);
    v43(v31, v32 ^ 1u, 1, a2);
    return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v18, v38);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v29, a1);
    v34 = v44;
    (*(void (**)(char *, char *, Class *))(v26 + 32))(v44, v18, a2);
    return ((uint64_t (*)(char *, _QWORD, uint64_t, Class *))v43)(v34, 0, 1, a2);
  }
}

uint64_t _NewtypeWrapperAnyHashableBox._downCastConditional<A>(into:)(char *a1, uint64_t a2, Class *a3)
{
  uint64_t v3;
  Class *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  int v26;
  void (*v27)(char *, uint64_t, uint64_t, Class *);
  uint64_t v28;
  void (*v29)(char *, char *, Class *);
  void (*v30)(char *, uint64_t);
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, Class *);
  char *v34;
  uint64_t v36;
  char *v37;
  Class *AssociatedTypeWitness;
  uint64_t v39;
  const char *v40;
  char *v41;

  v41 = a1;
  v5 = *(Class **)(a2 + 16);
  v40 = *(const char **)(*(_QWORD *)(a2 + 32) + 8);
  AssociatedTypeWitness = (Class *)swift_getAssociatedTypeWitness(0, v40, (uint64_t)v5, (uint64_t)&protocol requirements base descriptor for RawRepresentable, associated type descriptor for RawRepresentable.RawValue);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v7 = (uint64_t *)((char *)&v36 - v6);
  v39 = type metadata accessor for Optional(0, (uint64_t)a3, v8, v9);
  v10 = *(_QWORD *)(v39 - 8);
  v11 = MEMORY[0x1E0C80A78](v39);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v36 - v15;
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (uint64_t *)((char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = (uint64_t)*(a3 - 1);
  v21 = MEMORY[0x1E0C80A78](v17);
  v37 = (char *)&v36 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v36 - v23;
  (*(void (**)(uint64_t *, uint64_t, Class *))(v25 + 16))(v19, v3, v5);
  v26 = swift_dynamicCast(v16, v19, v5, a3, 6uLL);
  v27 = *(void (**)(char *, uint64_t, uint64_t, Class *))(v20 + 56);
  if (v26)
  {
    v28 = 1;
    v27(v16, 0, 1, a3);
    v29 = *(void (**)(char *, char *, Class *))(v20 + 32);
    v29(v24, v16, a3);
    v29(v41, v24, a3);
  }
  else
  {
    v27(v16, 1, 1, a3);
    v30 = *(void (**)(char *, uint64_t))(v10 + 8);
    v31 = v16;
    v32 = v39;
    v30(v31, v39);
    (*((void (**)(Class *))v40 + 3))(v5);
    if (swift_dynamicCast(v13, v7, AssociatedTypeWitness, a3, 6uLL))
    {
      v28 = 1;
      v27(v13, 0, 1, a3);
      v33 = *(void (**)(char *, char *, Class *))(v20 + 32);
      v34 = v37;
      v33(v37, v13, a3);
      v33(v41, v34, a3);
    }
    else
    {
      v27(v13, 1, 1, a3);
      v30(v13, v32);
      return 0;
    }
  }
  return v28;
}

void protocol witness for _AnyHashableBox._isEqual(to:) in conformance _NewtypeWrapperAnyHashableBox<A>()
{
  _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "_isEqual called on non-canonical AnyHashable box", 48, 2, "Swift/NewtypeWrapper.swift", 26, 2, 0x43uLL, 0);
}

void protocol witness for _AnyHashableBox._hashValue.getter in conformance _NewtypeWrapperAnyHashableBox<A>()
{
  _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "_hashValue called on non-canonical AnyHashable box", 50, 2, "Swift/NewtypeWrapper.swift", 26, 2, 0x47uLL, 0);
}

void protocol witness for _AnyHashableBox._hash(into:) in conformance _NewtypeWrapperAnyHashableBox<A>()
{
  _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "_hash(into:) called on non-canonical AnyHashable box", 52, 2, "Swift/NewtypeWrapper.swift", 26, 2, 0x4BuLL, 0);
}

void protocol witness for _AnyHashableBox._rawHashValue(_seed:) in conformance _NewtypeWrapperAnyHashableBox<A>()
{
  _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "_rawHashValue(_seed:) called on non-canonical AnyHashable box", 61, 2, "Swift/NewtypeWrapper.swift", 26, 2, 0x4FuLL, 0);
}

uint64_t protocol witness for _AnyHashableBox._unbox<A>() in conformance _NewtypeWrapperAnyHashableBox<A>@<X0>(Class *a1@<X0>, uint64_t a2@<X2>, char *a3@<X8>)
{
  return _NewtypeWrapperAnyHashableBox._unbox<A>()(a2, a1, a3);
}

uint64_t protocol witness for _AnyHashableBox._downCastConditional<A>(into:) in conformance _NewtypeWrapperAnyHashableBox<A>(char *a1, Class *a2, uint64_t a3)
{
  return _NewtypeWrapperAnyHashableBox._downCastConditional<A>(into:)(a1, a3, a2);
}

uint64_t _SwiftNewtypeWrapper<>._bridgeToObjectiveC()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v5 = *(_QWORD *)(a2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v5, a1, (uint64_t)&protocol requirements base descriptor for RawRepresentable, associated type descriptor for RawRepresentable.RawValue);
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v9 = (char *)&v12 - v8;
  (*(void (**)(uint64_t, uint64_t))(v5 + 24))(a1, v5);
  v10 = (*(uint64_t (**)(unint64_t, uint64_t))(a3 + 16))(AssociatedTypeWitness, a3);
  (*(void (**)(char *, unint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  return v10;
}

uint64_t static _SwiftNewtypeWrapper<>._forceBridgeFromObjectiveC(_:result:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v27;
  char *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;

  v30 = a1;
  v31 = a5;
  v29 = *(const char **)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v29, a3, (uint64_t)&protocol requirements base descriptor for RawRepresentable, associated type descriptor for RawRepresentable.RawValue);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v28 = (char *)&v27 - v9;
  v12 = type metadata accessor for Optional(0, a3, v10, v11);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v32 = (char *)&v27 - v14;
  v17 = type metadata accessor for Optional(0, AssociatedTypeWitness, v15, v16);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v27 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v27 - v22;
  v33 = v13;
  v34 = a2;
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a2, v12);
  (*(void (**)(char *, uint64_t, uint64_t, unint64_t))(v8 + 56))(v23, 1, 1, AssociatedTypeWitness);
  (*(void (**)(uint64_t, char *, unint64_t))(v31 + 24))(v30, v23, AssociatedTypeWitness);
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v21, v23, v17);
  if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v8 + 48))(v21, 1, AssociatedTypeWitness) == 1)
  {
    v24 = v32;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(v32, 1, 1, a3);
  }
  else
  {
    v25 = v28;
    (*(void (**)(char *, char *, unint64_t))(v8 + 32))(v28, v21, AssociatedTypeWitness);
    v24 = v32;
    (*((void (**)(char *, uint64_t))v29 + 2))(v25, a3);
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v33 + 32))(v34, v24, v12);
}

uint64_t static _SwiftNewtypeWrapper<>._conditionallyBridgeFromObjectiveC(_:result:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char v24;
  char *v25;
  char *v26;
  uint64_t v28;
  char *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;

  v31 = a1;
  v32 = a5;
  v30 = *(const char **)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v30, a3, (uint64_t)&protocol requirements base descriptor for RawRepresentable, associated type descriptor for RawRepresentable.RawValue);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v29 = (char *)&v28 - v9;
  v12 = type metadata accessor for Optional(0, a3, v10, v11);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v33 = (char *)&v28 - v14;
  v17 = type metadata accessor for Optional(0, AssociatedTypeWitness, v15, v16);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v28 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v28 - v22;
  v34 = v13;
  v35 = a2;
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a2, v12);
  (*(void (**)(char *, uint64_t, uint64_t, unint64_t))(v8 + 56))(v23, 1, 1, AssociatedTypeWitness);
  v24 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(v32 + 32))(v31, v23, AssociatedTypeWitness);
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v21, v23, v17);
  if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v8 + 48))(v21, 1, AssociatedTypeWitness) == 1)
  {
    v25 = v33;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(v33, 1, 1, a3);
  }
  else
  {
    v26 = v29;
    (*(void (**)(char *, char *, unint64_t))(v8 + 32))(v29, v21, AssociatedTypeWitness);
    v25 = v33;
    (*((void (**)(char *, uint64_t))v30 + 2))(v26, a3);
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v34 + 32))(v35, v25, v12);
  return v24 & 1;
}

uint64_t static _SwiftNewtypeWrapper<>._unconditionallyBridgeFromObjectiveC(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;

  v9 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v9, a2, (uint64_t)&protocol requirements base descriptor for RawRepresentable, associated type descriptor for RawRepresentable.RawValue);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v20 - v11;
  v15 = type metadata accessor for Optional(0, a2, v13, v14);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v20 - v16;
  (*(void (**)(uint64_t, unint64_t, uint64_t))(a4 + 40))(a1, AssociatedTypeWitness, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v9);
  v18 = *(_QWORD *)(a2 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1, a2) == 1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/NewtypeWrapper.swift", 26, 2, 0x8DuLL, 0);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v18 + 32))(a5, v17, a2);
}

uint64_t _SwiftNewtypeWrapper<>._bridgeToObjectiveC()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)(a2 + 8) + 24))(&v3);
  return v3;
}

uint64_t static _SwiftNewtypeWrapper<>._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void **, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v15;

  v8 = type metadata accessor for Optional(0, a3, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a2, v8);
  v15 = a1;
  v9 = *(_QWORD *)(a4 + 8);
  v10 = *(uint64_t (**)(void **, uint64_t, uint64_t))(v9 + 16);
  swift_unknownObjectRetain(a1, v11, v12, v13);
  return v10(&v15, a3, v9);
}

BOOL static _SwiftNewtypeWrapper<>._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  void (*v14)(void **, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _BOOL8 v18;
  uint64_t v20;
  void *v21;

  v8 = type metadata accessor for Optional(0, a3, a3, a4);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v20 - v10;
  v12 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v12(a2, v8);
  v21 = a1;
  v13 = *(_QWORD *)(a4 + 8);
  v14 = *(void (**)(void **, uint64_t, uint64_t))(v13 + 16);
  swift_unknownObjectRetain(a1, v15, v16, v17);
  v14(&v21, a3, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  v18 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 48))(v11, 1, a3) != 1;
  v12((uint64_t)v11, v8);
  return v18;
}

uint64_t static _SwiftNewtypeWrapper<>._unconditionallyBridgeFromObjectiveC(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(void **, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v19;
  void *v20;

  v9 = type metadata accessor for Optional(0, a2, a3, a4);
  MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v19 - v13;
  if (!a1
    || (v20 = a1,
        v15 = *(_QWORD *)(a3 + 8),
        v16 = *(void (**)(void **, uint64_t, uint64_t))(v15 + 16),
        swift_unknownObjectRetain(a1, v10, v11, v12),
        v16(&v20, a2, v15),
        v17 = *(_QWORD *)(a2 - 8),
        (*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v14, 1, a2) == 1))
  {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/NewtypeWrapper.swift", 26, 2, 0xADuLL, 0);
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v17 + 32))(a5, v14, a2);
}

uint64_t static UInt32.% infix(_:_:)(unsigned int a1, unsigned int a2)
{
  if (!a2)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero in remainder operation", 39, 2, "Swift/IntegerTypes.swift", 24, 2, 0x1AB6uLL, 0);
  return a1 % a2;
}

unint64_t specialized Unicode._InternalNFC.Iterator.next()()
{
  uint64_t v0;
  __objc2_class **v1;
  int v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  __objc2_class *v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  __objc2_class **v12;
  BOOL isUniquelyReferenced_nonNull_native;
  int64_t v14;

  v1 = *(__objc2_class ***)v0;
  if (*(_QWORD *)(*(_QWORD *)v0 + 16))
  {
    if ((*(_BYTE *)(v0 + 8) & 1) == 0)
    {
      specialized MutableCollection<>.reverse()();
      *(_BYTE *)(v0 + 8) = 1;
    }
    v2 = specialized RangeReplaceableCollection<>.removeLast()();
    LOBYTE(v3) = 0;
    LODWORD(v4) = v2;
    return v4 | ((unint64_t)v3 << 32);
  }
  *(_BYTE *)(v0 + 8) = 0;
  v5 = specialized Unicode._InternalNFD.Iterator.next()();
  if ((v5 & 0x1000000000000) != 0)
  {
LABEL_34:
    LODWORD(v4) = *(_DWORD *)(v0 + 12);
    LOBYTE(v3) = *(_BYTE *)(v0 + 16);
    *(_DWORD *)(v0 + 12) = 0;
    *(_BYTE *)(v0 + 16) = 1;
    return v4 | ((unint64_t)v3 << 32);
  }
  v4 = v5;
  while (1)
  {
    while ((*(_BYTE *)(v0 + 16) & 1) != 0)
    {
      if ((v4 & 0x7F800000000) != 0)
      {
        LOBYTE(v3) = 0;
        return v4 | ((unint64_t)v3 << 32);
      }
      LODWORD(v6) = v4;
LABEL_10:
      *(_DWORD *)(v0 + 12) = v6;
      *(_BYTE *)(v0 + 16) = 0;
      v4 = specialized Unicode._InternalNFD.Iterator.next()();
      if ((v4 & 0x1000000000000) != 0)
        goto LABEL_34;
    }
    v7 = *(_DWORD *)(v0 + 12);
    v8 = v1[2];
    if (!v8)
      break;
    v3 = (v4 >> 35);
    if (v3 > (WORD2(v1[(_QWORD)v8 + 3]) >> 3))
    {
      if (v4 >= 0x300 && (v4 & 0x600000000) != 0)
      {
        v6 = specialized Unicode._InternalNFC.Iterator.composeHangul(_:and:)(*(_DWORD *)(v0 + 12), v4);
        if ((v6 & 0x100000000) == 0)
          goto LABEL_10;
        LODWORD(v6) = _swift_stdlib_getComposition(v7, v4);
        if ((_DWORD)v6 != -1)
          goto LABEL_10;
      }
      goto LABEL_24;
    }
    if (!(v4 >> 35))
      goto LABEL_38;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native((uint64_t)v1);
    *(_QWORD *)v0 = v1;
    if (!isUniquelyReferenced_nonNull_native)
    {
      v14 = (int64_t)&v8->isa + 1;
      goto LABEL_33;
    }
LABEL_25:
    v11 = (unint64_t)v1[2];
    v10 = (unint64_t)v1[3];
    if (v11 >= v10 >> 1)
      v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v10 > 1), v11 + 1, 1, (uint64_t)v1);
    v1[2] = (__objc2_class *)(v11 + 1);
    v12 = &v1[v11];
    *((_DWORD *)v12 + 8) = v4;
    *((_WORD *)v12 + 18) = WORD2(v4);
    *(_QWORD *)v0 = v1;
    v4 = specialized Unicode._InternalNFD.Iterator.next()();
    if ((v4 & 0x1000000000000) != 0)
      goto LABEL_34;
  }
  if (v4 >= 0x300 && (v4 & 0x600000000) != 0)
  {
    v6 = specialized Unicode._InternalNFC.Iterator.composeHangul(_:and:)(*(_DWORD *)(v0 + 12), v4);
    if ((v6 & 0x100000000) == 0)
      goto LABEL_10;
    LODWORD(v6) = _swift_stdlib_getComposition(v7, v4);
    if ((_DWORD)v6 != -1)
      goto LABEL_10;
  }
  if ((v4 & 0x7F800000000) != 0)
  {
LABEL_24:
    v9 = swift_isUniquelyReferenced_nonNull_native((uint64_t)v1);
    *(_QWORD *)v0 = v1;
    if (v9)
      goto LABEL_25;
    v14 = (int64_t)&v1[2]->isa + 1;
LABEL_33:
    v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 1, (uint64_t)v1);
    *(_QWORD *)v0 = v1;
    goto LABEL_25;
  }
  LOBYTE(v3) = 0;
LABEL_38:
  *(_DWORD *)(v0 + 12) = v4;
  *(_BYTE *)(v0 + 16) = 0;
  LODWORD(v4) = v7;
  return v4 | ((unint64_t)v3 << 32);
}

Swift::Unicode::Scalar_optional __swiftcall Unicode._InternalNFC.Iterator.next()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __objc2_class **v3;
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  char *i;
  unint64_t v8;
  __int128 v9;
  __objc2_class *v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  __objc2_class **v14;
  __int128 v15;
  BOOL isUniquelyReferenced_nonNull_native;
  int64_t v17;
  Swift::tuple_scalar_Unicode_Scalar_normData_Unicode__NormData_optional v20;

  v3 = *(__objc2_class ***)v2;
  if (*(_QWORD *)(*(_QWORD *)v2 + 16))
  {
    if ((*(_BYTE *)(v2 + 8) & 1) == 0)
    {
      specialized MutableCollection<>.reverse()();
      *(_BYTE *)(v2 + 8) = 1;
    }
    v4 = specialized RangeReplaceableCollection<>.removeLast()();
    LOBYTE(v5) = 0;
    return (Swift::Unicode::Scalar_optional)(v4 | ((unint64_t)v5 << 32));
  }
  *(_BYTE *)(v2 + 8) = 0;
  type metadata accessor for Unicode._InternalNFD.Iterator(0, *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), v1);
  v20 = Unicode._InternalNFD.Iterator.next()();
  if ((*(_QWORD *)&v20.value.scalar._value & 0x1000000000000) != 0)
  {
LABEL_35:
    v4 = *(_DWORD *)(v2 + 12);
    LOBYTE(v5) = *(_BYTE *)(v2 + 16);
    *(_DWORD *)(v2 + 12) = 0;
    *(_BYTE *)(v2 + 16) = 1;
    return (Swift::Unicode::Scalar_optional)(v4 | ((unint64_t)v5 << 32));
  }
  v6 = *(_QWORD *)&v20.value.scalar._value;
  for (i = (char *)v3 + 36; ; i = (char *)v3 + 36)
  {
    while ((*(_BYTE *)(v2 + 16) & 1) != 0)
    {
      if ((v6 & 0x7F800000000) != 0)
      {
        LOBYTE(v5) = 0;
        v4 = v6;
        return (Swift::Unicode::Scalar_optional)(v4 | ((unint64_t)v5 << 32));
      }
      LODWORD(v8) = v6;
LABEL_10:
      *(_DWORD *)(v2 + 12) = v8;
      *(_BYTE *)(v2 + 16) = 0;
      *(Swift::tuple_scalar_Unicode_Scalar_normData_Unicode__NormData_optional *)&v9 = Unicode._InternalNFD.Iterator.next()();
      v6 = v9;
      if ((v9 & 0x1000000000000) != 0)
        goto LABEL_35;
    }
    v4 = *(_DWORD *)(v2 + 12);
    v10 = v3[2];
    if (!v10)
      break;
    v5 = (v6 >> 35);
    if (v5 > (*(unsigned __int16 *)&i[8 * (_QWORD)v10 - 8] >> 3))
    {
      if ((v6 & 0x600000000) != 0 && v6 >= 0x300)
      {
        v8 = specialized Unicode._InternalNFC.Iterator.composeHangul(_:and:)(*(_DWORD *)(v2 + 12), v6);
        if ((v8 & 0x100000000) == 0)
          goto LABEL_10;
        LODWORD(v8) = _swift_stdlib_getComposition(v4, v6);
        if ((_DWORD)v8 != -1)
          goto LABEL_10;
      }
      goto LABEL_22;
    }
    if (!(v6 >> 35))
      goto LABEL_39;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native((uint64_t)v3);
    *(_QWORD *)v2 = v3;
    if (!isUniquelyReferenced_nonNull_native)
    {
      v17 = (int64_t)&v10->isa + 1;
LABEL_31:
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17, 1, (uint64_t)v3);
      *(_QWORD *)v2 = v3;
    }
LABEL_23:
    v13 = (unint64_t)v3[2];
    v12 = (unint64_t)v3[3];
    if (v13 >= v12 >> 1)
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v12 > 1), v13 + 1, 1, (uint64_t)v3);
    v3[2] = (__objc2_class *)(v13 + 1);
    v14 = &v3[v13];
    *((_DWORD *)v14 + 8) = v6;
    *((_WORD *)v14 + 18) = WORD2(v6);
    *(_QWORD *)v2 = v3;
    *(Swift::tuple_scalar_Unicode_Scalar_normData_Unicode__NormData_optional *)&v15 = Unicode._InternalNFD.Iterator.next()();
    v6 = v15;
    if ((v15 & 0x1000000000000) != 0)
      goto LABEL_35;
  }
  if ((v6 & 0x600000000) != 0 && v6 >= 0x300)
  {
    v8 = specialized Unicode._InternalNFC.Iterator.composeHangul(_:and:)(*(_DWORD *)(v2 + 12), v6);
    if ((v8 & 0x100000000) == 0)
      goto LABEL_10;
    LODWORD(v8) = _swift_stdlib_getComposition(v4, v6);
    if ((_DWORD)v8 != -1)
      goto LABEL_10;
  }
  if ((v6 & 0x7F800000000) != 0)
  {
LABEL_22:
    v11 = swift_isUniquelyReferenced_nonNull_native((uint64_t)v3);
    *(_QWORD *)v2 = v3;
    if (v11)
      goto LABEL_23;
    v17 = (int64_t)&v3[2]->isa + 1;
    goto LABEL_31;
  }
  LOBYTE(v5) = 0;
LABEL_39:
  *(_DWORD *)(v2 + 12) = v6;
  *(_BYTE *)(v2 + 16) = 0;
  return (Swift::Unicode::Scalar_optional)(v4 | ((unint64_t)v5 << 32));
}

unint64_t specialized Unicode._InternalNFD.Iterator.next()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;
  Swift::String::Index v6;
  unint64_t v7;
  Swift::UInt64 v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  Swift::UInt64 v16;
  unsigned __int8 *v17;
  Swift::UInt32 value;
  uint64_t v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  Swift::UInt64 rawBits;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  Swift::UInt64 v29;
  unsigned __int8 *v30;
  int v31;
  int v32;
  unsigned int v33;
  int NormData;
  __objc2_class **v35;
  BOOL isUniquelyReferenced_nonNull_native;
  unint64_t v37;
  unint64_t v38;
  __objc2_class *v39;
  __objc2_class **v40;
  __objc2_class **v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  __int16 v50;
  int v51;
  __int16 v52;
  BOOL v53;
  _WORD *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;

  v1 = *(_QWORD *)v0;
  if (*(_QWORD *)(*(_QWORD *)v0 + 16))
    goto LABEL_2;
  *(_BYTE *)(v0 + 8) = 0;
  v6._rawBits = *(_QWORD *)(v0 + 16);
  v7 = *(_QWORD *)(v0 + 32);
  v8 = v6._rawBits >> 14;
  if (v6._rawBits >> 14 >= v7 >> 14)
    goto LABEL_82;
  do
  {
    v9 = *(_QWORD *)(v0 + 24);
    v11 = *(_QWORD *)(v0 + 40);
    v10 = *(_QWORD *)(v0 + 48);
    v12 = (v10 & 0x1000000000000000) == 0 || (v11 & 0x800000000000000) != 0;
    v13 = v6._rawBits & 0xC;
    v14 = 4 << v12;
    if ((v6._rawBits & 1) != 0 && v13 != v14)
    {
      if (v8 >= v7 >> 14 || v8 < v9 >> 14)
      {
        v42 = 143;
        goto LABEL_81;
      }
LABEL_22:
      if ((v10 & 0x1000000000000000) != 0)
        goto LABEL_61;
      goto LABEL_23;
    }
    if (v13 == v14)
      v6._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v6)._rawBits;
    if (v6._rawBits >> 14 < v9 >> 14 || v6._rawBits >> 14 >= v7 >> 14)
    {
      v42 = 43;
LABEL_81:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Substring index is out of bounds", 32, 2, "Swift/StringIndexValidation.swift", 33, 2, v42, 0);
    }
    if ((v6._rawBits & 1) != 0)
      goto LABEL_22;
    v6._rawBits = _StringGuts.scalarAlignSlow(_:)(v6)._rawBits & 0xFFFFFFFFFFFFFFF2 | 1;
    if ((v10 & 0x1000000000000000) != 0)
    {
LABEL_61:
      value = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v6._rawBits & 0xFFFFFFFFFFFF0000))._0._value;
      if (value < 0xC0)
        goto LABEL_31;
      goto LABEL_62;
    }
LABEL_23:
    v16 = v6._rawBits >> 16;
    if ((v10 & 0x2000000000000000) != 0)
    {
      v59 = v11;
      v60 = v10 & 0xFFFFFFFFFFFFFFLL;
      value = *((unsigned __int8 *)&v59 + v16);
      if (*((char *)&v59 + v16) < 0)
        __asm { BR              X9 }
    }
    else
    {
      if ((v11 & 0x1000000000000000) != 0)
        v17 = (unsigned __int8 *)((v10 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v17 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v11, v10);
      value = v17[v16];
      if ((char)v17[v16] < 0)
        __asm { BR              X10 }
    }
    if (value < 0xC0)
    {
LABEL_31:
      v19 = 0;
      goto LABEL_32;
    }
LABEL_62:
    NormData = _swift_stdlib_getNormData(value);
    v19 = NormData | ((value - 44032) >> 2 < 0xAE9);
    if ((NormData & 0x7F8) != 0)
    {
      v20 = 0;
      goto LABEL_34;
    }
LABEL_32:
    v1 = *(_QWORD *)v0;
    if (*(_QWORD *)(*(_QWORD *)v0 + 16))
      goto LABEL_82;
    v20 = 1;
LABEL_34:
    v22 = *(_QWORD *)(v0 + 40);
    v21 = *(_QWORD *)(v0 + 48);
    rawBits = *(_QWORD *)(v0 + 16);
    v24 = (v21 & 0x1000000000000000) == 0 || (v22 & 0x800000000000000) != 0;
    v25 = *(_QWORD *)(v0 + 16) & 0xCLL;
    v26 = 4 << v24;
    if ((rawBits & 1) != 0 && v25 != v26)
    {
      v27 = v22 & 0xFFFFFFFFFFFFLL;
      if ((v21 & 0x2000000000000000) != 0)
        v27 = HIBYTE(v21) & 0xF;
      if (v27 <= rawBits >> 16)
      {
        v57 = 121;
        goto LABEL_106;
      }
LABEL_49:
      if ((v21 & 0x1000000000000000) != 0)
        goto LABEL_66;
      goto LABEL_50;
    }
    if (v25 == v26)
      rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
    v28 = v22 & 0xFFFFFFFFFFFFLL;
    if ((v21 & 0x2000000000000000) != 0)
      v28 = HIBYTE(v21) & 0xF;
    if (v28 <= rawBits >> 16)
    {
      v57 = 31;
LABEL_106:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringIndexValidation.swift", 33, 2, v57, 0);
    }
    if ((rawBits & 1) != 0)
      goto LABEL_49;
    rawBits = rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
    if ((v21 & 0x1000000000000000) != 0)
    {
LABEL_66:
      v6._rawBits = String.UnicodeScalarView._foreignIndex(after:)((Swift::String::Index)rawBits)._rawBits;
      *(Swift::String::Index *)(v0 + 16) = v6;
      if ((v19 & 1) == 0)
        goto LABEL_58;
      goto LABEL_67;
    }
LABEL_50:
    v29 = rawBits >> 16;
    if ((v21 & 0x2000000000000000) != 0)
    {
      v59 = v22;
      v60 = v21 & 0xFFFFFFFFFFFFFFLL;
      v31 = *((unsigned __int8 *)&v59 + v29);
    }
    else
    {
      if ((v22 & 0x1000000000000000) != 0)
        v30 = (unsigned __int8 *)((v21 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v30 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v22, v21);
      v31 = v30[v29];
    }
    v32 = (char)v31;
    v33 = __clz(v31 ^ 0xFF) - 24;
    if (v32 >= 0)
      LOBYTE(v33) = 1;
    v6._rawBits = ((v29 + v33) << 16) | 5;
    *(Swift::String::Index *)(v0 + 16) = v6;
    if ((v19 & 1) == 0)
    {
LABEL_58:
      if ((v20 & 1) != 0)
      {
        v3 = 0;
        v4 = value | (unint64_t)(v19 << 32);
        goto LABEL_5;
      }
      goto LABEL_68;
    }
LABEL_67:
    if (value > 0xBF)
    {
      if (value - 55204 > 0xFFFFD45B)
        specialized Unicode._InternalNFD.Iterator.decomposeHangul(_:)(value);
      else
        specialized Unicode._InternalNFD.Iterator.decomposeSlow(_:with:)(value, v19);
      goto LABEL_73;
    }
LABEL_68:
    v35 = *(__objc2_class ***)v0;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)v0);
    *(_QWORD *)v0 = v35;
    if (!isUniquelyReferenced_nonNull_native)
    {
      v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)&v35[2]->isa + 1, 1, (uint64_t)v35);
      *(_QWORD *)v0 = v35;
    }
    v38 = (unint64_t)v35[2];
    v37 = (unint64_t)v35[3];
    v39 = (__objc2_class *)(v38 + 1);
    if (v38 >= v37 >> 1)
    {
      v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v37 > 1), v38 + 1, 1, (uint64_t)v35);
      v39 = (__objc2_class *)(v38 + 1);
      v35 = v41;
    }
    v35[2] = v39;
    v40 = &v35[v38];
    *((_DWORD *)v40 + 8) = value;
    *((_WORD *)v40 + 18) = v19;
    *(_QWORD *)v0 = v35;
LABEL_73:
    v7 = *(_QWORD *)(v0 + 32);
    v8 = v6._rawBits >> 14;
  }
  while (v6._rawBits >> 14 < v7 >> 14);
  v1 = *(_QWORD *)v0;
LABEL_82:
  v43 = *(_QWORD *)(v1 + 16);
  if (v43 >= 2)
  {
    v44 = 1;
    v45 = 44;
    do
    {
      v46 = *(_QWORD *)(v1 + 16);
      if (v44 >= v46)
      {
LABEL_100:
        v56 = 675;
        goto LABEL_101;
      }
      if ((*(unsigned __int16 *)(v1 + 8 * v44 + 36) >> 3) < (*(unsigned __int16 *)(v1 + 8 * v44 + 28) >> 3))
      {
        v47 = v44;
        v48 = v45;
        while (1)
        {
          if (v47 >= v46)
            goto LABEL_100;
          v49 = v47 - 1;
          if (v47 - 1 >= v46)
            goto LABEL_100;
          v58 = *(_DWORD *)(v1 + v48 - 4);
          v50 = *(_WORD *)(v1 + v48);
          v51 = *(_DWORD *)(v1 + v48 - 12);
          v52 = *(_WORD *)(v1 + v48 - 8);
          v53 = swift_isUniquelyReferenced_nonNull_native(v1);
          *(_QWORD *)v0 = v1;
          if (!v53)
          {
            v1 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
            *(_QWORD *)v0 = v1;
          }
          if (v49 + 1 >= *(_QWORD *)(v1 + 16))
            break;
          v54 = (_WORD *)(v1 + v48);
          *((_DWORD *)v54 - 1) = v51;
          *v54 = v52;
          *(_QWORD *)v0 = v1;
          v47 = v49;
          if (v49 >= *(_QWORD *)(v1 + 16))
            break;
          *((_DWORD *)v54 - 3) = v58;
          *(v54 - 4) = v50;
          *(_QWORD *)v0 = v1;
          if (!v49)
            goto LABEL_86;
          v46 = *(_QWORD *)(v1 + 16);
          if (v49 >= v46)
            goto LABEL_100;
          v55 = v1 + v48;
          v48 -= 8;
          if (((unsigned __int16)*(v54 - 4) >> 3) >= (*(unsigned __int16 *)(v55 - 16) >> 3))
            goto LABEL_86;
        }
        v56 = 688;
LABEL_101:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, v56, 0);
      }
LABEL_86:
      ++v44;
      v45 += 8;
    }
    while (v44 != v43);
    if (*(_QWORD *)(v1 + 16))
      goto LABEL_2;
LABEL_84:
    v4 = 0;
    *(_BYTE *)(v0 + 8) = 0;
    v3 = 1;
  }
  else
  {
    if (!v43)
      goto LABEL_84;
LABEL_2:
    if ((*(_BYTE *)(v0 + 8) & 1) == 0)
    {
      specialized MutableCollection<>.reverse()();
      *(_BYTE *)(v0 + 8) = 1;
    }
    v2 = specialized RangeReplaceableCollection<>.removeLast()();
    v3 = 0;
    v4 = v2 & 0xFFFFFFFFFFFFLL;
  }
LABEL_5:
  LOBYTE(v59) = v3;
  return v4 | ((unint64_t)v3 << 48);
}

Swift::tuple_scalar_Unicode_Scalar_normData_Unicode__NormData_optional __swiftcall Unicode._InternalNFD.Iterator.next()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t AssociatedConformanceWitness;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(_QWORD *, unint64_t *, unint64_t, uint64_t);
  void (*v17)(_QWORD *, _QWORD);
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  Swift::Bool v22;
  __objc2_class **v23;
  BOOL isUniquelyReferenced_nonNull_native;
  unint64_t v25;
  unint64_t v26;
  __objc2_class **v27;
  int NormData;
  uint64_t v29;
  unint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(_QWORD *, unint64_t *, unint64_t, uint64_t);
  void (*v36)(_QWORD *__return_ptr, unint64_t, uint64_t);
  unint64_t *v37;
  _QWORD v38[4];
  unint64_t v39;
  Swift::tuple_scalar_Unicode_Scalar_normData_Unicode__NormData_optional result;

  v2 = v1;
  v3 = v0;
  v5 = *(_QWORD *)(v0 + 16);
  v4 = *(const char **)(v0 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v4, v5, (uint64_t)&protocol requirements base descriptor for StringProtocol, associated type descriptor for StringProtocol.UnicodeScalarView);
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v9 = (char *)&v33 - v8;
  if (!*(_QWORD *)(*(_QWORD *)v2 + 16))
  {
    *(_BYTE *)(v2 + 8) = 0;
    v10 = *(int *)(v3 + 40);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v4, v5, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for StringProtocol, (uint64_t)&associated conformance descriptor for StringProtocol.StringProtocol.UnicodeScalarView: BidirectionalCollection);
    v12 = *(_QWORD *)(v2 + 16);
    v37 = (unint64_t *)(v2 + 16);
    v13 = v2 + v10;
    v14 = *(_QWORD *)(AssociatedConformanceWitness + 8);
    v36 = *(void (**)(_QWORD *__return_ptr, unint64_t, uint64_t))(v14 + 72);
    v36(v38, AssociatedTypeWitness, v14);
    if (v12 >> 14 < v38[0] >> 14)
    {
      v15 = v7;
      v16 = *(uint64_t (**)(_QWORD *, unint64_t *, unint64_t, uint64_t))(v14 + 80);
      v34 = v7;
      v35 = v16;
      while (1)
      {
        v39 = v12;
        v17 = (void (*)(_QWORD *, _QWORD))v35(v38, &v39, AssociatedTypeWitness, v14);
        v19 = *v18;
        v17(v38, 0);
        v20 = 0;
        if (v19 >= 0xC0
          && (NormData = _swift_stdlib_getNormData(v19),
              v20 = NormData | ((v19 - 44032) >> 2 < 0xAE9),
              (NormData & 0x7F8) != 0))
        {
          v21 = 0;
        }
        else
        {
          if (*(_QWORD *)(*(_QWORD *)v2 + 16))
            goto LABEL_22;
          v21 = 1;
        }
        (*(void (**)(char *, uint64_t, unint64_t))(v15 + 16))(v9, v13, AssociatedTypeWitness);
        (*(void (**)(unint64_t *, unint64_t, uint64_t))(v14 + 192))(v37, AssociatedTypeWitness, v14);
        (*(void (**)(char *, unint64_t))(v15 + 8))(v9, AssociatedTypeWitness);
        if ((v20 & 1) == 0)
          break;
        if (v19 <= 0xBF)
          goto LABEL_13;
        if ((v19 - 55204) > 0xFFFFD45B)
          specialized Unicode._InternalNFD.Iterator.decomposeHangul(_:)(v19);
        else
          Unicode._InternalNFD.Iterator.decomposeSlow(_:with:)((Swift::Unicode::Scalar)v19, (Swift::Unicode::_NormData)v20);
LABEL_5:
        v12 = *v37;
        v36(v38, AssociatedTypeWitness, v14);
        if (v12 >> 14 >= v38[0] >> 14)
          goto LABEL_22;
      }
      if (v21)
      {
        v31 = 0;
        v32 = v19 | (v20 << 32);
        goto LABEL_26;
      }
LABEL_13:
      v23 = *(__objc2_class ***)v2;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)v2);
      *(_QWORD *)v2 = v23;
      if (!isUniquelyReferenced_nonNull_native)
      {
        v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)&v23[2]->isa + 1, 1, (uint64_t)v23);
        *(_QWORD *)v2 = v23;
      }
      v26 = (unint64_t)v23[2];
      v25 = (unint64_t)v23[3];
      if (v26 >= v25 >> 1)
        v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v25 > 1), v26 + 1, 1, (uint64_t)v23);
      v23[2] = (__objc2_class *)(v26 + 1);
      v27 = &v23[v26];
      *((_DWORD *)v27 + 8) = v19;
      *((_WORD *)v27 + 18) = v20;
      *(_QWORD *)v2 = v23;
      v15 = v34;
      goto LABEL_5;
    }
LABEL_22:
    Unicode._NormDataBuffer.sort()();
    v32 = *(_QWORD *)(*(_QWORD *)v2 + 16);
    if (!v32)
    {
      *(_BYTE *)(v2 + 8) = 0;
      v31 = 1;
      goto LABEL_26;
    }
  }
  if ((*(_BYTE *)(v2 + 8) & 1) == 0)
  {
    specialized MutableCollection<>.reverse()();
    *(_BYTE *)(v2 + 8) = 1;
  }
  v29 = specialized RangeReplaceableCollection<>.removeLast()();
  v31 = 0;
  v32 = v29 & 0xFFFFFFFFFFFFLL;
LABEL_26:
  LOBYTE(v38[0]) = v31;
  v30 = v32 | ((unint64_t)v31 << 48);
  result.value = (Swift::tuple_scalar_Unicode_Scalar_normData_Unicode__NormData)v30;
  result.is_nil = v22;
  return result;
}

uint64_t protocol witness for IteratorProtocol.next() in conformance Unicode._InternalNFC<A>.Iterator@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  *(Swift::Unicode::Scalar_optional *)&result = Unicode._InternalNFC.Iterator.next()();
  *(_DWORD *)a1 = result;
  *(_BYTE *)(a1 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t Unicode._InternalNFC.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  void (*v11)(uint64_t *__return_ptr, unint64_t *, uint64_t);
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = type metadata accessor for Unicode._InternalNFD(0, v4, v5, a2);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v19 - v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 136))(v4, v5);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)v5, v4, (uint64_t)&protocol requirements base descriptor for StringProtocol, associated type descriptor for StringProtocol.UnicodeScalarView);
  v10 = *(_QWORD *)(swift_getAssociatedConformanceWitness(v5, v4, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for StringProtocol, (uint64_t)&associated conformance descriptor for StringProtocol.StringProtocol.UnicodeScalarView: BidirectionalCollection)+ 8);
  v11 = *(void (**)(uint64_t *__return_ptr, unint64_t *, uint64_t))(v10 + 64);
  v12 = swift_checkMetadataState(0, AssociatedTypeWitness);
  v11(&v20, v12, v10);
  v13 = v20;
  v15 = a3 + *(int *)(type metadata accessor for Unicode._InternalNFC.Iterator(0, v4, v5, v14) + 40);
  v17 = type metadata accessor for Unicode._InternalNFD.Iterator(0, v4, v5, v16);
  result = (*(uint64_t (**)(uint64_t, char *, unint64_t *))(*(v12 - 1) + 32))(v15 + *(int *)(v17 + 40), v8, v12);
  *(_QWORD *)v15 = &_swiftEmptyArrayStorage;
  *(_BYTE *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = v13;
  *(_QWORD *)a3 = &_swiftEmptyArrayStorage;
  *(_BYTE *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 12) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t Unicode._InternalNFD.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  const char *v4;
  uint64_t v5;
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  void (*v8)(uint64_t *__return_ptr, unint64_t *, uint64_t);
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(const char **)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v4, v5, (uint64_t)&protocol requirements base descriptor for StringProtocol, associated type descriptor for StringProtocol.UnicodeScalarView);
  v7 = *(_QWORD *)(swift_getAssociatedConformanceWitness((uint64_t)v4, v5, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for StringProtocol, (uint64_t)&associated conformance descriptor for StringProtocol.StringProtocol.UnicodeScalarView: BidirectionalCollection)+ 8);
  v8 = *(void (**)(uint64_t *__return_ptr, unint64_t *, uint64_t))(v7 + 64);
  v9 = swift_checkMetadataState(0, AssociatedTypeWitness);
  v8(&v14, v9, v7);
  v10 = v14;
  v12 = type metadata accessor for Unicode._InternalNFD.Iterator(0, v5, (uint64_t)v4, v11);
  result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *))(*(v9 - 1) + 16))(a2 + *(int *)(v12 + 40), v2, v9);
  *(_QWORD *)a2 = &_swiftEmptyArrayStorage;
  *(_BYTE *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = v10;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance Unicode._InternalNFC<A>(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence.makeIterator() in conformance Unicode._InternalNFC<A>(a1, a2, (void (*)(void))Unicode._InternalNFC.makeIterator());
}

__objc2_class **specialized Unicode._InternalNFD.Iterator.decomposeHangul(_:)(int a1)
{
  uint64_t *v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  __objc2_class **result;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;

  v2 = a1 - 44032;
  v3 = (a1 - 44032) / 0x24Cu;
  v4 = *v1;
  result = (__objc2_class **)swift_isUniquelyReferenced_nonNull_native(*v1);
  *v1 = v4;
  if ((result & 1) == 0)
  {
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v4 + 16) + 1, 1, v4);
    v4 = (uint64_t)result;
    *v1 = (uint64_t)result;
  }
  v7 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v8 = v7 + 1;
  if (v7 >= v6 >> 1)
  {
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v6 > 1), v7 + 1, 1, v4);
    v4 = (uint64_t)result;
  }
  *(_QWORD *)(v4 + 16) = v8;
  v9 = v4 + 8 * v7;
  *(_DWORD *)(v9 + 32) = v3 + 4352;
  *(_WORD *)(v9 + 36) = 0;
  v10 = (unsigned __int16)(v2 - 588 * v3) / 0x1Cu + 4449;
  *v1 = v4;
  v11 = *(_QWORD *)(v4 + 24);
  v12 = v7 + 2;
  if ((uint64_t)(v7 + 2) > (uint64_t)(v11 >> 1))
  {
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v11 > 1), v7 + 2, 1, v4);
    v4 = (uint64_t)result;
  }
  *(_QWORD *)(v4 + 16) = v12;
  v13 = v4 + 8 * v8;
  *(_DWORD *)(v13 + 32) = v10;
  *(_WORD *)(v13 + 36) = 4;
  *v1 = v4;
  if (v2 % 0x1C)
  {
    v14 = v2 % 0x1C + 4519;
    v15 = *(_QWORD *)(v4 + 24);
    if ((uint64_t)(v7 + 3) > (uint64_t)(v15 >> 1))
    {
      result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v15 > 1), v7 + 3, 1, v4);
      v4 = (uint64_t)result;
    }
    *(_QWORD *)(v4 + 16) = v7 + 3;
    v16 = v4 + 8 * v12;
    *(_DWORD *)(v16 + 32) = v14;
    *(_WORD *)(v16 + 36) = 4;
    *v1 = v4;
  }
  return result;
}

uint64_t specialized Unicode._InternalNFD.Iterator.decomposeSlow(_:with:)(int a1, __int16 a2)
{
  uint64_t *v2;
  uint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int v9;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;

  result = _swift_stdlib_getDecompositionEntry(a1);
  if ((result & 0x3FFFF) == a1)
  {
    v6 = _swift_stdlib_nfd_decomp[(unint64_t)result >> 18];
    if (!_swift_stdlib_nfd_decomp[(unint64_t)result >> 18])
      return result;
    v7 = (char *)(((unint64_t)result >> 18) + 0x1816BE1F1);
    v8 = *v2;
    do
    {
      v9 = *v7;
      if (*v7 < 0)
        __asm { BR              X9 }
      if (v6-- == 0)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
      if (v6 < 0)
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      result = swift_isUniquelyReferenced_nonNull_native(v8);
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v8 + 16) + 1, 1, v8);
        v8 = result;
      }
      v12 = *(_QWORD *)(v8 + 16);
      v11 = *(_QWORD *)(v8 + 24);
      if (v12 >= v11 >> 1)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v11 > 1), v12 + 1, 1, v8);
        v8 = result;
      }
      ++v7;
      *(_QWORD *)(v8 + 16) = v12 + 1;
      v13 = v8 + 8 * v12;
      *(_DWORD *)(v13 + 32) = v9;
      *(_WORD *)(v13 + 36) = 0;
    }
    while (v6 > 0);
  }
  else
  {
    v8 = *v2;
    result = swift_isUniquelyReferenced_nonNull_native(*v2);
    *v2 = v8;
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v8 + 16) + 1, 1, v8);
      v8 = result;
      *v2 = result;
    }
    v15 = *(_QWORD *)(v8 + 16);
    v14 = *(_QWORD *)(v8 + 24);
    if (v15 >= v14 >> 1)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v14 > 1), v15 + 1, 1, v8);
      v8 = result;
    }
    *(_QWORD *)(v8 + 16) = v15 + 1;
    v16 = v8 + 8 * v15;
    *(_DWORD *)(v16 + 32) = a1;
    *(_WORD *)(v16 + 36) = a2;
  }
  *v2 = v8;
  return result;
}

Swift::Void __swiftcall Unicode._InternalNFD.Iterator.decomposeSlow(_:with:)(Swift::Unicode::Scalar _, Swift::Unicode::_NormData with)
{
  uint64_t *v2;
  unsigned int DecompositionEntry;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __objc2_class **v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  __int16 v13;
  unint64_t v14;
  unint64_t v15;
  __objc2_class **v16;
  BOOL isUniquelyReferenced_nonNull_native;
  unint64_t v18;
  unint64_t v19;
  __objc2_class **v20;

  DecompositionEntry = _swift_stdlib_getDecompositionEntry(_._value);
  if ((DecompositionEntry & 0x3FFFF) == _._value)
  {
    v7 = _swift_stdlib_nfd_decomp[(unint64_t)DecompositionEntry >> 18];
    if (_swift_stdlib_nfd_decomp[(unint64_t)DecompositionEntry >> 18])
    {
      v8 = ((unint64_t)DecompositionEntry >> 18) + 0x1816BE1F1;
      v9 = (__objc2_class **)*v2;
      while (1)
      {
        v10 = _decodeScalar(_:startingAt:)(v8, v6, 0);
        if (v7 < v11)
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
        if (v8)
          v8 += v11;
        else
          v8 = 0;
        v7 -= v11;
        if (v7 < 0)
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
        v12 = v10;
        if (v7 && !v8)
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer has a nil start and nonzero count", 53, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x541uLL, 0);
        if (v10 >= 0x300)
        {
          v13 = _swift_stdlib_getNormData(v10) | ((v10 - 44032) >> 2 < 0xAE9);
          if (!swift_isUniquelyReferenced_nonNull_native((uint64_t)v9))
LABEL_18:
            v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)&v9[2]->isa + 1, 1, (uint64_t)v9);
        }
        else
        {
          v13 = 0;
          if (!swift_isUniquelyReferenced_nonNull_native((uint64_t)v9))
            goto LABEL_18;
        }
        v15 = (unint64_t)v9[2];
        v14 = (unint64_t)v9[3];
        if (v15 >= v14 >> 1)
          v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v14 > 1), v15 + 1, 1, (uint64_t)v9);
        v9[2] = (__objc2_class *)(v15 + 1);
        v16 = &v9[v15];
        *((_DWORD *)v16 + 8) = v12;
        *((_WORD *)v16 + 18) = v13;
        if (!v7)
          goto LABEL_24;
      }
    }
  }
  else
  {
    v9 = (__objc2_class **)*v2;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    *v2 = (uint64_t)v9;
    if (!isUniquelyReferenced_nonNull_native)
    {
      v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)&v9[2]->isa + 1, 1, (uint64_t)v9);
      *v2 = (uint64_t)v9;
    }
    v19 = (unint64_t)v9[2];
    v18 = (unint64_t)v9[3];
    if (v19 >= v18 >> 1)
      v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v18 > 1), v19 + 1, 1, (uint64_t)v9);
    v9[2] = (__objc2_class *)(v19 + 1);
    v20 = &v9[v19];
    *((Swift::Unicode::Scalar *)v20 + 8) = _;
    *((Swift::Unicode::_NormData *)v20 + 18) = with;
LABEL_24:
    *v2 = (uint64_t)v9;
  }
}

uint64_t static UInt32./ infix(_:_:)(unsigned int a1, unsigned int a2)
{
  if (!a2)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 0x19E2uLL, 0);
  return a1 / a2;
}

uint64_t _decodeScalar(_:startingAt:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t result;

  v3 = *(char *)(a1 + a3);
  result = *(unsigned __int8 *)(a1 + a3);
  if (v3 < 0)
    return ((uint64_t (*)(void))((char *)&loc_1814307F8
                              + 4 * byte_1816AC05F[(__clz(result ^ 0xFF) - 24) - 1]))();
  return result;
}

uint64_t sub_18143082C@<X0>(char a1@<W0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return *(_BYTE *)(a2 + a3 + 1) & 0x3F | ((a1 & 0x1F) << 6);
}

uint64_t sub_181430848@<X0>(char a1@<W0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return ((a1 & 0xF) << 12) | ((*(_BYTE *)(a2 + a3 + 1) & 0x3F) << 6) | *(_BYTE *)(a2 + a3 + 2) & 0x3Fu;
}

uint64_t sub_18143086C@<X0>(char a1@<W0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return ((a1 & 0xF) << 18) | ((*(_BYTE *)(a2 + a3 + 1) & 0x3F) << 12) | ((*(_BYTE *)(a2 + a3 + 2) & 0x3F) << 6) | *(_BYTE *)(a2 + a3 + 3) & 0x3Fu;
}

BOOL static String.Index.< infix(_:_:)(unint64_t a1, unint64_t a2)
{
  return a1 >> 14 < a2 >> 14;
}

Swift::Void __swiftcall Unicode._NormDataBuffer.sort()()
{
  uint64_t *v0;
  __objc2_class **v1;
  unint64_t v2;
  BOOL isUniquelyReferenced_nonNull_native;
  _WORD *v4;
  unint64_t i;
  unint64_t v6;
  unint64_t v7;
  _WORD *v8;
  int v9;
  __int16 v10;
  __int16 v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;

  v1 = (__objc2_class **)*v0;
  v2 = *(_QWORD *)(*v0 + 16);
  if (v2 >= 2)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v0);
    *v0 = (uint64_t)v1;
    if (!isUniquelyReferenced_nonNull_native)
      v1 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v1);
    *v0 = (uint64_t)v1;
    v4 = (_WORD *)v1 + 22;
    for (i = 1; i != v2; ++i)
    {
      v6 = (unint64_t)v1[2];
      if (i >= v6)
      {
LABEL_16:
        v14 = 675;
        goto LABEL_17;
      }
      v7 = i - 1;
      if ((WORD2(v1[i + 4]) >> 3) < (WORD2(v1[i + 3]) >> 3))
      {
        v8 = v4;
        while (1)
        {
          if (v7 + 1 >= v6 || v7 >= v6)
            goto LABEL_16;
          v9 = *((_DWORD *)v8 - 1);
          v10 = *v8;
          v11 = *(v8 - 4);
          *((_DWORD *)v8 - 1) = *((_DWORD *)v8 - 3);
          *v8 = v11;
          if (v7 >= (unint64_t)v1[2])
            break;
          *((_DWORD *)v8 - 3) = v9;
          *(v8 - 4) = v10;
          if (!v7)
            goto LABEL_5;
          v6 = (unint64_t)v1[2];
          if (v7 >= v6)
            goto LABEL_16;
          v12 = (unsigned __int16)*(v8 - 4);
          v13 = (unsigned __int16)*(v8 - 8);
          v8 -= 4;
          --v7;
          if ((v12 >> 3) >= (v13 >> 3))
            goto LABEL_5;
        }
        v14 = 688;
LABEL_17:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, v14, 0);
      }
LABEL_5:
      v4 += 4;
    }
    *v0 = (uint64_t)v1;
  }
}

uint64_t protocol witness for IteratorProtocol.next() in conformance Unicode._InternalNFD<A>.Iterator@<X0>(uint64_t a1@<X8>)
{
  char v2;
  uint64_t result;
  Swift::tuple_scalar_Unicode_Scalar_normData_Unicode__NormData_optional v4;

  v4 = Unicode._InternalNFD.Iterator.next()();
  *(_DWORD *)a1 = v4.value.scalar._value;
  *(_WORD *)(a1 + 4) = v4.value.normData.rawValue;
  *(_BYTE *)(a1 + 6) = v2 & 1;
  LODWORD(result) = v4.value.scalar._value;
  WORD2(result) = v4.value.normData.rawValue;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance Unicode._InternalNFD<A>(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence.makeIterator() in conformance Unicode._InternalNFC<A>(a1, a2, (void (*)(void))Unicode._InternalNFD.makeIterator());
}

uint64_t protocol witness for Sequence.makeIterator() in conformance Unicode._InternalNFC<A>(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v3;

  a3();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v3, a1);
}

uint64_t ObjectIdentifier.debugDescription.getter(unint64_t a1)
{
  Swift::Int v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t i;
  Swift::Int v11;
  const char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  BOOL v18;
  uint64_t v19;
  int64_t v20;
  char v21;
  int64_t v22;
  char v23;
  BOOL v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char *v31;
  size_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unsigned __int8 *v36;
  unint64_t v37;
  unint64_t v38;
  Swift::String::Index v39;
  Swift::String::Index v40;
  Swift::String::Index v41;
  Swift::String::Index v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  Swift::String v73;
  uint64_t countAndFlagsBits;
  void *object;
  unint64_t v76;
  Swift::Int v77;
  Swift::Int v78;
  Swift::Int v79;
  void *v80;
  void *v81;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  int64_t v92;
  char v93;
  int64_t v94;
  char v95;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  size_t v102;
  uint64_t v103;
  char *v104;
  int v105;
  char v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  char v112;
  uint64_t v113;
  unint64_t v114;
  Swift::Int v115;
  unint64_t v116;
  char *v117;
  size_t v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  size_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  Swift::String::Index v127;
  Swift::String::Index v128;
  Swift::String::Index v129;
  Swift::String::Index v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  char v142;
  uint64_t v143;
  unint64_t v144;
  Swift::Int v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  int64_t v151;
  char v152;
  BOOL v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  Swift::String::Index v161;
  Swift::String::Index v162;
  Swift::String::Index v163;
  Swift::String::Index v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  char v172;
  char *v173;
  size_t v174;
  Swift::String::Index v176;
  Swift::String::Index v177;
  Swift::String::Index v178;
  Swift::String::Index v179;
  Swift::Int v180;
  Swift::String::Index v181;
  Swift::String::Index v182;
  Swift::String::Index v183;
  Swift::String::Index v184;
  Swift::Int v185;
  Swift::Int v186;
  unsigned __int8 *v187;
  uint64_t v188;
  unsigned __int8 *v189;
  uint64_t v190;
  unsigned __int8 *v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t v195;
  Swift::Int v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  __int128 v202;
  uint64_t v203;
  unint64_t v204;

  v3 = specialized static String._createEmpty(withInitialCapacity:)(20);
  v7 = v3;
  v8 = v4;
  v203 = v3;
  v204 = v4;
  v9 = HIBYTE(v4) & 0xF;
  i = v3 & 0xFFFFFFFFFFFFLL;
  if ((v4 & 0x2000000000000000) != 0)
    v11 = HIBYTE(v4) & 0xF;
  else
    v11 = v3 & 0xFFFFFFFFFFFFLL;
  v12 = "ObjectIdentifier(";
  if (!v11 && (v3 & ~v4 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease(v4);
    v203 = 0xD000000000000011;
    v204 = 0x8000000181762F90 | 0x8000000000000000;
    goto LABEL_86;
  }
  if ((v4 & 0x2000000000000000) != 0 && (0x8000000181762F90 & 0x2000000000000000) != 0)
  {
    v13 = v9 + ((0x8000000181762F90 >> 56) & 0xF);
    if (v13 <= 0xF)
    {
      i = 0x8000000181762F90;
      v37 = (0x8000000181762F90 >> 56) & 0xF;
      if (v37)
      {
        v61 = 0;
        v62 = 0;
        v38 = v4;
        do
        {
          v63 = v9 + v62;
          v64 = v62 + 1;
          v65 = 0x8000000181762F90 | 0x8000000000000000;
          if (v62 < 8)
            v65 = 0xD000000000000011;
          v66 = v65 >> (v61 & 0x38);
          v67 = (8 * v9 + v61) & 0x38;
          v68 = (-255 << v67) - 1;
          v69 = (unint64_t)v66 << v67;
          v70 = v69 | v68 & v38;
          v71 = v69 | v68 & v7;
          if (v63 < 8)
            v7 = v71;
          else
            v38 = v70;
          v61 += 8;
          v62 = v64;
        }
        while (v37 != v64);
      }
      else
      {
        v38 = v4;
      }
      swift_bridgeObjectRelease(v4);
      swift_bridgeObjectRelease(0x8000000181762F90 | 0x8000000000000000);
      v72 = 0xA000000000000000;
      if (!(v7 & 0x8080808080808080 | v38 & 0x80808080808080))
        v72 = 0xE000000000000000;
      v60 = v72 & 0xFF00000000000000 | (v13 << 56) | v38 & 0xFFFFFFFFFFFFFFLL;
      goto LABEL_85;
    }
  }
  v14 = 0x8000000181762F90 | 0x8000000000000000;
  if ((0x8000000181762F90 & 0x2000000000000000) != 0)
    v15 = (0x8000000181762F90 >> 56) & 0xF;
  else
    v15 = 17;
  swift_bridgeObjectRetain_n(0x8000000181762F90 | 0x8000000000000000, 2, v5, v6);
  if ((0x8000000181762F90 & 0x1000000000000000) != 0)
    goto LABEL_227;
  swift_bridgeObjectRetain_n(0x8000000181762F90 | 0x8000000000000000, 4, v16, v17);
  v1 = v15;
  if ((v8 & 0x1000000000000000) != 0)
    goto LABEL_230;
LABEL_14:
  v18 = __OFADD__(v11, v1);
  v11 += v1;
  if (v18)
    goto LABEL_232;
LABEL_15:
  v19 = v7 & ~v8;
  if ((v19 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v8 & 0xFFFFFFFFFFFFFFFLL))
  {
    v20 = _StringGuts.nativeUnusedCapacity.getter(v7, v8);
    if ((v21 & 1) != 0)
      goto LABEL_255;
    if (v11 > 15)
      goto LABEL_23;
    if ((v8 & 0x2000000000000000) == 0)
    {
      if (v20 < v1)
      {
LABEL_48:
        swift_bridgeObjectRelease_n((unint64_t)(v12 + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000, 5);
        if ((v8 & 0x1000000000000000) == 0)
        {
          if ((v7 & 0x1000000000000000) != 0)
          {
            v36 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
          }
          else
          {
            v36 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v7, v8);
            i = v33;
          }
          swift_bridgeObjectRetain(v8, v33, v34, v35);
          closure #1 in _StringGuts._convertedToSmall()(v36, i, &v202);
          swift_bridgeObjectRelease(v8);
          i = *((_QWORD *)&v202 + 1);
          v7 = v202;
          goto LABEL_57;
        }
        goto LABEL_250;
      }
LABEL_23:
      v22 = _StringGuts.nativeUnusedCapacity.getter(v7, v8);
      v25 = (v23 & 1) == 0 && v22 >= v1;
      if ((v19 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v8 & 0xFFFFFFFFFFFFFFFLL))
      {
        if (v25)
        {
LABEL_41:
          i = (unint64_t)(v12 + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000;
          swift_bridgeObjectRelease_n(i, 4);
          if (((unint64_t)(v12 + 0x7FFFFFFFFFFFFFE0) & 0x1000000000000000) != 0)
          {
            swift_bridgeObjectRelease((unint64_t)(v12 + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000);
            _StringGuts._foreignAppendInPlace(_:)(0xD000000000000011, (unint64_t)(v12 + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000, 0, v15);
          }
          else
          {
            v30 = ((unint64_t)(v12 + 0x7FFFFFFFFFFFFFE0) & 0x2000000000000000) == 0
               || (i & 0x4000000000000000) != 0;
            swift_bridgeObjectRelease((unint64_t)(v12 + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000);
            if (((unint64_t)(v12 + 0x7FFFFFFFFFFFFFE0) & 0x2000000000000000) != 0)
            {
              i = (unint64_t)(v12 + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000;
              swift_bridgeObjectRelease(i);
              *(_QWORD *)&v202 = 0xD000000000000011;
              *((_QWORD *)&v202 + 1) = (unint64_t)(v12 + 0x7FFFFFFFFFFFFFE0) & 0xFFFFFFFFFFFFFFLL;
              v117 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v15, (uint64_t)&v202, ((unint64_t)(v12 + 0x7FFFFFFFFFFFFFE0) >> 56) & 0xF);
              _StringGuts.appendInPlace(_:isASCII:)(v117, v118, v30);
              swift_bridgeObjectRelease(i);
              goto LABEL_86;
            }
            i = (unint64_t)(v12 + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000;
            v31 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v15, ((unint64_t)(v12 + 0x7FFFFFFFFFFFFFE0) & 0xFFFFFFFFFFFFFFFLL) + 32, 17);
            _StringGuts.appendInPlace(_:isASCII:)(v31, v32, v30);
          }
          swift_bridgeObjectRelease_n(i, 2);
          goto LABEL_86;
        }
LABEL_34:
        v26 = _StringGuts.nativeCapacity.getter(v7, v8);
        if ((v27 & 1) != 0)
          v28 = 0;
        else
          v28 = v26;
        if (v28 + 0x4000000000000000 < 0)
          goto LABEL_249;
        v29 = 2 * v28;
        if (v29 > v11)
          v11 = v29;
      }
      else if (!v25)
      {
        goto LABEL_34;
      }
      _StringGuts.grow(_:)(v11);
      goto LABEL_41;
    }
  }
  else
  {
    if (v11 > 15)
      goto LABEL_23;
    if ((v8 & 0x2000000000000000) == 0)
      goto LABEL_48;
  }
  swift_bridgeObjectRelease_n((unint64_t)(v12 + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000, 5);
  for (i = v8; ; i = v193)
  {
LABEL_57:
    v39._rawBits = (v15 << 16) | 1;
    v40._rawBits = 1;
    v41._rawBits = _StringGuts.validateScalarRange(_:)(v40, v39, 0xD000000000000011, (unint64_t)(v12 + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000);
    if (v41._rawBits < 0x10000)
      v41._rawBits |= 3;
    v43 = specialized String.init(_:)(v41, v42, 0xD000000000000011, (unint64_t)(v12 + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000);
    v45 = v44;
    swift_bridgeObjectRelease((unint64_t)(v12 + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000);
    if ((v45 & 0x2000000000000000) != 0)
    {
      swift_bridgeObjectRelease(v45);
    }
    else if ((v45 & 0x1000000000000000) != 0)
    {
      v43 = _StringGuts._foreignConvertedToSmall()(v43, v45);
      v200 = v199;
      swift_bridgeObjectRelease(v45);
      v45 = v200;
    }
    else
    {
      if ((v43 & 0x1000000000000000) != 0)
      {
        v191 = (unsigned __int8 *)((v45 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v192 = v43 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v191 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v43, v45);
      }
      closure #1 in _StringGuts._convertedToSmall()(v191, v192, &v202);
      swift_bridgeObjectRelease(v45);
      v45 = *((_QWORD *)&v202 + 1);
      v43 = v202;
    }
    v46 = HIBYTE(i) & 0xF;
    v47 = HIBYTE(v45) & 0xF;
    v1 = v47 + v46;
    if ((unint64_t)(v47 + v46) > 0xF)
      goto LABEL_254;
    if (v47)
    {
      v48 = 0;
      v49 = 0;
      do
      {
        v50 = v46 + v49;
        v51 = v49 + 1;
        if (v49 >= 8)
          v52 = v45;
        else
          v52 = v43;
        v53 = v52 >> (v48 & 0x38);
        v54 = (8 * v46 + v48) & 0x38;
        v55 = (-255 << v54) - 1;
        v56 = (unint64_t)v53 << v54;
        v57 = v56 | v55 & i;
        v58 = v56 | v55 & v7;
        if (v50 < 8)
          v7 = v58;
        else
          i = v57;
        v48 += 8;
        v49 = v51;
      }
      while (v47 != v51);
    }
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease((unint64_t)(v12 + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000);
    v59 = 0xA000000000000000;
    if (!(v7 & 0x8080808080808080 | i & 0x80808080808080))
      v59 = 0xE000000000000000;
    v60 = v59 & 0xFF00000000000000 | (v1 << 56) | i & 0xFFFFFFFFFFFFFFLL;
LABEL_85:
    v203 = v7;
    v204 = v60;
LABEL_86:
    v73 = _uint64ToString(_:radix:uppercase:)(a1, 16, 0);
    countAndFlagsBits = v73._countAndFlagsBits;
    object = v73._object;
    if (((uint64_t)v73._object & 0x1000000000000000) != 0)
    {
      v77 = String.UTF16View._foreignCount()();
    }
    else
    {
      v76 = ((unint64_t)v73._object >> 56) & 0xF;
      if (((uint64_t)v73._object & 0x2000000000000000) == 0)
        v76 = v73._countAndFlagsBits;
      v77 = String.UTF16View._nativeGetOffset(for:)((Swift::String::Index)((v76 << 16) | 7));
    }
    v78 = 16 - v77;
    if (__OFSUB__(16, v77))
    {
      __break(1u);
LABEL_220:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    }
    if (v78 < 0)
      goto LABEL_220;
    if (v78)
    {
      v79 = v77 - 16;
      do
      {
        countAndFlagsBits = specialized static String.+ infix(_:_:)(0x30uLL, 0xE100000000000000, countAndFlagsBits, (unint64_t)object);
        v81 = v80;
        swift_bridgeObjectRelease(0xE100000000000000);
        swift_bridgeObjectRelease((uint64_t)object);
        object = v81;
      }
      while (!__CFADD__(v79++, 1));
    }
    else
    {
      v81 = v73._object;
    }
    v7 = specialized static String.+ infix(_:_:)(0x7830uLL, 0xE200000000000000, countAndFlagsBits, (unint64_t)v81);
    a1 = v83;
    swift_bridgeObjectRelease(0xE200000000000000);
    swift_bridgeObjectRelease((uint64_t)v81);
    v8 = v203;
    v11 = v204;
    v86 = HIBYTE(v204) & 0xF;
    if ((v204 & 0x2000000000000000) != 0)
      v87 = HIBYTE(v204) & 0xF;
    else
      v87 = v203 & 0xFFFFFFFFFFFFLL;
    if (!v87 && (v203 & ~v204 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease(v204);
      v203 = v7;
      v204 = a1;
      goto LABEL_187;
    }
    v15 = a1 & 0x2000000000000000;
    i = HIBYTE(a1) & 0xF;
    if ((v204 & 0x2000000000000000) != 0 && v15)
    {
      v88 = v86 + i;
      if (v86 + i <= 0xF)
      {
        if (i)
        {
          v106 = 0;
          v107 = 0;
          v1 = v204;
          do
          {
            v108 = v86 + v107;
            v109 = v107 + 1;
            if (v107 >= 8)
              v110 = a1;
            else
              v110 = v7;
            v111 = v110 >> (v106 & 0x38);
            v112 = (8 * v86 + v106) & 0x38;
            v113 = (-255 << v112) - 1;
            v114 = (unint64_t)v111 << v112;
            v115 = v114 | v113 & v1;
            v116 = v114 | v113 & v8;
            if (v108 < 8)
              v8 = v116;
            else
              v1 = v115;
            v106 += 8;
            v107 = v109;
          }
          while (i != v109);
        }
        else
        {
          v1 = v204;
        }
        swift_bridgeObjectRelease(v204);
        swift_bridgeObjectRelease(a1);
        v148 = 0xA000000000000000;
        if (!(v8 & 0x8080808080808080 | v1 & 0x80808080808080))
          v148 = 0xE000000000000000;
        v203 = v8;
        v204 = v148 & 0xFF00000000000000 | (v88 << 56) | v1 & 0xFFFFFFFFFFFFFFLL;
        goto LABEL_187;
      }
      v15 = 1;
    }
    v1 = v15 ? HIBYTE(a1) & 0xF : v7 & 0xFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain_n(a1, 2, v84, v85);
    if ((a1 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain_n(a1, 5, v89, v90);
      v176._rawBits = 1;
      v177._rawBits = (v1 << 16) | 1;
      v178._rawBits = _StringGuts.validateScalarRange(_:)(v176, v177, v7, a1);
      if (v178._rawBits < 0x10000)
        v178._rawBits |= 3;
      v12 = (const char *)specialized Collection.count.getter(v178, v179, v7, a1);
      swift_bridgeObjectRelease(a1);
      if ((v11 & 0x1000000000000000) == 0)
      {
LABEL_112:
        v18 = __OFADD__(v87, v12);
        v14 = (uint64_t)&v12[v87];
        if (v18)
          goto LABEL_226;
        goto LABEL_113;
      }
    }
    else
    {
      swift_bridgeObjectRetain_n(a1, 4, v89, v90);
      v12 = (const char *)v1;
      if ((v11 & 0x1000000000000000) == 0)
        goto LABEL_112;
    }
    v180 = String.UTF8View._foreignCount()();
    v14 = (uint64_t)&v12[v180];
    if (__OFADD__(v180, v12))
    {
LABEL_226:
      __break(1u);
LABEL_227:
      swift_bridgeObjectRetain_n(v14, 5, v16, v17);
      v181._rawBits = 1;
      v182._rawBits = (v15 << 16) | 1;
      v183._rawBits = _StringGuts.validateScalarRange(_:)(v181, v182, 0xD000000000000011, v14);
      if (v183._rawBits < 0x10000)
        v183._rawBits |= 3;
      v1 = specialized Collection.count.getter(v183, v184, 0xD000000000000011, v14);
      swift_bridgeObjectRelease(v14);
      if ((v8 & 0x1000000000000000) != 0)
      {
LABEL_230:
        v185 = String.UTF8View._foreignCount()();
        v11 = v185 + v1;
        if (!__OFADD__(v185, v1))
          goto LABEL_15;
LABEL_232:
        __break(1u);
        goto LABEL_233;
      }
      goto LABEL_14;
    }
LABEL_113:
    if ((v8 & ~v11 & 0x2000000000000000) == 0
      || !swift_isUniquelyReferenced_nonNull_native(v11 & 0xFFFFFFFFFFFFFFFLL))
    {
      break;
    }
    v201 = v7 & 0xFFFFFFFFFFFFLL;
    v91 = v203;
    v8 = v204;
    v92 = _StringGuts.nativeUnusedCapacity.getter(v203, v204);
    if ((v93 & 1) != 0)
      goto LABEL_255;
    if (v14 <= 15)
    {
      if ((v8 & 0x2000000000000000) != 0)
      {
        v105 = 0;
        v11 = v8;
        goto LABEL_165;
      }
      v11 = v8;
      if (v92 < (uint64_t)v12)
        goto LABEL_145;
    }
LABEL_122:
    v94 = _StringGuts.nativeUnusedCapacity.getter(v91, v8);
    v11 = (v95 & 1) == 0 && v94 >= (uint64_t)v12;
    if ((v91 & ~v8 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v8 & 0xFFFFFFFFFFFFFFFLL))
    {
      if ((v11 & 1) != 0)
        goto LABEL_140;
    }
    else if ((v11 & 1) != 0)
    {
      goto LABEL_139;
    }
    v97 = _StringGuts.nativeCapacity.getter(v91, v8);
    if ((v98 & 1) != 0)
      v99 = 0;
    else
      v99 = v97;
    if (v99 + 0x4000000000000000 >= 0)
    {
      v100 = 2 * v99;
      if (v100 > v14)
        v14 = v100;
LABEL_139:
      _StringGuts.grow(_:)(v14);
LABEL_140:
      swift_bridgeObjectRelease_n(a1, 4);
      if ((a1 & 0x1000000000000000) != 0)
      {
        swift_bridgeObjectRelease(a1);
        _StringGuts._foreignAppendInPlace(_:)(v7, a1, 0, v1);
      }
      else
      {
        if (v15)
        {
          swift_bridgeObjectRelease_n(a1, 2);
          *(_QWORD *)&v202 = v7;
          *((_QWORD *)&v202 + 1) = a1 & 0xFFFFFFFFFFFFFFLL;
          v101 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, i, (uint64_t)&v202, i);
          _StringGuts.appendInPlace(_:isASCII:)(v101, v102, (a1 & 0x4000000000000000) != 0);
          swift_bridgeObjectRelease(a1);
          goto LABEL_187;
        }
        if ((v7 & 0x1000000000000000) != 0)
        {
          swift_bridgeObjectRelease(a1);
          v119 = (id)((a1 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v120 = v201;
          v121 = v201;
        }
        else
        {
          v119 = _StringObject.sharedUTF8.getter(v7, a1);
          v121 = v194;
          swift_bridgeObjectRelease(a1);
          if (v121 < v201)
            _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
          v120 = v201;
        }
        v122 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v120, (uint64_t)v119, v121);
        _StringGuts.appendInPlace(_:isASCII:)(v122, v123, v7 < 0);
      }
      swift_bridgeObjectRelease_n(a1, 2);
      goto LABEL_187;
    }
    __break(1u);
LABEL_249:
    __break(1u);
LABEL_250:
    v7 = _StringGuts._foreignConvertedToSmall()(v7, v8);
  }
  if (v14 >= 16)
  {
    v201 = v7 & 0xFFFFFFFFFFFFLL;
    v91 = v203;
    v8 = v204;
    goto LABEL_122;
  }
  v11 = v204;
  if ((v204 & 0x2000000000000000) != 0)
  {
    v105 = 0;
    v8 = v204;
  }
  else
  {
    v8 = v204;
LABEL_145:
    v105 = 1;
  }
LABEL_165:
  swift_bridgeObjectRelease_n(a1, 5);
  i = v203;
  if (v105)
    goto LABEL_236;
  while (1)
  {
    v127._rawBits = (v1 << 16) | 1;
    v128._rawBits = 1;
    v129._rawBits = _StringGuts.validateScalarRange(_:)(v128, v127, v7, a1);
    if (v129._rawBits < 0x10000)
      v129._rawBits |= 3;
    v131 = specialized String.init(_:)(v129, v130, v7, a1);
    v133 = v132;
    swift_bridgeObjectRelease(a1);
    if ((v133 & 0x2000000000000000) != 0)
    {
      swift_bridgeObjectRelease(v133);
    }
    else if ((v133 & 0x1000000000000000) != 0)
    {
      v131 = _StringGuts._foreignConvertedToSmall()(v131, v133);
      v198 = v197;
      swift_bridgeObjectRelease(v133);
      v133 = v198;
    }
    else
    {
      if ((v131 & 0x1000000000000000) != 0)
      {
        v189 = (unsigned __int8 *)((v133 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v190 = v131 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v189 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v131, v133);
      }
      closure #1 in _StringGuts._convertedToSmall()(v189, v190, &v202);
      swift_bridgeObjectRelease(v133);
      v133 = *((_QWORD *)&v202 + 1);
      v131 = v202;
    }
    v134 = HIBYTE(v11) & 0xF;
    v135 = HIBYTE(v133) & 0xF;
    v1 = v135 + v134;
    if ((unint64_t)(v135 + v134) > 0xF)
      goto LABEL_254;
    if (v135)
    {
      v136 = 0;
      v137 = 0;
      do
      {
        v138 = v134 + v137;
        v139 = v137 + 1;
        if (v137 >= 8)
          v140 = v133;
        else
          v140 = v131;
        v141 = v140 >> (v136 & 0x38);
        v142 = (8 * v134 + v136) & 0x38;
        v143 = (-255 << v142) - 1;
        v144 = (unint64_t)v141 << v142;
        v145 = v144 | v143 & v11;
        v146 = v144 | v143 & i;
        if (v138 < 8)
          i = v146;
        else
          v11 = v145;
        v136 += 8;
        v137 = v139;
      }
      while (v135 != v139);
    }
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(a1);
    v147 = 0xA000000000000000;
    if (!(i & 0x8080808080808080 | v11 & 0x80808080808080))
      v147 = 0xE000000000000000;
    v203 = i;
    v204 = v147 & 0xFF00000000000000 | (v1 << 56) | v11 & 0xFFFFFFFFFFFFFFLL;
LABEL_187:
    v8 = v203;
    a1 = v204;
    v149 = HIBYTE(v204) & 0xF;
    if ((v204 & 0x2000000000000000) != 0)
      v150 = HIBYTE(v204) & 0xF;
    else
      v150 = v203 & 0xFFFFFFFFFFFFLL;
    if (!v150 && (v203 & ~v204 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease(v204);
      return 41;
    }
    if ((v204 & 0x2000000000000000) != 0 && v149 != 15)
      break;
    swift_bridgeObjectRetain_n(0xE100000000000000, 6, v103, v104);
    if ((a1 & 0x1000000000000000) != 0)
    {
LABEL_233:
      v186 = String.UTF8View._foreignCount()();
      v7 = v186 + 1;
      if (!__OFADD__(v186, 1))
      {
LABEL_199:
        if ((v8 & ~a1 & 0x2000000000000000) == 0
          || !swift_isUniquelyReferenced_nonNull_native(a1 & 0xFFFFFFFFFFFFFFFLL))
        {
          if (v7 <= 15)
            goto LABEL_210;
          goto LABEL_215;
        }
        v151 = _StringGuts.nativeUnusedCapacity.getter(v8, a1);
        if ((v152 & 1) == 0)
        {
          v154 = (a1 & 0x2000000000000000) == 0 && v151 > 0;
          if (v7 <= 15 && !v154)
          {
LABEL_210:
            swift_bridgeObjectRelease_n(0xE100000000000000, 5);
            swift_bridgeObjectRetain(a1, v155, v156, v157);
            v158 = _StringGuts._convertedToSmall()(v8, a1);
            v160 = v159;
            swift_bridgeObjectRelease(a1);
            v161._rawBits = 1;
            v162._rawBits = 65537;
            v163._rawBits = _StringGuts.validateScalarRange(_:)(v161, v162, 0x29uLL, 0xE100000000000000);
            if (v163._rawBits < 0x10000)
              v163._rawBits |= 3;
            v165 = specialized String.init(_:)(v163, v164, 0x29uLL, 0xE100000000000000);
            v167 = v166;
            swift_bridgeObjectRelease(0xE100000000000000);
            v168 = _StringGuts._convertedToSmall()(v165, v167);
            v170 = v169;
            swift_bridgeObjectRelease(v167);
            v171 = specialized _SmallString.init(_:appending:)(v158, v160, v168, v170);
            if ((v172 & 1) == 0)
            {
              v8 = v171;
              swift_bridgeObjectRelease(a1);
              swift_bridgeObjectRelease(0xE100000000000000);
              return v8;
            }
LABEL_254:
            v195 = 266;
LABEL_256:
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v195, 0);
          }
LABEL_215:
          _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v7, 1);
          swift_bridgeObjectRelease_n(0xE100000000000000, 6);
          v202 = xmmword_1816ABCE0;
          v173 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 1, (uint64_t)&v202, 1);
          _StringGuts.appendInPlace(_:isASCII:)(v173, v174, 1);
          swift_bridgeObjectRelease(0xE100000000000000);
          return v203;
        }
LABEL_255:
        v195 = 258;
        goto LABEL_256;
      }
    }
    else
    {
      v18 = __OFADD__(v150, 1);
      v7 = v150 + 1;
      if (!v18)
        goto LABEL_199;
    }
    __break(1u);
LABEL_236:
    if ((v11 & 0x1000000000000000) != 0)
    {
      i = _StringGuts._foreignConvertedToSmall()(i, v8);
      v11 = v196;
    }
    else
    {
      if ((i & 0x1000000000000000) != 0)
      {
        v187 = (unsigned __int8 *)((v11 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v188 = i & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v187 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(i, v8);
        v188 = v124;
      }
      swift_bridgeObjectRetain(v8, v124, v125, v126);
      closure #1 in _StringGuts._convertedToSmall()(v187, v188, &v202);
      swift_bridgeObjectRelease(v8);
      v11 = *((_QWORD *)&v202 + 1);
      i = v202;
    }
  }
  if (v149 < 8)
    v8 = (41 << (8 * (HIBYTE(v204) & 7u))) | ((-255 << (8 * (HIBYTE(v204) & 7u))) - 1) & v203;
  swift_bridgeObjectRelease(v204);
  swift_bridgeObjectRelease(0xE100000000000000);
  return v8;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ObjectIdentifier()
{
  unint64_t *v0;

  return ObjectIdentifier.debugDescription.getter(*v0);
}

BOOL static ObjectIdentifier.< infix(_:_:)(unint64_t a1, unint64_t a2)
{
  return a1 < a2;
}

BOOL static UInt.< infix(_:_:)(unint64_t a1, unint64_t a2)
{
  return a1 < a2;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance ObjectIdentifier(_QWORD *a1, _QWORD *a2)
{
  return *a2 >= *a1;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance ObjectIdentifier(_QWORD *a1, _QWORD *a2)
{
  return *a1 >= *a2;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance ObjectIdentifier(_QWORD *a1, _QWORD *a2)
{
  return *a2 < *a1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance ObjectIdentifier()
{
  uint64_t *v0;

  return specialized static Hasher._hash(seed:_:)(0, *v0);
}

void protocol witness for Hashable.hash(into:) in conformance ObjectIdentifier()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance ObjectIdentifier(uint64_t a1)
{
  uint64_t *v1;

  return specialized static Hasher._hash(seed:_:)(a1, *v1);
}

uint64_t Optional.init(nilLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 1, 1);
}

uint64_t _sxSgs23ExpressibleByNilLiteralsRi_zrlsABP03nilD0xyt_tcfCTW@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 56))(a2, 1, 1);
}

uint64_t Optional.map<A>(_:)@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  void (*v19)(char *);

  v19 = a1;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v14 + 16))(v13, v15);
  v16 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v13, 1, v7) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v13, v7);
    v19(v11);
    result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    if (v4)
      return result;
    v16 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(a4, v16, 1, a3);
}

uint64_t Optional.flatMap<A>(_:)@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];

  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](a1);
  v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v14 + 16))(v13, v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v13, 1, v7) == 1)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(a4, 1, 1, a3);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v13, v7);
  a1(v11);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t Optional.debugDescription.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *inited;
  char *boxed_opaque_existential_0Tm;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t object;
  uint64_t countAndFlagsBits;
  size_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  int64_t v29;
  int64_t v30;
  char v31;
  BOOL v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  size_t v45;
  Swift::Int v47;
  unsigned __int8 *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  __int128 __src;
  uint64_t v53[8];
  Swift::String v54;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x1E0C80A78](a1);
  v5 = (char *)&v53[-2] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v53[-2] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v8 + 16))(v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1)
    return 7104878;
  v10 = *(void (**)(char *, char *, uint64_t))(v2 + 32);
  v10(v5, v7, v1);
  v54 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Optional(", 9uLL, 1);
  v11 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Any>();
  inited = swift_initStackObject(v11, v53);
  *((_OWORD *)inited + 1) = xmmword_1816ABBA0;
  inited[7] = v1;
  boxed_opaque_existential_0Tm = (char *)__swift_allocate_boxed_opaque_existential_0Tm(inited + 4);
  v10(boxed_opaque_existential_0Tm, v5, v1);
  specialized _debugPrint<A>(_:separator:terminator:to:)((uint64_t)inited, 0x20uLL, 0xE100000000000000, 0, 0xE000000000000000, &v54._countAndFlagsBits);
  swift_bridgeObjectRelease(0xE000000000000000);
  swift_bridgeObjectRelease(0xE100000000000000);
  swift_setDeallocating((uint64_t)inited);
  swift_arrayDestroy((uint64_t)(inited + 4), 1, (uint64_t)qword_1E0EB1338);
  object = (unint64_t)v54._object;
  countAndFlagsBits = v54._countAndFlagsBits;
  v19 = ((unint64_t)v54._object >> 56) & 0xF;
  v20 = v54._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (((uint64_t)v54._object & 0x2000000000000000) != 0)
    v21 = ((unint64_t)v54._object >> 56) & 0xF;
  else
    v21 = v54._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (!v21 && (v54._countAndFlagsBits & ~(uint64_t)v54._object & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease((uint64_t)v54._object);
    return 41;
  }
  if (((uint64_t)v54._object & 0x2000000000000000) == 0 || v19 == 15)
  {
    swift_bridgeObjectRetain(0xE100000000000000, v14, v15, v16);
    if ((object & 0x1000000000000000) != 0)
    {
      v47 = String.UTF8View._foreignCount()();
      v27 = v47 + 1;
      if (!__OFADD__(v47, 1))
        goto LABEL_13;
    }
    else
    {
      v27 = v21 + 1;
      if (!__OFADD__(v21, 1))
      {
LABEL_13:
        v28 = countAndFlagsBits & ~object;
        if ((v28 & 0x2000000000000000) != 0
          && swift_isUniquelyReferenced_nonNull_native(object & 0xFFFFFFFFFFFFFFFLL))
        {
          v29 = _StringGuts.nativeUnusedCapacity.getter(countAndFlagsBits, object);
          if ((v24 & 1) != 0)
          {
            v50 = 258;
            goto LABEL_74;
          }
          if (v27 > 15 || (object & 0x2000000000000000) == 0 && v29 > 0)
            goto LABEL_19;
        }
        else if (v27 > 15)
        {
LABEL_19:
          v30 = _StringGuts.nativeUnusedCapacity.getter(countAndFlagsBits, object);
          v33 = (v31 & 1) == 0 && v30 > 0;
          if ((v28 & 0x2000000000000000) != 0
            && swift_isUniquelyReferenced_nonNull_native(object & 0xFFFFFFFFFFFFFFFLL))
          {
            if (v33)
              goto LABEL_61;
          }
          else if (v33)
          {
            goto LABEL_43;
          }
          v36 = 2 * _StringGuts.nativeCapacity.getter(countAndFlagsBits, object);
          if ((v37 & 1) != 0)
            v36 = 0;
          if (v36 > v27)
            v27 = v36;
LABEL_43:
          v38 = _StringGuts.uniqueNativeCapacity.getter();
          if ((v39 & 1) != 0)
          {
            if ((object & 0x1000000000000000) != 0)
              v21 = String.UTF8View._foreignCount()();
          }
          else
          {
            v21 = 2 * v38;
          }
          if (v21 <= v27)
            v21 = v27;
          if ((object & 0x1000000000000000) == 0)
          {
            if ((object & 0x2000000000000000) != 0)
            {
              *(_QWORD *)&__src = countAndFlagsBits;
              *((_QWORD *)&__src + 1) = object & 0xFFFFFFFFFFFFFFLL;
              v41 = v19 | 0xC000000000000000;
              if ((object & 0x4000000000000000) == 0)
                v41 = HIBYTE(object) & 0xF;
              v42 = v41 | 0x3000000000000000;
              object = _allocateStringStorage(codeUnitCapacity:)(v21);
              *(_QWORD *)(object + 16) = v43;
              *(_QWORD *)(object + 24) = v42;
              if (v43 < 0)
              {
                *(_QWORD *)__StringStorage._breadcrumbsAddress.getter() = 0;
                v42 = *(_QWORD *)(object + 24);
              }
              *(_BYTE *)(object + 32 + (v42 & 0xFFFFFFFFFFFFLL)) = 0;
              specialized UnsafeMutablePointer.initialize(from:count:)((char *)&__src, v19, (char *)(object + 32));
            }
            else
            {
              if ((countAndFlagsBits & 0x1000000000000000) != 0)
              {
                v40 = (char *)((object & 0xFFFFFFFFFFFFFFFLL) + 32);
              }
              else
              {
                v40 = (char *)_StringObject.sharedUTF8.getter(countAndFlagsBits, object);
                v20 = v49;
              }
              object = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)(v40, v20, v21, countAndFlagsBits < 0);
            }
            swift_bridgeObjectRelease((uint64_t)v54._object);
            goto LABEL_61;
          }
          goto LABEL_66;
        }
        if ((object & 0x2000000000000000) != 0)
        {
          v34 = object;
        }
        else if ((object & 0x1000000000000000) != 0)
        {
          countAndFlagsBits = _StringGuts._foreignConvertedToSmall()(countAndFlagsBits, object);
          v34 = v51;
        }
        else
        {
          if ((countAndFlagsBits & 0x1000000000000000) != 0)
          {
            v48 = (unsigned __int8 *)((object & 0xFFFFFFFFFFFFFFFLL) + 32);
          }
          else
          {
            v48 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(countAndFlagsBits, object);
            v20 = v24;
          }
          swift_bridgeObjectRetain(object, v24, v25, v26);
          closure #1 in _StringGuts._convertedToSmall()(v48, v20, &__src);
          swift_bridgeObjectRelease(object);
          v34 = *((_QWORD *)&__src + 1);
          countAndFlagsBits = __src;
        }
        swift_bridgeObjectRelease(0xE100000000000000);
        v35 = HIBYTE(v34) & 0xF;
        if (v35 != 15)
        {
          v22 = (41 << (8 * (HIBYTE(v34) & 7u))) | ((-255 << (8 * (HIBYTE(v34) & 7u))) - 1) & countAndFlagsBits;
          v23 = v35 >= 8;
          goto LABEL_34;
        }
        v50 = 266;
LABEL_74:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v50, 0);
      }
    }
    __break(1u);
LABEL_66:
    _StringGuts._foreignGrow(_:)(v21);
    object = (unint64_t)v54._object;
LABEL_61:
    swift_bridgeObjectRelease(0xE100000000000000);
    __src = xmmword_1816ABCE0;
    v44 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 1, (uint64_t)&__src, 1);
    __StringStorage.appendInPlace(_:isASCII:)(v44, v45, 1);
    swift_bridgeObjectRelease(0xE100000000000000);
    return *(_QWORD *)(object + 24);
  }
  v22 = (41 << (8 * (HIBYTE(v54._object) & 7u))) | ((-255 << (8 * (HIBYTE(v54._object) & 7u))) - 1) & v54._countAndFlagsBits;
  v23 = v19 >= 8;
LABEL_34:
  if (v23)
    v9 = countAndFlagsBits;
  else
    v9 = v22;
  swift_bridgeObjectRelease(object);
  swift_bridgeObjectRelease(0xE100000000000000);
  return v9;
}

uint64_t Optional.customMirror.getter@<X0>(swift *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, swift *);
  double (*v25)@<D0>(uint64_t@<X8>);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t *v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  _QWORD *v36;
  char *boxed_opaque_existential_0Tm;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  Class *v44;
  uint64_t result;
  char v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v3 = v2;
  v6 = *((_QWORD *)a1 + 2);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8);
  v47 = (uint64_t *)((char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v47 - v14;
  v16 = MEMORY[0x1E0C80A78](v13);
  v48 = (uint64_t *)((char *)&v47 - v17);
  v18 = MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v47 - v19;
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v47 - v21;
  v49 = v23;
  v24 = *(void (**)(char *, uint64_t, swift *))(v23 + 16);
  v24((char *)&v47 - v21, v3, a1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v22, 1, v6) == 1)
  {
    v24(v15, v3, a1);
    v50 = 0;
    v51 = 0;
    v25 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)v15, (uint64_t)&v50, a1);
    v27 = v26;
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _RandomAccessCollectionBox<LazyMapSequence<KeyValuePairs<String, Any>, (label: String?, value: Any)>>);
    v29 = swift_allocObject(v28, 0x48uLL, 7uLL);
    v29[6] = &_swiftEmptyArrayStorage;
    v29[7] = closure #1 in Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:);
    v29[8] = 0;
    v30 = canonical specialized generic type metadata accessor for _IndexBox<Int>();
    v31 = swift_allocObject(v30, 0x18uLL, 7uLL);
    v31[2] = 0;
    v32 = swift_allocObject(v30, 0x18uLL, 7uLL);
    v32[2] = 0;
    v29[2] = v31;
    v29[3] = &protocol witness table for _IndexBox<A>;
    v29[4] = v32;
    v29[5] = &protocol witness table for _IndexBox<A>;
    v33 = v47;
    (*(void (**)(uint64_t *, char *, swift *))(v49 + 32))(v47, v15, a1);
  }
  else
  {
    v34 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v34(v10, v22, v6);
    v24(v20, v3, a1);
    v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    v36 = swift_allocObject(v35, 0x50uLL, 7uLL);
    *((_OWORD *)v36 + 1) = xmmword_1816ABBA0;
    v36[4] = 1701670771;
    v36[5] = 0xE400000000000000;
    v36[9] = v6;
    boxed_opaque_existential_0Tm = (char *)__swift_allocate_boxed_opaque_existential_0Tm(v36 + 6);
    v34(boxed_opaque_existential_0Tm, v10, v6);
    v50 = 0;
    v51 = 0;
    v25 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)v20, (uint64_t)&v50, a1);
    v27 = v38;
    v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _RandomAccessCollectionBox<LazyMapSequence<KeyValuePairs<String, Any>, (label: String?, value: Any)>>);
    v29 = swift_allocObject(v39, 0x48uLL, 7uLL);
    v29[6] = v36;
    v29[7] = closure #1 in Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:);
    v29[8] = 0;
    v40 = canonical specialized generic type metadata accessor for _IndexBox<Int>();
    v41 = swift_allocObject(v40, 0x18uLL, 7uLL);
    v41[2] = 0;
    v42 = v36[2];
    v43 = swift_allocObject(v40, 0x18uLL, 7uLL);
    v43[2] = v42;
    v29[2] = v41;
    v29[3] = &protocol witness table for _IndexBox<A>;
    v29[4] = v43;
    v29[5] = &protocol witness table for _IndexBox<A>;
    v33 = v48;
    (*(void (**)(uint64_t *, char *, swift *))(v49 + 32))(v48, v20, a1);
  }
  v44 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  result = swift_dynamicCast((char *)&v50, v33, (Class *)a1, v44, 6uLL);
  v46 = result;
  if ((_DWORD)result)
    result = __swift_destroy_boxed_opaque_existential_1Tm(&v50);
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = v29;
  *(_BYTE *)(a2 + 16) = 4;
  *(_QWORD *)(a2 + 24) = v25;
  *(_QWORD *)(a2 + 32) = v27;
  *(_BYTE *)(a2 + 40) = v46;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <A> A?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  unint64_t *v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *TupleTypeMetadata2;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  void (*v20)(char *, uint64_t, unint64_t *);
  unsigned int (*v21)(char *, uint64_t, unint64_t);
  char v22;
  char *v23;
  char *v24;
  void (*v25)(char *, unint64_t);
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;

  v4 = a3;
  v30 = a2;
  v28 = *(_QWORD *)(a4 - 8);
  v6 = a3[2];
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](a1);
  v27 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v8);
  v29 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v13, v13, 0, 0);
  v15 = *(TupleTypeMetadata2 - 1);
  v16 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v18 = (char *)&v27 - v17;
  v19 = (char *)&v27 + *(int *)(v16 + 48) - v17;
  v20 = *(void (**)(char *, uint64_t, unint64_t *))(v11 + 16);
  v20((char *)&v27 - v17, a1, v4);
  v20(v19, v30, v4);
  v21 = *(unsigned int (**)(char *, uint64_t, unint64_t))(v7 + 48);
  if (v21(v18, 1, v6) == 1)
  {
    if (v21(v19, 1, v6) == 1)
    {
      v22 = 1;
    }
    else
    {
      v11 = v15;
      v4 = TupleTypeMetadata2;
      v22 = 0;
    }
  }
  else
  {
    v30 = v15;
    v23 = v29;
    v20(v29, (uint64_t)v18, v4);
    if (v21(v19, 1, v6) == 1)
    {
      (*(void (**)(char *, unint64_t))(v7 + 8))(v23, v6);
      v22 = 0;
      v11 = v30;
      v4 = TupleTypeMetadata2;
    }
    else
    {
      v24 = v27;
      (*(void (**)(char *, char *, unint64_t))(v7 + 32))(v27, v19, v6);
      v22 = (*(uint64_t (**)(char *, char *, unint64_t))(v28 + 8))(v23, v24, v6);
      v25 = *(void (**)(char *, unint64_t))(v7 + 8);
      v25(v24, v6);
      v25(v23, v6);
    }
  }
  (*(void (**)(char *, unint64_t *))(v11 + 8))(v18, v4);
  return v22 & 1;
}

void Optional<A>.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v12 + 16))(v11, v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v11, v5);
    Hasher._combine(_:)(1u);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 24))(a1, v5, a3);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
}

Swift::Int Optional<A>.hashValue.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v14[5];
  __int128 v15;
  __int128 v16;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v14[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v14[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[0] = 0;
  v14[1] = _swift_stdlib_Hashing_parameters ^ 0x736F6D6570736575;
  v14[2] = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v14[3] = _swift_stdlib_Hashing_parameters ^ 0x6C7967656E657261;
  v14[4] = unk_1ECD25520 ^ 0x7465646279746573;
  v15 = 0u;
  v16 = 0u;
  (*(void (**)(char *, uint64_t))(v10 + 16))(v9, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v9, v3);
    Hasher._combine(_:)(1u);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(a2 + 24))(v14, v3, a2);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <A> A?(uint64_t a1, uint64_t a2)
{
  return Optional<A>.hashValue.getter(a1, *(_QWORD *)(a2 - 8));
}

void protocol witness for Hashable.hash(into:) in conformance <A> A?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Optional<A>.hash(into:)(a1, a2, *(_QWORD *)(a3 - 8));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <A> A?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance <> ClosedRange<A><>.Index(a1, a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))Optional<A>.hash(into:));
}

BOOL static Optional.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 48))(a1, 1, a2) == 1;
}

BOOL static Optional.!= infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 48))(a1, 1, a2) != 1;
}

uint64_t ?? infix<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];

  v9 = type metadata accessor for Optional(0, a4, a3, a4);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v15 - v10;
  (*(void (**)(char *, uint64_t))(v12 + 16))((char *)v15 - v10, a1);
  v13 = *(_QWORD *)(a4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, a4) == 1)
    return a2();
  else
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(a5, v11, a4);
}

{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];

  v9 = type metadata accessor for Optional(0, a4, a3, a4);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v15 - v10;
  (*(void (**)(char *, uint64_t))(v12 + 16))((char *)v15 - v10, a1);
  v13 = *(_QWORD *)(a4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, a4) == 1)
    return a2();
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a5, v11, a4);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(a5, 0, 1, a4);
}

__SwiftNull *Optional._bridgeToObjectiveC()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  id *v9;
  uint64_t v10;
  const char *v11;
  char *v12;
  char *v13;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 - 8);
  v3 = MEMORY[0x1E0C80A78](a1);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(uint64_t **)(v3 + 16);
  v7 = *(v6 - 1);
  MEMORY[0x1E0C80A78](v3);
  v9 = (id *)((char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(char *))(v2 + 16))(v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t *))(v7 + 48))(v5, 1, v6) == 1)
  {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, a1);
    return _swift_Foundation_getOptionalNilSentinelObject(v6, v10, v11, v12);
  }
  else
  {
    (*(void (**)(id *, char *, uint64_t *))(v7 + 32))(v9, v5, v6);
    v13 = _bridgeAnythingToObjectiveC<A>(_:)(v9, v6);
    (*(void (**)(id *, uint64_t *))(v7 + 8))(v9, v6);
  }
  return (__SwiftNull *)v13;
}

uint64_t static Optional._forceBridgeFromObjectiveC(_:result:)(__SwiftNull *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  char *v17;
  __SwiftNull *OptionalNilSentinelObject;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v23;
  __SwiftNull *v24;

  v6 = *(a3 - 1);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Optional((const char *)0xFF, v9, v9, v10);
  v14 = type metadata accessor for Optional(0, v11, v12, v13);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(a2, v14);
  OptionalNilSentinelObject = _swift_Foundation_getOptionalNilSentinelObject(a3, v15, v16, v17);
  swift_unknownObjectRelease(OptionalNilSentinelObject);
  if (OptionalNilSentinelObject == a1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(v6 + 56))(a2, 1, 1, a3);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a2, 0, 1, v11);
  }
  else
  {
    v24 = a1;
    swift_unknownObjectRetain(a1, v19, v20, v21);
    swift_dynamicCast(v8, (uint64_t *)&v24, qword_1E0EB1350, (Class *)a3, 7uLL);
    (*(void (**)(uint64_t, char *, uint64_t *))(v6 + 16))(a2, v8, a3);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t *))(v6 + 56))(a2, 0, 1, a3);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a2, 0, 1, v11);
    return (*(uint64_t (**)(char *, uint64_t *))(v6 + 8))(v8, a3);
  }
}

uint64_t static Optional._conditionallyBridgeFromObjectiveC(_:result:)(__SwiftNull *a1, char *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  char *v20;
  __SwiftNull *OptionalNilSentinelObject;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int v25;
  void (*v26)(char *, uint64_t, uint64_t, uint64_t *);
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t *);
  uint64_t v30;
  __SwiftNull *v31;

  v7 = type metadata accessor for Optional(0, (uint64_t)a3, (uint64_t)a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v30 - v10;
  v12 = *(a3 - 1);
  MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Optional(0, v7, v15, v16);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(a2, v17);
  OptionalNilSentinelObject = _swift_Foundation_getOptionalNilSentinelObject(a3, v18, v19, v20);
  swift_unknownObjectRelease(OptionalNilSentinelObject);
  if (OptionalNilSentinelObject == a1)
  {
    v27 = 1;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t *))(v12 + 56))(a2, 1, 1, a3);
  }
  else
  {
    v31 = a1;
    swift_unknownObjectRetain(a1, v22, v23, v24);
    v25 = swift_dynamicCast(v11, (uint64_t *)&v31, qword_1E0EB1350, (Class *)a3, 6uLL);
    v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t *))(v12 + 56);
    if (!v25)
    {
      v26(v11, 1, 1, a3);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(a2, 1, 1, v7);
      return 0;
    }
    v27 = 1;
    v26(v11, 0, 1, a3);
    v28 = *(void (**)(char *, char *, uint64_t *))(v12 + 32);
    v28(v14, v11, a3);
    v28(a2, v14, a3);
    v26(a2, 0, 1, a3);
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a2, 0, 1, v7);
  return v27;
}

uint64_t static Optional._unconditionallyBridgeFromObjectiveC(_:)@<X0>(__SwiftNull *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, char *a5@<X8>)
{
  uint64_t v8;
  const char *v9;
  char *v10;
  __SwiftNull *OptionalNilSentinelObject;
  __SwiftNull *v13;

  if (a1)
  {
    swift_unknownObjectRetain(a1, (uint64_t)a2, a3, a4);
    OptionalNilSentinelObject = _swift_Foundation_getOptionalNilSentinelObject(a2, v8, v9, v10);
    swift_unknownObjectRelease(OptionalNilSentinelObject);
    if (OptionalNilSentinelObject != a1)
    {
      v13 = a1;
      swift_dynamicCast(a5, (uint64_t *)&v13, qword_1E0EB1350, (Class *)a2, 7uLL);
      return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t *))(*(a2 - 1) + 56))(a5, 0, 1, a2);
    }
    swift_unknownObjectRelease(a1);
  }
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t *))(*(a2 - 1) + 56))(a5, 1, 1, a2);
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance A?(__SwiftNull *a1, uint64_t a2, uint64_t a3)
{
  return static Optional._forceBridgeFromObjectiveC(_:result:)(a1, a2, *(uint64_t **)(a3 + 16));
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance A?(__SwiftNull *a1, char *a2, uint64_t a3, uint64_t a4)
{
  return static Optional._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2, *(uint64_t **)(a3 + 16), a4);
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance A?@<X0>(__SwiftNull *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, char *a5@<X8>)
{
  return static Optional._unconditionallyBridgeFromObjectiveC(_:)(a1, *(uint64_t **)(a2 + 16), a3, a4, a5);
}

uint64_t OptionSet.union(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t AssociatedTypeWitness;
  uint64_t v12;
  char *v13;
  uint64_t v15;

  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v9 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v10, a2, (uint64_t)&protocol requirements base descriptor for RawRepresentable, associated type descriptor for RawRepresentable.RawValue);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v15 - v12;
  (*(void (**)(uint64_t, uint64_t))(v10 + 24))(a2, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(a3 + 24))(v13, a2, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(a3 + 16) + 96))(v8, a2);
}

uint64_t OptionSet.intersection(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v6 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v6, a2, (uint64_t)&protocol requirements base descriptor for RawRepresentable, associated type descriptor for RawRepresentable.RawValue);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v9 = (char *)&v11 - v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(a2, v6);
  (*(void (**)(char *, uint64_t, uint64_t))(a3 + 24))(v9, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 + 16) + 104))(a1, a2);
}

uint64_t OptionSet.symmetricDifference(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t AssociatedTypeWitness;
  uint64_t v12;
  char *v13;
  uint64_t v15;

  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v9 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v10, a2, (uint64_t)&protocol requirements base descriptor for RawRepresentable, associated type descriptor for RawRepresentable.RawValue);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v15 - v12;
  (*(void (**)(uint64_t, uint64_t))(v10 + 24))(a2, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(a3 + 24))(v13, a2, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(a3 + 16) + 112))(v8, a2);
}

uint64_t OptionSet<>.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 + 16) + 144))();
}

uint64_t OptionSet<>.insert(_:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *TupleTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  char v24;
  char *v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  char *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t *v34;
  char *v35;

  v5 = v4;
  v35 = a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)&type metadata for Bool, a3, "inserted memberAfterInsert ", 0);
  v10 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v33 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v30 - v13;
  v15 = *(_QWORD *)(a3 - 8);
  v16 = MEMORY[0x1E0C80A78](v12);
  v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v30 - v19;
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v32 = v5;
  v21(v18, v5, a3);
  v22 = *(_QWORD *)(a4 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 56))(a2, a3, v22);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 + 8) + 8);
  v31 = a2;
  v24 = v23(v20, a2, a3) ^ 1;
  v34 = TupleTypeMetadata2;
  v25 = &v14[*((int *)TupleTypeMetadata2 + 12)];
  *v14 = v24 & 1;
  if ((v24 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v20, a3);
    v27 = v31;
    v21(v25, v31, a3);
    v21(v18, v27, a3);
    (*(void (**)(char *, uint64_t, uint64_t))(v22 + 96))(v18, a3, v22);
    v26 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
  }
  else
  {
    v26 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    v26(v25, v20, a3);
  }
  v28 = &v33[*((int *)v34 + 12)];
  v26(v28, v25, a3);
  v26(v35, v28, a3);
  return v24 & 1;
}

uint64_t OptionSet<>.remove(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v5 = v4;
  v10 = *(_QWORD *)(a2 - 8);
  v11 = MEMORY[0x1E0C80A78](a1);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v19 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v5, a2);
  v16 = *(_QWORD *)(a3 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 56))(a1, a2, v16);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v16 + 152))(a2, v16) & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, a2);
    v17 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 168))(a1, a2, v16);
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a4, v15, a2);
    v17 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a4, v17, 1, a2);
}

uint64_t OptionSet<>.update(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v5 = v4;
  v10 = *(_QWORD *)(a2 - 8);
  v11 = MEMORY[0x1E0C80A78](a1);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v20 - v14;
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v16(v13, v5, a2);
  v17 = *(_QWORD *)(a3 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 56))(a1, a2, v17);
  v16(v13, a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 96))(v13, a2, v17);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v17 + 152))(a2, v17) & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, a2);
    v18 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a4, v15, a2);
    v18 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a4, v18, 1, a2);
}

uint64_t OptionSet<>.init()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t AssociatedConformanceWitness;
  uint64_t v15;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(a2 + 8), a1, (uint64_t)&protocol requirements base descriptor for RawRepresentable, associated type descriptor for RawRepresentable.RawValue);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v8 = (char *)&v15 - v7;
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 24) + 16);
  v10 = swift_getAssociatedTypeWitness(0, (const char *)v9, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v15 - v11;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v9, AssociatedTypeWitness, v10, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, v10, AssociatedConformanceWitness);
  (*(void (**)(char *, unint64_t, uint64_t))(v9 + 24))(v12, AssociatedTypeWitness, v9);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(a2 + 24))(v8, a1, a2);
}

uint64_t OptionSet<>.formUnion(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void (*v17)(uint64_t, uint64_t);
  void (*v18)(char *, unint64_t);
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;

  v21 = a4;
  v22 = a3;
  v20[1] = a1;
  v6 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v6, a2, (uint64_t)&protocol requirements base descriptor for RawRepresentable, associated type descriptor for RawRepresentable.RawValue);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)v20 - v13;
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)v20 - v15;
  v17 = *(void (**)(uint64_t, uint64_t))(v6 + 24);
  v17(a2, v6);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(v4, a2);
  v17(a2, v6);
  (*(void (**)(char *, char *, unint64_t))(*(_QWORD *)(v21 + 8) + 208))(v14, v11, AssociatedTypeWitness);
  v18 = *(void (**)(char *, unint64_t))(v8 + 8);
  v18(v11, AssociatedTypeWitness);
  v18(v14, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 24))(v16, a2);
}

uint64_t OptionSet<>.formIntersection(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void (*v17)(uint64_t, uint64_t);
  void (*v18)(char *, unint64_t);
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;

  v21 = a4;
  v22 = a3;
  v20[1] = a1;
  v6 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v6, a2, (uint64_t)&protocol requirements base descriptor for RawRepresentable, associated type descriptor for RawRepresentable.RawValue);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)v20 - v13;
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)v20 - v15;
  v17 = *(void (**)(uint64_t, uint64_t))(v6 + 24);
  v17(a2, v6);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(v4, a2);
  v17(a2, v6);
  (*(void (**)(char *, char *, unint64_t))(*(_QWORD *)(v21 + 8) + 192))(v14, v11, AssociatedTypeWitness);
  v18 = *(void (**)(char *, unint64_t))(v8 + 8);
  v18(v11, AssociatedTypeWitness);
  v18(v14, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 24))(v16, a2);
}

uint64_t OptionSet<>.formSymmetricDifference(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void (*v17)(uint64_t, uint64_t);
  void (*v18)(char *, unint64_t);
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;

  v21 = a4;
  v22 = a3;
  v20[1] = a1;
  v6 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v6, a2, (uint64_t)&protocol requirements base descriptor for RawRepresentable, associated type descriptor for RawRepresentable.RawValue);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)v20 - v13;
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)v20 - v15;
  v17 = *(void (**)(uint64_t, uint64_t))(v6 + 24);
  v17(a2, v6);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(v4, a2);
  v17(a2, v6);
  (*(void (**)(char *, char *, unint64_t))(*(_QWORD *)(v21 + 8) + 224))(v14, v11, AssociatedTypeWitness);
  v18 = *(void (**)(char *, unint64_t))(v8 + 8);
  v18(v11, AssociatedTypeWitness);
  v18(v14, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 24))(v16, a2);
}

void specialized TextOutputStream._writeASCII(_:)(uint8x16_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  size_t v11;
  unint64_t v12;
  size_t v13;
  _QWORD v14[2];

  v2 = specialized static String._uncheckedFromASCII(_:)(a1, a2);
  v6 = v3;
  v7 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0)
    v7 = v2 & 0xFFFFFFFFFFFFLL;
  if (!v7)
    goto LABEL_9;
  v8 = v2;
  swift_bridgeObjectRetain(v3, v3, v4, v5);
  if ((v6 & 0x1000000000000000) != 0)
  {
    v8 = specialized static String._copying(_:)(v8, v6);
    v9 = v12;
    swift_bridgeObjectRelease(v6);
    if ((v9 & 0x2000000000000000) == 0)
      goto LABEL_6;
  }
  else
  {
    v9 = v6;
    if ((v6 & 0x2000000000000000) == 0)
    {
LABEL_6:
      if ((v8 & 0x1000000000000000) != 0)
      {
        v10 = (id)((v9 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v11 = v8 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v10 = _StringObject.sharedUTF8.getter(v8, v9);
        if (!v10)
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/OutputStream.swift", 24, 2, 0x239uLL, 0);
        v11 = v13;
      }
      _swift_stdlib_fwrite_stdout(v10, 1uLL, v11);
      swift_bridgeObjectRelease(v9);
LABEL_9:
      swift_bridgeObjectRelease(v6);
      return;
    }
  }
  v14[0] = v8;
  v14[1] = v9 & 0xFFFFFFFFFFFFFFLL;
  _swift_stdlib_fwrite_stdout(v14, 1uLL, HIBYTE(v9) & 0xF);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v6);
}

void TextOutputStream._writeASCII(_:)(uint8x16_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = specialized static String._uncheckedFromASCII(_:)(a1, a2);
  v7 = v6;
  (*(void (**)(unint64_t))(a4 + 24))(v5);
  swift_bridgeObjectRelease(v7);
}

uint64_t _fallbackEnumRawValue<A>(_:)(char *a1, uint64_t a2)
{
  uint64_t result;

  result = 0;
  switch(*(_QWORD *)(*(_QWORD *)(a2 - 8) + 64))
  {
    case 1:
      result = *a1;
      break;
    case 2:
      result = *(__int16 *)a1;
      break;
    case 4:
      result = *(int *)a1;
      break;
    case 8:
      result = *(_QWORD *)a1;
      break;
    default:
      return result;
  }
  return result;
}

void printTypeName #1 <A, B>(_:) in _adHocPrint_unlocked<A, B>(_:_:_:isDebugPrint:)(Class *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint8x16_t *TypeName;
  uint64_t v9;
  uint64_t v10;
  uint8x16_t *v11;
  uint8x16_t *v12;
  uint64_t v13;
  uint64_t v14;
  int8x8_t v15;
  int64_t v16;
  char v17;
  uint64_t v18;
  uint8x16_t *v19;
  uint8x16_t *v20;
  uint8x16_t *v21;
  uint64_t v22;
  unsigned __int8 v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  Swift::Int v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 *v70;
  unsigned __int8 *i;
  unsigned int v72;
  unsigned int v73;
  unsigned __int8 *v74;
  unsigned int v75;
  unsigned __int8 *v76;
  unsigned int v77;
  unint64_t v78;
  int64x2_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int64x2_t v84;
  int64x2_t v85;
  uint8x8_t *v86;
  int8x16_t v87;
  unint64_t v88;
  int64x2_t v89;
  int8x16_t v90;
  int8x16_t v91;
  uint8x8_t v92;
  uint16x8_t v93;
  uint32x4_t v94;
  uint64x2_t v95;
  uint64x2_t v96;
  uint64x2_t v97;
  uint32x4_t v98;
  uint64x2_t v99;
  int8x16_t v100;
  uint16x8_t v101;
  int8x16_t v102;
  uint16x8_t v103;
  int8x16_t v104;
  int8x16_t v105;
  int8x8_t v106;
  int8x16_t v107;
  int8x8_t v108;
  uint64x2_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int8x16_t v113;
  unsigned __int8 *v114;
  unint64_t v115;
  unsigned int v116;
  unint64_t v117;
  int8x8_t v118;
  unint64_t v119;
  uint8x16_t *v120;
  int64x2_t v121;
  int64x2_t v122;
  int64x2_t v123;
  int64x2_t v124;
  int64x2_t v125;
  int64x2_t v126;
  int8x16_t v127;
  int64x2_t v128;
  int64x2_t v129;
  int8x16_t v130;
  int8x16_t v131;
  int64x2_t v132;
  unint64_t v133;
  int8x16_t v134;
  int8x16_t v135;
  int8x16_t v136;
  int8x16_t v137;
  int8x16_t v138;
  int8x16_t v139;
  uint8x16_t v140;
  uint16x8_t v141;
  uint32x4_t v142;
  uint64x2_t v143;
  uint64x2_t v144;
  uint16x8_t v145;
  uint32x4_t v146;
  uint64x2_t v147;
  uint64x2_t v148;
  uint64x2_t v149;
  uint32x4_t v150;
  uint64x2_t v151;
  uint32x4_t v152;
  uint64x2_t v153;
  uint64x2_t v154;
  int8x16_t v155;
  unint64_t v156;
  int64x2_t v157;
  int8x16_t v158;
  int8x16_t v159;
  int64x2_t v160;
  int64x2_t v161;
  int64x2_t v162;
  int64x2_t v163;
  uint8x8_t *v164;
  int8x16_t v165;
  unint64_t v166;
  int64x2_t v167;
  int8x16_t v168;
  int8x16_t v169;
  uint8x8_t v170;
  uint16x8_t v171;
  uint32x4_t v172;
  uint64x2_t v173;
  uint64x2_t v174;
  uint64x2_t v175;
  uint32x4_t v176;
  uint64x2_t v177;
  int8x16_t v178;
  uint64_t v179;
  unsigned __int8 *v180;
  unsigned int v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int8x8_t v186;
  unint64_t v187;
  size_t v188;
  uint64_t v189;

  TypeName = (uint8x16_t *)swift_getTypeName(a1, a3);
  if (v9 < 0)
LABEL_188:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  v10 = v9;
  if (!v9)
  {
    v15 = 0;
    v16 = 0xE000000000000000;
    goto LABEL_185;
  }
  v11 = TypeName;
  v12 = TypeName;
  if ((v9 & 0xFFFFFFFFFFFFFFF0) != 0)
  {
    if (((TypeName->i64[1] | TypeName->i64[0]) & 0x8080808080808080) != 0)
      goto LABEL_23;
    v12 = TypeName + 1;
    while (v12 < (uint8x16_t *)&TypeName->i8[v9 & 0xFFFFFFFFFFFFFFF0])
    {
      v13 = v12->i64[0];
      v14 = v12->i64[1];
      ++v12;
      if (((v14 | v13) & 0x8080808080808080) != 0)
        goto LABEL_23;
    }
  }
  if (v12 < (uint8x16_t *)&TypeName->i8[v9 & 0xFFFFFFFFFFFFFFF8])
  {
    if ((v12->i64[0] & 0x8080808080808080) != 0)
      goto LABEL_23;
    v12 = (uint8x16_t *)((char *)v12 + 8);
  }
  if (v12 < (uint8x16_t *)&TypeName->i8[v9 & 0xFFFFFFFFFFFFFFFCLL])
  {
    if ((v12->i32[0] & 0x80808080) != 0)
      goto LABEL_23;
    v12 = (uint8x16_t *)((char *)v12 + 4);
  }
  if (v12 >= (uint8x16_t *)&TypeName->i8[v9 & 0xFFFFFFFFFFFFFFFELL])
  {
LABEL_19:
    if (v12 >= (uint8x16_t *)&TypeName->i8[v9] || (v12->i8[0] & 0x80000000) == 0)
    {
      if (v9 <= 15)
        goto LABEL_74;
      v17 = 1;
      goto LABEL_64;
    }
    goto LABEL_23;
  }
  if ((v12->i16[0] & 0x8080) == 0)
  {
    v12 = (uint8x16_t *)((char *)v12 + 2);
    goto LABEL_19;
  }
LABEL_23:
  v18 = 0;
  v19 = (uint8x16_t *)((char *)TypeName + v9);
  v17 = 1;
  v20 = TypeName;
  v21 = TypeName;
  while (1)
  {
    v24 = v21->i8[0];
    v21 = (uint8x16_t *)((char *)v21 + 1);
    v23 = v24;
    if (v24 < 0)
      break;
    v22 = 1;
LABEL_25:
    v18 += v22;
    v20 = v21;
    if (v21 == v19)
    {
      if (v9 <= 15)
        goto LABEL_74;
LABEL_64:
      v16 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)(TypeName->i8, v9, v9, v17 & 1);
      v15 = *(int8x8_t *)(v16 + 24);
      goto LABEL_185;
    }
  }
  if ((v23 + 62) > 0x32u)
    goto LABEL_65;
  if ((v23 + 32) < 0xE2u)
  {
    if (v23 == 224)
    {
      if (v21 == v19 || (v20->i8[1] & 0xE0) != 0xA0)
        goto LABEL_65;
      goto LABEL_49;
    }
    if ((v23 + 19) < 0xF4u)
    {
      if (v23 == 237)
      {
        if (v21 == v19)
          goto LABEL_65;
        v25 = v20->u8[1];
        if (v25 > 0x9F)
          goto LABEL_65;
        goto LABEL_48;
      }
      if ((v23 + 16) < 0xFEu)
      {
        if (v23 == 240)
        {
          if (v21 == v19 || (v20->i8[1] + 64) < 0xD0u)
            goto LABEL_65;
        }
        else
        {
          if (v23 > 0xF3u)
          {
            if (v21 == v19)
              goto LABEL_65;
            v26 = v20->u8[1];
            if (v26 > 0x8F)
              goto LABEL_65;
          }
          else
          {
            if (v21 == v19)
              goto LABEL_65;
            LOBYTE(v26) = v20->i8[1];
          }
          if ((v26 & 0xC0) != 0x80)
            goto LABEL_65;
        }
        if (&v20->i16[1] == (__int16 *)v19
          || (v20->i8[2] & 0xC0) != 0x80
          || (uint8x16_t *)((char *)v20->i32 + 3) == v19
          || (v20->i8[3] & 0xC0) != 0x80)
        {
          goto LABEL_65;
        }
        v17 = 0;
        v21 = (uint8x16_t *)((char *)v20->i64 + 4);
        v22 = 4;
        goto LABEL_25;
      }
    }
    if (v21 == v19)
      goto LABEL_65;
    LOBYTE(v25) = v20->i8[1];
LABEL_48:
    if ((v25 & 0xC0) != 0x80)
      goto LABEL_65;
LABEL_49:
    if (&v20->i16[1] == (__int16 *)v19 || (v20->i8[2] & 0xC0) != 0x80)
      goto LABEL_65;
    v17 = 0;
    v21 = (uint8x16_t *)((char *)v20->i32 + 3);
    v22 = 3;
    goto LABEL_25;
  }
  if (v21 != v19 && (v21->i8[0] & 0xC0) == 0x80)
  {
    v17 = 0;
    v21 = (uint8x16_t *)&v20->i16[1];
    v22 = 2;
    goto LABEL_25;
  }
LABEL_65:
  v185 = a5;
  a5 = a2;
  v27 = swift_allocError((uint64_t)&unk_1E0EAAB90, (uint64_t)&protocol witness table for UTF8ValidationError, 0, 0);
  swift_willThrow();
  swift_errorRelease(v27);
  v28 = specialized Collection.subscript.getter(v18, (uint64_t)v11, v10);
  v32 = v28;
  v33 = v29;
  v34 = v30;
  v35 = v31;
  v36 = v28;
  if (v28 != v29)
  {
    specialized Slice.subscript.getter(v28, v28, v29, v30, v31);
    v36 = v32 + 1;
    if (__OFADD__(v32, 1))
    {
LABEL_186:
      v183 = 1525;
      goto LABEL_187;
    }
  }
  v184 = a4;
  a4 = v33 + v32 - v36;
  v37 = v32;
  while (1)
  {
    if (v33 == v36)
      goto LABEL_80;
    v38 = specialized Slice.subscript.getter(v36, v32, v33, v34, v35);
    if (__OFADD__(v36, 1))
      goto LABEL_186;
    if ((v38 & 0xC0) != 0x80)
      break;
    ++v36;
    v39 = __OFADD__(v37++, 1);
    if (v39)
    {
      __break(1u);
LABEL_74:
      v40 = v10 - 8;
      v41 = 8;
      if (v10 < 8)
        v41 = v10;
      if ((v41 & 0x8000000000000000) == 0)
      {
        if (v41 < 8)
        {
          v42 = 0;
          v15 = 0;
          v43 = 0;
          goto LABEL_165;
        }
        if (v41 >= 0x10)
        {
          v42 = v41 & 0xFFFFFFFFFFFFFFF0;
          v101 = vmovl_high_u8(*v11);
          v102 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v101.i8);
          v103 = vmovl_u8(*(uint8x8_t *)v11->i8);
          v104 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v103.i8);
          v105 = (int8x16_t)vmovl_high_u16(v101);
          v106 = (int8x8_t)vextq_s8(v105, v105, 8uLL).u64[0];
          v107 = (int8x16_t)vmovl_high_u16(v103);
          v108 = (int8x8_t)vextq_s8(v107, v107, 8uLL).u64[0];
          *(int8x8_t *)v107.i8 = vorr_s8(*(int8x8_t *)v107.i8, *(int8x8_t *)v105.i8);
          v109.i64[0] = v107.u32[0];
          v109.i64[1] = v107.u32[1];
          v110 = (int8x16_t)vshlq_u64(v109, (uint64x2_t)xmmword_1816ABC20);
          *(int8x8_t *)v105.i8 = vorr_s8(*(int8x8_t *)v104.i8, *(int8x8_t *)v102.i8);
          v109.i64[0] = v105.u32[0];
          v109.i64[1] = v105.u32[1];
          v111 = vorrq_s8((int8x16_t)vshlq_u64(v109, (uint64x2_t)xmmword_1816ABC10), v110);
          *(int8x8_t *)v105.i8 = vorr_s8(v108, v106);
          v109.i64[0] = v105.u32[0];
          v109.i64[1] = v105.u32[1];
          v112 = (int8x16_t)vshlq_u64(v109, (uint64x2_t)xmmword_1816ABC00);
          *(int8x8_t *)v102.i8 = vorr_s8((int8x8_t)*(_OWORD *)&vextq_s8(v104, v104, 8uLL), (int8x8_t)*(_OWORD *)&vextq_s8(v102, v102, 8uLL));
          v109.i64[0] = v102.u32[0];
          v109.i64[1] = v102.u32[1];
          v113 = vorrq_s8(v111, vorrq_s8((int8x16_t)vshlq_u64(v109, (uint64x2_t)xmmword_1816ABBF0), v112));
          v15 = vorr_s8(*(int8x8_t *)v113.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v113, v113, 8uLL));
          if (v41 != (v41 & 0xFFFFFFFFFFFFFFF0))
          {
            v43 = 8 * v42;
            if ((v41 & 8) == 0)
              goto LABEL_165;
            goto LABEL_159;
          }
        }
        else
        {
          v15 = 0;
          v43 = 0;
          v42 = 0;
LABEL_159:
          v78 = v42;
          v79 = vdupq_n_s64(v43);
          v42 = v41 & 0xFFFFFFFFFFFFFFF8;
          v43 = 8 * (v41 & 0xFFFFFFFFFFFFFFF8);
          v80 = 0uLL;
          v81 = (int8x16_t)(unint64_t)v15;
          v82 = vaddq_s64(v79, (int64x2_t)xmmword_1816ABC00);
          v83 = vaddq_s64(v79, (int64x2_t)xmmword_1816ABC20);
          v84 = vaddq_s64(v79, (int64x2_t)xmmword_1816ABBF0);
          v85 = vaddq_s64(v79, (int64x2_t)xmmword_1816ABC10);
          v86 = (uint8x8_t *)&v11->i8[v78];
          v87 = (int8x16_t)vdupq_n_s64(0x38uLL);
          v88 = v78 - (v41 & 0xFFFFFFFFFFFFFFF8);
          v89 = vdupq_n_s64(0x40uLL);
          v90 = 0uLL;
          v91 = 0uLL;
          do
          {
            v92 = *v86++;
            v93 = vmovl_u8(v92);
            v94 = vmovl_high_u16(v93);
            v95.i64[0] = v94.u32[2];
            v95.i64[1] = v94.u32[3];
            v96 = v95;
            v95.i64[0] = v94.u32[0];
            v95.i64[1] = v94.u32[1];
            v97 = v95;
            v98 = vmovl_u16(*(uint16x4_t *)v93.i8);
            v95.i64[0] = v98.u32[2];
            v95.i64[1] = v98.u32[3];
            v99 = v95;
            v95.i64[0] = v98.u32[0];
            v95.i64[1] = v98.u32[1];
            v91 = vorrq_s8((int8x16_t)vshlq_u64(v96, (uint64x2_t)vandq_s8((int8x16_t)v82, v87)), v91);
            v90 = vorrq_s8((int8x16_t)vshlq_u64(v97, (uint64x2_t)vandq_s8((int8x16_t)v83, v87)), v90);
            v80 = vorrq_s8((int8x16_t)vshlq_u64(v99, (uint64x2_t)vandq_s8((int8x16_t)v84, v87)), v80);
            v81 = vorrq_s8((int8x16_t)vshlq_u64(v95, (uint64x2_t)vandq_s8((int8x16_t)v85, v87)), v81);
            v83 = vaddq_s64(v83, v89);
            v84 = vaddq_s64(v84, v89);
            v85 = vaddq_s64(v85, v89);
            v82 = vaddq_s64(v82, v89);
            v88 += 8;
          }
          while (v88);
          v100 = vorrq_s8(vorrq_s8(v81, v90), vorrq_s8(v80, v91));
          v15 = vorr_s8(*(int8x8_t *)v100.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v100, v100, 8uLL));
          if (v41 != v42)
          {
LABEL_165:
            v114 = &v11->u8[v42];
            v115 = v41 - v42;
            do
            {
              v116 = *v114++;
              *(_QWORD *)&v15 |= (unint64_t)v116 << (v43 & 0x38);
              v43 += 8;
              --v115;
            }
            while (v115);
          }
        }
        if (v10 < 9)
        {
          v118 = 0;
        }
        else
        {
          if (v40 < 8)
          {
            v117 = 0;
            v118 = 0;
            v119 = 0;
            goto LABEL_180;
          }
          if (v40 >= 0x10)
          {
            v120 = (uint8x16_t *)&v11->u64[1];
            v117 = v40 & 0xFFFFFFFFFFFFFFF0;
            v121 = (int64x2_t)xmmword_1816ABCA0;
            v122 = (int64x2_t)xmmword_1816ABCB0;
            v123 = (int64x2_t)xmmword_1816ABCC0;
            v124 = (int64x2_t)xmmword_1816ABCD0;
            v125 = (int64x2_t)xmmword_1816ABC00;
            v126 = (int64x2_t)xmmword_1816ABC20;
            v127 = (int8x16_t)vdupq_n_s64(0x38uLL);
            v128 = vdupq_n_s64(0x80uLL);
            v129 = (int64x2_t)xmmword_1816ABBF0;
            v119 = 8 * (v40 & 0xFFFFFFFFFFFFFFF0);
            v130 = 0uLL;
            v131 = 0uLL;
            v132 = (int64x2_t)xmmword_1816ABC10;
            v133 = v40 & 0xFFFFFFFFFFFFFFF0;
            v134 = 0uLL;
            v135 = 0uLL;
            v136 = 0uLL;
            v137 = 0uLL;
            v138 = 0uLL;
            v139 = 0uLL;
            do
            {
              v140 = *v120++;
              v141 = vmovl_u8(*(uint8x8_t *)v140.i8);
              v142 = vmovl_high_u16(v141);
              v143.i64[0] = v142.u32[2];
              v143.i64[1] = v142.u32[3];
              v144 = v143;
              v145 = vmovl_high_u8(v140);
              v146 = vmovl_u16(*(uint16x4_t *)v145.i8);
              v143.i64[0] = v146.u32[2];
              v143.i64[1] = v146.u32[3];
              v147 = v143;
              v143.i64[0] = v146.u32[0];
              v143.i64[1] = v146.u32[1];
              v148 = v143;
              v143.i64[0] = v142.u32[0];
              v143.i64[1] = v142.u32[1];
              v149 = v143;
              v150 = vmovl_u16(*(uint16x4_t *)v141.i8);
              v143.i64[0] = v150.u32[2];
              v143.i64[1] = v150.u32[3];
              v151 = v143;
              v152 = vmovl_high_u16(v145);
              v143.i64[0] = v152.u32[0];
              v143.i64[1] = v152.u32[1];
              v153 = v143;
              v143.i64[0] = v150.u32[0];
              v143.i64[1] = v150.u32[1];
              v154 = v143;
              v143.i64[0] = v152.u32[2];
              v143.i64[1] = v152.u32[3];
              v135 = vorrq_s8((int8x16_t)vshlq_u64(v144, (uint64x2_t)vandq_s8((int8x16_t)v125, v127)), v135);
              v137 = vorrq_s8((int8x16_t)vshlq_u64(v147, (uint64x2_t)vandq_s8((int8x16_t)v123, v127)), v137);
              v136 = vorrq_s8((int8x16_t)vshlq_u64(v148, (uint64x2_t)vandq_s8((int8x16_t)v124, v127)), v136);
              v134 = vorrq_s8((int8x16_t)vshlq_u64(v149, (uint64x2_t)vandq_s8((int8x16_t)v126, v127)), v134);
              v131 = vorrq_s8((int8x16_t)vshlq_u64(v151, (uint64x2_t)vandq_s8((int8x16_t)v129, v127)), v131);
              v138 = vorrq_s8((int8x16_t)vshlq_u64(v153, (uint64x2_t)vandq_s8((int8x16_t)v122, v127)), v138);
              v130 = vorrq_s8((int8x16_t)vshlq_u64(v154, (uint64x2_t)vandq_s8((int8x16_t)v132, v127)), v130);
              v139 = vorrq_s8((int8x16_t)vshlq_u64(v143, (uint64x2_t)vandq_s8((int8x16_t)v121, v127)), v139);
              v126 = vaddq_s64(v126, v128);
              v129 = vaddq_s64(v129, v128);
              v132 = vaddq_s64(v132, v128);
              v125 = vaddq_s64(v125, v128);
              v124 = vaddq_s64(v124, v128);
              v123 = vaddq_s64(v123, v128);
              v122 = vaddq_s64(v122, v128);
              v121 = vaddq_s64(v121, v128);
              v133 -= 16;
            }
            while (v133);
            v155 = vorrq_s8(vorrq_s8(vorrq_s8(v130, v136), vorrq_s8(v134, v138)), vorrq_s8(vorrq_s8(v131, v137), vorrq_s8(v135, v139)));
            v118 = vorr_s8(*(int8x8_t *)v155.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v155, v155, 8uLL));
            if (v40 != v117)
            {
              if ((v40 & 8) == 0)
                goto LABEL_180;
              goto LABEL_177;
            }
          }
          else
          {
            v118 = 0;
            v119 = 0;
            v117 = 0;
LABEL_177:
            v156 = v117;
            v117 = v40 & 0xFFFFFFFFFFFFFFF8;
            v157 = vdupq_n_s64(v119);
            v119 = 8 * (v40 & 0xFFFFFFFFFFFFFFF8);
            v158 = (int8x16_t)(unint64_t)v118;
            v159 = 0uLL;
            v160 = vaddq_s64(v157, (int64x2_t)xmmword_1816ABC00);
            v161 = vaddq_s64(v157, (int64x2_t)xmmword_1816ABC20);
            v162 = vaddq_s64(v157, (int64x2_t)xmmword_1816ABBF0);
            v163 = vaddq_s64(v157, (int64x2_t)xmmword_1816ABC10);
            v164 = (uint8x8_t *)((char *)&v11->u64[1] + v156);
            v165 = (int8x16_t)vdupq_n_s64(0x38uLL);
            v166 = v156 - (v40 & 0xFFFFFFFFFFFFFFF8);
            v167 = vdupq_n_s64(0x40uLL);
            v168 = 0uLL;
            v169 = 0uLL;
            do
            {
              v170 = *v164++;
              v171 = vmovl_u8(v170);
              v172 = vmovl_high_u16(v171);
              v173.i64[0] = v172.u32[2];
              v173.i64[1] = v172.u32[3];
              v174 = v173;
              v173.i64[0] = v172.u32[0];
              v173.i64[1] = v172.u32[1];
              v175 = v173;
              v176 = vmovl_u16(*(uint16x4_t *)v171.i8);
              v173.i64[0] = v176.u32[2];
              v173.i64[1] = v176.u32[3];
              v177 = v173;
              v173.i64[0] = v176.u32[0];
              v173.i64[1] = v176.u32[1];
              v169 = vorrq_s8((int8x16_t)vshlq_u64(v174, (uint64x2_t)vandq_s8((int8x16_t)v160, v165)), v169);
              v168 = vorrq_s8((int8x16_t)vshlq_u64(v175, (uint64x2_t)vandq_s8((int8x16_t)v161, v165)), v168);
              v159 = vorrq_s8((int8x16_t)vshlq_u64(v177, (uint64x2_t)vandq_s8((int8x16_t)v162, v165)), v159);
              v158 = vorrq_s8((int8x16_t)vshlq_u64(v173, (uint64x2_t)vandq_s8((int8x16_t)v163, v165)), v158);
              v161 = vaddq_s64(v161, v167);
              v162 = vaddq_s64(v162, v167);
              v163 = vaddq_s64(v163, v167);
              v160 = vaddq_s64(v160, v167);
              v166 += 8;
            }
            while (v166);
            v178 = vorrq_s8(vorrq_s8(v158, v168), vorrq_s8(v159, v169));
            v118 = vorr_s8(*(int8x8_t *)v178.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v178, v178, 8uLL));
            if (v40 != v117)
            {
LABEL_180:
              v179 = v10 - v117 - 8;
              v180 = &v11->u8[v117 + 8];
              do
              {
                v181 = *v180++;
                *(_QWORD *)&v118 |= (unint64_t)v181 << (v119 & 0x38);
                v119 += 8;
                --v179;
              }
              while (v179);
            }
          }
        }
        v182 = 0xA000000000000000;
        if (((*(_QWORD *)&v118 | *(_QWORD *)&v15) & 0x8080808080808080) == 0)
          v182 = 0xE000000000000000;
        v16 = v182 | (v10 << 56) | *(_QWORD *)&v118;
        goto LABEL_185;
      }
LABEL_189:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    }
  }
  a4 = v37;
LABEL_80:
  if (a4 < v32)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/ClosedRange.swift", 23, 2, 0x15BuLL, 0);
  if (__OFADD__(a4, 1))
  {
    __break(1u);
    goto LABEL_196;
  }
  v44 = specialized Slice.subscript.getter(v32, a4 + 1, v32, v33);
  v48 = _legacyNarrowIllegalRange #1 (buf:) in validateUTF8(_:)(v44, v45, v46, v47);
  v186 = 0;
  v187 = 0xE000000000000000;
  v50 = v10 + 15;
  if (__OFADD__(v10, 15))
  {
LABEL_196:
    __break(1u);
    return;
  }
  v51 = v48;
  v52 = v49;
  if (v50 >= 16)
  {
    v53 = _StringGuts.uniqueNativeCapacity.getter();
    if ((v54 & 1) != 0 || v53 < v50)
      _StringGuts.grow(_:)(v10 + 15);
  }
  a5 = v185;
  while (2)
  {
    if (v51 < 0)
      goto LABEL_189;
    v61 = v10;
    if (v10 < v51)
    {
      v183 = 1861;
      goto LABEL_187;
    }
    v62 = v187;
    v63 = *(_QWORD *)&v186 & 0xFFFFFFFFFFFFLL;
    if ((v187 & 0x2000000000000000) != 0)
      v63 = HIBYTE(v187) & 0xF;
    v39 = __OFADD__(v63, v10);
    v64 = v63 + v10;
    if (v39)
    {
      __break(1u);
      goto LABEL_192;
    }
    v65 = v64 + 3;
    if (__OFADD__(v64, 3))
    {
LABEL_192:
      __break(1u);
LABEL_193:
      v183 = 1860;
LABEL_187:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, v183, 0);
    }
    if (v65 >= 16)
    {
      v66 = _StringGuts.uniqueNativeCapacity.getter();
      if ((v67 & 1) != 0 || v66 < v65)
      {
        _StringGuts.grow(_:)(v65);
        v62 = v187;
      }
    }
    closure #1 in _StringGuts.appendInPlace(_:isASCII:)(v62 & 0xFFFFFFFFFFFFFFFLL, v11->i8, v51, 0);
    v186 = *(int8x8_t *)(v62 + 24);
    v188 = 3;
    v189 = 12435439;
    specialized closure #1 in Unicode.Scalar.withUTF8CodeUnits<A>(_:)((char *)&v189, &v188, &v186);
    if (v61 < v52)
      goto LABEL_189;
    if (v52 < 0)
      goto LABEL_193;
    v10 = v61 - v52;
    if (v61 - v52 < 0)
      goto LABEL_188;
    v68 = (uint64_t)v11->i64 + v52;
    if (_allASCII(_:)((uint64_t *)((char *)v11->i64 + v52), v61 - v52))
    {
LABEL_155:
      _StringGuts.appendInPlace(_:isASCII:)(&v11->i8[v52], v61 - v52, 0);
      break;
    }
    v69 = 0;
    v70 = &v11->u8[v61];
    if (!v11)
      v70 = 0;
    for (i = &v11->u8[v52]; ; ++i)
    {
      while (1)
      {
LABEL_107:
        if (!i || i == v70)
          goto LABEL_155;
        v73 = *i++;
        v72 = v73;
        if ((v72 & 0x80) != 0)
          break;
        ++v69;
      }
      if ((v72 + 62) >= 0x33u)
        goto LABEL_88;
      if (v72 > 0xDF)
        break;
      if (!i || i == v70 || (*i & 0xC0) != 0x80)
        goto LABEL_88;
      v69 += 2;
    }
    if (v72 == 224)
    {
      if (!i)
        goto LABEL_88;
      if (i == v70)
        goto LABEL_88;
      v74 = i + 1;
      if ((*i & 0xE0) != 0xA0)
        goto LABEL_88;
      goto LABEL_134;
    }
    if (v72 <= 0xEC)
      goto LABEL_130;
    if (v72 == 237)
    {
      if (!i)
        goto LABEL_88;
      if (i == v70)
        goto LABEL_88;
      v74 = i + 1;
      v75 = *i;
      if (v75 > 0x9F)
        goto LABEL_88;
      goto LABEL_133;
    }
    if (v72 <= 0xEF)
    {
LABEL_130:
      if (!i || i == v70)
        goto LABEL_88;
      v74 = i + 1;
      LOBYTE(v75) = *i;
LABEL_133:
      if ((v75 & 0xC0) != 0x80)
        goto LABEL_88;
LABEL_134:
      if (v74 == v70 || (*v74 & 0xC0) != 0x80)
        goto LABEL_88;
      i += 2;
      v69 += 3;
      goto LABEL_107;
    }
    if (v72 == 240)
    {
      if (!i)
        goto LABEL_88;
      if (i == v70)
        goto LABEL_88;
      v76 = i + 1;
      if ((*i + 64) < 0xD0u)
        goto LABEL_88;
      goto LABEL_150;
    }
    if ((v72 + 15) <= 2u)
    {
      if (!i || i == v70)
        goto LABEL_88;
      v76 = i + 1;
      LOBYTE(v77) = *i;
      goto LABEL_149;
    }
    if (i)
    {
      if (i != v70)
      {
        v76 = i + 1;
        v77 = *i;
        if (v77 <= 0x8F)
        {
LABEL_149:
          if ((v77 & 0xC0) != 0x80)
            goto LABEL_88;
LABEL_150:
          if (v76 == v70 || (i[1] & 0xC0) != 0x80 || i + 2 == v70 || (i[2] & 0xC0) != 0x80)
            goto LABEL_88;
          i += 3;
          v69 += 4;
          goto LABEL_107;
        }
      }
    }
LABEL_88:
    v55 = swift_allocError((uint64_t)&unk_1E0EAAB90, (uint64_t)&protocol witness table for UTF8ValidationError, 0, 0);
    swift_willThrow();
    swift_errorRelease(v55);
    v56 = specialized Collection.subscript.getter(v69, v68, v61 - v52);
    v51 = findInvalidRange #1 (_:) in validateUTF8(_:)(v56, v57, v58, v59);
    v52 = v60;
    v11 = (uint8x16_t *)v68;
    if (v10)
      continue;
    break;
  }
  v15 = v186;
  v16 = v187;
  a4 = v184;
LABEL_185:
  (*(void (**)(int8x8_t, int64_t, uint64_t, uint64_t))(a5 + 24))(v15, v16, a4, a5);
  swift_bridgeObjectRelease(v16);
}

uint64_t String.subscript.getter(Swift::String::Index a1, uint64_t a2, unint64_t a3)
{
  Swift::String::Index v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  char *v11;
  int v12;
  int v13;
  id v15;
  uint64_t v16;
  uint8x16_t *v17;
  uint64_t v18;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5._rawBits = _StringGuts.validateScalarIndex(_:)(a1)._rawBits;
  v6 = (v5._rawBits >> 8) & 0x3F;
  v7 = v5._rawBits >> 16;
  if (v6)
    goto LABEL_24;
  v8 = a2 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0x2000000000000000) != 0)
    v9 = HIBYTE(a3) & 0xF;
  else
    v9 = a2 & 0xFFFFFFFFFFFFLL;
  if (v5._rawBits >> 14 != 4 * v9)
  {
    if ((a3 & 0x1000000000000000) != 0)
      goto LABEL_37;
    if ((a3 & 0x2000000000000000) != 0)
    {
      v21 = a2;
      v22 = a3 & 0xFFFFFFFFFFFFFFLL;
      if (v7 + 1 != (HIBYTE(a3) & 0xF))
      {
        v13 = *(unsigned __int16 *)((char *)&v21 + v7);
        if (v13 == 2573 || (v13 & 0x80808080) != 0)
          goto LABEL_37;
      }
    }
    else
    {
      if ((a2 & 0x1000000000000000) != 0)
        v11 = (char *)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v11 = (char *)_StringObject.sharedUTF8.getter(a2, a3);
      if (v7 + 1 != v8)
      {
        if (!v11)
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
        v12 = *(unsigned __int16 *)&v11[v7];
        if (v12 == 2573 || (v12 & 0x80808080) != 0)
        {
LABEL_37:
          v6 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v7);
          v10 = v6 + v7;
          if ((a3 & 0x1000000000000000) == 0)
            goto LABEL_25;
          return _StringGuts.foreignErrorCorrectedGrapheme(startingAt:endingAt:)(v7, v10)._countAndFlagsBits;
        }
      }
    }
    v6 = 1;
LABEL_24:
    v10 = v6 + v7;
    if ((a3 & 0x1000000000000000) == 0)
      goto LABEL_25;
    return _StringGuts.foreignErrorCorrectedGrapheme(startingAt:endingAt:)(v7, v10)._countAndFlagsBits;
  }
  v6 = 0;
  v10 = v5._rawBits >> 16;
  if ((a3 & 0x1000000000000000) != 0)
    return _StringGuts.foreignErrorCorrectedGrapheme(startingAt:endingAt:)(v7, v10)._countAndFlagsBits;
LABEL_25:
  if (v10 < v7)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  if ((a3 & 0x2000000000000000) == 0)
  {
    if ((a2 & 0x1000000000000000) != 0)
    {
      v15 = (id)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v16 = a2 & 0xFFFFFFFFFFFFLL;
      if ((a2 & 0xFFFFFFFFFFFFLL) >= v10)
      {
LABEL_29:
        v17 = (uint8x16_t *)specialized UnsafeBufferPointer.init(rebasing:)(v7, v10, (uint64_t)v15, v16);
        return specialized static String._uncheckedFromUTF8(_:)(v17, v18);
      }
    }
    else
    {
      v15 = _StringObject.sharedUTF8.getter(a2, a3);
      v16 = v20;
      if (v20 >= v10)
        goto LABEL_29;
    }
LABEL_35:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
  }
  v21 = a2;
  v22 = a3 & 0xFFFFFFFFFFFFFFLL;
  if ((uint64_t)(HIBYTE(a3) & 0xF) < v10)
    goto LABEL_35;
  if (v6 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  return specialized static String._uncheckedFromUTF8(_:)((uint8x16_t *)((char *)&v21 + v7), v6);
}

void specialized String.write<A>(to:)(unint64_t *a1, unint64_t a2, unint64_t a3, char *a4)
{
  unint64_t v7;
  uint64_t v8;

  v7 = a1[1];
  v8 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0)
    v8 = *a1 & 0xFFFFFFFFFFFFLL;
  if (v8 || (*a1 & ~v7 & 0x2000000000000000) != 0)
  {
    _StringGuts.append(_:)(a2, a3);
  }
  else
  {
    swift_bridgeObjectRetain(a3, a2, a3, a4);
    swift_bridgeObjectRelease(v7);
    *a1 = a2;
    a1[1] = a3;
  }
}

void protocol witness for TextOutputStream.write(_:) in conformance _Stdout(unint64_t a1, unint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v4 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    v5 = a1;
    v6 = a2;
    swift_bridgeObjectRetain(a2, a2, a3, a4);
    specialized String.withUTF8<A>(_:)(&v5);
    swift_bridgeObjectRelease(v6);
  }
}

Swift::Void __swiftcall String.write(_:)(Swift::String a1)
{
  uint64_t v1;
  char *v2;
  uint64_t *v3;
  void *object;
  uint64_t countAndFlagsBits;
  unint64_t v6;
  uint64_t v7;

  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  v6 = v3[1];
  v7 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000) == 0)
    v7 = *v3 & 0xFFFFFFFFFFFFLL;
  if (v7 || (*v3 & ~v6 & 0x2000000000000000) != 0)
  {
    _StringGuts.append(_:)(a1._countAndFlagsBits, (unint64_t)a1._object);
  }
  else
  {
    swift_bridgeObjectRetain((unint64_t)a1._object, (uint64_t)a1._object, v1, v2);
    swift_bridgeObjectRelease(v6);
    *v3 = countAndFlagsBits;
    v3[1] = (uint64_t)object;
  }
}

uint64_t _StringGuts.init(_:isASCII:)(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v3;

  v3 = a2 | 0xC000000000000000;
  if ((a3 & 1) == 0)
    v3 = a2;
  return v3 | 0x1000000000000000;
}

void _StringGuts.append(_:)(unint64_t a1, unint64_t a2)
{
  unint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;

  v5 = v2[1];
  if ((v5 & 0x2000000000000000) != 0)
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      v7 = specialized _SmallString.init(_:appending:)(*v2, v2[1], a1, a2);
      if ((v9 & 1) == 0)
      {
        v10 = v7;
        v11 = v8;
        swift_bridgeObjectRelease(v5);
        *v2 = v10;
        v2[1] = v11;
        return;
      }
      goto LABEL_8;
    }
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
LABEL_8:
    v6 = HIBYTE(a2) & 0xF;
    goto LABEL_9;
  }
  v6 = a1 & 0xFFFFFFFFFFFFLL;
LABEL_9:
  _StringGuts.append(_:)(a1, a2, 0, v6);
}

uint64_t Character.write<A>(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 24))(a2, a3, a4, a5);
}

uint64_t protocol witness for TextOutputStreamable.write<A>(to:) in conformance Character(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return Character.write<A>(to:)(a1, *v3, v3[1], a2, a3);
}

void Unicode.Scalar.write<A>(to:)(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(a2);
  v7 = v6;
  (*(void (**)(uint64_t))(a4 + 24))(v5);
  swift_bridgeObjectRelease(v7);
}

void protocol witness for TextOutputStreamable.write<A>(to:) in conformance Unicode.Scalar(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v3;

  Unicode.Scalar.write<A>(to:)(a1, *v3, a2, a3);
}

void *_playgroundPrintHook.getter(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  void *v4;

  v4 = _playgroundPrintHook;
  outlined copy of (@escaping @callee_guaranteed (@guaranteed String) -> ())?((unint64_t *)_playgroundPrintHook, (unint64_t *)qword_1EDC1B9C8, a3, a4);
  return v4;
}

uint64_t _playgroundPrintHook.setter(void *a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;

  v2 = _playgroundPrintHook;
  v3 = qword_1EDC1B9C8;
  _playgroundPrintHook = a1;
  qword_1EDC1B9C8 = a2;
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed String) -> ())?((uint64_t)v2, v3);
}

uint64_t (*_playgroundPrintHook.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

Swift::Void __swiftcall _TeeStream.write(_:)(Swift::String a1)
{
  uint64_t v1;
  uint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;

  v2 = v1;
  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  (*(void (**)(uint64_t, void *, _QWORD))(*(_QWORD *)(v1 + 32) + 24))(a1._countAndFlagsBits, a1._object, *(_QWORD *)(v1 + 16));
  (*(void (**)(uint64_t, void *, _QWORD))(*(_QWORD *)(v2 + 40) + 24))(countAndFlagsBits, object, *(_QWORD *)(v2 + 24));
}

Swift::Void __swiftcall _TeeStream._lock()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0;
  (*(void (**)(_QWORD))(*(_QWORD *)(v0 + 32) + 8))(*(_QWORD *)(v0 + 16));
  (*(void (**)(_QWORD))(*(_QWORD *)(v1 + 40) + 8))(*(_QWORD *)(v1 + 24));
}

Swift::Void __swiftcall _TeeStream._unlock()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0;
  (*(void (**)(_QWORD))(*(_QWORD *)(v0 + 40) + 16))(*(_QWORD *)(v0 + 24));
  (*(void (**)(_QWORD))(*(_QWORD *)(v1 + 32) + 16))(*(_QWORD *)(v1 + 16));
}

uint64_t _Pointer.successor()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t AssociatedTypeWitness;

  v4 = (*(uint64_t (**)(void))(a2 + 48))();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a2, a1, (uint64_t)&protocol requirements base descriptor for _Pointer, associated type descriptor for _Pointer.Pointee);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a2 + 56))(v4 + *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 72), a1, a2);
}

uint64_t _Pointer.predecessor()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t AssociatedTypeWitness;

  v4 = (*(uint64_t (**)(void))(a2 + 48))();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a2, a1, (uint64_t)&protocol requirements base descriptor for _Pointer, associated type descriptor for _Pointer.Pointee);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a2 + 56))(v4 - *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 72), a1, a2);
}

void *static Strideable<>.-= infix(_:_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  unint64_t AssociatedConformanceWitness;
  uint64_t v16;

  v7 = *(_QWORD *)(a4 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v7, a3, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v16 - v11;
  v13 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64);
  MEMORY[0x1E0C80A78](v10);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v7, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Strideable, (uint64_t)&associated conformance descriptor for Strideable.Strideable.Stride: SignedNumeric);
  (*(void (**)(uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 16))(a2, AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, a3, v7);
  (*(void (**)(char *, unint64_t))(v9 + 8))(v12, AssociatedTypeWitness);
  return memcpy(a1, (char *)&v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v13);
}

void *_convertConstArrayToPointerArgument<A, B>(_:)(uint64_t a1, uint64_t a2, uint64_t *a3, char *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t WitnessTable;
  uint64_t v25;

  swift_bridgeObjectRetain(a2, a2, (uint64_t)a3, a4);
  if (!_swift_isClassOrObjCExistentialType((uint64_t)a3, a3)
    || (a2 & 0x8000000000000000) == 0 && (a2 & 0x4000000000000000) == 0)
  {
    swift_bridgeObjectRelease(a2);
    if (_swift_isClassOrObjCExistentialType((uint64_t)a3, a3))
    {
      v9 = *(unsigned __int8 *)(*(a3 - 1) + 80);
      v10 = (a2 & 0xFFFFFFFFFFFFFF8) + ((v9 + 32) & ~v9);
    }
    else
    {
      v11 = *(unsigned __int8 *)(*(a3 - 1) + 80);
      v10 = a2 + ((v11 + 32) & ~v11);
    }
LABEL_7:
    if (_swift_isClassOrObjCExistentialType((uint64_t)a3, a3) && (a2 < 0 || (a2 & 0x4000000000000000) != 0))
    {
      if (a2 < 0)
        v18 = (void *)a2;
      else
        v18 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
      swift_unknownObjectRetain(v18, v12, v13, v14);
      if (v10)
        goto LABEL_14;
    }
    else
    {
      if (_swift_isClassOrObjCExistentialType((uint64_t)a3, a3))
        v18 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
      else
        v18 = (void *)a2;
      swift_bridgeObjectRetain(a2, v15, v16, v17);
      if (v10)
        goto LABEL_14;
    }
    (*(void (**)(unint64_t, char *, uint64_t))(a5 + 56))(~*(_BYTE *)(*(a3 - 1) + 80) | 0xFFFFFFFFFFFFFF00, a4, a5);
    return v18;
  }
  if (!Array._getCount()())
  {
    swift_bridgeObjectRelease(a2);
    v10 = 0;
    goto LABEL_7;
  }
  v22 = type metadata accessor for _ArrayBuffer(0, (uint64_t)a3, v19, v20);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _ArrayBuffer<A>, v22, v23);
  v18 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(WitnessTable + 56))(v22, WitnessTable);
  v25 = *(unsigned __int8 *)(*(a3 - 1) + 80);
  v10 = (uint64_t)v18 + ((v25 + 32) & ~v25);
LABEL_14:
  (*(void (**)(uint64_t, char *, uint64_t))(a5 + 56))(v10, a4, a5);
  return v18;
}

void *_convertMutableArrayToPointerArgument<A, B>(_:)(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void *v25;
  uint64_t WitnessTable;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v9 = type metadata accessor for Array(0, (uint64_t)a3, (uint64_t)a3, a4);
  Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(0, 0);
  v10 = *a2;
  if (_swift_isClassOrObjCExistentialType((uint64_t)a3, a3)
    && ((v10 & 0x8000000000000000) != 0 || (v10 & 0x4000000000000000) != 0))
  {
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v9, v11);
    if ((Collection.isEmpty.getter(v9, WitnessTable) & 1) == 0)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/Pointer.swift", 19, 2, 0x1E3uLL, 0);
  }
  else
  {
    _swift_isClassOrObjCExistentialType((uint64_t)a3, a3);
  }
  v15 = *a2;
  swift_bridgeObjectRetain(*a2, v12, v13, v14);
  if (!_swift_isClassOrObjCExistentialType((uint64_t)a3, a3)
    || (v15 & 0x8000000000000000) == 0 && (v15 & 0x4000000000000000) == 0)
  {
    swift_bridgeObjectRelease(v15);
    if (_swift_isClassOrObjCExistentialType((uint64_t)a3, a3))
    {
      v16 = *(unsigned __int8 *)(*(a3 - 1) + 80);
      v17 = (v15 & 0xFFFFFFFFFFFFFF8) + ((v16 + 32) & ~v16);
    }
    else
    {
      v18 = *(unsigned __int8 *)(*(a3 - 1) + 80);
      v17 = v15 + ((v18 + 32) & ~v18);
    }
LABEL_11:
    if (_swift_isClassOrObjCExistentialType((uint64_t)a3, a3) && (v15 < 0 || (v15 & 0x4000000000000000) != 0))
    {
      if (v15 < 0)
        v25 = (void *)v15;
      else
        v25 = (void *)(v15 & 0xFFFFFFFFFFFFFF8);
      swift_unknownObjectRetain(v25, v19, v20, v21);
      if (v17)
        goto LABEL_18;
    }
    else
    {
      if (_swift_isClassOrObjCExistentialType((uint64_t)a3, a3))
        v25 = (void *)(v15 & 0xFFFFFFFFFFFFFF8);
      else
        v25 = (void *)v15;
      swift_bridgeObjectRetain(v15, v22, v23, v24);
      if (v17)
        goto LABEL_18;
    }
    (*(void (**)(unint64_t, uint64_t, uint64_t))(a5 + 56))(~*(_BYTE *)(*(a3 - 1) + 80) | 0xFFFFFFFFFFFFFF00, a4, a5);
    return v25;
  }
  if (!Array._getCount()())
  {
    swift_bridgeObjectRelease(v15);
    v17 = 0;
    goto LABEL_11;
  }
  v30 = type metadata accessor for _ArrayBuffer(0, (uint64_t)a3, v27, v28);
  v32 = swift_getWitnessTable(&protocol conformance descriptor for _ArrayBuffer<A>, v30, v31);
  v25 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v32 + 56))(v30, v32);
  v33 = *(unsigned __int8 *)(*(a3 - 1) + 80);
  v17 = (uint64_t)v25 + ((v33 + 32) & ~v33);
LABEL_18:
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a5 + 56))(v17, a4, a5);
  return v25;
}

__objc2_class **_convertConstStringToUTF8PointerArgument<A>(_:)(uint64_t a1, unint64_t a2, unint64_t a3, char *a4, uint64_t a5)
{
  __objc2_class **v7;

  v7 = String.utf8CString.getter(a2, a3, a3, a4);
  (*(void (**)(__objc2_class **, char *, uint64_t))(a5 + 56))(v7 + 4, a4, a5);
  return v7;
}

__objc2_class **String.utf8CString.getter(unint64_t a1, unint64_t a2, uint64_t a3, char *a4)
{
  char *v5;
  int64_t v6;
  __objc2_class **v7;
  BOOL isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  __objc2_class *v10;
  _QWORD v12[2];

  if ((a2 & 0x1000000000000000) != 0)
    return String._slowUTF8CString()(a1, a2, a3, a4);
  if ((a2 & 0x2000000000000000) != 0)
  {
    v12[0] = a1;
    v12[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    v6 = HIBYTE(a2) & 0xF;
    v5 = (char *)v12;
  }
  else if ((a1 & 0x1000000000000000) != 0)
  {
    v5 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v6 = a1 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v5 = (char *)_StringObject.sharedUTF8.getter(a1, a2);
    if (!v5)
    {
      v7 = &_swiftEmptyArrayStorage;
      goto LABEL_7;
    }
  }
  v7 = specialized _copyCollectionToContiguousArray<A>(_:)(v5, v6);
LABEL_7:
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native((uint64_t)v7);
  v12[0] = v7;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)&v7[2]->isa + 1, 1);
    v7 = (__objc2_class **)v12[0];
  }
  v10 = v7[2];
  v9 = (unint64_t)v7[3];
  if ((unint64_t)v10 >= v9 >> 1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v9 > 1), (int64_t)&v10->isa + 1, 1);
    v7 = (__objc2_class **)v12[0];
  }
  v7[2] = (__objc2_class *)((char *)&v10->isa + 1);
  *((_BYTE *)&v10->info + (_QWORD)v7) = 0;
  return v7;
}

uint64_t protocol witness for Error._domain.getter in conformance Never(uint64_t a1, uint64_t a2)
{
  return protocol witness for Error._domain.getter in conformance _MergeError(a1, a2, &demangling cache variable for type metadata for Never.Type);
}

uint64_t protocol witness for Error._domain.getter in conformance _MergeError(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  Class *v3;
  _QWORD v5[2];
  uint64_t v6;

  v6 = a1;
  v5[0] = 0;
  v5[1] = 0xE000000000000000;
  v3 = (Class *)__swift_instantiateConcreteTypeFromMangledName(a3);
  _debugPrint_unlocked<A, B>(_:_:)((uint64_t)&v6, (uint64_t)v5, v3, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  return v5[0];
}

uint64_t Never.init(from:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[3];
  v3 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  swift_allocError((uint64_t)&type metadata for DecodingError, (uint64_t)&protocol witness table for DecodingError, 0, 0);
  *(_QWORD *)v5 = &type metadata for Never;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 16) = 0xD000000000000026;
  *(_QWORD *)(v5 + 24) = 0x8000000181763050;
  *(_QWORD *)(v5 + 32) = 0;
  *(_BYTE *)(v5 + 72) = 0;
  swift_willThrow();
  return __swift_destroy_boxed_opaque_existential_1Tm(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Never(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = a1[3];
  v5 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v4);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
  swift_allocError((uint64_t)&type metadata for DecodingError, (uint64_t)&protocol witness table for DecodingError, 0, 0);
  *(_QWORD *)v7 = v2;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 16) = 0xD000000000000026;
  *(_QWORD *)(v7 + 24) = 0x8000000181763050;
  *(_QWORD *)(v7 + 32) = 0;
  *(_BYTE *)(v7 + 72) = 0;
  swift_willThrow();
  return __swift_destroy_boxed_opaque_existential_1Tm(a1);
}

uint64_t (*LazyPrefixWhileSequence._base.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t LazyPrefixWhileSequence.init(_base:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return LazyDropWhileSequence.init(_base:predicate:)(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for LazyPrefixWhileSequence, a6);
}

uint64_t LazyDropWhileSequence.init(_base:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(_QWORD, uint64_t, uint64_t)@<X5>, uint64_t a7@<X8>)
{
  uint64_t result;
  _QWORD *v14;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a7, a1, a4);
  result = a6(0, a4, a5);
  v14 = (_QWORD *)(a7 + *(int *)(result + 36));
  *v14 = a2;
  v14[1] = a3;
  return result;
}

uint64_t LazyPrefixWhileSequence.Iterator._predicateHasFailed.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t (*LazyPrefixWhileSequence.Iterator._predicateHasFailed.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t LazyPrefixWhileSequence.Iterator._base.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return IndexingIterator._position.getter(a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator, a2);
}

uint64_t LazyPrefixWhileSequence.Iterator._base.setter(uint64_t a1, uint64_t a2)
{
  return IndexingIterator._position.setter(a1, a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
}

uint64_t (*LazyPrefixWhileSequence.Iterator._base.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t LazyDropWhileSequence.Iterator._predicate.getter(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v5 = (uint64_t *)(v4 + *(int *)(a1 + 40));
  v6 = *v5;
  swift_retain((unint64_t *)v5[1], a2, a3, a4);
  return v6;
}

uint64_t LazyPrefixWhileSequence.Iterator.init(_base:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, const char *a5@<X4>, _BYTE *a6@<X8>)
{
  return LazyDropWhileSequence.Iterator.init(_base:predicate:)(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, const char *))type metadata accessor for LazyPrefixWhileSequence.Iterator, a6);
}

uint64_t LazyDropWhileSequence.Iterator.init(_base:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, const char *a5@<X4>, uint64_t (*a6)(_QWORD, uint64_t, const char *)@<X5>, _BYTE *a7@<X8>)
{
  uint64_t v13;
  _BYTE *v14;
  unint64_t AssociatedTypeWitness;
  uint64_t result;
  _QWORD *v17;

  *a7 = 0;
  v13 = a6(0, a4, a5);
  v14 = &a7[*(int *)(v13 + 36)];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a5, a4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  result = (*(uint64_t (**)(_BYTE *, uint64_t, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v14, a1, AssociatedTypeWitness);
  v17 = &a7[*(int *)(v13 + 40)];
  *v17 = a2;
  v17[1] = a3;
  return result;
}

uint64_t LazyPrefixWhileSequence.Iterator.next()@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  _BYTE *v2;
  const char *v5;
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t AssociatedConformanceWitness;
  void (*v22)(unint64_t *, unint64_t);
  unint64_t *v23;
  void (*v24)(char *, char *, unint64_t);
  char *v25;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _BYTE *v30;

  v6 = *(_QWORD *)(a1 + 16);
  v5 = *(const char **)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v5, v6, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v10 = type metadata accessor for Optional(0, AssociatedTypeWitness, v8, v9);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v27 - v12;
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v15 = MEMORY[0x1E0C80A78](v11);
  v18 = (char *)&v27 - v17;
  v30 = v2;
  if ((*v2 & 1) == 0)
  {
    v27 = v16;
    v28 = v15;
    v29 = a2;
    v20 = swift_getAssociatedTypeWitness(255, v5, v6, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v5, v6, v20, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
    v22 = *(void (**)(unint64_t *, unint64_t))(AssociatedConformanceWitness + 16);
    v23 = swift_checkMetadataState(0, v20);
    v22(v23, AssociatedConformanceWitness);
    if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v14 + 48))(v13, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v28);
      v19 = 1;
    }
    else
    {
      v24 = *(void (**)(char *, char *, unint64_t))(v14 + 32);
      v24(v18, v13, AssociatedTypeWitness);
      if (((*(uint64_t (**)(char *))&v30[*(int *)(a1 + 40)])(v18) & 1) != 0)
      {
        v25 = v29;
        v24(v29, v18, AssociatedTypeWitness);
        a2 = v25;
        v19 = 0;
        return (*(uint64_t (**)(char *, uint64_t, uint64_t, unint64_t))(v14 + 56))(a2, v19, 1, AssociatedTypeWitness);
      }
      (*(void (**)(char *, unint64_t))(v14 + 8))(v18, AssociatedTypeWitness);
      v19 = 1;
      *v30 = 1;
    }
    a2 = v29;
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, unint64_t))(v14 + 56))(a2, v19, 1, AssociatedTypeWitness);
  }
  v19 = 1;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, unint64_t))(v14 + 56))(a2, v19, 1, AssociatedTypeWitness);
}

double LazyPrefixWhileSequence.makeIterator()@<D0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  double result;

  *(_QWORD *)&result = LazyDropWhileSequence.makeIterator()(a1, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for LazyPrefixWhileSequence.Iterator, a2).n128_u64[0];
  return result;
}

__n128 LazyDropWhileSequence.makeIterator()@<Q0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD, uint64_t, uint64_t)@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  __n128 result;
  uint64_t v15;

  v7 = *(_QWORD *)(a1 + 16);
  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))((char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v3, v7);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(void (**)(uint64_t, uint64_t))(v10 + 32);
  v12 = a2(0, v7, v10);
  v11(v7, v10);
  v13 = *(int *)(a1 + 36);
  *a3 = 0;
  result = *(__n128 *)(v3 + v13);
  *(__n128 *)&a3[*(int *)(v12 + 40)] = result;
  return result;
}

unint64_t *LazySequenceProtocol.prefix(while:)@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return LazySequenceProtocol.drop(while:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, unint64_t, unint64_t))type metadata accessor for LazyPrefixWhileSequence, a5);
}

unint64_t *LazySequenceProtocol.drop(while:)@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(_QWORD, unint64_t, unint64_t)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t AssociatedConformanceWitness;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v22;
  uint64_t v23;

  v23 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a4, a3, (uint64_t)&protocol requirements base descriptor for LazySequenceProtocol, associated type descriptor for LazySequenceProtocol.Elements);
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v15 = (char *)&v22 - v14;
  (*(void (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(v6, a3);
  (*(void (**)(uint64_t, char *, unint64_t))(v13 + 32))(a6, v15, AssociatedTypeWitness);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a4, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for LazySequenceProtocol, (uint64_t)&associated conformance descriptor for LazySequenceProtocol.LazySequenceProtocol.Elements: Sequence);
  v17 = (_QWORD *)(a6 + *(int *)(a5(0, AssociatedTypeWitness, AssociatedConformanceWitness) + 36));
  *v17 = v23;
  v17[1] = a2;
  return swift_retain(a2, v18, v19, v20);
}

uint64_t LazyPrefixWhileSequence<>.Index._value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;

  v5 = type metadata accessor for LazyPrefixWhileSequence<>._IndexRepresentation(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v3, v5);
}

uint64_t LazyPrefixWhileSequence<>.Index.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v7;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a3, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, unint64_t))(v7 + 32))(a4, a1, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, unint64_t))(v7 + 56))(a4, 0, 1, AssociatedTypeWitness);
}

uint64_t LazyPrefixWhileSequence<>.Index.init(endOf:)@<X0>(uint64_t a1@<X1>, const char *a2@<X2>, uint64_t a3@<X8>)
{
  unint64_t AssociatedTypeWitness;

  (*(void (**)(void))(*(_QWORD *)(a1 - 8) + 8))();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a2, a1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8)
                                                                                + 56))(a3, 1, 1, AssociatedTypeWitness);
}

uint64_t static LazyPrefixWhileSequence<>.Index.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  unint64_t AssociatedTypeWitness;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *TupleTypeMetadata2;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t (*v21)(char *, uint64_t, unint64_t);
  int v22;
  char v23;
  void (*v24)(char *, char *, unint64_t);
  char *v25;
  char *v26;
  unint64_t AssociatedConformanceWitness;
  void (*v28)(char *, unint64_t);
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;

  v33 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v8 = *(_QWORD **)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v32 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v31 = (char *)&v30 - v11;
  v13 = type metadata accessor for LazyPrefixWhileSequence<>._IndexRepresentation(255, a3, (uint64_t)a4, v12);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v13, v13, 0, 0);
  v15 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v17 = (char *)&v30 - v16;
  v18 = (char *)&v30 + *(int *)(v15 + 48) - v16;
  v19 = *(_QWORD *)(v13 - 8);
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  v20((char *)&v30 - v16, a1, v13);
  v20(v18, v33, v13);
  v21 = (uint64_t (*)(char *, uint64_t, unint64_t))v8[6];
  LODWORD(v20) = v21(v17, 1, AssociatedTypeWitness);
  v22 = v21(v18, 1, AssociatedTypeWitness);
  if ((_DWORD)v20 != 1)
  {
    if (v22 != 1)
    {
      v24 = (void (*)(char *, char *, unint64_t))v8[4];
      v25 = v31;
      v24(v31, v17, AssociatedTypeWitness);
      v26 = v32;
      v24(v32, v18, AssociatedTypeWitness);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)a4, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
      v23 = (*(uint64_t (**)(char *, char *, unint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 8)
                                                                        + 8))(v25, v26, AssociatedTypeWitness);
      v28 = (void (*)(char *, unint64_t))v8[1];
      v28(v26, AssociatedTypeWitness);
      v28(v25, AssociatedTypeWitness);
      return v23 & 1;
    }
    ((void (*)(char *, unint64_t))v8[1])(v17, AssociatedTypeWitness);
    goto LABEL_7;
  }
  if (v22 != 1)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v18, v13);
LABEL_7:
    v23 = 0;
    return v23 & 1;
  }
  v23 = 1;
  return v23 & 1;
}

uint64_t static LazyPrefixWhileSequence<>.Index.< infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *TupleTypeMetadata2;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  unsigned int (*v21)(char *, uint64_t, unint64_t);
  char v22;
  void (*v23)(char *, char *, unint64_t);
  char *v24;
  char *v25;
  unint64_t AssociatedConformanceWitness;
  void (*v27)(char *, unint64_t);
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;

  v32 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v31 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v30 = (char *)&v29 - v11;
  v13 = type metadata accessor for LazyPrefixWhileSequence<>._IndexRepresentation(255, a3, (uint64_t)a4, v12);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v13, v13, 0, 0);
  v15 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v17 = (char *)&v29 - v16;
  v18 = (char *)&v29 + *(int *)(v15 + 48) - v16;
  v19 = *(_QWORD *)(v13 - 8);
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  v20((char *)&v29 - v16, a1, v13);
  v20(v18, v32, v13);
  v21 = *(unsigned int (**)(char *, uint64_t, unint64_t))(v8 + 48);
  if (v21(v17, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v18, v13);
    v22 = 0;
  }
  else if (v21(v18, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, unint64_t))(v8 + 8))(v17, AssociatedTypeWitness);
    v22 = 1;
  }
  else
  {
    v23 = *(void (**)(char *, char *, unint64_t))(v8 + 32);
    v24 = v30;
    v23(v30, v17, AssociatedTypeWitness);
    v25 = v31;
    v23(v31, v18, AssociatedTypeWitness);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)a4, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
    v22 = (*(uint64_t (**)(char *, char *, unint64_t, unint64_t))(AssociatedConformanceWitness
                                                                                        + 16))(v24, v25, AssociatedTypeWitness, AssociatedConformanceWitness);
    v27 = *(void (**)(char *, unint64_t))(v8 + 8);
    v27(v25, AssociatedTypeWitness);
    v27(v24, AssociatedTypeWitness);
  }
  return v22 & 1;
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance LazyPrefixWhileSequence<A><>.Index(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static LazyPrefixWhileSequence<>.Index.< infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(const char **)(a3 + 24));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LazyPrefixWhileSequence<A><>.Index(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static LazyPrefixWhileSequence<>.Index.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(const char **)(a3 + 24));
}

void LazyPrefixWhileSequence<>.Index<>.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  const char *v7;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  v4 = v3;
  v8 = *(_QWORD *)(a2 + 16);
  v7 = *(const char **)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v7, v8, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v18 - v11;
  v14 = type metadata accessor for LazyPrefixWhileSequence<>._IndexRepresentation(0, v8, (uint64_t)v7, v13);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v18 - v15;
  (*(void (**)(char *, uint64_t))(v17 + 16))((char *)&v18 - v15, v4);
  if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v10 + 48))(v16, 1, AssociatedTypeWitness) == 1)
  {
    Hasher._combine(_:)(0x7FFFFFFFFFFFFFFFuLL);
  }
  else
  {
    (*(void (**)(char *, char *, unint64_t))(v10 + 32))(v12, v16, AssociatedTypeWitness);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(a3 + 24))(a1, AssociatedTypeWitness, a3);
    (*(void (**)(char *, unint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
  }
}

Swift::Int LazyPrefixWhileSequence<>.Index<>.hashValue.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  const char *v5;
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD v18[5];
  __int128 v19;
  __int128 v20;

  v3 = v2;
  v6 = *(_QWORD *)(a1 + 16);
  v5 = *(const char **)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v5, v6, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = (char *)&v18[-1] - v9;
  v12 = type metadata accessor for LazyPrefixWhileSequence<>._IndexRepresentation(0, v6, (uint64_t)v5, v11);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v18[-1] - v13;
  v18[0] = 0;
  v18[1] = _swift_stdlib_Hashing_parameters ^ 0x736F6D6570736575;
  v18[2] = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v18[3] = _swift_stdlib_Hashing_parameters ^ 0x6C7967656E657261;
  v18[4] = unk_1ECD25520 ^ 0x7465646279746573;
  v19 = 0u;
  v20 = 0u;
  (*(void (**)(char *, uint64_t))(v15 + 16))((char *)&v18[-1] - v13, v3);
  if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v8 + 48))(v14, 1, AssociatedTypeWitness) == 1)
  {
    Hasher._combine(_:)(0x7FFFFFFFFFFFFFFFuLL);
  }
  else
  {
    (*(void (**)(char *, char *, unint64_t))(v8 + 32))(v10, v14, AssociatedTypeWitness);
    (*(void (**)(_QWORD *, unint64_t, uint64_t))(a2 + 24))(v18, AssociatedTypeWitness, a2);
    (*(void (**)(char *, unint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <> LazyPrefixWhileSequence<A><>.Index(uint64_t a1, uint64_t a2)
{
  return LazyPrefixWhileSequence<>.Index<>.hashValue.getter(a1, *(_QWORD *)(a2 - 8));
}

void protocol witness for Hashable.hash(into:) in conformance <> LazyPrefixWhileSequence<A><>.Index(uint64_t a1, uint64_t a2, uint64_t a3)
{
  LazyPrefixWhileSequence<>.Index<>.hash(into:)(a1, a2, *(_QWORD *)(a3 - 8));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <> LazyPrefixWhileSequence<A><>.Index(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance <> ClosedRange<A><>.Index(a1, a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))LazyPrefixWhileSequence<>.Index<>.hash(into:));
}

uint64_t LazyPrefixWhileSequence<>.startIndex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  unint64_t AssociatedTypeWitness;

  v5 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t))(a2 + 64))(v5);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a2, v5, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8)
                                                                               + 56))(a3, 0, 1, AssociatedTypeWitness);
}

uint64_t LazyPrefixWhileSequence<>.endIndex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char v17;
  unint64_t v18;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v22 = a1;
  v23 = a3;
  v5 = *(_QWORD *)(a1 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(const char **)(a2 + 8), v5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v9 = type metadata accessor for Optional(0, AssociatedTypeWitness, v7, v8);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v22 - v12;
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v22 - v15;
  Collection.first.getter(v5, a2, (uint64_t)v13);
  if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v14 + 48))(v13, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }
  else
  {
    (*(void (**)(char *, char *, unint64_t))(v14 + 32))(v16, v13, AssociatedTypeWitness);
    v17 = (*(uint64_t (**)(char *))(v3 + *(int *)(v22 + 36)))(v16);
    (*(void (**)(char *, unint64_t))(v14 + 8))(v16, AssociatedTypeWitness);
    if ((v17 & 1) != 0)
    {
      v18 = swift_getAssociatedTypeWitness(0, (const char *)a2, v5, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)(v18 - 8) + 56))(v23, 1, 1, v18);
    }
  }
  v20 = v23;
  (*(void (**)(uint64_t, uint64_t))(a2 + 64))(v5, a2);
  v21 = swift_getAssociatedTypeWitness(0, (const char *)a2, v5, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, unint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 0, 1, v21);
}

uint64_t LazyPrefixWhileSequence<>.index(after:)@<X0>(void (*a1)(char *, char *, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  void (*v41)(_QWORD, _QWORD);
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t);
  uint64_t v44;
  int v45;
  char v46;
  void (*v47)(char *, uint64_t, uint64_t, unint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(_QWORD, _QWORD);
  char v52;
  void (*v53)(char *, _QWORD);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t);
  char *v63;
  unint64_t AssociatedConformanceWitness;
  uint64_t v65;
  char v66;
  char *v67;
  void (*v68)(char *, char *, uint64_t);
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  unint64_t *v75;
  uint64_t v76;
  uint64_t (*v77)(_BYTE *, char *, uint64_t, uint64_t);
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  void (*v92)(char *, uint64_t, uint64_t);
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t AssociatedTypeWitness;
  uint64_t v102;
  void (*v103)(_QWORD, _QWORD);
  uint64_t (*v104)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v105;
  uint64_t v106;
  void (*v107)(char *, char *, uint64_t);
  uint64_t v108;
  uint64_t v109;
  _BYTE v110[40];

  v107 = a1;
  v91 = a5;
  v6 = *(_QWORD *)(a2 + 16);
  v109 = a2;
  v8 = type metadata accessor for LazyPrefixWhileSequence<>._IndexRepresentation(0, v6, a3, a4);
  v98 = *(_QWORD *)(v8 - 8);
  v99 = v8;
  MEMORY[0x1E0C80A78](v8);
  v100 = (char *)&v85 - v9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a3, v6, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v108 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v96 = (char *)&v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v95 = (char *)&v85 - v13;
  v14 = MEMORY[0x1E0C80A78](v12);
  v105 = (char *)&v85 - v15;
  MEMORY[0x1E0C80A78](v14);
  v93 = (char *)&v85 - v16;
  v17 = swift_getAssociatedTypeWitness(255, *(const char **)(a3 + 8), v6, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v90 = type metadata accessor for Optional(0, v17, v18, v19);
  v89 = *(_QWORD *)(v90 - 8);
  v20 = MEMORY[0x1E0C80A78](v90);
  v22 = (char *)&v85 - v21;
  v23 = *(_QWORD *)(v17 - 8);
  v24 = MEMORY[0x1E0C80A78](v20);
  v86 = (char *)&v85 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x1E0C80A78](v24);
  v28 = (char *)&v85 - v27;
  v29 = *(_QWORD *)(a2 - 8);
  v30 = MEMORY[0x1E0C80A78](v26);
  v94 = (char *)&v85 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30);
  v33 = (char *)&v85 - v32;
  v35 = type metadata accessor for LazyPrefixWhileSequence<>.Index(0, v6, a3, v34);
  v36 = MEMORY[0x1E0C80A78](v35);
  v38 = (char *)&v85 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v36);
  v40 = (char *)&v85 - v39;
  v102 = v42;
  v103 = v41;
  (*(void (**)(char *, void (*)(char *, char *, uint64_t)))(v42 + 16))((char *)&v85 - v39, v107);
  v97 = v29;
  v43 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
  v44 = v109;
  v92 = v43;
  ((void (*)(char *, uint64_t))v43)(v33, v106);
  v104 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v6;
  Collection.first.getter(v6, a3, (uint64_t)v22);
  v45 = (*(uint64_t (**)(char *, uint64_t, unint64_t))(v23 + 48))(v22, 1, v17);
  v88 = v17;
  v87 = v23;
  if (v45 == 1)
  {
    (*(void (**)(char *, uint64_t))(v89 + 8))(v22, v90);
  }
  else
  {
    (*(void (**)(char *, char *, unint64_t))(v23 + 32))(v28, v22, v17);
    v46 = (*(uint64_t (**)(char *))&v33[*(int *)(v44 + 36)])(v28);
    (*(void (**)(char *, unint64_t))(v23 + 8))(v28, v17);
    if ((v46 & 1) != 0)
    {
      v47 = *(void (**)(char *, uint64_t, uint64_t, unint64_t))(v108 + 56);
      v48 = AssociatedTypeWitness;
      v47(v38, 1, 1, AssociatedTypeWitness);
      v49 = (uint64_t)v104;
      goto LABEL_6;
    }
  }
  v49 = (uint64_t)v104;
  (*(void (**)(uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t))(a3 + 64))(v104, a3);
  v47 = *(void (**)(char *, uint64_t, uint64_t, unint64_t))(v108 + 56);
  v48 = AssociatedTypeWitness;
  v47(v38, 0, 1, AssociatedTypeWitness);
LABEL_6:
  v50 = v102;
  v51 = v103;
  v52 = static LazyPrefixWhileSequence<>.Index.== infix(_:_:)((uint64_t)v40, (uint64_t)v38, v49, (const char *)a3);
  v53 = *(void (**)(char *, _QWORD))(v50 + 8);
  v53(v38, v51);
  if ((v52 & 1) != 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't advance past endIndex", 27, 2, "Swift/PrefixWhile.swift", 23, 2, 0xEDuLL, 0);
  v54 = v109;
  v103 = *(void (**)(_QWORD, _QWORD))(v97 + 8);
  v104 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v47;
  v103(v33, v109);
  v53(v40, v51);
  v56 = v98;
  v55 = v99;
  v57 = v100;
  (*(void (**)(char *, _QWORD, uint64_t))(v98 + 16))(v100, v107, v99);
  v58 = v108;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v108 + 48))(v57, 1, v48) == 1)
  {
    (*(void (**)(char *, uint64_t))(v56 + 8))(v57, v55);
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Invalid index passed to index(after:)", 37, 2, "Swift/PrefixWhile.swift", 23, 2, 0xEFuLL, 0);
  }
  v59 = v93;
  v107 = *(void (**)(char *, char *, uint64_t))(v58 + 32);
  v107(v93, v57, v48);
  v60 = v105;
  v61 = v106;
  (*(void (**)(char *, uint64_t, uint64_t))(a3 + 184))(v59, v49, a3);
  v62 = *(void (**)(char *, uint64_t))(v58 + 8);
  v62(v59, v48);
  v63 = v95;
  (*(void (**)(uint64_t, uint64_t))(a3 + 72))(v49, a3);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, v49, v48, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v65 = v58;
  v66 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 8) + 8))(v60, v63, v48);
  v62(v63, v48);
  v67 = v94;
  v92(v94, v61, v54);
  v68 = *(void (**)(char *, char *, uint64_t))(v65 + 16);
  v69 = v96;
  v68(v96, v60, v48);
  if ((v66 & 1) != 0)
  {
    v62(v69, v48);
    v103(v67, v54);
    v73 = v91;
LABEL_12:
    v62(v105, v48);
    v83 = 1;
    return v104((uint64_t)v73, v83, 1, v48);
  }
  v74 = &v67[*(int *)(v54 + 36)];
  v75 = (unint64_t *)*((_QWORD *)v74 + 1);
  v108 = *(_QWORD *)v74;
  v76 = v54;
  v77 = *(uint64_t (**)(_BYTE *, char *, uint64_t, uint64_t))(a3 + 80);
  swift_retain(v75, v70, v71, v72);
  v78 = v69;
  v79 = v77(v110, v69, v49, a3);
  v80 = v87;
  v81 = v86;
  v82 = v88;
  (*(void (**)(char *))(v87 + 16))(v86);
  ((void (*)(_BYTE *, _QWORD))v79)(v110, 0);
  v62(v78, v48);
  v103(v67, v76);
  LOBYTE(v79) = ((uint64_t (*)(char *))v108)(v81);
  swift_release((uint64_t)v75);
  (*(void (**)(char *, unint64_t))(v80 + 8))(v81, v82);
  v73 = v91;
  if ((v79 & 1) == 0)
    goto LABEL_12;
  v107(v91, v105, v48);
  v83 = 0;
  return v104((uint64_t)v73, v83, 1, v48);
}

uint64_t LazyPrefixWhileSequence<>.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  void (*v17)(_BYTE *, _QWORD);
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE v22[32];

  v7 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a3, v7, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = &v22[-v10];
  v13 = type metadata accessor for LazyPrefixWhileSequence<>._IndexRepresentation(0, v7, a3, v12);
  MEMORY[0x1E0C80A78](v13);
  v15 = &v22[-v14];
  (*(void (**)(_BYTE *, uint64_t))(v16 + 16))(&v22[-v14], a1);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, unint64_t))(v9 + 48))(v15, 1, AssociatedTypeWitness) == 1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/PrefixWhile.swift", 23, 2, 0xFEuLL, 0);
  (*(void (**)(_BYTE *, _BYTE *, unint64_t))(v9 + 32))(v11, v15, AssociatedTypeWitness);
  v17 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t, uint64_t))(a3 + 80))(v22, v11, v7, a3);
  v19 = v18;
  v20 = swift_getAssociatedTypeWitness(0, *(const char **)(a3 + 8), v7, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(v20 - 8) + 16))(a4, v19, v20);
  v17(v22, 0);
  return (*(uint64_t (**)(_BYTE *, unint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
}

uint64_t protocol witness for Collection.startIndex.getter in conformance <> LazyPrefixWhileSequence<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return LazyPrefixWhileSequence<>.startIndex.getter(a1, *(_QWORD *)(a2 - 8), a3);
}

uint64_t protocol witness for Collection.endIndex.getter in conformance <> LazyPrefixWhileSequence<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return LazyPrefixWhileSequence<>.endIndex.getter(a1, *(_QWORD *)(a2 - 8), a3);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance <> LazyPrefixWhileSequence<A>(unint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  unint64_t *v8;

  v8 = (unint64_t *)malloc(0x28uLL);
  *a1 = v8;
  v8[4] = (unint64_t)LazyPrefixWhileSequence<>.subscript.read(v8, a2, a3, *(_QWORD *)(a4 - 8));
  return protocol witness for Collection.subscript.read in conformance _ArrayBuffer<A>;
}

uint64_t (*LazyPrefixWhileSequence<>.subscript.read(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  unint64_t AssociatedTypeWitness;
  unint64_t v9;
  void *v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(a4 + 8), *(_QWORD *)(a3 + 16), (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  *a1 = AssociatedTypeWitness;
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  a1[1] = v9;
  v10 = malloc(*(_QWORD *)(v9 + 64));
  a1[2] = (unint64_t)v10;
  LazyPrefixWhileSequence<>.subscript.getter(a2, a3, a4, (uint64_t)v10);
  return _ArrayBuffer.subscript.read;
}

uint64_t protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance <> LazyPrefixWhileSequence<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = type metadata accessor for LazyPrefixWhileSequence<>.Index(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a2 - 8), a3);
  v8 = type metadata accessor for Optional(0, v5, v6, v7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a4, 1, 1, v8);
}

uint64_t protocol witness for Collection.index(after:) in conformance <> LazyPrefixWhileSequence<A>@<X0>(void (*a1)(char *, char *, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  return LazyPrefixWhileSequence<>.index(after:)(a1, a2, *(_QWORD *)(a3 - 8), a4, a5);
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance <> LazyPrefixWhileSequence<A>(void (*a1)(char *, char *, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v6 = *(_QWORD *)(a3 - 8);
  v7 = type metadata accessor for LazyPrefixWhileSequence<>.Index(0, *(_QWORD *)(a2 + 16), v6, a4);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v13 - v9;
  LazyPrefixWhileSequence<>.index(after:)(a1, a2, v6, v11, (char *)&v13 - v9);
  (*(void (**)(void (*)(char *, char *, uint64_t), uint64_t))(v8 + 8))(a1, v7);
  return (*(uint64_t (**)(_QWORD, char *, uint64_t))(v8 + 32))(a1, v10, v7);
}

uint64_t LazyPrefixWhileSequence<>.index(before:)@<X0>(void (*a1)(char *, unint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  char *v38;
  uint64_t (*v39)(char *, char *, unint64_t, uint64_t);
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  unint64_t *v52;
  uint64_t v53;
  uint64_t (*v54)(_BYTE *, char *, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void (*v58)(_BYTE *, _QWORD);
  uint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  void (*v63)(char *, uint64_t);
  char *v64;
  uint64_t v65;
  char v66;
  void (*v67)(char *, unint64_t);
  uint64_t v68;
  uint64_t (*v69)(char *);
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  unint64_t AssociatedConformanceWitness;
  char v75;
  unint64_t v76;
  char v77;
  void (*v78)(char *, unint64_t);
  unint64_t v79;
  uint64_t v80;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t (*v89)(char *, char *, unint64_t, uint64_t);
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t (*v102)(char *);
  uint64_t v103;
  void (*v104)(char *, unint64_t);
  _BYTE v105[40];

  v4 = a2;
  v104 = a1;
  v85 = a4;
  v91 = a3;
  v5 = *(_QWORD *)(a3 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(v5 + 8), v6, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v95 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v96 = AssociatedTypeWitness;
  v8 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v94 = (char *)&v84 - v9;
  v10 = *(_QWORD *)(v4 - 8);
  v11 = MEMORY[0x1E0C80A78](v8);
  v98 = (char *)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v92 = (char *)&v84 - v13;
  v14 = swift_getAssociatedTypeWitness(0, (const char *)v5, v6, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v97 = (char *)&v84 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v84 - v19;
  v21 = MEMORY[0x1E0C80A78](v18);
  v23 = (char *)&v84 - v22;
  v24 = MEMORY[0x1E0C80A78](v21);
  v26 = (char *)&v84 - v25;
  v27 = MEMORY[0x1E0C80A78](v24);
  v102 = (uint64_t (*)(char *))((char *)&v84 - v28);
  MEMORY[0x1E0C80A78](v27);
  v30 = (char *)&v84 - v29;
  v103 = v6;
  v32 = type metadata accessor for LazyPrefixWhileSequence<>._IndexRepresentation(0, v6, v5, v31);
  MEMORY[0x1E0C80A78](v32);
  v34 = (char *)&v84 - v33;
  (*(void (**)(char *, _QWORD))(v35 + 16))((char *)&v84 - v33, v104);
  v36 = (*(uint64_t (**)(char *, uint64_t, unint64_t))(v15 + 48))(v34, 1, v14);
  v99 = v26;
  v100 = v14;
  if (v36 == 1)
  {
    v37 = v103;
    (*(void (**)(uint64_t, uint64_t))(v5 + 64))(v103, v5);
    v38 = *(char **)(v5 + 184);
    v91 = *(_QWORD *)(v5 + 72);
    v92 = v38;
    v90 = *(_QWORD *)(swift_getAssociatedConformanceWitness(v5, v37, v14, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable)+ 8);
    v39 = *(uint64_t (**)(char *, char *, unint64_t, uint64_t))(v90 + 8);
    v88 = v15;
    v89 = v39;
    v86 = v5;
    v87 = v20;
    v93 = v23;
    while (1)
    {
      v40 = v23;
      v41 = v101;
      v42 = v103;
      ((void (*)(char *, uint64_t, uint64_t))v92)(v40, v103, v5);
      ((void (*)(uint64_t, uint64_t))v91)(v42, v5);
      v43 = v89(v20, v26, v14, v90);
      v104 = *(void (**)(char *, unint64_t))(v15 + 8);
      v104(v26, v14);
      v44 = v98;
      (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v98, v41, v4);
      v45 = v97;
      (*(void (**)(char *, char *, unint64_t))(v15 + 16))(v97, v20, v14);
      if ((v43 & 1) != 0)
        break;
      v49 = &v44[*(int *)(v4 + 36)];
      v50 = v10;
      v102 = *(uint64_t (**)(char *))v49;
      v51 = v44;
      v52 = (unint64_t *)*((_QWORD *)v49 + 1);
      v53 = v103;
      v54 = *(uint64_t (**)(_BYTE *, char *, uint64_t, uint64_t))(v5 + 80);
      swift_retain(v52, v46, v47, v48);
      v55 = v54(v105, v45, v53, v5);
      v56 = v4;
      v57 = v100;
      v58 = (void (*)(_BYTE *, _QWORD))v55;
      v59 = v95;
      v60 = v96;
      v61 = v45;
      v62 = v94;
      (*(void (**)(char *))(v95 + 16))(v94);
      v58(v105, 0);
      v104(v61, v57);
      v10 = v50;
      v63 = *(void (**)(char *, uint64_t))(v50 + 8);
      v64 = v51;
      v20 = v87;
      v65 = v56;
      v63(v64, v56);
      v66 = v102(v62);
      v15 = v88;
      LOBYTE(v58) = v66;
      swift_release((uint64_t)v52);
      v67 = *(void (**)(char *, unint64_t))(v59 + 8);
      v14 = v57;
      v67(v62, v60);
      if ((v58 & 1) == 0)
        goto LABEL_9;
      v23 = v93;
      v104(v93, v57);
      (*(void (**)(char *, char *, unint64_t))(v15 + 32))(v23, v20, v57);
      v5 = v86;
      v4 = v65;
      v26 = v99;
    }
    v104(v45, v14);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v44, v4);
LABEL_9:
    v104(v20, v14);
    v82 = v14;
    v83 = v85;
    (*(void (**)(uint64_t, char *, unint64_t))(v15 + 32))(v85, v93, v82);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, unint64_t))(v15 + 56))(v83, 0, 1, v82);
  }
  else
  {
    v68 = v4;
    v104 = *(void (**)(char *, unint64_t))(v15 + 32);
    ((void (*)(char *, char *, unint64_t))v104)(v30, v34, v14);
    v69 = v102;
    (*(void (**)(uint64_t (*)(char *), char *, unint64_t))(v15 + 16))(v102, v30, v14);
    v70 = v92;
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v92, v101, v68);
    v71 = v103;
    (*(void (**)(uint64_t, uint64_t))(v5 + 64))(v103, v5);
    v72 = v71;
    v73 = v99;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v5, v72, v14, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
    v75 = (*(uint64_t (**)(uint64_t (*)(char *), char *, unint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 8)
                                                                                              + 8))(v69, v73, v14);
    v76 = v14;
    v77 = v75;
    v78 = *(void (**)(char *, unint64_t))(v15 + 8);
    v78(v73, v76);
    if ((v77 & 1) != 0)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't move before startIndex", 28, 2, "Swift/PrefixWhile.swift", 23, 2, 0x10BuLL, 0);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v70, v68);
    v79 = v100;
    v78((char *)v102, v100);
    (*(void (**)(char *, uint64_t))(v91 + 32))(v30, v103);
    v78(v30, v79);
    v80 = v85;
    ((void (*)(uint64_t, char *, unint64_t))v104)(v85, v73, v79);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, unint64_t))(v15 + 56))(v80, 0, 1, v79);
  }
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance <> LazyPrefixWhileSequence<A>@<X0>(void (*a1)(char *, unint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return LazyPrefixWhileSequence<>.index(before:)(a1, a2, *(_QWORD *)(a3 - 8), a4);
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance <> LazyPrefixWhileSequence<A>(void (*a1)(char *, unint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v6 = *(_QWORD *)(a3 - 8);
  v7 = type metadata accessor for LazyPrefixWhileSequence<>.Index(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(v6 + 8), a4);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v12 - v9;
  LazyPrefixWhileSequence<>.index(before:)(a1, a2, v6, (uint64_t)&v12 - v9);
  (*(void (**)(_QWORD, uint64_t))(v8 + 8))(a1, v7);
  return (*(uint64_t (**)(void (*)(char *, unint64_t), char *, uint64_t))(v8 + 32))(a1, v10, v7);
}

Swift::Void __swiftcall _prespecialize()()
{
  canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Any>();
  canonical specialized generic type metadata accessor for _ContiguousArrayStorage<AnyHashable>();
  canonical specialized generic type metadata accessor for _ContiguousArrayStorage<[String : Swift.AnyObject]>();
  canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Int64>();
  canonical specialized generic type metadata accessor for _ContiguousArrayStorage<String>();
}

void Dictionary._Variant.__specialize_setValue(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 8))();
  __break(1u);
}

void Array.__specialize_append(_:)(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  __break(1u);
}

void Set._Variant.__specialize_insert(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 8))(a2);
  __break(1u);
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v3 = v2;
  v6 = *v2;
  v7 = specialized static Hasher._hash(seed:_:)(*(_QWORD *)(v6 + 40), a2);
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
  {
    v10 = ~v8;
    while (*(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v9) != a2)
    {
      v9 = (v9 + 1) & v10;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_5;
    }
    result = 0;
  }
  else
  {
LABEL_5:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v14 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v9, isUniquelyReferenced_nonNull_native);
    v12 = *v3;
    *v3 = v14;
    swift_bridgeObjectRelease(v12);
    result = 1;
  }
  *a1 = a2;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v3 = v2;
  v6 = *v2;
  v7 = specialized static Hasher._hash(seed:_:)(*(_QWORD *)(v6 + 40), a2);
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
  {
    v10 = ~v8;
    while (*(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v9) != a2)
    {
      v9 = (v9 + 1) & v10;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_5;
    }
    result = 0;
  }
  else
  {
LABEL_5:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v14 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v9, isUniquelyReferenced_nonNull_native);
    v12 = *v3;
    *v3 = v14;
    swift_bridgeObjectRelease(v12);
    result = 1;
  }
  *a1 = a2;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(unint64_t *a1, unint64_t a2, unint64_t a3, char *a4)
{
  uint64_t *v4;
  unint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  BOOL v18;
  BOOL v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31[5];
  __int128 v32;
  __int128 v33;

  v8 = *v4;
  v9 = _swift_stdlib_Hashing_parameters ^ *(_QWORD *)(*v4 + 40);
  v31[0] = 0;
  v31[1] = v9 ^ 0x736F6D6570736575;
  v31[2] = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v31[3] = v9 ^ 0x6C7967656E657261;
  v31[4] = unk_1ECD25520 ^ 0x7465646279746573;
  v32 = 0u;
  v33 = 0u;
  swift_bridgeObjectRetain(v8, a2, a3, a4);
  String.hash(into:)(v31, a2, a3);
  v10 = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v8 + 32);
  v12 = v10 & ~v11;
  if (((*(_QWORD *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
  {
    v13 = ~v11;
    v14 = *(_QWORD *)(v8 + 48);
    while (1)
    {
      v15 = (uint64_t *)(v14 + 16 * v12);
      v16 = v15[1];
      if (*v15 == a2 && v16 == a3)
        break;
      v18 = (~v16 & 0x6000000000000000) != 0 || (a3 & 0x2000000000000000) == 0;
      v19 = v18 || (a3 & 0x4000000000000000) == 0;
      if (v19 && (_stringCompareInternal(_:_:expecting:)(*v15, v16, a2, a3, 0) & 1) != 0)
        break;
      v12 = (v12 + 1) & v13;
      if (((*(_QWORD *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
        goto LABEL_18;
    }
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(v8);
    v20 = (unint64_t *)(*(_QWORD *)(*v4 + 48) + 16 * v12);
    v21 = v20[1];
    *a1 = *v20;
    a1[1] = v21;
    swift_bridgeObjectRetain(v21, v22, v23, v24);
    return 0;
  }
  else
  {
LABEL_18:
    swift_bridgeObjectRelease(v8);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v31[0] = *v4;
    *v4 = 0x8000000000000000;
    swift_bridgeObjectRetain(a3, v27, v28, v29);
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v12, isUniquelyReferenced_nonNull_native);
    v30 = *v4;
    *v4 = v31[0];
    swift_bridgeObjectRelease(v30);
    *a1 = a2;
    a1[1] = a3;
    return 1;
  }
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, uint64_t a2)
{
  unint64_t *v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v29;
  __int128 v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34[5];
  uint64_t v35[3];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38[3];
  uint64_t v39;
  uint64_t v40;

  v5 = *v2;
  v6 = *(_QWORD *)(*v2 + 40);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  __swift_project_boxed_opaque_existential_0Tm((_QWORD *)a2, v7);
  v9 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v8 + 8);
  swift_bridgeObjectRetain(v5, v10, v11, v12);
  v9(v38, v7, v8);
  v13 = v39;
  v14 = v40;
  __swift_project_boxed_opaque_existential_0Tm(v38, v39);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 40))(v6, v13, v14);
  __swift_destroy_boxed_opaque_existential_1Tm(v38);
  v16 = -1 << *(_BYTE *)(v5 + 32);
  v17 = v15 & ~v16;
  v32 = a1;
  v33 = v5;
  v18 = v5 + 56;
  if (((*(_QWORD *)(v18 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) != 0)
  {
    v19 = ~v16;
    do
    {
      outlined init with copy of AnyHashable(*(_QWORD *)(v33 + 48) + 40 * v17, (uint64_t)v38);
      v20 = v39;
      v21 = v40;
      __swift_project_boxed_opaque_existential_0Tm(v38, v39);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v21 + 8))(v35, v20, v21);
      v22 = v36;
      v23 = v37;
      __swift_project_boxed_opaque_existential_0Tm(v35, v36);
      v25 = *(_QWORD *)(a2 + 24);
      v24 = *(_QWORD *)(a2 + 32);
      __swift_project_boxed_opaque_existential_0Tm((_QWORD *)a2, v25);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v24 + 8))(v34, v25, v24);
      v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v23 + 16))(v34, v22, v23);
      __swift_destroy_boxed_opaque_existential_1Tm(v34);
      if (v26 == 2)
      {
        __swift_destroy_boxed_opaque_existential_1Tm(v35);
        outlined destroy of AnyHashable(v38);
      }
      else
      {
        __swift_destroy_boxed_opaque_existential_1Tm(v35);
        outlined destroy of AnyHashable(v38);
        if ((v26 & 1) != 0)
        {
          swift_bridgeObjectRelease(v33);
          outlined destroy of AnyHashable((uint64_t *)a2);
          outlined init with copy of AnyHashable(*(_QWORD *)(*v31 + 48) + 40 * v17, v32);
          return 0;
        }
      }
      v17 = (v17 + 1) & v19;
    }
    while (((*(_QWORD *)(v18 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) != 0);
  }
  swift_bridgeObjectRelease(v33);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v31);
  outlined init with copy of AnyHashable(a2, (uint64_t)v38);
  v35[0] = *v31;
  *v31 = 0x8000000000000000;
  specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v38, v17, isUniquelyReferenced_nonNull_native);
  v29 = *v31;
  *v31 = v35[0];
  swift_bridgeObjectRelease(v29);
  v30 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v32 = *(_OWORD *)a2;
  *(_OWORD *)(v32 + 16) = v30;
  *(_QWORD *)(v32 + 32) = *(_QWORD *)(a2 + 32);
  return 1;
}

{
  unint64_t *v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v29;
  __int128 v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34[5];
  uint64_t v35[3];
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v5 = *v2;
  v6 = *(_QWORD *)(*v2 + 40);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  __swift_project_boxed_opaque_existential_0Tm((_QWORD *)a2, v7);
  v9 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v8 + 8);
  swift_bridgeObjectRetain(v5, v10, v11, v12);
  v9(&v38, v7, v8);
  v13 = v39;
  v14 = v40;
  __swift_project_boxed_opaque_existential_0Tm(&v38, v39);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 40))(v6, v13, v14);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t *)&v38);
  v16 = -1 << *(_BYTE *)(v5 + 32);
  v17 = v15 & ~v16;
  v32 = a1;
  v33 = v5;
  v18 = v5 + 56;
  if (((*(_QWORD *)(v18 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) != 0)
  {
    v19 = ~v16;
    do
    {
      outlined init with copy of AnyHashable(*(_QWORD *)(v33 + 48) + 40 * v17, (uint64_t)&v38);
      v20 = v39;
      v21 = v40;
      __swift_project_boxed_opaque_existential_0Tm(&v38, v39);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v21 + 8))(v35, v20, v21);
      v22 = v36;
      v23 = v37;
      __swift_project_boxed_opaque_existential_0Tm(v35, v36);
      v25 = *(_QWORD *)(a2 + 24);
      v24 = *(_QWORD *)(a2 + 32);
      __swift_project_boxed_opaque_existential_0Tm((_QWORD *)a2, v25);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v24 + 8))(v34, v25, v24);
      v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v23 + 16))(v34, v22, v23);
      __swift_destroy_boxed_opaque_existential_1Tm(v34);
      if (v26 == 2)
      {
        __swift_destroy_boxed_opaque_existential_1Tm(v35);
        outlined destroy of AnyHashable((uint64_t *)&v38);
      }
      else
      {
        __swift_destroy_boxed_opaque_existential_1Tm(v35);
        outlined destroy of AnyHashable((uint64_t *)&v38);
        if ((v26 & 1) != 0)
        {
          swift_bridgeObjectRelease(v33);
          outlined destroy of AnyHashable((uint64_t *)a2);
          outlined init with copy of AnyHashable(*(_QWORD *)(*v31 + 48) + 40 * v17, v32);
          return 0;
        }
      }
      v17 = (v17 + 1) & v19;
    }
    while (((*(_QWORD *)(v18 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) != 0);
  }
  swift_bridgeObjectRelease(v33);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v31);
  outlined init with copy of AnyHashable(a2, (uint64_t)&v38);
  v35[0] = *v31;
  *v31 = 0x8000000000000000;
  specialized _NativeSet.insertNew(_:at:isUnique:)(&v38, v17, isUniquelyReferenced_nonNull_native);
  v29 = *v31;
  *v31 = v35[0];
  swift_bridgeObjectRelease(v29);
  v30 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v32 = *(_OWORD *)a2;
  *(_OWORD *)(v32 + 16) = v30;
  *(_QWORD *)(v32 + 32) = *(_QWORD *)(a2 + 32);
  return 1;
}

uint64_t Set._Variant.insert(_:)(char *a1, id *a2, uint64_t a3)
{
  unint64_t *v3;
  unint64_t *v4;
  char *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(char *, id *, uint64_t *, uint64_t);
  void (*v38)(char *, id *, uint64_t *);
  unint64_t v39;
  void (*v40)(char *, id *, uint64_t *);
  id *v41;
  char v42;
  void (*v43)(char *, uint64_t *);
  uint64_t v44;
  __objc2_class **v45;
  uint64_t v46;
  __objc2_class *v47;
  Swift::Int v48;
  uint64_t v49;
  uint64_t *v50;
  _BOOL8 isUniquelyReferenced_nonNull_native;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(char *, id *, uint64_t *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  __objc2_class **v64;

  v4 = v3;
  v7 = a1;
  v8 = *(uint64_t **)(a3 + 16);
  v9 = *(v8 - 1);
  v10 = MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v17 = (char *)&v55 - v16;
  v18 = *v4;
  if ((*v4 & 0xC000000000000001) != 0)
  {
    v58 = v7;
    v19 = v9;
    v23 = _bridgeAnythingToObjectiveC<A>(_:)(a2, v8);
    v24 = *v4;
    if ((*v4 & 0x8000000000000000) != 0)
      v25 = (void *)*v4;
    else
      v25 = (void *)(*v4 & 0xFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain(*v4, v20, v21, v22);
    v26 = objc_msgSend(v25, sel_member_, v23);
    swift_unknownObjectRelease(v23);
    if (v26)
    {
      (*(void (**)(id *, uint64_t *))(v19 + 8))(a2, v8);
      swift_bridgeObjectRelease(v24);
      _forceBridgeFromObjectiveC<A>(_:_:)(v26, (Class *)v8, v27, v58);
      swift_unknownObjectRelease(v26);
      return 0;
    }
    result = (uint64_t)objc_msgSend(v25, sel_count);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v44 = *(_QWORD *)(a3 + 24);
    v45 = _NativeSet.init(_:capacity:)(v25, result + 1, (Class *)v8, v44);
    v64 = v45;
    (*(void (**)(char *, id *, uint64_t *))(v19 + 16))(v12, a2, v8);
    v47 = v45[2];
    if (v45[3] <= v47)
    {
      v48 = (Swift::Int)&v47->isa + 1;
      type metadata accessor for _NativeSet(0, (uint64_t)v8, v44, v46);
      _NativeSet.resize(capacity:)(v48);
      v45 = v64;
    }
    _NativeSet._unsafeInsertNew(_:)((uint64_t)v12, (uint64_t)v45, (uint64_t)v8, v44);
    v49 = *v4;
    *v4 = (unint64_t)v45;
    swift_bridgeObjectRelease(v49);
    (*(void (**)(char *, id *, uint64_t *))(v19 + 32))(v58, a2, v8);
    return 1;
  }
  v57 = (uint64_t *)v4;
  v29 = *(_QWORD *)(v18 + 40);
  v30 = *(_QWORD *)(a3 + 24);
  v31 = *(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(v30 + 32);
  swift_bridgeObjectRetain(v18, v13, v14, v15);
  v32 = v31(v29, v8, v30);
  v33 = -1 << *(_BYTE *)(v18 + 32);
  v34 = v32 & ~v33;
  v62 = v18 + 56;
  if (((*(_QWORD *)(v18 + 56 + ((v34 >> 3) & 0xFFFFFFFFFFFFF8)) >> v34) & 1) == 0)
  {
    swift_bridgeObjectRelease(v18);
    v38 = *(void (**)(char *, id *, uint64_t *))(v9 + 16);
LABEL_17:
    v50 = v57;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v57);
    v38(v17, a2, v8);
    v64 = (__objc2_class **)*v50;
    *v50 = 0x8000000000000000;
    v53 = type metadata accessor for _NativeSet(0, (uint64_t)v8, v30, v52);
    _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v17, v34, isUniquelyReferenced_nonNull_native, v53);
    v54 = *v50;
    *v50 = (uint64_t)v64;
    swift_bridgeObjectRelease(v54);
    (*(void (**)(char *, id *, uint64_t *))(v9 + 32))(v7, a2, v8);
    return 1;
  }
  v58 = v7;
  v59 = ~v33;
  v35 = v9;
  v56 = v30;
  v36 = *(_QWORD *)(v30 + 8);
  v37 = *(uint64_t (**)(char *, id *, uint64_t *, uint64_t))(v36 + 8);
  v60 = *(_QWORD *)(v35 + 72);
  v61 = v37;
  v63 = v35;
  v38 = *(void (**)(char *, id *, uint64_t *))(v35 + 16);
  while (1)
  {
    v39 = v60 * v34;
    v40 = v38;
    v38(v17, (id *)(*(_QWORD *)(v18 + 48) + v60 * v34), v8);
    v41 = a2;
    v42 = v61(v17, a2, v8, v36);
    v43 = *(void (**)(char *, uint64_t *))(v63 + 8);
    v43(v17, v8);
    if ((v42 & 1) != 0)
      break;
    v34 = (v34 + 1) & v59;
    a2 = v41;
    v38 = v40;
    if (((*(_QWORD *)(v62 + ((v34 >> 3) & 0xFFFFFFFFFFFFF8)) >> v34) & 1) == 0)
    {
      swift_bridgeObjectRelease(v18);
      v7 = v58;
      v9 = v63;
      v30 = v56;
      goto LABEL_17;
    }
  }
  swift_bridgeObjectRelease(v18);
  v43((char *)v41, v8);
  v40(v58, (id *)(*(_QWORD *)(*v57 + 48) + v39), v8);
  return 0;
}

uint64_t specialized Set._Variant.remove(_:)(unint64_t a1, unint64_t a2, uint64_t a3, char *a4)
{
  uint64_t *v4;
  unint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  BOOL v17;
  BOOL v18;
  BOOL isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v27[5];
  __int128 v28;
  __int128 v29;

  v7 = *v4;
  v8 = _swift_stdlib_Hashing_parameters ^ *(_QWORD *)(*v4 + 40);
  v27[0] = 0;
  v27[1] = v8 ^ 0x736F6D6570736575;
  v27[2] = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v27[3] = v8 ^ 0x6C7967656E657261;
  v27[4] = unk_1ECD25520 ^ 0x7465646279746573;
  v28 = 0u;
  v29 = 0u;
  swift_bridgeObjectRetain(v7, a2, a3, a4);
  String.hash(into:)(v27, a1, a2);
  v9 = Hasher._finalize()();
  v10 = -1 << *(_BYTE *)(v7 + 32);
  v11 = v9 & ~v10;
  if (((*(_QWORD *)(v7 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
  {
    v12 = ~v10;
    v13 = *(_QWORD *)(v7 + 48);
    while (1)
    {
      v14 = (uint64_t *)(v13 + 16 * v11);
      v15 = v14[1];
      if (*v14 == a1 && v15 == a2)
        break;
      v17 = (~v15 & 0x6000000000000000) != 0 || (a2 & 0x2000000000000000) == 0;
      v18 = v17 || (a2 & 0x4000000000000000) == 0;
      if (v18 && (_stringCompareInternal(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) != 0)
        break;
      v11 = (v11 + 1) & v12;
      if (((*(_QWORD *)(v7 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
        goto LABEL_20;
    }
    swift_bridgeObjectRelease(v7);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v23 = *v4;
    v27[0] = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeSet.copy()();
      v23 = v27[0];
    }
    v24 = *(_QWORD *)(*(_QWORD *)(v23 + 48) + 16 * v11);
    specialized _NativeSet._delete(at:)(v11, v20, v21, v22);
    v25 = *v4;
    *v4 = v27[0];
    swift_bridgeObjectRelease(v25);
  }
  else
  {
LABEL_20:
    swift_bridgeObjectRelease(v7);
    return 0;
  }
  return v24;
}

double specialized Set._Variant.remove(_:)@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t *v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  BOOL isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  double result;
  uint64_t *v35;
  uint64_t v37;
  uint64_t v38[5];
  uint64_t v39[3];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[3];
  uint64_t v43;
  uint64_t v44;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 40);
  v6 = a1[3];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v6);
  v8 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v7 + 8);
  swift_bridgeObjectRetain(v4, v9, v10, v11);
  v8(v42, v6, v7);
  v12 = v43;
  v13 = v44;
  __swift_project_boxed_opaque_existential_0Tm(v42, v43);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 40))(v5, v12, v13);
  __swift_destroy_boxed_opaque_existential_1Tm(v42);
  v15 = -1 << *(_BYTE *)(v4 + 32);
  v16 = v14 & ~v15;
  v17 = v4;
  v18 = v4 + 56;
  if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
  {
LABEL_10:
    swift_bridgeObjectRelease(v17);
    *(_QWORD *)(a2 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return result;
  }
  v37 = ~v15;
  while (1)
  {
    outlined init with copy of AnyHashable(*(_QWORD *)(v17 + 48) + 40 * v16, (uint64_t)v42);
    v19 = v43;
    v20 = v44;
    __swift_project_boxed_opaque_existential_0Tm(v42, v43);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v20 + 8))(v39, v19, v20);
    v21 = v40;
    v22 = v41;
    __swift_project_boxed_opaque_existential_0Tm(v39, v40);
    v24 = a1[3];
    v23 = a1[4];
    __swift_project_boxed_opaque_existential_0Tm(a1, v24);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v23 + 8))(v38, v24, v23);
    v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v22 + 16))(v38, v21, v22);
    __swift_destroy_boxed_opaque_existential_1Tm(v38);
    if (v25 != 2)
      break;
    __swift_destroy_boxed_opaque_existential_1Tm(v39);
    outlined destroy of AnyHashable(v42);
LABEL_4:
    v16 = (v16 + 1) & v37;
    if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      goto LABEL_10;
  }
  __swift_destroy_boxed_opaque_existential_1Tm(v39);
  outlined destroy of AnyHashable(v42);
  if ((v25 & 1) == 0)
    goto LABEL_4;
  swift_bridgeObjectRelease(v17);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v35);
  v30 = *v35;
  v42[0] = *v35;
  *v35 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()();
    v30 = v42[0];
  }
  v31 = *(_QWORD *)(v30 + 48) + 40 * v16;
  v32 = *(_OWORD *)(v31 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v31;
  *(_OWORD *)(a2 + 16) = v32;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v31 + 32);
  specialized _NativeSet._delete(at:)(v16, v27, v28, v29);
  v33 = *v35;
  *v35 = v42[0];
  swift_bridgeObjectRelease(v33);
  return result;
}

void specialized Set._Variant.remove(_:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t *v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t *v26;
  BOOL isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  char v38;
  _QWORD *v39;
  void *v40;
  uint64_t v41;
  unint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  int64_t v54;
  unint64_t v55;
  int64_t v56;
  uint64_t *v57;
  uint64_t v59;
  uint64_t v60[5];
  uint64_t v61[3];
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 40);
  v6 = a1[3];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v6);
  v8 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v7 + 8);
  swift_bridgeObjectRetain(v4, v9, v10, v11);
  v8(&v64, v6, v7);
  v12 = *((_QWORD *)&v65 + 1);
  v13 = v66;
  __swift_project_boxed_opaque_existential_0Tm(&v64, *((uint64_t *)&v65 + 1));
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 40))(v5, v12, v13);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t *)&v64);
  v15 = -1 << *(_BYTE *)(v4 + 32);
  v16 = v14 & ~v15;
  v17 = v4;
  v18 = v4 + 56;
  if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
  {
LABEL_10:
    swift_bridgeObjectRelease(v17);
    *(_QWORD *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return;
  }
  v59 = ~v15;
  while (1)
  {
    outlined init with copy of AnyHashable(*(_QWORD *)(v17 + 48) + 40 * v16, (uint64_t)&v64);
    v19 = *((_QWORD *)&v65 + 1);
    v20 = v66;
    __swift_project_boxed_opaque_existential_0Tm(&v64, *((uint64_t *)&v65 + 1));
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v20 + 8))(v61, v19, v20);
    v21 = v62;
    v22 = v63;
    __swift_project_boxed_opaque_existential_0Tm(v61, v62);
    v24 = a1[3];
    v23 = a1[4];
    __swift_project_boxed_opaque_existential_0Tm(a1, v24);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v23 + 8))(v60, v24, v23);
    v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v22 + 16))(v60, v21, v22);
    __swift_destroy_boxed_opaque_existential_1Tm(v60);
    if (v25 != 2)
      break;
    __swift_destroy_boxed_opaque_existential_1Tm(v61);
    outlined destroy of AnyHashable((uint64_t *)&v64);
LABEL_4:
    v16 = (v16 + 1) & v59;
    if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      goto LABEL_10;
  }
  __swift_destroy_boxed_opaque_existential_1Tm(v61);
  outlined destroy of AnyHashable((uint64_t *)&v64);
  if ((v25 & 1) == 0)
    goto LABEL_4;
  swift_bridgeObjectRelease(v17);
  v26 = v57;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v57);
  v31 = *v57;
  v61[0] = *v57;
  *v57 = 0x8000000000000000;
  if (isUniquelyReferenced_nonNull_native)
  {
    v32 = v31;
LABEL_9:
    v33 = *(_QWORD *)(v32 + 48) + 40 * v16;
    v34 = *(_OWORD *)(v33 + 16);
    *(_OWORD *)a2 = *(_OWORD *)v33;
    *(_OWORD *)(a2 + 16) = v34;
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(v33 + 32);
    specialized _NativeSet._delete(at:)(v16, v28, v29, v30);
    v35 = *v26;
    *v26 = v61[0];
    swift_bridgeObjectRelease(v35);
    return;
  }
  v36 = *(unsigned int *)(v31 + 36);
  v37 = *(_QWORD **)(v31 + 40);
  v38 = *(_BYTE *)(v31 + 32);
  LOBYTE(v64) = 0;
  v39 = specialized static _SetStorage.allocate(scale:age:seed:)(v38, v36, v37, 0);
  v32 = (uint64_t)v39;
  if (!*(_QWORD *)(v31 + 16))
  {
LABEL_36:
    swift_bridgeObjectRelease(v31);
    v61[0] = v32;
    v26 = v57;
    goto LABEL_9;
  }
  v40 = v39 + 7;
  v41 = v31 + 56;
  v42 = (unint64_t)((1 << *(_BYTE *)(v32 + 32)) + 63) >> 6;
  if (v32 != v31 || (unint64_t)v40 >= v41 + 8 * v42)
    memmove(v40, (const void *)(v31 + 56), 8 * v42);
  v43 = 0;
  *(_QWORD *)(v32 + 16) = *(_QWORD *)(v31 + 16);
  v44 = 1 << *(_BYTE *)(v31 + 32);
  v45 = -1;
  if (v44 < 64)
    v45 = ~(-1 << v44);
  v46 = v45 & *(_QWORD *)(v31 + 56);
  v47 = (unint64_t)(v44 + 63) >> 6;
  while (2)
  {
    if (v46)
    {
      v48 = __clz(__rbit64(v46));
      v46 &= v46 - 1;
      v49 = v48 | (v43 << 6);
LABEL_20:
      v50 = 40 * v49;
      outlined init with copy of AnyHashable(*(_QWORD *)(v31 + 48) + 40 * v49, (uint64_t)&v64);
      v51 = *(_QWORD *)(v32 + 48) + v50;
      v52 = v64;
      v53 = v65;
      *(_QWORD *)(v51 + 32) = v66;
      *(_OWORD *)v51 = v52;
      *(_OWORD *)(v51 + 16) = v53;
      continue;
    }
    break;
  }
  v54 = v43 + 1;
  if (__OFADD__(v43, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v54 >= v47)
    goto LABEL_36;
  v55 = *(_QWORD *)(v41 + 8 * v54);
  ++v43;
  if (v55)
    goto LABEL_35;
  v43 = v54 + 1;
  if (v54 + 1 >= v47)
    goto LABEL_36;
  v55 = *(_QWORD *)(v41 + 8 * v43);
  if (v55)
    goto LABEL_35;
  v43 = v54 + 2;
  if (v54 + 2 >= v47)
    goto LABEL_36;
  v55 = *(_QWORD *)(v41 + 8 * v43);
  if (v55)
  {
LABEL_35:
    v46 = (v55 - 1) & v55;
    v49 = __clz(__rbit64(v55)) + (v43 << 6);
    goto LABEL_20;
  }
  v56 = v54 + 3;
  if (v56 >= v47)
    goto LABEL_36;
  v55 = *(_QWORD *)(v41 + 8 * v56);
  if (v55)
  {
    v43 = v56;
    goto LABEL_35;
  }
  while (1)
  {
    v43 = v56 + 1;
    if (__OFADD__(v56, 1))
      break;
    if (v43 >= v47)
      goto LABEL_36;
    v55 = *(_QWORD *)(v41 + 8 * v43);
    ++v56;
    if (v55)
      goto LABEL_35;
  }
LABEL_38:
  __break(1u);
}

void Set._Variant.remove(_:)(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t *v3;
  unint64_t *v4;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(char *, id *, uint64_t *, uint64_t);
  uint64_t v26;
  void (*v27)(char *, unint64_t, uint64_t *);
  char v28;
  uint64_t *v29;
  _BOOL4 isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v4 = v3;
  v8 = *(uint64_t **)(a2 + 16);
  v44 = *(v8 - 1);
  MEMORY[0x1E0C80A78](a1);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *v4;
  if ((*v4 & 0xC000000000000001) != 0)
  {
    if (v14 < 0)
      v15 = (void *)*v4;
    else
      v15 = (void *)(v14 & 0xFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain(*v4, v9, v10, v11);
    v16 = _bridgeAnythingToObjectiveC<A>(_:)(a1, v8);
    v17 = objc_msgSend(v15, sel_member_, v16);
    swift_unknownObjectRelease(v16);
    if (v17)
    {
      swift_unknownObjectRelease(v17);
      Set._Variant._migrateToNative(_:removing:)(v15, (char *)a1, a2, a3);
      swift_bridgeObjectRelease(v14);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t *))(v44 + 56))(a3, 0, 1, v8);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(v44 + 56))(a3, 1, 1, v8);
      swift_bridgeObjectRelease(v14);
    }
  }
  else
  {
    v18 = *(_QWORD *)(v14 + 40);
    v19 = *(_QWORD *)(a2 + 24);
    v20 = *(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(v19 + 32);
    swift_bridgeObjectRetain(*v4, v9, v10, v11);
    v21 = v20(v18, v8, v19);
    v22 = -1 << *(_BYTE *)(v14 + 32);
    v23 = v21 & ~v22;
    v43 = v14 + 56;
    if (((*(_QWORD *)(v14 + 56 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) != 0)
    {
      v38 = (uint64_t *)v4;
      v39 = v19;
      v40 = a3;
      v41 = ~v22;
      v42 = a1;
      v24 = *(_QWORD *)(v19 + 8);
      v25 = *(uint64_t (**)(char *, id *, uint64_t *, uint64_t))(v24 + 8);
      v26 = *(_QWORD *)(v44 + 72);
      v27 = *(void (**)(char *, unint64_t, uint64_t *))(v44 + 16);
      while (1)
      {
        v27(v13, *(_QWORD *)(v14 + 48) + v26 * v23, v8);
        v28 = v25(v13, v42, v8, v24);
        (*(void (**)(char *, uint64_t *))(v44 + 8))(v13, v8);
        if ((v28 & 1) != 0)
          break;
        v23 = (v23 + 1) & v41;
        if (((*(_QWORD *)(v43 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
        {
          swift_bridgeObjectRelease(v14);
          a3 = v40;
          goto LABEL_14;
        }
      }
      swift_bridgeObjectRelease(v14);
      v29 = v38;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v38);
      v32 = *v29;
      v45 = *v29;
      *v29 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        type metadata accessor for _NativeSet(0, (uint64_t)v8, v39, v31);
        _NativeSet.copy()();
        v32 = v45;
      }
      v33 = *(_QWORD *)(v32 + 48) + v26 * v23;
      v34 = v44;
      v35 = v40;
      (*(void (**)(uint64_t, unint64_t, uint64_t *))(v44 + 32))(v40, v33, v8);
      type metadata accessor for _NativeSet(0, (uint64_t)v8, v39, v36);
      _NativeSet._delete(at:)((Swift::_HashTable::Bucket)v23);
      v37 = *v29;
      *v29 = v32;
      swift_bridgeObjectRelease(v37);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t *))(v34 + 56))(v35, 0, 1, v8);
    }
    else
    {
      swift_bridgeObjectRelease(v14);
LABEL_14:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(v44 + 56))(a3, 1, 1, v8);
    }
  }
}

void _NativeSet.__specialize_insertNew(_:at:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 8))();
  __break(1u);
}

void _NativeSet.__specialize__unsafeInsertNew(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a1, a4);
  __break(1u);
}

void print(_:separator:terminator:)(uint64_t a1, uint64_t a2, unint64_t a3, char *a4, unint64_t a5)
{
  print(_:separator:terminator:)(a1, a2, a3, a4, a5, (void (*)(uint64_t, uint64_t, unint64_t, char *, unint64_t, uint64_t *))specialized _print<A>(_:separator:terminator:to:), (void (*)(uint64_t *, uint64_t, Class *, ValueMetadata *, _UNKNOWN **))_print_unlocked<A, B>(_:_:));
}

void specialized _print<A>(_:separator:terminator:to:)(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, void *a5, unint64_t *a6)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v41[4];
  _OWORD v42[2];

  v7 = a5;
  v8 = a4;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
    a3 = 0xE000000000000000;
    goto LABEL_13;
  }
  outlined init with copy of Any(a1 + 32, (uint64_t)v42);
  outlined init with take of Any(v42, v41);
  v13 = *a6;
  v14 = a6[1];
  v15 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000) == 0)
    v15 = *a6 & 0xFFFFFFFFFFFFLL;
  if (v15 || (v13 & ~v14 & 0x2000000000000000) != 0)
  {
    if ((v14 & 0x2000000000000000) == 0
      || (v16 = specialized _SmallString.init(_:appending:)(v13, a6[1], 0, 0xE000000000000000), (v18 & 1) != 0))
    {
      _StringGuts.append(_:)(0, 0xE000000000000000, 0, 0);
      swift_bridgeObjectRelease(0xE000000000000000);
    }
    else
    {
      v19 = v16;
      v20 = v17;
      swift_bridgeObjectRelease(v14);
      swift_bridgeObjectRelease(0xE000000000000000);
      *a6 = v19;
      a6[1] = v20;
    }
  }
  else
  {
    swift_bridgeObjectRelease(a6[1]);
    *a6 = 0;
    a6[1] = 0xE000000000000000;
  }
  _print_unlocked<A, B>(_:_:)((uint64_t)v41, (uint64_t)a6, qword_1E0EB1338, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  __swift_destroy_boxed_opaque_existential_1Tm(v41);
  swift_bridgeObjectRetain(a3, v21, v22, v23);
  v24 = v9 - 1;
  if (v9 != 1)
  {
    v26 = a1 + 64;
    while (1)
    {
      outlined init with copy of Any(v26, (uint64_t)v42);
      outlined init with take of Any(v42, v41);
      v31 = *a6;
      v32 = a6[1];
      v33 = HIBYTE(v32) & 0xF;
      if ((v32 & 0x2000000000000000) == 0)
        v33 = *a6 & 0xFFFFFFFFFFFFLL;
      if (!v33 && (v31 & ~v32 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(a6[1]);
        *a6 = a2;
        a6[1] = a3;
        goto LABEL_17;
      }
      if ((v32 & 0x2000000000000000) == 0)
        break;
      if ((a3 & 0x2000000000000000) == 0)
        goto LABEL_15;
      v34 = specialized _SmallString.init(_:appending:)(v31, a6[1], a2, a3);
      v27 = HIBYTE(a3) & 0xF;
      if ((v36 & 1) == 0)
      {
        v37 = v34;
        v38 = v35;
        swift_bridgeObjectRelease(v32);
        swift_bridgeObjectRelease(a3);
        *a6 = v37;
        a6[1] = v38;
        goto LABEL_17;
      }
LABEL_16:
      _StringGuts.append(_:)(a2, a3, 0, v27);
      swift_bridgeObjectRelease(a3);
LABEL_17:
      _print_unlocked<A, B>(_:_:)((uint64_t)v41, (uint64_t)a6, qword_1E0EB1338, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
      __swift_destroy_boxed_opaque_existential_1Tm(v41);
      swift_bridgeObjectRetain(a3, v28, v29, v30);
      v26 += 32;
      if (!--v24)
        goto LABEL_11;
    }
    v27 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) != 0)
      goto LABEL_16;
LABEL_15:
    v27 = a2 & 0xFFFFFFFFFFFFLL;
    goto LABEL_16;
  }
LABEL_11:
  v8 = a4;
  v7 = a5;
LABEL_13:
  swift_bridgeObjectRelease(a3);
  v25._countAndFlagsBits = v8;
  v25._object = v7;
  String.write(_:)(v25);
}

void specialized _print<A>(_:separator:terminator:to:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, unint64_t *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  size_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  size_t v40;
  Swift::String v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  _OWORD *v46;
  size_t v47;
  unint64_t v48;
  unint64_t v49;
  size_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD v55[2];
  uint64_t v56[4];
  _OWORD v57[2];

  _swift_stdlib_flockfile_stdout();
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    v51 = a4;
    v52 = a5;
    v12 = 0;
    v13 = a1 + 32;
    v14 = 0xE000000000000000;
    v53 = a3;
    while (1)
    {
      outlined init with copy of Any(v13, (uint64_t)v57);
      outlined init with take of Any(v57, v56);
      v23 = *a6;
      v24 = a6[1];
      v25 = HIBYTE(v24) & 0xF;
      if ((v24 & 0x2000000000000000) == 0)
        v25 = *a6 & 0xFFFFFFFFFFFFLL;
      if (!v25 && (v23 & ~v24 & 0x2000000000000000) == 0)
        break;
      v26 = v14 & 0x2000000000000000;
      if ((v24 & 0x2000000000000000) == 0
        || !v26
        || (v27 = specialized _SmallString.init(_:appending:)(v23, a6[1], v12, v14), (v29 & 1) != 0))
      {
        if (v26)
          v36 = HIBYTE(v14) & 0xF;
        else
          v36 = v12 & 0xFFFFFFFFFFFFLL;
        _StringGuts.append(_:)(v12, v14, 0, v36);
        v35 = v14;
        a3 = v53;
LABEL_19:
        v37 = HIBYTE(v35) & 0xF;
        if (!v26)
          v37 = v12 & 0xFFFFFFFFFFFFLL;
        if (!v37)
          goto LABEL_5;
        goto LABEL_22;
      }
      v30 = v27;
      v31 = v28;
      swift_bridgeObjectRelease(v24);
      *a6 = v30;
      a6[1] = v31;
      v35 = v14;
      a3 = v53;
      if ((v14 & 0xF00000000000000) == 0)
        goto LABEL_5;
LABEL_22:
      swift_bridgeObjectRetain(v14, v32, v33, v34);
      if ((v35 & 0x1000000000000000) != 0)
      {
        v12 = specialized static String._copying(_:)(v12, v14);
        v35 = v39;
        swift_bridgeObjectRelease(v14);
        v38 = v35;
        if ((v35 & 0x2000000000000000) == 0)
        {
LABEL_24:
          if ((v12 & 0x1000000000000000) != 0)
          {
            v16 = (_QWORD *)((v35 & 0xFFFFFFFFFFFFFFFLL) + 32);
            v15 = v12 & 0xFFFFFFFFFFFFLL;
          }
          else
          {
            v16 = _StringObject.sharedUTF8.getter(v12, v38);
            if (!v16)
              goto LABEL_46;
            v15 = v40;
          }
          goto LABEL_4;
        }
      }
      else
      {
        v38 = v14;
        if ((v35 & 0x2000000000000000) == 0)
          goto LABEL_24;
      }
      v15 = HIBYTE(v35) & 0xF;
      v55[0] = v12;
      v55[1] = v35 & 0xFFFFFFFFFFFFFFLL;
      v16 = v55;
LABEL_4:
      _swift_stdlib_fwrite_stdout(v16, 1uLL, v15);
      swift_bridgeObjectRelease(v38);
LABEL_5:
      swift_bridgeObjectRelease(v14);
      _print_unlocked<A, B>(_:_:)((uint64_t)v56, (uint64_t)a6, qword_1E0EB1338, (uint64_t)&unk_1E0EADF40, (uint64_t)&protocol witness table for _TeeStream<A, B>);
      __swift_destroy_boxed_opaque_existential_1Tm(v56);
      swift_bridgeObjectRetain(a3, v17, v18, v19);
      v13 += 32;
      v14 = a3;
      v12 = a2;
      if (!--v11)
      {
        a4 = v51;
        a5 = v52;
        goto LABEL_33;
      }
    }
    swift_bridgeObjectRetain(v14, v20, v21, v22);
    swift_bridgeObjectRelease(v24);
    *a6 = v12;
    a6[1] = v14;
    v26 = v14 & 0x2000000000000000;
    v35 = v14;
    goto LABEL_19;
  }
  a3 = 0xE000000000000000;
LABEL_33:
  swift_bridgeObjectRelease(a3);
  v41._countAndFlagsBits = a4;
  v41._object = (void *)a5;
  String.write(_:)(v41);
  v45 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0)
    v45 = a4 & 0xFFFFFFFFFFFFLL;
  if (v45)
  {
    swift_bridgeObjectRetain(a5, v42, v43, v44);
    if ((a5 & 0x1000000000000000) != 0)
    {
      a4 = specialized static String._copying(_:)(a4, a5);
      v49 = v48;
      swift_bridgeObjectRelease(a5);
      a5 = v49;
      if ((v49 & 0x2000000000000000) == 0)
      {
LABEL_38:
        if ((a4 & 0x1000000000000000) != 0)
        {
          v46 = (_OWORD *)((a5 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v47 = a4 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          v46 = _StringObject.sharedUTF8.getter(a4, a5);
          if (!v46)
LABEL_46:
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/OutputStream.swift", 24, 2, 0x239uLL, 0);
          v47 = v50;
        }
        goto LABEL_42;
      }
    }
    else if ((a5 & 0x2000000000000000) == 0)
    {
      goto LABEL_38;
    }
    v47 = HIBYTE(a5) & 0xF;
    *(_QWORD *)&v57[0] = a4;
    *((_QWORD *)&v57[0] + 1) = a5 & 0xFFFFFFFFFFFFFFLL;
    v46 = v57;
LABEL_42:
    _swift_stdlib_fwrite_stdout(v46, 1uLL, v47);
    swift_bridgeObjectRelease(a5);
  }
  _swift_stdlib_funlockfile_stdout();
}

void debugPrint(_:separator:terminator:)(uint64_t a1, uint64_t a2, unint64_t a3, char *a4, unint64_t a5)
{
  print(_:separator:terminator:)(a1, a2, a3, a4, a5, (void (*)(uint64_t, uint64_t, unint64_t, char *, unint64_t, uint64_t *))specialized _debugPrint<A>(_:separator:terminator:to:), (void (*)(uint64_t *, uint64_t, Class *, ValueMetadata *, _UNKNOWN **))_debugPrint_unlocked<A, B>(_:_:));
}

void print(_:separator:terminator:)(uint64_t a1, uint64_t a2, unint64_t a3, char *a4, unint64_t a5, void (*a6)(uint64_t, uint64_t, unint64_t, char *, unint64_t, uint64_t *), void (*a7)(uint64_t *, uint64_t, Class *, ValueMetadata *, _UNKNOWN **))
{
  void (*v12)(uint64_t, unint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v12 = (void (*)(uint64_t, unint64_t))_playgroundPrintHook;
  if (_playgroundPrintHook)
  {
    v14 = qword_1EDC1B9C8;
    v16 = 0;
    v17 = 0xE000000000000000;
    swift_retain((unint64_t *)qword_1EDC1B9C8, a2, a3, a4);
    a6(a1, a2, a3, a4, a5, &v16);
    v15 = v17;
    v12(v16, v17);
    swift_bridgeObjectRelease(v15);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed String) -> ())?((uint64_t)v12, v14);
  }
  else
  {
    specialized _print<A>(_:separator:terminator:to:)(a1, a2, a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
}

void specialized _debugPrint<A>(_:separator:terminator:to:)(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t *a6)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  _BOOL4 isUniquelyReferenced_nonNull_native;
  int64_t v31;
  char v32;
  int64_t v33;
  char v34;
  BOOL v36;
  _BOOL4 v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  char v59;
  Swift::Int v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  size_t v66;
  unint64_t v67;
  int64_t v68;
  uint64_t v69;
  int64_t v70;
  char *v71;
  uint64_t v72;
  size_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  BOOL v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  char v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  unint64_t v105;
  Swift::String::Index v106;
  Swift::String::Index v107;
  Swift::String::Index v108;
  Swift::String::Index v109;
  Swift::Int v110;
  unsigned __int8 *v111;
  uint64_t v112;
  unsigned __int8 *v113;
  size_t v114;
  char *v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v133;
  uint64_t __src;
  uint64_t v135;
  uint64_t v136[4];
  _OWORD v137[2];

  v7 = a5;
  v8 = a4;
  v131 = *(_QWORD *)(a1 + 16);
  if (v131)
  {
    v9 = a3;
    v10 = 0;
    v11 = 0;
    v130 = a1 + 32;
    v12 = 0xE000000000000000;
    while (1)
    {
      outlined init with copy of Any(v130 + 32 * v10, (uint64_t)v137);
      outlined init with take of Any(v137, v136);
      v20 = *a6;
      v19 = a6[1];
      v21 = HIBYTE(v19) & 0xF;
      if ((v19 & 0x2000000000000000) != 0)
        v22 = HIBYTE(v19) & 0xF;
      else
        v22 = *a6 & 0xFFFFFFFFFFFFLL;
      if (!v22 && (v20 & ~v19 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(a6[1]);
        *a6 = v11;
        a6[1] = v12;
        goto LABEL_4;
      }
      v23 = HIBYTE(v12) & 0xF;
      if ((v19 & 0x2000000000000000) != 0)
      {
        if ((v12 & 0x2000000000000000) != 0)
        {
          v25 = v21 + v23;
          if ((unint64_t)(v21 + v23) <= 0xF)
          {
            if (v23)
            {
              v89 = 0;
              v90 = 0;
              v91 = a6[1];
              do
              {
                v92 = v21 + v90;
                v93 = v90 + 1;
                if (v90 >= 8)
                  v94 = v12;
                else
                  v94 = v11;
                v95 = v94 >> (v89 & 0x38);
                v96 = (8 * v21 + v89) & 0x38;
                v97 = (-255 << v96) - 1;
                v98 = (unint64_t)v95 << v96;
                v99 = v98 | v97 & v91;
                v100 = v98 | v97 & v20;
                if (v92 < 8)
                  v20 = v100;
                else
                  v91 = v99;
                v89 += 8;
                v90 = v93;
              }
              while (v23 != v93);
            }
            else
            {
              v91 = a6[1];
            }
            swift_bridgeObjectRelease(a6[1]);
            swift_bridgeObjectRelease(v12);
            v105 = 0xE000000000000000;
            if (v20 & 0x8080808080808080 | v91 & 0x80808080808080)
              v105 = 0xA000000000000000;
            v55 = v105 & 0xFF00000000000000 | (v25 << 56) | v91 & 0xFFFFFFFFFFFFFFLL;
LABEL_122:
            *a6 = v20;
            a6[1] = v55;
            goto LABEL_4;
          }
          v24 = 1;
        }
        else
        {
          v24 = 0;
        }
      }
      else
      {
        v24 = v12 & 0x2000000000000000;
      }
      v26 = v11 & 0xFFFFFFFFFFFFLL;
      v133 = v24;
      if (v24)
        v27 = HIBYTE(v12) & 0xF;
      else
        v27 = v11 & 0xFFFFFFFFFFFFLL;
      v129 = v27;
      if ((v12 & 0x1000000000000000) != 0)
      {
        swift_bridgeObjectRetain_n(v12, 2, v17, v18);
        v106._rawBits = 1;
        v107._rawBits = (v27 << 16) | 1;
        v108._rawBits = _StringGuts.validateScalarRange(_:)(v106, v107, v11, v12);
        if (v108._rawBits < 0x10000)
          v108._rawBits |= 3;
        v27 = specialized Collection.count.getter(v108, v109, v11, v12);
        swift_bridgeObjectRelease(v12);
        if ((v19 & 0x1000000000000000) == 0)
        {
LABEL_21:
          v28 = __OFADD__(v22, v27);
          v29 = v22 + v27;
          if (v28)
            goto LABEL_159;
          goto LABEL_22;
        }
      }
      else
      {
        swift_bridgeObjectRetain(v12, v16, v17, v18);
        if ((v19 & 0x1000000000000000) == 0)
          goto LABEL_21;
      }
      v110 = String.UTF8View._foreignCount()();
      v29 = v110 + v27;
      if (__OFADD__(v110, v27))
      {
LABEL_159:
        __break(1u);
LABEL_160:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 0x444uLL, 0);
      }
LABEL_22:
      if ((v20 & ~v19 & 0x2000000000000000) != 0
        && (isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v19 & 0xFFFFFFFFFFFFFFFLL),
            v20 = *a6,
            v19 = a6[1],
            isUniquelyReferenced_nonNull_native))
      {
        v31 = _StringGuts.nativeUnusedCapacity.getter(*a6, a6[1]);
        if ((v32 & 1) != 0)
        {
          v125 = 258;
LABEL_164:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v125, 0);
        }
        if (v29 <= 15 && ((v19 & 0x2000000000000000) != 0 || v31 < v27))
        {
LABEL_39:
          if ((v19 & 0x2000000000000000) != 0)
          {
            v38 = v19;
            v9 = a3;
          }
          else
          {
            v9 = a3;
            if ((v19 & 0x1000000000000000) != 0)
            {
              v20 = _StringGuts._foreignConvertedToSmall()(v20, v19);
              v38 = v117;
            }
            else
            {
              if ((v20 & 0x1000000000000000) != 0)
              {
                v111 = (unsigned __int8 *)((v19 & 0xFFFFFFFFFFFFFFFLL) + 32);
                v112 = v20 & 0xFFFFFFFFFFFFLL;
              }
              else
              {
                v111 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v20, v19);
              }
              closure #1 in _StringGuts._convertedToSmall()(v111, v112, &__src);
              v20 = __src;
              v38 = v135;
            }
          }
          if (v133)
          {
            swift_bridgeObjectRelease(v12);
            v39 = v12;
          }
          else if ((v12 & 0x1000000000000000) != 0)
          {
            v11 = _StringGuts._foreignConvertedToSmall()(v11, v12);
            v39 = v118;
            swift_bridgeObjectRelease(v12);
          }
          else
          {
            if ((v11 & 0x1000000000000000) != 0)
            {
              v113 = (unsigned __int8 *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 32);
            }
            else
            {
              v113 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v11, v12);
              v26 = v119;
            }
            closure #1 in _StringGuts._convertedToSmall()(v113, v26, &__src);
            swift_bridgeObjectRelease(v12);
            v11 = __src;
            v39 = v135;
          }
          v40 = HIBYTE(v38) & 0xF;
          v41 = HIBYTE(v39) & 0xF;
          v42 = v41 + v40;
          if ((unint64_t)(v41 + v40) > 0xF)
          {
            v125 = 266;
            goto LABEL_164;
          }
          if (v41)
          {
            v43 = 0;
            v44 = 0;
            do
            {
              v45 = v40 + v44;
              v46 = v44 + 1;
              if (v44 >= 8)
                v47 = v39;
              else
                v47 = v11;
              v48 = v47 >> (v43 & 0x38);
              v49 = (8 * v40 + v43) & 0x38;
              v50 = (-255 << v49) - 1;
              v51 = (unint64_t)v48 << v49;
              v52 = v51 | v50 & v38;
              v53 = v51 | v50 & v20;
              if (v45 < 8)
                v20 = v53;
              else
                v38 = v52;
              v43 += 8;
              v44 = v46;
            }
            while (v41 != v46);
          }
          swift_bridgeObjectRelease(v19);
          swift_bridgeObjectRelease(v12);
          v54 = 0xE000000000000000;
          if (v20 & 0x8080808080808080 | v38 & 0x80808080808080)
            v54 = 0xA000000000000000;
          v55 = v54 & 0xFF00000000000000 | (v42 << 56) | v38 & 0xFFFFFFFFFFFFFFLL;
          goto LABEL_122;
        }
      }
      else if (v29 <= 15)
      {
        goto LABEL_39;
      }
      v33 = _StringGuts.nativeUnusedCapacity.getter(v20, v19);
      v36 = (v34 & 1) == 0 && v33 >= v27;
      if ((v20 & ~v19 & 0x2000000000000000) != 0)
      {
        v37 = swift_isUniquelyReferenced_nonNull_native(v19 & 0xFFFFFFFFFFFFFFFLL);
        v20 = *a6;
        v19 = a6[1];
        if (v37)
        {
          if (v36)
            goto LABEL_90;
LABEL_57:
          v56 = 2 * _StringGuts.nativeCapacity.getter(v20, v19);
          if ((v57 & 1) != 0)
            v56 = 0;
          if (v56 > v29)
            v29 = v56;
          goto LABEL_61;
        }
      }
      if (!v36)
        goto LABEL_57;
LABEL_61:
      v58 = _StringGuts.uniqueNativeCapacity.getter();
      if ((v59 & 1) != 0)
      {
        v61 = a6[1];
        if ((v61 & 0x1000000000000000) != 0)
        {
          v60 = String.UTF8View._foreignCount()();
        }
        else if ((v61 & 0x2000000000000000) != 0)
        {
          v60 = HIBYTE(v61) & 0xF;
        }
        else
        {
          v60 = *a6 & 0xFFFFFFFFFFFFLL;
        }
      }
      else
      {
        v60 = 2 * v58;
      }
      if (v60 <= v29)
        v62 = v29;
      else
        v62 = v60;
      v63 = a6[1];
      if ((v63 & 0x1000000000000000) != 0)
      {
        _StringGuts._foreignGrow(_:)(v62);
        if ((v12 & 0x1000000000000000) == 0)
        {
LABEL_91:
          swift_bridgeObjectRelease(v12);
          v9 = a3;
          if (v133)
          {
            __src = v11;
            v135 = v12 & 0xFFFFFFFFFFFFFFLL;
            v77 = a6[1];
            v78 = v77 & 0xFFFFFFFFFFFFFFFLL;
            v79 = (v77 & 0xFFFFFFFFFFFFFFFLL) + 32;
            v80 = (char *)(v79 + (*(_QWORD *)(v77 + 24) & 0xFFFFFFFFFFFFLL));
            if (&__src < (uint64_t *)&v80[v23] && v80 < (char *)&__src + v23)
              goto LABEL_160;
            memcpy(v80, &__src, HIBYTE(v12) & 0xF);
            v81 = *(_QWORD *)(v78 + 24);
            v82 = (v81 & 0xFFFFFFFFFFFFLL) + v23;
            v83 = v81 > -1 || (v12 & 0x4000000000000000) == 0;
            v84 = v82 | 0xC000000000000000;
            if (v83)
              v84 = v82;
            v85 = v84 | 0x3000000000000000;
            *(_QWORD *)(v78 + 24) = v84 | 0x3000000000000000;
            *(_BYTE *)(v79 + (v84 & 0xFFFFFFFFFFFFLL)) = 0;
            v86 = *(_QWORD *)(v78 + 16);
            if (v86 < 0)
            {
              v87 = (uint64_t *)((v79 + (v86 & 0xFFFFFFFFFFFFLL) + 7) & 0x7FFFFFFFFFFFFFF8);
              v88 = *v87;
              *v87 = 0;
              swift_release(v88);
              v85 = *(_QWORD *)(v78 + 24);
            }
            swift_bridgeObjectRelease(v12);
            *a6 = v85;
          }
          else
          {
            if ((v11 & 0x1000000000000000) != 0)
            {
              v101 = (char *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 32);
            }
            else
            {
              v115 = (char *)_StringObject.sharedUTF8.getter(v11, v12);
              if (v116 < v26)
                _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
              v101 = v115;
              if (v26)
              {
                v9 = a3;
                if (!v115)
                  _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer has a nil start and nonzero count", 53, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x541uLL, 0);
              }
              else
              {
                v9 = a3;
                v26 = 0;
              }
            }
            v102 = a6[1];
            v103 = v102 & 0xFFFFFFFFFFFFFFFLL;
            v104 = (char *)((v102 & 0xFFFFFFFFFFFFFFFLL) + (*(_QWORD *)(v102 + 24) & 0xFFFFFFFFFFFFLL) + 32);
            if (&v104[v26] > v101 && v104 < &v101[v26])
              goto LABEL_160;
            memcpy(v104, v101, v26);
            __StringStorage._updateCountAndFlags(newCount:newIsASCII:)((*(_QWORD *)(v103 + 24) & 0xFFFFFFFFFFFFLL) + v26, (*(_QWORD *)(v103 + 24) & v11 & 0x8000000000000000) != 0);
            *a6 = *(_QWORD *)(v103 + 24);
            swift_bridgeObjectRelease(v12);
          }
          goto LABEL_4;
        }
        goto LABEL_3;
      }
      v64 = *a6;
      if ((v63 & 0x2000000000000000) != 0)
      {
        v73 = HIBYTE(v63) & 0xF;
        __src = *a6;
        v135 = v63 & 0xFFFFFFFFFFFFFFLL;
        v74 = v73 | 0xC000000000000000;
        if ((v63 & 0x4000000000000000) == 0)
          v74 = HIBYTE(v63) & 0xF;
        v72 = v74 | 0x3000000000000000;
        v70 = _allocateStringStorage(codeUnitCapacity:)(v62);
        *(_QWORD *)(v70 + 16) = v75;
        *(_QWORD *)(v70 + 24) = v72;
        if (v75 < 0)
        {
          *(_QWORD *)__StringStorage._breadcrumbsAddress.getter() = 0;
          v72 = *(_QWORD *)(v70 + 24);
        }
        v76 = (char *)(v70 + 32);
        *(_BYTE *)(v70 + 32 + (v72 & 0xFFFFFFFFFFFFLL)) = 0;
        if ((unint64_t)&__src < v70 + 32 + v73 && v76 < (char *)&__src + v73)
          goto LABEL_160;
        memcpy(v76, &__src, v73);
      }
      else
      {
        if ((v64 & 0x1000000000000000) != 0)
        {
          v65 = (char *)((v63 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v66 = v64 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          v65 = (char *)_StringObject.sharedUTF8.getter(v64, v63);
          v66 = v114;
        }
        if (v64 >= 0)
          v67 = v66;
        else
          v67 = v66 | 0xC000000000000000;
        v68 = _allocateStringStorage(codeUnitCapacity:)(v62);
        v70 = v68;
        *(_QWORD *)(v68 + 16) = v69;
        *(_QWORD *)(v68 + 24) = v67 | 0x3000000000000000;
        if (v69 < 0)
          *(_QWORD *)((v68 + (v69 & 0xFFFFFFFFFFFFLL) + 39) & 0xFFFFFFFFFFFFF8) = 0;
        v71 = (char *)(v68 + 32);
        *(_BYTE *)(v70 + 32 + (v67 & 0xFFFFFFFFFFFFLL)) = 0;
        v26 = v11 & 0xFFFFFFFFFFFFLL;
        if (v70 + 32 + v66 > (unint64_t)v65 && v71 < &v65[v66])
          goto LABEL_160;
        memcpy(v71, v65, v66);
        v72 = *(_QWORD *)(v70 + 24);
      }
      swift_bridgeObjectRelease(a6[1]);
      *a6 = v72;
      a6[1] = v70;
LABEL_90:
      if ((v12 & 0x1000000000000000) == 0)
        goto LABEL_91;
LABEL_3:
      _StringGuts._foreignAppendInPlace(_:)(v11, v12, 0, v129);
      swift_bridgeObjectRelease_n(v12, 2);
      v9 = a3;
LABEL_4:
      ++v10;
      _debugPrint_unlocked<A, B>(_:_:)((uint64_t)v136, (uint64_t)a6, qword_1E0EB1338, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
      __swift_destroy_boxed_opaque_existential_1Tm(v136);
      swift_bridgeObjectRetain(v9, v13, v14, v15);
      v12 = v9;
      v11 = a2;
      if (v10 == v131)
      {
        v8 = a4;
        v7 = a5;
        goto LABEL_152;
      }
    }
  }
  v9 = 0xE000000000000000;
LABEL_152:
  swift_bridgeObjectRelease(v9);
  v123 = a6[1];
  v124 = HIBYTE(v123) & 0xF;
  if ((v123 & 0x2000000000000000) == 0)
    v124 = *a6 & 0xFFFFFFFFFFFFLL;
  if (v124 || (*a6 & ~v123 & 0x2000000000000000) != 0)
  {
    _StringGuts.append(_:)(v8, v7);
  }
  else
  {
    swift_bridgeObjectRetain(v7, v120, v121, v122);
    swift_bridgeObjectRelease(v123);
    *a6 = v8;
    a6[1] = v7;
  }
}

void specialized _debugPrint<A>(_:separator:terminator:to:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, unint64_t *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  size_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  size_t v40;
  Swift::String v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  _OWORD *v46;
  size_t v47;
  unint64_t v48;
  unint64_t v49;
  size_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD v55[2];
  uint64_t v56[4];
  _OWORD v57[2];

  _swift_stdlib_flockfile_stdout();
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    v51 = a4;
    v52 = a5;
    v12 = 0;
    v13 = a1 + 32;
    v14 = 0xE000000000000000;
    v53 = a3;
    while (1)
    {
      outlined init with copy of Any(v13, (uint64_t)v57);
      outlined init with take of Any(v57, v56);
      v23 = *a6;
      v24 = a6[1];
      v25 = HIBYTE(v24) & 0xF;
      if ((v24 & 0x2000000000000000) == 0)
        v25 = *a6 & 0xFFFFFFFFFFFFLL;
      if (!v25 && (v23 & ~v24 & 0x2000000000000000) == 0)
        break;
      v26 = v14 & 0x2000000000000000;
      if ((v24 & 0x2000000000000000) == 0
        || !v26
        || (v27 = specialized _SmallString.init(_:appending:)(v23, a6[1], v12, v14), (v29 & 1) != 0))
      {
        if (v26)
          v36 = HIBYTE(v14) & 0xF;
        else
          v36 = v12 & 0xFFFFFFFFFFFFLL;
        _StringGuts.append(_:)(v12, v14, 0, v36);
        v35 = v14;
        a3 = v53;
LABEL_19:
        v37 = HIBYTE(v35) & 0xF;
        if (!v26)
          v37 = v12 & 0xFFFFFFFFFFFFLL;
        if (!v37)
          goto LABEL_5;
        goto LABEL_22;
      }
      v30 = v27;
      v31 = v28;
      swift_bridgeObjectRelease(v24);
      *a6 = v30;
      a6[1] = v31;
      v35 = v14;
      a3 = v53;
      if ((v14 & 0xF00000000000000) == 0)
        goto LABEL_5;
LABEL_22:
      swift_bridgeObjectRetain(v14, v32, v33, v34);
      if ((v35 & 0x1000000000000000) != 0)
      {
        v12 = specialized static String._copying(_:)(v12, v14);
        v35 = v39;
        swift_bridgeObjectRelease(v14);
        v38 = v35;
        if ((v35 & 0x2000000000000000) == 0)
        {
LABEL_24:
          if ((v12 & 0x1000000000000000) != 0)
          {
            v16 = (_QWORD *)((v35 & 0xFFFFFFFFFFFFFFFLL) + 32);
            v15 = v12 & 0xFFFFFFFFFFFFLL;
          }
          else
          {
            v16 = _StringObject.sharedUTF8.getter(v12, v38);
            if (!v16)
              goto LABEL_46;
            v15 = v40;
          }
          goto LABEL_4;
        }
      }
      else
      {
        v38 = v14;
        if ((v35 & 0x2000000000000000) == 0)
          goto LABEL_24;
      }
      v15 = HIBYTE(v35) & 0xF;
      v55[0] = v12;
      v55[1] = v35 & 0xFFFFFFFFFFFFFFLL;
      v16 = v55;
LABEL_4:
      _swift_stdlib_fwrite_stdout(v16, 1uLL, v15);
      swift_bridgeObjectRelease(v38);
LABEL_5:
      swift_bridgeObjectRelease(v14);
      _debugPrint_unlocked<A, B>(_:_:)((uint64_t)v56, (uint64_t)a6, qword_1E0EB1338, (uint64_t)&unk_1E0EADF40, (uint64_t)&protocol witness table for _TeeStream<A, B>);
      __swift_destroy_boxed_opaque_existential_1Tm(v56);
      swift_bridgeObjectRetain(a3, v17, v18, v19);
      v13 += 32;
      v14 = a3;
      v12 = a2;
      if (!--v11)
      {
        a4 = v51;
        a5 = v52;
        goto LABEL_33;
      }
    }
    swift_bridgeObjectRetain(v14, v20, v21, v22);
    swift_bridgeObjectRelease(v24);
    *a6 = v12;
    a6[1] = v14;
    v26 = v14 & 0x2000000000000000;
    v35 = v14;
    goto LABEL_19;
  }
  a3 = 0xE000000000000000;
LABEL_33:
  swift_bridgeObjectRelease(a3);
  v41._countAndFlagsBits = a4;
  v41._object = (void *)a5;
  String.write(_:)(v41);
  v45 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0)
    v45 = a4 & 0xFFFFFFFFFFFFLL;
  if (v45)
  {
    swift_bridgeObjectRetain(a5, v42, v43, v44);
    if ((a5 & 0x1000000000000000) != 0)
    {
      a4 = specialized static String._copying(_:)(a4, a5);
      v49 = v48;
      swift_bridgeObjectRelease(a5);
      a5 = v49;
      if ((v49 & 0x2000000000000000) == 0)
      {
LABEL_38:
        if ((a4 & 0x1000000000000000) != 0)
        {
          v46 = (_OWORD *)((a5 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v47 = a4 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          v46 = _StringObject.sharedUTF8.getter(a4, a5);
          if (!v46)
LABEL_46:
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/OutputStream.swift", 24, 2, 0x239uLL, 0);
          v47 = v50;
        }
        goto LABEL_42;
      }
    }
    else if ((a5 & 0x2000000000000000) == 0)
    {
      goto LABEL_38;
    }
    v47 = HIBYTE(a5) & 0xF;
    *(_QWORD *)&v57[0] = a4;
    *((_QWORD *)&v57[0] + 1) = a5 & 0xFFFFFFFFFFFFFFLL;
    v46 = v57;
LABEL_42:
    _swift_stdlib_fwrite_stdout(v46, 1uLL, v47);
    swift_bridgeObjectRelease(a5);
  }
  _swift_stdlib_funlockfile_stdout();
}

void specialized _print<A>(_:separator:terminator:to:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, void (*a7)(uint64_t *, uint64_t, Class *, ValueMetadata *, _UNKNOWN **))
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  size_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  size_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  _OWORD *v34;
  size_t v35;
  unint64_t v36;
  unint64_t v37;
  size_t v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD v41[2];
  uint64_t v42[4];
  _OWORD v43[2];

  _swift_stdlib_flockfile_stdout();
  v14 = *(_QWORD *)(a1 + 16);
  if (v14)
  {
    v39 = a4;
    v40 = a5;
    v15 = 0;
    v16 = a1 + 32;
    v17 = 0xE000000000000000;
    while (1)
    {
      outlined init with copy of Any(v16, (uint64_t)v43);
      outlined init with take of Any(v43, v42);
      v26 = HIBYTE(v17) & 0xF;
      if ((v17 & 0x2000000000000000) == 0)
        v26 = v15 & 0xFFFFFFFFFFFFLL;
      if (!v26)
        goto LABEL_5;
      swift_bridgeObjectRetain(v17, v23, v24, v25);
      if ((v17 & 0x1000000000000000) != 0)
      {
        v15 = specialized static String._copying(_:)(v15, v17);
        v27 = v28;
        swift_bridgeObjectRelease(v17);
        if ((v27 & 0x2000000000000000) == 0)
        {
LABEL_11:
          if ((v15 & 0x1000000000000000) != 0)
          {
            v19 = (_QWORD *)((v27 & 0xFFFFFFFFFFFFFFFLL) + 32);
            v18 = v15 & 0xFFFFFFFFFFFFLL;
          }
          else
          {
            v19 = _StringObject.sharedUTF8.getter(v15, v27);
            if (!v19)
              goto LABEL_32;
            v18 = v29;
          }
          goto LABEL_4;
        }
      }
      else
      {
        v27 = v17;
        if ((v17 & 0x2000000000000000) == 0)
          goto LABEL_11;
      }
      v18 = HIBYTE(v27) & 0xF;
      v41[0] = v15;
      v41[1] = v27 & 0xFFFFFFFFFFFFFFLL;
      v19 = v41;
LABEL_4:
      _swift_stdlib_fwrite_stdout(v19, 1uLL, v18);
      swift_bridgeObjectRelease(v27);
LABEL_5:
      swift_bridgeObjectRelease(v17);
      a7(v42, a6, qword_1E0EB1338, &type metadata for _Stdout, &protocol witness table for _Stdout);
      __swift_destroy_boxed_opaque_existential_1Tm(v42);
      swift_bridgeObjectRetain(a3, v20, v21, v22);
      v16 += 32;
      v17 = a3;
      v15 = a2;
      if (!--v14)
      {
        a4 = v39;
        a5 = v40;
        goto LABEL_19;
      }
    }
  }
  a3 = 0xE000000000000000;
LABEL_19:
  swift_bridgeObjectRelease(a3);
  v33 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0)
    v33 = a4 & 0xFFFFFFFFFFFFLL;
  if (v33)
  {
    swift_bridgeObjectRetain(a5, v30, v31, v32);
    if ((a5 & 0x1000000000000000) != 0)
    {
      a4 = specialized static String._copying(_:)(a4, a5);
      v37 = v36;
      swift_bridgeObjectRelease(a5);
      a5 = v37;
      if ((v37 & 0x2000000000000000) == 0)
      {
LABEL_24:
        if ((a4 & 0x1000000000000000) != 0)
        {
          v34 = (_OWORD *)((a5 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v35 = a4 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          v34 = _StringObject.sharedUTF8.getter(a4, a5);
          if (!v34)
LABEL_32:
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/OutputStream.swift", 24, 2, 0x239uLL, 0);
          v35 = v38;
        }
        goto LABEL_28;
      }
    }
    else if ((a5 & 0x2000000000000000) == 0)
    {
      goto LABEL_24;
    }
    v35 = HIBYTE(a5) & 0xF;
    *(_QWORD *)&v43[0] = a4;
    *((_QWORD *)&v43[0] + 1) = a5 & 0xFFFFFFFFFFFFFFLL;
    v34 = v43;
LABEL_28:
    _swift_stdlib_fwrite_stdout(v34, 1uLL, v35);
    swift_bridgeObjectRelease(a5);
  }
  _swift_stdlib_funlockfile_stdout();
}

uint64_t _print<A>(_:separator:terminator:to:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(uint64_t *, uint64_t, Class *, uint64_t, uint64_t))
{
  uint64_t v17;
  void (*v18)(uint64_t, unint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v28;
  uint64_t v29[4];

  (*(void (**)(uint64_t, uint64_t))(a8 + 8))(a7, a8);
  v17 = *(_QWORD *)(a1 + 16);
  if (v17)
  {
    v28 = a5;
    outlined init with copy of Any(a1 + 32, (uint64_t)v29);
    v18 = *(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(a8 + 24);
    v18(0, 0xE000000000000000, a7, a8);
    swift_bridgeObjectRelease(0xE000000000000000);
    a9(v29, a6, qword_1E0EB1338, a7, a8);
    __swift_destroy_boxed_opaque_existential_1Tm(v29);
    swift_bridgeObjectRetain(a3, v19, v20, v21);
    v22 = v17 - 1;
    if (v22)
    {
      v23 = a1 + 64;
      do
      {
        outlined init with copy of Any(v23, (uint64_t)v29);
        v18(a2, a3, a7, a8);
        swift_bridgeObjectRelease(a3);
        a9(v29, a6, qword_1E0EB1338, a7, a8);
        __swift_destroy_boxed_opaque_existential_1Tm(v29);
        swift_bridgeObjectRetain(a3, v24, v25, v26);
        v23 += 32;
        --v22;
      }
      while (v22);
    }
    a5 = v28;
  }
  else
  {
    a3 = 0xE000000000000000;
  }
  swift_bridgeObjectRelease(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a8 + 24))(a4, a5, a7, a8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(a8 + 16))(a7, a8);
}

Swift::UInt64 __swiftcall SystemRandomNumberGenerator.next()()
{
  Swift::UInt64 __buf;

  __buf = 0;
  swift_stdlib_random(&__buf, 8uLL);
  return __buf;
}

uint64_t protocol witness for RandomNumberGenerator.next() in conformance SystemRandomNumberGenerator()
{
  uint64_t __buf;

  __buf = 0;
  swift_stdlib_random(&__buf, 8uLL);
  return __buf;
}

uint64_t RandomAccessCollection.index(_:offsetBy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return BidirectionalCollection.index(_:offsetBy:)(a1, a2, a3, *(_QWORD *)(a4 + 8), a5);
}

uint64_t RandomAccessCollection.distance(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return BidirectionalCollection.distance(from:to:)(a1, a2, a3, *(_QWORD *)(a4 + 8));
}

uint64_t Range.init(uncheckedBounds:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t *TupleTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void (*v28)(void);
  char *v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  void (*v37)(char *, uint64_t);
  char *v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;

  v48 = a1;
  v49 = (char *)a4;
  v47 = a5;
  v7 = type metadata accessor for Range(0, a3, a4, a4);
  v45 = *(_QWORD *)(v7 - 8);
  v46 = v7;
  MEMORY[0x1E0C80A78](v7);
  v44 = (char *)&v41 - v8;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, a3, a3, "lower upper ", 0);
  v42 = *(TupleTypeMetadata2 - 1);
  v10 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v10);
  v43 = (char *)&v41 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v50 = (char *)&v41 - v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v41 - v18;
  v20 = MEMORY[0x1E0C80A78](v17);
  v22 = (char *)&v41 - v21;
  v23 = MEMORY[0x1E0C80A78](v20);
  v25 = (char *)&v41 - v24;
  v26 = (char *)&v41 + *(int *)(v23 + 48) - v24;
  v27 = *(_QWORD *)(a3 - 8);
  v28 = *(void (**)(void))(v27 + 32);
  ((void (*)(char *, uint64_t, uint64_t))v28)((char *)&v41 - v24, v48, a3);
  ((void (*)(char *, uint64_t, uint64_t))v28)(v26, a2, a3);
  v29 = &v22[*((int *)TupleTypeMetadata2 + 12)];
  v48 = v27;
  v30 = *(void (**)(char *, char *, uint64_t))(v27 + 16);
  v30(v22, v25, a3);
  v30(v29, v26, a3);
  if (((*((uint64_t (**)(char *, char *, uint64_t))v49 + 3))(v22, v29, a3) & 1) == 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0xB2uLL, 0);
  (*(void (**)(char *, unint64_t *))(v42 + 8))(v22, TupleTypeMetadata2);
  v49 = &v19[*((int *)TupleTypeMetadata2 + 12)];
  v31 = v49;
  v30(v19, v25, a3);
  v30(v31, v26, a3);
  v32 = &v50[*((int *)TupleTypeMetadata2 + 12)];
  v28();
  ((void (*)(char *, char *, uint64_t))v28)(v32, v26, a3);
  v33 = v43;
  v34 = &v43[*((int *)TupleTypeMetadata2 + 12)];
  ((void (*)(char *, char *, uint64_t))v28)(v43, v19, a3);
  ((void (*)(char *, char *, uint64_t))v28)(v34, v32, a3);
  v35 = &v12[*((int *)TupleTypeMetadata2 + 12)];
  v30(v12, v33, a3);
  v30(v35, v34, a3);
  v36 = v44;
  ((void (*)(char *, char *, uint64_t))v28)(v44, v12, a3);
  v37 = *(void (**)(char *, uint64_t))(v48 + 8);
  v37(v35, a3);
  v38 = &v12[*((int *)TupleTypeMetadata2 + 12)];
  ((void (*)(char *, char *, uint64_t))v28)(v12, v33, a3);
  ((void (*)(char *, char *, uint64_t))v28)(v38, v34, a3);
  v39 = v46;
  ((void (*)(char *, char *, uint64_t))v28)(&v36[*(int *)(v46 + 36)], v38, a3);
  v37(v12, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v45 + 32))(v47, v36, v39);
  v37(v50, a3);
  return ((uint64_t (*)(char *, uint64_t))v37)(v49, a3);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance <> Range<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int8 *v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t WitnessTable;
  uint64_t v14;
  uint64_t v15;
  int8x16_t v17;
  int8x16_t v18;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](a1);
  v9 = &v17.i8[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = *(_QWORD *)(v7 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  v17 = *(int8x16_t *)(v12 - 16);
  v11(a2, v2, a1);
  Range<>.startIndex.getter(a1, (uint64_t)v9);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v2, a1);
  v18 = vextq_s8(v17, v17, 8uLL);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> Range<A>, a1, &v18);
  v15 = type metadata accessor for IndexingIterator(0, a1, WitnessTable, v14);
  return (*(uint64_t (**)(uint64_t, __int8 *, uint64_t))(v6 + 32))(a2 + *(int *)(v15 + 36), v9, v5);
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance <> Range<A>(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence.underestimatedCount.getter in conformance <> ClosedRange<A>(a1, a2, (uint64_t)&protocol conformance descriptor for <> Range<A>, Collection.underestimatedCount.getter);
}

uint64_t protocol witness for Sequence._customContainsEquatableElement(_:) in conformance <> Range<A>(uint64_t a1, uint64_t a2)
{
  return Range<>._customContainsEquatableElement(_:)(a1, a2);
}

uint64_t Range<>._customContainsEquatableElement(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v20;

  v3 = v2;
  v6 = *(_QWORD *)(a2 - 8);
  v7 = MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v10 + 16);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v7);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v15 + 8);
  v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 24))(v3, a1, v11, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v3, a2);
  if ((v17 & 1) != 0)
    v18 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v16 + 16))(v14, &v9[*(int *)(a2 + 36)], v11, v16);
  else
    v18 = 0;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, a2);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return v18 & 1;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance <> Range<A>(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence.underestimatedCount.getter in conformance <> ClosedRange<A>(a1, a2, (uint64_t)&protocol conformance descriptor for <> Range<A>, Collection._copyToContiguousArray());
}

uint64_t Range<>.startIndex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Range<>.endIndex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 36));
}

uint64_t Range<>.index(after:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  unint64_t *v39;
  char *v40;
  char *v41;
  void (*v42)(char *, char *, uint64_t);
  char *v43;
  char *v44;
  void (*v45)(char *, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *WitnessTable;
  const char *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t AssociatedConformanceWitness;
  char *v56;
  char *v57;
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  unint64_t *TupleTypeMetadata2;
  uint64_t v67;
  char *v68;
  unint64_t v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  _QWORD v78[3];

  v6 = v5;
  v70 = a4;
  v76 = a5;
  v77 = a1;
  v9 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a3, v9, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  v74 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v73 = (char *)&v59 - v11;
  v71 = *(const char **)(*(_QWORD *)(swift_getAssociatedConformanceWitness(a3, v9, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Strideable, (uint64_t)&associated conformance descriptor for Strideable.Strideable.Stride: SignedNumeric)+ 8)+ 16);
  v75 = AssociatedTypeWitness;
  v69 = swift_getAssociatedTypeWitness(0, v71, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v69);
  v68 = (char *)&v59 - v12;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v9, v9, "lower upper ", 0);
  v13 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v15 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v13);
  v63 = (char *)&v59 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v59 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v18);
  v23 = (char *)&v59 - v22;
  v24 = MEMORY[0x1E0C80A78](v21);
  v26 = (char *)&v59 - v25;
  v27 = MEMORY[0x1E0C80A78](v24);
  v29 = (char *)&v59 - v28;
  v67 = *(_QWORD *)(a2 - 8);
  v30 = MEMORY[0x1E0C80A78](v27);
  v64 = (char *)&v59 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30);
  v65 = (char *)&v59 - v32;
  v62 = v33;
  v34 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 16);
  v34(v29, v6, v9);
  v72 = a2;
  v34(v26, v6 + *(int *)(a2 + 36), v9);
  v34(v23, (uint64_t)v29, v9);
  v34(v20, (uint64_t)v26, v9);
  v35 = a3;
  if (((*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(a3 + 8) + 24))(v23, v20, v9) & 1) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v36 = v15;
  v37 = v62;
  v38 = *(void (**)(char *, uint64_t))(v62 + 8);
  v60 = v38;
  v61 = v35;
  v38(v20, v9);
  v38(v23, v9);
  v39 = TupleTypeMetadata2;
  v40 = v63;
  v41 = &v63[*((int *)TupleTypeMetadata2 + 12)];
  v42 = *(void (**)(char *, char *, uint64_t))(v37 + 32);
  v42(v63, v29, v9);
  v42(v41, v26, v9);
  v43 = &v36[*((int *)v39 + 12)];
  v34(v36, (uint64_t)v40, v9);
  v34(v43, (uint64_t)v41, v9);
  v44 = v64;
  v42(v64, v36, v9);
  v45 = v60;
  v60(v43, v9);
  v46 = &v36[*((int *)v39 + 12)];
  v42(v36, v40, v9);
  v42(v46, v41, v9);
  v47 = v72;
  v42(&v44[*(int *)(v72 + 36)], v46, v9);
  v45(v36, v9);
  v48 = v67;
  v49 = (uint64_t)v65;
  (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v65, v44, v47);
  v50 = v61;
  v78[0] = v61;
  v78[1] = v70;
  WitnessTable = (const char *)swift_getWitnessTable(&protocol conformance descriptor for <> Range<A>, v47, v78);
  specialized Collection._failEarlyRangeCheck(_:bounds:)(v77, v49, v47, WitnessTable);
  (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v49, v47);
  v52 = v71;
  v53 = v75;
  v54 = v69;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v71, v75, v69, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  v56 = v68;
  (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&qword_1816B7DB0, 512, v54, AssociatedConformanceWitness);
  v57 = v73;
  (*((void (**)(char *, uint64_t, const char *))v52 + 3))(v56, v53, v52);
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 48))(v57, v9, v50);
  return (*(uint64_t (**)(char *, uint64_t))(v74 + 8))(v57, v53);
}

uint64_t Range<>.index(before:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t, uint64_t);
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  void (*v28)(char *, uint64_t);
  char *v29;
  unint64_t v30;
  const char *v31;
  uint64_t v32;
  unint64_t AssociatedConformanceWitness;
  char *v34;
  char *v35;
  char *v37;
  unint64_t v38;
  const char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;

  v43 = a4;
  v7 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a3, v7, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  v41 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v40 = (char *)&v37 - v9;
  v39 = *(const char **)(*(_QWORD *)(swift_getAssociatedConformanceWitness(a3, v7, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Strideable, (uint64_t)&associated conformance descriptor for Strideable.Strideable.Stride: SignedNumeric)+ 8)+ 16);
  v42 = AssociatedTypeWitness;
  v38 = swift_getAssociatedTypeWitness(0, v39, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v10 = MEMORY[0x1E0C80A78](v38);
  v37 = (char *)&v37 - v11;
  v12 = *(_QWORD *)(a2 - 8);
  v13 = MEMORY[0x1E0C80A78](v10);
  v46 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v37 - v16;
  v18 = *(_QWORD *)(v7 - 8);
  v19 = MEMORY[0x1E0C80A78](v15);
  v21 = (char *)&v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v37 - v22;
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v47 = a1;
  v45 = v24;
  v24((char *)&v37 - v22, a1, v7);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v25(v17, v48, a2);
  v44 = a3;
  v26 = *(_QWORD *)(a3 + 8);
  if (((*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v26 + 40))(v23, v17, v7, v26) & 1) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/Range.swift", 17, 2, 0xF1uLL, 0);
  v27 = *(void (**)(char *, uint64_t))(v12 + 8);
  v27(v17, a2);
  v28 = *(void (**)(char *, uint64_t))(v18 + 8);
  v28(v23, v7);
  v45(v21, v47, v7);
  v29 = v46;
  v25(v46, v48, a2);
  if (((*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v26 + 24))(v21, &v29[*(int *)(a2 + 36)], v7, v26) & 1) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/Range.swift", 17, 2, 0xF2uLL, 0);
  v27(v29, a2);
  v28(v21, v7);
  v30 = v38;
  v31 = v39;
  v32 = v42;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v39, v42, v38, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  v34 = v37;
  (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DB8, 257, v30, AssociatedConformanceWitness);
  v35 = v40;
  (*((void (**)(char *, uint64_t, const char *))v31 + 3))(v34, v32, v31);
  (*(void (**)(char *, uint64_t))(v44 + 48))(v35, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v35, v32);
}

uint64_t Range<>.index(_:offsetBy:)@<X0>(void (*a1)(char *, uint64_t, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  const char *v20;
  unint64_t AssociatedTypeWitness;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void (*v27)(uint64_t *, ValueMetadata *, unint64_t, unint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  char *v42;
  char *v43;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v53 = a6;
  v48 = a4;
  v49 = a1;
  v8 = *(_QWORD *)(a3 - 8);
  v50 = a3;
  v9 = MEMORY[0x1E0C80A78](a1);
  v47 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v45 - v12;
  v15 = *(_QWORD *)(v14 + 16);
  v51 = *(_QWORD *)(v15 - 8);
  v16 = MEMORY[0x1E0C80A78](v11);
  v46 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v45 - v18;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v20, v15, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  v22 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v23 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v25 = (char *)&v45 - v24;
  v54 = a2;
  v26 = *(_QWORD *)(a5 + 8);
  v27 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, unint64_t, uint64_t))(v26 + 88);
  v30 = lazy protocol witness table accessor for type Int and conformance Int(v23, v28, v29);
  v27(&v54, &type metadata for Int, v30, AssociatedTypeWitness, v26);
  v31 = v48;
  v32 = v53;
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 48))(v25, v15, v48);
  (*(void (**)(char *, unint64_t))(v22 + 8))(v25, AssociatedTypeWitness);
  v49 = *(void (**)(char *, uint64_t, uint64_t))(v51 + 16);
  v49(v19, v32, v15);
  v33 = v8;
  v34 = *(void (**)(char *, uint64_t))(v8 + 16);
  v35 = v50;
  v34(v13, v52);
  v36 = *(_QWORD *)(v31 + 8);
  v37 = v13;
  if (((*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v36 + 32))(v19, v13, v15, v36) & 1) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/Range.swift", 17, 2, 0xFAuLL, 0);
  v38 = *(void (**)(char *, uint64_t))(v33 + 8);
  v39 = v37;
  v40 = v35;
  v38(v39, v35);
  v41 = *(void (**)(char *, uint64_t))(v51 + 8);
  v41(v19, v15);
  v42 = v46;
  v49(v46, v53, v15);
  v43 = v47;
  ((void (*)(char *, uint64_t, uint64_t))v34)(v47, v52, v40);
  if (((*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v36 + 24))(v42, &v43[*(int *)(v40 + 36)], v15, v36) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/Range.swift", 17, 2, 0xFBuLL, 0);
  v38(v43, v40);
  return ((uint64_t (*)(char *, uint64_t))v41)(v42, v15);
}

uint64_t Range<>.distance(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return specialized Range<>.distance(from:to:)(a1, a2, *(_QWORD *)(a3 + 16), a4, a5);
}

uint64_t Range<>.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v18;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v8);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v15, a2);
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v16(v10, a1, v6);
  if ((Range.contains(_:)((uint64_t)v10, a2) & 1) == 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Range.swift", 17, 2, 0x131uLL, 0);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a2);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v16)(a3, a1, v6);
}

uint64_t Range<>.indices.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2);
}

uint64_t Range<>._customIndexOfEquatableElement(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  char v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;

  v4 = v3;
  v32 = a3;
  v7 = *(_QWORD *)(a2 - 8);
  v8 = MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v11 + 16);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v8);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v16 + 8);
  v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 24))(v4, a1, v12, v17);
  v29 = a1;
  v30 = v13;
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v19(v15, a1, v12);
  v31 = v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v4, a2);
  if ((v18 & 1) != 0)
  {
    v20 = v29;
    v21 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v17 + 16))(v15, &v10[*(int *)(a2 + 36)], v12, v17);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v10, a2);
    v22 = v30;
    (*(void (**)(char *, uint64_t))(v30 + 8))(v15, v12);
    v23 = v32;
    if ((v21 & 1) != 0)
    {
      v19(v32, v20, v12);
      v24 = 0;
    }
    else
    {
      v24 = 1;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v10, a2);
    v22 = v30;
    (*(void (**)(char *, uint64_t))(v30 + 8))(v15, v12);
    v24 = 1;
    v23 = v32;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56))(v23, v24, 1, v12);
  v27 = type metadata accessor for Optional(0, v12, v25, v26);
  return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v23, 0, 1, v27);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance <> Range<A>(_QWORD *a1, uint64_t a2, uint64_t a3))()
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = Range<>.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance _ArrayBuffer<A>;
}

void (*Range<>.subscript.read(_QWORD *a1, uint64_t a2, uint64_t a3))(void ***a1)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;
  void *v14;
  void *v15;
  void (*v16)(void *, uint64_t, uint64_t);
  void (*v17)(void *, uint64_t);

  v4 = v3;
  v8 = malloc(0x28uLL);
  *a1 = v8;
  v9 = *(_QWORD *)(a3 - 8);
  v10 = malloc(*(_QWORD *)(v9 + 64));
  v11 = *(_QWORD *)(a3 + 16);
  *v8 = v10;
  v8[1] = v11;
  v12 = *(_QWORD **)(v11 - 8);
  v13 = v12[8];
  v14 = malloc(v13);
  v8[2] = v14;
  v15 = malloc(v13);
  v8[3] = v15;
  (*(void (**)(void *, uint64_t, uint64_t))(v9 + 16))(v10, v4, a3);
  v16 = (void (*)(void *, uint64_t, uint64_t))v12[2];
  v16(v14, a2, v11);
  if ((Range.contains(_:)((uint64_t)v14, a3) & 1) == 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Range.swift", 17, 2, 0x131uLL, 0);
  v17 = (void (*)(void *, uint64_t))v12[1];
  v8[4] = v17;
  v17(v14, v11);
  (*(void (**)(void *, uint64_t))(v9 + 8))(v10, a3);
  v16(v15, a2, v11);
  return Range<>.subscript.read;
}

void Range<>.subscript.read(void ***a1)
{
  void **v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = *a1;
  v2 = (*a1)[3];
  v3 = (*a1)[2];
  v4 = **a1;
  ((void (*)(void *, void *))(*a1)[4])(v2, (*a1)[1]);
  free(v2);
  free(v3);
  free(v4);
  free(v1);
}

uint64_t protocol witness for Collection.subscript.getter in conformance <> Range<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return Range<>.subscript.getter(a1, a2, a3);
}

uint64_t protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance <> Range<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  return Range<>._customIndexOfEquatableElement(_:)(a1, a2, a3);
}

uint64_t protocol witness for Collection._customLastIndexOfEquatableElement(_:) in conformance <> Range<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Range<>._customLastIndexOfEquatableElement(_:)(a1, a2, *(_QWORD *)(a3 - 8));
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance <> Range<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance <> ClosedRange<A>(a1, a2, a3, a4, a5, (uint64_t)&protocol conformance descriptor for <> Range<A>, a6);
}

uint64_t protocol witness for Collection.distance(from:to:) in conformance <> Range<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized Range<>.distance(from:to:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8), *(_QWORD *)(a4 - 16));
}

uint64_t protocol witness for Collection.index(after:) in conformance <> Range<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  unint64_t *v35;
  char *v36;
  char *v37;
  void (*v38)(char *, char *, uint64_t);
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  const char *v47;
  uint64_t v48;
  unint64_t AssociatedConformanceWitness;
  char *v50;
  char *v51;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  unint64_t *TupleTypeMetadata2;
  char *v60;
  unint64_t v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v70 = a1;
  v68 = a4;
  v63 = a3;
  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v5, v6, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  v66 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v65 = (char *)&v53 - v8;
  v62 = *(const char **)(*(_QWORD *)(swift_getAssociatedConformanceWitness(v5, v6, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Strideable, (uint64_t)&associated conformance descriptor for Strideable.Strideable.Stride: SignedNumeric)+ 8)+ 16);
  v67 = AssociatedTypeWitness;
  v61 = swift_getAssociatedTypeWitness(0, v62, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v61);
  v60 = (char *)&v53 - v9;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v6, v6, "lower upper ", 0);
  v10 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v58 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v57 = (char *)&v53 - v13;
  v14 = *(_QWORD *)(v6 - 8);
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v53 - v19;
  v21 = MEMORY[0x1E0C80A78](v18);
  v23 = (char *)&v53 - v22;
  v24 = MEMORY[0x1E0C80A78](v21);
  v26 = (char *)&v53 - v25;
  v27 = *(_QWORD *)(a2 - 8);
  v28 = MEMORY[0x1E0C80A78](v24);
  v55 = (char *)&v53 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28);
  v56 = (char *)&v53 - v30;
  Range<>.startIndex.getter(a2, (uint64_t)v26);
  v64 = a2;
  Range<>.endIndex.getter(a2, (uint64_t)v23);
  v31 = v14;
  v32 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  v32(v20, v26, v6);
  v32(v17, v23, v6);
  v69 = v5;
  if (((*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v5 + 8) + 24))(v20, v17, v6) & 1) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v33 = v31;
  v34 = *(void (**)(char *, uint64_t))(v31 + 8);
  v34(v17, v6);
  v34(v20, v6);
  v54 = v27;
  v35 = TupleTypeMetadata2;
  v36 = v57;
  v37 = &v57[*((int *)TupleTypeMetadata2 + 12)];
  v38 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
  v38(v57, v26, v6);
  v38(v37, v23, v6);
  v39 = v58;
  v40 = &v58[*((int *)v35 + 12)];
  v32(v58, v36, v6);
  v32(v40, v37, v6);
  v41 = v55;
  v38(v55, v39, v6);
  v34(v40, v6);
  v42 = &v39[*((int *)v35 + 12)];
  v38(v39, v36, v6);
  v38(v42, v37, v6);
  v43 = v64;
  v38(&v41[*(int *)(v64 + 36)], v42, v6);
  v34(v39, v6);
  v44 = v54;
  v45 = v56;
  (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v56, v41, v43);
  Collection._failEarlyRangeCheck(_:bounds:)(v70, v45, v43, v63);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v43);
  v46 = v61;
  v47 = v62;
  v48 = v67;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v62, v67, v61, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  v50 = v60;
  (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&qword_1816B7DB0, 512, v46, AssociatedConformanceWitness);
  v51 = v65;
  (*((void (**)(char *, uint64_t, const char *))v47 + 3))(v50, v48, v47);
  (*(void (**)(char *, uint64_t))(v69 + 48))(v51, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v51, v48);
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance <> Range<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  void (*v32)(char *, uint64_t);
  unint64_t *v33;
  char *v34;
  char *v35;
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  char *v38;
  char *v39;
  void (*v40)(char *, uint64_t);
  char *v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  const char *v48;
  uint64_t v49;
  unint64_t AssociatedConformanceWitness;
  char *v51;
  char *v52;
  char *v53;
  void (*v55)(char *, uint64_t);
  char *v56;
  char *v57;
  unint64_t *TupleTypeMetadata2;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  unint64_t v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v72 = a1;
  v66 = a3;
  v4 = *(_QWORD *)(a3 - 8);
  v5 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v4, v5, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  v69 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v68 = (char *)&v55 - v7;
  v65 = *(const char **)(*(_QWORD *)(swift_getAssociatedConformanceWitness(v4, v5, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Strideable, (uint64_t)&associated conformance descriptor for Strideable.Strideable.Stride: SignedNumeric)+ 8)+ 16);
  v70 = AssociatedTypeWitness;
  v64 = swift_getAssociatedTypeWitness(0, v65, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v64);
  v63 = (char *)&v55 - v8;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v5, v5, "lower upper ", 0);
  v9 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v57 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v56 = (char *)&v55 - v12;
  v61 = *(_QWORD *)(a2 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v59 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v60 = (char *)&v55 - v16;
  v17 = *(_QWORD **)(v5 - 8);
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v18);
  v23 = (char *)&v55 - v22;
  v24 = MEMORY[0x1E0C80A78](v21);
  v26 = (char *)&v55 - v25;
  v27 = MEMORY[0x1E0C80A78](v24);
  v29 = (char *)&v55 - v28;
  MEMORY[0x1E0C80A78](v27);
  v62 = (char *)&v55 - v30;
  Range<>.startIndex.getter(a2, (uint64_t)v29);
  v67 = a2;
  Range<>.endIndex.getter(a2, (uint64_t)v26);
  v31 = (void (*)(char *, char *, uint64_t))v17[2];
  v31(v23, v29, v5);
  v31(v20, v26, v5);
  v71 = v4;
  if (((*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v4 + 8) + 24))(v23, v20, v5) & 1) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v32 = (void (*)(char *, uint64_t))v17[1];
  v55 = v32;
  v32(v20, v5);
  v32(v23, v5);
  v33 = TupleTypeMetadata2;
  v34 = v56;
  v35 = &v56[*((int *)TupleTypeMetadata2 + 12)];
  v36 = (void (*)(char *, char *, uint64_t))v17[4];
  v36(v56, v29, v5);
  v36(v35, v26, v5);
  v37 = v57;
  v38 = &v57[*((int *)v33 + 12)];
  v31(v57, v34, v5);
  v31(v38, v35, v5);
  v39 = v59;
  v36(v59, v37, v5);
  v40 = v55;
  v55(v38, v5);
  v41 = &v37[*((int *)v33 + 12)];
  v36(v37, v34, v5);
  v36(v41, v35, v5);
  v42 = v67;
  v36(&v39[*(int *)(v67 + 36)], v41, v5);
  v40(v37, v5);
  v43 = (void (*)(uint64_t, uint64_t))v40;
  v45 = v60;
  v44 = v61;
  (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v60, v39, v42);
  v46 = v72;
  Collection._failEarlyRangeCheck(_:bounds:)(v72, v45, v42, v66);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v42);
  v47 = v64;
  v48 = v65;
  v49 = v70;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v65, v70, v64, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  v51 = v63;
  (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&qword_1816B7DB0, 512, v47, AssociatedConformanceWitness);
  v52 = v68;
  (*((void (**)(char *, uint64_t, const char *))v48 + 3))(v51, v49, v48);
  v53 = v62;
  (*(void (**)(char *, uint64_t))(v71 + 48))(v52, v5);
  v43(v46, v5);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v52, v49);
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v36)(v46, v53, v5);
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance <> Range<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Range<>.index(before:)(a1, a2, *(_QWORD *)(a3 - 8), a4);
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance <> Range<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Range<>.index(before:)(v5, v8, v9, (uint64_t)v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(a1, v7, v3);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance <> Range<A>@<X0>(void (*a1)(char *, uint64_t, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Range<>.index(_:offsetBy:)(a1, a2, a3, *(_QWORD *)(a4 - 8), *(_QWORD *)(a4 - 16), a5);
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance <> ClosedRange<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t WitnessTable;
  int8x16_t v14;

  v14 = vextq_s8(*(int8x16_t *)(a5 - 16), *(int8x16_t *)(a5 - 16), 8uLL);
  WitnessTable = swift_getWitnessTable(a6, a4, &v14);
  return RandomAccessCollection.index(_:offsetBy:limitedBy:)(a1, a2, a3, a4, WitnessTable, a7);
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance <> Range<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Range<>.distance(from:to:)(a1, a2, a3, *(_QWORD *)(a4 - 8), *(_QWORD *)(a4 - 16));
}

uint64_t Range<>.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, char *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  char *v12;
  const char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t AssociatedConformanceWitness;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  unint64_t *v29;
  char *v30;
  char *v31;
  void (*v32)(char *, char *, uint64_t);
  unint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  void (*v37)(char *, uint64_t);
  char *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v42[2];
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  unint64_t *TupleTypeMetadata2;
  char *v48;
  char *v49;
  uint64_t v50;

  v49 = a4;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, a2, a2, "lower upper ", 0);
  v7 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v48 = (char *)v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v46 = (char *)v42 - v9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a3, a2, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  v44 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)v42 - v11;
  v13 = a3;
  v43 = a3;
  v14 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness((uint64_t)a3, a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Strideable, (uint64_t)&associated conformance descriptor for Strideable.Strideable.Stride: SignedNumeric)+ 8)+ 16);
  v15 = swift_getAssociatedTypeWitness(0, (const char *)v14, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)v42 - v17;
  v50 = *(_QWORD *)(a2 - 8);
  v19 = MEMORY[0x1E0C80A78](v16);
  v21 = (char *)v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)v42 - v22;
  v45 = *((_QWORD *)v13 + 1);
  v25 = type metadata accessor for ClosedRange(0, a2, v45, v24);
  v42[1] = a1 + *(int *)(v25 + 36);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v14, AssociatedTypeWitness, v15, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&qword_1816B7DB0, 512, v15, AssociatedConformanceWitness);
  (*(void (**)(char *, unint64_t, uint64_t))(v14 + 24))(v18, AssociatedTypeWitness, v14);
  (*((void (**)(char *, uint64_t))v43 + 6))(v12, a2);
  (*(void (**)(char *, unint64_t))(v44 + 8))(v12, AssociatedTypeWitness);
  v27 = v50;
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 16);
  v28(v21, a1, a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(a1, v25);
  v30 = v46;
  v29 = TupleTypeMetadata2;
  v31 = &v46[*((int *)TupleTypeMetadata2 + 12)];
  v32 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
  v32(v46, v21, a2);
  v32(v31, v23, a2);
  v33 = v29;
  v34 = v48;
  v35 = &v48[*((int *)v29 + 12)];
  v28(v48, (uint64_t)v30, a2);
  v28(v35, (uint64_t)v31, a2);
  v36 = v49;
  v32(v49, v34, a2);
  v37 = *(void (**)(char *, uint64_t))(v50 + 8);
  v37(v35, a2);
  v38 = &v34[*((int *)v33 + 12)];
  v32(v34, v30, a2);
  v32(v38, v31, a2);
  v40 = type metadata accessor for Range(0, a2, v45, v39);
  v32(&v36[*(int *)(v40 + 36)], v38, a2);
  return ((uint64_t (*)(char *, uint64_t))v37)(v34, a2);
}

uint64_t Range.relative<A>(to:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t protocol witness for RangeExpression.relative<A>(to:) in conformance Range<A>@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  return Range.relative<A>(to:)(a1, a2);
}

uint64_t ClosedRange.clamped(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  char v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t *v32;
  char *v33;
  void (*v34)(char *, char *, uint64_t);
  char *v35;
  char *v36;
  void (*v37)(char *, uint64_t);
  char *v38;
  uint64_t (*v40)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v41;
  uint64_t v42;
  unint64_t *TupleTypeMetadata2;
  char *v44;
  uint64_t v45;

  v4 = v3;
  v5 = a2;
  v44 = a3;
  v7 = *(_QWORD *)(a2 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v7, v7, "lower upper ", 0);
  v8 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v40 - v12;
  v14 = *(_QWORD *)(v7 - 8);
  v15 = MEMORY[0x1E0C80A78](v11);
  v41 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v40 - v17;
  v19 = *(_QWORD *)(v5 + 24);
  v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 40);
  v20 = v40(a1, v4, v7, v19);
  v45 = v5;
  v42 = v14;
  if ((v20 & 1) != 0)
  {
    v21 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
    v21(v18, a1, v7);
    v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 16);
  }
  else
  {
    v23 = a1 + *(int *)(v5 + 36);
    v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 16);
    v24 = v22(v23, v4, v7, v19);
    v21 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
    if ((v24 & 1) != 0)
    {
      v25 = v18;
      v26 = v23;
    }
    else
    {
      v25 = v18;
      v26 = v4;
    }
    v21(v25, v26, v7);
    v5 = v45;
  }
  v27 = *(int *)(v5 + 36);
  v28 = a1 + v27;
  v29 = v4 + v27;
  if ((v22(a1 + v27, v29, v7, v19) & 1) == 0)
  {
    if ((v40(a1, v29, v7, v19) & 1) != 0)
      v28 = a1;
    else
      v28 = v29;
  }
  v30 = v41;
  v21(v41, v28, v7);
  v31 = v42;
  v32 = TupleTypeMetadata2;
  v33 = &v13[*((int *)TupleTypeMetadata2 + 12)];
  v34 = *(void (**)(char *, char *, uint64_t))(v42 + 32);
  v34(v13, v18, v7);
  v34(v33, v30, v7);
  v35 = &v10[*((int *)v32 + 12)];
  v21(v10, (uint64_t)v13, v7);
  v21(v35, (uint64_t)v33, v7);
  v36 = v44;
  v34(v44, v10, v7);
  v37 = *(void (**)(char *, uint64_t))(v31 + 8);
  v37(v35, v7);
  v38 = &v10[*((int *)v32 + 12)];
  v34(v10, v13, v7);
  v34(v38, v33, v7);
  v34(&v36[*(int *)(v45 + 36)], v38, v7);
  return ((uint64_t (*)(char *, uint64_t))v37)(v10, v7);
}

unint64_t Range.description.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  Class *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;

  v2 = v1;
  v14 = specialized static String._createEmpty(withInitialCapacity:)(7);
  v15 = v4;
  v5 = *(Class **)(a1 + 16);
  _print_unlocked<A, B>(_:_:)(v1, (uint64_t)&v14, v5, (uint64_t)&type metadata for DefaultStringInterpolation, (uint64_t)&protocol witness table for DefaultStringInterpolation);
  v6 = v15;
  v7 = HIBYTE(v15) & 0xF;
  if ((v15 & 0x2000000000000000) == 0)
    v7 = v14 & 0xFFFFFFFFFFFFLL;
  if (v7 || (v14 & ~v15 & 0x2000000000000000) != 0)
  {
    if ((v15 & 0x2000000000000000) == 0
      || (v8 = specialized _SmallString.init(_:appending:)(v14, v15, 0x3C2E2EuLL, 0xE300000000000000), (v10 & 1) != 0))
    {
      _StringGuts.append(_:)(3943982, 0xE300000000000000, 0, 3);
    }
    else
    {
      v11 = v8;
      v12 = v9;
      swift_bridgeObjectRelease(v6);
      v14 = v11;
      v15 = v12;
    }
  }
  else
  {
    swift_bridgeObjectRelease(v15);
    v14 = 3943982;
    v15 = 0xE300000000000000;
  }
  _print_unlocked<A, B>(_:_:)(v2 + *(int *)(a1 + 36), (uint64_t)&v14, v5, (uint64_t)&type metadata for DefaultStringInterpolation, (uint64_t)&protocol witness table for DefaultStringInterpolation);
  return v14;
}

unint64_t Range.debugDescription.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  BOOL v21;
  int64_t v22;
  int64_t v23;
  char v24;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  Swift::String::Index v33;
  Swift::String::Index v34;
  Swift::String::Index v35;
  Swift::String::Index v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char v45;
  unint64_t v46;
  char *v47;
  size_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  Swift::Int v66;
  unint64_t v67;
  int64_t v68;
  char v69;
  int64_t v70;
  char v71;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  unint64_t v77;
  Swift::String::Index v78;
  Swift::String::Index v79;
  Swift::String::Index v80;
  Swift::String::Index v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  size_t v107;
  char v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  char v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  id v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  size_t v124;
  unint64_t v125;
  unint64_t v126;
  int64_t v127;
  unint64_t v128;
  unint64_t v129;
  char v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  Swift::String::Index v138;
  Swift::String::Index v139;
  Swift::String::Index v140;
  Swift::String::Index v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  char v150;
  unint64_t v151;
  unint64_t v152;
  Swift::String::Index v153;
  Swift::String::Index v154;
  Swift::String::Index v155;
  Swift::String::Index v156;
  Swift::Int v157;
  Swift::Int v158;
  char *v159;
  size_t v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  char *v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  char *v176;
  int64_t v177;
  char v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  Swift::String::Index v186;
  Swift::String::Index v187;
  Swift::String::Index v188;
  Swift::String::Index v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  char v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  char *v204;
  size_t v205;
  char v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  char v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  id v218;
  uint64_t v219;
  char *v220;
  size_t v221;
  unint64_t v222;
  uint64_t v223;
  unint64_t v224;
  unint64_t v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  Swift::String::Index v230;
  Swift::String::Index v231;
  Swift::String::Index v232;
  Swift::String::Index v233;
  Swift::Int v234;
  unsigned __int8 *v235;
  uint64_t v236;
  unsigned __int8 *v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  int64_t v246;
  uint64_t v247;
  void (*v248)(uint64_t, int64_t);
  void (*v249)(uint64_t, uint64_t, int64_t);
  uint64_t v250;
  unint64_t v251;
  __int128 v252;
  unint64_t v253;
  unint64_t v254;

  v3 = v1;
  v250 = a1;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (uint64_t)&v244 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = specialized static String._createEmpty(withInitialCapacity:)(8);
  v12 = v8;
  v13 = v9;
  v253 = v8;
  v254 = v9;
  v14 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000) != 0)
    v15 = HIBYTE(v9) & 0xF;
  else
    v15 = v8 & 0xFFFFFFFFFFFFLL;
  v251 = v3;
  if (!v15 && (v8 & ~v9 & 0x2000000000000000) == 0)
  {
    v12 = 0x2865676E6152;
    swift_bridgeObjectRelease(v9);
    v46 = 0xE600000000000000;
    goto LABEL_40;
  }
  if ((v9 & 0x2000000000000000) == 0 || v14 > 9)
  {
    swift_bridgeObjectRetain_n(0xE600000000000000, 6, v10, v11);
    if ((v13 & 0x1000000000000000) != 0)
      goto LABEL_159;
    v21 = __OFADD__(v15, 6);
    v22 = v15 + 6;
    if (!v21)
      goto LABEL_13;
LABEL_161:
    __break(1u);
    goto LABEL_162;
  }
  v16 = 8 * HIBYTE(v9);
  v17 = (-255 << (v16 & 0x38)) - 1;
  v18 = 82 << (v16 & 0x38);
  v19 = v14 + 1;
  if (v14 >= 8)
  {
    v20 = v18 | v17 & v9;
    goto LABEL_31;
  }
  v12 = v18 | v17 & v8;
  if (v14 == 7)
  {
    v19 = 8;
    v20 = v9;
LABEL_31:
    v49 = (97 << (8 * (v19 & 7u))) | ((-255 << (8 * (v19 & 7u))) - 1) & v20;
    v50 = v14 + 2;
LABEL_32:
    v51 = (110 << (8 * (v50 & 7u))) | ((-255 << (8 * (v50 & 7u))) - 1) & v49;
    v52 = v14 + 3;
LABEL_33:
    v53 = (103 << (8 * (v52 & 7u))) | ((-255 << (8 * (v52 & 7u))) - 1) & v51;
    v54 = v14 + 4;
LABEL_34:
    v55 = (101 << (8 * (v54 & 7u))) | ((-255 << (8 * (v54 & 7u))) - 1) & v53;
    v56 = v14 + 5;
    goto LABEL_35;
  }
  v12 = (97 << (8 * (v19 & 7u))) | ((-255 << (8 * (v19 & 7u))) - 1) & v12;
  if (v14 >= 6)
  {
    v50 = 8;
    v49 = v9;
    goto LABEL_32;
  }
  v12 = (110 << ((v16 + 16) & 0x38)) | ((-255 << ((v16 + 16) & 0x38)) - 1) & v12;
  if (v14 == 5)
  {
    v52 = 8;
    v51 = v9;
    goto LABEL_33;
  }
  v12 = (103 << ((v16 + 24) & 0x38)) | ((-255 << ((v16 + 24) & 0x38)) - 1) & v12;
  if (v14 >= 4)
  {
    v54 = 8;
    v53 = v9;
    goto LABEL_34;
  }
  v12 = (101 << ((v16 + 32) & 0x38)) | ((-255 << ((v16 + 32) & 0x38)) - 1) & v12;
  if (v14 != 3)
  {
    v12 = (40 << ((v16 + 40) & 0x38)) | ((-255 << ((v16 + 40) & 0x38)) - 1) & v12;
    v57 = v9;
    goto LABEL_36;
  }
  v56 = 8;
  v55 = v9;
LABEL_35:
  v57 = (40 << (8 * (v56 & 7u))) | ((-255 << (8 * (v56 & 7u))) - 1) & v55;
LABEL_36:
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(0xE600000000000000);
  v58 = 0xA000000000000000;
  if (!(v12 & 0x8080808080808080 | v57 & 0x80808080808080))
    v58 = 0xE000000000000000;
  v46 = (v58 & 0xFF00000000000000 | (v14 << 56) | v57 & 0xFFFFFFFFFFFFFFLL) + 0x600000000000000;
LABEL_40:
  v253 = v12;
  v254 = v46;
  while (1)
  {
    v249 = *(void (**)(uint64_t, uint64_t, int64_t))(v5 + 16);
    v249(v7, v3, v4);
    *(_QWORD *)&v252 = 0;
    *((_QWORD *)&v252 + 1) = 0xE000000000000000;
    _debugPrint_unlocked<A, B>(_:_:)(v7, (uint64_t)&v252, (Class *)v4, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
    v248 = *(void (**)(uint64_t, int64_t))(v5 + 8);
    v248(v7, v4);
    v13 = *((_QWORD *)&v252 + 1);
    v5 = v252;
    v61 = HIBYTE(v46) & 0xF;
    v2 = v12 & 0xFFFFFFFFFFFFLL;
    if ((v46 & 0x2000000000000000) != 0)
      v62 = HIBYTE(v46) & 0xF;
    else
      v62 = v12 & 0xFFFFFFFFFFFFLL;
    if (!v62 && (v12 & ~v46 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease(v46);
      v253 = v5;
      v254 = v13;
      goto LABEL_128;
    }
    v247 = v7;
    v3 = *((_QWORD *)&v252 + 1) & 0x2000000000000000;
    v7 = HIBYTE(*((_QWORD *)&v252 + 1)) & 0xFLL;
    if ((v46 & 0x2000000000000000) != 0)
    {
      if (v3)
        break;
    }
LABEL_50:
    v246 = v4;
    v244 = v252 & 0xFFFFFFFFFFFFLL;
    if (v3)
      v4 = HIBYTE(*((_QWORD *)&v252 + 1)) & 0xFLL;
    else
      v4 = v252 & 0xFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain_n(*((uint64_t *)&v252 + 1), 2, v59, v60);
    v245 = v4;
    if ((v13 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain_n(v13, 5, v64, v65);
      v153._rawBits = 1;
      v154._rawBits = (v4 << 16) | 1;
      v155._rawBits = _StringGuts.validateScalarRange(_:)(v153, v154, v5, v13);
      if (v155._rawBits < 0x10000)
        v155._rawBits |= 3;
      v4 = specialized Collection.count.getter(v155, v156, v5, v13);
      swift_bridgeObjectRelease(v13);
      if ((v46 & 0x1000000000000000) != 0)
      {
LABEL_156:
        v157 = String.UTF8View._foreignCount()();
        v66 = v157 + v4;
        if (!__OFADD__(v157, v4))
        {
LABEL_56:
          v67 = v12 & ~v46;
          if ((v67 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v46 & 0xFFFFFFFFFFFFFFFLL))
          {
            v68 = _StringGuts.nativeUnusedCapacity.getter(v12, v46);
            if ((v69 & 1) == 0)
            {
              if (v66 > 15)
                goto LABEL_62;
              if ((v46 & 0x2000000000000000) != 0)
              {
                swift_bridgeObjectRelease_n(v13, 5);
                v77 = v46;
                v4 = v246;
                v7 = v247;
              }
              else
              {
                if (v68 >= v4)
                  goto LABEL_62;
LABEL_73:
                swift_bridgeObjectRelease_n(v13, 5);
                v7 = v247;
                if ((v46 & 0x2000000000000000) != 0)
                {
                  v77 = v46;
                  v4 = v246;
                }
                else
                {
                  v4 = v246;
                  if ((v46 & 0x1000000000000000) != 0)
                  {
                    v12 = _StringGuts._foreignConvertedToSmall()(v12, v46);
                    v77 = v243;
                  }
                  else
                  {
                    if ((v12 & 0x1000000000000000) != 0)
                    {
                      v237 = (unsigned __int8 *)((v46 & 0xFFFFFFFFFFFFFFFLL) + 32);
                    }
                    else
                    {
                      v237 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v12, v46);
                      v2 = v74;
                    }
                    swift_bridgeObjectRetain(v46, v74, v75, v76);
                    closure #1 in _StringGuts._convertedToSmall()(v237, v2, &v252);
                    swift_bridgeObjectRelease(v46);
                    v77 = *((_QWORD *)&v252 + 1);
                    v12 = v252;
                  }
                }
              }
              v78._rawBits = (v245 << 16) | 1;
              v79._rawBits = 1;
              v80._rawBits = _StringGuts.validateScalarRange(_:)(v79, v78, v5, v13);
              if (v80._rawBits < 0x10000)
                v80._rawBits |= 3;
              v82 = specialized String.init(_:)(v80, v81, v5, v13);
              v84 = v83;
              swift_bridgeObjectRelease(v13);
              if ((v84 & 0x2000000000000000) == 0)
                goto LABEL_241;
              swift_bridgeObjectRelease(v84);
              goto LABEL_79;
            }
LABEL_255:
            v240 = 258;
LABEL_256:
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v240, 0);
          }
          if (v66 <= 15)
            goto LABEL_73;
LABEL_62:
          v70 = _StringGuts.nativeUnusedCapacity.getter(v12, v46);
          v73 = (v71 & 1) == 0 && v70 >= v4;
          if ((v67 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v46 & 0xFFFFFFFFFFFFFFFLL))
          {
            v4 = v246;
            if (v73)
            {
LABEL_100:
              swift_bridgeObjectRelease_n(v13, 4);
              if ((v13 & 0x1000000000000000) != 0)
              {
                swift_bridgeObjectRelease(v13);
                _StringGuts._foreignAppendInPlace(_:)(v5, v13, 0, v245);
                swift_bridgeObjectRelease_n(v13, 2);
                goto LABEL_104;
              }
              if (v3)
              {
                swift_bridgeObjectRelease_n(v13, 2);
                *(_QWORD *)&v252 = v5;
                *((_QWORD *)&v252 + 1) = v13 & 0xFFFFFFFFFFFFFFLL;
                v106 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, HIBYTE(v13) & 0xF, (uint64_t)&v252, HIBYTE(v13) & 0xF);
                _StringGuts.appendInPlace(_:isASCII:)(v106, v107, (v13 & 0x4000000000000000) != 0);
                swift_bridgeObjectRelease(v13);
LABEL_104:
                v7 = v247;
                v3 = v251;
                goto LABEL_128;
              }
              if ((v5 & 0x1000000000000000) != 0)
              {
                swift_bridgeObjectRelease(v13);
                v120 = (id)((v13 & 0xFFFFFFFFFFFFFFFLL) + 32);
                v121 = v244;
                v122 = v244;
                v7 = v247;
                v3 = v251;
                goto LABEL_121;
              }
LABEL_250:
              v120 = _StringObject.sharedUTF8.getter(v5, v13);
              v122 = v238;
              swift_bridgeObjectRelease(v13);
              if (v122 < v244)
                goto LABEL_253;
              v4 = v246;
              v7 = v247;
              v3 = v251;
              v121 = v244;
LABEL_121:
              v123 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v121, (uint64_t)v120, v122);
              _StringGuts.appendInPlace(_:isASCII:)(v123, v124, v5 < 0);
              swift_bridgeObjectRelease_n(v13, 2);
              goto LABEL_128;
            }
LABEL_93:
            v102 = _StringGuts.nativeCapacity.getter(v12, v46);
            if ((v103 & 1) != 0)
              v104 = 0;
            else
              v104 = v102;
            if (v104 + 0x4000000000000000 < 0)
            {
              __break(1u);
              goto LABEL_250;
            }
            v105 = 2 * v104;
            if (v105 > v66)
              v66 = v105;
          }
          else
          {
            v4 = v246;
            if (!v73)
              goto LABEL_93;
          }
          _StringGuts.grow(_:)(v66);
          goto LABEL_100;
        }
        goto LABEL_158;
      }
    }
    else
    {
      swift_bridgeObjectRetain_n(v13, 4, v64, v65);
      if ((v46 & 0x1000000000000000) != 0)
        goto LABEL_156;
    }
    v21 = __OFADD__(v62, v4);
    v66 = v62 + v4;
    if (!v21)
      goto LABEL_56;
LABEL_158:
    __break(1u);
LABEL_159:
    v158 = String.UTF8View._foreignCount()();
    v22 = v158 + 6;
    if (__OFADD__(v158, 6))
      goto LABEL_161;
LABEL_13:
    if ((v12 & ~v13 & 0x2000000000000000) != 0
      && swift_isUniquelyReferenced_nonNull_native(v13 & 0xFFFFFFFFFFFFFFFLL))
    {
      v23 = _StringGuts.nativeUnusedCapacity.getter(v12, v13);
      if ((v24 & 1) != 0)
        goto LABEL_255;
      v26 = (v13 & 0x2000000000000000) == 0 && v23 > 5;
      if (v22 > 15 || v26)
        goto LABEL_29;
LABEL_24:
      swift_bridgeObjectRelease_n(0xE600000000000000, 5);
      swift_bridgeObjectRetain(v13, v27, v28, v29);
      v30 = _StringGuts._convertedToSmall()(v12, v13);
      v32 = v31;
      swift_bridgeObjectRelease(v13);
      v33._rawBits = 1;
      v34._rawBits = 393217;
      v35._rawBits = _StringGuts.validateScalarRange(_:)(v33, v34, 0x2865676E6152uLL, 0xE600000000000000);
      if (v35._rawBits < 0x10000)
        v35._rawBits |= 3;
      v37 = specialized String.init(_:)(v35, v36, 0x2865676E6152uLL, 0xE600000000000000);
      v39 = v38;
      swift_bridgeObjectRelease(0xE600000000000000);
      v40 = _StringGuts._convertedToSmall()(v37, v39);
      v42 = v41;
      swift_bridgeObjectRelease(v39);
      v43 = specialized _SmallString.init(_:appending:)(v30, v32, v40, v42);
      if ((v45 & 1) != 0)
        goto LABEL_254;
      v12 = v43;
      v46 = v44;
      swift_bridgeObjectRelease(v13);
      swift_bridgeObjectRelease(0xE600000000000000);
      v253 = v12;
      v254 = v46;
      v3 = v251;
    }
    else
    {
      if (v22 <= 15)
        goto LABEL_24;
LABEL_29:
      _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v22, 6);
      swift_bridgeObjectRelease_n(0xE600000000000000, 6);
      v252 = xmmword_1816ABCF0;
      v47 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 6, (uint64_t)&v252, 6);
      _StringGuts.appendInPlace(_:isASCII:)(v47, v48, 1);
      swift_bridgeObjectRelease(0xE600000000000000);
      v12 = v253;
      v46 = v254;
    }
  }
  v63 = v61 + v7;
  if ((unint64_t)(v61 + v7) > 0xF)
  {
    v3 = 1;
    goto LABEL_50;
  }
  v3 = v251;
  if (v7)
  {
    v108 = 0;
    v109 = 0;
    v110 = v46;
    do
    {
      v111 = v61 + v109;
      v112 = v109 + 1;
      if (v109 >= 8)
        v113 = *((_QWORD *)&v252 + 1);
      else
        v113 = v252;
      v114 = v113 >> (v108 & 0x38);
      v115 = (8 * v61 + v108) & 0x38;
      v116 = (-255 << v115) - 1;
      v117 = (unint64_t)v114 << v115;
      v118 = v117 | v116 & v110;
      v119 = v117 | v116 & v12;
      if (v111 < 8)
        v12 = v119;
      else
        v110 = v118;
      v108 += 8;
      v109 = v112;
    }
    while (v7 != v112);
  }
  else
  {
    v110 = v46;
  }
  swift_bridgeObjectRelease(v46);
  swift_bridgeObjectRelease(v13);
  v125 = 0xA000000000000000;
  if (!(v12 & 0x8080808080808080 | v110 & 0x80808080808080))
    v125 = 0xE000000000000000;
  v253 = v12;
  v254 = v125 & 0xFF00000000000000 | (v63 << 56) | v110 & 0xFFFFFFFFFFFFFFLL;
  v7 = v247;
  while (1)
  {
LABEL_128:
    v2 = v253;
    v12 = v254;
    v126 = HIBYTE(v254) & 0xF;
    v127 = v253 & 0xFFFFFFFFFFFFLL;
    if ((v254 & 0x2000000000000000) != 0)
      v128 = HIBYTE(v254) & 0xF;
    else
      v128 = v253 & 0xFFFFFFFFFFFFLL;
    if (!v128 && (v253 & ~v254 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease(v254);
      v2 = 0;
      v253 = 0;
      v151 = 0xE000000000000000;
      goto LABEL_165;
    }
    if ((v254 & 0x2000000000000000) != 0)
    {
      swift_bridgeObjectRelease(v254);
      swift_bridgeObjectRelease(0xE000000000000000);
      v152 = 0xA000000000000000;
      if (!(v12 & 0x80808080808080 | v2 & 0x8080808080808080))
        v152 = 0xE000000000000000;
      v151 = v152 & 0xFF00000000000000 | (v126 << 56) | v12 & 0xFFFFFFFFFFFFFFLL;
      v253 = v2;
      goto LABEL_165;
    }
    swift_bridgeObjectRetain_n(0xE000000000000000, 6, v99, v100);
    if ((v12 & 0x1000000000000000) != 0)
    {
LABEL_162:
      v127 = String.UTF8View._foreignCount()();
      if ((v2 & ~v12 & 0x2000000000000000) == 0)
        goto LABEL_163;
    }
    else if ((v2 & ~v12 & 0x2000000000000000) == 0)
    {
      goto LABEL_163;
    }
    if (swift_isUniquelyReferenced_nonNull_native(v12 & 0xFFFFFFFFFFFFFFFLL))
    {
      v129 = _StringGuts.nativeUnusedCapacity.getter(v2, v12);
      if ((v130 & 1) != 0)
        goto LABEL_255;
      if (v127 > 15 || (v129 & 0x8000000000000000) == 0)
      {
LABEL_164:
        _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v127, 0);
        swift_bridgeObjectRelease_n(0xE000000000000000, 6);
        v252 = 0uLL;
        v159 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 0, (uint64_t)&v252, 0);
        _StringGuts.appendInPlace(_:isASCII:)(v159, v160, 1);
        swift_bridgeObjectRelease(0xE000000000000000);
        v2 = v253;
        v151 = v254;
        goto LABEL_165;
      }
      goto LABEL_140;
    }
LABEL_163:
    if (v127 > 15)
      goto LABEL_164;
LABEL_140:
    v131 = v3;
    swift_bridgeObjectRelease_n(0xE000000000000000, 5);
    swift_bridgeObjectRetain(v12, v132, v133, v134);
    v135 = _StringGuts._convertedToSmall()(v2, v12);
    v137 = v136;
    swift_bridgeObjectRelease(v12);
    v138._rawBits = 1;
    v139._rawBits = 1;
    v140._rawBits = _StringGuts.validateScalarRange(_:)(v138, v139, 0, 0xE000000000000000);
    if (v140._rawBits < 0x10000)
      v140._rawBits |= 3;
    v142 = specialized String.init(_:)(v140, v141, 0, 0xE000000000000000);
    v144 = v143;
    swift_bridgeObjectRelease(0xE000000000000000);
    v145 = _StringGuts._convertedToSmall()(v142, v144);
    v147 = v146;
    swift_bridgeObjectRelease(v144);
    v148 = specialized _SmallString.init(_:appending:)(v135, v137, v145, v147);
    if ((v150 & 1) != 0)
      goto LABEL_254;
    v2 = v148;
    v151 = v149;
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(0xE000000000000000);
    v253 = v2;
    v3 = v131;
LABEL_165:
    v161 = specialized static String._createEmpty(withInitialCapacity:)(6);
    v165 = v162;
    v253 = v161;
    v254 = v162;
    v166 = HIBYTE(v162) & 0xF;
    if ((v162 & 0x2000000000000000) == 0)
      v166 = v161 & 0xFFFFFFFFFFFFLL;
    if (v166 || (v161 & ~v162 & 0x2000000000000000) != 0)
    {
      if ((v162 & 0x2000000000000000) == 0
        || (v167 = specialized _SmallString.init(_:appending:)(v161, v162, 0x3C2E2EuLL, 0xE300000000000000),
            (v163 & 1) != 0))
      {
        swift_bridgeObjectRetain(0xE300000000000000, v162, v163, v164);
        _StringGuts.append(_:)(3943982, 0xE300000000000000, 0, 3);
        swift_bridgeObjectRelease_n(0xE300000000000000, 2);
        v82 = v253;
        v12 = v254;
        goto LABEL_175;
      }
      v82 = v167;
      v12 = v162;
      swift_bridgeObjectRelease(v165);
      swift_bridgeObjectRelease(0xE300000000000000);
    }
    else
    {
      v82 = 3943982;
      swift_bridgeObjectRelease(v162);
      v12 = 0xE300000000000000;
    }
    v253 = v82;
    v254 = v12;
LABEL_175:
    v249(v7, v3 + *(int *)(v250 + 36), v4);
    *(_QWORD *)&v252 = 0;
    *((_QWORD *)&v252 + 1) = 0xE000000000000000;
    _debugPrint_unlocked<A, B>(_:_:)(v7, (uint64_t)&v252, (Class *)v4, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
    v248(v7, v4);
    v170 = *((_QWORD *)&v252 + 1);
    v171 = v252;
    v172 = HIBYTE(v12) & 0xF;
    if ((v12 & 0x2000000000000000) != 0)
      v173 = HIBYTE(v12) & 0xF;
    else
      v173 = v82 & 0xFFFFFFFFFFFFLL;
    if (!v173 && (v82 & ~v12 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease(v12);
      v253 = v171;
      v254 = v170;
      goto LABEL_225;
    }
    v251 = v151;
    v13 = *((_QWORD *)&v252 + 1) & 0x2000000000000000;
    v77 = HIBYTE(*((_QWORD *)&v252 + 1)) & 0xFLL;
    v247 = v2;
    if ((v12 & 0x2000000000000000) != 0 && v13)
    {
      v174 = v172 + v77;
      if (v172 + v77 <= 0xF)
      {
        if (v77)
        {
          v206 = 0;
          v207 = 0;
          v208 = v12;
          do
          {
            v209 = v172 + v207;
            v210 = v207 + 1;
            if (v207 >= 8)
              v211 = *((_QWORD *)&v252 + 1);
            else
              v211 = v252;
            v212 = v211 >> (v206 & 0x38);
            v213 = (8 * v172 + v206) & 0x38;
            v214 = (-255 << v213) - 1;
            v215 = (unint64_t)v212 << v213;
            v216 = v215 | v214 & v208;
            v217 = v215 | v214 & v82;
            if (v209 < 8)
              v82 = v217;
            else
              v208 = v216;
            v206 += 8;
            v207 = v210;
          }
          while (v77 != v210);
        }
        else
        {
          v208 = v12;
        }
        swift_bridgeObjectRelease(v12);
        swift_bridgeObjectRelease(v170);
        v222 = 0xA000000000000000;
        if (!(v82 & 0x8080808080808080 | v208 & 0x80808080808080))
          v222 = 0xE000000000000000;
        v253 = v82;
        v254 = v222 & 0xFF00000000000000 | (v174 << 56) | v208 & 0xFFFFFFFFFFFFFFLL;
        goto LABEL_224;
      }
      v13 = 1;
    }
    v84 = v252 & 0xFFFFFFFFFFFFLL;
    v46 = v13 ? HIBYTE(*((_QWORD *)&v252 + 1)) & 0xFLL : v252 & 0xFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain_n(*((uint64_t *)&v252 + 1), 2, v168, v169);
    if ((v170 & 0x1000000000000000) != 0)
      break;
    swift_bridgeObjectRetain_n(v170, 4, v175, v176);
    v4 = v46;
    if ((v12 & 0x1000000000000000) != 0)
      goto LABEL_238;
LABEL_189:
    v21 = __OFADD__(v173, v4);
    v7 = v173 + v4;
    if (!v21)
      goto LABEL_190;
LABEL_240:
    __break(1u);
LABEL_241:
    if ((v84 & 0x1000000000000000) != 0)
    {
      v82 = _StringGuts._foreignConvertedToSmall()(v82, v84);
      v242 = v241;
      swift_bridgeObjectRelease(v84);
      v84 = v242;
    }
    else
    {
      if ((v82 & 0x1000000000000000) != 0)
      {
        v235 = (unsigned __int8 *)((v84 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v236 = v82 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v235 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v82, v84);
      }
      closure #1 in _StringGuts._convertedToSmall()(v235, v236, &v252);
      swift_bridgeObjectRelease(v84);
      v84 = *((_QWORD *)&v252 + 1);
      v82 = v252;
    }
LABEL_79:
    v85 = HIBYTE(v77) & 0xF;
    v86 = HIBYTE(v84) & 0xF;
    v87 = v86 + v85;
    if ((unint64_t)(v86 + v85) > 0xF)
      goto LABEL_254;
    if (v86)
    {
      v88 = 0;
      v89 = 0;
      do
      {
        v90 = v85 + v89;
        v91 = v89 + 1;
        if (v89 >= 8)
          v92 = v84;
        else
          v92 = v82;
        v93 = v92 >> (v88 & 0x38);
        v94 = (8 * v85 + v88) & 0x38;
        v95 = (-255 << v94) - 1;
        v96 = (unint64_t)v93 << v94;
        v97 = v96 | v95 & v77;
        v98 = v96 | v95 & v12;
        if (v90 < 8)
          v12 = v98;
        else
          v77 = v97;
        v88 += 8;
        v89 = v91;
      }
      while (v86 != v91);
    }
    swift_bridgeObjectRelease(v46);
    swift_bridgeObjectRelease(v13);
    v101 = 0xA000000000000000;
    if (!(v12 & 0x8080808080808080 | v77 & 0x80808080808080))
      v101 = 0xE000000000000000;
    v253 = v12;
    v254 = v101 & 0xFF00000000000000 | (v87 << 56) | v77 & 0xFFFFFFFFFFFFFFLL;
    v3 = v251;
  }
  swift_bridgeObjectRetain_n(v170, 5, v175, v176);
  v230._rawBits = 1;
  v231._rawBits = (v46 << 16) | 1;
  v232._rawBits = _StringGuts.validateScalarRange(_:)(v230, v231, v171, v170);
  if (v232._rawBits < 0x10000)
    v232._rawBits |= 3;
  v4 = specialized Collection.count.getter(v232, v233, v171, v170);
  swift_bridgeObjectRelease(v170);
  if ((v12 & 0x1000000000000000) == 0)
    goto LABEL_189;
LABEL_238:
  v234 = String.UTF8View._foreignCount()();
  v7 = v234 + v4;
  if (__OFADD__(v234, v4))
    goto LABEL_240;
LABEL_190:
  if ((v82 & ~v12 & 0x2000000000000000) == 0 || !swift_isUniquelyReferenced_nonNull_native(v12 & 0xFFFFFFFFFFFFFFFLL))
  {
    if (v7 > 15)
      goto LABEL_202;
LABEL_197:
    swift_bridgeObjectRelease_n(v170, 5);
    swift_bridgeObjectRetain(v12, v180, v181, v182);
    v183 = _StringGuts._convertedToSmall()(v82, v12);
    v185 = v184;
    swift_bridgeObjectRelease(v12);
    v186._rawBits = (v46 << 16) | 1;
    v187._rawBits = 1;
    v188._rawBits = _StringGuts.validateScalarRange(_:)(v187, v186, v171, v170);
    if (v188._rawBits < 0x10000)
      v188._rawBits |= 3;
    v190 = specialized String.init(_:)(v188, v189, v171, v170);
    v192 = v191;
    swift_bridgeObjectRelease(v170);
    v193 = _StringGuts._convertedToSmall()(v190, v192);
    v195 = v194;
    swift_bridgeObjectRelease(v192);
    v196 = specialized _SmallString.init(_:appending:)(v183, v185, v193, v195);
    v151 = v251;
    if ((v198 & 1) == 0)
    {
      v199 = v196;
      v200 = v197;
      swift_bridgeObjectRelease(v12);
      swift_bridgeObjectRelease(v170);
      v253 = v199;
      v254 = v200;
      v2 = v247;
      goto LABEL_225;
    }
LABEL_254:
    v240 = 266;
    goto LABEL_256;
  }
  v177 = _StringGuts.nativeUnusedCapacity.getter(v82, v12);
  if ((v178 & 1) != 0)
    goto LABEL_255;
  v179 = (v12 >> 61) & 1;
  if (v177 < v4)
    LODWORD(v179) = 1;
  if (v7 <= 15 && (_DWORD)v179)
    goto LABEL_197;
LABEL_202:
  _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v7, v4);
  swift_bridgeObjectRelease_n(v170, 4);
  if ((v170 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v170);
    _StringGuts._foreignAppendInPlace(_:)(v171, v170, 0, v46);
    swift_bridgeObjectRelease_n(v170, 2);
LABEL_224:
    v2 = v247;
    v151 = v251;
    goto LABEL_225;
  }
  if (v13)
  {
    swift_bridgeObjectRelease_n(v170, 2);
    *(_QWORD *)&v252 = v171;
    *((_QWORD *)&v252 + 1) = v170 & 0xFFFFFFFFFFFFFFLL;
    v204 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, HIBYTE(v170) & 0xF, (uint64_t)&v252, HIBYTE(v170) & 0xF);
    _StringGuts.appendInPlace(_:isASCII:)(v204, v205, (v170 & 0x4000000000000000) != 0);
    swift_bridgeObjectRelease(v170);
    goto LABEL_224;
  }
  if ((v171 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v170);
    v218 = (id)((v170 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v219 = v171 & 0xFFFFFFFFFFFFLL;
    goto LABEL_219;
  }
  v218 = _StringObject.sharedUTF8.getter(v171, v170);
  v219 = v239;
  swift_bridgeObjectRelease(v170);
  if (v219 < v84)
LABEL_253:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
LABEL_219:
  v151 = v251;
  v220 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v171 & 0xFFFFFFFFFFFFLL, (uint64_t)v218, v219);
  _StringGuts.appendInPlace(_:isASCII:)(v220, v221, v171 < 0);
  swift_bridgeObjectRelease_n(v170, 2);
  v2 = v247;
LABEL_225:
  v223 = v254;
  v224 = HIBYTE(v254) & 0xF;
  if ((v254 & 0x2000000000000000) == 0)
    v224 = v253 & 0xFFFFFFFFFFFFLL;
  if (v224 || (v253 & ~v254 & 0x2000000000000000) != 0)
  {
    if ((v254 & 0x2000000000000000) == 0
      || (v225 = specialized _SmallString.init(_:appending:)(v253, v254, 0x29uLL, 0xE100000000000000), (v202 & 1) != 0))
    {
      swift_bridgeObjectRetain(0xE100000000000000, v201, v202, v203);
      _StringGuts.append(_:)(41, 0xE100000000000000, 0, 1);
      swift_bridgeObjectRelease_n(0xE100000000000000, 2);
      v226 = v253;
      v227 = v254;
    }
    else
    {
      v226 = v225;
      v227 = v201;
      swift_bridgeObjectRelease(v223);
      swift_bridgeObjectRelease(0xE100000000000000);
    }
  }
  else
  {
    swift_bridgeObjectRelease(v254);
    v227 = 0xE100000000000000;
    v226 = 41;
  }
  v228 = specialized static String.+ infix(_:_:)(v2, v151, v226, v227);
  swift_bridgeObjectRelease(v151);
  swift_bridgeObjectRelease(v227);
  return v228;
}

uint64_t ClosedRange.customMirror.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *boxed_opaque_existential_0Tm;
  void (*v15)(_QWORD *, uint64_t, uint64_t);
  uint64_t v16;
  _QWORD *v17;
  double (*v18)@<D0>(uint64_t@<X8>);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  void (*v27)(uint64_t *, char *, uint64_t);
  uint64_t *v28;
  Class *v29;
  uint64_t result;
  char v31;
  uint64_t *v32;
  uint64_t v33[5];

  v3 = v2;
  v6 = *(_QWORD *)(a1 - 8);
  v7 = MEMORY[0x1E0C80A78](a1);
  v32 = (uint64_t *)((char *)&v33[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v33[-1] - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v33[-1] - v9, v3, a1);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v12 = swift_allocObject(v11, 0x80uLL, 7uLL);
  *((_OWORD *)v12 + 1) = xmmword_1816ABC30;
  v12[4] = 0x756F427265776F6CLL;
  v12[5] = 0xEA0000000000646ELL;
  v13 = *(_QWORD *)(a1 + 16);
  v12[9] = v13;
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(v12 + 6);
  v15 = *(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  v15(boxed_opaque_existential_0Tm, v3, v13);
  v12[10] = 0x756F427265707075;
  v12[11] = 0xEA0000000000646ELL;
  v16 = v3 + *(int *)(a1 + 36);
  v12[15] = v13;
  v17 = __swift_allocate_boxed_opaque_existential_0Tm(v12 + 12);
  v15(v17, v16, v13);
  v33[0] = 0;
  v33[1] = 0;
  v18 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)v10, (uint64_t)v33, (swift *)a1);
  v20 = v19;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _RandomAccessCollectionBox<LazyMapSequence<KeyValuePairs<String, Any>, (label: String?, value: Any)>>);
  v22 = swift_allocObject(v21, 0x48uLL, 7uLL);
  v22[6] = v12;
  v22[7] = closure #1 in Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:);
  v22[8] = 0;
  v23 = canonical specialized generic type metadata accessor for _IndexBox<Int>();
  v24 = swift_allocObject(v23, 0x18uLL, 7uLL);
  v24[2] = 0;
  v25 = v12[2];
  v26 = swift_allocObject(v23, 0x18uLL, 7uLL);
  v26[2] = v25;
  v22[2] = v24;
  v22[3] = &protocol witness table for _IndexBox<A>;
  v22[4] = v26;
  v22[5] = &protocol witness table for _IndexBox<A>;
  v27 = *(void (**)(uint64_t *, char *, uint64_t))(v6 + 32);
  v28 = v32;
  v27(v32, v10, a1);
  v29 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  result = swift_dynamicCast((char *)v33, v28, (Class *)a1, v29, 6uLL);
  v31 = result;
  if ((_DWORD)result)
    result = __swift_destroy_boxed_opaque_existential_1Tm(v33);
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = v22;
  *(_BYTE *)(a2 + 16) = 8;
  *(_QWORD *)(a2 + 24) = v18;
  *(_QWORD *)(a2 + 32) = v20;
  *(_BYTE *)(a2 + 40) = v31;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Range<A>(char *a1, char *a2, uint64_t a3)
{
  return static Range.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t ClosedRange<>.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;

  v5 = *(void (**)(uint64_t, uint64_t))(a3 + 24);
  v6 = *(_QWORD *)(a2 + 16);
  v5(a1, v6);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v5)(a1, v6, a3);
}

Swift::Int ClosedRange<>.hashValue.getter(uint64_t a1, uint64_t a2)
{
  void (*v3)(_QWORD *, uint64_t, uint64_t);
  uint64_t v4;
  _QWORD v6[5];
  __int128 v7;
  __int128 v8;

  v6[0] = 0;
  v6[1] = _swift_stdlib_Hashing_parameters ^ 0x736F6D6570736575;
  v6[2] = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v6[3] = _swift_stdlib_Hashing_parameters ^ 0x6C7967656E657261;
  v6[4] = unk_1ECD25520 ^ 0x7465646279746573;
  v7 = 0u;
  v8 = 0u;
  v3 = *(void (**)(_QWORD *, uint64_t, uint64_t))(a2 + 24);
  v4 = *(_QWORD *)(a1 + 16);
  v3(v6, v4, a2);
  v3(v6, v4, a2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <> Range<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance <> ClosedRange<A><>.Index(a1, a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))Range<>.hash(into:));
}

uint64_t Range<>.init(from:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  return ClosedRange<>.init(from:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Range, a5);
}

uint64_t ClosedRange<>.init(from:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t (*a5)(_QWORD, uint64_t, uint64_t)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  char *v38;
  char *v39;
  void (*v40)(char *, char *, uint64_t);
  char *v41;
  void (*v42)(char *, uint64_t);
  char *v43;
  Class *v44;
  uint64_t *v45;
  uint64_t v46;
  Class *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t *TypeName;
  uint64_t v64;
  uint8x16_t *v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  char v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  char v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  void (*v84)(uint64_t, Class *);
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  char v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v102;
  unint64_t v103;
  char v104;
  unint64_t v105;
  unint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t *TupleTypeMetadata2;
  Class *v116;
  _QWORD *v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120[3];
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;

  v117 = a4;
  v113 = a6;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, a2, a2, "lower upper ", 0);
  v10 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v112 = (char *)&v107 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v110 = (char *)&v107 - v12;
  v114 = a3;
  v116 = (Class *)a5(0, a2, a3);
  v111 = (uint64_t)*(v116 - 1);
  v13 = MEMORY[0x1E0C80A78](v116);
  v15 = (char *)&v107 - v14;
  v16 = *(_QWORD *)(a2 - 8);
  v17 = MEMORY[0x1E0C80A78](v13);
  v19 = (char *)&v107 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v107 - v20;
  v22 = a1[3];
  v23 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v22);
  v24 = v123;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v23 + 32))(v120, v22, v23);
  if (v24)
  {
LABEL_63:
    v45 = a1;
    return __swift_destroy_boxed_opaque_existential_1Tm(v45);
  }
  v107 = v15;
  v108 = v16;
  v109 = v19;
  v123 = a1;
  v26 = v121;
  v25 = v122;
  __swift_mutable_project_boxed_opaque_existential_1(v120, v121);
  v27 = v117;
  (*(void (**)(uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t))(v25 + 176))(a2, a2, v117, v26, v25);
  v28 = v21;
  v30 = v121;
  v29 = v122;
  __swift_mutable_project_boxed_opaque_existential_1(v120, v121);
  v31 = (uint64_t)v109;
  (*(void (**)(uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t))(v29 + 176))(a2, a2, v27, v30, v29);
  if (((*(uint64_t (**)(char *, uint64_t, uint64_t))(v114 + 24))(v28, v31, a2) & 1) == 0)
  {
    v46 = (uint64_t)v28;
    v47 = (Class *)a2;
    v117 = swift_allocError((uint64_t)&type metadata for DecodingError, (uint64_t)&protocol witness table for DecodingError, 0, 0);
    v49 = v48;
    v50 = v123[3];
    v51 = v123[4];
    __swift_project_boxed_opaque_existential_0Tm(v123, v50);
    TupleTypeMetadata2 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(v51 + 8))(v50, v51);
    v52 = specialized static String._createEmpty(withInitialCapacity:)(72);
    v54 = v53;
    v118 = v52;
    v119 = v53;
    v55 = HIBYTE(v53) & 0xF;
    if ((v53 & 0x2000000000000000) == 0)
      v55 = v52 & 0xFFFFFFFFFFFFLL;
    if (v55 || (v52 & ~v53 & 0x2000000000000000) != 0)
    {
      v56 = v108;
      if ((v53 & 0x2000000000000000) != 0
        && (0x80000001817617D0 & 0x2000000000000000) != 0
        && (v57 = specialized _SmallString.init(_:appending:)(v52, v53, 0xD000000000000012, 0x80000001817617D0 | 0x8000000000000000), (v59 & 1) == 0))
      {
        v60 = v57;
        v61 = v58;
        swift_bridgeObjectRelease(v54);
        swift_bridgeObjectRelease(0x80000001817617D0 | 0x8000000000000000);
        v118 = v60;
        v119 = v61;
      }
      else
      {
        if ((0x80000001817617D0 & 0x2000000000000000) != 0)
          v62 = (0x80000001817617D0 >> 56) & 0xF;
        else
          v62 = 18;
        _StringGuts.append(_:)(0xD000000000000012, 0x80000001817617D0 | 0x8000000000000000, 0, v62);
        swift_bridgeObjectRelease(0x80000001817617D0 | 0x8000000000000000);
      }
    }
    else
    {
      swift_bridgeObjectRelease(v53);
      v118 = 0xD000000000000012;
      v119 = 0x80000001817617D0 | 0x8000000000000000;
      v56 = v108;
    }
    TypeName = (uint64_t *)swift_getTypeName(v116, 0);
    if (v64 < 0)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
    v65 = (uint8x16_t *)TypeName;
    v66 = v64;
    v67 = validateUTF8(_:)(TypeName, v64);
    if ((v69 & 1) != 0)
      v70 = repairUTF8(_:firstKnownBrokenRange:)(v65->i8, v66, v67, v68);
    else
      v70 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v65, v66, v67 & 1);
    v72 = v70;
    v73 = v71;
    v74 = v119;
    v75 = HIBYTE(v119) & 0xF;
    if ((v119 & 0x2000000000000000) == 0)
      v75 = v118 & 0xFFFFFFFFFFFFLL;
    if (!v75 && (v118 & ~v119 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease(v119);
      v118 = v72;
      v119 = v73;
      goto LABEL_30;
    }
    if ((v119 & 0x2000000000000000) != 0)
    {
      if ((v71 & 0x2000000000000000) != 0)
      {
        v102 = specialized _SmallString.init(_:appending:)(v118, v119, v70, v71);
        if ((v104 & 1) == 0)
        {
          v105 = v102;
          v106 = v103;
          swift_bridgeObjectRelease(v74);
          swift_bridgeObjectRelease(v73);
          v118 = v105;
          v119 = v106;
          v73 = v106;
          v72 = v105;
          v56 = v108;
          goto LABEL_30;
        }
        v76 = HIBYTE(v73) & 0xF;
        v56 = v108;
LABEL_29:
        _StringGuts.append(_:)(v72, v73, 0, v76);
        swift_bridgeObjectRelease(v73);
        v72 = v118;
        v73 = v119;
LABEL_30:
        v77 = HIBYTE(v73) & 0xF;
        if ((v73 & 0x2000000000000000) == 0)
          v77 = v72 & 0xFFFFFFFFFFFFLL;
        if (v77 || (v72 & ~v73 & 0x2000000000000000) != 0)
        {
          if ((v73 & 0x2000000000000000) != 0
            && (0x8000000181761D00 & 0x2000000000000000) != 0
            && (v78 = specialized _SmallString.init(_:appending:)(v72, v73, 0xD000000000000014, 0x8000000181761D00 | 0x8000000000000000), (v80 & 1) == 0))
          {
            v81 = v78;
            v82 = v79;
            swift_bridgeObjectRelease(v73);
            swift_bridgeObjectRelease(0x8000000181761D00 | 0x8000000000000000);
            v118 = v81;
            v119 = v82;
          }
          else
          {
            if ((0x8000000181761D00 & 0x2000000000000000) != 0)
              v83 = (0x8000000181761D00 >> 56) & 0xF;
            else
              v83 = 20;
            _StringGuts.append(_:)(0xD000000000000014, 0x8000000181761D00 | 0x8000000000000000, 0, v83);
            swift_bridgeObjectRelease(0x8000000181761D00 | 0x8000000000000000);
          }
        }
        else
        {
          swift_bridgeObjectRelease(v73);
          v118 = 0xD000000000000014;
          v119 = 0x8000000181761D00 | 0x8000000000000000;
        }
        _print_unlocked<A, B>(_:_:)(v46, (uint64_t)&v118, v47, (uint64_t)&type metadata for DefaultStringInterpolation, (uint64_t)&protocol witness table for DefaultStringInterpolation);
        v84 = *(void (**)(uint64_t, Class *))(v56 + 8);
        v84(v46, v47);
        v85 = v119;
        v86 = HIBYTE(v119) & 0xF;
        if ((v119 & 0x2000000000000000) == 0)
          v86 = v118 & 0xFFFFFFFFFFFFLL;
        if (v86 || (v118 & ~v119 & 0x2000000000000000) != 0)
        {
          if ((v119 & 0x2000000000000000) != 0
            && (0x8000000181761D20 & 0x2000000000000000) != 0
            && (v87 = specialized _SmallString.init(_:appending:)(v118, v119, 0xD00000000000001BLL, 0x8000000181761D20 | 0x8000000000000000), (v89 & 1) == 0))
          {
            v90 = v87;
            v91 = v88;
            swift_bridgeObjectRelease(v85);
            swift_bridgeObjectRelease(0x8000000181761D20 | 0x8000000000000000);
            v118 = v90;
            v119 = v91;
          }
          else
          {
            if ((0x8000000181761D20 & 0x2000000000000000) != 0)
              v92 = (0x8000000181761D20 >> 56) & 0xF;
            else
              v92 = 27;
            _StringGuts.append(_:)(0xD00000000000001BLL, 0x8000000181761D20 | 0x8000000000000000, 0, v92);
            swift_bridgeObjectRelease(0x8000000181761D20 | 0x8000000000000000);
          }
        }
        else
        {
          swift_bridgeObjectRelease(v119);
          v118 = 0xD00000000000001BLL;
          v119 = 0x8000000181761D20 | 0x8000000000000000;
        }
        v93 = (uint64_t)v109;
        _print_unlocked<A, B>(_:_:)((uint64_t)v109, (uint64_t)&v118, v47, (uint64_t)&type metadata for DefaultStringInterpolation, (uint64_t)&protocol witness table for DefaultStringInterpolation);
        v84(v93, v47);
        v94 = v119;
        v95 = HIBYTE(v119) & 0xF;
        if ((v119 & 0x2000000000000000) == 0)
          v95 = v118 & 0xFFFFFFFFFFFFLL;
        if (v95 || (v118 & ~v119 & 0x2000000000000000) != 0)
        {
          if ((v119 & 0x2000000000000000) == 0
            || (v96 = specialized _SmallString.init(_:appending:)(v118, v119, 0x29uLL, 0xE100000000000000),
                (v98 & 1) != 0))
          {
            _StringGuts.append(_:)(41, 0xE100000000000000, 0, 1);
            swift_bridgeObjectRelease(0xE100000000000000);
            v99 = v118;
            v100 = v119;
          }
          else
          {
            v99 = v96;
            v100 = v97;
            swift_bridgeObjectRelease(v94);
            swift_bridgeObjectRelease(0xE100000000000000);
          }
        }
        else
        {
          swift_bridgeObjectRelease(v119);
          v100 = 0xE100000000000000;
          v99 = 41;
        }
        *(_QWORD *)v49 = TupleTypeMetadata2;
        *(_QWORD *)(v49 + 8) = v99;
        *(_QWORD *)(v49 + 16) = v100;
        *(_QWORD *)(v49 + 24) = 0;
        *(_BYTE *)(v49 + 72) = 3;
        swift_willThrow();
        __swift_destroy_boxed_opaque_existential_1Tm(v120);
        a1 = v123;
        goto LABEL_63;
      }
    }
    else if ((v71 & 0x2000000000000000) != 0)
    {
      v76 = HIBYTE(v71) & 0xF;
      goto LABEL_29;
    }
    v76 = v70 & 0xFFFFFFFFFFFFLL;
    goto LABEL_29;
  }
  v32 = TupleTypeMetadata2;
  v33 = v110;
  v34 = &v110[*((int *)TupleTypeMetadata2 + 12)];
  v117 = 0;
  v35 = v108;
  v36 = *(void (**)(char *, char *, uint64_t))(v108 + 32);
  v36(v110, v28, a2);
  v37 = v34;
  v36(v34, (char *)v31, a2);
  v38 = v112;
  v39 = &v112[*((int *)v32 + 12)];
  v40 = *(void (**)(char *, char *, uint64_t))(v35 + 16);
  v40(v112, v33, a2);
  v40(v39, v37, a2);
  v41 = v107;
  v36(v107, v38, a2);
  v42 = *(void (**)(char *, uint64_t))(v35 + 8);
  v42(v39, a2);
  v43 = &v38[*((int *)TupleTypeMetadata2 + 12)];
  v36(v38, v33, a2);
  v36(v43, v37, a2);
  v44 = v116;
  v36(&v41[*((int *)v116 + 9)], v43, a2);
  v42(v38, a2);
  (*(void (**)(uint64_t, char *, Class *))(v111 + 32))(v113, v41, v44);
  __swift_destroy_boxed_opaque_existential_1Tm(v120);
  v45 = v123;
  return __swift_destroy_boxed_opaque_existential_1Tm(v45);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> Range<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Range<>.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD **)(a3 - 8), a4);
}

uint64_t Range<>.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return ClosedRange<>.encode(to:)(a1, a2, a3);
}

uint64_t PartialRangeUpTo.relative<A>(to:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  unint64_t *v27;
  char *v28;
  char *v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  char *v39;
  char *v40;
  unint64_t *TupleTypeMetadata2;
  char *v42;
  uint64_t v43;

  v42 = a4;
  v7 = *(_QWORD *)(a1 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v7, v7, "lower upper ", 0);
  v8 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v40 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v39 = (char *)&v38 - v11;
  v12 = *(_QWORD **)(v7 - 8);
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v38 - v17;
  v19 = MEMORY[0x1E0C80A78](v16);
  v21 = (char *)&v38 - v20;
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v38 - v22;
  (*(void (**)(uint64_t, uint64_t))(a3 + 64))(a2, a3);
  v24 = (void (*)(char *, uint64_t, uint64_t))v12[2];
  v24(v21, v43, v7);
  v24(v18, (uint64_t)v23, v7);
  v24(v15, (uint64_t)v21, v7);
  v25 = *(_QWORD *)(a1 + 24);
  if (((*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v25 + 24))(v18, v15, v7, v25) & 1) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v43 = v25;
  v26 = (void (*)(char *, uint64_t))v12[1];
  v26(v15, v7);
  v26(v18, v7);
  v27 = TupleTypeMetadata2;
  v28 = v39;
  v29 = &v39[*((int *)TupleTypeMetadata2 + 12)];
  v30 = (void (*)(char *, char *, uint64_t))v12[4];
  v30(v39, v23, v7);
  v30(v29, v21, v7);
  v31 = v40;
  v32 = &v40[*((int *)v27 + 12)];
  v24(v40, (uint64_t)v28, v7);
  v24(v32, (uint64_t)v29, v7);
  v33 = v42;
  v30(v42, v31, v7);
  v26(v32, v7);
  v34 = &v31[*((int *)v27 + 12)];
  v30(v31, v28, v7);
  v30(v34, v29, v7);
  v36 = type metadata accessor for Range(0, v7, v43, v35);
  v30(&v33[*(int *)(v36 + 36)], v34, v7);
  return ((uint64_t (*)(char *, uint64_t))v26)(v31, v7);
}

uint64_t PartialRangeUpTo.contains(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 + 24) + 16))(a1, v2) & 1;
}

uint64_t protocol witness for RangeExpression.relative<A>(to:) in conformance PartialRangeUpTo<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  unint64_t *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  void (*v31)(char *, char *, uint64_t);
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  char *v40;
  char *v41;
  unint64_t *TupleTypeMetadata2;
  char *v43;
  uint64_t v44;

  v43 = a4;
  v7 = *(_QWORD *)(a3 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v7, v7, "lower upper ", 0);
  v8 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v41 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v40 = (char *)&v39 - v11;
  v12 = *(_QWORD **)(v7 - 8);
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v39 - v17;
  v19 = MEMORY[0x1E0C80A78](v16);
  v21 = (char *)&v39 - v20;
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v39 - v22;
  (*(void (**)(uint64_t, uint64_t))(a2 + 64))(a1, a2);
  v24 = (void (*)(char *, uint64_t, uint64_t))v12[2];
  v24(v21, v44, v7);
  v24(v18, (uint64_t)v23, v7);
  v24(v15, (uint64_t)v21, v7);
  v25 = *(_QWORD *)(a3 + 24);
  if (((*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v25 + 24))(v18, v15, v7, v25) & 1) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v26 = (void (*)(char *, uint64_t))v12[1];
  v26(v15, v7);
  v26(v18, v7);
  v27 = TupleTypeMetadata2;
  v28 = *((int *)TupleTypeMetadata2 + 12);
  v44 = v25;
  v29 = v40;
  v30 = &v40[v28];
  v31 = (void (*)(char *, char *, uint64_t))v12[4];
  v31(v40, v23, v7);
  v31(v30, v21, v7);
  v32 = v41;
  v33 = &v41[*((int *)v27 + 12)];
  v24(v41, (uint64_t)v29, v7);
  v24(v33, (uint64_t)v30, v7);
  v34 = v43;
  v31(v43, v32, v7);
  v26(v33, v7);
  v35 = &v32[*((int *)v27 + 12)];
  v31(v32, v29, v7);
  v31(v35, v30, v7);
  v37 = type metadata accessor for Range(0, v7, v44, v36);
  v31(&v34[*(int *)(v37 + 36)], v35, v7);
  return ((uint64_t (*)(char *, uint64_t))v26)(v32, v7);
}

uint64_t protocol witness for RangeExpression.contains(_:) in conformance PartialRangeUpTo<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 + 24) + 16))(a1, v2) & 1;
}

uint64_t PartialRangeUpTo<>.init(from:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return PartialRangeUpTo<>.init(from:)(a1, a2, a3, a4);
}

{
  uint64_t v4;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v18[3];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = a3;
  v8 = *(_QWORD *)(a2 - 8);
  v9 = (_QWORD *)MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v18[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = v9[3];
  v13 = v9[4];
  __swift_project_boxed_opaque_existential_0Tm(v9, v12);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v13 + 32))(v18, v12, v13);
  if (!v4)
  {
    v14 = v19;
    v15 = v20;
    __swift_mutable_project_boxed_opaque_existential_1(v18, v19);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 176))(a2, a2, v21, v14, v15);
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(a4, v11, a2);
    __swift_destroy_boxed_opaque_existential_1Tm(v18);
  }
  return __swift_destroy_boxed_opaque_existential_1Tm(a1);
}

uint64_t PartialRangeUpTo<>.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return PartialRangeUpTo<>.encode(to:)(a1, a2, a3);
}

{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11[3];
  uint64_t v12;
  uint64_t v13;

  v6 = a1[3];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v6);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v7 + 32))(v11, v6, v7);
  v8 = v12;
  v9 = v13;
  __swift_mutable_project_boxed_opaque_existential_1(v11, v12);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(v9 + 160))(v3, *(_QWORD *)(a2 + 16), a3, v8, v9);
  return __swift_destroy_boxed_opaque_existential_1Tm(v11);
}

uint64_t PartialRangeThrough.relative<A>(to:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  unint64_t *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  void (*v31)(char *, char *, uint64_t);
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  char *v40;
  char *v41;
  unint64_t *TupleTypeMetadata2;
  char *v43;
  uint64_t v44;

  v43 = a4;
  v7 = *(_QWORD *)(a1 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v7, v7, "lower upper ", 0);
  v8 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v41 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v40 = (char *)&v39 - v11;
  v12 = *(_QWORD **)(v7 - 8);
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v39 - v17;
  v19 = MEMORY[0x1E0C80A78](v16);
  v21 = (char *)&v39 - v20;
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v39 - v22;
  (*(void (**)(uint64_t, uint64_t))(a3 + 64))(a2, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 184))(v44, a2, a3);
  v24 = (void (*)(char *, char *, uint64_t))v12[2];
  v24(v18, v23, v7);
  v24(v15, v21, v7);
  v25 = *(_QWORD *)(a1 + 24);
  if (((*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v25 + 24))(v18, v15, v7, v25) & 1) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v26 = (void (*)(char *, uint64_t))v12[1];
  v26(v15, v7);
  v26(v18, v7);
  v27 = TupleTypeMetadata2;
  v28 = *((int *)TupleTypeMetadata2 + 12);
  v44 = v25;
  v29 = v40;
  v30 = &v40[v28];
  v31 = (void (*)(char *, char *, uint64_t))v12[4];
  v31(v40, v23, v7);
  v31(v30, v21, v7);
  v32 = v41;
  v33 = &v41[*((int *)v27 + 12)];
  v24(v41, v29, v7);
  v24(v33, v30, v7);
  v34 = v43;
  v31(v43, v32, v7);
  v26(v33, v7);
  v35 = &v32[*((int *)v27 + 12)];
  v31(v32, v29, v7);
  v31(v35, v30, v7);
  v37 = type metadata accessor for Range(0, v7, v44, v36);
  v31(&v34[*(int *)(v37 + 36)], v35, v7);
  return ((uint64_t (*)(char *, uint64_t))v26)(v32, v7);
}

uint64_t PartialRangeThrough.contains(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 + 24) + 24))(a1, v2) & 1;
}

uint64_t protocol witness for RangeExpression.relative<A>(to:) in conformance PartialRangeThrough<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  unint64_t *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  void (*v31)(char *, char *, uint64_t);
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  char *v40;
  char *v41;
  unint64_t *TupleTypeMetadata2;
  char *v43;
  uint64_t v44;

  v43 = a4;
  v7 = *(_QWORD *)(a3 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v7, v7, "lower upper ", 0);
  v8 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v41 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v40 = (char *)&v39 - v11;
  v12 = *(_QWORD **)(v7 - 8);
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v39 - v17;
  v19 = MEMORY[0x1E0C80A78](v16);
  v21 = (char *)&v39 - v20;
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v39 - v22;
  (*(void (**)(uint64_t, uint64_t))(a2 + 64))(a1, a2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a2 + 184))(v44, a1, a2);
  v24 = (void (*)(char *, char *, uint64_t))v12[2];
  v24(v18, v23, v7);
  v24(v15, v21, v7);
  v25 = *(_QWORD *)(a3 + 24);
  if (((*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v25 + 24))(v18, v15, v7, v25) & 1) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v26 = (void (*)(char *, uint64_t))v12[1];
  v26(v15, v7);
  v26(v18, v7);
  v27 = TupleTypeMetadata2;
  v28 = *((int *)TupleTypeMetadata2 + 12);
  v44 = v25;
  v29 = v40;
  v30 = &v40[v28];
  v31 = (void (*)(char *, char *, uint64_t))v12[4];
  v31(v40, v23, v7);
  v31(v30, v21, v7);
  v32 = v41;
  v33 = &v41[*((int *)v27 + 12)];
  v24(v41, v29, v7);
  v24(v33, v30, v7);
  v34 = v43;
  v31(v43, v32, v7);
  v26(v33, v7);
  v35 = &v32[*((int *)v27 + 12)];
  v31(v32, v29, v7);
  v31(v35, v30, v7);
  v37 = type metadata accessor for Range(0, v7, v44, v36);
  v31(&v34[*(int *)(v37 + 36)], v35, v7);
  return ((uint64_t (*)(char *, uint64_t))v26)(v32, v7);
}

uint64_t protocol witness for RangeExpression.contains(_:) in conformance PartialRangeThrough<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 + 24) + 24))(a1, v2) & 1;
}

uint64_t PartialRangeThrough<>.init(from:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return PartialRangeUpTo<>.init(from:)(a1, a2, a3, a4);
}

uint64_t PartialRangeThrough<>.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return PartialRangeUpTo<>.encode(to:)(a1, a2, a3);
}

uint64_t PartialRangeFrom.relative<A>(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t (*v26)(char *, char *, uint64_t);
  void (*v27)(char *, uint64_t);
  unint64_t *v28;
  char *v29;
  char *v30;
  void (*v31)(char *, char *, uint64_t);
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v39;
  char *v40;
  char *v41;
  unint64_t *TupleTypeMetadata2;
  uint64_t v43;
  uint64_t v44;

  v43 = a1;
  v44 = a3;
  v40 = a5;
  v8 = *(_QWORD *)(a2 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v8, v8, "lower upper ", 0);
  v9 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v41 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v39 = (char *)&v39 - v12;
  v13 = *(_QWORD **)(v8 - 8);
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v39 - v18;
  v20 = MEMORY[0x1E0C80A78](v17);
  v22 = (char *)&v39 - v21;
  MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v39 - v23;
  v25 = (void (*)(char *, uint64_t, uint64_t))v13[2];
  v25((char *)&v39 - v23, v5, v8);
  (*(void (**)(uint64_t, uint64_t))(a4 + 72))(v44, a4);
  v25(v19, (uint64_t)v24, v8);
  v25(v16, (uint64_t)v22, v8);
  v26 = *(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(a2 + 24) + 24);
  v44 = *(_QWORD *)(a2 + 24);
  if ((v26(v19, v16, v8) & 1) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v27 = (void (*)(char *, uint64_t))v13[1];
  v27(v16, v8);
  v27(v19, v8);
  v28 = TupleTypeMetadata2;
  v29 = v39;
  v30 = &v39[*((int *)TupleTypeMetadata2 + 12)];
  v31 = (void (*)(char *, char *, uint64_t))v13[4];
  v31(v39, v24, v8);
  v31(v30, v22, v8);
  v32 = v41;
  v33 = &v41[*((int *)v28 + 12)];
  v25(v41, (uint64_t)v29, v8);
  v25(v33, (uint64_t)v30, v8);
  v34 = v40;
  v31(v40, v32, v8);
  v27(v33, v8);
  v35 = &v32[*((int *)v28 + 12)];
  v31(v32, v29, v8);
  v31(v35, v30, v8);
  v37 = type metadata accessor for Range(0, v8, v44, v36);
  v31(&v34[*(int *)(v37 + 36)], v35, v8);
  return ((uint64_t (*)(char *, uint64_t))v27)(v32, v8);
}

uint64_t PartialRangeFrom.contains(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 + 24) + 24))(v2, a1) & 1;
}

uint64_t protocol witness for RangeExpression.relative<A>(to:) in conformance PartialRangeFrom<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  unint64_t *v28;
  char *v29;
  char *v30;
  void (*v31)(char *, char *, uint64_t);
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v39;
  char *v40;
  char *v41;
  unint64_t *TupleTypeMetadata2;
  uint64_t v43;
  uint64_t v44;

  v43 = a1;
  v44 = a2;
  v40 = a5;
  v8 = *(_QWORD *)(a4 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v8, v8, "lower upper ", 0);
  v9 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v41 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v39 = (char *)&v39 - v12;
  v13 = *(_QWORD **)(v8 - 8);
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v39 - v18;
  v20 = MEMORY[0x1E0C80A78](v17);
  v22 = (char *)&v39 - v21;
  MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v39 - v23;
  v25 = (void (*)(char *, uint64_t, uint64_t))v13[2];
  v25((char *)&v39 - v23, v5, v8);
  (*(void (**)(uint64_t, uint64_t))(a3 + 72))(v44, a3);
  v25(v19, (uint64_t)v24, v8);
  v25(v16, (uint64_t)v22, v8);
  v26 = *(_QWORD *)(a4 + 24);
  if (((*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v26 + 24))(v19, v16, v8, v26) & 1) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v44 = v26;
  v27 = (void (*)(char *, uint64_t))v13[1];
  v27(v16, v8);
  v27(v19, v8);
  v28 = TupleTypeMetadata2;
  v29 = v39;
  v30 = &v39[*((int *)TupleTypeMetadata2 + 12)];
  v31 = (void (*)(char *, char *, uint64_t))v13[4];
  v31(v39, v24, v8);
  v31(v30, v22, v8);
  v32 = v41;
  v33 = &v41[*((int *)v28 + 12)];
  v25(v41, (uint64_t)v29, v8);
  v25(v33, (uint64_t)v30, v8);
  v34 = v40;
  v31(v40, v32, v8);
  v27(v33, v8);
  v35 = &v32[*((int *)v28 + 12)];
  v31(v32, v29, v8);
  v31(v35, v30, v8);
  v37 = type metadata accessor for Range(0, v8, v44, v36);
  v31(&v34[*(int *)(v37 + 36)], v35, v8);
  return ((uint64_t (*)(char *, uint64_t))v27)(v32, v8);
}

uint64_t (*PartialRangeFrom<>.Iterator._current.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t PartialRangeFrom<>.Iterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t AssociatedConformanceWitness;
  char *v16;
  uint64_t v18;
  char *v19;
  const char *v20;
  uint64_t v21;

  v4 = *(_QWORD *)(a1 + 16);
  v20 = *(const char **)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v20, v4, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  v21 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v19 = (char *)&v18 - v6;
  v7 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness((uint64_t)v20, v4, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Strideable, (uint64_t)&associated conformance descriptor for Strideable.Strideable.Stride: SignedNumeric)+ 8)+ 16);
  v8 = swift_getAssociatedTypeWitness(0, (const char *)v7, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v18 - v10;
  v12 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(a2, v2, v4);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(a2, 0, 1, v4);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v7, AssociatedTypeWitness, v8, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&qword_1816B7DB0, 512, v8, AssociatedConformanceWitness);
  v16 = v19;
  (*(void (**)(char *, unint64_t, uint64_t))(v7 + 24))(v11, AssociatedTypeWitness, v7);
  (*((void (**)(char *, uint64_t))v20 + 6))(v16, v4);
  (*(void (**)(char *, unint64_t))(v21 + 8))(v16, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 40))(v2, v14, v4);
}

uint64_t PartialRangeFrom<>.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 32))(a2, v2);
}

uint64_t PartialRangeFrom<>.init(from:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return PartialRangeUpTo<>.init(from:)(a1, a2, a3, a4);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PartialRangeFrom<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return PartialRangeFrom<>.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8), a4);
}

uint64_t PartialRangeFrom<>.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return PartialRangeUpTo<>.encode(to:)(a1, a2, a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PartialRangeFrom<A>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return PartialRangeFrom<>.encode(to:)(a1, a2, *(_QWORD *)(a3 - 8));
}

uint64_t static Comparable...< prefix(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static Comparable.... postfix(_:)(a1, a2, a3, "Range cannot have an unordered upper bound.", 0x311uLL, a4);
}

uint64_t static Comparable.... prefix(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static Comparable.... postfix(_:)(a1, a2, a3, "Range cannot have an unordered upper bound.", 0x330uLL, a4);
}

uint64_t static Comparable.... postfix(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const char *a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v17;

  v12 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v15(v14, a1, a2);
  if (((*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(a3 + 8) + 8))(v14, v14, a2) & 1) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, a4, 43, 2, "Swift/Range.swift", 17, 2, a5, 0);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a2);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v15)(a6, a1, a2);
}

uint64_t Collection.subscript.getter@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  void (*v35)(uint64_t, uint64_t);
  void (*v36)(char *, char *, unint64_t);
  void (*v37)(char *, unint64_t);
  void (*v38)(char *, char *, unint64_t);
  char *v39;
  char *v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  unint64_t *TupleTypeMetadata2;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v65 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)a2, a1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, AssociatedTypeWitness, AssociatedTypeWitness, "lower upper ", 0);
  v7 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v64 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v59 = (char *)&v55 - v9;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a2, a1, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v12 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v11);
  v62 = *(_QWORD *)(v12 - 8);
  v63 = v12;
  v13 = MEMORY[0x1E0C80A78](v12);
  v58 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v60 = (char *)&v55 - v16;
  v17 = *(_QWORD **)(AssociatedTypeWitness - 8);
  v18 = MEMORY[0x1E0C80A78](v15);
  v68 = (char *)&v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v18);
  v66 = (char *)&v55 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v69 = (char *)&v55 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v67 = (char *)&v55 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v28 = (char *)&v55 - v27;
  MEMORY[0x1E0C80A78](v26);
  v30 = (char *)&v55 - v29;
  v32 = type metadata accessor for PartialRangeFrom(0, AssociatedTypeWitness, AssociatedConformanceWitness, v31);
  v57 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32);
  v34 = (char *)&v55 - v33;
  v35 = *(void (**)(uint64_t, uint64_t))(a2 + 64);
  v70 = a1;
  v71 = v3;
  v72 = a2;
  v35(a1, a2);
  v36 = (void (*)(char *, char *, unint64_t))v17[2];
  v36(v28, v30, AssociatedTypeWitness);
  if (((*(uint64_t (**)(char *, char *, unint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 8) + 8))(v28, v28, AssociatedTypeWitness) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range cannot have an unordered lower bound.", 43, 2, "Swift/Range.swift", 17, 2, 0x34FuLL, 0);
  v56 = v32;
  v37 = (void (*)(char *, unint64_t))v17[1];
  v37(v28, AssociatedTypeWitness);
  v38 = (void (*)(char *, char *, unint64_t))v17[4];
  v38(v34, v30, AssociatedTypeWitness);
  v39 = v67;
  v36(v67, v34, AssociatedTypeWitness);
  v40 = v69;
  (*(void (**)(uint64_t))(v72 + 72))(v70);
  v41 = AssociatedConformanceWitness;
  v42 = v66;
  v36(v66, v39, AssociatedTypeWitness);
  v43 = v68;
  v36(v68, v40, AssociatedTypeWitness);
  if (((*(uint64_t (**)(char *, char *, unint64_t, unint64_t))(v41 + 24))(v42, v43, AssociatedTypeWitness, v41) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v37(v68, AssociatedTypeWitness);
  v37(v66, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v34, v56);
  v44 = TupleTypeMetadata2;
  v45 = v59;
  v46 = &v59[*((int *)TupleTypeMetadata2 + 12)];
  v38(v59, v67, AssociatedTypeWitness);
  v38(v46, v69, AssociatedTypeWitness);
  v47 = v64;
  v48 = &v64[*((int *)v44 + 12)];
  v36(v64, v45, AssociatedTypeWitness);
  v36(v48, v46, AssociatedTypeWitness);
  v49 = v58;
  v38(v58, v47, AssociatedTypeWitness);
  v37(v48, AssociatedTypeWitness);
  v50 = &v47[*((int *)v44 + 12)];
  v38(v47, v45, AssociatedTypeWitness);
  v38(v50, v46, AssociatedTypeWitness);
  v51 = v63;
  v38(&v49[*(int *)(v63 + 36)], v50, AssociatedTypeWitness);
  v37(v47, AssociatedTypeWitness);
  v52 = v62;
  v53 = v60;
  (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v60, v49, v51);
  (*(void (**)(char *, uint64_t))(v72 + 88))(v53, v70);
  return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v53, v51);
}

uint64_t specialized MutableCollection.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  v5 = *(_QWORD *)(a3 + 8);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v5 + 72))(v8, a2, v5);
  v6 = v8[0];
  if (v8[0] < a1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v8[0] = a1;
  v8[1] = v6;
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v5 + 88))(v8, a2, v5);
}

uint64_t MutableCollection.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  unint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;

  v9 = *(_QWORD *)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)v9, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for RangeExpression, (uint64_t)&associated conformance descriptor for RangeExpression.RangeExpression.Bound: Comparable);
  v13 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v18 - v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 24))(v5, a2, v9, a3, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 88))(v16, a2, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t key path getter for MutableCollection.subscript<A>(_:) : <A><A1>AAA1(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MutableCollection.subscript.getter(a2, *(_QWORD *)(a3 + a2 - 32), *(_QWORD *)(a3 + a2 - 24), *(_QWORD *)(a3 + a2 - 16), *(_QWORD *)(a3 + a2 - 8));
}

uint64_t key path setter for MutableCollection.subscript<A>(_:) : <A><A1>AAA1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  v6 = *(_QWORD *)(a4 + a3 - 32);
  v7 = *(_QWORD *)(a4 + a3 - 24);
  v8 = *(_QWORD *)(a4 + a3 - 16);
  v9 = *(_QWORD *)(a4 + a3 - 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(v8 + 8), v6, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.SubSequence);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v15 - v11;
  (*(void (**)(char *, uint64_t))(v13 + 16))((char *)&v15 - v11, a1);
  return specialized MutableCollection.subscript.setter((uint64_t)v12, a3, v6, v7, v8, v9);
}

uint64_t MutableCollection.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  specialized MutableCollection.subscript.setter(a1, a2, a3, a4, a5, a6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a2, a4);
}

void (*MutableCollection.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))(uint64_t a1, char a2)
{
  uint64_t v6;
  _QWORD *v12;
  uint64_t v13;
  unint64_t AssociatedTypeWitness;
  unint64_t AssociatedConformanceWitness;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  size_t v21;
  void *v22;
  uint64_t v23;
  size_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;

  v12 = malloc(0x78uLL);
  *a1 = v12;
  v12[2] = a5;
  v12[3] = a6;
  *v12 = a3;
  v12[1] = a4;
  v13 = *(_QWORD *)(a5 + 8);
  v12[4] = v6;
  v12[5] = v13;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)v13, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a6, a4, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for RangeExpression, (uint64_t)&associated conformance descriptor for RangeExpression.RangeExpression.Bound: Comparable);
  v27 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v16);
  v17 = *(_QWORD *)(v27 - 8);
  v18 = malloc(*(_QWORD *)(v17 + 64));
  v12[6] = v18;
  v19 = swift_getAssociatedTypeWitness(0, (const char *)v13, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.SubSequence);
  v12[7] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v12[8] = v20;
  v21 = *(_QWORD *)(v20 + 64);
  v12[9] = malloc(v21);
  v22 = malloc(v21);
  v23 = *(_QWORD *)(a4 - 8);
  v12[10] = v22;
  v12[11] = v23;
  v24 = *(_QWORD *)(v23 + 64);
  v12[12] = malloc(v24);
  v12[13] = malloc(v24);
  (*(void (**)(void))(v23 + 16))();
  v25 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 24);
  v12[14] = v25;
  v25(v28, a3, v13, a4, a6);
  (*(void (**)(void *, uint64_t, uint64_t))(v13 + 88))(v18, a3, v13);
  (*(void (**)(void *, uint64_t))(v17 + 8))(v18, v27);
  return MutableCollection.subscript.modify;
}

void MutableCollection.subscript.modify(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v11)(void *, void *, uint64_t);
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 88);
  v22 = *(void **)(*(_QWORD *)a1 + 96);
  v23 = *(void **)(*(_QWORD *)a1 + 104);
  v5 = *(void **)(*(_QWORD *)a1 + 72);
  v4 = *(void **)(*(_QWORD *)a1 + 80);
  if ((a2 & 1) != 0)
  {
    v20 = v2[7];
    v21 = v2[8];
    v6 = (void *)v2[6];
    v7 = v2[4];
    v17 = v2[5];
    v8 = v2[1];
    v18 = v2[3];
    v19 = v2[2];
    v9 = *v2;
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 112);
    (*(void (**)(void *, void *))(v21 + 16))(v5, v4);
    v11 = *(void (**)(void *, void *, uint64_t))(v3 + 32);
    v12 = v3;
    v13 = v22;
    v11(v22, v23, v8);
    v10(v7, v9, v17, v8, v18);
    (*(void (**)(void *, uint64_t))(v12 + 8))(v22, v8);
    (*(void (**)(void *, void *, uint64_t))(v19 + 40))(v5, v6, v9);
    (*(void (**)(void *, uint64_t))(v21 + 8))(v4, v20);
  }
  else
  {
    v6 = (void *)v2[6];
    v15 = v2[1];
    v14 = v2[2];
    v16 = *v2;
    (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 112))(v2[4], *v2, v2[5], v15, v2[3]);
    (*(void (**)(void *, uint64_t))(v3 + 8))(v23, v15);
    (*(void (**)(void *, void *, uint64_t, uint64_t))(v14 + 40))(v4, v6, v16, v14);
    v13 = v22;
  }
  free(v23);
  free(v13);
  free(v4);
  free(v5);
  free(v6);
  free(v2);
}

uint64_t MutableCollection.subscript.getter@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  void (*v36)(uint64_t, uint64_t);
  void (*v37)(char *, char *, unint64_t);
  void (*v38)(char *, unint64_t);
  void (*v39)(char *, char *, unint64_t);
  char *v40;
  char *v41;
  char *v42;
  unint64_t *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  unint64_t *TupleTypeMetadata2;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v63 = a3;
  v5 = *(_QWORD *)(a2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)v5, a1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, AssociatedTypeWitness, AssociatedTypeWitness, "lower upper ", 0);
  v7 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v62 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v57 = (char *)&v54 - v9;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v5, a1, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v12 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v11);
  v60 = *(_QWORD *)(v12 - 8);
  v61 = v12;
  v13 = MEMORY[0x1E0C80A78](v12);
  v56 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v58 = (char *)&v54 - v16;
  v17 = *(_QWORD **)(AssociatedTypeWitness - 8);
  v18 = MEMORY[0x1E0C80A78](v15);
  v66 = (char *)&v54 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v54 - v21;
  v23 = MEMORY[0x1E0C80A78](v20);
  v64 = (char *)&v54 - v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v65 = (char *)&v54 - v26;
  v27 = MEMORY[0x1E0C80A78](v25);
  v29 = (char *)&v54 - v28;
  MEMORY[0x1E0C80A78](v27);
  v31 = (char *)&v54 - v30;
  v33 = type metadata accessor for PartialRangeFrom(0, AssociatedTypeWitness, AssociatedConformanceWitness, v32);
  v54 = *(_QWORD *)(v33 - 8);
  v55 = v33;
  MEMORY[0x1E0C80A78](v33);
  v35 = (char *)&v54 - v34;
  v36 = *(void (**)(uint64_t, uint64_t))(v5 + 64);
  v68 = a1;
  v69 = v3;
  v67 = v5;
  v36(a1, v5);
  v37 = (void (*)(char *, char *, unint64_t))v17[2];
  v37(v29, v31, AssociatedTypeWitness);
  if (((*(uint64_t (**)(char *, char *, unint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 8) + 8))(v29, v29, AssociatedTypeWitness) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range cannot have an unordered lower bound.", 43, 2, "Swift/Range.swift", 17, 2, 0x34FuLL, 0);
  v38 = (void (*)(char *, unint64_t))v17[1];
  v38(v29, AssociatedTypeWitness);
  v39 = (void (*)(char *, char *, unint64_t))v17[4];
  v39(v35, v31, AssociatedTypeWitness);
  v40 = v65;
  v37(v65, v35, AssociatedTypeWitness);
  v41 = v64;
  (*(void (**)(uint64_t))(v67 + 72))(v68);
  v37(v22, v40, AssociatedTypeWitness);
  v42 = v66;
  v37(v66, v41, AssociatedTypeWitness);
  if (((*(uint64_t (**)(char *, char *, unint64_t, unint64_t))(AssociatedConformanceWitness + 24))(v22, v42, AssociatedTypeWitness, AssociatedConformanceWitness) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v38(v66, AssociatedTypeWitness);
  v38(v22, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v35, v55);
  v43 = TupleTypeMetadata2;
  v44 = v57;
  v45 = &v57[*((int *)TupleTypeMetadata2 + 12)];
  v39(v57, v65, AssociatedTypeWitness);
  v39(v45, v41, AssociatedTypeWitness);
  v46 = v62;
  v47 = &v62[*((int *)v43 + 12)];
  v37(v62, v44, AssociatedTypeWitness);
  v37(v47, v45, AssociatedTypeWitness);
  v48 = v56;
  v39(v56, v46, AssociatedTypeWitness);
  v38(v47, AssociatedTypeWitness);
  v49 = &v46[*((int *)v43 + 12)];
  v39(v46, v44, AssociatedTypeWitness);
  v39(v49, v45, AssociatedTypeWitness);
  v50 = v61;
  v39(&v48[*(int *)(v61 + 36)], v49, AssociatedTypeWitness);
  v38(v46, AssociatedTypeWitness);
  v51 = v60;
  v52 = v58;
  (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v58, v48, v50);
  (*(void (**)(char *, uint64_t))(v67 + 88))(v52, v68);
  return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v52, v50);
}

uint64_t MutableCollection.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return specialized MutableCollection.subscript.setter(a1, a4, a5);
}

void (*MutableCollection.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t **a1, char a2)
{
  uint64_t v5;
  _QWORD *v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  size_t v12;
  void *v13;

  v9 = malloc(0x38uLL);
  *a1 = v9;
  v9[1] = a5;
  v9[2] = v5;
  *v9 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(a5 + 8), a4, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.SubSequence);
  v9[3] = AssociatedTypeWitness;
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9[4] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v9[5] = malloc(v12);
  v13 = malloc(v12);
  v9[6] = v13;
  MutableCollection.subscript.getter(a4, a5, (uint64_t)v13);
  return MutableCollection.subscript.modify;
}

void MutableCollection.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a1;
  v3 = (void *)(*a1)[5];
  v4 = (void *)(*a1)[6];
  if ((a2 & 1) != 0)
  {
    v5 = v2[3];
    v6 = v2[4];
    v7 = v2[1];
    v8 = *v2;
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[5], v4, v5);
    specialized MutableCollection.subscript.setter((uint64_t)v3, v8, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    specialized MutableCollection.subscript.setter((*a1)[6], *v2, v2[1]);
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t Range.overlaps(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, uint64_t);
  char v21;
  void (*v22)(char *, uint64_t, uint64_t);
  char v23;
  void (*v24)(char *, uint64_t);
  char *v25;
  char *v26;
  char v27;
  uint64_t v28;
  uint64_t (*v29)(char *, char *, uint64_t, uint64_t);
  char v30;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;

  v3 = v2;
  v6 = *(_QWORD *)(a2 - 8);
  v7 = MEMORY[0x1E0C80A78](a1);
  v37 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v34 = (char *)&v32 - v10;
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v32 - v12;
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v32 - v15;
  v18 = *(_QWORD *)(v17 + 16);
  v19 = *(_QWORD *)(v17 + 24);
  v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 24);
  v21 = v20(v14 + *(int *)(v17 + 36), v3, v18, v19);
  v33 = v6;
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v35 = v3;
  v22(v16, v3, a2);
  v36 = a1;
  v22(v13, a1, a2);
  if ((v21 & 1) != 0)
    v23 = 1;
  else
    v23 = v20((uint64_t)&v16[*(int *)(a2 + 36)], (uint64_t)v13, v18, v19);
  v24 = *(void (**)(char *, uint64_t))(v33 + 8);
  v24(v13, a2);
  v24(v16, a2);
  v25 = v34;
  v22(v34, v35, a2);
  if ((v23 & 1) != 0)
  {
    v24(v25, a2);
    v26 = v37;
    v22(v37, v36, a2);
    v27 = 0;
  }
  else
  {
    v28 = *(_QWORD *)(v19 + 8);
    v29 = *(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v28 + 8);
    v30 = v29(v25, &v25[*(int *)(a2 + 36)], v18, v28);
    v24(v25, a2);
    v26 = v37;
    v22(v37, v36, a2);
    if ((v30 & 1) != 0)
      v27 = 0;
    else
      v27 = v29(v26, &v26[*(int *)(a2 + 36)], v18, v28) ^ 1;
  }
  v24(v26, a2);
  return v27 & 1;
}

unint64_t String.Index._encodedOffset.getter(unint64_t a1)
{
  return a1 >> 16;
}

Swift::Void __swiftcall RangeReplaceableCollection.reserveCapacity(_:)(Swift::Int a1)
{
  EnumeratedSequence._base.modify();
}

{
  EnumeratedSequence._base.modify();
}

uint64_t RangeReplaceableCollection.init(repeating:count:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  void (*v19)(uint64_t, _QWORD *);
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t, uint64_t, _QWORD *);
  uint64_t v22;
  uint64_t WitnessTable;
  uint64_t v25;
  uint64_t v26;

  v26 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(const char **)(a4[1] + 8), a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v12 = type metadata accessor for Repeated(0, AssociatedTypeWitness, v10, v11);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v25 - v17;
  v19 = (void (*)(uint64_t, _QWORD *))a4[3];
  v25 = a5;
  v19(a3, a4);
  if (!a2)
    return (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v26, AssociatedTypeWitness);
  v20 = v26;
  if (a2 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Repetition count should be non-negative", 39, 2, "Swift/Repeat.swift", 18, 2, 0x28uLL, 0);
  *(_QWORD *)v16 = a2;
  (*(void (**)(char *, uint64_t, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(&v16[*(int *)(v12 + 28)], v20, AssociatedTypeWitness);
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v18, v16, v12);
  v21 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, _QWORD *))a4[9];
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Repeated<A>, v12, v22);
  return v21(v18, v12, WitnessTable, a3, a4);
}

uint64_t RangeReplaceableCollection.append(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v6 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v6, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = (char *)&v12 - v9;
  (*(void (**)(uint64_t, uint64_t))(v6 + 72))(a2, v6);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(a3 + 80))(a1, v10, a2, a3);
  return (*(uint64_t (**)(char *, unint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
}

uint64_t RangeReplaceableCollection.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return RangeReplaceableCollection.append<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

{
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t AssociatedConformanceWitness;
  void (*v20)(unint64_t, unint64_t);
  char *v21;
  unint64_t v22;
  unsigned int (*v23)(char *, uint64_t, unint64_t);
  void (*v24)(char *, char *, unint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v27 = a4;
  v28 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(*(_QWORD *)(a4 + 8) + 8), a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = (char *)&v26 - v9;
  v13 = type metadata accessor for Optional(0, AssociatedTypeWitness, v11, v12);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v26 - v14;
  v16 = swift_getAssociatedTypeWitness(0, (const char *)a5, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v26 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v26 - v17;
  (*(void (**)(uint64_t, uint64_t))(a5 + 32))(a3, a5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a3, v16, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v20 = *(void (**)(unint64_t, unint64_t))(AssociatedConformanceWitness + 16);
  v21 = v18;
  v22 = v16;
  v20(v16, AssociatedConformanceWitness);
  v23 = *(unsigned int (**)(char *, uint64_t, unint64_t))(v8 + 48);
  if (v23(v15, 1, AssociatedTypeWitness) != 1)
  {
    v24 = *(void (**)(char *, char *, unint64_t))(v8 + 32);
    do
    {
      v24(v10, v15, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v27 + 64))(v10, v28);
      v20(v22, AssociatedConformanceWitness);
    }
    while (v23(v15, 1, AssociatedTypeWitness) != 1);
  }
  return (*(uint64_t (**)(char *, unint64_t))(v26 + 8))(v21, v22);
}

uint64_t specialized RangeReplaceableCollection.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v3;
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t AssociatedConformanceWitness;
  void (*v11)(uint64_t *__return_ptr, unint64_t, unint64_t);
  uint64_t v13;
  uint64_t v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a3, a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v9 = (char *)&v13 - v8;
  (*(void (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v11 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t))(AssociatedConformanceWitness
                                                                                         + 16);
  v11(&v14, AssociatedTypeWitness, AssociatedConformanceWitness);
  if ((v14 & 0x100) == 0)
  {
    do
    {
      if (HIBYTE(*v3))
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/ValidUTF8Buffer.swift", 27, 2, 0xA7uLL, 0);
      *v3 |= (v14 + 1) << (-(__clz(*v3) & 0x18) & 0x18);
      v11(&v14, AssociatedTypeWitness, AssociatedConformanceWitness);
    }
    while (BYTE1(v14) != 1);
  }
  return (*(uint64_t (**)(char *, unint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
}

{
  uint64_t v3;
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t AssociatedConformanceWitness;
  void (*v11)(uint64_t *__return_ptr, unint64_t, unint64_t);
  Swift::String::Index v12;
  Swift::String::Index v13;
  uint64_t v15;
  uint64_t v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a3, a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v9 = (char *)&v15 - v8;
  (*(void (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v11 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t))(AssociatedConformanceWitness
                                                                                         + 16);
  v11(&v16, AssociatedTypeWitness, AssociatedConformanceWitness);
  if ((v16 & 0x100000000) == 0)
  {
    do
    {
      v12._rawBits = *(_QWORD *)(v3 + 8);
      v13._rawBits = v12._rawBits;
      specialized Substring.UnicodeScalarView.replaceSubrange<A>(_:with:)(v12, v13);
      v11(&v16, AssociatedTypeWitness, AssociatedConformanceWitness);
    }
    while (BYTE4(v16) != 1);
  }
  return (*(uint64_t (**)(char *, unint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
}

uint64_t specialized RangeReplaceableCollection.insert(_:at:)(uint64_t result, unsigned int a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  v3 = *v2;
  if (a2)
  {
    if (!v3)
LABEL_6:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/ValidUTF8Buffer.swift", 27, 2, 0xC1uLL, 0);
    v4 = *v2;
    while (v4 != a2)
    {
      v5 = v4 >= 0x100;
      v4 >>= 8;
      if (!v5)
        goto LABEL_6;
    }
    while (v3 != a2)
    {
      v5 = v3 >= 0x100;
      v3 >>= 8;
      if (!v5)
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/ValidUTF8Buffer.swift", 27, 2, 0xC2uLL, 0);
    }
    v3 = *v2;
    if (*v2 < a2)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  if (v3 == a2)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v9 = v3;
    do
    {
      if (v3 < v9 || v9 <= a2)
        goto LABEL_27;
      if (HIBYTE(v6))
        goto LABEL_26;
      v6 |= v9 << (-(__clz(v6) & 0x18) & 0x18);
      v9 >>= 8;
    }
    while (v9 != a2);
    if (HIBYTE(v6))
LABEL_26:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/ValidUTF8Buffer.swift", 27, 2, 0xA7uLL, 0);
  }
  if (v3 < a2)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2DAuLL, 0);
  v7 = ((result + 1) << (-(__clz(v6) & 0x18) & 0x18)) | v6;
  if (a2)
  {
    v8 = a2;
    while (v8 <= a2)
    {
      if (HIBYTE(v7))
        goto LABEL_26;
      v7 |= v8 << (-(__clz(v7) & 0x18) & 0x18);
      v5 = v8 >= 0x100;
      v8 >>= 8;
      if (!v5)
        goto LABEL_19;
    }
LABEL_27:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2CAuLL, 0);
  }
LABEL_19:
  *v2 = v7;
  return result;
}

uint64_t RangeReplaceableCollection.insert(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t AssociatedConformanceWitness;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, uint64_t, unint64_t);
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, unint64_t);
  unint64_t *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  void (*v38)(char *, char *, unint64_t);
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t WitnessTable;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  unint64_t *TupleTypeMetadata2;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  unint64_t AssociatedTypeWitness;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v61 = a4;
  v62 = a2;
  v59 = a1;
  v5 = *(_QWORD *)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(const char **)(v5 + 8), a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v58 = type metadata accessor for CollectionOfOne(0, AssociatedTypeWitness, v6, v7);
  MEMORY[0x1E0C80A78](v58);
  v56 = (char *)&v50 - v8;
  v9 = swift_getAssociatedTypeWitness(255, (const char *)v5, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v9, v9, "lower upper ", 0);
  v10 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v50 - v14;
  v16 = *(_QWORD *)(v9 - 8);
  v17 = MEMORY[0x1E0C80A78](v13);
  v19 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v50 - v20;
  v60 = a3;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v5, a3, v9, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v24 = type metadata accessor for Range(0, v9, AssociatedConformanceWitness, v23);
  v54 = *(_QWORD *)(v24 - 8);
  v55 = v24;
  v25 = MEMORY[0x1E0C80A78](v24);
  v27 = (char *)&v50 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v29 = (char *)&v50 - v28;
  v52 = v16;
  v30 = *(void (**)(char *, uint64_t, unint64_t))(v16 + 16);
  v31 = v62;
  v30(v21, v62, v9);
  v30(v19, v31, v9);
  if (((*(uint64_t (**)(char *, char *, unint64_t, unint64_t))(AssociatedConformanceWitness + 24))(v21, v19, v9, AssociatedConformanceWitness) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v32 = v52;
  v33 = *(void (**)(char *, unint64_t))(v52 + 8);
  v33(v19, v9);
  v33(v21, v9);
  v51 = v29;
  v34 = TupleTypeMetadata2;
  v35 = &v15[*((int *)TupleTypeMetadata2 + 12)];
  v36 = v62;
  v30(v15, v62, v9);
  v30(v35, v36, v9);
  v37 = &v12[*((int *)v34 + 12)];
  v30(v12, (uint64_t)v15, v9);
  v30(v37, (uint64_t)v35, v9);
  v38 = *(void (**)(char *, char *, unint64_t))(v32 + 32);
  v38(v27, v12, v9);
  v33(v37, v9);
  v39 = &v12[*((int *)v34 + 12)];
  v38(v12, v15, v9);
  v38(v39, v35, v9);
  v40 = v55;
  v38(&v27[*(int *)(v55 + 36)], v39, v9);
  v33(v12, v9);
  v41 = v54;
  v42 = v51;
  (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v51, v27, v40);
  v43 = v56;
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v56, v59);
  v44 = v61;
  v45 = *(void (**)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v61 + 32);
  v46 = v58;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for CollectionOfOne<A>, v58, v47);
  v45(v42, v43, v46, WitnessTable, v60, v44);
  return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v42, v40);
}

uint64_t specialized RangeReplaceableCollection.remove(at:)(Swift::UInt64 a1)
{
  unint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String::Index v6;
  Swift::UInt64 v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String::Index v12;
  Swift::UInt64 v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  unsigned int v17;
  Swift::String::Index v18;
  Swift::String::Index v19;
  Swift::UInt64 v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v3 = *v1;
  v2 = v1[1];
  v4 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v4 = *v1 & 0xFFFFFFFFFFFFLL;
  if (!v4)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove from an empty collection", 37, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x222uLL, 0);
  v6._rawBits = _StringGuts.validateScalarIndex(_:)((Swift::String::Index)a1)._rawBits;
  if ((v2 & 0x1000000000000000) != 0)
  {
    v9 = *(_OWORD *)&_StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v6._rawBits & 0xFFFFFFFFFFFF0000));
  }
  else
  {
    v7 = v6._rawBits >> 16;
    if ((v2 & 0x2000000000000000) != 0)
    {
      v23 = v3;
      v24 = v2 & 0xFFFFFFFFFFFFFFLL;
      v9 = *((unsigned __int8 *)&v23 + v7);
      if (*((char *)&v23 + v7) < 0)
        __asm { BR              X10 }
    }
    else
    {
      if ((v3 & 0x1000000000000000) != 0)
        v8 = (unsigned __int8 *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v3, v2);
      v9 = v8[v7];
      if ((char)v8[v7] < 0)
        __asm { BR              X10 }
    }
  }
  v11 = *v1;
  v10 = v1[1];
  v12._rawBits = _StringGuts.validateScalarIndex(_:)((Swift::String::Index)a1)._rawBits;
  if ((v10 & 0x1000000000000000) != 0)
  {
    v18._rawBits = String.UnicodeScalarView._foreignIndex(after:)(v12)._rawBits;
  }
  else
  {
    v13 = v12._rawBits >> 16;
    if ((v10 & 0x2000000000000000) != 0)
    {
      v23 = v11;
      v24 = v10 & 0xFFFFFFFFFFFFFFLL;
      v15 = *((unsigned __int8 *)&v23 + v13);
    }
    else
    {
      if ((v11 & 0x1000000000000000) != 0)
        v14 = (unsigned __int8 *)((v10 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v14 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v11, v10);
      v15 = v14[v13];
    }
    v16 = (char)v15;
    v17 = __clz(v15 ^ 0xFF) - 24;
    if (v16 >= 0)
      LOBYTE(v17) = 1;
    v18._rawBits = ((v13 + v17) << 16) | 5;
  }
  if (v18._rawBits >> 14 < a1 >> 14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v19._rawBits = a1;
  v20 = _StringGuts.validateScalarRange_5_7(_:)(v19, v18, *v1, v1[1]);
  specialized _StringGuts.replaceSubrange<A>(_:with:)(v20, v21);
  return v9;
}

{
  uint64_t v1;
  uint64_t v3;
  Swift::String::Index v4;
  Swift::String::Index v5;
  Swift::String::Index v6;

  if (!((*(_QWORD *)(v1 + 8) ^ *(_QWORD *)v1) >> 14))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove from an empty collection", 37, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x222uLL, 0);
  v3 = Substring.subscript.getter(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
  v4._rawBits = Substring.index(after:)((Swift::String::Index)a1)._rawBits;
  if (v4._rawBits >> 14 < a1 >> 14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v5._rawBits = v4._rawBits;
  v6._rawBits = a1;
  specialized Substring._replaceSubrange<A>(_:with:)(v6, v5);
  return v3;
}

uint64_t specialized RangeReplaceableCollection.remove(at:)(unsigned int a1)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int i;
  BOOL v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t result;
  unsigned int v9;
  unsigned int v10;

  v2 = *v1;
  if (!*v1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove from an empty collection", 37, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x222uLL, 0);
  if (!a1)
    goto LABEL_29;
  v3 = a1 >> 8;
  for (i = *v1; i != a1; i >>= 8)
  {
    v5 = i >= 0x100;
    if (!v5)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/ValidUTF8Buffer.swift", 27, 2, 0xC1uLL, 0);
  }
  if (a1 >= 0x100)
  {
    while (v2)
    {
      if (v2 == v3)
        goto LABEL_8;
      v5 = v2 >= 0x100;
      v2 >>= 8;
      if (!v5)
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/ValidUTF8Buffer.swift", 27, 2, 0xC2uLL, 0);
    }
LABEL_29:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/ValidUTF8Buffer.swift", 27, 2, 0x69uLL, 0);
  }
LABEL_8:
  v6 = *v1;
  if (*v1 < a1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v7 = 0;
  if (v6 != a1)
  {
    v9 = *v1;
    while (v6 >= v9 && v9 > a1)
    {
      if (HIBYTE(v7))
LABEL_32:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/ValidUTF8Buffer.swift", 27, 2, 0xA7uLL, 0);
      v7 |= v9 << (-(__clz(v7) & 0x18) & 0x18);
      v9 >>= 8;
      if (v9 == a1)
        goto LABEL_11;
    }
LABEL_28:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2CAuLL, 0);
  }
LABEL_11:
  if (v6 < v3)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2DAuLL, 0);
  if (a1 >= 0x100)
  {
    v10 = a1 >> 8;
    while (v3 >= v10)
    {
      if (HIBYTE(v7))
        goto LABEL_32;
      v7 |= v10 << (-(__clz(v7) & 0x18) & 0x18);
      v5 = v10 >= 0x100;
      v10 >>= 8;
      if (!v5)
        goto LABEL_13;
    }
    goto LABEL_28;
  }
LABEL_13:
  result = a1 - 1;
  *v1 = v7;
  return result;
}

{
  unsigned int *v1;
  unint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  v2 = *((unsigned __int8 *)v1 + 4);
  if (!*((_BYTE *)v1 + 4))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove from an empty collection", 37, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x222uLL, 0);
  if (a1 >= 0xF0u)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v3 = *v1;
  v4 = a1 + 16;
  if (v2 < a1)
    goto LABEL_9;
  v5 = (a1 + 16);
  if (v2 < v5)
    v5 = *((unsigned __int8 *)v1 + 4);
  if (v5 != v4)
LABEL_9:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UIntBuffer.swift", 22, 2, 0xD4uLL, 0);
  v6 = -((int)((a1 + 16)
             - a1
             + ((((a1 + 16) - a1) & 0xF000u) >> 12)) >> 4);
  if ((uint64_t)(v6 + (v2 >> 4)) >= 3)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UIntBuffer.swift", 22, 2, 0xDDuLL, 0);
  *v1 = (v3 >> ((v4 >> 1) & 0x18) >> ((v4 >> 1) & 0x18) << ((16 * v6 + v4) & 0x10)) | v3 & ((1 << ((a1 >> 1) & 0x18) << ((a1 >> 1) & 0x18))
                                                                                          - 1);
  *((_BYTE *)v1 + 4) = v2 + 16 * v6;
  return v3 >> a1;
}

{
  unsigned int *v1;
  unint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  v2 = *((unsigned __int8 *)v1 + 4);
  if (!*((_BYTE *)v1 + 4))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove from an empty collection", 37, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x222uLL, 0);
  if (a1 >= 0xF8u)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v3 = *v1;
  v4 = a1 + 8;
  if (v2 < a1)
    goto LABEL_9;
  v5 = (a1 + 8);
  if (v2 < v5)
    v5 = *((unsigned __int8 *)v1 + 4);
  if (v5 != v4)
LABEL_9:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UIntBuffer.swift", 22, 2, 0xD4uLL, 0);
  v6 = -((int)((a1 + 8)
             - a1
             + ((((a1 + 8) - a1) & 0xE000u) >> 13)) >> 3);
  if ((uint64_t)(v6 + (v2 >> 3)) >= 5)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UIntBuffer.swift", 22, 2, 0xDDuLL, 0);
  *v1 = (v3 >> ((v4 >> 1) & 0x1C) >> ((v4 >> 1) & 0x1C) << ((8 * v6 + v4) & 0x18)) | v3 & ((1 << ((a1 >> 1) & 0x1C) << ((a1 >> 1) & 0x1C))
                                                                                         - 1);
  *((_BYTE *)v1 + 4) = v2 + 8 * v6;
  return v3 >> a1;
}

uint64_t specialized RangeReplaceableCollection.remove(at:)(Swift::String::Index a1)
{
  _QWORD *v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::String::Index v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  Swift::UInt64 v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String::Index v18;
  Swift::UInt64 v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  unsigned int v23;
  Swift::String::Index v24;
  Swift::String::Index v25;
  uint64_t v27;
  uint64_t v28;

  v2 = *v1 >> 14;
  v3 = v1[1] >> 14;
  if (v2 == v3)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove from an empty collection", 37, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x222uLL, 0);
  v4._rawBits = a1._rawBits;
  v6 = v1[2];
  v5 = v1[3];
  v7 = (v5 & 0x1000000000000000) == 0 || (v6 & 0x800000000000000) != 0;
  v8 = a1._rawBits & 0xC;
  v9 = 4 << v7;
  if ((a1._rawBits & 1) != 0 && v8 != v9)
  {
    if (a1._rawBits >> 14 >= v2 && a1._rawBits >> 14 < v3)
    {
LABEL_23:
      if ((v5 & 0x1000000000000000) == 0)
        goto LABEL_24;
LABEL_46:
      v15 = *(_OWORD *)&_StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(a1._rawBits & 0xFFFFFFFFFFFF0000));
      goto LABEL_31;
    }
    v11 = 143;
LABEL_21:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Substring index is out of bounds", 32, 2, "Swift/StringIndexValidation.swift", 33, 2, v11, 0);
  }
  if (v8 == v9)
    a1._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(a1)._rawBits;
  if (a1._rawBits >> 14 < v2 || a1._rawBits >> 14 >= v3)
  {
    v11 = 43;
    goto LABEL_21;
  }
  if ((a1._rawBits & 1) != 0)
    goto LABEL_23;
  a1._rawBits = _StringGuts.scalarAlignSlow(_:)(a1)._rawBits & 0xFFFFFFFFFFFFFFF2 | 1;
  if ((v5 & 0x1000000000000000) != 0)
    goto LABEL_46;
LABEL_24:
  v13 = a1._rawBits >> 16;
  if ((v5 & 0x2000000000000000) != 0)
  {
    v27 = v6;
    v28 = v5 & 0xFFFFFFFFFFFFFFLL;
    v15 = *((unsigned __int8 *)&v27 + v13);
    if (*((char *)&v27 + v13) < 0)
      __asm { BR              X10 }
  }
  else
  {
    if ((v6 & 0x1000000000000000) != 0)
      v14 = (unsigned __int8 *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v14 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v6, v5);
    v15 = v14[v13];
    if ((char)v14[v13] < 0)
      __asm { BR              X10 }
  }
LABEL_31:
  v17 = v1[2];
  v16 = v1[3];
  v18._rawBits = _StringGuts.validateScalarIndex(_:)(v4)._rawBits;
  if ((v16 & 0x1000000000000000) != 0)
  {
    v24._rawBits = String.UnicodeScalarView._foreignIndex(after:)(v18)._rawBits;
  }
  else
  {
    v19 = v18._rawBits >> 16;
    if ((v16 & 0x2000000000000000) != 0)
    {
      v27 = v17;
      v28 = v16 & 0xFFFFFFFFFFFFFFLL;
      v21 = *((unsigned __int8 *)&v27 + v19);
    }
    else
    {
      if ((v17 & 0x1000000000000000) != 0)
        v20 = (unsigned __int8 *)((v16 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v20 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v17, v16);
      v21 = v20[v19];
    }
    v22 = (char)v21;
    v23 = __clz(v21 ^ 0xFF) - 24;
    if (v22 >= 0)
      LOBYTE(v23) = 1;
    v24._rawBits = ((v19 + v23) << 16) | 5;
  }
  if (v24._rawBits >> 14 < v4._rawBits >> 14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v25._rawBits = v4._rawBits;
  specialized Substring.UnicodeScalarView.replaceSubrange<A>(_:with:)(v25, v24);
  return v15;
}

uint64_t RangeReplaceableCollection.remove(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t AssociatedConformanceWitness;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(_BYTE *, _QWORD);
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, unint64_t);
  char *v44;
  void (*v45)(char *, unint64_t);
  unint64_t *v46;
  char *v47;
  char *v48;
  void (*v49)(char *, char *, unint64_t);
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  void (*v56)(char *);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  unint64_t *TupleTypeMetadata2;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE v77[40];

  v70 = a4;
  v68 = a3;
  v7 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)v7, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, AssociatedTypeWitness, AssociatedTypeWitness, "lower upper ", 0);
  v9 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v11 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v9);
  v66 = (char *)&v62 - v13;
  v69 = *(_QWORD *)(a2 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v17 = MEMORY[0x1E0C80A78](v14);
  v71 = (char *)&v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v73 = (char *)&v62 - v20;
  MEMORY[0x1E0C80A78](v19);
  v74 = (char *)&v62 - v21;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v7, a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v24 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v23);
  v65 = *(_QWORD *)(v24 - 8);
  v25 = MEMORY[0x1E0C80A78](v24);
  v63 = (char *)&v62 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v64 = (char *)&v62 - v27;
  v28 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 104);
  v75 = a2;
  v76 = v4;
  if ((v28(a2, v7) & 1) != 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove from an empty collection", 37, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x222uLL, 0);
  v62 = v24;
  v30 = v75;
  v29 = v76;
  v31 = a1;
  v32 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v7 + 80))(v77, a1, v75, v7);
  v34 = v33;
  v35 = swift_getAssociatedTypeWitness(0, *(const char **)(v7 + 8), v30, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v36 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 16);
  v37 = v70;
  v70 = v35;
  v36(v37, v34);
  v32(v77, 0);
  v38 = v31;
  v39 = v69;
  (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))(v16, v29, v30);
  v40 = v74;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 184))(v38, v30, v7);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v16, v30);
  v42 = v72;
  v41 = v73;
  v43 = *(void (**)(char *, uint64_t, unint64_t))(v72 + 16);
  v43(v73, v38, AssociatedTypeWitness);
  v44 = v71;
  v43(v71, (uint64_t)v40, AssociatedTypeWitness);
  if (((*(uint64_t (**)(char *, char *, unint64_t, unint64_t))(AssociatedConformanceWitness + 24))(v41, v44, AssociatedTypeWitness, AssociatedConformanceWitness) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v45 = *(void (**)(char *, unint64_t))(v42 + 8);
  v45(v44, AssociatedTypeWitness);
  v45(v73, AssociatedTypeWitness);
  v47 = v66;
  v46 = TupleTypeMetadata2;
  v48 = &v66[*((int *)TupleTypeMetadata2 + 12)];
  v43(v66, v38, AssociatedTypeWitness);
  v49 = *(void (**)(char *, char *, unint64_t))(v42 + 32);
  v49(v48, v74, AssociatedTypeWitness);
  v50 = &v11[*((int *)v46 + 12)];
  v43(v11, (uint64_t)v47, AssociatedTypeWitness);
  v43(v50, (uint64_t)v48, AssociatedTypeWitness);
  v51 = v63;
  v49(v63, v11, AssociatedTypeWitness);
  v45(v50, AssociatedTypeWitness);
  v52 = &v11[*((int *)v46 + 12)];
  v49(v11, v47, AssociatedTypeWitness);
  v49(v52, v48, AssociatedTypeWitness);
  v53 = v62;
  v49(&v51[*(int *)(v62 + 36)], v52, AssociatedTypeWitness);
  v45(v11, AssociatedTypeWitness);
  v55 = v64;
  v54 = v65;
  (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v64, v51, v53);
  v56 = *(void (**)(char *))(v68 + 32);
  v59 = type metadata accessor for EmptyCollection(0, v70, v57, v58);
  swift_getWitnessTable(&protocol conformance descriptor for EmptyCollection<A>, v59, v60);
  v56(v55);
  return (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v55, v53);
}

uint64_t RangeReplaceableCollection._customRemoveLast()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return RangeReplaceableCollection._customRemoveLast()(a1, a2, a3);
}

{
  unint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(*(_QWORD *)(a2 + 8) + 8), a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8)
                                                                                + 56))(a3, 1, 1, AssociatedTypeWitness);
}

void specialized RangeReplaceableCollection.removeAll(keepingCapacity:)(char a1)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String::Index v6;
  Swift::String::Index v7;
  Swift::UInt64 v8;
  unint64_t v9;

  if ((a1 & 1) != 0)
  {
    v2 = *v1;
    v3 = v1[1];
    v4 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0)
      v4 = *v1;
    v5 = 7;
    if (((v3 >> 60) & ((v2 & 0x800000000000000) == 0)) != 0)
      v5 = 11;
    v6._rawBits = v5 | (v4 << 16);
    v7._rawBits = 15;
    v8 = _StringGuts.validateScalarRange_5_7(_:)(v7, v6, v2, v3);
    specialized _StringGuts.replaceSubrange<A>(_:with:)(v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease(v1[1]);
    *v1 = 0;
    v1[1] = 0xE000000000000000;
  }
}

double specialized RangeReplaceableCollection.removeAll(keepingCapacity:)(char a1)
{
  Swift::UInt64 *v1;
  Swift::String::Index v2;
  Swift::String::Index v3;
  double result;

  if ((a1 & 1) != 0)
  {
    v3._rawBits = v1[1];
    if (v3._rawBits >> 14 < *v1 >> 14)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    v2._rawBits = *v1;
    specialized Substring.UnicodeScalarView.replaceSubrange<A>(_:with:)(v2, v3);
  }
  else
  {
    swift_bridgeObjectRelease(v1[3]);
    *(_QWORD *)&result = 15;
    *(_OWORD *)v1 = xmmword_1816ABBE0;
    v1[2] = 0;
    v1[3] = 0xE000000000000000;
  }
  return result;
}

{
  Swift::UInt64 *v1;
  Swift::String::Index v2;
  Swift::String::Index v3;
  double result;

  if ((a1 & 1) != 0)
  {
    v3._rawBits = v1[1];
    if (v3._rawBits >> 14 < *v1 >> 14)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    v2._rawBits = *v1;
    specialized Substring._replaceSubrange<A>(_:with:)(v2, v3);
  }
  else
  {
    swift_bridgeObjectRelease(v1[3]);
    *(_QWORD *)&result = 15;
    *(_OWORD *)v1 = xmmword_1816ABBE0;
    v1[2] = 0;
    v1[3] = 0xE000000000000000;
  }
  return result;
}

void specialized RangeReplaceableCollection.removeAll(keepingCapacity:)()
{
  _DWORD *v0;

  *v0 = 0;
}

Swift::Void __swiftcall RangeReplaceableCollection.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const char *v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  unint64_t AssociatedConformanceWitness;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  const char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, unint64_t);
  uint64_t v34;
  void (*v35)(char *, unint64_t);
  char *v36;
  unint64_t *v37;
  char *v38;
  void (*v39)(char *, char *, unint64_t);
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  void (*v47)(char *);
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  unint64_t *TupleTypeMetadata2;
  char *v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;

  v3 = v2;
  v4 = v1;
  v6 = *(const char **)(v2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v6, v1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, AssociatedTypeWitness, AssociatedTypeWitness, "lower upper ", 0);
  v8 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v61 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v59 = (char *)&v54 - v11;
  v62 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v54 - v16;
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v54 - v19;
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v54 - v21;
  v63 = v6;
  v64 = v4;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v6, v4, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v25 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v24);
  v26 = MEMORY[0x1E0C80A78](v25);
  v27 = MEMORY[0x1E0C80A78](v26);
  if (keepingCapacity)
  {
    v55 = v30;
    v56 = (char *)&v54 - v28;
    v57 = v29;
    v58 = v27;
    v54 = v3;
    v31 = v63;
    v32 = v64;
    (*((void (**)(uint64_t, const char *))v63 + 8))(v64, v63);
    (*((void (**)(uint64_t, const char *))v31 + 9))(v32, v31);
    v33 = *(void (**)(char *, char *, unint64_t))(v62 + 16);
    v33(v17, v22, AssociatedTypeWitness);
    v33(v14, v20, AssociatedTypeWitness);
    if (((*(uint64_t (**)(char *, char *, unint64_t, unint64_t))(AssociatedConformanceWitness
                                                                                        + 24))(v17, v14, AssociatedTypeWitness, AssociatedConformanceWitness) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    v34 = v62;
    v35 = *(void (**)(char *, unint64_t))(v62 + 8);
    v35(v14, AssociatedTypeWitness);
    v35(v17, AssociatedTypeWitness);
    v36 = v59;
    v37 = TupleTypeMetadata2;
    v38 = &v59[*((int *)TupleTypeMetadata2 + 12)];
    v39 = *(void (**)(char *, char *, unint64_t))(v34 + 32);
    v39(v59, v22, AssociatedTypeWitness);
    v39(v38, v20, AssociatedTypeWitness);
    v40 = v61;
    v41 = &v61[*((int *)v37 + 12)];
    v33(v61, v36, AssociatedTypeWitness);
    v33(v41, v38, AssociatedTypeWitness);
    v42 = v55;
    v39(v55, v40, AssociatedTypeWitness);
    v35(v41, AssociatedTypeWitness);
    v43 = &v40[*((int *)v37 + 12)];
    v39(v40, v36, AssociatedTypeWitness);
    v39(v43, v38, AssociatedTypeWitness);
    v44 = v58;
    v39(&v42[*(int *)(v58 + 36)], v43, AssociatedTypeWitness);
    v35(v40, AssociatedTypeWitness);
    v46 = v56;
    v45 = v57;
    (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v56, v42, v44);
    v47 = *(void (**)(char *))(v54 + 32);
    v48 = swift_getAssociatedTypeWitness(255, *((const char **)v63 + 1), v64, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
    v51 = type metadata accessor for EmptyCollection(0, v48, v49, v50);
    swift_getWitnessTable(&protocol conformance descriptor for EmptyCollection<A>, v51, v52);
    v47(v46);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v44);
  }
  else
  {
    v53 = v64;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 8))(v65, v64);
    (*(void (**)(uint64_t, uint64_t))(v3 + 24))(v53, v3);
  }
}

uint64_t RangeReplaceableCollection.removeAll(where:)(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return RangeReplaceableCollection.removeAll(where:)(a1, a2, a3, a4);
}

{
  uint64_t v4;
  const char *v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t);
  const char *v27;
  unint64_t AssociatedConformanceWitness;
  void (*v29)(const char *, unint64_t);
  uint64_t v30;
  unsigned int (*v31)(char *, uint64_t, unint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v36)(char *, char *, unint64_t);
  char *v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(const char *, unint64_t);
  uint64_t (*v49)(char *);
  char *v50;
  const char *v51;

  v45 = a4;
  v39 = a2;
  v49 = a1;
  v51 = *(const char **)(*(_QWORD *)(a4 + 8) + 8);
  v6 = v51;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v51, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v47 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v43 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v39 - v10;
  v14 = type metadata accessor for Optional(0, AssociatedTypeWitness, v12, v13);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v39 - v15;
  v17 = (const char *)swift_getAssociatedTypeWitness(0, v6, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v41 = *((_QWORD *)v17 - 1);
  v18 = MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v39 - v19;
  v21 = MEMORY[0x1E0C80A78](v18);
  v23 = (char *)&v39 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v40 = v24;
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))((char *)&v39 - v25, v42, a3);
  v26 = *(void (**)(uint64_t))(v45 + 24);
  v44 = v23;
  v26(a3);
  v27 = v51;
  (*((void (**)(uint64_t))v51 + 4))(a3);
  v46 = a3;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v27, a3, (uint64_t)v17, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v29 = *(void (**)(const char *, unint64_t))(AssociatedConformanceWitness + 16);
  v50 = v20;
  v51 = v17;
  v29(v17, AssociatedConformanceWitness);
  v30 = v47;
  v31 = *(unsigned int (**)(char *, uint64_t, unint64_t))(v47 + 48);
  if (v31(v16, 1, AssociatedTypeWitness) == 1)
  {
LABEL_2:
    v32 = v40;
    v33 = v42;
    v34 = v46;
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v42, v46);
    (*(void (**)(char *, const char *))(v41 + 8))(v50, v51);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v32 + 32))(v33, v44, v34);
  }
  else
  {
    v48 = v29;
    v36 = *(void (**)(char *, char *, unint64_t))(v30 + 32);
    v36(v11, v16, AssociatedTypeWitness);
    while (1)
    {
      v38 = v49(v11);
      if (v4)
        break;
      if ((v38 & 1) != 0)
      {
        (*(void (**)(char *, unint64_t))(v47 + 8))(v11, AssociatedTypeWitness);
      }
      else
      {
        v37 = v43;
        v36(v43, v11, AssociatedTypeWitness);
        (*(void (**)(char *, uint64_t))(v45 + 64))(v37, v46);
      }
      v48(v51, AssociatedConformanceWitness);
      if (v31(v16, 1, AssociatedTypeWitness) == 1)
        goto LABEL_2;
      v36(v11, v16, AssociatedTypeWitness);
    }
    (*(void (**)(char *, unint64_t))(v47 + 8))(v11, AssociatedTypeWitness);
    (*(void (**)(char *, const char *))(v41 + 8))(v50, v51);
    return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v44, v46);
  }
}

void specialized RangeReplaceableCollection.removeAll(where:)(uint64_t (*a1)(_QWORD *), uint64_t a2, uint64_t a3, char *a4)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  Swift::String_optional v10;
  uint64_t countAndFlagsBits;
  unint64_t object;
  uint64_t v13;
  Swift::String_optional v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  _QWORD v25[6];
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;

  v7 = v4[1];
  v8 = 0xE000000000000000;
  v9 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0)
    v9 = *v4 & 0xFFFFFFFFFFFFLL;
  v25[2] = *v4;
  v25[3] = v7;
  v25[4] = 0;
  v25[5] = v9;
  v26 = 0;
  v28 = v7;
  swift_bridgeObjectRetain(v7, a2, a3, a4);
  v10 = String.Iterator.next()();
  if (v10.value._object)
  {
    countAndFlagsBits = v10.value._countAndFlagsBits;
    object = (unint64_t)v10.value._object;
    while (1)
    {
      v25[0] = countAndFlagsBits;
      v25[1] = object;
      v15 = a1(v25);
      if (v5)
      {
        swift_bridgeObjectRelease(v28);
        swift_bridgeObjectRelease(object);
        swift_bridgeObjectRelease(v27);
        return;
      }
      if ((v15 & 1) == 0)
      {
        v16 = v27;
        v17 = HIBYTE(v27) & 0xF;
        if ((v27 & 0x2000000000000000) == 0)
          v17 = v26 & 0xFFFFFFFFFFFFLL;
        if (!v17 && (v26 & ~v27 & 0x2000000000000000) == 0)
        {
          swift_bridgeObjectRelease(v27);
          v26 = countAndFlagsBits;
          v27 = object;
          goto LABEL_10;
        }
        if ((object & 0x2000000000000000 & v27) != 0)
        {
          v18 = specialized _SmallString.init(_:appending:)(v26, v27, countAndFlagsBits, object);
          if ((v20 & 1) == 0)
          {
            v21 = v18;
            v22 = v19;
            swift_bridgeObjectRelease(object);
            swift_bridgeObjectRelease(v16);
            v26 = v21;
            v27 = v22;
            goto LABEL_10;
          }
        }
        if ((object & 0x2000000000000000) != 0)
          v13 = HIBYTE(object) & 0xF;
        else
          v13 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
        _StringGuts.append(_:)(countAndFlagsBits, object, 0, v13);
      }
      swift_bridgeObjectRelease(object);
LABEL_10:
      v14 = String.Iterator.next()();
      countAndFlagsBits = v14.value._countAndFlagsBits;
      object = (unint64_t)v14.value._object;
      if (!v14.value._object)
      {
        v23 = v26;
        v8 = v27;
        goto LABEL_23;
      }
    }
  }
  v23 = 0;
LABEL_23:
  swift_bridgeObjectRelease_n(v28, 2);
  *v24 = v23;
  v24[1] = v8;
}

{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  _QWORD *v13;
  unsigned int value;
  Swift::Int scalarLength;
  Swift::tuple_Unicode_Scalar_scalarLength_Int v16;
  unsigned int v17;
  Swift::Int v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD v33[2];
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v36 = a2;
  v7 = *v4;
  v6 = v4[1];
  v8 = 0xE000000000000000;
  v34 = 0;
  v35 = 0xE000000000000000;
  if ((v6 & 0x2000000000000000) != 0)
    v9 = HIBYTE(v6) & 0xF;
  else
    v9 = v7 & 0xFFFFFFFFFFFFLL;
  if (!v9)
  {
    v30 = 0;
    goto LABEL_27;
  }
  swift_bridgeObjectRetain(v6, a2, a3, a4);
  for (i = 0; i < v9; i += v18)
  {
    if ((v6 & 0x1000000000000000) != 0)
    {
      v16 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(i << 16));
      scalarLength = v16.scalarLength;
      value = v16._0._value;
    }
    else
    {
      if ((v6 & 0x2000000000000000) != 0)
      {
        v33[0] = v7;
        v33[1] = v6 & 0xFFFFFFFFFFFFFFLL;
        v13 = v33;
      }
      else
      {
        v13 = (_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
        if ((v7 & 0x1000000000000000) == 0)
          v13 = _StringObject.sharedUTF8.getter(v7, v6);
      }
      value = _decodeScalar(_:startingAt:)((uint64_t)v13, v10, i);
    }
    v17 = value;
    v18 = scalarLength;
    LODWORD(v33[0]) = value;
    v19 = a1(v33);
    if (v5)
    {
      swift_bridgeObjectRelease(v6);
      swift_bridgeObjectRelease(v35);
      return;
    }
    if ((v19 & 1) == 0)
    {
      v21 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v17);
      v22 = v20;
      v23 = v35;
      if ((v35 & 0x2000000000000000) == 0)
      {
        if ((v20 & 0x2000000000000000) != 0)
LABEL_24:
          v12 = HIBYTE(v22) & 0xF;
        else
LABEL_6:
          v12 = v21 & 0xFFFFFFFFFFFFLL;
        _StringGuts.append(_:)(v21, v22, 0, v12);
        swift_bridgeObjectRelease(v22);
        continue;
      }
      if ((v20 & 0x2000000000000000) == 0)
        goto LABEL_6;
      v24 = specialized _SmallString.init(_:appending:)(v34, v35, v21, v20);
      if ((v26 & 1) != 0)
        goto LABEL_24;
      v27 = v24;
      v28 = v22;
      v29 = v25;
      swift_bridgeObjectRelease(v28);
      swift_bridgeObjectRelease(v23);
      v34 = v27;
      v35 = v29;
    }
  }
  swift_bridgeObjectRelease(v6);
  v4 = (uint64_t *)v31;
  v6 = *(_QWORD *)(v31 + 8);
  v30 = v34;
  v8 = v35;
LABEL_27:
  swift_bridgeObjectRelease(v6);
  *v4 = v30;
  v4[1] = v8;
}

void specialized RangeReplaceableCollection.removeAll(where:)(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3, char *a4)
{
  unint64_t *v4;
  uint64_t v5;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  Swift::UInt64 v13;
  Swift::UInt64 rawBits;
  Swift::UInt64 v15;
  uint64_t v16;
  Swift::UInt64 *v17;
  Swift::String::Index v18;
  Swift::String::Index v19;
  Swift::String::Index v20;
  Swift::String::Index v21;
  Swift::UInt64 v22;
  id v23;
  int v24;
  Swift::String::Index v25;
  unsigned __int8 *v26;
  Swift::UInt64 v27;
  int v28;
  int value;
  int v30;
  unsigned int v31;
  char v32;
  Swift::String::Index v33;
  Swift::String::Index v34;
  Swift::String::Index v35;
  uint64_t v36;
  Swift::UInt64 *v37;
  uint64_t (*v38)(uint64_t *);
  uint64_t v39;
  uint64_t v40;
  Swift::String::Index v41[2];
  Swift::UInt64 v42;
  unint64_t v43;
  uint64_t v44;

  v8 = *v4;
  v9 = v4[1];
  v11 = v4[2];
  v10 = v4[3];
  *(_OWORD *)&v41[0]._rawBits = xmmword_1816ABBE0;
  v12 = 0xE000000000000000;
  v42 = 0;
  v43 = 0xE000000000000000;
  swift_bridgeObjectRetain(v10, a2, a3, a4);
  if ((v8 ^ v9) >= 0x4000)
  {
    v38 = a1;
    v44 = a2;
    v18._rawBits = v8;
    do
    {
      v19._rawBits = v18._rawBits;
      v20._rawBits = _StringGuts.validateScalarIndex(_:in:)(v19, v8, v9, v11, v10)._rawBits;
      if ((v10 & 0x1000000000000000) != 0)
      {
        value = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v20._rawBits & 0xFFFFFFFFFFFF0000))._0._value;
        v35._rawBits = _StringGuts.validateScalarIndex(_:)(v18)._rawBits;
        v18._rawBits = String.UnicodeScalarView._foreignIndex(after:)(v35)._rawBits;
      }
      else
      {
        v22 = v20._rawBits >> 16;
        if ((v10 & 0x2000000000000000) != 0)
        {
          v39 = v11;
          v40 = v10 & 0xFFFFFFFFFFFFFFLL;
          value = _decodeScalar(_:startingAt:)((uint64_t)&v39, v21._rawBits, v22);
          v27 = _StringGuts.validateScalarIndex(_:)(v18)._rawBits >> 16;
          v39 = v11;
          v40 = v10 & 0xFFFFFFFFFFFFFFLL;
          v28 = *((unsigned __int8 *)&v39 + v27);
        }
        else
        {
          v23 = (id)((v10 & 0xFFFFFFFFFFFFFFFLL) + 32);
          if ((v11 & 0x1000000000000000) == 0)
            v23 = _StringObject.sharedUTF8.getter(v11, v10);
          v24 = _decodeScalar(_:startingAt:)((uint64_t)v23, v21._rawBits, v22);
          v25._rawBits = _StringGuts.validateScalarIndex(_:)(v18)._rawBits;
          v26 = (unsigned __int8 *)((v10 & 0xFFFFFFFFFFFFFFFLL) + 32);
          if ((v11 & 0x1000000000000000) == 0)
            v26 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v11, v10);
          v27 = v25._rawBits >> 16;
          v28 = v26[v25._rawBits >> 16];
          value = v24;
        }
        v30 = (char)v28;
        v31 = __clz(v28 ^ 0xFF) - 24;
        if (v30 >= 0)
          LOBYTE(v31) = 1;
        v18._rawBits = ((v27 + v31) << 16) | 5;
      }
      LODWORD(v39) = value;
      v32 = v38(&v39);
      if (v5)
      {
        v36 = v43;
        swift_bridgeObjectRelease(v10);
        swift_bridgeObjectRelease(v36);
        return;
      }
      if ((v32 & 1) == 0)
      {
        v33._rawBits = v41[1]._rawBits;
        v34._rawBits = v41[1]._rawBits;
        specialized Substring.UnicodeScalarView.replaceSubrange<A>(_:with:)(v33, v34);
      }
    }
    while ((v18._rawBits ^ v9) >= 0x4000);
    v17 = v37;
    v16 = v37[3];
    rawBits = v41[0]._rawBits;
    v15 = v41[1]._rawBits;
    v13 = v42;
    v12 = v43;
  }
  else
  {
    v13 = 0;
    rawBits = 15;
    v15 = 7;
    v16 = v10;
    v17 = v37;
  }
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v16);
  *v17 = rawBits;
  v17[1] = v15;
  v17[2] = v13;
  v17[3] = v12;
}

void specialized RangeReplaceableCollection.removeAll(where:)(uint64_t (*a1)(_QWORD *), uint64_t a2)
{
  unint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  Swift::UInt64 rawBits;
  Swift::UInt64 v11;
  Swift::String::Index v12;
  unint64_t v13;
  Swift::UInt64 v14;
  Swift::UInt64 v15;
  char v16;
  Swift::String::Index v17;
  Swift::String::Index v18;
  _QWORD v20[2];
  Swift::String::Index v21[2];
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = a2;
  v4 = *v2;
  v5 = v2[1];
  v7 = v2[2];
  v6 = v2[3];
  *(_OWORD *)&v21[0]._rawBits = xmmword_1816ABBE0;
  v8 = 0xE000000000000000;
  v22 = 0;
  v23 = 0xE000000000000000;
  if ((v4 ^ v5) >= 0x4000)
  {
    v12._rawBits = v4;
    while (1)
    {
      v13 = Substring.subscript.getter(v12._rawBits, v4, v5, v7, v6);
      v15 = v14;
      v12._rawBits = Substring.index(after:)(v12)._rawBits;
      v20[0] = v13;
      v20[1] = v15;
      v16 = a1(v20);
      if (v3)
        break;
      if ((v16 & 1) == 0)
      {
        v17._rawBits = v21[1]._rawBits;
        v18._rawBits = v21[1]._rawBits;
        specialized Substring._replaceSubrange<A>(_:with:)(v17, v18, v13, v15);
      }
      swift_bridgeObjectRelease(v15);
      if ((v12._rawBits ^ v5) < 0x4000)
      {
        rawBits = v21[0]._rawBits;
        v11 = v21[1]._rawBits;
        v9 = v22;
        v8 = v23;
        goto LABEL_9;
      }
    }
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v23);
  }
  else
  {
    v9 = 0;
    rawBits = 15;
    v11 = 7;
LABEL_9:
    swift_bridgeObjectRelease(v6);
    *v2 = rawBits;
    v2[1] = v11;
    v2[2] = v9;
    v2[3] = v8;
  }
}

uint64_t specialized RangeReplaceableCollection.removeAll(where:)(uint64_t result)
{
  unsigned int *v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t (*v4)(char *);
  unsigned int v5;
  BOOL v6;
  char v7;

  v3 = *v1;
  if (*v1)
  {
    v4 = (uint64_t (*)(char *))result;
    v5 = 0;
    while (1)
    {
      v7 = v3 - 1;
      result = v4(&v7);
      if (v2)
        break;
      if ((result & 1) == 0)
      {
        if (HIBYTE(v5))
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/ValidUTF8Buffer.swift", 27, 2, 0xA7uLL, 0);
        v5 |= v3 << (-(__clz(v5) & 0x18) & 0x18);
      }
      v6 = v3 >= 0x100;
      v3 >>= 8;
      if (!v6)
        goto LABEL_10;
    }
  }
  else
  {
    v5 = 0;
LABEL_10:
    *v1 = v5;
  }
  return result;
}

uint64_t Repeated.init(_repeating:count:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  char *v7;

  if (a2 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Repetition count should be non-negative", 39, 2, "Swift/Repeat.swift", 18, 2, 0x28uLL, 0);
  *a5 = a2;
  v7 = (char *)a5 + *(int *)(type metadata accessor for Repeated(0, a3, a3, a4) + 28);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(v7, a1, a3);
}

uint64_t RangeReplaceableCollection.replaceSubrange<A, B>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  const char *v13;
  unint64_t AssociatedTypeWitness;
  unint64_t AssociatedConformanceWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v24 = a4;
  v25 = a7;
  v23 = a2;
  v13 = *(const char **)(a6 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v13, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a8, a5, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for RangeExpression, (uint64_t)&associated conformance descriptor for RangeExpression.RangeExpression.Bound: Comparable);
  v17 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v16);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v22 - v19;
  (*(void (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(a8 + 24))(v8, a3, v13, a5, a8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 32))(v20, v23, v24, v25, a3, a6);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, v17);
}

uint64_t RangeReplaceableCollection.removeSubrange<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  const char *v10;
  unint64_t AssociatedTypeWitness;
  unint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v19;

  v10 = *(const char **)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v10, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for RangeExpression, (uint64_t)&associated conformance descriptor for RangeExpression.RangeExpression.Bound: Comparable);
  v14 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v13);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v19 - v16;
  (*(void (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(a5 + 24))(v5, a2, v10, a3, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(a4 + 104))(v17, a2, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
}

uint64_t specialized RangeReplaceableCollection<>._customRemoveLast()()
{
  Swift::String::Index *v0;
  unint64_t rawBits;
  unint64_t v2;
  Swift::UInt64 v3;
  unint64_t v4;
  unint64_t v5;
  Swift::String::Index v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String::Index v10;
  Swift::String::Index v11;
  Swift::String::Index v12;
  Swift::UInt64 v13;
  uint64_t v14;
  Swift::UInt64 v15;
  uint64_t v16;
  Swift::UInt64 v17;
  char *v18;
  char *v19;

  rawBits = v0->_rawBits;
  v2 = v0[1]._rawBits;
  v3 = v0->_rawBits >> 14;
  if (v3 == v2 >> 14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x331uLL, 0);
  v5 = v0[2]._rawBits;
  v4 = v0[3]._rawBits;
  v6._rawBits = Substring.index(before:)(v0[1])._rawBits;
  v7 = Substring.subscript.getter(v6._rawBits, rawBits, v2, v5, v4);
  v9 = v8;
  v10._rawBits = Substring.index(before:)((Swift::String::Index)v2)._rawBits;
  if (v3 > v10._rawBits >> 14)
  {
    swift_bridgeObjectRelease(v9);
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  v11._rawBits = v10._rawBits;
  v12._rawBits = rawBits;
  v13 = specialized Substring.subscript.getter(v12, v11, rawBits, v2, v5, v4);
  v15 = v14;
  v17 = v16;
  v19 = v18;
  swift_bridgeObjectRetain((unint64_t)v18, v14, v16, v18);
  swift_bridgeObjectRelease(v4);
  v0->_rawBits = v13;
  v0[1]._rawBits = v15;
  v0[2]._rawBits = v17;
  v0[3]._rawBits = (Swift::UInt64)v19;
  return v7;
}

{
  unint64_t *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  unint64_t v3;
  unint64_t v4;
  Swift::String::Index v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unsigned int v10;
  Swift::String::Index v11;
  Swift::UInt64 rawBits;
  char *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  int v23;
  Swift::UInt64 v24;
  Swift::String::Index v25;
  Swift::String::Index v26;
  Swift::UInt64 v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD v31[2];

  v2 = *v0;
  v1 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v5._rawBits = v1;
  v6 = specialized BidirectionalCollection.last.getter(*v0, v5, v3, v4);
  if ((v6 & 0x100000000) != 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x331uLL, 0);
  v10 = v6;
  swift_bridgeObjectRetain(v4, v7, v8, v9);
  v11._rawBits = _StringGuts.validateInclusiveScalarIndex(_:)((Swift::String::Index)v1)._rawBits;
  if (!(v11._rawBits >> 14))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUnicodeScalarView.swift", 35, 2, 0x84uLL, 0);
  rawBits = v11._rawBits;
  if ((v4 & 0x1000000000000000) != 0)
  {
    v24 = String.UnicodeScalarView._foreignIndex(before:)(v11)._rawBits;
    swift_bridgeObjectRelease(v4);
  }
  else
  {
    if ((v4 & 0x2000000000000000) != 0)
    {
      v31[0] = v3;
      v31[1] = v4 & 0xFFFFFFFFFFFFFFLL;
      swift_bridgeObjectRelease(v4);
      v20 = (char *)v31 + (rawBits >> 16);
      if ((*(v20 - 1) & 0xC0) == 0x80)
      {
        v21 = 0;
        v22 = v20 - 2;
        do
          v23 = v22[v21--] & 0xC0;
        while (v23 == 128);
        v19 = 1 - v21;
      }
      else
      {
        v19 = 1;
      }
    }
    else
    {
      if ((v3 & 0x1000000000000000) != 0)
        v13 = (char *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v13 = (char *)_StringObject.sharedUTF8.getter(v3, v4);
      v14 = 0;
      do
        v15 = v13[(rawBits >> 16) - 1 + v14--] & 0xC0;
      while (v15 == 128);
      swift_bridgeObjectRelease(v4);
      v19 = -v14;
    }
    v24 = (rawBits - (v19 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
  }
  if (v24 >> 14 < v2 >> 14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  swift_bridgeObjectRetain(v4, v16, v17, v18);
  v25._rawBits = v2;
  v26._rawBits = v24;
  v27 = _StringGuts.validateScalarRange(_:in:)(v25, v26, v2, v1, v3, v4);
  v29 = v28;
  swift_bridgeObjectRelease(v4);
  *v0 = v27;
  v0[1] = v29;
  v0[2] = v3;
  v0[3] = v4;
  LOBYTE(v31[0]) = 0;
  return v10;
}

uint64_t RangeReplaceableCollection<>._customRemoveLast()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unsigned int (*v40)(char *, uint64_t, unint64_t);
  void (*v41)(uint64_t, char *, unint64_t);
  void (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  void (**v47)(char *, uint64_t);
  char *v48;
  uint64_t v49;
  void (*v50)(char *, unint64_t);
  void (*v51)(char *, char *, unint64_t);
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  unint64_t *v56;
  char *v57;
  void (*v58)(char *, char *, unint64_t);
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  void (*v69)(uint64_t, char *, unint64_t);
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t *TupleTypeMetadata2;
  uint64_t v78;
  char *v79;
  unint64_t AssociatedConformanceWitness;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  void (**v90)(char *, uint64_t);
  uint64_t v91;

  v90 = (void (**)(char *, uint64_t))a2;
  v78 = a3;
  v4 = *(_QWORD *)(a2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)v4, a1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, AssociatedTypeWitness, AssociatedTypeWitness, "lower upper ", 0);
  v6 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v72 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v6);
  v71 = (char *)&v69 - v9;
  v88 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v82 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v81 = (char *)&v69 - v13;
  v14 = MEMORY[0x1E0C80A78](v12);
  v79 = (char *)&v69 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v86 = (char *)&v69 - v17;
  MEMORY[0x1E0C80A78](v16);
  v84 = (char *)&v69 - v18;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v4, a1, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v20 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v19);
  v75 = *(_QWORD *)(v20 - 8);
  v76 = v20;
  v21 = MEMORY[0x1E0C80A78](v20);
  v73 = (char *)&v69 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v21);
  v74 = (char *)&v69 - v24;
  v25 = *(_QWORD *)(a1 - 8);
  v26 = MEMORY[0x1E0C80A78](v23);
  v28 = (char *)&v69 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26);
  v87 = (char *)&v69 - v29;
  v83 = v4;
  v30 = swift_getAssociatedTypeWitness(255, *(const char **)(v4 + 8), a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v33 = type metadata accessor for Optional(0, v30, v31, v32);
  v34 = MEMORY[0x1E0C80A78](v33);
  v36 = (char *)&v69 - v35;
  v37 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v34);
  v39 = (char *)&v69 - v38;
  BidirectionalCollection.last.getter(a1, (uint64_t)v90, (uint64_t)v36);
  v85 = v37;
  v40 = *(unsigned int (**)(char *, uint64_t, unint64_t))(v37 + 48);
  v89 = v30;
  if (v40(v36, 1, v30) == 1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x331uLL, 0);
  v41 = *(void (**)(uint64_t, char *, unint64_t))(v85 + 32);
  v70 = v39;
  v69 = v41;
  v41((uint64_t)v39, v36, v89);
  v42 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 16);
  v43 = v91;
  v42(v87, v91, a1);
  v44 = v83;
  v45 = v84;
  (*(void (**)(uint64_t, uint64_t))(v83 + 64))(a1, v83);
  v42(v28, v43, a1);
  v46 = v79;
  (*(void (**)(uint64_t, uint64_t))(v44 + 72))(a1, v44);
  v47 = *(void (***)(char *, uint64_t))(v25 + 8);
  ((void (*)(uint64_t, uint64_t))v47)(v43, a1);
  v48 = v86;
  v90[4](v46, a1);
  v49 = v88;
  v50 = *(void (**)(char *, unint64_t))(v88 + 8);
  v50(v46, AssociatedTypeWitness);
  v90 = v47;
  ((void (*)(char *, uint64_t))v47)(v28, a1);
  v51 = *(void (**)(char *, char *, unint64_t))(v49 + 16);
  v52 = v81;
  v51(v81, v45, AssociatedTypeWitness);
  v53 = v82;
  v51(v82, v48, AssociatedTypeWitness);
  if (((*(uint64_t (**)(char *, char *, unint64_t))(AssociatedConformanceWitness + 24))(v52, v53, AssociatedTypeWitness) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v50(v53, AssociatedTypeWitness);
  v50(v52, AssociatedTypeWitness);
  v54 = v71;
  v55 = v72;
  v56 = TupleTypeMetadata2;
  v57 = &v71[*((int *)TupleTypeMetadata2 + 12)];
  v58 = *(void (**)(char *, char *, unint64_t))(v88 + 32);
  v58(v71, v84, AssociatedTypeWitness);
  v58(v57, v86, AssociatedTypeWitness);
  v59 = &v55[*((int *)v56 + 12)];
  v51(v55, v54, AssociatedTypeWitness);
  v51(v59, v57, AssociatedTypeWitness);
  v60 = v73;
  v58(v73, v55, AssociatedTypeWitness);
  v50(v59, AssociatedTypeWitness);
  v61 = &v55[*((int *)v56 + 12)];
  v58(v55, v54, AssociatedTypeWitness);
  v58(v61, v57, AssociatedTypeWitness);
  v62 = v76;
  v58(&v60[*(int *)(v76 + 36)], v61, AssociatedTypeWitness);
  v50(v55, AssociatedTypeWitness);
  v64 = v74;
  v63 = v75;
  (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v74, v60, v62);
  v65 = v87;
  (*(void (**)(char *, uint64_t))(v83 + 88))(v64, a1);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v64, v62);
  ((void (*)(char *, uint64_t))v90)(v65, a1);
  v66 = v78;
  v67 = v89;
  v69(v78, v70, v89);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, unint64_t))(v85 + 56))(v66, 0, 1, v67);
}

uint64_t RangeReplaceableCollection<>.removeLast(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return RangeReplaceableCollection<>.removeLast(_:)(a1, a2, a3, a4, 0x37CuLL, 0x383uLL);
}

{
  return RangeReplaceableCollection<>.removeLast(_:)(a1, a2, a3, a4, 0x3C6uLL, 0x3CDuLL);
}

uint64_t RangeReplaceableCollection<>.popLast()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v22;
  void (*v23)(char *, unint64_t);
  unint64_t v24;
  char *v25;
  void (*v26)(char *, char *, unint64_t);
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t AssociatedTypeWitness;
  uint64_t v32;
  char *v33;

  v32 = a3;
  v33 = a4;
  v30 = a2;
  v5 = *(_QWORD *)(a2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v5, a1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v28 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v29 = (char *)&v28 - v9;
  v10 = swift_getAssociatedTypeWitness(255, *(const char **)(v5 + 8), a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v13 = type metadata accessor for Optional(0, v10, v11, v12);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v28 - v16;
  v18 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v28 - v19;
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v5 + 104))(a1, v5) & 1) != 0)
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, unint64_t))(v18 + 56))(v33, 1, 1, v10);
  (*(void (**)(uint64_t))(v32 + 112))(a1);
  if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v18 + 48))(v17, 1, v10) == 1)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    (*(void (**)(uint64_t, uint64_t))(v5 + 72))(a1, v5);
    v22 = v29;
    (*(void (**)(char *, uint64_t))(v30 + 32))(v8, a1);
    v23 = *(void (**)(char *, unint64_t))(v28 + 8);
    v24 = AssociatedTypeWitness;
    v23(v8, AssociatedTypeWitness);
    v25 = v33;
    (*(void (**)(char *, uint64_t))(v32 + 96))(v22, a1);
    v23(v22, v24);
    return (*(uint64_t (**)(char *, _QWORD, uint64_t, unint64_t))(v18 + 56))(v25, 0, 1, v10);
  }
  else
  {
    v26 = *(void (**)(char *, char *, unint64_t))(v18 + 32);
    v26(v20, v17, v10);
    v27 = v33;
    v26(v33, v20, v10);
    return (*(uint64_t (**)(char *, _QWORD, uint64_t, unint64_t))(v18 + 56))(v27, 0, 1, v10);
  }
}

uint64_t RangeReplaceableCollection<>.removeLast()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void (*v20)(uint64_t, unint64_t);
  uint64_t v21;
  void (*v22)(char *, unint64_t);
  unint64_t v23;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t AssociatedTypeWitness;
  uint64_t v30;

  v26 = a4;
  v30 = a5;
  v28 = a2;
  v7 = *(_QWORD *)(a2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v7, a1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v27 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v25 - v11;
  v13 = swift_getAssociatedTypeWitness(255, *(const char **)(v7 + 8), a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v16 = type metadata accessor for Optional(0, v13, v14, v15);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v25 - v18;
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v7 + 104))(a1, v7) & 1) != 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove last element from an empty collection", 50, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, v26, 0);
  v20 = *(void (**)(uint64_t, unint64_t))(a3 + 112);
  v26 = a3;
  v20(a1, a3);
  v21 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v21 + 48))(v19, 1, v13) != 1)
    return (*(uint64_t (**)(uint64_t, char *, unint64_t))(v21 + 32))(v30, v19, v13);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  (*(void (**)(uint64_t, uint64_t))(v7 + 72))(a1, v7);
  (*(void (**)(char *, uint64_t))(v28 + 32))(v10, a1);
  v22 = *(void (**)(char *, unint64_t))(v27 + 8);
  v23 = AssociatedTypeWitness;
  v22(v10, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v26 + 96))(v12, a1);
  return ((uint64_t (*)(char *, unint64_t))v22)(v12, v23);
}

uint64_t RangeReplaceableCollection<>.removeLast(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  unint64_t v6;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t result;
  uint64_t v37;
  char *v38;
  uint64_t (*v39)(uint64_t, uint64_t);
  void (*v40)(char *, unint64_t);
  void (*v41)(char *, char *, unint64_t);
  void (*v42)(char *, char *, unint64_t);
  char *v43;
  char *v44;
  unint64_t *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  unint64_t *TupleTypeMetadata2;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  unint64_t AssociatedConformanceWitness;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;

  v57 = a6;
  v69 = a4;
  v70 = a5;
  v68 = a3;
  v9 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)v9, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, AssociatedTypeWitness, AssociatedTypeWitness, "lower upper ", 0);
  v11 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v64 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v59 = (char *)&v55 - v13;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v9, a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v15 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v14);
  v62 = *(_QWORD *)(v15 - 8);
  v63 = v15;
  v16 = MEMORY[0x1E0C80A78](v15);
  v58 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v60 = (char *)&v55 - v18;
  v21 = type metadata accessor for Optional(0, AssociatedTypeWitness, v19, v20);
  v55 = *(_QWORD *)(v21 - 8);
  v56 = v21;
  v22 = MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v55 - v23;
  v25 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v26 = MEMORY[0x1E0C80A78](v22);
  v66 = (char *)&v55 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x1E0C80A78](v26);
  v65 = (char *)&v55 - v29;
  v30 = MEMORY[0x1E0C80A78](v28);
  v32 = (char *)&v55 - v31;
  v33 = MEMORY[0x1E0C80A78](v30);
  v35 = (char *)&v55 - v34;
  result = MEMORY[0x1E0C80A78](v33);
  v38 = (char *)&v55 - v37;
  if (a1)
  {
    if (a1 < 0)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Number of elements to remove should be non-negative", 51, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, v70, 0);
    v39 = *(uint64_t (**)(uint64_t, uint64_t))(v69 + 120);
    v70 = v6;
    result = v39(a1, a2);
    if ((result & 1) == 0)
    {
      (*(void (**)(uint64_t, uint64_t))(v9 + 72))(a2, v9);
      (*(void (**)(uint64_t, uint64_t))(v9 + 64))(a2, v9);
      (*(void (**)(char *, uint64_t, char *, uint64_t))(v68 + 56))(v38, -a1, v32, a2);
      v40 = *(void (**)(char *, unint64_t))(v25 + 8);
      v40(v32, AssociatedTypeWitness);
      if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v25 + 48))(v24, 1, AssociatedTypeWitness) == 1)
      {
        (*(void (**)(char *, uint64_t))(v55 + 8))(v24, v56);
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove more items from a collection than it contains", 58, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, v57, 0);
      }
      v41 = *(void (**)(char *, char *, unint64_t))(v25 + 32);
      v41(v35, v24, AssociatedTypeWitness);
      v42 = *(void (**)(char *, char *, unint64_t))(v25 + 16);
      v43 = v65;
      v42(v65, v35, AssociatedTypeWitness);
      v44 = v66;
      v42(v66, v38, AssociatedTypeWitness);
      if (((*(uint64_t (**)(char *, char *, unint64_t))(AssociatedConformanceWitness + 24))(v43, v44, AssociatedTypeWitness) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
      v40(v44, AssociatedTypeWitness);
      v40(v43, AssociatedTypeWitness);
      v68 = a2;
      v45 = TupleTypeMetadata2;
      v46 = v59;
      v47 = &v59[*((int *)TupleTypeMetadata2 + 12)];
      v41(v59, v35, AssociatedTypeWitness);
      v41(v47, v38, AssociatedTypeWitness);
      v48 = v64;
      v49 = &v64[*((int *)v45 + 12)];
      v42(v64, v46, AssociatedTypeWitness);
      v42(v49, v47, AssociatedTypeWitness);
      v50 = v58;
      v41(v58, v48, AssociatedTypeWitness);
      v40(v49, AssociatedTypeWitness);
      v51 = &v48[*((int *)v45 + 12)];
      v41(v48, v46, AssociatedTypeWitness);
      v41(v51, v47, AssociatedTypeWitness);
      v52 = v63;
      v41(&v50[*(int *)(v63 + 36)], v51, AssociatedTypeWitness);
      v40(v48, AssociatedTypeWitness);
      v53 = v62;
      v54 = v60;
      (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v60, v50, v52);
      (*(void (**)(char *, uint64_t))(v69 + 104))(v54, v68);
      return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v54, v52);
    }
  }
  return result;
}

uint64_t static RangeReplaceableCollection.+ infix<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v13 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(*(_QWORD *)(v16 - 8) + 16))(a7);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2, a4);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 72))(v15, a4, a6, a3, a5);
}

{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v13 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(*(_QWORD *)(v16 - 8) + 16))(a7);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2, a4);
  return (*(uint64_t (**)(char *, uint64_t, _QWORD, uint64_t, uint64_t))(a5 + 72))(v15, a4, *(_QWORD *)(*(_QWORD *)(a6 + 8) + 8), a3, a5);
}

uint64_t static RangeReplaceableCollection.+ infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t result;
  void (*v27)(char *, uint64_t, uint64_t, uint64_t, uint64_t);
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;

  v32 = *(_QWORD *)(a3 - 8);
  v12 = MEMORY[0x1E0C80A78](a1);
  v33 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(v17 + 24))(v18, v17);
  v19 = *(_QWORD *)(a5 + 8);
  v20 = *(uint64_t (**)(uint64_t, uint64_t))(v19 + 112);
  v34 = a2;
  v21 = v20(a3, v19);
  v22 = *(uint64_t (**)(uint64_t, uint64_t))(a6 + 40);
  v31 = a1;
  v23 = a6;
  v24 = v22(a4, a6);
  v25 = __OFADD__(v21, v24);
  result = v21 + v24;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a5 + 40))(result, a3, a5);
    (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v16, v31, a4);
    v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 72);
    v27(v16, a4, v23, a3, a5);
    v28 = v33;
    (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v33, v34, a3);
    return ((uint64_t (*)(char *, uint64_t, _QWORD, uint64_t, uint64_t))v27)(v28, a3, *(_QWORD *)(v19 + 8), a3, a5);
  }
  return result;
}

uint64_t static RangeReplaceableCollection.+= infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v12 + 16))(v11);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 72))(v11, a4, a6, a3, a5);
}

uint64_t RangeReplaceableCollection.filter(_:)@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  void (*v22)(uint64_t);
  unint64_t AssociatedConformanceWitness;
  void (*v24)(unint64_t, unint64_t);
  unint64_t v25;
  void (*v26)(unint64_t, unint64_t);
  uint64_t v27;
  unsigned int (*v28)(char *, uint64_t, unint64_t);
  unint64_t v29;
  uint64_t (*v31)(char *);
  void (*v32)(char *, char *, unint64_t);
  char v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t (*v37)(char *);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(char *, uint64_t, unint64_t);
  void (*v45)(unint64_t, unint64_t);
  uint64_t v46;
  uint64_t v47;
  char *v48;

  v42 = a4;
  v46 = a2;
  v37 = a1;
  v8 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v8, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v43 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v40 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v36 - v12;
  v16 = type metadata accessor for Optional(0, AssociatedTypeWitness, v14, v15);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v36 - v17;
  v19 = swift_getAssociatedTypeWitness(0, (const char *)v8, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v38 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v36 - v20;
  v22 = *(void (**)(uint64_t))(v42 + 24);
  v47 = a5;
  v22(a3);
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(a3, v8);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v8, a3, v19, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v24 = *(void (**)(unint64_t, unint64_t))(AssociatedConformanceWitness + 16);
  v48 = v21;
  v41 = v19;
  v25 = v19;
  v26 = v24;
  v24(v25, AssociatedConformanceWitness);
  v27 = v43;
  v28 = *(unsigned int (**)(char *, uint64_t, unint64_t))(v43 + 48);
  if (v28(v18, 1, AssociatedTypeWitness) == 1)
  {
    v29 = v41;
    return (*(uint64_t (**)(char *, unint64_t))(v38 + 8))(v48, v29);
  }
  else
  {
    v44 = v28;
    v45 = v26;
    v31 = v37;
    v39 = a3;
    v32 = *(void (**)(char *, char *, unint64_t))(v27 + 32);
    v29 = v41;
    v32(v13, v18, AssociatedTypeWitness);
    while (1)
    {
      v33 = v31(v13);
      if (v5)
        break;
      if ((v33 & 1) != 0)
      {
        v34 = v40;
        v32(v40, v13, AssociatedTypeWitness);
        v35 = v34;
        v29 = v41;
        (*(void (**)(char *, uint64_t))(v42 + 64))(v35, v39);
      }
      else
      {
        (*(void (**)(char *, unint64_t))(v43 + 8))(v13, AssociatedTypeWitness);
      }
      v45(v29, AssociatedConformanceWitness);
      if (v44(v18, 1, AssociatedTypeWitness) == 1)
        return (*(uint64_t (**)(char *, unint64_t))(v38 + 8))(v48, v29);
      v32(v13, v18, AssociatedTypeWitness);
    }
    (*(void (**)(char *, unint64_t))(v43 + 8))(v13, AssociatedTypeWitness);
    (*(void (**)(char *, unint64_t))(v38 + 8))(v48, v29);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 8))(v47, v39);
  }
}

uint64_t RangeReplaceableCollection.removeSubranges(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, unint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  unint64_t AssociatedTypeWitness;
  uint64_t v43;
  uint64_t v44;

  v6 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v6, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.SubSequence);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v41 = (char *)&v35 - v7;
  v8 = swift_getAssociatedTypeWitness(255, (const char *)v6, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v6, a2, v8, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v11 = type metadata accessor for Range(0, v8, AssociatedConformanceWitness, v10);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v40 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v35 - v16;
  result = MEMORY[0x1E0C80A78](v15);
  v22 = (char *)&v35 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(*(_QWORD *)a1 + 16))
  {
    v38 = v20;
    v23 = type metadata accessor for RangeSet(0, v8, AssociatedConformanceWitness, v19);
    RangeSet._inverted<A>(within:)(v23, a2, v6, &v44);
    (*(void (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
    v24 = v44;
    v25 = *(_QWORD *)(v44 + 16);
    v39 = a3;
    if (v25)
    {
      v26 = 0;
      v27 = v41;
      do
      {
        if (v26 >= v25)
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
        v28 = v40;
        (*(void (**)(char *, unint64_t, uint64_t))(v12 + 16))(v40, v24+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(_QWORD *)(v12 + 72) * v26, v11);
        (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v17, v28, v11);
        ++v26;
        (*(void (**)(char *, uint64_t, uint64_t))(v6 + 88))(v17, a2, v6);
        (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
        v37 = v11;
        v29 = v39;
        v36 = *(void (**)(char *, unint64_t, _QWORD, uint64_t, uint64_t))(v39 + 72);
        v30 = AssociatedTypeWitness;
        v31 = swift_getAssociatedConformanceWitness(v6, a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.SubSequence: Collection);
        v32 = v29;
        v11 = v37;
        v36(v27, v30, *(_QWORD *)(v31 + 8), a2, v32);
        v25 = *(_QWORD *)(v24 + 16);
      }
      while (v26 != v25);
    }
    v33 = v38;
    v34 = v43;
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v43, a2);
    swift_release(v24);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v33 + 32))(v34, v22, a2);
  }
  return result;
}

uint64_t MutableCollection<>.removeSubranges(_:)(unint64_t *a1, uint64_t a2, char *a3, uint64_t a4)
{
  char *v4;
  char *v5;
  const char *v7;
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t AssociatedConformanceWitness;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v54)(char *, char *, unint64_t);
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  unint64_t *v60;
  unint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *, unint64_t);
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void (*v69)(char *, unint64_t, uint64_t);
  char *v70;
  unint64_t *v71;
  char *v72;
  char *v73;
  uint64_t (*v74)(char *, char *, unint64_t);
  char v75;
  const char *v76;
  void (*v77)(char *, char *, uint64_t, char *);
  void (*v78)(char *, uint64_t, const char *);
  const char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char v84;
  void (*v85)(char *, unint64_t);
  char *v86;
  void (*v87)(char *, uint64_t, const char *);
  char v88;
  void (*v89)(char *, unint64_t);
  char *v90;
  void (*v91)(char *, char *, unint64_t);
  const char *v92;
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  unint64_t v97;
  unint64_t *v98;
  char *v99;
  char *v100;
  void (*v101)(char *, char *, unint64_t);
  char *v102;
  void (*v103)(char *, char *, unint64_t);
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  unint64_t *TupleTypeMetadata2;
  char *v115;
  uint64_t v116;
  char *v117;
  char *v118;
  char *v119;
  char *v120;
  char *v121;
  uint64_t v122;
  void (*v123)(char *, char *, uint64_t);
  uint64_t v124;
  uint64_t v125;
  char *v126;
  unint64_t v127;
  char *v128;
  uint64_t v129;
  unint64_t **v130;
  void (*v131)(char *, char *, unint64_t);
  char *v132;
  const char *WitnessTable;
  const char *v134;
  unint64_t *v135;
  char *v136;
  char *v137;
  unint64_t *v138;
  unint64_t *v139;
  uint64_t v140;
  unint64_t *v141;
  unint64_t *v142;
  uint64_t v143;
  unint64_t *v144;

  v5 = v4;
  v116 = a4;
  v135 = a1;
  v136 = a3;
  v7 = (const char *)*((_QWORD *)a3 + 1);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v7, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, AssociatedTypeWitness, AssociatedTypeWitness, "lower upper ", 0);
  v9 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v115 = (char *)&v110 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v113 = (char *)&v110 - v12;
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14 = MEMORY[0x1E0C80A78](v11);
  v119 = (char *)&v110 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v118 = (char *)&v110 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v120 = (char *)&v110 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v121 = (char *)&v110 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v117 = (char *)&v110 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v137 = (char *)&v110 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v28 = (char *)&v110 - v27;
  MEMORY[0x1E0C80A78](v26);
  v128 = (char *)&v110 - v29;
  v134 = v7;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v7, a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v32 = type metadata accessor for Range((const char *)0xFF, AssociatedTypeWitness, AssociatedConformanceWitness, v31);
  v35 = type metadata accessor for Optional(0, v32, v33, v34);
  v130 = *(unint64_t ***)(v35 - 8);
  v131 = (void (*)(char *, char *, unint64_t))v35;
  v36 = MEMORY[0x1E0C80A78](v35);
  v38 = (char *)&v110 - v37;
  v129 = *(_QWORD *)(v32 - 8);
  v39 = MEMORY[0x1E0C80A78](v36);
  v111 = (char *)&v110 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = MEMORY[0x1E0C80A78](v39);
  v112 = (char *)&v110 - v42;
  v43 = MEMORY[0x1E0C80A78](v41);
  v132 = (char *)&v110 - v44;
  v45 = MEMORY[0x1E0C80A78](v43);
  v126 = (char *)&v110 - v46;
  MEMORY[0x1E0C80A78](v45);
  v48 = (char *)&v110 - v47;
  v135 = (unint64_t *)*v135;
  v141 = v135;
  v127 = AssociatedConformanceWitness;
  v50 = type metadata accessor for RangeSet.Ranges(0, AssociatedTypeWitness, AssociatedConformanceWitness, v49);
  WitnessTable = (const char *)swift_getWitnessTable(&protocol conformance descriptor for RangeSet<A>.Ranges, v50, v51);
  Collection.first.getter(v50, (uint64_t)WitnessTable, (uint64_t)v38);
  v52 = v129;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v129 + 48))(v38, 1, v32) == 1)
    return ((uint64_t (*)(char *, void (*)(char *, char *, unint64_t)))v130[1])(v38, v131);
  v123 = *(void (**)(char *, char *, uint64_t))(v52 + 32);
  v123(v48, v38, v32);
  v54 = *(void (**)(char *, char *, unint64_t))(v13 + 16);
  v55 = v128;
  v54(v128, v48, AssociatedTypeWitness);
  v56 = *(int *)(v32 + 36);
  v110 = v48;
  v131 = v54;
  v54(v28, &v48[v56], AssociatedTypeWitness);
  v141 = v135;
  swift_retain(v135, v57, v58, v59);
  v122 = v50;
  Collection.dropFirst(_:)(1, v50, (uint64_t)WitnessTable, (uint64_t)&v138);
  v61 = v138;
  v60 = v139;
  v62 = v140;
  v141 = v138;
  v142 = v139;
  v143 = v140;
  v144 = v138;
  v124 = v13;
  v125 = v32;
  if (v138 != v139)
  {
    v130 = &v144;
    v63 = v129;
    do
    {
      v138 = v141;
      v139 = v60;
      v66 = v122;
      specialized Collection._failEarlyRangeCheck(_:bounds:)((char *)v130, (uint64_t)&v138, v122, WitnessTable);
      if (((unint64_t)v61 & 0x8000000000000000) != 0
        || (v67 = v143, (unint64_t)v61 >= *(_QWORD *)(v143 + 16)))
      {
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
      }
      v68 = v143
          + ((*(unsigned __int8 *)(v63 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80))
          + *(_QWORD *)(v63 + 72) * (_QWORD)v61;
      v69 = *(void (**)(char *, unint64_t, uint64_t))(v63 + 16);
      v70 = v126;
      v69(v126, v68, v32);
      v71 = *(unint64_t **)(v67 + 16);
      v138 = 0;
      v139 = v71;
      specialized Collection._failEarlyRangeCheck(_:bounds:)((char *)v130, (uint64_t)&v138, v66, WitnessTable);
      v144 = (unint64_t *)((char *)v61 + 1);
      v72 = v132;
      v123(v132, v70, v32);
      v73 = v137;
      v131(v137, v72, AssociatedTypeWitness);
      v74 = *(uint64_t (**)(char *, char *, unint64_t))(*(_QWORD *)(v127 + 8) + 8);
      v135 = *(unint64_t **)(v127 + 8);
      v75 = v74(v28, v73, AssociatedTypeWitness);
      v76 = v134;
      if ((v75 & 1) == 0)
      {
        v77 = (void (*)(char *, char *, uint64_t, char *))*((_QWORD *)v136 + 8);
        v78 = (void (*)(char *, uint64_t, const char *))*((_QWORD *)v134 + 24);
        do
        {
          v77(v55, v28, a2, v136);
          v78(v55, a2, v76);
          v78(v28, a2, v76);
        }
        while ((((uint64_t (*)(char *, char *, unint64_t, unint64_t *))v74)(v28, v137, AssociatedTypeWitness, v135) & 1) == 0);
      }
      v13 = v124;
      v64 = *(void (**)(char *, unint64_t))(v124 + 8);
      v64(v137, AssociatedTypeWitness);
      v64(v28, AssociatedTypeWitness);
      v32 = v125;
      v65 = v132;
      v131(v28, &v132[*(int *)(v125 + 36)], AssociatedTypeWitness);
      v63 = v129;
      (*(void (**)(char *, uint64_t))(v129 + 8))(v65, v32);
      v61 = v144;
      v60 = v142;
    }
    while (v144 != v142);
    v62 = v143;
  }
  swift_release(v62);
  v79 = v134;
  v80 = (char *)*((_QWORD *)v134 + 9);
  v81 = *(_QWORD *)(v127 + 8);
  v135 = *(unint64_t **)(v81 + 8);
  v82 = v5;
  v83 = v117;
  v137 = v80;
  ((void (*)(uint64_t, const char *))v80)(a2, v134);
  WitnessTable = (const char *)v81;
  v84 = ((uint64_t (*)(char *, char *, unint64_t, uint64_t))v135)(v28, v83, AssociatedTypeWitness, v81);
  v85 = *(void (**)(char *, unint64_t))(v13 + 8);
  v85(v83, AssociatedTypeWitness);
  if ((v84 & 1) == 0)
  {
    v132 = (char *)*((_QWORD *)v136 + 8);
    v86 = v128;
    do
    {
      ((void (*)(char *, char *, uint64_t, char *))v132)(v86, v28, a2, v136);
      v87 = (void (*)(char *, uint64_t, const char *))*((_QWORD *)v134 + 24);
      v87(v86, a2, v134);
      v87(v28, a2, v134);
      v79 = v134;
      ((void (*)(uint64_t, const char *))v137)(a2, v134);
      v88 = ((uint64_t (*)(char *, char *, unint64_t, const char *))v135)(v28, v83, AssociatedTypeWitness, WitnessTable);
      v85(v83, AssociatedTypeWitness);
    }
    while ((v88 & 1) == 0);
  }
  v89 = v85;
  v136 = v28;
  v90 = v121;
  v91 = v131;
  v131(v121, v128, AssociatedTypeWitness);
  v92 = v79;
  v93 = v120;
  ((void (*)(uint64_t, const char *))v137)(a2, v92);
  v94 = v118;
  v91(v118, v90, AssociatedTypeWitness);
  v95 = v119;
  v91(v119, v93, AssociatedTypeWitness);
  if (((*(uint64_t (**)(char *, char *, unint64_t))(v127 + 24))(v94, v95, AssociatedTypeWitness) & 1) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v96 = v82;
  v89(v95, AssociatedTypeWitness);
  v89(v94, AssociatedTypeWitness);
  v89(v136, AssociatedTypeWitness);
  v89(v128, AssociatedTypeWitness);
  v97 = AssociatedTypeWitness;
  v137 = *(char **)(v129 + 8);
  ((void (*)(char *, uint64_t))v137)(v110, v32);
  v136 = v96;
  v98 = TupleTypeMetadata2;
  v99 = v113;
  v100 = &v113[*((int *)TupleTypeMetadata2 + 12)];
  v101 = v91;
  v102 = v93;
  v103 = *(void (**)(char *, char *, unint64_t))(v124 + 32);
  v103(v113, v121, v97);
  v103(v100, v102, v97);
  v104 = v115;
  v105 = &v115[*((int *)v98 + 12)];
  v101(v115, v99, v97);
  v101(v105, v100, v97);
  v106 = v111;
  v103(v111, v104, v97);
  v89(v105, v97);
  v107 = &v104[*((int *)v98 + 12)];
  v103(v104, v99, v97);
  v103(v107, v100, v97);
  v108 = v125;
  v103(&v106[*(int *)(v125 + 36)], v107, v97);
  v89(v104, v97);
  v109 = v112;
  v123(v112, v106, v108);
  (*(void (**)(char *, uint64_t))(v116 + 104))(v109, a2);
  return ((uint64_t (*)(char *, uint64_t))v137)(v109, v108);
}

uint64_t RangeSet._ranges.setter(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_release(*v1);
  *v1 = v2;
  return result;
}

uint64_t (*RangeSet._ranges.modify())()
{
  return EnumeratedSequence._base.modify;
}

void RangeSet.init()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, __objc2_class ***a4@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __objc2_class **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t WitnessTable;
  __objc2_class **v13;

  v5 = (uint64_t *)type metadata accessor for Range(0, a1, a2, a3);
  _swift_isClassOrObjCExistentialType((uint64_t)v5, v5);
  v6 = _ArrayBuffer.requestNativeBuffer()((unint64_t)&_swiftEmptyArrayStorage, v5);
  if (v6)
  {
    v9 = (__objc2_class **)v6;
  }
  else
  {
    v13 = &_swiftEmptyArrayStorage;
    v10 = type metadata accessor for Array(0, (uint64_t)v5, v7, v8);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v10, v11);
    v9 = _copyCollectionToContiguousArray<A>(_:)((uint64_t)&v13, v10, WitnessTable);
  }
  swift_bridgeObjectRelease((uint64_t)&_swiftEmptyArrayStorage);
  *a4 = v9;
}

void RangeSet.Ranges.init()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, __objc2_class ***a4@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __objc2_class **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t WitnessTable;
  __objc2_class **v13;

  v5 = (uint64_t *)type metadata accessor for Range(0, a1, a2, a3);
  _swift_isClassOrObjCExistentialType((uint64_t)v5, v5);
  v6 = _ArrayBuffer.requestNativeBuffer()((unint64_t)&_swiftEmptyArrayStorage, v5);
  if (v6)
  {
    v9 = (__objc2_class **)v6;
  }
  else
  {
    v13 = &_swiftEmptyArrayStorage;
    v10 = type metadata accessor for Array(0, (uint64_t)v5, v7, v8);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v10, v11);
    v9 = _copyCollectionToContiguousArray<A>(_:)((uint64_t)&v13, v10, WitnessTable);
  }
  swift_bridgeObjectRelease((uint64_t)&_swiftEmptyArrayStorage);
  *a4 = v9;
}

void RangeSet.Ranges.init(_range:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  BOOL isClassOrObjCExistentialType;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t WitnessTable;
  uint64_t v22;
  _QWORD *v23;

  v7 = (uint64_t *)type metadata accessor for Range((const char *)0xFF, a2, a3, a4);
  v10 = type metadata accessor for _ContiguousArrayStorage(0, (uint64_t)v7, v8, v9);
  v11 = *(v7 - 1);
  v12 = swift_allocObject(v10, ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72), *(unsigned __int8 *)(v11 + 80) | 7);
  v13 = *(uint64_t **)(*v12 + 144);
  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v13, v13);
  v12[2] = 1;
  v12[3] = isClassOrObjCExistentialType | 2;
  v15 = *(unsigned __int8 *)(*(v13 - 1) + 80);
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(v11 + 32))((uint64_t)v12 + ((v15 + 32) & ~v15), a1, v7);
  v16 = _ArrayBuffer.requestNativeBuffer()((unint64_t)v12, v7);
  if (!v16)
  {
    v23 = v12;
    v19 = type metadata accessor for Array(0, (uint64_t)v7, v17, v18);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v19, v20);
    v16 = (uint64_t)_copyCollectionToContiguousArray<A>(_:)((uint64_t)&v23, v19, WitnessTable);
  }
  v22 = v16;
  swift_bridgeObjectRelease((uint64_t)v12);
  *a5 = v22;
}

_QWORD *RangeSet.init<A>(_:)@<X0>(unint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t **a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD *result;
  unint64_t *v22;
  uint64_t (*v23)(unint64_t **, uint64_t);
  uint64_t v24;
  unint64_t *v25;

  v12 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (type metadata accessor for RangeSet.Ranges(0, v15, v16, v16) == a3)
  {
    v22 = *a1;
    v23 = *(uint64_t (**)(unint64_t **, uint64_t))(v12 + 8);
    swift_retain(*a1, v17, v18, v19);
    result = (_QWORD *)v23(a1, a3);
  }
  else
  {
    (*(void (**)(char *, unint64_t **, uint64_t))(v12 + 32))(v14, a1, a3);
    v20 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 56))(a3, a5);
    result = RangeSet.Ranges.init(_unorderedRanges:)(v20, a2, a4, (uint64_t *)&v25);
    v22 = v25;
  }
  *a6 = v22;
  return result;
}

_QWORD *RangeSet.init(_ranges:)@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_QWORD *RangeSet.Ranges.init(_unorderedRanges:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t WitnessTable;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  _QWORD *result;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, unint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t (*v58)(char *, char *, uint64_t, uint64_t);
  char *v59;
  char v60;
  uint64_t v61;
  void (*v62)(char *, char *, uint64_t);
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  void (*v68)(char *, uint64_t);
  void (*v69)(char *, uint64_t);
  uint64_t v70;
  unint64_t *v71;
  char *v72;
  char *v73;
  void (*v74)(char *, char *, uint64_t);
  char *v75;
  char *v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t);
  char *v79;
  char *v80;
  __objc2_class **v81;
  BOOL isUniquelyReferenced_nonNull_native;
  uint64_t v83;
  char v84;
  uint64_t (*v85)(char *, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89[8];
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  unint64_t *TupleTypeMetadata2;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  void (*v104)(char *, uint64_t);
  uint64_t (*v105)(uint64_t, uint64_t);
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  char *v112;
  unint64_t v113;
  _QWORD **v114;
  uint64_t v115;

  v5 = a2;
  v92 = a4;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, a2, a2, "lower upper ", 0);
  v7 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v98 = (char *)&v92 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v97 = (char *)&v92 - v10;
  v11 = *(_QWORD *)(v5 - 8);
  v12 = MEMORY[0x1E0C80A78](v9);
  v103 = (char *)&v92 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  v102 = (char *)&v92 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v101 = (char *)&v92 - v17;
  MEMORY[0x1E0C80A78](v16);
  v100 = (char *)&v92 - v18;
  v20 = type metadata accessor for Range(0, v5, a3, v19);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = MEMORY[0x1E0C80A78](v20);
  v112 = (char *)&v92 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1E0C80A78](v22);
  v108 = (char *)&v92 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v111 = (char *)&v92 - v27;
  MEMORY[0x1E0C80A78](v26);
  v29 = (char *)&v92 - v28;
  v30 = _ArrayBuffer.requestNativeBuffer()(a1, (uint64_t *)v20);
  if (!v30)
  {
    v115 = a1;
    v33 = type metadata accessor for Array(0, v20, v31, v32);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v33, v34);
    v30 = (uint64_t)_copyCollectionToContiguousArray<A>(_:)((uint64_t)&v115, v33, WitnessTable);
  }
  v36 = v30;
  swift_bridgeObjectRelease(a1);
  v114 = &v92;
  v115 = v36;
  MEMORY[0x1E0C80A78](v37);
  v90 = v5;
  v91 = a3;
  v40 = type metadata accessor for ContiguousArray(0, v20, v38, v39);
  v42 = swift_getWitnessTable(&protocol conformance descriptor for ContiguousArray<A>, v40, v41);
  v44 = (void *)swift_getWitnessTable(&protocol conformance descriptor for ContiguousArray<A>, v40, v43);
  v109 = v40;
  result = MutableCollection<>.sort(by:)(partial apply for closure #1 in RangeSet.Ranges.init(_unorderedRanges:), (uint64_t)v89, v40, v42, v44);
  v46 = v115;
  v47 = *(_QWORD *)(v115 + 16);
  if (v47)
  {
    v48 = 0;
    v95 = a3;
    v96 = v11;
    v94 = v29;
    v107 = v20;
    v93 = v21;
    do
    {
      if (v48 >= v47)
LABEL_23:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
      v113 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
      v49 = v46 + v113;
      v50 = v21;
      v51 = *(_QWORD *)(v21 + 72);
      v52 = *(void (**)(char *, unint64_t, uint64_t))(v50 + 16);
      v52(v29, v46 + v113 + v51 * v48, v20);
      v114 = (_QWORD **)v48;
      if (v48)
      {
        if ((unint64_t)v114 - 1 >= *(_QWORD *)(v46 + 16))
          goto LABEL_23;
        v110 = (unint64_t)v114 - 1;
        v53 = v51 * ((_QWORD)v114 - 1);
        v54 = v5;
        v55 = v29;
        v56 = v111;
        v52(v111, v49 + v53, v20);
        v57 = &v56[*(int *)(v20 + 36)];
        v58 = *(uint64_t (**)(char *, char *, uint64_t, uint64_t))(a3 + 32);
        if ((v58(v57, v55, v54, a3) & 1) != 0)
        {
          v106 = v53;
          v59 = &v55[*(int *)(v20 + 36)];
          v60 = v58(v59, v57, v54, a3);
          v61 = v96;
          v62 = *(void (**)(char *, char *, uint64_t))(v96 + 16);
          if ((v60 & 1) != 0)
            v63 = v59;
          else
            v63 = v57;
          v64 = v100;
          v62(v100, v63, v54);
          v65 = v101;
          v62(v101, v56, v54);
          v66 = v102;
          v62(v102, v65, v54);
          v67 = v103;
          v62(v103, v64, v54);
          if (((*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(a3 + 24))(v66, v67, v54, a3) & 1) == 0)
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
          v68 = *(void (**)(char *, uint64_t))(v61 + 8);
          v104 = v68;
          v68(v67, v54);
          v68(v66, v54);
          v69 = *(void (**)(char *, uint64_t))(v50 + 8);
          v70 = v107;
          v69(v111, v107);
          v105 = (uint64_t (*)(uint64_t, uint64_t))v69;
          v69(v55, v70);
          v71 = TupleTypeMetadata2;
          v72 = v97;
          v73 = &v97[*((int *)TupleTypeMetadata2 + 12)];
          v74 = *(void (**)(char *, char *, uint64_t))(v61 + 32);
          v74(v97, v65, v54);
          v74(v73, v64, v54);
          v75 = v98;
          v76 = &v98[*((int *)v71 + 12)];
          v62(v98, v72, v54);
          v62(v76, v73, v54);
          v77 = (uint64_t)v112;
          v74(v112, v75, v54);
          v78 = v104;
          v104(v76, v54);
          v79 = &v75[*((int *)v71 + 12)];
          v74(v75, v72, v54);
          v74(v79, v73, v54);
          v20 = v107;
          v74((char *)(v77 + *(int *)(v107 + 36)), v79, v54);
          v80 = v75;
          v21 = v93;
          v78(v80, v54);
          (*(void (**)(char *, uint64_t, uint64_t))(v21 + 32))(v108, v77, v20);
          v81 = (__objc2_class **)v115;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v115);
          v115 = (uint64_t)v81;
          v5 = v54;
          v83 = v109;
          if (!isUniquelyReferenced_nonNull_native)
          {
            v81 = _ContiguousArrayBuffer._consumeAndCreateNew()((uint64_t)v81, *(uint64_t **)(v109 + 16));
            v115 = (uint64_t)v81;
          }
          v48 = (unint64_t)v114;
          specialized Array._checkSubscript_mutating(_:)(v110, (uint64_t)v81);
          (*(void (**)(char *, char *, uint64_t))(v21 + 40))((char *)v81 + v113 + v106, v108, v20);
          v88 = (uint64_t)v112;
          ContiguousArray.remove(at:)(v48, v83, (uint64_t)v112);
          result = (_QWORD *)v105(v88, v20);
          a3 = v95;
          v29 = v94;
          goto LABEL_6;
        }
        (*(void (**)(char *, uint64_t))(v50 + 8))(v56, v20);
        v29 = v55;
        v5 = v54;
      }
      v84 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(a3 + 8) + 8))(v29, &v29[*(int *)(v20 + 36)], v5);
      v85 = *(uint64_t (**)(char *, uint64_t))(v50 + 8);
      result = (_QWORD *)v85(v29, v20);
      v21 = v50;
      if ((v84 & 1) != 0)
      {
        v86 = (uint64_t)v112;
        v87 = (uint64_t)v114;
        ContiguousArray.remove(at:)((uint64_t)v114, v109, (uint64_t)v112);
        result = (_QWORD *)v85((char *)v86, v20);
        v48 = v87;
      }
      else
      {
        v48 = (unint64_t)v114 + 1;
      }
LABEL_6:
      v46 = v115;
      v47 = *(_QWORD *)(v115 + 16);
    }
    while (v48 < v47);
  }
  *v92 = v46;
  return result;
}

uint64_t RangeSet.Ranges.init(_ranges:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t RangeSet.Ranges._contains(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t WitnessTable;
  char v24;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[16];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 24);
  v11 = type metadata accessor for Range(0, v4, v9, v10);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v26 - v13;
  v32 = (unint64_t *)*v2;
  v15 = v32;
  v29 = v4;
  v30 = v9;
  v27 = a1;
  v31 = a1;
  v18 = type metadata accessor for ContiguousArray(0, v11, v16, v17);
  swift_retain(v15, v19, v20, v21);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ContiguousArray<A>, v18, v22);
  Collection._partitioningIndex(where:)((uint64_t (*)(char *))partial apply for closure #1 in RangeSet.Ranges._contains(_:), (uint64_t)v28, v18, WitnessTable, (char *)&v33);
  swift_release((uint64_t)v32);
  if (v33 == v15[2])
  {
    v24 = 0;
  }
  else
  {
    ContiguousArray.subscript.getter(v33, (uint64_t)v15, v11, (uint64_t)v14);
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v14, v4);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 24))(v7, v27, v4, v9);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return v24 & 1;
}

uint64_t RangeSet.insert(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = type metadata accessor for Range(0, v5, v6, a4);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 + 8) + 8))(a1, a1 + *(int *)(v7 + 36), v5);
  if ((result & 1) == 0)
  {
    v10 = type metadata accessor for RangeSet.Ranges(0, v5, v6, v9);
    return RangeSet.Ranges._insert(contentsOf:)(a1, v10);
  }
  return result;
}

uint64_t RangeSet.Ranges._insert(contentsOf:)(uint64_t a1, uint64_t a2)
{
  unint64_t **v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  unint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t WitnessTable;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  void (*v69)(char *, char *, uint64_t);
  void (*v70)(char *, uint64_t);
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  void (*v75)(char *, uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  char *v78;
  void (*v79)(char *, char *, uint64_t);
  char *v80;
  char *v81;
  char *v82;
  void (*v83)(char *, uint64_t);
  unint64_t *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  void (*v88)(char *, char *, uint64_t);
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t (*v96)(char *, char *, uint64_t);
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t result;
  unint64_t v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char v107;
  char *v108;
  char v109;
  void (*v110)(char *, uint64_t);
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  unint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  char *v124;
  char *v125;
  unint64_t *TupleTypeMetadata2;
  char *v127;
  uint64_t v128;
  char *v129;
  char *v130;
  char *v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t *v135;
  char *v136;
  char *v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;

  v5 = *(_QWORD *)(a2 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v5, v5, "lower upper ", 0);
  v6 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v127 = (char *)&v117 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v6);
  v125 = (char *)&v117 - v9;
  v132 = *(_QWORD *)(v5 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v130 = (char *)&v117 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v134 = (char *)&v117 - v13;
  v14 = MEMORY[0x1E0C80A78](v12);
  v133 = (char *)&v117 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v129 = (char *)&v117 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v131 = (char *)&v117 - v19;
  MEMORY[0x1E0C80A78](v18);
  v139 = (char *)&v117 - v20;
  v21 = *(char **)(a2 + 24);
  v23 = type metadata accessor for Range((const char *)0xFF, v5, (uint64_t)v21, v22);
  v138 = type metadata accessor for CollectionOfOne(0, v23, v24, v25);
  v26 = MEMORY[0x1E0C80A78](v138);
  v137 = (char *)&v117 - v27;
  v141 = *(_QWORD *)(v23 - 8);
  v28 = MEMORY[0x1E0C80A78](v26);
  v121 = (char *)&v117 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x1E0C80A78](v28);
  v122 = (char *)&v117 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v120 = (uint64_t)&v117 - v33;
  v34 = MEMORY[0x1E0C80A78](v32);
  v124 = (char *)&v117 - v35;
  v36 = MEMORY[0x1E0C80A78](v34);
  v136 = (char *)&v117 - v37;
  v38 = MEMORY[0x1E0C80A78](v36);
  v128 = (uint64_t)&v117 - v39;
  v40 = MEMORY[0x1E0C80A78](v38);
  v42 = (char *)&v117 - v41;
  MEMORY[0x1E0C80A78](v40);
  v44 = (char *)&v117 - v43;
  v45 = *v2;
  swift_retain(*v2, v46, v47, v48);
  v49 = a1;
  v50 = specialized RangeSet.Ranges._indicesOfRange(_:in:includeAdjacent:)(a1, v45, 1, v5, (uint64_t)v21);
  v52 = v51;
  swift_release((uint64_t)v45);
  v140 = v52;
  if (v50 != v52)
  {
    v66 = v23;
    v118 = v44;
    v135 = (uint64_t *)v2;
    v119 = v50;
    ContiguousArray.subscript.getter(v50, (uint64_t)v45, v23, (uint64_t)v42);
    v67 = v131;
    v68 = v132;
    v69 = *(void (**)(char *, char *, uint64_t))(v132 + 16);
    v69(v131, v42, v5);
    v70 = *(void (**)(char *, uint64_t))(v141 + 8);
    v123 = v66;
    v70(v42, v66);
    v71 = v49;
    if (((*((uint64_t (**)(uint64_t, char *, uint64_t, char *))v21 + 2))(v49, v67, v5, v21) & 1) != 0)
    {
      (*(void (**)(char *, uint64_t))(v68 + 8))(v67, v5);
      v69(v139, (char *)v49, v5);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v139, v67, v5);
    }
    v73 = v133;
    v72 = v134;
    if (__OFSUB__(v140, 1))
    {
      __break(1u);
    }
    else
    {
      v74 = v128;
      v75 = (void (*)(char *, uint64_t, uint64_t))v69;
      v76 = v123;
      ContiguousArray.subscript.getter(v140 - 1, *v135, v123, v128);
      v75(v73, v74 + *(int *)(v76 + 36), v5);
      v70((char *)v74, v76);
      v77 = v71 + *(int *)(v76 + 36);
      if (((*((uint64_t (**)(uint64_t, char *, uint64_t, char *))v21 + 4))(v77, v73, v5, v21) & 1) != 0)
      {
        (*(void (**)(char *, uint64_t))(v68 + 8))(v73, v5);
        v78 = v129;
        v75(v129, v77, v5);
      }
      else
      {
        v78 = v129;
        (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v129, v73, v5);
      }
      v79 = (void (*)(char *, char *, uint64_t))v75;
      v80 = v139;
      v79(v72, v139, v5);
      v81 = v130;
      v79(v130, v78, v5);
      if (((*((uint64_t (**)(char *, char *, uint64_t, char *))v21 + 3))(v72, v81, v5, v21) & 1) != 0)
      {
        v133 = v21;
        v134 = (char *)v70;
        v82 = v72;
        v83 = *(void (**)(char *, uint64_t))(v68 + 8);
        v83(v81, v5);
        v83(v82, v5);
        v84 = TupleTypeMetadata2;
        v85 = v68;
        v86 = v125;
        v87 = &v125[*((int *)TupleTypeMetadata2 + 12)];
        v88 = *(void (**)(char *, char *, uint64_t))(v85 + 32);
        v88(v125, v80, v5);
        v88(v87, v78, v5);
        v89 = v127;
        v90 = &v127[*((int *)v84 + 12)];
        v79(v127, v86, v5);
        v79(v90, v87, v5);
        v91 = v118;
        v88(v118, v89, v5);
        v83(v90, v5);
        v92 = &v89[*((int *)v84 + 12)];
        v93 = v86;
        v94 = v141;
        v88(v89, v93, v5);
        v88(v92, v87, v5);
        v95 = v123;
        v88(&v91[*(int *)(v123 + 36)], v92, v5);
        v83(v89, v5);
        v96 = *(uint64_t (**)(char *, char *, uint64_t))(v94 + 32);
        v97 = v136;
        v98 = v91;
        v99 = v95;
        result = v96(v136, v98, v95);
        v101 = v119;
        v102 = v140 - v119;
        if (__OFSUB__(v140, v119))
        {
          __break(1u);
          return result;
        }
        v103 = v124;
        (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v124, v97, v99);
        if (v102 == 1)
        {
          v104 = v120;
          ContiguousArray.subscript.getter(v101, *v135, v99, v120);
          v105 = *((_QWORD *)v133 + 1);
          v106 = v103;
          v141 = *(_QWORD *)(v105 + 8);
          v107 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v141)(v103, v104, v5, v105);
          v103 = v122;
          v96(v122, v106, v99);
          v108 = v121;
          v96(v121, (char *)v104, v99);
          if ((v107 & 1) != 0)
          {
            v109 = ((uint64_t (*)(char *, char *, uint64_t, uint64_t))v141)(&v103[*(int *)(v99 + 36)], &v108[*(int *)(v99 + 36)], v5, v105);
            v110 = (void (*)(char *, uint64_t))v134;
            ((void (*)(char *, uint64_t))v134)(v108, v99);
            v110(v103, v99);
            v112 = v137;
            v111 = v138;
            v97 = v136;
            if ((v109 & 1) != 0)
            {
              v110(v136, v99);
              return 0;
            }
            goto LABEL_19;
          }
          ((void (*)(char *, uint64_t))v134)(v108, v99);
          v97 = v136;
          v112 = v137;
        }
        else
        {
          v112 = v137;
        }
        ((void (*)(char *, uint64_t))v134)(v103, v99);
        v111 = v138;
LABEL_19:
        v96(v112, v97, v99);
        v115 = type metadata accessor for ContiguousArray(0, v99, v113, v114);
        WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for CollectionOfOne<A>, v111, v116);
        v61 = v101;
        v62 = v140;
        v63 = (uint64_t)v112;
        v64 = v115;
        v65 = v111;
        goto LABEL_20;
      }
    }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  v53 = v141;
  (*(void (**)(char *, uint64_t, uint64_t))(v141 + 16))(v44, v49, v23);
  ContiguousArray._checkIndex(_:)(v50);
  v54 = v137;
  (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v137, v44, v23);
  v57 = type metadata accessor for ContiguousArray(0, v23, v55, v56);
  v58 = v138;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for CollectionOfOne<A>, v138, v59);
  v61 = v50;
  v62 = v50;
  v63 = (uint64_t)v54;
  v64 = v57;
  v65 = v58;
LABEL_20:
  ContiguousArray.replaceSubrange<A>(_:with:)(v61, v62, v63, v64, v65, WitnessTable);
  return 1;
}

void RangeSet.remove(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = type metadata accessor for Range(0, v5, v6, a4);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 + 8) + 8))(a1, a1 + *(int *)(v7 + 36), v5) & 1) == 0)
  {
    v9 = type metadata accessor for RangeSet.Ranges(0, v5, v6, v8);
    RangeSet.Ranges._remove(contentsOf:)(a1, v9, v10, v11);
  }
}

void RangeSet.Ranges._remove(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t **v4;
  unint64_t **v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  unint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(void);
  char *v85;
  uint64_t v86;
  void (*v87)(char *, uint64_t);
  char *v88;
  uint64_t *v89;
  uint64_t v90;
  char *v91;
  void (*v92)(void);
  uint64_t v93;
  uint64_t v94;
  void (*v95)(uint64_t, uint64_t);
  uint64_t *v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(char *, uint64_t);
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  char v108;
  uint64_t v109;
  unint64_t *v110;
  char *v111;
  char *v112;
  void (*v113)(char *, char *, uint64_t);
  char *v114;
  char *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  char *v121;
  char *v122;
  char *v123;
  unint64_t *v124;
  char *v125;
  char *v126;
  char *v127;
  char *v128;
  char *v129;
  uint64_t v130;
  char *v131;
  void (*v132)(char *, char *, uint64_t);
  char *v133;
  unint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  void (*v144)(uint64_t, uint64_t);
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  char *v149;
  char *v150;
  char *v151;
  unint64_t *v152;
  char *v153;
  char *v154;
  void (*v155)(char *, char *, uint64_t);
  char *v156;
  char *v157;
  char *v158;
  char *v159;
  void (*v160)(char *, char *, uint64_t);
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  char *v168;
  char *v169;
  char *v170;
  void (*v171)(void);
  unint64_t *v172;
  char *v173;
  void (*v174)(char *, char *, uint64_t);
  char *v175;
  char *v176;
  char *v177;
  char *v178;
  char *v179;
  void (*v180)(char *, char *, uint64_t);
  char *v181;
  uint64_t WitnessTable;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  unint64_t v194;
  uint64_t v195;
  char *v196;
  int v197;
  void (*v198)(void);
  void (*v199)(char *, uint64_t);
  char *v200;
  char *v201;
  uint64_t v202;
  char *v203;
  char *v204;
  char *v205;
  char *v206;
  char *v207;
  char *v208;
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  char *v214;
  char *v215;
  char *v216;
  char *v217;
  char *v218;
  char *v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  char *v225;
  char *v226;
  uint64_t v227;
  char *v228;
  char *v229;
  char *v230;
  unint64_t *TupleTypeMetadata2;
  uint64_t v232;
  char *v233;
  uint64_t v234;
  uint64_t *v235;
  uint64_t v236;
  char *v237;

  v5 = v4;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = type metadata accessor for Range((const char *)0xFF, v7, v8, a4);
  v202 = type metadata accessor for _Pair(0, v9, v10, v11);
  MEMORY[0x1E0C80A78](v202);
  v201 = (char *)&v193 - v12;
  v227 = type metadata accessor for CollectionOfOne(0, v9, v13, v14);
  MEMORY[0x1E0C80A78](v227);
  v226 = (char *)&v193 - v15;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v7, v7, "lower upper ", 0);
  v16 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v230 = (char *)&v193 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16);
  v233 = (char *)&v193 - v19;
  v234 = *(_QWORD *)(v9 - 8);
  v20 = MEMORY[0x1E0C80A78](v18);
  v209 = (uint64_t)&v193 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20);
  v200 = (char *)&v193 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v223 = (uint64_t)&v193 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v225 = (char *)&v193 - v27;
  v28 = MEMORY[0x1E0C80A78](v26);
  v222 = (uint64_t)&v193 - v29;
  v30 = MEMORY[0x1E0C80A78](v28);
  v204 = (char *)&v193 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v221 = (uint64_t)&v193 - v33;
  v34 = MEMORY[0x1E0C80A78](v32);
  v203 = (char *)&v193 - v35;
  v36 = MEMORY[0x1E0C80A78](v34);
  v38 = (char *)&v193 - v37;
  v39 = *(_QWORD *)(v7 - 8);
  v40 = MEMORY[0x1E0C80A78](v36);
  v207 = (char *)&v193 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = MEMORY[0x1E0C80A78](v40);
  v206 = (char *)&v193 - v43;
  v44 = MEMORY[0x1E0C80A78](v42);
  v208 = (char *)&v193 - v45;
  v46 = MEMORY[0x1E0C80A78](v44);
  v205 = (char *)&v193 - v47;
  v48 = MEMORY[0x1E0C80A78](v46);
  v219 = (char *)&v193 - v49;
  v50 = MEMORY[0x1E0C80A78](v48);
  v218 = (char *)&v193 - v51;
  v52 = MEMORY[0x1E0C80A78](v50);
  v220 = (char *)&v193 - v53;
  v54 = MEMORY[0x1E0C80A78](v52);
  v217 = (char *)&v193 - v55;
  v56 = MEMORY[0x1E0C80A78](v54);
  v215 = (char *)&v193 - v57;
  v58 = MEMORY[0x1E0C80A78](v56);
  v214 = (char *)&v193 - v59;
  v60 = MEMORY[0x1E0C80A78](v58);
  v216 = (char *)&v193 - v61;
  v62 = MEMORY[0x1E0C80A78](v60);
  v213 = (char *)&v193 - v63;
  v64 = MEMORY[0x1E0C80A78](v62);
  v211 = (char *)&v193 - v65;
  v66 = MEMORY[0x1E0C80A78](v64);
  v210 = (char *)&v193 - v67;
  v68 = MEMORY[0x1E0C80A78](v66);
  v212 = (char *)&v193 - v69;
  v70 = MEMORY[0x1E0C80A78](v68);
  v228 = (char *)&v193 - v71;
  v72 = MEMORY[0x1E0C80A78](v70);
  v237 = (char *)&v193 - v73;
  MEMORY[0x1E0C80A78](v72);
  v75 = (char *)&v193 - v74;
  v235 = (uint64_t *)v5;
  v76 = *v5;
  swift_retain(v76, v77, v78, v79);
  v80 = (char *)a1;
  v236 = v8;
  v81 = specialized RangeSet.Ranges._indicesOfRange(_:in:includeAdjacent:)(a1, v76, 0, v7, v8);
  v83 = v82;
  swift_release((uint64_t)v76);
  if (v81 != v83)
  {
    v84 = *(void (**)(void))(v39 + 16);
    v232 = v83;
    v229 = v80;
    ((void (*)(char *, char *, uint64_t))v84)(v75, v80, v7);
    ContiguousArray.subscript.getter(v81, (uint64_t)v76, v9, (uint64_t)v38);
    v85 = v237;
    ((void (*)(char *, char *, uint64_t))v84)(v237, v38, v7);
    v199 = *(void (**)(char *, uint64_t))(v234 + 8);
    v199(v38, v9);
    v86 = v236;
    v197 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v236 + 40))(v75, v85, v7, v236);
    v195 = v39;
    v87 = *(void (**)(char *, uint64_t))(v39 + 8);
    v87(v85, v7);
    v87(v75, v7);
    v88 = &v229[*(int *)(v9 + 36)];
    v198 = v84;
    ((void (*)(char *, char *, uint64_t))v84)(v75, v88, v7);
    if (__OFSUB__(v232, 1))
    {
      __break(1u);
      goto LABEL_19;
    }
    v193 = v88;
    v224 = v81;
    v89 = v235;
    v90 = *v235;
    v194 = v232 - 1;
    ContiguousArray.subscript.getter(v232 - 1, v90, v9, (uint64_t)v38);
    v91 = v237;
    v92 = v198;
    ((void (*)(char *, char *, uint64_t))v198)(v237, &v38[*(int *)(v9 + 36)], v7);
    v196 = v38;
    v93 = v9;
    v94 = v9;
    v95 = (void (*)(uint64_t, uint64_t))v199;
    v199(v38, v94);
    v96 = v89;
    v97 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v86 + 16))(v75, v91, v7, v86);
    v87(v91, v7);
    v87(v75, v7);
    v100 = v87;
    if ((v197 & 1) != 0)
    {
      v101 = *v96;
      v102 = v233;
      if ((v97 & 1) != 0)
      {
        v103 = v223;
        ContiguousArray.subscript.getter(v224, v101, v93, v223);
        v104 = v217;
        v92();
        v237 = (char *)v93;
        v95(v103, v93);
        v105 = v220;
        ((void (*)(char *, char *, uint64_t))v92)(v220, v229, v7);
        v106 = v218;
        ((void (*)(char *, char *, uint64_t))v92)(v218, v104, v7);
        v107 = v219;
        ((void (*)(char *, char *, uint64_t))v92)(v219, v105, v7);
        v229 = *(char **)(v236 + 24);
        v108 = ((uint64_t (*)(char *, char *, uint64_t))v229)(v106, v107, v7);
        v109 = v195;
        if ((v108 & 1) != 0)
        {
          v100(v107, v7);
          v100(v106, v7);
          v110 = TupleTypeMetadata2;
          v111 = v233;
          v112 = &v233[*((int *)TupleTypeMetadata2 + 12)];
          v113 = *(void (**)(char *, char *, uint64_t))(v109 + 32);
          v113(v233, v104, v7);
          v113(v112, v105, v7);
          v114 = v230;
          v115 = &v230[*((int *)v110 + 12)];
          ((void (*)(char *, char *, uint64_t))v92)(v230, v111, v7);
          ((void (*)(char *, char *, uint64_t))v92)(v115, v112, v7);
          v116 = v196;
          v113(v196, v114, v7);
          v100(v115, v7);
          v117 = &v114[*((int *)v110 + 12)];
          v113(v114, v111, v7);
          v113(v117, v112, v7);
          v118 = (uint64_t)v237;
          v113(&v116[*((int *)v237 + 9)], v117, v7);
          v100(v114, v7);
          v234 = *(_QWORD *)(v234 + 32);
          ((void (*)(char *, char *, uint64_t))v234)(v225, v116, v118);
          v119 = v205;
          ((void (*)(char *, char *, uint64_t))v92)(v205, v193, v7);
          v120 = v209;
          ContiguousArray.subscript.getter(v194, *v235, v118, v209);
          v121 = v208;
          ((void (*)(char *, uint64_t, uint64_t))v92)(v208, v120 + *(int *)(v118 + 36), v7);
          v199((char *)v120, v118);
          v122 = v206;
          ((void (*)(char *, char *, uint64_t))v92)(v206, v119, v7);
          v123 = v207;
          ((void (*)(char *, char *, uint64_t))v92)(v207, v121, v7);
          if ((((uint64_t (*)(char *, char *, uint64_t, uint64_t))v229)(v122, v123, v7, v236) & 1) != 0)
          {
            v100(v123, v7);
            v100(v122, v7);
            v124 = TupleTypeMetadata2;
            v125 = v233;
            v126 = &v233[*((int *)TupleTypeMetadata2 + 12)];
            v113(v233, v119, v7);
            v113(v126, v121, v7);
            v127 = &v114[*((int *)v124 + 12)];
            ((void (*)(char *, char *, uint64_t))v92)(v114, v125, v7);
            ((void (*)(char *, char *, uint64_t))v92)(v127, v126, v7);
            v128 = v196;
            v113(v196, v114, v7);
            v100(v127, v7);
            v129 = &v114[*((int *)v124 + 12)];
            v113(v114, v125, v7);
            v113(v129, v126, v7);
            v130 = (uint64_t)v237;
            v113(&v128[*((int *)v237 + 9)], v129, v7);
            v100(v114, v7);
            v131 = v200;
            v132 = (void (*)(char *, char *, uint64_t))v234;
            ((void (*)(char *, char *, uint64_t))v234)(v200, v128, v130);
            v133 = v201;
            v132(v201, v225, v130);
            v134 = swift_getTupleTypeMetadata2(0, v130, v130, "first second ", 0);
            v132(&v133[*((int *)v134 + 12)], v131, v130);
            v138 = type metadata accessor for ContiguousArray(0, v130, v135, v136);
            v139 = &protocol conformance descriptor for _Pair<A>;
            v140 = v202;
LABEL_14:
            WitnessTable = swift_getWitnessTable(v139, v140, v137);
            v183 = v224;
            v184 = v232;
            v185 = (uint64_t)v133;
            v186 = v138;
            v187 = v140;
LABEL_16:
            ContiguousArray.replaceSubrange<A>(_:with:)(v183, v184, v185, v186, v187, WitnessTable);
            return;
          }
        }
LABEL_19:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
      }
      v165 = v222;
      ContiguousArray.subscript.getter(v224, v101, v93, v222);
      v166 = v213;
      v167 = v93;
      ((void (*)(char *, uint64_t, uint64_t))v92)(v213, v165, v7);
      v95(v165, v93);
      v168 = v216;
      ((void (*)(char *, char *, uint64_t))v92)(v216, v229, v7);
      v169 = v214;
      ((void (*)(char *, char *, uint64_t))v92)(v214, v166, v7);
      v170 = v215;
      ((void (*)(char *, char *, uint64_t))v92)(v215, v168, v7);
      if (((*(uint64_t (**)(char *, char *, uint64_t))(v236 + 24))(v169, v170, v7) & 1) == 0)
        goto LABEL_19;
      v171 = v92;
      v100(v170, v7);
      v100(v169, v7);
      v172 = TupleTypeMetadata2;
      v173 = &v102[*((int *)TupleTypeMetadata2 + 12)];
      v174 = *(void (**)(char *, char *, uint64_t))(v195 + 32);
      v174(v102, v166, v7);
      v174(v173, v168, v7);
      v175 = v230;
      v176 = &v230[*((int *)v172 + 12)];
      ((void (*)(char *, char *, uint64_t))v171)(v230, v102, v7);
      ((void (*)(char *, char *, uint64_t))v171)(v176, v173, v7);
      v177 = v102;
      v178 = v196;
      v174(v196, v175, v7);
      v100(v176, v7);
      v179 = &v175[*((int *)v172 + 12)];
      v174(v175, v177, v7);
      v174(v179, v173, v7);
      v174(&v178[*(int *)(v167 + 36)], v179, v7);
      v100(v175, v7);
      v180 = *(void (**)(char *, char *, uint64_t))(v234 + 32);
      v181 = v204;
      v180(v204, v178, v167);
      v133 = v226;
      v180(v226, v181, v167);
      v164 = v167;
    }
    else
    {
      if ((v97 & 1) == 0)
      {
        v188 = type metadata accessor for ContiguousArray(0, v93, v98, v99);
        v191 = type metadata accessor for EmptyCollection(0, v93, v189, v190);
        WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for EmptyCollection<A>, v191, v192);
        v183 = v224;
        v184 = v232;
        v186 = v188;
        v187 = v191;
        goto LABEL_16;
      }
      v141 = v228;
      ((void (*)(char *, char *, uint64_t))v92)(v228, v193, v7);
      v142 = *v96;
      v143 = v221;
      v144 = v95;
      v145 = v93;
      ContiguousArray.subscript.getter(v194, v142, v93, v221);
      v146 = v143 + *(int *)(v93 + 36);
      v147 = v212;
      ((void (*)(char *, uint64_t, uint64_t))v92)(v212, v146, v7);
      v144(v143, v145);
      v148 = v210;
      v149 = v141;
      v150 = v147;
      ((void (*)(char *, char *, uint64_t))v92)(v210, v149, v7);
      v151 = v211;
      ((void (*)(char *, char *, uint64_t))v92)(v211, v147, v7);
      if (((*(uint64_t (**)(char *, char *, uint64_t))(v236 + 24))(v148, v151, v7) & 1) == 0)
        goto LABEL_19;
      v100(v151, v7);
      v100(v148, v7);
      v152 = TupleTypeMetadata2;
      v153 = v233;
      v154 = &v233[*((int *)TupleTypeMetadata2 + 12)];
      v155 = *(void (**)(char *, char *, uint64_t))(v195 + 32);
      v155(v233, v228, v7);
      v155(v154, v150, v7);
      v156 = v230;
      v157 = &v230[*((int *)v152 + 12)];
      ((void (*)(char *, char *, uint64_t))v92)(v230, v153, v7);
      ((void (*)(char *, char *, uint64_t))v92)(v157, v154, v7);
      v158 = v196;
      v155(v196, v156, v7);
      v100(v157, v7);
      v159 = &v156[*((int *)v152 + 12)];
      v155(v156, v153, v7);
      v155(v159, v154, v7);
      v155(&v158[*(int *)(v145 + 36)], v159, v7);
      v100(v156, v7);
      v160 = *(void (**)(char *, char *, uint64_t))(v234 + 32);
      v161 = v203;
      v160(v203, v158, v145);
      v133 = v226;
      v160(v226, v161, v145);
      v164 = v145;
    }
    v138 = type metadata accessor for ContiguousArray(0, v164, v162, v163);
    v139 = &protocol conformance descriptor for CollectionOfOne<A>;
    v140 = v227;
    goto LABEL_14;
  }
}

uint64_t static RangeSet.== infix(_:_:)(unint64_t **a1, unint64_t **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t (*v37)(char *, uint64_t, uint64_t, uint64_t);
  char *v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  char *v43;
  char *v44;
  char v45;
  void (*v46)(uint64_t, uint64_t);
  void (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  unint64_t *v55;
  unint64_t *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  _BOOL4 v60;
  char *v61;
  int v62;

  v4 = a4;
  v8 = type metadata accessor for Range(0, a3, a4, a4);
  v9 = MEMORY[0x1E0C80A78](v8);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v49 - v11;
  v13 = MEMORY[0x1E0C80A78](v10);
  v14 = MEMORY[0x1E0C80A78](v13);
  v22 = *a1;
  v23 = *a2;
  v24 = v22[2];
  if (v24 != (*a2)[2])
    return 0;
  v61 = (char *)&v49 - v18;
  if (!v24 || v22 == v23)
    return 1;
  v25 = v14;
  v53 = a3;
  v54 = v21;
  v59 = v20;
  v26 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  v57 = v19;
  v58 = (char *)v22 + v26;
  v52 = (char *)v23 + v26;
  swift_retain(v22, v15, v16, v17);
  swift_retain(v23, v27, v28, v29);
  v30 = 0;
  v50 = v24;
  v51 = v4;
  v55 = v22;
  v56 = v23;
  do
  {
    v60 = v24 == v30;
    if (v24 == v30)
      break;
    if (v30 >= v22[2]
      || (v31 = v59,
          v32 = *(_QWORD *)(v59 + 72) * v30,
          v33 = *(void (**)(char *, char *, uint64_t))(v59 + 16),
          v34 = v61,
          v33(v61, &v58[v32], v25),
          v30 >= v23[2]))
    {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
    }
    v35 = v54;
    v33(v54, &v52[v32], v25);
    v36 = *(_QWORD *)(v4 + 8);
    v37 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v36 + 8);
    v38 = v34;
    v39 = v34;
    v40 = v53;
    v62 = v37(v38, (uint64_t)v35, v53, v36);
    v41 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
    v41(v12, v39, v25);
    v42 = v31;
    v43 = v12;
    v44 = v57;
    v41(v57, v35, v25);
    if ((v62 & 1) == 0)
    {
      v48 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
      v48((uint64_t)v44, v25);
      v48((uint64_t)v43, v25);
      v22 = v55;
      v23 = v56;
      break;
    }
    v45 = v37(&v43[*(int *)(v25 + 36)], (uint64_t)&v44[*(int *)(v25 + 36)], v40, v36);
    v46 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
    v46((uint64_t)v44, v25);
    v46((uint64_t)v43, v25);
    ++v30;
    v24 = v50;
    v4 = v51;
    v12 = v43;
    v22 = v55;
    v23 = v56;
  }
  while ((v45 & 1) != 0);
  swift_release((uint64_t)v22);
  swift_release((uint64_t)v23);
  return v60;
}

BOOL static RangeSet.Ranges.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  char *v28;
  uint64_t v29;
  uint64_t (*v30)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  void (*v32)(uint64_t, char *, uint64_t);
  char *v33;
  char *v34;
  char v35;
  void (*v36)(char *, uint64_t);
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _BOOL4 v50;
  int v51;

  v4 = a4;
  v8 = type metadata accessor for Range(0, a3, a4, a4);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v10);
  v14 = MEMORY[0x1E0C80A78](v13);
  v15 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v39 - v16;
  v20 = *a1;
  v21 = *a2;
  v22 = *(_QWORD *)(*a1 + 16);
  if (v22 == *(_QWORD *)(v21 + 16))
  {
    if (!v22 || v20 == v21)
    {
      return 1;
    }
    else
    {
      v46 = v18;
      v47 = v17;
      v23 = 0;
      v24 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
      v48 = a3;
      v49 = v20 + v24;
      v44 = v4;
      v45 = v21 + v24;
      v25 = v15;
      v42 = v20;
      v43 = (char *)&v39 - v16;
      v40 = v22;
      v41 = v21;
      do
      {
        v50 = v22 == v23;
        if (v22 == v23)
          break;
        if (v23 >= *(_QWORD *)(v20 + 16)
          || (v26 = *(_QWORD *)(v9 + 72) * v23,
              v27 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16),
              v27(v19, v49 + v26, v25),
              v23 >= *(_QWORD *)(v21 + 16)))
        {
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
        }
        v28 = v46;
        v27(v46, v45 + v26, v25);
        v29 = *(_QWORD *)(v4 + 8);
        v30 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 8);
        v31 = v48;
        v51 = v30(v19, (uint64_t)v28, v48, v29);
        v32 = *(void (**)(uint64_t, char *, uint64_t))(v9 + 32);
        v33 = v19;
        v34 = v47;
        v32((uint64_t)v47, v33, v25);
        v32((uint64_t)v12, v28, v25);
        if ((v51 & 1) == 0)
        {
          v38 = *(void (**)(char *, uint64_t))(v9 + 8);
          v38(v12, v25);
          v38(v34, v25);
          return 0;
        }
        v35 = v30(&v34[*(int *)(v25 + 36)], (uint64_t)&v12[*(int *)(v25 + 36)], v31, v29);
        v36 = *(void (**)(char *, uint64_t))(v9 + 8);
        v36(v12, v25);
        v36(v34, v25);
        ++v23;
        v19 = v43;
        v4 = v44;
        v21 = v41;
        v20 = v42;
        v22 = v40;
      }
      while ((v35 & 1) != 0);
    }
  }
  else
  {
    return 0;
  }
  return v50;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RangeSet<A>(unint64_t **a1, unint64_t **a2, uint64_t a3)
{
  return static RangeSet.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t RangeSet<>.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t **v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t *v12;
  Swift::UInt v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  Swift::UInt v22;

  v7 = *(_QWORD *)(a2 + 16);
  v8 = type metadata accessor for Range(0, v7, *(_QWORD *)(a2 + 24), a4);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v21 - v10;
  v12 = *v4;
  v13 = (*v4)[2];
  Hasher._combine(_:)(v13);
  swift_retain(v12, v14, v15, v16);
  v22 = v13;
  if (v13)
  {
    v17 = 0;
    do
    {
      if (v17 >= v12[2])
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
      v18 = v17 + 1;
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v11, (unint64_t)v12+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v17, v8);
      v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 24);
      v19(a1, v7, a3);
      v19(a1, v7, a3);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      v17 = v18;
    }
    while (v22 != v18);
  }
  return swift_release((uint64_t)v12);
}

Swift::Int RangeSet<>.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  _QWORD v6[5];
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v9 = *v4;
  v6[0] = 0;
  v6[1] = _swift_stdlib_Hashing_parameters ^ 0x736F6D6570736575;
  v6[2] = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v6[3] = _swift_stdlib_Hashing_parameters ^ 0x6C7967656E657261;
  v6[4] = unk_1ECD25520 ^ 0x7465646279746573;
  v7 = 0u;
  v8 = 0u;
  RangeSet<>.hash(into:)((uint64_t)v6, a1, a2, a4);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <> RangeSet<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return RangeSet<>.hashValue.getter(a1, *(_QWORD *)(a2 - 8), a3, a4);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance <> RangeSet<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return RangeSet<>.hash(into:)(a1, a2, *(_QWORD *)(a3 - 8), a4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <> RangeSet<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance <> ClosedRange<A><>.Index(a1, a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))RangeSet<>.hash(into:));
}

uint64_t RangeSet.init<A, B>(_:within:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, const char *a6@<X5>, uint64_t a7@<X6>, __objc2_class ***a8@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t AssociatedConformanceWitness;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __objc2_class **v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t WitnessTable;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  void (*v54)(char *, char *, uint64_t);
  char *v55;
  void (*v56)(char *, uint64_t);
  unint64_t *v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t);
  uint64_t v72;
  uint64_t result;
  uint64_t v74;
  __objc2_class ***v75;
  char *v76;
  char *v77;
  _QWORD *v78;
  unint64_t v79;
  unsigned int (*v80)(char *, uint64_t, uint64_t);
  void (*v81)(unint64_t);
  unint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  unint64_t *TupleTypeMetadata2;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t AssociatedTypeWitness;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  __objc2_class **v98;

  v91 = a2;
  v82 = a1;
  v75 = a8;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, a3, a3, "lower upper ", 0);
  v13 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v86 = (char *)&v74 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v87 = (char *)&v74 - v15;
  v89 = a7;
  v92 = a5;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a7, a5, a3, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v18 = (uint64_t *)type metadata accessor for Range(0, a3, AssociatedConformanceWitness, v17);
  v85 = *(v18 - 1);
  v19 = MEMORY[0x1E0C80A78](v18);
  v84 = (char *)&v74 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19);
  v83 = (char *)&v74 - v22;
  v23 = *(_QWORD **)(a3 - 8);
  v24 = MEMORY[0x1E0C80A78](v21);
  v26 = (char *)&v74 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v24);
  v96 = (char *)&v74 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v31 = (char *)&v74 - v30;
  MEMORY[0x1E0C80A78](v29);
  v33 = (char *)&v74 - v32;
  v36 = type metadata accessor for Optional(0, a3, v34, v35);
  MEMORY[0x1E0C80A78](v36);
  v38 = (char *)&v74 - v37;
  v95 = (uint64_t)a6;
  v39 = a6;
  v40 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v39, a4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v74 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v94 = (char *)&v74 - v41;
  _swift_isClassOrObjCExistentialType((uint64_t)v18, v18);
  v90 = v18;
  v42 = _ArrayBuffer.requestNativeBuffer()((unint64_t)&_swiftEmptyArrayStorage, v18);
  if (v42)
  {
    v45 = (__objc2_class **)v42;
  }
  else
  {
    v98 = &_swiftEmptyArrayStorage;
    v46 = type metadata accessor for Array(0, (uint64_t)v90, v43, v44);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v46, v47);
    v45 = _copyCollectionToContiguousArray<A>(_:)((uint64_t)&v98, v46, WitnessTable);
  }
  swift_bridgeObjectRelease((uint64_t)&_swiftEmptyArrayStorage);
  v98 = v45;
  v49 = v95;
  (*(void (**)(uint64_t, uint64_t))(v95 + 32))(v40, v95);
  v50 = v40;
  v51 = AssociatedTypeWitness;
  v52 = swift_getAssociatedConformanceWitness(v49, v50, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v81 = *(void (**)(unint64_t))(v52 + 16);
  v82 = v52;
  v81(v51);
  v80 = (unsigned int (*)(char *, uint64_t, uint64_t))v23[6];
  if (v80(v38, 1, a3) != 1)
  {
    v95 = v23[4];
    v78 = v23;
    v79 = AssociatedConformanceWitness;
    v77 = v26;
    v97 = v33;
    v76 = v38;
    v53 = (void (*)(char *, char *, uint64_t))v95;
    do
    {
      ((void (*)(char *, char *, uint64_t))v95)(v33, v38, a3);
      (*(void (**)(char *, uint64_t))(v89 + 184))(v33, v92);
      v54 = (void (*)(char *, char *, uint64_t))v23[2];
      v55 = v96;
      v54(v96, v33, a3);
      v54(v26, v31, a3);
      if (((*(uint64_t (**)(char *, char *, uint64_t, unint64_t))(AssociatedConformanceWitness + 24))(v55, v26, a3, AssociatedConformanceWitness) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
      v56 = (void (*)(char *, uint64_t))v23[1];
      v56(v26, a3);
      v56(v96, a3);
      v58 = v87;
      v57 = TupleTypeMetadata2;
      v59 = &v87[*((int *)TupleTypeMetadata2 + 12)];
      v54(v87, v97, a3);
      v53(v59, v31, a3);
      v60 = v86;
      v61 = &v86[*((int *)v57 + 12)];
      v54(v86, v58, a3);
      v54(v61, v59, a3);
      v62 = v84;
      v53(v84, v60, a3);
      v56(v61, a3);
      v63 = *((int *)v57 + 12);
      v64 = (uint64_t)v90;
      v65 = &v60[v63];
      v53(v60, v58, a3);
      v53(v65, v59, a3);
      v66 = v65;
      AssociatedConformanceWitness = v79;
      v53(&v62[*(int *)(v64 + 36)], v66, a3);
      v56(v60, a3);
      v67 = v85;
      v68 = (uint64_t)v83;
      (*(void (**)(char *, char *, uint64_t))(v85 + 32))(v83, v62, v64);
      v70 = type metadata accessor for RangeSet.Ranges(0, a3, AssociatedConformanceWitness, v69);
      RangeSet.Ranges._insert(contentsOf:)(v68, v70);
      v71 = *(void (**)(uint64_t, uint64_t))(v67 + 8);
      v23 = v78;
      v72 = v68;
      v26 = v77;
      v71(v72, v64);
      v56(v97, a3);
      v33 = v97;
      v38 = v76;
      ((void (*)(unint64_t, unint64_t))v81)(AssociatedTypeWitness, v82);
    }
    while (v80(v38, 1, a3) != 1);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)(v92 - 8) + 8))(v91);
  result = (*(uint64_t (**)(char *, unint64_t))(v74 + 8))(v94, AssociatedTypeWitness);
  *v75 = v98;
  return result;
}

uint64_t RangeSet.insert<A>(_:within:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t (*v30)(char *, char *, uint64_t, uint64_t);
  char *v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  unint64_t *v34;
  char *v35;
  char *v36;
  void (*v37)(char *, char *, uint64_t);
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t *TupleTypeMetadata2;
  uint64_t v54;
  uint64_t v55;

  v54 = a2;
  v55 = a4;
  v8 = *(_QWORD *)(a3 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v8, v8, "lower upper ", 0);
  v9 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v9);
  v50 = (char *)&v47 - v13;
  v14 = *(_QWORD *)(v8 - 8);
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v47 - v19;
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v47 - v21;
  v23 = *(_QWORD *)(a3 + 24);
  v25 = type metadata accessor for Range(0, v8, v23, v24);
  v52 = *(_QWORD *)(v25 - 8);
  v26 = MEMORY[0x1E0C80A78](v25);
  v49 = (char *)&v47 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26);
  v51 = (char *)&v47 - v28;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a5 + 184))(a1, v55, a5);
  v48 = v14;
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v54 = a1;
  v29(v20, a1, v8);
  v29(v17, (uint64_t)v22, v8);
  v30 = *(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v23 + 24);
  v55 = v23;
  if ((v30(v20, v17, v8, v23) & 1) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v47 = v25;
  v31 = v22;
  v32 = v48;
  v33 = *(void (**)(char *, uint64_t))(v48 + 8);
  v33(v17, v8);
  v33(v20, v8);
  v34 = TupleTypeMetadata2;
  v35 = v50;
  v36 = &v50[*((int *)TupleTypeMetadata2 + 12)];
  v29(v50, v54, v8);
  v37 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
  v37(v36, v31, v8);
  v38 = &v11[*((int *)v34 + 12)];
  v29(v11, (uint64_t)v35, v8);
  v29(v38, (uint64_t)v36, v8);
  v39 = v49;
  v37(v49, v11, v8);
  v33(v38, v8);
  v40 = &v11[*((int *)v34 + 12)];
  v37(v11, v35, v8);
  v37(v40, v36, v8);
  v41 = v47;
  v37(&v39[*(int *)(v47 + 36)], v40, v8);
  v33(v11, v8);
  v42 = (uint64_t)v51;
  v43 = v52;
  (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v51, v39, v41);
  v45 = type metadata accessor for RangeSet.Ranges(0, v8, v55, v44);
  LOBYTE(v33) = RangeSet.Ranges._insert(contentsOf:)(v42, v45);
  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v41);
  return v33 & 1;
}

uint64_t RangeSet.remove<A>(_:within:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t (*v30)(char *, char *, uint64_t, uint64_t);
  void (*v31)(char *, uint64_t);
  unint64_t *v32;
  char *v33;
  char *v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *TupleTypeMetadata2;
  uint64_t v55;
  uint64_t v56;

  v55 = a2;
  v56 = a4;
  v8 = *(_QWORD *)(a3 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v8, v8, "lower upper ", 0);
  v9 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v9);
  v50 = (char *)&v48 - v13;
  v14 = *(_QWORD **)(v8 - 8);
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v48 - v19;
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v48 - v21;
  v23 = *(_QWORD *)(a3 + 24);
  v25 = type metadata accessor for Range(0, v8, v23, v24);
  v52 = *(_QWORD *)(v25 - 8);
  v53 = v25;
  v26 = MEMORY[0x1E0C80A78](v25);
  v49 = (char *)&v48 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26);
  v51 = (char *)&v48 - v28;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a5 + 184))(a1, v56, a5);
  v29 = (void (*)(char *, uint64_t, uint64_t))v14[2];
  v55 = a1;
  v29(v20, a1, v8);
  v29(v17, (uint64_t)v22, v8);
  v30 = *(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v23 + 24);
  v56 = v23;
  if ((v30(v20, v17, v8, v23) & 1) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v31 = (void (*)(char *, uint64_t))v14[1];
  v31(v17, v8);
  v31(v20, v8);
  v32 = TupleTypeMetadata2;
  v33 = v50;
  v34 = &v50[*((int *)TupleTypeMetadata2 + 12)];
  v29(v50, v55, v8);
  v35 = (void (*)(char *, char *, uint64_t))v14[4];
  v35(v34, v22, v8);
  v36 = &v11[*((int *)v32 + 12)];
  v29(v11, (uint64_t)v33, v8);
  v29(v36, (uint64_t)v34, v8);
  v37 = v49;
  v35(v49, v11, v8);
  v31(v36, v8);
  v38 = &v11[*((int *)v32 + 12)];
  v35(v11, v33, v8);
  v35(v38, v34, v8);
  v39 = v53;
  v35(&v37[*(int *)(v53 + 36)], v38, v8);
  v31(v11, v8);
  v41 = (uint64_t)v51;
  v40 = v52;
  (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v51, v37, v39);
  v42 = v56;
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 + 8) + 8))(v41, v41 + *(int *)(v39 + 36), v8) & 1) == 0)
  {
    v44 = type metadata accessor for RangeSet.Ranges(0, v8, v42, v43);
    RangeSet.Ranges._remove(contentsOf:)(v41, v44, v45, v46);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 8))(v41, v39);
}

void RangeSet.Ranges._gaps(boundedBy:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD **v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  uint64_t v48;
  Swift::Int v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __objc2_class **v54;
  uint64_t *vtable;
  BOOL isClassOrObjCExistentialType;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t WitnessTable;
  __objc2_class ***v64;
  uint64_t v65;
  Swift::Int v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t, uint64_t);
  Swift::Int v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  void (*v76)(char *, char *, uint64_t);
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  void (*v83)(char *, uint64_t);
  char *v84;
  unint64_t *v85;
  char *v86;
  void (*v87)(char *, char *, uint64_t);
  char *v88;
  uint64_t v89;
  unint64_t *v90;
  void (*v91)(char *, char *, uint64_t);
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t (*v100)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  void (*v106)(char *, uint64_t, uint64_t);
  void (*v107)(char *, uint64_t);
  char *v108;
  char *v109;
  uint64_t v110;
  char *v111;
  void (*v112)(char *, char *, uint64_t);
  char *v113;
  char *v114;
  void (*v115)(char *, uint64_t);
  char *v116;
  unint64_t *v117;
  char *v118;
  void (*v119)(char *, char *, uint64_t);
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t (*v136)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v137;
  void (*v138)(char *, char *, uint64_t);
  void (*v139)(char *, uint64_t);
  uint64_t (*v140)(char *, char *, uint64_t);
  char *v141;
  Swift::Int v142;
  void (*v143)(char *, char *, uint64_t);
  uint64_t v144;
  char *v145;
  uint64_t v146;
  void (*v147)(char *, char *, uint64_t);
  uint64_t v148;
  char *v149;
  char *v150;
  char *v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  char *v156;
  char *v157;
  char *v158;
  char *v159;
  unint64_t *TupleTypeMetadata2;
  char *v161;
  uint64_t *v162;
  char *v163;
  uint64_t v164;
  char *v165;
  char *v166;
  Swift::Int v167;
  uint64_t v168;
  __objc2_class **v169;
  __objc2_class **v170;

  v162 = a3;
  v6 = *(_QWORD *)(a2 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v6, v6, "lower upper ", 0);
  v7 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v161 = (char *)&v136 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v159 = (char *)&v136 - v9;
  v10 = *(_QWORD *)(a2 + 24);
  v12 = (uint64_t *)type metadata accessor for Range(0, v6, v10, v11);
  v13 = *(v12 - 1);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v136 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v136 - v18;
  v20 = MEMORY[0x1E0C80A78](v17);
  v158 = (char *)&v136 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v153 = (char *)&v136 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v163 = (char *)&v136 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v157 = (char *)&v136 - v27;
  v28 = *(_QWORD *)(v6 - 8);
  v29 = MEMORY[0x1E0C80A78](v26);
  v150 = (char *)&v136 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = MEMORY[0x1E0C80A78](v29);
  v149 = (char *)&v136 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v151 = (char *)&v136 - v34;
  v35 = MEMORY[0x1E0C80A78](v33);
  v154 = (char *)&v136 - v36;
  v37 = MEMORY[0x1E0C80A78](v35);
  v156 = (char *)&v136 - v38;
  v39 = MEMORY[0x1E0C80A78](v37);
  v155 = (char *)&v136 - v40;
  v41 = MEMORY[0x1E0C80A78](v39);
  v166 = (char *)&v136 - v42;
  v43 = MEMORY[0x1E0C80A78](v41);
  v165 = (char *)&v136 - v44;
  MEMORY[0x1E0C80A78](v43);
  v46 = (char *)&v136 - v45;
  v47 = *v3;
  v168 = a1;
  v164 = v10;
  v48 = specialized RangeSet.Ranges._indicesOfRange(_:in:includeAdjacent:)(a1, v47, 1, v6, v10);
  if (v48 == v49)
  {
    v50 = v162;
    (*(void (**)(char *, uint64_t, uint64_t *))(v13 + 16))(v16, v168, v12);
    v53 = type metadata accessor for _ContiguousArrayStorage(0, (uint64_t)v12, v51, v52);
    v54 = (__objc2_class **)swift_allocObject(v53, ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(_QWORD *)(v13 + 72), *(unsigned __int8 *)(v13 + 80) | 7);
    vtable = (uint64_t *)(*v54)[3].vtable;
    isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)vtable, vtable);
    v54[2] = (__objc2_class *)1;
    v54[3] = (__objc2_class *)(isClassOrObjCExistentialType | 2);
    v57 = *(unsigned __int8 *)(*(vtable - 1) + 80);
    (*(void (**)(uint64_t, char *, uint64_t *))(v13 + 32))((uint64_t)v54 + ((v57 + 32) & ~v57), v16, v12);
    v58 = _ArrayBuffer.requestNativeBuffer()((unint64_t)v54, v12);
    if (v58)
    {
LABEL_5:
      v65 = v58;
      goto LABEL_6;
    }
    v170 = v54;
    v61 = type metadata accessor for Array(0, (uint64_t)v12, v59, v60);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v61, v62);
    v64 = &v170;
LABEL_4:
    v58 = (uint64_t)_copyCollectionToContiguousArray<A>(_:)((uint64_t)v64, v61, WitnessTable);
    goto LABEL_5;
  }
  v66 = v48;
  v141 = v19;
  v167 = v49;
  _swift_isClassOrObjCExistentialType((uint64_t)v12, v12);
  v67 = *(unsigned __int8 *)(v13 + 80);
  v170 = &_swiftEmptyArrayStorage;
  v68 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 16);
  v68(v46, v168, v6);
  ContiguousArray._checkIndex(_:)(v66);
  ContiguousArray._checkIndex(_:)(v167);
  v69 = v167;
  if (v167 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
  v152 = v46;
  v70 = (uint64_t)v12;
  v148 = v28;
  v71 = (char *)v47 + ((v67 + 32) & ~v67);
  v72 = v165;
  v73 = v166;
  do
  {
    if (v66 >= v69)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/SliceBuffer.swift", 23, 2, 0x132uLL, 0);
    v74 = *(_QWORD *)(v13 + 72);
    v145 = v71;
    v75 = v157;
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v157, &v71[v74 * v66], v70);
    v76 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    v77 = v163;
    v146 = v70;
    v147 = v76;
    v76(v163, v75, v70);
    v78 = v152;
    v68(v72, (uint64_t)v152, v6);
    v68(v73, (uint64_t)v77, v6);
    v79 = v72;
    v80 = v155;
    v68(v155, (uint64_t)v79, v6);
    v81 = v156;
    v68(v156, (uint64_t)v73, v6);
    v140 = *(uint64_t (**)(char *, char *, uint64_t))(v164 + 24);
    if ((v140(v80, v81, v6) & 1) == 0)
      goto LABEL_23;
    v142 = v66;
    v144 = v13;
    v82 = v148;
    v83 = *(void (**)(char *, uint64_t))(v148 + 8);
    v83(v81, v6);
    v83(v80, v6);
    v83(v78, v6);
    v84 = v159;
    v85 = TupleTypeMetadata2;
    v86 = &v159[*((int *)TupleTypeMetadata2 + 12)];
    v87 = *(void (**)(char *, char *, uint64_t))(v82 + 32);
    v87(v159, v79, v6);
    v88 = v86;
    v87(v86, v73, v6);
    v89 = *((int *)v85 + 12);
    v90 = v85;
    v91 = (void (*)(char *, char *, uint64_t))v68;
    v92 = v161;
    v93 = &v161[v89];
    v91(v161, v84, v6);
    v143 = v91;
    v91(v93, v88, v6);
    v94 = v146;
    v95 = v158;
    v87(v158, v92, v6);
    v83(v93, v6);
    v96 = &v92[*((int *)v90 + 12)];
    v87(v92, v84, v6);
    v87(v96, v88, v6);
    v97 = &v95[*(int *)(v94 + 36)];
    v138 = v87;
    v87(v97, v96, v6);
    v139 = v83;
    v83(v92, v6);
    v98 = (uint64_t)v153;
    v147(v153, v95, v94);
    v99 = v98 + *(int *)(v94 + 36);
    v100 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v164 + 8) + 8);
    v137 = *(_QWORD *)(v164 + 8);
    v136 = v100;
    if ((((uint64_t (*)(uint64_t, uint64_t, uint64_t))v100)(v98, v99, v6) & 1) != 0)
    {
      v13 = v144;
      (*(void (**)(uint64_t, uint64_t))(v144 + 8))(v98, v94);
    }
    else
    {
      v103 = type metadata accessor for Array(0, v94, v101, v102);
      Array.append(_:)(v98, v103);
      v13 = v144;
    }
    v104 = v154;
    v66 = v142 + 1;
    v105 = v163;
    v106 = (void (*)(char *, uint64_t, uint64_t))v143;
    v143(v152, &v163[*(int *)(v94 + 36)], v6);
    v107 = *(void (**)(char *, uint64_t))(v13 + 8);
    v108 = v105;
    v68 = v106;
    v70 = v94;
    v107(v108, v94);
    v73 = v166;
    v69 = v167;
    v72 = v165;
    v71 = v145;
  }
  while (v167 != v66);
  v109 = v152;
  v68(v104, (uint64_t)v152, v6);
  v110 = v168 + *(int *)(v94 + 36);
  v111 = v151;
  v68(v151, v110, v6);
  v112 = (void (*)(char *, char *, uint64_t))v68;
  v113 = v149;
  v68(v149, (uint64_t)v104, v6);
  v114 = v150;
  v68(v150, (uint64_t)v111, v6);
  if ((((uint64_t (*)(char *, char *, uint64_t, uint64_t))v140)(v113, v114, v6, v164) & 1) == 0)
LABEL_23:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v115 = v139;
  v139(v114, v6);
  v115(v113, v6);
  v115(v109, v6);
  v116 = v159;
  v117 = TupleTypeMetadata2;
  v118 = &v159[*((int *)TupleTypeMetadata2 + 12)];
  v119 = v138;
  v138(v159, v104, v6);
  v119(v118, v111, v6);
  v120 = v161;
  v121 = &v161[*((int *)v117 + 12)];
  v112(v161, v116, v6);
  v112(v121, v118, v6);
  v122 = v158;
  v119(v158, v120, v6);
  v115(v121, v6);
  v123 = &v120[*((int *)v117 + 12)];
  v119(v120, v116, v6);
  v119(v123, v118, v6);
  v124 = v146;
  v119(&v122[*(int *)(v146 + 36)], v123, v6);
  v115(v120, v6);
  v125 = (uint64_t)v141;
  v147(v141, v122, v124);
  if ((v136(v125, v125 + *(int *)(v124 + 36), v6, v137) & 1) != 0)
  {
    v107((char *)v125, v124);
  }
  else
  {
    v131 = type metadata accessor for Array(0, v124, v126, v127);
    Array.append(_:)(v125, v131);
  }
  v50 = v162;
  v54 = v170;
  v132 = swift_bridgeObjectRetain((unint64_t)v170, v128, v129, v130);
  v65 = _ArrayBuffer.requestNativeBuffer()(v132, (uint64_t *)v124);
  swift_bridgeObjectRelease((uint64_t)v54);
  if (!v65)
  {
    v169 = v54;
    v61 = type metadata accessor for Array(0, v124, v133, v134);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v61, v135);
    v64 = &v169;
    goto LABEL_4;
  }
LABEL_6:
  swift_bridgeObjectRelease((uint64_t)v54);
  *v50 = v65;
}

uint64_t RangeSet.formUnion(_:)(unint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t **v4;
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t result;
  unint64_t *v9[2];
  unint64_t *v10;

  v6 = *v4;
  v9[0] = *a1;
  v5 = v9[0];
  v9[1] = v6;
  v7 = type metadata accessor for RangeSet.Ranges(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  RangeSet.Ranges._union(_:)(v9, v7, &v10);
  swift_release((uint64_t)v6);
  result = swift_release((uint64_t)v5);
  *v4 = v10;
  return result;
}

uint64_t RangeSet.union(_:)@<X0>(unint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  unint64_t **v4;
  unint64_t *v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t result;
  unint64_t *v10[2];
  unint64_t *v11;

  v7 = *v4;
  v10[0] = *a1;
  v6 = v10[0];
  v10[1] = v7;
  v8 = type metadata accessor for RangeSet.Ranges(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
  RangeSet.Ranges._union(_:)(v10, v8, &v11);
  swift_release((uint64_t)v7);
  result = swift_release((uint64_t)v6);
  *a4 = v11;
  return result;
}

uint64_t RangeSet.formIntersection(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8[2];
  uint64_t v9;

  v5 = *v4;
  v8[0] = *a1;
  v8[1] = v5;
  v6 = type metadata accessor for RangeSet.Ranges(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  RangeSet.Ranges._intersection(_:)(v8, v6, &v9);
  result = swift_release(v5);
  *v4 = v9;
  return result;
}

uint64_t RangeSet.formSymmetricDifference(_:)(unint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t **v4;
  unint64_t *v6;
  unint64_t *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t *v16;

  v7 = *v4;
  v14 = *a1;
  v6 = v14;
  v15 = v7;
  v8 = type metadata accessor for RangeSet.Ranges(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  RangeSet.Ranges._union(_:)(&v14, v8, &v16);
  v9 = v16;
  v14 = v6;
  v15 = v7;
  RangeSet.Ranges._intersection(_:)((uint64_t *)&v14, v8, (uint64_t *)&v16);
  swift_release((uint64_t)v6);
  swift_release((uint64_t)v7);
  v10 = v16;
  v15 = v16;
  v16 = v9;
  RangeSet.subtract(_:)(&v15, a2, v11, v12);
  result = swift_release((uint64_t)v10);
  *v4 = v16;
  return result;
}

uint64_t RangeSet.symmetricDifference(_:)@<X0>(unint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, unint64_t **a4@<X8>)
{
  uint64_t *v4;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v15;
  uint64_t v16;
  unint64_t *v17;

  v8 = *v4;
  v15 = *a1;
  v7 = v15;
  v16 = v8;
  v9 = type metadata accessor for RangeSet.Ranges(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
  RangeSet.Ranges._union(_:)(&v15, v9, &v17);
  v10 = v17;
  v15 = v7;
  v16 = v8;
  RangeSet.Ranges._intersection(_:)((uint64_t *)&v15, v9, (uint64_t *)&v17);
  swift_release((uint64_t)v7);
  swift_release(v8);
  v11 = v17;
  *a4 = v10;
  v17 = v11;
  RangeSet.subtract(_:)(&v17, a2, v12, v13);
  return swift_release((uint64_t)v11);
}

uint64_t RangeSet.subtract(_:)(unint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t i;
  void (*v25)(char *, char *, uint64_t);
  void (*v26)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v32[2];
  uint64_t v33;
  uint64_t v34;

  v6 = *(_QWORD *)(a2 + 16);
  v33 = *(_QWORD *)(a2 + 24);
  v34 = v6;
  v7 = type metadata accessor for Range(0, v6, v33, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)v32 - v12;
  v16 = type metadata accessor for Optional(0, v7, v14, v15);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)v32 - v17;
  v19 = (uint64_t)*a1;
  v20 = (*a1)[2];
  swift_retain(*a1, v21, v22, v23);
  if (v20)
  {
    v32[1] = v4;
    for (i = 0; i != v20; ++i)
    {
      if (i >= v20)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
      (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v13, v19+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * i, v7);
      v25 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
      v25(v18, v13, v7);
      v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
      v26(v18, 0, 1, v7);
      v25(v11, v18, v7);
      if (((*(uint64_t (**)(char *, char *))(*(_QWORD *)(v33 + 8) + 8))(v11, &v11[*(int *)(v7 + 36)]) & 1) == 0)
      {
        v28 = type metadata accessor for RangeSet.Ranges(0, v34, v33, v27);
        RangeSet.Ranges._remove(contentsOf:)((uint64_t)v11, v28, v29, v30);
      }
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      v20 = *(_QWORD *)(v19 + 16);
    }
  }
  else
  {
    v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
  }
  v26(v18, 1, 1, v7);
  return swift_release(v19);
}

void RangeSet.Ranges._union(_:)(unint64_t **a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X8>)
{
  unint64_t **v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  void (*v49)(char *, char *, uint64_t);
  unint64_t *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char v54;
  void (*v55)(char *, uint64_t);
  BOOL v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  char *v60;
  uint64_t v61;
  int64_t v62;
  BOOL v63;
  unint64_t *v64;
  char *v65;
  void (*v66)(char *, uint64_t, uint64_t);
  uint64_t v67;
  char *v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t (*v72)(char *, char *, uint64_t);
  char *v73;
  char *v74;
  void (*v75)(char *, uint64_t);
  unint64_t *v76;
  uint64_t v77;
  char *v78;
  char v79;
  void (*v80)(char *, uint64_t);
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  void (*v86)(char *, uint64_t);
  void (*v87)(char *, uint64_t *);
  uint64_t v88;
  unint64_t *v89;
  char *v90;
  char *v91;
  void (*v92)(char *, char *, uint64_t);
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  void (*v97)(char *, char *, uint64_t);
  char *v98;
  int64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int64_t v105;
  unint64_t *v106;
  unint64_t *v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t WitnessTable;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t *v131;
  __objc2_class **v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t **v141;
  uint64_t (*v142)(char *, char *, uint64_t, uint64_t);
  char *v143;
  char *v144;
  char *v145;
  char *v146;
  unint64_t *TupleTypeMetadata2;
  char *v148;
  char *v149;
  char *v150;
  char *v151;
  char *v152;
  _QWORD *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int64_t v159;
  void (*v160)(char *, uint64_t, uint64_t);
  uint64_t *v161;
  unint64_t *v162;
  char *v163;
  unint64_t *v164;
  char *v165;
  char *v166;
  void (*v167)(char *, uint64_t);
  uint64_t v168;
  unint64_t v169;
  _OWORD v170[2];
  _OWORD v171[2];
  __objc2_class **v172;

  v7 = *(_QWORD *)(a2 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v7, v7, "lower upper ", 0);
  v8 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v146 = (char *)&v140 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v145 = (char *)&v140 - v10;
  v168 = *(_QWORD *)(a2 + 24);
  v12 = (uint64_t *)type metadata accessor for Range(0, v7, v168, v11);
  v158 = *(v12 - 1);
  v13 = MEMORY[0x1E0C80A78](v12);
  v152 = (char *)&v140 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v144 = (char *)&v140 - v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v163 = (char *)&v140 - v18;
  v153 = *(_QWORD **)(v7 - 8);
  v19 = MEMORY[0x1E0C80A78](v17);
  v149 = (char *)&v140 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19);
  v148 = (char *)&v140 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v154 = (char *)&v140 - v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v150 = (char *)&v140 - v26;
  v27 = MEMORY[0x1E0C80A78](v25);
  v151 = (char *)&v140 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v165 = (char *)&v140 - v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v166 = (char *)&v140 - v32;
  MEMORY[0x1E0C80A78](v31);
  v143 = (char *)&v140 - v36;
  v37 = *a1;
  v162 = *v3;
  if (!v37[2])
  {
    v106 = v162;
    *a3 = v162;
LABEL_42:
    swift_retain(v106, v33, v34, v35);
    return;
  }
  if (!v162[2])
  {
    *a3 = v37;
    v106 = v37;
    goto LABEL_42;
  }
  v38 = v162;
  swift_retain(v162, v33, v34, v35);
  swift_retain(v37, v39, v40, v41);
  _swift_isClassOrObjCExistentialType((uint64_t)v12, v12);
  v42 = *(unsigned __int8 *)(v158 + 80);
  v172 = &_swiftEmptyArrayStorage;
  v43 = v38[2];
  v161 = v12;
  v141 = a3;
  if (v43)
  {
    v44 = v37[2];
    if (v44)
    {
      v169 = 0;
      v45 = 0;
      v46 = (v42 + 32) & ~v42;
      v142 = *(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v168 + 16);
      v47 = v151;
      v157 = v46;
      do
      {
        if (v169 >= v44)
          goto LABEL_53;
        v48 = *(_QWORD *)(v158 + 72);
        v49 = (void (*)(char *, char *, uint64_t))v153[2];
        v49(v143, (char *)v37 + v46 + v48 * v169, v7);
        if ((v45 & 0x8000000000000000) != 0 || v45 >= v162[2])
          goto LABEL_53;
        v50 = v162;
        v51 = v166;
        v159 = v45;
        v160 = (void (*)(char *, uint64_t, uint64_t))v49;
        v49(v166, (char *)v162 + v46 + v48 * v45, v7);
        v52 = v48;
        v53 = v143;
        v54 = v142(v143, v51, v7, v168);
        v55 = (void (*)(char *, uint64_t))v153[1];
        v55(v51, v7);
        v167 = v55;
        v55(v53, v7);
        v56 = (v54 & 1) == 0;
        if ((v54 & 1) != 0)
          v57 = v159;
        else
          v57 = v169;
        if (v56)
          v58 = v159;
        else
          v58 = v169;
        if (v56)
          v59 = v37;
        else
          v59 = v50;
        if (!v56)
          v50 = v37;
        v162 = v50;
        if (v58 >= v50[2])
LABEL_53:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
        v60 = (char *)v162 + v46 + v58 * v52;
        v61 = (uint64_t)v161;
        (*(void (**)(char *, char *, uint64_t *))(v158 + 16))(v163, v60, v161);
        v62 = v58 + 1;
        v63 = v57 >= v59[2];
        v156 = v52;
        v64 = v59;
        v159 = v62;
        if (v63)
        {
          v169 = v57;
          v37 = v59;
          v46 = v157;
        }
        else
        {
          v65 = &v163[*(int *)(v61 + 36)];
          v169 = v57;
          v46 = v157;
          v66 = v160;
          v155 = v65;
          v160(v165, (uint64_t)v65, v7);
          while (1)
          {
            if ((v169 & 0x8000000000000000) != 0 || v169 >= v64[2])
              goto LABEL_53;
            v67 = v7;
            v68 = v47;
            v69 = v169;
            v70 = (uint64_t)v64 + v46 + v169 * v156;
            v71 = v166;
            v66(v166, v70, v67);
            v72 = *(uint64_t (**)(char *, char *, uint64_t))(v168 + 32);
            v73 = v165;
            LODWORD(v164) = v72(v165, v71, v67);
            v74 = v71;
            v75 = v167;
            v167(v74, v67);
            v75(v73, v67);
            if ((v164 & 1) == 0)
              break;
            v47 = v68;
            v66(v68, (uint64_t)v65, v67);
            if (v69 >= v64[2])
              goto LABEL_53;
            v76 = v64;
            v7 = v67;
            v77 = v70 + *((int *)v161 + 9);
            v78 = v166;
            v66(v166, v77, v67);
            v79 = ((uint64_t (*)(char *, char *, uint64_t, uint64_t))v72)(v47, v78, v67, v168);
            v80 = v167;
            v167(v78, v7);
            v80(v47, v7);
            if ((v79 & 1) != 0)
            {
              ++v169;
              v64 = v76;
              v37 = v76;
            }
            else
            {
              v81 = v150;
              v66(v150, (uint64_t)v163, v7);
              if (v169 >= v76[2])
                goto LABEL_53;
              v82 = v154;
              v66(v154, v77, v7);
              v83 = v148;
              v66(v148, (uint64_t)v81, v7);
              v84 = v149;
              v66(v149, (uint64_t)v82, v7);
              v85 = v81;
              if (((*(uint64_t (**)(char *, char *, uint64_t))(v168 + 24))(v83, v84, v7) & 1) == 0)
                _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
              v86 = v167;
              v167(v84, v7);
              v86(v83, v7);
              v87 = *(void (**)(char *, uint64_t *))(v158 + 8);
              v164 = v76;
              v88 = (uint64_t)v161;
              v87(v163, v161);
              v89 = TupleTypeMetadata2;
              v90 = v145;
              v91 = &v145[*((int *)TupleTypeMetadata2 + 12)];
              v92 = (void (*)(char *, char *, uint64_t))v153[4];
              v92(v145, v85, v7);
              v92(v91, v154, v7);
              v93 = v146;
              v94 = &v146[*((int *)v89 + 12)];
              v160(v146, (uint64_t)v90, v7);
              v160(v94, (uint64_t)v91, v7);
              v95 = v152;
              v92(v152, v93, v7);
              v86(v94, v7);
              v96 = &v93[*((int *)v89 + 12)];
              v92(v93, v90, v7);
              v92(v96, v91, v7);
              v92(&v95[*(int *)(v88 + 36)], v96, v7);
              v86(v93, v7);
              v66 = v160;
              v97 = *(void (**)(char *, char *, uint64_t))(v158 + 32);
              v98 = v144;
              v97(v144, v95, v88);
              v97(v163, v98, v88);
              v99 = v169 + 1;
              v169 = v159;
              v159 = v99;
              v37 = v162;
              v162 = v164;
              v64 = v37;
              v47 = v151;
            }
            v46 = v157;
            v65 = v155;
            if ((uint64_t)v169 >= (uint64_t)v37[2])
              goto LABEL_36;
            v66(v165, (uint64_t)v155, v7);
          }
          v37 = v64;
          v46 = v157;
          v47 = v68;
          v7 = v67;
        }
LABEL_36:
        v100 = (uint64_t)v152;
        v101 = (uint64_t)v161;
        (*(void (**)(char *, char *, uint64_t *))(v158 + 32))(v152, v163, v161);
        v104 = type metadata accessor for Array(0, v101, v102, v103);
        Array.append(_:)(v100, v104);
        v105 = v162[2];
        v45 = v159;
        if (v159 >= v105)
          break;
        v44 = v37[2];
      }
      while (v169 < v44);
      if (v159 >= v105)
        goto LABEL_46;
LABEL_45:
      swift_release((uint64_t)v37);
      v108 = v161;
      v107 = v162;
      *(_QWORD *)&v170[0] = v162;
      v111 = type metadata accessor for ContiguousArray(0, (uint64_t)v161, v109, v110);
      WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ContiguousArray<A>, v111, v112);
      specialized MutableCollection.subscript.getter(v45, v111, WitnessTable);
      v114 = (uint64_t)v107;
      goto LABEL_48;
    }
    v169 = 0;
    v45 = 0;
    if (v43 > 0)
      goto LABEL_45;
  }
  else
  {
    v169 = 0;
  }
LABEL_46:
  swift_release((uint64_t)v162);
  if (v169 >= v37[2])
  {
    swift_release((uint64_t)v37);
    v131 = (uint64_t *)v141;
    v108 = v161;
    goto LABEL_50;
  }
  *(_QWORD *)&v170[0] = v37;
  v108 = v161;
  v117 = type metadata accessor for ContiguousArray(0, (uint64_t)v161, v115, v116);
  v119 = swift_getWitnessTable(&protocol conformance descriptor for ContiguousArray<A>, v117, v118);
  specialized MutableCollection.subscript.getter(v169, v117, v119);
  v114 = (uint64_t)v37;
LABEL_48:
  swift_release(v114);
  v170[0] = v171[0];
  v170[1] = v171[1];
  v122 = type metadata accessor for Array(0, (uint64_t)v108, v120, v121);
  v125 = type metadata accessor for ArraySlice(0, (uint64_t)v108, v123, v124);
  v127 = swift_getWitnessTable(&protocol conformance descriptor for ArraySlice<A>, v125, v126);
  Array.append<A>(contentsOf:)((uint64_t)v170, v122, v125, v127);
  v131 = (uint64_t *)v141;
LABEL_50:
  v132 = v172;
  v133 = swift_bridgeObjectRetain((unint64_t)v172, v128, v129, v130);
  v134 = _ArrayBuffer.requestNativeBuffer()(v133, v108);
  swift_bridgeObjectRelease((uint64_t)v132);
  if (!v134)
  {
    *(_QWORD *)&v171[0] = v132;
    v137 = type metadata accessor for Array(0, (uint64_t)v108, v135, v136);
    v139 = swift_getWitnessTable(&protocol conformance descriptor for [A], v137, v138);
    v134 = (uint64_t)_copyCollectionToContiguousArray<A>(_:)((uint64_t)v171, v137, v139);
  }
  swift_bridgeObjectRelease((uint64_t)v132);
  *v131 = v134;
}

void RangeSet.Ranges._intersection(_:)(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  __objc2_class **v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  void (*v48)(char *, uint64_t);
  unint64_t v49;
  uint64_t v50;
  void (*v51)(char *, unint64_t, uint64_t);
  unint64_t v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  char v55;
  unint64_t v56;
  BOOL v57;
  void (*v58)(char *, uint64_t);
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t (*v63)(void);
  char v64;
  char *v65;
  uint64_t (*v66)(char *, char *, uint64_t, uint64_t);
  char *v67;
  char v68;
  void (*v69)(char *, char *, uint64_t);
  char *v70;
  char *v71;
  void (*v72)(char *, uint64_t);
  uint64_t v73;
  char *v74;
  char v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  unint64_t *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  void (*v84)(char *, char *, uint64_t);
  char *v85;
  char *v86;
  void (*v87)(char *, char *, uint64_t);
  uint64_t v88;
  void (*v89)(char *, uint64_t);
  char *v90;
  uint64_t v91;
  void (*v92)(char *, uint64_t, uint64_t);
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  char v100;
  unint64_t v101;
  uint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t WitnessTable;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  unint64_t *TupleTypeMetadata2;
  char *v126;
  uint64_t v127;
  char *v128;
  void (*v129)(char *, unint64_t, uint64_t);
  uint64_t (*v130)(char *, uint64_t, uint64_t, uint64_t);
  char *v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  void (*v138)(char *, uint64_t);
  uint64_t v139;
  uint64_t v140;
  void (*v141)(char *, char *, uint64_t);
  unint64_t v142;
  __objc2_class **v143;
  __objc2_class **v144;

  v111 = a3;
  v6 = *(_QWORD *)(a2 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v6, v6, "lower upper ", 0);
  v7 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v124 = (char *)&v110 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v123 = (char *)&v110 - v10;
  v132 = *(_QWORD *)(v6 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v110 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v11);
  v120 = (char *)&v110 - v15;
  MEMORY[0x1E0C80A78](v14);
  v131 = (char *)&v110 - v16;
  v127 = *(_QWORD *)(a2 + 24);
  v18 = type metadata accessor for Range(0, v6, v127, v17);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = MEMORY[0x1E0C80A78](v18);
  v122 = (char *)&v110 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v110 - v23;
  v25 = MEMORY[0x1E0C80A78](v22);
  v121 = (char *)&v110 - v26;
  v27 = MEMORY[0x1E0C80A78](v25);
  v126 = (char *)&v110 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v31 = (char *)&v110 - v30;
  v32 = (uint64_t *)MEMORY[0x1E0C80A78](v29);
  v34 = (char *)&v110 - v33;
  v35 = *a1;
  v36 = *v3;
  _swift_isClassOrObjCExistentialType((uint64_t)v32, v32);
  v40 = *(unsigned __int8 *)(v19 + 80);
  v41 = &_swiftEmptyArrayStorage;
  v144 = &_swiftEmptyArrayStorage;
  v115 = *(_QWORD *)(v36 + 16);
  if (v115)
  {
    v42 = 0;
    v43 = 0;
    v44 = (v40 + 32) & ~v40;
    v114 = v36;
    v113 = v36 + v44;
    v45 = v35;
    v112 = v35 + v44;
    v119 = v13;
    v46 = v127;
    v118 = v19;
    v117 = v24;
    v47 = v126;
    v134 = v34;
    v139 = v45;
    v128 = v31;
    while (1)
    {
      if (v42 >= *(_QWORD *)(v114 + 16))
LABEL_46:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
      v50 = *(_QWORD *)(v19 + 72);
      v116 = v42;
      v51 = *(void (**)(char *, unint64_t, uint64_t))(v19 + 16);
      v140 = v43;
      v51(v34, v113 + v50 * v42, v18);
      v137 = *(_QWORD *)(v45 + 16);
      v129 = v51;
      v51(v31, (unint64_t)v34, v18);
      v52 = v140;
      v135 = v50;
      if (v140 >= v137)
      {
        v58 = *(void (**)(char *, uint64_t))(v19 + 8);
        v54 = (void (*)(char *, char *, uint64_t))v129;
LABEL_15:
        v138 = v58;
        v58(v31, v18);
      }
      else
      {
        v53 = v112 + v140 * v50;
        v54 = (void (*)(char *, char *, uint64_t))v129;
        while (1)
        {
          if (v52 >= *(_QWORD *)(v45 + 16))
            goto LABEL_46;
          v140 = v52;
          v55 = (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(v46 + 24))(v53 + *(int *)(v18 + 36), v31, v6, v46);
          v138 = *(void (**)(char *, uint64_t))(v19 + 8);
          v138(v31, v18);
          if ((v55 & 1) == 0)
            break;
          v56 = v140 + 1;
          v54(v31, v134, v18);
          v52 = v56;
          v53 += v135;
          v57 = v137 == v56;
          v45 = v139;
          if (v57)
          {
            v140 = v137;
            v34 = v134;
            v58 = v138;
            goto LABEL_15;
          }
        }
        v34 = v134;
        v45 = v139;
      }
      v54(v47, v34, v18);
      v59 = v140;
      if (v140 < v137)
        break;
LABEL_3:
      v48 = v138;
      v138(v47, v18);
      v142 = v140;
      v48(v34, v18);
LABEL_4:
      v49 = v116;
LABEL_5:
      v42 = v49 + 1;
      v43 = v142;
      if (v42 == v115)
      {
        v41 = v144;
        goto LABEL_43;
      }
    }
    v60 = v19;
    v61 = (char *)(v112 + v140 * v135);
    v142 = v140;
    while (1)
    {
      if (v59 < 0 || v142 >= *(_QWORD *)(v45 + 16))
        goto LABEL_46;
      v62 = &v47[*(int *)(v18 + 36)];
      v63 = *(uint64_t (**)(void))(v46 + 16);
      v136 = v61;
      v64 = ((uint64_t (*)(char *, char *, uint64_t, uint64_t))v63)(v61, v62, v6, v46);
      v138(v47, v18);
      if ((v64 & 1) == 0)
      {
        v31 = v128;
        v45 = v139;
        v19 = v60;
        v138(v34, v18);
        goto LABEL_4;
      }
      if (v142 >= *(_QWORD *)(v139 + 16))
        goto LABEL_46;
      v65 = v117;
      v54(v117, v136, v18);
      v66 = *(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v46 + 40);
      if ((v66(v34, v65, v6, v46) & 1) != 0)
      {
        v141 = *(void (**)(char *, char *, uint64_t))(v132 + 16);
        v141(v131, v34, v6);
      }
      else
      {
        v67 = &v34[*(int *)(v18 + 36)];
        v68 = ((uint64_t (*)(char *, char *, uint64_t, uint64_t))v63)(v67, v65, v6, v46);
        v69 = *(void (**)(char *, char *, uint64_t))(v132 + 16);
        v141 = v69;
        if ((v68 & 1) != 0)
        {
          v70 = v131;
          v71 = v67;
        }
        else
        {
          v70 = v131;
          v71 = v65;
        }
        v69(v70, v71, v6);
      }
      v72 = v138;
      v73 = *(int *)(v18 + 36);
      v74 = &v65[v73];
      v133 = &v34[v73];
      v75 = v63();
      v130 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v66;
      if ((v75 & 1) != 0)
        break;
      if ((v66(v34, v74, v6, v46) & 1) != 0)
      {
        v72(v65, v18);
        v76 = v120;
        v77 = v120;
        v78 = v34;
        goto LABEL_33;
      }
      v76 = v120;
      v141(v120, v74, v6);
      v72(v65, v18);
LABEL_35:
      v79 = v18;
      v80 = TupleTypeMetadata2;
      v81 = v123;
      v82 = &v123[*((int *)TupleTypeMetadata2 + 12)];
      v83 = v132;
      v84 = *(void (**)(char *, char *, uint64_t))(v132 + 32);
      v84(v123, v131, v6);
      v84(v82, v76, v6);
      v85 = v124;
      v86 = &v124[*((int *)v80 + 12)];
      v87 = v141;
      v141(v124, v81, v6);
      v87(v86, v82, v6);
      v88 = (uint64_t)v122;
      v84(v122, v85, v6);
      v89 = *(void (**)(char *, uint64_t))(v83 + 8);
      v89(v86, v6);
      v90 = &v85[*((int *)v80 + 12)];
      v84(v85, v81, v6);
      v84(v90, v82, v6);
      v84((char *)(v88 + *(int *)(v79 + 36)), v90, v6);
      v89(v85, v6);
      v91 = v118;
      v92 = *(void (**)(char *, uint64_t, uint64_t))(v118 + 32);
      v93 = v121;
      v92(v121, v88, v79);
      v92((char *)v88, (uint64_t)v93, v79);
      v96 = type metadata accessor for Array(0, v79, v94, v95);
      Array.append(_:)(v88, v96);
      v97 = v119;
      v141(v119, v133, v6);
      if (v142 >= *(_QWORD *)(v139 + 16))
        goto LABEL_46;
      v18 = v79;
      v60 = v91;
      v98 = v136;
      v99 = &v136[*(int *)(v79 + 36)];
      v46 = v127;
      v100 = v130(v97, (uint64_t)v99, v6, v127);
      v89(v97, v6);
      if ((v100 & 1) == 0)
      {
        v34 = v134;
        v138(v134, v18);
        v47 = v126;
        v31 = v128;
        v45 = v139;
        v49 = v116;
        v19 = v91;
        goto LABEL_5;
      }
      v101 = v142 + 1;
      v47 = v126;
      v34 = v134;
      v54 = (void (*)(char *, char *, uint64_t))v129;
      v129(v126, (unint64_t)v134, v18);
      v61 = &v98[v135];
      v142 = v101;
      v57 = v137 == v101;
      v31 = v128;
      v45 = v139;
      v59 = v140;
      if (v57)
      {
        v140 = v137;
        v19 = v60;
        goto LABEL_3;
      }
    }
    v72(v65, v18);
    v76 = v120;
    v77 = v120;
    v78 = v133;
LABEL_33:
    v141(v77, v78, v6);
    goto LABEL_35;
  }
LABEL_43:
  v102 = v111;
  v103 = swift_bridgeObjectRetain((unint64_t)v41, v37, v38, v39);
  v104 = _ArrayBuffer.requestNativeBuffer()(v103, (uint64_t *)v18);
  swift_bridgeObjectRelease((uint64_t)v41);
  if (!v104)
  {
    v143 = v41;
    v107 = type metadata accessor for Array(0, v18, v105, v106);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v107, v108);
    v104 = (uint64_t)_copyCollectionToContiguousArray<A>(_:)((uint64_t)&v143, v107, WitnessTable);
  }
  swift_bridgeObjectRelease((uint64_t)v41);
  *v102 = v104;
}

uint64_t RangeSet.subtracting(_:)@<X0>(unint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v5;
  unint64_t *v6;
  unint64_t *v8;

  v6 = *a1;
  *a5 = *v5;
  v8 = v6;
  return RangeSet.subtract(_:)(&v8, a2, a3, a4);
}

uint64_t RangeSet.isSubset(of:)(unint64_t **a1, uint64_t a2)
{
  unint64_t **v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  const char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  void (*v55)(uint64_t, uint64_t);
  char *v56;
  char v57;
  int64_t v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  unint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  const char *WitnessTable;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t *v77;
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  unint64_t *v81;
  unint64_t *v82;
  char v83;
  unint64_t *v84;
  unint64_t v85;
  __int128 v86;
  unint64_t *v87;

  v4 = *(_QWORD *)(a2 + 16);
  v70 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v69 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v6 + 24);
  v9 = type metadata accessor for Range(0, v4, v7, v8);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v68 = (uint64_t)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v74 = (char *)&v64 - v14;
  MEMORY[0x1E0C80A78](v13);
  v71 = (uint64_t)&v64 - v15;
  v16 = *a1;
  v17 = *v2;
  *(_QWORD *)&v80 = v16;
  v19 = type metadata accessor for RangeSet.Ranges(0, v4, v7, v18);
  swift_retain(v16, v20, v21, v22);
  WitnessTable = (const char *)swift_getWitnessTable(&protocol conformance descriptor for RangeSet<A>.Ranges, v19, v23);
  v73 = v19;
  Collection.subscript.getter(v19, (uint64_t)WitnessTable, (uint64_t)&v86);
  v64 = v16;
  swift_release((uint64_t)v16);
  v84 = v17;
  v85 = 0;
  v25 = (uint64_t *)(v17 + 2);
  v24 = v17[2];
  swift_retain(v17, v26, v27, v28);
  if (v24)
  {
    v65 = v4;
    v30 = v10;
    v66 = v7;
    v31 = 0;
    v76 = 0;
    v67 = (char *)&v85;
    v32 = WitnessTable;
    v33 = v73;
    v34 = v74;
    v75 = v30;
    while (1)
    {
      v35 = v71;
      RangeSet.Ranges.subscript.getter(v31, v33, v29, v71);
      v36 = *v25;
      *(_QWORD *)&v80 = 0;
      *((_QWORD *)&v80 + 1) = v36;
      specialized Collection._failEarlyRangeCheck(_:bounds:)(v67, (uint64_t)&v80, v33, v32);
      if (__OFADD__(v31, 1))
      {
        __break(1u);
LABEL_16:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
      }
      v85 = v31 + 1;
      v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 32))(v34, v35, v9);
      v38 = v87;
      v80 = v86;
      v81 = v87;
      MEMORY[0x1E0C80A78](v37);
      v39 = v34;
      v40 = v65;
      v41 = v66;
      v61 = v65;
      v62 = v66;
      v63 = v39;
      v43 = type metadata accessor for Slice(0, v33, (uint64_t)v32, v42);
      swift_retain(v38, v44, v45, v46);
      v48 = swift_getWitnessTable(&protocol conformance descriptor for Slice<A>, v43, v47);
      v49 = v76;
      Collection.firstIndex(where:)((uint64_t (*)(char *))partial apply for closure #1 in RangeSet.isSubset(of:), (uint64_t)(&v64 - 6), v43, v48, (uint64_t)&v82);
      swift_release((uint64_t)v81);
      v50 = (uint64_t)v87;
      if ((v83 & 1) != 0)
      {
        swift_release((uint64_t)v87);
        swift_release((uint64_t)v84);
        (*(void (**)(char *, uint64_t))(v75 + 8))(v74, v9);
        return 0;
      }
      v51 = v82;
      v78 = v86;
      v79 = (uint64_t)v87;
      v76 = v49;
      v77 = v82;
      v52 = v68;
      Slice.subscript.getter((uint64_t)&v77, v43, v68);
      swift_release(v50);
      v53 = v70;
      v54 = v69;
      (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v69, v52 + *(int *)(v9 + 36), v40);
      v55 = *(void (**)(uint64_t, uint64_t))(v75 + 8);
      v55(v52, v9);
      v56 = v74;
      v57 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v41 + 16))(v54, &v74[*(int *)(v9 + 36)], v40, v41);
      (*(void (**)(char *, uint64_t))(v53 + 8))(v54, v40);
      if ((v57 & 1) != 0)
        break;
      v82 = v64;
      v58 = v64[2];
      if (v58 < (uint64_t)v51)
        goto LABEL_16;
      *(_QWORD *)&v78 = v51;
      *((_QWORD *)&v78 + 1) = v58;
      v32 = WitnessTable;
      v33 = v73;
      Collection<>.subscript.getter((uint64_t)&v78, v73, (uint64_t)WitnessTable, (char *)&v80);
      v34 = v56;
      v55((uint64_t)v56, v9);
      v59 = (uint64_t)v81;
      v86 = v80;
      v87 = v81;
      v17 = v84;
      v31 = v85;
      v25 = (uint64_t *)(v84 + 2);
      v30 = v75;
      if (v85 == v84[2])
        goto LABEL_10;
    }
    swift_release((uint64_t)v84);
    v55((uint64_t)v56, v9);
    return 0;
  }
  else
  {
    v59 = (uint64_t)v87;
LABEL_10:
    swift_release((uint64_t)v17);
    swift_release(v59);
    return 1;
  }
}

uint64_t closure #1 in RangeSet.isSubset(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char v16;
  char v17;
  uint64_t v19;

  v8 = type metadata accessor for Range(0, a3, a4, a4);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v19 - v11;
  v13 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 24))(a1, a2, a3, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a1, v8);
  if ((v16 & 1) != 0)
    v17 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(a4 + 16))(v15, &v12[*(int *)(v8 + 36)], a3, a4);
  else
    v17 = 0;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, a3);
  return v17 & 1;
}

uint64_t RangeSet.isSuperset(of:)(unint64_t **a1, uint64_t a2)
{
  unint64_t **v2;
  unint64_t *v3;
  unint64_t *v5[2];

  v3 = *a1;
  v5[0] = *v2;
  v5[1] = v3;
  return RangeSet.isSubset(of:)(v5, a2) & 1;
}

uint64_t RangeSet.isStrictSubset(of:)(unint64_t **a1, uint64_t a2)
{
  unint64_t **v2;
  unint64_t *v4;
  unint64_t *v5;
  char v6;
  unint64_t *v8;
  unint64_t *v9;

  v4 = *a1;
  v5 = *v2;
  v8 = *a1;
  v9 = v5;
  if ((static RangeSet.== infix(_:_:)(&v9, &v8, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24)) & 1) != 0)
  {
    v6 = 0;
  }
  else
  {
    v8 = v4;
    v9 = v5;
    v6 = RangeSet.isSubset(of:)(&v8, a2);
  }
  return v6 & 1;
}

uint64_t RangeSet.isStrictSuperset(of:)(unint64_t **a1, uint64_t a2)
{
  unint64_t **v2;
  unint64_t *v4;
  unint64_t *v5;
  char v6;
  unint64_t *v8;
  unint64_t *v9;

  v4 = *a1;
  v5 = *v2;
  v8 = v5;
  v9 = v4;
  if ((static RangeSet.== infix(_:_:)(&v9, &v8, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24)) & 1) != 0)
  {
    v6 = 0;
  }
  else
  {
    v8 = v5;
    v9 = v4;
    v6 = RangeSet.isSubset(of:)(&v8, a2);
  }
  return v6 & 1;
}

BOOL RangeSet.isDisjoint(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[2];
  uint64_t v10;

  v5 = *v4;
  v9[0] = *a1;
  v9[1] = v5;
  v6 = type metadata accessor for RangeSet.Ranges(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  RangeSet.Ranges._intersection(_:)(v9, v6, &v10);
  v7 = *(_QWORD *)(v10 + 16);
  swift_release(v10);
  return v7 == 0;
}

uint64_t RangeSet.description.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  char v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *WitnessTable;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  BOOL v40;
  int64_t v41;
  int64_t v42;
  char v43;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  Swift::String::Index v52;
  Swift::String::Index v53;
  Swift::String::Index v54;
  Swift::String::Index v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  size_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _QWORD *inited;
  char *boxed_opaque_existential_0Tm;
  Swift::Int v73;
  uint64_t v74;
  char *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  int64_t v81;
  char v82;
  int64_t v83;
  char v84;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  Swift::String::Index v90;
  Swift::String::Index v91;
  Swift::String::Index v92;
  Swift::String::Index v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  char v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  size_t v113;
  Swift::Int v115;
  uint64_t v116;
  unsigned __int8 *v117;
  uint64_t v118;
  unsigned __int8 *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  Swift::UInt64 v125;
  __int128 v126;
  __int128 v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132[8];
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  unint64_t v136;

  v5 = *(_QWORD *)(a1 + 16);
  v129 = *(_QWORD *)(a1 + 24);
  v130 = v5;
  v6 = type metadata accessor for Range(0, v5, v129, a4);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v131 = (char *)&v124 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v124 - v11;
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v124 - v13;
  v15 = *v4;
  swift_bridgeObjectRelease(0xE000000000000000);
  v16 = 91;
  v17 = 0xE100000000000000;
  v135 = 91;
  v136 = 0xE100000000000000;
  v134 = (unint64_t)v15;
  v18 = v15[2];
  swift_retain(v15, v19, v20, v21);
  if (!v18)
    goto LABEL_47;
  v22 = 0;
  v128 = (char *)&v134 + 8;
  v23 = 1;
  v127 = xmmword_1816ABBA0;
  v126 = xmmword_1816ABBB0;
  v125 = 131073;
  do
  {
    if (v22 >= v18)
      goto LABEL_46;
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v12, (unint64_t)v15+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v22, v6);
    v24 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v24(v14, v12, v6);
    *(_QWORD *)&v133 = 0;
    *((_QWORD *)&v133 + 1) = v18;
    v26 = type metadata accessor for RangeSet.Ranges(0, v130, v129, v25);
    WitnessTable = (const char *)swift_getWitnessTable(&protocol conformance descriptor for RangeSet<A>.Ranges, v26, v27);
    specialized Collection._failEarlyRangeCheck(_:bounds:)(v128, (uint64_t)&v133, v26, WitnessTable);
    *((_QWORD *)&v134 + 1) = v22 + 1;
    v24(v131, v14, v6);
    if ((v23 & 1) == 0)
    {
      v32 = v135;
      v31 = v136;
      v33 = HIBYTE(v136) & 0xF;
      if ((v136 & 0x2000000000000000) != 0)
        v34 = HIBYTE(v136) & 0xF;
      else
        v34 = v135 & 0xFFFFFFFFFFFFLL;
      if (!v34 && (v135 & ~v136 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(v136);
        v135 = 8236;
        v136 = 0xE200000000000000;
        goto LABEL_41;
      }
      if ((v136 & 0x2000000000000000) != 0 && v33 <= 0xD)
      {
        v35 = 8 * (HIBYTE(v136) & 7);
        v36 = (-255 << v35) - 1;
        v37 = 44 << v35;
        v38 = v33 + 1;
        if (v33 >= 8)
        {
          v39 = v37 | v36 & v136;
LABEL_35:
          v68 = (32 << (8 * (v38 & 7u))) | ((-255 << (8 * (v38 & 7u))) - 1) & v39;
        }
        else
        {
          v32 = v37 | v36 & v135;
          if (v33 == 7)
          {
            v38 = 8;
            v39 = v136;
            goto LABEL_35;
          }
          v32 = (32 << (8 * (v38 & 7u))) | ((-255 << (8 * (v38 & 7u))) - 1) & v32;
          v68 = v136;
        }
        swift_bridgeObjectRelease(v136);
        swift_bridgeObjectRelease(0xE200000000000000);
        v69 = 0xA000000000000000;
        if (!(v32 & 0x8080808080808080 | v68 & 0x80808080808080))
          v69 = 0xE000000000000000;
        v135 = v32;
        v136 = (v69 & 0xFF00000000000000 | (v33 << 56) | v68 & 0xFFFFFFFFFFFFFFLL) + 0x200000000000000;
        goto LABEL_41;
      }
      swift_bridgeObjectRetain_n(0xE200000000000000, 6, v29, v30);
      if ((v31 & 0x1000000000000000) != 0)
      {
        v73 = String.UTF8View._foreignCount()();
        v41 = v73 + 2;
        if (__OFADD__(v73, 2))
        {
LABEL_45:
          __break(1u);
LABEL_46:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
        }
      }
      else
      {
        v40 = __OFADD__(v34, 2);
        v41 = v34 + 2;
        if (v40)
          goto LABEL_45;
      }
      if ((v32 & ~v31 & 0x2000000000000000) != 0
        && swift_isUniquelyReferenced_nonNull_native(v31 & 0xFFFFFFFFFFFFFFFLL))
      {
        v42 = _StringGuts.nativeUnusedCapacity.getter(v32, v31);
        if ((v43 & 1) != 0)
          goto LABEL_118;
        v45 = (v31 & 0x2000000000000000) == 0 && v42 > 1;
        if (v41 > 15 || v45)
        {
LABEL_33:
          _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v41, 2);
          swift_bridgeObjectRelease_n(0xE200000000000000, 6);
          v133 = v126;
          v66 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 2, (uint64_t)&v133, 2);
          _StringGuts.appendInPlace(_:isASCII:)(v66, v67, 1);
          swift_bridgeObjectRelease(0xE200000000000000);
          goto LABEL_41;
        }
      }
      else if (v41 > 15)
      {
        goto LABEL_33;
      }
      swift_bridgeObjectRelease_n(0xE200000000000000, 5);
      swift_bridgeObjectRetain(v31, v46, v47, v48);
      v49 = _StringGuts._convertedToSmall()(v32, v31);
      v51 = v50;
      swift_bridgeObjectRelease(v31);
      v52._rawBits = 1;
      v53._rawBits = v125;
      v54._rawBits = _StringGuts.validateScalarRange(_:)(v52, v53, 0x202CuLL, 0xE200000000000000);
      if (v54._rawBits < 0x10000)
        v54._rawBits |= 3;
      v56 = specialized String.init(_:)(v54, v55, 0x202CuLL, 0xE200000000000000);
      v58 = v57;
      swift_bridgeObjectRelease(0xE200000000000000);
      v59 = _StringGuts._convertedToSmall()(v56, v58);
      v124 = v60;
      swift_bridgeObjectRelease(v58);
      v61 = specialized _SmallString.init(_:appending:)(v49, v51, v59, v124);
      if ((v63 & 1) != 0)
        goto LABEL_117;
      v64 = v61;
      v65 = v62;
      swift_bridgeObjectRelease(v31);
      swift_bridgeObjectRelease(0xE200000000000000);
      v135 = v64;
      v136 = v65;
    }
LABEL_41:
    v70 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Any>();
    inited = swift_initStackObject(v70, v132);
    *((_OWORD *)inited + 1) = v127;
    inited[7] = v6;
    boxed_opaque_existential_0Tm = (char *)__swift_allocate_boxed_opaque_existential_0Tm(inited + 4);
    v24(boxed_opaque_existential_0Tm, v131, v6);
    specialized _debugPrint<A>(_:separator:terminator:to:)((uint64_t)inited, 0x20uLL, 0xE100000000000000, 0, 0xE000000000000000, &v135);
    swift_bridgeObjectRelease((uint64_t)inited);
    swift_bridgeObjectRelease(0xE000000000000000);
    swift_bridgeObjectRelease(0xE100000000000000);
    v23 = 0;
    v22 = *((_QWORD *)&v134 + 1);
    v15 = (unint64_t *)v134;
    v18 = *(_QWORD *)(v134 + 16);
  }
  while (*((_QWORD *)&v134 + 1) != v18);
  v16 = v135;
  v17 = v136;
LABEL_47:
  swift_release((uint64_t)v15);
  v76 = HIBYTE(v17) & 0xF;
  v77 = v16 & 0xFFFFFFFFFFFFLL;
  if ((v17 & 0x2000000000000000) != 0)
    v78 = HIBYTE(v17) & 0xF;
  else
    v78 = v16 & 0xFFFFFFFFFFFFLL;
  if (!v78 && (v16 & ~v17 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease(v17);
    return 93;
  }
  if ((v17 & 0x2000000000000000) != 0 && v76 != 15)
  {
    if (v76 < 8)
      v16 = (93 << (8 * (HIBYTE(v17) & 7u))) | ((-255 << (8 * (HIBYTE(v17) & 7u))) - 1) & v16;
    goto LABEL_56;
  }
  swift_bridgeObjectRetain_n(0xE100000000000000, 6, v74, v75);
  if ((v17 & 0x1000000000000000) != 0)
  {
    v115 = String.UTF8View._foreignCount()();
    v79 = v115 + 1;
    if (!__OFADD__(v115, 1))
      goto LABEL_59;
    goto LABEL_107;
  }
  v40 = __OFADD__(v78, 1);
  v79 = v78 + 1;
  if (v40)
  {
LABEL_107:
    __break(1u);
    goto LABEL_108;
  }
LABEL_59:
  v80 = v16 & ~v17;
  if ((v80 & 0x2000000000000000) == 0 || !swift_isUniquelyReferenced_nonNull_native(v17 & 0xFFFFFFFFFFFFFFFLL))
  {
    if (v79 <= 15)
      goto LABEL_76;
LABEL_65:
    v83 = _StringGuts.nativeUnusedCapacity.getter(v16, v17);
    v86 = (v84 & 1) == 0 && v83 > 0;
    if ((v80 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v17 & 0xFFFFFFFFFFFFFFFLL))
    {
      if (v86)
        goto LABEL_101;
    }
    else if (v86)
    {
LABEL_100:
      _StringGuts.grow(_:)(v79);
LABEL_101:
      swift_bridgeObjectRelease_n(0xE100000000000000, 6);
      v134 = xmmword_1816ABBC0;
      v112 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 1, (uint64_t)&v134, 1);
      _StringGuts.appendInPlace(_:isASCII:)(v112, v113, 1);
      swift_bridgeObjectRelease(0xE100000000000000);
      return v135;
    }
    v108 = _StringGuts.nativeCapacity.getter(v16, v17);
    if ((v109 & 1) != 0)
      v110 = 0;
    else
      v110 = v108;
    if (v110 + 0x4000000000000000 < 0)
    {
      __break(1u);
      goto LABEL_117;
    }
    v111 = 2 * v110;
    if (v111 > v79)
      v79 = v111;
    goto LABEL_100;
  }
  v81 = _StringGuts.nativeUnusedCapacity.getter(v16, v17);
  if ((v82 & 1) != 0)
  {
LABEL_118:
    v120 = 258;
LABEL_119:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v120, 0);
  }
  if (v79 > 15)
    goto LABEL_65;
  if ((v17 & 0x2000000000000000) != 0)
  {
    swift_bridgeObjectRelease_n(0xE100000000000000, 5);
    goto LABEL_77;
  }
  if (v81 > 0)
    goto LABEL_65;
LABEL_76:
  swift_bridgeObjectRelease_n(0xE100000000000000, 5);
  if ((v17 & 0x2000000000000000) != 0)
  {
LABEL_77:
    v77 = v17;
  }
  else if ((v17 & 0x1000000000000000) != 0)
  {
    v16 = _StringGuts._foreignConvertedToSmall()(v16, v17);
    v77 = v123;
  }
  else
  {
    if ((v16 & 0x1000000000000000) != 0)
    {
      v119 = (unsigned __int8 *)((v17 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      v119 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v16, v17);
      v77 = v87;
    }
    swift_bridgeObjectRetain(v17, v87, v88, v89);
    closure #1 in _StringGuts._convertedToSmall()(v119, v77, &v134);
    swift_bridgeObjectRelease(v17);
    v77 = *((_QWORD *)&v134 + 1);
    v16 = v134;
  }
  v90._rawBits = 1;
  v91._rawBits = 65537;
  v92._rawBits = _StringGuts.validateScalarRange(_:)(v90, v91, 0x5DuLL, 0xE100000000000000);
  if (v92._rawBits < 0x10000)
    v92._rawBits |= 3;
  v76 = specialized String.init(_:)(v92, v93, 0x5DuLL, 0xE100000000000000);
  v79 = v94;
  swift_bridgeObjectRelease(0xE100000000000000);
  if ((v79 & 0x2000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v79);
    goto LABEL_82;
  }
LABEL_108:
  v116 = v16;
  if ((v79 & 0x1000000000000000) != 0)
  {
    v76 = _StringGuts._foreignConvertedToSmall()(v76, v79);
    v122 = v121;
    swift_bridgeObjectRelease(v79);
    v79 = v122;
    v16 = v116;
  }
  else
  {
    if ((v76 & 0x1000000000000000) != 0)
    {
      v117 = (unsigned __int8 *)((v79 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v118 = v76 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v117 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v76, v79);
    }
    closure #1 in _StringGuts._convertedToSmall()(v117, v118, &v134);
    swift_bridgeObjectRelease(v79);
    v79 = *((_QWORD *)&v134 + 1);
    v76 = v134;
  }
LABEL_82:
  v95 = HIBYTE(v77) & 0xF;
  v96 = HIBYTE(v79) & 0xF;
  if ((unint64_t)(v96 + v95) > 0xF)
  {
LABEL_117:
    v120 = 266;
    goto LABEL_119;
  }
  if (v96)
  {
    v97 = 0;
    v98 = 0;
    do
    {
      v99 = v95 + v98;
      v100 = v98 + 1;
      if (v98 >= 8)
        v101 = v79;
      else
        v101 = v76;
      v102 = v101 >> (v97 & 0x38);
      v103 = (8 * v95 + v97) & 0x38;
      v104 = (-255 << v103) - 1;
      v105 = (unint64_t)v102 << v103;
      v106 = v105 | v104 & v77;
      v107 = v105 | v104 & v16;
      if (v99 < 8)
        v16 = v107;
      else
        v77 = v106;
      v97 += 8;
      v98 = v100;
    }
    while (v96 != v100);
  }
LABEL_56:
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(0xE100000000000000);
  return v16;
}

uint64_t RangeSet.Ranges.description.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t **v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  char v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  const char *WitnessTable;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  BOOL v38;
  int64_t v39;
  int64_t v40;
  char v41;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  Swift::String::Index v49;
  Swift::String::Index v50;
  Swift::String::Index v51;
  Swift::String::Index v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  size_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *inited;
  char *boxed_opaque_existential_0Tm;
  Swift::Int v70;
  uint64_t v71;
  char *v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  int64_t v78;
  char v79;
  int64_t v80;
  char v81;
  BOOL v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  Swift::String::Index v87;
  Swift::String::Index v88;
  Swift::String::Index v89;
  Swift::String::Index v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  char v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  size_t v110;
  Swift::Int v112;
  unsigned __int8 *v113;
  uint64_t v114;
  unsigned __int8 *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  Swift::UInt64 v123;
  __int128 v124;
  __int128 v125;
  char *v126;
  char *v127;
  uint64_t v128[8];
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  unint64_t v132;

  v6 = type metadata accessor for Range(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v127 = (char *)&v120 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v120 - v11;
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v120 - v13;
  v15 = *v4;
  swift_bridgeObjectRelease(0xE000000000000000);
  v16 = 91;
  v17 = 0xE100000000000000;
  v131 = 91;
  v132 = 0xE100000000000000;
  v130 = (unint64_t)v15;
  v18 = v15[2];
  swift_retain(v15, v19, v20, v21);
  if (!v18)
    goto LABEL_47;
  v22 = 0;
  v126 = (char *)&v130 + 8;
  v23 = 1;
  v125 = xmmword_1816ABBA0;
  v124 = xmmword_1816ABBB0;
  v123 = 131073;
  do
  {
    if (v22 >= v18)
      goto LABEL_46;
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v12, (unint64_t)v15+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v22, v6);
    v24 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v24(v14, v12, v6);
    *(_QWORD *)&v129 = 0;
    *((_QWORD *)&v129 + 1) = v18;
    WitnessTable = (const char *)swift_getWitnessTable(&protocol conformance descriptor for RangeSet<A>.Ranges, a1, v25);
    specialized Collection._failEarlyRangeCheck(_:bounds:)(v126, (uint64_t)&v129, a1, WitnessTable);
    *((_QWORD *)&v130 + 1) = v22 + 1;
    v24(v127, v14, v6);
    if ((v23 & 1) == 0)
    {
      v30 = v131;
      v29 = v132;
      v31 = HIBYTE(v132) & 0xF;
      if ((v132 & 0x2000000000000000) != 0)
        v32 = HIBYTE(v132) & 0xF;
      else
        v32 = v131 & 0xFFFFFFFFFFFFLL;
      if (!v32 && (v131 & ~v132 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(v132);
        v131 = 8236;
        v132 = 0xE200000000000000;
        goto LABEL_41;
      }
      if ((v132 & 0x2000000000000000) != 0 && v31 <= 0xD)
      {
        v33 = 8 * (HIBYTE(v132) & 7);
        v34 = (-255 << v33) - 1;
        v35 = 44 << v33;
        v36 = v31 + 1;
        if (v31 >= 8)
        {
          v37 = v35 | v34 & v132;
LABEL_35:
          v65 = (32 << (8 * (v36 & 7u))) | ((-255 << (8 * (v36 & 7u))) - 1) & v37;
        }
        else
        {
          v30 = v35 | v34 & v131;
          if (v31 == 7)
          {
            v36 = 8;
            v37 = v132;
            goto LABEL_35;
          }
          v30 = (32 << (8 * (v36 & 7u))) | ((-255 << (8 * (v36 & 7u))) - 1) & v30;
          v65 = v132;
        }
        swift_bridgeObjectRelease(v132);
        swift_bridgeObjectRelease(0xE200000000000000);
        v66 = 0xE000000000000000;
        if (v30 & 0x8080808080808080 | v65 & 0x80808080808080)
          v66 = 0xA000000000000000;
        v131 = v30;
        v132 = (v66 & 0xFF00000000000000 | (v31 << 56) | v65 & 0xFFFFFFFFFFFFFFLL) + 0x200000000000000;
        goto LABEL_41;
      }
      swift_bridgeObjectRetain_n(0xE200000000000000, 6, v27, v28);
      if ((v29 & 0x1000000000000000) != 0)
      {
        v70 = String.UTF8View._foreignCount()();
        v39 = v70 + 2;
        if (__OFADD__(v70, 2))
        {
LABEL_45:
          __break(1u);
LABEL_46:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
        }
      }
      else
      {
        v38 = __OFADD__(v32, 2);
        v39 = v32 + 2;
        if (v38)
          goto LABEL_45;
      }
      if ((v30 & ~v29 & 0x2000000000000000) != 0
        && swift_isUniquelyReferenced_nonNull_native(v29 & 0xFFFFFFFFFFFFFFFLL))
      {
        v40 = _StringGuts.nativeUnusedCapacity.getter(v30, v29);
        if ((v41 & 1) != 0)
          goto LABEL_118;
        v43 = (v29 & 0x2000000000000000) == 0 && v40 > 1;
        if (v39 > 15 || v43)
        {
LABEL_33:
          _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v39, 2);
          swift_bridgeObjectRelease_n(0xE200000000000000, 6);
          v129 = v124;
          v63 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 2, (uint64_t)&v129, 2);
          _StringGuts.appendInPlace(_:isASCII:)(v63, v64, 1);
          swift_bridgeObjectRelease(0xE200000000000000);
          goto LABEL_41;
        }
      }
      else if (v39 > 15)
      {
        goto LABEL_33;
      }
      swift_bridgeObjectRelease_n(0xE200000000000000, 5);
      swift_bridgeObjectRetain(v29, v44, v45, v46);
      v47 = _StringGuts._convertedToSmall()(v30, v29);
      v122 = v48;
      swift_bridgeObjectRelease(v29);
      v49._rawBits = 1;
      v50._rawBits = v123;
      v51._rawBits = _StringGuts.validateScalarRange(_:)(v49, v50, 0x202CuLL, 0xE200000000000000);
      if (v51._rawBits < 0x10000)
        v51._rawBits |= 3;
      v53 = specialized String.init(_:)(v51, v52, 0x202CuLL, 0xE200000000000000);
      v55 = v54;
      swift_bridgeObjectRelease(0xE200000000000000);
      v121 = _StringGuts._convertedToSmall()(v53, v55);
      v57 = v56;
      swift_bridgeObjectRelease(v55);
      v58 = specialized _SmallString.init(_:appending:)(v47, v122, v121, v57);
      if ((v60 & 1) != 0)
        goto LABEL_117;
      v61 = v58;
      v62 = v59;
      swift_bridgeObjectRelease(v29);
      swift_bridgeObjectRelease(0xE200000000000000);
      v131 = v61;
      v132 = v62;
    }
LABEL_41:
    v67 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Any>();
    inited = swift_initStackObject(v67, v128);
    *((_OWORD *)inited + 1) = v125;
    inited[7] = v6;
    boxed_opaque_existential_0Tm = (char *)__swift_allocate_boxed_opaque_existential_0Tm(inited + 4);
    v24(boxed_opaque_existential_0Tm, v127, v6);
    specialized _debugPrint<A>(_:separator:terminator:to:)((uint64_t)inited, 0x20uLL, 0xE100000000000000, 0, 0xE000000000000000, &v131);
    swift_bridgeObjectRelease((uint64_t)inited);
    swift_bridgeObjectRelease(0xE000000000000000);
    swift_bridgeObjectRelease(0xE100000000000000);
    v23 = 0;
    v22 = *((_QWORD *)&v130 + 1);
    v15 = (unint64_t *)v130;
    v18 = *(_QWORD *)(v130 + 16);
  }
  while (*((_QWORD *)&v130 + 1) != v18);
  v16 = v131;
  v17 = v132;
LABEL_47:
  swift_release((uint64_t)v15);
  v73 = HIBYTE(v17) & 0xF;
  v74 = v16 & 0xFFFFFFFFFFFFLL;
  if ((v17 & 0x2000000000000000) != 0)
    v75 = HIBYTE(v17) & 0xF;
  else
    v75 = v16 & 0xFFFFFFFFFFFFLL;
  if (!v75 && (v16 & ~v17 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease(v17);
    return 93;
  }
  if ((v17 & 0x2000000000000000) != 0 && v73 != 15)
  {
    if (v73 < 8)
      v16 = (93 << (8 * (HIBYTE(v17) & 7u))) | ((-255 << (8 * (HIBYTE(v17) & 7u))) - 1) & v16;
    goto LABEL_56;
  }
  swift_bridgeObjectRetain_n(0xE100000000000000, 6, v71, v72);
  if ((v17 & 0x1000000000000000) != 0)
  {
    v112 = String.UTF8View._foreignCount()();
    v76 = v112 + 1;
    if (!__OFADD__(v112, 1))
      goto LABEL_59;
    goto LABEL_107;
  }
  v38 = __OFADD__(v75, 1);
  v76 = v75 + 1;
  if (v38)
  {
LABEL_107:
    __break(1u);
    goto LABEL_108;
  }
LABEL_59:
  v77 = v16 & ~v17;
  if ((v77 & 0x2000000000000000) == 0 || !swift_isUniquelyReferenced_nonNull_native(v17 & 0xFFFFFFFFFFFFFFFLL))
  {
    if (v76 <= 15)
      goto LABEL_76;
LABEL_65:
    v80 = _StringGuts.nativeUnusedCapacity.getter(v16, v17);
    v83 = (v81 & 1) == 0 && v80 > 0;
    if ((v77 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v17 & 0xFFFFFFFFFFFFFFFLL))
    {
      if (v83)
        goto LABEL_101;
    }
    else if (v83)
    {
LABEL_100:
      _StringGuts.grow(_:)(v76);
LABEL_101:
      swift_bridgeObjectRelease_n(0xE100000000000000, 6);
      v130 = xmmword_1816ABBC0;
      v109 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 1, (uint64_t)&v130, 1);
      _StringGuts.appendInPlace(_:isASCII:)(v109, v110, 1);
      swift_bridgeObjectRelease(0xE100000000000000);
      return v131;
    }
    v105 = _StringGuts.nativeCapacity.getter(v16, v17);
    if ((v106 & 1) != 0)
      v107 = 0;
    else
      v107 = v105;
    if (v107 + 0x4000000000000000 < 0)
    {
      __break(1u);
      goto LABEL_117;
    }
    v108 = 2 * v107;
    if (v108 > v76)
      v76 = v108;
    goto LABEL_100;
  }
  v78 = _StringGuts.nativeUnusedCapacity.getter(v16, v17);
  if ((v79 & 1) != 0)
  {
LABEL_118:
    v116 = 258;
LABEL_119:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v116, 0);
  }
  if (v76 > 15)
    goto LABEL_65;
  if ((v17 & 0x2000000000000000) != 0)
  {
    swift_bridgeObjectRelease_n(0xE100000000000000, 5);
    goto LABEL_77;
  }
  if (v78 > 0)
    goto LABEL_65;
LABEL_76:
  swift_bridgeObjectRelease_n(0xE100000000000000, 5);
  if ((v17 & 0x2000000000000000) != 0)
  {
LABEL_77:
    v74 = v17;
  }
  else if ((v17 & 0x1000000000000000) != 0)
  {
    v16 = _StringGuts._foreignConvertedToSmall()(v16, v17);
    v74 = v119;
  }
  else
  {
    if ((v16 & 0x1000000000000000) != 0)
    {
      v115 = (unsigned __int8 *)((v17 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      v115 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v16, v17);
      v74 = v84;
    }
    swift_bridgeObjectRetain(v17, v84, v85, v86);
    closure #1 in _StringGuts._convertedToSmall()(v115, v74, &v130);
    swift_bridgeObjectRelease(v17);
    v74 = *((_QWORD *)&v130 + 1);
    v16 = v130;
  }
  v87._rawBits = 1;
  v88._rawBits = 65537;
  v89._rawBits = _StringGuts.validateScalarRange(_:)(v87, v88, 0x5DuLL, 0xE100000000000000);
  if (v89._rawBits < 0x10000)
    v89._rawBits |= 3;
  v73 = specialized String.init(_:)(v89, v90, 0x5DuLL, 0xE100000000000000);
  v76 = v91;
  swift_bridgeObjectRelease(0xE100000000000000);
  if ((v76 & 0x2000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v76);
    goto LABEL_82;
  }
LABEL_108:
  if ((v76 & 0x1000000000000000) != 0)
  {
    v73 = _StringGuts._foreignConvertedToSmall()(v73, v76);
    v118 = v117;
    swift_bridgeObjectRelease(v76);
    v76 = v118;
  }
  else
  {
    if ((v73 & 0x1000000000000000) != 0)
    {
      v113 = (unsigned __int8 *)((v76 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v114 = v73 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v113 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v73, v76);
    }
    closure #1 in _StringGuts._convertedToSmall()(v113, v114, &v130);
    swift_bridgeObjectRelease(v76);
    v76 = *((_QWORD *)&v130 + 1);
    v73 = v130;
  }
LABEL_82:
  v92 = HIBYTE(v74) & 0xF;
  v93 = HIBYTE(v76) & 0xF;
  if ((unint64_t)(v93 + v92) > 0xF)
  {
LABEL_117:
    v116 = 266;
    goto LABEL_119;
  }
  if (v93)
  {
    v94 = 0;
    v95 = 0;
    do
    {
      v96 = v92 + v95;
      v97 = v95 + 1;
      if (v95 >= 8)
        v98 = v76;
      else
        v98 = v73;
      v99 = v98 >> (v94 & 0x38);
      v100 = (8 * v92 + v94) & 0x38;
      v101 = (-255 << v100) - 1;
      v102 = (unint64_t)v99 << v100;
      v103 = v102 | v101 & v74;
      v104 = v102 | v101 & v16;
      if (v96 < 8)
        v16 = v104;
      else
        v74 = v103;
      v94 += 8;
      v95 = v97;
    }
    while (v93 != v97);
  }
LABEL_56:
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(0xE100000000000000);
  return v16;
}

_QWORD *MutableCollection<>.sort(by:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t WitnessTable;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  uint64_t *v55;
  uint64_t v56;
  const char *v57;
  char *v58;
  uint64_t v59;
  int64_t *v60;
  unint64_t v61;
  unint64_t AssociatedConformanceWitness;
  void (*v63)(unint64_t *, unint64_t);
  unint64_t *v64;
  char *v65;
  uint64_t v66;
  uint64_t (*v67)(char *, uint64_t, unint64_t);
  unint64_t v68;
  int v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, char *, unint64_t);
  void (*v75)(char *, char *, unint64_t);
  BOOL v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t *v80;
  char v81;
  const char *v82;
  char *v83;
  unint64_t *v84;
  int v85;
  id v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t (*v90)(char *, uint64_t, unint64_t);
  char *v91;
  uint64_t v92;
  char *v93;
  unint64_t *TupleTypeMetadata2;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t AssociatedTypeWitness;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116[16];
  uint64_t v117;
  uint64_t v118;
  void *v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  const char *v126;

  v112 = a5;
  v114 = a2;
  v8 = *(_QWORD *)(a4 + 8);
  v111 = *(_QWORD *)(v8 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v111, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v96 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v92 = *(_QWORD *)(v96 + 64);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v95 = (char *)&v88 - v9;
  v10 = swift_getAssociatedTypeWitness(255, (const char *)v8, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v13 = type metadata accessor for Optional(0, v10, v11, v12);
  v107 = *(_QWORD *)(v13 - 8);
  v108 = v13;
  v14 = MEMORY[0x1E0C80A78](v13);
  v106 = (char *)&v88 - v15;
  v105 = *(_QWORD *)(v10 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v104 = (char *)&v88 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v103 = (char *)&v88 - v18;
  v109 = v10;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v10, (uint64_t)&type metadata for Int, 0, 0);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v93 = (char *)&v88 - v19;
  v20 = swift_getAssociatedTypeWitness(0, (const char *)v8, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Indices);
  v99 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v100 = (char *)&v88 - v21;
  v102 = v8;
  v22 = *(_QWORD *)(swift_getAssociatedConformanceWitness(v8, a3, v20, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Indices: Collection)+ 8);
  v24 = lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, (uint64_t)&protocol conformance descriptor for <> Range<A>, v23);
  v122 = v20;
  v123 = &unk_1E0EAAE60;
  v124 = v22;
  v125 = v24;
  v98 = type metadata accessor for Zip2Sequence(0, (uint64_t)&v122);
  MEMORY[0x1E0C80A78](v98);
  v97 = (char *)&v88 - v25;
  v122 = v20;
  v123 = &unk_1E0EAAE60;
  v101 = v22;
  v124 = v22;
  v125 = v24;
  v26 = type metadata accessor for Zip2Sequence.Iterator(0, (uint64_t)&v122);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = MEMORY[0x1E0C80A78](v26);
  v30 = (char *)&v88 - v29;
  v31 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v28);
  v33 = (char *)&v88 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = a3;
  v118 = a4;
  v34 = v113;
  v119 = v112;
  v120 = a1;
  v112 = a1;
  v121 = v114;
  v35 = a4;
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, void (*)(uint64_t), char *, void *, uint64_t))(a4 + 80))(&v122, partial apply for closure #1 in MutableCollection<>.sort(by:), v116, &unk_1E0EB1298, a3);
  if (!v34)
  {
    v37 = v111;
    v90 = (uint64_t (*)(char *, uint64_t, unint64_t))v20;
    v91 = v30;
    v89 = v27;
    v113 = v26;
    v88 = v35;
    if (v122 == 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v33, v115, a3);
      v122 = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 56))(a3, v37);
      v38 = AssociatedTypeWitness;
      v41 = type metadata accessor for ContiguousArray(0, AssociatedTypeWitness, v39, v40);
      WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ContiguousArray<A>, v41, v42);
      v45 = swift_getWitnessTable(&protocol conformance descriptor for ContiguousArray<A>, v41, v44);
      MutableCollection<>.sort(by:)(v112, v114, v41, WitnessTable, v45);
      v46 = (const char *)v122;
      v114 = 0;
      v47 = v97;
      (*(void (**)(uint64_t))(v102 + 96))(a3);
      v111 = (uint64_t)v46;
      v126 = v46;
      v50 = type metadata accessor for Array(0, v38, v48, v49);
      v52 = swift_getWitnessTable(&protocol conformance descriptor for [A], v50, v51);
      RandomAccessCollection<>.indices.getter(v50, v52, (uint64_t)&protocol witness table for Int, (char *)&v122);
      v54 = v122;
      v53 = (uint64_t)v123;
      v112 = v123;
      v55 = (uint64_t *)&v47[*(int *)(v98 + 52)];
      *v55 = v122;
      v55[1] = v53;
      v56 = (uint64_t)v90;
      (*(void (**)(char *, char *, uint64_t (*)(char *, uint64_t, unint64_t)))(v99 + 32))(v100, v47, v90);
      v57 = (const char *)v101;
      v58 = v91;
      (*(void (**)(uint64_t, uint64_t))(v101 + 32))(v56, v101);
      v59 = v113;
      v60 = (int64_t *)&v58[*(int *)(v113 + 52)];
      *v60 = v54;
      v60[1] = v53;
      v100 = (char *)v60;
      v60[2] = v54;
      v102 = *(int *)(v59 + 56);
      v58[v102] = 0;
      v61 = swift_getAssociatedTypeWitness(255, v57, v56, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v57, v56, v61, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
      v63 = *(void (**)(unint64_t *, unint64_t))(AssociatedConformanceWitness + 16);
      v101 = v61;
      v64 = swift_checkMetadataState(0, v61);
      v65 = v106;
      v99 = AssociatedConformanceWitness;
      v98 = (uint64_t)v63;
      v63(v64, AssociatedConformanceWitness);
      v66 = v105;
      v67 = *(uint64_t (**)(char *, uint64_t, unint64_t))(v105 + 48);
      v68 = v109;
      v69 = v67(v65, 1, v109);
      v70 = v107;
      v71 = v104;
      if (v69 == 1)
      {
LABEL_4:
        (*(void (**)(char *))(v70 + 8))(v65);
      }
      else
      {
        v74 = *(void (**)(char *, char *, unint64_t))(v66 + 32);
        v97 = (char *)(v111 & 0xC000000000000001);
        while (1)
        {
          v75 = v74;
          v74(v103, v65, v68);
          if (v112 == (void *)v54)
            break;
          if (v54 >= (uint64_t)v112)
            _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Range.swift", 17, 2, 0x131uLL, 0);
          v90 = v67;
          v76 = v97 == 0;
          *((_QWORD *)v100 + 2) = v54 + 1;
          v77 = v71;
          v78 = *((int *)TupleTypeMetadata2 + 12);
          v79 = v93;
          v75(v93, v103, v68);
          *(_QWORD *)&v79[v78] = v54;
          v80 = (uint64_t *)AssociatedTypeWitness;
          v75(v77, v79, v68);
          v81 = v76 | ~_swift_isClassOrObjCExistentialType((uint64_t)v80, v80);
          v82 = (const char *)v111;
          Array._checkSubscript(_:wasNativeTypeChecked:)(v54, v81 & 1);
          if ((v81 & 1) != 0)
          {
            v83 = v95;
            (*(void (**)(char *, const char *, uint64_t *))(v96 + 16))(v95, &v82[((*(unsigned __int8 *)(v96 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v96 + 80))+ *(_QWORD *)(v96 + 72) * v54], v80);
          }
          else
          {
            v86 = _ArrayBuffer._getElementSlowPath(_:)(v54, (uint64_t)v82, v80);
            v87 = v86;
            if (v92 != 8)
            {
              swift_unknownObjectRelease(v86);
              _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
            }
            v122 = (uint64_t)v86;
            v83 = v95;
            (*(void (**)(char *, uint64_t *, unint64_t))(v96 + 16))(v95, &v122, AssociatedTypeWitness);
            swift_unknownObjectRelease(v87);
          }
          v58 = v91;
          v67 = v90;
          v71 = v104;
          (*(void (**)(char *, char *, uint64_t))(v88 + 24))(v83, v104, a3);
          v84 = swift_checkMetadataState(0, v101);
          v65 = v106;
          ((void (*)(unint64_t *, unint64_t))v98)(v84, v99);
          v68 = v109;
          v85 = v67(v65, 1, v109);
          ++v54;
          v70 = v107;
          v66 = v105;
          v74 = v75;
          if (v85 == 1)
            goto LABEL_4;
        }
        (*(void (**)(char *))(v66 + 8))(v103);
      }
      v72 = v113;
      v73 = v89;
      v58[v102] = 1;
      (*(void (**)(char *, uint64_t))(v73 + 8))(v58, v72);
      return (_QWORD *)swift_release(v111);
    }
  }
  return result;
}

uint64_t RangeSet.Ranges._indicesOfRange(_:in:includeAdjacent:)(uint64_t a1, _QWORD *a2, char a3, uint64_t a4)
{
  return specialized RangeSet.Ranges._indicesOfRange(_:in:includeAdjacent:)(a1, a2, a3, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24));
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance RangeSet<A>.Ranges(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for RangeSet<A>.Ranges, a1, a3);
  return Collection.underestimatedCount.getter(a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance RangeSet<A>.Ranges(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for RangeSet<A>.Ranges, a1, a3);
  return Collection._copyToContiguousArray()(a1, WitnessTable);
}

uint64_t RangeSet.Ranges.startIndex.getter()
{
  return 0;
}

uint64_t RangeSet.Ranges.count.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16);
}

uint64_t protocol witness for Collection.endIndex.getter in conformance RangeSet<A>.Ranges@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RangeSet.Ranges.count.getter();
  *a1 = result;
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance RangeSet<A>.Ranges(uint64_t **a1, unint64_t *a2, uint64_t a3))()
{
  uint64_t *v6;
  uint64_t v7;

  v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)RangeSet.Ranges.subscript.read(v6, *a2, a3, v7);
  return protocol witness for Collection.subscript.read in conformance _ArrayBuffer<A>;
}

uint64_t (*RangeSet.Ranges.subscript.read(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;

  v7 = type metadata accessor for Range(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  *a1 = v7;
  v8 = *(_QWORD *)(v7 - 8);
  a1[1] = v8;
  a1[2] = (uint64_t)malloc(*(_QWORD *)(v8 + 64));
  if ((a2 & 0x8000000000000000) != 0 || *(_QWORD *)(*(_QWORD *)v4 + 16) <= a2)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
  (*(void (**)(void))(v8 + 16))();
  return _ArrayBuffer.subscript.read;
}

uint64_t protocol witness for Collection.indices.getter in conformance RangeSet<A>.Ranges@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, char *a3@<X8>)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for RangeSet<A>.Ranges, a1, a2);
  return RandomAccessCollection<>.indices.getter(a1, WitnessTable, (uint64_t)&protocol witness table for Int, a3);
}

uint64_t protocol witness for Collection.index(after:) in conformance RangeSet<A>.Ranges@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for RangeSet<A>.Ranges, a2, a3);
  return RandomAccessCollection<>.index(after:)(a1, a2, WitnessTable, (uint64_t)&protocol witness table for Int, a4);
}

_QWORD *protocol witness for Collection.formIndex(after:) in conformance RangeSet<A>.Ranges(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Collection.formIndex(after:) in conformance RangeSet<A>.Ranges(a1, a2, a3, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _UNKNOWN **))RandomAccessCollection<>.index(after:));
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance RangeSet<A>.Ranges@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for RangeSet<A>.Ranges, a1, a2);
  return RandomAccessCollection<>.index(before:)(a1, WitnessTable, (uint64_t)&protocol witness table for Int, a3);
}

_QWORD *protocol witness for BidirectionalCollection.formIndex(before:) in conformance RangeSet<A>.Ranges(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Collection.formIndex(after:) in conformance RangeSet<A>.Ranges(a1, a2, a3, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _UNKNOWN **))RandomAccessCollection<>.index(before:));
}

_QWORD *protocol witness for Collection.formIndex(after:) in conformance RangeSet<A>.Ranges(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *(*a4)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _UNKNOWN **))
{
  uint64_t WitnessTable;
  _QWORD *result;
  uint64_t v9;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for RangeSet<A>.Ranges, a2, a3);
  result = a4(&v9, a1, a2, WitnessTable, &protocol witness table for Int);
  *a1 = v9;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance RangeSet<A>.Ranges@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for RangeSet<A>.Ranges, a3, a3);
  return RandomAccessCollection<>.index(_:offsetBy:)(a1, a2, a3, WitnessTable, (uint64_t)&protocol witness table for Int, a4);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance RangeSet<A>.Ranges@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for RangeSet<A>.Ranges, a4, a3);
  return RandomAccessCollection.index(_:offsetBy:limitedBy:)(a1, a2, a3, a4, WitnessTable, a5);
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance RangeSet<A>.Ranges(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for RangeSet<A>.Ranges, a3, a3);
  return RandomAccessCollection<>.distance(from:to:)(a1, a2, a3, WitnessTable, (uint64_t)&protocol witness table for Int);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance RangeSet<A>.Ranges(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static RangeSet.Ranges.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

void RangeSet.Ranges<>.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  Swift::UInt v13;
  unint64_t v14;
  unint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  Swift::UInt v18;

  v7 = *(_QWORD *)(a2 + 16);
  v8 = type metadata accessor for Range(0, v7, *(_QWORD *)(a2 + 24), a4);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v17 - v10;
  v12 = *v4;
  v13 = *(_QWORD *)(*v4 + 16);
  Hasher._combine(_:)(v13);
  v18 = v13;
  if (v13)
  {
    v14 = 0;
    do
    {
      if (v14 >= *(_QWORD *)(v12 + 16))
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
      v15 = v14 + 1;
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v11, v12+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v14, v8);
      v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 24);
      v16(a1, v7, a3);
      v16(a1, v7, a3);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      v14 = v15;
    }
    while (v18 != v15);
  }
}

Swift::Int RangeSet.Ranges<>.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  _QWORD v6[5];
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v9 = *v4;
  v6[0] = 0;
  v6[1] = _swift_stdlib_Hashing_parameters ^ 0x736F6D6570736575;
  v6[2] = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v6[3] = _swift_stdlib_Hashing_parameters ^ 0x6C7967656E657261;
  v6[4] = unk_1ECD25520 ^ 0x7465646279746573;
  v7 = 0u;
  v8 = 0u;
  RangeSet.Ranges<>.hash(into:)((uint64_t)v6, a1, a2, a4);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <> RangeSet<A>.Ranges(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return RangeSet.Ranges<>.hashValue.getter(a1, *(_QWORD *)(a2 - 8), a3, a4);
}

void protocol witness for Hashable.hash(into:) in conformance <> RangeSet<A>.Ranges(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  RangeSet.Ranges<>.hash(into:)(a1, a2, *(_QWORD *)(a3 - 8), a4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <> RangeSet<A>.Ranges(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance <> ClosedRange<A><>.Index(a1, a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))RangeSet.Ranges<>.hash(into:));
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance _Pair<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _Pair<A>, a1, a2);
  return RandomAccessCollection<>.index(before:)(a1, WitnessTable, (uint64_t)&protocol witness table for Int, a3);
}

_QWORD *protocol witness for BidirectionalCollection.formIndex(before:) in conformance _Pair<A>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance _Pair<A>(a1, a2, a3, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _UNKNOWN **))RandomAccessCollection<>.index(before:));
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance _Pair<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _Pair<A>, a3, a3);
  return RandomAccessCollection<>.index(_:offsetBy:)(a1, a2, a3, WitnessTable, (uint64_t)&protocol witness table for Int, a4);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance _Pair<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _Pair<A>, a4, a3);
  return RandomAccessCollection.index(_:offsetBy:limitedBy:)(a1, a2, a3, a4, WitnessTable, a5);
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance _Pair<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _Pair<A>, a3, a3);
  return RandomAccessCollection<>.distance(from:to:)(a1, a2, a3, WitnessTable, (uint64_t)&protocol witness table for Int);
}

void protocol witness for Collection.endIndex.getter in conformance _Pair<A>(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance _Pair<A>(uint64_t **a1, uint64_t *a2, uint64_t a3))()
{
  uint64_t *v6;

  v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)_Pair.subscript.read(v6, *a2, a3);
  return protocol witness for Collection.subscript.read in conformance _ArrayBuffer<A>;
}

void (*_Pair.subscript.read(uint64_t *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t *TupleTypeMetadata2;
  char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  void (*v16)(char *, uint64_t);
  char *v18;

  v6 = *(_QWORD *)(a3 + 16);
  *a1 = v6;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v6, v6, "first second ", 0);
  v8 = (char *)malloc(*(_QWORD *)(*(TupleTypeMetadata2 - 1) + 64));
  a1[1] = (uint64_t)v8;
  v9 = *(_QWORD *)(v6 - 8);
  v10 = malloc(*(_QWORD *)(v9 + 64));
  a1[2] = (uint64_t)v10;
  if (a2 == 1)
  {
    v11 = *((int *)TupleTypeMetadata2 + 12);
    v12 = &v8[v11];
    v13 = &v8[v11];
    v18 = v8;
  }
  else
  {
    if (a2)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index is out of range", 21, 2, "Swift/RangeSetRanges.swift", 26, 2, 0x19EuLL, 0);
    v11 = *((int *)TupleTypeMetadata2 + 12);
    v12 = &v8[v11];
    v13 = v8;
    v18 = &v8[v11];
  }
  v14 = v3 + v11;
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v15(v8, v3, v6);
  v15(v12, v14, v6);
  (*(void (**)(void *, char *, uint64_t))(v9 + 32))(v10, v13, v6);
  v16 = *(void (**)(char *, uint64_t))(v9 + 8);
  a1[3] = (uint64_t)v16;
  v16(v18, v6);
  return _Pair.subscript.read;
}

void _Pair.subscript.read(uint64_t a1)
{
  void *v1;
  void *v2;

  v1 = *(void **)(a1 + 16);
  v2 = *(void **)(a1 + 8);
  (*(void (**)(void *, _QWORD))(a1 + 24))(v1, *(_QWORD *)a1);
  free(v1);
  free(v2);
}

uint64_t protocol witness for Collection.indices.getter in conformance _Pair<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, char *a3@<X8>)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _Pair<A>, a1, a2);
  return RandomAccessCollection<>.indices.getter(a1, WitnessTable, (uint64_t)&protocol witness table for Int, a3);
}

uint64_t protocol witness for Collection.index(after:) in conformance _Pair<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _Pair<A>, a2, a3);
  return RandomAccessCollection<>.index(after:)(a1, a2, WitnessTable, (uint64_t)&protocol witness table for Int, a4);
}

_QWORD *protocol witness for Collection.formIndex(after:) in conformance _Pair<A>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance _Pair<A>(a1, a2, a3, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _UNKNOWN **))RandomAccessCollection<>.index(after:));
}

_QWORD *protocol witness for BidirectionalCollection.formIndex(before:) in conformance _Pair<A>(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *(*a4)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _UNKNOWN **))
{
  uint64_t WitnessTable;
  _QWORD *result;
  uint64_t v9;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _Pair<A>, a2, a3);
  result = a4(&v9, a1, a2, WitnessTable, &protocol witness table for Int);
  *a1 = v9;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance _Pair<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Sequence.makeIterator() in conformance _FixedArray16<A>(a1, (uint64_t)&protocol conformance descriptor for _Pair<A>, a2);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance _FixedArray16<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v8;
  uint64_t WitnessTable;
  uint64_t v10;
  uint64_t result;

  v6 = v3;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(a3, v6, a1);
  WitnessTable = swift_getWitnessTable(a2, a1, v8);
  result = type metadata accessor for IndexingIterator(0, a1, WitnessTable, v10);
  *(_QWORD *)(a3 + *(int *)(result + 36)) = 0;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance _Pair<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _Pair<A>, a1, a3);
  return Collection.underestimatedCount.getter(a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance _Pair<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _Pair<A>, a1, a3);
  return Collection._copyToContiguousArray()(a1, WitnessTable);
}

uint64_t Mirror.init(internalReflecting:subjectType:customAncestor:)@<X0>(swift::SwiftError **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t *v8;
  swift::SwiftError **v9;
  unint64_t *DynamicType;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  char v20;
  char v21;
  uint64_t result;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  const char *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  _BOOL4 isUniquelyReferenced_nonNull_native;
  int64_t v43;
  int64_t v44;
  char v45;
  BOOL v47;
  unsigned __int8 *v48;
  uint64_t v49;
  Swift::String::Index v50;
  Swift::String::Index v51;
  Swift::String::Index v52;
  Swift::String::Index v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  char *v75;
  size_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  BOOL v102;
  int64_t v103;
  unint64_t v104;
  int64_t v105;
  id v106;
  uint64_t v107;
  char *v108;
  size_t v109;
  uint64_t v110;
  unint64_t v111;
  unsigned __int8 *v112;
  uint64_t v113;
  Swift::String::Index v114;
  Swift::String::Index v115;
  Swift::String::Index v116;
  Swift::String::Index v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  char *v127;
  size_t v128;
  char *v129;
  size_t v130;
  char v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  char v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  char v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  char v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  int64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  Swift::String::Index v173;
  Swift::String::Index v174;
  Swift::String::Index v175;
  Swift::String::Index v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  char v185;
  unint64_t v186;
  char *v187;
  size_t v188;
  Swift::String::Index v189;
  Swift::String::Index v190;
  Swift::String::Index v191;
  Swift::String::Index v192;
  Swift::String::Index v193;
  Swift::String::Index v194;
  Swift::String::Index v195;
  Swift::String::Index v196;
  Swift::Int v197;
  unsigned __int8 *v198;
  uint64_t v199;
  Swift::Int v200;
  unsigned __int8 *v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  __int128 v211;
  __int128 v212;
  _OWORD v213[2];
  swift::SwiftError *v214[3];
  uint64_t *v215;
  _BYTE v216[48];

  outlined init with take of Mirror?(a3, (uint64_t)v216);
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v214);
  if (!a2)
  {
    v8 = v215;
    v9 = (swift::SwiftError **)__swift_project_boxed_opaque_existential_0Tm(v214, (uint64_t)v215);
    DynamicType = (unint64_t *)swift_getDynamicType(v9, v8, 1);
    a2 = swift_reflectionMirror_normalizedType(v214, DynamicType, (uint64_t *)&unk_1E0EB1338);
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t *)v214);
  v11 = swift_reflectionMirror_count(a1, (objc_class *)a2, (uint64_t *)&unk_1E0EB1338);
  if (v11 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v12 = v11;
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v213);
  v13 = swift_allocObject((uint64_t)&unk_1E0EAD738, 0x38uLL, 7uLL);
  outlined init with take of Any(v213, (_OWORD *)v13 + 1);
  v13[6] = a2;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _RandomAccessCollectionBox<LazyMapSequence<Range<Int>, (label: String?, value: Any)>>);
  v15 = swift_allocObject(v14, 0x50uLL, 7uLL);
  v15[6] = 0;
  v15[7] = v12;
  v15[8] = partial apply for closure #1 in Mirror.init(internalReflecting:subjectType:customAncestor:);
  v15[9] = v13;
  v16 = canonical specialized generic type metadata accessor for _IndexBox<Int>();
  v17 = swift_allocObject(v16, 0x18uLL, 7uLL);
  v17[2] = 0;
  v18 = swift_allocObject(v16, 0x18uLL, 7uLL);
  v18[2] = v12;
  v15[2] = v17;
  v15[3] = &protocol witness table for _IndexBox<A>;
  v15[4] = v18;
  v15[5] = &protocol witness table for _IndexBox<A>;
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v213);
  v19 = swift_allocObject((uint64_t)&unk_1E0EAD760, 0x68uLL, 7uLL);
  v19[2] = a2;
  outlined init with take of Mirror?((uint64_t)v216, (uint64_t)(v19 + 3));
  outlined init with take of Any(v213, v19 + 9);
  v20 = swift_reflectionMirror_displayStyle(a1, (void **)&unk_1E0EB1338);
  if (v20 < 0)
  {
LABEL_13:
    *((_QWORD *)&v211 + 1) = v20;
    v23 = specialized static String._createEmpty(withInitialCapacity:)(30);
    v27 = v23;
    v28 = v24;
    *(_QWORD *)&v213[0] = v23;
    *((_QWORD *)&v213[0] + 1) = v24;
    v29 = HIBYTE(v24) & 0xF;
    if ((v24 & 0x2000000000000000) != 0)
      v30 = HIBYTE(v24) & 0xF;
    else
      v30 = v23 & 0xFFFFFFFFFFFFLL;
    if (!v30 && (v23 & ~v24 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease(v24);
      v31 = 0x8000000181767260 | 0x8000000000000000;
      for (*(_QWORD *)&v213[0] = 0xD00000000000001BLL; ; *(_QWORD *)&v213[0] = v30)
      {
LABEL_97:
        *((_QWORD *)&v213[0] + 1) = v31;
LABEL_98:
        *(_QWORD *)&v211 = _int64ToString(_:radix:uppercase:)(*((uint64_t *)&v211 + 1), 10, 0, (uint64_t (*)(__int128 *, uint64_t, uint64_t, uint64_t, _QWORD))swift_int64ToString);
        *((_QWORD *)&v211 + 1) = v92;
        v28 = *((_QWORD *)&v213[0] + 1);
        v27 = *(_QWORD *)&v213[0];
        v95 = HIBYTE(*((_QWORD *)&v213[0] + 1)) & 0xFLL;
        if ((*((_QWORD *)&v213[0] + 1) & 0x2000000000000000) != 0)
          v40 = HIBYTE(*((_QWORD *)&v213[0] + 1)) & 0xFLL;
        else
          v40 = *(_QWORD *)&v213[0] & 0xFFFFFFFFFFFFLL;
        if (!v40 && (*(_QWORD *)&v213[0] & ~*((_QWORD *)&v213[0] + 1) & 0x2000000000000000) == 0)
        {
          swift_bridgeObjectRelease(*((uint64_t *)&v213[0] + 1));
          v213[0] = v211;
          goto LABEL_167;
        }
        v4 = v92 & 0x2000000000000000;
        v30 = HIBYTE(v92) & 0xF;
        if ((*((_QWORD *)&v213[0] + 1) & 0x2000000000000000) != 0 && v4)
        {
          v98 = v95 + v30;
          if (v95 + v30 <= 0xF)
          {
            if (v30)
            {
              v143 = 0;
              v144 = 0;
              v125 = *((_QWORD *)&v213[0] + 1);
              v126 = v92;
              do
              {
                v145 = v95 + v144;
                v146 = v144 + 1;
                if (v144 >= 8)
                  v147 = v92;
                else
                  v147 = v211;
                v148 = v147 >> (v143 & 0x38);
                v149 = (8 * v95 + v143) & 0x38;
                v150 = (-255 << v149) - 1;
                v151 = (unint64_t)v148 << v149;
                v152 = v150 & v125 | v151;
                v153 = v150 & v27 | v151;
                if (v145 < 8)
                  v27 = v153;
                else
                  v125 = v152;
                v143 += 8;
                v144 = v146;
              }
              while (v30 != v146);
            }
            else
            {
              v125 = *((_QWORD *)&v213[0] + 1);
              v126 = v92;
            }
            swift_bridgeObjectRelease(v126);
            swift_bridgeObjectRelease(v28);
            v154 = 0xA000000000000000;
            if (!(v27 & 0x8080808080808080 | v125 & 0x80808080808080))
              v154 = 0xE000000000000000;
            *(_QWORD *)&v213[0] = v27;
            for (*((_QWORD *)&v213[0] + 1) = v154 & 0xFF00000000000000 | (v98 << 56) | v125 & 0xFFFFFFFFFFFFFFLL;
                  ;
                  *((_QWORD *)&v213[0] + 1) = v142 & 0xFF00000000000000 | (v123 << 56) | v111 & 0xFFFFFFFFFFFFFFLL)
            {
LABEL_167:
              v104 = *((_QWORD *)&v213[0] + 1);
              v111 = *(_QWORD *)&v213[0];
              v118 = HIBYTE(*((_QWORD *)&v213[0] + 1)) & 0xFLL;
              if ((*((_QWORD *)&v213[0] + 1) & 0x2000000000000000) != 0)
                v155 = HIBYTE(*((_QWORD *)&v213[0] + 1)) & 0xFLL;
              else
                v155 = *(_QWORD *)&v213[0] & 0xFFFFFFFFFFFFLL;
              if (!v155 && (*(_QWORD *)&v213[0] & ~*((_QWORD *)&v213[0] + 1) & 0x2000000000000000) == 0)
              {
                swift_bridgeObjectRelease(*((uint64_t *)&v213[0] + 1));
                v156 = 0xE100000000000000;
                v111 = 39;
                goto LABEL_199;
              }
              if ((*((_QWORD *)&v213[0] + 1) & 0x2000000000000000) != 0 && v118 != 15)
              {
                v157 = HIBYTE(*((_QWORD *)&v213[0] + 1));
                swift_bridgeObjectRelease(0xE100000000000000);
                swift_bridgeObjectRelease(v104);
                v158 = 8 * (v157 & 7);
                v159 = (-255 << v158) - 1;
                v160 = 39 << v158;
                v161 = v159 & v104 | v160;
                v162 = v159 & v111 | v160;
                if (v118 >= 8)
                  v163 = v161;
                else
                  v163 = v104;
                if (v118 < 8)
                  v111 = v162;
                v164 = 0xA000000000000000;
                if (!(v163 & 0x80808080808080 | v111 & 0x8080808080808080))
                  v164 = 0xE000000000000000;
                v156 = (v164 & 0xFF00000000000000 | (v118 << 56) | v163 & 0xFFFFFFFFFFFFFFLL) + 0x100000000000000;
                goto LABEL_199;
              }
              swift_bridgeObjectRetain_n(0xE100000000000000, 6, v96, v97);
              if ((v104 & 0x1000000000000000) != 0)
              {
                v200 = String.UTF8View._foreignCount()();
                v120 = v200 + 1;
                if (!__OFADD__(v200, 1))
                {
LABEL_185:
                  if ((v111 & ~v104 & 0x2000000000000000) == 0
                    || !swift_isUniquelyReferenced_nonNull_native(v104 & 0xFFFFFFFFFFFFFFFLL))
                  {
                    if (v120 <= 15)
                      goto LABEL_192;
                    goto LABEL_198;
                  }
                  v168 = _StringGuts.nativeUnusedCapacity.getter(v111, v104);
                  if ((v165 & 1) == 0)
                  {
                    v169 = (v104 >> 61) & 1;
                    if (v168 < 1)
                      LOBYTE(v169) = 1;
                    if (v120 <= 15 && (v169 & 1) != 0)
                    {
LABEL_192:
                      swift_bridgeObjectRetain(v104, v165, v166, v167);
                      v170 = _StringGuts._convertedToSmall()(v111, v104);
                      v172 = v171;
                      swift_bridgeObjectRelease(v104);
                      v173._rawBits = 1;
                      v174._rawBits = 65537;
                      v175._rawBits = _StringGuts.validateScalarRange(_:)(v173, v174, 0x27uLL, 0xE100000000000000);
                      if (v175._rawBits < 0x10000)
                        v175._rawBits |= 3;
                      v177 = specialized String.init(_:)(v175, v176, 0x27uLL, 0xE100000000000000);
                      v179 = v178;
                      swift_bridgeObjectRelease(0xE100000000000000);
                      v180 = _StringGuts._convertedToSmall()(v177, v179);
                      v182 = v181;
                      swift_bridgeObjectRelease(v179);
                      v183 = specialized _SmallString.init(_:appending:)(v170, v172, v180, v182);
                      if ((v185 & 1) == 0)
                      {
                        v111 = v183;
                        v156 = v184;
                        swift_bridgeObjectRelease(0xE100000000000000);
                        swift_bridgeObjectRelease(v104);
                        goto LABEL_199;
                      }
LABEL_196:
                      v186 = 266;
LABEL_201:
                      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v186, 0);
                    }
LABEL_198:
                    _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v120, 1);
                    swift_bridgeObjectRelease_n(0xE100000000000000, 6);
                    v212 = xmmword_1816ABD00;
                    v187 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 1, (uint64_t)&v212, 1);
                    _StringGuts.appendInPlace(_:isASCII:)(v187, v188, 1);
                    swift_bridgeObjectRelease(0xE100000000000000);
                    v156 = *((_QWORD *)&v213[0] + 1);
                    v111 = *(_QWORD *)&v213[0];
LABEL_199:
                    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)v111, v156, "Swift/ReflectionMirror.swift", 28, 2, 0xB0uLL, 0);
                  }
LABEL_200:
                  v186 = 258;
                  goto LABEL_201;
                }
              }
              else
              {
                v102 = __OFADD__(v155, 1);
                v120 = v155 + 1;
                if (!v102)
                  goto LABEL_185;
              }
              __break(1u);
LABEL_223:
              if ((v120 & 0x1000000000000000) != 0)
              {
                v118 = _StringGuts._foreignConvertedToSmall()(v118, v120);
                v209 = v208;
                swift_bridgeObjectRelease(v120);
                v120 = v209;
              }
              else
              {
                if ((v118 & 0x1000000000000000) != 0)
                {
                  v201 = (unsigned __int8 *)((v120 & 0xFFFFFFFFFFFFFFFLL) + 32);
                  v202 = v118 & 0xFFFFFFFFFFFFLL;
                }
                else
                {
                  v201 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v118, v120);
                }
                closure #1 in _StringGuts._convertedToSmall()(v201, v202, &v212);
                swift_bridgeObjectRelease(v120);
                v120 = *((_QWORD *)&v212 + 1);
                v118 = v212;
              }
LABEL_136:
              v121 = HIBYTE(v111) & 0xF;
              v122 = HIBYTE(v120) & 0xF;
              v123 = v122 + v121;
              if ((unint64_t)(v122 + v121) > 0xF)
                goto LABEL_196;
              if (v122)
              {
                v131 = 0;
                v132 = 0;
                v124 = v210;
                do
                {
                  v133 = v121 + v132;
                  v134 = v132 + 1;
                  if (v132 >= 8)
                    v135 = v120;
                  else
                    v135 = v118;
                  v136 = v135 >> (v131 & 0x38);
                  v137 = (8 * v121 + v131) & 0x38;
                  v138 = (-255 << v137) - 1;
                  v139 = (unint64_t)v136 << v137;
                  v140 = v138 & v111 | v139;
                  v141 = v138 & v124 | v139;
                  if (v133 < 8)
                    v124 = v141;
                  else
                    v111 = v140;
                  v131 += 8;
                  v132 = v134;
                }
                while (v122 != v134);
              }
              else
              {
                v124 = v210;
              }
              swift_bridgeObjectRelease(*((uint64_t *)&v211 + 1));
              swift_bridgeObjectRelease(v104);
              v142 = 0xA000000000000000;
              if (!(v124 & 0x8080808080808080 | v111 & 0x80808080808080))
                v142 = 0xE000000000000000;
              *(_QWORD *)&v213[0] = v124;
            }
          }
          v4 = 1;
        }
        v41 = v211 & 0xFFFFFFFFFFFFLL;
        if (v4)
          v34 = HIBYTE(v92) & 0xF;
        else
          v34 = v211 & 0xFFFFFFFFFFFFLL;
        swift_bridgeObjectRetain_n(v92, 2, v93, v94);
        if ((*((_QWORD *)&v211 + 1) & 0x1000000000000000) != 0)
        {
LABEL_210:
          swift_bridgeObjectRetain_n(*((uint64_t *)&v211 + 1), 5, v38, v39);
          v193._rawBits = 1;
          v194._rawBits = (v34 << 16) | 1;
          v195._rawBits = _StringGuts.validateScalarRange(_:)(v193, v194, v211, *((unint64_t *)&v211 + 1));
          if (v195._rawBits < 0x10000)
            v195._rawBits |= 3;
          v32 = (const char *)specialized Collection.count.getter(v195, v196, v211, *((unint64_t *)&v211 + 1));
          swift_bridgeObjectRelease(*((uint64_t *)&v211 + 1));
          if ((v28 & 0x1000000000000000) == 0)
          {
LABEL_113:
            v102 = __OFADD__(v40, v32);
            v103 = (int64_t)&v32[v40];
            if (!v102)
              goto LABEL_114;
            goto LABEL_215;
          }
        }
        else
        {
          swift_bridgeObjectRetain_n(*((uint64_t *)&v211 + 1), 4, v38, v39);
          v32 = (const char *)v34;
          if ((v28 & 0x1000000000000000) == 0)
            goto LABEL_113;
        }
        v197 = String.UTF8View._foreignCount()();
        v103 = (int64_t)&v32[v197];
        if (!__OFADD__(v197, v32))
        {
LABEL_114:
          if ((v27 & ~v28 & 0x2000000000000000) != 0
            && swift_isUniquelyReferenced_nonNull_native(v28 & 0xFFFFFFFFFFFFFFFLL))
          {
            v104 = *((_QWORD *)&v213[0] + 1);
            v210 = *(_QWORD *)&v213[0];
            v105 = _StringGuts.nativeUnusedCapacity.getter(*(uint64_t *)&v213[0], *((uint64_t *)&v213[0] + 1));
            if ((v99 & 1) != 0)
              goto LABEL_200;
            if (v103 > 15)
              goto LABEL_122;
            if ((v104 & 0x2000000000000000) == 0)
            {
              if (v105 < (uint64_t)v32)
                goto LABEL_128;
LABEL_122:
              _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v103, (int64_t)v32);
              if ((*((_QWORD *)&v211 + 1) & 0x1000000000000000) != 0)
              {
                _StringGuts._foreignAppendInPlace(_:)(v211, *((unint64_t *)&v211 + 1), 0, v34);
                v110 = *((_QWORD *)&v211 + 1);
              }
              else
              {
                swift_bridgeObjectRelease_n(*((uint64_t *)&v211 + 1), 4);
                if (v4)
                {
                  swift_bridgeObjectRelease_n(*((uint64_t *)&v211 + 1), 2);
                  *(_QWORD *)&v212 = v211;
                  *((_QWORD *)&v212 + 1) = *((_QWORD *)&v211 + 1) & 0xFFFFFFFFFFFFFFLL;
                  v129 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v30, (uint64_t)&v212, v30);
                  _StringGuts.appendInPlace(_:isASCII:)(v129, v130, (*((_QWORD *)&v211 + 1) & 0x4000000000000000) != 0);
                  swift_bridgeObjectRelease(*((uint64_t *)&v211 + 1));
                  goto LABEL_167;
                }
                if ((v211 & 0x1000000000000000) != 0)
                {
                  swift_bridgeObjectRelease(*((uint64_t *)&v211 + 1));
                  v106 = (id)((*((_QWORD *)&v211 + 1) & 0xFFFFFFFFFFFFFFFLL) + 32);
                  v107 = v41;
                }
                else
                {
                  v106 = _StringObject.sharedUTF8.getter(v211, *((uint64_t *)&v211 + 1));
                  v107 = v205;
                  swift_bridgeObjectRelease(*((uint64_t *)&v211 + 1));
                  if (v107 < v41)
                    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
                }
                v108 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v41, (uint64_t)v106, v107);
                _StringGuts.appendInPlace(_:isASCII:)(v108, v109, (uint64_t)v211 < 0);
                v110 = *((_QWORD *)&v211 + 1);
              }
              swift_bridgeObjectRelease_n(v110, 2);
              goto LABEL_167;
            }
            v111 = v104;
          }
          else
          {
            if (v103 > 15)
              goto LABEL_122;
            v104 = *((_QWORD *)&v213[0] + 1);
            v111 = *((_QWORD *)&v213[0] + 1);
            v210 = *(_QWORD *)&v213[0];
            if ((*((_QWORD *)&v213[0] + 1) & 0x2000000000000000) == 0)
            {
LABEL_128:
              if ((v104 & 0x1000000000000000) != 0)
              {
                v210 = _StringGuts._foreignConvertedToSmall()(v210, v104);
                v111 = v204;
              }
              else
              {
                if ((v210 & 0x1000000000000000) != 0)
                {
                  v112 = (unsigned __int8 *)((v104 & 0xFFFFFFFFFFFFFFFLL) + 32);
                  v113 = v210 & 0xFFFFFFFFFFFFLL;
                }
                else
                {
                  v112 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v210, v104);
                  v113 = v99;
                }
                swift_bridgeObjectRetain(v104, v99, v100, v101);
                closure #1 in _StringGuts._convertedToSmall()(v112, v113, &v212);
                swift_bridgeObjectRelease(v104);
                v111 = *((_QWORD *)&v212 + 1);
                v210 = v212;
              }
            }
          }
          v114._rawBits = (v34 << 16) | 1;
          v115._rawBits = 1;
          v116._rawBits = _StringGuts.validateScalarRange(_:)(v115, v114, v211, *((unint64_t *)&v211 + 1));
          if (v116._rawBits < 0x10000)
            v116._rawBits |= 3;
          v118 = specialized String.init(_:)(v116, v117, v211, *((unint64_t *)&v211 + 1));
          v120 = v119;
          swift_bridgeObjectRelease(*((uint64_t *)&v211 + 1));
          if ((v120 & 0x2000000000000000) == 0)
            goto LABEL_223;
          swift_bridgeObjectRelease(v120);
          goto LABEL_136;
        }
LABEL_215:
        __break(1u);
LABEL_216:
        if ((v34 & 0x1000000000000000) != 0)
        {
          v41 = _StringGuts._foreignConvertedToSmall()(v41, v34);
          v207 = v206;
          swift_bridgeObjectRelease(v34);
          v34 = v207;
        }
        else
        {
          if ((v41 & 0x1000000000000000) != 0)
          {
            v198 = (unsigned __int8 *)((v34 & 0xFFFFFFFFFFFFFFFLL) + 32);
            v199 = v41 & 0xFFFFFFFFFFFFLL;
          }
          else
          {
            v198 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v41, v34);
          }
          closure #1 in _StringGuts._convertedToSmall()(v198, v199, &v212);
          swift_bridgeObjectRelease(v34);
          v34 = *((_QWORD *)&v212 + 1);
          v41 = v212;
        }
LABEL_56:
        v55 = HIBYTE(v28) & 0xF;
        v56 = HIBYTE(v34) & 0xF;
        v57 = v56 + v55;
        if ((unint64_t)(v56 + v55) > 0xF)
          goto LABEL_196;
        if (v56)
        {
          v58 = 0;
          v59 = 0;
          do
          {
            v60 = v55 + v59;
            v61 = v59 + 1;
            if (v59 >= 8)
              v62 = v34;
            else
              v62 = v41;
            v63 = v62 >> (v58 & 0x38);
            v64 = (8 * v55 + v58) & 0x38;
            v65 = (-255 << v64) - 1;
            v66 = (unint64_t)v63 << v64;
            v67 = v65 & v28 | v66;
            v68 = v65 & v30 | v66;
            if (v60 < 8)
              v30 = v68;
            else
              v28 = v67;
            v58 += 8;
            v59 = v61;
          }
          while (v56 != v61);
        }
        swift_bridgeObjectRelease((unint64_t)(v32 + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000);
        swift_bridgeObjectRelease(v27);
        v69 = 0xA000000000000000;
        if (!(v30 & 0x8080808080808080 | v28 & 0x80808080808080))
          v69 = 0xE000000000000000;
        v31 = v69 & 0xFF00000000000000 | (v57 << 56) | v28 & 0xFFFFFFFFFFFFFFLL;
      }
    }
    v32 = "Unknown raw display style '";
    if ((v24 & 0x2000000000000000) != 0 && (0x8000000181767260 & 0x2000000000000000) != 0)
    {
      v33 = v29 + ((0x8000000181767260 >> 56) & 0xF);
      if (v33 <= 0xF)
      {
        v78 = (0x8000000181767260 >> 56) & 0xF;
        if (v78)
        {
          v80 = 0;
          v81 = 0;
          v79 = v24;
          do
          {
            v82 = v29 + v81;
            v83 = v81 + 1;
            v84 = 0x8000000181767260 | 0x8000000000000000;
            if (v81 < 8)
              v84 = 0xD00000000000001BLL;
            v85 = v84 >> (v80 & 0x38);
            v86 = (8 * v29 + v80) & 0x38;
            v87 = (-255 << v86) - 1;
            v88 = (unint64_t)v85 << v86;
            v89 = v87 & v79 | v88;
            v90 = v87 & v27 | v88;
            if (v82 < 8)
              v27 = v90;
            else
              v79 = v89;
            v80 += 8;
            v81 = v83;
          }
          while (v78 != v83);
        }
        else
        {
          v79 = v24;
        }
        swift_bridgeObjectRelease(0x8000000181767260 | 0x8000000000000000);
        swift_bridgeObjectRelease(v28);
        v91 = 0xA000000000000000;
        if (!(v27 & 0x8080808080808080 | v79 & 0x80808080808080))
          v91 = 0xE000000000000000;
        v31 = v91 & 0xFF00000000000000 | (v33 << 56) | v79 & 0xFFFFFFFFFFFFFFLL;
        *(_QWORD *)&v213[0] = v27;
        goto LABEL_97;
      }
    }
    if ((0x8000000181767260 & 0x2000000000000000) != 0)
      v34 = (0x8000000181767260 >> 56) & 0xF;
    else
      v34 = 27;
    swift_bridgeObjectRetain_n(0x8000000181767260 | 0x8000000000000000, 2, v25, v26);
    if ((0x8000000181767260 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain_n(0x8000000181767260 | 0x8000000000000000, 5, v35, v36);
      v189._rawBits = 1;
      v190._rawBits = (v34 << 16) | 1;
      v191._rawBits = _StringGuts.validateScalarRange(_:)(v189, v190, 0xD00000000000001BLL, 0x8000000181767260 | 0x8000000000000000);
      if (v191._rawBits < 0x10000)
        v191._rawBits |= 3;
      v40 = specialized Collection.count.getter(v191, v192, 0xD00000000000001BLL, 0x8000000181767260 | 0x8000000000000000);
      swift_bridgeObjectRelease(0x8000000181767260 | 0x8000000000000000);
      if ((v28 & 0x1000000000000000) == 0)
      {
LABEL_27:
        v41 = v30 + v40;
        if (!__OFADD__(v30, v40))
          goto LABEL_28;
        goto LABEL_209;
      }
    }
    else
    {
      swift_bridgeObjectRetain_n(0x8000000181767260 | 0x8000000000000000, 4, v35, v36);
      v40 = v34;
      if ((v28 & 0x1000000000000000) == 0)
        goto LABEL_27;
    }
    v30 = String.UTF8View._foreignCount()();
    v41 = v30 + v40;
    if (!__OFADD__(v30, v40))
    {
LABEL_28:
      if ((v27 & ~v28 & 0x2000000000000000) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v28 & 0xFFFFFFFFFFFFFFFLL);
        v27 = *((_QWORD *)&v213[0] + 1);
        v30 = *(_QWORD *)&v213[0];
        if (isUniquelyReferenced_nonNull_native)
        {
          v43 = _StringGuts.nativeUnusedCapacity.getter(*(uint64_t *)&v213[0], *((uint64_t *)&v213[0] + 1));
          if ((v37 & 1) != 0)
            goto LABEL_200;
          if (v41 > 15)
            goto LABEL_37;
          if ((v27 & 0x2000000000000000) != 0)
          {
            v28 = v27;
            goto LABEL_52;
          }
          if (v43 >= v40)
            goto LABEL_37;
          goto LABEL_48;
        }
      }
      else
      {
        v27 = *((_QWORD *)&v213[0] + 1);
        v30 = *(_QWORD *)&v213[0];
      }
      if (v41 > 15)
      {
LABEL_37:
        v44 = _StringGuts.nativeUnusedCapacity.getter(v30, v27);
        v47 = (v45 & 1) == 0 && v44 >= v40;
        if ((v30 & ~v27 & 0x2000000000000000) != 0
          && swift_isUniquelyReferenced_nonNull_native(v27 & 0xFFFFFFFFFFFFFFFLL))
        {
          if (v47)
          {
LABEL_77:
            if ((0x8000000181767260 & 0x1000000000000000) != 0)
            {
              _StringGuts._foreignAppendInPlace(_:)(0xD00000000000001BLL, 0x8000000181767260 | 0x8000000000000000, 0, v34);
              v77 = 0x8000000181767260 | 0x8000000000000000;
            }
            else
            {
              swift_bridgeObjectRelease_n(0x8000000181767260 | 0x8000000000000000, 5);
              v74 = (0x8000000181767260 & 0x2000000000000000) == 0
                 || (0x8000000181767260 & 0x4000000000000000) != 0;
              if ((0x8000000181767260 & 0x2000000000000000) != 0)
              {
                swift_bridgeObjectRelease(0x8000000181767260 | 0x8000000000000000);
                *(_QWORD *)&v212 = 0xD00000000000001BLL;
                *((_QWORD *)&v212 + 1) = 0x8000000181767260 & 0xFFFFFFFFFFFFFFLL;
                v127 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v34, (uint64_t)&v212, (0x8000000181767260 >> 56) & 0xF);
                _StringGuts.appendInPlace(_:isASCII:)(v127, v128, v74);
                swift_bridgeObjectRelease(0x8000000181767260 | 0x8000000000000000);
                goto LABEL_98;
              }
              v75 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v34, (0x8000000181767260 & 0xFFFFFFFFFFFFFFFLL) + 32, 27);
              _StringGuts.appendInPlace(_:isASCII:)(v75, v76, v74);
              v77 = 0x8000000181767260 | 0x8000000000000000;
            }
            swift_bridgeObjectRelease_n(v77, 2);
            goto LABEL_98;
          }
        }
        else if (v47)
        {
LABEL_76:
          _StringGuts.grow(_:)(v41);
          goto LABEL_77;
        }
        v70 = _StringGuts.nativeCapacity.getter(v30, v27);
        if ((v71 & 1) != 0)
          v72 = 0;
        else
          v72 = v70;
        if (v72 + 0x4000000000000000 >= 0)
        {
          v73 = 2 * v72;
          if (v73 > v41)
            v41 = v73;
          goto LABEL_76;
        }
        __break(1u);
        goto LABEL_228;
      }
      v28 = v27;
      if ((v27 & 0x2000000000000000) != 0)
        goto LABEL_52;
LABEL_48:
      if ((v27 & 0x1000000000000000) == 0)
      {
        if ((v30 & 0x1000000000000000) != 0)
        {
          v48 = (unsigned __int8 *)((v27 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v49 = v30 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          v48 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v30, v27);
          v49 = v37;
        }
        swift_bridgeObjectRetain(v27, v37, v38, v39);
        closure #1 in _StringGuts._convertedToSmall()(v48, v49, &v212);
        swift_bridgeObjectRelease(v27);
        v28 = *((_QWORD *)&v212 + 1);
        v30 = v212;
LABEL_52:
        v50._rawBits = (v34 << 16) | 1;
        v51._rawBits = 1;
        v52._rawBits = _StringGuts.validateScalarRange(_:)(v51, v50, 0xD00000000000001BLL, 0x8000000181767260 | 0x8000000000000000);
        if (v52._rawBits < 0x10000)
          v52._rawBits |= 3;
        v41 = specialized String.init(_:)(v52, v53, 0xD00000000000001BLL, 0x8000000181767260 | 0x8000000000000000);
        v34 = v54;
        swift_bridgeObjectRelease(0x8000000181767260 | 0x8000000000000000);
        if ((v34 & 0x2000000000000000) != 0)
        {
          swift_bridgeObjectRelease(v34);
          goto LABEL_56;
        }
        goto LABEL_216;
      }
LABEL_228:
      v30 = _StringGuts._foreignConvertedToSmall()(v30, v27);
      v28 = v203;
      goto LABEL_52;
    }
LABEL_209:
    __break(1u);
    goto LABEL_210;
  }
  v21 = 1;
  switch(v20)
  {
    case 'c':
      goto LABEL_11;
    case 'd':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
      goto LABEL_13;
    case 'e':
      v21 = 2;
      goto LABEL_11;
    case 's':
      v21 = 0;
      goto LABEL_11;
    case 't':
      v21 = 3;
      goto LABEL_11;
    default:
      if (v20)
        goto LABEL_13;
      v21 = 8;
LABEL_11:
      result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t *)a1);
      *(_QWORD *)a4 = a2;
      *(_QWORD *)(a4 + 8) = v15;
      *(_BYTE *)(a4 + 16) = v21;
      *(_QWORD *)(a4 + 24) = partial apply for closure #2 in Mirror.init(internalReflecting:subjectType:customAncestor:);
      *(_QWORD *)(a4 + 32) = v19;
      *(_BYTE *)(a4 + 40) = 0;
      return result;
  }
}

uint64_t _EachFieldOptions.rawValue.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t _EachFieldOptions.rawValue.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*_EachFieldOptions.rawValue.modify())()
{
  return EnumeratedSequence._base.modify;
}

Swift::_EachFieldOptions __swiftcall _EachFieldOptions.init(rawValue:)(Swift::_EachFieldOptions rawValue)
{
  Swift::_EachFieldOptions *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static _EachFieldOptions.classType.getter(_DWORD *a1@<X8>)
{
  *a1 = static _EachFieldOptions.classType;
}

int *static _EachFieldOptions.classType.setter(int *result)
{
  static _EachFieldOptions.classType = *result;
  return result;
}

uint64_t (*static _EachFieldOptions.classType.modify())()
{
  return EnumeratedSequence._base.modify;
}

void static _EachFieldOptions.ignoreUnknown.getter(_DWORD *a1@<X8>)
{
  *a1 = static _EachFieldOptions.ignoreUnknown;
}

int *static _EachFieldOptions.ignoreUnknown.setter(int *result)
{
  static _EachFieldOptions.ignoreUnknown = *result;
  return result;
}

uint64_t (*static _EachFieldOptions.ignoreUnknown.modify())()
{
  return EnumeratedSequence._base.modify;
}

void protocol witness for SetAlgebra.init() in conformance _EachFieldOptions(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

_DWORD *protocol witness for SetAlgebra.union(_:) in conformance _EachFieldOptions@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.intersection(_:) in conformance _EachFieldOptions@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance _EachFieldOptions@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance _EachFieldOptions(_DWORD *a1, int *a2)
{
  _DWORD *v2;
  int v3;
  int v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_DWORD *protocol witness for SetAlgebra.remove(_:) in conformance _EachFieldOptions@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v2;
  int v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_DWORD *)a2 = v3;
  *(_BYTE *)(a2 + 4) = v3 == 0;
  return result;
}

int *protocol witness for SetAlgebra.update(with:) in conformance _EachFieldOptions@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_DWORD *)a2 = v5;
  *(_BYTE *)(a2 + 4) = v5 == 0;
  return result;
}

_DWORD *protocol witness for SetAlgebra.formUnion(_:) in conformance _EachFieldOptions(_DWORD *result)
{
  _DWORD *v1;

  *v1 |= *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.formIntersection(_:) in conformance _EachFieldOptions(_DWORD *result)
{
  _DWORD *v1;

  *v1 &= *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance _EachFieldOptions(_DWORD *result)
{
  _DWORD *v1;

  *v1 ^= *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.subtracting(_:) in conformance _EachFieldOptions@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

uint64_t SetAlgebra.subtracting(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  _QWORD v21[2];

  v21[1] = a4;
  v8 = *(_QWORD *)(a2 - 8);
  v9 = MEMORY[0x1E0C80A78](a1);
  v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)v21 - v13;
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)v21 - v16;
  MEMORY[0x1E0C80A78](v15);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v18((char *)v21 - v19, v4, a2);
  v18(v14, v4, a2);
  v18(v11, a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(a3 + 64))(v11, a2, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(a3 + 56))(v17, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v17, a2);
}

{
  uint64_t v4;

  SetAlgebra.subtracting(_:)(a1, a2, a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(v4, a2);
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance _EachFieldOptions(_DWORD *a1)
{
  _DWORD *v1;

  return (*v1 & ~*a1) == 0;
}

uint64_t SetAlgebra.isSubset(of:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;

  v4 = v3;
  v8 = *(_QWORD *)(a2 - 8);
  v9 = MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v15 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v4, a2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 56))(a1, a2, a3);
  LOBYTE(v4) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 + 8) + 8))(v13, v4, a2);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v13, a2);
  return v4 & 1;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance _EachFieldOptions(_DWORD *a1)
{
  _DWORD *v1;

  return (*v1 & *a1) == 0;
}

uint64_t SetAlgebra.isDisjoint(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v7 = *(_QWORD *)(a2 - 8);
  v8 = MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v3, a2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 56))(a1, a2, a3);
  LOBYTE(a3) = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 152))(a2, a3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v12, a2);
  return a3 & 1;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance _EachFieldOptions(_DWORD *a1)
{
  _DWORD *v1;

  return (*a1 & ~*v1) == 0;
}

uint64_t SetAlgebra.isSuperset(of:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t))(a3 + 128))(v3) & 1;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance _EachFieldOptions()
{
  _DWORD *v0;

  return *v0 == 0;
}

uint64_t SetAlgebra.isEmpty.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v3 = v2;
  v6 = *(_QWORD *)(a1 - 8);
  v7 = MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(v10 + 32))(v7);
  LOBYTE(v3) = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(a2 + 8) + 8))(v3, v9, a1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, a1);
  return v3 & 1;
}

uint64_t specialized SetAlgebra.init<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _DWORD *a3@<X8>)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t AssociatedConformanceWitness;
  void (*v11)(uint64_t *__return_ptr, unint64_t, unint64_t);
  int v12;
  int v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a2, a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v9 = (char *)&v15 - v8;
  (*(void (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a2, a1, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v11 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t))(AssociatedConformanceWitness
                                                                                         + 16);
  v11(&v16, AssociatedTypeWitness, AssociatedConformanceWitness);
  if ((v16 & 0x100000000) != 0)
  {
    v12 = 0;
  }
  else
  {
    v12 = 0;
    do
    {
      v13 = v16;
      if ((v16 & ~v12) == 0)
        v13 = 0;
      v12 |= v13;
      v11(&v16, AssociatedTypeWitness, AssociatedConformanceWitness);
    }
    while (BYTE4(v16) != 1);
  }
  result = (*(uint64_t (**)(char *, unint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  *a3 = v12;
  return result;
}

uint64_t SetAlgebra.init<A>(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, const char *a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  const char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  unint64_t AssociatedConformanceWitness;
  void (*v30)(unint64_t, unint64_t);
  uint64_t v31;
  unsigned int (*v32)(char *, uint64_t, unint64_t);
  void (*v33)(char *, char *, unint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;

  v42 = a1;
  v35 = (uint64_t)a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a4, a2, (uint64_t)&protocol requirements base descriptor for SetAlgebra, associated type descriptor for SetAlgebra.Element);
  v36 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v35 - v15;
  v19 = type metadata accessor for Optional(0, AssociatedTypeWitness, v17, v18);
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v35 - v20;
  v22 = a5;
  v23 = a3;
  v24 = swift_getAssociatedTypeWitness(0, v22, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v37 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24);
  v26 = (char *)&v35 - v25;
  v27 = *(void (**)(uint64_t, uint64_t))(a4 + 32);
  v39 = a6;
  v40 = a2;
  v38 = a4;
  v27(a2, a4);
  v28 = v35;
  (*(void (**)(uint64_t, uint64_t))(v35 + 32))(v23, v35);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v28, v23, v24, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v30 = *(void (**)(unint64_t, unint64_t))(AssociatedConformanceWitness + 16);
  v41 = v24;
  v42 = v26;
  v30(v24, AssociatedConformanceWitness);
  v31 = v36;
  v32 = *(unsigned int (**)(char *, uint64_t, unint64_t))(v36 + 48);
  if (v32(v21, 1, AssociatedTypeWitness) != 1)
  {
    v33 = *(void (**)(char *, char *, unint64_t))(v31 + 32);
    do
    {
      v33(v14, v21, AssociatedTypeWitness);
      (*(void (**)(char *, char *, uint64_t))(v38 + 72))(v16, v14, v40);
      (*(void (**)(char *, unint64_t))(v31 + 8))(v16, AssociatedTypeWitness);
      v30(v41, AssociatedConformanceWitness);
    }
    while (v32(v21, 1, AssociatedTypeWitness) != 1);
  }
  return (*(uint64_t (**)(char *, unint64_t))(v37 + 8))(v42, v41);
}

_DWORD *protocol witness for SetAlgebra.subtract(_:) in conformance _EachFieldOptions(_DWORD *result)
{
  _DWORD *v1;

  *v1 &= ~*result;
  return result;
}

uint64_t SetAlgebra.subtract(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v19;

  v4 = v3;
  v8 = *(_QWORD *)(a2 - 8);
  v9 = MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v19 - v13;
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v19 - v15;
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v17(v14, v4, a2);
  v17(v11, a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(a3 + 64))(v11, a2, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(a3 + 104))(v16, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v16, a2);
}

_DWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance _EachFieldOptions@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance _EachFieldOptions(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance _EachFieldOptions(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

void specialized SetAlgebra<>.init(arrayLiteral:)(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  int *v5;
  int v6;
  int v7;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (int *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  swift_bridgeObjectRelease(a1);
  *a2 = v4;
}

uint64_t SetAlgebra<>.init(arrayLiteral:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t WitnessTable;
  uint64_t v13;

  v13 = a1;
  v5 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 160);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(const char **)(a3 + 16), a2, (uint64_t)&protocol requirements base descriptor for ExpressibleByArrayLiteral, associated type descriptor for ExpressibleByArrayLiteral.ArrayLiteralElement);
  v9 = type metadata accessor for Array(0, AssociatedTypeWitness, v7, v8);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v9, v10);
  return v5(&v13, v9, WitnessTable, a2, a3);
}

Swift::_MetadataKind_optional __swiftcall _MetadataKind.init(rawValue:)(Swift::UInt rawValue)
{
  char *v1;
  char v2;

  if ((uint64_t)rawValue > 1023)
  {
    if ((uint64_t)rawValue > 1280)
    {
      if (rawValue == 1281)
      {
        *v1 = 14;
        return (Swift::_MetadataKind_optional)rawValue;
      }
      if (rawValue == 0xFFFF)
      {
        *v1 = 15;
        return (Swift::_MetadataKind_optional)rawValue;
      }
    }
    else
    {
      if (rawValue == 1024)
      {
        *v1 = 12;
        return (Swift::_MetadataKind_optional)rawValue;
      }
      if (rawValue == 1280)
      {
        *v1 = 13;
        return (Swift::_MetadataKind_optional)rawValue;
      }
    }
LABEL_18:
    *v1 = 16;
    return (Swift::_MetadataKind_optional)rawValue;
  }
  switch(rawValue)
  {
    case 0x300uLL:
      *v1 = 5;
      break;
    case 0x301uLL:
      *v1 = 6;
      break;
    case 0x302uLL:
      *v1 = 7;
      break;
    case 0x303uLL:
      *v1 = 8;
      break;
    case 0x304uLL:
      *v1 = 9;
      break;
    case 0x305uLL:
      *v1 = 10;
      break;
    case 0x306uLL:
      *v1 = 11;
      break;
    default:
      v2 = 1;
      switch(rawValue)
      {
        case 0x200uLL:
          goto LABEL_17;
        case 0x201uLL:
          *v1 = 2;
          break;
        case 0x202uLL:
          *v1 = 3;
          break;
        case 0x203uLL:
          *v1 = 4;
          break;
        default:
          if (rawValue)
            goto LABEL_18;
          v2 = 0;
LABEL_17:
          *v1 = v2;
          break;
      }
      break;
  }
  return (Swift::_MetadataKind_optional)rawValue;
}

uint64_t _MetadataKind.rawValue.getter()
{
  char *v0;

  return qword_1816B7D00[*v0];
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance _MetadataKind(char *a1, char *a2)
{
  return qword_1816B7D00[*a1] == qword_1816B7D00[*a2];
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance _MetadataKind()
{
  char *v0;

  Hasher._combine(_:)(qword_1816B7D00[*v0]);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance _MetadataKind()
{
  char *v0;

  Hasher._combine(_:)(qword_1816B7D00[*v0]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _MetadataKind()
{
  char *v0;

  Hasher._combine(_:)(qword_1816B7D00[*v0]);
  return Hasher._finalize()();
}

Swift::_MetadataKind_optional protocol witness for RawRepresentable.init(rawValue:) in conformance _MetadataKind(Swift::UInt *a1)
{
  return _MetadataKind.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance _MetadataKind(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_1816B7D00[*v1];
}

uint64_t _forEachField(of:options:body:)(uint64_t *a1, int *a2, uint64_t (*a3)(char *, uint64_t, _QWORD *, char *))
{
  int v5;
  uint64_t v6;
  const char *v7;
  const char *v8;
  uint64_t v9;
  _QWORD *v10;
  Swift::UInt MetadataKind;
  char v12;
  char *v13;
  void (*v15)(char *);
  char *v16;
  char v17;
  char *v18;
  void (*v19)(char *);
  __int16 v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  if (swift_isClassType(a1) == ((static _EachFieldOptions.classType & ~v5) != 0))
    return 0;
  v6 = swift_reflectionMirror_recursiveCount((unint64_t *)a1);
  if (v6 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v7 = (const char *)v6;
  if (!v6)
    return 1;
  v8 = 0;
  while (1)
  {
    v9 = swift_reflectionMirror_recursiveChildOffset((uint64_t)a1, (unint64_t)v8);
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v10 = (_QWORD *)swift_reflectionMirror_recursiveChildMetadata(a1, v8, &v18);
    MetadataKind = swift_getMetadataKind(v10);
    _MetadataKind.init(rawValue:)(MetadataKind);
    v12 = v17 == 16 ? 15 : v17;
    v13 = v18;
    if (!v18)
      break;
    v17 = v12;
    if ((a3(v18, v9, v10, &v17) & 1) == 0)
    {
      v15 = v19;
      if (!v19)
        return 0;
      v16 = v13;
      goto LABEL_20;
    }
LABEL_13:
    if (v19)
      v19(v13);
    if (v7 == ++v8)
      return 1;
  }
  v17 = v12;
  if ((a3("", v9, v10, &v17) & 1) != 0)
    goto LABEL_13;
  v15 = v19;
  if (!v19)
    return 0;
  v16 = 0;
LABEL_20:
  v15(v16);
  return 0;
}

uint64_t _forEachFieldWithKeyPath<A>(of:options:body:)(uint64_t *a1, int *a2, uint64_t (*a3)(char *, _QWORD *), uint64_t a4, uint64_t a5)
{
  int v8;
  uint64_t result;
  int v10;
  uint64_t v11;
  const char *v12;
  const char *v13;
  unint64_t v14;
  _QWORD *v15;
  Swift::UInt MetadataKind;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  void (*v20)(char *);
  _QWORD *v21;
  Swift::UnsafeMutableRawBufferPointer v22;
  char *v23;
  char v24;
  char v25;
  char *v26;
  int v27;
  char *v28;
  void (*v29)(char *);
  __int16 v30;
  Swift::UnsafeMutableRawBufferPointer into;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v8 = *a2;
  if (swift_isClassType(a1) || (static _EachFieldOptions.classType & ~v8) == 0)
    return 0;
  v10 = static _EachFieldOptions.ignoreUnknown;
  v11 = swift_reflectionMirror_recursiveCount((unint64_t *)a1);
  if (v11 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v12 = (const char *)v11;
  if (!v11)
    return 1;
  v13 = 0;
  v27 = v10 & v8;
  while (1)
  {
    if (v12 == v13)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Range.swift", 17, 2, 0x131uLL, 0);
    v14 = swift_reflectionMirror_recursiveChildOffset((uint64_t)a1, (unint64_t)v13);
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v15 = (_QWORD *)swift_reflectionMirror_recursiveChildMetadata(a1, v13, &v28);
    MetadataKind = swift_getMetadataKind(v15);
    _MetadataKind.init(rawValue:)(MetadataKind);
    v18 = LOBYTE(into._position.value._rawValue) > 0xBu || ((1 << SLOBYTE(into._position.value._rawValue)) & 0x94F) == 0;
    if (!v18 && (v30 & 1) != 0)
      break;
    v20 = v29;
    if (v27 != v10)
    {
      if (!v29)
        return 0;
      v26 = v28;
      goto LABEL_37;
    }
    if (v29)
      v29(v28);
LABEL_27:
    ++v13;
    result = 1;
    if (v12 == v13)
      return result;
  }
  if (HIBYTE(v30) == 1)
    v19 = type metadata accessor for WritableKeyPath(0, a5, (uint64_t)v15, v17);
  else
    v19 = type metadata accessor for KeyPath(0, a5, (uint64_t)v15, v17);
  v21 = swift_allocObject(v19, ((*(unsigned int *)(v19 + 48) + 3) & 0x1FFFFFFFCLL) + 12, *(unsigned __int16 *)(v19 + 52) | 3);
  v21[2] = 0;
  into._position.value._rawValue = v21 + 3;
  into._end.value._rawValue = (char *)v21 + 36;
  v22 = KeyPathBuffer.Builder.pushRaw(size:alignment:)(4, 4);
  specialized _swift_se0349_UnsafeMutableRawBufferPointer_storeBytes(2147483652, 0, (uint64_t)v22._position.value._rawValue, (uint64_t)v22._end.value._rawValue);
  KeyPathBuffer.Builder.pushRaw(size:alignment:)(4, 4);
  if ((v14 & 0x8000000000000000) != 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
  if (HIDWORD(v14))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xD7FuLL, 0);
  RawKeyPathComponent.clone(into:endOfReferencePrefix:)(&into, 0);
  v23 = v28;
  if (v28)
  {
    v24 = a3(v28, v21);
    swift_release((uint64_t)v21);
    if ((v24 & 1) == 0)
    {
      v20 = v29;
      if (!v29)
        return 0;
      v26 = v23;
      goto LABEL_37;
    }
    goto LABEL_25;
  }
  v25 = a3("", v21);
  swift_release((uint64_t)v21);
  if ((v25 & 1) != 0)
  {
LABEL_25:
    if (v29)
      v29(v23);
    goto LABEL_27;
  }
  v20 = v29;
  if (!v29)
    return 0;
  v26 = 0;
LABEL_37:
  v20(v26);
  return 0;
}

uint64_t Repeated.count.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t Repeated.repeatedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 28));
}

uint64_t Repeated.startIndex.getter()
{
  return 0;
}

uint64_t Repeated.endIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t Repeated.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v4 = v3;
  v8 = *(_QWORD *)(a2 - 8);
  v9 = MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v18 - v12;
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v14((char *)&v18 - v12, v4, a2);
  v14(v11, (uint64_t)v13, a2);
  if (a1 < 0)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, a2);
LABEL_5:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Repeat.swift", 18, 2, 0x51uLL, 0);
  }
  v15 = *(_QWORD *)v11;
  v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v11, a2);
  if (v15 <= a1)
    goto LABEL_5;
  v16(v13, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 16))(a3, v4 + *(int *)(a2 + 28));
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance Repeated<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Repeated<A>, a1, a2);
  return RandomAccessCollection<>.index(before:)(a1, WitnessTable, (uint64_t)&protocol witness table for Int, a3);
}

_QWORD *protocol witness for BidirectionalCollection.formIndex(before:) in conformance Repeated<A>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance Repeated<A>(a1, a2, a3, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _UNKNOWN **))RandomAccessCollection<>.index(before:));
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance Repeated<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Repeated<A>, a3, a3);
  return RandomAccessCollection<>.index(_:offsetBy:)(a1, a2, a3, WitnessTable, (uint64_t)&protocol witness table for Int, a4);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance Repeated<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Repeated<A>, a4, a3);
  return RandomAccessCollection.index(_:offsetBy:limitedBy:)(a1, a2, a3, a4, WitnessTable, a5);
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance Repeated<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Repeated<A>, a3, a3);
  return RandomAccessCollection<>.distance(from:to:)(a1, a2, a3, WitnessTable, (uint64_t)&protocol witness table for Int);
}

uint64_t protocol witness for Collection.endIndex.getter in conformance Repeated<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Repeated.endIndex.getter();
  *a1 = result;
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance Repeated<A>(_QWORD *a1, uint64_t *a2, uint64_t a3))()
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = Repeated.subscript.read(v6, *a2, a3);
  return protocol witness for Collection.subscript.read in conformance _ArrayBuffer<A>;
}

uint64_t (*Repeated.subscript.read(_QWORD *a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  *a1 = v6;
  a1[1] = v7;
  v8 = malloc(*(_QWORD *)(v7 + 64));
  a1[2] = v8;
  Repeated.subscript.getter(a2, a3, (uint64_t)v8);
  return _ArrayBuffer.subscript.read;
}

uint64_t protocol witness for Collection.indices.getter in conformance Repeated<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, char *a3@<X8>)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Repeated<A>, a1, a2);
  return RandomAccessCollection<>.indices.getter(a1, WitnessTable, (uint64_t)&protocol witness table for Int, a3);
}

uint64_t protocol witness for Collection.index(after:) in conformance Repeated<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Repeated<A>, a2, a3);
  return RandomAccessCollection<>.index(after:)(a1, a2, WitnessTable, (uint64_t)&protocol witness table for Int, a4);
}

_QWORD *protocol witness for Collection.formIndex(after:) in conformance Repeated<A>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance Repeated<A>(a1, a2, a3, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _UNKNOWN **))RandomAccessCollection<>.index(after:));
}

_QWORD *protocol witness for BidirectionalCollection.formIndex(before:) in conformance Repeated<A>(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *(*a4)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _UNKNOWN **))
{
  uint64_t WitnessTable;
  _QWORD *result;
  uint64_t v9;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Repeated<A>, a2, a3);
  result = a4(&v9, a1, a2, WitnessTable, &protocol witness table for Int);
  *a1 = v9;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance Repeated<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t WitnessTable;
  uint64_t v8;
  uint64_t result;

  v4 = v2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(a2, v4, a1);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Repeated<A>, a1, v6);
  result = type metadata accessor for IndexingIterator(0, a1, WitnessTable, v8);
  *(_QWORD *)(a2 + *(int *)(result + 36)) = 0;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance Repeated<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Repeated<A>, a1, a3);
  return Collection.underestimatedCount.getter(a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Repeated<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Repeated<A>, a1, a3);
  return Collection._copyToContiguousArray()(a1, WitnessTable);
}

uint64_t repeatElement<A>(_:count:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v7 + 16))(v9);
  if (a2 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Repetition count should be non-negative", 39, 2, "Swift/Repeat.swift", 18, 2, 0x28uLL, 0);
  *(_QWORD *)a4 = a2;
  v12 = type metadata accessor for Repeated(0, a3, v10, v11);
  return (*(uint64_t (**)(char *, char *, uint64_t))(v7 + 32))(&a4[*(int *)(v12 + 28)], v9, a3);
}

Swift::Void __swiftcall _replPrintLiteralString(_:)(Swift::String a1)
{
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *inited;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD v16[8];

  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  v3 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Any>();
  inited = swift_initStackObject(v3, v16);
  *((_OWORD *)inited + 1) = xmmword_1816ABBA0;
  inited[7] = &type metadata for String;
  inited[4] = countAndFlagsBits;
  inited[5] = object;
  v8 = (unint64_t *)_playgroundPrintHook;
  if (_playgroundPrintHook)
  {
    v9 = (unint64_t *)qword_1EDC1B9C8;
    v14 = 0;
    v15 = 0xE000000000000000;
    swift_bridgeObjectRetain((unint64_t)object, v4, v5, v6);
    outlined copy of (@escaping @callee_guaranteed (@guaranteed String) -> ())?(v8, v9, v10, v11);
    specialized _print<A>(_:separator:terminator:to:)((uint64_t)inited, 32, 0xE100000000000000, 0, 0xE000000000000000, &v14);
    swift_bridgeObjectRelease((uint64_t)inited);
    v12 = v15;
    ((void (*)(unint64_t, unint64_t))v8)(v14, v15);
    swift_bridgeObjectRelease(v12);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed String) -> ())?((uint64_t)v8, (uint64_t)v9);
  }
  else
  {
    swift_bridgeObjectRetain((unint64_t)object, v4, v5, v6);
    specialized _print<A>(_:separator:terminator:to:)((uint64_t)inited, 32, 0xE100000000000000, 0, 0xE000000000000000, v13, (void (*)(uint64_t *, uint64_t, Class *, ValueMetadata *, _UNKNOWN **))_print_unlocked<A, B>(_:_:));
    swift_bridgeObjectRelease((uint64_t)inited);
  }
}

void _replDebugPrintln<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *inited;
  _QWORD *boxed_opaque_existential_0Tm;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void (*v11)(unint64_t, unint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD v16[8];

  v4 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Any>();
  inited = swift_initStackObject(v4, v16);
  *((_OWORD *)inited + 1) = xmmword_1816ABBA0;
  inited[7] = a2;
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(inited + 4);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(boxed_opaque_existential_0Tm, a1, a2);
  v11 = (void (*)(unint64_t, unint64_t))_playgroundPrintHook;
  if (_playgroundPrintHook)
  {
    v12 = qword_1EDC1B9C8;
    v14 = 0;
    v15 = 0xE000000000000000;
    swift_retain((unint64_t *)qword_1EDC1B9C8, v7, v8, v9);
    specialized _debugPrint<A>(_:separator:terminator:to:)((uint64_t)inited, 32, 0xE100000000000000, 10, 0xE100000000000000, &v14);
    swift_bridgeObjectRelease((uint64_t)inited);
    v13 = v15;
    v11(v14, v15);
    swift_bridgeObjectRelease(v13);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed String) -> ())?((uint64_t)v11, v12);
  }
  else
  {
    specialized _print<A>(_:separator:terminator:to:)((uint64_t)inited, 32, 0xE100000000000000, 10, 0xE100000000000000, v10, (void (*)(uint64_t *, uint64_t, Class *, ValueMetadata *, _UNKNOWN **))_debugPrint_unlocked<A, B>(_:_:));
    swift_bridgeObjectRelease((uint64_t)inited);
  }
}

uint64_t static Result<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t *TupleTypeMetadata2;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  char *v29;
  char v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  char *v33;
  void (*v34)(char *, uint64_t);
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v39 = a5;
  v40 = a6;
  v44 = a1;
  v45 = a2;
  v43 = *(_QWORD *)(a4 - 8);
  v8 = MEMORY[0x1E0C80A78](a1);
  v38 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v8);
  v37 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Result(0, v12, v13, v14);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v36 - v20;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v15, v15, 0, 0);
  v41 = *(TupleTypeMetadata2 - 1);
  v23 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v25 = (unsigned __int8 *)&v36 - v24;
  v26 = (unsigned __int8 *)&v36 + *(int *)(v23 + 48) - v24;
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v27((char *)&v36 - v24, v44, v15);
  v27((char *)v26, v45, v15);
  if (swift_getEnumCaseMultiPayload(v25, v15) != 1)
  {
    v27(v21, (uint64_t)v25, v15);
    if (swift_getEnumCaseMultiPayload(v26, v15) != 1)
    {
      v32 = v42;
      v33 = v37;
      (*(void (**)(char *, unsigned __int8 *, uint64_t))(v42 + 32))(v37, v26, a3);
      v30 = (*(uint64_t (**)(char *, char *, uint64_t))(v39 + 8))(v21, v33, a3);
      v34 = *(void (**)(char *, uint64_t))(v32 + 8);
      v34(v33, a3);
      v34(v21, a3);
      goto LABEL_9;
    }
    (*(void (**)(char *, uint64_t))(v42 + 8))(v21, a3);
    goto LABEL_7;
  }
  v27(v19, (uint64_t)v25, v15);
  if (swift_getEnumCaseMultiPayload(v26, v15) != 1)
  {
    (*(void (**)(char *, uint64_t))(v43 + 8))(v19, a4);
LABEL_7:
    v30 = 0;
    v16 = v41;
    v15 = (uint64_t)TupleTypeMetadata2;
    goto LABEL_9;
  }
  v28 = v43;
  v29 = v38;
  (*(void (**)(char *, unsigned __int8 *, uint64_t))(v43 + 32))(v38, v26, a4);
  v30 = (*(uint64_t (**)(char *, char *, uint64_t))(v40 + 8))(v19, v29, a4);
  v31 = *(void (**)(char *, uint64_t))(v28 + 8);
  v31(v29, a4);
  v31(v19, a4);
LABEL_9:
  (*(void (**)(unsigned __int8 *, uint64_t))(v16 + 8))(v25, v15);
  return v30 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> Result<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Result<>.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a4 - 8), *(_QWORD *)(a4 - 16));
}

uint64_t Result<>.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v24 = a4;
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v12 + 16);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v9);
  v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (unsigned __int8 *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(unsigned __int8 *, uint64_t, uint64_t))(v20 + 16))(v19, v21, a2);
  if (swift_getEnumCaseMultiPayload(v19, a2) == 1)
  {
    (*(void (**)(char *, unsigned __int8 *, uint64_t))(v8 + 32))(v11, v19, v7);
    Hasher._combine(_:)(1uLL);
    (*(void (**)(uint64_t, uint64_t))(v24 + 24))(a1, v7);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }
  else
  {
    (*(void (**)(char *, unsigned __int8 *, uint64_t))(v14 + 32))(v17, v19, v13);
    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 24))(a1, v13, a3);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  }
}

Swift::Int Result<>.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[5];
  __int128 v5;
  __int128 v6;

  v4[0] = 0;
  v4[1] = _swift_stdlib_Hashing_parameters ^ 0x736F6D6570736575;
  v4[2] = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v4[3] = _swift_stdlib_Hashing_parameters ^ 0x6C7967656E657261;
  v4[4] = unk_1ECD25520 ^ 0x7465646279746573;
  v5 = 0u;
  v6 = 0u;
  Result<>.hash(into:)((uint64_t)v4, a1, a2, a3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <> Result<A, B>(uint64_t a1, uint64_t a2)
{
  return Result<>.hashValue.getter(a1, *(_QWORD *)(a2 - 8), *(_QWORD *)(a2 - 16));
}

uint64_t protocol witness for Hashable.hash(into:) in conformance <> Result<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Result<>.hash(into:)(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <> Result<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance <> FlattenSequence<A><>.Index(a1, a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t, uint64_t))Result<>.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <> FlattenSequence<A><>.Index(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];
  __int128 v9;
  __int128 v10;

  v5 = *(_QWORD *)(a3 - 16);
  v6 = *(_QWORD *)(a3 - 8);
  v8[0] = 0;
  v8[1] = _swift_stdlib_Hashing_parameters ^ a1 ^ 0x736F6D6570736575;
  v8[2] = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v8[3] = _swift_stdlib_Hashing_parameters ^ a1 ^ 0x6C7967656E657261;
  v8[4] = unk_1ECD25520 ^ 0x7465646279746573;
  v9 = 0u;
  v10 = 0u;
  a4(v8, a2, v6, v5);
  return Hasher._finalize()();
}

void Result.map<A>(_:)(void (*a1)(char *)@<X0>, _QWORD *a2@<X2>, uint64_t a3@<X3>, _BYTE *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  size_t v19;
  uint64_t v20;

  v8 = a2[2];
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (unsigned __int8 *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(unsigned __int8 *, uint64_t))(v15 + 16))(v14, v16);
  if (swift_getEnumCaseMultiPayload(v14, (uint64_t)a2) == 1)
  {
    v17 = a2[3];
    (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(a4, v14, v17);
    v18 = 1;
  }
  else
  {
    (*(void (**)(char *, unsigned __int8 *, uint64_t))(v9 + 32))(v12, v14, v8);
    a1(v12);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    v18 = 0;
    v17 = a2[3];
  }
  v19 = type metadata accessor for Result(0, a3, v17, a2[4]);
  swift_storeEnumTagMultiPayload(a4, v19, v18);
}

void Result.mapError<A>(_:)(void (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  size_t v21;
  uint64_t v22;

  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](a1);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (unsigned __int8 *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(unsigned __int8 *, uint64_t))(v17 + 16))(v16, v18);
  if (swift_getEnumCaseMultiPayload(v16, a2) == 1)
  {
    (*(void (**)(char *, unsigned __int8 *, uint64_t))(v11 + 32))(v14, v16, v10);
    a1(v14);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    v19 = *(_QWORD *)(a2 + 16);
    v20 = 1;
  }
  else
  {
    v19 = *(_QWORD *)(a2 + 16);
    (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(a5, v16, v19);
    v20 = 0;
  }
  v21 = type metadata accessor for Result(0, v19, a3, a4);
  swift_storeEnumTagMultiPayload(a5, v21, v20);
}

void Result.flatMap<A>(_:)(void (*a1)(char *)@<X0>, _QWORD *a2@<X2>, uint64_t a3@<X3>, _BYTE *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  uint64_t v19;

  v8 = a2[2];
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (unsigned __int8 *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(unsigned __int8 *, uint64_t))(v15 + 16))(v14, v16);
  if (swift_getEnumCaseMultiPayload(v14, (uint64_t)a2) == 1)
  {
    v17 = a2[3];
    (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(a4, v14, v17);
    v18 = type metadata accessor for Result(0, a3, v17, a2[4]);
    swift_storeEnumTagMultiPayload(a4, v18, 1u);
  }
  else
  {
    (*(void (**)(char *, unsigned __int8 *, uint64_t))(v9 + 32))(v12, v14, v8);
    a1(v12);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
}

void Result.flatMapError<A>(_:)(void (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;

  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](a1);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (unsigned __int8 *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(unsigned __int8 *, uint64_t))(v17 + 16))(v16, v18);
  if (swift_getEnumCaseMultiPayload(v16, a2) == 1)
  {
    (*(void (**)(char *, unsigned __int8 *, uint64_t))(v11 + 32))(v14, v16, v10);
    a1(v14);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  }
  else
  {
    v19 = *(_QWORD *)(a2 + 16);
    (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(a5, v16, v19);
    v20 = type metadata accessor for Result(0, v19, a3, a4);
    swift_storeEnumTagMultiPayload(a5, v20, 0);
  }
}

uint64_t Result.get()@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  void (*v12)(char *, unsigned __int8 *, uint64_t);
  char *v13;
  _QWORD v15[2];

  v4 = a1[3];
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](a1);
  v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (unsigned __int8 *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(unsigned __int8 *))(v11 + 16))(v10);
  if (swift_getEnumCaseMultiPayload(v10, (uint64_t)a1) != 1)
    return (*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)(a1[2] - 8) + 32))(a2, v10);
  v12 = *(void (**)(char *, unsigned __int8 *, uint64_t))(v5 + 32);
  v12(v8, v10, v4);
  swift_allocError(v4, a1[4], 0, 0);
  v12(v13, (unsigned __int8 *)v8, v4);
  return swift_willThrow();
}

uint64_t Result<>.init(catching:)@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v13;

  v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  v7 = type metadata accessor for Result(0, a2, v6, (uint64_t)&protocol self-conformance witness table for Error);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v13 - v10;
  a1(v9);
  swift_storeEnumTagMultiPayload(v11, v7, 0);
  return (*(uint64_t (**)(uint64_t, _BYTE *, size_t))(v8 + 32))(a3, v11, v7);
}

uint64_t ReversedCollection.Iterator._position.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t AssociatedTypeWitness;

  v4 = v2 + *(int *)(a1 + 36);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(*(_QWORD *)(a1 + 24) + 8), *(_QWORD *)(a1 + 16), (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a2, v4, AssociatedTypeWitness);
}

uint64_t ReversedCollection.Iterator._position.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t AssociatedTypeWitness;

  v4 = v2 + *(int *)(a2 + 36);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(*(_QWORD *)(a2 + 24) + 8), *(_QWORD *)(a2 + 16), (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 40))(v4, a1, AssociatedTypeWitness);
}

uint64_t (*ReversedCollection.Iterator._position.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t ReversedCollection.Iterator.init(_base:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v8 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v8, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v17 - v11;
  v13 = *(_QWORD *)(a2 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(a4, a1, a2);
  (*(void (**)(uint64_t, uint64_t))(v8 + 72))(a2, v8);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, a2);
  v15 = type metadata accessor for ReversedCollection.Iterator(0, a2, a3, v14);
  return (*(uint64_t (**)(uint64_t, char *, unint64_t))(v10 + 32))(a4 + *(int *)(v15 + 36), v12, AssociatedTypeWitness);
}

uint64_t ReversedCollection.Iterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t AssociatedConformanceWitness;
  void (*v17)(char *, unint64_t);
  void (*v18)(_BYTE *, _QWORD);
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[32];

  v3 = v2;
  v4 = a1;
  v27 = a2;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(v6 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v7, v5, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v26 - v13;
  v15 = v3 + *(int *)(v4 + 36);
  (*(void (**)(char *, uint64_t, unint64_t))(v9 + 16))((char *)&v26 - v13, v15, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t))(v7 + 64))(v5, v7);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v7, v5, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  LOBYTE(v4) = (*(uint64_t (**)(char *, char *, unint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 8)
                                                                           + 8))(v14, v12, AssociatedTypeWitness);
  v17 = *(void (**)(char *, unint64_t))(v9 + 8);
  v17(v12, AssociatedTypeWitness);
  v17(v14, AssociatedTypeWitness);
  if ((v4 & 1) != 0)
  {
    v25 = swift_getAssociatedTypeWitness(0, *(const char **)(v7 + 8), v5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)(v25 - 8) + 56))(v27, 1, 1, v25);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40))(v15, v5, v6);
    v18 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v7 + 80))(v28, v15, v5, v7);
    v20 = v19;
    v21 = swift_getAssociatedTypeWitness(0, *(const char **)(v7 + 8), v5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
    v22 = *(_QWORD *)(v21 - 8);
    v23 = v27;
    (*(void (**)(uint64_t, uint64_t, unint64_t))(v22 + 16))(v27, v20, v21);
    v18(v28, 0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, unint64_t))(v22 + 56))(v23, 0, 1, v21);
  }
}

uint64_t protocol witness for IteratorProtocol.next() in conformance ReversedCollection<A>.Iterator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t AssociatedConformanceWitness;
  char v16;
  void (*v17)(char *, unint64_t);
  void (*v18)(_BYTE *, _QWORD);
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[32];

  v27 = a2;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(v5 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v6, v4, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v26 - v12;
  v14 = v2 + *(int *)(a1 + 36);
  (*(void (**)(char *, uint64_t, unint64_t))(v8 + 16))((char *)&v26 - v12, v14, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t))(v6 + 64))(v4, v6);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v6, v4, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v16 = (*(uint64_t (**)(char *, char *, unint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 8) + 8))(v13, v11, AssociatedTypeWitness);
  v17 = *(void (**)(char *, unint64_t))(v8 + 8);
  v17(v11, AssociatedTypeWitness);
  v17(v13, AssociatedTypeWitness);
  if ((v16 & 1) != 0)
  {
    v25 = swift_getAssociatedTypeWitness(0, *(const char **)(v6 + 8), v4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)(v25 - 8) + 56))(v27, 1, 1, v25);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(v14, v4, v5);
    v18 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 80))(v28, v14, v4, v6);
    v20 = v19;
    v21 = swift_getAssociatedTypeWitness(0, *(const char **)(v6 + 8), v4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
    v22 = *(_QWORD *)(v21 - 8);
    v23 = v27;
    (*(void (**)(uint64_t, uint64_t, unint64_t))(v22 + 16))(v27, v20, v21);
    v18(v28, 0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, unint64_t))(v22 + 56))(v23, 0, 1, v21);
  }
}

uint64_t ReversedCollection.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(v4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v6, v5, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)&v18 - v10;
  v12 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v14, v2, v5);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 16))(a2, v14, v5);
  (*(void (**)(uint64_t, uint64_t))(v6 + 72))(v5, v6);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v5);
  v16 = type metadata accessor for ReversedCollection.Iterator(0, v5, v4, v15);
  return (*(uint64_t (**)(uint64_t, char *, unint64_t))(v8 + 32))(a2 + *(int *)(v16 + 36), v11, AssociatedTypeWitness);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance ReversedCollection<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(v4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v6, v5, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)&v18 - v10;
  v12 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v14, v2, v5);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 16))(a2, v14, v5);
  (*(void (**)(uint64_t, uint64_t))(v6 + 72))(v5, v6);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v5);
  v16 = type metadata accessor for ReversedCollection.Iterator(0, v5, v4, v15);
  return (*(uint64_t (**)(uint64_t, char *, unint64_t))(v8 + 32))(a2 + *(int *)(v16 + 36), v11, AssociatedTypeWitness);
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance ReversedCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ReversedCollection<A>, a1, a3);
  return Collection.underestimatedCount.getter(a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance ReversedCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ReversedCollection<A>, a1, a3);
  return Collection._copyToContiguousArray()(a1, WitnessTable);
}

uint64_t ReversedCollection.Index.base.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(*(_QWORD *)(a1 + 24) + 8), *(_QWORD *)(a1 + 16), (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a2, v2, AssociatedTypeWitness);
}

uint64_t ReversedCollection.Index.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(a3 + 8), a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a4, a1, AssociatedTypeWitness);
}

uint64_t static ReversedCollection.Index.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const char *v7;
  unint64_t AssociatedTypeWitness;
  unint64_t AssociatedConformanceWitness;

  v7 = *(const char **)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v7, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v7, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 8)
                                                                       + 8))(a1, a2, AssociatedTypeWitness) & 1;
}

uint64_t static ReversedCollection.Index.< infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const char *v7;
  unint64_t AssociatedTypeWitness;
  unint64_t AssociatedConformanceWitness;

  v7 = *(const char **)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v7, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v7, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness
                                                                                         + 40))(a1, a2, AssociatedTypeWitness, AssociatedConformanceWitness) & 1;
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance ReversedCollection<A>.Index(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static ReversedCollection.Index.< infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ReversedCollection<A>.Index(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static ReversedCollection.Index.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t ReversedCollection.Index<>.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t AssociatedTypeWitness;
  uint64_t (*v7)(uint64_t, unint64_t, uint64_t);

  v7 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(a3 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(*(_QWORD *)(a2 + 24) + 8), *(_QWORD *)(a2 + 16), (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  return v7(a1, AssociatedTypeWitness, a3);
}

Swift::Int ReversedCollection.Index<>.hashValue.getter(uint64_t a1, uint64_t a2)
{
  void (*v3)(_QWORD *, unint64_t, uint64_t);
  unint64_t AssociatedTypeWitness;
  _QWORD v6[5];
  __int128 v7;
  __int128 v8;

  v6[0] = 0;
  v6[1] = _swift_stdlib_Hashing_parameters ^ 0x736F6D6570736575;
  v6[2] = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v6[3] = _swift_stdlib_Hashing_parameters ^ 0x6C7967656E657261;
  v6[4] = unk_1ECD25520 ^ 0x7465646279746573;
  v7 = 0u;
  v8 = 0u;
  v3 = *(void (**)(_QWORD *, unint64_t, uint64_t))(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(*(_QWORD *)(a1 + 24) + 8), *(_QWORD *)(a1 + 16), (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v3(v6, AssociatedTypeWitness, a2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <> ReversedCollection<A>.Index(uint64_t a1, uint64_t a2)
{
  return ReversedCollection.Index<>.hashValue.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t protocol witness for Hashable.hash(into:) in conformance <> ReversedCollection<A>.Index(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ReversedCollection.Index<>.hash(into:)(a1, a2, *(_QWORD *)(a3 - 8));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <> ReversedCollection<A>.Index(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance <> ClosedRange<A><>.Index(a1, a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))ReversedCollection.Index<>.hash(into:));
}

uint64_t ReversedCollection.startIndex.getter(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 72))(*(_QWORD *)(a1 + 16));
}

uint64_t ReversedCollection.endIndex.getter(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 64))(*(_QWORD *)(a1 + 16));
}

uint64_t ReversedCollection.index(after:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a2 + 24) + 32))(a1, *(_QWORD *)(a2 + 16));
}

uint64_t ReversedCollection.index(before:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 184))(a1, *(_QWORD *)(a2 + 16));
}

uint64_t ReversedCollection.index(_:offsetBy:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  BOOL v3;
  uint64_t v4;

  v3 = __OFSUB__(0, a2);
  v4 = -a2;
  if (!v3)
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a3 + 24) + 48))(result, v4, *(_QWORD *)(a3 + 16));
  __break(1u);
  return result;
}

uint64_t ReversedCollection.index(_:offsetBy:limitedBy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t result;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, char *, unint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = a5;
  v9 = *(_QWORD *)(a4 + 16);
  v8 = *(_QWORD *)(a4 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(const char **)(v8 + 8), v9, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v13 = type metadata accessor for Optional(0, AssociatedTypeWitness, v11, v12);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v28 - v19;
  if (__OFSUB__(0, a2))
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a1, -a2, a3, v9, v8);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v17, v20, v13);
    v21 = *(_QWORD *)(AssociatedTypeWitness - 8);
    if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v21 + 48))(v17, 1, AssociatedTypeWitness) == 1)
    {
      v23 = type metadata accessor for ReversedCollection.Index(0, v9, v8, v22);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v29, 1, 1, v23);
    }
    else
    {
      v24 = *(void (**)(uint64_t, char *, unint64_t))(v21 + 32);
      v25 = v29;
      v24(v29, v17, AssociatedTypeWitness);
      v27 = type metadata accessor for ReversedCollection.Index(0, v9, v8, v26);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v25, 0, 1, v27);
    }
  }
  return result;
}

uint64_t ReversedCollection.distance(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a3 + 24) + 64))(a2, a1, *(_QWORD *)(a3 + 16));
}

uint64_t ReversedCollection.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  void (*v12)(_BYTE *, _QWORD);
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE v17[32];

  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(v5 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v7, v6, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = &v17[-v10];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, v6, v5);
  v12 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t, uint64_t))(v7 + 80))(v17, v11, v6, v7);
  v14 = v13;
  v15 = swift_getAssociatedTypeWitness(0, *(const char **)(v7 + 8), v6, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(v15 - 8) + 16))(a3, v14, v15);
  v12(v17, 0);
  return (*(uint64_t (**)(_BYTE *, unint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance ReversedCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance ReversedCollection<A>(a1, a2, a3, (void (*)(uint64_t, uint64_t))ReversedCollection.index(before:));
}

uint64_t (*protocol witness for Collection.subscript.read in conformance ReversedCollection<A>(_QWORD *a1, uint64_t a2, uint64_t a3))()
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = ReversedCollection.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance _ArrayBuffer<A>;
}

uint64_t (*ReversedCollection.subscript.read(_QWORD *a1, uint64_t a2, uint64_t a3))()
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  void (*v14)(_QWORD *, _QWORD);
  unint64_t AssociatedTypeWitness;

  v5 = malloc(0x40uLL);
  *a1 = v5;
  v7 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(a3 + 24);
  v8 = *(_QWORD *)(v6 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v8, v7, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = malloc(*(_QWORD *)(v9 + 64));
  v5[4] = v10;
  v11 = swift_getAssociatedTypeWitness(0, *(const char **)(v8 + 8), v7, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v5[5] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v5[6] = v12;
  v13 = malloc(*(_QWORD *)(v12 + 64));
  v5[7] = v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(a2, v7, v6);
  v14 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *, void *, uint64_t, uint64_t))(v8 + 80))(v5, v10, v7, v8);
  (*(void (**)(void *))(v12 + 16))(v13);
  v14(v5, 0);
  (*(void (**)(void *, unint64_t))(v9 + 8))(v10, AssociatedTypeWitness);
  return LazyMapSequence<>.subscript.read;
}

void LazyMapSequence<>.subscript.read(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;

  v1 = *(void **)a1;
  v2 = *(void **)(*(_QWORD *)a1 + 56);
  v3 = *(void **)(*(_QWORD *)a1 + 32);
  (*(void (**)(void *, _QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 48) + 8))(v2, *(_QWORD *)(*(_QWORD *)a1 + 40));
  free(v2);
  free(v3);
  free(v1);
}

uint64_t protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance ReversedCollection<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for ReversedCollection.Index(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  v7 = type metadata accessor for Optional(0, v4, v5, v6);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a3, 1, 1, v7);
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance ReversedCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance ReversedCollection<A>(a1, a2, a3, (void (*)(uint64_t, uint64_t))ReversedCollection.index(after:));
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance ReversedCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v7 = type metadata accessor for ReversedCollection.Index(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)a4);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v12 - v9;
  a4(a1, a2);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a1, v10, v7);
}

uint64_t ReversedCollection.reversed()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 32))(a2, v2);
}

uint64_t BidirectionalCollection.reversed()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(a2, v2);
}

uint64_t _stdlib_atomicCompareExchangeStrongPtr(object:expected:desired:)(unint64_t *a1, unint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t result;

  v3 = *a2;
  while (1)
  {
    v4 = __ldaxr(a1);
    if (v4 != v3)
      break;
    if (!__stlxr(a3, a1))
    {
      result = 1;
      *a2 = v4;
      return result;
    }
  }
  result = 0;
  __clrex();
  *a2 = v4;
  return result;
}

uint64_t _stdlib_atomicCompareExchangeStrongPtr<A>(object:expected:desired:)(unint64_t *a1, unint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t result;

  v3 = *a2;
  while (1)
  {
    v4 = __ldaxr(a1);
    if (v4 != v3)
      break;
    if (!__stlxr(a3, a1))
    {
      result = 1;
      *a2 = v4;
      return result;
    }
  }
  result = 0;
  __clrex();
  *a2 = v4;
  return result;
}

{
  unint64_t v3;
  unint64_t v4;
  uint64_t result;

  v3 = *a2;
  while (1)
  {
    v4 = __ldaxr(a1);
    if (v4 != v3)
      break;
    if (!__stlxr(a3, a1))
    {
      result = 1;
      *a2 = v4;
      return result;
    }
  }
  result = 0;
  __clrex();
  *a2 = v4;
  return result;
}

BOOL static Int64.>= infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 >= a2;
}

Swift::Int String.UTF16View.count.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  if ((a2 & 0x1000000000000000) != 0)
    return String.UTF16View._foreignCount()();
  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1;
  return String.UTF16View._nativeGetOffset(for:)((Swift::String::Index)((v2 << 16) | 7));
}

_QWORD *__SwiftNativeNSArray.__allocating_init()()
{
  uint64_t v0;

  return swift_allocObject(v0, 0x10uLL, 7uLL);
}

uint64_t __SwiftNativeNSArray.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t __SwiftNativeNSArray.deinit()
{
  uint64_t v0;

  return v0;
}

_QWORD *_SwiftNativeNSMutableArray.__allocating_init()()
{
  uint64_t v0;

  return swift_allocObject(v0, 0x10uLL, 7uLL);
}

uint64_t _SwiftNativeNSMutableArray.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t _SwiftNativeNSMutableArray.deinit()
{
  uint64_t v0;

  return v0;
}

_QWORD *__SwiftNativeNSSet.__allocating_init(coder:)(void *a1)
{
  uint64_t v1;

  swift_unknownObjectRelease(a1);
  return swift_allocObject(v1, 0x10uLL, 7uLL);
}

uint64_t __SwiftNativeNSSet.init(coder:)(void *a1)
{
  uint64_t v1;

  swift_unknownObjectRelease(a1);
  return v1;
}

uint64_t __SwiftNativeNSSet.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t static UInt64.^ infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a2 ^ a1;
}

uint64_t DropFirstSequence.init(_:dropping:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return DropFirstSequence.init(_:dropping:)(a1, a2, a3, a4, "Can't drop a negative number of elements from a sequence", 56, 0x1E3uLL, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for DropFirstSequence, a5);
}

uint64_t DropFirstSequence.makeIterator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t AssociatedConformanceWitness;
  uint64_t v20;
  void (*v21)(unint64_t *, unint64_t);
  unint64_t *v22;
  int v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)v4, v3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v8 = type metadata accessor for Optional(0, AssociatedTypeWitness, v6, v7);
  v27 = *(_QWORD *)(v8 - 8);
  v28 = v8;
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v25 - v10;
  MEMORY[0x1E0C80A78](v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v1, v3);
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  v26 = a1;
  v14 = *(int *)(a1 + 36);
  v15 = v1;
  if (*(uint64_t *)(v1 + v14) >= 1)
  {
    v16 = swift_getAssociatedTypeWitness(255, (const char *)v4, v3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
    v17 = v4;
    v18 = v16;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v17, v3, v16, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
    v20 = 0;
    v21 = *(void (**)(unint64_t *, unint64_t))(AssociatedConformanceWitness + 16);
    do
    {
      v22 = swift_checkMetadataState(0, v18);
      v21(v22, AssociatedConformanceWitness);
      v23 = (*(uint64_t (**)(char *, uint64_t, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 48))(v11, 1, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v28);
      if (v23 == 1)
        break;
      ++v20;
    }
    while (v20 < *(_QWORD *)(v15 + v14));
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v15);
}

uint64_t DropFirstSequence.dropFirst(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v4 = v3;
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v4, v8);
  v12 = *(_QWORD *)(v4 + *(int *)(a2 + 36));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(v4, a2);
  v13 = v12 + a1;
  if (__OFADD__(v12, a1))
  {
    __break(1u);
LABEL_5:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't drop a negative number of elements from a sequence", 56, 2, "Swift/Sequence.swift", 20, 2, 0x1E3uLL, 0);
  }
  if (v13 < 0)
    goto LABEL_5;
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a3, v11, v8);
  *(_QWORD *)(a3 + *(int *)(a2 + 36)) = v13;
  return result;
}

uint64_t (*PrefixSequence._base.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t PrefixSequence._maxLength.getter(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 36));
}

uint64_t PrefixSequence.init(_:maxLength:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return DropFirstSequence.init(_:dropping:)(a1, a2, a3, a4, "Can't take a prefix of negative length", 38, 0x211uLL, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PrefixSequence, a5);
}

uint64_t DropFirstSequence.init(_:dropping:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, const char *a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t (*a8)(_QWORD, uint64_t, uint64_t)@<X7>, uint64_t a9@<X8>)
{
  uint64_t result;

  if (a2 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, a5, a6, 2, "Swift/Sequence.swift", 20, 2, a7, 0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a9, a1);
  result = a8(0, a3, a4);
  *(_QWORD *)(a9 + *(int *)(result + 36)) = a2;
  return result;
}

uint64_t PrefixSequence.Iterator._base.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return LazyFilterSequence.Iterator.base.getter(a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator, a2);
}

uint64_t PrefixSequence.Iterator._base.setter(uint64_t a1, uint64_t a2)
{
  return EnumeratedSequence.Iterator._base.setter(a1, a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
}

uint64_t (*PrefixSequence.Iterator._base.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t PrefixSequence.Iterator._remaining.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + *(int *)(a2 + 36)) = result;
  return result;
}

uint64_t (*PrefixSequence.Iterator._remaining.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t PrefixSequence.Iterator.init(_:maxLength:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const char *a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t result;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a5, a1, AssociatedTypeWitness);
  result = type metadata accessor for PrefixSequence.Iterator(0, a3, (uint64_t)a4, v11);
  *(_QWORD *)(a5 + *(int *)(result + 36)) = a2;
  return result;
}

uint64_t PrefixSequence.Iterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  unint64_t AssociatedTypeWitness;
  unint64_t AssociatedConformanceWitness;
  unint64_t *v10;
  unint64_t v12;
  uint64_t (*v13)(unint64_t *, unint64_t);

  v4 = *(int *)(a1 + 36);
  v5 = *(_QWORD *)(v2 + v4);
  if (v5)
  {
    *(_QWORD *)(v2 + v4) = v5 - 1;
    v7 = *(_QWORD *)(a1 + 16);
    v6 = *(const char **)(a1 + 24);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v6, v7, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v6, v7, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
    v13 = *(uint64_t (**)(unint64_t *, unint64_t))(AssociatedConformanceWitness + 16);
    v10 = swift_checkMetadataState(0, AssociatedTypeWitness);
    return v13(v10, AssociatedConformanceWitness);
  }
  else
  {
    v12 = swift_getAssociatedTypeWitness(0, *(const char **)(a1 + 24), *(_QWORD *)(a1 + 16), (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)(v12 - 8) + 56))(a2, 1, 1, v12);
  }
}

uint64_t PrefixSequence.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;

  v3 = v2;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v8 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v11, v6, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v15 = (char *)&v19 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v3, v6);
  (*(void (**)(uint64_t, uint64_t))(v11 + 32))(v6, v11);
  v16 = *(_QWORD *)(v3 + *(int *)(a1 + 36));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v3, a1);
  (*(void (**)(uint64_t, char *, unint64_t))(v13 + 32))(a2, v15, AssociatedTypeWitness);
  result = type metadata accessor for PrefixSequence.Iterator(0, v6, v11, v17);
  *(_QWORD *)(a2 + *(int *)(result + 36)) = v16;
  return result;
}

uint64_t PrefixSequence.prefix(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v15;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(v8 + *(int *)(v7 + 36)) >= v6)
    v12 = v6;
  else
    v12 = *(_QWORD *)(v8 + *(int *)(v7 + 36));
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 32);
  v13(v11, v8, v5);
  if (v12 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't take a prefix of negative length", 38, 2, "Swift/Sequence.swift", 20, 2, 0x211uLL, 0);
  result = ((uint64_t (*)(uint64_t, char *, uint64_t))v13)(a3, v11, v5);
  *(_QWORD *)(a3 + *(int *)(a2 + 36)) = v12;
  return result;
}

uint64_t DropWhileSequence._iterator.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return LazyFilterSequence.Iterator.base.getter(a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator, a2);
}

uint64_t DropWhileSequence._iterator.setter(uint64_t a1, uint64_t a2)
{
  return EnumeratedSequence.Iterator._base.setter(a1, a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
}

uint64_t (*DropWhileSequence._iterator.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t (*DropWhileSequence._nextElement.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t DropWhileSequence.init(iterator:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(char *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, const char *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t AssociatedConformanceWitness;
  void (*v28)(unint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, char *, unint64_t);
  unsigned int (*v39)(char *, uint64_t, unint64_t);
  void (*v40)(char *, uint64_t, uint64_t);
  void (*v41)(uint64_t, char *, uint64_t);
  void (*v42)(unint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(char *);
  uint64_t v46;
  uint64_t v47;

  v45 = a2;
  v46 = a3;
  v44 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a5, a4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v47 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v35 - v11;
  v15 = type metadata accessor for Optional(0, AssociatedTypeWitness, v13, v14);
  v16 = *(_QWORD *)(v15 - 8);
  v36 = v15;
  v37 = v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v35 - v20;
  v43 = (uint64_t)a5;
  v35 = type metadata accessor for DropWhileSequence(0, a4, (uint64_t)a5, v22);
  v23 = a6 + *(int *)(v35 + 36);
  (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v47 + 56))(v23, 1, 1, AssociatedTypeWitness);
  v24 = swift_getAssociatedTypeWitness(0, a5, a4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(v24 - 8) + 32))(a6, v44, v24);
  v25 = a4;
  v26 = v36;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v43, v25, v24, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v28 = *(void (**)(unint64_t, uint64_t))(AssociatedConformanceWitness + 16);
  v43 = AssociatedConformanceWitness;
  v44 = a6;
  v42 = v28;
  ((void (*)(unint64_t))v28)(v24);
  v29 = v37;
  v41 = *(void (**)(uint64_t, char *, uint64_t))(v37 + 40);
  v41(v23, v21, v26);
  v30 = v29;
  v31 = v47;
  v40 = *(void (**)(char *, uint64_t, uint64_t))(v30 + 16);
  v40(v19, v23, v26);
  v39 = *(unsigned int (**)(char *, uint64_t, unint64_t))(v31 + 48);
  if (v39(v19, 1, AssociatedTypeWitness) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v19, v26);
  v38 = *(void (**)(char *, char *, unint64_t))(v31 + 32);
  while (1)
  {
    v38(v12, v19, AssociatedTypeWitness);
    v32 = v45(v12);
    if (v6)
      break;
    v33 = v32;
    result = (*(uint64_t (**)(char *, unint64_t))(v47 + 8))(v12, AssociatedTypeWitness);
    if ((v33 & 1) == 0)
      return result;
    v42(v24, v43);
    v41(v23, v21, v26);
    v40(v19, v23, v26);
    if (v39(v19, 1, AssociatedTypeWitness) == 1)
      return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v19, v26);
  }
  (*(void (**)(char *, unint64_t))(v47 + 8))(v12, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(v44, v35);
}

uint64_t DropWhileSequence.init(_:predicate:)@<X0>(uint64_t (*a1)(char *)@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(char *);
  uint64_t v28;
  uint64_t v29;

  v27 = a1;
  v28 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a4, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = (char *)&v25 - v9;
  v12 = type metadata accessor for DropWhileSequence(0, a3, a4, v11);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v25 - v15;
  v17 = *(int *)(v14 + 36);
  v26 = a5;
  v18 = a5 + v17;
  v19 = swift_getAssociatedTypeWitness(0, (const char *)a4, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  (*(void (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
  v20 = v29;
  DropWhileSequence.init(iterator:predicate:)((uint64_t)v10, v27, v28, a3, (const char *)a4, (uint64_t)v16);
  v23 = type metadata accessor for Optional(0, v19, v21, v22);
  if (v20)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v18, v23);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v18, v23);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(v26, v16, v12);
}

uint64_t DropWhileSequence.Iterator._iterator.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return LazyFilterSequence.Iterator.base.getter(a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator, a2);
}

uint64_t DropWhileSequence.Iterator._iterator.setter(uint64_t a1, uint64_t a2)
{
  return EnumeratedSequence.Iterator._base.setter(a1, a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
}

uint64_t (*DropWhileSequence.Iterator._iterator.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t DropWhileSequence._nextElement.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + *(int *)(a1 + 36);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(const char **)(a1 + 24), *(_QWORD *)(a1 + 16), (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v8 = type metadata accessor for Optional(0, AssociatedTypeWitness, v6, v7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a2, v4, v8);
}

uint64_t DropWhileSequence._nextElement.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + *(int *)(a2 + 36);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(const char **)(a2 + 24), *(_QWORD *)(a2 + 16), (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v8 = type metadata accessor for Optional(0, AssociatedTypeWitness, v6, v7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 40))(v4, a1, v8);
}

uint64_t (*DropWhileSequence.Iterator._nextElement.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t DropWhileSequence.Iterator.init(_:nextElement:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const char *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  unint64_t AssociatedTypeWitness;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v10 = a5 + *(int *)(type metadata accessor for DropWhileSequence.Iterator(0, a3, (uint64_t)a4, (uint64_t)a4) + 36);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v10, 1, 1, AssociatedTypeWitness);
  v12 = swift_getAssociatedTypeWitness(0, a4, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(v12 - 8) + 32))(a5, a1, v12);
  v15 = type metadata accessor for Optional(0, AssociatedTypeWitness, v13, v14);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v10, a2, v15);
}

uint64_t DropWhileSequence.Iterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  const char *v4;
  uint64_t v5;
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t AssociatedConformanceWitness;
  void (*v22)(unint64_t *, unint64_t);
  unint64_t *v23;
  uint64_t v25;
  uint64_t v26;

  v26 = a2;
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(const char **)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v4, v5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v9 = type metadata accessor for Optional(0, AssociatedTypeWitness, v7, v8);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v25 - v14;
  v16 = *(int *)(a1 + 36);
  v25 = v2;
  v17 = v2 + v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v25 - v14, v2 + v16, v9);
  v18 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v18 + 48))(v15, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
    v19 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, char *, unint64_t))(v18 + 32))(v26, v15, AssociatedTypeWitness);
    v20 = swift_getAssociatedTypeWitness(255, v4, v5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v4, v5, v20, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
    v22 = *(void (**)(unint64_t *, unint64_t))(AssociatedConformanceWitness + 16);
    v23 = swift_checkMetadataState(0, v20);
    v22(v23, AssociatedConformanceWitness);
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 40))(v17, v13, v9);
    v19 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v18 + 56))(v26, v19, 1, AssociatedTypeWitness);
}

uint64_t DropWhileSequence.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  const char *v4;
  uint64_t v5;
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v24 = a2;
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(const char **)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v4, v5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v23 = type metadata accessor for Optional(0, AssociatedTypeWitness, v7, v8);
  v9 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v11 = (char *)&v23 - v10;
  v12 = swift_getAssociatedTypeWitness(0, v4, v5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v23 - v14;
  (*(void (**)(char *, uint64_t, unint64_t))(v13 + 16))((char *)&v23 - v14, v2, v12);
  v16 = v2 + *(int *)(a1 + 36);
  v17 = v23;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v16, v23);
  v19 = type metadata accessor for DropWhileSequence.Iterator(0, v5, (uint64_t)v4, v18);
  v20 = v24;
  v21 = v24 + *(int *)(v19 + 36);
  (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v21, 1, 1, AssociatedTypeWitness);
  (*(void (**)(uint64_t, char *, unint64_t))(v13 + 32))(v20, v15, v12);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 40))(v21, v11, v17);
}

uint64_t DropWhileSequence.drop(while:)@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  const char *v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t (*v25)(char *);
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t (*v35)(char *);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v35 = a1;
  v36 = a2;
  v37 = a4;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(const char **)(a3 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v6, v5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v32 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v33 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v34 = (char *)&v30 - v8;
  v9 = swift_getAssociatedTypeWitness(255, v6, v5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v12 = type metadata accessor for Optional(0, v9, v10, v11);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v30 - v15;
  v17 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v30 - v18;
  v38 = a3;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v40 + *(int *)(a3 + 36), v12);
  if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v17 + 48))(v16, 1, v9) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    v20 = v38;
    v21 = v40;
    v22 = v37;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v22, v21, v20);
  }
  v31 = v6;
  (*(void (**)(char *, char *, unint64_t))(v17 + 32))(v19, v16, v9);
  v25 = v35;
  v24 = v36;
  v26 = v39;
  v27 = v35(v19);
  if (v26)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(v38 - 8) + 8))(v40);
    return (*(uint64_t (**)(char *, unint64_t))(v17 + 8))(v19, v9);
  }
  else
  {
    v28 = v27;
    (*(void (**)(char *, unint64_t))(v17 + 8))(v19, v9);
    v21 = v40;
    v22 = v37;
    v20 = v38;
    if ((v28 & 1) == 0)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v22, v21, v20);
    v29 = (uint64_t)v34;
    (*(void (**)(char *, uint64_t, unint64_t))(v32 + 16))(v34, v40, v33);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v21, v20);
    return DropWhileSequence.init(iterator:predicate:)(v29, v25, v24, v5, v31, v22);
  }
}

uint64_t protocol witness for Sequence.makeIterator() in conformance DropWhileSequence<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  DropWhileSequence.makeIterator()(a1, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v2, a1);
}

uint64_t Sequence.map<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return Collection.map<A>(_:)(a1, a2, a3, a4, a5, (uint64_t)partial apply for thunk for @callee_guaranteed (@in_guaranteed A.Sequence.Element) -> (@out A1, @error @owned Error), (uint64_t (*)(uint64_t, _QWORD *))_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyADsAE_pqd__Isgnrzr_xABsAE_pSTRzsAE_pRsd_0_r_0_lIetMgnozo_Tpq5Tm);
}

uint64_t Collection.map<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, _QWORD *))
{
  _QWORD v8[8];

  v8[2] = a3;
  v8[3] = a4;
  v8[4] = a5;
  v8[5] = a1;
  v8[6] = a2;
  return a7(a6, v8);
}

uint64_t Sequence<>.split(separator:maxSplits:omittingEmptySubsequences:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)(a1, a2, a3, a4, a5, a6, (uint64_t)partial apply for closure #1 in Sequence<>.contains(_:), (uint64_t (*)(uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t, uint64_t))Sequence.split(maxSplits:omittingEmptySubsequences:whereSeparator:));
}

uint64_t Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t, uint64_t);
  _BYTE v24[16];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v23 = a8;
  v10 = v8;
  v17 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))((char *)&v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), v10, v19);
  v25 = a4;
  v26 = a5;
  v27 = a6;
  v28 = a1;
  v20 = v23(a2, a3, a7, v24, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v10, a4);
  return v20;
}

void (*Sequence.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(uint64_t a1, char a2, uint64_t (*a3)(char *), uint64_t a4, uint64_t a5, uint64_t a6))(char *, unint64_t)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t WitnessTable;

  if (a1 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Must take zero or more splits", 29, 2, "Swift/Sequence.swift", 20, 2, 0x3CBuLL, 0);
  (*(void (**)(uint64_t, uint64_t))(a6 + 56))(a5, a6);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)a6, a5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v15 = type metadata accessor for Array(0, AssociatedTypeWitness, v13, v14);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v15, v16);
  return Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(a1, a2 & 1, a3, a4, v15, WitnessTable);
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(Swift::String::Index *a1, uint64_t a2, uint64_t a3, Swift::String::Index position, Swift::UInt64 a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9;
  Swift::UInt64 v10;
  uint64_t v11;
  uint64_t v12;
  Swift::UInt64 v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  Swift::UInt64 rawBits;
  Swift::UInt64 v18;
  Swift::UInt64 v19;
  Swift::UInt64 v20;
  Swift::UInt64 v21;
  _BYTE *v22;
  Swift::UInt8 v23;
  Swift::UInt64 v24;
  unint64_t v25;
  Swift::UInt64 v26;
  uint64_t v27;
  unint64_t v28;
  Swift::UInt64 v29;
  unint64_t v30;
  Swift::UInt64 v31;
  uint64_t v32;
  Swift::String::Index v33;
  Swift::UInt64 v34;
  Swift::UInt64 v35;
  unint64_t v36;
  Swift::UInt64 v37;
  uint64_t v38;
  uint64_t v39;
  Swift::String::Index v40;
  uint64_t v41;
  uint64_t v42;
  Swift::UInt64 v43;
  Swift::UInt64 v44;
  unint64_t v45;
  Swift::String::Index v46;
  unint64_t v47;
  Swift::String::Index v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  Swift::UInt64 v61;
  Swift::UInt64 v62;
  Swift::UInt64 v63;
  Swift::UInt64 v64;
  Swift::UInt8 v65;
  Swift::UInt8 v66;
  Swift::UInt64 v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  Swift::UInt64 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  Swift::UInt64 v81;
  _QWORD v82[2];

  if (a2)
  {
    if (a3 < 0)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0xB2uLL, 0);
    if (a3)
    {
      v9 = 0;
      v10 = a5 >> 14;
      v11 = (a6 >> 59) & 1;
      if ((a7 & 0x1000000000000000) == 0)
        LOBYTE(v11) = 1;
      v12 = 4 << v11;
      v13 = position._rawBits >> 14;
      v14 = a7 & 0xFFFFFFFFFFFFFFLL;
      v15 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
      v16 = a6 & 0xFFFFFFFFFFFFLL;
      if ((a7 & 0x2000000000000000) != 0)
        v16 = HIBYTE(a7) & 0xF;
      rawBits = position._rawBits;
      while (1)
      {
        v18 = rawBits >> 14;
        if (rawBits >> 14 == v10)
          goto LABEL_31;
        v19 = rawBits & 0xC;
        v20 = rawBits;
        if (v19 == v12)
        {
          v54 = a2;
          v58 = a3;
          v63 = a5;
          v68 = v15;
          v24 = v10;
          v25 = a6;
          v73 = v13;
          v78 = v9;
          v26 = position._rawBits;
          v27 = v14;
          v28 = v16;
          v20 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
          v16 = v28;
          v15 = v68;
          v13 = v73;
          v14 = v27;
          v9 = v78;
          position._rawBits = v26;
          a6 = v25;
          a2 = v54;
          a3 = v58;
          v10 = v24;
          a5 = v63;
          v18 = v20 >> 14;
          if (v20 >> 14 < v73)
LABEL_32:
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/Substring.swift", 21, 2, 0x29BuLL, 0);
        }
        else if (v18 < v13)
        {
          goto LABEL_32;
        }
        if (v18 >= v10)
          goto LABEL_32;
        if ((a7 & 0x1000000000000000) != 0)
        {
          v55 = a2;
          v59 = a3;
          v64 = a5;
          v69 = v16;
          v29 = v10;
          v30 = a6;
          v31 = position._rawBits;
          v74 = v14;
          v79 = v9;
          v32 = v15;
          v23 = String.UTF8View._foreignSubscript(position:)((Swift::String::Index)v20);
          v16 = v69;
          v14 = v74;
          v15 = v32;
          v9 = v79;
          position._rawBits = v31;
          a6 = v30;
          a2 = v55;
          a3 = v59;
          v10 = v29;
          a5 = v64;
          if (v19 != v12)
            goto LABEL_20;
        }
        else
        {
          v21 = v20 >> 16;
          if ((a7 & 0x2000000000000000) != 0)
          {
            v82[0] = a6;
            v82[1] = v14;
            v23 = *((_BYTE *)v82 + v21);
            if (v19 != v12)
              goto LABEL_20;
          }
          else
          {
            v22 = (_BYTE *)v15;
            if ((a6 & 0x1000000000000000) == 0)
            {
              v53 = a6;
              v57 = a2;
              v62 = position._rawBits;
              v67 = a5;
              v77 = v14;
              v81 = v10;
              v49 = a3;
              v50 = v9;
              v51 = v15;
              v72 = v16;
              v22 = _StringObject.sharedUTF8.getter(a6, a7);
              v16 = v72;
              v14 = v77;
              v15 = v51;
              v9 = v50;
              a2 = v57;
              position._rawBits = v62;
              a6 = v53;
              a3 = v49;
              v10 = v81;
              a5 = v67;
            }
            v23 = v22[v21];
            if (v19 != v12)
            {
LABEL_20:
              if ((a7 & 0x1000000000000000) != 0)
                goto LABEL_26;
              goto LABEL_21;
            }
          }
        }
        v65 = v23;
        v33._rawBits = rawBits;
        v56 = a2;
        v60 = a3;
        v34 = a5;
        v35 = v10;
        v36 = a6;
        v37 = position._rawBits;
        v38 = v9;
        v70 = v16;
        v75 = v14;
        v39 = v15;
        v40._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v33)._rawBits;
        v16 = v70;
        v14 = v75;
        v15 = v39;
        v9 = v38;
        position._rawBits = v37;
        a6 = v36;
        a2 = v56;
        a3 = v60;
        v10 = v35;
        a5 = v34;
        rawBits = v40._rawBits;
        v23 = v65;
        if ((a7 & 0x1000000000000000) != 0)
        {
LABEL_26:
          v66 = v23;
          v71 = v15;
          v76 = v14;
          v80 = v9;
          v61 = position._rawBits;
          if (v16 <= rawBits >> 16)
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0x90uLL, 0);
          v41 = a3;
          v42 = a2;
          v43 = v10;
          v44 = a5;
          v45 = v16;
          v46._rawBits = rawBits;
          v47 = a6;
          v48._rawBits = String.UTF8View._foreignIndex(after:)(v46)._rawBits;
          a6 = v47;
          rawBits = v48._rawBits;
          a5 = v44;
          v10 = v43;
          a2 = v42;
          a3 = v41;
          position._rawBits = v61;
          v14 = v76;
          v9 = v80;
          v15 = v71;
          v16 = v45;
          v23 = v66;
          goto LABEL_28;
        }
LABEL_21:
        rawBits = (rawBits & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_28:
        *(_BYTE *)(a2 + v9++) = v23;
        if (a3 == v9)
        {
          v9 = a3;
          goto LABEL_31;
        }
      }
    }
  }
  v9 = 0;
  rawBits = position._rawBits;
LABEL_31:
  a1->_rawBits = position._rawBits;
  a1[1]._rawBits = a5;
  a1[2]._rawBits = a6;
  a1[3]._rawBits = a7;
  a1[4]._rawBits = rawBits;
  return v9;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  if (a2)
  {
    if (a3 < 0)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0xB2uLL, 0);
    if (a3)
    {
      *a2 = a4;
      if (a3 == 1)
      {
        v5 = 1;
      }
      else
      {
        a2[1] = a5;
        v5 = 2;
        a3 = 2;
      }
    }
    else
    {
      v5 = 0;
    }
  }
  else
  {
    v5 = 0;
    a3 = 0;
  }
  *a1 = a4;
  a1[1] = a5;
  a1[2] = v5;
  return a3;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, _WORD *a2, uint64_t a3, unsigned int a4)
{
  int v4;
  uint64_t v5;

  if (!a2)
  {
    v5 = 0;
LABEL_13:
    *(_DWORD *)result = a4;
    *(_QWORD *)(result + 8) = v5;
    return v5;
  }
  if (a3 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0xB2uLL, 0);
  if (!a3)
  {
    v5 = 0;
    goto LABEL_13;
  }
  LOWORD(v4) = a4;
  if (!HIWORD(a4) || (v4 = (unsigned __int16)((a4 + 67043328) >> 10) + 55296, (v4 & 0x10000) == 0))
  {
    *a2 = v4;
    v5 = 1;
    if (a3 != 1 && a4 >= 0x10000)
    {
      a2[1] = a4 & 0x3FF | 0xDC00;
      v5 = 2;
      if (a3 == 2)
        v5 = 2;
    }
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t a1, _BYTE *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v8;

  if (!a2)
  {
    v8 = 0;
    v6 = 0;
    goto LABEL_13;
  }
  v6 = a3;
  if (a3 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0xB2uLL, 0);
  if (!a3)
  {
    v8 = 0;
    goto LABEL_13;
  }
  *a2 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(a4, 0);
  if (a4 >= 0x80)
  {
    if (v6 == 1)
    {
      v8 = 1;
      goto LABEL_13;
    }
    a2[1] = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(a4, 1uLL);
    if (v6 == 2)
    {
      v8 = 2;
      goto LABEL_13;
    }
    if (a4 >= 0x800)
    {
      a2[2] = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(a4, 2uLL);
      if (v6 == 3)
      {
        v8 = 3;
        goto LABEL_13;
      }
      v8 = 3;
      if (a4 >= 0x10000)
      {
        a2[3] = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(a4, 3uLL);
        v8 = v6;
        if (v6 == 4)
          goto LABEL_13;
        v8 = 4;
        if (!HIWORD(a4))
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unicode.Scalar.UTF8View index is out of bounds", 46, 2, "Swift/UnicodeScalar.swift", 25, 2, 0x1E9uLL, 0);
      }
    }
    else
    {
      v8 = 2;
    }
    goto LABEL_6;
  }
  v8 = 1;
  if (v6 != 1)
LABEL_6:
    v6 = v8;
LABEL_13:
  *(_DWORD *)a1 = a4;
  *(_QWORD *)(a1 + 8) = v8;
  return v6;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;

  if (a2)
  {
    if (a3 < 0)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0xB2uLL, 0);
    if (a3)
    {
      *a2 = a4;
      if (a3 != 1)
        a3 = 1;
      v4 = 1;
    }
    else
    {
      v4 = 0;
    }
  }
  else
  {
    v4 = 0;
    a3 = 0;
  }
  *(_DWORD *)a1 = a4;
  *(_QWORD *)(a1 + 8) = v4;
  return a3;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned __int16 a4)
{
  uint64_t v4;

  if (a2)
  {
    if (a3 < 0)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0xB2uLL, 0);
    if (a3)
    {
      *a2 = a4;
      if (a3 != 1)
        a3 = 1;
      v4 = 1;
    }
    else
    {
      v4 = 0;
    }
  }
  else
  {
    v4 = 0;
    a3 = 0;
  }
  *(_WORD *)a1 = a4;
  *(_QWORD *)(a1 + 8) = v4;
  return a3;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v4;

  if (a2)
  {
    if (a3 < 0)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0xB2uLL, 0);
    if (a3)
    {
      *a2 = a4;
      if (a3 != 1)
        a3 = 1;
      v4 = 1;
    }
    else
    {
      v4 = 0;
    }
  }
  else
  {
    v4 = 0;
    a3 = 0;
  }
  *(_BYTE *)a1 = a4;
  *(_QWORD *)(a1 + 8) = v4;
  return a3;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t a1, _QWORD *a2, uint64_t a3, int a4)
{
  uint64_t v4;

  if (a2)
  {
    if (a3 < 0)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0xB2uLL, 0);
    if (a3)
    {
      *a2 = a4;
      if (a3 != 1)
        a3 = 1;
      v4 = 1;
    }
    else
    {
      v4 = 0;
    }
  }
  else
  {
    v4 = 0;
    a3 = 0;
  }
  *(_DWORD *)a1 = a4;
  *(_QWORD *)(a1 + 8) = v4;
  return a3;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t a1, _QWORD *a2, uint64_t a3, __int16 a4)
{
  uint64_t v4;

  if (a2)
  {
    if (a3 < 0)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0xB2uLL, 0);
    if (a3)
    {
      *a2 = a4;
      if (a3 != 1)
        a3 = 1;
      v4 = 1;
    }
    else
    {
      v4 = 0;
    }
  }
  else
  {
    v4 = 0;
    a3 = 0;
  }
  *(_WORD *)a1 = a4;
  *(_QWORD *)(a1 + 8) = v4;
  return a3;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t a1, _QWORD *a2, uint64_t a3, char a4)
{
  uint64_t v4;

  if (a2)
  {
    if (a3 < 0)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0xB2uLL, 0);
    if (a3)
    {
      *a2 = a4;
      if (a3 != 1)
        a3 = 1;
      v4 = 1;
    }
    else
    {
      v4 = 0;
    }
  }
  else
  {
    v4 = 0;
    a3 = 0;
  }
  *(_BYTE *)a1 = a4;
  *(_QWORD *)(a1 + 8) = v4;
  return a3;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(int64x2_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;
  int64x2_t v12;
  int64x2_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v14.i64[0] = a4;
  v14.i64[1] = a4;
  v15 = a5;
  v16 = a6;
  v17 = a7;
  if (a2)
  {
    v8 = a3;
    if (a3 < 0)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0xB2uLL, 0);
    if (a3)
    {
      v10 = 0;
      while (1)
      {
        v11 = specialized Unicode._InternalNFD.Iterator.next()();
        if ((v11 & 0x1000000000000) != 0)
          break;
        *(_DWORD *)(a2 + 4 * v10++) = v11;
        if (v8 == v10)
        {
          v12 = v14;
          a5 = v15;
          a6 = v16;
          a7 = v17;
          goto LABEL_10;
        }
      }
      v12 = v14;
      a5 = v15;
      a6 = v16;
      a7 = v17;
      a1->i64[0] = (uint64_t)&_swiftEmptyArrayStorage;
      a1->i8[8] = 0;
      v8 = v10;
    }
    else
    {
      v12 = vdupq_n_s64(a4);
LABEL_10:
      a1->i64[0] = (uint64_t)&_swiftEmptyArrayStorage;
      a1->i8[8] = 0;
    }
  }
  else
  {
    v8 = 0;
    a1->i64[0] = (uint64_t)&_swiftEmptyArrayStorage;
    a1->i8[8] = 0;
    v12 = vdupq_n_s64(a4);
  }
  a1[1] = v12;
  a1[2].i64[0] = a5;
  a1[2].i64[1] = a6;
  a1[3].i64[0] = a7;
  return v8;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t a1, _DWORD *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v8;
  _DWORD *v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  __objc2_class **v13;
  char v14;
  int64x2_t v15;
  int v16;
  char v17;
  __objc2_class **v18;
  unint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  __objc2_class **v30;
  char *v31;
  unint64_t v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  __int16 v37;
  __objc2_class *v38;
  unsigned int v39;
  unint64_t v40;
  unint64_t v41;
  __objc2_class **v42;
  int64_t v43;
  __objc2_class *v44;
  __objc2_class *v45;
  unint64_t v46;
  __int16 v47;
  int v48;
  __int16 v49;
  uint64_t v50;
  BOOL v51;
  unsigned int v52;
  unsigned int v53;
  __objc2_class **v54;
  char v55;
  int v56;
  char v57;
  int64x2_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v54 = &_swiftEmptyArrayStorage;
  v55 = 0;
  v56 = 0;
  v57 = 1;
  v58.i64[0] = a4;
  v58.i64[1] = a4;
  v59 = a5;
  v60 = a6;
  v61 = a7;
  if (!a2)
  {
    a3 = 0;
    *(_QWORD *)a1 = &_swiftEmptyArrayStorage;
    *(_BYTE *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 12) = 0;
    *(_BYTE *)(a1 + 16) = 1;
    *(_QWORD *)(a1 + 24) = &_swiftEmptyArrayStorage;
    *(_BYTE *)(a1 + 32) = 0;
    v15 = vdupq_n_s64(a4);
    goto LABEL_8;
  }
  if (a3 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0xB2uLL, 0);
  v8 = 1;
  if (!a3)
  {
    v16 = 0;
    v17 = 0;
    v15 = vdupq_n_s64(a4);
    v18 = &_swiftEmptyArrayStorage;
    goto LABEL_7;
  }
  v9 = a2;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = &_swiftEmptyArrayStorage;
  v14 = 1;
  v50 = a3;
  while (2)
  {
    v22 = (unint64_t)v13[2];
    v51 = v22 != 0;
    if (v22)
    {
      if (!v10)
      {
        v23 = v22 - 1;
        if (v22 <= 1)
        {
          v55 = 1;
        }
        else
        {
          v53 = v11;
          v24 = 0;
          v25 = 8 * v22 + 24;
          v26 = 1;
          do
          {
            v27 = (unint64_t)v13[2];
            if (v26 - 1 >= v27 || v23 >= v27)
            {
              v46 = 675;
              goto LABEL_81;
            }
            v47 = WORD2(v13[v24 + 4]);
            v48 = (int)v13[v24 + 4];
            v28 = *(_DWORD *)((char *)v13 + v25);
            v49 = *(_WORD *)((char *)v13 + v25 + 4);
            if (!swift_isUniquelyReferenced_nonNull_native((uint64_t)v13))
              v13 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v13);
            v29 = (unint64_t)v13[2];
            if (v26 - 1 >= v29 || (v30 = &v13[v24], *((_DWORD *)v30 + 8) = v28, *((_WORD *)v30 + 18) = v49, v23 >= v29))
            {
              v46 = 688;
LABEL_81:
              _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, v46, 0);
            }
            v31 = (char *)v13 + v25;
            *(_DWORD *)v31 = v48;
            *((_WORD *)v31 + 2) = v47;
            --v23;
            v25 -= 8;
            ++v24;
          }
          while (v26++ < (uint64_t)v23);
          v55 = 1;
          v11 = v53;
          if (!v13[2])
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove last element from an empty collection", 50, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x363uLL, 0);
        }
      }
      if (swift_isUniquelyReferenced_nonNull_native((uint64_t)v13))
      {
        v44 = v13[2];
        if (v44)
        {
LABEL_73:
          v45 = (__objc2_class *)((char *)v44 - 1);
          v21 = (int)v13[(_QWORD)v44 - 1 + 4];
          v13[2] = v45;
          v54 = v13;
          v20 = v11;
          goto LABEL_12;
        }
      }
      else
      {
        v13 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v13);
        v44 = v13[2];
        if (v44)
          goto LABEL_73;
      }
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't removeLast from an empty Array", 36, 2, "Swift/Array.swift", 17, 2, 0x51CuLL, 0);
    }
    v52 = v11;
    v55 = 0;
    v33 = specialized Unicode._InternalNFD.Iterator.next()();
    if ((v33 & 0x1000000000000) != 0)
    {
      v56 = 0;
      v57 = 1;
      if ((v14 & 1) == 0)
      {
        v20 = 0;
        v21 = v11;
        v14 = 1;
        goto LABEL_12;
      }
      v15 = v58;
      a5 = v59;
      a6 = v60;
      a7 = v61;
      *(_QWORD *)a1 = v54;
      *(_BYTE *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 12) = 0;
      *(_BYTE *)(a1 + 16) = 1;
      *(_QWORD *)(a1 + 24) = &_swiftEmptyArrayStorage;
      a3 = v12;
      *(_BYTE *)(a1 + 32) = 0;
      goto LABEL_8;
    }
    v20 = v33;
    while (1)
    {
      v34 = (char *)v13 + 36;
      if ((v14 & 1) != 0)
        break;
      v37 = WORD2(v20);
      v38 = v13[2];
      if (!v38)
      {
        if ((v20 & 0x600000000) != 0 && v20 >= 0x300)
        {
          v35 = specialized Unicode._InternalNFC.Iterator.composeHangul(_:and:)(v52, v20);
          if ((v35 & 0x100000000) == 0)
            goto LABEL_30;
          LODWORD(v35) = _swift_stdlib_getComposition(v52, v20);
          if ((_DWORD)v35 != -1)
            goto LABEL_30;
        }
LABEL_54:
        if ((v20 & 0x7F800000000) == 0)
          goto LABEL_74;
LABEL_55:
        if (!swift_isUniquelyReferenced_nonNull_native((uint64_t)v13))
        {
          v43 = (int64_t)&v13[2]->isa + 1;
          goto LABEL_64;
        }
        goto LABEL_56;
      }
      v39 = (v20 >> 35);
      if (v39 > (*(unsigned __int16 *)&v34[8 * (_QWORD)v38 - 8] >> 3))
      {
        if ((v20 & 0x600000000) != 0 && v20 >= 0x300)
        {
          v35 = specialized Unicode._InternalNFC.Iterator.composeHangul(_:and:)(v52, v20);
          if ((v35 & 0x100000000) == 0)
            goto LABEL_30;
          LODWORD(v35) = _swift_stdlib_getComposition(v52, v20);
          if ((_DWORD)v35 != -1)
            goto LABEL_30;
        }
        goto LABEL_55;
      }
LABEL_60:
      if (!v39)
      {
LABEL_74:
        v14 = 0;
        v56 = v20;
        v57 = 0;
        goto LABEL_11;
      }
      if (!swift_isUniquelyReferenced_nonNull_native((uint64_t)v13))
      {
        v43 = (int64_t)&v38->isa + 1;
LABEL_64:
        v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v43, 1, (uint64_t)v13);
      }
LABEL_56:
      v41 = (unint64_t)v13[2];
      v40 = (unint64_t)v13[3];
      if (v41 >= v40 >> 1)
        v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v40 > 1), v41 + 1, 1, (uint64_t)v13);
      v13[2] = (__objc2_class *)(v41 + 1);
      v42 = &v13[v41];
      *((_DWORD *)v42 + 8) = v20;
      *((_WORD *)v42 + 18) = v37;
      v54 = v13;
      v20 = specialized Unicode._InternalNFD.Iterator.next()();
      v14 = 0;
      if ((v20 & 0x1000000000000) != 0)
        goto LABEL_10;
    }
    if ((v20 & 0x7F800000000) == 0)
    {
      LODWORD(v35) = v20;
LABEL_30:
      v56 = v35;
      v57 = 0;
      v36 = specialized Unicode._InternalNFD.Iterator.next()();
      if ((v36 & 0x1000000000000) == 0)
      {
        v20 = v36;
        do
        {
          v52 = v35;
          v37 = WORD2(v20);
          v38 = v13[2];
          if (v38)
          {
            v39 = (v20 >> 35);
            if (v39 <= (*(unsigned __int16 *)&v34[8 * (_QWORD)v38 - 8] >> 3))
              goto LABEL_60;
            if ((v20 & 0x600000000) == 0)
              goto LABEL_55;
            if (v20 < 0x300)
              goto LABEL_55;
            v35 = specialized Unicode._InternalNFC.Iterator.composeHangul(_:and:)(v35, v20);
            if ((v35 & 0x100000000) != 0)
            {
              LODWORD(v35) = _swift_stdlib_getComposition(v52, v20);
              if ((_DWORD)v35 == -1)
                goto LABEL_55;
            }
          }
          else
          {
            if ((v20 & 0x600000000) == 0)
              goto LABEL_54;
            if (v20 < 0x300)
              goto LABEL_54;
            v35 = specialized Unicode._InternalNFC.Iterator.composeHangul(_:and:)(v35, v20);
            if ((v35 & 0x100000000) != 0)
            {
              LODWORD(v35) = _swift_stdlib_getComposition(v52, v20);
              if ((_DWORD)v35 == -1)
                goto LABEL_54;
            }
          }
          v56 = v35;
          v57 = 0;
          v20 = specialized Unicode._InternalNFD.Iterator.next()();
        }
        while ((v20 & 0x1000000000000) == 0);
      }
      v52 = v35;
LABEL_10:
      v20 = 0;
      v56 = 0;
      v14 = 1;
      v57 = 1;
LABEL_11:
      v21 = v52;
      goto LABEL_12;
    }
    v14 = 1;
    v21 = v20;
    v20 = v52;
LABEL_12:
    ++v12;
    *v9++ = v21;
    v10 = v51;
    v11 = v20;
    a3 = v50;
    if (v12 != v50)
      continue;
    break;
  }
  v18 = v54;
  v17 = v55;
  v16 = v56;
  v8 = v57;
  v15 = v58;
  a5 = v59;
  a6 = v60;
  a7 = v61;
LABEL_7:
  *(_QWORD *)a1 = v18;
  *(_BYTE *)(a1 + 8) = v17;
  *(_DWORD *)(a1 + 12) = v16;
  *(_BYTE *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = &_swiftEmptyArrayStorage;
  *(_BYTE *)(a1 + 32) = 0;
LABEL_8:
  *(int64x2_t *)(a1 + 40) = v15;
  *(_QWORD *)(a1 + 56) = a5;
  *(_QWORD *)(a1 + 64) = a6;
  *(_QWORD *)(a1 + 72) = a7;
  return a3;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(_QWORD *a1, _QWORD *a2, uint64_t a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  void **v18;
  void *v19;
  id v20;
  unint64_t v22;
  _QWORD *v23;

  v8 = type metadata accessor for __CocoaDictionary.Iterator();
  v12 = swift_allocObject(v8, 0xE8uLL, 7uLL);
  *((_OWORD *)v12 + 1) = 0u;
  *((_OWORD *)v12 + 5) = 0u;
  v12[27] = 0;
  v13 = v12 + 27;
  *((_OWORD *)v12 + 2) = 0u;
  *((_OWORD *)v12 + 3) = 0u;
  *((_OWORD *)v12 + 4) = 0u;
  *((_OWORD *)v12 + 6) = 0u;
  *((_OWORD *)v12 + 7) = 0u;
  *((_OWORD *)v12 + 8) = 0u;
  *((_OWORD *)v12 + 9) = 0u;
  *((_OWORD *)v12 + 10) = 0u;
  *((_OWORD *)v12 + 11) = 0u;
  *((_OWORD *)v12 + 12) = 0u;
  v12[28] = 0;
  v12[26] = a4;
  v23 = a1;
  if (a2)
  {
    if (a3 < 0)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0xB2uLL, 0);
    v14 = 0;
    if (a3)
    {
      while (1)
      {
        v15 = *v13;
        if (*v13 < 0)
          break;
        if (v15 == v12[28])
        {
          v16 = objc_msgSend(a4, sel_countByEnumeratingWithState_objects_count_, v12 + 2, v12 + 10, 16);
          v12[28] = v16;
          if (!v16)
          {
            *v13 = -1;
            break;
          }
          v15 = 0;
          *v13 = 0;
        }
        v17 = v12[3];
        if (!v17)
        {
          v22 = 773;
          goto LABEL_22;
        }
        if ((unint64_t)(v15 - 0x1000000000000000) >> 61 != 7)
        {
          __break(1u);
LABEL_18:
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x4F9uLL, 0);
        }
        v18 = (void **)(v17 + 8 * v15);
        if ((v18 & 7) != 0)
          goto LABEL_18;
        v19 = *v18;
        *v13 = v15 + 1;
        swift_unknownObjectRetain(v19, v9, v10, v11);
        v20 = objc_msgSend(a4, sel_objectForKey_, v19);
        if (!v20)
        {
          v22 = 784;
LABEL_22:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/DictionaryBridging.swift", 30, 2, v22, 0);
        }
        ++v14;
        *a2 = v19;
        a2[1] = v20;
        a2 += 2;
        if (a3 == v14)
        {
          v14 = a3;
          break;
        }
      }
    }
  }
  else
  {
    v14 = 0;
  }
  *v23 = v12;
  return v14;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(unsigned int *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;

  if (a2)
  {
    if (a3 < 0)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0xB2uLL, 0);
    if (a3)
    {
      v4 = 0;
      while (a4)
      {
        *(_BYTE *)(a2 + v4) = a4 - 1;
        a4 >>= 8;
        if (a3 == ++v4)
          goto LABEL_7;
      }
    }
    else
    {
LABEL_7:
      v4 = a3;
    }
  }
  else
  {
    v4 = 0;
  }
  *a1 = a4;
  return v4;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(unint64_t **a1, unint64_t *a2, uint64_t a3, unint64_t *a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t i;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  if (a5 >= 1)
  {
    v5 = *a4;
    if (a2)
      goto LABEL_3;
LABEL_20:
    v6 = 0;
    a3 = 0;
    goto LABEL_25;
  }
  v5 = 0;
  if (!a2)
    goto LABEL_20;
LABEL_3:
  if (a3 < 0)
    goto LABEL_28;
  v6 = 0;
  if (a3)
  {
    for (i = 0; i != a3; ++i)
    {
      if (v5)
      {
        v8 = __clz(__rbit64(v5));
        v5 &= v5 - 1;
        v9 = v8 | (v6 << 6);
      }
      else
      {
        v10 = v6 + 1;
        if (__OFADD__(v6, 1))
          goto LABEL_27;
        if (v10 >= a5)
        {
          v5 = 0;
          goto LABEL_24;
        }
        v11 = a4[v10];
        if (!v11)
        {
          v12 = v6 + 2;
          if (v10 + 1 >= a5)
          {
            v5 = 0;
            v6 = v10;
LABEL_24:
            a3 = i;
            break;
          }
          v11 = a4[v12];
          if (!v11)
          {
            while (1)
            {
              v10 = v12 + 1;
              if (__OFADD__(v12, 1))
                break;
              if (v10 >= a5)
              {
                v5 = 0;
                v6 = a5 - 1;
                goto LABEL_24;
              }
              v11 = a4[v10];
              ++v12;
              if (v11)
                goto LABEL_18;
            }
            __break(1u);
LABEL_27:
            __break(1u);
LABEL_28:
            _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0xB2uLL, 0);
          }
          ++v10;
        }
LABEL_18:
        v13 = __clz(__rbit64(v11));
        v5 = (v11 - 1) & v11;
        v9 = v13 + (v10 << 6);
        v6 = v10;
      }
      *a2++ = v9;
    }
  }
LABEL_25:
  *a1 = a4;
  a1[1] = (unint64_t *)a5;
  a1[2] = (unint64_t *)v6;
  a1[3] = (unint64_t *)v5;
  return a3;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;

  if (a2)
  {
    if (a3 < 0)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0xB2uLL, 0);
    if (a3)
    {
      v4 = 0;
      while (a4)
      {
        *(_QWORD *)(a2 + 8 * v4) = __clz(__rbit64(a4));
        a4 &= a4 - 1;
        if (a3 == ++v4)
          goto LABEL_7;
      }
    }
    else
    {
LABEL_7:
      v4 = a3;
    }
  }
  else
  {
    v4 = 0;
  }
  *a1 = a4;
  return v4;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  char v5;
  unint64_t v6;
  unint64_t v7;

  if (a2)
  {
    if (a3 < 0)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0xB2uLL, 0);
    if (a3)
    {
      v5 = 0;
      v6 = 0;
      while ((HIBYTE(a5) & 0xF) != v6)
      {
        if (v6 >= 8)
          v7 = a5;
        else
          v7 = a4;
        *(_BYTE *)(a2 + v6) = v7 >> (v5 & 0x38);
        v5 += 8;
        if (a3 == ++v6)
          goto LABEL_13;
      }
      a3 = HIBYTE(a5) & 0xF;
    }
  }
  else
  {
    a3 = 0;
  }
LABEL_13:
  *a1 = a4;
  a1[1] = a5;
  a1[2] = a3;
  return a3;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(_QWORD *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  void **v18;
  void *v19;

  v8 = type metadata accessor for __CocoaSet.Iterator();
  v12 = swift_allocObject(v8, 0xE8uLL, 7uLL);
  *((_OWORD *)v12 + 1) = 0u;
  *((_OWORD *)v12 + 5) = 0u;
  v12[27] = 0;
  v13 = v12 + 27;
  *((_OWORD *)v12 + 2) = 0u;
  *((_OWORD *)v12 + 3) = 0u;
  *((_OWORD *)v12 + 4) = 0u;
  *((_OWORD *)v12 + 6) = 0u;
  *((_OWORD *)v12 + 7) = 0u;
  *((_OWORD *)v12 + 8) = 0u;
  *((_OWORD *)v12 + 9) = 0u;
  *((_OWORD *)v12 + 10) = 0u;
  *((_OWORD *)v12 + 11) = 0u;
  *((_OWORD *)v12 + 12) = 0u;
  v12[28] = 0;
  v12[26] = a4;
  if (!a2)
    goto LABEL_14;
  if (a3 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0xB2uLL, 0);
  if (a3)
  {
    v14 = 0;
    while (1)
    {
      v15 = *v13;
      if (*v13 < 0)
        break;
      if (v15 == v12[28])
      {
        v16 = objc_msgSend(a4, sel_countByEnumeratingWithState_objects_count_, v12 + 2, v12 + 10, 16);
        v12[28] = v16;
        if (!v16)
        {
          *v13 = -1;
          break;
        }
        v15 = 0;
        *v13 = 0;
      }
      v17 = v12[3];
      if (!v17)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/SetBridging.swift", 23, 2, 0x254uLL, 0);
      if ((unint64_t)(v15 - 0x1000000000000000) >> 61 != 7)
      {
        __break(1u);
LABEL_18:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x4F9uLL, 0);
      }
      v18 = (void **)(v17 + 8 * v15);
      if ((v18 & 7) != 0)
        goto LABEL_18;
      v19 = *v18;
      *v13 = v15 + 1;
      *(_QWORD *)(a2 + 8 * v14) = v19;
      swift_unknownObjectRetain(v19, v9, v10, v11);
      if (a3 == ++v14)
      {
        v14 = a3;
        break;
      }
    }
  }
  else
  {
LABEL_14:
    v14 = 0;
  }
  *a1 = v12;
  return v14;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(_QWORD *a1, unint64_t *a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;

  if (a5 + 1 < 64)
    v5 = ~(-1 << (a5 + 1));
  else
    v5 = -1;
  v6 = *a4 & v5;
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
    goto LABEL_27;
  }
  if (a3 < 0)
    goto LABEL_30;
  if (!a3)
  {
    v8 = 0;
    goto LABEL_27;
  }
  v7 = 0;
  v8 = 0;
  v9 = (unint64_t)(a5 + 64) >> 6;
  while (v6)
  {
    v10 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    v11 = v10 | (v8 << 6);
LABEL_9:
    ++v7;
    *a2++ = v11;
    if (v7 == a3)
      goto LABEL_27;
  }
  v12 = v8 + 1;
  if (__OFADD__(v8, 1))
    goto LABEL_29;
  if (v12 >= v9)
  {
    v6 = 0;
    goto LABEL_26;
  }
  v13 = a4[v12];
  if (v13)
  {
LABEL_20:
    v15 = __clz(__rbit64(v13));
    v6 = (v13 - 1) & v13;
    v11 = v15 + (v12 << 6);
    v8 = v12;
    goto LABEL_9;
  }
  v14 = v8 + 2;
  if (v12 + 1 < v9)
  {
    v13 = a4[v14];
    if (!v13)
    {
      while (1)
      {
        v12 = v14 + 1;
        if (__OFADD__(v14, 1))
          break;
        if (v12 >= v9)
        {
          v6 = 0;
          v8 = v9 - 1;
          goto LABEL_26;
        }
        v13 = a4[v12];
        ++v14;
        if (v13)
          goto LABEL_20;
      }
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0xB2uLL, 0);
    }
    ++v12;
    goto LABEL_20;
  }
  v6 = 0;
  v8 = v12;
LABEL_26:
  a3 = v7;
LABEL_27:
  *a1 = a4;
  a1[1] = a5;
  a1[2] = v8;
  a1[3] = v6;
  return a3;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(unint64_t *a1, uint64_t *a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t *v12;
  uint64_t v13;
  Swift::String::Index v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v19;

  if (a2)
  {
    if (a3 < 0)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0xB2uLL, 0);
    if (a3)
    {
      v12 = a2;
      v19 = a1;
      v13 = 0;
      v14._rawBits = a4;
      while ((v14._rawBits ^ a5) >= 0x4000)
      {
        ++v13;
        v15 = Substring.subscript.getter(v14._rawBits, a4, a5, a6, a7);
        v17 = v16;
        v14._rawBits = Substring.index(after:)(v14)._rawBits;
        *v12 = v15;
        v12[1] = v17;
        v12 += 2;
        if (a3 == v13)
        {
          v13 = a3;
          break;
        }
      }
      a1 = v19;
    }
    else
    {
      v14._rawBits = a4;
      v13 = 0;
    }
  }
  else
  {
    v13 = 0;
    v14._rawBits = a4;
  }
  *a1 = a4;
  a1[1] = a5;
  a1[2] = a6;
  a1[3] = a7;
  a1[4] = v14._rawBits;
  return v13;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(Swift::String::Index *a1, uint64_t a2, uint64_t a3, Swift::String::Index a4, Swift::UInt64 a5, uint64_t a6, unint64_t a7)
{
  uint64_t v12;
  Swift::UInt64 v13;
  uint64_t v14;
  uint64_t v15;
  Swift::UInt64 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BOOL4 v20;
  Swift::UInt64 rawBits;
  Swift::UInt64 v22;
  Swift::UInt64 v23;
  Swift::UInt64 v24;
  unsigned __int8 *v25;
  unsigned int v26;
  Swift::UInt64 v27;
  uint64_t v28;
  Swift::String::Index v29;
  Swift::String::Index v30;
  Swift::UInt64 v31;
  Swift::UInt16 v32;
  uint64_t v33;
  Swift::UInt64 v34;
  Swift::String::Index v35;
  Swift::UInt64 v36;
  unsigned __int8 *v37;
  int v38;
  uint64_t v39;
  Swift::String::Index v40;
  Swift::UInt64 v41;
  Swift::UInt64 v42;
  uint64_t v43;
  Swift::String::Index v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  Swift::String::Index v50;
  Swift::UInt64 v51;
  Swift::UInt64 v52;
  uint64_t v53;
  Swift::String::Index v54;
  Swift::UInt64 v55;
  Swift::UInt64 v57;
  Swift::UInt64 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  Swift::UInt64 v63;
  Swift::UInt64 v64;
  Swift::UInt64 v65;
  Swift::UInt64 v66;
  Swift::UInt64 v67;
  Swift::UInt64 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _BOOL4 v90;
  _BOOL4 v91;
  _BOOL4 v92;
  _BOOL4 v93;
  _BOOL4 v94;
  _BOOL4 v95;
  _BOOL4 v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  Swift::UInt64 v105;
  Swift::UInt64 v106;
  Swift::UInt64 v107;
  Swift::UInt64 v108;
  Swift::UInt64 v109;
  Swift::UInt64 v110;
  Swift::UInt64 v111;
  Swift::UInt64 v112;
  uint64_t v113;
  uint64_t v114;

  if (a2)
  {
    if (a3 < 0)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0xB2uLL, 0);
    if (a3)
    {
      v12 = 0;
      v13 = a5 >> 14;
      v14 = ((unint64_t)a6 >> 59) & 1;
      if ((a7 & 0x1000000000000000) == 0)
        LOBYTE(v14) = 1;
      v15 = 4 << v14;
      v16 = a4._rawBits >> 14;
      v17 = a7 & 0xFFFFFFFFFFFFFFLL;
      v18 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((a7 & 0x2000000000000000) != 0)
        v19 = HIBYTE(a7) & 0xF;
      else
        v19 = a6 & 0xFFFFFFFFFFFFLL;
      if ((a7 & 0x2000000000000000) != 0)
        v20 = (a7 & 0x4000000000000000) != 0;
      else
        v20 = a6 < 0;
      rawBits = a4._rawBits;
      while (1)
      {
        v22 = rawBits >> 14;
        if (rawBits >> 14 == v13)
          goto LABEL_64;
        v23 = rawBits;
        if ((rawBits & 0xC) == v15)
        {
          v76 = v15;
          v83 = a2;
          v90 = v20;
          v97 = v19;
          v105 = a5;
          v63 = v13;
          v69 = v17;
          v27 = v16;
          v28 = v18;
          v29._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
          v20 = v90;
          v19 = v97;
          a5 = v105;
          v18 = v28;
          v17 = v69;
          v15 = v76;
          v16 = v27;
          v13 = v63;
          a2 = v83;
          v23 = v29._rawBits;
          v22 = v29._rawBits >> 14;
          if (v29._rawBits >> 14 < v27)
LABEL_61:
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/Substring.swift", 21, 2, 0x33FuLL, 0);
        }
        else if (v22 < v16)
        {
          goto LABEL_61;
        }
        if (v22 >= v13)
          goto LABEL_61;
        if ((a7 & 0x1000000000000000) != 0)
        {
          v30._rawBits = v23;
          v77 = v15;
          v84 = a2;
          v91 = v20;
          v98 = v19;
          v106 = a5;
          v64 = v13;
          v70 = v17;
          v31 = v16;
          v33 = v18;
          v32 = String.UTF16View._foreignSubscript(position:)(v30);
          v20 = v91;
          v19 = v98;
          a5 = v106;
          v18 = v33;
          v17 = v70;
          v15 = v77;
          v16 = v31;
          v13 = v64;
          a2 = v84;
          LOWORD(v33) = v32;
          goto LABEL_36;
        }
        if ((v23 & 1) != 0)
        {
          v24 = v23 >> 16;
          if ((a7 & 0x2000000000000000) != 0)
            goto LABEL_29;
        }
        else
        {
          v78 = v15;
          v85 = a2;
          v92 = v20;
          v99 = v19;
          v107 = a5;
          v65 = v13;
          v71 = v17;
          v34 = v16;
          v59 = v18;
          v35._rawBits = _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)v23)._rawBits;
          v20 = v92;
          v19 = v99;
          a5 = v107;
          v18 = v59;
          v13 = v65;
          v17 = v71;
          v15 = v78;
          v16 = v34;
          a2 = v85;
          v24 = (v35._rawBits & 0xFFFFFFFFFFFFFFF2 | 1) >> 16;
          if ((a7 & 0x2000000000000000) != 0)
          {
LABEL_29:
            v113 = a6;
            v114 = v17;
            v26 = *((unsigned __int8 *)&v113 + v24);
            if (*((char *)&v113 + v24) < 0)
              __asm { BR              X10 }
            goto LABEL_30;
          }
        }
        v25 = (unsigned __int8 *)v18;
        if ((a6 & 0x1000000000000000) == 0)
        {
          v80 = v15;
          v87 = a2;
          v102 = v19;
          v110 = a5;
          v67 = v13;
          v73 = v17;
          v58 = v16;
          v61 = v18;
          v95 = v20;
          v25 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a6, a7);
          v20 = v95;
          v19 = v102;
          a5 = v110;
          v16 = v58;
          v18 = v61;
          v17 = v73;
          v15 = v80;
          v13 = v67;
          a2 = v87;
        }
        v26 = v25[v24];
        if ((char)v25[v24] < 0)
          __asm { BR              X10 }
LABEL_30:
        if ((v23 & 0xC000) == 0x4000)
        {
          if (!HIWORD(v26))
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UTF16.swift", 17, 2, 0x5BuLL, 0);
          LOWORD(v33) = v26 & 0x3FF | 0xDC00;
        }
        else if (HIWORD(v26))
        {
          LODWORD(v33) = ((v26 + 67043328) >> 10) - 10240;
        }
        else
        {
          LOWORD(v33) = v26;
        }
LABEL_36:
        if ((rawBits & 0xC) == v15)
        {
          v40._rawBits = rawBits;
          v79 = v15;
          v86 = a2;
          v93 = v20;
          v100 = v19;
          v108 = a5;
          v41 = v13;
          v42 = v16;
          v72 = v17;
          v43 = v18;
          v44._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v40)._rawBits;
          v20 = v93;
          v19 = v100;
          a5 = v108;
          v18 = v43;
          v17 = v72;
          v15 = v79;
          v16 = v42;
          v13 = v41;
          a2 = v86;
          rawBits = v44._rawBits;
        }
        v36 = rawBits >> 16;
        if (rawBits >> 16 >= v19)
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF16View.swift", 27, 2, 0x93uLL, 0);
        if ((a7 & 0x1000000000000000) != 0)
        {
          v45 = rawBits;
          v101 = v19;
          v109 = a5;
          v46 = a2;
          v60 = v18;
          v66 = v13;
          v47 = v15;
          v57 = v16;
          v48 = v17;
          v94 = v20;
          v49 = specialized String.UTF16View._foreignIndex(after:)(v45);
          v20 = v94;
          v19 = v101;
          a5 = v109;
          v16 = v57;
          v18 = v60;
          v17 = v48;
          v15 = v47;
          v13 = v66;
          a2 = v46;
          rawBits = v49;
          goto LABEL_58;
        }
        if (v20)
        {
          rawBits = (rawBits & 0xFFFFFFFFFFFF0000) + 65549;
          goto LABEL_58;
        }
        if ((rawBits & 0xC001) != 0)
        {
          if ((a7 & 0x2000000000000000) == 0)
            goto LABEL_44;
        }
        else
        {
          v50._rawBits = rawBits;
          v81 = v15;
          v88 = a2;
          v103 = v19;
          v111 = a5;
          v51 = v13;
          v52 = v16;
          v74 = v17;
          v53 = v18;
          v54._rawBits = _StringGuts.scalarAlignSlow(_:)(v50)._rawBits;
          v20 = 0;
          v19 = v103;
          a5 = v111;
          v18 = v53;
          v17 = v74;
          v15 = v81;
          v16 = v52;
          v13 = v51;
          a2 = v88;
          rawBits = v54._rawBits & 0xFFFFFFFFFFFFFFF2 | 1;
          v36 = v54._rawBits >> 16;
          if ((a7 & 0x2000000000000000) == 0)
          {
LABEL_44:
            v37 = (unsigned __int8 *)v18;
            if ((a6 & 0x1000000000000000) == 0)
            {
              v82 = v15;
              v89 = a2;
              v104 = v19;
              v112 = a5;
              v68 = v13;
              v75 = v17;
              v55 = v16;
              v62 = v18;
              v96 = v20;
              v37 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a6, a7);
              v20 = v96;
              v19 = v104;
              a5 = v112;
              v18 = v62;
              v13 = v68;
              v17 = v75;
              v15 = v82;
              v16 = v55;
              a2 = v89;
            }
            v38 = v37[v36];
            if ((v38 & 0x80) == 0)
            {
LABEL_56:
              v39 = 1;
              goto LABEL_57;
            }
            goto LABEL_47;
          }
        }
        v113 = a6;
        v114 = v17;
        v38 = *((unsigned __int8 *)&v113 + v36);
        if ((v38 & 0x80) == 0)
          goto LABEL_56;
LABEL_47:
        LODWORD(v39) = __clz(v38 ^ 0xFF) - 24;
        if ((_DWORD)v39 != 4)
        {
          v39 = v39;
          goto LABEL_57;
        }
        if ((rawBits & 0xC000) != 0)
        {
          v39 = 4;
LABEL_57:
          rawBits = (rawBits + (v39 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
          goto LABEL_58;
        }
        rawBits = rawBits & 0xFFFFFFFFFFFF0000 | 0x4004;
LABEL_58:
        *(_WORD *)(a2 + 2 * v12++) = v33;
        if (a3 == v12)
          goto LABEL_63;
      }
    }
    rawBits = a4._rawBits;
LABEL_63:
    v12 = a3;
  }
  else
  {
    v12 = 0;
    rawBits = a4._rawBits;
  }
LABEL_64:
  a1->_rawBits = a4._rawBits;
  a1[1]._rawBits = a5;
  a1[2]._rawBits = a6;
  a1[3]._rawBits = a7;
  a1[4]._rawBits = rawBits;
  return v12;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(Swift::UInt64 *a1, uint64_t a2, uint64_t a3, Swift::String::Index a4, Swift::UInt64 a5, unint64_t a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  Swift::UInt64 rawBits;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::UInt64 v14;
  uint64_t v15;
  uint64_t v16;
  Swift::UInt64 v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  unint64_t v21;
  Swift::String::Index v22;
  void *v23;
  Swift::UInt64 v24;
  uint64_t v25;
  BOOL v26;
  int v27;
  Swift::UInt64 v28;
  Swift::UInt64 v29;
  Swift::String::Index v30;
  Swift::UInt64 v31;
  unsigned __int8 *v32;
  Swift::UInt32 v33;
  Swift::UInt64 v34;
  Swift::UInt64 v35;
  Swift::String::Index v36;
  Swift::UInt64 v37;
  Swift::UInt64 v38;
  Swift::UInt32 value;
  Swift::UInt64 v40;
  unsigned __int8 *v41;
  int v42;
  Swift::String::Index v43;
  Swift::UInt64 v44;
  Swift::UInt64 v45;
  uint64_t v46;
  uint64_t v47;
  Swift::UInt64 v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  Swift::UInt32 v53;
  Swift::String::Index v54;
  int v55;
  unsigned int v56;
  Swift::String::Index v57;
  Swift::UInt64 v58;
  Swift::UInt64 v59;
  uint64_t v60;
  Swift::String::Index v61;
  uint64_t v62;
  uint64_t v63;
  Swift::UInt64 v64;
  Swift::UInt64 v65;
  uint64_t v66;
  Swift::UInt64 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  void *v72;
  unint64_t v74;
  unint64_t v75;
  Swift::UInt32 v76;
  Swift::UInt32 v77;
  Swift::UInt64 v78;
  Swift::UInt32 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  Swift::UInt64 v94;
  Swift::UInt64 v95;
  Swift::UInt64 v96;
  Swift::UInt64 v97;
  Swift::UInt64 v98;
  Swift::UInt64 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  Swift::UInt64 v115;
  Swift::UInt64 v116;
  Swift::UInt64 v117;
  Swift::UInt64 v118;
  Swift::UInt64 *v119;
  Swift::UInt64 v120;
  Swift::UInt64 v121;
  Swift::UInt64 *v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  Swift::UInt64 v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;

  v7 = a7;
  v8 = a6;
  rawBits = a4._rawBits;
  if (a2)
  {
    v11 = a3;
    if (a3 < 0)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0xB2uLL, 0);
    if (a3)
    {
      v12 = a2;
      v13 = 0;
      v14 = a5 >> 14;
      v15 = (a6 >> 59) & 1;
      if ((a7 & 0x1000000000000000) == 0)
        LOBYTE(v15) = 1;
      v16 = 4 << v15;
      v17 = a4._rawBits >> 14;
      v18 = a7 & 0xFFFFFFFFFFFFFFLL;
      v19 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
      v20 = &unk_1816AC092;
      if ((a7 & 0x2000000000000000) != 0)
        v21 = HIBYTE(a7) & 0xF;
      else
        v21 = a6 & 0xFFFFFFFFFFFFLL;
      v22._rawBits = a4._rawBits;
      v23 = &unk_1816AC08E;
      while (1)
      {
        v24 = v22._rawBits >> 14;
        if (v22._rawBits >> 14 == v14)
          goto LABEL_60;
        v25 = v22._rawBits & 0xC;
        v26 = (v22._rawBits & 1) == 0 || v25 == v16;
        v27 = v26;
        if (v26)
        {
          v28 = v22._rawBits;
          if (v25 == v16)
          {
            v117 = a5;
            v125 = v21;
            v37 = v14;
            v82 = v16;
            v95 = v17;
            v102 = v19;
            v109 = v18;
            v89 = v27;
            v28 = _StringGuts._slowEnsureMatchingEncoding(_:)(v22)._rawBits;
            v27 = v89;
            v23 = &unk_1816AC08E;
            a5 = v117;
            v21 = v125;
            v20 = &unk_1816AC092;
            v19 = v102;
            v18 = v109;
            v17 = v95;
            v16 = v82;
            v14 = v37;
            v24 = v28 >> 14;
            if (v28 >> 14 < v95)
            {
LABEL_62:
              v74 = 43;
LABEL_63:
              _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Substring index is out of bounds", 32, 2, "Swift/StringIndexValidation.swift", 33, 2, v74, 0);
            }
          }
          else if (v24 < v17)
          {
            goto LABEL_62;
          }
          if (v24 >= v14)
            goto LABEL_62;
          if ((v28 & 1) == 0)
          {
            v115 = a5;
            v123 = v21;
            v29 = v14;
            v80 = v16;
            v94 = v17;
            v100 = v19;
            v107 = v18;
            v88 = v27;
            v30._rawBits = _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)v28)._rawBits;
            v27 = v88;
            v23 = &unk_1816AC08E;
            a5 = v115;
            v21 = v123;
            v20 = &unk_1816AC092;
            v19 = v100;
            v18 = v107;
            v17 = v94;
            v16 = v80;
            v14 = v29;
            v28 = v30._rawBits & 0xFFFFFFFFFFFFFFF2 | 1;
          }
        }
        else if (v24 < v17 || (v28 = v22._rawBits, v24 >= v14))
        {
          v74 = 143;
          goto LABEL_63;
        }
        if ((v7 & 0x1000000000000000) != 0)
        {
          v118 = a5;
          v126 = v21;
          v38 = v14;
          v83 = v16;
          v96 = v17;
          v103 = v19;
          v110 = v18;
          v90 = v27;
          value = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v28 & 0xFFFFFFFFFFFF0000))._0._value;
          v23 = &unk_1816AC08E;
          a5 = v118;
          v21 = v126;
          v20 = &unk_1816AC092;
          v19 = v103;
          v18 = v110;
          v17 = v96;
          v16 = v83;
          v14 = v38;
          v33 = value;
          if (v90)
            goto LABEL_35;
        }
        else
        {
          v31 = v28 >> 16;
          if ((v7 & 0x2000000000000000) != 0)
          {
            v131 = v8;
            v132 = v18;
            v33 = *((unsigned __int8 *)&v131 + v31);
            if (*((char *)&v131 + v31) < 0)
              __asm { BR              X9 }
          }
          else
          {
            v32 = (unsigned __int8 *)v19;
            if ((v8 & 0x1000000000000000) == 0)
            {
              v121 = a5;
              v129 = v21;
              v78 = v14;
              v86 = v16;
              v98 = v17;
              v105 = v19;
              v113 = v18;
              v92 = v27;
              v32 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v8, v7);
              v27 = v92;
              v23 = &unk_1816AC08E;
              a5 = v121;
              v21 = v129;
              v20 = &unk_1816AC092;
              v19 = v105;
              v18 = v113;
              v17 = v98;
              v14 = v78;
              v16 = v86;
            }
            v33 = v32[v31];
            if ((char)v32[v31] < 0)
              __asm { BR              X9 }
          }
          if (v27)
          {
LABEL_35:
            if (v25 == v16)
            {
              v57._rawBits = v22._rawBits;
              v120 = a5;
              v128 = v21;
              v58 = v14;
              v85 = v16;
              v59 = v17;
              v112 = v18;
              v60 = v19;
              v77 = v33;
              v61._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v57)._rawBits;
              v33 = v77;
              v23 = &unk_1816AC08E;
              a5 = v120;
              v21 = v128;
              v20 = &unk_1816AC092;
              v19 = v60;
              v18 = v112;
              v17 = v59;
              v16 = v85;
              v14 = v58;
              v22._rawBits = v61._rawBits;
              if (v128 <= v61._rawBits >> 16)
              {
LABEL_66:
                v75 = 31;
LABEL_67:
                _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringIndexValidation.swift", 33, 2, v75, 0);
              }
            }
            else if (v21 <= v22._rawBits >> 16)
            {
              goto LABEL_66;
            }
            if ((v22._rawBits & 1) == 0)
            {
              v116 = a5;
              v124 = v21;
              v34 = v14;
              v81 = v16;
              v35 = v17;
              v101 = v19;
              v108 = v18;
              v76 = v33;
              v36._rawBits = _StringGuts.scalarAlignSlow(_:)(v22)._rawBits;
              v33 = v76;
              v23 = &unk_1816AC08E;
              a5 = v116;
              v21 = v124;
              v20 = &unk_1816AC092;
              v19 = v101;
              v18 = v108;
              v17 = v35;
              v16 = v81;
              v14 = v34;
              v22._rawBits = v22._rawBits & 0xC | v36._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
            }
            goto LABEL_43;
          }
        }
        if (v21 <= v22._rawBits >> 16)
        {
          v75 = 121;
          goto LABEL_67;
        }
LABEL_43:
        if ((v7 & 0x1000000000000000) != 0)
        {
          v43._rawBits = v22._rawBits;
          v119 = a1;
          v127 = v21;
          v44 = a5;
          v45 = v14;
          v46 = v16;
          v104 = v8;
          v111 = v13;
          v91 = v11;
          v97 = rawBits;
          v47 = v12;
          v48 = v17;
          v84 = v7;
          v49 = v18;
          v50 = v19;
          v51 = v20;
          v52 = v23;
          v53 = v33;
          v54._rawBits = String.UnicodeScalarView._foreignIndex(after:)(v43)._rawBits;
          v33 = v53;
          v23 = v52;
          a1 = v119;
          v21 = v127;
          v20 = v51;
          v19 = v50;
          v18 = v49;
          v17 = v48;
          v12 = v47;
          v7 = v84;
          v11 = v91;
          rawBits = v97;
          v8 = v104;
          v13 = v111;
          v16 = v46;
          v14 = v45;
          a5 = v44;
          v22._rawBits = v54._rawBits;
        }
        else
        {
          v40 = v22._rawBits >> 16;
          if ((v7 & 0x2000000000000000) != 0)
          {
            v131 = v8;
            v132 = v18;
            v42 = *((unsigned __int8 *)&v131 + v40);
          }
          else
          {
            v41 = (unsigned __int8 *)v19;
            if ((v8 & 0x1000000000000000) == 0)
            {
              v62 = v8;
              v122 = a1;
              v130 = v21;
              v63 = v7;
              v64 = a5;
              v65 = v14;
              v87 = v16;
              v93 = v11;
              v106 = v8;
              v114 = v13;
              v99 = rawBits;
              v66 = v12;
              v67 = v17;
              v68 = v7;
              v69 = v18;
              v70 = v19;
              v71 = v20;
              v72 = v23;
              v79 = v33;
              v41 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v62, v63);
              v33 = v79;
              v23 = v72;
              v20 = v71;
              v19 = v70;
              v18 = v69;
              v7 = v68;
              v17 = v67;
              v12 = v66;
              v11 = v93;
              rawBits = v99;
              v8 = v106;
              v13 = v114;
              a1 = v122;
              v21 = v130;
              v16 = v87;
              v14 = v65;
              a5 = v64;
            }
            v42 = v41[v40];
          }
          v55 = (char)v42;
          v56 = __clz(v42 ^ 0xFF) - 24;
          if (v55 >= 0)
            LOBYTE(v56) = 1;
          v22._rawBits = ((v40 + v56) << 16) | 5;
        }
        *(_DWORD *)(v12 + 4 * v13++) = v33;
        if (v11 == v13)
          goto LABEL_59;
      }
    }
    v22._rawBits = a4._rawBits;
LABEL_59:
    v13 = v11;
  }
  else
  {
    v13 = 0;
    v22._rawBits = a4._rawBits;
  }
LABEL_60:
  *a1 = rawBits;
  a1[1] = a5;
  a1[2] = v8;
  a1[3] = v7;
  a1[4] = v22._rawBits;
  return v13;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  if (a2)
  {
    if (a3 < 0)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0xB2uLL, 0);
    if (a3)
    {
      *a2 = a4;
      if (a3 != 1)
        a3 = 1;
      v4 = 1;
    }
    else
    {
      v4 = 0;
    }
  }
  else
  {
    v4 = 0;
    a3 = 0;
  }
  *a1 = a4;
  a1[1] = v4;
  return a3;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(char **a1, uint64_t a2, uint64_t a3, char *a4, char *a5)
{
  uint64_t v5;
  char v6;

  if (a2)
  {
    if (a3 < 0)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0xB2uLL, 0);
    if (a3)
    {
      v5 = 0;
      while (a4)
      {
        if (a5 && a4 == a5)
          goto LABEL_14;
        if (!a5)
          goto LABEL_17;
        if (a4 >= a5)
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x4BAuLL, 0);
        v6 = *a4++;
        *(_BYTE *)(a2 + v5++) = v6;
        if (a3 == v5)
          goto LABEL_11;
      }
      if (a5)
LABEL_17:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x4BAuLL, 0);
    }
    else
    {
LABEL_11:
      v5 = a3;
    }
  }
  else
  {
    v5 = 0;
  }
LABEL_14:
  *a1 = a4;
  a1[1] = a5;
  return v5;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(_QWORD *a1, Swift::String_optional *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  Swift::String_optional *v8;
  uint64_t v9;
  Swift::String_optional v10;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v6 = HIBYTE(a5) & 0xF;
  v12 = a4;
  v13 = a5;
  if ((a5 & 0x2000000000000000) == 0)
    v6 = a4 & 0xFFFFFFFFFFFFLL;
  v14 = v6;
  if (a2)
  {
    v7 = a3;
    if (a3 < 0)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0xB2uLL, 0);
    if (a3)
    {
      v8 = a2;
      v9 = 0;
      while (1)
      {
        v10 = String.Iterator.next()();
        if (!v10.value._object)
          break;
        ++v9;
        *v8++ = v10;
        if (v7 == v9)
        {
          a4 = v12;
          a5 = v13;
          goto LABEL_13;
        }
      }
      a4 = v12;
      a5 = v13;
      v7 = v9;
LABEL_13:
      v6 = v14;
    }
  }
  else
  {
    v7 = 0;
  }
  *a1 = a4;
  a1[1] = a5;
  a1[2] = 0;
  a1[3] = v6;
  return v7;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unsigned __int8 *v18;
  Swift::Int scalarLength;
  uint64_t v20;
  uint64_t v21;
  Swift::tuple_Unicode_Scalar_scalarLength_Int v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[2];

  if ((a5 & 0x2000000000000000) != 0)
    v8 = HIBYTE(a5) & 0xF;
  else
    v8 = a4 & 0xFFFFFFFFFFFFLL;
  if (!a2)
  {
    v11 = 0;
    v12 = 0;
    v9 = 0;
    v16 = 1;
    goto LABEL_31;
  }
  v9 = a3;
  if (a3 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0xB2uLL, 0);
  swift_bridgeObjectRetain_n(a5, 3, a3, (char *)a4);
  if (!v9)
  {
    v11 = 0;
    v12 = 0;
    v16 = 1;
    goto LABEL_30;
  }
  v29 = a1;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = a5 & 0xFFFFFFFFFFFFFFLL;
  v15 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v16 = 1;
  while ((v16 & 1) == 0)
  {
    v16 = 1;
    LOWORD(v17) = v12;
    v12 = 0;
LABEL_9:
    *(_WORD *)(a2 + 2 * v13++) = v17;
    if (v9 == v13)
    {
      a1 = v29;
      goto LABEL_30;
    }
  }
  if (v11 < v8)
  {
    if ((a5 & 0x1000000000000000) != 0)
    {
      v20 = v14;
      v21 = v15;
      v22 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v11 << 16));
      scalarLength = v22.scalarLength;
      v15 = v21;
      v14 = v20;
      v17 = *(_QWORD *)&v22._0._value;
    }
    else
    {
      if ((a5 & 0x2000000000000000) == 0)
      {
        v18 = (unsigned __int8 *)v15;
        if ((a4 & 0x1000000000000000) == 0)
        {
          v24 = v14;
          v25 = v15;
          v18 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a4, a5);
          v15 = v25;
          v14 = v24;
        }
        LODWORD(v17) = v18[v11];
        if ((char)v18[v11] < 0)
          __asm { BR              X9 }
        ++v11;
LABEL_23:
        v16 = 1;
        goto LABEL_9;
      }
      v30[0] = a4;
      v30[1] = v14;
      v17 = *((unsigned __int8 *)v30 + v11);
      if (*((char *)v30 + v11) < 0)
        __asm { BR              X9 }
      scalarLength = 1;
    }
    v11 += scalarLength;
    if (v17 >= 0x10000)
    {
      v27 = v15;
      v28 = v14;
      v23 = Unicode.Scalar.UTF16View.subscript.getter(1, v17);
      LODWORD(v17) = (unsigned __int16)((v17 + 67043328) >> 10) + 55296;
      if ((v17 & 0x10000) != 0)
      {
        __break(1u);
        JUMPOUT(0x18145C9BCLL);
      }
      v12 = v23;
      v16 = 0;
      v15 = v27;
      v14 = v28;
      goto LABEL_9;
    }
    goto LABEL_23;
  }
  v16 = 1;
  v9 = v13;
  a1 = v29;
LABEL_30:
  swift_bridgeObjectRelease_n(a5, 3);
LABEL_31:
  *(_QWORD *)a1 = a4;
  *(_QWORD *)(a1 + 8) = a5;
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 24) = v8;
  *(_WORD *)(a1 + 32) = v12;
  *(_BYTE *)(a1 + 34) = v16;
  return v9;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  Swift::Unicode::Scalar v13;
  Swift::Int scalarLength;
  uint64_t v15;
  Swift::tuple_Unicode_Scalar_scalarLength_Int v16;
  id v17;
  uint64_t *v19;
  uint64_t *v20;
  _QWORD v21[2];

  if ((a5 & 0x2000000000000000) != 0)
    v8 = HIBYTE(a5) & 0xF;
  else
    v8 = a4 & 0xFFFFFFFFFFFFLL;
  if (a2)
  {
    v9 = a3;
    if (a3 < 0)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0xB2uLL, 0);
    if (a3)
    {
      v11 = 0;
      v12 = 0;
      while (v12 < v8)
      {
        if ((a5 & 0x1000000000000000) != 0)
        {
          v19 = a1;
          v16 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v12 << 16));
          scalarLength = v16.scalarLength;
          v13._value = (Swift::UInt32)v16._0;
          a1 = v19;
        }
        else
        {
          if ((a5 & 0x2000000000000000) != 0)
          {
            v21[0] = a4;
            v21[1] = a5 & 0xFFFFFFFFFFFFFFLL;
            v13._value = *((unsigned __int8 *)v21 + v12);
            if (*((char *)v21 + v12) < 0)
              __asm { BR              X9 }
          }
          else
          {
            v15 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
            if ((a4 & 0x1000000000000000) == 0)
            {
              v20 = a1;
              v17 = _StringObject.sharedUTF8.getter(a4, a5);
              a1 = v20;
              v15 = (uint64_t)v17;
            }
            v13._value = *(unsigned __int8 *)(v15 + v12);
            if (*(char *)(v15 + v12) < 0)
              __asm { BR              X10 }
          }
          scalarLength = 1;
        }
        *(Swift::Unicode::Scalar *)(a2 + 4 * v11) = v13;
        v12 += scalarLength;
        if (v9 == ++v11)
          goto LABEL_22;
      }
      v9 = v11;
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v9 = 0;
  }
LABEL_22:
  *a1 = a4;
  a1[1] = a5;
  a1[2] = v12;
  a1[3] = v8;
  return v9;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
    goto LABEL_33;
  }
  v10 = a3;
  if (a3 < 0)
LABEL_37:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0xB2uLL, 0);
  if (!a3)
  {
    v12 = 0;
    goto LABEL_33;
  }
  v11 = (_QWORD *)a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  while (v9)
  {
    v15 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v16 = v15 | (v12 << 6);
LABEL_9:
    ++v13;
    v17 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v18 = v17[1];
    *v11 = *v17;
    v11[1] = v18;
    v11 += 2;
    swift_bridgeObjectRetain(v18, a2, a3, (char *)a4);
    if (v13 == v10)
      goto LABEL_33;
  }
  v19 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v19 >= v14)
    goto LABEL_29;
  v20 = *(_QWORD *)(v6 + 8 * v19);
  if (v20)
    goto LABEL_26;
  v12 += 2;
  if (v19 + 1 >= v14)
  {
    v9 = 0;
    v12 = v19;
    goto LABEL_32;
  }
  v20 = *(_QWORD *)(v6 + 8 * v12);
  if (v20)
  {
    ++v19;
LABEL_26:
    v9 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v19 << 6);
    v12 = v19;
    goto LABEL_9;
  }
  if (v19 + 2 >= v14)
  {
LABEL_29:
    v9 = 0;
    goto LABEL_32;
  }
  v20 = *(_QWORD *)(v6 + 8 * (v19 + 2));
  if (v20)
  {
    v19 += 2;
    goto LABEL_26;
  }
  v21 = v19 + 3;
  if (v19 + 3 >= v14)
  {
    v9 = 0;
    v12 = v19 + 2;
    goto LABEL_32;
  }
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v19 += 3;
    goto LABEL_26;
  }
  while (1)
  {
    v19 = v21 + 1;
    if (__OFADD__(v21, 1))
      goto LABEL_36;
    if (v19 >= v14)
      break;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v21;
    if (v20)
      goto LABEL_26;
  }
  v9 = 0;
  v12 = v14 - 1;
LABEL_32:
  v10 = v13;
LABEL_33:
  *a1 = a4;
  a1[1] = v6;
  a1[2] = ~v7;
  a1[3] = v12;
  a1[4] = v9;
  return v10;
}

{
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;

  if (a2)
  {
    v6 = a3;
    if (a3 < 0)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0xB2uLL, 0);
    if (a3)
    {
      v7 = (_QWORD *)a2;
      v8 = 0;
      v9 = (unint64_t *)(a4 + 40);
      while (1)
      {
        v10 = *(_QWORD *)(a4 + 16);
        if (v8 == v10)
          break;
        if (v8 >= v10)
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
        ++v8;
        v11 = *v9;
        *v7 = *(v9 - 1);
        v7[1] = v11;
        v7 += 2;
        swift_bridgeObjectRetain(v11, a2, a3, (char *)a4);
        v9 += 2;
        if (v6 == v8)
          goto LABEL_10;
      }
      v6 = v8;
    }
  }
  else
  {
    v6 = 0;
  }
LABEL_10:
  *a1 = a4;
  a1[1] = v6;
  return v6;
}

uint64_t Sequence._copySequenceContents(initializing:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void (*v22)(uint64_t, uint64_t);
  unint64_t AssociatedConformanceWitness;
  uint64_t v24;
  void (*v25)(unint64_t, unint64_t);
  void (*v26)(char *, char *, unint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;

  v35 = a3;
  v33 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)a5, a4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v11 = type metadata accessor for Optional(0, AssociatedTypeWitness, v9, v10);
  v29 = *(_QWORD *)(v11 - 8);
  v30 = v11;
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v28 - v13;
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v28 - v16;
  v18 = swift_getAssociatedTypeWitness(0, (const char *)a5, a4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v28 - v20;
  v22 = *(void (**)(uint64_t, uint64_t))(a5 + 32);
  v32 = a4;
  v22(a4, a5);
  if (a2)
  {
    v31 = v19;
    if (v35 < 0)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0xB2uLL, 0);
    v34 = v18;
    if (v35)
    {
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, v32, v34, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
      v24 = 0;
      v25 = *(void (**)(unint64_t, unint64_t))(AssociatedConformanceWitness + 16);
      while (1)
      {
        v25(v34, AssociatedConformanceWitness);
        if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v15 + 48))(v14, 1, AssociatedTypeWitness) == 1)break;
        ++v24;
        v26 = *(void (**)(char *, char *, unint64_t))(v15 + 32);
        v26(v17, v14, AssociatedTypeWitness);
        v26(a2, v17, AssociatedTypeWitness);
        a2 += *(_QWORD *)(v15 + 72);
        if (v35 == v24)
          goto LABEL_7;
      }
      (*(void (**)(char *, uint64_t))(v29 + 8))(v14, v30);
      (*(void (**)(uint64_t, char *, unint64_t))(v31 + 32))(v33, v21, v34);
      return v24;
    }
    else
    {
LABEL_7:
      (*(void (**)(uint64_t, char *, unint64_t))(v31 + 32))(v33, v21, v34);
      return v35;
    }
  }
  else
  {
    (*(void (**)(uint64_t, char *, unint64_t))(v19 + 32))(v33, v21, v18);
    return 0;
  }
}

uint64_t UnsafeBufferPointer.indices.getter(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0xB2uLL, 0);
  return 0;
}

uint64_t (*IteratorSequence._base.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t IteratorSequence.next()(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 24) + 16))(*(_QWORD *)(a1 + 16));
}

uint64_t Sequence.min(by:)@<X0>(uint64_t (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const char *a4@<X3>, char *a5@<X8>)
{
  uint64_t v5;
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t AssociatedConformanceWitness;
  char *v30;
  uint64_t v31;
  void (*v33)(char *, char *, unint64_t);
  unint64_t v34;
  const char *v35;
  uint64_t (*v36)(char *, uint64_t, unint64_t);
  int i;
  char v38;
  void (*v39)(char *, unint64_t);
  char *v40;
  char *v41;
  void (*v42)(char *, unint64_t);
  uint64_t v43;
  uint64_t (*v44)(char *, uint64_t, unint64_t);
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  const char *v49;
  char *v50;
  char *v51;
  uint64_t (*v52)(char *, char *);
  uint64_t v53;
  uint64_t v54;
  char *v55;

  v49 = a4;
  v52 = a1;
  v53 = a2;
  v47 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a4, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v11 = type metadata accessor for Optional(0, AssociatedTypeWitness, v9, v10);
  v45 = *(_QWORD *)(v11 - 8);
  v46 = v11;
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v12);
  v51 = (char *)&v43 - v16;
  v54 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v17);
  v55 = (char *)&v43 - v21;
  v22 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v43 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = swift_getAssociatedTypeWitness(0, a4, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v48 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25);
  v27 = (char *)&v43 - v26;
  (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v24, v50, a3);
  v28 = (uint64_t)v49;
  (*((void (**)(uint64_t, const char *))v49 + 4))(a3, v49);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v28, a3, v25, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v30 = v51;
  v49 = *(const char **)(AssociatedConformanceWitness + 16);
  ((void (*)(unint64_t, unint64_t))v49)(v25, AssociatedConformanceWitness);
  v31 = v54;
  v44 = *(uint64_t (**)(char *, uint64_t, unint64_t))(v54 + 48);
  if (v44(v30, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, unint64_t))(v48 + 8))(v27, v25);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v51, v46);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, unint64_t))(v31 + 56))(v47, 1, 1, AssociatedTypeWitness);
  }
  else
  {
    v33 = *(void (**)(char *, char *, unint64_t))(v31 + 32);
    v33(v55, v51, AssociatedTypeWitness);
    v50 = v27;
    v51 = (char *)v25;
    v34 = v25;
    v35 = v49;
    ((void (*)(unint64_t, unint64_t))v49)(v34, AssociatedConformanceWitness);
    v36 = v44;
    for (i = v44(v14, 1, AssociatedTypeWitness); ; i = v36(v14, 1, AssociatedTypeWitness))
    {
      if (i == 1)
      {
        (*(void (**)(char *, char *))(v48 + 8))(v50, v51);
        (*(void (**)(char *, uint64_t))(v45 + 8))(v14, v46);
        v41 = v47;
        v33(v47, v55, AssociatedTypeWitness);
        return (*(uint64_t (**)(char *, _QWORD, uint64_t, unint64_t))(v54 + 56))(v41, 0, 1, AssociatedTypeWitness);
      }
      v33(v19, v14, AssociatedTypeWitness);
      v38 = v52(v19, v55);
      if (v5)
        break;
      v39 = *(void (**)(char *, unint64_t))(v54 + 8);
      if ((v38 & 1) != 0)
      {
        v40 = v55;
        v39(v55, AssociatedTypeWitness);
        v33(v40, v19, AssociatedTypeWitness);
      }
      else
      {
        v39(v19, AssociatedTypeWitness);
      }
      ((void (*)(char *, unint64_t))v35)(v51, AssociatedConformanceWitness);
    }
    v42 = *(void (**)(char *, unint64_t))(v54 + 8);
    v42(v19, AssociatedTypeWitness);
    v42(v55, AssociatedTypeWitness);
    return (*(uint64_t (**)(char *, char *))(v48 + 8))(v50, v51);
  }
}

uint64_t Sequence.max(by:)@<X0>(uint64_t (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const char *a4@<X3>, char *a5@<X8>)
{
  uint64_t v5;
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t AssociatedConformanceWitness;
  char *v30;
  uint64_t v31;
  void (*v33)(char *, char *, unint64_t);
  unint64_t v34;
  const char *v35;
  uint64_t (*v36)(char *, uint64_t, unint64_t);
  int i;
  char v38;
  void (*v39)(char *, unint64_t);
  char *v40;
  char *v41;
  void (*v42)(char *, unint64_t);
  uint64_t v43;
  uint64_t (*v44)(char *, uint64_t, unint64_t);
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  const char *v49;
  char *v50;
  char *v51;
  uint64_t (*v52)(char *, char *);
  uint64_t v53;
  uint64_t v54;
  char *v55;

  v49 = a4;
  v52 = a1;
  v53 = a2;
  v47 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a4, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v11 = type metadata accessor for Optional(0, AssociatedTypeWitness, v9, v10);
  v45 = *(_QWORD *)(v11 - 8);
  v46 = v11;
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v12);
  v51 = (char *)&v43 - v16;
  v54 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v17);
  v55 = (char *)&v43 - v21;
  v22 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v43 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = swift_getAssociatedTypeWitness(0, a4, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v48 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25);
  v27 = (char *)&v43 - v26;
  (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v24, v50, a3);
  v28 = (uint64_t)v49;
  (*((void (**)(uint64_t, const char *))v49 + 4))(a3, v49);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v28, a3, v25, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v30 = v51;
  v49 = *(const char **)(AssociatedConformanceWitness + 16);
  ((void (*)(unint64_t, unint64_t))v49)(v25, AssociatedConformanceWitness);
  v31 = v54;
  v44 = *(uint64_t (**)(char *, uint64_t, unint64_t))(v54 + 48);
  if (v44(v30, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, unint64_t))(v48 + 8))(v27, v25);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v51, v46);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, unint64_t))(v31 + 56))(v47, 1, 1, AssociatedTypeWitness);
  }
  else
  {
    v33 = *(void (**)(char *, char *, unint64_t))(v31 + 32);
    v33(v55, v51, AssociatedTypeWitness);
    v50 = v27;
    v51 = (char *)v25;
    v34 = v25;
    v35 = v49;
    ((void (*)(unint64_t, unint64_t))v49)(v34, AssociatedConformanceWitness);
    v36 = v44;
    for (i = v44(v14, 1, AssociatedTypeWitness); ; i = v36(v14, 1, AssociatedTypeWitness))
    {
      if (i == 1)
      {
        (*(void (**)(char *, char *))(v48 + 8))(v50, v51);
        (*(void (**)(char *, uint64_t))(v45 + 8))(v14, v46);
        v41 = v47;
        v33(v47, v55, AssociatedTypeWitness);
        return (*(uint64_t (**)(char *, _QWORD, uint64_t, unint64_t))(v54 + 56))(v41, 0, 1, AssociatedTypeWitness);
      }
      v33(v19, v14, AssociatedTypeWitness);
      v38 = v52(v55, v19);
      if (v5)
        break;
      v39 = *(void (**)(char *, unint64_t))(v54 + 8);
      if ((v38 & 1) != 0)
      {
        v40 = v55;
        v39(v55, AssociatedTypeWitness);
        v33(v40, v19, AssociatedTypeWitness);
      }
      else
      {
        v39(v19, AssociatedTypeWitness);
      }
      ((void (*)(char *, unint64_t))v35)(v51, AssociatedConformanceWitness);
    }
    v42 = *(void (**)(char *, unint64_t))(v54 + 8);
    v42(v19, AssociatedTypeWitness);
    v42(v55, AssociatedTypeWitness);
    return (*(uint64_t (**)(char *, char *))(v48 + 8))(v50, v51);
  }
}

uint64_t Sequence<>.min()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t AssociatedConformanceWitness;
  char *v28;
  char *v29;
  uint64_t v30;
  unsigned int (*v31)(char *, uint64_t, unint64_t);
  void (*v33)(char *, char *, unint64_t);
  unint64_t v34;
  char *v35;
  void (*v36)(void);
  unint64_t v37;
  char v38;
  void (*v39)(char *, unint64_t);
  char *v40;
  void (*v41)(void);
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v49 = a3;
  v47 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)a2, a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v9 = type metadata accessor for Optional(0, AssociatedTypeWitness, v7, v8);
  v45 = *(_QWORD *)(v9 - 8);
  v46 = v9;
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v10);
  v43 = (char *)&v41 - v14;
  v50 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v41 - v19;
  v21 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](v18);
  v23 = (char *)&v41 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = swift_getAssociatedTypeWitness(0, (const char *)a2, a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v44 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24);
  v26 = (char *)&v41 - v25;
  (*(void (**)(char *, unint64_t, uint64_t))(v21 + 16))(v23, v48, a1);
  (*(void (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a2, a1, v24, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v28 = v43;
  v41 = *(void (**)(void))(AssociatedConformanceWitness + 16);
  v42 = v24;
  ((void (*)(unint64_t, unint64_t))v41)(v24, AssociatedConformanceWitness);
  v29 = v28;
  v30 = v50;
  v31 = *(unsigned int (**)(char *, uint64_t, unint64_t))(v50 + 48);
  if (v31(v29, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, unint64_t))(v44 + 8))(v26, v42);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v29, v46);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, unint64_t))(v30 + 56))(v47, 1, 1, AssociatedTypeWitness);
  }
  else
  {
    v33 = *(void (**)(char *, char *, unint64_t))(v30 + 32);
    v33(v20, v29, AssociatedTypeWitness);
    v34 = AssociatedConformanceWitness;
    v35 = v26;
    v36 = v41;
    v37 = v42;
    v48 = v34;
    while (1)
    {
      v36();
      if (v31(v12, 1, AssociatedTypeWitness) == 1)
        break;
      v33(v17, v12, AssociatedTypeWitness);
      v38 = (*(uint64_t (**)(char *, char *, unint64_t))(v49 + 16))(v17, v20, AssociatedTypeWitness);
      v39 = *(void (**)(char *, unint64_t))(v50 + 8);
      if ((v38 & 1) != 0)
      {
        v39(v20, AssociatedTypeWitness);
        v33(v20, v17, AssociatedTypeWitness);
      }
      else
      {
        v39(v17, AssociatedTypeWitness);
      }
    }
    (*(void (**)(char *, unint64_t))(v44 + 8))(v35, v37);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v12, v46);
    v40 = v47;
    v33(v47, v20, AssociatedTypeWitness);
    return (*(uint64_t (**)(char *, _QWORD, uint64_t, unint64_t))(v50 + 56))(v40, 0, 1, AssociatedTypeWitness);
  }
}

uint64_t Sequence<>.max()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t AssociatedConformanceWitness;
  char *v28;
  char *v29;
  uint64_t v30;
  unsigned int (*v31)(char *, uint64_t, unint64_t);
  void (*v33)(char *, char *, unint64_t);
  unint64_t v34;
  char *v35;
  void (*v36)(void);
  unint64_t v37;
  char v38;
  void (*v39)(char *, unint64_t);
  char *v40;
  void (*v41)(void);
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v49 = a3;
  v47 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)a2, a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v9 = type metadata accessor for Optional(0, AssociatedTypeWitness, v7, v8);
  v45 = *(_QWORD *)(v9 - 8);
  v46 = v9;
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v10);
  v43 = (char *)&v41 - v14;
  v50 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v41 - v19;
  v21 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](v18);
  v23 = (char *)&v41 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = swift_getAssociatedTypeWitness(0, (const char *)a2, a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v44 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24);
  v26 = (char *)&v41 - v25;
  (*(void (**)(char *, unint64_t, uint64_t))(v21 + 16))(v23, v48, a1);
  (*(void (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a2, a1, v24, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v28 = v43;
  v41 = *(void (**)(void))(AssociatedConformanceWitness + 16);
  v42 = v24;
  ((void (*)(unint64_t, unint64_t))v41)(v24, AssociatedConformanceWitness);
  v29 = v28;
  v30 = v50;
  v31 = *(unsigned int (**)(char *, uint64_t, unint64_t))(v50 + 48);
  if (v31(v29, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, unint64_t))(v44 + 8))(v26, v42);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v29, v46);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, unint64_t))(v30 + 56))(v47, 1, 1, AssociatedTypeWitness);
  }
  else
  {
    v33 = *(void (**)(char *, char *, unint64_t))(v30 + 32);
    v33(v20, v29, AssociatedTypeWitness);
    v34 = AssociatedConformanceWitness;
    v35 = v26;
    v36 = v41;
    v37 = v42;
    v48 = v34;
    while (1)
    {
      v36();
      if (v31(v12, 1, AssociatedTypeWitness) == 1)
        break;
      v33(v17, v12, AssociatedTypeWitness);
      v38 = (*(uint64_t (**)(char *, char *, unint64_t))(v49 + 16))(v20, v17, AssociatedTypeWitness);
      v39 = *(void (**)(char *, unint64_t))(v50 + 8);
      if ((v38 & 1) != 0)
      {
        v39(v20, AssociatedTypeWitness);
        v33(v20, v17, AssociatedTypeWitness);
      }
      else
      {
        v39(v17, AssociatedTypeWitness);
      }
    }
    (*(void (**)(char *, unint64_t))(v44 + 8))(v35, v37);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v12, v46);
    v40 = v47;
    v33(v47, v20, AssociatedTypeWitness);
    return (*(uint64_t (**)(char *, _QWORD, uint64_t, unint64_t))(v50 + 56))(v40, 0, 1, AssociatedTypeWitness);
  }
}

BOOL Sequence.starts<A>(with:by:)(char *a1, uint64_t (*a2)(char *, char *), _BOOL8 a3, uint64_t a4, uint64_t a5, const char *a6, const char *a7)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  void (*v39)(uint64_t);
  uint64_t v40;
  uint64_t v41;
  unint64_t AssociatedConformanceWitness;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  char v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  const char *v66;
  uint64_t (*v67)(char *, char *);
  _BOOL8 v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  unint64_t v77;
  const char *v78;
  uint64_t v79;

  v73 = a1;
  v78 = a7;
  v75 = a5;
  v67 = a2;
  v68 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a7, a5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v12 = type metadata accessor for Optional(0, AssociatedTypeWitness, v10, v11);
  v59 = *(_QWORD *)(v12 - 8);
  v60 = v12;
  v13 = MEMORY[0x1E0C80A78](v12);
  v58 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v58 - v16;
  v69 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v70 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v58 - v18;
  v66 = a6;
  v20 = a4;
  v64 = a4;
  v21 = swift_getAssociatedTypeWitness(0, a6, a4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v58 - v23;
  v27 = type metadata accessor for Optional(0, v21, v25, v26);
  v28 = MEMORY[0x1E0C80A78](v27);
  v30 = (char *)&v58 - v29;
  v71 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v28);
  v65 = (char *)&v58 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = swift_getAssociatedTypeWitness(0, a6, v20, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v61 = *(_QWORD *)(v77 - 8);
  v32 = MEMORY[0x1E0C80A78](v77);
  v76 = (char *)&v58 - v33;
  v34 = v75;
  v63 = *(_QWORD *)(v75 - 8);
  MEMORY[0x1E0C80A78](v32);
  v36 = (char *)&v58 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = swift_getAssociatedTypeWitness(0, v78, v34, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v62 = *(_QWORD *)(v74 - 8);
  MEMORY[0x1E0C80A78](v74);
  v38 = (char *)&v58 - v37;
  (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v36, v73, v34);
  v39 = (void (*)(uint64_t))*((_QWORD *)v78 + 4);
  v73 = v38;
  v39(v34);
  v40 = v64;
  (*(void (**)(char *, unint64_t, uint64_t))(v71 + 16))(v65, v72, v64);
  v41 = (uint64_t)v66;
  (*((void (**)(uint64_t))v66 + 4))(v40);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v41, v40, v77, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v71 = *(_QWORD *)(AssociatedConformanceWitness + 16);
  v72 = AssociatedConformanceWitness;
  v43 = v70;
  while (1)
  {
    ((void (*)(unint64_t, unint64_t))v71)(v77, v72);
    if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v22 + 48))(v30, 1, v21) == 1)
    {
      (*(void (**)(char *, unint64_t))(v61 + 8))(v76, v77);
      v53 = v74;
      v54 = swift_getAssociatedConformanceWitness((uint64_t)v78, v75, v74, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
      v55 = v58;
      v56 = v73;
      (*(void (**)(unint64_t, unint64_t))(v54 + 16))(v53, v54);
      (*(void (**)(char *, unint64_t))(v62 + 8))(v56, v53);
      v49 = (*(unsigned int (**)(char *, uint64_t, unint64_t))(v69 + 48))(v55, 1, v70) == 1;
      (*(void (**)(char *, uint64_t))(v59 + 8))(v55, v60);
      return v49;
    }
    (*(void (**)(char *, char *, unint64_t))(v22 + 32))(v24, v30, v21);
    v44 = v74;
    v45 = swift_getAssociatedConformanceWitness((uint64_t)v78, v75, v74, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
    (*(void (**)(unint64_t, unint64_t))(v45 + 16))(v44, v45);
    v46 = v69;
    if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v69 + 48))(v17, 1, v43) == 1)
    {
      (*(void (**)(char *, unint64_t))(v22 + 8))(v24, v21);
      (*(void (**)(char *, unint64_t))(v61 + 8))(v76, v77);
      (*(void (**)(char *, unint64_t))(v62 + 8))(v73, v74);
      (*(void (**)(char *, uint64_t))(v59 + 8))(v17, v60);
      return 1;
    }
    v47 = v17;
    (*(void (**)(char *, char *, unint64_t))(v46 + 32))(v19, v17, v43);
    v48 = v46;
    v49 = v68;
    v50 = v79;
    v51 = v67(v24, v19);
    v79 = v50;
    if (v50)
      break;
    v52 = v51;
    (*(void (**)(char *, unint64_t))(v48 + 8))(v19, v43);
    (*(void (**)(char *, unint64_t))(v22 + 8))(v24, v21);
    v17 = v47;
    if ((v52 & 1) == 0)
    {
      (*(void (**)(char *, unint64_t))(v61 + 8))(v76, v77);
      (*(void (**)(char *, unint64_t))(v62 + 8))(v73, v74);
      return 0;
    }
  }
  (*(void (**)(char *, unint64_t))(v48 + 8))(v19, v43);
  (*(void (**)(char *, unint64_t))(v22 + 8))(v24, v21);
  (*(void (**)(char *, unint64_t))(v61 + 8))(v76, v77);
  (*(void (**)(char *, unint64_t))(v62 + 8))(v73, v74);
  return v49;
}

uint64_t specialized Sequence<>.starts<A>(with:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  const char *v13;
  unint64_t AssociatedTypeWitness;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t AssociatedConformanceWitness;
  void (*v23)(uint64_t *__return_ptr, unint64_t, unint64_t);
  unint64_t i;
  uint64_t v25;
  Swift::String_optional v26;
  char v28;
  void *object;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v9 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v13, v12, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v33 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v16 = (char *)&v32 - v15;
  v17 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v17 = a1 & 0xFFFFFFFFFFFFLL;
  v36 = a1;
  v37 = a2;
  v38 = 0;
  v39 = v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v4, a3);
  v18 = *(void (**)(uint64_t, uint64_t))(a4 + 32);
  swift_bridgeObjectRetain(a2, v19, v20, v21);
  v18(a3, a4);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a4, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v23 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t))(AssociatedConformanceWitness
                                                                                         + 16);
  v23(&v34, AssociatedTypeWitness, AssociatedConformanceWitness);
  for (i = v35; v35; i = v35)
  {
    v25 = v34;
    v26 = String.Iterator.next()();
    if (!v26.value._object)
    {
      swift_bridgeObjectRelease(i);
      (*(void (**)(char *, unint64_t))(v33 + 8))(v16, AssociatedTypeWitness);
      swift_bridgeObjectRelease(v37);
      return 1;
    }
    if (v25 == v26.value._countAndFlagsBits && (void *)i == v26.value._object)
    {
      swift_bridgeObjectRelease(i);
      swift_bridgeObjectRelease((uint64_t)v26.value._object);
    }
    else
    {
      if ((~(i & (unint64_t)v26.value._object) & 0x6000000000000000) == 0)
      {
        swift_bridgeObjectRelease(i);
        swift_bridgeObjectRelease((uint64_t)v26.value._object);
LABEL_20:
        (*(void (**)(char *, unint64_t))(v33 + 8))(v16, AssociatedTypeWitness);
        v30 = v37;
LABEL_21:
        swift_bridgeObjectRelease(v30);
        return 0;
      }
      v28 = _stringCompareInternal(_:_:expecting:)(v25, i, v26.value._countAndFlagsBits, (unint64_t)v26.value._object, 0);
      swift_bridgeObjectRelease(i);
      swift_bridgeObjectRelease((uint64_t)v26.value._object);
      if ((v28 & 1) == 0)
        goto LABEL_20;
    }
    v23(&v34, AssociatedTypeWitness, AssociatedConformanceWitness);
  }
  (*(void (**)(char *, unint64_t))(v33 + 8))(v16, AssociatedTypeWitness);
  object = String.Iterator.next()().value._object;
  swift_bridgeObjectRelease(v37);
  if (object)
  {
    v30 = (uint64_t)object;
    goto LABEL_21;
  }
  return 1;
}

{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t AssociatedTypeWitness;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  Swift::UInt64 v18;
  unint64_t AssociatedConformanceWitness;
  void (*v20)(uint64_t *__return_ptr, unint64_t, unint64_t);
  unint64_t v21;
  uint64_t v22;
  Swift::String::Index v23;
  Swift::UInt64 rawBits;
  uint64_t v25;
  char *v26;
  int v27;
  uint64_t v28;
  int v29;
  Swift::String::Index v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v37;
  Swift::String::Index v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[2];
  uint64_t v46;
  unint64_t v47;

  v9 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a4, v12, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v41 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v15 = (char *)&v41 - v14;
  v16 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v16 = a1;
  v17 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v17 = 11;
  v44 = v17;
  v18 = v17 | (v16 << 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v4, a3);
  (*(void (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a4, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v20 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t))(AssociatedConformanceWitness
                                                                                         + 16);
  v20(&v46, AssociatedTypeWitness, AssociatedConformanceWitness);
  v21 = v47;
  if (v47)
  {
    v42 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    v43 = a2 & 0xFFFFFFFFFFFFFFLL;
    while (1)
    {
      if (v18 < 0x4000)
      {
        swift_bridgeObjectRelease(v21);
        (*(void (**)(char *, unint64_t))(v41 + 8))(v15, AssociatedTypeWitness);
        return 1;
      }
      v22 = v46;
      v23._rawBits = _StringGuts.validateInclusiveCharacterIndex_5_7(_:)((Swift::String::Index)v18)._rawBits;
      rawBits = v23._rawBits;
      if (!(v23._rawBits >> 14))
        break;
      v25 = v23._rawBits >> 16;
      if (v23._rawBits >= 0x20000)
      {
        if ((a2 & 0x1000000000000000) == 0)
        {
          if ((a2 & 0x2000000000000000) != 0)
          {
            v45[0] = a1;
            v45[1] = v43;
            v29 = *(unsigned __int16 *)((char *)v45 + v25 - 2);
            if (v29 != 2573 && (v29 & 0x80808080) == 0)
              goto LABEL_17;
          }
          else
          {
            v26 = (char *)v42;
            if ((a1 & 0x1000000000000000) == 0)
            {
              v26 = (char *)_StringObject.sharedUTF8.getter(a1, a2);
              if (!v26)
                _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
            }
            v27 = *(unsigned __int16 *)&v26[v25 - 2];
            if (v27 != 2573 && (v27 & 0x80808080) == 0)
            {
LABEL_17:
              v25 = 1;
LABEL_18:
              v28 = v25 << 8;
              goto LABEL_26;
            }
          }
        }
        v25 = _StringGuts._opaqueComplexCharacterStride(endingAt:)(rawBits >> 16);
      }
      v28 = v25 << 8;
      if (v25 > 63)
        v28 = 0;
LABEL_26:
      v18 = v28 | v44 | (rawBits - (v25 << 16)) & 0xFFFFFFFFFFFF0000;
      v31._rawBits = v18;
      v32 = String.subscript.getter(v31, a1, a2);
      v34 = v33;
      if (v22 == v32 && v21 == v33)
      {
        swift_bridgeObjectRelease(v21);
        swift_bridgeObjectRelease(v34);
      }
      else
      {
        if ((~v21 & 0x6000000000000000) == 0
          && (v33 & 0x2000000000000000) != 0
          && (v33 & 0x4000000000000000) != 0)
        {
          swift_bridgeObjectRelease(v21);
          swift_bridgeObjectRelease(v34);
LABEL_44:
          (*(void (**)(char *, unint64_t))(v41 + 8))(v15, AssociatedTypeWitness);
          return 0;
        }
        v37 = _stringCompareInternal(_:_:expecting:)(v22, v21, v32, v33, 0);
        swift_bridgeObjectRelease(v21);
        swift_bridgeObjectRelease(v34);
        if ((v37 & 1) == 0)
          goto LABEL_44;
      }
      v20(&v46, AssociatedTypeWitness, AssociatedConformanceWitness);
      v21 = v47;
      if (!v47)
        goto LABEL_42;
    }
    if ((_swift_stdlib_isExecutableLinkedOnOrAfter(0x50700u) & 1) != 0)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringCharacterView.swift", 31, 2, 0x62uLL, 0);
    v25 = 0;
    goto LABEL_18;
  }
LABEL_42:
  (*(void (**)(char *, unint64_t))(v41 + 8))(v15, AssociatedTypeWitness);
  if (v18 < 0x4000)
    return 1;
  v38._rawBits = String.index(before:)((Swift::String::Index)v18)._rawBits;
  String.subscript.getter(v38, a1, a2);
  swift_bridgeObjectRelease(v39);
  return 0;
}

uint64_t specialized Sequence<>.starts<A>(with:)(uint64_t a1, unint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  Swift::String_optional v9;
  uint64_t countAndFlagsBits;
  unint64_t object;
  Swift::String_optional v12;
  Swift::String_optional v13;
  char v14;
  void *v15;
  uint64_t v16;

  swift_bridgeObjectRetain(a2, a2, a3, a4);
  swift_bridgeObjectRetain((unint64_t)a4, v6, v7, v8);
  v9 = String.Iterator.next()();
  if (v9.value._object)
  {
    countAndFlagsBits = v9.value._countAndFlagsBits;
    object = (unint64_t)v9.value._object;
    do
    {
      v13 = String.Iterator.next()();
      if (!v13.value._object)
      {
        swift_bridgeObjectRelease(a2);
        swift_bridgeObjectRelease((uint64_t)a4);
        swift_bridgeObjectRelease(object);
        return 1;
      }
      if (countAndFlagsBits == v13.value._countAndFlagsBits && (void *)object == v13.value._object)
      {
        swift_bridgeObjectRelease(object);
        swift_bridgeObjectRelease((uint64_t)v13.value._object);
      }
      else
      {
        if ((~(object & (unint64_t)v13.value._object) & 0x6000000000000000) == 0)
        {
          swift_bridgeObjectRelease(object);
          swift_bridgeObjectRelease((uint64_t)v13.value._object);
LABEL_16:
          swift_bridgeObjectRelease(a2);
          v16 = (uint64_t)a4;
LABEL_17:
          swift_bridgeObjectRelease(v16);
          return 0;
        }
        v14 = _stringCompareInternal(_:_:expecting:)(countAndFlagsBits, object, v13.value._countAndFlagsBits, (unint64_t)v13.value._object, 0);
        swift_bridgeObjectRelease(object);
        swift_bridgeObjectRelease((uint64_t)v13.value._object);
        if ((v14 & 1) == 0)
          goto LABEL_16;
      }
      v12 = String.Iterator.next()();
      countAndFlagsBits = v12.value._countAndFlagsBits;
      object = (unint64_t)v12.value._object;
    }
    while (v12.value._object);
  }
  swift_bridgeObjectRelease((uint64_t)a4);
  v15 = String.Iterator.next()().value._object;
  swift_bridgeObjectRelease(a2);
  if (v15)
  {
    v16 = (uint64_t)v15;
    goto LABEL_17;
  }
  return 1;
}

uint64_t specialized Sequence<>.starts<A>(with:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  Swift::UInt64 v8;
  uint64_t v9;
  uint64_t v10;
  Swift::UInt64 v11;
  Swift::String::Index v14;
  Swift::UInt64 rawBits;
  uint64_t v16;
  char *v17;
  char *v18;
  int v19;
  uint64_t v21;
  Swift::String::Index v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  Swift::String::Index v27;
  Swift::UInt64 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int v32;
  uint64_t v33;
  Swift::String::Index v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  Swift::String::Index v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v6 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v6 = a1;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v7 = 11;
  else
    v7 = 7;
  v47 = v7;
  v8 = v7 | (v6 << 16);
  v9 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v9 = a3;
  if (((a4 >> 60) & ((a3 & 0x800000000000000) == 0)) != 0)
    v10 = 11;
  else
    v10 = 7;
  v11 = v10 | (v9 << 16);
  if (v11 >= 0x4000)
  {
    v45 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    v46 = a4 & 0xFFFFFFFFFFFFFFLL;
    v43 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    v44 = a2 & 0xFFFFFFFFFFFFFFLL;
    while (1)
    {
      v14._rawBits = _StringGuts.validateInclusiveCharacterIndex_5_7(_:)((Swift::String::Index)v11)._rawBits;
      rawBits = v14._rawBits;
      if (!(v14._rawBits >> 14))
        break;
      v16 = v14._rawBits >> 16;
      if (v14._rawBits >= 0x20000)
      {
        if ((a4 & 0x1000000000000000) == 0)
        {
          if ((a4 & 0x2000000000000000) != 0)
          {
            v48 = a3;
            v49 = v46;
            v18 = (char *)&v48 + v16;
          }
          else
          {
            v17 = (char *)v45;
            if ((a3 & 0x1000000000000000) == 0)
            {
              v17 = (char *)_StringObject.sharedUTF8.getter(a3, a4);
              if (!v17)
LABEL_61:
                _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
            }
            v18 = &v17[v16];
          }
          v19 = *((unsigned __int16 *)v18 - 1);
          if (v19 != 2573 && (v19 & 0x80808080) == 0)
          {
            v16 = 1;
LABEL_28:
            v21 = v16 << 8;
            goto LABEL_34;
          }
        }
        v16 = _StringGuts._opaqueComplexCharacterStride(endingAt:)(rawBits >> 16);
      }
      v21 = v16 << 8;
      if (v16 > 63)
        v21 = 0;
LABEL_34:
      v11 = v21 | v10 | (rawBits - (v16 << 16)) & 0xFFFFFFFFFFFF0000;
      v22._rawBits = v11;
      v23 = String.subscript.getter(v22, a3, a4);
      v25 = v24;
      if (v8 < 0x4000)
      {
        v39 = 1;
LABEL_63:
        swift_bridgeObjectRelease(v25);
        return v39;
      }
      v26 = v23;
      v27._rawBits = _StringGuts.validateInclusiveCharacterIndex_5_7(_:)((Swift::String::Index)v8)._rawBits;
      v28 = v27._rawBits;
      if (!(v27._rawBits >> 14))
      {
        if ((_swift_stdlib_isExecutableLinkedOnOrAfter(0x50700u) & 1) != 0)
LABEL_69:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringCharacterView.swift", 31, 2, 0x62uLL, 0);
        v29 = 0;
        goto LABEL_45;
      }
      v29 = v27._rawBits >> 16;
      if (v27._rawBits >= 0x20000)
      {
        if ((a2 & 0x1000000000000000) == 0)
        {
          if ((a2 & 0x2000000000000000) != 0)
          {
            v48 = a1;
            v49 = v44;
            v31 = (char *)&v48 + v29;
          }
          else
          {
            v30 = (char *)v43;
            if ((a1 & 0x1000000000000000) == 0)
            {
              v30 = (char *)_StringObject.sharedUTF8.getter(a1, a2);
              if (!v30)
                goto LABEL_61;
            }
            v31 = &v30[v29];
          }
          v32 = *((unsigned __int16 *)v31 - 1);
          if (v32 != 2573 && (v32 & 0x80808080) == 0)
          {
            v29 = 1;
LABEL_45:
            v33 = v29 << 8;
            goto LABEL_51;
          }
        }
        v29 = _StringGuts._opaqueComplexCharacterStride(endingAt:)(v28 >> 16);
      }
      v33 = v29 << 8;
      if (v29 > 63)
        v33 = 0;
LABEL_51:
      v8 = v33 | v47 | (v28 - (v29 << 16)) & 0xFFFFFFFFFFFF0000;
      v34._rawBits = v8;
      v36 = String.subscript.getter(v34, a1, a2);
      v37 = v35;
      if (v26 == v36 && v25 == v35)
      {
        swift_bridgeObjectRelease_n(v25, 2);
      }
      else
      {
        if ((~v25 & 0x6000000000000000) == 0
          && (v35 & 0x2000000000000000) != 0
          && (v35 & 0x4000000000000000) != 0)
        {
          swift_bridgeObjectRelease(v25);
          v39 = 0;
          v25 = v37;
          goto LABEL_63;
        }
        v38 = _stringCompareInternal(_:_:expecting:)(v26, v25, v36, v35, 0);
        swift_bridgeObjectRelease(v25);
        swift_bridgeObjectRelease(v37);
        if ((v38 & 1) == 0)
          return 0;
      }
      if (v11 < 0x4000)
        goto LABEL_65;
    }
    if ((_swift_stdlib_isExecutableLinkedOnOrAfter(0x50700u) & 1) != 0)
      goto LABEL_69;
    v16 = 0;
    goto LABEL_28;
  }
LABEL_65:
  if (v8 >= 0x4000)
  {
    v41._rawBits = String.index(before:)((Swift::String::Index)v8)._rawBits;
    String.subscript.getter(v41, a1, a2);
    v25 = v42;
    v39 = 0;
    goto LABEL_63;
  }
  return 1;
}

uint64_t specialized Sequence<>.starts<A>(with:)(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  unint64_t v11;
  void *object;
  uint64_t v13;
  Swift::String::Index v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  Swift::String_optional v18;
  char v19;

  v11 = a3 ^ a4;
  swift_bridgeObjectRetain(a2, a2, a3, (char *)a4);
  if (v11 >= 0x4000)
  {
    v14._rawBits = a3;
    do
    {
      v15 = Substring.subscript.getter(v14._rawBits, a3, a4, a5, a6);
      v17 = v16;
      v14._rawBits = Substring.index(after:)(v14)._rawBits;
      v18 = String.Iterator.next()();
      if (!v18.value._object)
      {
        swift_bridgeObjectRelease(a2);
        swift_bridgeObjectRelease(v17);
        return 1;
      }
      if (v15 == v18.value._countAndFlagsBits && v18.value._object == (void *)v17)
      {
        swift_bridgeObjectRelease(v17);
        swift_bridgeObjectRelease((uint64_t)v18.value._object);
      }
      else
      {
        if ((~(v17 & (unint64_t)v18.value._object) & 0x6000000000000000) == 0)
        {
          swift_bridgeObjectRelease(v17);
          swift_bridgeObjectRelease((uint64_t)v18.value._object);
LABEL_16:
          v13 = a2;
LABEL_17:
          swift_bridgeObjectRelease(v13);
          return 0;
        }
        v19 = _stringCompareInternal(_:_:expecting:)(v15, v17, v18.value._countAndFlagsBits, (unint64_t)v18.value._object, 0);
        swift_bridgeObjectRelease(v17);
        swift_bridgeObjectRelease((uint64_t)v18.value._object);
        if ((v19 & 1) == 0)
          goto LABEL_16;
      }
    }
    while ((v14._rawBits ^ a4) >= 0x4000);
  }
  object = String.Iterator.next()().value._object;
  swift_bridgeObjectRelease(a2);
  if (object)
  {
    v13 = (uint64_t)object;
    goto LABEL_17;
  }
  return 1;
}

uint64_t specialized Sequence<>.starts<A>(with:)(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::UInt64 rawBits;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  Swift::String::Index v31;
  Swift::String::Index v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  char v40;
  uint64_t v41;
  Swift::String::Index v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v48;
  uint64_t v49;

  v7 = a1;
  v8 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v8 = a1;
  v9 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v9 = 11;
  rawBits = v9 | (v8 << 16);
  v11 = a3 >> 14;
  if (a3 >> 14 == a4 >> 14)
  {
LABEL_34:
    if (rawBits < 0x4000)
      return 1;
    v43._rawBits = String.index(before:)((Swift::String::Index)rawBits)._rawBits;
    String.subscript.getter(v43, v7, a2);
    v28 = v44;
    v41 = 0;
  }
  else
  {
    v12 = a6;
    v13 = a5;
    v14 = a4;
    v15 = a3;
    v16 = 4;
    if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0)
      v16 = 8;
    v48 = a3 & 2 | v16;
    v49 = a3 >> 16;
    v17 = a4;
    v45 = a3 >> 14;
    while (1)
    {
      v18 = _StringGuts.validateInclusiveCharacterIndex(_:in:)(v17, v15, v14, v13, v12);
      if (v11 >= v18 >> 14)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Substring index is out of bounds", 32, 2, "Swift/Substring.swift", 21, 2, 0x10BuLL, 0);
      v20 = v18;
      v21 = _StringGuts._opaqueCharacterStride(endingAt:in:)(v18 >> 16, v49, v19, v13, v12);
      v22 = v21 << 8;
      if (v21 > 63)
        v22 = 0;
      v23 = v48 | v22 | (v20 - (v21 << 16)) & 0xFFFFFFFFFFFF0000;
      v17 = v23 | 1;
      v24 = v15;
      v25 = v14;
      v26 = Substring.subscript.getter(v23 | 1, v24, v14, v13, v12);
      v28 = v27;
      if (rawBits < 0x4000)
        break;
      v29 = v26;
      v30 = v12;
      v31._rawBits = _StringGuts.validateInclusiveCharacterIndex_5_7(_:)((Swift::String::Index)rawBits)._rawBits;
      if (!(v31._rawBits >> 14) && _swift_stdlib_isExecutableLinkedOnOrAfter(0x50700u))
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringCharacterView.swift", 31, 2, 0x62uLL, 0);
      v32._rawBits = String._uncheckedIndex(before:)(v31)._rawBits;
      rawBits = v32._rawBits;
      v33 = v7;
      v34 = String.subscript.getter(v32, v7, a2);
      v36 = v29 == v34 && v28 == v35;
      if (v36)
      {
        swift_bridgeObjectRelease_n(v28, 2);
      }
      else
      {
        v37 = v35;
        if ((~v28 & 0x6000000000000000) == 0
          && (v35 & 0x2000000000000000) != 0
          && (v35 & 0x4000000000000000) != 0)
        {
          swift_bridgeObjectRelease(v28);
          v41 = 0;
          v28 = v37;
          goto LABEL_32;
        }
        v40 = _stringCompareInternal(_:_:expecting:)(v29, v28, v34, v35, 0);
        swift_bridgeObjectRelease(v28);
        swift_bridgeObjectRelease(v37);
        if ((v40 & 1) == 0)
          return 0;
      }
      v36 = v45 == v23 >> 14;
      v11 = v45;
      v14 = v25;
      v7 = v33;
      v12 = v30;
      v15 = a3;
      v13 = a5;
      if (v36)
        goto LABEL_34;
    }
    v41 = 1;
  }
LABEL_32:
  swift_bridgeObjectRelease(v28);
  return v41;
}

uint64_t Sequence<>.starts<A>(with:)(char *a1, uint64_t a2, uint64_t a3, const char *a4, const char *a5, uint64_t a6)
{
  unint64_t AssociatedTypeWitness;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  const char *v34;
  uint64_t v35;
  char *v36;
  void (*v37)(uint64_t, const char *);
  uint64_t v38;
  uint64_t v39;
  unint64_t AssociatedConformanceWitness;
  uint64_t v41;
  unsigned int (*v42)(char *, uint64_t, unint64_t);
  void (*v43)(char *, char *, unint64_t);
  unint64_t v44;
  char v45;
  void (*v46)(char *, unint64_t);
  _BOOL8 v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  unint64_t v67;
  const char *v68;
  char *v69;
  unint64_t v70;

  v66 = a1;
  v62 = a6;
  v68 = a5;
  v59 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4, a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v10 = *(_QWORD **)(AssociatedTypeWitness - 8);
  v11 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v53 - v14;
  v18 = type metadata accessor for Optional(0, AssociatedTypeWitness, v16, v17);
  v55 = *(_QWORD *)(v18 - 8);
  v56 = v18;
  v19 = MEMORY[0x1E0C80A78](v18);
  v54 = (char *)&v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v53 - v22;
  v24 = MEMORY[0x1E0C80A78](v21);
  v26 = (char *)&v53 - v25;
  v57 = a2;
  v64 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v24);
  v58 = (char *)&v53 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = swift_getAssociatedTypeWitness(0, a4, v28, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v60 = *(_QWORD *)(v70 - 8);
  v29 = MEMORY[0x1E0C80A78](v70);
  v69 = (char *)&v53 - v30;
  v31 = a3;
  v63 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v29);
  v33 = (char *)&v53 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = v68;
  v67 = swift_getAssociatedTypeWitness(0, v68, v31, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v61 = *(_QWORD *)(v67 - 8);
  MEMORY[0x1E0C80A78](v67);
  v36 = (char *)&v53 - v35;
  (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v33, v66, v31);
  v37 = (void (*)(uint64_t, const char *))*((_QWORD *)v34 + 4);
  v66 = v36;
  v63 = v31;
  v37(v31, v34);
  v38 = v57;
  (*(void (**)(char *, unint64_t, uint64_t))(v64 + 16))(v58, v65, v57);
  v39 = (uint64_t)v59;
  (*((void (**)(uint64_t))v59 + 4))(v38);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v39, v38, v70, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v64 = *(_QWORD *)(AssociatedConformanceWitness + 16);
  v65 = AssociatedConformanceWitness;
  v41 = v67;
  while (1)
  {
    ((void (*)(unint64_t, unint64_t))v64)(v70, v65);
    v42 = (unsigned int (*)(char *, uint64_t, unint64_t))v10[6];
    if (v42(v26, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, unint64_t))(v60 + 8))(v69, v70);
      v48 = v67;
      v49 = swift_getAssociatedConformanceWitness((uint64_t)v68, v63, v67, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
      v50 = v54;
      v51 = v66;
      (*(void (**)(unint64_t, unint64_t))(v49 + 16))(v48, v49);
      (*(void (**)(char *, unint64_t))(v61 + 8))(v51, v48);
      v47 = v42(v50, 1, AssociatedTypeWitness) == 1;
      (*(void (**)(char *, uint64_t))(v55 + 8))(v50, v56);
      return v47;
    }
    v43 = (void (*)(char *, char *, unint64_t))v10[4];
    v43(v15, v26, AssociatedTypeWitness);
    v44 = swift_getAssociatedConformanceWitness((uint64_t)v68, v63, v41, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
    (*(void (**)(uint64_t, unint64_t))(v44 + 16))(v41, v44);
    if (v42(v23, 1, AssociatedTypeWitness) == 1)
      break;
    v43(v13, v23, AssociatedTypeWitness);
    v45 = (*(uint64_t (**)(char *, char *, unint64_t))(v62 + 8))(v15, v13, AssociatedTypeWitness);
    v46 = (void (*)(char *, unint64_t))v10[1];
    v46(v13, AssociatedTypeWitness);
    v46(v15, AssociatedTypeWitness);
    if ((v45 & 1) == 0)
    {
      (*(void (**)(char *, unint64_t))(v60 + 8))(v69, v70);
      (*(void (**)(char *, unint64_t))(v61 + 8))(v66, v67);
      return 0;
    }
  }
  ((void (*)(char *, unint64_t))v10[1])(v15, AssociatedTypeWitness);
  (*(void (**)(char *, unint64_t))(v60 + 8))(v69, v70);
  (*(void (**)(char *, unint64_t))(v61 + 8))(v66, v67);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v23, v56);
  return 1;
}

uint64_t Sequence.elementsEqual<A>(_:by:)(void (*a1)(unint64_t, const char *), uint64_t (*a2)(char *, char *), uint64_t a3, uint64_t a4, uint64_t a5, const char *a6, const char *a7)
{
  uint64_t v7;
  unint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  const char *v36;
  uint64_t v37;
  char *v38;
  void (*v39)(char *, char *, uint64_t);
  char *v40;
  void (*v41)(uint64_t, const char *);
  uint64_t v42;
  uint64_t v43;
  unint64_t AssociatedConformanceWitness;
  unint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t (*v62)(char *, char *);
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  const char *v66;
  unint64_t v67;
  void (*v68)(unint64_t, const char *);
  const char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  unint64_t *TupleTypeMetadata2;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;

  v68 = a1;
  v69 = a6;
  v62 = a2;
  v63 = a3;
  v66 = a7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a7, a5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v64 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v14 = (char *)&v56 - v13;
  v15 = swift_getAssociatedTypeWitness(0, a6, a4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v61 = (char *)&v56 - v17;
  v20 = type metadata accessor for Optional((const char *)0xFF, v15, v18, v19);
  v65 = AssociatedTypeWitness;
  v23 = type metadata accessor for Optional((const char *)0xFF, AssociatedTypeWitness, v21, v22);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v20, v23, 0, 0);
  v24 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v81 = (char *)&v56 - v25;
  v75 = *(_QWORD *)(v23 - 8);
  v76 = v23;
  v26 = MEMORY[0x1E0C80A78](v24);
  v72 = (char *)&v56 - v27;
  v74 = v20;
  v71 = *(_QWORD *)(v20 - 8);
  v28 = MEMORY[0x1E0C80A78](v26);
  v70 = (char *)&v56 - v29;
  v59 = a5;
  v67 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](v28);
  v60 = (char *)&v56 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = swift_getAssociatedTypeWitness(0, a7, a5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v58 = *(_QWORD *)(v80 - 8);
  v31 = MEMORY[0x1E0C80A78](v80);
  v78 = (char *)&v56 - v32;
  v33 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v31);
  v35 = (char *)&v56 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = v69;
  v79 = swift_getAssociatedTypeWitness(0, v69, a4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v57 = *(_QWORD *)(v79 - 8);
  MEMORY[0x1E0C80A78](v79);
  v38 = (char *)&v56 - v37;
  v39 = *(void (**)(char *, char *, uint64_t))(v33 + 16);
  v40 = v61;
  v39(v35, v77, a4);
  v41 = (void (*)(uint64_t, const char *))*((_QWORD *)v36 + 4);
  v77 = v38;
  v41(a4, v36);
  v42 = v59;
  (*(void (**)(char *, void (*)(unint64_t, const char *), uint64_t))(v67 + 16))(v60, v68, v59);
  v43 = (uint64_t)v66;
  (*((void (**)(uint64_t, const char *))v66 + 4))(v42, v66);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v69, a4, v79, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v68 = *(void (**)(unint64_t, const char *))(AssociatedConformanceWitness + 16);
  v69 = (const char *)AssociatedConformanceWitness;
  v45 = swift_getAssociatedConformanceWitness(v43, v42, v80, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v66 = *(const char **)(v45 + 16);
  v67 = v45;
  v46 = v81;
  while (1)
  {
    v47 = v70;
    v68(v79, v69);
    v48 = v72;
    ((void (*)(unint64_t, unint64_t))v66)(v80, v67);
    v49 = &v46[*((int *)TupleTypeMetadata2 + 12)];
    (*(void (**)(char *, char *, uint64_t))(v71 + 32))(v46, v47, v74);
    (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v49, v48, v76);
    if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v16 + 48))(v46, 1, v15) == 1)
    {
      (*(void (**)(char *, unint64_t))(v58 + 8))(v78, v80);
      (*(void (**)(char *, unint64_t))(v57 + 8))(v77, v79);
      LOBYTE(v40) = 1;
      if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v64 + 48))(v49, 1, v65) == 1)
        return v40 & 1;
      (*(void (**)(char *, uint64_t))(v75 + 8))(v49, v76);
      goto LABEL_10;
    }
    v50 = v16;
    v52 = v64;
    v51 = v65;
    if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v64 + 48))(v49, 1, v65) == 1)
    {
      (*(void (**)(char *, unint64_t))(v58 + 8))(v78, v80);
      (*(void (**)(char *, unint64_t))(v57 + 8))(v77, v79);
      (*(void (**)(char *, unint64_t))(v50 + 8))(v81, v15);
      goto LABEL_10;
    }
    (*(void (**)(char *, char *, unint64_t))(v50 + 32))(v40, v81, v15);
    (*(void (**)(char *, char *, unint64_t))(v52 + 32))(v14, v49, v51);
    v53 = v62(v40, v14);
    if (v7)
      break;
    v54 = v53;
    (*(void (**)(char *, unint64_t))(v52 + 8))(v14, v51);
    (*(void (**)(char *, unint64_t))(v50 + 8))(v40, v15);
    v16 = v50;
    if ((v54 & 1) == 0)
    {
      (*(void (**)(char *, unint64_t))(v58 + 8))(v78, v80);
      (*(void (**)(char *, unint64_t))(v57 + 8))(v77, v79);
LABEL_10:
      LOBYTE(v40) = 0;
      return v40 & 1;
    }
  }
  (*(void (**)(char *, unint64_t))(v52 + 8))(v14, v51);
  (*(void (**)(char *, unint64_t))(v50 + 8))(v40, v15);
  (*(void (**)(char *, unint64_t))(v58 + 8))(v78, v80);
  (*(void (**)(char *, unint64_t))(v57 + 8))(v77, v79);
  return v40 & 1;
}

uint64_t Sequence.lexicographicallyPrecedes<A>(_:by:)(unint64_t a1, uint64_t (*a2)(char *, char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const char *a7)
{
  uint64_t v7;
  unint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  void (*v41)(uint64_t);
  char *v42;
  unint64_t AssociatedConformanceWitness;
  char *v44;
  char *v45;
  unsigned int (*v46)(char *, uint64_t, unint64_t);
  uint64_t v47;
  void (*v48)(char *, char *, unint64_t);
  char *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  char v54;
  char v55;
  char *v56;
  void (*v57)(char *, unint64_t);
  uint64_t v58;
  void (*v59)(char *, uint64_t);
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  void (*v64)(char *, unint64_t);
  uint64_t v65;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (**v72)(char *, unint64_t);
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  void (*v77)(unint64_t, char *);
  char *v78;
  char *v79;
  char *v80;
  unint64_t v81;
  char *v82;
  unint64_t v83;
  uint64_t v84;
  const char *v85;
  uint64_t (*v86)(char *, char *);
  uint64_t v87;

  v83 = a1;
  v85 = a7;
  v86 = a2;
  v87 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)a6, a4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v15 = type metadata accessor for Optional(0, AssociatedTypeWitness, v13, v14);
  v69 = *(_QWORD *)(v15 - 8);
  v70 = v15;
  v16 = MEMORY[0x1E0C80A78](v15);
  v68 = (char *)&v67 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16);
  v74 = (char *)&v67 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v79 = (char *)&v67 - v21;
  v73 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v22 = MEMORY[0x1E0C80A78](v20);
  v76 = (char *)&v67 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1E0C80A78](v22);
  v75 = (char *)&v67 - v25;
  v84 = a5;
  v80 = *(char **)(a5 - 8);
  MEMORY[0x1E0C80A78](v24);
  v78 = (char *)&v67 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = swift_getAssociatedTypeWitness(0, a7, v27, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v72 = *(void (***)(char *, unint64_t))(v81 - 8);
  v28 = MEMORY[0x1E0C80A78](v81);
  v30 = (char *)&v67 - v29;
  v31 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v28);
  v33 = (char *)&v67 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = swift_getAssociatedTypeWitness(0, (const char *)a6, a4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v71 = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34);
  v36 = (char *)&v67 - v35;
  v37 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
  v38 = v73;
  v37(v33, v82, a4);
  v39 = *(void (**)(uint64_t, uint64_t))(a6 + 32);
  v82 = v36;
  v39(a4, a6);
  v40 = v84;
  (*((void (**)(char *, unint64_t, uint64_t))v80 + 2))(v78, v83, v84);
  v41 = (void (*)(uint64_t))*((_QWORD *)v85 + 4);
  v80 = v30;
  v42 = v74;
  v41(v40);
  v83 = v34;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a6, a4, v34, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v77 = *(void (**)(unint64_t, char *))(AssociatedConformanceWitness + 16);
  v78 = (char *)AssociatedConformanceWitness;
  v44 = v75;
  while (1)
  {
    v45 = v79;
    v77(v83, v78);
    v46 = *(unsigned int (**)(char *, uint64_t, unint64_t))(v38 + 48);
    if (v46(v45, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, unint64_t))(v71 + 8))(v82, v83);
      v58 = v70;
      v59 = *(void (**)(char *, uint64_t))(v69 + 8);
      v59(v45, v70);
      v60 = v81;
      v61 = swift_getAssociatedConformanceWitness((uint64_t)v85, v84, v81, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
      v62 = v68;
      v63 = v80;
      (*(void (**)(unint64_t, unint64_t))(v61 + 16))(v60, v61);
      v72[1](v63, v60);
      LOBYTE(v63) = v46(v62, 1, AssociatedTypeWitness) != 1;
      v59(v62, v58);
      return v63 & 1;
    }
    v47 = v38;
    v48 = *(void (**)(char *, char *, unint64_t))(v38 + 32);
    v48(v44, v45, AssociatedTypeWitness);
    v49 = v42;
    v50 = v81;
    v51 = swift_getAssociatedConformanceWitness((uint64_t)v85, v84, v81, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
    v52 = v50;
    v42 = v49;
    (*(void (**)(unint64_t, unint64_t))(v51 + 16))(v52, v51);
    if (v46(v49, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, unint64_t))(v47 + 8))(v44, AssociatedTypeWitness);
      v72[1](v80, v81);
      (*(void (**)(char *, unint64_t))(v71 + 8))(v82, v83);
      (*(void (**)(char *, uint64_t))(v69 + 8))(v49, v70);
      goto LABEL_11;
    }
    v53 = v76;
    v48(v76, v49, AssociatedTypeWitness);
    v54 = v86(v44, v53);
    if (v7)
      break;
    if ((v54 & 1) != 0)
    {
      v63 = *(char **)(v47 + 8);
      ((void (*)(char *, unint64_t))v63)(v53, AssociatedTypeWitness);
      ((void (*)(char *, unint64_t))v63)(v44, AssociatedTypeWitness);
      v72[1](v80, v81);
      (*(void (**)(char *, unint64_t))(v71 + 8))(v82, v83);
      LOBYTE(v63) = 1;
      return v63 & 1;
    }
    v55 = v86(v53, v44);
    v56 = v53;
    v57 = *(void (**)(char *, unint64_t))(v47 + 8);
    v38 = v47;
    v57(v56, AssociatedTypeWitness);
    v57(v44, AssociatedTypeWitness);
    if ((v55 & 1) != 0)
    {
      v72[1](v80, v81);
      (*(void (**)(char *, unint64_t))(v71 + 8))(v82, v83);
LABEL_11:
      LOBYTE(v63) = 0;
      return v63 & 1;
    }
  }
  v64 = *(void (**)(char *, unint64_t))(v47 + 8);
  v65 = v71;
  v63 = (char *)v72;
  v64(v76, AssociatedTypeWitness);
  v64(v44, AssociatedTypeWitness);
  (*((void (**)(char *, unint64_t))v63 + 1))(v80, v81);
  (*(void (**)(char *, unint64_t))(v65 + 8))(v82, v83);
  return v63 & 1;
}

uint64_t Sequence<>.lexicographicallyPrecedes<A>(_:)(unint64_t a1, uint64_t a2, uint64_t a3, const char *a4, const char *a5, uint64_t a6)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  const char *v34;
  uint64_t v35;
  char *v36;
  void (*v37)(uint64_t);
  uint64_t v38;
  const char *v39;
  unint64_t AssociatedConformanceWitness;
  uint64_t v41;
  unsigned int (*v42)(char *, uint64_t, unint64_t);
  void (*v43)(char *, char *, unint64_t);
  unint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(char *, char *, unint64_t, uint64_t);
  char v47;
  void (*v48)(char *, unint64_t);
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  unint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  _BOOL8 v55;
  void (*v56)(char *, unint64_t);
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(const char *, unint64_t);
  unint64_t v69;
  unint64_t v70;
  char *v71;
  const char *v72;
  uint64_t v73;
  const char *v74;
  char *v75;

  v72 = a4;
  v67 = a6;
  v68 = (void (*)(const char *, unint64_t))a2;
  v74 = a5;
  v69 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a4, a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v11 = type metadata accessor for Optional(0, AssociatedTypeWitness, v9, v10);
  v60 = *(_QWORD *)(v11 - 8);
  v61 = v11;
  v12 = MEMORY[0x1E0C80A78](v11);
  v59 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v58 - v15;
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v58 - v18;
  v20 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v21 = MEMORY[0x1E0C80A78](v17);
  v23 = (char *)&v58 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1E0C80A78](v21);
  v26 = (char *)&v58 - v25;
  v73 = a3;
  v66 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v24);
  v65 = (char *)&v58 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = swift_getAssociatedTypeWitness(0, a5, v28, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v63 = *(_QWORD *)(v70 - 8);
  v29 = MEMORY[0x1E0C80A78](v70);
  v75 = (char *)&v58 - v30;
  v31 = (uint64_t)v68;
  v64 = *((_QWORD *)v68 - 1);
  MEMORY[0x1E0C80A78](v29);
  v33 = (char *)&v58 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = (const char *)swift_getAssociatedTypeWitness(0, v72, v31, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v62 = *((_QWORD *)v34 - 1);
  MEMORY[0x1E0C80A78](v34);
  v36 = (char *)&v58 - v35;
  (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v33, v71, v31);
  v37 = (void (*)(uint64_t))*((_QWORD *)v72 + 4);
  v71 = v36;
  v37(v31);
  v38 = v73;
  (*(void (**)(char *, unint64_t, uint64_t))(v66 + 16))(v65, v69, v73);
  (*((void (**)(uint64_t))v74 + 4))(v38);
  v39 = v72;
  v72 = v34;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v39, v31, (uint64_t)v34, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v68 = *(void (**)(const char *, unint64_t))(AssociatedConformanceWitness + 16);
  v69 = AssociatedConformanceWitness;
  v41 = v70;
  while (1)
  {
    v68(v72, v69);
    v42 = *(unsigned int (**)(char *, uint64_t, unint64_t))(v20 + 48);
    if (v42(v19, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, const char *))(v62 + 8))(v71, v72);
      v49 = v61;
      v50 = *(void (**)(char *, uint64_t))(v60 + 8);
      v50(v19, v61);
      v51 = v70;
      v52 = swift_getAssociatedConformanceWitness((uint64_t)v74, v73, v70, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
      v53 = v59;
      v54 = v75;
      (*(void (**)(unint64_t, unint64_t))(v52 + 16))(v51, v52);
      (*(void (**)(char *, unint64_t))(v63 + 8))(v54, v51);
      v55 = v42(v53, 1, AssociatedTypeWitness) != 1;
      v50(v53, v49);
      return v55;
    }
    v43 = *(void (**)(char *, char *, unint64_t))(v20 + 32);
    v43(v26, v19, AssociatedTypeWitness);
    v44 = swift_getAssociatedConformanceWitness((uint64_t)v74, v73, v41, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
    (*(void (**)(uint64_t, unint64_t))(v44 + 16))(v41, v44);
    if (v42(v16, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, unint64_t))(v20 + 8))(v26, AssociatedTypeWitness);
      (*(void (**)(char *, unint64_t))(v63 + 8))(v75, v70);
      (*(void (**)(char *, const char *))(v62 + 8))(v71, v72);
      (*(void (**)(char *, uint64_t))(v60 + 8))(v16, v61);
      return 0;
    }
    v43(v23, v16, AssociatedTypeWitness);
    v45 = v67;
    v46 = *(uint64_t (**)(char *, char *, unint64_t, uint64_t))(v67 + 16);
    if ((v46(v26, v23, AssociatedTypeWitness, v67) & 1) != 0)
      break;
    v47 = v46(v23, v26, AssociatedTypeWitness, v45);
    v48 = *(void (**)(char *, unint64_t))(v20 + 8);
    v48(v23, AssociatedTypeWitness);
    v48(v26, AssociatedTypeWitness);
    if ((v47 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t))(v63 + 8))(v75, v70);
      (*(void (**)(char *, const char *))(v62 + 8))(v71, v72);
      return 0;
    }
  }
  v56 = *(void (**)(char *, unint64_t))(v20 + 8);
  v56(v23, AssociatedTypeWitness);
  v56(v26, AssociatedTypeWitness);
  (*(void (**)(char *, unint64_t))(v63 + 8))(v75, v70);
  (*(void (**)(char *, const char *))(v62 + 8))(v71, v72);
  return 1;
}

uint64_t specialized Sequence.contains(where:)(unsigned int (*a1)(int *), uint64_t a2, unint64_t a3, int a4)
{
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int v10;

  v5 = HIDWORD(a3);
  if (HIDWORD(a3) == a4)
  {
    LOBYTE(v6) = 0;
  }
  else
  {
    do
    {
      if (!(_DWORD)v5)
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/ValidUTF8Buffer.swift", 27, 2, 0x69uLL, 0);
      v10 = v5;
      v6 = (v4 != 0) | a1(&v10);
      if ((v6 & 1) != 0)
        break;
      LODWORD(v5) = v5 >> 8;
    }
    while ((_DWORD)v5 != a4);
  }
  return v6 & 1;
}

uint64_t specialized Sequence.contains(where:)(uint64_t (*a1)(_QWORD *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  uint64_t i;
  Swift::Int scalarLength;
  Swift::tuple_Unicode_Scalar_scalarLength_Int v16;
  unsigned int v17;
  int v18;
  char v19;
  char v20;
  _QWORD v22[2];

  if ((a4 & 0x2000000000000000) != 0)
    v5 = HIBYTE(a4) & 0xF;
  else
    v5 = a3 & 0xFFFFFFFFFFFFLL;
  if (!v5)
  {
    v13 = 0;
    return v13 & 1;
  }
  if ((a4 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain(a4, a2, a3, (char *)a4);
    v10 = 0;
    v11 = 0;
    goto LABEL_17;
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    swift_bridgeObjectRetain(a4, a2, a3, (char *)a4);
    v10 = 0;
    v11 = 0;
LABEL_18:
    v22[0] = a3;
    v22[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    v12 = v22;
  }
  else
  {
    swift_bridgeObjectRetain(a4, a2, a3, (char *)a4);
    v10 = 0;
    v11 = 0;
    if ((a3 & 0x1000000000000000) != 0)
LABEL_16:
      v12 = (_QWORD *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
LABEL_8:
      v12 = _StringObject.sharedUTF8.getter(a3, a4);
  }
  for (i = _decodeScalar(_:startingAt:)((uint64_t)v12, v9, v11); ; i = *(_QWORD *)&v16._0._value)
  {
    v17 = i;
    v11 += scalarLength;
    if (i < 0x10000)
    {
      LOWORD(v18) = i;
      goto LABEL_22;
    }
    v10 = Unicode.Scalar.UTF16View.subscript.getter(1, i);
    v18 = (unsigned __int16)((v17 + 67043328) >> 10) + 55296;
    if ((v18 & 0x10000) != 0)
      break;
LABEL_22:
    LOWORD(v22[0]) = v18;
    v19 = a1(v22);
    if (v4)
    {
      swift_bridgeObjectRelease(a4);
      return v13 & 1;
    }
    if ((v19 & 1) != 0)
    {
LABEL_29:
      swift_bridgeObjectRelease(a4);
      v13 = 1;
      return v13 & 1;
    }
    if (v17 >= 0x10000)
    {
      LOWORD(v22[0]) = v10;
      v20 = a1(v22);
      if ((v20 & 1) != 0)
        goto LABEL_29;
      v10 = 0;
    }
    if (v11 >= v5)
      goto LABEL_33;
    if ((a4 & 0x1000000000000000) == 0)
    {
      if ((a4 & 0x2000000000000000) != 0)
        goto LABEL_18;
      if ((a3 & 0x1000000000000000) == 0)
        goto LABEL_8;
      goto LABEL_16;
    }
LABEL_17:
    v16 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v11 << 16));
    scalarLength = v16.scalarLength;
  }
  __break(1u);
LABEL_33:
  swift_bridgeObjectRelease(a4);
  v13 = 0;
  return v13 & 1;
}

BOOL Sequence.contains(where:)(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v4;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  void (**v21)(char *, unint64_t, uint64_t);
  void (*v22)(uint64_t);
  uint64_t v23;
  unint64_t AssociatedConformanceWitness;
  void (*v25)(unint64_t, unint64_t);
  int v26;
  char v27;
  char v28;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t (*v33)(char *);
  uint64_t v34;
  void (**v35)(char *, unint64_t, uint64_t);
  unint64_t v36;

  v33 = a1;
  v34 = a2;
  v31 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = (char *)&v30 - v9;
  v13 = type metadata accessor for Optional(0, AssociatedTypeWitness, v11, v12);
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v30 - v15;
  v35 = *(void (***)(char *, unint64_t, uint64_t))(a3 - 8);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = swift_getAssociatedTypeWitness(0, a4, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v32 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v21 = (void (**)(char *, unint64_t, uint64_t))((char *)&v30 - v20);
  v35[2](v18, v36, a3);
  v22 = (void (*)(uint64_t))*((_QWORD *)v31 + 4);
  v35 = v21;
  v23 = (uint64_t)v31;
  v22(a3);
  v36 = v19;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v23, a3, v19, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v25 = *(void (**)(unint64_t, unint64_t))(AssociatedConformanceWitness + 16);
  do
  {
    v25(v36, AssociatedConformanceWitness);
    v26 = (*(uint64_t (**)(char *, uint64_t, unint64_t))(v8 + 48))(v16, 1, AssociatedTypeWitness);
    if (v26 == 1)
      break;
    (*(void (**)(char *, char *, unint64_t))(v8 + 32))(v10, v16, AssociatedTypeWitness);
    v27 = v33(v10);
    if (v4)
    {
      (*(void (**)(char *, unint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
      break;
    }
    v28 = v27;
    (*(void (**)(char *, unint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
  }
  while ((v28 & 1) == 0);
  (*(void (**)(void (**)(char *, unint64_t, uint64_t), unint64_t))(v32 + 8))(v35, v36);
  return v26 != 1;
}

BOOL Sequence.allSatisfy(_:)(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v4;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  void (**v21)(char *, unint64_t, uint64_t);
  void (*v22)(uint64_t);
  uint64_t v23;
  unint64_t AssociatedConformanceWitness;
  void (*v25)(unint64_t, unint64_t);
  int v26;
  char v27;
  char v28;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t (*v33)(char *);
  uint64_t v34;
  void (**v35)(char *, unint64_t, uint64_t);
  unint64_t v36;

  v33 = a1;
  v34 = a2;
  v31 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = (char *)&v30 - v9;
  v13 = type metadata accessor for Optional(0, AssociatedTypeWitness, v11, v12);
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v30 - v15;
  v35 = *(void (***)(char *, unint64_t, uint64_t))(a3 - 8);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = swift_getAssociatedTypeWitness(0, a4, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v32 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v21 = (void (**)(char *, unint64_t, uint64_t))((char *)&v30 - v20);
  v35[2](v18, v36, a3);
  v22 = (void (*)(uint64_t))*((_QWORD *)v31 + 4);
  v35 = v21;
  v23 = (uint64_t)v31;
  v22(a3);
  v36 = v19;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v23, a3, v19, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v25 = *(void (**)(unint64_t, unint64_t))(AssociatedConformanceWitness + 16);
  do
  {
    v25(v36, AssociatedConformanceWitness);
    v26 = (*(uint64_t (**)(char *, uint64_t, unint64_t))(v8 + 48))(v16, 1, AssociatedTypeWitness);
    if (v26 == 1)
      break;
    (*(void (**)(char *, char *, unint64_t))(v8 + 32))(v10, v16, AssociatedTypeWitness);
    v27 = v33(v10);
    if (v4)
    {
      (*(void (**)(char *, unint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
      break;
    }
    v28 = v27;
    (*(void (**)(char *, unint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
  }
  while ((v28 & 1) != 0);
  (*(void (**)(void (**)(char *, unint64_t, uint64_t), unint64_t))(v32 + 8))(v35, v36);
  return v26 == 1;
}

void Sequence.flatMap<A>(_:)(void (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, const char *a6)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t AssociatedTypeWitness;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  unint64_t AssociatedConformanceWitness;
  void (*v28)(unint64_t, unint64_t);
  void (*v29)(unint64_t, unint64_t);
  uint64_t v30;
  unsigned int (*v31)(char *, uint64_t, unint64_t);
  void (*v32)(char *, char *, unint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  void (*v41)(char *);
  _DWORD *v42;
  unint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __objc2_class **v48;

  v44 = a6;
  v45 = a4;
  v40 = a2;
  v41 = a1;
  MEMORY[0x1E0C80A78](a1);
  v47 = (uint64_t)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = associated type descriptor for Sequence.Element;
  v37 = a5;
  v10 = v9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a5, v9, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v46 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v36 - v12;
  v16 = type metadata accessor for Optional(0, AssociatedTypeWitness, v14, v15);
  v17 = MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v36 - v18;
  v20 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v17);
  v22 = (char *)&v36 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = swift_getAssociatedTypeWitness(0, a5, v10, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v38 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v25 = (_DWORD *)((char *)&v36 - v24);
  v39 = (uint64_t *)swift_getAssociatedTypeWitness(0, v44, v45, (uint64_t)&protocol requirements base descriptor for Sequence, v42);
  _swift_isClassOrObjCExistentialType((uint64_t)v39, v39);
  v48 = &_swiftEmptyArrayStorage;
  (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))(v22, v43, v10);
  v26 = (uint64_t)v37;
  (*((void (**)(uint64_t))v37 + 4))(v10);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v26, v10, v23, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v28 = *(void (**)(unint64_t, unint64_t))(AssociatedConformanceWitness + 16);
  v42 = v25;
  v43 = v23;
  v28(v23, AssociatedConformanceWitness);
  v29 = v28;
  v30 = v46;
  v31 = *(unsigned int (**)(char *, uint64_t, unint64_t))(v46 + 48);
  if (v31(v19, 1, AssociatedTypeWitness) == 1)
  {
LABEL_5:
    (*(void (**)(_DWORD *, unint64_t))(v38 + 8))(v42, v43);
  }
  else
  {
    v32 = *(void (**)(char *, char *, unint64_t))(v30 + 32);
    while (1)
    {
      v32(v13, v19, AssociatedTypeWitness);
      v41(v13);
      if (v6)
        break;
      (*(void (**)(char *, unint64_t))(v46 + 8))(v13, AssociatedTypeWitness);
      v35 = type metadata accessor for Array(0, (uint64_t)v39, v33, v34);
      Array.append<A>(contentsOf:)(v47, v35, v45, (uint64_t)v44);
      v29(v43, AssociatedConformanceWitness);
      if (v31(v19, 1, AssociatedTypeWitness) == 1)
        goto LABEL_5;
    }
    (*(void (**)(char *, unint64_t))(v46 + 8))(v13, AssociatedTypeWitness);
    (*(void (**)(_DWORD *, unint64_t))(v38 + 8))(v42, v43);
    swift_bridgeObjectRelease((uint64_t)v48);
  }
}

void Sequence.compactMap<A>(_:)(void (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t *a4, const char *a5)
{
  Sequence.compactMap<A>(_:)(a1, a2, a3, a4, a5);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t AssociatedTypeWitness;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  const char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t AssociatedConformanceWitness;
  void (*v34)(uint64_t, unint64_t);
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void (*v38)(uint64_t, unint64_t);
  uint64_t v39;
  unsigned int (*v40)(char *, uint64_t, unint64_t);
  void (*v41)(uint64_t, unint64_t);
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t *);
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int (*v59)(char *, uint64_t, unint64_t);
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *);
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  __objc2_class **v68;

  v6 = v5;
  v64 = a2;
  v63 = a1;
  v10 = type metadata accessor for Optional(0, (uint64_t)a4, a3, (uint64_t)a4);
  v56 = *(_QWORD *)(v10 - 8);
  v57 = v10;
  v11 = MEMORY[0x1E0C80A78](v10);
  v67 = (char *)&v50 - v12;
  v62 = *(a4 - 1);
  v13 = MEMORY[0x1E0C80A78](v11);
  v55 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v54 = (char *)&v50 - v15;
  v66 = (uint64_t)a5;
  v16 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a5, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v51 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v19 = (char *)&v50 - v18;
  v22 = type metadata accessor for Optional(0, AssociatedTypeWitness, v20, v21);
  v23 = MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v50 - v24;
  v61 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v23);
  v27 = (char *)&v50 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = a5;
  v29 = v16;
  v30 = swift_getAssociatedTypeWitness(0, v28, v16, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v52 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30);
  v32 = (char *)&v50 - v31;
  _swift_isClassOrObjCExistentialType((uint64_t)a4, a4);
  v68 = &_swiftEmptyArrayStorage;
  (*(void (**)(char *, char *, uint64_t))(v61 + 16))(v27, v65, v29);
  (*(void (**)(uint64_t))(v66 + 32))(v29);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v66, v29, v30, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v34 = *(void (**)(uint64_t, unint64_t))(AssociatedConformanceWitness + 16);
  v35 = AssociatedConformanceWitness;
  v36 = v30;
  v37 = v35;
  v65 = v32;
  v66 = v36;
  v34(v36, v35);
  v38 = v34;
  v39 = v51;
  v40 = *(unsigned int (**)(char *, uint64_t, unint64_t))(v51 + 48);
  if (v40(v25, 1, AssociatedTypeWitness) == 1)
  {
LABEL_2:
    (*(void (**)(char *, uint64_t))(v52 + 8))(v65, v66);
  }
  else
  {
    v59 = v40;
    v60 = v37;
    v61 = *(_QWORD *)(v39 + 32);
    v53 = v25;
    while (1)
    {
      v41 = v38;
      ((void (*)(char *, char *, unint64_t))v61)(v19, v25, AssociatedTypeWitness);
      v63(v19);
      if (v6)
        break;
      (*(void (**)(char *, unint64_t))(v39 + 8))(v19, AssociatedTypeWitness);
      v42 = v62;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t *))(v62 + 48))(v67, 1, a4) == 1)
      {
        (*(void (**)(char *, uint64_t))(v56 + 8))(v67, v57);
      }
      else
      {
        v43 = *(void (**)(char *, char *, uint64_t *))(v42 + 32);
        v44 = v54;
        v43(v54, v67, a4);
        v58 = 0;
        v45 = v44;
        v46 = (uint64_t)v55;
        v43(v55, v45, a4);
        v49 = type metadata accessor for Array(0, (uint64_t)a4, v47, v48);
        v25 = v53;
        v6 = v58;
        Array.append(_:)(v46, v49);
      }
      v41(v66, v60);
      v38 = v41;
      if (v59(v25, 1, AssociatedTypeWitness) == 1)
        goto LABEL_2;
    }
    (*(void (**)(char *, unint64_t))(v39 + 8))(v19, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v65, v66);
    swift_bridgeObjectRelease((uint64_t)v68);
  }
}

void Sequence._compactMap<A>(_:)(void (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t *a4, const char *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t AssociatedTypeWitness;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  const char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t AssociatedConformanceWitness;
  void (*v34)(uint64_t, unint64_t);
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void (*v38)(uint64_t, unint64_t);
  uint64_t v39;
  unsigned int (*v40)(char *, uint64_t, unint64_t);
  void (*v41)(char *, char *, uint64_t *);
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, unint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int (*v59)(char *, uint64_t, unint64_t);
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *);
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  __objc2_class **v68;

  v6 = v5;
  v64 = a2;
  v63 = a1;
  v10 = type metadata accessor for Optional(0, (uint64_t)a4, a3, (uint64_t)a4);
  v56 = *(_QWORD *)(v10 - 8);
  v57 = v10;
  v11 = MEMORY[0x1E0C80A78](v10);
  v67 = (char *)&v50 - v12;
  v62 = *(a4 - 1);
  v13 = MEMORY[0x1E0C80A78](v11);
  v55 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v54 = (char *)&v50 - v15;
  v66 = (uint64_t)a5;
  v16 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a5, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v51 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v19 = (char *)&v50 - v18;
  v22 = type metadata accessor for Optional(0, AssociatedTypeWitness, v20, v21);
  v23 = MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v50 - v24;
  v61 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v23);
  v27 = (char *)&v50 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = a5;
  v29 = v16;
  v30 = swift_getAssociatedTypeWitness(0, v28, v16, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v52 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30);
  v32 = (char *)&v50 - v31;
  _swift_isClassOrObjCExistentialType((uint64_t)a4, a4);
  v68 = &_swiftEmptyArrayStorage;
  (*(void (**)(char *, char *, uint64_t))(v61 + 16))(v27, v65, v29);
  (*(void (**)(uint64_t))(v66 + 32))(v29);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v66, v29, v30, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v34 = *(void (**)(uint64_t, unint64_t))(AssociatedConformanceWitness + 16);
  v35 = AssociatedConformanceWitness;
  v36 = v30;
  v37 = v35;
  v65 = v32;
  v66 = v36;
  v34(v36, v35);
  v38 = v34;
  v39 = v51;
  v40 = *(unsigned int (**)(char *, uint64_t, unint64_t))(v51 + 48);
  if (v40(v25, 1, AssociatedTypeWitness) == 1)
  {
LABEL_2:
    (*(void (**)(char *, uint64_t))(v52 + 8))(v65, v66);
  }
  else
  {
    v59 = v40;
    v60 = v37;
    v61 = *(_QWORD *)(v39 + 32);
    v53 = v25;
    while (1)
    {
      v48 = v38;
      ((void (*)(char *, char *, unint64_t))v61)(v19, v25, AssociatedTypeWitness);
      v63(v19);
      if (v6)
        break;
      (*(void (**)(char *, unint64_t))(v39 + 8))(v19, AssociatedTypeWitness);
      v49 = v62;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t *))(v62 + 48))(v67, 1, a4) == 1)
      {
        (*(void (**)(char *, uint64_t))(v56 + 8))(v67, v57);
      }
      else
      {
        v41 = *(void (**)(char *, char *, uint64_t *))(v49 + 32);
        v42 = v54;
        v41(v54, v67, a4);
        v58 = 0;
        v43 = v42;
        v44 = (uint64_t)v55;
        v41(v55, v43, a4);
        v47 = type metadata accessor for Array(0, (uint64_t)a4, v45, v46);
        v25 = v53;
        v6 = v58;
        Array.append(_:)(v44, v47);
      }
      v48(v66, v60);
      v38 = v48;
      if (v59(v25, 1, AssociatedTypeWitness) == 1)
        goto LABEL_2;
    }
    (*(void (**)(char *, unint64_t))(v39 + 8))(v19, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v65, v66);
    swift_bridgeObjectRelease((uint64_t)v68);
  }
}

uint64_t (*Set._variant.modify())()
{
  return EnumeratedSequence._base.modify;
}

__objc2_class **Set.init(minimumCapacity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1)
    return &_swiftEmptySetSingleton;
  type metadata accessor for _SetStorage(0, a2, a3, a4);
  return (__objc2_class **)static _SetStorage.allocate(capacity:)(a1);
}

uint64_t Set.init(_cocoa:)(unint64_t a1)
{
  return ~(a1 >> 1) & 0x4000000000000000 | a1;
}

uint64_t Set._Variant.init(cocoa:)(unint64_t a1)
{
  return ~(a1 >> 1) & 0x4000000000000000 | a1;
}

uint64_t Set.init(_immutableCocoaSet:)(unint64_t a1)
{
  return ~(a1 >> 1) & 0x4000000000000000 | a1;
}

__objc2_class **Set.init(arrayLiteral:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  __objc2_class **v6;

  if (Array._getCount()())
    v6 = specialized Set.init(_nonEmptyArrayLiteral:)(a1, a2, a3);
  else
    v6 = &_swiftEmptySetSingleton;
  swift_bridgeObjectRelease(a1);
  return v6;
}

void protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance Set<A>(uint64_t a1@<X0>, uint64_t a2@<X1>, __objc2_class ***a3@<X8>)
{
  uint64_t *v6;
  __objc2_class **v7;

  v6 = *(uint64_t **)(a2 + 16);
  if (Array._getCount()())
    v7 = specialized Set.init(_nonEmptyArrayLiteral:)(a1, v6, *(_QWORD *)(a2 + 24));
  else
    v7 = &_swiftEmptySetSingleton;
  swift_bridgeObjectRelease(a1);
  *a3 = v7;
}

int64_t Set._Variant.makeIterator()@<X0>(int64_t result@<X0>, int64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((result & 0xC000000000000001) != 0)
  {
    if (result < 0)
      v3 = result;
    else
      v3 = result & 0xFFFFFFFFFFFFFF8;
    v4 = type metadata accessor for __CocoaSet.Iterator();
    v5 = (unint64_t)swift_allocObject(v4, 0xE8uLL, 7uLL);
    v6 = 0;
    v7 = 0;
    v8 = 0;
    *(_QWORD *)(v5 + 208) = v3;
    *(_QWORD *)(v5 + 216) = 0;
    *(_OWORD *)(v5 + 16) = 0u;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    *(_OWORD *)(v5 + 80) = 0u;
    *(_OWORD *)(v5 + 96) = 0u;
    *(_OWORD *)(v5 + 112) = 0u;
    *(_OWORD *)(v5 + 128) = 0u;
    *(_OWORD *)(v5 + 144) = 0u;
    *(_OWORD *)(v5 + 160) = 0u;
    *(_OWORD *)(v5 + 176) = 0u;
    *(_OWORD *)(v5 + 192) = 0u;
    *(_QWORD *)(v5 + 224) = 0;
    result = v5 | 0x8000000000000000;
  }
  else
  {
    v9 = -1;
    v10 = -1 << *(_BYTE *)(result + 32);
    v6 = result + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v9 = ~(-1 << v11);
    v8 = v9 & *(_QWORD *)(result + 56);
  }
  *a2 = result;
  a2[1] = v6;
  a2[2] = v7;
  a2[3] = 0;
  a2[4] = v8;
  return result;
}

uint64_t Set._Variant.contains(_:)(id *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  char *v13;
  id v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(char *, id *, uint64_t *, uint64_t);
  uint64_t v21;
  void (*v22)(char *, unint64_t, uint64_t *);
  uint64_t v24;
  uint64_t v25;
  id *v26;
  uint64_t v27;

  v8 = *(a3 - 1);
  MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v11 & 0xC000000000000001) != 0)
  {
    if (a2 < 0)
      v12 = (void *)a2;
    else
      v12 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
    v13 = _bridgeAnythingToObjectiveC<A>(_:)(a1, a3);
    v14 = objc_msgSend(v12, sel_member_, v13);
    swift_unknownObjectRelease(v13);
    if (v14)
    {
      swift_unknownObjectRelease(v14);
      v15 = 1;
      return v15 & 1;
    }
LABEL_13:
    v15 = 0;
    return v15 & 1;
  }
  if (!*(_QWORD *)(a2 + 16))
    goto LABEL_13;
  v16 = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(a4 + 32))(*(_QWORD *)(a2 + 40), a3, a4);
  v17 = -1 << *(_BYTE *)(a2 + 32);
  v18 = v16 & ~v17;
  v27 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
    goto LABEL_13;
  v25 = ~v17;
  v26 = a1;
  v19 = *(_QWORD *)(a4 + 8);
  v20 = *(uint64_t (**)(char *, id *, uint64_t *, uint64_t))(v19 + 8);
  v21 = *(_QWORD *)(v8 + 72);
  v22 = *(void (**)(char *, unint64_t, uint64_t *))(v8 + 16);
  do
  {
    v22(v10, *(_QWORD *)(a2 + 48) + v21 * v18, a3);
    v15 = v20(v10, v26, a3, v19);
    (*(void (**)(char *, uint64_t *))(v8 + 8))(v10, a3);
    if ((v15 & 1) != 0)
      break;
    v18 = (v18 + 1) & v25;
  }
  while (((*(_QWORD *)(v27 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) != 0);
  return v15 & 1;
}

uint64_t Set._customContainsEquatableElement(_:)(id *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return Set.contains(_:)(a1, a2, a3, a4) & 1;
}

__n128 protocol witness for Sequence.makeIterator() in conformance Set<A>@<Q0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 result;
  __int128 v18;
  _BYTE v19[40];
  _QWORD v20[5];

  v3 = *v1;
  if ((v3 & 0xC000000000000001) != 0)
  {
    v4 = (void *)specialized _ArrayBuffer._nonNative.getter(v3);
    swift_unknownObjectRetain(v4, v5, v6, v7);
    swift_bridgeObjectRelease(v3);
    v8 = type metadata accessor for __CocoaSet.Iterator();
    v9 = swift_allocObject(v8, 0xE8uLL, 7uLL);
    *((_OWORD *)v9 + 1) = 0u;
    *((_OWORD *)v9 + 2) = 0u;
    *((_OWORD *)v9 + 3) = 0u;
    *((_OWORD *)v9 + 4) = 0u;
    *((_OWORD *)v9 + 5) = 0u;
    *((_OWORD *)v9 + 6) = 0u;
    *((_OWORD *)v9 + 7) = 0u;
    *((_OWORD *)v9 + 8) = 0u;
    *((_OWORD *)v9 + 9) = 0u;
    *((_OWORD *)v9 + 10) = 0u;
    *((_OWORD *)v9 + 11) = 0u;
    *((_OWORD *)v9 + 12) = 0u;
    v9[27] = 0;
    v9[28] = 0;
    v9[26] = v4;
    v10 = v20;
    Set.Iterator.init(_cocoa:)((uint64_t)v9, (uint64_t)v20);
  }
  else
  {
    v11 = -1 << *(_BYTE *)(v3 + 32);
    v12 = ~v11;
    v13 = *(_QWORD *)(v3 + 56);
    v14 = -v11;
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v20[0] = v3;
    v20[1] = v3 + 56;
    v20[2] = v12;
    v20[3] = 0;
    v20[4] = v15 & v13;
    v10 = v19;
    Set.Iterator.init(_native:)((uint64_t)v20, (uint64_t)v19);
  }
  v16 = *((_QWORD *)v10 + 4);
  result = *(__n128 *)v10;
  v18 = *((_OWORD *)v10 + 1);
  *(_OWORD *)a1 = *(_OWORD *)v10;
  *(_OWORD *)(a1 + 16) = v18;
  *(_QWORD *)(a1 + 32) = v16;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance Set<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Set<A>, a1, a3);
  return Collection.underestimatedCount.getter(a1, WitnessTable);
}

uint64_t protocol witness for Sequence._customContainsEquatableElement(_:) in conformance Set<A>(id *a1, uint64_t a2)
{
  uint64_t *v2;

  return Set.contains(_:)(a1, *v2, *(uint64_t **)(a2 + 16), *(_QWORD *)(a2 + 24)) & 1;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Set<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Set<A>, a1, a3);
  return Collection._copyToContiguousArray()(a1, WitnessTable);
}

void Set.filter(_:)(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3, Class *a4, uint64_t a5)
{
  Set._Variant.filter(_:)(a1, a2, a3, a4, a5);
}

void Set._Variant.filter(_:)(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3, Class *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  void **v31;
  void *v32;
  char v33;
  uint64_t v34;
  __objc2_class **v35;
  __objc2_class *v36;
  uint64_t v37;
  uint64_t (*v38)(char *);
  uint64_t v39;
  Swift::Int v40;
  Swift::Int v41;
  uint64_t *v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  _QWORD *v53;
  _QWORD *v54;
  Class *v55;
  uint64_t v56;
  uint64_t *v57;
  void *v58;
  __objc2_class **v59;

  v8 = a3;
  v11 = type metadata accessor for Optional(0, (uint64_t)a4, a3, (uint64_t)a4);
  v12 = MEMORY[0x1E0C80A78](v11);
  v13 = MEMORY[0x1E0C80A78](v12);
  v14 = (uint64_t)*(a4 - 1);
  v15 = MEMORY[0x1E0C80A78](v13);
  v56 = (uint64_t)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  v22 = (char *)&v47 - v21;
  if ((v8 & 0xC000000000000001) == 0)
  {
    _NativeSet.filter(_:)((uint64_t)a1, a2, v8, (uint64_t)a4, a5);
    return;
  }
  v48 = v20;
  v49 = v19;
  v50 = v17;
  v51 = v18;
  v59 = &_swiftEmptySetSingleton;
  if (v8 >= 0)
    v8 &= 0xFFFFFFFFFFFFFF8uLL;
  v23 = type metadata accessor for __CocoaSet.Iterator();
  v27 = swift_allocObject(v23, 0xE8uLL, 7uLL);
  v28 = 0;
  *((_OWORD *)v27 + 1) = 0u;
  v54 = v27 + 2;
  *((_OWORD *)v27 + 5) = 0u;
  v53 = v27 + 10;
  v27[27] = 0;
  v57 = v27 + 27;
  *((_OWORD *)v27 + 2) = 0u;
  *((_OWORD *)v27 + 3) = 0u;
  *((_OWORD *)v27 + 4) = 0u;
  *((_OWORD *)v27 + 6) = 0u;
  *((_OWORD *)v27 + 7) = 0u;
  *((_OWORD *)v27 + 8) = 0u;
  *((_OWORD *)v27 + 9) = 0u;
  *((_OWORD *)v27 + 10) = 0u;
  *((_OWORD *)v27 + 11) = 0u;
  *((_OWORD *)v27 + 12) = 0u;
  v27[26] = v8;
  v55 = qword_1E0EB1350;
  v27[28] = 0;
  v52 = v22;
  while (v28 != v27[28])
  {
LABEL_10:
    v30 = v27[3];
    if (!v30)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/SetBridging.swift", 23, 2, 0x254uLL, 0);
    if ((unint64_t)(v28 - 0x1000000000000000) >> 61 != 7)
    {
      __break(1u);
LABEL_27:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x4F9uLL, 0);
    }
    v31 = (void **)(v30 + 8 * v28);
    if ((v31 & 7) != 0)
      goto LABEL_27;
    v32 = *v31;
    *v57 = v28 + 1;
    swift_unknownObjectRetain(v32, v24, v25, v26);
    if (_swift_isClassOrObjCExistentialType((uint64_t)a4, (uint64_t *)a4))
    {
      v58 = v32;
      swift_dynamicCast(v22, (uint64_t *)&v58, v55, a4, 7uLL);
    }
    else
    {
      v42 = v48;
      (*(void (**)(uint64_t *, uint64_t, uint64_t, Class *))(v14 + 56))(v48, 1, 1, a4);
      _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)((swift *)v32, (uint64_t)a4, v42);
      swift_unknownObjectRelease(v32);
      v43 = v50;
      v44 = *(void (**)(uint64_t, uint64_t *, uint64_t))(v51 + 16);
      v47 = v14;
      v45 = v49;
      v44(v49, v42, v50);
      if ((*(unsigned int (**)(uint64_t, uint64_t, Class *))(v47 + 48))(v45, 1, a4) == 1)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/BridgeObjectiveC.swift", 28, 2, 0xFCuLL, 0);
      (*(void (**)(uint64_t *, uint64_t))(v51 + 8))(v42, v43);
      v46 = v47;
      v22 = v52;
      (*(void (**)(char *, uint64_t, Class *))(v47 + 32))(v52, v45, a4);
      v14 = v46;
    }
    v33 = a1(v22);
    if (v5)
    {
      swift_release((uint64_t)v27);
      (*(void (**)(char *, Class *))(v14 + 8))(v22, a4);
      swift_release((uint64_t)v59);
      return;
    }
    if ((v33 & 1) != 0)
    {
      (*(void (**)(uint64_t, char *, Class *))(v14 + 32))(v56, v22, a4);
      v35 = v59;
      v36 = v59[2];
      if (v59[3] <= v36)
      {
        v37 = v14;
        v38 = a1;
        v39 = a2;
        v40 = (Swift::Int)&v36->isa + 1;
        type metadata accessor for _NativeSet(0, (uint64_t)a4, a5, v34);
        v41 = v40;
        a2 = v39;
        a1 = v38;
        v14 = v37;
        v22 = v52;
        _NativeSet.resize(capacity:)(v41);
        v35 = v59;
      }
      _NativeSet._unsafeInsertNew(_:)(v56, (uint64_t)v35, (uint64_t)a4, a5);
    }
    else
    {
      (*(void (**)(char *, Class *))(v14 + 8))(v22, a4);
    }
    v28 = *v57;
    if (*v57 < 0)
      goto LABEL_25;
  }
  v29 = objc_msgSend((id)v27[26], sel_countByEnumeratingWithState_objects_count_, v54, v53, 16);
  v27[28] = v29;
  if (v29)
  {
    v28 = 0;
    *v57 = 0;
    goto LABEL_10;
  }
  *v57 = -1;
LABEL_25:
  swift_release((uint64_t)v27);
}

unint64_t Set.startIndex.getter(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  void *v5;
  unint64_t v6;
  unint64_t result;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  if ((a1 & 0xC000000000000001) == 0)
    return _NativeSet.startIndex.getter(a1);
  if (a1 < 0)
    v5 = (void *)a1;
  else
    v5 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
  v6 = (unint64_t)objc_msgSend(swift_unknownObjectRetain(v5, a2, a3, a4), sel_count);
  result = type metadata accessor for __BridgingBufferStorage(0);
  if ((v6 - 0x1000000000000000) >> 61 == 7)
  {
    if (!__OFADD__(8 * v6, 24))
    {
      v8 = swift_bufferAllocate(result, 8 * v6 + 24, 7uLL);
      v8[2] = v6;
      objc_msgSend(v5, sel_getObjects_, v8 + 3);
      swift_bridgeObjectRelease(a1);
      v9 = type metadata accessor for __CocoaSet.Index.Storage();
      v10 = swift_allocObject(v9, 0x20uLL, 7uLL);
      v10[2] = v5;
      v10[3] = v8;
      swift_bridgeObjectRetain(a1, v11, v12, v13);
      return (unint64_t)v10;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t Set._Variant.startIndex.getter(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  void *v5;
  unint64_t v6;
  unint64_t result;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  if ((a1 & 0xC000000000000001) == 0)
    return _NativeSet.startIndex.getter(a1);
  if (a1 < 0)
    v5 = (void *)a1;
  else
    v5 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
  v6 = (unint64_t)objc_msgSend(swift_unknownObjectRetain(v5, a2, a3, a4), sel_count);
  result = type metadata accessor for __BridgingBufferStorage(0);
  if ((v6 - 0x1000000000000000) >> 61 == 7)
  {
    if (!__OFADD__(8 * v6, 24))
    {
      v8 = swift_bufferAllocate(result, 8 * v6 + 24, 7uLL);
      v8[2] = v6;
      objc_msgSend(v5, sel_getObjects_, v8 + 3);
      swift_bridgeObjectRelease(a1);
      v9 = type metadata accessor for __CocoaSet.Index.Storage();
      v10 = swift_allocObject(v9, 0x20uLL, 7uLL);
      v10[2] = v5;
      v10[3] = v8;
      swift_bridgeObjectRetain(a1, v11, v12, v13);
      return (unint64_t)v10;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t Set.endIndex.getter(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  void *v5;
  unint64_t v6;
  unint64_t result;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  if ((a1 & 0xC000000000000001) == 0)
    return 1 << *(_BYTE *)(a1 + 32);
  if (a1 < 0)
    v5 = (void *)a1;
  else
    v5 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
  v6 = (unint64_t)objc_msgSend(swift_unknownObjectRetain(v5, a2, a3, a4), sel_count);
  result = type metadata accessor for __BridgingBufferStorage(0);
  if ((v6 - 0x1000000000000000) >> 61 == 7)
  {
    if (!__OFADD__(8 * v6, 24))
    {
      v8 = swift_bufferAllocate(result, 8 * v6 + 24, 7uLL);
      v8[2] = v6;
      objc_msgSend(v5, sel_getObjects_, v8 + 3);
      swift_bridgeObjectRelease(a1);
      v9 = type metadata accessor for __CocoaSet.Index.Storage();
      v10 = swift_allocObject(v9, 0x20uLL, 7uLL);
      v10[2] = v5;
      v10[3] = v8;
      swift_bridgeObjectRetain(a1, v11, v12, v13);
      return (unint64_t)v10;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t Set._Variant.endIndex.getter(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  void *v5;
  unint64_t v6;
  unint64_t result;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  if ((a1 & 0xC000000000000001) == 0)
    return 1 << *(_BYTE *)(a1 + 32);
  if (a1 < 0)
    v5 = (void *)a1;
  else
    v5 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
  v6 = (unint64_t)objc_msgSend(swift_unknownObjectRetain(v5, a2, a3, a4), sel_count);
  result = type metadata accessor for __BridgingBufferStorage(0);
  if ((v6 - 0x1000000000000000) >> 61 == 7)
  {
    if (!__OFADD__(8 * v6, 24))
    {
      v8 = swift_bufferAllocate(result, 8 * v6 + 24, 7uLL);
      v8[2] = v6;
      objc_msgSend(v5, sel_getObjects_, v8 + 3);
      swift_bridgeObjectRelease(a1);
      v9 = type metadata accessor for __CocoaSet.Index.Storage();
      v10 = swift_allocObject(v9, 0x20uLL, 7uLL);
      v10[2] = v5;
      v10[3] = v8;
      swift_bridgeObjectRetain(a1, v11, v12, v13);
      return (unint64_t)v10;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void Set.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, Class *a4@<X4>, uint64_t a5@<X5>, char *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(char *, char *, Class *, uint64_t);
  uint64_t v45;
  void (*v46)(char *, unint64_t, Class *);
  char v47;
  void (*v48)(char *, Class *);
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;

  v12 = (uint64_t)*(a4 - 1);
  v13 = MEMORY[0x1E0C80A78](a1);
  v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  if ((v18 & 0xC000000000000001) != 0)
  {
    if ((v16 & 1) == 0)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Set elements using an invalid index", 56, 2, "Swift/Set.swift", 15, 2, 0x567uLL, 0);
    if (a1 >= 0)
      v19 = a1 & 0xFFFFFFFFFFFFFF8;
    else
      v19 = a1;
    v20 = type metadata accessor for __CocoaSet.Index.Storage();
    if (swift_dynamicCastClass(v19, v20))
    {
      v24 = *(_QWORD *)(v19 + 24);
      if (*(_QWORD *)(v24 + 16) > a2)
      {
        v25 = *(void **)(v24 + 8 * a2 + 24);
        v26 = swift_unknownObjectRetain(v25, v21, v22, v23);
        _forceBridgeFromObjectiveC<A>(_:_:)(v26, a4, v27, a6);
        swift_unknownObjectRelease(v25);
        return;
      }
LABEL_30:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Set elements using an invalid index", 56, 2, "Swift/SetBridging.swift", 23, 2, 0x1E1uLL, 0);
    }
LABEL_33:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  }
  if ((v16 & 1) == 0)
  {
    if ((a1 & 0x8000000000000000) == 0
      && 1 << *(_BYTE *)(a3 + 32) > a1
      && ((*(_QWORD *)(a3 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) != 0
      && *(_DWORD *)(a3 + 36) == (_DWORD)a2)
    {
      (*(void (**)(char *, uint64_t, Class *))(v12 + 16))(a6, *(_QWORD *)(a3 + 48) + *(_QWORD *)(v12 + 72) * a1, a4);
      return;
    }
    v49 = 266;
LABEL_32:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Set elements using an invalid index", 56, 2, "Swift/NativeSet.swift", 21, 2, v49, 0);
  }
  v55 = (char *)&v50 - v17;
  if (a1 >= 0)
    v28 = a1 & 0xFFFFFFFFFFFFFF8;
  else
    v28 = a1;
  v29 = type metadata accessor for __CocoaSet.Index.Storage();
  swift_bridgeObjectRetain(a1, v30, v31, v32);
  if (!swift_dynamicCastClass(v28, v29))
    goto LABEL_33;
  if (*(_DWORD *)(a3 + 36) != specialized static Hasher._hash(seed:_:)(0, *(_QWORD *)(v28 + 16)))
    goto LABEL_27;
  if (!swift_dynamicCastClass(v28, v29))
    goto LABEL_33;
  v36 = *(_QWORD *)(v28 + 24);
  if (*(_QWORD *)(v36 + 16) <= a2)
    goto LABEL_30;
  v54 = v12;
  v51 = a6;
  v37 = *(void **)(v36 + 8 * a2 + 24);
  swift_unknownObjectRetain(v37, v33, v34, v35);
  outlined consume of [A : B].Index._Variant<A, B>(a1, a2, 1);
  _forceBridgeFromObjectiveC<A>(_:_:)(v37, a4, v38, v55);
  swift_unknownObjectRelease(v37);
  v39 = (*(uint64_t (**)(_QWORD, Class *, uint64_t))(a5 + 32))(*(_QWORD *)(a3 + 40), a4, a5);
  v40 = -1 << *(_BYTE *)(a3 + 32);
  v41 = v39 & ~v40;
  v52 = a3 + 56;
  v53 = a3;
  if (((*(_QWORD *)(a3 + 56 + ((v41 >> 3) & 0xFFFFFFFFFFFFF8)) >> v41) & 1) == 0)
  {
    (*(void (**)(char *, Class *))(v54 + 8))(v55, a4);
LABEL_27:
    v49 = 287;
    goto LABEL_32;
  }
  v42 = ~v40;
  v43 = *(_QWORD *)(a5 + 8);
  v44 = *(uint64_t (**)(char *, char *, Class *, uint64_t))(v43 + 8);
  v45 = *(_QWORD *)(v54 + 72);
  v46 = *(void (**)(char *, unint64_t, Class *))(v54 + 16);
  while (1)
  {
    v46(v15, *(_QWORD *)(v53 + 48) + v45 * v41, a4);
    v47 = v44(v15, v55, a4, v43);
    v48 = *(void (**)(char *, Class *))(v54 + 8);
    v48(v15, a4);
    if ((v47 & 1) != 0)
      break;
    v41 = (v41 + 1) & v42;
    if (((*(_QWORD *)(v52 + ((v41 >> 3) & 0xFFFFFFFFFFFFF8)) >> v41) & 1) == 0)
    {
      v48(v55, a4);
      goto LABEL_27;
    }
  }
  v48(v55, a4);
  v46(v51, *(_QWORD *)(v53 + 48) + v45 * v41, a4);
}

void Set._Variant.element(at:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, Class *a4@<X4>, uint64_t a5@<X5>, char *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(char *, char *, Class *, uint64_t);
  uint64_t v45;
  void (*v46)(char *, unint64_t, Class *);
  char v47;
  void (*v48)(char *, Class *);
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;

  v12 = (uint64_t)*(a4 - 1);
  v13 = MEMORY[0x1E0C80A78](a1);
  v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  if ((v18 & 0xC000000000000001) != 0)
  {
    if ((v16 & 1) == 0)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Set elements using an invalid index", 56, 2, "Swift/Set.swift", 15, 2, 0x567uLL, 0);
    if (a1 >= 0)
      v19 = a1 & 0xFFFFFFFFFFFFFF8;
    else
      v19 = a1;
    v20 = type metadata accessor for __CocoaSet.Index.Storage();
    if (swift_dynamicCastClass(v19, v20))
    {
      v24 = *(_QWORD *)(v19 + 24);
      if (*(_QWORD *)(v24 + 16) > a2)
      {
        v25 = *(void **)(v24 + 8 * a2 + 24);
        v26 = swift_unknownObjectRetain(v25, v21, v22, v23);
        _forceBridgeFromObjectiveC<A>(_:_:)(v26, a4, v27, a6);
        swift_unknownObjectRelease(v25);
        return;
      }
LABEL_30:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Set elements using an invalid index", 56, 2, "Swift/SetBridging.swift", 23, 2, 0x1E1uLL, 0);
    }
LABEL_33:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  }
  if ((v16 & 1) == 0)
  {
    if ((a1 & 0x8000000000000000) == 0
      && 1 << *(_BYTE *)(a3 + 32) > a1
      && ((*(_QWORD *)(a3 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) != 0
      && *(_DWORD *)(a3 + 36) == (_DWORD)a2)
    {
      (*(void (**)(char *, uint64_t, Class *))(v12 + 16))(a6, *(_QWORD *)(a3 + 48) + *(_QWORD *)(v12 + 72) * a1, a4);
      return;
    }
    v49 = 266;
LABEL_32:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Set elements using an invalid index", 56, 2, "Swift/NativeSet.swift", 21, 2, v49, 0);
  }
  v55 = (char *)&v50 - v17;
  if (a1 >= 0)
    v28 = a1 & 0xFFFFFFFFFFFFFF8;
  else
    v28 = a1;
  v29 = type metadata accessor for __CocoaSet.Index.Storage();
  swift_bridgeObjectRetain(a1, v30, v31, v32);
  if (!swift_dynamicCastClass(v28, v29))
    goto LABEL_33;
  if (*(_DWORD *)(a3 + 36) != specialized static Hasher._hash(seed:_:)(0, *(_QWORD *)(v28 + 16)))
    goto LABEL_27;
  if (!swift_dynamicCastClass(v28, v29))
    goto LABEL_33;
  v36 = *(_QWORD *)(v28 + 24);
  if (*(_QWORD *)(v36 + 16) <= a2)
    goto LABEL_30;
  v54 = v12;
  v51 = a6;
  v37 = *(void **)(v36 + 8 * a2 + 24);
  swift_unknownObjectRetain(v37, v33, v34, v35);
  outlined consume of [A : B].Index._Variant<A, B>(a1, a2, 1);
  _forceBridgeFromObjectiveC<A>(_:_:)(v37, a4, v38, v55);
  swift_unknownObjectRelease(v37);
  v39 = (*(uint64_t (**)(_QWORD, Class *, uint64_t))(a5 + 32))(*(_QWORD *)(a3 + 40), a4, a5);
  v40 = -1 << *(_BYTE *)(a3 + 32);
  v41 = v39 & ~v40;
  v52 = a3 + 56;
  v53 = a3;
  if (((*(_QWORD *)(a3 + 56 + ((v41 >> 3) & 0xFFFFFFFFFFFFF8)) >> v41) & 1) == 0)
  {
    (*(void (**)(char *, Class *))(v54 + 8))(v55, a4);
LABEL_27:
    v49 = 287;
    goto LABEL_32;
  }
  v42 = ~v40;
  v43 = *(_QWORD *)(a5 + 8);
  v44 = *(uint64_t (**)(char *, char *, Class *, uint64_t))(v43 + 8);
  v45 = *(_QWORD *)(v54 + 72);
  v46 = *(void (**)(char *, unint64_t, Class *))(v54 + 16);
  while (1)
  {
    v46(v15, *(_QWORD *)(v53 + 48) + v45 * v41, a4);
    v47 = v44(v15, v55, a4, v43);
    v48 = *(void (**)(char *, Class *))(v54 + 8);
    v48(v15, a4);
    if ((v47 & 1) != 0)
      break;
    v41 = (v41 + 1) & v42;
    if (((*(_QWORD *)(v52 + ((v41 >> 3) & 0xFFFFFFFFFFFFF8)) >> v41) & 1) == 0)
    {
      v48(v55, a4);
      goto LABEL_27;
    }
  }
  v48(v55, a4);
  v46(v51, *(_QWORD *)(v53 + 48) + v45 * v41, a4);
}

int64_t Set.index(after:)(int64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  int64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = a1;
  v6 = a3 & 1;
  if ((a4 & 0xC000000000000001) == 0)
    return _NativeSet.index(after:)(a1, a2, v6, a4);
  if (a4 < 0)
    v7 = a4;
  else
    v7 = a4 & 0xFFFFFFFFFFFFFF8;
  if (!v6)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Set elements using an invalid index", 56, 2, "Swift/Set.swift", 15, 2, 0x567uLL, 0);
  if (a1 >= 0)
    v8 = a1 & 0xFFFFFFFFFFFFFF8;
  else
    v8 = a1;
  outlined copy of [A : B].Index._Variant<A, B>(a1, a2, 1, (char *)a4);
  v9 = type metadata accessor for __CocoaSet.Index.Storage();
  if (!swift_dynamicCastClass(v8, v9))
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  if (*(_QWORD *)(v8 + 16) != v7)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Invalid index", 13, 2, "Swift/SetBridging.swift", 23, 2, 0x169uLL, 0);
  if (*(_QWORD *)(*(_QWORD *)(v8 + 24) + 16) <= a2)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempt to access endIndex", 26, 2, "Swift/SetBridging.swift", 23, 2, 0x16BuLL, 0);
  return v5;
}

int64_t Set._Variant.index(after:)(int64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  int64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = a1;
  v6 = a3 & 1;
  if ((a4 & 0xC000000000000001) == 0)
    return _NativeSet.index(after:)(a1, a2, v6, a4);
  if (a4 < 0)
    v7 = a4;
  else
    v7 = a4 & 0xFFFFFFFFFFFFFF8;
  if (!v6)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Set elements using an invalid index", 56, 2, "Swift/Set.swift", 15, 2, 0x567uLL, 0);
  if (a1 >= 0)
    v8 = a1 & 0xFFFFFFFFFFFFFF8;
  else
    v8 = a1;
  outlined copy of [A : B].Index._Variant<A, B>(a1, a2, 1, (char *)a4);
  v9 = type metadata accessor for __CocoaSet.Index.Storage();
  if (!swift_dynamicCastClass(v8, v9))
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  if (*(_QWORD *)(v8 + 16) != v7)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Invalid index", 13, 2, "Swift/SetBridging.swift", 23, 2, 0x169uLL, 0);
  if (*(_QWORD *)(*(_QWORD *)(v8 + 24) + 16) <= a2)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempt to access endIndex", 26, 2, "Swift/SetBridging.swift", 23, 2, 0x16BuLL, 0);
  return v5;
}

void Set._Variant.formIndex(after:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  v7 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) == 0)
  {
    v17 = _NativeSet.index(after:)(*(_QWORD *)a1, v5, v6, a2);
    v16 = v18;
    outlined consume of [A : B].Index._Variant<A, B>(v4, v5, v6);
    *(_QWORD *)a1 = v17;
    goto LABEL_20;
  }
  if ((*(_BYTE *)(a1 + 16) & 1) == 0)
  {
    v19 = 1383;
    goto LABEL_26;
  }
  if (v4 >= 0)
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
  else
    v8 = *(_QWORD *)a1;
  v9 = type metadata accessor for __CocoaSet.Index.Storage();
  swift_bridgeObjectRetain(v4, v10, v11, v12);
  if (!swift_dynamicCastClass(v8, v9))
LABEL_23:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  outlined consume of [A : B].Index._Variant<A, B>(v4, v5, 1);
  if (v8)
    swift_isUniquelyReferenced_nonNull_native(v8);
  if (*(_BYTE *)(a1 + 16) != 1)
  {
    v19 = 1391;
LABEL_26:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Set elements using an invalid index", 56, 2, "Swift/Set.swift", 15, 2, v19, 0);
  }
  v13 = *(_QWORD *)(a1 + 8);
  if (*(uint64_t *)a1 >= 0)
    v14 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFF8;
  else
    v14 = *(_QWORD *)a1;
  if (!swift_dynamicCastClass(v14, v9))
    goto LABEL_23;
  v15 = a2 & 0xFFFFFFFFFFFFFF8;
  if (a2 < 0)
    v15 = a2;
  if (*(_QWORD *)(v14 + 16) != v15)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Invalid index", 13, 2, "Swift/SetBridging.swift", 23, 2, 0x169uLL, 0);
  if (v13 >= *(_QWORD *)(*(_QWORD *)(v14 + 24) + 16))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempt to access endIndex", 26, 2, "Swift/SetBridging.swift", 23, 2, 0x16BuLL, 0);
  v16 = v13 + 1;
LABEL_20:
  *(_QWORD *)(a1 + 8) = v16;
  *(_BYTE *)(a1 + 16) = v7 != 0;
}

unint64_t Set.firstIndex(of:)(id *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  char isEqual;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(char *, id *, uint64_t *, uint64_t);
  uint64_t v40;
  void (*v41)(char *, unint64_t, uint64_t *);
  char v42;
  uint64_t v44;
  uint64_t v45;
  id *v46;
  uint64_t v47;

  v8 = *(a3 - 1);
  MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v11 & 0xC000000000000001) != 0)
  {
    v12 = _bridgeAnythingToObjectiveC<A>(_:)(a1, a3);
    if (a2 < 0)
      v13 = (void *)a2;
    else
      v13 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
    v14 = objc_msgSend(v13, sel_member_, v12);
    if (v14)
    {
      swift_unknownObjectRelease(v14);
      v18 = (unint64_t)objc_msgSend(swift_unknownObjectRetain(v13, v15, v16, v17), sel_count);
      v19 = type metadata accessor for __BridgingBufferStorage(0);
      if ((v18 - 0x1000000000000000) >> 61 == 7)
      {
        if (!__OFADD__(8 * v18, 24))
        {
          v20 = swift_bufferAllocate(v19, 8 * v18 + 24, 7uLL);
          v20[2] = v18;
          objc_msgSend(v13, sel_getObjects_, v20 + 3);
          swift_bridgeObjectRelease(a2);
          if ((v20[2] & 0x8000000000000000) == 0)
          {
            swift_unknownObjectRetain(v20, v21, v22, v23);
            v27 = 0;
            do
            {
              v28 = v27 + 1;
              v29 = (void *)v20[v27 + 3];
              swift_unknownObjectRetain(v29, v24, v25, v26);
              isEqual = swift_stdlib_NSObject_isEqual(v12, v29);
              swift_unknownObjectRelease(v29);
              v27 = v28;
            }
            while ((isEqual & 1) == 0);
            swift_unknownObjectRelease(v20);
            v31 = type metadata accessor for __CocoaSet.Index.Storage();
            v32 = (unint64_t)swift_allocObject(v31, 0x20uLL, 7uLL);
            *(_QWORD *)(v32 + 16) = v13;
            *(_QWORD *)(v32 + 24) = v20;
            swift_unknownObjectRetain(v13, v33, v34, v35);
            swift_unknownObjectRelease(v12);
            return v32;
          }
LABEL_24:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      goto LABEL_24;
    }
    swift_unknownObjectRelease(v12);
    return 0;
  }
  if (!*(_QWORD *)(a2 + 16))
    return 0;
  v36 = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(a4 + 32))(*(_QWORD *)(a2 + 40), a3, a4);
  v37 = -1 << *(_BYTE *)(a2 + 32);
  v32 = v36 & ~v37;
  v47 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v32 >> 3) & 0xFFFFFFFFFFFFF8)) >> v32) & 1) == 0)
    return 0;
  v45 = ~v37;
  v46 = a1;
  v38 = *(_QWORD *)(a4 + 8);
  v39 = *(uint64_t (**)(char *, id *, uint64_t *, uint64_t))(v38 + 8);
  v40 = *(_QWORD *)(v8 + 72);
  v41 = *(void (**)(char *, unint64_t, uint64_t *))(v8 + 16);
  while (1)
  {
    v41(v10, *(_QWORD *)(a2 + 48) + v40 * v32, a3);
    v42 = v39(v10, v46, a3, v38);
    (*(void (**)(char *, uint64_t *))(v8 + 8))(v10, a3);
    if ((v42 & 1) != 0)
      break;
    v32 = (v32 + 1) & v45;
    if (((*(_QWORD *)(v47 + ((v32 >> 3) & 0xFFFFFFFFFFFFF8)) >> v32) & 1) == 0)
      return 0;
  }
  return v32;
}

unint64_t Set._Variant.index(for:)(id *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  char isEqual;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(char *, id *, uint64_t *, uint64_t);
  uint64_t v40;
  void (*v41)(char *, unint64_t, uint64_t *);
  char v42;
  uint64_t v44;
  uint64_t v45;
  id *v46;
  uint64_t v47;

  v8 = *(a3 - 1);
  MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v11 & 0xC000000000000001) != 0)
  {
    v12 = _bridgeAnythingToObjectiveC<A>(_:)(a1, a3);
    if (a2 < 0)
      v13 = (void *)a2;
    else
      v13 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
    v14 = objc_msgSend(v13, sel_member_, v12);
    if (v14)
    {
      swift_unknownObjectRelease(v14);
      v18 = (unint64_t)objc_msgSend(swift_unknownObjectRetain(v13, v15, v16, v17), sel_count);
      v19 = type metadata accessor for __BridgingBufferStorage(0);
      if ((v18 - 0x1000000000000000) >> 61 == 7)
      {
        if (!__OFADD__(8 * v18, 24))
        {
          v20 = swift_bufferAllocate(v19, 8 * v18 + 24, 7uLL);
          v20[2] = v18;
          objc_msgSend(v13, sel_getObjects_, v20 + 3);
          swift_bridgeObjectRelease(a2);
          if ((v20[2] & 0x8000000000000000) == 0)
          {
            swift_unknownObjectRetain(v20, v21, v22, v23);
            v27 = 0;
            do
            {
              v28 = v27 + 1;
              v29 = (void *)v20[v27 + 3];
              swift_unknownObjectRetain(v29, v24, v25, v26);
              isEqual = swift_stdlib_NSObject_isEqual(v12, v29);
              swift_unknownObjectRelease(v29);
              v27 = v28;
            }
            while ((isEqual & 1) == 0);
            swift_unknownObjectRelease(v20);
            v31 = type metadata accessor for __CocoaSet.Index.Storage();
            v32 = (unint64_t)swift_allocObject(v31, 0x20uLL, 7uLL);
            *(_QWORD *)(v32 + 16) = v13;
            *(_QWORD *)(v32 + 24) = v20;
            swift_unknownObjectRetain(v13, v33, v34, v35);
            swift_unknownObjectRelease(v12);
            return v32;
          }
LABEL_24:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      goto LABEL_24;
    }
    swift_unknownObjectRelease(v12);
    return 0;
  }
  if (!*(_QWORD *)(a2 + 16))
    return 0;
  v36 = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(a4 + 32))(*(_QWORD *)(a2 + 40), a3, a4);
  v37 = -1 << *(_BYTE *)(a2 + 32);
  v32 = v36 & ~v37;
  v47 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v32 >> 3) & 0xFFFFFFFFFFFFF8)) >> v32) & 1) == 0)
    return 0;
  v45 = ~v37;
  v46 = a1;
  v38 = *(_QWORD *)(a4 + 8);
  v39 = *(uint64_t (**)(char *, id *, uint64_t *, uint64_t))(v38 + 8);
  v40 = *(_QWORD *)(v8 + 72);
  v41 = *(void (**)(char *, unint64_t, uint64_t *))(v8 + 16);
  while (1)
  {
    v41(v10, *(_QWORD *)(a2 + 48) + v40 * v32, a3);
    v42 = v39(v10, v46, a3, v38);
    (*(void (**)(char *, uint64_t *))(v8 + 8))(v10, a3);
    if ((v42 & 1) != 0)
      break;
    v32 = (v32 + 1) & v45;
    if (((*(_QWORD *)(v47 + ((v32 >> 3) & 0xFFFFFFFFFFFFF8)) >> v32) & 1) == 0)
      return 0;
  }
  return v32;
}

id Set.count.getter(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) == 0)
    return *(id *)(a1 + 16);
  if (a1 >= 0)
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  return objc_msgSend((id)a1, sel_count);
}

id Set._Variant.count.getter(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) == 0)
    return *(id *)(a1 + 16);
  if (a1 >= 0)
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  return objc_msgSend((id)a1, sel_count);
}

BOOL Set.isEmpty.getter(uint64_t a1)
{
  id v1;

  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 >= 0)
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    v1 = objc_msgSend((id)a1, sel_count);
  }
  else
  {
    v1 = *(id *)(a1 + 16);
  }
  return v1 == 0;
}

uint64_t protocol witness for Collection.startIndex.getter in conformance Set<A>@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Collection.startIndex.getter in conformance [A : B]((uint64_t (*)(_QWORD))Set.startIndex.getter, a1);
}

uint64_t protocol witness for Collection.endIndex.getter in conformance Set<A>@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Collection.startIndex.getter in conformance [A : B]((uint64_t (*)(_QWORD))Set.endIndex.getter, a1);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance Set<A>(Class ***a1, uint64_t a2, uint64_t a3))()
{
  uint64_t *v3;
  Class **v7;

  v7 = (Class **)malloc(0x28uLL);
  *a1 = v7;
  v7[4] = (Class *)Set.subscript.read(v7, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(unsigned __int8 *)(a2 + 16), *v3, *(Class **)(a3 + 16), *(_QWORD *)(a3 + 24));
  return protocol witness for Collection.subscript.read in conformance _ArrayBuffer<A>;
}

uint64_t (*Set.subscript.read(Class **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, Class *a6, uint64_t a7))()
{
  uint64_t v13;
  char *v14;

  v13 = (uint64_t)*(a6 - 1);
  *a1 = a6;
  a1[1] = (Class *)v13;
  v14 = (char *)malloc(*(_QWORD *)(v13 + 64));
  a1[2] = (Class *)v14;
  Set.subscript.getter(a2, a3, a5, a6, a7, v14);
  return _ArrayBuffer.subscript.read;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance Set<A>()
{
  uint64_t *v0;

  return Set.isEmpty.getter(*v0);
}

id protocol witness for Collection.count.getter in conformance Set<A>()
{
  uint64_t *v0;

  return Set.count.getter(*v0);
}

unint64_t protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance Set<A>@<X0>(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  unint64_t result;
  uint64_t v6;
  char v7;

  result = Set.firstIndex(of:)(a1, *v3, *(uint64_t **)(a2 + 16), *(_QWORD *)(a2 + 24));
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = v7;
  return result;
}

int64_t protocol witness for Collection.index(after:) in conformance Set<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  int64_t result;
  uint64_t v5;
  char v6;

  result = Set.index(after:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *v2);
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v5;
  *(_BYTE *)(a2 + 16) = v6 & 1;
  return result;
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance Set<A>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  return Set.formIndex(after:)(a1, *v2, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t specialized static Set.== infix(_:_:)(uint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36[5];
  uint64_t v37[3];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40[3];
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;

  if (result == a2)
    return 1;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 0;
  v4 = result + 56;
  v5 = 1 << *(_BYTE *)(result + 32);
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(result + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  v9 = a2 + 56;
  v32 = result + 56;
  v33 = result;
  v31 = v8;
  if (v7)
    goto LABEL_7;
LABEL_8:
  v11 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v11 >= v8)
    return 1;
  v12 = *(_QWORD *)(v4 + 8 * v11);
  v13 = v3 + 1;
  if (!v12)
  {
    v13 = v11 + 1;
    if (v11 + 1 >= v8)
      return 1;
    v12 = *(_QWORD *)(v4 + 8 * v13);
    if (!v12)
    {
      v14 = v11 + 2;
      if (v14 < v8)
      {
        v12 = *(_QWORD *)(v4 + 8 * v14);
        if (v12)
        {
          v13 = v14;
          goto LABEL_19;
        }
        while (1)
        {
          v13 = v14 + 1;
          if (__OFADD__(v14, 1))
            break;
          if (v13 >= v8)
            return 1;
          v12 = *(_QWORD *)(v4 + 8 * v13);
          ++v14;
          if (v12)
            goto LABEL_19;
        }
LABEL_32:
        __break(1u);
        return result;
      }
      return 1;
    }
  }
LABEL_19:
  v34 = (v12 - 1) & v12;
  v35 = v13;
  for (i = __clz(__rbit64(v12)) + (v13 << 6); ; i = __clz(__rbit64(v7)) | (v3 << 6))
  {
    outlined init with copy of AnyHashable(*(_QWORD *)(result + 48) + 40 * i, (uint64_t)&v46);
    v43 = v46;
    v44 = v47;
    v15 = v48;
    v45 = v48;
    v16 = *(_QWORD *)(a2 + 40);
    v17 = *((_QWORD *)&v47 + 1);
    __swift_project_boxed_opaque_existential_0Tm(&v43, *((uint64_t *)&v47 + 1));
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v15 + 8))(v40, v17, v15);
    v18 = v41;
    v19 = v42;
    __swift_project_boxed_opaque_existential_0Tm(v40, v41);
    v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 40))(v16, v18, v19);
    __swift_destroy_boxed_opaque_existential_1Tm(v40);
    v21 = -1 << *(_BYTE *)(a2 + 32);
    v22 = v20 & ~v21;
    if (((*(_QWORD *)(v9 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) == 0)
      break;
    v23 = ~v21;
    while (1)
    {
      outlined init with copy of AnyHashable(*(_QWORD *)(a2 + 48) + 40 * v22, (uint64_t)v40);
      v24 = v41;
      v25 = v42;
      __swift_project_boxed_opaque_existential_0Tm(v40, v41);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v25 + 8))(v37, v24, v25);
      v26 = v38;
      v27 = v39;
      __swift_project_boxed_opaque_existential_0Tm(v37, v38);
      v28 = *((_QWORD *)&v44 + 1);
      v29 = v45;
      __swift_project_boxed_opaque_existential_0Tm(&v43, *((uint64_t *)&v44 + 1));
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v29 + 8))(v36, v28, v29);
      v30 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v27 + 16))(v36, v26, v27);
      __swift_destroy_boxed_opaque_existential_1Tm(v36);
      if (v30 != 2)
        break;
      __swift_destroy_boxed_opaque_existential_1Tm(v37);
      outlined destroy of AnyHashable(v40);
LABEL_23:
      v22 = (v22 + 1) & v23;
      if (((*(_QWORD *)(v9 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) == 0)
        goto LABEL_29;
    }
    __swift_destroy_boxed_opaque_existential_1Tm(v37);
    outlined destroy of AnyHashable(v40);
    if ((v30 & 1) == 0)
      goto LABEL_23;
    outlined destroy of AnyHashable((uint64_t *)&v43);
    v4 = v32;
    result = v33;
    v8 = v31;
    v7 = v34;
    v3 = v35;
    if (!v34)
      goto LABEL_8;
LABEL_7:
    v34 = (v7 - 1) & v7;
    v35 = v3;
  }
LABEL_29:
  outlined destroy of AnyHashable((uint64_t *)&v43);
  return 0;
}

void static Set.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t i;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  int64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(char *, char *, uint64_t *, uint64_t);
  char v42;
  void (*v43)(char *, uint64_t *);
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  int64_t v51;
  void (*v52)(char *, unint64_t, uint64_t *);
  uint64_t v53;
  uint64_t v54;
  char *v55;

  v7 = a1;
  v8 = *(a3 - 1);
  v9 = MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v44 - v13;
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v44 - v16;
  v19 = v18 & 0xC000000000000001;
  if ((v15 & 0xC000000000000001) != 0)
  {
    if (v7 < 0)
      v20 = (void *)v7;
    else
      v20 = (void *)(v7 & 0xFFFFFFFFFFFFFF8);
    if (v19)
    {
      if (a2 < 0)
        v21 = (void *)a2;
      else
        v21 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
      swift_stdlib_NSObject_isEqual(v20, v21);
      return;
    }
    v22 = a2;
LABEL_16:
    _NativeSet.isEqual(to:)(v20, v22, a3);
    return;
  }
  if (v19)
  {
    if (a2 < 0)
      v20 = (void *)a2;
    else
      v20 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
    v22 = v7;
    goto LABEL_16;
  }
  if (v7 == a2 || *(_QWORD *)(v7 + 16) != *(_QWORD *)(a2 + 16))
    return;
  v23 = 0;
  v24 = *(_QWORD *)(v7 + 56);
  v45 = v7 + 56;
  v46 = (char *)&v44 - v16;
  v25 = 1 << *(_BYTE *)(v7 + 32);
  if (v25 < 64)
    v26 = ~(-1 << v25);
  else
    v26 = -1;
  v27 = v26 & v24;
  v48 = a4;
  v49 = (unint64_t)(v25 + 63) >> 6;
  v54 = a2 + 56;
  v55 = v14;
  v47 = v7;
  if (!v27)
    goto LABEL_25;
LABEL_23:
  v50 = (v27 - 1) & v27;
  v51 = v23;
  for (i = __clz(__rbit64(v27)) | (v23 << 6); ; i = __clz(__rbit64(v30)) + (v31 << 6))
  {
    v33 = *(_QWORD *)(v8 + 72);
    v34 = *(_QWORD *)(v7 + 48) + v33 * i;
    v52 = *(void (**)(char *, unint64_t, uint64_t *))(v8 + 16);
    v53 = v33;
    v52(v17, v34, a3);
    (*(void (**)(char *, char *, uint64_t *))(v8 + 32))(v14, v17, a3);
    v35 = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(a4 + 32))(*(_QWORD *)(a2 + 40), a3, a4);
    v36 = -1 << *(_BYTE *)(a2 + 32);
    v37 = v35 & ~v36;
    if (((*(_QWORD *)(v54 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8)) >> v37) & 1) == 0)
    {
      (*(void (**)(char *, uint64_t *))(v8 + 8))(v55, a3);
      return;
    }
    v38 = v8;
    v39 = ~v36;
    v40 = *(_QWORD *)(a4 + 8);
    v41 = *(uint64_t (**)(char *, char *, uint64_t *, uint64_t))(v40 + 8);
    while (1)
    {
      v52(v11, *(_QWORD *)(a2 + 48) + v37 * v53, a3);
      v42 = v41(v11, v55, a3, v40);
      v43 = *(void (**)(char *, uint64_t *))(v38 + 8);
      v43(v11, a3);
      if ((v42 & 1) != 0)
        break;
      v37 = (v37 + 1) & v39;
      if (((*(_QWORD *)(v54 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8)) >> v37) & 1) == 0)
      {
        v43(v55, a3);
        return;
      }
    }
    v14 = v55;
    v43(v55, a3);
    v8 = v38;
    v7 = v47;
    a4 = v48;
    v17 = v46;
    v27 = v50;
    v23 = v51;
    if (v50)
      goto LABEL_23;
LABEL_25:
    v29 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
      goto LABEL_46;
    }
    if (v29 >= v49)
      return;
    v30 = *(_QWORD *)(v45 + 8 * v29);
    v31 = v23 + 1;
    if (!v30)
    {
      v31 = v29 + 1;
      if (v29 + 1 >= v49)
        return;
      v30 = *(_QWORD *)(v45 + 8 * v31);
      if (!v30)
        break;
    }
LABEL_36:
    v50 = (v30 - 1) & v30;
    v51 = v31;
  }
  v32 = v29 + 2;
  if (v32 >= v49)
    return;
  v30 = *(_QWORD *)(v45 + 8 * v32);
  if (v30)
  {
    v31 = v32;
    goto LABEL_36;
  }
  while (1)
  {
    v31 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v31 >= v49)
      return;
    v30 = *(_QWORD *)(v45 + 8 * v31);
    ++v32;
    if (v30)
      goto LABEL_36;
  }
LABEL_46:
  __break(1u);
}

BOOL Set._Variant.isNative.getter(uint64_t a1)
{
  return (a1 & 0xC000000000000001) == 0;
}

id Set._Variant.asCocoa.getter(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;

  v1 = (void *)specialized _ArrayBuffer._nonNative.getter(a1);
  return swift_unknownObjectRetain(v1, v2, v3, v4);
}

uint64_t __CocoaSet.isEqual(to:)(void *a1, void *a2)
{
  return swift_stdlib_NSObject_isEqual(a2, a1);
}

void protocol witness for static Equatable.== infix(_:_:) in conformance Set<A>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  static Set.== infix(_:_:)(*a1, *a2, *(uint64_t **)(a3 + 16), *(_QWORD *)(a3 + 24));
}

void specialized Set.hash(into:)(__int128 *a1, unint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int64_t v17;
  Swift::UInt v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32[3];
  uint64_t v33;
  uint64_t v34;
  _OWORD v35[2];
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  v3 = *((_QWORD *)a1 + 8);
  v4 = a1[1];
  v40 = *a1;
  v41 = v4;
  v5 = a1[3];
  v42 = a1[2];
  v43 = v5;
  v44 = v3;
  v9 = Hasher._finalize()();
  v10 = a2 + 56;
  v11 = -1;
  v12 = -1 << *(_BYTE *)(a2 + 32);
  if (-v12 < 64)
    v11 = ~(-1 << -(char)v12);
  v13 = v11 & *(_QWORD *)(a2 + 56);
  v31 = (unint64_t)(63 - v12) >> 6;
  swift_bridgeObjectRetain(a2, v6, v7, v8);
  v17 = 0;
  v18 = 0;
  if (!v13)
    goto LABEL_6;
LABEL_4:
  v19 = (v13 - 1) & v13;
  v20 = __clz(__rbit64(v13)) | (v17 << 6);
  v21 = v17;
LABEL_5:
  outlined init with copy of AnyHashable(*(_QWORD *)(a2 + 48) + 40 * v20, (uint64_t)&v37);
  v22 = v21;
  while (1)
  {
    v25 = swift_retain((unint64_t *)a2, v14, v15, v16);
    outlined consume of [A : B].Iterator._Variant<A, B>((uint64_t)v25);
    if (!*((_QWORD *)&v38 + 1))
    {
      swift_release(a2);
      Hasher._combine(_:)(v18);
      return;
    }
    v35[0] = v37;
    v35[1] = v38;
    v26 = v39;
    v36 = v39;
    v27 = *((_QWORD *)&v38 + 1);
    __swift_project_boxed_opaque_existential_0Tm(v35, *((uint64_t *)&v38 + 1));
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v26 + 8))(v32, v27, v26);
    v28 = v33;
    v29 = v34;
    __swift_project_boxed_opaque_existential_0Tm(v32, v33);
    v30 = (*(uint64_t (**)(Swift::Int, uint64_t, uint64_t))(v29 + 40))(v9, v28, v29);
    __swift_destroy_boxed_opaque_existential_1Tm(v32);
    outlined destroy of AnyHashable((uint64_t *)v35);
    v18 ^= v30;
    v17 = v22;
    v13 = v19;
    if (v19)
      goto LABEL_4;
LABEL_6:
    v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    v22 = v17;
    if (v21 < v31)
    {
      v23 = *(_QWORD *)(v10 + 8 * v21);
      if (v23)
        goto LABEL_9;
      v22 = v17 + 1;
      if (v17 + 2 < v31)
      {
        v23 = *(_QWORD *)(v10 + 8 * (v17 + 2));
        if (v23)
        {
          v21 = v17 + 2;
LABEL_9:
          v19 = (v23 - 1) & v23;
          v20 = __clz(__rbit64(v23)) + (v21 << 6);
          goto LABEL_5;
        }
        v24 = v17 + 3;
        v22 = v17 + 2;
        if (v17 + 3 < v31)
          break;
      }
    }
LABEL_21:
    v19 = 0;
    v39 = 0;
    v37 = 0u;
    v38 = 0u;
  }
  v23 = *(_QWORD *)(v10 + 8 * v24);
  if (v23)
  {
    v21 = v17 + 3;
    goto LABEL_9;
  }
  while (1)
  {
    v21 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v21 >= v31)
    {
      v22 = v31 - 1;
      goto LABEL_21;
    }
    v23 = *(_QWORD *)(v10 + 8 * v21);
    ++v24;
    if (v23)
      goto LABEL_9;
  }
LABEL_27:
  __break(1u);
}

void Set.hash(into:)(__int128 *a1, int64_t a2, Class *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  Swift::UInt v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  void **v46;
  void *v47;
  int64_t v48;
  unint64_t v49;
  int64_t v50;
  void (*v51)(char *, uint64_t, uint64_t, Class *);
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  __int128 *v60;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  Class *v64;
  int64_t v65;
  unint64_t v66;
  Swift::Int v67;
  uint64_t v68;
  void *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;

  v68 = a4;
  v7 = (uint64_t)*(a3 - 1);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = type metadata accessor for Optional(0, v10, v10, v11);
  v56 = *(_QWORD *)(v57 - 8);
  v12 = MEMORY[0x1E0C80A78](v57);
  v55 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  v58 = (uint64_t *)((char *)&v54 - v15);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v54 - v16;
  v18 = *((_QWORD *)a1 + 8);
  v19 = a1[1];
  v70 = *a1;
  v71 = v19;
  v20 = a1[2];
  v21 = a1[3];
  v60 = a1;
  v72 = v20;
  v73 = v21;
  v74 = v18;
  v67 = Hasher._finalize()();
  if ((a2 & 0xC000000000000001) != 0)
  {
    if (a2 < 0)
      v25 = a2;
    else
      v25 = a2 & 0xFFFFFFFFFFFFFF8;
    v26 = type metadata accessor for __CocoaSet.Iterator();
    v27 = (unint64_t)swift_allocObject(v26, 0xE8uLL, 7uLL);
    v63 = 0;
    v28 = 0;
    v29 = 0;
    *(_QWORD *)(v27 + 208) = v25;
    *(_QWORD *)(v27 + 216) = 0;
    *(_OWORD *)(v27 + 16) = 0u;
    *(_OWORD *)(v27 + 32) = 0u;
    *(_OWORD *)(v27 + 48) = 0u;
    *(_OWORD *)(v27 + 64) = 0u;
    *(_OWORD *)(v27 + 80) = 0u;
    *(_OWORD *)(v27 + 96) = 0u;
    *(_OWORD *)(v27 + 112) = 0u;
    *(_OWORD *)(v27 + 128) = 0u;
    *(_OWORD *)(v27 + 144) = 0u;
    *(_OWORD *)(v27 + 160) = 0u;
    *(_OWORD *)(v27 + 176) = 0u;
    *(_OWORD *)(v27 + 192) = 0u;
    *(_QWORD *)(v27 + 224) = 0;
    v30 = v27 | 0x8000000000000000;
  }
  else
  {
    v31 = -1 << *(_BYTE *)(a2 + 32);
    v28 = ~v31;
    v32 = *(_QWORD *)(a2 + 56);
    v63 = a2 + 56;
    v33 = -v31;
    if (v33 < 64)
      v34 = ~(-1 << v33);
    else
      v34 = -1;
    v29 = v34 & v32;
    v30 = a2;
  }
  v35 = v30 & 0x7FFFFFFFFFFFFFFFLL;
  v61 = (v30 & 0x7FFFFFFFFFFFFFFFLL) + 80;
  v62 = (v30 & 0x7FFFFFFFFFFFFFFFLL) + 16;
  v59 = v28;
  v36 = (unint64_t)(v28 + 64) >> 6;
  swift_bridgeObjectRetain(a2, v22, v23, v24);
  v40 = 0;
  v65 = 0;
  v64 = qword_1E0EB1350;
  v66 = v30;
  if ((v30 & 0x8000000000000000) != 0)
    goto LABEL_13;
  while (1)
  {
    if (v29)
    {
      v41 = __clz(__rbit64(v29));
      v29 &= v29 - 1;
      v42 = v41 | (v65 << 6);
      goto LABEL_29;
    }
    v48 = v65 + 1;
    if (__OFADD__(v65, 1))
    {
      __break(1u);
LABEL_41:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/SetBridging.swift", 23, 2, 0x254uLL, 0);
    }
    if (v48 >= v36)
      goto LABEL_35;
    v49 = *(_QWORD *)(v63 + 8 * v48);
    v50 = v65 + 1;
    if (!v49)
      break;
LABEL_28:
    v29 = (v49 - 1) & v49;
    v42 = __clz(__rbit64(v49)) + (v50 << 6);
    v65 = v50;
LABEL_29:
    (*(void (**)(char *, unint64_t, Class *))(v7 + 16))(v17, *(_QWORD *)(v30 + 48) + *(_QWORD *)(v7 + 72) * v42, a3);
LABEL_30:
    v51 = *(void (**)(char *, uint64_t, uint64_t, Class *))(v7 + 56);
    while (1)
    {
      v51(v17, 0, 1, a3);
      (*(void (**)(char *, char *, Class *))(v7 + 32))(v9, v17, a3);
      v52 = (*(uint64_t (**)(Swift::Int, Class *))(v68 + 32))(v67, a3);
      (*(void (**)(char *, Class *))(v7 + 8))(v9, a3);
      v40 ^= v52;
      v30 = v66;
      if ((v66 & 0x8000000000000000) == 0)
        break;
LABEL_13:
      v43 = *(_QWORD *)(v35 + 216);
      if (v43 < 0)
        goto LABEL_35;
      if (v43 == *(_QWORD *)(v35 + 224))
      {
        v44 = objc_msgSend(*(id *)(v35 + 208), sel_countByEnumeratingWithState_objects_count_, v62, v61, 16);
        *(_QWORD *)(v35 + 224) = v44;
        if (!v44)
        {
          *(_QWORD *)(v35 + 216) = -1;
          goto LABEL_35;
        }
        v43 = 0;
        *(_QWORD *)(v35 + 216) = 0;
      }
      v45 = *(_QWORD *)(v35 + 24);
      if (!v45)
        goto LABEL_41;
      if ((unint64_t)(v43 - 0x1000000000000000) >> 61 != 7)
        goto LABEL_38;
      v46 = (void **)(v45 + 8 * v43);
      if ((v46 & 7) != 0)
        goto LABEL_39;
      v47 = *v46;
      *(_QWORD *)(v35 + 216) = v43 + 1;
      swift_unknownObjectRetain(v47, v37, v38, v39);
      if (_swift_isClassOrObjCExistentialType((uint64_t)a3, (uint64_t *)a3))
      {
        v69 = v47;
        swift_dynamicCast(v17, (uint64_t *)&v69, v64, a3, 7uLL);
        goto LABEL_30;
      }
      v51 = *(void (**)(char *, uint64_t, uint64_t, Class *))(v7 + 56);
      v51((char *)v58, 1, 1, a3);
      _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)((swift *)v47, (uint64_t)a3, v58);
      swift_unknownObjectRelease(v47);
      v53 = v55;
      (*(void (**)(char *, uint64_t *, uint64_t))(v56 + 16))(v55, v58, v57);
      if ((*(unsigned int (**)(char *, uint64_t, Class *))(v7 + 48))(v53, 1, a3) == 1)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/BridgeObjectiveC.swift", 28, 2, 0xFCuLL, 0);
      (*(void (**)(uint64_t *, uint64_t))(v56 + 8))(v58, v57);
      (*(void (**)(char *, char *, Class *))(v7 + 32))(v17, v53, a3);
    }
  }
  while (1)
  {
    v50 = v48 + 1;
    if (__OFADD__(v48, 1))
    {
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x4F9uLL, 0);
    }
    if (v50 >= v36)
      break;
    v49 = *(_QWORD *)(v63 + 8 * v50);
    ++v48;
    if (v49)
      goto LABEL_28;
  }
LABEL_35:
  (*(void (**)(char *, uint64_t, uint64_t, Class *))(v7 + 56))(v17, 1, 1, a3);
  outlined consume of [A : B].Iterator._Variant<A, B>(v30);
  Hasher._combine(_:)(v40);
}

Swift::Int Set.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Array<A>.hashValue.getter(a1, a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t, uint64_t))Set.hash(into:));
}

Swift::Int Array<A>.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *, uint64_t, uint64_t, uint64_t))
{
  _QWORD v5[5];
  __int128 v6;
  __int128 v7;

  v5[0] = 0;
  v5[1] = _swift_stdlib_Hashing_parameters ^ 0x736F6D6570736575;
  v5[2] = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v5[3] = _swift_stdlib_Hashing_parameters ^ 0x6C7967656E657261;
  v5[4] = unk_1ECD25520 ^ 0x7465646279746573;
  v6 = 0u;
  v7 = 0u;
  a4(v5, a1, a2, a3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Set<A>(uint64_t a1)
{
  uint64_t *v1;

  return Set.hashValue.getter(*v1, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

void protocol witness for Hashable.hash(into:) in conformance Set<A>(__int128 *a1, uint64_t a2)
{
  int64_t *v2;

  Set.hash(into:)(a1, *v2, *(Class **)(a2 + 16), *(_QWORD *)(a2 + 24));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Set<A>(uint64_t a1, uint64_t a2)
{
  int64_t *v2;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  *(_QWORD *)&v4 = 0;
  *((_QWORD *)&v4 + 1) = _swift_stdlib_Hashing_parameters ^ a1 ^ 0x736F6D6570736575;
  v5 = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v6 = _swift_stdlib_Hashing_parameters ^ a1 ^ 0x6C7967656E657261;
  v7 = unk_1ECD25520 ^ 0x7465646279746573;
  v8 = 0u;
  v9 = 0u;
  Set.hash(into:)(&v4, *v2, *(Class **)(a2 + 16), *(_QWORD *)(a2 + 24));
  return Hasher._finalize()();
}

uint64_t Set._toCustomAnyHashable()@<X0>(int64_t a1@<X0>, Class *a2@<X1>, uint64_t a3@<X2>, int64_t *a4@<X8>)
{
  unint64_t *v8;
  uint64_t v9;
  uint64_t result;

  v8 = specialized _setUpCast<A, B>(_:)(a1, a2);
  result = type metadata accessor for _SetAnyHashableBox(0, (uint64_t)a2, a3, v9);
  a4[3] = result;
  a4[4] = (int64_t)&protocol witness table for _SetAnyHashableBox<A>;
  *a4 = a1;
  a4[1] = (int64_t)v8;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance Set<A>@<X0>(uint64_t a1@<X0>, int64_t *a2@<X8>)
{
  int64_t *v2;

  return Set._toCustomAnyHashable()(*v2, *(Class **)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

void specialized _setUpCast<A, B>(_:)(unint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t *v25;
  _OWORD v26[2];
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
    v6 = (unint64_t *)specialized static _SetStorage.allocate(capacity:)(v5);
  else
    v6 = (unint64_t *)&_swiftEmptySetSingleton;
  v7 = a1 + 56;
  v8 = -1;
  v9 = -1 << *(_BYTE *)(a1 + 32);
  if (-v9 < 64)
    v8 = ~(-1 << -(char)v9);
  v10 = v8 & *(_QWORD *)(a1 + 56);
  v11 = (unint64_t)(63 - v9) >> 6;
  swift_retain(v6, a2, a3, a4);
  swift_bridgeObjectRetain(a1, v12, v13, v14);
  v18 = 0;
  if (!v10)
    goto LABEL_9;
LABEL_7:
  v19 = (v10 - 1) & v10;
  v20 = __clz(__rbit64(v10)) | (v18 << 6);
  v21 = v18;
LABEL_8:
  outlined init with copy of AnyHashable(*(_QWORD *)(a1 + 48) + 40 * v20, (uint64_t)&v28);
  v22 = v21;
  while (1)
  {
    v25 = swift_retain((unint64_t *)a1, v15, v16, v17);
    outlined consume of [A : B].Iterator._Variant<A, B>((uint64_t)v25);
    if (!*((_QWORD *)&v29 + 1))
    {
      swift_release(a1);
      swift_release((uint64_t)v6);
      return;
    }
    v26[0] = v28;
    v26[1] = v29;
    v27 = v30;
    specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)v26, (uint64_t)v6);
    v18 = v22;
    v10 = v19;
    if (v19)
      goto LABEL_7;
LABEL_9:
    v21 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    v22 = v18;
    if (v21 < v11)
    {
      v23 = *(_QWORD *)(v7 + 8 * v21);
      if (v23)
        goto LABEL_12;
      v22 = v18 + 1;
      if (v18 + 2 < v11)
      {
        v23 = *(_QWORD *)(v7 + 8 * (v18 + 2));
        if (v23)
        {
          v21 = v18 + 2;
LABEL_12:
          v19 = (v23 - 1) & v23;
          v20 = __clz(__rbit64(v23)) + (v21 << 6);
          goto LABEL_8;
        }
        v24 = v18 + 3;
        v22 = v18 + 2;
        if (v18 + 3 < v11)
          break;
      }
    }
LABEL_24:
    v19 = 0;
    v30 = 0;
    v28 = 0u;
    v29 = 0u;
  }
  v23 = *(_QWORD *)(v7 + 8 * v24);
  if (v23)
  {
    v21 = v18 + 3;
    goto LABEL_12;
  }
  while (1)
  {
    v21 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v21 >= v11)
    {
      v22 = v11 - 1;
      goto LABEL_24;
    }
    v23 = *(_QWORD *)(v7 + 8 * v21);
    ++v24;
    if (v23)
      goto LABEL_12;
  }
LABEL_30:
  __break(1u);
}

unint64_t *specialized _setUpCast<A, B>(_:)(int64_t a1, Class *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  __n128 v42;
  int64_t v43;
  unint64_t v44;
  unint64_t v45;
  void (*v46)(char *, uint64_t, uint64_t, Class *);
  int64_t v47;
  unint64_t v48;
  int64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  void **v53;
  void *v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int64_t v65;
  int64_t v66;
  Class *v67;
  unint64_t *v68;
  _OWORD v69[2];
  uint64_t v70;
  _OWORD v71[2];
  uint64_t v72;

  v4 = (uint64_t)*(a2 - 1);
  MEMORY[0x1E0C80A78](a1);
  v6 = (uint64_t *)((char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for Optional(0, v7, v8, v9);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (uint64_t *)((char *)&v57 - v16);
  MEMORY[0x1E0C80A78](v15);
  v22 = (char *)&v57 - v21;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v23 = (void *)a1;
    else
      v23 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
    v24 = objc_msgSend(v23, sel_count);
    if (v24)
      goto LABEL_6;
LABEL_8:
    v68 = (unint64_t *)&_swiftEmptySetSingleton;
    goto LABEL_9;
  }
  v24 = *(id *)(a1 + 16);
  if (!v24)
    goto LABEL_8;
LABEL_6:
  v68 = (unint64_t *)specialized static _SetStorage.allocate(capacity:)((uint64_t)v24);
LABEL_9:
  v61 = v17;
  v58 = v10;
  v59 = v11;
  v60 = v14;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v25 = a1;
    else
      v25 = a1 & 0xFFFFFFFFFFFFFF8;
    v26 = type metadata accessor for __CocoaSet.Iterator();
    v27 = (unint64_t)swift_allocObject(v26, 0xE8uLL, 7uLL);
    v66 = 0;
    v28 = 0;
    v29 = 0;
    *(_QWORD *)(v27 + 208) = v25;
    *(_QWORD *)(v27 + 216) = 0;
    *(_OWORD *)(v27 + 16) = 0u;
    *(_OWORD *)(v27 + 32) = 0u;
    *(_OWORD *)(v27 + 48) = 0u;
    *(_OWORD *)(v27 + 64) = 0u;
    *(_OWORD *)(v27 + 80) = 0u;
    *(_OWORD *)(v27 + 96) = 0u;
    *(_OWORD *)(v27 + 112) = 0u;
    *(_OWORD *)(v27 + 128) = 0u;
    *(_OWORD *)(v27 + 144) = 0u;
    *(_OWORD *)(v27 + 160) = 0u;
    *(_OWORD *)(v27 + 176) = 0u;
    *(_OWORD *)(v27 + 192) = 0u;
    *(_QWORD *)(v27 + 224) = 0;
    v30 = v27 | 0x8000000000000000;
  }
  else
  {
    v31 = -1 << *(_BYTE *)(a1 + 32);
    v28 = ~v31;
    v32 = *(_QWORD *)(a1 + 56);
    v66 = a1 + 56;
    v33 = -v31;
    if (v33 < 64)
      v34 = ~(-1 << v33);
    else
      v34 = -1;
    v29 = v34 & v32;
    v30 = a1;
  }
  v63 = (v30 & 0x7FFFFFFFFFFFFFFFLL) + 80;
  v64 = (v30 & 0x7FFFFFFFFFFFFFFFLL) + 16;
  v62 = v28;
  v65 = (unint64_t)(v28 + 64) >> 6;
  v35 = v68;
  swift_retain(v68, v18, v19, v20);
  swift_bridgeObjectRetain(a1, v36, v37, v38);
  v43 = 0;
  v67 = qword_1E0EB1350;
  while ((v30 & 0x8000000000000000) == 0)
  {
    if (v29)
    {
      v44 = __clz(__rbit64(v29));
      v29 &= v29 - 1;
      v45 = v44 | (v43 << 6);
    }
    else
    {
      v47 = v43 + 1;
      if (__OFADD__(v43, 1))
      {
        __break(1u);
LABEL_52:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/SetBridging.swift", 23, 2, 0x254uLL, 0);
      }
      if (v47 >= v65)
        goto LABEL_46;
      v48 = *(_QWORD *)(v66 + 8 * v47);
      if (!v48)
      {
        v49 = v43 + 2;
        if (v43 + 2 >= v65)
          goto LABEL_46;
        v48 = *(_QWORD *)(v66 + 8 * v49);
        if (!v48)
        {
          while (1)
          {
            v47 = v49 + 1;
            if (__OFADD__(v49, 1))
              break;
            if (v47 >= v65)
              goto LABEL_46;
            v48 = *(_QWORD *)(v66 + 8 * v47);
            ++v49;
            if (v48)
              goto LABEL_33;
          }
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x4F9uLL, 0);
        }
        v47 = v43 + 2;
      }
LABEL_33:
      v29 = (v48 - 1) & v48;
      v45 = __clz(__rbit64(v48)) + (v47 << 6);
      v43 = v47;
    }
    (*(void (**)(char *, unint64_t, Class *))(v4 + 16))(v22, *(_QWORD *)(v30 + 48) + *(_QWORD *)(v4 + 72) * v45, a2);
    v46 = *(void (**)(char *, uint64_t, uint64_t, Class *))(v4 + 56);
LABEL_21:
    v46(v22, 0, 1, a2);
    (*(void (**)(uint64_t *, char *, Class *))(v4 + 32))(v6, v22, a2);
    swift_dynamicCast((char *)v71, v6, a2, (Class *)&type metadata for AnyHashable, 7uLL);
    v69[0] = v71[0];
    v69[1] = v71[1];
    v70 = v72;
    v42 = specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)v69, (uint64_t)v35);
  }
  v50 = *(_QWORD *)((v30 & 0x7FFFFFFFFFFFFFFFLL) + 0xD8);
  if (v50 < 0)
    goto LABEL_46;
  if (v50 != *(_QWORD *)((v30 & 0x7FFFFFFFFFFFFFFFLL) + 0xE0))
  {
LABEL_38:
    v52 = *(_QWORD *)((v30 & 0x7FFFFFFFFFFFFFFFLL) + 0x18);
    if (!v52)
      goto LABEL_52;
    if ((unint64_t)(v50 - 0x1000000000000000) >> 61 != 7)
      goto LABEL_49;
    v53 = (void **)(v52 + 8 * v50);
    if ((v53 & 7) != 0)
      goto LABEL_50;
    v54 = *v53;
    *(_QWORD *)((v30 & 0x7FFFFFFFFFFFFFFFLL) + 0xD8) = v50 + 1;
    swift_unknownObjectRetain(v54, v39, v40, v41);
    if (_swift_isClassOrObjCExistentialType((uint64_t)a2, (uint64_t *)a2))
    {
      *(_QWORD *)&v71[0] = v54;
      swift_dynamicCast(v22, (uint64_t *)v71, v67, a2, 7uLL);
      v46 = *(void (**)(char *, uint64_t, uint64_t, Class *))(v4 + 56);
    }
    else
    {
      v46 = *(void (**)(char *, uint64_t, uint64_t, Class *))(v4 + 56);
      v46((char *)v61, 1, 1, a2);
      _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)((swift *)v54, (uint64_t)a2, v61);
      swift_unknownObjectRelease(v54);
      v55 = v58;
      (*(void (**)(char *, uint64_t *, uint64_t))(v59 + 16))(v60, v61, v58);
      if ((*(unsigned int (**)(char *, uint64_t, Class *))(v4 + 48))(v60, 1, a2) == 1)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/BridgeObjectiveC.swift", 28, 2, 0xFCuLL, 0);
      (*(void (**)(uint64_t *, uint64_t))(v59 + 8))(v61, v55);
      (*(void (**)(char *, char *, Class *))(v4 + 32))(v22, v60, a2);
    }
    v35 = v68;
    goto LABEL_21;
  }
  v51 = objc_msgSend(*(id *)((v30 & 0x7FFFFFFFFFFFFFFFLL) + 0xD0), sel_countByEnumeratingWithState_objects_count_, v64, v63, 16, v42.n128_f64[0]);
  *(_QWORD *)((v30 & 0x7FFFFFFFFFFFFFFFLL) + 0xE0) = v51;
  if (v51)
  {
    v50 = 0;
    *(_QWORD *)((v30 & 0x7FFFFFFFFFFFFFFFLL) + 0xD8) = 0;
    goto LABEL_38;
  }
  *(_QWORD *)((v30 & 0x7FFFFFFFFFFFFFFFLL) + 0xD8) = -1;
LABEL_46:
  (*(void (**)(char *, uint64_t, uint64_t, Class *, __n128))(v4 + 56))(v22, 1, 1, a2, v42);
  swift_release((uint64_t)v35);
  outlined consume of [A : B].Iterator._Variant<A, B>(v30);
  return v35;
}

unint64_t *_setUpCast<A, B>(_:)(uint64_t a1, Class *a2, Class *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  int64_t v37;
  void *v38;
  id v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  void **v69;
  void *v70;
  int64_t v71;
  Class v72;
  int64_t v73;
  int64_t v74;
  void (*v75)(char *, uint64_t, uint64_t, Class *);
  uint64_t *v76;
  char *v77;
  void (*v78)(char *, char *, Class *);
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  id v92;
  uint64_t v93;
  void **v94;
  void *v95;
  int64_t v96;
  unint64_t v97;
  int64_t v98;
  int64_t v99;
  void (*v100)(char *, uint64_t, uint64_t, Class *);
  uint64_t *v101;
  char *v102;
  void (*v103)(char *, char *, ValueMetadata *);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  char *v108;
  uint64_t v109;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  int64_t v118;
  int64_t v119;
  Class *v120;
  Class *v121;
  int64_t v122;
  unint64_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  void *v128;
  unint64_t *v129;

  v127 = a5;
  v8 = (uint64_t)*(a2 - 1);
  v9 = MEMORY[0x1E0C80A78](a1);
  v126 = (char *)&v111 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = *(_QWORD *)(v11 - 8);
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v111 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v124 = (char *)&v111 - v15;
  v113 = type metadata accessor for Optional(0, v16, v17, v18);
  v19 = *(_QWORD *)(v113 - 8);
  v20 = MEMORY[0x1E0C80A78](v113);
  v112 = (char *)&v111 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20);
  v115 = (uint64_t *)((char *)&v111 - v23);
  v24 = MEMORY[0x1E0C80A78](v22);
  v111 = (char *)&v111 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v121 = (Class *)((char *)&v111 - v27);
  v28 = MEMORY[0x1E0C80A78](v26);
  v30 = (char *)&v111 - v29;
  MEMORY[0x1E0C80A78](v28);
  v35 = (char *)&v111 - v34;
  v36 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v37 = a1;
    if (a1 < 0)
      v38 = (void *)a1;
    else
      v38 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
    v39 = objc_msgSend(v38, sel_count);
    if (v39)
      goto LABEL_6;
LABEL_8:
    v40 = (unint64_t *)&_swiftEmptySetSingleton;
    goto LABEL_9;
  }
  v37 = a1;
  v39 = *(id *)(a1 + 16);
  if (!v39)
    goto LABEL_8;
LABEL_6:
  type metadata accessor for _SetStorage(0, (uint64_t)a3, v127, (uint64_t)v33);
  v40 = (unint64_t *)static _SetStorage.allocate(capacity:)((uint64_t)v39);
LABEL_9:
  v129 = v40;
  v114 = v19;
  if (a3 != (Class *)&type metadata for String)
  {
    v123 = (unint64_t)v40;
    v41 = v37;
    if (v36)
    {
      if (v37 < 0)
        v42 = v37;
      else
        v42 = v37 & 0xFFFFFFFFFFFFFF8;
      v43 = type metadata accessor for __CocoaSet.Iterator();
      v44 = (unint64_t)swift_allocObject(v43, 0xE8uLL, 7uLL);
      v120 = 0;
      v45 = 0;
      v46 = 0;
      *(_QWORD *)(v44 + 208) = v42;
      *(_QWORD *)(v44 + 216) = 0;
      v40 = (unint64_t *)v123;
      *(_OWORD *)(v44 + 16) = 0u;
      *(_OWORD *)(v44 + 32) = 0u;
      *(_OWORD *)(v44 + 48) = 0u;
      *(_OWORD *)(v44 + 64) = 0u;
      *(_OWORD *)(v44 + 80) = 0u;
      *(_OWORD *)(v44 + 96) = 0u;
      *(_OWORD *)(v44 + 112) = 0u;
      *(_OWORD *)(v44 + 128) = 0u;
      *(_OWORD *)(v44 + 144) = 0u;
      *(_OWORD *)(v44 + 160) = 0u;
      *(_OWORD *)(v44 + 176) = 0u;
      *(_OWORD *)(v44 + 192) = 0u;
      *(_QWORD *)(v44 + 224) = 0;
      v37 = v44 | 0x8000000000000000;
    }
    else
    {
      v54 = -1 << *(_BYTE *)(v37 + 32);
      v45 = ~v54;
      v55 = *(_QWORD *)(v37 + 56);
      v120 = (Class *)(v37 + 56);
      v56 = -v54;
      if (v56 < 64)
        v57 = ~(-1 << v56);
      else
        v57 = -1;
      v46 = v57 & v55;
    }
    v117 = (v37 & 0x7FFFFFFFFFFFFFFFLL) + 80;
    v118 = (v37 & 0x7FFFFFFFFFFFFFFFLL) + 16;
    v116 = v45;
    v119 = (unint64_t)(v45 + 64) >> 6;
    swift_bridgeObjectRetain(v41, v31, v32, v33);
    swift_retain(v40, v58, v59, v60);
    v122 = 0;
    v121 = qword_1E0EB1350;
    if (v37 < 0)
      goto LABEL_27;
LABEL_25:
    if (v46)
    {
      v64 = __clz(__rbit64(v46));
      v46 &= v46 - 1;
      v65 = v64 | (v122 << 6);
      goto LABEL_48;
    }
    v71 = v122 + 1;
    if (__OFADD__(v122, 1))
      goto LABEL_97;
    if (v71 < v119)
    {
      v72 = v120[v71];
      v73 = v122 + 1;
      if (v72)
        goto LABEL_47;
      v73 = v122 + 2;
      if (v122 + 2 >= v119)
        goto LABEL_91;
      v72 = v120[v73];
      if (v72)
      {
LABEL_47:
        v46 = ((unint64_t)v72 - 1) & (unint64_t)v72;
        v65 = __clz(__rbit64((unint64_t)v72)) + (v73 << 6);
        v122 = v73;
LABEL_48:
        (*(void (**)(char *, unint64_t, Class *))(v8 + 16))(v30, *(_QWORD *)(v37 + 48) + *(_QWORD *)(v8 + 72) * v65, a2);
LABEL_49:
        v75 = *(void (**)(char *, uint64_t, uint64_t, Class *))(v8 + 56);
        while (1)
        {
          v75(v30, 0, 1, a2);
          v76 = (uint64_t *)v126;
          (*(void (**)(char *, char *, Class *))(v8 + 32))(v126, v30, a2);
          swift_dynamicCast(v14, v76, a2, a3, 7uLL);
          v77 = v124;
          v78 = *(void (**)(char *, char *, Class *))(v125 + 32);
          v78(v124, v14, a3);
          v78(v14, v77, a3);
          v40 = (unint64_t *)v123;
          _NativeSet._unsafeInsertNew(_:)((uint64_t)v14, v123, (uint64_t)a3, v127);
          if ((v37 & 0x8000000000000000) == 0)
            goto LABEL_25;
LABEL_27:
          v66 = *(_QWORD *)((v37 & 0x7FFFFFFFFFFFFFFFLL) + 0xD8);
          if (v66 < 0)
            goto LABEL_91;
          if (v66 == *(_QWORD *)((v37 & 0x7FFFFFFFFFFFFFFFLL) + 0xE0))
          {
            v67 = objc_msgSend(*(id *)((v37 & 0x7FFFFFFFFFFFFFFFLL) + 0xD0), sel_countByEnumeratingWithState_objects_count_, v118, v117, 16);
            *(_QWORD *)((v37 & 0x7FFFFFFFFFFFFFFFLL) + 0xE0) = v67;
            if (!v67)
            {
              *(_QWORD *)((v37 & 0x7FFFFFFFFFFFFFFFLL) + 0xD8) = -1;
              goto LABEL_91;
            }
            v66 = 0;
            *(_QWORD *)((v37 & 0x7FFFFFFFFFFFFFFFLL) + 0xD8) = 0;
          }
          v68 = *(_QWORD *)((v37 & 0x7FFFFFFFFFFFFFFFLL) + 0x18);
          if (!v68)
            goto LABEL_102;
          if ((unint64_t)(v66 - 0x1000000000000000) >> 61 != 7)
          {
            __break(1u);
LABEL_97:
            __break(1u);
LABEL_98:
            __break(1u);
LABEL_99:
            __break(1u);
LABEL_100:
            __break(1u);
LABEL_101:
            __break(1u);
LABEL_102:
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/SetBridging.swift", 23, 2, 0x254uLL, 0);
          }
          v69 = (void **)(v68 + 8 * v66);
          if ((v69 & 7) != 0)
            goto LABEL_95;
          v70 = *v69;
          *(_QWORD *)((v37 & 0x7FFFFFFFFFFFFFFFLL) + 0xD8) = v66 + 1;
          swift_unknownObjectRetain(v70, v61, v62, v63);
          if (_swift_isClassOrObjCExistentialType((uint64_t)a2, (uint64_t *)a2))
          {
            v128 = v70;
            swift_dynamicCast(v30, (uint64_t *)&v128, v121, a2, 7uLL);
            goto LABEL_49;
          }
          v75 = *(void (**)(char *, uint64_t, uint64_t, Class *))(v8 + 56);
          v75((char *)v115, 1, 1, a2);
          _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)((swift *)v70, (uint64_t)a2, v115);
          swift_unknownObjectRelease(v70);
          v79 = v112;
          (*(void (**)(char *, uint64_t *, uint64_t))(v114 + 16))(v112, v115, v113);
          if ((*(unsigned int (**)(char *, uint64_t, Class *))(v8 + 48))(v79, 1, a2) == 1)
            goto LABEL_103;
          (*(void (**)(uint64_t *, uint64_t))(v114 + 8))(v115, v113);
          (*(void (**)(char *, char *, Class *))(v8 + 32))(v30, v79, a2);
        }
      }
      v74 = v122 + 3;
      if (v122 + 3 < v119)
      {
        v72 = v120[v74];
        if (v72)
        {
          v73 = v122 + 3;
          goto LABEL_47;
        }
        while (1)
        {
          v73 = v74 + 1;
          if (__OFADD__(v74, 1))
            goto LABEL_99;
          if (v73 >= v119)
            break;
          v72 = v120[v73];
          ++v74;
          if (v72)
            goto LABEL_47;
        }
      }
    }
LABEL_91:
    (*(void (**)(char *, uint64_t, uint64_t, Class *))(v8 + 56))(v30, 1, 1, a2);
    swift_release((uint64_t)v40);
    v109 = v37;
    goto LABEL_94;
  }
  if (v36)
  {
    if (v37 < 0)
      v47 = v37;
    else
      v47 = v37 & 0xFFFFFFFFFFFFFF8;
    v48 = type metadata accessor for __CocoaSet.Iterator();
    v49 = (unint64_t)swift_allocObject(v48, 0xE8uLL, 7uLL);
    v119 = 0;
    v50 = 0;
    v51 = 0;
    *(_QWORD *)(v49 + 208) = v47;
    *(_QWORD *)(v49 + 216) = 0;
    v52 = v37;
    *(_OWORD *)(v49 + 16) = 0u;
    *(_OWORD *)(v49 + 32) = 0u;
    *(_OWORD *)(v49 + 48) = 0u;
    *(_OWORD *)(v49 + 64) = 0u;
    *(_OWORD *)(v49 + 80) = 0u;
    *(_OWORD *)(v49 + 96) = 0u;
    *(_OWORD *)(v49 + 112) = 0u;
    *(_OWORD *)(v49 + 128) = 0u;
    *(_OWORD *)(v49 + 144) = 0u;
    *(_OWORD *)(v49 + 160) = 0u;
    *(_OWORD *)(v49 + 176) = 0u;
    *(_OWORD *)(v49 + 192) = 0u;
    *(_QWORD *)(v49 + 224) = 0;
    v53 = v49 | 0x8000000000000000;
  }
  else
  {
    v52 = v37;
    v80 = -1 << *(_BYTE *)(v37 + 32);
    v50 = ~v80;
    v81 = *(_QWORD *)(v37 + 56);
    v119 = v37 + 56;
    v82 = -v80;
    if (v82 < 64)
      v83 = ~(-1 << v82);
    else
      v83 = -1;
    v51 = v83 & v81;
    v53 = v37;
  }
  v84 = v53 & 0x7FFFFFFFFFFFFFFFLL;
  v116 = (v53 & 0x7FFFFFFFFFFFFFFFLL) + 80;
  v117 = (v53 & 0x7FFFFFFFFFFFFFFFLL) + 16;
  v115 = (uint64_t *)v50;
  v118 = (unint64_t)(v50 + 64) >> 6;
  swift_bridgeObjectRetain(v52, v31, v32, v33);
  v122 = 0;
  v120 = qword_1E0EB1350;
  v123 = v53;
  if ((v53 & 0x8000000000000000) != 0)
    goto LABEL_62;
  while (1)
  {
    if (v51)
    {
      v88 = __clz(__rbit64(v51));
      v51 &= v51 - 1;
      v89 = v88 | (v122 << 6);
      goto LABEL_83;
    }
    v96 = v122 + 1;
    if (__OFADD__(v122, 1))
      goto LABEL_100;
    if (v96 >= v118)
      goto LABEL_93;
    v97 = *(_QWORD *)(v119 + 8 * v96);
    v98 = v122 + 1;
    if (!v97)
    {
      v98 = v122 + 2;
      if (v122 + 2 >= v118)
        goto LABEL_93;
      v97 = *(_QWORD *)(v119 + 8 * v98);
      if (!v97)
        break;
    }
LABEL_82:
    v51 = (v97 - 1) & v97;
    v89 = __clz(__rbit64(v97)) + (v98 << 6);
    v122 = v98;
LABEL_83:
    (*(void (**)(char *, unint64_t, Class *))(v8 + 16))(v35, *(_QWORD *)(v53 + 48) + *(_QWORD *)(v8 + 72) * v89, a2);
LABEL_84:
    v100 = *(void (**)(char *, uint64_t, uint64_t, Class *))(v8 + 56);
    while (1)
    {
      v100(v35, 0, 1, a2);
      v101 = (uint64_t *)v126;
      (*(void (**)(char *, char *, Class *))(v8 + 32))(v126, v35, a2);
      swift_dynamicCast(v14, v101, a2, (Class *)&type metadata for String, 7uLL);
      v102 = v124;
      v103 = *(void (**)(char *, char *, ValueMetadata *))(v125 + 32);
      v103(v124, v14, &type metadata for String);
      v103(v14, v102, &type metadata for String);
      v105 = type metadata accessor for _NativeSet(0, (uint64_t)&type metadata for String, v127, v104);
      _NativeSet._unsafeUpdate(with:)((uint64_t)v14, v105);
      v53 = v123;
      if ((v123 & 0x8000000000000000) == 0)
        break;
LABEL_62:
      v90 = *(_QWORD *)(v84 + 216);
      if (v90 < 0)
        goto LABEL_93;
      v91 = (uint64_t *)v121;
      if (v90 == *(_QWORD *)(v84 + 224))
      {
        v92 = objc_msgSend(*(id *)(v84 + 208), sel_countByEnumeratingWithState_objects_count_, v117, v116, 16);
        *(_QWORD *)(v84 + 224) = v92;
        if (!v92)
        {
          *(_QWORD *)(v84 + 216) = -1;
          goto LABEL_93;
        }
        v90 = 0;
        *(_QWORD *)(v84 + 216) = 0;
      }
      v93 = *(_QWORD *)(v84 + 24);
      if (!v93)
        goto LABEL_102;
      if ((unint64_t)(v90 - 0x1000000000000000) >> 61 != 7)
        goto LABEL_98;
      v94 = (void **)(v93 + 8 * v90);
      if ((v94 & 7) != 0)
LABEL_95:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x4F9uLL, 0);
      v95 = *v94;
      *(_QWORD *)(v84 + 216) = v90 + 1;
      swift_unknownObjectRetain(v95, v85, v86, v87);
      if (_swift_isClassOrObjCExistentialType((uint64_t)a2, (uint64_t *)a2))
      {
        v128 = v95;
        swift_dynamicCast(v35, (uint64_t *)&v128, v120, a2, 7uLL);
        goto LABEL_84;
      }
      v100 = *(void (**)(char *, uint64_t, uint64_t, Class *))(v8 + 56);
      v100((char *)v91, 1, 1, a2);
      _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)((swift *)v95, (uint64_t)a2, v91);
      swift_unknownObjectRelease(v95);
      v106 = v113;
      v107 = v91;
      v108 = v111;
      (*(void (**)(char *, uint64_t *, uint64_t))(v114 + 16))(v111, v107, v113);
      if ((*(unsigned int (**)(char *, uint64_t, Class *))(v8 + 48))(v108, 1, a2) == 1)
LABEL_103:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/BridgeObjectiveC.swift", 28, 2, 0xFCuLL, 0);
      (*(void (**)(Class *, uint64_t))(v114 + 8))(v121, v106);
      (*(void (**)(char *, char *, Class *))(v8 + 32))(v35, v108, a2);
    }
  }
  v99 = v122 + 3;
  if (v122 + 3 >= v118)
    goto LABEL_93;
  v97 = *(_QWORD *)(v119 + 8 * v99);
  if (v97)
  {
    v98 = v122 + 3;
    goto LABEL_82;
  }
  while (1)
  {
    v98 = v99 + 1;
    if (__OFADD__(v99, 1))
      goto LABEL_101;
    if (v98 >= v118)
      break;
    v97 = *(_QWORD *)(v119 + 8 * v98);
    ++v99;
    if (v97)
      goto LABEL_82;
  }
LABEL_93:
  (*(void (**)(char *, uint64_t, uint64_t, Class *))(v8 + 56))(v35, 1, 1, a2);
  v109 = v53;
LABEL_94:
  outlined consume of [A : B].Iterator._Variant<A, B>(v109);
  return v129;
}

unint64_t _SetAnyHashableBox._base.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, unint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;

  a4[3] = type metadata accessor for Set(0, a2, a3, a3);
  *a4 = a1;
  return swift_bridgeObjectRetain(a1, v6, v7, v8);
}

void _SetAnyHashableBox._canonicalBox.getter(unint64_t a1@<X1>, uint64_t a2@<X2>, char *a3@<X3>, unint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;

  swift_bridgeObjectRetain(a1, a1, a2, a3);
  specialized _setUpCast<A, B>(_:)(a1, v6, v7, v8);
  a4[3] = (unint64_t)&unk_1E0EAE1C8;
  a4[4] = (unint64_t)&protocol witness table for _SetAnyHashableBox<A>;
  *a4 = a1;
  a4[1] = v9;
}

uint64_t _SetAnyHashableBox._isEqual(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Class *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v9[2];
  uint64_t v10[5];

  outlined init with copy of MirrorPath(a1, (uint64_t)v10);
  v4 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _AnyHashableBox);
  if (!swift_dynamicCast((char *)v9, v10, v4, qword_1E0EAE1C8, 6uLL))
    return 2;
  v5 = v9[0];
  v6 = v9[1];
  v7 = specialized static Set.== infix(_:_:)(a3, v9[0]);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  return v7 & 1;
}

Swift::Int _SetAnyHashableBox._hashValue.getter(uint64_t a1, unint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  *(_QWORD *)&v3 = 0;
  *((_QWORD *)&v3 + 1) = _swift_stdlib_Hashing_parameters ^ 0x736F6D6570736575;
  v4 = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v5 = _swift_stdlib_Hashing_parameters ^ 0x6C7967656E657261;
  v6 = unk_1ECD25520 ^ 0x7465646279746573;
  v7 = 0u;
  v8 = 0u;
  specialized Set.hash(into:)(&v3, a2);
  return Hasher._finalize()();
}

void _SetAnyHashableBox._hash(into:)(__int128 *a1, uint64_t a2, unint64_t a3)
{
  specialized Set.hash(into:)(a1, a3);
}

Swift::Int __swiftcall _SetAnyHashableBox._rawHashValue(_seed:)(Swift::Int _seed)
{
  unint64_t v1;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  *(_QWORD *)&v3 = 0;
  *((_QWORD *)&v3 + 1) = _swift_stdlib_Hashing_parameters ^ _seed ^ 0x736F6D6570736575;
  v4 = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v5 = _swift_stdlib_Hashing_parameters ^ _seed ^ 0x6C7967656E657261;
  v6 = unk_1ECD25520 ^ 0x7465646279746573;
  v7 = 0u;
  v8 = 0u;
  specialized Set.hash(into:)(&v3, v1);
  return Hasher._finalize()();
}

uint64_t _SetAnyHashableBox._unbox<A>()@<X0>(unint64_t a1@<X0>, uint64_t a2@<X2>, Class *a3@<X3>, uint64_t a4@<X4>, char *a5@<X8>)
{
  Class *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  unint64_t v14;

  v14 = a1;
  v8 = (Class *)type metadata accessor for Set(0, a2, a4, (uint64_t)a3);
  swift_bridgeObjectRetain(a1, v9, v10, v11);
  v12 = swift_dynamicCast(a5, (uint64_t *)&v14, v8, a3, 6uLL);
  return (*((uint64_t (**)(char *, _QWORD, uint64_t, Class *))*(a3 - 1) + 7))(a5, v12 ^ 1u, 1, a3);
}

uint64_t _SetAnyHashableBox._downCastConditional<A>(into:)(char *a1, unint64_t a2, uint64_t a3, uint64_t a4, Class *a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  Class *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t, Class *);
  void (*v26)(char *, char *, Class *);
  uint64_t v28;
  unint64_t v29;

  v11 = type metadata accessor for Optional(0, (uint64_t)a5, a3, a4);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v28 - v14;
  v16 = (uint64_t)*(a5 - 1);
  MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = a2;
  v20 = (Class *)type metadata accessor for Set(0, a4, a6, v19);
  swift_bridgeObjectRetain(a2, v21, v22, v23);
  v24 = swift_dynamicCast(v15, (uint64_t *)&v29, v20, a5, 6uLL);
  v25 = *(void (**)(char *, uint64_t, uint64_t, Class *))(v16 + 56);
  if ((_DWORD)v24)
  {
    v25(v15, 0, 1, a5);
    v26 = *(void (**)(char *, char *, Class *))(v16 + 32);
    v26(v18, v15, a5);
    v26(a1, v18, a5);
  }
  else
  {
    v25(v15, 1, 1, a5);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  }
  return v24;
}

void protocol witness for _AnyHashableBox._canonicalBox.getter in conformance _SetAnyHashableBox<A>(uint64_t a1@<X2>, char *a2@<X3>, unint64_t *a3@<X8>)
{
  uint64_t v3;

  _SetAnyHashableBox._canonicalBox.getter(*(_QWORD *)(v3 + 8), a1, a2, a3);
}

uint64_t protocol witness for _AnyHashableBox._isEqual(to:) in conformance _SetAnyHashableBox<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _SetAnyHashableBox._isEqual(to:)(a1, a2, *(_QWORD *)(v2 + 8));
}

Swift::Int protocol witness for _AnyHashableBox._hashValue.getter in conformance _SetAnyHashableBox<A>(uint64_t a1)
{
  uint64_t v1;

  return _SetAnyHashableBox._hashValue.getter(a1, *(_QWORD *)(v1 + 8));
}

void protocol witness for _AnyHashableBox._hash(into:) in conformance _SetAnyHashableBox<A>(__int128 *a1, uint64_t a2)
{
  uint64_t v2;

  _SetAnyHashableBox._hash(into:)(a1, a2, *(_QWORD *)(v2 + 8));
}

Swift::Int protocol witness for _AnyHashableBox._rawHashValue(_seed:) in conformance _SetAnyHashableBox<A>(Swift::Int _seed)
{
  return _SetAnyHashableBox._rawHashValue(_seed:)(_seed);
}

unint64_t protocol witness for _AnyHashableBox._base.getter in conformance _SetAnyHashableBox<A>@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t *v2;

  return _SetAnyHashableBox._base.getter(*v2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t protocol witness for _AnyHashableBox._unbox<A>() in conformance _SetAnyHashableBox<A>@<X0>(Class *a1@<X0>, uint64_t a2@<X2>, char *a3@<X8>)
{
  unint64_t *v3;

  return _SetAnyHashableBox._unbox<A>()(*v3, *(_QWORD *)(a2 + 16), a1, *(_QWORD *)(a2 + 24), a3);
}

uint64_t protocol witness for _AnyHashableBox._downCastConditional<A>(into:) in conformance _SetAnyHashableBox<A>(char *a1, Class *a2, uint64_t a3)
{
  unint64_t *v3;

  return _SetAnyHashableBox._downCastConditional<A>(into:)(a1, *v3, a3, *(_QWORD *)(a3 + 16), a2, *(_QWORD *)(a3 + 24));
}

uint64_t Set.update(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Set.update(with:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t))Set._Variant.update(with:), a4);
}

void Set._Variant.update(with:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  Class *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __objc2_class **v19;
  uint64_t v20;

  v4 = v3;
  v8 = *v3;
  v9 = *(Class **)(a2 + 16);
  if ((v8 & 0xC000000000000001) != 0)
  {
    if (v8 < 0)
      v10 = (void *)v8;
    else
      v10 = (void *)(v8 & 0xFFFFFFFFFFFFFF8);
    v11 = objc_msgSend(v10, sel_count);
    if (__OFADD__(v11, 1))
    {
      __break(1u);
    }
    else
    {
      v12 = *(_QWORD *)(a2 + 24);
      v19 = _NativeSet.init(_:capacity:)(v10, (uint64_t)v11 + 1, v9, v12);
      v14 = type metadata accessor for _NativeSet(0, (uint64_t)v9, v12, v13);
      _NativeSet.update(with:isUnique:)(a1, 1, v14, a3);
      *v4 = (uint64_t)v19;
    }
  }
  else
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
    v20 = *v4;
    *v4 = 0x8000000000000000;
    v17 = type metadata accessor for _NativeSet(0, (uint64_t)v9, *(_QWORD *)(a2 + 24), v16);
    _NativeSet.update(with:isUnique:)(a1, isUniquelyReferenced_nonNull_native, v17, a3);
    v18 = *v4;
    *v4 = v20;
    swift_bridgeObjectRelease(v18);
  }
}

uint64_t Set.remove(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Set.update(with:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t))Set._Variant.remove(_:), a4);
}

uint64_t Set.update(with:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v5;

  v5 = type metadata accessor for Set._Variant(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  return a3(a1, v5);
}

void Set.remove(at:)(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v8;
  uint64_t v9;

  v8 = a3 & 1;
  v9 = type metadata accessor for Set._Variant(0, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a4);
  Set._Variant.remove(at:)(a1, a2, v8, v9, a5);
}

void Set._Variant.remove(at:)(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v10;
  Class *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  _BOOL4 isUniquelyReferenced_nonNull_native;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(char *, char *, Class *, uint64_t);
  uint64_t v53;
  void (*v54)(char *, uint64_t, Class *);
  char v55;
  void (*v56)(char *, Class *);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  _BOOL4 v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;

  v6 = v5;
  v7 = a4;
  v10 = a1;
  v12 = *(Class **)(a4 + 16);
  v67 = (uint64_t)*(v12 - 1);
  v13 = MEMORY[0x1E0C80A78](a1);
  v15 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v59 - v16;
  v18 = *v6;
  if ((*v6 & 0xC000000000000001) != 0)
  {
    if (v18 < 0)
      v19 = (void *)*v6;
    else
      v19 = (void *)(v18 & 0xFFFFFFFFFFFFFF8);
    if ((a3 & 1) == 0)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Set elements using an invalid index", 56, 2, "Swift/Set.swift", 15, 2, 0x567uLL, 0);
    if (v10 >= 0)
      v20 = v10 & 0xFFFFFFFFFFFFFF8;
    else
      v20 = v10;
    v21 = type metadata accessor for __CocoaSet.Index.Storage();
    if (swift_dynamicCastClass(v20, v21))
    {
      v25 = *(_QWORD *)(v20 + 24);
      if (*(_QWORD *)(v25 + 16) > a2)
      {
        v26 = *(void **)(v25 + 8 * a2 + 24);
        swift_unknownObjectRetain(v26, v22, v23, v24);
        swift_bridgeObjectRetain(v18, v27, v28, v29);
        _forceBridgeFromObjectiveC<A>(_:_:)(v26, v12, v30, v15);
        swift_unknownObjectRelease(v26);
        Set._Variant._migrateToNative(_:removing:)(v19, v15, v7, a5);
        swift_bridgeObjectRelease(v18);
        (*(void (**)(char *, Class *))(v67 + 8))(v15, v12);
        return;
      }
LABEL_36:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Set elements using an invalid index", 56, 2, "Swift/SetBridging.swift", 23, 2, 0x1E1uLL, 0);
    }
LABEL_37:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v6);
  v35 = *v6;
  if ((a3 & 1) != 0)
  {
    v66 = v17;
    v63 = isUniquelyReferenced_nonNull_native;
    if (v10 >= 0)
      v37 = v10 & 0xFFFFFFFFFFFFFF8;
    else
      v37 = v10;
    swift_bridgeObjectRetain(v35, v32, v33, v34);
    outlined copy of [A : B].Index._Variant<A, B>(v10, a2, 1, v38);
    v39 = type metadata accessor for __CocoaSet.Index.Storage();
    if (!swift_dynamicCastClass(v37, v39))
      goto LABEL_37;
    if (*(_DWORD *)(v35 + 36) != specialized static Hasher._hash(seed:_:)(0, *(_QWORD *)(v37 + 16)))
      goto LABEL_31;
    if (!swift_dynamicCastClass(v37, v39))
      goto LABEL_37;
    v43 = *(_QWORD *)(v37 + 24);
    if (*(_QWORD *)(v43 + 16) <= a2)
      goto LABEL_36;
    v60 = a5;
    v62 = (unint64_t *)v6;
    v44 = *(void **)(v43 + 8 * a2 + 24);
    swift_unknownObjectRetain(v44, v40, v41, v42);
    outlined consume of [A : B].Index._Variant<A, B>(v10, a2, 1);
    _forceBridgeFromObjectiveC<A>(_:_:)(v44, v12, v45, v66);
    swift_unknownObjectRelease(v44);
    v46 = *(_QWORD *)(v35 + 40);
    v61 = v7;
    v47 = *(_QWORD *)(v7 + 24);
    v48 = (*(uint64_t (**)(uint64_t, Class *, uint64_t))(v47 + 32))(v46, v12, v47);
    v49 = -1 << *(_BYTE *)(v35 + 32);
    v10 = v48 & ~v49;
    v64 = v35 + 56;
    v65 = v35;
    if (((*(_QWORD *)(v35 + 56 + (((unint64_t)v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
    {
      (*(void (**)(char *, Class *))(v67 + 8))(v66, v12);
LABEL_31:
      v36 = 287;
LABEL_18:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Set elements using an invalid index", 56, 2, "Swift/NativeSet.swift", 21, 2, v36, 0);
    }
    v50 = ~v49;
    v51 = *(_QWORD *)(v47 + 8);
    v52 = *(uint64_t (**)(char *, char *, Class *, uint64_t))(v51 + 8);
    v53 = *(_QWORD *)(v67 + 72);
    v54 = *(void (**)(char *, uint64_t, Class *))(v67 + 16);
    while (1)
    {
      v54(v15, *(_QWORD *)(v65 + 48) + v53 * v10, v12);
      v55 = v52(v15, v66, v12, v51);
      v56 = *(void (**)(char *, Class *))(v67 + 8);
      v56(v15, v12);
      if ((v55 & 1) != 0)
        break;
      v10 = (v10 + 1) & v50;
      if (((*(_QWORD *)(v64 + (((unint64_t)v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
      {
        v56(v66, v12);
        goto LABEL_31;
      }
    }
    swift_bridgeObjectRelease(v65);
    v56(v66, v12);
    v7 = v61;
    v6 = (uint64_t *)v62;
    v35 = *v62;
    a5 = v60;
    LOBYTE(isUniquelyReferenced_nonNull_native) = v63;
  }
  else if (v10 < 0
         || 1 << *(_BYTE *)(v35 + 32) <= v10
         || ((*(_QWORD *)(v35 + (((unint64_t)v10 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v10) & 1) == 0
         || *(_DWORD *)(v35 + 36) != (_DWORD)a2)
  {
    v36 = 266;
    goto LABEL_18;
  }
  v68 = v35;
  *v6 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    type metadata accessor for _NativeSet(0, (uint64_t)v12, *(_QWORD *)(v7 + 24), (uint64_t)v34);
    _NativeSet.copy()();
    v35 = v68;
  }
  (*(void (**)(uint64_t, uint64_t, Class *))(v67 + 32))(a5, *(_QWORD *)(v35 + 48) + *(_QWORD *)(v67 + 72) * v10, v12);
  type metadata accessor for _NativeSet(0, (uint64_t)v12, *(_QWORD *)(v7 + 24), v57);
  _NativeSet._delete(at:)((Swift::_HashTable::Bucket)v10);
  v58 = *v6;
  *v6 = v35;
  swift_bridgeObjectRelease(v58);
}

Swift::Void __swiftcall Set.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
  uint64_t v1;
  uint64_t v2;

  type metadata accessor for Set._Variant(0, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v2);
  Set._Variant.removeAll(keepingCapacity:)(keepingCapacity);
}

Swift::Void __swiftcall Set._Variant.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  __objc2_class **v12;
  Swift::Bool isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = v2;
  v5 = *v2;
  if (!keepingCapacity)
  {
    swift_bridgeObjectRelease(v5);
    *v2 = (uint64_t)&_swiftEmptySetSingleton;
    return;
  }
  v6 = v1;
  v7 = *(_QWORD *)(v1 + 16);
  if ((v5 & 0xC000000000000001) == 0)
  {
    if (*(uint64_t *)(v5 + 16) <= 0)
      return;
    goto LABEL_9;
  }
  if (v5 >= 0)
    v5 &= 0xFFFFFFFFFFFFFF8uLL;
  if ((uint64_t)objc_msgSend((id)v5, sel_count) > 0)
  {
LABEL_9:
    v8 = *v3;
    if ((*v3 & 0xC000000000000001) != 0)
    {
      if (v8 < 0)
        v9 = (void *)*v3;
      else
        v9 = (void *)(v8 & 0xFFFFFFFFFFFFFF8);
      v10 = objc_msgSend(v9, sel_count);
      swift_bridgeObjectRelease(v8);
      if (v10)
      {
        type metadata accessor for _SetStorage(0, v7, *(_QWORD *)(v6 + 24), v11);
        v12 = (__objc2_class **)static _SetStorage.allocate(capacity:)((uint64_t)v10);
      }
      else
      {
        v12 = &_swiftEmptySetSingleton;
      }
      *v3 = (uint64_t)v12;
    }
    else
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
      v16 = *v3;
      *v3 = 0x8000000000000000;
      type metadata accessor for _NativeSet(0, v7, *(_QWORD *)(v6 + 24), v14);
      _NativeSet.removeAll(isUnique:)(isUniquelyReferenced_nonNull_native);
      v15 = *v3;
      *v3 = v16;
      swift_bridgeObjectRelease(v15);
    }
  }
}

void Set.removeFirst()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v5;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v8 = *v5;
  if ((*v5 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)(v8 + 16))
      goto LABEL_6;
LABEL_14:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't removeFirst from an empty Set", 35, 2, "Swift/Set.swift", 15, 2, 0x275uLL, 0);
  }
  if (v8 < 0)
    v9 = (void *)*v5;
  else
    v9 = (void *)(v8 & 0xFFFFFFFFFFFFFF8);
  if (!objc_msgSend(v9, sel_count))
    goto LABEL_14;
LABEL_6:
  v10 = *v5;
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *v5 & 0xC000000000000001;
  if (!v12)
  {
    v19 = *(_QWORD *)(a1 + 24);
    v18 = _NativeSet.startIndex.getter(v10);
    v24 = v25;
    goto LABEL_16;
  }
  if (v10 < 0)
    v13 = (void *)*v5;
  else
    v13 = (void *)(v10 & 0xFFFFFFFFFFFFFF8);
  v14 = (unint64_t)objc_msgSend(swift_unknownObjectRetain(v13, a2, a3, a4), sel_count);
  v15 = type metadata accessor for __BridgingBufferStorage(0);
  if ((v14 - 0x1000000000000000) >> 61 == 7)
  {
    if (!__OFADD__(8 * v14, 24))
    {
      v16 = swift_bufferAllocate(v15, 8 * v14 + 24, 7uLL);
      v16[2] = v14;
      objc_msgSend(v13, sel_getObjects_, v16 + 3);
      swift_bridgeObjectRelease(v10);
      v17 = type metadata accessor for __CocoaSet.Index.Storage();
      v18 = (uint64_t)swift_allocObject(v17, 0x20uLL, 7uLL);
      *(_QWORD *)(v18 + 16) = v13;
      *(_QWORD *)(v18 + 24) = v16;
      v19 = *(_QWORD *)(a1 + 24);
      swift_bridgeObjectRetain(v10, v20, v21, v22);
      v24 = 0;
LABEL_16:
      v26 = type metadata accessor for Set._Variant(0, v11, v19, v23);
      Set._Variant.remove(at:)(v18, v24, v12 != 0, v26, a5);
      outlined consume of [A : B].Index._Variant<A, B>(v18, v24, v12 != 0);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

__objc2_class **Set.init<A>(_:)(uint64_t a1, uint64_t a2, Class *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t AssociatedTypeWitness;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  Class *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __objc2_class **v31;
  unint64_t AssociatedConformanceWitness;
  void (*v33)(unint64_t);
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  int v36;
  id *v37;
  char *v38;
  uint64_t v39;
  void (*v40)(id *, char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  id *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  __objc2_class **v51;

  v45 = *(_QWORD *)(a2 - 8);
  v10 = MEMORY[0x1E0C80A78](a1);
  v44 = (id *)((char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v10);
  v47 = (char *)&v44 - v12;
  v16 = type metadata accessor for Optional(0, v13, v14, v15);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v44 - v17;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a5, (uint64_t)a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v46 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v20 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v50 = (char *)&v44 - v21;
  v22 = (uint64_t)*(a3 - 1);
  MEMORY[0x1E0C80A78](v20);
  v24 = (uint64_t *)((char *)&v44 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, Class *))(v22 + 16))(v24, a1, a3);
  v26 = (Class *)type metadata accessor for Set(0, a2, a4, v25);
  if ((swift_dynamicCast((char *)&v51, v24, a3, v26, 6uLL) & 1) != 0)
  {
    (*(void (**)(uint64_t, Class *))(v22 + 8))(a1, a3);
  }
  else
  {
    v27 = (*(uint64_t (**)(Class *, uint64_t))(a5 + 40))(a3, a5);
    if (v27)
    {
      v29 = v27;
      v30 = a4;
      type metadata accessor for _SetStorage(0, a2, a4, v28);
      v31 = (__objc2_class **)static _SetStorage.allocate(capacity:)(v29);
    }
    else
    {
      v30 = a4;
      v31 = &_swiftEmptySetSingleton;
    }
    v51 = v31;
    (*(void (**)(Class *, uint64_t))(a5 + 32))(a3, a5);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, (uint64_t)a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
    v33 = *(void (**)(unint64_t))(AssociatedConformanceWitness + 16);
    v48 = AssociatedConformanceWitness;
    v49 = AssociatedTypeWitness;
    v33(AssociatedTypeWitness);
    v34 = v45;
    v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48);
    v36 = v35(v18, 1, a2);
    v37 = v44;
    v38 = v47;
    if (v36 != 1)
    {
      v39 = v30;
      v40 = *(void (**)(id *, char *, uint64_t))(v34 + 32);
      do
      {
        v40(v37, v18, a2);
        v42 = type metadata accessor for Set._Variant(0, a2, v39, v41);
        Set._Variant.insert(_:)(v38, v37, v42);
        (*(void (**)(char *, uint64_t))(v34 + 8))(v38, a2);
        ((void (*)(unint64_t, unint64_t))v33)(v49, v48);
      }
      while (v35(v18, 1, a2) != 1);
    }
    (*(void (**)(char *, unint64_t))(v46 + 8))(v50, v49);
  }
  return v51;
}

uint64_t Set.isSubset<A>(of:)(uint64_t a1, uint64_t a2, Class *a3, Class *a4, uint64_t a5, uint64_t a6)
{
  Class *v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  Class *v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t WitnessTable;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  Class *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void *v38;
  Class *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  Class *v45;
  uint64_t v46;

  v8 = a4;
  v11 = a1;
  v12 = (uint64_t)*(a4 - 1);
  MEMORY[0x1E0C80A78](a1);
  v14 = (uint64_t *)((char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = type metadata accessor for Optional(0, v15, v15, v16);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v44 - v19;
  v21 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0)
  {
    v44 = a2 & 0xC000000000000001;
    v45 = a3;
    v22 = v8;
    v23 = v11;
    if (a2 < 0)
      v24 = (void *)a2;
    else
      v24 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
    if (objc_msgSend(v24, sel_count, v44, v45))
    {
      v25 = objc_msgSend(v24, sel_count);
      v11 = v23;
      v8 = v22;
      v21 = v44;
      a3 = v45;
      goto LABEL_8;
    }
LABEL_12:
    v31 = 1;
    return v31 & 1;
  }
  v25 = *(id *)(a2 + 16);
  if (!v25)
    goto LABEL_12;
LABEL_8:
  if (v25 == (id)1)
  {
    v46 = a2;
    v26 = type metadata accessor for Set(0, (uint64_t)a3, a5, v18);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v26, v27);
    Collection.first.getter(v26, WitnessTable, (uint64_t)v20);
    v29 = (uint64_t)*(a3 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, Class *))(v29 + 48))(v20, 1, a3) == 1)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/Set.swift", 15, 2, 0x2CAuLL, 0);
    v30 = (*(uint64_t (**)(char *, Class *, uint64_t))(a6 + 48))(v20, v8, a6);
    if (v30 == 2)
    {
      MEMORY[0x1E0C80A78](v30);
      v40 = v8;
      v41 = a6;
      v42 = *(_QWORD *)(a5 + 8);
      v43 = v20;
      v31 = Sequence.contains(where:)((uint64_t (*)(char *))partial apply for closure #1 in Sequence<>.contains(_:), (uint64_t)(&v44 - 6), (uint64_t)v8, (const char *)a6);
    }
    else
    {
      v31 = v30 & 1;
    }
    (*(void (**)(char *, Class *))(v29 + 8))(v20, a3);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t, Class *))(v12 + 16))(v14, v11, v8);
    v33 = (Class *)type metadata accessor for Set(0, (uint64_t)a3, a5, v32);
    if (swift_dynamicCast((char *)&v46, v14, v8, v33, 6uLL))
    {
      v37 = v46;
      v31 = Set.isSubset(of:)(v46, a2, a3, a5);
      swift_bridgeObjectRelease(v37);
    }
    else
    {
      if (v21)
      {
        if (a2 < 0)
          v38 = (void *)a2;
        else
          v38 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
        swift_bridgeObjectRetain(a2, v34, v35, v36);
        a2 = (uint64_t)_NativeSet.init(_:capacity:)(v38, (uint64_t)objc_msgSend(v38, sel_count), a3, a5);
      }
      else
      {
        swift_bridgeObjectRetain(a2, v34, v35, v36);
      }
      v31 = _NativeSet.isSubset<A>(of:)(v11, a2, (uint64_t)a3, (uint64_t)v8, a5, a6, (void (*)(unsigned __int8 *__return_ptr, int64x2_t *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in _NativeSet.isSubset<A>(of:));
      swift_release(a2);
    }
  }
  return v31 & 1;
}

uint64_t Set.isSubset(of:)(uint64_t a1, int64_t a2, Class *a3, uint64_t a4)
{
  Class *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  void **v52;
  void *v53;
  void (*v54)(uint64_t *, uint64_t, uint64_t, Class *);
  int64_t v55;
  unint64_t v56;
  uint64_t v57;
  void (*v58)(id *, char *, Class *);
  uint64_t v59;
  uint64_t v60;
  char *v61;
  id *v62;
  void *v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(id *, id *, Class *, uint64_t);
  uint64_t v70;
  uint64_t v71;
  void (*v72)(id *, unint64_t, Class *);
  Class *v73;
  id *v74;
  char v75;
  void (*v76)(id *, Class *);
  id *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  Class *v91;
  uint64_t v92;
  int64_t v93;
  id v94;
  int64_t v95;
  char *v96;
  unint64_t v97;
  char *v98;
  unint64_t v99;
  uint64_t v100;
  int64_t v101;
  unint64_t v102;
  int64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  id *v107;
  Class *v108;
  id *v109;
  void *v110;

  v5 = a3;
  v7 = a1;
  v8 = (uint64_t)*(a3 - 1);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = MEMORY[0x1E0C80A78](a1);
  v107 = (id *)((char *)&v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v10);
  v109 = (id *)((char *)&v82 - v11);
  v89 = type metadata accessor for Optional(0, v12, v12, v13);
  v14 = *(_QWORD *)(v89 - 8);
  v15 = MEMORY[0x1E0C80A78](v89);
  v96 = (char *)&v82 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  v90 = (uint64_t *)((char *)&v82 - v18);
  MEMORY[0x1E0C80A78](v17);
  v98 = (char *)&v82 - v22;
  if ((a2 & 0xC000000000000001) != 0)
  {
    if (a2 < 0)
      v23 = (void *)a2;
    else
      v23 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
    v24 = objc_msgSend(v23, sel_count);
  }
  else
  {
    v24 = *(id *)(a2 + 16);
  }
  v97 = v7 & 0xC000000000000001;
  if ((v7 & 0xC000000000000001) != 0)
  {
    if (v7 < 0)
      v25 = (void *)v7;
    else
      v25 = (void *)(v7 & 0xFFFFFFFFFFFFFF8);
    v26 = objc_msgSend(v25, sel_count);
  }
  else
  {
    v26 = *(id *)(v7 + 16);
  }
  v27 = v96;
  if ((uint64_t)v26 < (uint64_t)v24)
    return 0;
  if ((a2 & 0xC000000000000001) != 0)
  {
    if (a2 < 0)
      v29 = a2;
    else
      v29 = a2 & 0xFFFFFFFFFFFFFF8;
    v30 = type metadata accessor for __CocoaSet.Iterator();
    v31 = (unint64_t)swift_allocObject(v30, 0xE8uLL, 7uLL);
    v93 = 0;
    v32 = 0;
    v33 = 0;
    *(_QWORD *)(v31 + 208) = v29;
    *(_QWORD *)(v31 + 216) = 0;
    *(_OWORD *)(v31 + 16) = 0u;
    *(_OWORD *)(v31 + 32) = 0u;
    *(_OWORD *)(v31 + 48) = 0u;
    *(_OWORD *)(v31 + 64) = 0u;
    *(_OWORD *)(v31 + 80) = 0u;
    *(_OWORD *)(v31 + 96) = 0u;
    *(_OWORD *)(v31 + 112) = 0u;
    *(_OWORD *)(v31 + 128) = 0u;
    *(_OWORD *)(v31 + 144) = 0u;
    *(_OWORD *)(v31 + 160) = 0u;
    *(_OWORD *)(v31 + 176) = 0u;
    *(_OWORD *)(v31 + 192) = 0u;
    *(_QWORD *)(v31 + 224) = 0;
    v34 = v31 | 0x8000000000000000;
  }
  else
  {
    v35 = -1 << *(_BYTE *)(a2 + 32);
    v32 = ~v35;
    v36 = *(_QWORD *)(a2 + 56);
    v93 = a2 + 56;
    v37 = -v35;
    if (v37 < 64)
      v38 = ~(-1 << v37);
    else
      v38 = -1;
    v33 = v38 & v36;
    v34 = a2;
  }
  v39 = v98;
  v102 = v34;
  v40 = v34 & 0x7FFFFFFFFFFFFFFFLL;
  v87 = v40 + 16;
  v92 = v40;
  v86 = v40 + 80;
  v88 = v32;
  v41 = (void *)(v7 & 0xFFFFFFFFFFFFFF8);
  if (v7 < 0)
    v41 = (void *)v7;
  v94 = v41;
  v95 = (unint64_t)(v32 + 64) >> 6;
  v106 = v7 + 56;
  swift_bridgeObjectRetain(a2, v19, v20, v21);
  v103 = 0;
  v91 = qword_1E0EB1350;
  v45 = v33;
  v85 = a4;
  v108 = v5;
  v105 = v7;
  v84 = v9;
  v83 = v14;
  while (1)
  {
    v46 = v102;
    v99 = v45;
    if ((v102 & 0x8000000000000000) == 0)
    {
      if (v45)
      {
        v100 = (v45 - 1) & v45;
        v47 = __clz(__rbit64(v45)) | (v103 << 6);
        v101 = v103;
      }
      else
      {
        v55 = v103 + 1;
        if (__OFADD__(v103, 1))
        {
          __break(1u);
LABEL_81:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/SetBridging.swift", 23, 2, 0x254uLL, 0);
        }
        if (v55 >= v95)
        {
LABEL_67:
          v28 = 1;
          (*(void (**)(char *, uint64_t, uint64_t, Class *))(v8 + 56))(v39, 1, 1, v5);
          v99 = 0;
          goto LABEL_72;
        }
        v56 = *(_QWORD *)(v93 + 8 * v55);
        if (!v56)
        {
          v57 = v103 + 2;
          if (v103 + 2 >= v95)
            goto LABEL_67;
          v56 = *(_QWORD *)(v93 + 8 * v57);
          if (!v56)
          {
            while (1)
            {
              v55 = v57 + 1;
              if (__OFADD__(v57, 1))
                break;
              if (v55 >= v95)
                goto LABEL_67;
              v56 = *(_QWORD *)(v93 + 8 * v55);
              ++v57;
              if (v56)
                goto LABEL_49;
            }
            __break(1u);
LABEL_78:
            __break(1u);
LABEL_79:
            _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x4F9uLL, 0);
          }
          v55 = v103 + 2;
        }
LABEL_49:
        v100 = (v56 - 1) & v56;
        v101 = v55;
        v47 = __clz(__rbit64(v56)) + (v55 << 6);
        v46 = v102;
      }
      (*(void (**)(char *, unint64_t, Class *))(v8 + 16))(v39, *(_QWORD *)(v46 + 48) + *(_QWORD *)(v8 + 72) * v47, v5);
      v54 = *(void (**)(uint64_t *, uint64_t, uint64_t, Class *))(v8 + 56);
      goto LABEL_51;
    }
    v48 = (_QWORD *)v92;
    v49 = *(_QWORD *)(v92 + 216);
    if (v49 < 0)
      goto LABEL_75;
    if (v49 == *(_QWORD *)(v92 + 224))
      break;
LABEL_34:
    v51 = v48[3];
    if (!v51)
      goto LABEL_81;
    if ((unint64_t)(v49 - 0x1000000000000000) >> 61 != 7)
      goto LABEL_78;
    v52 = (void **)(v51 + 8 * v49);
    if ((v52 & 7) != 0)
      goto LABEL_79;
    v53 = *v52;
    v48[27] = v49 + 1;
    swift_unknownObjectRetain(v53, v42, v43, v44);
    if (_swift_isClassOrObjCExistentialType((uint64_t)v5, (uint64_t *)v5))
    {
      v110 = v53;
      swift_dynamicCast(v39, (uint64_t *)&v110, v91, v5, 7uLL);
      v54 = *(void (**)(uint64_t *, uint64_t, uint64_t, Class *))(v8 + 56);
    }
    else
    {
      v54 = *(void (**)(uint64_t *, uint64_t, uint64_t, Class *))(v8 + 56);
      v54(v90, 1, 1, v5);
      _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)((swift *)v53, (uint64_t)v5, v90);
      swift_unknownObjectRelease(v53);
      v80 = v89;
      (*(void (**)(char *, uint64_t *, uint64_t))(v14 + 16))(v27, v90, v89);
      if ((*(unsigned int (**)(char *, uint64_t, Class *))(v8 + 48))(v27, 1, v5) == 1)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/BridgeObjectiveC.swift", 28, 2, 0xFCuLL, 0);
      (*(void (**)(uint64_t *, uint64_t))(v14 + 8))(v90, v80);
      (*(void (**)(char *, char *, Class *))(v8 + 32))(v39, v27, v5);
    }
    v100 = v99;
    v101 = v103;
LABEL_51:
    v54((uint64_t *)v39, 0, 1, v5);
    v58 = *(void (**)(id *, char *, Class *))(v8 + 32);
    v58(v109, v39, v5);
    if (v97)
    {
      if (_swift_isClassOrObjCExistentialType((uint64_t)v5, (uint64_t *)v5))
      {
        if (v9 != 8)
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
        v62 = v109;
        v63 = *v109;
        swift_unknownObjectRetain(*v109, v59, v60, v61);
        (*(void (**)(id *, Class *))(v8 + 8))(v62, v5);
      }
      else
      {
        v77 = v107;
        v58(v107, (char *)v109, v5);
        v63 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v77, (uint64_t *)v5, v78, v79);
      }
      v64 = objc_msgSend(v94, sel_member_, v63);
      swift_unknownObjectRelease(v63);
      if (!v64)
        goto LABEL_71;
      swift_unknownObjectRelease(v64);
      v45 = v100;
      v103 = v101;
      v39 = v98;
    }
    else
    {
      if (!*(_QWORD *)(v7 + 16))
      {
        (*(void (**)(id *, Class *))(v8 + 8))(v109, v5);
LABEL_71:
        v28 = 0;
        goto LABEL_72;
      }
      v65 = (*(uint64_t (**)(_QWORD, Class *, uint64_t))(a4 + 32))(*(_QWORD *)(v7 + 40), v5, a4);
      v66 = -1 << *(_BYTE *)(v7 + 32);
      v67 = v65 & ~v66;
      if (((*(_QWORD *)(v106 + ((v67 >> 3) & 0xFFFFFFFFFFFFF8)) >> v67) & 1) == 0)
      {
        v76 = *(void (**)(id *, Class *))(v8 + 8);
LABEL_70:
        v76(v109, v108);
        goto LABEL_71;
      }
      v104 = ~v66;
      v68 = *(_QWORD *)(a4 + 8);
      v69 = *(uint64_t (**)(id *, id *, Class *, uint64_t))(v68 + 8);
      v70 = *(_QWORD *)(v8 + 72);
      v71 = v8;
      v72 = *(void (**)(id *, unint64_t, Class *))(v8 + 16);
      while (1)
      {
        v74 = v107;
        v73 = v108;
        v72(v107, *(_QWORD *)(v105 + 48) + v70 * v67, v108);
        v75 = v69(v74, v109, v73, v68);
        v76 = *(void (**)(id *, Class *))(v71 + 8);
        v76(v74, v73);
        if ((v75 & 1) != 0)
          break;
        v67 = (v67 + 1) & v104;
        if (((*(_QWORD *)(v106 + ((v67 >> 3) & 0xFFFFFFFFFFFFF8)) >> v67) & 1) == 0)
          goto LABEL_70;
      }
      v5 = v108;
      v76(v109, v108);
      v45 = v100;
      v103 = v101;
      v8 = v71;
      a4 = v85;
      v7 = v105;
      v9 = v84;
      v14 = v83;
      v27 = v96;
      v39 = v98;
    }
  }
  v50 = objc_msgSend(*(id *)(v92 + 208), sel_countByEnumeratingWithState_objects_count_, v87, v86, 16);
  v48[28] = v50;
  if (v50)
  {
    v49 = 0;
    v48[27] = 0;
    goto LABEL_34;
  }
  v48[27] = -1;
LABEL_75:
  v28 = 1;
  (*(void (**)(char *, uint64_t, uint64_t, Class *))(v8 + 56))(v39, 1, 1, v5);
LABEL_72:
  outlined consume of [A : B].Iterator._Variant<A, B>(v102);
  return v28;
}

uint64_t Set.isStrictSubset<A>(of:)(uint64_t a1, uint64_t a2, Class *a3, Class *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Class *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char v22;
  void *v23;
  uint64_t v25;
  uint64_t v26;

  MEMORY[0x1E0C80A78](a1);
  v13 = (uint64_t *)((char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v14 + 16))(v13, a1, v15);
  v17 = (Class *)type metadata accessor for Set(0, (uint64_t)a3, a5, v16);
  if (swift_dynamicCast((char *)&v26, v13, a4, v17, 6uLL))
  {
    v21 = v26;
    v22 = Set.isStrictSubset(of:)(v26, a2, a3, a5);
    swift_bridgeObjectRelease(v21);
  }
  else
  {
    if ((a2 & 0xC000000000000001) != 0)
    {
      if (a2 < 0)
        v23 = (void *)a2;
      else
        v23 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
      swift_bridgeObjectRetain(a2, v18, v19, v20);
      a2 = (uint64_t)_NativeSet.init(_:capacity:)(v23, (uint64_t)objc_msgSend(v23, sel_count), a3, a5);
    }
    else
    {
      swift_bridgeObjectRetain(a2, v18, v19, v20);
    }
    v22 = _NativeSet.isSubset<A>(of:)(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, (void (*)(unsigned __int8 *__return_ptr, int64x2_t *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in _NativeSet.isStrictSubset<A>(of:));
    swift_release(a2);
  }
  return v22 & 1;
}

uint64_t Set.isStrictSubset(of:)(uint64_t a1, int64_t a2, Class *a3, uint64_t a4)
{
  void *v8;
  id v9;
  void *v10;

  if ((a2 & 0xC000000000000001) != 0)
  {
    if (a2 < 0)
      v8 = (void *)a2;
    else
      v8 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
    v9 = objc_msgSend(v8, sel_count);
    if ((a1 & 0xC000000000000001) != 0)
    {
LABEL_6:
      if (a1 < 0)
        v10 = (void *)a1;
      else
        v10 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
      if ((uint64_t)v9 < (uint64_t)objc_msgSend(v10, sel_count))
        return Set.isSubset(of:)(a1, a2, a3, a4);
      return 0;
    }
  }
  else
  {
    v9 = *(id *)(a2 + 16);
    if ((a1 & 0xC000000000000001) != 0)
      goto LABEL_6;
  }
  if ((uint64_t)v9 < *(_QWORD *)(a1 + 16))
    return Set.isSubset(of:)(a1, a2, a3, a4);
  return 0;
}

uint64_t Set.isSuperset<A>(of:)(uint64_t a1, uint64_t a2, Class *a3, Class *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t AssociatedTypeWitness;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  Class *v27;
  uint64_t v28;
  char v29;
  unint64_t AssociatedConformanceWitness;
  char *v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void (*v39)(id *, char *, Class *);
  void *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  id *v44;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(id *, id *, Class *, uint64_t);
  uint64_t v52;
  void (*v53)(id *, unint64_t, Class *);
  id *v54;
  char v55;
  void (*v56)(id *, Class *);
  id *v57;
  uint64_t v58;
  char *v59;
  unint64_t v61;
  char *v62;
  char *v63;
  unint64_t v64;
  id v65;
  unint64_t v66;
  void (*v67)(id *, char *, Class *);
  uint64_t (*v68)(char *, uint64_t, Class *);
  void (*v69)(unint64_t, unint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id *v75;
  uint64_t v76;
  id *v77;
  int64_t v78;

  v76 = a2;
  v73 = (uint64_t)*(a3 - 1);
  v11 = MEMORY[0x1E0C80A78](a1);
  v75 = (id *)((char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v71 = v12;
  MEMORY[0x1E0C80A78](v11);
  v77 = (id *)((char *)&v61 - v13);
  v16 = type metadata accessor for Optional(0, v14, v14, v15);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v61 - v17;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a6, (uint64_t)a4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v70 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v20 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v22 = (char *)&v61 - v21;
  v23 = (uint64_t)*(a4 - 1);
  MEMORY[0x1E0C80A78](v20);
  v25 = (uint64_t *)((char *)&v61 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, Class *))(v23 + 16))(v25, a1, a4);
  v72 = a5;
  v27 = (Class *)type metadata accessor for Set(0, (uint64_t)a3, a5, v26);
  if (swift_dynamicCast((char *)&v78, v25, a4, v27, 6uLL))
  {
    (*(void (**)(uint64_t, Class *))(v23 + 8))(a1, a4);
    v28 = v78;
    v29 = Set.isSubset(of:)(v76, v78, a3, v72);
    swift_bridgeObjectRelease(v28);
    return v29 & 1;
  }
  (*(void (**)(Class *, uint64_t))(a6 + 32))(a4, a6);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a6, (uint64_t)a4, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v31 = v22;
  v69 = *(void (**)(unint64_t, unint64_t))(AssociatedConformanceWitness + 16);
  v69(AssociatedTypeWitness, AssociatedConformanceWitness);
  v32 = v73;
  v68 = *(uint64_t (**)(char *, uint64_t, Class *))(v73 + 48);
  v33 = v68(v18, 1, a3);
  v34 = AssociatedTypeWitness;
  v35 = v72;
  v36 = v76;
  if (v33 == 1)
  {
LABEL_4:
    (*(void (**)(char *, unint64_t))(v70 + 8))(v31, v34);
    v29 = 1;
    return v29 & 1;
  }
  v37 = v18;
  v38 = v32;
  v39 = *(void (**)(id *, char *, Class *))(v32 + 32);
  v66 = v76 & 0xC000000000000001;
  v67 = v39;
  v40 = (void *)(v76 & 0xFFFFFFFFFFFFFF8);
  if (v76 < 0)
    v40 = (void *)v76;
  v64 = v34;
  v65 = v40;
  v74 = v76 + 56;
  v62 = v37;
  v63 = v31;
  v61 = AssociatedConformanceWitness;
  while (1)
  {
    v67(v77, v37, a3);
    if (!v66)
      break;
    if (_swift_isClassOrObjCExistentialType((uint64_t)a3, (uint64_t *)a3))
    {
      if (v71 != 8)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
      v44 = v77;
      v45 = *v77;
      swift_unknownObjectRetain(*v77, v41, v42, v43);
      (*(void (**)(id *, Class *))(v38 + 8))(v44, a3);
    }
    else
    {
      v57 = v75;
      v67(v75, (char *)v77, a3);
      v45 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v57, (uint64_t *)a3, v58, v59);
    }
    v46 = objc_msgSend(v65, sel_member_, v45, v61, v62);
    swift_unknownObjectRelease(v45);
    if (!v46)
      goto LABEL_26;
    swift_unknownObjectRelease(v46);
LABEL_21:
    v69(v34, AssociatedConformanceWitness);
    if (v68(v37, 1, a3) == 1)
      goto LABEL_4;
  }
  if (*(_QWORD *)(v36 + 16))
  {
    v47 = (*(uint64_t (**)(_QWORD, Class *, uint64_t))(v35 + 32))(*(_QWORD *)(v36 + 40), a3, v35);
    v48 = -1 << *(_BYTE *)(v36 + 32);
    v49 = v47 & ~v48;
    if (((*(_QWORD *)(v74 + ((v49 >> 3) & 0xFFFFFFFFFFFFF8)) >> v49) & 1) != 0)
    {
      v73 = ~v48;
      v50 = *(_QWORD *)(v35 + 8);
      v51 = *(uint64_t (**)(id *, id *, Class *, uint64_t))(v50 + 8);
      v52 = *(_QWORD *)(v38 + 72);
      v53 = *(void (**)(id *, unint64_t, Class *))(v38 + 16);
      while (1)
      {
        v54 = v75;
        v53(v75, *(_QWORD *)(v76 + 48) + v52 * v49, a3);
        v55 = v51(v54, v77, a3, v50);
        v56 = *(void (**)(id *, Class *))(v38 + 8);
        v56(v54, a3);
        if ((v55 & 1) != 0)
          break;
        v49 = (v49 + 1) & v73;
        if (((*(_QWORD *)(v74 + ((v49 >> 3) & 0xFFFFFFFFFFFFF8)) >> v49) & 1) == 0)
          goto LABEL_25;
      }
      v56(v77, a3);
      v35 = v72;
      v36 = v76;
      v31 = v63;
      v34 = v64;
      AssociatedConformanceWitness = v61;
      v37 = v62;
      goto LABEL_21;
    }
  }
  v56 = *(void (**)(id *, Class *))(v38 + 8);
LABEL_25:
  v56(v77, a3);
  v31 = v63;
  v34 = v64;
LABEL_26:
  (*(void (**)(char *, unint64_t))(v70 + 8))(v31, v34);
  v29 = 0;
  return v29 & 1;
}

uint64_t Set.isSuperset(of:)(int64_t a1, uint64_t a2, Class *a3, uint64_t a4)
{
  return Set.isSubset(of:)(a2, a1, a3, a4);
}

uint64_t Set.isStrictSuperset<A>(of:)(uint64_t a1, uint64_t a2, Class *a3, Class *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  Class *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char v24;
  void *v25;
  uint64_t v27;
  int64_t v28;

  v12 = (uint64_t)*(a4 - 1);
  MEMORY[0x1E0C80A78](a1);
  v14 = (uint64_t *)((char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = v15 & 0xC000000000000001;
  if ((v15 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)(a2 + 16))
      goto LABEL_6;
LABEL_9:
    v24 = 0;
    return v24 & 1;
  }
  if (a2 < 0)
    v17 = (void *)a2;
  else
    v17 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
  if (!objc_msgSend(v17, sel_count))
    goto LABEL_9;
LABEL_6:
  (*(void (**)(uint64_t *, uint64_t, Class *))(v12 + 16))(v14, a1, a4);
  v19 = (Class *)type metadata accessor for Set(0, (uint64_t)a3, a5, v18);
  if (swift_dynamicCast((char *)&v28, v14, a4, v19, 6uLL))
  {
    v23 = v28;
    v24 = Set.isStrictSuperset(of:)(v28, a2, a3, a5);
    swift_bridgeObjectRelease(v23);
  }
  else
  {
    if (v16)
    {
      if (a2 < 0)
        v25 = (void *)a2;
      else
        v25 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
      swift_bridgeObjectRetain(a2, v20, v21, v22);
      a2 = (uint64_t)_NativeSet.init(_:capacity:)(v25, (uint64_t)objc_msgSend(v25, sel_count), a3, a5);
    }
    else
    {
      swift_bridgeObjectRetain(a2, v20, v21, v22);
    }
    v24 = _NativeSet.isSubset<A>(of:)(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, (void (*)(unsigned __int8 *__return_ptr, int64x2_t *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in _NativeSet.isStrictSuperset<A>(of:));
    swift_release(a2);
  }
  return v24 & 1;
}

uint64_t Set.isStrictSuperset(of:)(int64_t a1, uint64_t a2, Class *a3, uint64_t a4)
{
  void *v8;
  id v9;
  void *v10;

  if ((a2 & 0xC000000000000001) != 0)
  {
    if (a2 < 0)
      v8 = (void *)a2;
    else
      v8 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
    v9 = objc_msgSend(v8, sel_count);
    if ((a1 & 0xC000000000000001) != 0)
    {
LABEL_6:
      if (a1 < 0)
        v10 = (void *)a1;
      else
        v10 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
      if ((uint64_t)objc_msgSend(v10, sel_count) < (uint64_t)v9)
        return Set.isSubset(of:)(a2, a1, a3, a4);
      return 0;
    }
  }
  else
  {
    v9 = *(id *)(a2 + 16);
    if ((a1 & 0xC000000000000001) != 0)
      goto LABEL_6;
  }
  if (*(_QWORD *)(a1 + 16) < (uint64_t)v9)
    return Set.isSubset(of:)(a2, a1, a3, a4);
  return 0;
}

uint64_t Set.isDisjoint<A>(with:)(uint64_t a1, uint64_t a2, Class *a3, Class *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Class *v17;
  uint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;

  MEMORY[0x1E0C80A78](a1);
  v13 = (uint64_t *)((char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v14 + 16))(v13, a1, v15);
  v17 = (Class *)type metadata accessor for Set(0, (uint64_t)a3, a5, v16);
  if (swift_dynamicCast((char *)&v22, v13, a4, v17, 6uLL))
  {
    v18 = v22;
    v19 = Set.isDisjoint(with:)(v22, a2, a3, a5);
    swift_bridgeObjectRelease(v18);
  }
  else
  {
    v19 = Set._isDisjoint<A>(with:)(a1, a2, (uint64_t *)a3, (uint64_t)a4, a5, a6);
  }
  return v19 & 1;
}

